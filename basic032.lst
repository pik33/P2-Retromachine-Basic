00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 F4 18 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 18 02 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 28 FF 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 20 79 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 08 F2 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 60 ED 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 6C 5A 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 48 F9 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 D4 8B 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 84 B3 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 3C B1 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 14 C3 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 7C 1D 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     A4 29 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     38 3E B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     52 00 00 FF 
00844     1C E4 05 F1 | 	add	objptr, ##42012
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     1C E4 85 F1 | 	sub	objptr, ##42012
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     30 41 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     84 48 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     7C 42 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     E0 E5 05 F1 | 	add	objptr, ##41952
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     10 E5 85 F1 | 	sub	objptr, ##36112
009c0     40 40 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     7C 0E B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     1C E4 05 F1 | 	add	objptr, ##42012
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     1C E4 85 F1 | 	sub	objptr, ##42012
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     04 E4 05 F1 | 	add	objptr, ##41988
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     04 E4 85 F1 | 	sub	objptr, ##41988
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     74 0C B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     14 0C B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     24 E4 05 F1 | 	add	objptr, ##42020
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     E6 E5 85 F1 | 	sub	objptr, ##41958
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     E8 E5 05 F1 | 	add	objptr, ##41960
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     E6 E5 85 F1 | 	sub	objptr, ##41958
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     A4 0B B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     EC 23 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     24 E4 05 F1 | 	add	objptr, ##42020
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     24 E4 85 F1 | 	sub	objptr, ##42020
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     08 27 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     6C 3D B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     C0 44 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     BC 3E B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     A5 01 00 FF 
00ccc     12 50 06 F6 | 	mov	local22, ##@LR__5327
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     38 0A B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     9C 63 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     AC 41 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     04 E4 05 F1 | 	add	objptr, ##41988
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     04 E4 85 F1 | 	sub	objptr, ##41988
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     58 2B B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     88 2D B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     F8 3B B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     4C 43 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     48 3D B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     D4 08 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     C8 22 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     BC 22 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     4C 22 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     18 22 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     38 22 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     28 22 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     78 07 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     24 07 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     F4 06 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     24 E4 05 F1 | 	add	objptr, ##42020
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     E6 E5 85 F1 | 	sub	objptr, ##41958
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     E8 E5 05 F1 | 	add	objptr, ##41960
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     E6 E5 85 F1 | 	sub	objptr, ##41958
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     8C 06 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     D4 1E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     24 E4 05 F1 | 	add	objptr, ##42020
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     24 E4 85 F1 | 	sub	objptr, ##42020
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     B0 1F B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     74 05 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     20 05 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     F0 04 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     24 E4 05 F1 | 	add	objptr, ##42020
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     E6 E5 85 F1 | 	sub	objptr, ##41958
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     E8 E5 05 F1 | 	add	objptr, ##41960
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     E6 E5 85 F1 | 	sub	objptr, ##41958
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     88 04 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     D0 1C B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     24 E4 05 F1 | 	add	objptr, ##42020
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     24 E4 85 F1 | 	sub	objptr, ##42020
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     A5 01 00 FF 
01328     13 50 06 F6 | 	mov	local22, ##@LR__5328
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     CA E5 05 F1 | 	add	objptr, ##41930
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     08 E4 85 F1 | 	sub	objptr, ##41992
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     08 E4 05 C1 |  if_b	add	objptr, ##41992
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     08 E4 85 C1 |  if_b	sub	objptr, ##41992
0137c     52 00 00 FF 
01380     08 E4 05 F1 | 	add	objptr, ##41992
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     08 E4 85 F1 | 	sub	objptr, ##41992
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     F8 1D B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     CA E5 05 F1 | 	add	objptr, ##41930
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     08 E4 85 F1 | 	sub	objptr, ##41992
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     08 E4 05 31 |  if_ae	add	objptr, ##41992
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     08 E4 85 31 |  if_ae	sub	objptr, ##41992
013dc     52 00 00 FF 
013e0     08 E4 05 F1 | 	add	objptr, ##41992
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     08 E4 85 F1 | 	sub	objptr, ##41992
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     98 1D B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     D0 E5 05 F1 | 	add	objptr, ##41936
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     D8 E5 85 F1 | 	sub	objptr, ##13784
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     D8 E5 05 C1 |  if_b	add	objptr, ##13784
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     0C E4 85 C1 |  if_b	sub	objptr, ##41996
01458     52 00 00 FF 
0145c     0C E4 05 F1 | 	add	objptr, ##41996
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     0C E4 85 F1 | 	sub	objptr, ##41996
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     EC 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     D0 E5 05 F1 | 	add	objptr, ##41936
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     0C E4 85 F1 | 	sub	objptr, ##41996
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     0C E4 05 31 |  if_ae	add	objptr, ##41996
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     0C E4 85 31 |  if_ae	sub	objptr, ##41996
014b8     52 00 00 FF 
014bc     0C E4 05 F1 | 	add	objptr, ##41996
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     0C E4 85 F1 | 	sub	objptr, ##41996
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     90 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     04 E4 05 F1 | 	add	objptr, ##41988
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     04 E4 85 F1 | 	sub	objptr, ##41988
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     DC 0A B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     CC 0A B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     87 E5 05 F1 | 	add	objptr, ##41863
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     D0 E5 85 F1 | 	sub	objptr, ##41936
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     00 3C B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     D0 E5 05 F1 | 	add	objptr, ##41936
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     D0 E5 85 F1 | 	sub	objptr, ##41936
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     D8 3B B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     D0 E5 05 F1 | 	add	objptr, ##41936
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     D0 E5 85 F1 | 	sub	objptr, ##41936
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     B0 3B B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     D0 E5 05 F1 | 	add	objptr, ##41936
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     D0 E5 85 F1 | 	sub	objptr, ##41936
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     08 31 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     58 31 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     48 31 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     58 E5 05 F1 | 	add	objptr, ##41816
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     74 E5 85 F1 | 	sub	objptr, ##41844
016dc     AC 30 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     58 E5 05 F1 | 	add	objptr, ##41816
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     74 E5 85 F1 | 	sub	objptr, ##41844
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     10 5C B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     48 5B B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     C8 E5 05 F1 | 	add	objptr, ##13768
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     70 E5 85 F1 | 	sub	objptr, ##3952
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     A5 01 00 FF 
01800     14 16 06 F6 | 	mov	arg03, ##@LR__5329
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     38 5B B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     70 5A B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     A5 01 00 FF 
01860     15 2C 06 F6 | 	mov	local04, ##@LR__5330
01864     1B 00 00 FF 
01868     0C E4 05 F1 | 	add	objptr, ##13836
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1B 00 00 FF 
01874     0C E4 85 F1 | 	sub	objptr, ##13836
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     52 00 00 FF 
018a0     2C E4 05 F1 | 	add	objptr, ##42028
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     52 00 00 FF 
018ac     2C E4 85 F1 | 	sub	objptr, ##42028
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     F0 56 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     A5 01 00 FF 
01920     16 14 06 F6 | 	mov	arg02, ##@LR__5331
01924     74 35 B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     B0 56 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     A5 01 00 FF 
01960     18 14 06 F6 | 	mov	arg02, ##@LR__5332
01964     34 35 B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     40 56 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     A5 01 00 FF 
019d0     1A 38 06 F6 | 	mov	local10, ##@LR__5333
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     C0 34 B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     52 00 00 FF 
01a1c     2C E4 05 F1 | 	add	objptr, ##42028
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     52 00 00 FF 
01a28     2C E4 85 F1 | 	sub	objptr, ##42028
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     52 00 00 FF 
01a40     2C E4 05 F1 | 	add	objptr, ##42028
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     52 00 00 FF 
01a4c     2C E4 85 F1 | 	sub	objptr, ##42028
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     DC 54 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     DC 58 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     14 58 B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     30 E4 05 F1 | 	add	objptr, ##42032
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1B 00 00 FF 
01abc     14 E4 85 F1 | 	sub	objptr, ##13844
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     18 54 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     A0 58 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     D8 57 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     A5 01 00 FF 
01b04     1C 2C 06 F6 | 	mov	local04, ##@LR__5334
01b08     52 00 00 FF 
01b0c     30 E4 05 F1 | 	add	objptr, ##42032
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     30 E4 85 F1 | 	sub	objptr, ##42032
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     30 E4 05 F1 | 	add	objptr, ##42032
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     30 E4 85 F1 | 	sub	objptr, ##42032
01b50     A5 01 00 FF 
01b54     1D 30 06 F6 | 	mov	local06, ##@LR__5335
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     3C 33 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     30 E4 05 F1 | 	add	objptr, ##42032
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     30 E4 85 F1 | 	sub	objptr, ##42032
01bb0     A5 01 00 FF 
01bb4     1E 14 06 F6 | 	mov	arg02, ##@LR__5336
01bb8     E0 32 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     30 E4 05 F1 | 	add	objptr, ##42032
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     30 E4 85 F1 | 	sub	objptr, ##42032
01c08     A5 01 00 FF 
01c0c     1F 14 06 F6 | 	mov	arg02, ##@LR__5337
01c10     88 32 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     30 E4 05 F1 | 	add	objptr, ##42032
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     30 E4 85 F1 | 	sub	objptr, ##42032
01c60     A5 01 00 FF 
01c64     20 14 06 F6 | 	mov	arg02, ##@LR__5338
01c68     30 32 B2 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     4C 53 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     52 00 00 FF 
01cf0     2C E4 05 F1 | 	add	objptr, ##42028
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     52 00 00 FF 
01cfc     2C E4 85 F1 | 	sub	objptr, ##42028
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     38 E4 05 F1 | 	add	objptr, ##42040
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     38 E4 85 F1 | 	sub	objptr, ##42040
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1B 00 00 FF 
01da4     1C E4 05 F1 | 	add	objptr, ##13852
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     38 E4 85 F1 | 	sub	objptr, ##42040
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     4C 52 B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     A5 01 00 FF 
01dc4     21 14 06 F6 | 	mov	arg02, ##@LR__5339
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     CC 30 B2 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1B 00 00 FF 
01e0c     1C E4 05 F1 | 	add	objptr, ##13852
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     38 E4 85 F1 | 	sub	objptr, ##42040
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     C8 51 B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     A5 01 00 FF 
01e48     22 14 06 F6 | 	mov	arg02, ##@LR__5340
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     48 30 B2 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     64 4B B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     A5 01 00 FF 
01f5c     23 2C 06 F6 | 	mov	local04, ##@LR__5341
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     A5 01 00 FF 
01f90     25 14 06 F6 | 	mov	arg02, ##@LR__5342
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     FC 2E B2 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     D0 2E B2 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     A5 01 00 FF 
02098     27 14 06 F6 | 	mov	arg02, ##@LR__5343
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     F8 2D B2 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     A5 01 00 FF 
020b4     29 14 06 F6 | 	mov	arg02, ##@LR__5344
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     DC 2D B2 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     74 4E B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     A5 01 00 FF 
0210c     2B 14 06 F6 | 	mov	arg02, ##@LR__5345
02110     88 2D B2 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     A4 4D B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     A5 01 00 FF 
02154     2D 14 06 F6 | 	mov	arg02, ##@LR__5346
02158     40 2D B2 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     8C 4D B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     D4 2C B2 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     A5 01 00 FF 
022d8     2F 14 06 F6 | 	mov	arg02, ##@LR__5347
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     B0 2B B2 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     A5 01 00 FF 
022f8     31 14 06 F6 | 	mov	arg02, ##@LR__5348
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     98 2B B2 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     A5 01 00 FF 
02310     33 30 06 F6 | 	mov	local06, ##@LR__5349
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     7C 2B B2 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     A5 01 00 FF 
0232c     35 3C 06 F6 | 	mov	local12, ##@LR__5350
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     60 2B B2 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     A5 01 00 FF 
02348     37 3A 06 F6 | 	mov	local11, ##@LR__5351
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     40 2B B2 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     A5 01 00 FF 
02368     39 3A 06 F6 | 	mov	local11, ##@LR__5352
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     24 2B B2 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     A5 01 00 FF 
02384     3B 40 06 F6 | 	mov	local14, ##@LR__5353
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     08 2B B2 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     A5 01 00 FF 
023a0     3D 5C 06 F6 | 	mov	local28, ##@LR__5354
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     E8 2A B2 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     A5 01 00 FF 
023c0     3F 5C 06 F6 | 	mov	local28, ##@LR__5355
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     CC 2A B2 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     A5 01 00 FF 
023dc     41 52 06 F6 | 	mov	local23, ##@LR__5356
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     AC 2A B2 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     A5 01 00 FF 
023fc     43 52 06 F6 | 	mov	local23, ##@LR__5357
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     90 2A B2 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     A5 01 00 FF 
02418     45 5E 06 F6 | 	mov	local29, ##@LR__5358
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     70 2A B2 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     A5 01 00 FF 
02438     47 60 06 F6 | 	mov	local30, ##@LR__5359
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     50 2A B2 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     A5 01 00 FF 
02458     49 62 06 F6 | 	mov	local31, ##@LR__5360
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     30 2A B2 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     30 2A B2 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     E0 4D B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     18 4D B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     EC 47 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     A5 01 00 FF 
0270c     4B 14 06 F6 | 	mov	arg02, ##@LR__5361
02710     88 27 B2 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     30 48 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     A5 01 00 FF 
02750     4D 14 06 F6 | 	mov	arg02, ##@LR__5362
02754     44 27 B2 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     68 4A B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     34 42 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     A5 01 00 FF 
02828     4F 14 06 F6 | 	mov	arg02, ##@LR__5363
0282c     6C 26 B2 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     A5 01 00 FF 
02858     54 14 06 F6 | 	mov	arg02, ##@LR__5364
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     34 26 B2 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     A5 01 00 FF 
028a8     59 16 06 F6 | 	mov	arg03, ##@LR__5365
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     7C 4B B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     90 45 B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     C4 44 B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     98 44 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     A5 01 00 FF 
02a60     5B 14 06 F6 | 	mov	arg02, ##@LR__5366
02a64     34 24 B2 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     D4 43 B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     A5 01 00 FF 
02bc0     5D 30 06 F6 | 	mov	local06, ##@LR__5367
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     A5 01 00 FF 
02bec     5F 14 06 F6 | 	mov	arg02, ##@LR__5368
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     9C 22 B2 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     A5 01 00 FF 
02c0c     65 14 06 F6 | 	mov	arg02, ##@LR__5369
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     84 22 B2 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     A5 01 00 FF 
02c24     6C 14 06 F6 | 	mov	arg02, ##@LR__5370
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     6C 22 B2 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     A5 01 00 FF 
02c58     72 14 06 F6 | 	mov	arg02, ##@LR__5371
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     34 22 B2 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     A5 01 00 FF 
02c8c     75 30 06 F6 | 	mov	local06, ##@LR__5372
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     A5 01 00 FF 
02cc8     77 14 06 F6 | 	mov	arg02, ##@LR__5373
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     C4 21 B2 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     A5 01 00 FF 
02cfc     7B 30 06 F6 | 	mov	local06, ##@LR__5374
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     A5 01 00 FF 
02d1c     7D 14 06 F6 | 	mov	arg02, ##@LR__5375
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     74 21 B2 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     A5 01 00 FF 
02d34     82 14 06 F6 | 	mov	arg02, ##@LR__5376
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     5C 21 B2 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     A5 01 00 FF 
02d68     85 14 06 F6 | 	mov	arg02, ##@LR__5377
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     24 21 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     A5 01 00 FF 
02d9c     8B 30 06 F6 | 	mov	local06, ##@LR__5378
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     A5 01 00 FF 
02dcc     8D 14 06 F6 | 	mov	arg02, ##@LR__5379
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     C0 20 B2 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     A5 01 00 FF 
02e00     96 30 06 F6 | 	mov	local06, ##@LR__5380
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     A5 01 00 FF 
02e30     98 14 06 F6 | 	mov	arg02, ##@LR__5381
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     5C 20 B2 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     A5 01 00 FF 
02e64     A1 30 06 F6 | 	mov	local06, ##@LR__5382
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     A5 01 00 FF 
02e94     A3 14 06 F6 | 	mov	arg02, ##@LR__5383
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     F8 1F B2 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     A5 01 00 FF 
02ec8     AC 30 06 F6 | 	mov	local06, ##@LR__5384
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     A5 01 00 FF 
02ef8     AE 14 06 F6 | 	mov	arg02, ##@LR__5385
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     94 1F B2 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     A5 01 00 FF 
02f2c     B1 30 06 F6 | 	mov	local06, ##@LR__5386
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     A5 01 00 FF 
03064     A4 15 06 F6 | 	mov	arg02, ##@LR__5471
03068     30 1E B2 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     F8 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     30 39 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     94 3E B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     48 3C B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     C8 44 B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     BC 3C B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     20 2F B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     E4 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     60 35 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     20 35 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     88 39 B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     84 2A B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     A5 01 00 FF 
0371c     B3 30 06 F6 | 	mov	local06, ##@LR__5387
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     A5 01 00 FF 
0373c     B4 14 06 F6 | 	mov	arg02, ##@LR__5388
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     54 17 B2 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     A5 01 00 FF 
03754     B9 14 06 F6 | 	mov	arg02, ##@LR__5389
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     3C 17 B2 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     A5 01 00 FF 
0376c     BE 30 06 F6 | 	mov	local06, ##@LR__5390
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     20 17 B2 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     A5 01 00 FF 
03788     C3 3C 06 F6 | 	mov	local12, ##@LR__5391
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     00 17 B2 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     A5 01 00 FF 
037a8     C7 3A 06 F6 | 	mov	local11, ##@LR__5392
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     E0 16 B2 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     A5 01 00 FF 
037c8     CB 40 06 F6 | 	mov	local14, ##@LR__5393
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     C0 16 B2 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     A5 01 00 FF 
037e8     CE 3E 06 F6 | 	mov	local13, ##@LR__5394
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     A0 16 B2 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     A5 01 00 FF 
03808     D2 3E 06 F6 | 	mov	local13, ##@LR__5395
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     84 16 B2 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     A5 01 00 FF 
03824     D8 50 06 F6 | 	mov	local22, ##@LR__5396
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     64 16 B2 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     A5 01 00 FF 
038c0     DB 14 06 F6 | 	mov	arg02, ##@LR__5397
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     D0 15 B2 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     A5 01 00 FF 
038d8     E2 2E 06 F6 | 	mov	local05, ##@LR__5398
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     B4 15 B2 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     A5 01 00 FF 
03970     E8 14 06 F6 | 	mov	arg02, ##@LR__5399
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     20 15 B2 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     A5 01 00 FF 
039c0     EB 14 06 F6 | 	mov	arg02, ##@LR__5400
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     D0 14 B2 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     A5 01 00 FF 
039f8     EF 2E 06 F6 | 	mov	local05, ##@LR__5401
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     90 14 B2 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     A5 01 00 FF 
03a4c     F1 30 06 F6 | 	mov	local06, ##@LR__5402
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     A5 01 00 FF 
03a7c     F4 38 06 F6 | 	mov	local10, ##@LR__5403
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     10 14 B2 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     A5 01 00 FF 
03ab8     F7 2E 06 F6 | 	mov	local05, ##@LR__5404
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     CC 13 B2 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     48 13 B2 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     88 2E B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     90 47 B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     EC E5 05 F1 | 	add	objptr, ##41964
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     EC E5 85 F1 | 	sub	objptr, ##41964
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     EC E5 05 F1 | 	add	objptr, ##41964
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     EC E5 85 F1 | 	sub	objptr, ##41964
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     EC E5 05 F1 | 	add	objptr, ##41964
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     EC E5 85 F1 | 	sub	objptr, ##41964
03c3c     A4 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     EC E5 05 F1 | 	add	objptr, ##41964
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     C8 E5 85 F1 | 	sub	objptr, ##13768
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     74 43 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     EC E5 05 F1 | 	add	objptr, ##41964
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     EC E5 85 F1 | 	sub	objptr, ##41964
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     EC D7 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     30 E4 05 F1 | 	add	objptr, ##42032
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     30 E4 85 F1 | 	sub	objptr, ##42032
03cfc     A5 01 00 FF 
03d00     F9 14 06 F6 | 	mov	arg02, ##@LR__5405
03d04     94 11 B2 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     30 E4 05 F1 | 	add	objptr, ##42032
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1B 00 00 FF 
03d20     14 E4 85 F1 | 	sub	objptr, ##13844
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     EC E5 05 F1 | 	add	objptr, ##41964
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     C8 E5 85 F1 | 	sub	objptr, ##13768
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     80 42 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     EC E5 05 F1 | 	add	objptr, ##41964
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     EC E5 85 F1 | 	sub	objptr, ##41964
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     F8 D6 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     30 E4 05 F1 | 	add	objptr, ##42032
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     30 E4 85 F1 | 	sub	objptr, ##42032
03df0     A5 01 00 FF 
03df4     FA 14 06 F6 | 	mov	arg02, ##@LR__5406
03df8     A0 10 B2 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     30 E4 05 F1 | 	add	objptr, ##42032
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1B 00 00 FF 
03e14     14 E4 85 F1 | 	sub	objptr, ##13844
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     EC E5 05 F1 | 	add	objptr, ##41964
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     C8 E5 85 F1 | 	sub	objptr, ##13768
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     5C 42 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     EC E5 05 F1 | 	add	objptr, ##41964
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     EC E5 85 F1 | 	sub	objptr, ##41964
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     0C D6 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     30 E4 05 F1 | 	add	objptr, ##42032
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     30 E4 85 F1 | 	sub	objptr, ##42032
03edc     A5 01 00 FF 
03ee0     FB 14 06 F6 | 	mov	arg02, ##@LR__5407
03ee4     B4 0F B2 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     30 E4 05 F1 | 	add	objptr, ##42032
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1B 00 00 FF 
03f00     14 E4 85 F1 | 	sub	objptr, ##13844
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     EC E5 05 F1 | 	add	objptr, ##41964
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     C8 E5 85 F1 | 	sub	objptr, ##13768
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     6C 41 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     EC E5 05 F1 | 	add	objptr, ##41964
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     EC E5 85 F1 | 	sub	objptr, ##41964
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     1C D5 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     30 E4 05 F1 | 	add	objptr, ##42032
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     30 E4 85 F1 | 	sub	objptr, ##42032
03fcc     A5 01 00 FF 
03fd0     FC 14 06 F6 | 	mov	arg02, ##@LR__5408
03fd4     C4 0E B2 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     30 E4 05 F1 | 	add	objptr, ##42032
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1B 00 00 FF 
03ff0     14 E4 85 F1 | 	sub	objptr, ##13844
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     EC E5 05 F1 | 	add	objptr, ##41964
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     EC E5 85 F1 | 	sub	objptr, ##41964
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     5C 8A B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     52 00 00 FF 
04030     10 E4 05 F1 | 	add	objptr, ##42000
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     52 00 00 FF 
0403c     10 E4 85 F1 | 	sub	objptr, ##42000
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     A5 01 00 FF 
04048     FD 12 06 F6 | 	mov	arg01, ##@LR__5409
0404c                 | ' 
0404c                 | ' write(text)
0404c     A8 F5 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     A4 FA B1 FD | 	call	#_hg010b_spin2_crlf
04054     A5 01 00 FF 
04058     FE 12 06 F6 | 	mov	arg01, ##@LR__5410
0405c                 | ' 
0405c                 | ' write(text)
0405c     98 F5 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     94 FA B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     52 00 00 FF 
04068     10 E4 05 F1 | 	add	objptr, ##42000
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     52 00 00 FF 
04074     10 E4 85 F1 | 	sub	objptr, ##42000
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     0C 6B B2 FD | 	call	#__system___getiolock_0595
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     DC 0D B2 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     B0 1A B2 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     48 1A B2 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     CC 6A B2 FD | 	call	#__system___getiolock_0595
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     A5 01 00 FF 
040f0     04 15 06 F6 | 	mov	arg02, ##@LR__5411
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     A0 0D B2 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     A5 01 00 FF 
04108     06 15 06 F6 | 	mov	arg02, ##@LR__5412
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     88 0D B2 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     A5 01 00 FF 
04120     08 15 06 F6 | 	mov	arg02, ##@LR__5413
04124     13 13 02 F6 | 	mov	arg01, local01
04128     70 0D B2 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     A5 01 00 FF 
04138     0B 15 06 F6 | 	mov	arg02, ##@LR__5414
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     58 0D B2 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     A5 01 00 FF 
04150     0F 15 06 F6 | 	mov	arg02, ##@LR__5415
04154     13 13 02 F6 | 	mov	arg01, local01
04158     40 0D B2 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     A5 01 00 FF 
04168     11 15 06 F6 | 	mov	arg02, ##@LR__5416
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     28 0D B2 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     A5 01 00 FF 
04180     13 15 06 F6 | 	mov	arg02, ##@LR__5417
04184     13 13 02 F6 | 	mov	arg01, local01
04188     10 0D B2 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     A5 01 00 FF 
04198     17 15 06 F6 | 	mov	arg02, ##@LR__5418
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     F8 0C B2 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     A5 01 00 FF 
041b0     1B 15 06 F6 | 	mov	arg02, ##@LR__5419
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     E0 0C B2 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     A5 01 00 FF 
041c8     1F 15 06 F6 | 	mov	arg02, ##@LR__5420
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     C8 0C B2 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     A5 01 00 FF 
041e0     23 15 06 F6 | 	mov	arg02, ##@LR__5421
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     B0 0C B2 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     A5 01 00 FF 
041f8     27 15 06 F6 | 	mov	arg02, ##@LR__5422
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     98 0C B2 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     A5 01 00 FF 
04210     29 15 06 F6 | 	mov	arg02, ##@LR__5423
04214     13 13 02 F6 | 	mov	arg01, local01
04218     80 0C B2 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     A5 01 00 FF 
04228     2D 15 06 F6 | 	mov	arg02, ##@LR__5424
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     68 0C B2 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     A5 01 00 FF 
04240     2F 15 06 F6 | 	mov	arg02, ##@LR__5425
04244     13 13 02 F6 | 	mov	arg01, local01
04248     50 0C B2 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     A5 01 00 FF 
04258     31 15 06 F6 | 	mov	arg02, ##@LR__5426
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     38 0C B2 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     A5 01 00 FF 
04270     34 15 06 F6 | 	mov	arg02, ##@LR__5427
04274     13 13 02 F6 | 	mov	arg01, local01
04278     20 0C B2 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     A5 01 00 FF 
04288     37 15 06 F6 | 	mov	arg02, ##@LR__5428
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     08 0C B2 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     A5 01 00 FF 
042a0     39 15 06 F6 | 	mov	arg02, ##@LR__5429
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     F0 0B B2 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     A5 01 00 FF 
042b8     3B 15 06 F6 | 	mov	arg02, ##@LR__5430
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     D8 0B B2 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     A5 01 00 FF 
042d0     3E 15 06 F6 | 	mov	arg02, ##@LR__5431
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     C0 0B B2 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     A5 01 00 FF 
042e8     41 15 06 F6 | 	mov	arg02, ##@LR__5432
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     A8 0B B2 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     1C 2B B2 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     A5 01 00 FF 
043dc     44 15 06 F6 | 	mov	arg02, ##@LR__5433
043e0     B8 0A B2 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     50 2B B2 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     A5 01 00 FF 
04430     46 15 06 F6 | 	mov	arg02, ##@LR__5434
04434     64 0A B2 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     2C 2B B2 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     A5 01 00 FF 
04454     48 15 06 F6 | 	mov	arg02, ##@LR__5435
04458     40 0A B2 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     00 2B B2 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     78 40 B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     8C 34 B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     18 3D B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     A5 01 00 FF 
044b8     4A 15 06 F6 | 	mov	arg02, ##@LR__5436
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     D8 09 B2 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     A5 01 00 FF 
044d0     50 15 06 F6 | 	mov	arg02, ##@LR__5437
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     C0 09 B2 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     A5 01 00 FF 
044e8     57 15 06 F6 | 	mov	arg02, ##@LR__5438
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     A8 09 B2 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     B4 29 B2 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     A5 01 00 FF 
04544     5F 15 06 F6 | 	mov	arg02, ##@LR__5439
04548     50 09 B2 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     A0 2A B2 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     A5 01 00 FF 
04570     61 15 06 F6 | 	mov	arg02, ##@LR__5440
04574     24 09 B2 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     78 2A B2 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     60 2A B2 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     2C 2A B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     A5 01 00 FF 
045e4     63 15 06 F6 | 	mov	arg02, ##@LR__5441
045e8     B0 08 B2 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     78 29 B2 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     F0 3E B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     A0 3B B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     50 29 B2 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     C8 3E B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     AC 36 B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     68 3B B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     14 29 B2 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     A5 01 00 FF 
0466c     65 15 06 F6 | 	mov	arg02, ##@LR__5442
04670     28 08 B2 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     A5 01 00 FF 
04684     67 15 06 F6 | 	mov	arg02, ##@LR__5443
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     0C 08 B2 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     A5 01 00 FF 
0469c     69 15 06 F6 | 	mov	arg02, ##@LR__5444
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     F4 07 B2 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     A5 01 00 FF 
046b4     6C 15 06 F6 | 	mov	arg02, ##@LR__5445
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     DC 07 B2 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     A5 01 00 FF 
046cc     6E 15 06 F6 | 	mov	arg02, ##@LR__5446
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     C4 07 B2 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     A5 01 00 FF 
046e4     71 15 06 F6 | 	mov	arg02, ##@LR__5447
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     AC 07 B2 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     A5 01 00 FF 
046fc     73 15 06 F6 | 	mov	arg02, ##@LR__5448
04700     17 13 02 F6 | 	mov	arg01, local05
04704     94 07 B2 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     A5 01 00 FF 
04714     75 15 06 F6 | 	mov	arg02, ##@LR__5449
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     7C 07 B2 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     A5 01 00 FF 
0472c     78 15 06 F6 | 	mov	arg02, ##@LR__5450
04730     17 13 02 F6 | 	mov	arg01, local05
04734     64 07 B2 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     A5 01 00 FF 
04744     7A 15 06 F6 | 	mov	arg02, ##@LR__5451
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     4C 07 B2 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     A5 01 00 FF 
0475c     7D 15 06 F6 | 	mov	arg02, ##@LR__5452
04760     17 13 02 F6 | 	mov	arg01, local05
04764     34 07 B2 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     A5 01 00 FF 
04774     7F 15 06 F6 | 	mov	arg02, ##@LR__5453
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     1C 07 B2 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     A5 01 00 FF 
0478c     82 15 06 F6 | 	mov	arg02, ##@LR__5454
04790     17 13 02 F6 | 	mov	arg01, local05
04794     04 07 B2 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     A5 01 00 FF 
047a4     84 15 06 F6 | 	mov	arg02, ##@LR__5455
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     EC 06 B2 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     A5 01 00 FF 
048a4     86 15 06 F6 | 	mov	arg02, ##@LR__5456
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     EC 05 B2 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     A5 01 00 FF 
048bc     88 15 06 F6 | 	mov	arg02, ##@LR__5457
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     D4 05 B2 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     A5 01 00 FF 
048d4     8A 15 06 F6 | 	mov	arg02, ##@LR__5458
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     BC 05 B2 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     A5 01 00 FF 
048ec     8C 15 06 F6 | 	mov	arg02, ##@LR__5459
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     A4 05 B2 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     A5 01 00 FF 
04904     8E 15 06 F6 | 	mov	arg02, ##@LR__5460
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     8C 05 B2 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     A5 01 00 FF 
0491c     90 15 06 F6 | 	mov	arg02, ##@LR__5461
04920     13 13 02 F6 | 	mov	arg01, local01
04924     74 05 B2 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     A5 01 00 FF 
04934     92 15 06 F6 | 	mov	arg02, ##@LR__5462
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     5C 05 B2 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     A5 01 00 FF 
0494c     94 15 06 F6 | 	mov	arg02, ##@LR__5463
04950     13 13 02 F6 | 	mov	arg01, local01
04954     44 05 B2 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     A5 01 00 FF 
04964     96 15 06 F6 | 	mov	arg02, ##@LR__5464
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     2C 05 B2 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     A5 01 00 FF 
0497c     98 15 06 F6 | 	mov	arg02, ##@LR__5465
04980     13 13 02 F6 | 	mov	arg01, local01
04984     14 05 B2 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     A5 01 00 FF 
04994     9A 15 06 F6 | 	mov	arg02, ##@LR__5466
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     FC 04 B2 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     A5 01 00 FF 
049ac     9C 15 06 F6 | 	mov	arg02, ##@LR__5467
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     E4 04 B2 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     A5 01 00 FF 
049c4     9E 15 06 F6 | 	mov	arg02, ##@LR__5468
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     CC 04 B2 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     A5 01 00 FF 
049dc     A0 15 06 F6 | 	mov	arg02, ##@LR__5469
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     B4 04 B2 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     A5 01 00 FF 
049f4     A2 15 06 F6 | 	mov	arg02, ##@LR__5470
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     9C 04 B2 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     A5 01 00 FF 
04aa4     A6 15 06 F6 | 	mov	arg02, ##@LR__5472
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     EC 03 B2 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     64 0C 90 AD |  if_e	jmp	#LR__0310
04ab8     A5 01 00 FF 
04abc     AB 15 06 F6 | 	mov	arg02, ##@LR__5473
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     D4 03 B2 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     54 0C 90 AD |  if_e	jmp	#LR__0311
04ad0     A5 01 00 FF 
04ad4     AE 15 06 F6 | 	mov	arg02, ##@LR__5474
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     BC 03 B2 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     44 0C 90 AD |  if_e	jmp	#LR__0312
04ae8     A5 01 00 FF 
04aec     B3 15 06 F6 | 	mov	arg02, ##@LR__5475
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     A4 03 B2 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     34 0C 90 AD |  if_e	jmp	#LR__0313
04b00     A5 01 00 FF 
04b04     B7 15 06 F6 | 	mov	arg02, ##@LR__5476
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     8C 03 B2 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     24 0C 90 AD |  if_e	jmp	#LR__0314
04b18     A5 01 00 FF 
04b1c     BC 15 06 F6 | 	mov	arg02, ##@LR__5477
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     74 03 B2 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     14 0C 90 AD |  if_e	jmp	#LR__0315
04b30     A5 01 00 FF 
04b34     C0 15 06 F6 | 	mov	arg02, ##@LR__5478
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     5C 03 B2 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     04 0C 90 AD |  if_e	jmp	#LR__0316
04b48     A5 01 00 FF 
04b4c     C3 15 06 F6 | 	mov	arg02, ##@LR__5479
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     44 03 B2 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     F4 0B 90 AD |  if_e	jmp	#LR__0317
04b60     A5 01 00 FF 
04b64     CE 15 06 F6 | 	mov	arg02, ##@LR__5480
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     2C 03 B2 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     E4 0B 90 AD |  if_e	jmp	#LR__0318
04b78     A5 01 00 FF 
04b7c     D2 15 06 F6 | 	mov	arg02, ##@LR__5481
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     14 03 B2 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     D4 0B 90 AD |  if_e	jmp	#LR__0319
04b90     A5 01 00 FF 
04b94     DC 15 06 F6 | 	mov	arg02, ##@LR__5482
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     FC 02 B2 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     C4 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     A5 01 00 FF 
04bac     E0 15 06 F6 | 	mov	arg02, ##@LR__5483
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     E4 02 B2 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     B4 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     A5 01 00 FF 
04bc4     EA 15 06 F6 | 	mov	arg02, ##@LR__5484
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     CC 02 B2 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     A4 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     A5 01 00 FF 
04bdc     EE 15 06 F6 | 	mov	arg02, ##@LR__5485
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     B4 02 B2 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     94 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     A5 01 00 FF 
04bf4     F9 15 06 F6 | 	mov	arg02, ##@LR__5486
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     9C 02 B2 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     84 0B 90 AD |  if_e	jmp	#LR__0324
04c08     A5 01 00 FF 
04c0c     FD 15 06 F6 | 	mov	arg02, ##@LR__5487
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     84 02 B2 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     74 0B 90 AD |  if_e	jmp	#LR__0325
04c20     A6 01 00 FF 
04c24     04 14 06 F6 | 	mov	arg02, ##@LR__5488
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     6C 02 B2 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     64 0B 90 AD |  if_e	jmp	#LR__0326
04c38     A6 01 00 FF 
04c3c     08 14 06 F6 | 	mov	arg02, ##@LR__5489
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     54 02 B2 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     54 0B 90 AD |  if_e	jmp	#LR__0327
04c50     A6 01 00 FF 
04c54     0E 14 06 F6 | 	mov	arg02, ##@LR__5490
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     3C 02 B2 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     44 0B 90 AD |  if_e	jmp	#LR__0328
04c68     A6 01 00 FF 
04c6c     14 14 06 F6 | 	mov	arg02, ##@LR__5491
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     24 02 B2 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     34 0B 90 AD |  if_e	jmp	#LR__0329
04c80     A6 01 00 FF 
04c84     18 14 06 F6 | 	mov	arg02, ##@LR__5492
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     0C 02 B2 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     24 0B 90 AD |  if_e	jmp	#LR__0330
04c98     A6 01 00 FF 
04c9c     1E 14 06 F6 | 	mov	arg02, ##@LR__5493
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     F4 01 B2 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     14 0B 90 AD |  if_e	jmp	#LR__0331
04cb0     A6 01 00 FF 
04cb4     21 14 06 F6 | 	mov	arg02, ##@LR__5494
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     DC 01 B2 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     04 0B 90 AD |  if_e	jmp	#LR__0332
04cc8     A6 01 00 FF 
04ccc     27 14 06 F6 | 	mov	arg02, ##@LR__5495
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     C4 01 B2 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     F4 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     A6 01 00 FF 
04ce4     2B 14 06 F6 | 	mov	arg02, ##@LR__5496
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     AC 01 B2 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     E4 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     A6 01 00 FF 
04cfc     32 14 06 F6 | 	mov	arg02, ##@LR__5497
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     94 01 B2 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     D4 0A 90 AD |  if_e	jmp	#LR__0335
04d10     A6 01 00 FF 
04d14     37 14 06 F6 | 	mov	arg02, ##@LR__5498
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     7C 01 B2 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     C4 0A 90 AD |  if_e	jmp	#LR__0336
04d28     A6 01 00 FF 
04d2c     3E 14 06 F6 | 	mov	arg02, ##@LR__5499
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     64 01 B2 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     B4 0A 90 AD |  if_e	jmp	#LR__0337
04d40     A6 01 00 FF 
04d44     45 14 06 F6 | 	mov	arg02, ##@LR__5500
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     4C 01 B2 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     A4 0A 90 AD |  if_e	jmp	#LR__0338
04d58     A6 01 00 FF 
04d5c     4F 14 06 F6 | 	mov	arg02, ##@LR__5501
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     34 01 B2 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     94 0A 90 AD |  if_e	jmp	#LR__0339
04d70     A6 01 00 FF 
04d74     53 14 06 F6 | 	mov	arg02, ##@LR__5502
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     1C 01 B2 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     84 0A 90 AD |  if_e	jmp	#LR__0340
04d88     A6 01 00 FF 
04d8c     57 14 06 F6 | 	mov	arg02, ##@LR__5503
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     04 01 B2 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     74 0A 90 AD |  if_e	jmp	#LR__0341
04da0     A6 01 00 FF 
04da4     5E 14 06 F6 | 	mov	arg02, ##@LR__5504
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     EC 00 B2 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     64 0A 90 AD |  if_e	jmp	#LR__0342
04db8     A6 01 00 FF 
04dbc     62 14 06 F6 | 	mov	arg02, ##@LR__5505
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     D4 00 B2 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     54 0A 90 AD |  if_e	jmp	#LR__0343
04dd0     A6 01 00 FF 
04dd4     66 14 06 F6 | 	mov	arg02, ##@LR__5506
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     BC 00 B2 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     44 0A 90 AD |  if_e	jmp	#LR__0344
04de8     A6 01 00 FF 
04dec     6C 14 06 F6 | 	mov	arg02, ##@LR__5507
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     A4 00 B2 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     34 0A 90 AD |  if_e	jmp	#LR__0345
04e00     A6 01 00 FF 
04e04     71 14 06 F6 | 	mov	arg02, ##@LR__5508
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     8C 00 B2 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     24 0A 90 AD |  if_e	jmp	#LR__0346
04e18     A6 01 00 FF 
04e1c     78 14 06 F6 | 	mov	arg02, ##@LR__5509
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     74 00 B2 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     14 0A 90 AD |  if_e	jmp	#LR__0347
04e30     A6 01 00 FF 
04e34     7C 14 06 F6 | 	mov	arg02, ##@LR__5510
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     5C 00 B2 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     04 0A 90 AD |  if_e	jmp	#LR__0348
04e48     A6 01 00 FF 
04e4c     81 14 06 F6 | 	mov	arg02, ##@LR__5511
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     44 00 B2 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     F4 09 90 AD |  if_e	jmp	#LR__0349
04e60     A6 01 00 FF 
04e64     85 14 06 F6 | 	mov	arg02, ##@LR__5512
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     2C 00 B2 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     E4 09 90 AD |  if_e	jmp	#LR__0350
04e78     A6 01 00 FF 
04e7c     8B 14 06 F6 | 	mov	arg02, ##@LR__5513
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     14 00 B2 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     D4 09 90 AD |  if_e	jmp	#LR__0351
04e90     A6 01 00 FF 
04e94     8E 14 06 F6 | 	mov	arg02, ##@LR__5514
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     FC FF B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     C4 09 90 AD |  if_e	jmp	#LR__0352
04ea8     A6 01 00 FF 
04eac     96 14 06 F6 | 	mov	arg02, ##@LR__5515
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     E4 FF B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     B4 09 90 AD |  if_e	jmp	#LR__0353
04ec0     A6 01 00 FF 
04ec4     9A 14 06 F6 | 	mov	arg02, ##@LR__5516
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     CC FF B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     A4 09 90 AD |  if_e	jmp	#LR__0354
04ed8     A6 01 00 FF 
04edc     9F 14 06 F6 | 	mov	arg02, ##@LR__5517
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     B4 FF B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     94 09 90 AD |  if_e	jmp	#LR__0355
04ef0     A6 01 00 FF 
04ef4     A3 14 06 F6 | 	mov	arg02, ##@LR__5518
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     9C FF B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     84 09 90 AD |  if_e	jmp	#LR__0356
04f08     A6 01 00 FF 
04f0c     A8 14 06 F6 | 	mov	arg02, ##@LR__5519
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     84 FF B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     74 09 90 AD |  if_e	jmp	#LR__0357
04f20     A6 01 00 FF 
04f24     AC 14 06 F6 | 	mov	arg02, ##@LR__5520
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     6C FF B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     64 09 90 AD |  if_e	jmp	#LR__0358
04f38     A6 01 00 FF 
04f3c     AF 14 06 F6 | 	mov	arg02, ##@LR__5521
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     54 FF B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     54 09 90 AD |  if_e	jmp	#LR__0359
04f50     A6 01 00 FF 
04f54     B5 14 06 F6 | 	mov	arg02, ##@LR__5522
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     3C FF B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     44 09 90 AD |  if_e	jmp	#LR__0360
04f68     A6 01 00 FF 
04f6c     B9 14 06 F6 | 	mov	arg02, ##@LR__5523
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     24 FF B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     34 09 90 AD |  if_e	jmp	#LR__0361
04f80     A6 01 00 FF 
04f84     BD 14 06 F6 | 	mov	arg02, ##@LR__5524
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     0C FF B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     24 09 90 AD |  if_e	jmp	#LR__0362
04f98     A6 01 00 FF 
04f9c     C3 14 06 F6 | 	mov	arg02, ##@LR__5525
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     F4 FE B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     14 09 90 AD |  if_e	jmp	#LR__0363
04fb0     A6 01 00 FF 
04fb4     C8 14 06 F6 | 	mov	arg02, ##@LR__5526
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     DC FE B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     04 09 90 AD |  if_e	jmp	#LR__0364
04fc8     A6 01 00 FF 
04fcc     CB 14 06 F6 | 	mov	arg02, ##@LR__5527
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     C4 FE B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     F4 08 90 AD |  if_e	jmp	#LR__0365
04fe0     A6 01 00 FF 
04fe4     CE 14 06 F6 | 	mov	arg02, ##@LR__5528
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     AC FE B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     E4 08 90 AD |  if_e	jmp	#LR__0366
04ff8     A6 01 00 FF 
04ffc     D2 14 06 F6 | 	mov	arg02, ##@LR__5529
05000     13 13 02 F6 | 	mov	arg01, local01
05004     94 FE B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     D4 08 90 AD |  if_e	jmp	#LR__0367
05010     A6 01 00 FF 
05014     D5 14 06 F6 | 	mov	arg02, ##@LR__5530
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     7C FE B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     C4 08 90 AD |  if_e	jmp	#LR__0368
05028     A6 01 00 FF 
0502c     DB 14 06 F6 | 	mov	arg02, ##@LR__5531
05030     13 13 02 F6 | 	mov	arg01, local01
05034     64 FE B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     B4 08 90 AD |  if_e	jmp	#LR__0369
05040     A6 01 00 FF 
05044     E0 14 06 F6 | 	mov	arg02, ##@LR__5532
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     4C FE B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     A4 08 90 AD |  if_e	jmp	#LR__0370
05058     A6 01 00 FF 
0505c     E3 14 06 F6 | 	mov	arg02, ##@LR__5533
05060     13 13 02 F6 | 	mov	arg01, local01
05064     34 FE B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     94 08 90 AD |  if_e	jmp	#LR__0371
05070     A6 01 00 FF 
05074     E8 14 06 F6 | 	mov	arg02, ##@LR__5534
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     1C FE B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     84 08 90 AD |  if_e	jmp	#LR__0372
05088     A6 01 00 FF 
0508c     EC 14 06 F6 | 	mov	arg02, ##@LR__5535
05090     13 13 02 F6 | 	mov	arg01, local01
05094     04 FE B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     74 08 90 AD |  if_e	jmp	#LR__0373
050a0     A6 01 00 FF 
050a4     F2 14 06 F6 | 	mov	arg02, ##@LR__5536
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     EC FD B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     64 08 90 AD |  if_e	jmp	#LR__0374
050b8     A6 01 00 FF 
050bc     F8 14 06 F6 | 	mov	arg02, ##@LR__5537
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     D4 FD B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     54 08 90 AD |  if_e	jmp	#LR__0375
050d0     A6 01 00 FF 
050d4     FD 14 06 F6 | 	mov	arg02, ##@LR__5538
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     BC FD B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     44 08 90 AD |  if_e	jmp	#LR__0376
050e8     A6 01 00 FF 
050ec     00 15 06 F6 | 	mov	arg02, ##@LR__5539
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     A4 FD B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     34 08 90 AD |  if_e	jmp	#LR__0377
05100     A6 01 00 FF 
05104     06 15 06 F6 | 	mov	arg02, ##@LR__5540
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     8C FD B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     24 08 90 AD |  if_e	jmp	#LR__0378
05118     A6 01 00 FF 
0511c     0A 15 06 F6 | 	mov	arg02, ##@LR__5541
05120     13 13 02 F6 | 	mov	arg01, local01
05124     74 FD B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     14 08 90 AD |  if_e	jmp	#LR__0379
05130     A6 01 00 FF 
05134     0F 15 06 F6 | 	mov	arg02, ##@LR__5542
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     5C FD B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     04 08 90 AD |  if_e	jmp	#LR__0380
05148     A6 01 00 FF 
0514c     12 15 06 F6 | 	mov	arg02, ##@LR__5543
05150     13 13 02 F6 | 	mov	arg01, local01
05154     44 FD B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     F4 07 90 AD |  if_e	jmp	#LR__0381
05160     A6 01 00 FF 
05164     15 15 06 F6 | 	mov	arg02, ##@LR__5544
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     2C FD B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     E4 07 90 AD |  if_e	jmp	#LR__0382
05178     A6 01 00 FF 
0517c     1A 15 06 F6 | 	mov	arg02, ##@LR__5545
05180     13 13 02 F6 | 	mov	arg01, local01
05184     14 FD B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     D4 07 90 AD |  if_e	jmp	#LR__0383
05190     A6 01 00 FF 
05194     20 15 06 F6 | 	mov	arg02, ##@LR__5546
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     FC FC B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     C4 07 90 AD |  if_e	jmp	#LR__0384
051a8     A6 01 00 FF 
051ac     24 15 06 F6 | 	mov	arg02, ##@LR__5547
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     E4 FC B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     B4 07 90 AD |  if_e	jmp	#LR__0385
051c0     A6 01 00 FF 
051c4     2D 15 06 F6 | 	mov	arg02, ##@LR__5548
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     CC FC B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     A4 07 90 AD |  if_e	jmp	#LR__0386
051d8     A6 01 00 FF 
051dc     33 15 06 F6 | 	mov	arg02, ##@LR__5549
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     B4 FC B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     94 07 90 AD |  if_e	jmp	#LR__0387
051f0     A6 01 00 FF 
051f4     39 15 06 F6 | 	mov	arg02, ##@LR__5550
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     9C FC B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     84 07 90 AD |  if_e	jmp	#LR__0388
05208     A6 01 00 FF 
0520c     42 15 06 F6 | 	mov	arg02, ##@LR__5551
05210     13 13 02 F6 | 	mov	arg01, local01
05214     84 FC B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     74 07 90 AD |  if_e	jmp	#LR__0389
05220     A6 01 00 FF 
05224     4C 15 06 F6 | 	mov	arg02, ##@LR__5552
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     6C FC B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     64 07 90 AD |  if_e	jmp	#LR__0390
05238     A6 01 00 FF 
0523c     55 15 06 F6 | 	mov	arg02, ##@LR__5553
05240     13 13 02 F6 | 	mov	arg01, local01
05244     54 FC B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     54 07 90 AD |  if_e	jmp	#LR__0391
05250     A6 01 00 FF 
05254     5A 15 06 F6 | 	mov	arg02, ##@LR__5554
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     3C FC B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     44 07 90 AD |  if_e	jmp	#LR__0392
05268     A6 01 00 FF 
0526c     5D 15 06 F6 | 	mov	arg02, ##@LR__5555
05270     13 13 02 F6 | 	mov	arg01, local01
05274     24 FC B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     34 07 90 AD |  if_e	jmp	#LR__0393
05280     A6 01 00 FF 
05284     62 15 06 F6 | 	mov	arg02, ##@LR__5556
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     0C FC B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     24 07 90 AD |  if_e	jmp	#LR__0394
05298     A6 01 00 FF 
0529c     66 15 06 F6 | 	mov	arg02, ##@LR__5557
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     F4 FB B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     14 07 90 AD |  if_e	jmp	#LR__0395
052b0     A6 01 00 FF 
052b4     6B 15 06 F6 | 	mov	arg02, ##@LR__5558
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     DC FB B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     04 07 90 AD |  if_e	jmp	#LR__0396
052c8     A6 01 00 FF 
052cc     6F 15 06 F6 | 	mov	arg02, ##@LR__5559
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     C4 FB B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     F4 06 90 AD |  if_e	jmp	#LR__0397
052e0     A6 01 00 FF 
052e4     78 15 06 F6 | 	mov	arg02, ##@LR__5560
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     AC FB B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     E4 06 90 AD |  if_e	jmp	#LR__0398
052f8     A6 01 00 FF 
052fc     7D 15 06 F6 | 	mov	arg02, ##@LR__5561
05300     13 13 02 F6 | 	mov	arg01, local01
05304     94 FB B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     D4 06 90 AD |  if_e	jmp	#LR__0399
05310     A6 01 00 FF 
05314     83 15 06 F6 | 	mov	arg02, ##@LR__5562
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     7C FB B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     C4 06 90 AD |  if_e	jmp	#LR__0400
05328     A6 01 00 FF 
0532c     85 15 06 F6 | 	mov	arg02, ##@LR__5563
05330     13 13 02 F6 | 	mov	arg01, local01
05334     64 FB B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     B4 06 90 AD |  if_e	jmp	#LR__0401
05340     A6 01 00 FF 
05344     89 15 06 F6 | 	mov	arg02, ##@LR__5564
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     4C FB B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     A4 06 90 AD |  if_e	jmp	#LR__0402
05358     A6 01 00 FF 
0535c     8D 15 06 F6 | 	mov	arg02, ##@LR__5565
05360     13 13 02 F6 | 	mov	arg01, local01
05364     34 FB B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     94 06 90 AD |  if_e	jmp	#LR__0403
05370     A6 01 00 FF 
05374     92 15 06 F6 | 	mov	arg02, ##@LR__5566
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     1C FB B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     84 06 90 AD |  if_e	jmp	#LR__0404
05388     A6 01 00 FF 
0538c     9A 15 06 F6 | 	mov	arg02, ##@LR__5567
05390     13 13 02 F6 | 	mov	arg01, local01
05394     04 FB B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     74 06 90 AD |  if_e	jmp	#LR__0405
053a0     A6 01 00 FF 
053a4     9E 15 06 F6 | 	mov	arg02, ##@LR__5568
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     EC FA B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     64 06 90 AD |  if_e	jmp	#LR__0406
053b8     A6 01 00 FF 
053bc     A0 15 06 F6 | 	mov	arg02, ##@LR__5569
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     D4 FA B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     54 06 90 AD |  if_e	jmp	#LR__0407
053d0     A6 01 00 FF 
053d4     A8 15 06 F6 | 	mov	arg02, ##@LR__5570
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     BC FA B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     44 06 90 AD |  if_e	jmp	#LR__0408
053e8     A6 01 00 FF 
053ec     AF 15 06 F6 | 	mov	arg02, ##@LR__5571
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     A4 FA B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     34 06 90 AD |  if_e	jmp	#LR__0409
05400     A6 01 00 FF 
05404     B3 15 06 F6 | 	mov	arg02, ##@LR__5572
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     8C FA B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     24 06 90 AD |  if_e	jmp	#LR__0410
05418     A6 01 00 FF 
0541c     B8 15 06 F6 | 	mov	arg02, ##@LR__5573
05420     13 13 02 F6 | 	mov	arg01, local01
05424     74 FA B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     14 06 90 AD |  if_e	jmp	#LR__0411
05430     A6 01 00 FF 
05434     BB 15 06 F6 | 	mov	arg02, ##@LR__5574
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     5C FA B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     04 06 90 AD |  if_e	jmp	#LR__0412
05448     A6 01 00 FF 
0544c     C4 15 06 F6 | 	mov	arg02, ##@LR__5575
05450     13 13 02 F6 | 	mov	arg01, local01
05454     44 FA B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     F4 05 90 AD |  if_e	jmp	#LR__0413
05460     A6 01 00 FF 
05464     C8 15 06 F6 | 	mov	arg02, ##@LR__5576
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     2C FA B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     E4 05 90 AD |  if_e	jmp	#LR__0414
05478     A6 01 00 FF 
0547c     CF 15 06 F6 | 	mov	arg02, ##@LR__5577
05480     13 13 02 F6 | 	mov	arg01, local01
05484     14 FA B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     D4 05 90 AD |  if_e	jmp	#LR__0415
05490     A6 01 00 FF 
05494     D3 15 06 F6 | 	mov	arg02, ##@LR__5578
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     FC F9 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     C4 05 90 AD |  if_e	jmp	#LR__0416
054a8     A6 01 00 FF 
054ac     DA 15 06 F6 | 	mov	arg02, ##@LR__5579
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     E4 F9 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     B4 05 90 AD |  if_e	jmp	#LR__0417
054c0     A6 01 00 FF 
054c4     DE 15 06 F6 | 	mov	arg02, ##@LR__5580
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     CC F9 B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     A4 05 90 AD |  if_e	jmp	#LR__0418
054d8     A6 01 00 FF 
054dc     E5 15 06 F6 | 	mov	arg02, ##@LR__5581
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     B4 F9 B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     94 05 90 AD |  if_e	jmp	#LR__0419
054f0     A6 01 00 FF 
054f4     E9 15 06 F6 | 	mov	arg02, ##@LR__5582
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     9C F9 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     84 05 90 AD |  if_e	jmp	#LR__0420
05508     A6 01 00 FF 
0550c     F4 15 06 F6 | 	mov	arg02, ##@LR__5583
05510     13 13 02 F6 | 	mov	arg01, local01
05514     84 F9 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     74 05 90 AD |  if_e	jmp	#LR__0421
05520     A6 01 00 FF 
05524     F8 15 06 F6 | 	mov	arg02, ##@LR__5584
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     6C F9 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     64 05 90 AD |  if_e	jmp	#LR__0422
05538     A6 01 00 FF 
0553c     FF 15 06 F6 | 	mov	arg02, ##@LR__5585
05540     13 13 02 F6 | 	mov	arg01, local01
05544     54 F9 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     54 05 90 AD |  if_e	jmp	#LR__0423
05550     A7 01 00 FF 
05554     03 14 06 F6 | 	mov	arg02, ##@LR__5586
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     3C F9 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     44 05 90 AD |  if_e	jmp	#LR__0424
05568     A7 01 00 FF 
0556c     0B 14 06 F6 | 	mov	arg02, ##@LR__5587
05570     13 13 02 F6 | 	mov	arg01, local01
05574     24 F9 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     34 05 90 AD |  if_e	jmp	#LR__0425
05580     A7 01 00 FF 
05584     0F 14 06 F6 | 	mov	arg02, ##@LR__5588
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     0C F9 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     24 05 90 AD |  if_e	jmp	#LR__0426
05598     A7 01 00 FF 
0559c     16 14 06 F6 | 	mov	arg02, ##@LR__5589
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     F4 F8 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     14 05 90 AD |  if_e	jmp	#LR__0427
055b0     A7 01 00 FF 
055b4     1D 14 06 F6 | 	mov	arg02, ##@LR__5590
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     DC F8 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     04 05 90 AD |  if_e	jmp	#LR__0428
055c8     A7 01 00 FF 
055cc     21 14 06 F6 | 	mov	arg02, ##@LR__5591
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     C4 F8 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     F4 04 90 AD |  if_e	jmp	#LR__0429
055e0     A7 01 00 FF 
055e4     27 14 06 F6 | 	mov	arg02, ##@LR__5592
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     AC F8 B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     E4 04 90 AD |  if_e	jmp	#LR__0430
055f8     A7 01 00 FF 
055fc     2B 14 06 F6 | 	mov	arg02, ##@LR__5593
05600     13 13 02 F6 | 	mov	arg01, local01
05604     94 F8 B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     D4 04 90 AD |  if_e	jmp	#LR__0431
05610     A7 01 00 FF 
05614     32 14 06 F6 | 	mov	arg02, ##@LR__5594
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     7C F8 B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     C4 04 90 AD |  if_e	jmp	#LR__0432
05628     A7 01 00 FF 
0562c     37 14 06 F6 | 	mov	arg02, ##@LR__5595
05630     13 13 02 F6 | 	mov	arg01, local01
05634     64 F8 B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     B4 04 90 AD |  if_e	jmp	#LR__0433
05640     A7 01 00 FF 
05644     3C 14 06 F6 | 	mov	arg02, ##@LR__5596
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     4C F8 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     A4 04 90 AD |  if_e	jmp	#LR__0434
05658     A7 01 00 FF 
0565c     43 14 06 F6 | 	mov	arg02, ##@LR__5597
05660     13 13 02 F6 | 	mov	arg01, local01
05664     34 F8 B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     94 04 90 AD |  if_e	jmp	#LR__0435
05670     A7 01 00 FF 
05674     46 14 06 F6 | 	mov	arg02, ##@LR__5598
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     1C F8 B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     84 04 90 AD |  if_e	jmp	#LR__0436
05688     A7 01 00 FF 
0568c     50 14 06 F6 | 	mov	arg02, ##@LR__5599
05690     13 13 02 F6 | 	mov	arg01, local01
05694     04 F8 B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     74 04 90 AD |  if_e	jmp	#LR__0437
056a0     A7 01 00 FF 
056a4     54 14 06 F6 | 	mov	arg02, ##@LR__5600
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     EC F7 B1 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     64 04 90 AD |  if_e	jmp	#LR__0438
056b8     A7 01 00 FF 
056bc     5C 14 06 F6 | 	mov	arg02, ##@LR__5601
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     D4 F7 B1 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     54 04 90 AD |  if_e	jmp	#LR__0439
056d0     A7 01 00 FF 
056d4     60 14 06 F6 | 	mov	arg02, ##@LR__5602
056d8     13 13 02 F6 | 	mov	arg01, local01
056dc     BC F7 B1 FD | 	call	#__system___string_cmp
056e0     00 FA 0D F2 | 	cmp	result1, #0 wz
056e4     44 04 90 AD |  if_e	jmp	#LR__0440
056e8     A7 01 00 FF 
056ec     66 14 06 F6 | 	mov	arg02, ##@LR__5603
056f0     13 13 02 F6 | 	mov	arg01, local01
056f4     A4 F7 B1 FD | 	call	#__system___string_cmp
056f8     00 FA 0D F2 | 	cmp	result1, #0 wz
056fc     34 04 90 AD |  if_e	jmp	#LR__0441
05700     A7 01 00 FF 
05704     6C 14 06 F6 | 	mov	arg02, ##@LR__5604
05708     13 13 02 F6 | 	mov	arg01, local01
0570c     8C F7 B1 FD | 	call	#__system___string_cmp
05710     00 FA 0D F2 | 	cmp	result1, #0 wz
05714     24 04 90 AD |  if_e	jmp	#LR__0442
05718     28 04 90 FD | 	jmp	#LR__0443
0571c                 | LR__0310
0571c     5C FA 05 F6 | 	mov	result1, #92
05720     24 04 90 FD | 	jmp	#LR__0444
05724                 | LR__0311
05724     5C FA 05 F6 | 	mov	result1, #92
05728     1C 04 90 FD | 	jmp	#LR__0444
0572c                 | LR__0312
0572c     B9 FA 05 F6 | 	mov	result1, #185
05730     14 04 90 FD | 	jmp	#LR__0444
05734                 | LR__0313
05734     47 FA 05 F6 | 	mov	result1, #71
05738     0C 04 90 FD | 	jmp	#LR__0444
0573c                 | LR__0314
0573c     59 FA 05 F6 | 	mov	result1, #89
05740     04 04 90 FD | 	jmp	#LR__0444
05744                 | LR__0315
05744     59 FA 05 F6 | 	mov	result1, #89
05748     FC 03 90 FD | 	jmp	#LR__0444
0574c                 | LR__0316
0574c     C3 FA 05 F6 | 	mov	result1, #195
05750     F4 03 90 FD | 	jmp	#LR__0444
05754                 | LR__0317
05754     AE FA 05 F6 | 	mov	result1, #174
05758     EC 03 90 FD | 	jmp	#LR__0444
0575c                 | LR__0318
0575c     AE FA 05 F6 | 	mov	result1, #174
05760     E4 03 90 FD | 	jmp	#LR__0444
05764                 | LR__0319
05764     B1 FA 05 F6 | 	mov	result1, #177
05768     DC 03 90 FD | 	jmp	#LR__0444
0576c                 | LR__0320
0576c     B1 FA 05 F6 | 	mov	result1, #177
05770     D4 03 90 FD | 	jmp	#LR__0444
05774                 | LR__0321
05774     AF FA 05 F6 | 	mov	result1, #175
05778     CC 03 90 FD | 	jmp	#LR__0444
0577c                 | LR__0322
0577c     AF FA 05 F6 | 	mov	result1, #175
05780     C4 03 90 FD | 	jmp	#LR__0444
05784                 | LR__0323
05784     B0 FA 05 F6 | 	mov	result1, #176
05788     BC 03 90 FD | 	jmp	#LR__0444
0578c                 | LR__0324
0578c     B0 FA 05 F6 | 	mov	result1, #176
05790     B4 03 90 FD | 	jmp	#LR__0444
05794                 | LR__0325
05794     45 FA 05 F6 | 	mov	result1, #69
05798     AC 03 90 FD | 	jmp	#LR__0444
0579c                 | LR__0326
0579c     45 FA 05 F6 | 	mov	result1, #69
057a0     A4 03 90 FD | 	jmp	#LR__0444
057a4                 | LR__0327
057a4     69 FA 05 F6 | 	mov	result1, #105
057a8     9C 03 90 FD | 	jmp	#LR__0444
057ac                 | LR__0328
057ac     B4 FA 05 F6 | 	mov	result1, #180
057b0     94 03 90 FD | 	jmp	#LR__0444
057b4                 | LR__0329
057b4     40 FA 05 F6 | 	mov	result1, #64
057b8     8C 03 90 FD | 	jmp	#LR__0444
057bc                 | LR__0330
057bc     49 FA 05 F6 | 	mov	result1, #73
057c0     84 03 90 FD | 	jmp	#LR__0444
057c4                 | LR__0331
057c4     49 FA 05 F6 | 	mov	result1, #73
057c8     7C 03 90 FD | 	jmp	#LR__0444
057cc                 | LR__0332
057cc     50 FA 05 F6 | 	mov	result1, #80
057d0     74 03 90 FD | 	jmp	#LR__0444
057d4                 | LR__0333
057d4     50 FA 05 F6 | 	mov	result1, #80
057d8     6C 03 90 FD | 	jmp	#LR__0444
057dc                 | LR__0334
057dc     68 FA 05 F6 | 	mov	result1, #104
057e0     64 03 90 FD | 	jmp	#LR__0444
057e4                 | LR__0335
057e4     B7 FA 05 F6 | 	mov	result1, #183
057e8     5C 03 90 FD | 	jmp	#LR__0444
057ec                 | LR__0336
057ec     73 FA 05 F6 | 	mov	result1, #115
057f0     54 03 90 FD | 	jmp	#LR__0444
057f4                 | LR__0337
057f4     74 FA 05 F6 | 	mov	result1, #116
057f8     4C 03 90 FD | 	jmp	#LR__0444
057fc                 | LR__0338
057fc     6C FA 05 F6 | 	mov	result1, #108
05800     44 03 90 FD | 	jmp	#LR__0444
05804                 | LR__0339
05804     6C FA 05 F6 | 	mov	result1, #108
05808     3C 03 90 FD | 	jmp	#LR__0444
0580c                 | LR__0340
0580c     89 FA 05 F6 | 	mov	result1, #137
05810     34 03 90 FD | 	jmp	#LR__0444
05814                 | LR__0341
05814     C2 FA 05 F6 | 	mov	result1, #194
05818     2C 03 90 FD | 	jmp	#LR__0444
0581c                 | LR__0342
0581c     72 FA 05 F6 | 	mov	result1, #114
05820     24 03 90 FD | 	jmp	#LR__0444
05824                 | LR__0343
05824     5D FA 05 F6 | 	mov	result1, #93
05828     1C 03 90 FD | 	jmp	#LR__0444
0582c                 | LR__0344
0582c     96 FA 05 F6 | 	mov	result1, #150
05830     14 03 90 FD | 	jmp	#LR__0444
05834                 | LR__0345
05834     43 FA 05 F6 | 	mov	result1, #67
05838     0C 03 90 FD | 	jmp	#LR__0444
0583c                 | LR__0346
0583c     43 FA 05 F6 | 	mov	result1, #67
05840     04 03 90 FD | 	jmp	#LR__0444
05844                 | LR__0347
05844     43 FA 05 F6 | 	mov	result1, #67
05848     FC 02 90 FD | 	jmp	#LR__0444
0584c                 | LR__0348
0584c     5A FA 05 F6 | 	mov	result1, #90
05850     F4 02 90 FD | 	jmp	#LR__0444
05854                 | LR__0349
05854     AB FA 05 F6 | 	mov	result1, #171
05858     EC 02 90 FD | 	jmp	#LR__0444
0585c                 | LR__0350
0585c     BD FA 05 F6 | 	mov	result1, #189
05860     E4 02 90 FD | 	jmp	#LR__0444
05864                 | LR__0351
05864     BD FA 05 F6 | 	mov	result1, #189
05868     DC 02 90 FD | 	jmp	#LR__0444
0586c                 | LR__0352
0586c     46 FA 05 F6 | 	mov	result1, #70
05870     D4 02 90 FD | 	jmp	#LR__0444
05874                 | LR__0353
05874     46 FA 05 F6 | 	mov	result1, #70
05878     CC 02 90 FD | 	jmp	#LR__0444
0587c                 | LR__0354
0587c     71 FA 05 F6 | 	mov	result1, #113
05880     C4 02 90 FD | 	jmp	#LR__0444
05884                 | LR__0355
05884     71 FA 05 F6 | 	mov	result1, #113
05888     BC 02 90 FD | 	jmp	#LR__0444
0588c                 | LR__0356
0588c     60 FA 05 F6 | 	mov	result1, #96
05890     B4 02 90 FD | 	jmp	#LR__0444
05894                 | LR__0357
05894     4A FA 05 F6 | 	mov	result1, #74
05898     AC 02 90 FD | 	jmp	#LR__0444
0589c                 | LR__0358
0589c     4A FA 05 F6 | 	mov	result1, #74
058a0     A4 02 90 FD | 	jmp	#LR__0444
058a4                 | LR__0359
058a4     48 FA 05 F6 | 	mov	result1, #72
058a8     9C 02 90 FD | 	jmp	#LR__0444
058ac                 | LR__0360
058ac     48 FA 05 F6 | 	mov	result1, #72
058b0     94 02 90 FD | 	jmp	#LR__0444
058b4                 | LR__0361
058b4     BB FA 05 F6 | 	mov	result1, #187
058b8     8C 02 90 FD | 	jmp	#LR__0444
058bc                 | LR__0362
058bc     A9 FA 05 F6 | 	mov	result1, #169
058c0     84 02 90 FD | 	jmp	#LR__0444
058c4                 | LR__0363
058c4     4E FA 05 F6 | 	mov	result1, #78
058c8     7C 02 90 FD | 	jmp	#LR__0444
058cc                 | LR__0364
058cc     4E FA 05 F6 | 	mov	result1, #78
058d0     74 02 90 FD | 	jmp	#LR__0444
058d4                 | LR__0365
058d4     58 FA 05 F6 | 	mov	result1, #88
058d8     6C 02 90 FD | 	jmp	#LR__0444
058dc                 | LR__0366
058dc     5F FA 05 F6 | 	mov	result1, #95
058e0     64 02 90 FD | 	jmp	#LR__0444
058e4                 | LR__0367
058e4     5F FA 05 F6 | 	mov	result1, #95
058e8     5C 02 90 FD | 	jmp	#LR__0444
058ec                 | LR__0368
058ec     B5 FA 05 F6 | 	mov	result1, #181
058f0     54 02 90 FD | 	jmp	#LR__0444
058f4                 | LR__0369
058f4     4C FA 05 F6 | 	mov	result1, #76
058f8     4C 02 90 FD | 	jmp	#LR__0444
058fc                 | LR__0370
058fc     4C FA 05 F6 | 	mov	result1, #76
05900     44 02 90 FD | 	jmp	#LR__0444
05904                 | LR__0371
05904     52 FA 05 F6 | 	mov	result1, #82
05908     3C 02 90 FD | 	jmp	#LR__0444
0590c                 | LR__0372
0590c     52 FA 05 F6 | 	mov	result1, #82
05910     34 02 90 FD | 	jmp	#LR__0444
05914                 | LR__0373
05914     97 FA 05 F6 | 	mov	result1, #151
05918     2C 02 90 FD | 	jmp	#LR__0444
0591c                 | LR__0374
0591c     C6 FA 05 F6 | 	mov	result1, #198
05920     24 02 90 FD | 	jmp	#LR__0444
05924                 | LR__0375
05924     61 FA 05 F6 | 	mov	result1, #97
05928     1C 02 90 FD | 	jmp	#LR__0444
0592c                 | LR__0376
0592c     61 FA 05 F6 | 	mov	result1, #97
05930     14 02 90 FD | 	jmp	#LR__0444
05934                 | LR__0377
05934     63 FA 05 F6 | 	mov	result1, #99
05938     0C 02 90 FD | 	jmp	#LR__0444
0593c                 | LR__0378
0593c     41 FA 05 F6 | 	mov	result1, #65
05940     04 02 90 FD | 	jmp	#LR__0444
05944                 | LR__0379
05944     4B FA 05 F6 | 	mov	result1, #75
05948     FC 01 90 FD | 	jmp	#LR__0444
0594c                 | LR__0380
0594c     4B FA 05 F6 | 	mov	result1, #75
05950     F4 01 90 FD | 	jmp	#LR__0444
05954                 | LR__0381
05954     C1 FA 05 F6 | 	mov	result1, #193
05958     EC 01 90 FD | 	jmp	#LR__0444
0595c                 | LR__0382
0595c     B3 FA 05 F6 | 	mov	result1, #179
05960     E4 01 90 FD | 	jmp	#LR__0444
05964                 | LR__0383
05964     5E FA 05 F6 | 	mov	result1, #94
05968     DC 01 90 FD | 	jmp	#LR__0444
0596c                 | LR__0384
0596c     5E FA 05 F6 | 	mov	result1, #94
05970     D4 01 90 FD | 	jmp	#LR__0444
05974                 | LR__0385
05974     7C FA 05 F6 | 	mov	result1, #124
05978     CC 01 90 FD | 	jmp	#LR__0444
0597c                 | LR__0386
0597c     7E FA 05 F6 | 	mov	result1, #126
05980     C4 01 90 FD | 	jmp	#LR__0444
05984                 | LR__0387
05984     7D FA 05 F6 | 	mov	result1, #125
05988     BC 01 90 FD | 	jmp	#LR__0444
0598c                 | LR__0388
0598c     7F FA 05 F6 | 	mov	result1, #127
05990     B4 01 90 FD | 	jmp	#LR__0444
05994                 | LR__0389
05994     80 FA 05 F6 | 	mov	result1, #128
05998     AC 01 90 FD | 	jmp	#LR__0444
0599c                 | LR__0390
0599c     55 FA 05 F6 | 	mov	result1, #85
059a0     A4 01 90 FD | 	jmp	#LR__0444
059a4                 | LR__0391
059a4     75 FA 05 F6 | 	mov	result1, #117
059a8     9C 01 90 FD | 	jmp	#LR__0444
059ac                 | LR__0392
059ac     75 FA 05 F6 | 	mov	result1, #117
059b0     94 01 90 FD | 	jmp	#LR__0444
059b4                 | LR__0393
059b4     42 FA 05 F6 | 	mov	result1, #66
059b8     8C 01 90 FD | 	jmp	#LR__0444
059bc                 | LR__0394
059bc     42 FA 05 F6 | 	mov	result1, #66
059c0     84 01 90 FD | 	jmp	#LR__0444
059c4                 | LR__0395
059c4     95 FA 05 F6 | 	mov	result1, #149
059c8     7C 01 90 FD | 	jmp	#LR__0444
059cc                 | LR__0396
059cc     AC FA 05 F6 | 	mov	result1, #172
059d0     74 01 90 FD | 	jmp	#LR__0444
059d4                 | LR__0397
059d4     81 FA 05 F6 | 	mov	result1, #129
059d8     6C 01 90 FD | 	jmp	#LR__0444
059dc                 | LR__0398
059dc     81 FA 05 F6 | 	mov	result1, #129
059e0     64 01 90 FD | 	jmp	#LR__0444
059e4                 | LR__0399
059e4     44 FA 05 F6 | 	mov	result1, #68
059e8     5C 01 90 FD | 	jmp	#LR__0444
059ec                 | LR__0400
059ec     44 FA 05 F6 | 	mov	result1, #68
059f0     54 01 90 FD | 	jmp	#LR__0444
059f4                 | LR__0401
059f4     BC FA 05 F6 | 	mov	result1, #188
059f8     4C 01 90 FD | 	jmp	#LR__0444
059fc                 | LR__0402
059fc     88 FA 05 F6 | 	mov	result1, #136
05a00     44 01 90 FD | 	jmp	#LR__0444
05a04                 | LR__0403
05a04     B6 FA 05 F6 | 	mov	result1, #182
05a08     3C 01 90 FD | 	jmp	#LR__0444
05a0c                 | LR__0404
05a0c     92 FA 05 F6 | 	mov	result1, #146
05a10     34 01 90 FD | 	jmp	#LR__0444
05a14                 | LR__0405
05a14     BE FA 05 F6 | 	mov	result1, #190
05a18     2C 01 90 FD | 	jmp	#LR__0444
05a1c                 | LR__0406
05a1c     BE FA 05 F6 | 	mov	result1, #190
05a20     24 01 90 FD | 	jmp	#LR__0444
05a24                 | LR__0407
05a24     C7 FA 05 F6 | 	mov	result1, #199
05a28     1C 01 90 FD | 	jmp	#LR__0444
05a2c                 | LR__0408
05a2c     AA FA 05 F6 | 	mov	result1, #170
05a30     14 01 90 FD | 	jmp	#LR__0444
05a34                 | LR__0409
05a34     4D FA 05 F6 | 	mov	result1, #77
05a38     0C 01 90 FD | 	jmp	#LR__0444
05a3c                 | LR__0410
05a3c     51 FA 05 F6 | 	mov	result1, #81
05a40     04 01 90 FD | 	jmp	#LR__0444
05a44                 | LR__0411
05a44     51 FA 05 F6 | 	mov	result1, #81
05a48     FC 00 90 FD | 	jmp	#LR__0444
05a4c                 | LR__0412
05a4c     8E FA 05 F6 | 	mov	result1, #142
05a50     F4 00 90 FD | 	jmp	#LR__0444
05a54                 | LR__0413
05a54     8E FA 05 F6 | 	mov	result1, #142
05a58     EC 00 90 FD | 	jmp	#LR__0444
05a5c                 | LR__0414
05a5c     90 FA 05 F6 | 	mov	result1, #144
05a60     E4 00 90 FD | 	jmp	#LR__0444
05a64                 | LR__0415
05a64     90 FA 05 F6 | 	mov	result1, #144
05a68     DC 00 90 FD | 	jmp	#LR__0444
05a6c                 | LR__0416
05a6c     8D FA 05 F6 | 	mov	result1, #141
05a70     D4 00 90 FD | 	jmp	#LR__0444
05a74                 | LR__0417
05a74     8D FA 05 F6 | 	mov	result1, #141
05a78     CC 00 90 FD | 	jmp	#LR__0444
05a7c                 | LR__0418
05a7c     8C FA 05 F6 | 	mov	result1, #140
05a80     C4 00 90 FD | 	jmp	#LR__0444
05a84                 | LR__0419
05a84     8C FA 05 F6 | 	mov	result1, #140
05a88     BC 00 90 FD | 	jmp	#LR__0444
05a8c                 | LR__0420
05a8c     91 FA 05 F6 | 	mov	result1, #145
05a90     B4 00 90 FD | 	jmp	#LR__0444
05a94                 | LR__0421
05a94     91 FA 05 F6 | 	mov	result1, #145
05a98     AC 00 90 FD | 	jmp	#LR__0444
05a9c                 | LR__0422
05a9c     8B FA 05 F6 | 	mov	result1, #139
05aa0     A4 00 90 FD | 	jmp	#LR__0444
05aa4                 | LR__0423
05aa4     8B FA 05 F6 | 	mov	result1, #139
05aa8     9C 00 90 FD | 	jmp	#LR__0444
05aac                 | LR__0424
05aac     8F FA 05 F6 | 	mov	result1, #143
05ab0     94 00 90 FD | 	jmp	#LR__0444
05ab4                 | LR__0425
05ab4     8F FA 05 F6 | 	mov	result1, #143
05ab8     8C 00 90 FD | 	jmp	#LR__0444
05abc                 | LR__0426
05abc     8F FA 05 F6 | 	mov	result1, #143
05ac0     84 00 90 FD | 	jmp	#LR__0444
05ac4                 | LR__0427
05ac4     B2 FA 05 F6 | 	mov	result1, #178
05ac8     7C 00 90 FD | 	jmp	#LR__0444
05acc                 | LR__0428
05acc     B2 FA 05 F6 | 	mov	result1, #178
05ad0     74 00 90 FD | 	jmp	#LR__0444
05ad4                 | LR__0429
05ad4     75 FA 05 F6 | 	mov	result1, #117
05ad8     6C 00 90 FD | 	jmp	#LR__0444
05adc                 | LR__0430
05adc     75 FA 05 F6 | 	mov	result1, #117
05ae0     64 00 90 FD | 	jmp	#LR__0444
05ae4                 | LR__0431
05ae4     6D FA 05 F6 | 	mov	result1, #109
05ae8     5C 00 90 FD | 	jmp	#LR__0444
05aec                 | LR__0432
05aec     6D FA 05 F6 | 	mov	result1, #109
05af0     54 00 90 FD | 	jmp	#LR__0444
05af4                 | LR__0433
05af4     5B FA 05 F6 | 	mov	result1, #91
05af8     4C 00 90 FD | 	jmp	#LR__0444
05afc                 | LR__0434
05afc     56 FA 05 F6 | 	mov	result1, #86
05b00     44 00 90 FD | 	jmp	#LR__0444
05b04                 | LR__0435
05b04     56 FA 05 F6 | 	mov	result1, #86
05b08     3C 00 90 FD | 	jmp	#LR__0444
05b0c                 | LR__0436
05b0c     70 FA 05 F6 | 	mov	result1, #112
05b10     34 00 90 FD | 	jmp	#LR__0444
05b14                 | LR__0437
05b14     70 FA 05 F6 | 	mov	result1, #112
05b18     2C 00 90 FD | 	jmp	#LR__0444
05b1c                 | LR__0438
05b1c     57 FA 05 F6 | 	mov	result1, #87
05b20     24 00 90 FD | 	jmp	#LR__0444
05b24                 | LR__0439
05b24     57 FA 05 F6 | 	mov	result1, #87
05b28     1C 00 90 FD | 	jmp	#LR__0444
05b2c                 | LR__0440
05b2c     79 FA 05 F6 | 	mov	result1, #121
05b30     14 00 90 FD | 	jmp	#LR__0444
05b34                 | LR__0441
05b34     77 FA 05 F6 | 	mov	result1, #119
05b38     0C 00 90 FD | 	jmp	#LR__0444
05b3c                 | LR__0442
05b3c     78 FA 05 F6 | 	mov	result1, #120
05b40     04 00 90 FD | 	jmp	#LR__0444
05b44                 | LR__0443
05b44     00 FA 05 F6 | 	mov	result1, #0
05b48                 | LR__0444
05b48     A7 F0 03 F6 | 	mov	ptra, fp
05b4c     B2 00 A0 FD | 	call	#popregs_
05b50                 | _iscommand_ret
05b50     2D 00 64 FD | 	ret
05b54                 | 
05b54                 | ' 
05b54                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05b54                 | ' 
05b54                 | ' function isfunction(s as string) as ubyte
05b54                 | _isfunction
05b54     01 4A 05 F6 | 	mov	COUNT_, #1
05b58     A8 00 A0 FD | 	call	#pushregs_
05b5c                 | ' 
05b5c                 | ' select case s
05b5c     09 27 02 F6 | 	mov	local01, arg01
05b60     A7 01 00 FF 
05b64     72 14 06 F6 | 	mov	arg02, ##@LR__5605
05b68     13 13 02 F6 | 	mov	arg01, local01
05b6c     2C F3 B1 FD | 	call	#__system___string_cmp
05b70     00 FA 0D F2 | 	cmp	result1, #0 wz
05b74     3C 04 90 AD |  if_e	jmp	#LR__0450
05b78     A7 01 00 FF 
05b7c     76 14 06 F6 | 	mov	arg02, ##@LR__5606
05b80     13 13 02 F6 | 	mov	arg01, local01
05b84     14 F3 B1 FD | 	call	#__system___string_cmp
05b88     00 FA 0D F2 | 	cmp	result1, #0 wz
05b8c     2C 04 90 AD |  if_e	jmp	#LR__0451
05b90     A7 01 00 FF 
05b94     7B 14 06 F6 | 	mov	arg02, ##@LR__5607
05b98     13 13 02 F6 | 	mov	arg01, local01
05b9c     FC F2 B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ba4     1C 04 90 AD |  if_e	jmp	#LR__0452
05ba8     A7 01 00 FF 
05bac     7F 14 06 F6 | 	mov	arg02, ##@LR__5608
05bb0     13 13 02 F6 | 	mov	arg01, local01
05bb4     E4 F2 B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bbc     0C 04 90 AD |  if_e	jmp	#LR__0453
05bc0     A7 01 00 FF 
05bc4     84 14 06 F6 | 	mov	arg02, ##@LR__5609
05bc8     13 13 02 F6 | 	mov	arg01, local01
05bcc     CC F2 B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bd4     FC 03 90 AD |  if_e	jmp	#LR__0454
05bd8     A7 01 00 FF 
05bdc     88 14 06 F6 | 	mov	arg02, ##@LR__5610
05be0     13 13 02 F6 | 	mov	arg01, local01
05be4     B4 F2 B1 FD | 	call	#__system___string_cmp
05be8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bec     EC 03 90 AD |  if_e	jmp	#LR__0455
05bf0     A7 01 00 FF 
05bf4     8D 14 06 F6 | 	mov	arg02, ##@LR__5611
05bf8     13 13 02 F6 | 	mov	arg01, local01
05bfc     9C F2 B1 FD | 	call	#__system___string_cmp
05c00     00 FA 0D F2 | 	cmp	result1, #0 wz
05c04     DC 03 90 AD |  if_e	jmp	#LR__0456
05c08     A7 01 00 FF 
05c0c     91 14 06 F6 | 	mov	arg02, ##@LR__5612
05c10     13 13 02 F6 | 	mov	arg01, local01
05c14     84 F2 B1 FD | 	call	#__system___string_cmp
05c18     00 FA 0D F2 | 	cmp	result1, #0 wz
05c1c     CC 03 90 AD |  if_e	jmp	#LR__0457
05c20     A7 01 00 FF 
05c24     96 14 06 F6 | 	mov	arg02, ##@LR__5613
05c28     13 13 02 F6 | 	mov	arg01, local01
05c2c     6C F2 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     BC 03 90 AD |  if_e	jmp	#LR__0458
05c38     A7 01 00 FF 
05c3c     9B 14 06 F6 | 	mov	arg02, ##@LR__5614
05c40     13 13 02 F6 | 	mov	arg01, local01
05c44     54 F2 B1 FD | 	call	#__system___string_cmp
05c48     00 FA 0D F2 | 	cmp	result1, #0 wz
05c4c     AC 03 90 AD |  if_e	jmp	#LR__0459
05c50     A7 01 00 FF 
05c54     9F 14 06 F6 | 	mov	arg02, ##@LR__5615
05c58     13 13 02 F6 | 	mov	arg01, local01
05c5c     3C F2 B1 FD | 	call	#__system___string_cmp
05c60     00 FA 0D F2 | 	cmp	result1, #0 wz
05c64     9C 03 90 AD |  if_e	jmp	#LR__0460
05c68     A7 01 00 FF 
05c6c     A5 14 06 F6 | 	mov	arg02, ##@LR__5616
05c70     13 13 02 F6 | 	mov	arg01, local01
05c74     24 F2 B1 FD | 	call	#__system___string_cmp
05c78     00 FA 0D F2 | 	cmp	result1, #0 wz
05c7c     8C 03 90 AD |  if_e	jmp	#LR__0461
05c80     A7 01 00 FF 
05c84     AE 14 06 F6 | 	mov	arg02, ##@LR__5617
05c88     13 13 02 F6 | 	mov	arg01, local01
05c8c     0C F2 B1 FD | 	call	#__system___string_cmp
05c90     00 FA 0D F2 | 	cmp	result1, #0 wz
05c94     7C 03 90 AD |  if_e	jmp	#LR__0462
05c98     A7 01 00 FF 
05c9c     B2 14 06 F6 | 	mov	arg02, ##@LR__5618
05ca0     13 13 02 F6 | 	mov	arg01, local01
05ca4     F4 F1 B1 FD | 	call	#__system___string_cmp
05ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cac     6C 03 90 AD |  if_e	jmp	#LR__0463
05cb0     A7 01 00 FF 
05cb4     B6 14 06 F6 | 	mov	arg02, ##@LR__5619
05cb8     13 13 02 F6 | 	mov	arg01, local01
05cbc     DC F1 B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc4     5C 03 90 AD |  if_e	jmp	#LR__0464
05cc8     A7 01 00 FF 
05ccc     BF 14 06 F6 | 	mov	arg02, ##@LR__5620
05cd0     13 13 02 F6 | 	mov	arg01, local01
05cd4     C4 F1 B1 FD | 	call	#__system___string_cmp
05cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cdc     4C 03 90 AD |  if_e	jmp	#LR__0465
05ce0     A7 01 00 FF 
05ce4     C3 14 06 F6 | 	mov	arg02, ##@LR__5621
05ce8     13 13 02 F6 | 	mov	arg01, local01
05cec     AC F1 B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf4     3C 03 90 AD |  if_e	jmp	#LR__0466
05cf8     A7 01 00 FF 
05cfc     D1 14 06 F6 | 	mov	arg02, ##@LR__5622
05d00     13 13 02 F6 | 	mov	arg01, local01
05d04     94 F1 B1 FD | 	call	#__system___string_cmp
05d08     00 FA 0D F2 | 	cmp	result1, #0 wz
05d0c     2C 03 90 AD |  if_e	jmp	#LR__0467
05d10     A7 01 00 FF 
05d14     DE 14 06 F6 | 	mov	arg02, ##@LR__5623
05d18     13 13 02 F6 | 	mov	arg01, local01
05d1c     7C F1 B1 FD | 	call	#__system___string_cmp
05d20     00 FA 0D F2 | 	cmp	result1, #0 wz
05d24     1C 03 90 AD |  if_e	jmp	#LR__0468
05d28     A7 01 00 FF 
05d2c     E6 14 06 F6 | 	mov	arg02, ##@LR__5624
05d30     13 13 02 F6 | 	mov	arg01, local01
05d34     64 F1 B1 FD | 	call	#__system___string_cmp
05d38     00 FA 0D F2 | 	cmp	result1, #0 wz
05d3c     0C 03 90 AD |  if_e	jmp	#LR__0469
05d40     A7 01 00 FF 
05d44     EB 14 06 F6 | 	mov	arg02, ##@LR__5625
05d48     13 13 02 F6 | 	mov	arg01, local01
05d4c     4C F1 B1 FD | 	call	#__system___string_cmp
05d50     00 FA 0D F2 | 	cmp	result1, #0 wz
05d54     FC 02 90 AD |  if_e	jmp	#LR__0470
05d58     A7 01 00 FF 
05d5c     F2 14 06 F6 | 	mov	arg02, ##@LR__5626
05d60     13 13 02 F6 | 	mov	arg01, local01
05d64     34 F1 B1 FD | 	call	#__system___string_cmp
05d68     00 FA 0D F2 | 	cmp	result1, #0 wz
05d6c     EC 02 90 AD |  if_e	jmp	#LR__0471
05d70     A7 01 00 FF 
05d74     F6 14 06 F6 | 	mov	arg02, ##@LR__5627
05d78     13 13 02 F6 | 	mov	arg01, local01
05d7c     1C F1 B1 FD | 	call	#__system___string_cmp
05d80     00 FA 0D F2 | 	cmp	result1, #0 wz
05d84     DC 02 90 AD |  if_e	jmp	#LR__0472
05d88     A7 01 00 FF 
05d8c     FC 14 06 F6 | 	mov	arg02, ##@LR__5628
05d90     13 13 02 F6 | 	mov	arg01, local01
05d94     04 F1 B1 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     CC 02 90 AD |  if_e	jmp	#LR__0473
05da0     A7 01 00 FF 
05da4     00 15 06 F6 | 	mov	arg02, ##@LR__5629
05da8     13 13 02 F6 | 	mov	arg01, local01
05dac     EC F0 B1 FD | 	call	#__system___string_cmp
05db0     00 FA 0D F2 | 	cmp	result1, #0 wz
05db4     BC 02 90 AD |  if_e	jmp	#LR__0474
05db8     A7 01 00 FF 
05dbc     04 15 06 F6 | 	mov	arg02, ##@LR__5630
05dc0     13 13 02 F6 | 	mov	arg01, local01
05dc4     D4 F0 B1 FD | 	call	#__system___string_cmp
05dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dcc     AC 02 90 AD |  if_e	jmp	#LR__0475
05dd0     A7 01 00 FF 
05dd4     0A 15 06 F6 | 	mov	arg02, ##@LR__5631
05dd8     13 13 02 F6 | 	mov	arg01, local01
05ddc     BC F0 B1 FD | 	call	#__system___string_cmp
05de0     00 FA 0D F2 | 	cmp	result1, #0 wz
05de4     9C 02 90 AD |  if_e	jmp	#LR__0476
05de8     A7 01 00 FF 
05dec     0F 15 06 F6 | 	mov	arg02, ##@LR__5632
05df0     13 13 02 F6 | 	mov	arg01, local01
05df4     A4 F0 B1 FD | 	call	#__system___string_cmp
05df8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dfc     8C 02 90 AD |  if_e	jmp	#LR__0477
05e00     A7 01 00 FF 
05e04     16 15 06 F6 | 	mov	arg02, ##@LR__5633
05e08     13 13 02 F6 | 	mov	arg01, local01
05e0c     8C F0 B1 FD | 	call	#__system___string_cmp
05e10     00 FA 0D F2 | 	cmp	result1, #0 wz
05e14     7C 02 90 AD |  if_e	jmp	#LR__0478
05e18     A7 01 00 FF 
05e1c     1D 15 06 F6 | 	mov	arg02, ##@LR__5634
05e20     13 13 02 F6 | 	mov	arg01, local01
05e24     74 F0 B1 FD | 	call	#__system___string_cmp
05e28     00 FA 0D F2 | 	cmp	result1, #0 wz
05e2c     6C 02 90 AD |  if_e	jmp	#LR__0479
05e30     A7 01 00 FF 
05e34     24 15 06 F6 | 	mov	arg02, ##@LR__5635
05e38     13 13 02 F6 | 	mov	arg01, local01
05e3c     5C F0 B1 FD | 	call	#__system___string_cmp
05e40     00 FA 0D F2 | 	cmp	result1, #0 wz
05e44     5C 02 90 AD |  if_e	jmp	#LR__0480
05e48     A7 01 00 FF 
05e4c     2B 15 06 F6 | 	mov	arg02, ##@LR__5636
05e50     13 13 02 F6 | 	mov	arg01, local01
05e54     44 F0 B1 FD | 	call	#__system___string_cmp
05e58     00 FA 0D F2 | 	cmp	result1, #0 wz
05e5c     4C 02 90 AD |  if_e	jmp	#LR__0481
05e60     A7 01 00 FF 
05e64     30 15 06 F6 | 	mov	arg02, ##@LR__5637
05e68     13 13 02 F6 | 	mov	arg01, local01
05e6c     2C F0 B1 FD | 	call	#__system___string_cmp
05e70     00 FA 0D F2 | 	cmp	result1, #0 wz
05e74     3C 02 90 AD |  if_e	jmp	#LR__0482
05e78     A7 01 00 FF 
05e7c     38 15 06 F6 | 	mov	arg02, ##@LR__5638
05e80     13 13 02 F6 | 	mov	arg01, local01
05e84     14 F0 B1 FD | 	call	#__system___string_cmp
05e88     00 FA 0D F2 | 	cmp	result1, #0 wz
05e8c     2C 02 90 AD |  if_e	jmp	#LR__0483
05e90     A7 01 00 FF 
05e94     3E 15 06 F6 | 	mov	arg02, ##@LR__5639
05e98     13 13 02 F6 | 	mov	arg01, local01
05e9c     FC EF B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     1C 02 90 AD |  if_e	jmp	#LR__0484
05ea8     A7 01 00 FF 
05eac     45 15 06 F6 | 	mov	arg02, ##@LR__5640
05eb0     13 13 02 F6 | 	mov	arg01, local01
05eb4     E4 EF B1 FD | 	call	#__system___string_cmp
05eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ebc     0C 02 90 AD |  if_e	jmp	#LR__0485
05ec0     A7 01 00 FF 
05ec4     4B 15 06 F6 | 	mov	arg02, ##@LR__5641
05ec8     13 13 02 F6 | 	mov	arg01, local01
05ecc     CC EF B1 FD | 	call	#__system___string_cmp
05ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed4     FC 01 90 AD |  if_e	jmp	#LR__0486
05ed8     A7 01 00 FF 
05edc     51 15 06 F6 | 	mov	arg02, ##@LR__5642
05ee0     13 13 02 F6 | 	mov	arg01, local01
05ee4     B4 EF B1 FD | 	call	#__system___string_cmp
05ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
05eec     EC 01 90 AD |  if_e	jmp	#LR__0487
05ef0     A7 01 00 FF 
05ef4     55 15 06 F6 | 	mov	arg02, ##@LR__5643
05ef8     13 13 02 F6 | 	mov	arg01, local01
05efc     9C EF B1 FD | 	call	#__system___string_cmp
05f00     00 FA 0D F2 | 	cmp	result1, #0 wz
05f04     DC 01 90 AD |  if_e	jmp	#LR__0488
05f08     A7 01 00 FF 
05f0c     59 15 06 F6 | 	mov	arg02, ##@LR__5644
05f10     13 13 02 F6 | 	mov	arg01, local01
05f14     84 EF B1 FD | 	call	#__system___string_cmp
05f18     00 FA 0D F2 | 	cmp	result1, #0 wz
05f1c     CC 01 90 AD |  if_e	jmp	#LR__0489
05f20     A7 01 00 FF 
05f24     5D 15 06 F6 | 	mov	arg02, ##@LR__5645
05f28     13 13 02 F6 | 	mov	arg01, local01
05f2c     6C EF B1 FD | 	call	#__system___string_cmp
05f30     00 FA 0D F2 | 	cmp	result1, #0 wz
05f34     BC 01 90 AD |  if_e	jmp	#LR__0490
05f38     A7 01 00 FF 
05f3c     63 15 06 F6 | 	mov	arg02, ##@LR__5646
05f40     13 13 02 F6 | 	mov	arg01, local01
05f44     54 EF B1 FD | 	call	#__system___string_cmp
05f48     00 FA 0D F2 | 	cmp	result1, #0 wz
05f4c     AC 01 90 AD |  if_e	jmp	#LR__0491
05f50     A7 01 00 FF 
05f54     69 15 06 F6 | 	mov	arg02, ##@LR__5647
05f58     13 13 02 F6 | 	mov	arg01, local01
05f5c     3C EF B1 FD | 	call	#__system___string_cmp
05f60     00 FA 0D F2 | 	cmp	result1, #0 wz
05f64     9C 01 90 AD |  if_e	jmp	#LR__0492
05f68     A7 01 00 FF 
05f6c     6E 15 06 F6 | 	mov	arg02, ##@LR__5648
05f70     13 13 02 F6 | 	mov	arg01, local01
05f74     24 EF B1 FD | 	call	#__system___string_cmp
05f78     00 FA 0D F2 | 	cmp	result1, #0 wz
05f7c     8C 01 90 AD |  if_e	jmp	#LR__0493
05f80     A7 01 00 FF 
05f84     72 15 06 F6 | 	mov	arg02, ##@LR__5649
05f88     13 13 02 F6 | 	mov	arg01, local01
05f8c     0C EF B1 FD | 	call	#__system___string_cmp
05f90     00 FA 0D F2 | 	cmp	result1, #0 wz
05f94     7C 01 90 AD |  if_e	jmp	#LR__0494
05f98     A7 01 00 FF 
05f9c     76 15 06 F6 | 	mov	arg02, ##@LR__5650
05fa0     13 13 02 F6 | 	mov	arg01, local01
05fa4     F4 EE B1 FD | 	call	#__system___string_cmp
05fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fac     6C 01 90 AD |  if_e	jmp	#LR__0495
05fb0     70 01 90 FD | 	jmp	#LR__0496
05fb4                 | LR__0450
05fb4     9E FA 05 F6 | 	mov	result1, #158
05fb8     6C 01 90 FD | 	jmp	#LR__0497
05fbc                 | LR__0451
05fbc     85 FA 05 F6 | 	mov	result1, #133
05fc0     64 01 90 FD | 	jmp	#LR__0497
05fc4                 | LR__0452
05fc4     9B FA 05 F6 | 	mov	result1, #155
05fc8     5C 01 90 FD | 	jmp	#LR__0497
05fcc                 | LR__0453
05fcc     9B FA 05 F6 | 	mov	result1, #155
05fd0     54 01 90 FD | 	jmp	#LR__0497
05fd4                 | LR__0454
05fd4     A7 FA 05 F6 | 	mov	result1, #167
05fd8     4C 01 90 FD | 	jmp	#LR__0497
05fdc                 | LR__0455
05fdc     84 FA 05 F6 | 	mov	result1, #132
05fe0     44 01 90 FD | 	jmp	#LR__0497
05fe4                 | LR__0456
05fe4     86 FA 05 F6 | 	mov	result1, #134
05fe8     3C 01 90 FD | 	jmp	#LR__0497
05fec                 | LR__0457
05fec     A2 FA 05 F6 | 	mov	result1, #162
05ff0     34 01 90 FD | 	jmp	#LR__0497
05ff4                 | LR__0458
05ff4     9F FA 05 F6 | 	mov	result1, #159
05ff8     2C 01 90 FD | 	jmp	#LR__0497
05ffc                 | LR__0459
05ffc     82 FA 05 F6 | 	mov	result1, #130
06000     24 01 90 FD | 	jmp	#LR__0497
06004                 | LR__0460
06004     99 FA 05 F6 | 	mov	result1, #153
06008     1C 01 90 FD | 	jmp	#LR__0497
0600c                 | LR__0461
0600c     C5 FA 05 F6 | 	mov	result1, #197
06010     14 01 90 FD | 	jmp	#LR__0497
06014                 | LR__0462
06014     C5 FA 05 F6 | 	mov	result1, #197
06018     0C 01 90 FD | 	jmp	#LR__0497
0601c                 | LR__0463
0601c     9C FA 05 F6 | 	mov	result1, #156
06020     04 01 90 FD | 	jmp	#LR__0497
06024                 | LR__0464
06024     6F FA 05 F6 | 	mov	result1, #111
06028     FC 00 90 FD | 	jmp	#LR__0497
0602c                 | LR__0465
0602c     6F FA 05 F6 | 	mov	result1, #111
06030     F4 00 90 FD | 	jmp	#LR__0497
06034                 | LR__0466
06034     93 FA 05 F6 | 	mov	result1, #147
06038     EC 00 90 FD | 	jmp	#LR__0497
0603c                 | LR__0467
0603c     94 FA 05 F6 | 	mov	result1, #148
06040     E4 00 90 FD | 	jmp	#LR__0497
06044                 | LR__0468
06044     62 FA 05 F6 | 	mov	result1, #98
06048     DC 00 90 FD | 	jmp	#LR__0497
0604c                 | LR__0469
0604c     A3 FA 05 F6 | 	mov	result1, #163
06050     D4 00 90 FD | 	jmp	#LR__0497
06054                 | LR__0470
06054     9D FA 05 F6 | 	mov	result1, #157
06058     CC 00 90 FD | 	jmp	#LR__0497
0605c                 | LR__0471
0605c     8A FA 05 F6 | 	mov	result1, #138
06060     C4 00 90 FD | 	jmp	#LR__0497
06064                 | LR__0472
06064     A4 FA 05 F6 | 	mov	result1, #164
06068     BC 00 90 FD | 	jmp	#LR__0497
0606c                 | LR__0473
0606c     A8 FA 05 F6 | 	mov	result1, #168
06070     B4 00 90 FD | 	jmp	#LR__0497
06074                 | LR__0474
06074     AD FA 05 F6 | 	mov	result1, #173
06078     AC 00 90 FD | 	jmp	#LR__0497
0607c                 | LR__0475
0607c     9A FA 05 F6 | 	mov	result1, #154
06080     A4 00 90 FD | 	jmp	#LR__0497
06084                 | LR__0476
06084     A6 FA 05 F6 | 	mov	result1, #166
06088     9C 00 90 FD | 	jmp	#LR__0497
0608c                 | LR__0477
0608c     66 FA 05 F6 | 	mov	result1, #102
06090     94 00 90 FD | 	jmp	#LR__0497
06094                 | LR__0478
06094     67 FA 05 F6 | 	mov	result1, #103
06098     8C 00 90 FD | 	jmp	#LR__0497
0609c                 | LR__0479
0609c     64 FA 05 F6 | 	mov	result1, #100
060a0     84 00 90 FD | 	jmp	#LR__0497
060a4                 | LR__0480
060a4     65 FA 05 F6 | 	mov	result1, #101
060a8     7C 00 90 FD | 	jmp	#LR__0497
060ac                 | LR__0481
060ac     98 FA 05 F6 | 	mov	result1, #152
060b0     74 00 90 FD | 	jmp	#LR__0497
060b4                 | LR__0482
060b4     7B FA 05 F6 | 	mov	result1, #123
060b8     6C 00 90 FD | 	jmp	#LR__0497
060bc                 | LR__0483
060bc     76 FA 05 F6 | 	mov	result1, #118
060c0     64 00 90 FD | 	jmp	#LR__0497
060c4                 | LR__0484
060c4     A5 FA 05 F6 | 	mov	result1, #165
060c8     5C 00 90 FD | 	jmp	#LR__0497
060cc                 | LR__0485
060cc     7A FA 05 F6 | 	mov	result1, #122
060d0     54 00 90 FD | 	jmp	#LR__0497
060d4                 | LR__0486
060d4     BF FA 05 F6 | 	mov	result1, #191
060d8     4C 00 90 FD | 	jmp	#LR__0497
060dc                 | LR__0487
060dc     54 FA 05 F6 | 	mov	result1, #84
060e0     44 00 90 FD | 	jmp	#LR__0497
060e4                 | LR__0488
060e4     6B FA 05 F6 | 	mov	result1, #107
060e8     3C 00 90 FD | 	jmp	#LR__0497
060ec                 | LR__0489
060ec     87 FA 05 F6 | 	mov	result1, #135
060f0     34 00 90 FD | 	jmp	#LR__0497
060f4                 | LR__0490
060f4     6A FA 05 F6 | 	mov	result1, #106
060f8     2C 00 90 FD | 	jmp	#LR__0497
060fc                 | LR__0491
060fc     6E FA 05 F6 | 	mov	result1, #110
06100     24 00 90 FD | 	jmp	#LR__0497
06104                 | LR__0492
06104     A1 FA 05 F6 | 	mov	result1, #161
06108     1C 00 90 FD | 	jmp	#LR__0497
0610c                 | LR__0493
0610c     83 FA 05 F6 | 	mov	result1, #131
06110     14 00 90 FD | 	jmp	#LR__0497
06114                 | LR__0494
06114     A0 FA 05 F6 | 	mov	result1, #160
06118     0C 00 90 FD | 	jmp	#LR__0497
0611c                 | LR__0495
0611c     9B FA 05 F6 | 	mov	result1, #155
06120     04 00 90 FD | 	jmp	#LR__0497
06124                 | LR__0496
06124     00 FA 05 F6 | 	mov	result1, #0
06128                 | LR__0497
06128     A7 F0 03 F6 | 	mov	ptra, fp
0612c     B2 00 A0 FD | 	call	#popregs_
06130                 | _isfunction_ret
06130     2D 00 64 FD | 	ret
06134                 | 
06134                 | ' 
06134                 | ' ' Check if the part is a name
06134                 | ' 
06134                 | ' function isname(s as string) as boolean
06134                 | _isname
06134     0D 4A 05 F6 | 	mov	COUNT_, #13
06138     A8 00 A0 FD | 	call	#pushregs_
0613c     09 27 02 F6 | 	mov	local01, arg01
06140     09 29 02 F6 | 	mov	local02, arg01
06144     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
06148                 | LR__0500
06148     14 FB C9 FA | 	rdbyte	result1, local02 wz
0614c     01 28 06 51 |  if_ne	add	local02, #1
06150     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
06154                 | LR__0501
06154     09 29 82 F1 | 	sub	local02, arg01
06158     14 FB 01 F6 | 	mov	result1, local02
0615c     FD 2A 0A F6 | 	mov	local03, result1 wz
06160     00 FA 05 A6 |  if_e	mov	result1, #0
06164     34 02 90 AD |  if_e	jmp	#LR__0513
06168     13 13 02 F6 | 	mov	arg01, local01
0616c     01 14 06 F6 | 	mov	arg02, #1
06170     01 16 06 F6 | 	mov	arg03, #1
06174     90 0E B2 FD | 	call	#__system__Mid_S
06178     FD 2C 02 F6 | 	mov	local04, result1
0617c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0617c     A7 01 00 FF 
06180     7D 15 06 F6 | 	mov	arg02, ##@LR__5651
06184     16 13 02 F6 | 	mov	arg01, local04
06188     10 ED B1 FD | 	call	#__system___string_cmp
0618c     00 FA 55 F2 | 	cmps	result1, #0 wc
06190     18 00 90 CD |  if_b	jmp	#LR__0502
06194     A7 01 00 FF 
06198     7F 15 06 F6 | 	mov	arg02, ##@LR__5652
0619c     16 13 02 F6 | 	mov	arg01, local04
061a0     F8 EC B1 FD | 	call	#__system___string_cmp
061a4     01 FA 55 F2 | 	cmps	result1, #1 wc
061a8     1C 00 90 CD |  if_b	jmp	#LR__0503
061ac                 | LR__0502
061ac     A7 01 00 FF 
061b0     81 15 06 F6 | 	mov	arg02, ##@LR__5653
061b4     16 13 02 F6 | 	mov	arg01, local04
061b8     E0 EC B1 FD | 	call	#__system___string_cmp
061bc     00 FA 0D F2 | 	cmp	result1, #0 wz
061c0     00 FA 05 56 |  if_ne	mov	result1, #0
061c4     D4 01 90 5D |  if_ne	jmp	#LR__0513
061c8                 | LR__0503
061c8                 | ' if l>2 then 
061c8     03 2A 56 F2 | 	cmps	local03, #3 wc
061cc     C8 01 90 CD |  if_b	jmp	#LR__0512
061d0                 | '   for i=2 to l
061d0     02 2E 06 F6 | 	mov	local05, #2
061d4     15 31 02 F6 | 	mov	local06, local03
061d8     01 30 06 F1 | 	add	local06, #1
061dc                 | LR__0504
061dc     18 2F 52 F2 | 	cmps	local05, local06 wc
061e0     B4 01 90 3D |  if_ae	jmp	#LR__0511
061e4     13 13 02 F6 | 	mov	arg01, local01
061e8     17 15 02 F6 | 	mov	arg02, local05
061ec     01 16 06 F6 | 	mov	arg03, #1
061f0     14 0E B2 FD | 	call	#__system__Mid_S
061f4     FD 2C 02 F6 | 	mov	local04, result1
061f8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
061f8     15 2F 52 F2 | 	cmps	local05, local03 wc
061fc     9C 00 90 3D |  if_ae	jmp	#LR__0507
06200     A7 01 00 FF 
06204     83 15 06 F6 | 	mov	arg02, ##@LR__5654
06208     16 13 02 F6 | 	mov	arg01, local04
0620c     8C EC B1 FD | 	call	#__system___string_cmp
06210     00 FA 55 F2 | 	cmps	result1, #0 wc
06214     18 00 90 CD |  if_b	jmp	#LR__0505
06218     A7 01 00 FF 
0621c     85 15 06 F6 | 	mov	arg02, ##@LR__5655
06220     16 13 02 F6 | 	mov	arg01, local04
06224     74 EC B1 FD | 	call	#__system___string_cmp
06228     01 FA 55 F2 | 	cmps	result1, #1 wc
0622c     6C 00 90 CD |  if_b	jmp	#LR__0507
06230                 | LR__0505
06230     A7 01 00 FF 
06234     87 15 06 F6 | 	mov	arg02, ##@LR__5656
06238     16 13 02 F6 | 	mov	arg01, local04
0623c     5C EC B1 FD | 	call	#__system___string_cmp
06240     00 FA 55 F2 | 	cmps	result1, #0 wc
06244     18 00 90 CD |  if_b	jmp	#LR__0506
06248     A7 01 00 FF 
0624c     89 15 06 F6 | 	mov	arg02, ##@LR__5657
06250     16 13 02 F6 | 	mov	arg01, local04
06254     44 EC B1 FD | 	call	#__system___string_cmp
06258     01 FA 55 F2 | 	cmps	result1, #1 wc
0625c     3C 00 90 CD |  if_b	jmp	#LR__0507
06260                 | LR__0506
06260     A7 01 00 FF 
06264     8B 33 06 F6 | 	mov	local07, ##@LR__5658
06268     16 13 02 F6 | 	mov	arg01, local04
0626c     19 15 02 F6 | 	mov	arg02, local07
06270     28 EC B1 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     20 00 90 AD |  if_e	jmp	#LR__0507
0627c     A7 01 00 FF 
06280     8D 35 06 F6 | 	mov	local08, ##@LR__5659
06284     16 13 02 F6 | 	mov	arg01, local04
06288     1A 15 02 F6 | 	mov	arg02, local08
0628c     0C EC B1 FD | 	call	#__system___string_cmp
06290     FD 36 0A F6 | 	mov	local09, result1 wz
06294     00 FA 05 56 |  if_ne	mov	result1, #0
06298     00 01 90 5D |  if_ne	jmp	#LR__0513
0629c                 | LR__0507
0629c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0629c     15 2F 0A F2 | 	cmp	local05, local03 wz
062a0     EC 00 90 5D |  if_ne	jmp	#LR__0510
062a4     A7 01 00 FF 
062a8     8F 39 06 F6 | 	mov	local10, ##@LR__5660
062ac     16 13 02 F6 | 	mov	arg01, local04
062b0     1C 15 02 F6 | 	mov	arg02, local10
062b4     E4 EB B1 FD | 	call	#__system___string_cmp
062b8     FD 3A 02 F6 | 	mov	local11, result1
062bc     00 3A 56 F2 | 	cmps	local11, #0 wc
062c0     1C 00 90 CD |  if_b	jmp	#LR__0508
062c4     A7 01 00 FF 
062c8     91 15 06 F6 | 	mov	arg02, ##@LR__5661
062cc     16 13 02 F6 | 	mov	arg01, local04
062d0     C8 EB B1 FD | 	call	#__system___string_cmp
062d4     FD 38 02 F6 | 	mov	local10, result1
062d8     01 38 56 F2 | 	cmps	local10, #1 wc
062dc     B0 00 90 CD |  if_b	jmp	#LR__0510
062e0                 | LR__0508
062e0     A7 01 00 FF 
062e4     93 15 06 F6 | 	mov	arg02, ##@LR__5662
062e8     16 13 02 F6 | 	mov	arg01, local04
062ec     AC EB B1 FD | 	call	#__system___string_cmp
062f0     00 FA 55 F2 | 	cmps	result1, #0 wc
062f4     1C 00 90 CD |  if_b	jmp	#LR__0509
062f8     A7 01 00 FF 
062fc     95 37 06 F6 | 	mov	local09, ##@LR__5663
06300     16 13 02 F6 | 	mov	arg01, local04
06304     1B 15 02 F6 | 	mov	arg02, local09
06308     90 EB B1 FD | 	call	#__system___string_cmp
0630c     01 FA 55 F2 | 	cmps	result1, #1 wc
06310     7C 00 90 CD |  if_b	jmp	#LR__0510
06314                 | LR__0509
06314     A7 01 00 FF 
06318     97 37 06 F6 | 	mov	local09, ##@LR__5664
0631c     16 13 02 F6 | 	mov	arg01, local04
06320     1B 15 02 F6 | 	mov	arg02, local09
06324     74 EB B1 FD | 	call	#__system___string_cmp
06328     00 FA 4D F2 | 	cmps	result1, #0 wz
0632c     60 00 90 AD |  if_e	jmp	#LR__0510
06330     A7 01 00 FF 
06334     99 35 06 F6 | 	mov	local08, ##@LR__5665
06338     16 13 02 F6 | 	mov	arg01, local04
0633c     1A 15 02 F6 | 	mov	arg02, local08
06340     58 EB B1 FD | 	call	#__system___string_cmp
06344     FD 36 0A F6 | 	mov	local09, result1 wz
06348     44 00 90 AD |  if_e	jmp	#LR__0510
0634c     A7 01 00 FF 
06350     9B 3D 06 F6 | 	mov	local12, ##@LR__5666
06354     1E 35 02 F6 | 	mov	local08, local12
06358     16 13 02 F6 | 	mov	arg01, local04
0635c     1A 15 02 F6 | 	mov	arg02, local08
06360     38 EB B1 FD | 	call	#__system___string_cmp
06364     FD 32 0A F6 | 	mov	local07, result1 wz
06368     24 00 90 AD |  if_e	jmp	#LR__0510
0636c     A7 01 00 FF 
06370     9D 3F 06 F6 | 	mov	local13, ##@LR__5667
06374     1F 3D 02 F6 | 	mov	local12, local13
06378     16 13 02 F6 | 	mov	arg01, local04
0637c     1E 15 02 F6 | 	mov	arg02, local12
06380     18 EB B1 FD | 	call	#__system___string_cmp
06384     FD 34 0A F6 | 	mov	local08, result1 wz
06388     00 FA 05 56 |  if_ne	mov	result1, #0
0638c     0C 00 90 5D |  if_ne	jmp	#LR__0513
06390                 | LR__0510
06390     01 2E 06 F1 | 	add	local05, #1
06394     44 FE 9F FD | 	jmp	#LR__0504
06398                 | LR__0511
06398                 | LR__0512
06398                 | ' return true
06398     01 FA 65 F6 | 	neg	result1, #1
0639c                 | LR__0513
0639c     A7 F0 03 F6 | 	mov	ptra, fp
063a0     B2 00 A0 FD | 	call	#popregs_
063a4                 | _isname_ret
063a4     2D 00 64 FD | 	ret
063a8                 | 
063a8                 | ' 
063a8                 | ' ' Check if the part is a number.  
063a8                 | ' 
063a8                 | ' function isnum(s as string) as boolean 
063a8                 | _isnum
063a8     13 4A 05 F6 | 	mov	COUNT_, #19
063ac     A8 00 A0 FD | 	call	#pushregs_
063b0     09 27 02 F6 | 	mov	local01, arg01
063b4     00 28 06 F6 | 	mov	local02, #0
063b8     00 2A 06 F6 | 	mov	local03, #0
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     09 2D 02 F6 | 	mov	local04, arg01
063c4     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
063c8                 | LR__0520
063c8     16 FB C9 FA | 	rdbyte	result1, local04 wz
063cc     01 2C 06 51 |  if_ne	add	local04, #1
063d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
063d4                 | LR__0521
063d4     09 2D 82 F1 | 	sub	local04, arg01
063d8     16 FB 01 F6 | 	mov	result1, local04
063dc     FD 2E 0A F6 | 	mov	local05, result1 wz
063e0     00 FA 05 A6 |  if_e	mov	result1, #0
063e4     A0 03 90 AD |  if_e	jmp	#LR__0536
063e8     13 13 02 F6 | 	mov	arg01, local01
063ec     01 14 06 F6 | 	mov	arg02, #1
063f0     01 16 06 F6 | 	mov	arg03, #1
063f4     10 0C B2 FD | 	call	#__system__Mid_S
063f8     FD 30 02 F6 | 	mov	local06, result1
063fc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
063fc     A7 01 00 FF 
06400     9F 15 06 F6 | 	mov	arg02, ##@LR__5668
06404     18 13 02 F6 | 	mov	arg01, local06
06408     90 EA B1 FD | 	call	#__system___string_cmp
0640c     00 FA 55 F2 | 	cmps	result1, #0 wc
06410     1C 00 90 CD |  if_b	jmp	#LR__0522
06414     A7 01 00 FF 
06418     A1 33 06 F6 | 	mov	local07, ##@LR__5669
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     19 15 02 F6 | 	mov	arg02, local07
06424     74 EA B1 FD | 	call	#__system___string_cmp
06428     01 FA 55 F2 | 	cmps	result1, #1 wc
0642c     84 00 90 CD |  if_b	jmp	#LR__0523
06430                 | LR__0522
06430     A7 01 00 FF 
06434     A3 35 06 F6 | 	mov	local08, ##@LR__5670
06438     1A 33 02 F6 | 	mov	local07, local08
0643c     18 13 02 F6 | 	mov	arg01, local06
06440     19 15 02 F6 | 	mov	arg02, local07
06444     54 EA B1 FD | 	call	#__system___string_cmp
06448     00 FA 0D F2 | 	cmp	result1, #0 wz
0644c     64 00 90 AD |  if_e	jmp	#LR__0523
06450     A7 01 00 FF 
06454     A5 37 06 F6 | 	mov	local09, ##@LR__5671
06458     1B 35 02 F6 | 	mov	local08, local09
0645c     18 13 02 F6 | 	mov	arg01, local06
06460     1A 15 02 F6 | 	mov	arg02, local08
06464     34 EA B1 FD | 	call	#__system___string_cmp
06468     FD 32 0A F6 | 	mov	local07, result1 wz
0646c     44 00 90 AD |  if_e	jmp	#LR__0523
06470     A7 01 00 FF 
06474     A7 39 06 F6 | 	mov	local10, ##@LR__5672
06478     1C 37 02 F6 | 	mov	local09, local10
0647c     18 13 02 F6 | 	mov	arg01, local06
06480     1B 15 02 F6 | 	mov	arg02, local09
06484     14 EA B1 FD | 	call	#__system___string_cmp
06488     FD 34 0A F6 | 	mov	local08, result1 wz
0648c     24 00 90 AD |  if_e	jmp	#LR__0523
06490     A7 01 00 FF 
06494     A9 3B 06 F6 | 	mov	local11, ##@LR__5673
06498     1D 39 02 F6 | 	mov	local10, local11
0649c     18 13 02 F6 | 	mov	arg01, local06
064a0     1C 15 02 F6 | 	mov	arg02, local10
064a4     F4 E9 B1 FD | 	call	#__system___string_cmp
064a8     FD 36 0A F6 | 	mov	local09, result1 wz
064ac     00 FA 05 56 |  if_ne	mov	result1, #0
064b0     D4 02 90 5D |  if_ne	jmp	#LR__0536
064b4                 | LR__0523
064b4                 | ' if m$="." then ds=1
064b4     A7 01 00 FF 
064b8     AB 15 06 F6 | 	mov	arg02, ##@LR__5674
064bc     18 13 02 F6 | 	mov	arg01, local06
064c0     D8 E9 B1 FD | 	call	#__system___string_cmp
064c4     00 FA 0D F2 | 	cmp	result1, #0 wz
064c8     01 28 06 A6 |  if_e	mov	local02, #1
064cc                 | ' if m$="$" then hex=1 else hex=0
064cc     A7 01 00 FF 
064d0     AD 15 06 F6 | 	mov	arg02, ##@LR__5675
064d4     18 13 02 F6 | 	mov	arg01, local06
064d8     C0 E9 B1 FD | 	call	#__system___string_cmp
064dc     00 FA 0D F2 | 	cmp	result1, #0 wz
064e0     01 3C 06 A6 |  if_e	mov	local12, #1
064e4     00 3C 06 56 |  if_ne	mov	local12, #0
064e8                 | ' if m$="%" then bin=1 else bin=0
064e8     A7 01 00 FF 
064ec     AF 15 06 F6 | 	mov	arg02, ##@LR__5676
064f0     18 13 02 F6 | 	mov	arg01, local06
064f4     A4 E9 B1 FD | 	call	#__system___string_cmp
064f8     00 FA 0D F2 | 	cmp	result1, #0 wz
064fc     01 3E 06 A6 |  if_e	mov	local13, #1
06500     00 3E 06 56 |  if_ne	mov	local13, #0
06504                 | ' if l>1 then 
06504     02 2E 56 F2 | 	cmps	local05, #2 wc
06508     78 02 90 CD |  if_b	jmp	#LR__0535
0650c                 | '   for i=2 to l
0650c     02 40 06 F6 | 	mov	local14, #2
06510     17 43 02 F6 | 	mov	local15, local05
06514     01 42 06 F1 | 	add	local15, #1
06518                 | LR__0524
06518     21 41 52 F2 | 	cmps	local14, local15 wc
0651c     64 02 90 3D |  if_ae	jmp	#LR__0534
06520     13 13 02 F6 | 	mov	arg01, local01
06524     20 15 02 F6 | 	mov	arg02, local14
06528     01 16 06 F6 | 	mov	arg03, #1
0652c     D8 0A B2 FD | 	call	#__system__Mid_S
06530     FD 30 02 F6 | 	mov	local06, result1
06534     00 44 06 F6 | 	mov	local16, #0
06538                 | '     m$=mid$(s,i,1) : b=false
06538                 | '     if m$>="0" andalso m$<="9" then b=true  
06538     A7 01 00 FF 
0653c     B1 15 06 F6 | 	mov	arg02, ##@LR__5677
06540     18 13 02 F6 | 	mov	arg01, local06
06544     54 E9 B1 FD | 	call	#__system___string_cmp
06548     00 FA 55 F2 | 	cmps	result1, #0 wc
0654c     1C 00 90 CD |  if_b	jmp	#LR__0525
06550     A7 01 00 FF 
06554     B3 33 06 F6 | 	mov	local07, ##@LR__5678
06558     18 13 02 F6 | 	mov	arg01, local06
0655c     19 15 02 F6 | 	mov	arg02, local07
06560     38 E9 B1 FD | 	call	#__system___string_cmp
06564     01 FA 55 F2 | 	cmps	result1, #1 wc
06568     01 44 66 C6 |  if_b	neg	local16, #1
0656c                 | LR__0525
0656c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0656c     A7 01 00 FF 
06570     B5 15 06 F6 | 	mov	arg02, ##@LR__5679
06574     18 13 02 F6 | 	mov	arg01, local06
06578     20 E9 B1 FD | 	call	#__system___string_cmp
0657c     00 FA 0D F2 | 	cmp	result1, #0 wz
06580     7C 00 90 AD |  if_e	jmp	#LR__0526
06584     A7 01 00 FF 
06588     B7 33 06 F6 | 	mov	local07, ##@LR__5680
0658c     18 13 02 F6 | 	mov	arg01, local06
06590     19 15 02 F6 | 	mov	arg02, local07
06594     04 E9 B1 FD | 	call	#__system___string_cmp
06598     00 FA 0D F2 | 	cmp	result1, #0 wz
0659c     60 00 90 AD |  if_e	jmp	#LR__0526
065a0     A7 01 00 FF 
065a4     B9 35 06 F6 | 	mov	local08, ##@LR__5681
065a8     1A 33 02 F6 | 	mov	local07, local08
065ac     18 13 02 F6 | 	mov	arg01, local06
065b0     19 15 02 F6 | 	mov	arg02, local07
065b4     E4 E8 B1 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     40 00 90 AD |  if_e	jmp	#LR__0526
065c0     A7 01 00 FF 
065c4     BB 37 06 F6 | 	mov	local09, ##@LR__5682
065c8     1B 35 02 F6 | 	mov	local08, local09
065cc     18 13 02 F6 | 	mov	arg01, local06
065d0     1A 15 02 F6 | 	mov	arg02, local08
065d4     C4 E8 B1 FD | 	call	#__system___string_cmp
065d8     FD 32 0A F6 | 	mov	local07, result1 wz
065dc     20 00 90 AD |  if_e	jmp	#LR__0526
065e0     A7 01 00 FF 
065e4     BD 39 06 F6 | 	mov	local10, ##@LR__5683
065e8     1C 37 02 F6 | 	mov	local09, local10
065ec     18 13 02 F6 | 	mov	arg01, local06
065f0     1B 15 02 F6 | 	mov	arg02, local09
065f4     A4 E8 B1 FD | 	call	#__system___string_cmp
065f8     FD 34 0A F6 | 	mov	local08, result1 wz
065fc     04 00 90 5D |  if_ne	jmp	#LR__0527
06600                 | LR__0526
06600     01 44 66 F6 | 	neg	local16, #1
06604                 | LR__0527
06604                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06604     01 3C 0E F2 | 	cmp	local12, #1 wz
06608     34 00 90 5D |  if_ne	jmp	#LR__0528
0660c     A7 01 00 FF 
06610     BF 15 06 F6 | 	mov	arg02, ##@LR__5684
06614     18 13 02 F6 | 	mov	arg01, local06
06618     80 E8 B1 FD | 	call	#__system___string_cmp
0661c     00 FA 55 F2 | 	cmps	result1, #0 wc
06620     1C 00 90 CD |  if_b	jmp	#LR__0528
06624     A7 01 00 FF 
06628     C1 33 06 F6 | 	mov	local07, ##@LR__5685
0662c     18 13 02 F6 | 	mov	arg01, local06
06630     19 15 02 F6 | 	mov	arg02, local07
06634     64 E8 B1 FD | 	call	#__system___string_cmp
06638     01 FA 55 F2 | 	cmps	result1, #1 wc
0663c     01 44 66 C6 |  if_b	neg	local16, #1
06640                 | LR__0528
06640                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06640     01 3E 0E F2 | 	cmp	local13, #1 wz
06644     58 00 90 5D |  if_ne	jmp	#LR__0530
06648     A7 01 00 FF 
0664c     C3 15 06 F6 | 	mov	arg02, ##@LR__5686
06650     18 13 02 F6 | 	mov	arg01, local06
06654     44 E8 B1 FD | 	call	#__system___string_cmp
06658     00 FA 55 F2 | 	cmps	result1, #0 wc
0665c     1C 00 90 CD |  if_b	jmp	#LR__0529
06660     A7 01 00 FF 
06664     C5 33 06 F6 | 	mov	local07, ##@LR__5687
06668     18 13 02 F6 | 	mov	arg01, local06
0666c     19 15 02 F6 | 	mov	arg02, local07
06670     28 E8 B1 FD | 	call	#__system___string_cmp
06674     01 FA 55 F2 | 	cmps	result1, #1 wc
06678     24 00 90 CD |  if_b	jmp	#LR__0530
0667c                 | LR__0529
0667c     A7 01 00 FF 
06680     C7 35 06 F6 | 	mov	local08, ##@LR__5688
06684     1A 33 02 F6 | 	mov	local07, local08
06688     18 13 02 F6 | 	mov	arg01, local06
0668c     19 15 02 F6 | 	mov	arg02, local07
06690     08 E8 B1 FD | 	call	#__system___string_cmp
06694     00 FA 0D F2 | 	cmp	result1, #0 wz
06698     00 FA 05 56 |  if_ne	mov	result1, #0
0669c     E8 00 90 5D |  if_ne	jmp	#LR__0536
066a0                 | LR__0530
066a0                 | '     if not b then return false
066a0     22 45 22 F6 | 	not	local16, local16
066a4     00 44 0E F2 | 	cmp	local16, #0 wz
066a8     00 FA 05 56 |  if_ne	mov	result1, #0
066ac     D8 00 90 5D |  if_ne	jmp	#LR__0536
066b0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
066b0     A7 01 00 FF 
066b4     C9 15 06 F6 | 	mov	arg02, ##@LR__5689
066b8     18 13 02 F6 | 	mov	arg01, local06
066bc     DC E7 B1 FD | 	call	#__system___string_cmp
066c0     00 FA 0D F2 | 	cmp	result1, #0 wz
066c4     3C 00 90 5D |  if_ne	jmp	#LR__0531
066c8     20 15 02 F6 | 	mov	arg02, local14
066cc     01 14 86 F1 | 	sub	arg02, #1
066d0     13 13 02 F6 | 	mov	arg01, local01
066d4     01 16 06 F6 | 	mov	arg03, #1
066d8     2C 09 B2 FD | 	call	#__system__Mid_S
066dc     FD 12 02 F6 | 	mov	arg01, result1
066e0     1C 0B B2 FD | 	call	#__system__LCase_S
066e4     FD 12 02 F6 | 	mov	arg01, result1
066e8     A7 01 00 FF 
066ec     CB 33 06 F6 | 	mov	local07, ##@LR__5690
066f0     19 15 02 F6 | 	mov	arg02, local07
066f4     A4 E7 B1 FD | 	call	#__system___string_cmp
066f8     00 FA 0D F2 | 	cmp	result1, #0 wz
066fc     00 FA 05 56 |  if_ne	mov	result1, #0
06700     84 00 90 5D |  if_ne	jmp	#LR__0536
06704                 | LR__0531
06704                 | '     if m$="." then ds+=1: if ds>1 then return false
06704     A7 01 00 FF 
06708     CD 15 06 F6 | 	mov	arg02, ##@LR__5691
0670c     18 13 02 F6 | 	mov	arg01, local06
06710     88 E7 B1 FD | 	call	#__system___string_cmp
06714     00 FA 0D F2 | 	cmp	result1, #0 wz
06718     01 28 06 A1 |  if_e	add	local02, #1
0671c     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06720     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06724     60 00 90 2D |  if_nc_and_z	jmp	#LR__0536
06728                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06728     A7 01 00 FF 
0672c     CF 47 06 F6 | 	mov	local17, ##@LR__5692
06730     23 49 02 F6 | 	mov	local18, local17
06734     18 13 02 F6 | 	mov	arg01, local06
06738     24 15 02 F6 | 	mov	arg02, local18
0673c     5C E7 B1 FD | 	call	#__system___string_cmp
06740     FD 4A 0A F6 | 	mov	local19, result1 wz
06744     20 00 90 AD |  if_e	jmp	#LR__0532
06748     A7 01 00 FF 
0674c     D1 33 06 F6 | 	mov	local07, ##@LR__5693
06750     19 47 02 F6 | 	mov	local17, local07
06754     18 13 02 F6 | 	mov	arg01, local06
06758     23 15 02 F6 | 	mov	arg02, local17
0675c     3C E7 B1 FD | 	call	#__system___string_cmp
06760     FD 48 0A F6 | 	mov	local18, result1 wz
06764     14 00 90 5D |  if_ne	jmp	#LR__0533
06768                 | LR__0532
06768     01 2A 06 F1 | 	add	local03, #1
0676c     00 3C 0E F2 | 	cmp	local12, #0 wz
06770     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06774     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06778     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0536
0677c                 | LR__0533
0677c     01 40 06 F1 | 	add	local14, #1
06780     94 FD 9F FD | 	jmp	#LR__0524
06784                 | LR__0534
06784                 | LR__0535
06784                 | ' return true
06784     01 FA 65 F6 | 	neg	result1, #1
06788                 | LR__0536
06788     A7 F0 03 F6 | 	mov	ptra, fp
0678c     B2 00 A0 FD | 	call	#popregs_
06790                 | _isnum_ret
06790     2D 00 64 FD | 	ret
06794                 | 
06794                 | '   
06794                 | ' ' Check if the part is an integer number.    
06794                 | '   
06794                 | ' function isint(s as string) as boolean
06794                 | _isint
06794     0E 4A 05 F6 | 	mov	COUNT_, #14
06798     A8 00 A0 FD | 	call	#pushregs_
0679c     09 27 02 F6 | 	mov	local01, arg01
067a0     09 29 02 F6 | 	mov	local02, arg01
067a4     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067a8                 | LR__0540
067a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
067ac     01 28 06 51 |  if_ne	add	local02, #1
067b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
067b4                 | LR__0541
067b4     09 29 82 F1 | 	sub	local02, arg01
067b8     14 FB 01 F6 | 	mov	result1, local02
067bc     FD 2A 0A F6 | 	mov	local03, result1 wz
067c0     00 FA 05 A6 |  if_e	mov	result1, #0
067c4     64 02 90 AD |  if_e	jmp	#LR__0554
067c8     13 13 02 F6 | 	mov	arg01, local01
067cc     01 14 06 F6 | 	mov	arg02, #1
067d0     01 16 06 F6 | 	mov	arg03, #1
067d4     30 08 B2 FD | 	call	#__system__Mid_S
067d8     FD 2C 02 F6 | 	mov	local04, result1
067dc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
067dc     A7 01 00 FF 
067e0     D3 15 06 F6 | 	mov	arg02, ##@LR__5694
067e4     16 13 02 F6 | 	mov	arg01, local04
067e8     B0 E6 B1 FD | 	call	#__system___string_cmp
067ec     00 FA 55 F2 | 	cmps	result1, #0 wc
067f0     1C 00 90 CD |  if_b	jmp	#LR__0542
067f4     A7 01 00 FF 
067f8     D5 2F 06 F6 | 	mov	local05, ##@LR__5695
067fc     16 13 02 F6 | 	mov	arg01, local04
06800     17 15 02 F6 | 	mov	arg02, local05
06804     94 E6 B1 FD | 	call	#__system___string_cmp
06808     01 FA 55 F2 | 	cmps	result1, #1 wc
0680c     64 00 90 CD |  if_b	jmp	#LR__0543
06810                 | LR__0542
06810     A7 01 00 FF 
06814     D7 31 06 F6 | 	mov	local06, ##@LR__5696
06818     18 2F 02 F6 | 	mov	local05, local06
0681c     16 13 02 F6 | 	mov	arg01, local04
06820     17 15 02 F6 | 	mov	arg02, local05
06824     74 E6 B1 FD | 	call	#__system___string_cmp
06828     00 FA 0D F2 | 	cmp	result1, #0 wz
0682c     44 00 90 AD |  if_e	jmp	#LR__0543
06830     A7 01 00 FF 
06834     D9 33 06 F6 | 	mov	local07, ##@LR__5697
06838     19 31 02 F6 | 	mov	local06, local07
0683c     16 13 02 F6 | 	mov	arg01, local04
06840     18 15 02 F6 | 	mov	arg02, local06
06844     54 E6 B1 FD | 	call	#__system___string_cmp
06848     FD 2E 0A F6 | 	mov	local05, result1 wz
0684c     24 00 90 AD |  if_e	jmp	#LR__0543
06850     A7 01 00 FF 
06854     DB 35 06 F6 | 	mov	local08, ##@LR__5698
06858     1A 33 02 F6 | 	mov	local07, local08
0685c     16 13 02 F6 | 	mov	arg01, local04
06860     19 15 02 F6 | 	mov	arg02, local07
06864     34 E6 B1 FD | 	call	#__system___string_cmp
06868     FD 30 0A F6 | 	mov	local06, result1 wz
0686c     00 FA 05 56 |  if_ne	mov	result1, #0
06870     B8 01 90 5D |  if_ne	jmp	#LR__0554
06874                 | LR__0543
06874                 | ' if m$="$" then hex=1 else hex=0
06874     A7 01 00 FF 
06878     DD 15 06 F6 | 	mov	arg02, ##@LR__5699
0687c     16 13 02 F6 | 	mov	arg01, local04
06880     18 E6 B1 FD | 	call	#__system___string_cmp
06884     00 FA 0D F2 | 	cmp	result1, #0 wz
06888     01 36 06 A6 |  if_e	mov	local09, #1
0688c     00 36 06 56 |  if_ne	mov	local09, #0
06890                 | ' if m$="%" then bin=1 else bin=0
06890     A7 01 00 FF 
06894     DF 15 06 F6 | 	mov	arg02, ##@LR__5700
06898     16 13 02 F6 | 	mov	arg01, local04
0689c     FC E5 B1 FD | 	call	#__system___string_cmp
068a0     00 FA 0D F2 | 	cmp	result1, #0 wz
068a4     01 38 06 A6 |  if_e	mov	local10, #1
068a8     00 38 06 56 |  if_ne	mov	local10, #0
068ac                 | ' if l>1 then 
068ac     02 2A 56 F2 | 	cmps	local03, #2 wc
068b0     74 01 90 CD |  if_b	jmp	#LR__0553
068b4                 | '   for i=2 to l
068b4     02 3A 06 F6 | 	mov	local11, #2
068b8     15 3D 02 F6 | 	mov	local12, local03
068bc     01 3C 06 F1 | 	add	local12, #1
068c0                 | LR__0544
068c0     1E 3B 52 F2 | 	cmps	local11, local12 wc
068c4     60 01 90 3D |  if_ae	jmp	#LR__0552
068c8     13 13 02 F6 | 	mov	arg01, local01
068cc     1D 15 02 F6 | 	mov	arg02, local11
068d0     01 16 06 F6 | 	mov	arg03, #1
068d4     30 07 B2 FD | 	call	#__system__Mid_S
068d8     FD 2C 02 F6 | 	mov	local04, result1
068dc                 | '     m$=mid$(s,i,1) 
068dc                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
068dc     00 36 0E F2 | 	cmp	local09, #0 wz
068e0     50 00 90 5D |  if_ne	jmp	#LR__0546
068e4     A7 01 00 FF 
068e8     E1 15 06 F6 | 	mov	arg02, ##@LR__5701
068ec     16 13 02 F6 | 	mov	arg01, local04
068f0     A8 E5 B1 FD | 	call	#__system___string_cmp
068f4     00 FA 55 F2 | 	cmps	result1, #0 wc
068f8     18 00 90 CD |  if_b	jmp	#LR__0545
068fc     A7 01 00 FF 
06900     E3 15 06 F6 | 	mov	arg02, ##@LR__5702
06904     16 13 02 F6 | 	mov	arg01, local04
06908     90 E5 B1 FD | 	call	#__system___string_cmp
0690c     01 FA 55 F2 | 	cmps	result1, #1 wc
06910     20 00 90 CD |  if_b	jmp	#LR__0546
06914                 | LR__0545
06914     A7 01 00 FF 
06918     E5 31 06 F6 | 	mov	local06, ##@LR__5703
0691c     16 13 02 F6 | 	mov	arg01, local04
06920     18 15 02 F6 | 	mov	arg02, local06
06924     74 E5 B1 FD | 	call	#__system___string_cmp
06928     00 FA 0D F2 | 	cmp	result1, #0 wz
0692c     00 FA 05 56 |  if_ne	mov	result1, #0
06930     F8 00 90 5D |  if_ne	jmp	#LR__0554
06934                 | LR__0546
06934                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06934     01 36 0E F2 | 	cmp	local09, #1 wz
06938     90 00 90 5D |  if_ne	jmp	#LR__0549
0693c     A7 01 00 FF 
06940     E7 15 06 F6 | 	mov	arg02, ##@LR__5704
06944     16 13 02 F6 | 	mov	arg01, local04
06948     50 E5 B1 FD | 	call	#__system___string_cmp
0694c     00 FA 55 F2 | 	cmps	result1, #0 wc
06950     1C 00 90 CD |  if_b	jmp	#LR__0547
06954     A7 01 00 FF 
06958     E9 15 06 F6 | 	mov	arg02, ##@LR__5705
0695c     16 13 02 F6 | 	mov	arg01, local04
06960     38 E5 B1 FD | 	call	#__system___string_cmp
06964     FD 3E 02 F6 | 	mov	local13, result1
06968     01 3E 56 F2 | 	cmps	local13, #1 wc
0696c     5C 00 90 CD |  if_b	jmp	#LR__0549
06970                 | LR__0547
06970     A7 01 00 FF 
06974     EB 2F 06 F6 | 	mov	local05, ##@LR__5706
06978     16 13 02 F6 | 	mov	arg01, local04
0697c     17 15 02 F6 | 	mov	arg02, local05
06980     18 E5 B1 FD | 	call	#__system___string_cmp
06984     FD 40 02 F6 | 	mov	local14, result1
06988     00 40 56 F2 | 	cmps	local14, #0 wc
0698c     1C 00 90 CD |  if_b	jmp	#LR__0548
06990     A7 01 00 FF 
06994     ED 33 06 F6 | 	mov	local07, ##@LR__5707
06998     16 13 02 F6 | 	mov	arg01, local04
0699c     19 15 02 F6 | 	mov	arg02, local07
069a0     F8 E4 B1 FD | 	call	#__system___string_cmp
069a4     01 FA 55 F2 | 	cmps	result1, #1 wc
069a8     20 00 90 CD |  if_b	jmp	#LR__0549
069ac                 | LR__0548
069ac     A7 01 00 FF 
069b0     EF 35 06 F6 | 	mov	local08, ##@LR__5708
069b4     16 13 02 F6 | 	mov	arg01, local04
069b8     1A 15 02 F6 | 	mov	arg02, local08
069bc     DC E4 B1 FD | 	call	#__system___string_cmp
069c0     00 FA 0D F2 | 	cmp	result1, #0 wz
069c4     00 FA 05 56 |  if_ne	mov	result1, #0
069c8     60 00 90 5D |  if_ne	jmp	#LR__0554
069cc                 | LR__0549
069cc                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
069cc     01 38 0E F2 | 	cmp	local10, #1 wz
069d0     4C 00 90 5D |  if_ne	jmp	#LR__0551
069d4     A7 01 00 FF 
069d8     F1 15 06 F6 | 	mov	arg02, ##@LR__5709
069dc     16 13 02 F6 | 	mov	arg01, local04
069e0     B8 E4 B1 FD | 	call	#__system___string_cmp
069e4     00 FA 55 F2 | 	cmps	result1, #0 wc
069e8     18 00 90 CD |  if_b	jmp	#LR__0550
069ec     A7 01 00 FF 
069f0     F3 15 06 F6 | 	mov	arg02, ##@LR__5710
069f4     16 13 02 F6 | 	mov	arg01, local04
069f8     A0 E4 B1 FD | 	call	#__system___string_cmp
069fc     01 FA 55 F2 | 	cmps	result1, #1 wc
06a00     1C 00 90 CD |  if_b	jmp	#LR__0551
06a04                 | LR__0550
06a04     A7 01 00 FF 
06a08     F5 15 06 F6 | 	mov	arg02, ##@LR__5711
06a0c     16 13 02 F6 | 	mov	arg01, local04
06a10     88 E4 B1 FD | 	call	#__system___string_cmp
06a14     00 FA 0D F2 | 	cmp	result1, #0 wz
06a18     00 FA 05 56 |  if_ne	mov	result1, #0
06a1c     0C 00 90 5D |  if_ne	jmp	#LR__0554
06a20                 | LR__0551
06a20     01 3A 06 F1 | 	add	local11, #1
06a24     98 FE 9F FD | 	jmp	#LR__0544
06a28                 | LR__0552
06a28                 | LR__0553
06a28                 | ' return true
06a28     01 FA 65 F6 | 	neg	result1, #1
06a2c                 | LR__0554
06a2c     A7 F0 03 F6 | 	mov	ptra, fp
06a30     B2 00 A0 FD | 	call	#popregs_
06a34                 | _isint_ret
06a34     2D 00 64 FD | 	ret
06a38                 | 
06a38                 | ' 
06a38                 | ' ' Check if the part is a positive decimal number.  
06a38                 | ' 
06a38                 | ' function isdec(s as string) as boolean
06a38                 | _isdec
06a38     05 4A 05 F6 | 	mov	COUNT_, #5
06a3c     A8 00 A0 FD | 	call	#pushregs_
06a40     09 27 02 F6 | 	mov	local01, arg01
06a44     09 29 02 F6 | 	mov	local02, arg01
06a48     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a4c                 | LR__0560
06a4c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06a50     01 28 06 51 |  if_ne	add	local02, #1
06a54     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a58                 | LR__0561
06a58     09 29 82 F1 | 	sub	local02, arg01
06a5c     14 FB 01 F6 | 	mov	result1, local02
06a60     FD 28 0A F6 | 	mov	local02, result1 wz
06a64     00 FA 05 A6 |  if_e	mov	result1, #0
06a68     80 00 90 AD |  if_e	jmp	#LR__0566
06a6c                 | ' for i=1 to l
06a6c     01 2A 06 F6 | 	mov	local03, #1
06a70     14 2D 02 F6 | 	mov	local04, local02
06a74     01 2C 06 F1 | 	add	local04, #1
06a78                 | LR__0562
06a78     16 2B 52 F2 | 	cmps	local03, local04 wc
06a7c     68 00 90 3D |  if_ae	jmp	#LR__0565
06a80     13 13 02 F6 | 	mov	arg01, local01
06a84     15 15 02 F6 | 	mov	arg02, local03
06a88     01 16 06 F6 | 	mov	arg03, #1
06a8c     78 05 B2 FD | 	call	#__system__Mid_S
06a90     FD 2E 02 F6 | 	mov	local05, result1
06a94                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06a94     A7 01 00 FF 
06a98     F7 15 06 F6 | 	mov	arg02, ##@LR__5712
06a9c     17 13 02 F6 | 	mov	arg01, local05
06aa0     F8 E3 B1 FD | 	call	#__system___string_cmp
06aa4     00 FA 55 F2 | 	cmps	result1, #0 wc
06aa8     18 00 90 CD |  if_b	jmp	#LR__0563
06aac     A7 01 00 FF 
06ab0     F9 15 06 F6 | 	mov	arg02, ##@LR__5713
06ab4     17 13 02 F6 | 	mov	arg01, local05
06ab8     E0 E3 B1 FD | 	call	#__system___string_cmp
06abc     01 FA 55 F2 | 	cmps	result1, #1 wc
06ac0     1C 00 90 CD |  if_b	jmp	#LR__0564
06ac4                 | LR__0563
06ac4     A7 01 00 FF 
06ac8     FB 15 06 F6 | 	mov	arg02, ##@LR__5714
06acc     17 13 02 F6 | 	mov	arg01, local05
06ad0     C8 E3 B1 FD | 	call	#__system___string_cmp
06ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ad8     00 FA 05 56 |  if_ne	mov	result1, #0
06adc     0C 00 90 5D |  if_ne	jmp	#LR__0566
06ae0                 | LR__0564
06ae0     01 2A 06 F1 | 	add	local03, #1
06ae4     90 FF 9F FD | 	jmp	#LR__0562
06ae8                 | LR__0565
06ae8                 | ' return true
06ae8     01 FA 65 F6 | 	neg	result1, #1
06aec                 | LR__0566
06aec     A7 F0 03 F6 | 	mov	ptra, fp
06af0     B2 00 A0 FD | 	call	#popregs_
06af4                 | _isdec_ret
06af4     2D 00 64 FD | 	ret
06af8                 | 
06af8                 | ' 
06af8                 | ' ' Check if the part is a string.  
06af8                 | ' 
06af8                 | ' function isstring(s as string) as boolean
06af8                 | _isstring
06af8     01 4A 05 F6 | 	mov	COUNT_, #1
06afc     A8 00 A0 FD | 	call	#pushregs_
06b00                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06b00     09 27 02 F6 | 	mov	local01, arg01
06b04     01 14 06 F6 | 	mov	arg02, #1
06b08     E4 03 B2 FD | 	call	#__system__Left_S
06b0c     FD 12 02 F6 | 	mov	arg01, result1
06b10     A7 01 00 FF 
06b14     FD 15 06 F6 | 	mov	arg02, ##@LR__5715
06b18     80 E3 B1 FD | 	call	#__system___string_cmp
06b1c     00 FA 4D F2 | 	cmps	result1, #0 wz
06b20     28 00 90 5D |  if_ne	jmp	#LR__0570
06b24     13 13 02 F6 | 	mov	arg01, local01
06b28     01 14 06 F6 | 	mov	arg02, #1
06b2c     48 04 B2 FD | 	call	#__system__Right_S
06b30     FD 12 02 F6 | 	mov	arg01, result1
06b34     A7 01 00 FF 
06b38     FF 15 06 F6 | 	mov	arg02, ##@LR__5716
06b3c     5C E3 B1 FD | 	call	#__system___string_cmp
06b40     00 FA 4D F2 | 	cmps	result1, #0 wz
06b44     01 FA 65 A6 |  if_e	neg	result1, #1
06b48     04 00 90 AD |  if_e	jmp	#LR__0571
06b4c                 | LR__0570
06b4c     00 FA 05 F6 | 	mov	result1, #0
06b50                 | LR__0571
06b50     A7 F0 03 F6 | 	mov	ptra, fp
06b54     B2 00 A0 FD | 	call	#popregs_
06b58                 | _isstring_ret
06b58     2D 00 64 FD | 	ret
06b5c                 | 
06b5c                 | ' 
06b5c                 | ' ' getnoteval. Returns the frequency of note token
06b5c                 | ' 
06b5c                 | ' function getnoteval(token) as single
06b5c                 | _getnoteval
06b5c     02 4A 05 F6 | 	mov	COUNT_, #2
06b60     A8 00 A0 FD | 	call	#pushregs_
06b64     01 00 00 FF 
06b68     00 13 86 F1 | 	sub	arg01, ##768
06b6c     09 15 52 F6 | 	abs	arg02, arg01 wc
06b70     0C 14 16 FD | 	qdiv	arg02, #12
06b74     14 00 00 FF 
06b78     D8 E4 05 F1 | 	add	objptr, ##10456
06b7c     19 14 62 FD | 	getqy	arg02
06b80     0A 15 82 F6 | 	negc	arg02, arg02
06b84     02 14 66 F0 | 	shl	arg02, #2
06b88     F2 14 02 F1 | 	add	arg02, objptr
06b8c     0A 27 02 FB | 	rdlong	local01, arg02
06b90     09 15 52 F6 | 	abs	arg02, arg01 wc
06b94     0C 14 16 FD | 	qdiv	arg02, #12
06b98     14 00 00 FF 
06b9c     D8 E4 85 F1 | 	sub	objptr, ##10456
06ba0     01 12 06 F6 | 	mov	arg01, #1
06ba4                 | ' noteexp=1+(note/12) 
06ba4                 | ' return (2.0^noteexp)*notebase
06ba4     18 14 62 FD | 	getqx	arg02
06ba8     0A 13 82 F3 | 	sumc	arg01, arg02
06bac     09 13 52 F6 | 	abs	arg01, arg01 wc
06bb0     1F 28 C6 C9 |  if_b	decod	local02, #31
06bb4     00 28 06 36 |  if_ae	mov	local02, #0
06bb8     2C 0D B2 FD | 	call	#__system___float_fromuns
06bbc     14 FB 61 F5 | 	xor	result1, local02
06bc0     FD 14 02 F6 | 	mov	arg02, result1
06bc4     1E 12 C6 F9 | 	decod	arg01, #30
06bc8     28 20 B2 FD | 	call	#__system____builtin_powf
06bcc     FD 12 02 F6 | 	mov	arg01, result1
06bd0     13 15 02 F6 | 	mov	arg02, local01
06bd4     14 11 B2 FD | 	call	#__system___float_mul
06bd8     A7 F0 03 F6 | 	mov	ptra, fp
06bdc     B2 00 A0 FD | 	call	#popregs_
06be0                 | _getnoteval_ret
06be0     2D 00 64 FD | 	ret
06be4                 | 
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' '
06be4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06be4                 | ' '
06be4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06be4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06be4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06be4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06be4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06be4                 | ' ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' ' Helper functions to manage program lines
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '----- delete a line from a program
06be4                 | ' 
06be4                 | ' function deleteline(aline as ulong) as integer
06be4                 | _deleteline
06be4     02 4A 05 F6 | 	mov	COUNT_, #2
06be8     A8 00 A0 FD | 	call	#pushregs_
06bec     2C F0 07 F1 | 	add	ptra, #44
06bf0     04 4E 05 F1 | 	add	fp, #4
06bf4     A7 12 62 FC | 	wrlong	arg01, fp
06bf8     4A 00 00 FF 
06bfc     88 E4 05 F1 | 	add	objptr, ##38024
06c00     F2 26 02 FB | 	rdlong	local01, objptr
06c04     0C 4E 05 F1 | 	add	fp, #12
06c08     A7 26 62 FC | 	wrlong	local01, fp
06c0c     10 4E 85 F1 | 	sub	fp, #16
06c10                 | ' 
06c10                 | ' searchptr=programstart
06c10                 | ' do
06c10     3E 00 00 FF 
06c14     BC E5 85 F1 | 	sub	objptr, ##32188
06c18                 | LR__0580
06c18     14 4E 05 F1 | 	add	fp, #20
06c1c     A7 12 02 F6 | 	mov	arg01, fp
06c20     04 4E 85 F1 | 	sub	fp, #4
06c24     A7 14 02 FB | 	rdlong	arg02, fp
06c28     10 4E 85 F1 | 	sub	fp, #16
06c2c     18 16 06 F6 | 	mov	arg03, #24
06c30     00 D6 B1 FD | 	call	#_psram_spin2_read1
06c34     10 4E 05 F1 | 	add	fp, #16
06c38     A7 26 02 FB | 	rdlong	local01, fp
06c3c     08 4E 85 F1 | 	sub	fp, #8
06c40     A7 26 62 FC | 	wrlong	local01, fp
06c44     20 4E 05 F1 | 	add	fp, #32
06c48     A7 26 02 FB | 	rdlong	local01, fp
06c4c     18 4E 85 F1 | 	sub	fp, #24
06c50     A7 26 62 FC | 	wrlong	local01, fp
06c54     04 4E 05 F1 | 	add	fp, #4
06c58     A7 26 02 FB | 	rdlong	local01, fp
06c5c     10 4E 85 F1 | 	sub	fp, #16
06c60     A7 16 02 FB | 	rdlong	arg03, fp
06c64     04 4E 85 F1 | 	sub	fp, #4
06c68     0B 27 12 F2 | 	cmp	local01, arg03 wc
06c6c     28 4E 05 C1 |  if_b	add	fp, #40
06c70     A7 28 02 CB |  if_b	rdlong	local02, fp
06c74     28 4E 85 C1 |  if_b	sub	fp, #40
06c78     FF FF 3F CF 
06c7c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06c80     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06c84     0B 00 00 FF 
06c88     CC E4 85 F1 | 	sub	objptr, ##5836
06c8c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06c8c     14 4E 05 F1 | 	add	fp, #20
06c90     A7 26 02 FB | 	rdlong	local01, fp
06c94     10 4E 85 F1 | 	sub	fp, #16
06c98     A7 28 02 FB | 	rdlong	local02, fp
06c9c     04 4E 85 F1 | 	sub	fp, #4
06ca0     14 27 0A F2 | 	cmp	local01, local02 wz
06ca4     01 FA 65 56 |  if_ne	neg	result1, #1
06ca8     34 02 90 5D |  if_ne	jmp	#LR__0585
06cac     08 4E 05 F1 | 	add	fp, #8
06cb0     A7 12 02 FB | 	rdlong	arg01, fp
06cb4     08 4E 85 F1 | 	sub	fp, #8
06cb8     01 14 66 F6 | 	neg	arg02, #1
06cbc     B0 A9 B1 FD | 	call	#_pslpoke
06cc0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06cc0                 | ' 
06cc0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06cc0     28 4E 05 F1 | 	add	fp, #40
06cc4     A7 26 02 FB | 	rdlong	local01, fp
06cc8     28 4E 85 F1 | 	sub	fp, #40
06ccc     FF FF 3F FF 
06cd0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06cd4     24 4E 05 A1 |  if_e	add	fp, #36
06cd8     A7 28 02 AB |  if_e	rdlong	local02, fp
06cdc     24 4E 85 A1 |  if_e	sub	fp, #36
06ce0     FF FF 7F AF 
06ce4     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06ce8     88 00 90 5D |  if_ne	jmp	#LR__0581
06cec     4A 00 00 FF 
06cf0     88 E4 05 F1 | 	add	objptr, ##38024
06cf4     00 04 80 FF 
06cf8     F2 00 68 FC | 	wrlong	##524288, objptr
06cfc     07 00 00 FF 
06d00     2C E4 85 F1 | 	sub	objptr, ##3628
06d04     00 04 80 FF 
06d08     F2 00 68 FC | 	wrlong	##524288, objptr
06d0c     07 00 00 FF 
06d10     30 E4 05 F1 | 	add	objptr, ##3632
06d14     F2 00 68 FC | 	wrlong	#0, objptr
06d18     04 E4 05 F1 | 	add	objptr, #4
06d1c     FF FF FF FF 
06d20     F2 FE 6B FC | 	wrlong	##-1, objptr
06d24     4A 00 00 FF 
06d28     90 E4 85 F1 | 	sub	objptr, ##38032
06d2c     00 12 06 F6 | 	mov	arg01, #0
06d30     01 14 66 F6 | 	neg	arg02, #1
06d34     38 A9 B1 FD | 	call	#_pslpoke
06d38     10 12 06 F6 | 	mov	arg01, #16
06d3c     01 14 66 F6 | 	neg	arg02, #1
06d40     2C A9 B1 FD | 	call	#_pslpoke
06d44     14 12 06 F6 | 	mov	arg01, #20
06d48     1E 14 CE F9 | 	bmask	arg02, #30
06d4c     20 A9 B1 FD | 	call	#_pslpoke
06d50     50 00 00 FF 
06d54     B8 E4 05 F1 | 	add	objptr, ##41144
06d58     00 04 80 FF 
06d5c     F2 00 68 FC | 	wrlong	##524288, objptr
06d60     04 E4 05 F1 | 	add	objptr, #4
06d64     00 04 80 FF 
06d68     F2 00 68 FC | 	wrlong	##524288, objptr
06d6c     50 00 00 FF 
06d70     BC E4 85 F1 | 	sub	objptr, ##41148
06d74                 | LR__0581
06d74                 | ' 
06d74                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06d74     28 4E 05 F1 | 	add	fp, #40
06d78     A7 26 02 FB | 	rdlong	local01, fp
06d7c     28 4E 85 F1 | 	sub	fp, #40
06d80     FF FF 3F FF 
06d84     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d88     74 00 90 5D |  if_ne	jmp	#LR__0582
06d8c     24 4E 05 F1 | 	add	fp, #36
06d90     A7 28 02 FB | 	rdlong	local02, fp
06d94     24 4E 85 F1 | 	sub	fp, #36
06d98     FF FF 7F FF 
06d9c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06da0     5C 00 90 AD |  if_e	jmp	#LR__0582
06da4     24 4E 05 F1 | 	add	fp, #36
06da8     A7 12 02 FB | 	rdlong	arg01, fp
06dac     24 4E 85 F1 | 	sub	fp, #36
06db0     14 12 06 F1 | 	add	arg01, #20
06db4     1E 14 CE F9 | 	bmask	arg02, #30
06db8     B4 A8 B1 FD | 	call	#_pslpoke
06dbc     24 4E 05 F1 | 	add	fp, #36
06dc0     A7 26 02 FB | 	rdlong	local01, fp
06dc4     4A 00 00 FF 
06dc8     90 E4 05 F1 | 	add	objptr, ##38032
06dcc     F2 26 62 FC | 	wrlong	local01, objptr
06dd0     4A 00 00 FF 
06dd4     90 E4 85 F1 | 	sub	objptr, ##38032
06dd8     A7 12 02 FB | 	rdlong	arg01, fp
06ddc     24 4E 85 F1 | 	sub	fp, #36
06de0     BC A9 B1 FD | 	call	#_pslpeek
06de4     4A 00 00 FF 
06de8     8C E4 05 F1 | 	add	objptr, ##38028
06dec     F2 FA 61 FC | 	wrlong	result1, objptr
06df0     4A 00 00 FF 
06df4     8C E4 85 F1 | 	sub	objptr, ##38028
06df8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06df8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06df8                 | '   lastline=pslpeek(header(4))
06df8                 | '   return 0
06df8     00 FA 05 F6 | 	mov	result1, #0
06dfc     E0 00 90 FD | 	jmp	#LR__0585
06e00                 | LR__0582
06e00                 | ' 
06e00                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06e00     28 4E 05 F1 | 	add	fp, #40
06e04     A7 26 02 FB | 	rdlong	local01, fp
06e08     28 4E 85 F1 | 	sub	fp, #40
06e0c     FF FF 3F FF 
06e10     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e14     58 00 90 AD |  if_e	jmp	#LR__0583
06e18     24 4E 05 F1 | 	add	fp, #36
06e1c     A7 28 02 FB | 	rdlong	local02, fp
06e20     24 4E 85 F1 | 	sub	fp, #36
06e24     FF FF 7F FF 
06e28     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06e2c     40 00 90 5D |  if_ne	jmp	#LR__0583
06e30     28 4E 05 F1 | 	add	fp, #40
06e34     A7 12 02 FB | 	rdlong	arg01, fp
06e38     28 4E 85 F1 | 	sub	fp, #40
06e3c     10 12 06 F1 | 	add	arg01, #16
06e40     01 14 66 F6 | 	neg	arg02, #1
06e44     28 A8 B1 FD | 	call	#_pslpoke
06e48     28 4E 05 F1 | 	add	fp, #40
06e4c     A7 26 02 FB | 	rdlong	local01, fp
06e50     28 4E 85 F1 | 	sub	fp, #40
06e54     4A 00 00 FF 
06e58     88 E4 05 F1 | 	add	objptr, ##38024
06e5c     F2 26 62 FC | 	wrlong	local01, objptr
06e60     4A 00 00 FF 
06e64     88 E4 85 F1 | 	sub	objptr, ##38024
06e68                 | ' '   print "deleted first line"
06e68                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06e68                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06e68                 | '   return 0
06e68     00 FA 05 F6 | 	mov	result1, #0
06e6c     70 00 90 FD | 	jmp	#LR__0585
06e70                 | LR__0583
06e70                 | ' 
06e70                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06e70     28 4E 05 F1 | 	add	fp, #40
06e74     A7 26 02 FB | 	rdlong	local01, fp
06e78     28 4E 85 F1 | 	sub	fp, #40
06e7c     FF FF 3F FF 
06e80     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e84     24 4E 05 51 |  if_ne	add	fp, #36
06e88     A7 28 02 5B |  if_ne	rdlong	local02, fp
06e8c     24 4E 85 51 |  if_ne	sub	fp, #36
06e90     FF FF 7F 5F 
06e94     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06e98     40 00 90 AD |  if_e	jmp	#LR__0584
06e9c     28 4E 05 F1 | 	add	fp, #40
06ea0     A7 12 02 FB | 	rdlong	arg01, fp
06ea4     10 12 06 F1 | 	add	arg01, #16
06ea8     04 4E 85 F1 | 	sub	fp, #4
06eac     A7 14 02 FB | 	rdlong	arg02, fp
06eb0     24 4E 85 F1 | 	sub	fp, #36
06eb4     B8 A7 B1 FD | 	call	#_pslpoke
06eb8     24 4E 05 F1 | 	add	fp, #36
06ebc     A7 12 02 FB | 	rdlong	arg01, fp
06ec0     14 12 06 F1 | 	add	arg01, #20
06ec4     04 4E 05 F1 | 	add	fp, #4
06ec8     A7 14 02 FB | 	rdlong	arg02, fp
06ecc     28 4E 85 F1 | 	sub	fp, #40
06ed0     9C A7 B1 FD | 	call	#_pslpoke
06ed4                 | '    pslpoke(header(5)+16,header(4))  
06ed4                 | '    pslpoke(header(4)+20, header(5))
06ed4                 | '    return 0
06ed4     00 FA 05 F6 | 	mov	result1, #0
06ed8     04 00 90 FD | 	jmp	#LR__0585
06edc                 | LR__0584
06edc     00 FA 05 F6 | 	mov	result1, #0
06ee0                 | LR__0585
06ee0     A7 F0 03 F6 | 	mov	ptra, fp
06ee4     B2 00 A0 FD | 	call	#popregs_
06ee8                 | _deleteline_ret
06ee8     2D 00 64 FD | 	ret
06eec                 | 
06eec                 | ' 
06eec                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06eec                 | ' 
06eec                 | ' sub save_line
06eec                 | _save_line
06eec     03 4A 05 F6 | 	mov	COUNT_, #3
06ef0     A8 00 A0 FD | 	call	#pushregs_
06ef4     4A 00 00 FF 
06ef8     7C E4 05 F1 | 	add	objptr, ##38012
06efc     F2 16 02 FB | 	rdlong	arg03, objptr
06f00     01 16 06 F1 | 	add	arg03, #1
06f04     05 00 00 FF 
06f08     18 E4 85 F1 | 	sub	objptr, ##2584
06f0c     F2 14 02 FB | 	rdlong	arg02, objptr
06f10     0B 15 02 FD | 	qmul	arg02, arg03
06f14     0E 00 00 FF 
06f18     44 E4 85 F1 | 	sub	objptr, ##7236
06f1c     F2 12 02 FB | 	rdlong	arg01, objptr
06f20     37 00 00 FF 
06f24     20 E4 85 F1 | 	sub	objptr, ##28192
06f28     09 27 02 F6 | 	mov	local01, arg01
06f2c     18 28 62 FD | 	getqx	local02
06f30     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06f34                 | LR__0590
06f34     13 FB C9 FA | 	rdbyte	result1, local01 wz
06f38     01 26 06 51 |  if_ne	add	local01, #1
06f3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
06f40                 | LR__0591
06f40     09 27 82 F1 | 	sub	local01, arg01
06f44     03 26 CE F7 | 	test	local01, #3 wz
06f48     02 26 46 50 |  if_ne	shr	local01, #2
06f4c     01 26 06 51 |  if_ne	add	local01, #1
06f50     02 26 66 50 |  if_ne	shl	local01, #2
06f54     14 2B 02 F6 | 	mov	local03, local02
06f58     13 2B 02 F1 | 	add	local03, local01
06f5c     43 00 00 FF 
06f60     5C E4 05 F1 | 	add	objptr, ##34396
06f64     F2 16 02 FB | 	rdlong	arg03, objptr
06f68     14 17 02 F1 | 	add	arg03, local02
06f6c     04 00 00 FF 
06f70     28 E4 05 F1 | 	add	objptr, ##2088
06f74     F2 16 62 FC | 	wrlong	arg03, objptr
06f78     04 E4 05 F1 | 	add	objptr, #4
06f7c     F2 26 62 FC | 	wrlong	local01, objptr
06f80     0C E4 85 F1 | 	sub	objptr, #12
06f84     F2 12 02 F6 | 	mov	arg01, objptr
06f88     04 00 00 FF 
06f8c     20 E4 85 F1 | 	sub	objptr, ##2080
06f90     F2 14 02 FB | 	rdlong	arg02, objptr
06f94     14 17 02 F6 | 	mov	arg03, local02
06f98     37 00 00 FF 
06f9c     90 E5 85 F1 | 	sub	objptr, ##28560
06fa0     2C D3 B1 FD | 	call	#_psram_spin2_write
06fa4     2B 00 00 FF 
06fa8     54 E5 05 F1 | 	add	objptr, ##22356
06fac     F2 12 02 FB | 	rdlong	arg01, objptr
06fb0     0C 00 00 FF 
06fb4     3C E4 05 F1 | 	add	objptr, ##6204
06fb8     F2 14 02 FB | 	rdlong	arg02, objptr
06fbc     14 15 02 F1 | 	add	arg02, local02
06fc0     13 17 02 F6 | 	mov	arg03, local01
06fc4     37 00 00 FF 
06fc8     90 E5 85 F1 | 	sub	objptr, ##28560
06fcc     00 D3 B1 FD | 	call	#_psram_spin2_write
06fd0     37 00 00 FF 
06fd4     90 E5 05 F1 | 	add	objptr, ##28560
06fd8     F2 26 02 FB | 	rdlong	local01, objptr
06fdc     15 27 02 F1 | 	add	local01, local03
06fe0     F2 26 62 FC | 	wrlong	local01, objptr
06fe4     43 00 00 FF 
06fe8     5C E4 85 F1 | 	sub	objptr, ##34396
06fec     A7 F0 03 F6 | 	mov	ptra, fp
06ff0     B2 00 A0 FD | 	call	#popregs_
06ff4                 | _save_line_ret
06ff4     2D 00 64 FD | 	ret
06ff8                 | 
06ff8                 | ' 
06ff8                 | ' '----- Insert a new line into the middle of the program
06ff8                 | ' 
06ff8                 | ' function insertline(aline as ulong) as integer
06ff8                 | _insertline
06ff8     02 4A 05 F6 | 	mov	COUNT_, #2
06ffc     A8 00 A0 FD | 	call	#pushregs_
07000     28 F0 07 F1 | 	add	ptra, #40
07004     04 4E 05 F1 | 	add	fp, #4
07008     A7 12 62 FC | 	wrlong	arg01, fp
0700c     4A 00 00 FF 
07010     88 E4 05 F1 | 	add	objptr, ##38024
07014     F2 26 02 FB | 	rdlong	local01, objptr
07018     04 4E 05 F1 | 	add	fp, #4
0701c     A7 26 62 FC | 	wrlong	local01, fp
07020     08 4E 85 F1 | 	sub	fp, #8
07024                 | ' 
07024                 | ' do
07024     3E 00 00 FF 
07028     BC E5 85 F1 | 	sub	objptr, ##32188
0702c                 | LR__0600
0702c     10 4E 05 F1 | 	add	fp, #16
07030     A7 12 02 F6 | 	mov	arg01, fp
07034     08 4E 85 F1 | 	sub	fp, #8
07038     A7 14 02 FB | 	rdlong	arg02, fp
0703c     08 4E 85 F1 | 	sub	fp, #8
07040     18 16 06 F6 | 	mov	arg03, #24
07044     EC D1 B1 FD | 	call	#_psram_spin2_read1
07048     08 4E 05 F1 | 	add	fp, #8
0704c     A7 26 02 FB | 	rdlong	local01, fp
07050     04 4E 05 F1 | 	add	fp, #4
07054     A7 26 62 FC | 	wrlong	local01, fp
07058     18 4E 05 F1 | 	add	fp, #24
0705c     A7 26 02 FB | 	rdlong	local01, fp
07060     1C 4E 85 F1 | 	sub	fp, #28
07064     A7 26 62 FC | 	wrlong	local01, fp
07068     08 4E 05 F1 | 	add	fp, #8
0706c     A7 26 02 FB | 	rdlong	local01, fp
07070     0C 4E 85 F1 | 	sub	fp, #12
07074     A7 16 02 FB | 	rdlong	arg03, fp
07078     04 4E 85 F1 | 	sub	fp, #4
0707c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07080     24 4E 05 C1 |  if_b	add	fp, #36
07084     A7 28 02 CB |  if_b	rdlong	local02, fp
07088     24 4E 85 C1 |  if_b	sub	fp, #36
0708c     FF FF 3F CF 
07090     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07094     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07098     0B 00 00 FF 
0709c     CC E4 85 F1 | 	sub	objptr, ##5836
070a0                 | ' 
070a0                 | ' if header(0)=aline then return -1 				' delete it first
070a0     10 4E 05 F1 | 	add	fp, #16
070a4     A7 26 02 FB | 	rdlong	local01, fp
070a8     0C 4E 85 F1 | 	sub	fp, #12
070ac     A7 28 02 FB | 	rdlong	local02, fp
070b0     04 4E 85 F1 | 	sub	fp, #4
070b4     14 27 0A F2 | 	cmp	local01, local02 wz
070b8     01 FA 65 A6 |  if_e	neg	result1, #1
070bc     48 01 90 AD |  if_e	jmp	#LR__0603
070c0                 | ' if header(0)<aline then return -2 				' end of program reached
070c0     10 4E 05 F1 | 	add	fp, #16
070c4     A7 26 02 FB | 	rdlong	local01, fp
070c8     0C 4E 85 F1 | 	sub	fp, #12
070cc     A7 16 02 FB | 	rdlong	arg03, fp
070d0     04 4E 85 F1 | 	sub	fp, #4
070d4     0B 27 12 F2 | 	cmp	local01, arg03 wc
070d8     02 FA 65 C6 |  if_b	neg	result1, #2
070dc     28 01 90 CD |  if_b	jmp	#LR__0603
070e0                 | ' 
070e0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
070e0     20 4E 05 F1 | 	add	fp, #32
070e4     A7 26 02 FB | 	rdlong	local01, fp
070e8     20 4E 85 F1 | 	sub	fp, #32
070ec     FF FF 7F FF 
070f0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
070f4     78 00 90 5D |  if_ne	jmp	#LR__0601
070f8     43 00 00 FF 
070fc     5C E4 05 F1 | 	add	objptr, ##34396
07100     F2 26 02 FB | 	rdlong	local01, objptr
07104     07 00 00 FF 
07108     2C E4 05 F1 | 	add	objptr, ##3628
0710c     F2 26 62 FC | 	wrlong	local01, objptr
07110     0C 4E 05 F1 | 	add	fp, #12
07114     A7 12 02 FB | 	rdlong	arg01, fp
07118     0C 4E 85 F1 | 	sub	fp, #12
0711c     10 12 06 F1 | 	add	arg01, #16
07120     07 00 00 FF 
07124     2C E4 85 F1 | 	sub	objptr, ##3628
07128     F2 14 02 FB | 	rdlong	arg02, objptr
0712c     43 00 00 FF 
07130     5C E4 85 F1 | 	sub	objptr, ##34396
07134     38 A5 B1 FD | 	call	#_pslpoke
07138     47 00 00 FF 
0713c     8C E4 05 F1 | 	add	objptr, ##36492
07140     FF FF FF FF 
07144     F2 FE 6B FC | 	wrlong	##-1, objptr
07148     0C 4E 05 F1 | 	add	fp, #12
0714c     A7 26 02 FB | 	rdlong	local01, fp
07150     0C 4E 85 F1 | 	sub	fp, #12
07154     04 E4 05 F1 | 	add	objptr, #4
07158     F2 26 62 FC | 	wrlong	local01, objptr
0715c     47 00 00 FF 
07160     90 E4 85 F1 | 	sub	objptr, ##36496
07164     84 FD BF FD | 	call	#_save_line
07168                 | '   programstart=programptr
07168                 | '   pslpoke(lineptr2+16,programptr)
07168                 | '   ucompiledline(4)=$FFFF_FFFF
07168                 | '   ucompiledline(5)=lineptr2
07168                 | '   save_line
07168                 | '   return 0
07168     00 FA 05 F6 | 	mov	result1, #0
0716c     98 00 90 FD | 	jmp	#LR__0603
07170                 | LR__0601
07170                 | ' 
07170                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07170     20 4E 05 F1 | 	add	fp, #32
07174     A7 26 02 FB | 	rdlong	local01, fp
07178     20 4E 85 F1 | 	sub	fp, #32
0717c     FF FF 7F FF 
07180     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07184     7C 00 90 AD |  if_e	jmp	#LR__0602
07188     20 4E 05 F1 | 	add	fp, #32
0718c     A7 26 02 FB | 	rdlong	local01, fp
07190     47 00 00 FF 
07194     8C E4 05 F1 | 	add	objptr, ##36492
07198     F2 26 62 FC | 	wrlong	local01, objptr
0719c     14 4E 85 F1 | 	sub	fp, #20
071a0     A7 26 02 FB | 	rdlong	local01, fp
071a4     04 E4 05 F1 | 	add	objptr, #4
071a8     F2 26 62 FC | 	wrlong	local01, objptr
071ac     A7 12 02 FB | 	rdlong	arg01, fp
071b0     0C 4E 85 F1 | 	sub	fp, #12
071b4     10 12 06 F1 | 	add	arg01, #16
071b8     04 00 00 FF 
071bc     34 E4 85 F1 | 	sub	objptr, ##2100
071c0     F2 14 02 FB | 	rdlong	arg02, objptr
071c4     43 00 00 FF 
071c8     5C E4 85 F1 | 	sub	objptr, ##34396
071cc     A0 A4 B1 FD | 	call	#_pslpoke
071d0     20 4E 05 F1 | 	add	fp, #32
071d4     A7 12 02 FB | 	rdlong	arg01, fp
071d8     20 4E 85 F1 | 	sub	fp, #32
071dc     14 12 06 F1 | 	add	arg01, #20
071e0     43 00 00 FF 
071e4     5C E4 05 F1 | 	add	objptr, ##34396
071e8     F2 14 02 FB | 	rdlong	arg02, objptr
071ec     43 00 00 FF 
071f0     5C E4 85 F1 | 	sub	objptr, ##34396
071f4     78 A4 B1 FD | 	call	#_pslpoke
071f8     F0 FC BF FD | 	call	#_save_line
071fc                 | '   ucompiledline(4)=header(4)
071fc                 | '   ucompiledline(5)=lineptr2
071fc                 | '   pslpoke(lineptr2+16,programptr)
071fc                 | '   pslpoke(header(4)+20,programptr)
071fc                 | '   save_line
071fc                 | '   return 0
071fc     00 FA 05 F6 | 	mov	result1, #0
07200     04 00 90 FD | 	jmp	#LR__0603
07204                 | LR__0602
07204     00 FA 05 F6 | 	mov	result1, #0
07208                 | LR__0603
07208     A7 F0 03 F6 | 	mov	ptra, fp
0720c     B2 00 A0 FD | 	call	#popregs_
07210                 | _insertline_ret
07210     2D 00 64 FD | 	ret
07214                 | 
07214                 | ' 
07214                 | ' '----- Adds a new line at the end of the program
07214                 | ' 
07214                 | ' sub add_line_at_end(aline) 
07214                 | _add_line_at_end
07214     4A 00 00 FF 
07218     8C E4 05 F1 | 	add	objptr, ##38028
0721c     F2 12 62 FC | 	wrlong	arg01, objptr
07220     04 E4 05 F1 | 	add	objptr, #4
07224     F2 14 02 FB | 	rdlong	arg02, objptr
07228     03 00 00 FF 
0722c     04 E4 85 F1 | 	sub	objptr, ##1540
07230     F2 14 62 FC | 	wrlong	arg02, objptr
07234     03 00 00 FF 
07238     04 E4 05 F1 | 	add	objptr, ##1540
0723c     F2 12 02 FB | 	rdlong	arg01, objptr
07240     14 12 06 F1 | 	add	arg01, #20
07244     07 00 00 FF 
07248     34 E4 85 F1 | 	sub	objptr, ##3636
0724c     F2 14 02 FB | 	rdlong	arg02, objptr
07250     43 00 00 FF 
07254     5C E4 85 F1 | 	sub	objptr, ##34396
07258     14 A4 B1 FD | 	call	#_pslpoke
0725c     43 00 00 FF 
07260     5C E4 05 F1 | 	add	objptr, ##34396
07264     F2 14 02 FB | 	rdlong	arg02, objptr
07268     07 00 00 FF 
0726c     34 E4 05 F1 | 	add	objptr, ##3636
07270     F2 14 62 FC | 	wrlong	arg02, objptr
07274     03 00 00 FF 
07278     00 E4 85 F1 | 	sub	objptr, ##1536
0727c     FF FF BF FF 
07280     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07284                 | ' 
07284                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07284                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07284     04 00 00 FF 
07288     34 E4 85 F1 | 	sub	objptr, ##2100
0728c     F2 14 02 FB | 	rdlong	arg02, objptr
07290     43 00 00 FF 
07294     5C E4 85 F1 | 	sub	objptr, ##34396
07298     00 04 00 FF 
0729c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
072a0     47 00 00 AF 
072a4     8C E4 05 A1 |  if_e	add	objptr, ##36492
072a8     FF FF FF AF 
072ac     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
072b0     47 00 00 AF 
072b4     8C E4 85 A1 |  if_e	sub	objptr, ##36492
072b8     30 FC BF FD | 	call	#_save_line
072bc     43 00 00 FF 
072c0     5C E4 05 F1 | 	add	objptr, ##34396
072c4     F2 12 02 FB | 	rdlong	arg01, objptr
072c8     43 00 00 FF 
072cc     5C E4 85 F1 | 	sub	objptr, ##34396
072d0     01 14 66 F6 | 	neg	arg02, #1
072d4     98 A3 B1 FD | 	call	#_pslpoke
072d8                 | _add_line_at_end_ret
072d8     2D 00 64 FD | 	ret
072dc                 | 
072dc                 | ' 
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' 
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' 
072dc                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
072dc                 | ' 
072dc                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
072dc                 | _compile_immediate
072dc     0A 4A 05 F6 | 	mov	COUNT_, #10
072e0     A8 00 A0 FD | 	call	#pushregs_
072e4                 | _compile_immediate_enter
072e4     09 2D 02 F6 | 	mov	local04, arg01
072e8     0A 2F 02 F6 | 	mov	local05, arg02
072ec     00 30 06 F6 | 	mov	local06, #0
072f0     00 32 06 F6 | 	mov	local07, #0
072f4     00 34 06 F6 | 	mov	local08, #0
072f8                 | ' 
072f8                 | ' ' linetype=cont+1
072f8                 | ' ' 1 : this is the first part of the line that will continue
072f8                 | ' ' 2 - this is the continuation of the line
072f8                 | ' ' 3 - this is the last continued line
072f8                 | ' ' 4 - this is the one and only part
072f8                 | ' ' 5 - continued after if/else
072f8                 | ' 
072f8                 | ' err=0
072f8                 | ' cmd=0
072f8                 | ' vars=0
072f8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
072f8     02 2C 0E F2 | 	cmp	local04, #2 wz
072fc     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07300     24 00 90 5D |  if_ne	jmp	#LR__0610
07304     35 00 00 FF 
07308     10 E4 05 F1 | 	add	objptr, ##27152
0730c     F2 32 02 FB | 	rdlong	local07, objptr
07310     01 36 06 F6 | 	mov	local09, #1
07314     02 00 00 FF 
07318     34 E4 05 F1 | 	add	objptr, ##1076
0731c     F2 02 68 FC | 	wrlong	#1, objptr
07320     37 00 00 FF 
07324     44 E4 85 F1 | 	sub	objptr, ##28228
07328                 | LR__0610
07328                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07328     04 2C 0E F2 | 	cmp	local04, #4 wz
0732c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07330     30 00 90 5D |  if_ne	jmp	#LR__0611
07334     35 00 00 FF 
07338     18 E4 05 F1 | 	add	objptr, ##27160
0733c     F2 32 02 FB | 	rdlong	local07, objptr
07340     02 36 06 F6 | 	mov	local09, #2
07344     02 00 00 FF 
07348     2C E4 05 F1 | 	add	objptr, ##1068
0734c     F2 04 68 FC | 	wrlong	#2, objptr
07350     13 00 00 FF 
07354     38 E4 05 F1 | 	add	objptr, ##9784
07358     F2 04 68 FC | 	wrlong	#2, objptr
0735c     4A 00 00 FF 
07360     7C E4 85 F1 | 	sub	objptr, ##38012
07364                 | LR__0611
07364                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07364     05 2C 0E F2 | 	cmp	local04, #5 wz
07368     40 00 90 5D |  if_ne	jmp	#LR__0612
0736c     37 00 00 FF 
07370     44 E4 05 F1 | 	add	objptr, ##28228
07374     F2 FC 01 FB | 	rdlong	result2, objptr
07378     FE 36 02 F6 | 	mov	local09, result2
0737c     03 36 66 F0 | 	shl	local09, #3
07380     02 00 00 FF 
07384     38 E4 85 F1 | 	sub	objptr, ##1080
07388     F2 36 02 F1 | 	add	local09, objptr
0738c     04 36 06 F1 | 	add	local09, #4
07390     1B 33 02 FB | 	rdlong	local07, local09
07394     01 FC 05 F1 | 	add	result2, #1
07398     02 00 00 FF 
0739c     38 E4 05 F1 | 	add	objptr, ##1080
073a0     F2 FC 61 FC | 	wrlong	result2, objptr
073a4     37 00 00 FF 
073a8     44 E4 85 F1 | 	sub	objptr, ##28228
073ac                 | LR__0612
073ac                 | ' 
073ac                 | ' 'print  "In compile_immediate cmd=:", cmd
073ac                 | ' 451 select case cmd
073ac     5C 32 0E F2 | 	cmp	local07, #92 wz
073b0     C4 02 90 AD |  if_e	jmp	#LR__0613
073b4     B9 32 0E F2 | 	cmp	local07, #185 wz
073b8     C8 02 90 AD |  if_e	jmp	#LR__0614
073bc     47 32 0E F2 | 	cmp	local07, #71 wz
073c0     D0 02 90 AD |  if_e	jmp	#LR__0615
073c4     59 32 0E F2 | 	cmp	local07, #89 wz
073c8     D8 02 90 AD |  if_e	jmp	#LR__0616
073cc     C3 32 0E F2 | 	cmp	local07, #195 wz
073d0     E0 02 90 AD |  if_e	jmp	#LR__0617
073d4     45 32 0E F2 | 	cmp	local07, #69 wz
073d8     E4 02 90 AD |  if_e	jmp	#LR__0618
073dc     69 32 0E F2 | 	cmp	local07, #105 wz
073e0     EC 02 90 AD |  if_e	jmp	#LR__0619
073e4     40 32 0E F2 | 	cmp	local07, #64 wz
073e8     C4 06 90 AD |  if_e	jmp	#LR__0692
073ec     B4 32 0E F2 | 	cmp	local07, #180 wz
073f0     E8 02 90 AD |  if_e	jmp	#LR__0620
073f4     49 32 0E F2 | 	cmp	local07, #73 wz
073f8     EC 02 90 AD |  if_e	jmp	#LR__0621
073fc     50 32 0E F2 | 	cmp	local07, #80 wz
07400     F0 02 90 AD |  if_e	jmp	#LR__0622
07404     AE 32 0E F2 | 	cmp	local07, #174 wz
07408     F8 02 90 AD |  if_e	jmp	#LR__0623
0740c     B0 32 0E F2 | 	cmp	local07, #176 wz
07410     FC 02 90 AD |  if_e	jmp	#LR__0624
07414     AF 32 0E F2 | 	cmp	local07, #175 wz
07418     00 03 90 AD |  if_e	jmp	#LR__0625
0741c     B1 32 0E F2 | 	cmp	local07, #177 wz
07420     04 03 90 AD |  if_e	jmp	#LR__0626
07424     68 32 0E F2 | 	cmp	local07, #104 wz
07428     08 03 90 AD |  if_e	jmp	#LR__0627
0742c     B7 32 0E F2 | 	cmp	local07, #183 wz
07430     7C 06 90 AD |  if_e	jmp	#LR__0692
07434     74 32 0E F2 | 	cmp	local07, #116 wz
07438     04 03 90 AD |  if_e	jmp	#LR__0628
0743c     73 32 0E F2 | 	cmp	local07, #115 wz
07440     0C 03 90 AD |  if_e	jmp	#LR__0629
07444     6C 32 0E F2 | 	cmp	local07, #108 wz
07448     14 03 90 AD |  if_e	jmp	#LR__0630
0744c     89 32 0E F2 | 	cmp	local07, #137 wz
07450     5C 06 90 AD |  if_e	jmp	#LR__0692
07454     C2 32 0E F2 | 	cmp	local07, #194 wz
07458     14 03 90 AD |  if_e	jmp	#LR__0631
0745c     72 32 0E F2 | 	cmp	local07, #114 wz
07460     18 03 90 AD |  if_e	jmp	#LR__0632
07464     5D 32 0E F2 | 	cmp	local07, #93 wz
07468     1C 03 90 AD |  if_e	jmp	#LR__0633
0746c     96 32 0E F2 | 	cmp	local07, #150 wz
07470     24 03 90 AD |  if_e	jmp	#LR__0634
07474     43 32 0E F2 | 	cmp	local07, #67 wz
07478     28 03 90 AD |  if_e	jmp	#LR__0635
0747c     5A 32 0E F2 | 	cmp	local07, #90 wz
07480     30 03 90 AD |  if_e	jmp	#LR__0636
07484     AB 32 0E F2 | 	cmp	local07, #171 wz
07488     24 06 90 AD |  if_e	jmp	#LR__0692
0748c     BD 32 0E F2 | 	cmp	local07, #189 wz
07490     30 03 90 AD |  if_e	jmp	#LR__0637
07494     BB 32 0E F2 | 	cmp	local07, #187 wz
07498     38 03 90 AD |  if_e	jmp	#LR__0638
0749c     4E 32 0E F2 | 	cmp	local07, #78 wz
074a0     40 03 90 AD |  if_e	jmp	#LR__0639
074a4     A9 32 0E F2 | 	cmp	local07, #169 wz
074a8     58 03 90 AD |  if_e	jmp	#LR__0641
074ac     46 32 0E F2 | 	cmp	local07, #70 wz
074b0     70 03 90 AD |  if_e	jmp	#LR__0643
074b4     71 32 0E F2 | 	cmp	local07, #113 wz
074b8     78 03 90 AD |  if_e	jmp	#LR__0644
074bc     60 32 0E F2 | 	cmp	local07, #96 wz
074c0     7C 03 90 AD |  if_e	jmp	#LR__0645
074c4     4A 32 0E F2 | 	cmp	local07, #74 wz
074c8     80 03 90 AD |  if_e	jmp	#LR__0646
074cc     48 32 0E F2 | 	cmp	local07, #72 wz
074d0     84 03 90 AD |  if_e	jmp	#LR__0647
074d4     58 32 0E F2 | 	cmp	local07, #88 wz
074d8     8C 03 90 AD |  if_e	jmp	#LR__0648
074dc     5F 32 0E F2 | 	cmp	local07, #95 wz
074e0     94 03 90 AD |  if_e	jmp	#LR__0649
074e4     B5 32 0E F2 | 	cmp	local07, #181 wz
074e8     98 03 90 AD |  if_e	jmp	#LR__0650
074ec     8A 32 0E F2 | 	cmp	local07, #138 wz
074f0     A0 03 90 AD |  if_e	jmp	#LR__0651
074f4     4C 32 0E F2 | 	cmp	local07, #76 wz
074f8     A4 03 90 AD |  if_e	jmp	#LR__0652
074fc     52 32 0E F2 | 	cmp	local07, #82 wz
07500     AC 03 90 AD |  if_e	jmp	#LR__0653
07504     97 32 0E F2 | 	cmp	local07, #151 wz
07508     B4 03 90 AD |  if_e	jmp	#LR__0654
0750c     C6 32 0E F2 | 	cmp	local07, #198 wz
07510     B8 03 90 AD |  if_e	jmp	#LR__0655
07514     61 32 0E F2 | 	cmp	local07, #97 wz
07518     BC 03 90 AD |  if_e	jmp	#LR__0656
0751c     63 32 0E F2 | 	cmp	local07, #99 wz
07520     C0 03 90 AD |  if_e	jmp	#LR__0657
07524     41 32 0E F2 | 	cmp	local07, #65 wz
07528     84 05 90 AD |  if_e	jmp	#LR__0692
0752c     4B 32 0E F2 | 	cmp	local07, #75 wz
07530     BC 03 90 AD |  if_e	jmp	#LR__0658
07534     C1 32 0E F2 | 	cmp	local07, #193 wz
07538     C0 03 90 AD |  if_e	jmp	#LR__0659
0753c     B3 32 0E F2 | 	cmp	local07, #179 wz
07540     C4 03 90 AD |  if_e	jmp	#LR__0660
07544     5E 32 0E F2 | 	cmp	local07, #94 wz
07548     C8 03 90 AD |  if_e	jmp	#LR__0661
0754c     7C 32 0E F2 | 	cmp	local07, #124 wz
07550     CC 03 90 AD |  if_e	jmp	#LR__0662
07554     7D 32 0E F2 | 	cmp	local07, #125 wz
07558     D0 03 90 AD |  if_e	jmp	#LR__0663
0755c     7E 32 0E F2 | 	cmp	local07, #126 wz
07560     D4 03 90 AD |  if_e	jmp	#LR__0664
07564     7F 32 0E F2 | 	cmp	local07, #127 wz
07568     D8 03 90 AD |  if_e	jmp	#LR__0665
0756c     80 32 0E F2 | 	cmp	local07, #128 wz
07570     DC 03 90 AD |  if_e	jmp	#LR__0666
07574     55 32 0E F2 | 	cmp	local07, #85 wz
07578     E0 03 90 AD |  if_e	jmp	#LR__0667
0757c     75 32 0E F2 | 	cmp	local07, #117 wz
07580     E4 03 90 AD |  if_e	jmp	#LR__0668
07584     42 32 0E F2 | 	cmp	local07, #66 wz
07588     EC 03 90 AD |  if_e	jmp	#LR__0669
0758c     95 32 0E F2 | 	cmp	local07, #149 wz
07590     F4 03 90 AD |  if_e	jmp	#LR__0670
07594     AC 32 0E F2 | 	cmp	local07, #172 wz
07598     14 05 90 AD |  if_e	jmp	#LR__0692
0759c     81 32 0E F2 | 	cmp	local07, #129 wz
075a0     F0 03 90 AD |  if_e	jmp	#LR__0671
075a4     44 32 0E F2 | 	cmp	local07, #68 wz
075a8     F4 03 90 AD |  if_e	jmp	#LR__0672
075ac     BC 32 0E F2 | 	cmp	local07, #188 wz
075b0     F8 03 90 AD |  if_e	jmp	#LR__0673
075b4     88 32 0E F2 | 	cmp	local07, #136 wz
075b8     F4 04 90 AD |  if_e	jmp	#LR__0692
075bc     B6 32 0E F2 | 	cmp	local07, #182 wz
075c0     F8 03 90 AD |  if_e	jmp	#LR__0674
075c4     92 32 0E F2 | 	cmp	local07, #146 wz
075c8     00 04 90 AD |  if_e	jmp	#LR__0675
075cc     BE 32 0E F2 | 	cmp	local07, #190 wz
075d0     98 05 90 AD |  if_e	jmp	#LR__0693
075d4     C7 32 0E F2 | 	cmp	local07, #199 wz
075d8     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
075dc     D0 04 90 AD |  if_e	jmp	#LR__0692
075e0     4D 32 0E F2 | 	cmp	local07, #77 wz
075e4     F0 03 90 AD |  if_e	jmp	#LR__0676
075e8     51 32 0E F2 | 	cmp	local07, #81 wz
075ec     F8 03 90 AD |  if_e	jmp	#LR__0677
075f0     8E 32 0E F2 | 	cmp	local07, #142 wz
075f4     00 04 90 AD |  if_e	jmp	#LR__0678
075f8     90 32 0E F2 | 	cmp	local07, #144 wz
075fc     04 04 90 AD |  if_e	jmp	#LR__0679
07600     8D 32 0E F2 | 	cmp	local07, #141 wz
07604     08 04 90 AD |  if_e	jmp	#LR__0680
07608     8C 32 0E F2 | 	cmp	local07, #140 wz
0760c     0C 04 90 AD |  if_e	jmp	#LR__0681
07610     91 32 0E F2 | 	cmp	local07, #145 wz
07614     10 04 90 AD |  if_e	jmp	#LR__0682
07618     8B 32 0E F2 | 	cmp	local07, #139 wz
0761c     14 04 90 AD |  if_e	jmp	#LR__0683
07620     8F 32 0E F2 | 	cmp	local07, #143 wz
07624     18 04 90 AD |  if_e	jmp	#LR__0684
07628     B2 32 0E F2 | 	cmp	local07, #178 wz
0762c     1C 04 90 AD |  if_e	jmp	#LR__0685
07630     6D 32 0E F2 | 	cmp	local07, #109 wz
07634     24 04 90 AD |  if_e	jmp	#LR__0686
07638     70 32 0E F2 | 	cmp	local07, #112 wz
0763c     70 04 90 AD |  if_e	jmp	#LR__0692
07640     56 32 0E F2 | 	cmp	local07, #86 wz
07644     20 04 90 AD |  if_e	jmp	#LR__0687
07648     57 32 0E F2 | 	cmp	local07, #87 wz
0764c     60 04 90 AD |  if_e	jmp	#LR__0692
07650     79 32 0E F2 | 	cmp	local07, #121 wz
07654     1C 04 90 AD |  if_e	jmp	#LR__0688
07658     77 32 0E F2 | 	cmp	local07, #119 wz
0765c     20 04 90 AD |  if_e	jmp	#LR__0689
07660     78 32 0E F2 | 	cmp	local07, #120 wz
07664     24 04 90 AD |  if_e	jmp	#LR__0690
07668     01 00 00 FF 
0766c     04 32 0E F2 | 	cmp	local07, ##516 wz
07670     24 04 90 AD |  if_e	jmp	#LR__0691
07674     F4 04 90 FD | 	jmp	#LR__0693
07678                 | LR__0613
07678     40 0B B0 FD | 	call	#_compile_fun_2p
0767c     FD 30 02 F6 | 	mov	local06, result1
07680     2C 04 90 FD | 	jmp	#LR__0692
07684                 | LR__0614
07684     04 0E B0 FD | 	call	#_compile_fun_varp
07688     FD 34 02 F6 | 	mov	local08, result1
0768c     FE 30 02 F6 | 	mov	local06, result2
07690     1C 04 90 FD | 	jmp	#LR__0692
07694                 | LR__0615
07694     F4 0D B0 FD | 	call	#_compile_fun_varp
07698     FD 34 02 F6 | 	mov	local08, result1
0769c     FE 30 02 F6 | 	mov	local06, result2
076a0     0C 04 90 FD | 	jmp	#LR__0692
076a4                 | LR__0616
076a4     E4 0D B0 FD | 	call	#_compile_fun_varp
076a8     FD 34 02 F6 | 	mov	local08, result1
076ac     FE 30 02 F6 | 	mov	local06, result2
076b0     FC 03 90 FD | 	jmp	#LR__0692
076b4                 | LR__0617
076b4                 | ' return expr()
076b4     B8 3C B0 FD | 	call	#_expr
076b8     FD 30 02 F6 | 	mov	local06, result1
076bc     F0 03 90 FD | 	jmp	#LR__0692
076c0                 | LR__0618
076c0     C8 0D B0 FD | 	call	#_compile_fun_varp
076c4     FD 34 02 F6 | 	mov	local08, result1
076c8     FE 30 02 F6 | 	mov	local06, result2
076cc     E0 03 90 FD | 	jmp	#LR__0692
076d0                 | LR__0619
076d0                 | ' return expr()
076d0     9C 3C B0 FD | 	call	#_expr
076d4     FD 30 02 F6 | 	mov	local06, result1
076d8     D4 03 90 FD | 	jmp	#LR__0692
076dc                 | LR__0620
076dc                 | ' return expr()
076dc     90 3C B0 FD | 	call	#_expr
076e0     FD 30 02 F6 | 	mov	local06, result1
076e4     C8 03 90 FD | 	jmp	#LR__0692
076e8                 | LR__0621
076e8                 | ' return expr()
076e8     84 3C B0 FD | 	call	#_expr
076ec     FD 30 02 F6 | 	mov	local06, result1
076f0     BC 03 90 FD | 	jmp	#LR__0692
076f4                 | LR__0622
076f4     94 0D B0 FD | 	call	#_compile_fun_varp
076f8     FD 34 02 F6 | 	mov	local08, result1
076fc     FE 30 02 F6 | 	mov	local06, result2
07700     AC 03 90 FD | 	jmp	#LR__0692
07704                 | LR__0623
07704     B4 0A B0 FD | 	call	#_compile_fun_2p
07708     FD 30 02 F6 | 	mov	local06, result1
0770c     A0 03 90 FD | 	jmp	#LR__0692
07710                 | LR__0624
07710     A8 0A B0 FD | 	call	#_compile_fun_2p
07714     FD 30 02 F6 | 	mov	local06, result1
07718     94 03 90 FD | 	jmp	#LR__0692
0771c                 | LR__0625
0771c     9C 0A B0 FD | 	call	#_compile_fun_2p
07720     FD 30 02 F6 | 	mov	local06, result1
07724     88 03 90 FD | 	jmp	#LR__0692
07728                 | LR__0626
07728     90 0A B0 FD | 	call	#_compile_fun_2p
0772c     FD 30 02 F6 | 	mov	local06, result1
07730     7C 03 90 FD | 	jmp	#LR__0692
07734                 | LR__0627
07734                 | ' return expr()
07734     38 3C B0 FD | 	call	#_expr
07738     FD 30 02 F6 | 	mov	local06, result1
0773c     70 03 90 FD | 	jmp	#LR__0692
07740                 | LR__0628
07740     48 0D B0 FD | 	call	#_compile_fun_varp
07744     FD 34 02 F6 | 	mov	local08, result1
07748     FE 30 02 F6 | 	mov	local06, result2
0774c     60 03 90 FD | 	jmp	#LR__0692
07750                 | LR__0629
07750     38 0D B0 FD | 	call	#_compile_fun_varp
07754     FD 34 02 F6 | 	mov	local08, result1
07758     FE 30 02 F6 | 	mov	local06, result2
0775c     50 03 90 FD | 	jmp	#LR__0692
07760                 | LR__0630
07760     28 0D B0 FD | 	call	#_compile_fun_varp
07764     FD 34 02 F6 | 	mov	local08, result1
07768     FE 30 02 F6 | 	mov	local06, result2
0776c     40 03 90 FD | 	jmp	#LR__0692
07770                 | LR__0631
07770                 | ' return expr()
07770     FC 3B B0 FD | 	call	#_expr
07774     FD 30 02 F6 | 	mov	local06, result1
07778     34 03 90 FD | 	jmp	#LR__0692
0777c                 | LR__0632
0777c     30 22 B0 FD | 	call	#_compile_dim
07780     FD 30 02 F6 | 	mov	local06, result1
07784     E4 03 90 FD | 	jmp	#LR__0693
07788                 | LR__0633
07788     00 0D B0 FD | 	call	#_compile_fun_varp
0778c     FD 34 02 F6 | 	mov	local08, result1
07790     FE 30 02 F6 | 	mov	local06, result2
07794     18 03 90 FD | 	jmp	#LR__0692
07798                 | LR__0634
07798     20 0A B0 FD | 	call	#_compile_fun_2p
0779c     FD 30 02 F6 | 	mov	local06, result1
077a0     0C 03 90 FD | 	jmp	#LR__0692
077a4                 | LR__0635
077a4     E4 0C B0 FD | 	call	#_compile_fun_varp
077a8     FD 34 02 F6 | 	mov	local08, result1
077ac     FE 30 02 F6 | 	mov	local06, result2
077b0     FC 02 90 FD | 	jmp	#LR__0692
077b4                 | LR__0636
077b4     17 13 02 F6 | 	mov	arg01, local05
077b8     BC 20 B0 FD | 	call	#_compile_else
077bc     FD 30 02 F6 | 	mov	local06, result1
077c0     A8 03 90 FD | 	jmp	#LR__0693
077c4                 | LR__0637
077c4     C4 0C B0 FD | 	call	#_compile_fun_varp
077c8     FD 34 02 F6 | 	mov	local08, result1
077cc     FE 30 02 F6 | 	mov	local06, result2
077d0     DC 02 90 FD | 	jmp	#LR__0692
077d4                 | LR__0638
077d4     B4 0C B0 FD | 	call	#_compile_fun_varp
077d8     FD 34 02 F6 | 	mov	local08, result1
077dc     FE 30 02 F6 | 	mov	local06, result2
077e0     CC 02 90 FD | 	jmp	#LR__0692
077e4                 | LR__0639
077e4     01 2E 16 F2 | 	cmp	local05, #1 wc
077e8     08 00 90 CD |  if_b	jmp	#LR__0640
077ec     D4 2D B0 FD | 	call	#_compile_goto
077f0     78 03 90 FD | 	jmp	#LR__0693
077f4                 | LR__0640
077f4     19 12 06 F6 | 	mov	arg01, #25
077f8     00 14 06 F6 | 	mov	arg02, #0
077fc     D0 9C B1 FD | 	call	#_printerror
07800     68 03 90 FD | 	jmp	#LR__0693
07804                 | LR__0641
07804     01 2E 16 F2 | 	cmp	local05, #1 wc
07808     08 00 90 CD |  if_b	jmp	#LR__0642
0780c     50 2D B0 FD | 	call	#_compile_gosub
07810     58 03 90 FD | 	jmp	#LR__0693
07814                 | LR__0642
07814     19 12 06 F6 | 	mov	arg01, #25
07818     00 14 06 F6 | 	mov	arg02, #0
0781c     B0 9C B1 FD | 	call	#_printerror
07820     48 03 90 FD | 	jmp	#LR__0693
07824                 | LR__0643
07824     64 0C B0 FD | 	call	#_compile_fun_varp
07828     FD 34 02 F6 | 	mov	local08, result1
0782c     FE 30 02 F6 | 	mov	local06, result2
07830     7C 02 90 FD | 	jmp	#LR__0692
07834                 | LR__0644
07834     FC 0A B0 FD | 	call	#_compile_fun_4p
07838     FD 30 02 F6 | 	mov	local06, result1
0783c     70 02 90 FD | 	jmp	#LR__0692
07840                 | LR__0645
07840                 | ' return expr()
07840     2C 3B B0 FD | 	call	#_expr
07844     FD 30 02 F6 | 	mov	local06, result1
07848     64 02 90 FD | 	jmp	#LR__0692
0784c                 | LR__0646
0784c     34 28 B0 FD | 	call	#_compile_for
07850     FD 30 02 F6 | 	mov	local06, result1
07854     14 03 90 FD | 	jmp	#LR__0693
07858                 | LR__0647
07858     30 0C B0 FD | 	call	#_compile_fun_varp
0785c     FD 34 02 F6 | 	mov	local08, result1
07860     FE 30 02 F6 | 	mov	local06, result2
07864     48 02 90 FD | 	jmp	#LR__0692
07868                 | LR__0648
07868     17 13 02 F6 | 	mov	arg01, local05
0786c     80 1E B0 FD | 	call	#_compile_if
07870     FD 30 02 F6 | 	mov	local06, result1
07874     F4 02 90 FD | 	jmp	#LR__0693
07878                 | LR__0649
07878                 | ' return expr()
07878     F4 3A B0 FD | 	call	#_expr
0787c     FD 30 02 F6 | 	mov	local06, result1
07880     2C 02 90 FD | 	jmp	#LR__0692
07884                 | LR__0650
07884     D0 0D B0 FD | 	call	#_compile_input
07888     FD 34 02 F6 | 	mov	local08, result1
0788c     FE 30 02 F6 | 	mov	local06, result2
07890     1C 02 90 FD | 	jmp	#LR__0692
07894                 | LR__0651
07894                 | ' return expr()
07894     D8 3A B0 FD | 	call	#_expr
07898     FD 30 02 F6 | 	mov	local06, result1
0789c     10 02 90 FD | 	jmp	#LR__0692
078a0                 | LR__0652
078a0     E8 0B B0 FD | 	call	#_compile_fun_varp
078a4     FD 34 02 F6 | 	mov	local08, result1
078a8     FE 30 02 F6 | 	mov	local06, result2
078ac     00 02 90 FD | 	jmp	#LR__0692
078b0                 | LR__0653
078b0     D8 0B B0 FD | 	call	#_compile_fun_varp
078b4     FD 34 02 F6 | 	mov	local08, result1
078b8     FE 30 02 F6 | 	mov	local06, result2
078bc     F0 01 90 FD | 	jmp	#LR__0692
078c0                 | LR__0654
078c0     F8 08 B0 FD | 	call	#_compile_fun_2p
078c4     FD 30 02 F6 | 	mov	local06, result1
078c8     E4 01 90 FD | 	jmp	#LR__0692
078cc                 | LR__0655
078cc                 | ' return expr()
078cc     A0 3A B0 FD | 	call	#_expr
078d0     FD 30 02 F6 | 	mov	local06, result1
078d4     D8 01 90 FD | 	jmp	#LR__0692
078d8                 | LR__0656
078d8                 | ' return expr()
078d8     94 3A B0 FD | 	call	#_expr
078dc     FD 30 02 F6 | 	mov	local06, result1
078e0     CC 01 90 FD | 	jmp	#LR__0692
078e4                 | LR__0657
078e4                 | ' return expr()
078e4     88 3A B0 FD | 	call	#_expr
078e8     FD 30 02 F6 | 	mov	local06, result1
078ec     C0 01 90 FD | 	jmp	#LR__0692
078f0                 | LR__0658
078f0     D4 2A B0 FD | 	call	#_compile_next
078f4     FD 30 02 F6 | 	mov	local06, result1
078f8     70 02 90 FD | 	jmp	#LR__0693
078fc                 | LR__0659
078fc     B4 30 B0 FD | 	call	#_compile_on
07900     FD 30 02 F6 | 	mov	local06, result1
07904     64 02 90 FD | 	jmp	#LR__0693
07908                 | LR__0660
07908     38 09 B0 FD | 	call	#_compile_fun_3p
0790c     FD 30 02 F6 | 	mov	local06, result1
07910     9C 01 90 FD | 	jmp	#LR__0692
07914                 | LR__0661
07914                 | ' return expr()
07914     58 3A B0 FD | 	call	#_expr
07918     FD 30 02 F6 | 	mov	local06, result1
0791c     90 01 90 FD | 	jmp	#LR__0692
07920                 | LR__0662
07920                 | ' return expr()
07920     4C 3A B0 FD | 	call	#_expr
07924     FD 30 02 F6 | 	mov	local06, result1
07928     84 01 90 FD | 	jmp	#LR__0692
0792c                 | LR__0663
0792c                 | ' return expr()
0792c     40 3A B0 FD | 	call	#_expr
07930     FD 30 02 F6 | 	mov	local06, result1
07934     78 01 90 FD | 	jmp	#LR__0692
07938                 | LR__0664
07938                 | ' return expr()
07938     34 3A B0 FD | 	call	#_expr
0793c     FD 30 02 F6 | 	mov	local06, result1
07940     6C 01 90 FD | 	jmp	#LR__0692
07944                 | LR__0665
07944     EC 09 B0 FD | 	call	#_compile_fun_4p
07948     FD 30 02 F6 | 	mov	local06, result1
0794c     60 01 90 FD | 	jmp	#LR__0692
07950                 | LR__0666
07950                 | ' return expr()
07950     1C 3A B0 FD | 	call	#_expr
07954     FD 30 02 F6 | 	mov	local06, result1
07958     54 01 90 FD | 	jmp	#LR__0692
0795c                 | LR__0667
0795c     5C 08 B0 FD | 	call	#_compile_fun_2p
07960     FD 30 02 F6 | 	mov	local06, result1
07964     48 01 90 FD | 	jmp	#LR__0692
07968                 | LR__0668
07968     20 0B B0 FD | 	call	#_compile_fun_varp
0796c     FD 34 02 F6 | 	mov	local08, result1
07970     FE 30 02 F6 | 	mov	local06, result2
07974     38 01 90 FD | 	jmp	#LR__0692
07978                 | LR__0669
07978     10 0B B0 FD | 	call	#_compile_fun_varp
0797c     FD 34 02 F6 | 	mov	local08, result1
07980     FE 30 02 F6 | 	mov	local06, result2
07984     28 01 90 FD | 	jmp	#LR__0692
07988                 | LR__0670
07988     30 08 B0 FD | 	call	#_compile_fun_2p
0798c     FD 30 02 F6 | 	mov	local06, result1
07990     1C 01 90 FD | 	jmp	#LR__0692
07994                 | LR__0671
07994     24 08 B0 FD | 	call	#_compile_fun_2p
07998     FD 30 02 F6 | 	mov	local06, result1
0799c     10 01 90 FD | 	jmp	#LR__0692
079a0                 | LR__0672
079a0     74 16 B0 FD | 	call	#_compile_print
079a4     FD 30 02 F6 | 	mov	local06, result1
079a8     C0 01 90 FD | 	jmp	#LR__0693
079ac                 | LR__0673
079ac     DC 0A B0 FD | 	call	#_compile_fun_varp
079b0     FD 34 02 F6 | 	mov	local08, result1
079b4     FE 30 02 F6 | 	mov	local06, result2
079b8     F4 00 90 FD | 	jmp	#LR__0692
079bc                 | LR__0674
079bc     A8 0B B0 FD | 	call	#_compile_read
079c0     FD 34 02 F6 | 	mov	local08, result1
079c4     FE 30 02 F6 | 	mov	local06, result2
079c8     E4 00 90 FD | 	jmp	#LR__0692
079cc                 | LR__0675
079cc                 | ' return expr()
079cc     A0 39 B0 FD | 	call	#_expr
079d0     FD 30 02 F6 | 	mov	local06, result1
079d4     D8 00 90 FD | 	jmp	#LR__0692
079d8                 | LR__0676
079d8     B0 0A B0 FD | 	call	#_compile_fun_varp
079dc     FD 34 02 F6 | 	mov	local08, result1
079e0     FE 30 02 F6 | 	mov	local06, result2
079e4     C8 00 90 FD | 	jmp	#LR__0692
079e8                 | LR__0677
079e8     A0 0A B0 FD | 	call	#_compile_fun_varp
079ec     FD 34 02 F6 | 	mov	local08, result1
079f0     FE 30 02 F6 | 	mov	local06, result2
079f4     B8 00 90 FD | 	jmp	#LR__0692
079f8                 | LR__0678
079f8     C0 07 B0 FD | 	call	#_compile_fun_2p
079fc     FD 30 02 F6 | 	mov	local06, result1
07a00     AC 00 90 FD | 	jmp	#LR__0692
07a04                 | LR__0679
07a04     B4 07 B0 FD | 	call	#_compile_fun_2p
07a08     FD 30 02 F6 | 	mov	local06, result1
07a0c     A0 00 90 FD | 	jmp	#LR__0692
07a10                 | LR__0680
07a10     A8 07 B0 FD | 	call	#_compile_fun_2p
07a14     FD 30 02 F6 | 	mov	local06, result1
07a18     94 00 90 FD | 	jmp	#LR__0692
07a1c                 | LR__0681
07a1c     9C 07 B0 FD | 	call	#_compile_fun_2p
07a20     FD 30 02 F6 | 	mov	local06, result1
07a24     88 00 90 FD | 	jmp	#LR__0692
07a28                 | LR__0682
07a28     90 07 B0 FD | 	call	#_compile_fun_2p
07a2c     FD 30 02 F6 | 	mov	local06, result1
07a30     7C 00 90 FD | 	jmp	#LR__0692
07a34                 | LR__0683
07a34     84 07 B0 FD | 	call	#_compile_fun_2p
07a38     FD 30 02 F6 | 	mov	local06, result1
07a3c     70 00 90 FD | 	jmp	#LR__0692
07a40                 | LR__0684
07a40     78 07 B0 FD | 	call	#_compile_fun_2p
07a44     FD 30 02 F6 | 	mov	local06, result1
07a48     64 00 90 FD | 	jmp	#LR__0692
07a4c                 | LR__0685
07a4c     3C 0A B0 FD | 	call	#_compile_fun_varp
07a50     FD 34 02 F6 | 	mov	local08, result1
07a54     FE 30 02 F6 | 	mov	local06, result2
07a58     54 00 90 FD | 	jmp	#LR__0692
07a5c                 | LR__0686
07a5c     E4 07 B0 FD | 	call	#_compile_fun_3p
07a60     FD 30 02 F6 | 	mov	local06, result1
07a64     48 00 90 FD | 	jmp	#LR__0692
07a68                 | LR__0687
07a68                 | ' return expr()
07a68     04 39 B0 FD | 	call	#_expr
07a6c     FD 30 02 F6 | 	mov	local06, result1
07a70     3C 00 90 FD | 	jmp	#LR__0692
07a74                 | LR__0688
07a74     44 07 B0 FD | 	call	#_compile_fun_2p
07a78     FD 30 02 F6 | 	mov	local06, result1
07a7c     30 00 90 FD | 	jmp	#LR__0692
07a80                 | LR__0689
07a80     38 07 B0 FD | 	call	#_compile_fun_2p
07a84     FD 30 02 F6 | 	mov	local06, result1
07a88     24 00 90 FD | 	jmp	#LR__0692
07a8c                 | LR__0690
07a8c     2C 07 B0 FD | 	call	#_compile_fun_2p
07a90     FD 30 02 F6 | 	mov	local06, result1
07a94     18 00 90 FD | 	jmp	#LR__0692
07a98                 | LR__0691
07a98     1C 13 B0 FD | 	call	#_compile_array_assign
07a9c     FD 30 02 F6 | 	mov	local06, result1
07aa0     0E 30 0E F2 | 	cmp	local06, #14 wz
07aa4     C4 00 90 5D |  if_ne	jmp	#LR__0693
07aa8                 | ' return 23
07aa8     17 30 06 F6 | 	mov	local06, #23
07aac     BC 00 90 FD | 	jmp	#LR__0693
07ab0                 | ' return 23
07ab0                 | LR__0692
07ab0     19 2B 02 F6 | 	mov	local03, local07
07ab4     1A 27 02 F6 | 	mov	local01, local08
07ab8     13 37 02 F6 | 	mov	local09, local01
07abc     14 39 02 F6 | 	mov	local10, local02
07ac0     15 33 02 F6 | 	mov	local07, local03
07ac4     4A 00 00 FF 
07ac8     7C E4 05 F1 | 	add	objptr, ##38012
07acc     F2 26 02 FB | 	rdlong	local01, objptr
07ad0     13 35 02 F6 | 	mov	local08, local01
07ad4     01 34 66 F0 | 	shl	local08, #1
07ad8     13 35 02 F1 | 	add	local08, local01
07adc     02 34 66 F0 | 	shl	local08, #2
07ae0     03 00 00 FF 
07ae4     00 E4 85 F1 | 	sub	objptr, ##1536
07ae8     F2 34 02 F1 | 	add	local08, objptr
07aec     1A 37 62 FC | 	wrlong	local09, local08
07af0     03 00 00 FF 
07af4     00 E4 05 F1 | 	add	objptr, ##1536
07af8     F2 26 02 FB | 	rdlong	local01, objptr
07afc     13 37 02 F6 | 	mov	local09, local01
07b00     01 36 66 F0 | 	shl	local09, #1
07b04     13 37 02 F1 | 	add	local09, local01
07b08     02 36 66 F0 | 	shl	local09, #2
07b0c     03 00 00 FF 
07b10     00 E4 85 F1 | 	sub	objptr, ##1536
07b14     F2 36 02 F1 | 	add	local09, objptr
07b18     04 36 06 F1 | 	add	local09, #4
07b1c     1B 39 62 FC | 	wrlong	local10, local09
07b20     03 00 00 FF 
07b24     00 E4 05 F1 | 	add	objptr, ##1536
07b28     F2 26 02 FB | 	rdlong	local01, objptr
07b2c     13 39 02 F6 | 	mov	local10, local01
07b30     01 38 66 F0 | 	shl	local10, #1
07b34     13 39 02 F1 | 	add	local10, local01
07b38     02 38 66 F0 | 	shl	local10, #2
07b3c     03 00 00 FF 
07b40     00 E4 85 F1 | 	sub	objptr, ##1536
07b44     F2 38 02 F1 | 	add	local10, objptr
07b48     08 38 06 F1 | 	add	local10, #8
07b4c     1C 33 62 FC | 	wrlong	local07, local10
07b50     03 00 00 FF 
07b54     00 E4 05 F1 | 	add	objptr, ##1536
07b58     F2 36 02 FB | 	rdlong	local09, objptr
07b5c     01 36 06 F1 | 	add	local09, #1
07b60     F2 36 62 FC | 	wrlong	local09, objptr
07b64     4A 00 00 FF 
07b68     7C E4 85 F1 | 	sub	objptr, ##38012
07b6c                 | LR__0693
07b6c                 | ' 
07b6c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07b6c                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07b6c     03 2C 0E F2 | 	cmp	local04, #3 wz
07b70     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07b74     38 00 90 5D |  if_ne	jmp	#LR__0694
07b78     4A 00 00 FF 
07b7c     7C E4 05 F1 | 	add	objptr, ##38012
07b80     F2 38 02 FB | 	rdlong	local10, objptr
07b84     1C 27 02 F6 | 	mov	local01, local10
07b88     01 26 66 F0 | 	shl	local01, #1
07b8c     1C 27 02 F1 | 	add	local01, local10
07b90     02 26 66 F0 | 	shl	local01, #2
07b94     03 00 00 FF 
07b98     00 E4 85 F1 | 	sub	objptr, ##1536
07b9c     F2 26 02 F1 | 	add	local01, objptr
07ba0     08 26 06 F1 | 	add	local01, #8
07ba4     13 FD 6B FC | 	wrlong	#510, local01
07ba8     47 00 00 FF 
07bac     7C E4 85 F1 | 	sub	objptr, ##36476
07bb0                 | LR__0694
07bb0                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07bb0                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07bb0     4A 00 00 FF 
07bb4     7C E4 05 F1 | 	add	objptr, ##38012
07bb8     F2 26 02 FB | 	rdlong	local01, objptr
07bbc     4A 00 00 FF 
07bc0     7C E4 85 F1 | 	sub	objptr, ##38012
07bc4     97 58 48 FB | 	callpa	#(@LR__0697-@LR__0695)>>2,fcache_load_ptr_
07bc8                 | LR__0695
07bc8     13 39 02 F6 | 	mov	local10, local01
07bcc     01 38 66 F0 | 	shl	local10, #1
07bd0     13 39 02 F1 | 	add	local10, local01
07bd4     02 38 66 F0 | 	shl	local10, #2
07bd8     47 00 00 FF 
07bdc     7C E4 05 F1 | 	add	objptr, ##36476
07be0     F2 38 02 F1 | 	add	local10, objptr
07be4     08 38 06 F1 | 	add	local10, #8
07be8     1C 39 02 FB | 	rdlong	local10, local10
07bec     9B 38 0E F2 | 	cmp	local10, #155 wz
07bf0     47 00 00 FF 
07bf4     7C E4 85 F1 | 	sub	objptr, ##36476
07bf8     70 00 90 5D |  if_ne	jmp	#LR__0696
07bfc     13 37 02 F6 | 	mov	local09, local01
07c00     01 36 86 F1 | 	sub	local09, #1
07c04     1B 39 02 F6 | 	mov	local10, local09
07c08     01 38 66 F0 | 	shl	local10, #1
07c0c     1B 39 02 F1 | 	add	local10, local09
07c10     02 38 66 F0 | 	shl	local10, #2
07c14     47 00 00 FF 
07c18     7C E4 05 F1 | 	add	objptr, ##36476
07c1c     F2 38 02 F1 | 	add	local10, objptr
07c20     08 38 06 F1 | 	add	local10, #8
07c24     1C 39 02 FB | 	rdlong	local10, local10
07c28     11 38 0E F2 | 	cmp	local10, #17 wz
07c2c     47 00 00 FF 
07c30     7C E4 85 F1 | 	sub	objptr, ##36476
07c34     34 00 90 5D |  if_ne	jmp	#LR__0696
07c38     13 37 02 F6 | 	mov	local09, local01
07c3c     01 36 86 F1 | 	sub	local09, #1
07c40     1B 39 02 F6 | 	mov	local10, local09
07c44     01 38 66 F0 | 	shl	local10, #1
07c48     1B 39 02 F1 | 	add	local10, local09
07c4c     02 38 66 F0 | 	shl	local10, #2
07c50     47 00 00 FF 
07c54     7C E4 05 F1 | 	add	objptr, ##36476
07c58     F2 38 02 F1 | 	add	local10, objptr
07c5c     08 38 06 F1 | 	add	local10, #8
07c60     1C 25 68 FC | 	wrlong	#18, local10
07c64     47 00 00 FF 
07c68     7C E4 85 F1 | 	sub	objptr, ##36476
07c6c                 | LR__0696
07c6c     01 26 86 F1 | 	sub	local01, #1
07c70     01 26 56 F2 | 	cmps	local01, #1 wc
07c74     50 FF 9F 3D |  if_ae	jmp	#LR__0695
07c78                 | LR__0697
07c78                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07c78                 | ' return err
07c78     18 FB 01 F6 | 	mov	result1, local06
07c7c     A7 F0 03 F6 | 	mov	ptra, fp
07c80     B2 00 A0 FD | 	call	#popregs_
07c84                 | _compile_immediate_ret
07c84     2D 00 64 FD | 	ret
07c88                 | 
07c88                 | ' 
07c88                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07c88                 | ' 
07c88                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07c88                 | _compile_immediate_assign
07c88     0C 4A 05 F6 | 	mov	COUNT_, #12
07c8c     A8 00 A0 FD | 	call	#pushregs_
07c90     09 2D 02 F6 | 	mov	local04, arg01
07c94     FF 2A 06 F6 | 	mov	local03, #255
07c98     01 2E 66 F6 | 	neg	local05, #1
07c9c     00 30 06 F6 | 	mov	local06, #0
07ca0                 | ' 
07ca0                 | ' t1.result_type=result_error : t1.result.uresult=0
07ca0                 | ' i=-1: j=-1 : err=0
07ca0                 | ' 
07ca0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07ca0     02 2C 0E F2 | 	cmp	local04, #2 wz
07ca4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07ca8     35 00 00 AF 
07cac     0C E4 05 A1 |  if_e	add	objptr, ##27148
07cb0     F2 32 02 AB |  if_e	rdlong	local07, objptr
07cb4     02 00 00 AF 
07cb8     38 E4 05 A1 |  if_e	add	objptr, ##1080
07cbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
07cc0     37 00 00 AF 
07cc4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07cc8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07cc8     04 2C 0E F2 | 	cmp	local04, #4 wz
07ccc     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07cd0     2C 00 90 5D |  if_ne	jmp	#LR__0700
07cd4     35 00 00 FF 
07cd8     14 E4 05 F1 | 	add	objptr, ##27156
07cdc     F2 32 02 FB | 	rdlong	local07, objptr
07ce0     02 00 00 FF 
07ce4     30 E4 05 F1 | 	add	objptr, ##1072
07ce8     F2 06 68 FC | 	wrlong	#3, objptr
07cec     13 00 00 FF 
07cf0     38 E4 05 F1 | 	add	objptr, ##9784
07cf4     F2 04 68 FC | 	wrlong	#2, objptr
07cf8     4A 00 00 FF 
07cfc     7C E4 85 F1 | 	sub	objptr, ##38012
07d00                 | LR__0700
07d00                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07d00     05 2C 0E F2 | 	cmp	local04, #5 wz
07d04     3C 00 90 5D |  if_ne	jmp	#LR__0701
07d08     37 00 00 FF 
07d0c     44 E4 05 F1 | 	add	objptr, ##28228
07d10     F2 FA 01 FB | 	rdlong	result1, objptr
07d14     FD 32 02 F6 | 	mov	local07, result1
07d18     03 32 66 F0 | 	shl	local07, #3
07d1c     02 00 00 FF 
07d20     38 E4 85 F1 | 	sub	objptr, ##1080
07d24     F2 32 02 F1 | 	add	local07, objptr
07d28     19 33 02 FB | 	rdlong	local07, local07
07d2c     02 FA 05 F1 | 	add	result1, #2
07d30     02 00 00 FF 
07d34     38 E4 05 F1 | 	add	objptr, ##1080
07d38     F2 FA 61 FC | 	wrlong	result1, objptr
07d3c     37 00 00 FF 
07d40     44 E4 85 F1 | 	sub	objptr, ##28228
07d44                 | LR__0701
07d44     19 13 02 F6 | 	mov	arg01, local07
07d48     01 14 06 F6 | 	mov	arg02, #1
07d4c     28 F2 B1 FD | 	call	#__system__Right_S
07d50     FD 34 02 F6 | 	mov	local08, result1
07d54     18 36 B0 FD | 	call	#_expr
07d58                 | ' 
07d58                 | ' suffix2$=right$(varname2$,1)
07d58                 | ' expr()
07d58                 | ' if varnum>0 then					' try to find a variable
07d58     35 00 00 FF 
07d5c     08 E4 05 F1 | 	add	objptr, ##27144
07d60     F2 36 02 FB | 	rdlong	local09, objptr
07d64     35 00 00 FF 
07d68     08 E4 85 F1 | 	sub	objptr, ##27144
07d6c     01 36 56 F2 | 	cmps	local09, #1 wc
07d70     58 00 90 CD |  if_b	jmp	#LR__0704
07d74                 | '   for i=0 to varnum-1
07d74     00 38 06 F6 | 	mov	local10, #0
07d78     35 00 00 FF 
07d7c     08 E4 05 F1 | 	add	objptr, ##27144
07d80     F2 3A 02 FB | 	rdlong	local11, objptr
07d84     35 00 00 FF 
07d88     08 E4 85 F1 | 	sub	objptr, ##27144
07d8c                 | LR__0702
07d8c     1D 39 52 F2 | 	cmps	local10, local11 wc
07d90     38 00 90 3D |  if_ae	jmp	#LR__0703
07d94                 | '     if variables(i).name=varname2$ then j=i : exit
07d94     1C 37 02 F6 | 	mov	local09, local10
07d98     04 36 66 F0 | 	shl	local09, #4
07d9c     14 00 00 FF 
07da0     F8 E5 05 F1 | 	add	objptr, ##10744
07da4     F2 36 02 F1 | 	add	local09, objptr
07da8     1B 13 02 FB | 	rdlong	arg01, local09
07dac     19 15 02 F6 | 	mov	arg02, local07
07db0     14 00 00 FF 
07db4     F8 E5 85 F1 | 	sub	objptr, ##10744
07db8     E0 D0 B1 FD | 	call	#__system___string_cmp
07dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
07dc0     1C 2F 02 A6 |  if_e	mov	local05, local10
07dc4     01 38 06 51 |  if_ne	add	local10, #1
07dc8     C0 FF 9F 5D |  if_ne	jmp	#LR__0702
07dcc                 | LR__0703
07dcc                 | LR__0704
07dcc                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07dcc     FF FF 7F FF 
07dd0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07dd4     60 00 90 5D |  if_ne	jmp	#LR__0705
07dd8     35 00 00 FF 
07ddc     08 E4 05 F1 | 	add	objptr, ##27144
07de0     F2 36 02 FB | 	rdlong	local09, objptr
07de4     35 00 00 FF 
07de8     08 E4 85 F1 | 	sub	objptr, ##27144
07dec     02 00 00 FF 
07df0     00 36 56 F2 | 	cmps	local09, ##1024 wc
07df4     40 00 90 3D |  if_ae	jmp	#LR__0705
07df8     35 00 00 FF 
07dfc     08 E4 05 F1 | 	add	objptr, ##27144
07e00     F2 3A 02 FB | 	rdlong	local11, objptr
07e04     04 3A 66 F0 | 	shl	local11, #4
07e08     20 00 00 FF 
07e0c     10 E4 85 F1 | 	sub	objptr, ##16400
07e10     F2 3A 02 F1 | 	add	local11, objptr
07e14     1D 33 62 FC | 	wrlong	local07, local11
07e18     20 00 00 FF 
07e1c     10 E4 05 F1 | 	add	objptr, ##16400
07e20     F2 36 02 FB | 	rdlong	local09, objptr
07e24     1B 2F 02 F6 | 	mov	local05, local09
07e28     01 36 06 F1 | 	add	local09, #1
07e2c     F2 36 62 FC | 	wrlong	local09, objptr
07e30     35 00 00 FF 
07e34     08 E4 85 F1 | 	sub	objptr, ##27144
07e38                 | LR__0705
07e38                 | ' if varnum>=maxvars then
07e38     35 00 00 FF 
07e3c     08 E4 05 F1 | 	add	objptr, ##27144
07e40     F2 36 02 FB | 	rdlong	local09, objptr
07e44     35 00 00 FF 
07e48     08 E4 85 F1 | 	sub	objptr, ##27144
07e4c     02 00 00 FF 
07e50     00 36 56 F2 | 	cmps	local09, ##1024 wc
07e54     2D 30 06 36 |  if_ae	mov	local06, #45
07e58     C8 01 90 3D |  if_ae	jmp	#LR__0710
07e5c     17 27 02 F6 | 	mov	local01, local05
07e60     17 2A 06 F6 | 	mov	local03, #23
07e64     13 37 02 F6 | 	mov	local09, local01
07e68     14 3D 02 F6 | 	mov	local12, local02
07e6c     15 27 02 F6 | 	mov	local01, local03
07e70     4A 00 00 FF 
07e74     7C E4 05 F1 | 	add	objptr, ##38012
07e78     F2 3A 02 FB | 	rdlong	local11, objptr
07e7c     1D 39 02 F6 | 	mov	local10, local11
07e80     01 38 66 F0 | 	shl	local10, #1
07e84     1D 39 02 F1 | 	add	local10, local11
07e88     02 38 66 F0 | 	shl	local10, #2
07e8c     03 00 00 FF 
07e90     00 E4 85 F1 | 	sub	objptr, ##1536
07e94     F2 38 02 F1 | 	add	local10, objptr
07e98     1C 37 62 FC | 	wrlong	local09, local10
07e9c     03 00 00 FF 
07ea0     00 E4 05 F1 | 	add	objptr, ##1536
07ea4     F2 36 02 FB | 	rdlong	local09, objptr
07ea8     1B 3B 02 F6 | 	mov	local11, local09
07eac     01 3A 66 F0 | 	shl	local11, #1
07eb0     1B 3B 02 F1 | 	add	local11, local09
07eb4     02 3A 66 F0 | 	shl	local11, #2
07eb8     03 00 00 FF 
07ebc     00 E4 85 F1 | 	sub	objptr, ##1536
07ec0     F2 3A 02 F1 | 	add	local11, objptr
07ec4     04 3A 06 F1 | 	add	local11, #4
07ec8     1D 3D 62 FC | 	wrlong	local12, local11
07ecc     03 00 00 FF 
07ed0     00 E4 05 F1 | 	add	objptr, ##1536
07ed4     F2 36 02 FB | 	rdlong	local09, objptr
07ed8     1B 3D 02 F6 | 	mov	local12, local09
07edc     01 3C 66 F0 | 	shl	local12, #1
07ee0     1B 3D 02 F1 | 	add	local12, local09
07ee4     02 3C 66 F0 | 	shl	local12, #2
07ee8     03 00 00 FF 
07eec     00 E4 85 F1 | 	sub	objptr, ##1536
07ef0     F2 3C 02 F1 | 	add	local12, objptr
07ef4     08 3C 06 F1 | 	add	local12, #8
07ef8     1E 27 62 FC | 	wrlong	local01, local12
07efc     03 00 00 FF 
07f00     00 E4 05 F1 | 	add	objptr, ##1536
07f04     F2 36 02 FB | 	rdlong	local09, objptr
07f08     01 36 06 F1 | 	add	local09, #1
07f0c     F2 36 62 FC | 	wrlong	local09, objptr
07f10     4A 00 00 FF 
07f14     7C E4 85 F1 | 	sub	objptr, ##38012
07f18                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07f18                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07f18                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07f18     03 2C 0E F2 | 	cmp	local04, #3 wz
07f1c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07f20     38 00 90 5D |  if_ne	jmp	#LR__0706
07f24     4A 00 00 FF 
07f28     7C E4 05 F1 | 	add	objptr, ##38012
07f2c     F2 3C 02 FB | 	rdlong	local12, objptr
07f30     1E 27 02 F6 | 	mov	local01, local12
07f34     01 26 66 F0 | 	shl	local01, #1
07f38     1E 27 02 F1 | 	add	local01, local12
07f3c     02 26 66 F0 | 	shl	local01, #2
07f40     03 00 00 FF 
07f44     00 E4 85 F1 | 	sub	objptr, ##1536
07f48     F2 26 02 F1 | 	add	local01, objptr
07f4c     08 26 06 F1 | 	add	local01, #8
07f50     13 FD 6B FC | 	wrlong	#510, local01
07f54     47 00 00 FF 
07f58     7C E4 85 F1 | 	sub	objptr, ##36476
07f5c                 | LR__0706
07f5c                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07f5c     4A 00 00 FF 
07f60     7C E4 05 F1 | 	add	objptr, ##38012
07f64     F2 38 02 FB | 	rdlong	local10, objptr
07f68     4A 00 00 FF 
07f6c     7C E4 85 F1 | 	sub	objptr, ##38012
07f70     97 58 48 FB | 	callpa	#(@LR__0709-@LR__0707)>>2,fcache_load_ptr_
07f74                 | LR__0707
07f74     1C 3D 02 F6 | 	mov	local12, local10
07f78     01 3C 66 F0 | 	shl	local12, #1
07f7c     1C 3D 02 F1 | 	add	local12, local10
07f80     02 3C 66 F0 | 	shl	local12, #2
07f84     47 00 00 FF 
07f88     7C E4 05 F1 | 	add	objptr, ##36476
07f8c     F2 3C 02 F1 | 	add	local12, objptr
07f90     08 3C 06 F1 | 	add	local12, #8
07f94     1E 3D 02 FB | 	rdlong	local12, local12
07f98     9B 3C 0E F2 | 	cmp	local12, #155 wz
07f9c     47 00 00 FF 
07fa0     7C E4 85 F1 | 	sub	objptr, ##36476
07fa4     70 00 90 5D |  if_ne	jmp	#LR__0708
07fa8     1C 3D 02 F6 | 	mov	local12, local10
07fac     01 3C 86 F1 | 	sub	local12, #1
07fb0     1E 27 02 F6 | 	mov	local01, local12
07fb4     01 26 66 F0 | 	shl	local01, #1
07fb8     1E 27 02 F1 | 	add	local01, local12
07fbc     02 26 66 F0 | 	shl	local01, #2
07fc0     47 00 00 FF 
07fc4     7C E4 05 F1 | 	add	objptr, ##36476
07fc8     F2 26 02 F1 | 	add	local01, objptr
07fcc     08 26 06 F1 | 	add	local01, #8
07fd0     13 27 02 FB | 	rdlong	local01, local01
07fd4     11 26 0E F2 | 	cmp	local01, #17 wz
07fd8     47 00 00 FF 
07fdc     7C E4 85 F1 | 	sub	objptr, ##36476
07fe0     34 00 90 5D |  if_ne	jmp	#LR__0708
07fe4     1C 3D 02 F6 | 	mov	local12, local10
07fe8     01 3C 86 F1 | 	sub	local12, #1
07fec     1E 27 02 F6 | 	mov	local01, local12
07ff0     01 26 66 F0 | 	shl	local01, #1
07ff4     1E 27 02 F1 | 	add	local01, local12
07ff8     02 26 66 F0 | 	shl	local01, #2
07ffc     47 00 00 FF 
08000     7C E4 05 F1 | 	add	objptr, ##36476
08004     F2 26 02 F1 | 	add	local01, objptr
08008     08 26 06 F1 | 	add	local01, #8
0800c     13 25 68 FC | 	wrlong	#18, local01
08010     47 00 00 FF 
08014     7C E4 85 F1 | 	sub	objptr, ##36476
08018                 | LR__0708
08018     01 38 86 F1 | 	sub	local10, #1
0801c     01 38 56 F2 | 	cmps	local10, #1 wc
08020     50 FF 9F 3D |  if_ae	jmp	#LR__0707
08024                 | LR__0709
08024                 | LR__0710
08024                 | ' return err
08024     18 FB 01 F6 | 	mov	result1, local06
08028     A7 F0 03 F6 | 	mov	ptra, fp
0802c     B2 00 A0 FD | 	call	#popregs_
08030                 | _compile_immediate_assign_ret
08030     2D 00 64 FD | 	ret
08034                 | 
08034                 | ' 
08034                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08034                 | ' 
08034                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08034                 | _compile
08034     03 4A 05 F6 | 	mov	COUNT_, #3
08038     A8 00 A0 FD | 	call	#pushregs_
0803c     09 27 02 F6 | 	mov	local01, arg01
08040     0B 29 02 F6 | 	mov	local02, arg03
08044     47 00 00 FF 
08048     7C E4 05 F1 | 	add	objptr, ##36476
0804c     F2 26 62 FC | 	wrlong	local01, objptr
08050     04 E4 05 F1 | 	add	objptr, #4
08054     F2 14 62 FC | 	wrlong	arg02, objptr
08058     47 00 00 FF 
0805c     80 E4 85 F1 | 	sub	objptr, ##36480
08060     14 13 02 F6 | 	mov	arg01, local02
08064     01 12 06 F1 | 	add	arg01, #1
08068     13 15 02 F6 | 	mov	arg02, local01
0806c     6C F2 BF FD | 	call	#_compile_immediate
08070     FD 2A 0A F6 | 	mov	local03, result1 wz
08074                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08074                 | ' ucompiledline(0)=alinemajor
08074                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08074                 | ' 
08074                 | ' ' cont: 
08074                 | ' ' 0 - this is the first part of the line that will continue
08074                 | ' ' 1 - this is the continuation of the line
08074                 | ' ' 2 - this is the last continued line
08074                 | ' ' 3 - this is the one and only part
08074                 | ' 
08074                 | ' err=compile_immediate(cont+1,alinemajor) 
08074                 | ' if err=0 andalso alinemajor>0 then
08074     74 00 90 5D |  if_ne	jmp	#LR__0725
08078     01 26 16 F2 | 	cmp	local01, #1 wc
0807c     6C 00 90 CD |  if_b	jmp	#LR__0725
08080                 | '   if cont=3 orelse cont=2 then 
08080     03 28 0E F2 | 	cmp	local02, #3 wz
08084     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08088     60 00 90 5D |  if_ne	jmp	#LR__0724
0808c                 | '     if alinemajor >lastline then 
0808c     4A 00 00 FF 
08090     8C E4 05 F1 | 	add	objptr, ##38028
08094     F2 14 02 FB | 	rdlong	arg02, objptr
08098     4A 00 00 FF 
0809c     8C E4 85 F1 | 	sub	objptr, ##38028
080a0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080a4     0C 00 90 ED |  if_be	jmp	#LR__0720
080a8     13 13 02 F6 | 	mov	arg01, local01
080ac     64 F1 BF FD | 	call	#_add_line_at_end
080b0     38 00 90 FD | 	jmp	#LR__0723
080b4                 | LR__0720
080b4     13 13 02 F6 | 	mov	arg01, local01
080b8     28 EB BF FD | 	call	#_deleteline
080bc                 | '       deleteline(alinemajor)  
080bc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
080bc     4A 00 00 FF 
080c0     8C E4 05 F1 | 	add	objptr, ##38028
080c4     F2 14 02 FB | 	rdlong	arg02, objptr
080c8     4A 00 00 FF 
080cc     8C E4 85 F1 | 	sub	objptr, ##38028
080d0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080d4     0C 00 90 ED |  if_be	jmp	#LR__0721
080d8     13 13 02 F6 | 	mov	arg01, local01
080dc     34 F1 BF FD | 	call	#_add_line_at_end
080e0     08 00 90 FD | 	jmp	#LR__0722
080e4                 | LR__0721
080e4     13 13 02 F6 | 	mov	arg01, local01
080e8     0C EF BF FD | 	call	#_insertline
080ec                 | LR__0722
080ec                 | LR__0723
080ec                 | LR__0724
080ec                 | LR__0725
080ec                 | ' return err
080ec     15 FB 01 F6 | 	mov	result1, local03
080f0     A7 F0 03 F6 | 	mov	ptra, fp
080f4     B2 00 A0 FD | 	call	#popregs_
080f8                 | _compile_ret
080f8     2D 00 64 FD | 	ret
080fc                 | 
080fc                 | ' 
080fc                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
080fc                 | ' 
080fc                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
080fc                 | _compile_assign
080fc     03 4A 05 F6 | 	mov	COUNT_, #3
08100     A8 00 A0 FD | 	call	#pushregs_
08104     09 27 02 F6 | 	mov	local01, arg01
08108     0B 29 02 F6 | 	mov	local02, arg03
0810c     47 00 00 FF 
08110     7C E4 05 F1 | 	add	objptr, ##36476
08114     F2 26 62 FC | 	wrlong	local01, objptr
08118     04 E4 05 F1 | 	add	objptr, #4
0811c     F2 14 62 FC | 	wrlong	arg02, objptr
08120     47 00 00 FF 
08124     80 E4 85 F1 | 	sub	objptr, ##36480
08128     14 13 02 F6 | 	mov	arg01, local02
0812c     01 12 06 F1 | 	add	arg01, #1
08130     54 FB BF FD | 	call	#_compile_immediate_assign
08134     FD 2A 02 F6 | 	mov	local03, result1
08138                 | ' 
08138                 | ' ucompiledline(0)=alinemajor
08138                 | ' ucompiledline(1)=alineminor
08138                 | ' 
08138                 | ' err=compile_immediate_assign(cont+1) 
08138                 | ' if alinemajor>0 then
08138     01 26 16 F2 | 	cmp	local01, #1 wc
0813c     6C 00 90 CD |  if_b	jmp	#LR__0735
08140                 | '   if cont=3 orelse cont=2 then 
08140     03 28 0E F2 | 	cmp	local02, #3 wz
08144     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08148     60 00 90 5D |  if_ne	jmp	#LR__0734
0814c                 | '     if alinemajor >lastline then 
0814c     4A 00 00 FF 
08150     8C E4 05 F1 | 	add	objptr, ##38028
08154     F2 14 02 FB | 	rdlong	arg02, objptr
08158     4A 00 00 FF 
0815c     8C E4 85 F1 | 	sub	objptr, ##38028
08160     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08164     0C 00 90 ED |  if_be	jmp	#LR__0730
08168     13 13 02 F6 | 	mov	arg01, local01
0816c     A4 F0 BF FD | 	call	#_add_line_at_end
08170     38 00 90 FD | 	jmp	#LR__0733
08174                 | LR__0730
08174     13 13 02 F6 | 	mov	arg01, local01
08178     68 EA BF FD | 	call	#_deleteline
0817c                 | '       deleteline(alinemajor)  
0817c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0817c     4A 00 00 FF 
08180     8C E4 05 F1 | 	add	objptr, ##38028
08184     F2 14 02 FB | 	rdlong	arg02, objptr
08188     4A 00 00 FF 
0818c     8C E4 85 F1 | 	sub	objptr, ##38028
08190     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08194     0C 00 90 ED |  if_be	jmp	#LR__0731
08198     13 13 02 F6 | 	mov	arg01, local01
0819c     74 F0 BF FD | 	call	#_add_line_at_end
081a0     08 00 90 FD | 	jmp	#LR__0732
081a4                 | LR__0731
081a4     13 13 02 F6 | 	mov	arg01, local01
081a8     4C EE BF FD | 	call	#_insertline
081ac                 | LR__0732
081ac                 | LR__0733
081ac                 | LR__0734
081ac                 | LR__0735
081ac                 | ' return err
081ac     15 FB 01 F6 | 	mov	result1, local03
081b0     A7 F0 03 F6 | 	mov	ptra, fp
081b4     B2 00 A0 FD | 	call	#popregs_
081b8                 | _compile_assign_ret
081b8     2D 00 64 FD | 	ret
081bc                 | 
081bc                 | ' 
081bc                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
081bc                 | ' 
081bc                 | ' function compile_fun_2p() as ulong
081bc                 | _compile_fun_2p
081bc     01 4A 05 F6 | 	mov	COUNT_, #1
081c0     A8 00 A0 FD | 	call	#pushregs_
081c4     A8 31 B0 FD | 	call	#_expr
081c8     FD 26 02 F6 | 	mov	local01, result1
081cc                 | ' err=expr() : if err>0 then return err
081cc     01 26 16 F2 | 	cmp	local01, #1 wc
081d0     13 FB 01 36 |  if_ae	mov	result1, local01
081d4     60 00 90 3D |  if_ae	jmp	#LR__0740
081d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081d8     37 00 00 FF 
081dc     44 E4 05 F1 | 	add	objptr, ##28228
081e0     F2 26 02 FB | 	rdlong	local01, objptr
081e4     03 26 66 F0 | 	shl	local01, #3
081e8     02 00 00 FF 
081ec     38 E4 85 F1 | 	sub	objptr, ##1080
081f0     F2 26 02 F1 | 	add	local01, objptr
081f4     04 26 06 F1 | 	add	local01, #4
081f8     13 27 02 FB | 	rdlong	local01, local01
081fc     11 26 0E F2 | 	cmp	local01, #17 wz
08200     35 00 00 FF 
08204     0C E4 85 F1 | 	sub	objptr, ##27148
08208     15 FA 05 56 |  if_ne	mov	result1, #21
0820c     28 00 90 5D |  if_ne	jmp	#LR__0740
08210     37 00 00 FF 
08214     44 E4 05 F1 | 	add	objptr, ##28228
08218     F2 26 02 FB | 	rdlong	local01, objptr
0821c     01 26 06 F1 | 	add	local01, #1
08220     F2 26 62 FC | 	wrlong	local01, objptr
08224     37 00 00 FF 
08228     44 E4 85 F1 | 	sub	objptr, ##28228
0822c     40 31 B0 FD | 	call	#_expr
08230                 | ' err=expr() : if err>0 then return err
08230     01 FA 15 F2 | 	cmp	result1, #1 wc
08234                 | ' return 0
08234     00 FA 05 C6 |  if_b	mov	result1, #0
08238                 | LR__0740
08238     A7 F0 03 F6 | 	mov	ptra, fp
0823c     B2 00 A0 FD | 	call	#popregs_
08240                 | _compile_fun_2p_ret
08240     2D 00 64 FD | 	ret
08244                 | 
08244                 | ' 
08244                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08244                 | ' 
08244                 | ' function compile_fun_3p() as ulong
08244                 | _compile_fun_3p
08244     01 4A 05 F6 | 	mov	COUNT_, #1
08248     A8 00 A0 FD | 	call	#pushregs_
0824c     20 31 B0 FD | 	call	#_expr
08250     FD 26 02 F6 | 	mov	local01, result1
08254                 | ' err=expr() : if err>0 then return err
08254     01 26 16 F2 | 	cmp	local01, #1 wc
08258     13 FB 01 36 |  if_ae	mov	result1, local01
0825c     C8 00 90 3D |  if_ae	jmp	#LR__0750
08260                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08260     37 00 00 FF 
08264     44 E4 05 F1 | 	add	objptr, ##28228
08268     F2 26 02 FB | 	rdlong	local01, objptr
0826c     03 26 66 F0 | 	shl	local01, #3
08270     02 00 00 FF 
08274     38 E4 85 F1 | 	sub	objptr, ##1080
08278     F2 26 02 F1 | 	add	local01, objptr
0827c     04 26 06 F1 | 	add	local01, #4
08280     13 27 02 FB | 	rdlong	local01, local01
08284     11 26 0E F2 | 	cmp	local01, #17 wz
08288     35 00 00 FF 
0828c     0C E4 85 F1 | 	sub	objptr, ##27148
08290     15 FA 05 56 |  if_ne	mov	result1, #21
08294     90 00 90 5D |  if_ne	jmp	#LR__0750
08298     37 00 00 FF 
0829c     44 E4 05 F1 | 	add	objptr, ##28228
082a0     F2 26 02 FB | 	rdlong	local01, objptr
082a4     01 26 06 F1 | 	add	local01, #1
082a8     F2 26 62 FC | 	wrlong	local01, objptr
082ac     37 00 00 FF 
082b0     44 E4 85 F1 | 	sub	objptr, ##28228
082b4     B8 30 B0 FD | 	call	#_expr
082b8     FD 26 02 F6 | 	mov	local01, result1
082bc                 | ' err=expr() : if err>0 then return err
082bc     01 26 16 F2 | 	cmp	local01, #1 wc
082c0     13 FB 01 36 |  if_ae	mov	result1, local01
082c4     60 00 90 3D |  if_ae	jmp	#LR__0750
082c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
082c8     37 00 00 FF 
082cc     44 E4 05 F1 | 	add	objptr, ##28228
082d0     F2 26 02 FB | 	rdlong	local01, objptr
082d4     03 26 66 F0 | 	shl	local01, #3
082d8     02 00 00 FF 
082dc     38 E4 85 F1 | 	sub	objptr, ##1080
082e0     F2 26 02 F1 | 	add	local01, objptr
082e4     04 26 06 F1 | 	add	local01, #4
082e8     13 27 02 FB | 	rdlong	local01, local01
082ec     11 26 0E F2 | 	cmp	local01, #17 wz
082f0     35 00 00 FF 
082f4     0C E4 85 F1 | 	sub	objptr, ##27148
082f8     15 FA 05 56 |  if_ne	mov	result1, #21
082fc     28 00 90 5D |  if_ne	jmp	#LR__0750
08300     37 00 00 FF 
08304     44 E4 05 F1 | 	add	objptr, ##28228
08308     F2 26 02 FB | 	rdlong	local01, objptr
0830c     01 26 06 F1 | 	add	local01, #1
08310     F2 26 62 FC | 	wrlong	local01, objptr
08314     37 00 00 FF 
08318     44 E4 85 F1 | 	sub	objptr, ##28228
0831c     50 30 B0 FD | 	call	#_expr
08320                 | ' err=expr() : if err>0 then return err
08320     01 FA 15 F2 | 	cmp	result1, #1 wc
08324                 | ' return 0
08324     00 FA 05 C6 |  if_b	mov	result1, #0
08328                 | LR__0750
08328     A7 F0 03 F6 | 	mov	ptra, fp
0832c     B2 00 A0 FD | 	call	#popregs_
08330                 | _compile_fun_3p_ret
08330     2D 00 64 FD | 	ret
08334                 | 
08334                 | ' 
08334                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08334                 | ' 
08334                 | ' function compile_fun_4p() as ulong
08334                 | _compile_fun_4p
08334     01 4A 05 F6 | 	mov	COUNT_, #1
08338     A8 00 A0 FD | 	call	#pushregs_
0833c     30 30 B0 FD | 	call	#_expr
08340     FD 26 02 F6 | 	mov	local01, result1
08344                 | ' err=expr() : if err>0 then return err
08344     01 26 16 F2 | 	cmp	local01, #1 wc
08348     13 FB 01 36 |  if_ae	mov	result1, local01
0834c     30 01 90 3D |  if_ae	jmp	#LR__0760
08350                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08350     37 00 00 FF 
08354     44 E4 05 F1 | 	add	objptr, ##28228
08358     F2 26 02 FB | 	rdlong	local01, objptr
0835c     03 26 66 F0 | 	shl	local01, #3
08360     02 00 00 FF 
08364     38 E4 85 F1 | 	sub	objptr, ##1080
08368     F2 26 02 F1 | 	add	local01, objptr
0836c     04 26 06 F1 | 	add	local01, #4
08370     13 27 02 FB | 	rdlong	local01, local01
08374     11 26 0E F2 | 	cmp	local01, #17 wz
08378     35 00 00 FF 
0837c     0C E4 85 F1 | 	sub	objptr, ##27148
08380     15 FA 05 56 |  if_ne	mov	result1, #21
08384     F8 00 90 5D |  if_ne	jmp	#LR__0760
08388     37 00 00 FF 
0838c     44 E4 05 F1 | 	add	objptr, ##28228
08390     F2 26 02 FB | 	rdlong	local01, objptr
08394     01 26 06 F1 | 	add	local01, #1
08398     F2 26 62 FC | 	wrlong	local01, objptr
0839c     37 00 00 FF 
083a0     44 E4 85 F1 | 	sub	objptr, ##28228
083a4     C8 2F B0 FD | 	call	#_expr
083a8     FD 26 02 F6 | 	mov	local01, result1
083ac                 | ' err=expr() : if err>0 then return err
083ac     01 26 16 F2 | 	cmp	local01, #1 wc
083b0     13 FB 01 36 |  if_ae	mov	result1, local01
083b4     C8 00 90 3D |  if_ae	jmp	#LR__0760
083b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
083b8     37 00 00 FF 
083bc     44 E4 05 F1 | 	add	objptr, ##28228
083c0     F2 26 02 FB | 	rdlong	local01, objptr
083c4     03 26 66 F0 | 	shl	local01, #3
083c8     02 00 00 FF 
083cc     38 E4 85 F1 | 	sub	objptr, ##1080
083d0     F2 26 02 F1 | 	add	local01, objptr
083d4     04 26 06 F1 | 	add	local01, #4
083d8     13 27 02 FB | 	rdlong	local01, local01
083dc     11 26 0E F2 | 	cmp	local01, #17 wz
083e0     35 00 00 FF 
083e4     0C E4 85 F1 | 	sub	objptr, ##27148
083e8     15 FA 05 56 |  if_ne	mov	result1, #21
083ec     90 00 90 5D |  if_ne	jmp	#LR__0760
083f0     37 00 00 FF 
083f4     44 E4 05 F1 | 	add	objptr, ##28228
083f8     F2 26 02 FB | 	rdlong	local01, objptr
083fc     01 26 06 F1 | 	add	local01, #1
08400     F2 26 62 FC | 	wrlong	local01, objptr
08404     37 00 00 FF 
08408     44 E4 85 F1 | 	sub	objptr, ##28228
0840c     60 2F B0 FD | 	call	#_expr
08410     FD 26 02 F6 | 	mov	local01, result1
08414                 | ' err=expr() : if err>0 then return err
08414     01 26 16 F2 | 	cmp	local01, #1 wc
08418     13 FB 01 36 |  if_ae	mov	result1, local01
0841c     60 00 90 3D |  if_ae	jmp	#LR__0760
08420                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08420     37 00 00 FF 
08424     44 E4 05 F1 | 	add	objptr, ##28228
08428     F2 26 02 FB | 	rdlong	local01, objptr
0842c     03 26 66 F0 | 	shl	local01, #3
08430     02 00 00 FF 
08434     38 E4 85 F1 | 	sub	objptr, ##1080
08438     F2 26 02 F1 | 	add	local01, objptr
0843c     04 26 06 F1 | 	add	local01, #4
08440     13 27 02 FB | 	rdlong	local01, local01
08444     11 26 0E F2 | 	cmp	local01, #17 wz
08448     35 00 00 FF 
0844c     0C E4 85 F1 | 	sub	objptr, ##27148
08450     15 FA 05 56 |  if_ne	mov	result1, #21
08454     28 00 90 5D |  if_ne	jmp	#LR__0760
08458     37 00 00 FF 
0845c     44 E4 05 F1 | 	add	objptr, ##28228
08460     F2 26 02 FB | 	rdlong	local01, objptr
08464     01 26 06 F1 | 	add	local01, #1
08468     F2 26 62 FC | 	wrlong	local01, objptr
0846c     37 00 00 FF 
08470     44 E4 85 F1 | 	sub	objptr, ##28228
08474     F8 2E B0 FD | 	call	#_expr
08478                 | ' err=expr() : if err>0 then return err
08478     01 FA 15 F2 | 	cmp	result1, #1 wc
0847c                 | ' return 0
0847c     00 FA 05 C6 |  if_b	mov	result1, #0
08480                 | LR__0760
08480     A7 F0 03 F6 | 	mov	ptra, fp
08484     B2 00 A0 FD | 	call	#popregs_
08488                 | _compile_fun_4p_ret
08488     2D 00 64 FD | 	ret
0848c                 | 
0848c                 | ' 
0848c                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
0848c                 | ' 
0848c                 | ' function compile_fun_varp() as ulong,ulong 
0848c                 | _compile_fun_varp
0848c     03 4A 05 F6 | 	mov	COUNT_, #3
08490     A8 00 A0 FD | 	call	#pushregs_
08494     00 26 06 F6 | 	mov	local01, #0
08498                 | ' 
08498                 | ' i=0 : err=0
08498                 | ' if lparts(ct).token<>token_end then
08498     37 00 00 FF 
0849c     44 E4 05 F1 | 	add	objptr, ##28228
084a0     F2 28 02 FB | 	rdlong	local02, objptr
084a4     03 28 66 F0 | 	shl	local02, #3
084a8     02 00 00 FF 
084ac     38 E4 85 F1 | 	sub	objptr, ##1080
084b0     F2 28 02 F1 | 	add	local02, objptr
084b4     04 28 06 F1 | 	add	local02, #4
084b8     14 29 02 FB | 	rdlong	local02, local02
084bc     FE 29 0E F2 | 	cmp	local02, #510 wz
084c0     35 00 00 FF 
084c4     0C E4 85 F1 | 	sub	objptr, ##27148
084c8     88 00 90 AD |  if_e	jmp	#LR__0771
084cc                 | '   do
084cc                 | LR__0770
084cc     A0 2E B0 FD | 	call	#_expr
084d0     01 26 06 F1 | 	add	local01, #1
084d4                 | '     expr()
084d4                 | '     i+=1
084d4                 | '     if lparts(ct).token=token_comma then ct+=1
084d4     37 00 00 FF 
084d8     44 E4 05 F1 | 	add	objptr, ##28228
084dc     F2 28 02 FB | 	rdlong	local02, objptr
084e0     03 28 66 F0 | 	shl	local02, #3
084e4     02 00 00 FF 
084e8     38 E4 85 F1 | 	sub	objptr, ##1080
084ec     F2 28 02 F1 | 	add	local02, objptr
084f0     04 28 06 F1 | 	add	local02, #4
084f4     14 29 02 FB | 	rdlong	local02, local02
084f8     11 28 0E F2 | 	cmp	local02, #17 wz
084fc     35 00 00 FF 
08500     0C E4 85 F1 | 	sub	objptr, ##27148
08504     37 00 00 AF 
08508     44 E4 05 A1 |  if_e	add	objptr, ##28228
0850c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08510     01 2A 06 A1 |  if_e	add	local03, #1
08514     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08518     37 00 00 AF 
0851c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08520                 | '     if lparts(ct).token=token_end then exit loop
08520     37 00 00 FF 
08524     44 E4 05 F1 | 	add	objptr, ##28228
08528     F2 28 02 FB | 	rdlong	local02, objptr
0852c     03 28 66 F0 | 	shl	local02, #3
08530     02 00 00 FF 
08534     38 E4 85 F1 | 	sub	objptr, ##1080
08538     F2 28 02 F1 | 	add	local02, objptr
0853c     04 28 06 F1 | 	add	local02, #4
08540     14 29 02 FB | 	rdlong	local02, local02
08544     FE 29 0E F2 | 	cmp	local02, #510 wz
08548     35 00 00 FF 
0854c     0C E4 85 F1 | 	sub	objptr, ##27148
08550     78 FF 9F 5D |  if_ne	jmp	#LR__0770
08554                 | LR__0771
08554                 | ' return i,err
08554     13 FB 01 F6 | 	mov	result1, local01
08558     00 FC 05 F6 | 	mov	result2, #0
0855c     A7 F0 03 F6 | 	mov	ptra, fp
08560     B2 00 A0 FD | 	call	#popregs_
08564                 | _compile_fun_varp_ret
08564     2D 00 64 FD | 	ret
08568                 | 
08568                 | ' 
08568                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08568                 | ' 
08568                 | ' function compile_read() as ulong,ulong 
08568                 | _compile_read
08568     04 4A 05 F6 | 	mov	COUNT_, #4
0856c     A8 00 A0 FD | 	call	#pushregs_
08570     00 26 06 F6 | 	mov	local01, #0
08574                 | ' 
08574                 | ' i=0 : err=0
08574                 | ' if lparts(ct).token<>token_end then
08574     37 00 00 FF 
08578     44 E4 05 F1 | 	add	objptr, ##28228
0857c     F2 28 02 FB | 	rdlong	local02, objptr
08580     03 28 66 F0 | 	shl	local02, #3
08584     02 00 00 FF 
08588     38 E4 85 F1 | 	sub	objptr, ##1080
0858c     F2 28 02 F1 | 	add	local02, objptr
08590     04 28 06 F1 | 	add	local02, #4
08594     14 29 02 FB | 	rdlong	local02, local02
08598     FE 29 0E F2 | 	cmp	local02, #510 wz
0859c     35 00 00 FF 
085a0     0C E4 85 F1 | 	sub	objptr, ##27148
085a4     98 00 90 AD |  if_e	jmp	#LR__0781
085a8                 | '   do
085a8                 | LR__0780
085a8     30 2A B0 FD | 	call	#_getaddr
085ac     FD 2A 02 F6 | 	mov	local03, result1
085b0     37 00 00 FF 
085b4     44 E4 05 F1 | 	add	objptr, ##28228
085b8     F2 28 02 FB | 	rdlong	local02, objptr
085bc     01 28 06 F1 | 	add	local02, #1
085c0     F2 28 62 FC | 	wrlong	local02, objptr
085c4     01 26 06 F1 | 	add	local01, #1
085c8                 | '     err=getaddr() :ct+=1
085c8                 | '     i+=1 
085c8                 | '     if lparts(ct).token=token_comma then ct+=1 
085c8     03 28 66 F0 | 	shl	local02, #3
085cc     02 00 00 FF 
085d0     38 E4 85 F1 | 	sub	objptr, ##1080
085d4     F2 28 02 F1 | 	add	local02, objptr
085d8     04 28 06 F1 | 	add	local02, #4
085dc     14 29 02 FB | 	rdlong	local02, local02
085e0     11 28 0E F2 | 	cmp	local02, #17 wz
085e4     35 00 00 FF 
085e8     0C E4 85 F1 | 	sub	objptr, ##27148
085ec     37 00 00 AF 
085f0     44 E4 05 A1 |  if_e	add	objptr, ##28228
085f4     F2 2C 02 AB |  if_e	rdlong	local04, objptr
085f8     01 2C 06 A1 |  if_e	add	local04, #1
085fc     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08600     37 00 00 AF 
08604     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08608                 | '     if lparts(ct).token=token_end then exit loop
08608     37 00 00 FF 
0860c     44 E4 05 F1 | 	add	objptr, ##28228
08610     F2 28 02 FB | 	rdlong	local02, objptr
08614     03 28 66 F0 | 	shl	local02, #3
08618     02 00 00 FF 
0861c     38 E4 85 F1 | 	sub	objptr, ##1080
08620     F2 28 02 F1 | 	add	local02, objptr
08624     04 28 06 F1 | 	add	local02, #4
08628     14 29 02 FB | 	rdlong	local02, local02
0862c     FE 29 0E F2 | 	cmp	local02, #510 wz
08630     35 00 00 FF 
08634     0C E4 85 F1 | 	sub	objptr, ##27148
08638     08 00 90 AD |  if_e	jmp	#LR__0782
0863c     68 FF 9F FD | 	jmp	#LR__0780
08640                 | LR__0781
08640     36 2A 06 F6 | 	mov	local03, #54
08644                 | LR__0782
08644                 | ' return i,err
08644     13 FB 01 F6 | 	mov	result1, local01
08648     15 FD 01 F6 | 	mov	result2, local03
0864c     A7 F0 03 F6 | 	mov	ptra, fp
08650     B2 00 A0 FD | 	call	#popregs_
08654                 | _compile_read_ret
08654     2D 00 64 FD | 	ret
08658                 | 
08658                 | ' 
08658                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08658                 | ' 
08658                 | ' function compile_input() as ulong,ulong 
08658                 | _compile_input
08658     0F 4A 05 F6 | 	mov	COUNT_, #15
0865c     A8 00 A0 FD | 	call	#pushregs_
08660                 | ' 
08660                 | ' if lparts(ct).token=token_string then
08660     37 00 00 FF 
08664     44 E4 05 F1 | 	add	objptr, ##28228
08668     F2 16 02 FB | 	rdlong	arg03, objptr
0866c     03 16 66 F0 | 	shl	arg03, #3
08670     02 00 00 FF 
08674     38 E4 85 F1 | 	sub	objptr, ##1080
08678     F2 16 02 F1 | 	add	arg03, objptr
0867c     04 16 06 F1 | 	add	arg03, #4
08680     0B FD 01 FB | 	rdlong	result2, arg03
08684     01 00 00 FF 
08688     03 FC 0D F2 | 	cmp	result2, ##515 wz
0868c     35 00 00 FF 
08690     0C E4 85 F1 | 	sub	objptr, ##27148
08694     38 06 90 5D |  if_ne	jmp	#LR__0797
08698     37 00 00 FF 
0869c     44 E4 05 F1 | 	add	objptr, ##28228
086a0     F2 14 02 FB | 	rdlong	arg02, objptr
086a4     03 14 66 F0 | 	shl	arg02, #3
086a8     02 00 00 FF 
086ac     38 E4 85 F1 | 	sub	objptr, ##1080
086b0     F2 14 02 F1 | 	add	arg02, objptr
086b4     0A 13 02 FB | 	rdlong	arg01, arg02
086b8     35 00 00 FF 
086bc     0C E4 85 F1 | 	sub	objptr, ##27148
086c0     09 2D 02 F6 | 	mov	local04, arg01
086c4     97 06 48 FB | 	callpa	#(@LR__0791-@LR__0790)>>2,fcache_load_ptr_
086c8                 | LR__0790
086c8     16 FB C9 FA | 	rdbyte	result1, local04 wz
086cc     01 2C 06 51 |  if_ne	add	local04, #1
086d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0790
086d4                 | LR__0791
086d4     09 2D 82 F1 | 	sub	local04, arg01
086d8     16 FB 01 F6 | 	mov	result1, local04
086dc     52 00 00 FF 
086e0     2C E4 05 F1 | 	add	objptr, ##42028
086e4     F2 FA 61 FC | 	wrlong	result1, objptr
086e8     58 E4 85 F1 | 	sub	objptr, #88
086ec     F2 12 02 FB | 	rdlong	arg01, objptr
086f0     FD 12 82 F1 | 	sub	arg01, result1
086f4     04 12 86 F1 | 	sub	arg01, #4
086f8     03 12 26 F5 | 	andn	arg01, #3
086fc     F2 12 62 FC | 	wrlong	arg01, objptr
08700     58 E4 05 F1 | 	add	objptr, #88
08704     F2 14 02 FB | 	rdlong	arg02, objptr
08708     52 00 00 FF 
0870c     2C E4 85 F1 | 	sub	objptr, ##42028
08710     5C 8F B1 FD | 	call	#_pslpoke
08714                 | '   pslpoke memtop,l
08714                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08714     01 2E 06 F6 | 	mov	local05, #1
08718     52 00 00 FF 
0871c     2C E4 05 F1 | 	add	objptr, ##42028
08720     F2 30 02 FB | 	rdlong	local06, objptr
08724     52 00 00 FF 
08728     2C E4 85 F1 | 	sub	objptr, ##42028
0872c     01 30 06 F1 | 	add	local06, #1
08730                 | LR__0792
08730     18 2F 52 F2 | 	cmps	local05, local06 wc
08734     5C 00 90 3D |  if_ae	jmp	#LR__0793
08738     51 00 00 FF 
0873c     D4 E5 05 F1 | 	add	objptr, ##41940
08740     F2 32 02 FB | 	rdlong	local07, objptr
08744     03 32 06 F1 | 	add	local07, #3
08748     17 33 02 F1 | 	add	local07, local05
0874c     1A 00 00 FF 
08750     90 E5 85 F1 | 	sub	objptr, ##13712
08754     F2 14 02 FB | 	rdlong	arg02, objptr
08758     03 14 66 F0 | 	shl	arg02, #3
0875c     02 00 00 FF 
08760     38 E4 85 F1 | 	sub	objptr, ##1080
08764     F2 14 02 F1 | 	add	arg02, objptr
08768     0A 13 02 FB | 	rdlong	arg01, arg02
0876c     17 15 02 F6 | 	mov	arg02, local05
08770     01 16 06 F6 | 	mov	arg03, #1
08774     35 00 00 FF 
08778     0C E4 85 F1 | 	sub	objptr, ##27148
0877c     88 E8 B1 FD | 	call	#__system__Mid_S
08780     FD 14 C2 FA | 	rdbyte	arg02, result1
08784     19 13 02 F6 | 	mov	arg01, local07
08788     74 8F B1 FD | 	call	#_pspoke
0878c     01 2E 06 F1 | 	add	local05, #1
08790     9C FF 9F FD | 	jmp	#LR__0792
08794                 | LR__0793
08794     51 00 00 FF 
08798     D4 E5 05 F1 | 	add	objptr, ##41940
0879c     F2 26 02 FB | 	rdlong	local01, objptr
087a0     2B 2A 06 F6 | 	mov	local03, #43
087a4     13 35 02 F6 | 	mov	local08, local01
087a8     14 33 02 F6 | 	mov	local07, local02
087ac     15 37 02 F6 | 	mov	local09, local03
087b0     07 00 00 FF 
087b4     58 E5 85 F1 | 	sub	objptr, ##3928
087b8     F2 30 02 FB | 	rdlong	local06, objptr
087bc     18 2F 02 F6 | 	mov	local05, local06
087c0     01 2E 66 F0 | 	shl	local05, #1
087c4     18 2F 02 F1 | 	add	local05, local06
087c8     02 2E 66 F0 | 	shl	local05, #2
087cc     03 00 00 FF 
087d0     00 E4 85 F1 | 	sub	objptr, ##1536
087d4     F2 2E 02 F1 | 	add	local05, objptr
087d8     17 35 62 FC | 	wrlong	local08, local05
087dc     03 00 00 FF 
087e0     00 E4 05 F1 | 	add	objptr, ##1536
087e4     F2 34 02 FB | 	rdlong	local08, objptr
087e8     1A 31 02 F6 | 	mov	local06, local08
087ec     01 30 66 F0 | 	shl	local06, #1
087f0     1A 31 02 F1 | 	add	local06, local08
087f4     02 30 66 F0 | 	shl	local06, #2
087f8     03 00 00 FF 
087fc     00 E4 85 F1 | 	sub	objptr, ##1536
08800     F2 30 02 F1 | 	add	local06, objptr
08804     04 30 06 F1 | 	add	local06, #4
08808     18 33 62 FC | 	wrlong	local07, local06
0880c     03 00 00 FF 
08810     00 E4 05 F1 | 	add	objptr, ##1536
08814     F2 34 02 FB | 	rdlong	local08, objptr
08818     1A 33 02 F6 | 	mov	local07, local08
0881c     01 32 66 F0 | 	shl	local07, #1
08820     1A 33 02 F1 | 	add	local07, local08
08824     02 32 66 F0 | 	shl	local07, #2
08828     03 00 00 FF 
0882c     00 E4 85 F1 | 	sub	objptr, ##1536
08830     F2 32 02 F1 | 	add	local07, objptr
08834     08 32 06 F1 | 	add	local07, #8
08838     19 37 62 FC | 	wrlong	local09, local07
0883c     03 00 00 FF 
08840     00 E4 05 F1 | 	add	objptr, ##1536
08844     F2 34 02 FB | 	rdlong	local08, objptr
08848     01 34 06 F1 | 	add	local08, #1
0884c     F2 34 62 FC | 	wrlong	local08, objptr
08850     13 00 00 FF 
08854     38 E4 85 F1 | 	sub	objptr, ##9784
08858     F2 34 02 FB | 	rdlong	local08, objptr
0885c     01 34 06 F1 | 	add	local08, #1
08860     F2 34 62 FC | 	wrlong	local08, objptr
08864                 | '   t1.result.uresult=memtop
08864                 | '   t1.result_type=result_string2  
08864                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08864                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08864     03 34 66 F0 | 	shl	local08, #3
08868     02 00 00 FF 
0886c     38 E4 85 F1 | 	sub	objptr, ##1080
08870     F2 34 02 F1 | 	add	local08, objptr
08874     04 34 06 F1 | 	add	local08, #4
08878     1A 35 02 FB | 	rdlong	local08, local08
0887c     11 34 0E F2 | 	cmp	local08, #17 wz
08880     35 00 00 FF 
08884     0C E4 85 F1 | 	sub	objptr, ##27148
08888     60 01 90 5D |  if_ne	jmp	#LR__0794
0888c     21 2A 06 F6 | 	mov	local03, #33
08890     13 35 02 F6 | 	mov	local08, local01
08894     14 33 02 F6 | 	mov	local07, local02
08898     15 39 02 F6 | 	mov	local10, local03
0889c     4A 00 00 FF 
088a0     7C E4 05 F1 | 	add	objptr, ##38012
088a4     F2 3A 02 FB | 	rdlong	local11, objptr
088a8     1D 3D 02 F6 | 	mov	local12, local11
088ac     01 3C 66 F0 | 	shl	local12, #1
088b0     1D 3D 02 F1 | 	add	local12, local11
088b4     02 3C 66 F0 | 	shl	local12, #2
088b8     03 00 00 FF 
088bc     00 E4 85 F1 | 	sub	objptr, ##1536
088c0     F2 3C 02 F1 | 	add	local12, objptr
088c4     1E 35 62 FC | 	wrlong	local08, local12
088c8     03 00 00 FF 
088cc     00 E4 05 F1 | 	add	objptr, ##1536
088d0     F2 3E 02 FB | 	rdlong	local13, objptr
088d4     1F 35 02 F6 | 	mov	local08, local13
088d8     01 34 66 F0 | 	shl	local08, #1
088dc     1F 35 02 F1 | 	add	local08, local13
088e0     02 34 66 F0 | 	shl	local08, #2
088e4     03 00 00 FF 
088e8     00 E4 85 F1 | 	sub	objptr, ##1536
088ec     F2 34 02 F1 | 	add	local08, objptr
088f0     04 34 06 F1 | 	add	local08, #4
088f4     1A 33 62 FC | 	wrlong	local07, local08
088f8     03 00 00 FF 
088fc     00 E4 05 F1 | 	add	objptr, ##1536
08900     F2 34 02 FB | 	rdlong	local08, objptr
08904     1A 41 02 F6 | 	mov	local14, local08
08908     01 40 66 F0 | 	shl	local14, #1
0890c     1A 41 02 F1 | 	add	local14, local08
08910     02 40 66 F0 | 	shl	local14, #2
08914     03 00 00 FF 
08918     00 E4 85 F1 | 	sub	objptr, ##1536
0891c     F2 40 02 F1 | 	add	local14, objptr
08920     08 40 06 F1 | 	add	local14, #8
08924     20 39 62 FC | 	wrlong	local10, local14
08928     03 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##1536
08930     F2 34 02 FB | 	rdlong	local08, objptr
08934     01 34 06 F1 | 	add	local08, #1
08938     F2 34 62 FC | 	wrlong	local08, objptr
0893c     44 2A 06 F6 | 	mov	local03, #68
08940     13 35 02 F6 | 	mov	local08, local01
08944     14 33 02 F6 | 	mov	local07, local02
08948     15 39 02 F6 | 	mov	local10, local03
0894c     F2 40 02 FB | 	rdlong	local14, objptr
08950     20 3F 02 F6 | 	mov	local13, local14
08954     01 3E 66 F0 | 	shl	local13, #1
08958     20 3F 02 F1 | 	add	local13, local14
0895c     02 3E 66 F0 | 	shl	local13, #2
08960     03 00 00 FF 
08964     00 E4 85 F1 | 	sub	objptr, ##1536
08968     F2 3E 02 F1 | 	add	local13, objptr
0896c     1F 35 62 FC | 	wrlong	local08, local13
08970     03 00 00 FF 
08974     00 E4 05 F1 | 	add	objptr, ##1536
08978     F2 40 02 FB | 	rdlong	local14, objptr
0897c     20 3F 02 F6 | 	mov	local13, local14
08980     01 3E 66 F0 | 	shl	local13, #1
08984     20 3F 02 F1 | 	add	local13, local14
08988     02 3E 66 F0 | 	shl	local13, #2
0898c     03 00 00 FF 
08990     00 E4 85 F1 | 	sub	objptr, ##1536
08994     F2 3E 02 F1 | 	add	local13, objptr
08998     04 3E 06 F1 | 	add	local13, #4
0899c     1F 33 62 FC | 	wrlong	local07, local13
089a0     03 00 00 FF 
089a4     00 E4 05 F1 | 	add	objptr, ##1536
089a8     F2 3E 02 FB | 	rdlong	local13, objptr
089ac     1F 41 02 F6 | 	mov	local14, local13
089b0     01 40 66 F0 | 	shl	local14, #1
089b4     1F 41 02 F1 | 	add	local14, local13
089b8     02 40 66 F0 | 	shl	local14, #2
089bc     03 00 00 FF 
089c0     00 E4 85 F1 | 	sub	objptr, ##1536
089c4     F2 40 02 F1 | 	add	local14, objptr
089c8     08 40 06 F1 | 	add	local14, #8
089cc     20 39 62 FC | 	wrlong	local10, local14
089d0     03 00 00 FF 
089d4     00 E4 05 F1 | 	add	objptr, ##1536
089d8     F2 34 02 FB | 	rdlong	local08, objptr
089dc     01 34 06 F1 | 	add	local08, #1
089e0     F2 34 62 FC | 	wrlong	local08, objptr
089e4     4A 00 00 FF 
089e8     7C E4 85 F1 | 	sub	objptr, ##38012
089ec                 | LR__0794
089ec                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
089ec     37 00 00 FF 
089f0     44 E4 05 F1 | 	add	objptr, ##28228
089f4     F2 34 02 FB | 	rdlong	local08, objptr
089f8     03 34 66 F0 | 	shl	local08, #3
089fc     02 00 00 FF 
08a00     38 E4 85 F1 | 	sub	objptr, ##1080
08a04     F2 34 02 F1 | 	add	local08, objptr
08a08     04 34 06 F1 | 	add	local08, #4
08a0c     1A 41 02 FB | 	rdlong	local14, local08
08a10     12 40 0E F2 | 	cmp	local14, #18 wz
08a14     35 00 00 FF 
08a18     0C E4 85 F1 | 	sub	objptr, ##27148
08a1c     60 01 90 5D |  if_ne	jmp	#LR__0795
08a20     22 2A 06 F6 | 	mov	local03, #34
08a24     13 35 02 F6 | 	mov	local08, local01
08a28     14 33 02 F6 | 	mov	local07, local02
08a2c     15 39 02 F6 | 	mov	local10, local03
08a30     4A 00 00 FF 
08a34     7C E4 05 F1 | 	add	objptr, ##38012
08a38     F2 40 02 FB | 	rdlong	local14, objptr
08a3c     20 3F 02 F6 | 	mov	local13, local14
08a40     01 3E 66 F0 | 	shl	local13, #1
08a44     20 3F 02 F1 | 	add	local13, local14
08a48     02 3E 66 F0 | 	shl	local13, #2
08a4c     03 00 00 FF 
08a50     00 E4 85 F1 | 	sub	objptr, ##1536
08a54     F2 3E 02 F1 | 	add	local13, objptr
08a58     1F 35 62 FC | 	wrlong	local08, local13
08a5c     03 00 00 FF 
08a60     00 E4 05 F1 | 	add	objptr, ##1536
08a64     F2 40 02 FB | 	rdlong	local14, objptr
08a68     20 35 02 F6 | 	mov	local08, local14
08a6c     01 34 66 F0 | 	shl	local08, #1
08a70     20 35 02 F1 | 	add	local08, local14
08a74     02 34 66 F0 | 	shl	local08, #2
08a78     03 00 00 FF 
08a7c     00 E4 85 F1 | 	sub	objptr, ##1536
08a80     F2 34 02 F1 | 	add	local08, objptr
08a84     04 34 06 F1 | 	add	local08, #4
08a88     1A 33 62 FC | 	wrlong	local07, local08
08a8c     03 00 00 FF 
08a90     00 E4 05 F1 | 	add	objptr, ##1536
08a94     F2 34 02 FB | 	rdlong	local08, objptr
08a98     1A 41 02 F6 | 	mov	local14, local08
08a9c     01 40 66 F0 | 	shl	local14, #1
08aa0     1A 41 02 F1 | 	add	local14, local08
08aa4     02 40 66 F0 | 	shl	local14, #2
08aa8     03 00 00 FF 
08aac     00 E4 85 F1 | 	sub	objptr, ##1536
08ab0     F2 40 02 F1 | 	add	local14, objptr
08ab4     08 40 06 F1 | 	add	local14, #8
08ab8     20 39 62 FC | 	wrlong	local10, local14
08abc     03 00 00 FF 
08ac0     00 E4 05 F1 | 	add	objptr, ##1536
08ac4     F2 34 02 FB | 	rdlong	local08, objptr
08ac8     01 34 06 F1 | 	add	local08, #1
08acc     F2 34 62 FC | 	wrlong	local08, objptr
08ad0     44 2A 06 F6 | 	mov	local03, #68
08ad4     13 35 02 F6 | 	mov	local08, local01
08ad8     14 33 02 F6 | 	mov	local07, local02
08adc     15 39 02 F6 | 	mov	local10, local03
08ae0     F2 40 02 FB | 	rdlong	local14, objptr
08ae4     20 3F 02 F6 | 	mov	local13, local14
08ae8     01 3E 66 F0 | 	shl	local13, #1
08aec     20 3F 02 F1 | 	add	local13, local14
08af0     02 3E 66 F0 | 	shl	local13, #2
08af4     03 00 00 FF 
08af8     00 E4 85 F1 | 	sub	objptr, ##1536
08afc     F2 3E 02 F1 | 	add	local13, objptr
08b00     1F 35 62 FC | 	wrlong	local08, local13
08b04     03 00 00 FF 
08b08     00 E4 05 F1 | 	add	objptr, ##1536
08b0c     F2 40 02 FB | 	rdlong	local14, objptr
08b10     20 3F 02 F6 | 	mov	local13, local14
08b14     01 3E 66 F0 | 	shl	local13, #1
08b18     20 3F 02 F1 | 	add	local13, local14
08b1c     02 3E 66 F0 | 	shl	local13, #2
08b20     03 00 00 FF 
08b24     00 E4 85 F1 | 	sub	objptr, ##1536
08b28     F2 3E 02 F1 | 	add	local13, objptr
08b2c     04 3E 06 F1 | 	add	local13, #4
08b30     1F 33 62 FC | 	wrlong	local07, local13
08b34     03 00 00 FF 
08b38     00 E4 05 F1 | 	add	objptr, ##1536
08b3c     F2 3E 02 FB | 	rdlong	local13, objptr
08b40     1F 41 02 F6 | 	mov	local14, local13
08b44     01 40 66 F0 | 	shl	local14, #1
08b48     1F 41 02 F1 | 	add	local14, local13
08b4c     02 40 66 F0 | 	shl	local14, #2
08b50     03 00 00 FF 
08b54     00 E4 85 F1 | 	sub	objptr, ##1536
08b58     F2 40 02 F1 | 	add	local14, objptr
08b5c     08 40 06 F1 | 	add	local14, #8
08b60     20 39 62 FC | 	wrlong	local10, local14
08b64     03 00 00 FF 
08b68     00 E4 05 F1 | 	add	objptr, ##1536
08b6c     F2 34 02 FB | 	rdlong	local08, objptr
08b70     01 34 06 F1 | 	add	local08, #1
08b74     F2 34 62 FC | 	wrlong	local08, objptr
08b78     4A 00 00 FF 
08b7c     7C E4 85 F1 | 	sub	objptr, ##38012
08b80                 | LR__0795
08b80                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08b80     37 00 00 FF 
08b84     44 E4 05 F1 | 	add	objptr, ##28228
08b88     F2 34 02 FB | 	rdlong	local08, objptr
08b8c     03 34 66 F0 | 	shl	local08, #3
08b90     02 00 00 FF 
08b94     38 E4 85 F1 | 	sub	objptr, ##1080
08b98     F2 34 02 F1 | 	add	local08, objptr
08b9c     04 34 06 F1 | 	add	local08, #4
08ba0     1A 41 02 FB | 	rdlong	local14, local08
08ba4     12 40 0E F2 | 	cmp	local14, #18 wz
08ba8     35 00 00 FF 
08bac     0C E4 85 F1 | 	sub	objptr, ##27148
08bb0     00 01 90 AD |  if_e	jmp	#LR__0796
08bb4     37 00 00 FF 
08bb8     44 E4 05 F1 | 	add	objptr, ##28228
08bbc     F2 34 02 FB | 	rdlong	local08, objptr
08bc0     03 34 66 F0 | 	shl	local08, #3
08bc4     02 00 00 FF 
08bc8     38 E4 85 F1 | 	sub	objptr, ##1080
08bcc     F2 34 02 F1 | 	add	local08, objptr
08bd0     04 34 06 F1 | 	add	local08, #4
08bd4     1A 41 02 FB | 	rdlong	local14, local08
08bd8     11 40 0E F2 | 	cmp	local14, #17 wz
08bdc     35 00 00 FF 
08be0     0C E4 85 F1 | 	sub	objptr, ##27148
08be4     CC 00 90 AD |  if_e	jmp	#LR__0796
08be8     44 2A 06 F6 | 	mov	local03, #68
08bec     13 35 02 F6 | 	mov	local08, local01
08bf0     14 33 02 F6 | 	mov	local07, local02
08bf4     15 39 02 F6 | 	mov	local10, local03
08bf8     4A 00 00 FF 
08bfc     7C E4 05 F1 | 	add	objptr, ##38012
08c00     F2 40 02 FB | 	rdlong	local14, objptr
08c04     20 3F 02 F6 | 	mov	local13, local14
08c08     01 3E 66 F0 | 	shl	local13, #1
08c0c     20 3F 02 F1 | 	add	local13, local14
08c10     02 3E 66 F0 | 	shl	local13, #2
08c14     03 00 00 FF 
08c18     00 E4 85 F1 | 	sub	objptr, ##1536
08c1c     F2 3E 02 F1 | 	add	local13, objptr
08c20     1F 35 62 FC | 	wrlong	local08, local13
08c24     03 00 00 FF 
08c28     00 E4 05 F1 | 	add	objptr, ##1536
08c2c     F2 40 02 FB | 	rdlong	local14, objptr
08c30     20 3F 02 F6 | 	mov	local13, local14
08c34     01 3E 66 F0 | 	shl	local13, #1
08c38     20 3F 02 F1 | 	add	local13, local14
08c3c     02 3E 66 F0 | 	shl	local13, #2
08c40     03 00 00 FF 
08c44     00 E4 85 F1 | 	sub	objptr, ##1536
08c48     F2 3E 02 F1 | 	add	local13, objptr
08c4c     04 3E 06 F1 | 	add	local13, #4
08c50     1F 33 62 FC | 	wrlong	local07, local13
08c54     03 00 00 FF 
08c58     00 E4 05 F1 | 	add	objptr, ##1536
08c5c     F2 3E 02 FB | 	rdlong	local13, objptr
08c60     1F 41 02 F6 | 	mov	local14, local13
08c64     01 40 66 F0 | 	shl	local14, #1
08c68     1F 41 02 F1 | 	add	local14, local13
08c6c     02 40 66 F0 | 	shl	local14, #2
08c70     03 00 00 FF 
08c74     00 E4 85 F1 | 	sub	objptr, ##1536
08c78     F2 40 02 F1 | 	add	local14, objptr
08c7c     08 40 06 F1 | 	add	local14, #8
08c80     20 39 62 FC | 	wrlong	local10, local14
08c84     03 00 00 FF 
08c88     00 E4 05 F1 | 	add	objptr, ##1536
08c8c     F2 34 02 FB | 	rdlong	local08, objptr
08c90     01 34 06 F1 | 	add	local08, #1
08c94     F2 34 62 FC | 	wrlong	local08, objptr
08c98     13 00 00 FF 
08c9c     38 E4 85 F1 | 	sub	objptr, ##9784
08ca0     F2 34 02 FB | 	rdlong	local08, objptr
08ca4     01 34 86 F1 | 	sub	local08, #1
08ca8     F2 34 62 FC | 	wrlong	local08, objptr
08cac     37 00 00 FF 
08cb0     44 E4 85 F1 | 	sub	objptr, ##28228
08cb4                 | LR__0796
08cb4     37 00 00 FF 
08cb8     44 E4 05 F1 | 	add	objptr, ##28228
08cbc     F2 34 02 FB | 	rdlong	local08, objptr
08cc0     01 34 06 F1 | 	add	local08, #1
08cc4     F2 34 62 FC | 	wrlong	local08, objptr
08cc8     37 00 00 FF 
08ccc     44 E4 85 F1 | 	sub	objptr, ##28228
08cd0                 | LR__0797
08cd0     00 2E 06 F6 | 	mov	local05, #0
08cd4                 | ' i=0 : err=0
08cd4                 | ' if lparts(ct).token<>token_end then
08cd4     37 00 00 FF 
08cd8     44 E4 05 F1 | 	add	objptr, ##28228
08cdc     F2 40 02 FB | 	rdlong	local14, objptr
08ce0     03 40 66 F0 | 	shl	local14, #3
08ce4     02 00 00 FF 
08ce8     38 E4 85 F1 | 	sub	objptr, ##1080
08cec     F2 40 02 F1 | 	add	local14, objptr
08cf0     04 40 06 F1 | 	add	local14, #4
08cf4     20 41 02 FB | 	rdlong	local14, local14
08cf8     FE 41 0E F2 | 	cmp	local14, #510 wz
08cfc     35 00 00 FF 
08d00     0C E4 85 F1 | 	sub	objptr, ##27148
08d04     98 00 90 AD |  if_e	jmp	#LR__0799
08d08                 | '   do
08d08                 | LR__0798
08d08     D0 22 B0 FD | 	call	#_getaddr
08d0c     FD 42 02 F6 | 	mov	local15, result1
08d10     37 00 00 FF 
08d14     44 E4 05 F1 | 	add	objptr, ##28228
08d18     F2 40 02 FB | 	rdlong	local14, objptr
08d1c     01 40 06 F1 | 	add	local14, #1
08d20     F2 40 62 FC | 	wrlong	local14, objptr
08d24     01 2E 06 F1 | 	add	local05, #1
08d28                 | '     err=getaddr() :ct+=1
08d28                 | '     i+=1 
08d28                 | '     if lparts(ct).token=token_comma then ct+=1 
08d28     03 40 66 F0 | 	shl	local14, #3
08d2c     02 00 00 FF 
08d30     38 E4 85 F1 | 	sub	objptr, ##1080
08d34     F2 40 02 F1 | 	add	local14, objptr
08d38     04 40 06 F1 | 	add	local14, #4
08d3c     20 41 02 FB | 	rdlong	local14, local14
08d40     11 40 0E F2 | 	cmp	local14, #17 wz
08d44     35 00 00 FF 
08d48     0C E4 85 F1 | 	sub	objptr, ##27148
08d4c     37 00 00 AF 
08d50     44 E4 05 A1 |  if_e	add	objptr, ##28228
08d54     F2 34 02 AB |  if_e	rdlong	local08, objptr
08d58     01 34 06 A1 |  if_e	add	local08, #1
08d5c     F2 34 62 AC |  if_e	wrlong	local08, objptr
08d60     37 00 00 AF 
08d64     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08d68                 | '     if lparts(ct).token=token_end then exit loop
08d68     37 00 00 FF 
08d6c     44 E4 05 F1 | 	add	objptr, ##28228
08d70     F2 40 02 FB | 	rdlong	local14, objptr
08d74     03 40 66 F0 | 	shl	local14, #3
08d78     02 00 00 FF 
08d7c     38 E4 85 F1 | 	sub	objptr, ##1080
08d80     F2 40 02 F1 | 	add	local14, objptr
08d84     04 40 06 F1 | 	add	local14, #4
08d88     20 41 02 FB | 	rdlong	local14, local14
08d8c     FE 41 0E F2 | 	cmp	local14, #510 wz
08d90     35 00 00 FF 
08d94     0C E4 85 F1 | 	sub	objptr, ##27148
08d98     08 00 90 AD |  if_e	jmp	#LR__0800
08d9c     68 FF 9F FD | 	jmp	#LR__0798
08da0                 | LR__0799
08da0     36 42 06 F6 | 	mov	local15, #54
08da4                 | LR__0800
08da4                 | ' return i,err
08da4     17 FB 01 F6 | 	mov	result1, local05
08da8     21 FD 01 F6 | 	mov	result2, local15
08dac     A7 F0 03 F6 | 	mov	ptra, fp
08db0     B2 00 A0 FD | 	call	#popregs_
08db4                 | _compile_input_ret
08db4     2D 00 64 FD | 	ret
08db8                 | 
08db8                 | ' 
08db8                 | ' '----- compile assign to an array element
08db8                 | ' 
08db8                 | ' function compile_array_assign() as ulong 
08db8                 | _compile_array_assign
08db8     0B 4A 05 F6 | 	mov	COUNT_, #11
08dbc     A8 00 A0 FD | 	call	#pushregs_
08dc0     00 2C 06 F6 | 	mov	local04, #0
08dc4     00 2E 06 F6 | 	mov	local05, #0
08dc8     37 00 00 FF 
08dcc     44 E4 05 F1 | 	add	objptr, ##28228
08dd0     F2 30 02 FB | 	rdlong	local06, objptr
08dd4     18 FB 01 F6 | 	mov	result1, local06
08dd8     01 FA 85 F1 | 	sub	result1, #1
08ddc     03 FA 65 F0 | 	shl	result1, #3
08de0     02 00 00 FF 
08de4     38 E4 85 F1 | 	sub	objptr, ##1080
08de8     F2 FA 01 F1 | 	add	result1, objptr
08dec     FD 32 02 FB | 	rdlong	local07, result1
08df0                 | ' numpar=0 : err=0
08df0                 | ' varname$=lparts(ct-1).part$
08df0                 | ' if lparts(ct).token=token_lpar then
08df0     03 30 66 F0 | 	shl	local06, #3
08df4     F2 30 02 F1 | 	add	local06, objptr
08df8     04 30 06 F1 | 	add	local06, #4
08dfc     18 31 02 FB | 	rdlong	local06, local06
08e00     15 30 0E F2 | 	cmp	local06, #21 wz
08e04     35 00 00 FF 
08e08     0C E4 85 F1 | 	sub	objptr, ##27148
08e0c     F4 01 90 5D |  if_ne	jmp	#LR__0814
08e10     37 00 00 FF 
08e14     44 E4 05 F1 | 	add	objptr, ##28228
08e18     F2 34 02 FB | 	rdlong	local08, objptr
08e1c     01 34 06 F1 | 	add	local08, #1
08e20     F2 34 62 FC | 	wrlong	local08, objptr
08e24     37 00 00 FF 
08e28     44 E4 85 F1 | 	sub	objptr, ##28228
08e2c                 | '   ct+=1 											' omit this lpar, this is for expr list
08e2c                 | '   do
08e2c                 | LR__0810
08e2c     40 25 B0 FD | 	call	#_expr
08e30     37 00 00 FF 
08e34     44 E4 05 F1 | 	add	objptr, ##28228
08e38     F2 30 02 FB | 	rdlong	local06, objptr
08e3c     01 30 06 F1 | 	add	local06, #1
08e40     F2 30 62 FC | 	wrlong	local06, objptr
08e44     01 2C 06 F1 | 	add	local04, #1
08e48     01 30 86 F1 | 	sub	local06, #1
08e4c     03 30 66 F0 | 	shl	local06, #3
08e50     02 00 00 FF 
08e54     38 E4 85 F1 | 	sub	objptr, ##1080
08e58     F2 30 02 F1 | 	add	local06, objptr
08e5c     04 30 06 F1 | 	add	local06, #4
08e60     18 35 02 FB | 	rdlong	local08, local06
08e64     14 34 0E F2 | 	cmp	local08, #20 wz
08e68     35 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##27148
08e70     34 00 90 AD |  if_e	jmp	#LR__0811
08e74     37 00 00 FF 
08e78     44 E4 05 F1 | 	add	objptr, ##28228
08e7c     F2 34 02 FB | 	rdlong	local08, objptr
08e80     03 34 66 F0 | 	shl	local08, #3
08e84     02 00 00 FF 
08e88     38 E4 85 F1 | 	sub	objptr, ##1080
08e8c     F2 34 02 F1 | 	add	local08, objptr
08e90     04 34 06 F1 | 	add	local08, #4
08e94     1A 35 02 FB | 	rdlong	local08, local08
08e98     FE 35 0E F2 | 	cmp	local08, #510 wz
08e9c     35 00 00 FF 
08ea0     0C E4 85 F1 | 	sub	objptr, ##27148
08ea4     84 FF 9F 5D |  if_ne	jmp	#LR__0810
08ea8                 | LR__0811
08ea8     37 00 00 FF 
08eac     44 E4 05 F1 | 	add	objptr, ##28228
08eb0     F2 34 02 FB | 	rdlong	local08, objptr
08eb4     01 34 06 F1 | 	add	local08, #1
08eb8     F2 34 62 FC | 	wrlong	local08, objptr
08ebc     37 00 00 FF 
08ec0     44 E4 85 F1 | 	sub	objptr, ##28228
08ec4     A8 24 B0 FD | 	call	#_expr
08ec8     01 36 66 F6 | 	neg	local09, #1
08ecc     00 38 06 F6 | 	mov	local10, #0
08ed0                 | '   ct+=1 : expr()
08ed0                 | '   j=-1 : i=0 
08ed0                 | '   do 
08ed0                 | LR__0812
08ed0                 | '     if variables(i).name=varname$ then j=i: exit loop
08ed0     1C 31 02 F6 | 	mov	local06, local10
08ed4     04 30 66 F0 | 	shl	local06, #4
08ed8     14 00 00 FF 
08edc     F8 E5 05 F1 | 	add	objptr, ##10744
08ee0     F2 30 02 F1 | 	add	local06, objptr
08ee4     18 13 02 FB | 	rdlong	arg01, local06
08ee8     19 15 02 F6 | 	mov	arg02, local07
08eec     14 00 00 FF 
08ef0     F8 E5 85 F1 | 	sub	objptr, ##10744
08ef4     A4 BF B1 FD | 	call	#__system___string_cmp
08ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
08efc     1C 37 02 A6 |  if_e	mov	local09, local10
08f00     20 00 90 AD |  if_e	jmp	#LR__0813
08f04     01 38 06 F1 | 	add	local10, #1
08f08     35 00 00 FF 
08f0c     08 E4 05 F1 | 	add	objptr, ##27144
08f10     F2 34 02 FB | 	rdlong	local08, objptr
08f14     35 00 00 FF 
08f18     08 E4 85 F1 | 	sub	objptr, ##27144
08f1c     1A 39 5A F2 | 	cmps	local10, local08 wcz
08f20     AC FF 9F ED |  if_be	jmp	#LR__0812
08f24                 | LR__0813
08f24     1B 27 02 F6 | 	mov	local01, local09
08f28     16 29 02 F6 | 	mov	local02, local04
08f2c     17 2A 06 F6 | 	mov	local03, #23
08f30     13 35 02 F6 | 	mov	local08, local01
08f34     14 3B 02 F6 | 	mov	local11, local02
08f38     15 33 02 F6 | 	mov	local07, local03
08f3c     4A 00 00 FF 
08f40     7C E4 05 F1 | 	add	objptr, ##38012
08f44     F2 26 02 FB | 	rdlong	local01, objptr
08f48     13 37 02 F6 | 	mov	local09, local01
08f4c     01 36 66 F0 | 	shl	local09, #1
08f50     13 37 02 F1 | 	add	local09, local01
08f54     02 36 66 F0 | 	shl	local09, #2
08f58     03 00 00 FF 
08f5c     00 E4 85 F1 | 	sub	objptr, ##1536
08f60     F2 36 02 F1 | 	add	local09, objptr
08f64     1B 35 62 FC | 	wrlong	local08, local09
08f68     03 00 00 FF 
08f6c     00 E4 05 F1 | 	add	objptr, ##1536
08f70     F2 26 02 FB | 	rdlong	local01, objptr
08f74     13 37 02 F6 | 	mov	local09, local01
08f78     01 36 66 F0 | 	shl	local09, #1
08f7c     13 37 02 F1 | 	add	local09, local01
08f80     02 36 66 F0 | 	shl	local09, #2
08f84     03 00 00 FF 
08f88     00 E4 85 F1 | 	sub	objptr, ##1536
08f8c     F2 36 02 F1 | 	add	local09, objptr
08f90     04 36 06 F1 | 	add	local09, #4
08f94     1B 3B 62 FC | 	wrlong	local11, local09
08f98     03 00 00 FF 
08f9c     00 E4 05 F1 | 	add	objptr, ##1536
08fa0     F2 3A 02 FB | 	rdlong	local11, objptr
08fa4     1D 27 02 F6 | 	mov	local01, local11
08fa8     01 26 66 F0 | 	shl	local01, #1
08fac     1D 27 02 F1 | 	add	local01, local11
08fb0     02 26 66 F0 | 	shl	local01, #2
08fb4     03 00 00 FF 
08fb8     00 E4 85 F1 | 	sub	objptr, ##1536
08fbc     F2 26 02 F1 | 	add	local01, objptr
08fc0     08 26 06 F1 | 	add	local01, #8
08fc4     13 33 62 FC | 	wrlong	local07, local01
08fc8     03 00 00 FF 
08fcc     00 E4 05 F1 | 	add	objptr, ##1536
08fd0     F2 34 02 FB | 	rdlong	local08, objptr
08fd4     01 34 06 F1 | 	add	local08, #1
08fd8     F2 34 62 FC | 	wrlong	local08, objptr
08fdc                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08fdc                 | '   if numpar>3 then err=45
08fdc     04 2C 16 F2 | 	cmp	local04, #4 wc
08fe0     2D 2E 06 36 |  if_ae	mov	local05, #45
08fe4                 | '   if i>varnum then err=20
08fe4     15 00 00 FF 
08fe8     74 E4 85 F1 | 	sub	objptr, ##10868
08fec     F2 34 02 FB | 	rdlong	local08, objptr
08ff0     35 00 00 FF 
08ff4     08 E4 85 F1 | 	sub	objptr, ##27144
08ff8     1A 39 5A F2 | 	cmps	local10, local08 wcz
08ffc     14 2E 06 16 |  if_a	mov	local05, #20
09000     04 00 90 FD | 	jmp	#LR__0815
09004                 | LR__0814
09004     0E 2E 06 F6 | 	mov	local05, #14
09008                 | LR__0815
09008                 | ' return err
09008     17 FB 01 F6 | 	mov	result1, local05
0900c     A7 F0 03 F6 | 	mov	ptra, fp
09010     B2 00 A0 FD | 	call	#popregs_
09014                 | _compile_array_assign_ret
09014     2D 00 64 FD | 	ret
09018                 | 
09018                 | ' 
09018                 | ' '----- compile print command with its ";" and "," modifiers
09018                 | ' 
09018                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09018                 | _compile_print
09018     0B 4A 05 F6 | 	mov	COUNT_, #11
0901c     A8 00 A0 FD | 	call	#pushregs_
09020     00 26 06 F6 | 	mov	local01, #0
09024     1D 2A 06 F6 | 	mov	local03, #29
09028                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09028                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09028     37 00 00 FF 
0902c     44 E4 05 F1 | 	add	objptr, ##28228
09030     F2 2C 02 FB | 	rdlong	local04, objptr
09034     03 2C 66 F0 | 	shl	local04, #3
09038     02 00 00 FF 
0903c     38 E4 85 F1 | 	sub	objptr, ##1080
09040     F2 2C 02 F1 | 	add	local04, objptr
09044     04 2C 06 F1 | 	add	local04, #4
09048     16 2D 02 FB | 	rdlong	local04, local04
0904c     FE 2D 0E F2 | 	cmp	local04, #510 wz
09050     35 00 00 FF 
09054     0C E4 85 F1 | 	sub	objptr, ##27148
09058     68 01 90 5D |  if_ne	jmp	#LR__0820
0905c     20 2A 06 F6 | 	mov	local03, #32
09060     13 2F 02 F6 | 	mov	local05, local01
09064     14 31 02 F6 | 	mov	local06, local02
09068     15 33 02 F6 | 	mov	local07, local03
0906c     4A 00 00 FF 
09070     7C E4 05 F1 | 	add	objptr, ##38012
09074     F2 34 02 FB | 	rdlong	local08, objptr
09078     1A 37 02 F6 | 	mov	local09, local08
0907c     01 36 66 F0 | 	shl	local09, #1
09080     1A 37 02 F1 | 	add	local09, local08
09084     02 36 66 F0 | 	shl	local09, #2
09088     03 00 00 FF 
0908c     00 E4 85 F1 | 	sub	objptr, ##1536
09090     F2 36 02 F1 | 	add	local09, objptr
09094     1B 2F 62 FC | 	wrlong	local05, local09
09098     03 00 00 FF 
0909c     00 E4 05 F1 | 	add	objptr, ##1536
090a0     F2 2E 02 FB | 	rdlong	local05, objptr
090a4     17 39 02 F6 | 	mov	local10, local05
090a8     01 38 66 F0 | 	shl	local10, #1
090ac     17 39 02 F1 | 	add	local10, local05
090b0     02 38 66 F0 | 	shl	local10, #2
090b4     03 00 00 FF 
090b8     00 E4 85 F1 | 	sub	objptr, ##1536
090bc     F2 38 02 F1 | 	add	local10, objptr
090c0     04 38 06 F1 | 	add	local10, #4
090c4     1C 31 62 FC | 	wrlong	local06, local10
090c8     03 00 00 FF 
090cc     00 E4 05 F1 | 	add	objptr, ##1536
090d0     F2 2E 02 FB | 	rdlong	local05, objptr
090d4     17 3B 02 F6 | 	mov	local11, local05
090d8     01 3A 66 F0 | 	shl	local11, #1
090dc     17 3B 02 F1 | 	add	local11, local05
090e0     02 3A 66 F0 | 	shl	local11, #2
090e4     03 00 00 FF 
090e8     00 E4 85 F1 | 	sub	objptr, ##1536
090ec     F2 3A 02 F1 | 	add	local11, objptr
090f0     08 3A 06 F1 | 	add	local11, #8
090f4     1D 33 62 FC | 	wrlong	local07, local11
090f8     03 00 00 FF 
090fc     00 E4 05 F1 | 	add	objptr, ##1536
09100     F2 2E 02 FB | 	rdlong	local05, objptr
09104     01 2E 06 F1 | 	add	local05, #1
09108     F2 2E 62 FC | 	wrlong	local05, objptr
0910c     44 2A 06 F6 | 	mov	local03, #68
09110     13 2F 02 F6 | 	mov	local05, local01
09114     14 31 02 F6 | 	mov	local06, local02
09118     15 33 02 F6 | 	mov	local07, local03
0911c     F2 34 02 FB | 	rdlong	local08, objptr
09120     1A 37 02 F6 | 	mov	local09, local08
09124     01 36 66 F0 | 	shl	local09, #1
09128     1A 37 02 F1 | 	add	local09, local08
0912c     02 36 66 F0 | 	shl	local09, #2
09130     03 00 00 FF 
09134     00 E4 85 F1 | 	sub	objptr, ##1536
09138     F2 36 02 F1 | 	add	local09, objptr
0913c     1B 2F 62 FC | 	wrlong	local05, local09
09140     03 00 00 FF 
09144     00 E4 05 F1 | 	add	objptr, ##1536
09148     F2 3A 02 FB | 	rdlong	local11, objptr
0914c     1D 39 02 F6 | 	mov	local10, local11
09150     01 38 66 F0 | 	shl	local10, #1
09154     1D 39 02 F1 | 	add	local10, local11
09158     02 38 66 F0 | 	shl	local10, #2
0915c     03 00 00 FF 
09160     00 E4 85 F1 | 	sub	objptr, ##1536
09164     F2 38 02 F1 | 	add	local10, objptr
09168     04 38 06 F1 | 	add	local10, #4
0916c     1C 31 62 FC | 	wrlong	local06, local10
09170     03 00 00 FF 
09174     00 E4 05 F1 | 	add	objptr, ##1536
09178     F2 38 02 FB | 	rdlong	local10, objptr
0917c     1C 3B 02 F6 | 	mov	local11, local10
09180     01 3A 66 F0 | 	shl	local11, #1
09184     1C 3B 02 F1 | 	add	local11, local10
09188     02 3A 66 F0 | 	shl	local11, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 3A 02 F1 | 	add	local11, objptr
09198     08 3A 06 F1 | 	add	local11, #8
0919c     1D 33 62 FC | 	wrlong	local07, local11
091a0     03 00 00 FF 
091a4     00 E4 05 F1 | 	add	objptr, ##1536
091a8     F2 2E 02 FB | 	rdlong	local05, objptr
091ac     01 2E 06 F1 | 	add	local05, #1
091b0     F2 2E 62 FC | 	wrlong	local05, objptr
091b4     4A 00 00 FF 
091b8     7C E4 85 F1 | 	sub	objptr, ##38012
091bc     00 FA 05 F6 | 	mov	result1, #0
091c0     20 05 90 FD | 	jmp	#LR__0827
091c4                 | LR__0820
091c4                 | ' do
091c4                 | LR__0821
091c4     A8 21 B0 FD | 	call	#_expr
091c8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
091c8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
091c8     37 00 00 FF 
091cc     44 E4 05 F1 | 	add	objptr, ##28228
091d0     F2 2C 02 FB | 	rdlong	local04, objptr
091d4     03 2C 66 F0 | 	shl	local04, #3
091d8     02 00 00 FF 
091dc     38 E4 85 F1 | 	sub	objptr, ##1080
091e0     F2 2C 02 F1 | 	add	local04, objptr
091e4     04 2C 06 F1 | 	add	local04, #4
091e8     16 35 02 FB | 	rdlong	local08, local04
091ec     11 34 0E F2 | 	cmp	local08, #17 wz
091f0     35 00 00 FF 
091f4     0C E4 85 F1 | 	sub	objptr, ##27148
091f8     60 01 90 5D |  if_ne	jmp	#LR__0822
091fc     21 2A 06 F6 | 	mov	local03, #33
09200     13 2F 02 F6 | 	mov	local05, local01
09204     14 31 02 F6 | 	mov	local06, local02
09208     15 33 02 F6 | 	mov	local07, local03
0920c     4A 00 00 FF 
09210     7C E4 05 F1 | 	add	objptr, ##38012
09214     F2 34 02 FB | 	rdlong	local08, objptr
09218     1A 37 02 F6 | 	mov	local09, local08
0921c     01 36 66 F0 | 	shl	local09, #1
09220     1A 37 02 F1 | 	add	local09, local08
09224     02 36 66 F0 | 	shl	local09, #2
09228     03 00 00 FF 
0922c     00 E4 85 F1 | 	sub	objptr, ##1536
09230     F2 36 02 F1 | 	add	local09, objptr
09234     1B 2F 62 FC | 	wrlong	local05, local09
09238     03 00 00 FF 
0923c     00 E4 05 F1 | 	add	objptr, ##1536
09240     F2 3A 02 FB | 	rdlong	local11, objptr
09244     1D 39 02 F6 | 	mov	local10, local11
09248     01 38 66 F0 | 	shl	local10, #1
0924c     1D 39 02 F1 | 	add	local10, local11
09250     02 38 66 F0 | 	shl	local10, #2
09254     03 00 00 FF 
09258     00 E4 85 F1 | 	sub	objptr, ##1536
0925c     F2 38 02 F1 | 	add	local10, objptr
09260     04 38 06 F1 | 	add	local10, #4
09264     1C 31 62 FC | 	wrlong	local06, local10
09268     03 00 00 FF 
0926c     00 E4 05 F1 | 	add	objptr, ##1536
09270     F2 2E 02 FB | 	rdlong	local05, objptr
09274     17 3B 02 F6 | 	mov	local11, local05
09278     01 3A 66 F0 | 	shl	local11, #1
0927c     17 3B 02 F1 | 	add	local11, local05
09280     02 3A 66 F0 | 	shl	local11, #2
09284     03 00 00 FF 
09288     00 E4 85 F1 | 	sub	objptr, ##1536
0928c     F2 3A 02 F1 | 	add	local11, objptr
09290     08 3A 06 F1 | 	add	local11, #8
09294     1D 33 62 FC | 	wrlong	local07, local11
09298     03 00 00 FF 
0929c     00 E4 05 F1 | 	add	objptr, ##1536
092a0     F2 2E 02 FB | 	rdlong	local05, objptr
092a4     01 2E 06 F1 | 	add	local05, #1
092a8     F2 2E 62 FC | 	wrlong	local05, objptr
092ac     44 2A 06 F6 | 	mov	local03, #68
092b0     13 2F 02 F6 | 	mov	local05, local01
092b4     14 31 02 F6 | 	mov	local06, local02
092b8     15 33 02 F6 | 	mov	local07, local03
092bc     F2 34 02 FB | 	rdlong	local08, objptr
092c0     1A 37 02 F6 | 	mov	local09, local08
092c4     01 36 66 F0 | 	shl	local09, #1
092c8     1A 37 02 F1 | 	add	local09, local08
092cc     02 36 66 F0 | 	shl	local09, #2
092d0     03 00 00 FF 
092d4     00 E4 85 F1 | 	sub	objptr, ##1536
092d8     F2 36 02 F1 | 	add	local09, objptr
092dc     1B 2F 62 FC | 	wrlong	local05, local09
092e0     03 00 00 FF 
092e4     00 E4 05 F1 | 	add	objptr, ##1536
092e8     F2 3A 02 FB | 	rdlong	local11, objptr
092ec     1D 39 02 F6 | 	mov	local10, local11
092f0     01 38 66 F0 | 	shl	local10, #1
092f4     1D 39 02 F1 | 	add	local10, local11
092f8     02 38 66 F0 | 	shl	local10, #2
092fc     03 00 00 FF 
09300     00 E4 85 F1 | 	sub	objptr, ##1536
09304     F2 38 02 F1 | 	add	local10, objptr
09308     04 38 06 F1 | 	add	local10, #4
0930c     1C 31 62 FC | 	wrlong	local06, local10
09310     03 00 00 FF 
09314     00 E4 05 F1 | 	add	objptr, ##1536
09318     F2 38 02 FB | 	rdlong	local10, objptr
0931c     1C 3B 02 F6 | 	mov	local11, local10
09320     01 3A 66 F0 | 	shl	local11, #1
09324     1C 3B 02 F1 | 	add	local11, local10
09328     02 3A 66 F0 | 	shl	local11, #2
0932c     03 00 00 FF 
09330     00 E4 85 F1 | 	sub	objptr, ##1536
09334     F2 3A 02 F1 | 	add	local11, objptr
09338     08 3A 06 F1 | 	add	local11, #8
0933c     1D 33 62 FC | 	wrlong	local07, local11
09340     03 00 00 FF 
09344     00 E4 05 F1 | 	add	objptr, ##1536
09348     F2 2E 02 FB | 	rdlong	local05, objptr
0934c     01 2E 06 F1 | 	add	local05, #1
09350     F2 2E 62 FC | 	wrlong	local05, objptr
09354     4A 00 00 FF 
09358     7C E4 85 F1 | 	sub	objptr, ##38012
0935c                 | LR__0822
0935c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0935c     37 00 00 FF 
09360     44 E4 05 F1 | 	add	objptr, ##28228
09364     F2 2C 02 FB | 	rdlong	local04, objptr
09368     03 2C 66 F0 | 	shl	local04, #3
0936c     02 00 00 FF 
09370     38 E4 85 F1 | 	sub	objptr, ##1080
09374     F2 2C 02 F1 | 	add	local04, objptr
09378     04 2C 06 F1 | 	add	local04, #4
0937c     16 35 02 FB | 	rdlong	local08, local04
09380     12 34 0E F2 | 	cmp	local08, #18 wz
09384     35 00 00 FF 
09388     0C E4 85 F1 | 	sub	objptr, ##27148
0938c     60 01 90 5D |  if_ne	jmp	#LR__0823
09390     22 2A 06 F6 | 	mov	local03, #34
09394     13 2F 02 F6 | 	mov	local05, local01
09398     14 31 02 F6 | 	mov	local06, local02
0939c     15 33 02 F6 | 	mov	local07, local03
093a0     4A 00 00 FF 
093a4     7C E4 05 F1 | 	add	objptr, ##38012
093a8     F2 34 02 FB | 	rdlong	local08, objptr
093ac     1A 37 02 F6 | 	mov	local09, local08
093b0     01 36 66 F0 | 	shl	local09, #1
093b4     1A 37 02 F1 | 	add	local09, local08
093b8     02 36 66 F0 | 	shl	local09, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 36 02 F1 | 	add	local09, objptr
093c8     1B 2F 62 FC | 	wrlong	local05, local09
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 3A 02 FB | 	rdlong	local11, objptr
093d8     1D 39 02 F6 | 	mov	local10, local11
093dc     01 38 66 F0 | 	shl	local10, #1
093e0     1D 39 02 F1 | 	add	local10, local11
093e4     02 38 66 F0 | 	shl	local10, #2
093e8     03 00 00 FF 
093ec     00 E4 85 F1 | 	sub	objptr, ##1536
093f0     F2 38 02 F1 | 	add	local10, objptr
093f4     04 38 06 F1 | 	add	local10, #4
093f8     1C 31 62 FC | 	wrlong	local06, local10
093fc     03 00 00 FF 
09400     00 E4 05 F1 | 	add	objptr, ##1536
09404     F2 2E 02 FB | 	rdlong	local05, objptr
09408     17 3B 02 F6 | 	mov	local11, local05
0940c     01 3A 66 F0 | 	shl	local11, #1
09410     17 3B 02 F1 | 	add	local11, local05
09414     02 3A 66 F0 | 	shl	local11, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 3A 02 F1 | 	add	local11, objptr
09424     08 3A 06 F1 | 	add	local11, #8
09428     1D 33 62 FC | 	wrlong	local07, local11
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 2E 02 FB | 	rdlong	local05, objptr
09438     01 2E 06 F1 | 	add	local05, #1
0943c     F2 2E 62 FC | 	wrlong	local05, objptr
09440     44 2A 06 F6 | 	mov	local03, #68
09444     13 2F 02 F6 | 	mov	local05, local01
09448     14 31 02 F6 | 	mov	local06, local02
0944c     15 33 02 F6 | 	mov	local07, local03
09450     F2 34 02 FB | 	rdlong	local08, objptr
09454     1A 37 02 F6 | 	mov	local09, local08
09458     01 36 66 F0 | 	shl	local09, #1
0945c     1A 37 02 F1 | 	add	local09, local08
09460     02 36 66 F0 | 	shl	local09, #2
09464     03 00 00 FF 
09468     00 E4 85 F1 | 	sub	objptr, ##1536
0946c     F2 36 02 F1 | 	add	local09, objptr
09470     1B 2F 62 FC | 	wrlong	local05, local09
09474     03 00 00 FF 
09478     00 E4 05 F1 | 	add	objptr, ##1536
0947c     F2 3A 02 FB | 	rdlong	local11, objptr
09480     1D 39 02 F6 | 	mov	local10, local11
09484     01 38 66 F0 | 	shl	local10, #1
09488     1D 39 02 F1 | 	add	local10, local11
0948c     02 38 66 F0 | 	shl	local10, #2
09490     03 00 00 FF 
09494     00 E4 85 F1 | 	sub	objptr, ##1536
09498     F2 38 02 F1 | 	add	local10, objptr
0949c     04 38 06 F1 | 	add	local10, #4
094a0     1C 31 62 FC | 	wrlong	local06, local10
094a4     03 00 00 FF 
094a8     00 E4 05 F1 | 	add	objptr, ##1536
094ac     F2 38 02 FB | 	rdlong	local10, objptr
094b0     1C 3B 02 F6 | 	mov	local11, local10
094b4     01 3A 66 F0 | 	shl	local11, #1
094b8     1C 3B 02 F1 | 	add	local11, local10
094bc     02 3A 66 F0 | 	shl	local11, #2
094c0     03 00 00 FF 
094c4     00 E4 85 F1 | 	sub	objptr, ##1536
094c8     F2 3A 02 F1 | 	add	local11, objptr
094cc     08 3A 06 F1 | 	add	local11, #8
094d0     1D 33 62 FC | 	wrlong	local07, local11
094d4     03 00 00 FF 
094d8     00 E4 05 F1 | 	add	objptr, ##1536
094dc     F2 2E 02 FB | 	rdlong	local05, objptr
094e0     01 2E 06 F1 | 	add	local05, #1
094e4     F2 2E 62 FC | 	wrlong	local05, objptr
094e8     4A 00 00 FF 
094ec     7C E4 85 F1 | 	sub	objptr, ##38012
094f0                 | LR__0823
094f0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
094f0     37 00 00 FF 
094f4     44 E4 05 F1 | 	add	objptr, ##28228
094f8     F2 2C 02 FB | 	rdlong	local04, objptr
094fc     03 2C 66 F0 | 	shl	local04, #3
09500     02 00 00 FF 
09504     38 E4 85 F1 | 	sub	objptr, ##1080
09508     F2 2C 02 F1 | 	add	local04, objptr
0950c     04 2C 06 F1 | 	add	local04, #4
09510     16 35 02 FB | 	rdlong	local08, local04
09514     FE 35 0E F2 | 	cmp	local08, #510 wz
09518     35 00 00 FF 
0951c     0C E4 85 F1 | 	sub	objptr, ##27148
09520     B8 00 90 5D |  if_ne	jmp	#LR__0824
09524     44 2A 06 F6 | 	mov	local03, #68
09528     13 2F 02 F6 | 	mov	local05, local01
0952c     14 31 02 F6 | 	mov	local06, local02
09530     15 33 02 F6 | 	mov	local07, local03
09534     4A 00 00 FF 
09538     7C E4 05 F1 | 	add	objptr, ##38012
0953c     F2 34 02 FB | 	rdlong	local08, objptr
09540     1A 37 02 F6 | 	mov	local09, local08
09544     01 36 66 F0 | 	shl	local09, #1
09548     1A 37 02 F1 | 	add	local09, local08
0954c     02 36 66 F0 | 	shl	local09, #2
09550     03 00 00 FF 
09554     00 E4 85 F1 | 	sub	objptr, ##1536
09558     F2 36 02 F1 | 	add	local09, objptr
0955c     1B 2F 62 FC | 	wrlong	local05, local09
09560     03 00 00 FF 
09564     00 E4 05 F1 | 	add	objptr, ##1536
09568     F2 3A 02 FB | 	rdlong	local11, objptr
0956c     1D 39 02 F6 | 	mov	local10, local11
09570     01 38 66 F0 | 	shl	local10, #1
09574     1D 39 02 F1 | 	add	local10, local11
09578     02 38 66 F0 | 	shl	local10, #2
0957c     03 00 00 FF 
09580     00 E4 85 F1 | 	sub	objptr, ##1536
09584     F2 38 02 F1 | 	add	local10, objptr
09588     04 38 06 F1 | 	add	local10, #4
0958c     1C 31 62 FC | 	wrlong	local06, local10
09590     03 00 00 FF 
09594     00 E4 05 F1 | 	add	objptr, ##1536
09598     F2 38 02 FB | 	rdlong	local10, objptr
0959c     1C 3B 02 F6 | 	mov	local11, local10
095a0     01 3A 66 F0 | 	shl	local11, #1
095a4     1C 3B 02 F1 | 	add	local11, local10
095a8     02 3A 66 F0 | 	shl	local11, #2
095ac     03 00 00 FF 
095b0     00 E4 85 F1 | 	sub	objptr, ##1536
095b4     F2 3A 02 F1 | 	add	local11, objptr
095b8     08 3A 06 F1 | 	add	local11, #8
095bc     1D 33 62 FC | 	wrlong	local07, local11
095c0     03 00 00 FF 
095c4     00 E4 05 F1 | 	add	objptr, ##1536
095c8     F2 2E 02 FB | 	rdlong	local05, objptr
095cc     01 2E 06 F1 | 	add	local05, #1
095d0     F2 2E 62 FC | 	wrlong	local05, objptr
095d4     4A 00 00 FF 
095d8     7C E4 85 F1 | 	sub	objptr, ##38012
095dc                 | LR__0824
095dc                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
095dc     37 00 00 FF 
095e0     44 E4 05 F1 | 	add	objptr, ##28228
095e4     F2 2C 02 FB | 	rdlong	local04, objptr
095e8     03 2C 66 F0 | 	shl	local04, #3
095ec     02 00 00 FF 
095f0     38 E4 85 F1 | 	sub	objptr, ##1080
095f4     F2 2C 02 F1 | 	add	local04, objptr
095f8     04 2C 06 F1 | 	add	local04, #4
095fc     16 35 02 FB | 	rdlong	local08, local04
09600     11 34 0E F2 | 	cmp	local08, #17 wz
09604     35 00 00 FF 
09608     0C E4 85 F1 | 	sub	objptr, ##27148
0960c     6C 00 90 AD |  if_e	jmp	#LR__0825
09610     37 00 00 FF 
09614     44 E4 05 F1 | 	add	objptr, ##28228
09618     F2 34 02 FB | 	rdlong	local08, objptr
0961c     03 34 66 F0 | 	shl	local08, #3
09620     02 00 00 FF 
09624     38 E4 85 F1 | 	sub	objptr, ##1080
09628     F2 34 02 F1 | 	add	local08, objptr
0962c     04 34 06 F1 | 	add	local08, #4
09630     1A 35 02 FB | 	rdlong	local08, local08
09634     12 34 0E F2 | 	cmp	local08, #18 wz
09638     35 00 00 FF 
0963c     0C E4 85 F1 | 	sub	objptr, ##27148
09640     38 00 90 AD |  if_e	jmp	#LR__0825
09644     37 00 00 FF 
09648     44 E4 05 F1 | 	add	objptr, ##28228
0964c     F2 3A 02 FB | 	rdlong	local11, objptr
09650     03 3A 66 F0 | 	shl	local11, #3
09654     02 00 00 FF 
09658     38 E4 85 F1 | 	sub	objptr, ##1080
0965c     F2 3A 02 F1 | 	add	local11, objptr
09660     04 3A 06 F1 | 	add	local11, #4
09664     1D 3B 02 FB | 	rdlong	local11, local11
09668     FE 3B 0E F2 | 	cmp	local11, #510 wz
0966c     35 00 00 FF 
09670     0C E4 85 F1 | 	sub	objptr, ##27148
09674     16 FA 05 56 |  if_ne	mov	result1, #22
09678     68 00 90 5D |  if_ne	jmp	#LR__0827
0967c                 | LR__0825
0967c     37 00 00 FF 
09680     44 E4 05 F1 | 	add	objptr, ##28228
09684     F2 2C 02 FB | 	rdlong	local04, objptr
09688     01 2C 06 F1 | 	add	local04, #1
0968c     F2 2C 62 FC | 	wrlong	local04, objptr
09690     03 2C 66 F0 | 	shl	local04, #3
09694     02 00 00 FF 
09698     38 E4 85 F1 | 	sub	objptr, ##1080
0969c     F2 2C 02 F1 | 	add	local04, objptr
096a0     04 2C 06 F1 | 	add	local04, #4
096a4     16 35 02 FB | 	rdlong	local08, local04
096a8     FE 35 0E F2 | 	cmp	local08, #510 wz
096ac     35 00 00 FF 
096b0     0C E4 85 F1 | 	sub	objptr, ##27148
096b4     28 00 90 AD |  if_e	jmp	#LR__0826
096b8     37 00 00 FF 
096bc     44 E4 05 F1 | 	add	objptr, ##28228
096c0     F2 3A 02 FB | 	rdlong	local11, objptr
096c4     0E 00 00 FF 
096c8     1C E4 05 F1 | 	add	objptr, ##7196
096cc     F2 38 02 FB | 	rdlong	local10, objptr
096d0     45 00 00 FF 
096d4     60 E4 85 F1 | 	sub	objptr, ##35424
096d8     1C 3B 52 F2 | 	cmps	local11, local10 wc
096dc     E4 FA 9F CD |  if_b	jmp	#LR__0821
096e0                 | LR__0826
096e0                 | ' return 0
096e0     00 FA 05 F6 | 	mov	result1, #0
096e4                 | LR__0827
096e4     A7 F0 03 F6 | 	mov	ptra, fp
096e8     B2 00 A0 FD | 	call	#popregs_
096ec                 | _compile_print_ret
096ec     2D 00 64 FD | 	ret
096f0                 | 
096f0                 | ' 
096f0                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
096f0                 | ' 
096f0                 | ' function compile_if(aline as ulong) as ulong  
096f0                 | _compile_if
096f0     09 4A 05 F6 | 	mov	COUNT_, #9
096f4     A8 00 A0 FD | 	call	#pushregs_
096f8                 | _compile_if_enter
096f8     09 2D 02 F6 | 	mov	local04, arg01
096fc                 | ' return expr()
096fc     70 1C B0 FD | 	call	#_expr
09700     37 00 00 FF 
09704     44 E4 05 F1 | 	add	objptr, ##28228
09708     F2 14 02 FB | 	rdlong	arg02, objptr
0970c     0A 2F 02 F6 | 	mov	local05, arg02
09710     03 2E 66 F0 | 	shl	local05, #3
09714     02 00 00 FF 
09718     38 E4 85 F1 | 	sub	objptr, ##1080
0971c     F2 2E 02 F1 | 	add	local05, objptr
09720     04 2E 06 F1 | 	add	local05, #4
09724     17 2F 02 FB | 	rdlong	local05, local05
09728     01 14 06 F1 | 	add	arg02, #1
0972c     02 00 00 FF 
09730     38 E4 05 F1 | 	add	objptr, ##1080
09734     F2 14 62 FC | 	wrlong	arg02, objptr
09738     37 00 00 FF 
0973c     44 E4 85 F1 | 	sub	objptr, ##28228
09740                 | ' 
09740                 | ' err=compile_fun_1p()
09740                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09740     5B 2E 0E F2 | 	cmp	local05, #91 wz
09744     34 FA 05 56 |  if_ne	mov	result1, #52
09748     20 01 90 5D |  if_ne	jmp	#LR__0832
0974c     58 2A 06 F6 | 	mov	local03, #88
09750     13 31 02 F6 | 	mov	local06, local01
09754     14 33 02 F6 | 	mov	local07, local02
09758     15 15 02 F6 | 	mov	arg02, local03
0975c     4A 00 00 FF 
09760     7C E4 05 F1 | 	add	objptr, ##38012
09764     F2 12 02 FB | 	rdlong	arg01, objptr
09768     09 35 02 F6 | 	mov	local08, arg01
0976c     01 34 66 F0 | 	shl	local08, #1
09770     09 35 02 F1 | 	add	local08, arg01
09774     02 34 66 F0 | 	shl	local08, #2
09778     03 00 00 FF 
0977c     00 E4 85 F1 | 	sub	objptr, ##1536
09780     F2 34 02 F1 | 	add	local08, objptr
09784     1A 31 62 FC | 	wrlong	local06, local08
09788     03 00 00 FF 
0978c     00 E4 05 F1 | 	add	objptr, ##1536
09790     F2 30 02 FB | 	rdlong	local06, objptr
09794     18 13 02 F6 | 	mov	arg01, local06
09798     01 12 66 F0 | 	shl	arg01, #1
0979c     18 13 02 F1 | 	add	arg01, local06
097a0     02 12 66 F0 | 	shl	arg01, #2
097a4     03 00 00 FF 
097a8     00 E4 85 F1 | 	sub	objptr, ##1536
097ac     F2 12 02 F1 | 	add	arg01, objptr
097b0     04 12 06 F1 | 	add	arg01, #4
097b4     09 33 62 FC | 	wrlong	local07, arg01
097b8     03 00 00 FF 
097bc     00 E4 05 F1 | 	add	objptr, ##1536
097c0     F2 30 02 FB | 	rdlong	local06, objptr
097c4     18 13 02 F6 | 	mov	arg01, local06
097c8     01 12 66 F0 | 	shl	arg01, #1
097cc     18 13 02 F1 | 	add	arg01, local06
097d0     02 12 66 F0 | 	shl	arg01, #2
097d4     03 00 00 FF 
097d8     00 E4 85 F1 | 	sub	objptr, ##1536
097dc     F2 12 02 F1 | 	add	arg01, objptr
097e0     08 12 06 F1 | 	add	arg01, #8
097e4     09 15 62 FC | 	wrlong	arg02, arg01
097e8     03 00 00 FF 
097ec     00 E4 05 F1 | 	add	objptr, ##1536
097f0     F2 30 02 FB | 	rdlong	local06, objptr
097f4     01 30 06 F1 | 	add	local06, #1
097f8     F2 30 62 FC | 	wrlong	local06, objptr
097fc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
097fc                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
097fc     13 00 00 FF 
09800     38 E4 85 F1 | 	sub	objptr, ##9784
09804     F2 14 02 FB | 	rdlong	arg02, objptr
09808     01 14 06 F1 | 	add	arg02, #1
0980c     03 14 66 F0 | 	shl	arg02, #3
09810     02 00 00 FF 
09814     38 E4 85 F1 | 	sub	objptr, ##1080
09818     F2 14 02 F1 | 	add	arg02, objptr
0981c     0A 13 02 FB | 	rdlong	arg01, arg02
09820     35 00 00 FF 
09824     0C E4 85 F1 | 	sub	objptr, ##27148
09828                 | ' 
09828                 | ' select case s
09828     A5 01 00 FF 
0982c     A4 15 06 F6 | 	mov	arg02, ##@LR__5471
09830     68 B6 B1 FD | 	call	#__system___string_cmp
09834     00 FA 0D F2 | 	cmp	result1, #0 wz
09838     1B FA 05 A6 |  if_e	mov	result1, #27
0983c     00 FA 05 56 |  if_ne	mov	result1, #0
09840     00 FA 0D F2 | 	cmp	result1, #0 wz
09844     10 00 90 AD |  if_e	jmp	#LR__0830
09848     05 12 06 F6 | 	mov	arg01, #5
0984c     38 E4 BF FD | 	call	#_compile_immediate_assign
09850     FD 36 02 F6 | 	mov	local09, result1
09854     10 00 90 FD | 	jmp	#LR__0831
09858                 | LR__0830
09858     05 12 06 F6 | 	mov	arg01, #5
0985c     16 15 02 F6 | 	mov	arg02, local04
09860     78 DA BF FD | 	call	#_compile_immediate
09864     FD 36 02 F6 | 	mov	local09, result1
09868                 | LR__0831
09868                 | ' return err
09868     1B FB 01 F6 | 	mov	result1, local09
0986c                 | LR__0832
0986c     A7 F0 03 F6 | 	mov	ptra, fp
09870     B2 00 A0 FD | 	call	#popregs_
09874                 | _compile_if_ret
09874     2D 00 64 FD | 	ret
09878                 | 
09878                 | ' 
09878                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09878                 | ' 
09878                 | ' function compile_else(aline as ulong) as ulong  
09878                 | _compile_else
09878     07 4A 05 F6 | 	mov	COUNT_, #7
0987c     A8 00 A0 FD | 	call	#pushregs_
09880                 | _compile_else_enter
09880     09 2D 02 F6 | 	mov	local04, arg01
09884     5A 2A 06 F6 | 	mov	local03, #90
09888     13 2F 02 F6 | 	mov	local05, local01
0988c     14 31 02 F6 | 	mov	local06, local02
09890     15 27 02 F6 | 	mov	local01, local03
09894     4A 00 00 FF 
09898     7C E4 05 F1 | 	add	objptr, ##38012
0989c     F2 14 02 FB | 	rdlong	arg02, objptr
098a0     0A 13 02 F6 | 	mov	arg01, arg02
098a4     01 12 66 F0 | 	shl	arg01, #1
098a8     0A 13 02 F1 | 	add	arg01, arg02
098ac     02 12 66 F0 | 	shl	arg01, #2
098b0     03 00 00 FF 
098b4     00 E4 85 F1 | 	sub	objptr, ##1536
098b8     F2 12 02 F1 | 	add	arg01, objptr
098bc     09 2F 62 FC | 	wrlong	local05, arg01
098c0     03 00 00 FF 
098c4     00 E4 05 F1 | 	add	objptr, ##1536
098c8     F2 2E 02 FB | 	rdlong	local05, objptr
098cc     17 15 02 F6 | 	mov	arg02, local05
098d0     01 14 66 F0 | 	shl	arg02, #1
098d4     17 15 02 F1 | 	add	arg02, local05
098d8     02 14 66 F0 | 	shl	arg02, #2
098dc     03 00 00 FF 
098e0     00 E4 85 F1 | 	sub	objptr, ##1536
098e4     F2 14 02 F1 | 	add	arg02, objptr
098e8     04 14 06 F1 | 	add	arg02, #4
098ec     0A 31 62 FC | 	wrlong	local06, arg02
098f0     03 00 00 FF 
098f4     00 E4 05 F1 | 	add	objptr, ##1536
098f8     F2 30 02 FB | 	rdlong	local06, objptr
098fc     18 2F 02 F6 | 	mov	local05, local06
09900     01 2E 66 F0 | 	shl	local05, #1
09904     18 2F 02 F1 | 	add	local05, local06
09908     02 2E 66 F0 | 	shl	local05, #2
0990c     03 00 00 FF 
09910     00 E4 85 F1 | 	sub	objptr, ##1536
09914     F2 2E 02 F1 | 	add	local05, objptr
09918     08 2E 06 F1 | 	add	local05, #8
0991c     17 27 62 FC | 	wrlong	local01, local05
09920     03 00 00 FF 
09924     00 E4 05 F1 | 	add	objptr, ##1536
09928     F2 2E 02 FB | 	rdlong	local05, objptr
0992c     01 2E 06 F1 | 	add	local05, #1
09930     F2 2E 62 FC | 	wrlong	local05, objptr
09934                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09934                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09934     13 00 00 FF 
09938     38 E4 85 F1 | 	sub	objptr, ##9784
0993c     F2 30 02 FB | 	rdlong	local06, objptr
09940     01 30 06 F1 | 	add	local06, #1
09944     03 30 66 F0 | 	shl	local06, #3
09948     02 00 00 FF 
0994c     38 E4 85 F1 | 	sub	objptr, ##1080
09950     F2 30 02 F1 | 	add	local06, objptr
09954     18 13 02 FB | 	rdlong	arg01, local06
09958     35 00 00 FF 
0995c     0C E4 85 F1 | 	sub	objptr, ##27148
09960                 | ' 
09960                 | ' select case s
09960     A5 01 00 FF 
09964     A4 15 06 F6 | 	mov	arg02, ##@LR__5471
09968     30 B5 B1 FD | 	call	#__system___string_cmp
0996c     00 FA 0D F2 | 	cmp	result1, #0 wz
09970     1B FA 05 A6 |  if_e	mov	result1, #27
09974     00 FA 05 56 |  if_ne	mov	result1, #0
09978     00 FA 0D F2 | 	cmp	result1, #0 wz
0997c     10 00 90 AD |  if_e	jmp	#LR__0840
09980     05 12 06 F6 | 	mov	arg01, #5
09984     00 E3 BF FD | 	call	#_compile_immediate_assign
09988     FD 32 02 F6 | 	mov	local07, result1
0998c     10 00 90 FD | 	jmp	#LR__0841
09990                 | LR__0840
09990     05 12 06 F6 | 	mov	arg01, #5
09994     16 15 02 F6 | 	mov	arg02, local04
09998     40 D9 BF FD | 	call	#_compile_immediate
0999c     FD 32 02 F6 | 	mov	local07, result1
099a0                 | LR__0841
099a0                 | ' return err
099a0     19 FB 01 F6 | 	mov	result1, local07
099a4     A7 F0 03 F6 | 	mov	ptra, fp
099a8     B2 00 A0 FD | 	call	#popregs_
099ac                 | _compile_else_ret
099ac     2D 00 64 FD | 	ret
099b0                 | 
099b0                 | ' 
099b0                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
099b0                 | ' 
099b0                 | ' function compile_dim() as ulong  
099b0                 | _compile_dim
099b0     11 4A 05 F6 | 	mov	COUNT_, #17
099b4     A8 00 A0 FD | 	call	#pushregs_
099b8     01 26 06 F6 | 	mov	local01, #1
099bc     01 28 06 F6 | 	mov	local02, #1
099c0     01 2A 06 F6 | 	mov	local03, #1
099c4                 | ' 
099c4                 | ' dims(0)=1: dims(1)=1: dims(2)=1
099c4                 | ' if isname(lparts(ct).part$) then 
099c4     37 00 00 FF 
099c8     44 E4 05 F1 | 	add	objptr, ##28228
099cc     F2 18 02 FB | 	rdlong	arg04, objptr
099d0     03 18 66 F0 | 	shl	arg04, #3
099d4     02 00 00 FF 
099d8     38 E4 85 F1 | 	sub	objptr, ##1080
099dc     F2 18 02 F1 | 	add	arg04, objptr
099e0     0C 13 02 FB | 	rdlong	arg01, arg04
099e4     35 00 00 FF 
099e8     0C E4 85 F1 | 	sub	objptr, ##27148
099ec     44 C7 BF FD | 	call	#_isname
099f0     00 FA 0D F2 | 	cmp	result1, #0 wz
099f4     78 05 90 AD |  if_e	jmp	#LR__0873
099f8     37 00 00 FF 
099fc     44 E4 05 F1 | 	add	objptr, ##28228
09a00     F2 2C 02 FB | 	rdlong	local04, objptr
09a04     03 2C 66 F0 | 	shl	local04, #3
09a08     02 00 00 FF 
09a0c     38 E4 85 F1 | 	sub	objptr, ##1080
09a10     F2 2C 02 F1 | 	add	local04, objptr
09a14     16 2F 02 FB | 	rdlong	local05, local04
09a18     01 30 66 F6 | 	neg	local06, #1
09a1c                 | '   varname2$=lparts(ct).part$ 
09a1c                 | '   j=-1
09a1c                 | '   if varnum>0 then
09a1c     04 E4 85 F1 | 	sub	objptr, #4
09a20     F2 32 02 FB | 	rdlong	local07, objptr
09a24     35 00 00 FF 
09a28     08 E4 85 F1 | 	sub	objptr, ##27144
09a2c     01 32 56 F2 | 	cmps	local07, #1 wc
09a30     58 00 90 CD |  if_b	jmp	#LR__0852
09a34                 | '     for i=0 to varnum-1
09a34     00 34 06 F6 | 	mov	local08, #0
09a38     35 00 00 FF 
09a3c     08 E4 05 F1 | 	add	objptr, ##27144
09a40     F2 36 02 FB | 	rdlong	local09, objptr
09a44     35 00 00 FF 
09a48     08 E4 85 F1 | 	sub	objptr, ##27144
09a4c                 | LR__0850
09a4c     1B 35 52 F2 | 	cmps	local08, local09 wc
09a50     38 00 90 3D |  if_ae	jmp	#LR__0851
09a54                 | '       if variables(i).name=varname2$ then j=i : exit
09a54     1A 2D 02 F6 | 	mov	local04, local08
09a58     04 2C 66 F0 | 	shl	local04, #4
09a5c     14 00 00 FF 
09a60     F8 E5 05 F1 | 	add	objptr, ##10744
09a64     F2 2C 02 F1 | 	add	local04, objptr
09a68     16 13 02 FB | 	rdlong	arg01, local04
09a6c     17 15 02 F6 | 	mov	arg02, local05
09a70     14 00 00 FF 
09a74     F8 E5 85 F1 | 	sub	objptr, ##10744
09a78     20 B4 B1 FD | 	call	#__system___string_cmp
09a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a80     1A 31 02 A6 |  if_e	mov	local06, local08
09a84     01 34 06 51 |  if_ne	add	local08, #1
09a88     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
09a8c                 | LR__0851
09a8c                 | LR__0852
09a8c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09a8c     FF FF 7F FF 
09a90     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09a94     35 00 00 AF 
09a98     08 E4 05 A1 |  if_e	add	objptr, ##27144
09a9c     F2 30 02 AB |  if_e	rdlong	local06, objptr
09aa0     35 00 00 AF 
09aa4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09aa8     78 00 90 AD |  if_e	jmp	#LR__0853
09aac     00 12 06 F6 | 	mov	arg01, #0
09ab0     E8 10 B2 FD | 	call	#__system___getiolock_0595
09ab4     FD 12 02 F6 | 	mov	arg01, result1
09ab8     B8 B3 B1 FD | 	call	#__system___lockmem
09abc     A8 01 00 FF 
09ac0     01 14 06 F6 | 	mov	arg02, ##@LR__5717
09ac4     00 12 06 F6 | 	mov	arg01, #0
09ac8     00 16 06 F6 | 	mov	arg03, #0
09acc     98 C0 B1 FD | 	call	#__system___basic_print_string
09ad0     51 00 00 FF 
09ad4     EC E5 05 F1 | 	add	objptr, ##41964
09ad8     F2 14 02 FB | 	rdlong	arg02, objptr
09adc     51 00 00 FF 
09ae0     EC E5 85 F1 | 	sub	objptr, ##41964
09ae4     00 12 06 F6 | 	mov	arg01, #0
09ae8     00 16 06 F6 | 	mov	arg03, #0
09aec     0A 18 06 F6 | 	mov	arg04, #10
09af0     F8 C0 B1 FD | 	call	#__system___basic_print_unsigned
09af4     A8 01 00 FF 
09af8     0F 14 06 F6 | 	mov	arg02, ##@LR__5718
09afc     00 12 06 F6 | 	mov	arg01, #0
09b00     00 16 06 F6 | 	mov	arg03, #0
09b04     60 C0 B1 FD | 	call	#__system___basic_print_string
09b08     00 12 06 F6 | 	mov	arg01, #0
09b0c     0A 14 06 F6 | 	mov	arg02, #10
09b10     00 16 06 F6 | 	mov	arg03, #0
09b14     F8 BF B1 FD | 	call	#__system___basic_print_char
09b18     00 12 06 F6 | 	mov	arg01, #0
09b1c     7C 10 B2 FD | 	call	#__system___getiolock_0595
09b20     FD 00 68 FC | 	wrlong	#0, result1
09b24                 | LR__0853
09b24                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09b24     37 00 00 FF 
09b28     44 E4 05 F1 | 	add	objptr, ##28228
09b2c     F2 14 02 FB | 	rdlong	arg02, objptr
09b30     01 14 06 F1 | 	add	arg02, #1
09b34     03 14 66 F0 | 	shl	arg02, #3
09b38     02 00 00 FF 
09b3c     38 E4 85 F1 | 	sub	objptr, ##1080
09b40     F2 14 02 F1 | 	add	arg02, objptr
09b44     0A 13 02 FB | 	rdlong	arg01, arg02
09b48     A8 01 00 FF 
09b4c     30 14 06 F6 | 	mov	arg02, ##@LR__5719
09b50     35 00 00 FF 
09b54     0C E4 85 F1 | 	sub	objptr, ##27148
09b58     40 B3 B1 FD | 	call	#__system___string_cmp
09b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
09b60     44 00 90 AD |  if_e	jmp	#LR__0854
09b64     37 00 00 FF 
09b68     44 E4 05 F1 | 	add	objptr, ##28228
09b6c     F2 36 02 FB | 	rdlong	local09, objptr
09b70     01 36 06 F1 | 	add	local09, #1
09b74     03 36 66 F0 | 	shl	local09, #3
09b78     02 00 00 FF 
09b7c     38 E4 85 F1 | 	sub	objptr, ##1080
09b80     F2 36 02 F1 | 	add	local09, objptr
09b84     1B 13 02 FB | 	rdlong	arg01, local09
09b88     A8 01 00 FF 
09b8c     32 14 06 F6 | 	mov	arg02, ##@LR__5720
09b90     35 00 00 FF 
09b94     0C E4 85 F1 | 	sub	objptr, ##27148
09b98     00 B3 B1 FD | 	call	#__system___string_cmp
09b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09ba0     2B FA 05 56 |  if_ne	mov	result1, #43
09ba4     D0 04 90 5D |  if_ne	jmp	#LR__0875
09ba8                 | LR__0854
09ba8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09ba8     37 00 00 FF 
09bac     44 E4 05 F1 | 	add	objptr, ##28228
09bb0     F2 14 02 FB | 	rdlong	arg02, objptr
09bb4     01 14 06 F1 | 	add	arg02, #1
09bb8     03 14 66 F0 | 	shl	arg02, #3
09bbc     02 00 00 FF 
09bc0     38 E4 85 F1 | 	sub	objptr, ##1080
09bc4     F2 14 02 F1 | 	add	arg02, objptr
09bc8     0A 13 02 FB | 	rdlong	arg01, arg02
09bcc     A8 01 00 FF 
09bd0     35 14 06 F6 | 	mov	arg02, ##@LR__5721
09bd4     35 00 00 FF 
09bd8     0C E4 85 F1 | 	sub	objptr, ##27148
09bdc     BC B2 B1 FD | 	call	#__system___string_cmp
09be0     00 FA 0D F2 | 	cmp	result1, #0 wz
09be4     37 00 00 AF 
09be8     44 E4 05 A1 |  if_e	add	objptr, ##28228
09bec     F2 38 02 AB |  if_e	rdlong	local10, objptr
09bf0     37 00 00 AF 
09bf4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09bf8     01 38 06 A1 |  if_e	add	local10, #1
09bfc     5C 01 90 AD |  if_e	jmp	#LR__0859
09c00     37 00 00 FF 
09c04     44 E4 05 F1 | 	add	objptr, ##28228
09c08     F2 38 02 FB | 	rdlong	local10, objptr
09c0c     37 00 00 FF 
09c10     44 E4 85 F1 | 	sub	objptr, ##28228
09c14     02 38 06 F1 | 	add	local10, #2
09c18     00 3A 06 F6 | 	mov	local11, #0
09c1c                 | '   l=ct+2 : m=0 : do
09c1c                 | LR__0855
09c1c                 | '   if isdec(lparts(l).part$) then 
09c1c     1C 2D 02 F6 | 	mov	local04, local10
09c20     03 2C 66 F0 | 	shl	local04, #3
09c24     35 00 00 FF 
09c28     0C E4 05 F1 | 	add	objptr, ##27148
09c2c     F2 2C 02 F1 | 	add	local04, objptr
09c30     16 13 02 FB | 	rdlong	arg01, local04
09c34     35 00 00 FF 
09c38     0C E4 85 F1 | 	sub	objptr, ##27148
09c3c     F8 CD BF FD | 	call	#_isdec
09c40     00 FA 0D F2 | 	cmp	result1, #0 wz
09c44     44 00 90 AD |  if_e	jmp	#LR__0856
09c48     1D 3D 02 F6 | 	mov	local12, local11
09c4c     13 3D 06 F1 | 	add	local12, #local01
09c50     1C 37 02 F6 | 	mov	local09, local10
09c54     03 36 66 F0 | 	shl	local09, #3
09c58     35 00 00 FF 
09c5c     0C E4 05 F1 | 	add	objptr, ##27148
09c60     F2 36 02 F1 | 	add	local09, objptr
09c64     1B 13 02 FB | 	rdlong	arg01, local09
09c68     00 14 06 F6 | 	mov	arg02, #0
09c6c     35 00 00 FF 
09c70     0C E4 85 F1 | 	sub	objptr, ##27148
09c74     EC E6 B1 FD | 	call	#__system____builtin_atoi
09c78     FD 3E 02 F6 | 	mov	local13, result1
09c7c                 | 	'.live	local13
09c7c                 | 	'.live	local12
09c7c     00 3C 8E F9 | 	altd	local12, #0
09c80     1F 3D 02 F6 | 	mov	local12, local13
09c84     01 3A 06 F1 | 	add	local11, #1
09c88     08 00 90 FD | 	jmp	#LR__0857
09c8c                 | LR__0856
09c8c                 | '     return(17)
09c8c     11 FA 05 F6 | 	mov	result1, #17
09c90     E4 03 90 FD | 	jmp	#LR__0875
09c94                 | LR__0857
09c94                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09c94     1C 2D 02 F6 | 	mov	local04, local10
09c98     01 2C 06 F1 | 	add	local04, #1
09c9c     03 2C 66 F0 | 	shl	local04, #3
09ca0     35 00 00 FF 
09ca4     0C E4 05 F1 | 	add	objptr, ##27148
09ca8     F2 2C 02 F1 | 	add	local04, objptr
09cac     16 13 02 FB | 	rdlong	arg01, local04
09cb0     A8 01 00 FF 
09cb4     38 14 06 F6 | 	mov	arg02, ##@LR__5722
09cb8     35 00 00 FF 
09cbc     0C E4 85 F1 | 	sub	objptr, ##27148
09cc0     D8 B1 B1 FD | 	call	#__system___string_cmp
09cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09cc8     3C 00 90 AD |  if_e	jmp	#LR__0858
09ccc     1C 3F 02 F6 | 	mov	local13, local10
09cd0     01 3E 06 F1 | 	add	local13, #1
09cd4     03 3E 66 F0 | 	shl	local13, #3
09cd8     35 00 00 FF 
09cdc     0C E4 05 F1 | 	add	objptr, ##27148
09ce0     F2 3E 02 F1 | 	add	local13, objptr
09ce4     1F 13 02 FB | 	rdlong	arg01, local13
09ce8     A8 01 00 FF 
09cec     3A 14 06 F6 | 	mov	arg02, ##@LR__5723
09cf0     35 00 00 FF 
09cf4     0C E4 85 F1 | 	sub	objptr, ##27148
09cf8     A0 B1 B1 FD | 	call	#__system___string_cmp
09cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
09d00     2C FA 05 56 |  if_ne	mov	result1, #44
09d04     70 03 90 5D |  if_ne	jmp	#LR__0875
09d08                 | LR__0858
09d08     02 38 06 F1 | 	add	local10, #2
09d0c     1C 2D 02 F6 | 	mov	local04, local10
09d10     01 2C 86 F1 | 	sub	local04, #1
09d14     03 2C 66 F0 | 	shl	local04, #3
09d18     35 00 00 FF 
09d1c     0C E4 05 F1 | 	add	objptr, ##27148
09d20     F2 2C 02 F1 | 	add	local04, objptr
09d24     16 13 02 FB | 	rdlong	arg01, local04
09d28     A8 01 00 FF 
09d2c     3C 14 06 F6 | 	mov	arg02, ##@LR__5724
09d30     35 00 00 FF 
09d34     0C E4 85 F1 | 	sub	objptr, ##27148
09d38     60 B1 B1 FD | 	call	#__system___string_cmp
09d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
09d40     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09d44     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0855
09d48                 | '   if m>3 then return 45
09d48     04 3A 56 F2 | 	cmps	local11, #4 wc
09d4c     2D FA 05 36 |  if_ae	mov	result1, #45
09d50     24 03 90 3D |  if_ae	jmp	#LR__0875
09d54     00 41 06 F6 | 	mov	local14, #256
09d58     0C 42 06 F6 | 	mov	local15, #12
09d5c                 | LR__0859
09d5c                 | '   arraytype=array_no_type : esize=12
09d5c                 | ' 1350 
09d5c                 | '   if lparts(l).part$="as" then
09d5c     1C 2D 02 F6 | 	mov	local04, local10
09d60     03 2C 66 F0 | 	shl	local04, #3
09d64     35 00 00 FF 
09d68     0C E4 05 F1 | 	add	objptr, ##27148
09d6c     F2 2C 02 F1 | 	add	local04, objptr
09d70     16 13 02 FB | 	rdlong	arg01, local04
09d74     A8 01 00 FF 
09d78     3E 14 06 F6 | 	mov	arg02, ##@LR__5725
09d7c     35 00 00 FF 
09d80     0C E4 85 F1 | 	sub	objptr, ##27148
09d84     14 B1 B1 FD | 	call	#__system___string_cmp
09d88     00 FA 0D F2 | 	cmp	result1, #0 wz
09d8c     E8 01 90 5D |  if_ne	jmp	#LR__0874
09d90                 | '     select case lparts(l+1).part$
09d90     1C 3D 02 F6 | 	mov	local12, local10
09d94     01 3C 06 F1 | 	add	local12, #1
09d98     03 3C 66 F0 | 	shl	local12, #3
09d9c     35 00 00 FF 
09da0     0C E4 05 F1 | 	add	objptr, ##27148
09da4     F2 3C 02 F1 | 	add	local12, objptr
09da8     1E 45 02 FB | 	rdlong	local16, local12
09dac     A8 01 00 FF 
09db0     41 14 06 F6 | 	mov	arg02, ##@LR__5726
09db4     22 13 02 F6 | 	mov	arg01, local16
09db8     35 00 00 FF 
09dbc     0C E4 85 F1 | 	sub	objptr, ##27148
09dc0     D8 B0 B1 FD | 	call	#__system___string_cmp
09dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09dc8     0C 01 90 AD |  if_e	jmp	#LR__0860
09dcc     A8 01 00 FF 
09dd0     46 14 06 F6 | 	mov	arg02, ##@LR__5727
09dd4     22 13 02 F6 | 	mov	arg01, local16
09dd8     C0 B0 B1 FD | 	call	#__system___string_cmp
09ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
09de0     00 01 90 AD |  if_e	jmp	#LR__0861
09de4     A8 01 00 FF 
09de8     4C 14 06 F6 | 	mov	arg02, ##@LR__5728
09dec     22 13 02 F6 | 	mov	arg01, local16
09df0     A8 B0 B1 FD | 	call	#__system___string_cmp
09df4     00 FA 0D F2 | 	cmp	result1, #0 wz
09df8     F4 00 90 AD |  if_e	jmp	#LR__0862
09dfc     A8 01 00 FF 
09e00     52 14 06 F6 | 	mov	arg02, ##@LR__5729
09e04     22 13 02 F6 | 	mov	arg01, local16
09e08     90 B0 B1 FD | 	call	#__system___string_cmp
09e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e10     E8 00 90 AD |  if_e	jmp	#LR__0863
09e14     A8 01 00 FF 
09e18     59 14 06 F6 | 	mov	arg02, ##@LR__5730
09e1c     22 13 02 F6 | 	mov	arg01, local16
09e20     78 B0 B1 FD | 	call	#__system___string_cmp
09e24     00 FA 0D F2 | 	cmp	result1, #0 wz
09e28     DC 00 90 AD |  if_e	jmp	#LR__0864
09e2c     A8 01 00 FF 
09e30     5E 14 06 F6 | 	mov	arg02, ##@LR__5731
09e34     22 13 02 F6 | 	mov	arg01, local16
09e38     60 B0 B1 FD | 	call	#__system___string_cmp
09e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e40     D0 00 90 AD |  if_e	jmp	#LR__0865
09e44     A8 01 00 FF 
09e48     66 14 06 F6 | 	mov	arg02, ##@LR__5732
09e4c     22 13 02 F6 | 	mov	arg01, local16
09e50     48 B0 B1 FD | 	call	#__system___string_cmp
09e54     00 FA 0D F2 | 	cmp	result1, #0 wz
09e58     C4 00 90 AD |  if_e	jmp	#LR__0866
09e5c     A8 01 00 FF 
09e60     6C 14 06 F6 | 	mov	arg02, ##@LR__5733
09e64     22 13 02 F6 | 	mov	arg01, local16
09e68     30 B0 B1 FD | 	call	#__system___string_cmp
09e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e70     B8 00 90 AD |  if_e	jmp	#LR__0867
09e74     A8 01 00 FF 
09e78     72 14 06 F6 | 	mov	arg02, ##@LR__5734
09e7c     22 13 02 F6 | 	mov	arg01, local16
09e80     18 B0 B1 FD | 	call	#__system___string_cmp
09e84     00 FA 0D F2 | 	cmp	result1, #0 wz
09e88     AC 00 90 AD |  if_e	jmp	#LR__0868
09e8c     A8 01 00 FF 
09e90     79 14 06 F6 | 	mov	arg02, ##@LR__5735
09e94     22 13 02 F6 | 	mov	arg01, local16
09e98     00 B0 B1 FD | 	call	#__system___string_cmp
09e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09ea0     A0 00 90 AD |  if_e	jmp	#LR__0869
09ea4     A8 01 00 FF 
09ea8     80 14 06 F6 | 	mov	arg02, ##@LR__5736
09eac     22 13 02 F6 | 	mov	arg01, local16
09eb0     E8 AF B1 FD | 	call	#__system___string_cmp
09eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
09eb8     94 00 90 AD |  if_e	jmp	#LR__0870
09ebc     A8 01 00 FF 
09ec0     87 14 06 F6 | 	mov	arg02, ##@LR__5737
09ec4     22 13 02 F6 | 	mov	arg01, local16
09ec8     D0 AF B1 FD | 	call	#__system___string_cmp
09ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ed0     88 00 90 AD |  if_e	jmp	#LR__0871
09ed4     90 00 90 FD | 	jmp	#LR__0872
09ed8                 | LR__0860
09ed8     01 41 06 F6 | 	mov	local14, #257
09edc     01 42 06 F6 | 	mov	local15, #1
09ee0     94 00 90 FD | 	jmp	#LR__0874
09ee4                 | LR__0861
09ee4     02 41 06 F6 | 	mov	local14, #258
09ee8     01 42 06 F6 | 	mov	local15, #1
09eec     88 00 90 FD | 	jmp	#LR__0874
09ef0                 | LR__0862
09ef0     03 41 06 F6 | 	mov	local14, #259
09ef4     02 42 06 F6 | 	mov	local15, #2
09ef8     7C 00 90 FD | 	jmp	#LR__0874
09efc                 | LR__0863
09efc     04 41 06 F6 | 	mov	local14, #260
09f00     02 42 06 F6 | 	mov	local15, #2
09f04     70 00 90 FD | 	jmp	#LR__0874
09f08                 | LR__0864
09f08     05 41 06 F6 | 	mov	local14, #261
09f0c     04 42 06 F6 | 	mov	local15, #4
09f10     64 00 90 FD | 	jmp	#LR__0874
09f14                 | LR__0865
09f14     05 41 06 F6 | 	mov	local14, #261
09f18     04 42 06 F6 | 	mov	local15, #4
09f1c     58 00 90 FD | 	jmp	#LR__0874
09f20                 | LR__0866
09f20     06 41 06 F6 | 	mov	local14, #262
09f24     04 42 06 F6 | 	mov	local15, #4
09f28     4C 00 90 FD | 	jmp	#LR__0874
09f2c                 | LR__0867
09f2c     07 41 06 F6 | 	mov	local14, #263
09f30     08 42 06 F6 | 	mov	local15, #8
09f34     40 00 90 FD | 	jmp	#LR__0874
09f38                 | LR__0868
09f38     08 41 06 F6 | 	mov	local14, #264
09f3c     08 42 06 F6 | 	mov	local15, #8
09f40     34 00 90 FD | 	jmp	#LR__0874
09f44                 | LR__0869
09f44     09 41 06 F6 | 	mov	local14, #265
09f48     04 42 06 F6 | 	mov	local15, #4
09f4c     28 00 90 FD | 	jmp	#LR__0874
09f50                 | LR__0870
09f50     0A 41 06 F6 | 	mov	local14, #266
09f54     08 42 06 F6 | 	mov	local15, #8
09f58     1C 00 90 FD | 	jmp	#LR__0874
09f5c                 | LR__0871
09f5c     0B 41 06 F6 | 	mov	local14, #267
09f60     04 42 06 F6 | 	mov	local15, #4
09f64     10 00 90 FD | 	jmp	#LR__0874
09f68                 | LR__0872
09f68     2F FA 05 F6 | 	mov	result1, #47
09f6c     08 01 90 FD | 	jmp	#LR__0875
09f70                 | LR__0873
09f70                 | '   return 46
09f70     2E FA 05 F6 | 	mov	result1, #46
09f74     00 01 90 FD | 	jmp	#LR__0875
09f78                 | LR__0874
09f78     13 43 02 FD | 	qmul	local15, local01
09f7c     18 32 62 FD | 	getqx	local07
09f80     14 33 02 FD | 	qmul	local07, local02
09f84     18 44 62 FD | 	getqx	local16
09f88     15 45 02 FD | 	qmul	local16, local03
09f8c     51 00 00 FF 
09f90     D4 E5 05 F1 | 	add	objptr, ##41940
09f94     F2 46 02 FB | 	rdlong	local17, objptr
09f98     20 15 02 F6 | 	mov	arg02, local14
09f9c     18 44 62 FD | 	getqx	local16
09fa0     22 47 82 F1 | 	sub	local17, local16
09fa4     10 46 86 F1 | 	sub	local17, #16
09fa8     0F 46 26 F5 | 	andn	local17, #15
09fac     F2 46 62 FC | 	wrlong	local17, objptr
09fb0     51 00 00 FF 
09fb4     D4 E5 85 F1 | 	sub	objptr, ##41940
09fb8     23 13 02 F6 | 	mov	arg01, local17
09fbc     F8 76 B1 FD | 	call	#_psdpoke
09fc0     23 13 02 F6 | 	mov	arg01, local17
09fc4     02 12 06 F1 | 	add	arg01, #2
09fc8     21 15 02 F6 | 	mov	arg02, local15
09fcc     E8 76 B1 FD | 	call	#_psdpoke
09fd0     23 13 02 F6 | 	mov	arg01, local17
09fd4     04 12 06 F1 | 	add	arg01, #4
09fd8     13 15 02 F6 | 	mov	arg02, local01
09fdc     90 76 B1 FD | 	call	#_pslpoke
09fe0     23 13 02 F6 | 	mov	arg01, local17
09fe4     08 12 06 F1 | 	add	arg01, #8
09fe8     14 15 02 F6 | 	mov	arg02, local02
09fec     80 76 B1 FD | 	call	#_pslpoke
09ff0     23 13 02 F6 | 	mov	arg01, local17
09ff4     0C 12 06 F1 | 	add	arg01, #12
09ff8     15 15 02 F6 | 	mov	arg02, local03
09ffc     70 76 B1 FD | 	call	#_pslpoke
0a000     18 3D 02 F6 | 	mov	local12, local06
0a004     04 3C 66 F0 | 	shl	local12, #4
0a008     14 00 00 FF 
0a00c     F8 E5 05 F1 | 	add	objptr, ##10744
0a010     F2 3C 02 F1 | 	add	local12, objptr
0a014     1E 2F 62 FC | 	wrlong	local05, local12
0a018     18 3D 02 F6 | 	mov	local12, local06
0a01c     04 3C 66 F0 | 	shl	local12, #4
0a020     F2 3C 02 F1 | 	add	local12, objptr
0a024     04 3C 06 F1 | 	add	local12, #4
0a028     1E 47 62 FC | 	wrlong	local17, local12
0a02c     18 3D 02 F6 | 	mov	local12, local06
0a030     04 3C 66 F0 | 	shl	local12, #4
0a034     F2 3C 02 F1 | 	add	local12, objptr
0a038     0C 3C 06 F1 | 	add	local12, #12
0a03c     1E 41 62 FC | 	wrlong	local14, local12
0a040                 | ' memtop=arrayptr
0a040                 | ' psdpoke arrayptr,arraytype 
0a040                 | ' psdpoke arrayptr+2,esize 
0a040                 | ' pslpoke arrayptr+4,dims(0)
0a040                 | ' pslpoke arrayptr+8,dims(1)
0a040                 | ' pslpoke arrayptr+12,dims(2)
0a040                 | ' variables(j).name=varname2$
0a040                 | ' variables(j).value.uresult=arrayptr
0a040                 | ' variables(j).vartype=arraytype
0a040                 | ' if j=varnum then varnum+=1
0a040     20 00 00 FF 
0a044     10 E4 05 F1 | 	add	objptr, ##16400
0a048     F2 32 02 FB | 	rdlong	local07, objptr
0a04c     35 00 00 FF 
0a050     08 E4 85 F1 | 	sub	objptr, ##27144
0a054     19 31 0A F2 | 	cmp	local06, local07 wz
0a058     35 00 00 AF 
0a05c     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a060     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a064     01 32 06 A1 |  if_e	add	local07, #1
0a068     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a06c     35 00 00 AF 
0a070     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a074                 | ' return 0
0a074     00 FA 05 F6 | 	mov	result1, #0
0a078                 | LR__0875
0a078     A7 F0 03 F6 | 	mov	ptra, fp
0a07c     B2 00 A0 FD | 	call	#popregs_
0a080                 | _compile_dim_ret
0a080     2D 00 64 FD | 	ret
0a084                 | 
0a084                 | ' 
0a084                 | ' '----- compile 'for' command. 
0a084                 | ' 
0a084                 | ' function compile_for() as ulong  
0a084                 | _compile_for
0a084     05 4A 05 F6 | 	mov	COUNT_, #5
0a088     A8 00 A0 FD | 	call	#pushregs_
0a08c                 | ' 
0a08c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a08c     37 00 00 FF 
0a090     44 E4 05 F1 | 	add	objptr, ##28228
0a094     F2 14 02 FB | 	rdlong	arg02, objptr
0a098     01 14 06 F1 | 	add	arg02, #1
0a09c     03 14 66 F0 | 	shl	arg02, #3
0a0a0     02 00 00 FF 
0a0a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0a8     F2 14 02 F1 | 	add	arg02, objptr
0a0ac     0A 13 02 FB | 	rdlong	arg01, arg02
0a0b0     35 00 00 FF 
0a0b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0b8                 | ' 
0a0b8                 | ' select case s
0a0b8     A5 01 00 FF 
0a0bc     A4 15 06 F6 | 	mov	arg02, ##@LR__5471
0a0c0     D8 AD B1 FD | 	call	#__system___string_cmp
0a0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0c8     1B FA 05 A6 |  if_e	mov	result1, #27
0a0cc     00 FA 05 56 |  if_ne	mov	result1, #0
0a0d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0d4     0C 00 90 AD |  if_e	jmp	#LR__0880
0a0d8     05 12 06 F6 | 	mov	arg01, #5
0a0dc     A8 DB BF FD | 	call	#_compile_immediate_assign
0a0e0     08 00 90 FD | 	jmp	#LR__0881
0a0e4                 | LR__0880
0a0e4     20 FA 05 F6 | 	mov	result1, #32
0a0e8     D0 02 90 FD | 	jmp	#LR__0885
0a0ec                 | LR__0881
0a0ec     4A 00 00 FF 
0a0f0     7C E4 05 F1 | 	add	objptr, ##38012
0a0f4     F2 14 02 FB | 	rdlong	arg02, objptr
0a0f8     0A 13 02 F6 | 	mov	arg01, arg02
0a0fc     01 12 86 F1 | 	sub	arg01, #1
0a100     09 2D 02 F6 | 	mov	local04, arg01
0a104     01 2C 66 F0 | 	shl	local04, #1
0a108     09 2D 02 F1 | 	add	local04, arg01
0a10c     02 2C 66 F0 | 	shl	local04, #2
0a110     03 00 00 FF 
0a114     00 E4 85 F1 | 	sub	objptr, ##1536
0a118     F2 2C 02 F1 | 	add	local04, objptr
0a11c     16 27 02 FB | 	rdlong	local01, local04
0a120     04 2C 06 F1 | 	add	local04, #4
0a124     16 2D 02 FB | 	rdlong	local04, local04
0a128     01 14 86 F1 | 	sub	arg02, #1
0a12c     0A 13 02 F6 | 	mov	arg01, arg02
0a130     01 12 66 F0 | 	shl	arg01, #1
0a134     0A 13 02 F1 | 	add	arg01, arg02
0a138     02 12 66 F0 | 	shl	arg01, #2
0a13c     F2 12 02 F1 | 	add	arg01, objptr
0a140     08 12 06 F1 | 	add	arg01, #8
0a144     09 15 02 FB | 	rdlong	arg02, arg01
0a148     16 29 02 F6 | 	mov	local02, local04
0a14c     0A 2B 02 F6 | 	mov	local03, arg02
0a150                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a150     17 2A 0E F2 | 	cmp	local03, #23 wz
0a154     47 00 00 FF 
0a158     7C E4 85 F1 | 	sub	objptr, ##36476
0a15c     22 FA 05 56 |  if_ne	mov	result1, #34
0a160     58 02 90 5D |  if_ne	jmp	#LR__0885
0a164     13 2F 02 F6 | 	mov	local05, local01
0a168                 | ' varnum=t1.result.uresult
0a168                 | ' if lparts(ct).part$<>"to" then return 33
0a168     37 00 00 FF 
0a16c     44 E4 05 F1 | 	add	objptr, ##28228
0a170     F2 26 02 FB | 	rdlong	local01, objptr
0a174     03 26 66 F0 | 	shl	local01, #3
0a178     02 00 00 FF 
0a17c     38 E4 85 F1 | 	sub	objptr, ##1080
0a180     F2 26 02 F1 | 	add	local01, objptr
0a184     13 13 02 FB | 	rdlong	arg01, local01
0a188     A8 01 00 FF 
0a18c     8E 14 06 F6 | 	mov	arg02, ##@LR__5738
0a190     35 00 00 FF 
0a194     0C E4 85 F1 | 	sub	objptr, ##27148
0a198     00 AD B1 FD | 	call	#__system___string_cmp
0a19c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1a0     21 FA 05 56 |  if_ne	mov	result1, #33
0a1a4     14 02 90 5D |  if_ne	jmp	#LR__0885
0a1a8     37 00 00 FF 
0a1ac     44 E4 05 F1 | 	add	objptr, ##28228
0a1b0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1b4     01 2C 06 F1 | 	add	local04, #1
0a1b8     F2 2C 62 FC | 	wrlong	local04, objptr
0a1bc     37 00 00 FF 
0a1c0     44 E4 85 F1 | 	sub	objptr, ##28228
0a1c4     A8 11 B0 FD | 	call	#_expr
0a1c8                 | ' ct+=1
0a1c8                 | ' expr()  										' there is "to" value pushed on the stack
0a1c8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0a1c8     37 00 00 FF 
0a1cc     44 E4 05 F1 | 	add	objptr, ##28228
0a1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1d4     03 2C 66 F0 | 	shl	local04, #3
0a1d8     02 00 00 FF 
0a1dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a1e0     F2 2C 02 F1 | 	add	local04, objptr
0a1e4     16 13 02 FB | 	rdlong	arg01, local04
0a1e8     A8 01 00 FF 
0a1ec     91 14 06 F6 | 	mov	arg02, ##@LR__5739
0a1f0     35 00 00 FF 
0a1f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a1f8     A0 AC B1 FD | 	call	#__system___string_cmp
0a1fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a200     3C 00 90 AD |  if_e	jmp	#LR__0882
0a204     37 00 00 FF 
0a208     44 E4 05 F1 | 	add	objptr, ##28228
0a20c     F2 2C 02 FB | 	rdlong	local04, objptr
0a210     03 2C 66 F0 | 	shl	local04, #3
0a214     02 00 00 FF 
0a218     38 E4 85 F1 | 	sub	objptr, ##1080
0a21c     F2 2C 02 F1 | 	add	local04, objptr
0a220     16 13 02 FB | 	rdlong	arg01, local04
0a224     A8 01 00 FF 
0a228     96 14 06 F6 | 	mov	arg02, ##@LR__5740
0a22c     35 00 00 FF 
0a230     0C E4 85 F1 | 	sub	objptr, ##27148
0a234     64 AC B1 FD | 	call	#__system___string_cmp
0a238     00 FA 0D F2 | 	cmp	result1, #0 wz
0a23c     24 00 90 5D |  if_ne	jmp	#LR__0883
0a240                 | LR__0882
0a240     37 00 00 FF 
0a244     44 E4 05 F1 | 	add	objptr, ##28228
0a248     F2 26 02 FB | 	rdlong	local01, objptr
0a24c     01 26 06 F1 | 	add	local01, #1
0a250     F2 26 62 FC | 	wrlong	local01, objptr
0a254     37 00 00 FF 
0a258     44 E4 85 F1 | 	sub	objptr, ##28228
0a25c     10 11 B0 FD | 	call	#_expr
0a260     78 00 90 FD | 	jmp	#LR__0884
0a264                 | LR__0883
0a264     4A 00 00 FF 
0a268     7C E4 05 F1 | 	add	objptr, ##38012
0a26c     F2 26 02 FB | 	rdlong	local01, objptr
0a270     13 2D 02 F6 | 	mov	local04, local01
0a274     01 2C 66 F0 | 	shl	local04, #1
0a278     13 2D 02 F1 | 	add	local04, local01
0a27c     02 2C 66 F0 | 	shl	local04, #2
0a280     03 00 00 FF 
0a284     00 E4 85 F1 | 	sub	objptr, ##1536
0a288     F2 2C 02 F1 | 	add	local04, objptr
0a28c     08 2C 06 F1 | 	add	local04, #8
0a290     16 39 68 FC | 	wrlong	#28, local04
0a294     03 00 00 FF 
0a298     00 E4 05 F1 | 	add	objptr, ##1536
0a29c     F2 26 02 FB | 	rdlong	local01, objptr
0a2a0     13 2D 02 F6 | 	mov	local04, local01
0a2a4     01 2C 66 F0 | 	shl	local04, #1
0a2a8     13 2D 02 F1 | 	add	local04, local01
0a2ac     02 2C 66 F0 | 	shl	local04, #2
0a2b0     03 00 00 FF 
0a2b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a2b8     F2 2C 02 F1 | 	add	local04, objptr
0a2bc     16 03 68 FC | 	wrlong	#1, local04
0a2c0     03 00 00 FF 
0a2c4     00 E4 05 F1 | 	add	objptr, ##1536
0a2c8     F2 26 02 FB | 	rdlong	local01, objptr
0a2cc     01 26 06 F1 | 	add	local01, #1
0a2d0     F2 26 62 FC | 	wrlong	local01, objptr
0a2d4     4A 00 00 FF 
0a2d8     7C E4 85 F1 | 	sub	objptr, ##38012
0a2dc                 | LR__0884
0a2dc     4A 00 00 FF 
0a2e0     7C E4 05 F1 | 	add	objptr, ##38012
0a2e4     F2 26 02 FB | 	rdlong	local01, objptr
0a2e8     13 2D 02 F6 | 	mov	local04, local01
0a2ec     01 2C 66 F0 | 	shl	local04, #1
0a2f0     13 2D 02 F1 | 	add	local04, local01
0a2f4     02 2C 66 F0 | 	shl	local04, #2
0a2f8     03 00 00 FF 
0a2fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a300     F2 2C 02 F1 | 	add	local04, objptr
0a304     08 2C 06 F1 | 	add	local04, #8
0a308     16 39 68 FC | 	wrlong	#28, local04
0a30c     03 00 00 FF 
0a310     00 E4 05 F1 | 	add	objptr, ##1536
0a314     F2 26 02 FB | 	rdlong	local01, objptr
0a318     13 2D 02 F6 | 	mov	local04, local01
0a31c     01 2C 66 F0 | 	shl	local04, #1
0a320     13 2D 02 F1 | 	add	local04, local01
0a324     02 2C 66 F0 | 	shl	local04, #2
0a328     03 00 00 FF 
0a32c     00 E4 85 F1 | 	sub	objptr, ##1536
0a330     F2 2C 02 F1 | 	add	local04, objptr
0a334     16 2F 62 FC | 	wrlong	local05, local04
0a338     03 00 00 FF 
0a33c     00 E4 05 F1 | 	add	objptr, ##1536
0a340     F2 2E 02 FB | 	rdlong	local05, objptr
0a344     01 2E 06 F1 | 	add	local05, #1
0a348     F2 2E 62 FC | 	wrlong	local05, objptr
0a34c     17 27 02 F6 | 	mov	local01, local05
0a350     01 26 66 F0 | 	shl	local01, #1
0a354     17 27 02 F1 | 	add	local01, local05
0a358     02 26 66 F0 | 	shl	local01, #2
0a35c     03 00 00 FF 
0a360     00 E4 85 F1 | 	sub	objptr, ##1536
0a364     F2 26 02 F1 | 	add	local01, objptr
0a368     08 26 06 F1 | 	add	local01, #8
0a36c     13 95 68 FC | 	wrlong	#74, local01
0a370     03 00 00 FF 
0a374     00 E4 05 F1 | 	add	objptr, ##1536
0a378     F2 2E 02 FB | 	rdlong	local05, objptr
0a37c     17 27 02 F6 | 	mov	local01, local05
0a380     01 26 66 F0 | 	shl	local01, #1
0a384     17 27 02 F1 | 	add	local01, local05
0a388     02 26 66 F0 | 	shl	local01, #2
0a38c     03 00 00 FF 
0a390     00 E4 85 F1 | 	sub	objptr, ##1536
0a394     F2 26 02 F1 | 	add	local01, objptr
0a398     13 01 68 FC | 	wrlong	#0, local01
0a39c     03 00 00 FF 
0a3a0     00 E4 05 F1 | 	add	objptr, ##1536
0a3a4     F2 2E 02 FB | 	rdlong	local05, objptr
0a3a8     01 2E 06 F1 | 	add	local05, #1
0a3ac     F2 2E 62 FC | 	wrlong	local05, objptr
0a3b0     4A 00 00 FF 
0a3b4     7C E4 85 F1 | 	sub	objptr, ##38012
0a3b8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0a3b8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a3b8                 | ' return 0
0a3b8     00 FA 05 F6 | 	mov	result1, #0
0a3bc                 | LR__0885
0a3bc     A7 F0 03 F6 | 	mov	ptra, fp
0a3c0     B2 00 A0 FD | 	call	#popregs_
0a3c4                 | _compile_for_ret
0a3c4     2D 00 64 FD | 	ret
0a3c8                 | 
0a3c8                 | ' 
0a3c8                 | ' '----- compile 'next' command. 
0a3c8                 | ' 
0a3c8                 | ' function compile_next() as ulong
0a3c8                 | _compile_next
0a3c8     04 4A 05 F6 | 	mov	COUNT_, #4
0a3cc     A8 00 A0 FD | 	call	#pushregs_
0a3d0     37 00 00 FF 
0a3d4     44 E4 05 F1 | 	add	objptr, ##28228
0a3d8     F2 14 02 FB | 	rdlong	arg02, objptr
0a3dc     03 14 66 F0 | 	shl	arg02, #3
0a3e0     02 00 00 FF 
0a3e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a3e8     F2 14 02 F1 | 	add	arg02, objptr
0a3ec     0A 27 02 FB | 	rdlong	local01, arg02
0a3f0                 | ' 
0a3f0                 | ' varname$=lparts(ct).part$ 
0a3f0                 | ' if varnum=0 then return 35
0a3f0     04 E4 85 F1 | 	sub	objptr, #4
0a3f4     F2 14 0A FB | 	rdlong	arg02, objptr wz
0a3f8     35 00 00 FF 
0a3fc     08 E4 85 F1 | 	sub	objptr, ##27144
0a400     23 FA 05 A6 |  if_e	mov	result1, #35
0a404     4C 01 90 AD |  if_e	jmp	#LR__0892
0a408     01 28 66 F6 | 	neg	local02, #1
0a40c                 | ' j=-1
0a40c                 | ' for i=0 to varnum-1
0a40c     00 2A 06 F6 | 	mov	local03, #0
0a410     35 00 00 FF 
0a414     08 E4 05 F1 | 	add	objptr, ##27144
0a418     F2 2C 02 FB | 	rdlong	local04, objptr
0a41c     35 00 00 FF 
0a420     08 E4 85 F1 | 	sub	objptr, ##27144
0a424                 | LR__0890
0a424     16 2B 12 F2 | 	cmp	local03, local04 wc
0a428     38 00 90 3D |  if_ae	jmp	#LR__0891
0a42c                 | '   if variables(i).name=varname$ then j=i : exit
0a42c     15 15 02 F6 | 	mov	arg02, local03
0a430     04 14 66 F0 | 	shl	arg02, #4
0a434     14 00 00 FF 
0a438     F8 E5 05 F1 | 	add	objptr, ##10744
0a43c     F2 14 02 F1 | 	add	arg02, objptr
0a440     0A 13 02 FB | 	rdlong	arg01, arg02
0a444     13 15 02 F6 | 	mov	arg02, local01
0a448     14 00 00 FF 
0a44c     F8 E5 85 F1 | 	sub	objptr, ##10744
0a450     48 AA B1 FD | 	call	#__system___string_cmp
0a454     00 FA 0D F2 | 	cmp	result1, #0 wz
0a458     15 29 02 A6 |  if_e	mov	local02, local03
0a45c     01 2A 06 51 |  if_ne	add	local03, #1
0a460     C0 FF 9F 5D |  if_ne	jmp	#LR__0890
0a464                 | LR__0891
0a464                 | ' if j=-1 then return 35
0a464     FF FF 7F FF 
0a468     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0a46c     23 FA 05 A6 |  if_e	mov	result1, #35
0a470     E0 00 90 AD |  if_e	jmp	#LR__0892
0a474     4A 00 00 FF 
0a478     7C E4 05 F1 | 	add	objptr, ##38012
0a47c     F2 2C 02 FB | 	rdlong	local04, objptr
0a480     16 2B 02 F6 | 	mov	local03, local04
0a484     01 2A 66 F0 | 	shl	local03, #1
0a488     16 2B 02 F1 | 	add	local03, local04
0a48c     02 2A 66 F0 | 	shl	local03, #2
0a490     03 00 00 FF 
0a494     00 E4 85 F1 | 	sub	objptr, ##1536
0a498     F2 2A 02 F1 | 	add	local03, objptr
0a49c     08 2A 06 F1 | 	add	local03, #8
0a4a0     15 39 68 FC | 	wrlong	#28, local03
0a4a4     03 00 00 FF 
0a4a8     00 E4 05 F1 | 	add	objptr, ##1536
0a4ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a4b0     16 2B 02 F6 | 	mov	local03, local04
0a4b4     01 2A 66 F0 | 	shl	local03, #1
0a4b8     16 2B 02 F1 | 	add	local03, local04
0a4bc     02 2A 66 F0 | 	shl	local03, #2
0a4c0     03 00 00 FF 
0a4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4c8     F2 2A 02 F1 | 	add	local03, objptr
0a4cc     15 29 62 FC | 	wrlong	local02, local03
0a4d0     03 00 00 FF 
0a4d4     00 E4 05 F1 | 	add	objptr, ##1536
0a4d8     F2 2C 02 FB | 	rdlong	local04, objptr
0a4dc     01 2C 06 F1 | 	add	local04, #1
0a4e0     F2 2C 62 FC | 	wrlong	local04, objptr
0a4e4     16 2B 02 F6 | 	mov	local03, local04
0a4e8     01 2A 66 F0 | 	shl	local03, #1
0a4ec     16 2B 02 F1 | 	add	local03, local04
0a4f0     02 2A 66 F0 | 	shl	local03, #2
0a4f4     03 00 00 FF 
0a4f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a4fc     F2 2A 02 F1 | 	add	local03, objptr
0a500     08 2A 06 F1 | 	add	local03, #8
0a504     15 97 68 FC | 	wrlong	#75, local03
0a508     03 00 00 FF 
0a50c     00 E4 05 F1 | 	add	objptr, ##1536
0a510     F2 2C 02 FB | 	rdlong	local04, objptr
0a514     16 2B 02 F6 | 	mov	local03, local04
0a518     01 2A 66 F0 | 	shl	local03, #1
0a51c     16 2B 02 F1 | 	add	local03, local04
0a520     02 2A 66 F0 | 	shl	local03, #2
0a524     03 00 00 FF 
0a528     00 E4 85 F1 | 	sub	objptr, ##1536
0a52c     F2 2A 02 F1 | 	add	local03, objptr
0a530     15 01 68 FC | 	wrlong	#0, local03
0a534     03 00 00 FF 
0a538     00 E4 05 F1 | 	add	objptr, ##1536
0a53c     F2 2C 02 FB | 	rdlong	local04, objptr
0a540     01 2C 06 F1 | 	add	local04, #1
0a544     F2 2C 62 FC | 	wrlong	local04, objptr
0a548     4A 00 00 FF 
0a54c     7C E4 85 F1 | 	sub	objptr, ##38012
0a550                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0a550                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a550                 | ' return 0
0a550     00 FA 05 F6 | 	mov	result1, #0
0a554                 | LR__0892
0a554     A7 F0 03 F6 | 	mov	ptra, fp
0a558     B2 00 A0 FD | 	call	#popregs_
0a55c                 | _compile_next_ret
0a55c     2D 00 64 FD | 	ret
0a560                 | 
0a560                 | ' 
0a560                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0a560                 | ' 
0a560                 | ' function compile_gosub() as ulong
0a560                 | _compile_gosub
0a560     02 4A 05 F6 | 	mov	COUNT_, #2
0a564     A8 00 A0 FD | 	call	#pushregs_
0a568     4A 00 00 FF 
0a56c     7C E4 05 F1 | 	add	objptr, ##38012
0a570     F2 26 02 FB | 	rdlong	local01, objptr
0a574     13 29 02 F6 | 	mov	local02, local01
0a578     01 28 66 F0 | 	shl	local02, #1
0a57c     13 29 02 F1 | 	add	local02, local01
0a580     02 28 66 F0 | 	shl	local02, #2
0a584     03 00 00 FF 
0a588     00 E4 85 F1 | 	sub	objptr, ##1536
0a58c     F2 28 02 F1 | 	add	local02, objptr
0a590     08 28 06 F1 | 	add	local02, #8
0a594     14 53 69 FC | 	wrlong	#169, local02
0a598     03 00 00 FF 
0a59c     00 E4 05 F1 | 	add	objptr, ##1536
0a5a0     F2 28 02 FB | 	rdlong	local02, objptr
0a5a4     01 28 06 F1 | 	add	local02, #1
0a5a8     F2 28 62 FC | 	wrlong	local02, objptr
0a5ac     4A 00 00 FF 
0a5b0     7C E4 85 F1 | 	sub	objptr, ##38012
0a5b4     0C 00 B0 FD | 	call	#_compile_goto
0a5b8                 | ' compiledline(lineptr).result_type=token_gosub
0a5b8                 | ' lineptr+=1
0a5b8                 | ' err=compile_goto()
0a5b8                 | ' return err
0a5b8     A7 F0 03 F6 | 	mov	ptra, fp
0a5bc     B2 00 A0 FD | 	call	#popregs_
0a5c0                 | _compile_gosub_ret
0a5c0     2D 00 64 FD | 	ret
0a5c4                 | 
0a5c4                 | ' 
0a5c4                 | ' '----- compile 'goto' 
0a5c4                 | ' 
0a5c4                 | ' function compile_goto() as ulong
0a5c4                 | _compile_goto
0a5c4     03 4A 05 F6 | 	mov	COUNT_, #3
0a5c8     A8 00 A0 FD | 	call	#pushregs_
0a5cc     34 F0 07 F1 | 	add	ptra, #52
0a5d0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0a5d0     37 00 00 FF 
0a5d4     44 E4 05 F1 | 	add	objptr, ##28228
0a5d8     F2 16 02 FB | 	rdlong	arg03, objptr
0a5dc     03 16 66 F0 | 	shl	arg03, #3
0a5e0     02 00 00 FF 
0a5e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5e8     F2 16 02 F1 | 	add	arg03, objptr
0a5ec     04 16 06 F1 | 	add	arg03, #4
0a5f0     0B 17 02 FB | 	rdlong	arg03, arg03
0a5f4     01 00 00 FF 
0a5f8     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a5fc     35 00 00 FF 
0a600     0C E4 85 F1 | 	sub	objptr, ##27148
0a604     CC 02 90 5D |  if_ne	jmp	#LR__0905
0a608     37 00 00 FF 
0a60c     44 E4 05 F1 | 	add	objptr, ##28228
0a610     F2 16 02 FB | 	rdlong	arg03, objptr
0a614     01 16 06 F1 | 	add	arg03, #1
0a618     03 16 66 F0 | 	shl	arg03, #3
0a61c     02 00 00 FF 
0a620     38 E4 85 F1 | 	sub	objptr, ##1080
0a624     F2 16 02 F1 | 	add	arg03, objptr
0a628     04 16 06 F1 | 	add	arg03, #4
0a62c     0B 17 02 FB | 	rdlong	arg03, arg03
0a630     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a634     35 00 00 FF 
0a638     0C E4 85 F1 | 	sub	objptr, ##27148
0a63c     94 02 90 5D |  if_ne	jmp	#LR__0905
0a640     37 00 00 FF 
0a644     44 E4 05 F1 | 	add	objptr, ##28228
0a648     F2 16 02 FB | 	rdlong	arg03, objptr
0a64c     03 16 66 F0 | 	shl	arg03, #3
0a650     02 00 00 FF 
0a654     38 E4 85 F1 | 	sub	objptr, ##1080
0a658     F2 16 02 F1 | 	add	arg03, objptr
0a65c     0B 13 02 FB | 	rdlong	arg01, arg03
0a660     00 14 06 F6 | 	mov	arg02, #0
0a664     35 00 00 FF 
0a668     0C E4 85 F1 | 	sub	objptr, ##27148
0a66c     F4 DC B1 FD | 	call	#__system____builtin_atoi
0a670     04 4E 05 F1 | 	add	fp, #4
0a674     A7 FA 61 FC | 	wrlong	result1, fp
0a678     4A 00 00 FF 
0a67c     7C E4 05 F1 | 	add	objptr, ##38012
0a680     F2 26 02 FB | 	rdlong	local01, objptr
0a684     13 29 02 F6 | 	mov	local02, local01
0a688     01 28 66 F0 | 	shl	local02, #1
0a68c     13 29 02 F1 | 	add	local02, local01
0a690     02 28 66 F0 | 	shl	local02, #2
0a694     03 00 00 FF 
0a698     00 E4 85 F1 | 	sub	objptr, ##1536
0a69c     F2 28 02 F1 | 	add	local02, objptr
0a6a0     08 28 06 F1 | 	add	local02, #8
0a6a4     14 9D 68 FC | 	wrlong	#78, local02
0a6a8     03 00 00 FF 
0a6ac     0C E4 05 F1 | 	add	objptr, ##1548
0a6b0     F2 2A 02 FB | 	rdlong	local03, objptr
0a6b4     4A 00 00 FF 
0a6b8     88 E4 85 F1 | 	sub	objptr, ##38024
0a6bc     04 4E 05 F1 | 	add	fp, #4
0a6c0     A7 2A 62 FC | 	wrlong	local03, fp
0a6c4     08 4E 85 F1 | 	sub	fp, #8
0a6c8                 | '   gotoline=val%(lparts(ct).part$) 
0a6c8                 | '   compiledline(lineptr).result_type=token_fast_goto
0a6c8                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0a6c8                 | '   do
0a6c8                 | LR__0900
0a6c8     10 4E 05 F1 | 	add	fp, #16
0a6cc     A7 12 02 F6 | 	mov	arg01, fp
0a6d0     08 4E 85 F1 | 	sub	fp, #8
0a6d4     A7 14 02 FB | 	rdlong	arg02, fp
0a6d8     08 4E 85 F1 | 	sub	fp, #8
0a6dc     18 16 06 F6 | 	mov	arg03, #24
0a6e0     0B 00 00 FF 
0a6e4     CC E4 05 F1 | 	add	objptr, ##5836
0a6e8     48 9B B1 FD | 	call	#_psram_spin2_read1
0a6ec     0B 00 00 FF 
0a6f0     CC E4 85 F1 | 	sub	objptr, ##5836
0a6f4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a6f4                 | '     if gotoheader(0)<>$FFFFFFFF then
0a6f4     10 4E 05 F1 | 	add	fp, #16
0a6f8     A7 2A 02 FB | 	rdlong	local03, fp
0a6fc     10 4E 85 F1 | 	sub	fp, #16
0a700     FF FF 7F FF 
0a704     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0a708     24 00 90 AD |  if_e	jmp	#LR__0901
0a70c     08 4E 05 F1 | 	add	fp, #8
0a710     A7 2A 02 FB | 	rdlong	local03, fp
0a714     04 4E 05 F1 | 	add	fp, #4
0a718     A7 2A 62 FC | 	wrlong	local03, fp
0a71c     18 4E 05 F1 | 	add	fp, #24
0a720     A7 2A 02 FB | 	rdlong	local03, fp
0a724     1C 4E 85 F1 | 	sub	fp, #28
0a728     A7 2A 62 FC | 	wrlong	local03, fp
0a72c     08 4E 85 F1 | 	sub	fp, #8
0a730                 | LR__0901
0a730     24 4E 05 F1 | 	add	fp, #36
0a734     A7 2A 02 FB | 	rdlong	local03, fp
0a738     24 4E 85 F1 | 	sub	fp, #36
0a73c     FF FF 3F FF 
0a740     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0a744     10 4E 05 51 |  if_ne	add	fp, #16
0a748     A7 26 02 5B |  if_ne	rdlong	local01, fp
0a74c     10 4E 85 51 |  if_ne	sub	fp, #16
0a750     FF FF 7F 5F 
0a754     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a758     1C 00 90 AD |  if_e	jmp	#LR__0902
0a75c     10 4E 05 F1 | 	add	fp, #16
0a760     A7 2A 02 FB | 	rdlong	local03, fp
0a764     0C 4E 85 F1 | 	sub	fp, #12
0a768     A7 28 02 FB | 	rdlong	local02, fp
0a76c     04 4E 85 F1 | 	sub	fp, #4
0a770     14 2B 0A F2 | 	cmp	local03, local02 wz
0a774     50 FF 9F 5D |  if_ne	jmp	#LR__0900
0a778                 | LR__0902
0a778                 | '   if gotoheader(0)=gotoline then
0a778     10 4E 05 F1 | 	add	fp, #16
0a77c     A7 2A 02 FB | 	rdlong	local03, fp
0a780     0C 4E 85 F1 | 	sub	fp, #12
0a784     A7 26 02 FB | 	rdlong	local01, fp
0a788     04 4E 85 F1 | 	sub	fp, #4
0a78c     13 2B 0A F2 | 	cmp	local03, local01 wz
0a790     7C 00 90 5D |  if_ne	jmp	#LR__0903
0a794     4A 00 00 FF 
0a798     7C E4 05 F1 | 	add	objptr, ##38012
0a79c     F2 26 02 FB | 	rdlong	local01, objptr
0a7a0     13 29 02 F6 | 	mov	local02, local01
0a7a4     01 28 66 F0 | 	shl	local02, #1
0a7a8     13 29 02 F1 | 	add	local02, local01
0a7ac     02 28 66 F0 | 	shl	local02, #2
0a7b0     03 00 00 FF 
0a7b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7b8     F2 28 02 F1 | 	add	local02, objptr
0a7bc     0C 4E 05 F1 | 	add	fp, #12
0a7c0     A7 2A 02 FB | 	rdlong	local03, fp
0a7c4     14 2B 62 FC | 	wrlong	local03, local02
0a7c8     03 00 00 FF 
0a7cc     00 E4 05 F1 | 	add	objptr, ##1536
0a7d0     F2 26 02 FB | 	rdlong	local01, objptr
0a7d4     13 29 02 F6 | 	mov	local02, local01
0a7d8     01 28 66 F0 | 	shl	local02, #1
0a7dc     13 29 02 F1 | 	add	local02, local01
0a7e0     02 28 66 F0 | 	shl	local02, #2
0a7e4     03 00 00 FF 
0a7e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7ec     F2 28 02 F1 | 	add	local02, objptr
0a7f0     08 4E 85 F1 | 	sub	fp, #8
0a7f4     A7 2A 02 FB | 	rdlong	local03, fp
0a7f8     04 4E 85 F1 | 	sub	fp, #4
0a7fc     04 28 06 F1 | 	add	local02, #4
0a800     14 2B 62 FC | 	wrlong	local03, local02
0a804     47 00 00 FF 
0a808     7C E4 85 F1 | 	sub	objptr, ##36476
0a80c     A4 00 90 FD | 	jmp	#LR__0904
0a810                 | LR__0903
0a810     4A 00 00 FF 
0a814     7C E4 05 F1 | 	add	objptr, ##38012
0a818     F2 26 02 FB | 	rdlong	local01, objptr
0a81c     13 29 02 F6 | 	mov	local02, local01
0a820     01 28 66 F0 | 	shl	local02, #1
0a824     13 29 02 F1 | 	add	local02, local01
0a828     02 28 66 F0 | 	shl	local02, #2
0a82c     03 00 00 FF 
0a830     00 E4 85 F1 | 	sub	objptr, ##1536
0a834     F2 28 02 F1 | 	add	local02, objptr
0a838     00 00 C0 FF 
0a83c     14 01 68 FC | 	wrlong	##-2147483648, local02
0a840     03 00 00 FF 
0a844     00 E4 05 F1 | 	add	objptr, ##1536
0a848     F2 26 02 FB | 	rdlong	local01, objptr
0a84c     13 29 02 F6 | 	mov	local02, local01
0a850     01 28 66 F0 | 	shl	local02, #1
0a854     13 29 02 F1 | 	add	local02, local01
0a858     02 28 66 F0 | 	shl	local02, #2
0a85c     03 00 00 FF 
0a860     00 E4 85 F1 | 	sub	objptr, ##1536
0a864     F2 28 02 F1 | 	add	local02, objptr
0a868     04 4E 05 F1 | 	add	fp, #4
0a86c     A7 2A 02 FB | 	rdlong	local03, fp
0a870     04 4E 85 F1 | 	sub	fp, #4
0a874     04 28 06 F1 | 	add	local02, #4
0a878     14 2B 62 FC | 	wrlong	local03, local02
0a87c     03 00 00 FF 
0a880     00 E4 05 F1 | 	add	objptr, ##1536
0a884     F2 26 02 FB | 	rdlong	local01, objptr
0a888     13 29 02 F6 | 	mov	local02, local01
0a88c     01 28 66 F0 | 	shl	local02, #1
0a890     13 29 02 F1 | 	add	local02, local01
0a894     02 28 66 F0 | 	shl	local02, #2
0a898     03 00 00 FF 
0a89c     00 E4 85 F1 | 	sub	objptr, ##1536
0a8a0     F2 28 02 F1 | 	add	local02, objptr
0a8a4     08 28 06 F1 | 	add	local02, #8
0a8a8     14 A7 68 FC | 	wrlong	#83, local02
0a8ac     47 00 00 FF 
0a8b0     7C E4 85 F1 | 	sub	objptr, ##36476
0a8b4                 | LR__0904
0a8b4     4A 00 00 FF 
0a8b8     7C E4 05 F1 | 	add	objptr, ##38012
0a8bc     F2 2A 02 FB | 	rdlong	local03, objptr
0a8c0     01 2A 06 F1 | 	add	local03, #1
0a8c4     F2 2A 62 FC | 	wrlong	local03, objptr
0a8c8     4A 00 00 FF 
0a8cc     7C E4 85 F1 | 	sub	objptr, ##38012
0a8d0     D0 00 90 FD | 	jmp	#LR__0906
0a8d4                 | LR__0905
0a8d4     98 0A B0 FD | 	call	#_expr
0a8d8     30 4E 05 F1 | 	add	fp, #48
0a8dc     A7 9E 68 FC | 	wrlong	#79, fp
0a8e0     08 4E 85 F1 | 	sub	fp, #8
0a8e4     A7 00 68 FC | 	wrlong	#0, fp
0a8e8     04 4E 05 F1 | 	add	fp, #4
0a8ec     A7 2A 02 FB | 	rdlong	local03, fp
0a8f0     04 4E 05 F1 | 	add	fp, #4
0a8f4     A7 26 02 FB | 	rdlong	local01, fp
0a8f8     30 4E 85 F1 | 	sub	fp, #48
0a8fc     4A 00 00 FF 
0a900     7C E4 05 F1 | 	add	objptr, ##38012
0a904     F2 28 02 FB | 	rdlong	local02, objptr
0a908     14 17 02 F6 | 	mov	arg03, local02
0a90c     01 16 66 F0 | 	shl	arg03, #1
0a910     14 17 02 F1 | 	add	arg03, local02
0a914     02 16 66 F0 | 	shl	arg03, #2
0a918     03 00 00 FF 
0a91c     00 E4 85 F1 | 	sub	objptr, ##1536
0a920     F2 16 02 F1 | 	add	arg03, objptr
0a924     0B 01 68 FC | 	wrlong	#0, arg03
0a928     03 00 00 FF 
0a92c     00 E4 05 F1 | 	add	objptr, ##1536
0a930     F2 28 02 FB | 	rdlong	local02, objptr
0a934     14 17 02 F6 | 	mov	arg03, local02
0a938     01 16 66 F0 | 	shl	arg03, #1
0a93c     14 17 02 F1 | 	add	arg03, local02
0a940     02 16 66 F0 | 	shl	arg03, #2
0a944     03 00 00 FF 
0a948     00 E4 85 F1 | 	sub	objptr, ##1536
0a94c     F2 16 02 F1 | 	add	arg03, objptr
0a950     04 16 06 F1 | 	add	arg03, #4
0a954     0B 2B 62 FC | 	wrlong	local03, arg03
0a958     03 00 00 FF 
0a95c     00 E4 05 F1 | 	add	objptr, ##1536
0a960     F2 2A 02 FB | 	rdlong	local03, objptr
0a964     15 29 02 F6 | 	mov	local02, local03
0a968     01 28 66 F0 | 	shl	local02, #1
0a96c     15 29 02 F1 | 	add	local02, local03
0a970     02 28 66 F0 | 	shl	local02, #2
0a974     03 00 00 FF 
0a978     00 E4 85 F1 | 	sub	objptr, ##1536
0a97c     F2 28 02 F1 | 	add	local02, objptr
0a980     08 28 06 F1 | 	add	local02, #8
0a984     14 27 62 FC | 	wrlong	local01, local02
0a988     03 00 00 FF 
0a98c     00 E4 05 F1 | 	add	objptr, ##1536
0a990     F2 2A 02 FB | 	rdlong	local03, objptr
0a994     01 2A 06 F1 | 	add	local03, #1
0a998     F2 2A 62 FC | 	wrlong	local03, objptr
0a99c     4A 00 00 FF 
0a9a0     7C E4 85 F1 | 	sub	objptr, ##38012
0a9a4                 | LR__0906
0a9a4                 | ' return 0
0a9a4     00 FA 05 F6 | 	mov	result1, #0
0a9a8     A7 F0 03 F6 | 	mov	ptra, fp
0a9ac     B2 00 A0 FD | 	call	#popregs_
0a9b0                 | _compile_goto_ret
0a9b0     2D 00 64 FD | 	ret
0a9b4                 | 
0a9b4                 | ' 
0a9b4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0a9b4                 | ' 
0a9b4                 | ' function compile_on() as ulong
0a9b4                 | _compile_on
0a9b4     04 4A 05 F6 | 	mov	COUNT_, #4
0a9b8     A8 00 A0 FD | 	call	#pushregs_
0a9bc     B0 09 B0 FD | 	call	#_expr
0a9c0     00 26 06 F6 | 	mov	local01, #0
0a9c4     4A 00 00 FF 
0a9c8     7C E4 05 F1 | 	add	objptr, ##38012
0a9cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a9d0     0A 13 02 F6 | 	mov	arg01, arg02
0a9d4     01 12 66 F0 | 	shl	arg01, #1
0a9d8     0A 13 02 F1 | 	add	arg01, arg02
0a9dc     02 12 66 F0 | 	shl	arg01, #2
0a9e0     03 00 00 FF 
0a9e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a9e8     F2 12 02 F1 | 	add	arg01, objptr
0a9ec     08 12 06 F1 | 	add	arg01, #8
0a9f0     09 83 69 FC | 	wrlong	#193, arg01
0a9f4     03 00 00 FF 
0a9f8     00 E4 05 F1 | 	add	objptr, ##1536
0a9fc     F2 14 02 FB | 	rdlong	arg02, objptr
0aa00     0A 29 02 F6 | 	mov	local02, arg02
0aa04     01 14 06 F1 | 	add	arg02, #1
0aa08     F2 14 62 FC | 	wrlong	arg02, objptr
0aa0c                 | ' expr()
0aa0c                 | ' 'print lparts(ct).part$ 'ok
0aa0c                 | ' numpar=0
0aa0c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0aa0c                 | ' if lparts(ct).part$="goto" then
0aa0c     13 00 00 FF 
0aa10     38 E4 85 F1 | 	sub	objptr, ##9784
0aa14     F2 14 02 FB | 	rdlong	arg02, objptr
0aa18     03 14 66 F0 | 	shl	arg02, #3
0aa1c     02 00 00 FF 
0aa20     38 E4 85 F1 | 	sub	objptr, ##1080
0aa24     F2 14 02 F1 | 	add	arg02, objptr
0aa28     0A 13 02 FB | 	rdlong	arg01, arg02
0aa2c     A8 01 00 FF 
0aa30     99 14 06 F6 | 	mov	arg02, ##@LR__5741
0aa34     35 00 00 FF 
0aa38     0C E4 85 F1 | 	sub	objptr, ##27148
0aa3c     5C A4 B1 FD | 	call	#__system___string_cmp
0aa40     00 FA 0D F2 | 	cmp	result1, #0 wz
0aa44     14 02 90 5D |  if_ne	jmp	#LR__0915
0aa48     37 00 00 FF 
0aa4c     44 E4 05 F1 | 	add	objptr, ##28228
0aa50     F2 2A 02 FB | 	rdlong	local03, objptr
0aa54     37 00 00 FF 
0aa58     44 E4 85 F1 | 	sub	objptr, ##28228
0aa5c     01 2A 06 F1 | 	add	local03, #1
0aa60                 | '   i=ct+1
0aa60                 | '   do
0aa60                 | LR__0910
0aa60                 | '     if lparts(i).token=token_decimal then
0aa60     15 FB 01 F6 | 	mov	result1, local03
0aa64     03 FA 65 F0 | 	shl	result1, #3
0aa68     35 00 00 FF 
0aa6c     0C E4 05 F1 | 	add	objptr, ##27148
0aa70     F2 FA 01 F1 | 	add	result1, objptr
0aa74     04 FA 05 F1 | 	add	result1, #4
0aa78     FD FA 01 FB | 	rdlong	result1, result1
0aa7c     01 00 00 FF 
0aa80     00 FA 0D F2 | 	cmp	result1, ##512 wz
0aa84     35 00 00 FF 
0aa88     0C E4 85 F1 | 	sub	objptr, ##27148
0aa8c     DC 00 90 5D |  if_ne	jmp	#LR__0911
0aa90     4A 00 00 FF 
0aa94     7C E4 05 F1 | 	add	objptr, ##38012
0aa98     F2 FA 01 FB | 	rdlong	result1, objptr
0aa9c     FD 14 02 F6 | 	mov	arg02, result1
0aaa0     01 14 66 F0 | 	shl	arg02, #1
0aaa4     FD 14 02 F1 | 	add	arg02, result1
0aaa8     02 14 66 F0 | 	shl	arg02, #2
0aaac     03 00 00 FF 
0aab0     00 E4 85 F1 | 	sub	objptr, ##1536
0aab4     F2 14 02 F1 | 	add	arg02, objptr
0aab8     00 00 C0 FF 
0aabc     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0aac0     03 00 00 FF 
0aac4     00 E4 05 F1 | 	add	objptr, ##1536
0aac8     F2 14 02 FB | 	rdlong	arg02, objptr
0aacc     0A 2D 02 F6 | 	mov	local04, arg02
0aad0     01 2C 66 F0 | 	shl	local04, #1
0aad4     0A 2D 02 F1 | 	add	local04, arg02
0aad8     02 2C 66 F0 | 	shl	local04, #2
0aadc     03 00 00 FF 
0aae0     00 E4 85 F1 | 	sub	objptr, ##1536
0aae4     F2 2C 02 F1 | 	add	local04, objptr
0aae8     15 15 02 F6 | 	mov	arg02, local03
0aaec     03 14 66 F0 | 	shl	arg02, #3
0aaf0     12 00 00 FF 
0aaf4     70 E4 85 F1 | 	sub	objptr, ##9328
0aaf8     F2 14 02 F1 | 	add	arg02, objptr
0aafc     0A 13 02 FB | 	rdlong	arg01, arg02
0ab00     00 14 06 F6 | 	mov	arg02, #0
0ab04     35 00 00 FF 
0ab08     0C E4 85 F1 | 	sub	objptr, ##27148
0ab0c     54 D8 B1 FD | 	call	#__system____builtin_atoi
0ab10     04 2C 06 F1 | 	add	local04, #4
0ab14     16 FB 61 FC | 	wrlong	result1, local04
0ab18     4A 00 00 FF 
0ab1c     7C E4 05 F1 | 	add	objptr, ##38012
0ab20     F2 14 02 FB | 	rdlong	arg02, objptr
0ab24     0A 2D 02 F6 | 	mov	local04, arg02
0ab28     01 2C 66 F0 | 	shl	local04, #1
0ab2c     0A 2D 02 F1 | 	add	local04, arg02
0ab30     02 2C 66 F0 | 	shl	local04, #2
0ab34     03 00 00 FF 
0ab38     00 E4 85 F1 | 	sub	objptr, ##1536
0ab3c     F2 2C 02 F1 | 	add	local04, objptr
0ab40     08 2C 06 F1 | 	add	local04, #8
0ab44     16 A7 68 FC | 	wrlong	#83, local04
0ab48     03 00 00 FF 
0ab4c     00 E4 05 F1 | 	add	objptr, ##1536
0ab50     F2 2C 02 FB | 	rdlong	local04, objptr
0ab54     01 2C 06 F1 | 	add	local04, #1
0ab58     F2 2C 62 FC | 	wrlong	local04, objptr
0ab5c     4A 00 00 FF 
0ab60     7C E4 85 F1 | 	sub	objptr, ##38012
0ab64     01 26 06 F1 | 	add	local01, #1
0ab68     08 00 90 FD | 	jmp	#LR__0912
0ab6c                 | LR__0911
0ab6c                 | '       return 17
0ab6c     11 FA 05 F6 | 	mov	result1, #17
0ab70     5C 04 90 FD | 	jmp	#LR__0925
0ab74                 | LR__0912
0ab74     01 2A 06 F1 | 	add	local03, #1
0ab78                 | '     i+=1
0ab78                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ab78     15 2D 02 F6 | 	mov	local04, local03
0ab7c     03 2C 66 F0 | 	shl	local04, #3
0ab80     35 00 00 FF 
0ab84     0C E4 05 F1 | 	add	objptr, ##27148
0ab88     F2 2C 02 F1 | 	add	local04, objptr
0ab8c     04 2C 06 F1 | 	add	local04, #4
0ab90     16 2D 02 FB | 	rdlong	local04, local04
0ab94     11 2C 0E F2 | 	cmp	local04, #17 wz
0ab98     35 00 00 FF 
0ab9c     0C E4 85 F1 | 	sub	objptr, ##27148
0aba0     30 00 90 AD |  if_e	jmp	#LR__0913
0aba4     15 2D 02 F6 | 	mov	local04, local03
0aba8     03 2C 66 F0 | 	shl	local04, #3
0abac     35 00 00 FF 
0abb0     0C E4 05 F1 | 	add	objptr, ##27148
0abb4     F2 2C 02 F1 | 	add	local04, objptr
0abb8     04 2C 06 F1 | 	add	local04, #4
0abbc     16 2D 02 FB | 	rdlong	local04, local04
0abc0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0abc4     35 00 00 FF 
0abc8     0C E4 85 F1 | 	sub	objptr, ##27148
0abcc     15 FA 05 56 |  if_ne	mov	result1, #21
0abd0     FC 03 90 5D |  if_ne	jmp	#LR__0925
0abd4                 | LR__0913
0abd4                 | '     if lparts(i).token=token_end then exit loop
0abd4     15 2D 02 F6 | 	mov	local04, local03
0abd8     03 2C 66 F0 | 	shl	local04, #3
0abdc     35 00 00 FF 
0abe0     0C E4 05 F1 | 	add	objptr, ##27148
0abe4     F2 2C 02 F1 | 	add	local04, objptr
0abe8     04 2C 06 F1 | 	add	local04, #4
0abec     16 2D 02 FB | 	rdlong	local04, local04
0abf0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0abf4     35 00 00 FF 
0abf8     0C E4 85 F1 | 	sub	objptr, ##27148
0abfc     30 00 90 AD |  if_e	jmp	#LR__0914
0ac00     01 2A 06 F1 | 	add	local03, #1
0ac04     15 2D 02 F6 | 	mov	local04, local03
0ac08     03 2C 66 F0 | 	shl	local04, #3
0ac0c     35 00 00 FF 
0ac10     0C E4 05 F1 | 	add	objptr, ##27148
0ac14     F2 2C 02 F1 | 	add	local04, objptr
0ac18     04 2C 06 F1 | 	add	local04, #4
0ac1c     16 2D 02 FB | 	rdlong	local04, local04
0ac20     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ac24     35 00 00 FF 
0ac28     0C E4 85 F1 | 	sub	objptr, ##27148
0ac2c     30 FE 9F 5D |  if_ne	jmp	#LR__0910
0ac30                 | LR__0914
0ac30     14 2D 02 F6 | 	mov	local04, local02
0ac34     01 2C 66 F0 | 	shl	local04, #1
0ac38     14 2D 02 F1 | 	add	local04, local02
0ac3c     02 2C 66 F0 | 	shl	local04, #2
0ac40     47 00 00 FF 
0ac44     7C E4 05 F1 | 	add	objptr, ##36476
0ac48     F2 2C 02 F1 | 	add	local04, objptr
0ac4c     04 2C 06 F1 | 	add	local04, #4
0ac50     16 03 68 FC | 	wrlong	#1, local04
0ac54     47 00 00 FF 
0ac58     7C E4 85 F1 | 	sub	objptr, ##36476
0ac5c                 | LR__0915
0ac5c                 | ' 
0ac5c                 | ' if lparts(ct).part$="gosub" then
0ac5c     37 00 00 FF 
0ac60     44 E4 05 F1 | 	add	objptr, ##28228
0ac64     F2 2A 02 FB | 	rdlong	local03, objptr
0ac68     03 2A 66 F0 | 	shl	local03, #3
0ac6c     02 00 00 FF 
0ac70     38 E4 85 F1 | 	sub	objptr, ##1080
0ac74     F2 2A 02 F1 | 	add	local03, objptr
0ac78     15 13 02 FB | 	rdlong	arg01, local03
0ac7c     A8 01 00 FF 
0ac80     9E 14 06 F6 | 	mov	arg02, ##@LR__5742
0ac84     35 00 00 FF 
0ac88     0C E4 85 F1 | 	sub	objptr, ##27148
0ac8c     0C A2 B1 FD | 	call	#__system___string_cmp
0ac90     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac94     84 02 90 5D |  if_ne	jmp	#LR__0921
0ac98     37 00 00 FF 
0ac9c     44 E4 05 F1 | 	add	objptr, ##28228
0aca0     F2 2A 02 FB | 	rdlong	local03, objptr
0aca4     37 00 00 FF 
0aca8     44 E4 85 F1 | 	sub	objptr, ##28228
0acac     01 2A 06 F1 | 	add	local03, #1
0acb0                 | '   i=ct+1
0acb0                 | '   do
0acb0                 | LR__0916
0acb0                 | '     if lparts(i).token=token_decimal then
0acb0     15 2D 02 F6 | 	mov	local04, local03
0acb4     03 2C 66 F0 | 	shl	local04, #3
0acb8     35 00 00 FF 
0acbc     0C E4 05 F1 | 	add	objptr, ##27148
0acc0     F2 2C 02 F1 | 	add	local04, objptr
0acc4     04 2C 06 F1 | 	add	local04, #4
0acc8     16 2D 02 FB | 	rdlong	local04, local04
0accc     01 00 00 FF 
0acd0     00 2C 0E F2 | 	cmp	local04, ##512 wz
0acd4     35 00 00 FF 
0acd8     0C E4 85 F1 | 	sub	objptr, ##27148
0acdc     4C 01 90 5D |  if_ne	jmp	#LR__0917
0ace0     4A 00 00 FF 
0ace4     7C E4 05 F1 | 	add	objptr, ##38012
0ace8     F2 FA 01 FB | 	rdlong	result1, objptr
0acec     FD 2C 02 F6 | 	mov	local04, result1
0acf0     01 2C 66 F0 | 	shl	local04, #1
0acf4     FD 2C 02 F1 | 	add	local04, result1
0acf8     02 2C 66 F0 | 	shl	local04, #2
0acfc     03 00 00 FF 
0ad00     00 E4 85 F1 | 	sub	objptr, ##1536
0ad04     F2 2C 02 F1 | 	add	local04, objptr
0ad08     08 2C 06 F1 | 	add	local04, #8
0ad0c     16 53 69 FC | 	wrlong	#169, local04
0ad10     03 00 00 FF 
0ad14     00 E4 05 F1 | 	add	objptr, ##1536
0ad18     F2 FA 01 FB | 	rdlong	result1, objptr
0ad1c     01 FA 05 F1 | 	add	result1, #1
0ad20     F2 FA 61 FC | 	wrlong	result1, objptr
0ad24     FD 2C 02 F6 | 	mov	local04, result1
0ad28     01 2C 66 F0 | 	shl	local04, #1
0ad2c     FD 2C 02 F1 | 	add	local04, result1
0ad30     02 2C 66 F0 | 	shl	local04, #2
0ad34     03 00 00 FF 
0ad38     00 E4 85 F1 | 	sub	objptr, ##1536
0ad3c     F2 2C 02 F1 | 	add	local04, objptr
0ad40     00 00 C0 FF 
0ad44     16 01 68 FC | 	wrlong	##-2147483648, local04
0ad48     03 00 00 FF 
0ad4c     00 E4 05 F1 | 	add	objptr, ##1536
0ad50     F2 FA 01 FB | 	rdlong	result1, objptr
0ad54     FD 2C 02 F6 | 	mov	local04, result1
0ad58     01 2C 66 F0 | 	shl	local04, #1
0ad5c     FD 2C 02 F1 | 	add	local04, result1
0ad60     02 2C 66 F0 | 	shl	local04, #2
0ad64     03 00 00 FF 
0ad68     00 E4 85 F1 | 	sub	objptr, ##1536
0ad6c     F2 2C 02 F1 | 	add	local04, objptr
0ad70     15 13 02 F6 | 	mov	arg01, local03
0ad74     03 12 66 F0 | 	shl	arg01, #3
0ad78     12 00 00 FF 
0ad7c     70 E4 85 F1 | 	sub	objptr, ##9328
0ad80     F2 12 02 F1 | 	add	arg01, objptr
0ad84     09 13 02 FB | 	rdlong	arg01, arg01
0ad88     00 14 06 F6 | 	mov	arg02, #0
0ad8c     35 00 00 FF 
0ad90     0C E4 85 F1 | 	sub	objptr, ##27148
0ad94     CC D5 B1 FD | 	call	#__system____builtin_atoi
0ad98     04 2C 06 F1 | 	add	local04, #4
0ad9c     16 FB 61 FC | 	wrlong	result1, local04
0ada0     4A 00 00 FF 
0ada4     7C E4 05 F1 | 	add	objptr, ##38012
0ada8     F2 12 02 FB | 	rdlong	arg01, objptr
0adac     09 2D 02 F6 | 	mov	local04, arg01
0adb0     01 2C 66 F0 | 	shl	local04, #1
0adb4     09 2D 02 F1 | 	add	local04, arg01
0adb8     02 2C 66 F0 | 	shl	local04, #2
0adbc     03 00 00 FF 
0adc0     00 E4 85 F1 | 	sub	objptr, ##1536
0adc4     F2 2C 02 F1 | 	add	local04, objptr
0adc8     08 2C 06 F1 | 	add	local04, #8
0adcc     16 A7 68 FC | 	wrlong	#83, local04
0add0     03 00 00 FF 
0add4     00 E4 05 F1 | 	add	objptr, ##1536
0add8     F2 12 02 FB | 	rdlong	arg01, objptr
0addc     01 12 06 F1 | 	add	arg01, #1
0ade0     F2 12 62 FC | 	wrlong	arg01, objptr
0ade4     01 26 06 F1 | 	add	local01, #1
0ade8     09 2D 02 F6 | 	mov	local04, arg01
0adec     01 2C 66 F0 | 	shl	local04, #1
0adf0     09 2D 02 F1 | 	add	local04, arg01
0adf4     02 2C 66 F0 | 	shl	local04, #2
0adf8     03 00 00 FF 
0adfc     00 E4 85 F1 | 	sub	objptr, ##1536
0ae00     F2 2C 02 F1 | 	add	local04, objptr
0ae04     08 2C 06 F1 | 	add	local04, #8
0ae08     16 5B 68 FC | 	wrlong	#45, local04
0ae0c     03 00 00 FF 
0ae10     00 E4 05 F1 | 	add	objptr, ##1536
0ae14     F2 2C 02 FB | 	rdlong	local04, objptr
0ae18     01 2C 06 F1 | 	add	local04, #1
0ae1c     F2 2C 62 FC | 	wrlong	local04, objptr
0ae20     4A 00 00 FF 
0ae24     7C E4 85 F1 | 	sub	objptr, ##38012
0ae28     08 00 90 FD | 	jmp	#LR__0918
0ae2c                 | LR__0917
0ae2c                 | '       return 17
0ae2c     11 FA 05 F6 | 	mov	result1, #17
0ae30     9C 01 90 FD | 	jmp	#LR__0925
0ae34                 | LR__0918
0ae34     01 2A 06 F1 | 	add	local03, #1
0ae38                 | '     i+=1
0ae38                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ae38     15 2D 02 F6 | 	mov	local04, local03
0ae3c     03 2C 66 F0 | 	shl	local04, #3
0ae40     35 00 00 FF 
0ae44     0C E4 05 F1 | 	add	objptr, ##27148
0ae48     F2 2C 02 F1 | 	add	local04, objptr
0ae4c     04 2C 06 F1 | 	add	local04, #4
0ae50     16 2D 02 FB | 	rdlong	local04, local04
0ae54     11 2C 0E F2 | 	cmp	local04, #17 wz
0ae58     35 00 00 FF 
0ae5c     0C E4 85 F1 | 	sub	objptr, ##27148
0ae60     30 00 90 AD |  if_e	jmp	#LR__0919
0ae64     15 2D 02 F6 | 	mov	local04, local03
0ae68     03 2C 66 F0 | 	shl	local04, #3
0ae6c     35 00 00 FF 
0ae70     0C E4 05 F1 | 	add	objptr, ##27148
0ae74     F2 2C 02 F1 | 	add	local04, objptr
0ae78     04 2C 06 F1 | 	add	local04, #4
0ae7c     16 2D 02 FB | 	rdlong	local04, local04
0ae80     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ae84     35 00 00 FF 
0ae88     0C E4 85 F1 | 	sub	objptr, ##27148
0ae8c     15 FA 05 56 |  if_ne	mov	result1, #21
0ae90     3C 01 90 5D |  if_ne	jmp	#LR__0925
0ae94                 | LR__0919
0ae94                 | '     if lparts(i).token=token_end then exit loop
0ae94     15 2D 02 F6 | 	mov	local04, local03
0ae98     03 2C 66 F0 | 	shl	local04, #3
0ae9c     35 00 00 FF 
0aea0     0C E4 05 F1 | 	add	objptr, ##27148
0aea4     F2 2C 02 F1 | 	add	local04, objptr
0aea8     04 2C 06 F1 | 	add	local04, #4
0aeac     16 2D 02 FB | 	rdlong	local04, local04
0aeb0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aeb4     35 00 00 FF 
0aeb8     0C E4 85 F1 | 	sub	objptr, ##27148
0aebc     30 00 90 AD |  if_e	jmp	#LR__0920
0aec0     01 2A 06 F1 | 	add	local03, #1
0aec4     15 2D 02 F6 | 	mov	local04, local03
0aec8     03 2C 66 F0 | 	shl	local04, #3
0aecc     35 00 00 FF 
0aed0     0C E4 05 F1 | 	add	objptr, ##27148
0aed4     F2 2C 02 F1 | 	add	local04, objptr
0aed8     04 2C 06 F1 | 	add	local04, #4
0aedc     16 2D 02 FB | 	rdlong	local04, local04
0aee0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aee4     35 00 00 FF 
0aee8     0C E4 85 F1 | 	sub	objptr, ##27148
0aeec     C0 FD 9F 5D |  if_ne	jmp	#LR__0916
0aef0                 | LR__0920
0aef0     14 2D 02 F6 | 	mov	local04, local02
0aef4     01 2C 66 F0 | 	shl	local04, #1
0aef8     14 2D 02 F1 | 	add	local04, local02
0aefc     02 2C 66 F0 | 	shl	local04, #2
0af00     47 00 00 FF 
0af04     7C E4 05 F1 | 	add	objptr, ##36476
0af08     F2 2C 02 F1 | 	add	local04, objptr
0af0c     04 2C 06 F1 | 	add	local04, #4
0af10     16 07 68 FC | 	wrlong	#3, local04
0af14     47 00 00 FF 
0af18     7C E4 85 F1 | 	sub	objptr, ##36476
0af1c                 | LR__0921
0af1c     14 2B 02 F6 | 	mov	local03, local02
0af20     01 2A 66 F0 | 	shl	local03, #1
0af24     14 2B 02 F1 | 	add	local03, local02
0af28     02 2A 66 F0 | 	shl	local03, #2
0af2c     47 00 00 FF 
0af30     7C E4 05 F1 | 	add	objptr, ##36476
0af34     F2 2A 02 F1 | 	add	local03, objptr
0af38     15 27 62 FC | 	wrlong	local01, local03
0af3c                 | ' compiledline(onlineptr).result.uresult=numpar
0af3c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0af3c     03 00 00 FF 
0af40     00 E4 05 F1 | 	add	objptr, ##1536
0af44     F2 2A 02 FB | 	rdlong	local03, objptr
0af48     4A 00 00 FF 
0af4c     7C E4 85 F1 | 	sub	objptr, ##38012
0af50     97 3C 48 FB | 	callpa	#(@LR__0924-@LR__0922)>>2,fcache_load_ptr_
0af54                 | LR__0922
0af54     15 2D 02 F6 | 	mov	local04, local03
0af58     01 2C 66 F0 | 	shl	local04, #1
0af5c     15 2D 02 F1 | 	add	local04, local03
0af60     02 2C 66 F0 | 	shl	local04, #2
0af64     47 00 00 FF 
0af68     7C E4 05 F1 | 	add	objptr, ##36476
0af6c     F2 2C 02 F1 | 	add	local04, objptr
0af70     08 2C 06 F1 | 	add	local04, #8
0af74     16 2D 02 FB | 	rdlong	local04, local04
0af78     2D 2C 0E F2 | 	cmp	local04, #45 wz
0af7c     47 00 00 FF 
0af80     7C E4 85 F1 | 	sub	objptr, ##36476
0af84     38 00 90 5D |  if_ne	jmp	#LR__0923
0af88     15 2D 02 F6 | 	mov	local04, local03
0af8c     01 2C 66 F0 | 	shl	local04, #1
0af90     15 2D 02 F1 | 	add	local04, local03
0af94     02 2C 66 F0 | 	shl	local04, #2
0af98     47 00 00 FF 
0af9c     7C E4 05 F1 | 	add	objptr, ##36476
0afa0     F2 2C 02 F1 | 	add	local04, objptr
0afa4     03 00 00 FF 
0afa8     00 E4 05 F1 | 	add	objptr, ##1536
0afac     F2 26 02 FB | 	rdlong	local01, objptr
0afb0     4A 00 00 FF 
0afb4     7C E4 85 F1 | 	sub	objptr, ##38012
0afb8     02 26 86 F1 | 	sub	local01, #2
0afbc     16 27 62 FC | 	wrlong	local01, local04
0afc0                 | LR__0923
0afc0     01 2A 86 F1 | 	sub	local03, #1
0afc4     14 2B 52 F2 | 	cmps	local03, local02 wc
0afc8     88 FF 9F 3D |  if_ae	jmp	#LR__0922
0afcc                 | LR__0924
0afcc                 | ' return 0
0afcc     00 FA 05 F6 | 	mov	result1, #0
0afd0                 | LR__0925
0afd0     A7 F0 03 F6 | 	mov	ptra, fp
0afd4     B2 00 A0 FD | 	call	#popregs_
0afd8                 | _compile_on_ret
0afd8     2D 00 64 FD | 	ret
0afdc                 | 
0afdc                 | ' 
0afdc                 | ' '----- A helper for compile_input and compile_read
0afdc                 | '  
0afdc                 | ' function getaddr() as ulong
0afdc                 | _getaddr
0afdc     0B 4A 05 F6 | 	mov	COUNT_, #11
0afe0     A8 00 A0 FD | 	call	#pushregs_
0afe4     37 00 00 FF 
0afe8     44 E4 05 F1 | 	add	objptr, ##28228
0afec     F2 2C 02 FB | 	rdlong	local04, objptr
0aff0     03 2C 66 F0 | 	shl	local04, #3
0aff4     02 00 00 FF 
0aff8     38 E4 85 F1 | 	sub	objptr, ##1080
0affc     F2 2C 02 F1 | 	add	local04, objptr
0b000     16 2F 02 FB | 	rdlong	local05, local04
0b004     01 30 66 F6 | 	neg	local06, #1
0b008                 | ' 
0b008                 | ' varname$=lparts(ct).part$
0b008                 | ' j=-1
0b008                 | ' 
0b008                 | ' for i=0 to varnum-1
0b008     00 32 06 F6 | 	mov	local07, #0
0b00c     04 E4 85 F1 | 	sub	objptr, #4
0b010     F2 34 02 FB | 	rdlong	local08, objptr
0b014     35 00 00 FF 
0b018     08 E4 85 F1 | 	sub	objptr, ##27144
0b01c                 | LR__0930
0b01c     1A 33 52 F2 | 	cmps	local07, local08 wc
0b020     38 00 90 3D |  if_ae	jmp	#LR__0931
0b024                 | '   if variables(i).name=varname$ then j=i : exit
0b024     19 2D 02 F6 | 	mov	local04, local07
0b028     04 2C 66 F0 | 	shl	local04, #4
0b02c     14 00 00 FF 
0b030     F8 E5 05 F1 | 	add	objptr, ##10744
0b034     F2 2C 02 F1 | 	add	local04, objptr
0b038     16 13 02 FB | 	rdlong	arg01, local04
0b03c     17 15 02 F6 | 	mov	arg02, local05
0b040     14 00 00 FF 
0b044     F8 E5 85 F1 | 	sub	objptr, ##10744
0b048     50 9E B1 FD | 	call	#__system___string_cmp
0b04c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b050     19 31 02 A6 |  if_e	mov	local06, local07
0b054     01 32 06 51 |  if_ne	add	local07, #1
0b058     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0b05c                 | LR__0931
0b05c                 | ' if  j=-1 andalso varnum<maxvars then   
0b05c     FF FF 7F FF 
0b060     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b064     A8 00 90 5D |  if_ne	jmp	#LR__0932
0b068     35 00 00 FF 
0b06c     08 E4 05 F1 | 	add	objptr, ##27144
0b070     F2 34 02 FB | 	rdlong	local08, objptr
0b074     35 00 00 FF 
0b078     08 E4 85 F1 | 	sub	objptr, ##27144
0b07c     02 00 00 FF 
0b080     00 34 56 F2 | 	cmps	local08, ##1024 wc
0b084     88 00 90 3D |  if_ae	jmp	#LR__0932
0b088     35 00 00 FF 
0b08c     08 E4 05 F1 | 	add	objptr, ##27144
0b090     F2 2C 02 FB | 	rdlong	local04, objptr
0b094     04 2C 66 F0 | 	shl	local04, #4
0b098     20 00 00 FF 
0b09c     10 E4 85 F1 | 	sub	objptr, ##16400
0b0a0     F2 2C 02 F1 | 	add	local04, objptr
0b0a4     16 2F 62 FC | 	wrlong	local05, local04
0b0a8     20 00 00 FF 
0b0ac     10 E4 05 F1 | 	add	objptr, ##16400
0b0b0     F2 2C 02 FB | 	rdlong	local04, objptr
0b0b4     04 2C 66 F0 | 	shl	local04, #4
0b0b8     20 00 00 FF 
0b0bc     10 E4 85 F1 | 	sub	objptr, ##16400
0b0c0     F2 2C 02 F1 | 	add	local04, objptr
0b0c4     04 2C 06 F1 | 	add	local04, #4
0b0c8     16 01 68 FC | 	wrlong	#0, local04
0b0cc     20 00 00 FF 
0b0d0     10 E4 05 F1 | 	add	objptr, ##16400
0b0d4     F2 2C 02 FB | 	rdlong	local04, objptr
0b0d8     04 2C 66 F0 | 	shl	local04, #4
0b0dc     20 00 00 FF 
0b0e0     10 E4 85 F1 | 	sub	objptr, ##16400
0b0e4     F2 2C 02 F1 | 	add	local04, objptr
0b0e8     0C 2C 06 F1 | 	add	local04, #12
0b0ec     16 39 68 FC | 	wrlong	#28, local04
0b0f0     20 00 00 FF 
0b0f4     10 E4 05 F1 | 	add	objptr, ##16400
0b0f8     F2 34 02 FB | 	rdlong	local08, objptr
0b0fc     1A 31 02 F6 | 	mov	local06, local08
0b100     01 34 06 F1 | 	add	local08, #1
0b104     F2 34 62 FC | 	wrlong	local08, objptr
0b108     35 00 00 FF 
0b10c     08 E4 85 F1 | 	sub	objptr, ##27144
0b110                 | LR__0932
0b110     00 34 06 F6 | 	mov	local08, #0
0b114                 | ' numpar=0
0b114                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b114     37 00 00 FF 
0b118     44 E4 05 F1 | 	add	objptr, ##28228
0b11c     F2 2C 02 FB | 	rdlong	local04, objptr
0b120     01 2C 06 F1 | 	add	local04, #1
0b124     03 2C 66 F0 | 	shl	local04, #3
0b128     02 00 00 FF 
0b12c     38 E4 85 F1 | 	sub	objptr, ##1080
0b130     F2 2C 02 F1 | 	add	local04, objptr
0b134     04 2C 06 F1 | 	add	local04, #4
0b138     16 33 02 FB | 	rdlong	local07, local04
0b13c     15 32 0E F2 | 	cmp	local07, #21 wz
0b140     35 00 00 FF 
0b144     0C E4 85 F1 | 	sub	objptr, ##27148
0b148     54 01 90 5D |  if_ne	jmp	#LR__0937
0b14c     37 00 00 FF 
0b150     44 E4 05 F1 | 	add	objptr, ##28228
0b154     F2 36 02 FB | 	rdlong	local09, objptr
0b158     01 36 06 F1 | 	add	local09, #1
0b15c     F2 36 62 FC | 	wrlong	local09, objptr
0b160     37 00 00 FF 
0b164     44 E4 85 F1 | 	sub	objptr, ##28228
0b168                 | '   ct+=1 											' omit this lpar, this is for expr list
0b168                 | '   do
0b168                 | LR__0933
0b168     37 00 00 FF 
0b16c     44 E4 05 F1 | 	add	objptr, ##28228
0b170     F2 2C 02 FB | 	rdlong	local04, objptr
0b174     01 2C 06 F1 | 	add	local04, #1
0b178     F2 2C 62 FC | 	wrlong	local04, objptr
0b17c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b17c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b17c     03 2C 66 F0 | 	shl	local04, #3
0b180     02 00 00 FF 
0b184     38 E4 85 F1 | 	sub	objptr, ##1080
0b188     F2 2C 02 F1 | 	add	local04, objptr
0b18c     04 2C 06 F1 | 	add	local04, #4
0b190     16 37 02 FB | 	rdlong	local09, local04
0b194     15 36 0E F2 | 	cmp	local09, #21 wz
0b198     35 00 00 FF 
0b19c     0C E4 85 F1 | 	sub	objptr, ##27148
0b1a0     44 00 90 5D |  if_ne	jmp	#LR__0934
0b1a4     37 00 00 FF 
0b1a8     44 E4 05 F1 | 	add	objptr, ##28228
0b1ac     F2 36 02 FB | 	rdlong	local09, objptr
0b1b0     01 36 06 F1 | 	add	local09, #1
0b1b4     F2 36 62 FC | 	wrlong	local09, objptr
0b1b8     37 00 00 FF 
0b1bc     44 E4 85 F1 | 	sub	objptr, ##28228
0b1c0     AC 01 B0 FD | 	call	#_expr
0b1c4     FD 38 02 F6 | 	mov	local10, result1
0b1c8     37 00 00 FF 
0b1cc     44 E4 05 F1 | 	add	objptr, ##28228
0b1d0     F2 36 02 FB | 	rdlong	local09, objptr
0b1d4     01 36 06 F1 | 	add	local09, #1
0b1d8     F2 36 62 FC | 	wrlong	local09, objptr
0b1dc     37 00 00 FF 
0b1e0     44 E4 85 F1 | 	sub	objptr, ##28228
0b1e4     08 00 90 FD | 	jmp	#LR__0935
0b1e8                 | LR__0934
0b1e8     84 01 B0 FD | 	call	#_expr
0b1ec     FD 38 02 F6 | 	mov	local10, result1
0b1f0                 | LR__0935
0b1f0                 | '     if err>0 then return err
0b1f0     01 38 56 F2 | 	cmps	local10, #1 wc
0b1f4     1C FB 01 36 |  if_ae	mov	result1, local10
0b1f8     68 01 90 3D |  if_ae	jmp	#LR__0938
0b1fc     01 34 06 F1 | 	add	local08, #1
0b200     37 00 00 FF 
0b204     44 E4 05 F1 | 	add	objptr, ##28228
0b208     F2 2C 02 FB | 	rdlong	local04, objptr
0b20c     03 2C 66 F0 | 	shl	local04, #3
0b210     02 00 00 FF 
0b214     38 E4 85 F1 | 	sub	objptr, ##1080
0b218     F2 2C 02 F1 | 	add	local04, objptr
0b21c     04 2C 06 F1 | 	add	local04, #4
0b220     16 39 02 FB | 	rdlong	local10, local04
0b224     14 38 0E F2 | 	cmp	local10, #20 wz
0b228     35 00 00 FF 
0b22c     0C E4 85 F1 | 	sub	objptr, ##27148
0b230     34 00 90 AD |  if_e	jmp	#LR__0936
0b234     37 00 00 FF 
0b238     44 E4 05 F1 | 	add	objptr, ##28228
0b23c     F2 38 02 FB | 	rdlong	local10, objptr
0b240     03 38 66 F0 | 	shl	local10, #3
0b244     02 00 00 FF 
0b248     38 E4 85 F1 | 	sub	objptr, ##1080
0b24c     F2 38 02 F1 | 	add	local10, objptr
0b250     04 38 06 F1 | 	add	local10, #4
0b254     1C 39 02 FB | 	rdlong	local10, local10
0b258     FE 39 0E F2 | 	cmp	local10, #510 wz
0b25c     35 00 00 FF 
0b260     0C E4 85 F1 | 	sub	objptr, ##27148
0b264     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0b268                 | LR__0936
0b268                 | '     if lparts(ct).token=token_end then return 14
0b268     37 00 00 FF 
0b26c     44 E4 05 F1 | 	add	objptr, ##28228
0b270     F2 2C 02 FB | 	rdlong	local04, objptr
0b274     03 2C 66 F0 | 	shl	local04, #3
0b278     02 00 00 FF 
0b27c     38 E4 85 F1 | 	sub	objptr, ##1080
0b280     F2 2C 02 F1 | 	add	local04, objptr
0b284     04 2C 06 F1 | 	add	local04, #4
0b288     16 39 02 FB | 	rdlong	local10, local04
0b28c     FE 39 0E F2 | 	cmp	local10, #510 wz
0b290     35 00 00 FF 
0b294     0C E4 85 F1 | 	sub	objptr, ##27148
0b298     0E FA 05 A6 |  if_e	mov	result1, #14
0b29c     C4 00 90 AD |  if_e	jmp	#LR__0938
0b2a0                 | LR__0937
0b2a0     1A 29 02 F6 | 	mov	local02, local08
0b2a4     12 2A 06 F6 | 	mov	local03, #18
0b2a8     18 27 02 F6 | 	mov	local01, local06
0b2ac     13 37 02 F6 | 	mov	local09, local01
0b2b0     14 3B 02 F6 | 	mov	local11, local02
0b2b4     15 27 02 F6 | 	mov	local01, local03
0b2b8     4A 00 00 FF 
0b2bc     7C E4 05 F1 | 	add	objptr, ##38012
0b2c0     F2 38 02 FB | 	rdlong	local10, objptr
0b2c4     1C 35 02 F6 | 	mov	local08, local10
0b2c8     01 34 66 F0 | 	shl	local08, #1
0b2cc     1C 35 02 F1 | 	add	local08, local10
0b2d0     02 34 66 F0 | 	shl	local08, #2
0b2d4     03 00 00 FF 
0b2d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b2dc     F2 34 02 F1 | 	add	local08, objptr
0b2e0     1A 37 62 FC | 	wrlong	local09, local08
0b2e4     03 00 00 FF 
0b2e8     00 E4 05 F1 | 	add	objptr, ##1536
0b2ec     F2 38 02 FB | 	rdlong	local10, objptr
0b2f0     1C 37 02 F6 | 	mov	local09, local10
0b2f4     01 36 66 F0 | 	shl	local09, #1
0b2f8     1C 37 02 F1 | 	add	local09, local10
0b2fc     02 36 66 F0 | 	shl	local09, #2
0b300     03 00 00 FF 
0b304     00 E4 85 F1 | 	sub	objptr, ##1536
0b308     F2 36 02 F1 | 	add	local09, objptr
0b30c     04 36 06 F1 | 	add	local09, #4
0b310     1B 3B 62 FC | 	wrlong	local11, local09
0b314     03 00 00 FF 
0b318     00 E4 05 F1 | 	add	objptr, ##1536
0b31c     F2 3A 02 FB | 	rdlong	local11, objptr
0b320     1D 39 02 F6 | 	mov	local10, local11
0b324     01 38 66 F0 | 	shl	local10, #1
0b328     1D 39 02 F1 | 	add	local10, local11
0b32c     02 38 66 F0 | 	shl	local10, #2
0b330     03 00 00 FF 
0b334     00 E4 85 F1 | 	sub	objptr, ##1536
0b338     F2 38 02 F1 | 	add	local10, objptr
0b33c     08 38 06 F1 | 	add	local10, #8
0b340     1C 27 62 FC | 	wrlong	local01, local10
0b344     03 00 00 FF 
0b348     00 E4 05 F1 | 	add	objptr, ##1536
0b34c     F2 36 02 FB | 	rdlong	local09, objptr
0b350     01 36 06 F1 | 	add	local09, #1
0b354     F2 36 62 FC | 	wrlong	local09, objptr
0b358     4A 00 00 FF 
0b35c     7C E4 85 F1 | 	sub	objptr, ##38012
0b360                 | ' t2.result.twowords(1)=numpar
0b360                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0b360                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b360                 | ' return 0
0b360     00 FA 05 F6 | 	mov	result1, #0
0b364                 | LR__0938
0b364     A7 F0 03 F6 | 	mov	ptra, fp
0b368     B2 00 A0 FD | 	call	#popregs_
0b36c                 | _getaddr_ret
0b36c     2D 00 64 FD | 	ret
0b370                 | 
0b370                 | ' 
0b370                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '--------------------------------------------- 
0b370                 | ' 
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' 
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '
0b370                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0b370                 | ' '
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' 
0b370                 | ' function expr() as ulong 
0b370                 | _expr
0b370     07 4A 05 F6 | 	mov	COUNT_, #7
0b374     A8 00 A0 FD | 	call	#pushregs_
0b378                 | _expr_enter
0b378     37 00 00 FF 
0b37c     44 E4 05 F1 | 	add	objptr, ##28228
0b380     F2 2C 02 FB | 	rdlong	local04, objptr
0b384     03 2C 66 F0 | 	shl	local04, #3
0b388     02 00 00 FF 
0b38c     38 E4 85 F1 | 	sub	objptr, ##1080
0b390     F2 2C 02 F1 | 	add	local04, objptr
0b394     04 2C 06 F1 | 	add	local04, #4
0b398     16 2F 02 FB | 	rdlong	local05, local04
0b39c                 | ' 
0b39c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0b39c     FE 2F 0E F2 | 	cmp	local05, #510 wz
0b3a0     35 00 00 FF 
0b3a4     0C E4 85 F1 | 	sub	objptr, ##27148
0b3a8     C4 00 90 5D |  if_ne	jmp	#LR__0940
0b3ac     1D 26 06 F6 | 	mov	local01, #29
0b3b0     FF 2A 06 F6 | 	mov	local03, #255
0b3b4     13 31 02 F6 | 	mov	local06, local01
0b3b8     14 33 02 F6 | 	mov	local07, local02
0b3bc     15 27 02 F6 | 	mov	local01, local03
0b3c0     4A 00 00 FF 
0b3c4     7C E4 05 F1 | 	add	objptr, ##38012
0b3c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b3cc     17 2D 02 F6 | 	mov	local04, local05
0b3d0     01 2C 66 F0 | 	shl	local04, #1
0b3d4     17 2D 02 F1 | 	add	local04, local05
0b3d8     02 2C 66 F0 | 	shl	local04, #2
0b3dc     03 00 00 FF 
0b3e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e4     F2 2C 02 F1 | 	add	local04, objptr
0b3e8     16 31 62 FC | 	wrlong	local06, local04
0b3ec     03 00 00 FF 
0b3f0     00 E4 05 F1 | 	add	objptr, ##1536
0b3f4     F2 30 02 FB | 	rdlong	local06, objptr
0b3f8     18 2F 02 F6 | 	mov	local05, local06
0b3fc     01 2E 66 F0 | 	shl	local05, #1
0b400     18 2F 02 F1 | 	add	local05, local06
0b404     02 2E 66 F0 | 	shl	local05, #2
0b408     03 00 00 FF 
0b40c     00 E4 85 F1 | 	sub	objptr, ##1536
0b410     F2 2E 02 F1 | 	add	local05, objptr
0b414     04 2E 06 F1 | 	add	local05, #4
0b418     17 33 62 FC | 	wrlong	local07, local05
0b41c     03 00 00 FF 
0b420     00 E4 05 F1 | 	add	objptr, ##1536
0b424     F2 32 02 FB | 	rdlong	local07, objptr
0b428     19 31 02 F6 | 	mov	local06, local07
0b42c     01 30 66 F0 | 	shl	local06, #1
0b430     19 31 02 F1 | 	add	local06, local07
0b434     02 30 66 F0 | 	shl	local06, #2
0b438     03 00 00 FF 
0b43c     00 E4 85 F1 | 	sub	objptr, ##1536
0b440     F2 30 02 F1 | 	add	local06, objptr
0b444     08 30 06 F1 | 	add	local06, #8
0b448     18 27 62 FC | 	wrlong	local01, local06
0b44c     03 00 00 FF 
0b450     00 E4 05 F1 | 	add	objptr, ##1536
0b454     F2 30 02 FB | 	rdlong	local06, objptr
0b458     01 30 06 F1 | 	add	local06, #1
0b45c     F2 30 62 FC | 	wrlong	local06, objptr
0b460     4A 00 00 FF 
0b464     7C E4 85 F1 | 	sub	objptr, ##38012
0b468     1D FA 05 F6 | 	mov	result1, #29
0b46c     64 01 90 FD | 	jmp	#LR__0943
0b470                 | LR__0940
0b470     00 26 06 F6 | 	mov	local01, #0
0b474     68 01 B0 FD | 	call	#_addsub
0b478                 | ' t3.result.uresult=0
0b478                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0b478                 | ' if err>0 then return err
0b478     01 FA 15 F2 | 	cmp	result1, #1 wc
0b47c     54 01 90 3D |  if_ae	jmp	#LR__0943
0b480     37 00 00 FF 
0b484     44 E4 05 F1 | 	add	objptr, ##28228
0b488     F2 2C 02 FB | 	rdlong	local04, objptr
0b48c     03 2C 66 F0 | 	shl	local04, #3
0b490     02 00 00 FF 
0b494     38 E4 85 F1 | 	sub	objptr, ##1080
0b498     F2 2C 02 F1 | 	add	local04, objptr
0b49c     04 2C 06 F1 | 	add	local04, #4
0b4a0     16 2F 02 FB | 	rdlong	local05, local04
0b4a4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0b4a4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0b4a4     35 00 00 FF 
0b4a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b4ac                 | LR__0941
0b4ac     1B 2E 0E F2 | 	cmp	local05, #27 wz
0b4b0     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0b4b4     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0b4b8     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0b4bc     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0b4c0     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0b4c4     08 01 90 5D |  if_ne	jmp	#LR__0942
0b4c8     37 00 00 FF 
0b4cc     44 E4 05 F1 | 	add	objptr, ##28228
0b4d0     F2 30 02 FB | 	rdlong	local06, objptr
0b4d4     01 30 06 F1 | 	add	local06, #1
0b4d8     F2 30 62 FC | 	wrlong	local06, objptr
0b4dc     37 00 00 FF 
0b4e0     44 E4 85 F1 | 	sub	objptr, ##28228
0b4e4     F8 00 B0 FD | 	call	#_addsub
0b4e8                 | '   ct+=1
0b4e8                 | '   err=addsub() : if err>0 then return err
0b4e8     01 FA 15 F2 | 	cmp	result1, #1 wc
0b4ec     E4 00 90 3D |  if_ae	jmp	#LR__0943
0b4f0     17 2B 02 F6 | 	mov	local03, local05
0b4f4     13 31 02 F6 | 	mov	local06, local01
0b4f8     14 33 02 F6 | 	mov	local07, local02
0b4fc     15 2F 02 F6 | 	mov	local05, local03
0b500     4A 00 00 FF 
0b504     7C E4 05 F1 | 	add	objptr, ##38012
0b508     F2 2C 02 FB | 	rdlong	local04, objptr
0b50c     16 FB 01 F6 | 	mov	result1, local04
0b510     01 FA 65 F0 | 	shl	result1, #1
0b514     16 FB 01 F1 | 	add	result1, local04
0b518     02 FA 65 F0 | 	shl	result1, #2
0b51c     03 00 00 FF 
0b520     00 E4 85 F1 | 	sub	objptr, ##1536
0b524     F2 FA 01 F1 | 	add	result1, objptr
0b528     FD 30 62 FC | 	wrlong	local06, result1
0b52c     03 00 00 FF 
0b530     00 E4 05 F1 | 	add	objptr, ##1536
0b534     F2 30 02 FB | 	rdlong	local06, objptr
0b538     18 2D 02 F6 | 	mov	local04, local06
0b53c     01 2C 66 F0 | 	shl	local04, #1
0b540     18 2D 02 F1 | 	add	local04, local06
0b544     02 2C 66 F0 | 	shl	local04, #2
0b548     03 00 00 FF 
0b54c     00 E4 85 F1 | 	sub	objptr, ##1536
0b550     F2 2C 02 F1 | 	add	local04, objptr
0b554     04 2C 06 F1 | 	add	local04, #4
0b558     16 33 62 FC | 	wrlong	local07, local04
0b55c     03 00 00 FF 
0b560     00 E4 05 F1 | 	add	objptr, ##1536
0b564     F2 32 02 FB | 	rdlong	local07, objptr
0b568     19 31 02 F6 | 	mov	local06, local07
0b56c     01 30 66 F0 | 	shl	local06, #1
0b570     19 31 02 F1 | 	add	local06, local07
0b574     02 30 66 F0 | 	shl	local06, #2
0b578     03 00 00 FF 
0b57c     00 E4 85 F1 | 	sub	objptr, ##1536
0b580     F2 30 02 F1 | 	add	local06, objptr
0b584     08 30 06 F1 | 	add	local06, #8
0b588     18 2F 62 FC | 	wrlong	local05, local06
0b58c     03 00 00 FF 
0b590     00 E4 05 F1 | 	add	objptr, ##1536
0b594     F2 30 02 FB | 	rdlong	local06, objptr
0b598     01 30 06 F1 | 	add	local06, #1
0b59c     F2 30 62 FC | 	wrlong	local06, objptr
0b5a0     13 00 00 FF 
0b5a4     38 E4 85 F1 | 	sub	objptr, ##9784
0b5a8     F2 2C 02 FB | 	rdlong	local04, objptr
0b5ac     03 2C 66 F0 | 	shl	local04, #3
0b5b0     02 00 00 FF 
0b5b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b5b8     F2 2C 02 F1 | 	add	local04, objptr
0b5bc     04 2C 06 F1 | 	add	local04, #4
0b5c0     16 2F 02 FB | 	rdlong	local05, local04
0b5c4     35 00 00 FF 
0b5c8     0C E4 85 F1 | 	sub	objptr, ##27148
0b5cc     DC FE 9F FD | 	jmp	#LR__0941
0b5d0                 | LR__0942
0b5d0                 | ' return 0  
0b5d0     00 FA 05 F6 | 	mov	result1, #0
0b5d4                 | LR__0943
0b5d4     A7 F0 03 F6 | 	mov	ptra, fp
0b5d8     B2 00 A0 FD | 	call	#popregs_
0b5dc                 | _expr_ret
0b5dc     2D 00 64 FD | 	ret
0b5e0                 | 
0b5e0                 | ' 
0b5e0                 | ' ' Second level operators : add, sub, logic
0b5e0                 | ' 
0b5e0                 | ' function addsub() as ulong
0b5e0                 | _addsub
0b5e0     07 4A 05 F6 | 	mov	COUNT_, #7
0b5e4     A8 00 A0 FD | 	call	#pushregs_
0b5e8                 | _addsub_enter
0b5e8     00 26 06 F6 | 	mov	local01, #0
0b5ec     60 01 B0 FD | 	call	#_muldiv
0b5f0                 | ' 
0b5f0                 | ' t3.result.uresult=0
0b5f0                 | ' err=muldiv() : if err>0 then return err           			 
0b5f0     01 FA 15 F2 | 	cmp	result1, #1 wc
0b5f4     4C 01 90 3D |  if_ae	jmp	#LR__0952
0b5f8     37 00 00 FF 
0b5fc     44 E4 05 F1 | 	add	objptr, ##28228
0b600     F2 2C 02 FB | 	rdlong	local04, objptr
0b604     03 2C 66 F0 | 	shl	local04, #3
0b608     02 00 00 FF 
0b60c     38 E4 85 F1 | 	sub	objptr, ##1080
0b610     F2 2C 02 F1 | 	add	local04, objptr
0b614     04 2C 06 F1 | 	add	local04, #4
0b618     16 2F 02 FB | 	rdlong	local05, local04
0b61c                 | ' op = lparts(ct).token				 
0b61c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0b61c     35 00 00 FF 
0b620     0C E4 85 F1 | 	sub	objptr, ##27148
0b624                 | LR__0950
0b624     01 2E 0E F2 | 	cmp	local05, #1 wz
0b628     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0b62c     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0b630     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0b634     08 01 90 5D |  if_ne	jmp	#LR__0951
0b638     37 00 00 FF 
0b63c     44 E4 05 F1 | 	add	objptr, ##28228
0b640     F2 2C 02 FB | 	rdlong	local04, objptr
0b644     01 2C 06 F1 | 	add	local04, #1
0b648     F2 2C 62 FC | 	wrlong	local04, objptr
0b64c     37 00 00 FF 
0b650     44 E4 85 F1 | 	sub	objptr, ##28228
0b654     F8 00 B0 FD | 	call	#_muldiv
0b658                 | '   ct+=1
0b658                 | '   err=muldiv() : if err>0 then return err   
0b658     01 FA 15 F2 | 	cmp	result1, #1 wc
0b65c     E4 00 90 3D |  if_ae	jmp	#LR__0952
0b660     17 2B 02 F6 | 	mov	local03, local05
0b664     13 31 02 F6 | 	mov	local06, local01
0b668     14 33 02 F6 | 	mov	local07, local02
0b66c     15 2F 02 F6 | 	mov	local05, local03
0b670     4A 00 00 FF 
0b674     7C E4 05 F1 | 	add	objptr, ##38012
0b678     F2 2C 02 FB | 	rdlong	local04, objptr
0b67c     16 FB 01 F6 | 	mov	result1, local04
0b680     01 FA 65 F0 | 	shl	result1, #1
0b684     16 FB 01 F1 | 	add	result1, local04
0b688     02 FA 65 F0 | 	shl	result1, #2
0b68c     03 00 00 FF 
0b690     00 E4 85 F1 | 	sub	objptr, ##1536
0b694     F2 FA 01 F1 | 	add	result1, objptr
0b698     FD 30 62 FC | 	wrlong	local06, result1
0b69c     03 00 00 FF 
0b6a0     00 E4 05 F1 | 	add	objptr, ##1536
0b6a4     F2 30 02 FB | 	rdlong	local06, objptr
0b6a8     18 2D 02 F6 | 	mov	local04, local06
0b6ac     01 2C 66 F0 | 	shl	local04, #1
0b6b0     18 2D 02 F1 | 	add	local04, local06
0b6b4     02 2C 66 F0 | 	shl	local04, #2
0b6b8     03 00 00 FF 
0b6bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b6c0     F2 2C 02 F1 | 	add	local04, objptr
0b6c4     04 2C 06 F1 | 	add	local04, #4
0b6c8     16 33 62 FC | 	wrlong	local07, local04
0b6cc     03 00 00 FF 
0b6d0     00 E4 05 F1 | 	add	objptr, ##1536
0b6d4     F2 32 02 FB | 	rdlong	local07, objptr
0b6d8     19 31 02 F6 | 	mov	local06, local07
0b6dc     01 30 66 F0 | 	shl	local06, #1
0b6e0     19 31 02 F1 | 	add	local06, local07
0b6e4     02 30 66 F0 | 	shl	local06, #2
0b6e8     03 00 00 FF 
0b6ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b6f0     F2 30 02 F1 | 	add	local06, objptr
0b6f4     08 30 06 F1 | 	add	local06, #8
0b6f8     18 2F 62 FC | 	wrlong	local05, local06
0b6fc     03 00 00 FF 
0b700     00 E4 05 F1 | 	add	objptr, ##1536
0b704     F2 30 02 FB | 	rdlong	local06, objptr
0b708     01 30 06 F1 | 	add	local06, #1
0b70c     F2 30 62 FC | 	wrlong	local06, objptr
0b710     13 00 00 FF 
0b714     38 E4 85 F1 | 	sub	objptr, ##9784
0b718     F2 2C 02 FB | 	rdlong	local04, objptr
0b71c     03 2C 66 F0 | 	shl	local04, #3
0b720     02 00 00 FF 
0b724     38 E4 85 F1 | 	sub	objptr, ##1080
0b728     F2 2C 02 F1 | 	add	local04, objptr
0b72c     04 2C 06 F1 | 	add	local04, #4
0b730     16 2F 02 FB | 	rdlong	local05, local04
0b734     35 00 00 FF 
0b738     0C E4 85 F1 | 	sub	objptr, ##27148
0b73c     E4 FE 9F FD | 	jmp	#LR__0950
0b740                 | LR__0951
0b740                 | ' return 0
0b740     00 FA 05 F6 | 	mov	result1, #0
0b744                 | LR__0952
0b744     A7 F0 03 F6 | 	mov	ptra, fp
0b748     B2 00 A0 FD | 	call	#popregs_
0b74c                 | _addsub_ret
0b74c     2D 00 64 FD | 	ret
0b750                 | 
0b750                 | ' 
0b750                 | ' ' Third level operators : mul,div,shift,power
0b750                 | ' 
0b750                 | ' function muldiv() as ulong
0b750                 | _muldiv
0b750     07 4A 05 F6 | 	mov	COUNT_, #7
0b754     A8 00 A0 FD | 	call	#pushregs_
0b758                 | _muldiv_enter
0b758     00 26 06 F6 | 	mov	local01, #0
0b75c     6C 01 B0 FD | 	call	#_getvalue
0b760                 | ' 
0b760                 | ' t3.result.uresult=0
0b760                 | ' err=getvalue() : if err>0 then return err     
0b760     01 FA 15 F2 | 	cmp	result1, #1 wc
0b764     58 01 90 3D |  if_ae	jmp	#LR__0962
0b768     37 00 00 FF 
0b76c     44 E4 05 F1 | 	add	objptr, ##28228
0b770     F2 2C 02 FB | 	rdlong	local04, objptr
0b774     03 2C 66 F0 | 	shl	local04, #3
0b778     02 00 00 FF 
0b77c     38 E4 85 F1 | 	sub	objptr, ##1080
0b780     F2 2C 02 F1 | 	add	local04, objptr
0b784     04 2C 06 F1 | 	add	local04, #4
0b788     16 2F 02 FB | 	rdlong	local05, local04
0b78c                 | ' op = lparts(ct).token
0b78c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0b78c     35 00 00 FF 
0b790     0C E4 85 F1 | 	sub	objptr, ##27148
0b794                 | LR__0960
0b794     05 2E 0E F2 | 	cmp	local05, #5 wz
0b798     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0b79c     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0b7a0     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0b7a4     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0b7a8     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0b7ac     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0b7b0     08 01 90 5D |  if_ne	jmp	#LR__0961
0b7b4     37 00 00 FF 
0b7b8     44 E4 05 F1 | 	add	objptr, ##28228
0b7bc     F2 2C 02 FB | 	rdlong	local04, objptr
0b7c0     01 2C 06 F1 | 	add	local04, #1
0b7c4     F2 2C 62 FC | 	wrlong	local04, objptr
0b7c8     37 00 00 FF 
0b7cc     44 E4 85 F1 | 	sub	objptr, ##28228
0b7d0     F8 00 B0 FD | 	call	#_getvalue
0b7d4                 | '   ct+=1
0b7d4                 | '   err=getvalue() :if err>0 then return err   
0b7d4     01 FA 15 F2 | 	cmp	result1, #1 wc
0b7d8     E4 00 90 3D |  if_ae	jmp	#LR__0962
0b7dc     17 2B 02 F6 | 	mov	local03, local05
0b7e0     13 31 02 F6 | 	mov	local06, local01
0b7e4     14 33 02 F6 | 	mov	local07, local02
0b7e8     15 2F 02 F6 | 	mov	local05, local03
0b7ec     4A 00 00 FF 
0b7f0     7C E4 05 F1 | 	add	objptr, ##38012
0b7f4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7f8     16 FB 01 F6 | 	mov	result1, local04
0b7fc     01 FA 65 F0 | 	shl	result1, #1
0b800     16 FB 01 F1 | 	add	result1, local04
0b804     02 FA 65 F0 | 	shl	result1, #2
0b808     03 00 00 FF 
0b80c     00 E4 85 F1 | 	sub	objptr, ##1536
0b810     F2 FA 01 F1 | 	add	result1, objptr
0b814     FD 30 62 FC | 	wrlong	local06, result1
0b818     03 00 00 FF 
0b81c     00 E4 05 F1 | 	add	objptr, ##1536
0b820     F2 30 02 FB | 	rdlong	local06, objptr
0b824     18 2D 02 F6 | 	mov	local04, local06
0b828     01 2C 66 F0 | 	shl	local04, #1
0b82c     18 2D 02 F1 | 	add	local04, local06
0b830     02 2C 66 F0 | 	shl	local04, #2
0b834     03 00 00 FF 
0b838     00 E4 85 F1 | 	sub	objptr, ##1536
0b83c     F2 2C 02 F1 | 	add	local04, objptr
0b840     04 2C 06 F1 | 	add	local04, #4
0b844     16 33 62 FC | 	wrlong	local07, local04
0b848     03 00 00 FF 
0b84c     00 E4 05 F1 | 	add	objptr, ##1536
0b850     F2 32 02 FB | 	rdlong	local07, objptr
0b854     19 31 02 F6 | 	mov	local06, local07
0b858     01 30 66 F0 | 	shl	local06, #1
0b85c     19 31 02 F1 | 	add	local06, local07
0b860     02 30 66 F0 | 	shl	local06, #2
0b864     03 00 00 FF 
0b868     00 E4 85 F1 | 	sub	objptr, ##1536
0b86c     F2 30 02 F1 | 	add	local06, objptr
0b870     08 30 06 F1 | 	add	local06, #8
0b874     18 2F 62 FC | 	wrlong	local05, local06
0b878     03 00 00 FF 
0b87c     00 E4 05 F1 | 	add	objptr, ##1536
0b880     F2 30 02 FB | 	rdlong	local06, objptr
0b884     01 30 06 F1 | 	add	local06, #1
0b888     F2 30 62 FC | 	wrlong	local06, objptr
0b88c     13 00 00 FF 
0b890     38 E4 85 F1 | 	sub	objptr, ##9784
0b894     F2 2C 02 FB | 	rdlong	local04, objptr
0b898     03 2C 66 F0 | 	shl	local04, #3
0b89c     02 00 00 FF 
0b8a0     38 E4 85 F1 | 	sub	objptr, ##1080
0b8a4     F2 2C 02 F1 | 	add	local04, objptr
0b8a8     04 2C 06 F1 | 	add	local04, #4
0b8ac     16 2F 02 FB | 	rdlong	local05, local04
0b8b0     35 00 00 FF 
0b8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b8b8     D8 FE 9F FD | 	jmp	#LR__0960
0b8bc                 | LR__0961
0b8bc                 | ' return 0
0b8bc     00 FA 05 F6 | 	mov	result1, #0
0b8c0                 | LR__0962
0b8c0     A7 F0 03 F6 | 	mov	ptra, fp
0b8c4     B2 00 A0 FD | 	call	#popregs_
0b8c8                 | _muldiv_ret
0b8c8     2D 00 64 FD | 	ret
0b8cc                 | 
0b8cc                 | ' 
0b8cc                 | ' ' Get a value for operations
0b8cc                 | ' 
0b8cc                 | ' function getvalue()  as ulong
0b8cc                 | _getvalue
0b8cc     0B 4A 05 F6 | 	mov	COUNT_, #11
0b8d0     A8 00 A0 FD | 	call	#pushregs_
0b8d4                 | _getvalue_enter
0b8d4     01 2C 06 F6 | 	mov	local04, #1
0b8d8     00 26 06 F6 | 	mov	local01, #0
0b8dc     1D 2A 06 F6 | 	mov	local03, #29
0b8e0     37 00 00 FF 
0b8e4     44 E4 05 F1 | 	add	objptr, ##28228
0b8e8     F2 16 02 FB | 	rdlong	arg03, objptr
0b8ec     03 16 66 F0 | 	shl	arg03, #3
0b8f0     02 00 00 FF 
0b8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b8f8     F2 16 02 F1 | 	add	arg03, objptr
0b8fc     04 16 06 F1 | 	add	arg03, #4
0b900     0B 2F 02 FB | 	rdlong	local05, arg03
0b904                 | ' 
0b904                 | ' m=1											' for negative numbers
0b904                 | ' t1.result.uresult=0: t1.result_type=result_uint
0b904                 | ' op=lparts(ct).token
0b904                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0b904     02 2E 0E F2 | 	cmp	local05, #2 wz
0b908     35 00 00 FF 
0b90c     0C E4 85 F1 | 	sub	objptr, ##27148
0b910     38 00 90 5D |  if_ne	jmp	#LR__0970
0b914     01 2C 66 F6 | 	neg	local04, #1
0b918     37 00 00 FF 
0b91c     44 E4 05 F1 | 	add	objptr, ##28228
0b920     F2 2E 02 FB | 	rdlong	local05, objptr
0b924     01 2E 06 F1 | 	add	local05, #1
0b928     F2 2E 62 FC | 	wrlong	local05, objptr
0b92c     03 2E 66 F0 | 	shl	local05, #3
0b930     02 00 00 FF 
0b934     38 E4 85 F1 | 	sub	objptr, ##1080
0b938     F2 2E 02 F1 | 	add	local05, objptr
0b93c     04 2E 06 F1 | 	add	local05, #4
0b940     17 2F 02 FB | 	rdlong	local05, local05
0b944     35 00 00 FF 
0b948     0C E4 85 F1 | 	sub	objptr, ##27148
0b94c                 | LR__0970
0b94c                 | ' select case op
0b94c     01 00 00 FF 
0b950     00 2E 0E F2 | 	cmp	local05, ##512 wz
0b954     44 00 90 AD |  if_e	jmp	#LR__0971
0b958     01 00 00 FF 
0b95c     01 2E 0E F2 | 	cmp	local05, ##513 wz
0b960     90 01 90 AD |  if_e	jmp	#LR__0974
0b964     01 00 00 FF 
0b968     02 2E 0E F2 | 	cmp	local05, ##514 wz
0b96c     44 04 90 AD |  if_e	jmp	#LR__0981
0b970     01 00 00 FF 
0b974     03 2E 0E F2 | 	cmp	local05, ##515 wz
0b978     A8 05 90 AD |  if_e	jmp	#LR__0984
0b97c     2C 2E 0E F2 | 	cmp	local05, #44 wz
0b980     78 07 90 AD |  if_e	jmp	#LR__0989
0b984     01 00 00 FF 
0b988     04 2E 0E F2 | 	cmp	local05, ##516 wz
0b98c     70 08 90 AD |  if_e	jmp	#LR__0990
0b990     15 2E 0E F2 | 	cmp	local05, #21 wz
0b994     98 08 90 AD |  if_e	jmp	#LR__0991
0b998     10 09 90 FD | 	jmp	#LR__0992
0b99c                 | LR__0971
0b99c                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0b99c     01 2C 0E F2 | 	cmp	local04, #1 wz
0b9a0     3C 00 90 5D |  if_ne	jmp	#LR__0972
0b9a4     37 00 00 FF 
0b9a8     44 E4 05 F1 | 	add	objptr, ##28228
0b9ac     F2 2E 02 FB | 	rdlong	local05, objptr
0b9b0     03 2E 66 F0 | 	shl	local05, #3
0b9b4     02 00 00 FF 
0b9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0b9bc     F2 2E 02 F1 | 	add	local05, objptr
0b9c0     17 13 02 FB | 	rdlong	arg01, local05
0b9c4     00 14 06 F6 | 	mov	arg02, #0
0b9c8     35 00 00 FF 
0b9cc     0C E4 85 F1 | 	sub	objptr, ##27148
0b9d0     90 C9 B1 FD | 	call	#__system____builtin_atoi
0b9d4     FD 2C 02 FD | 	qmul	local04, result1
0b9d8     18 26 62 FD | 	getqx	local01
0b9dc     1C 2A 06 F6 | 	mov	local03, #28
0b9e0                 | LR__0972
0b9e0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0b9e0     FF FF 7F FF 
0b9e4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b9e8     3C 00 90 5D |  if_ne	jmp	#LR__0973
0b9ec     37 00 00 FF 
0b9f0     44 E4 05 F1 | 	add	objptr, ##28228
0b9f4     F2 2E 02 FB | 	rdlong	local05, objptr
0b9f8     03 2E 66 F0 | 	shl	local05, #3
0b9fc     02 00 00 FF 
0ba00     38 E4 85 F1 | 	sub	objptr, ##1080
0ba04     F2 2E 02 F1 | 	add	local05, objptr
0ba08     17 13 02 FB | 	rdlong	arg01, local05
0ba0c     00 14 06 F6 | 	mov	arg02, #0
0ba10     35 00 00 FF 
0ba14     0C E4 85 F1 | 	sub	objptr, ##27148
0ba18     48 C9 B1 FD | 	call	#__system____builtin_atoi
0ba1c     FD 2C 02 FD | 	qmul	local04, result1
0ba20     18 26 62 FD | 	getqx	local01
0ba24     1C 2A 06 F6 | 	mov	local03, #28
0ba28                 | LR__0973
0ba28     13 31 02 F6 | 	mov	local06, local01
0ba2c     14 33 02 F6 | 	mov	local07, local02
0ba30     15 2F 02 F6 | 	mov	local05, local03
0ba34     4A 00 00 FF 
0ba38     7C E4 05 F1 | 	add	objptr, ##38012
0ba3c     F2 26 02 FB | 	rdlong	local01, objptr
0ba40     13 2D 02 F6 | 	mov	local04, local01
0ba44     01 2C 66 F0 | 	shl	local04, #1
0ba48     13 2D 02 F1 | 	add	local04, local01
0ba4c     02 2C 66 F0 | 	shl	local04, #2
0ba50     03 00 00 FF 
0ba54     00 E4 85 F1 | 	sub	objptr, ##1536
0ba58     F2 2C 02 F1 | 	add	local04, objptr
0ba5c     16 31 62 FC | 	wrlong	local06, local04
0ba60     03 00 00 FF 
0ba64     00 E4 05 F1 | 	add	objptr, ##1536
0ba68     F2 30 02 FB | 	rdlong	local06, objptr
0ba6c     18 27 02 F6 | 	mov	local01, local06
0ba70     01 26 66 F0 | 	shl	local01, #1
0ba74     18 27 02 F1 | 	add	local01, local06
0ba78     02 26 66 F0 | 	shl	local01, #2
0ba7c     03 00 00 FF 
0ba80     00 E4 85 F1 | 	sub	objptr, ##1536
0ba84     F2 26 02 F1 | 	add	local01, objptr
0ba88     04 26 06 F1 | 	add	local01, #4
0ba8c     13 33 62 FC | 	wrlong	local07, local01
0ba90     03 00 00 FF 
0ba94     00 E4 05 F1 | 	add	objptr, ##1536
0ba98     F2 32 02 FB | 	rdlong	local07, objptr
0ba9c     19 31 02 F6 | 	mov	local06, local07
0baa0     01 30 66 F0 | 	shl	local06, #1
0baa4     19 31 02 F1 | 	add	local06, local07
0baa8     02 30 66 F0 | 	shl	local06, #2
0baac     03 00 00 FF 
0bab0     00 E4 85 F1 | 	sub	objptr, ##1536
0bab4     F2 30 02 F1 | 	add	local06, objptr
0bab8     08 30 06 F1 | 	add	local06, #8
0babc     18 2F 62 FC | 	wrlong	local05, local06
0bac0     03 00 00 FF 
0bac4     00 E4 05 F1 | 	add	objptr, ##1536
0bac8     F2 30 02 FB | 	rdlong	local06, objptr
0bacc     01 30 06 F1 | 	add	local06, #1
0bad0     F2 30 62 FC | 	wrlong	local06, objptr
0bad4     13 00 00 FF 
0bad8     38 E4 85 F1 | 	sub	objptr, ##9784
0badc     F2 30 02 FB | 	rdlong	local06, objptr
0bae0     01 30 06 F1 | 	add	local06, #1
0bae4     F2 30 62 FC | 	wrlong	local06, objptr
0bae8     37 00 00 FF 
0baec     44 E4 85 F1 | 	sub	objptr, ##28228
0baf0     E4 07 90 FD | 	jmp	#LR__0993
0baf4                 | LR__0974
0baf4                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0baf4     37 00 00 FF 
0baf8     44 E4 05 F1 | 	add	objptr, ##28228
0bafc     F2 16 02 FB | 	rdlong	arg03, objptr
0bb00     03 16 66 F0 | 	shl	arg03, #3
0bb04     02 00 00 FF 
0bb08     38 E4 85 F1 | 	sub	objptr, ##1080
0bb0c     F2 16 02 F1 | 	add	arg03, objptr
0bb10     0B 13 02 FB | 	rdlong	arg01, arg03
0bb14     01 14 06 F6 | 	mov	arg02, #1
0bb18     35 00 00 FF 
0bb1c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb20     CC B3 B1 FD | 	call	#__system__Left_S
0bb24     FD 12 02 F6 | 	mov	arg01, result1
0bb28     A8 01 00 FF 
0bb2c     A4 14 06 F6 | 	mov	arg02, ##@LR__5743
0bb30     68 93 B1 FD | 	call	#__system___string_cmp
0bb34     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb38     94 00 90 5D |  if_ne	jmp	#LR__0977
0bb3c     37 00 00 FF 
0bb40     44 E4 05 F1 | 	add	objptr, ##28228
0bb44     F2 32 02 FB | 	rdlong	local07, objptr
0bb48     19 31 02 F6 | 	mov	local06, local07
0bb4c     03 30 66 F0 | 	shl	local06, #3
0bb50     02 00 00 FF 
0bb54     38 E4 85 F1 | 	sub	objptr, ##1080
0bb58     F2 30 02 F1 | 	add	local06, objptr
0bb5c     A8 01 00 FF 
0bb60     A6 2E 06 F6 | 	mov	local05, ##@LR__5744
0bb64     03 32 66 F0 | 	shl	local07, #3
0bb68     F2 32 02 F1 | 	add	local07, objptr
0bb6c     19 33 02 FB | 	rdlong	local07, local07
0bb70     02 00 00 FF 
0bb74     38 E4 05 F1 | 	add	objptr, ##1080
0bb78     F2 26 02 FB | 	rdlong	local01, objptr
0bb7c     03 26 66 F0 | 	shl	local01, #3
0bb80     02 00 00 FF 
0bb84     38 E4 85 F1 | 	sub	objptr, ##1080
0bb88     F2 26 02 F1 | 	add	local01, objptr
0bb8c     13 13 02 FB | 	rdlong	arg01, local01
0bb90     35 00 00 FF 
0bb94     0C E4 85 F1 | 	sub	objptr, ##27148
0bb98     09 35 02 F6 | 	mov	local08, arg01
0bb9c     97 06 48 FB | 	callpa	#(@LR__0976-@LR__0975)>>2,fcache_load_ptr_
0bba0                 | LR__0975
0bba0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bba4     01 34 06 51 |  if_ne	add	local08, #1
0bba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0975
0bbac                 | LR__0976
0bbac     09 35 82 F1 | 	sub	local08, arg01
0bbb0     1A 15 02 F6 | 	mov	arg02, local08
0bbb4     01 14 86 F1 | 	sub	arg02, #1
0bbb8     19 13 02 F6 | 	mov	arg01, local07
0bbbc     B8 B3 B1 FD | 	call	#__system__Right_S
0bbc0     FD 14 02 F6 | 	mov	arg02, result1
0bbc4     17 13 02 F6 | 	mov	arg01, local05
0bbc8     04 93 B1 FD | 	call	#__system___string_concat
0bbcc     18 FB 61 FC | 	wrlong	result1, local06
0bbd0                 | LR__0977
0bbd0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0bbd0     37 00 00 FF 
0bbd4     44 E4 05 F1 | 	add	objptr, ##28228
0bbd8     F2 16 02 FB | 	rdlong	arg03, objptr
0bbdc     03 16 66 F0 | 	shl	arg03, #3
0bbe0     02 00 00 FF 
0bbe4     38 E4 85 F1 | 	sub	objptr, ##1080
0bbe8     F2 16 02 F1 | 	add	arg03, objptr
0bbec     0B 13 02 FB | 	rdlong	arg01, arg03
0bbf0     01 14 06 F6 | 	mov	arg02, #1
0bbf4     35 00 00 FF 
0bbf8     0C E4 85 F1 | 	sub	objptr, ##27148
0bbfc     F0 B2 B1 FD | 	call	#__system__Left_S
0bc00     FD 12 02 F6 | 	mov	arg01, result1
0bc04     A8 01 00 FF 
0bc08     A9 14 06 F6 | 	mov	arg02, ##@LR__5745
0bc0c     8C 92 B1 FD | 	call	#__system___string_cmp
0bc10     00 FA 0D F2 | 	cmp	result1, #0 wz
0bc14     94 00 90 5D |  if_ne	jmp	#LR__0980
0bc18     37 00 00 FF 
0bc1c     44 E4 05 F1 | 	add	objptr, ##28228
0bc20     F2 32 02 FB | 	rdlong	local07, objptr
0bc24     19 31 02 F6 | 	mov	local06, local07
0bc28     03 30 66 F0 | 	shl	local06, #3
0bc2c     02 00 00 FF 
0bc30     38 E4 85 F1 | 	sub	objptr, ##1080
0bc34     F2 30 02 F1 | 	add	local06, objptr
0bc38     A8 01 00 FF 
0bc3c     AB 2E 06 F6 | 	mov	local05, ##@LR__5746
0bc40     03 32 66 F0 | 	shl	local07, #3
0bc44     F2 32 02 F1 | 	add	local07, objptr
0bc48     19 33 02 FB | 	rdlong	local07, local07
0bc4c     02 00 00 FF 
0bc50     38 E4 05 F1 | 	add	objptr, ##1080
0bc54     F2 26 02 FB | 	rdlong	local01, objptr
0bc58     03 26 66 F0 | 	shl	local01, #3
0bc5c     02 00 00 FF 
0bc60     38 E4 85 F1 | 	sub	objptr, ##1080
0bc64     F2 26 02 F1 | 	add	local01, objptr
0bc68     13 13 02 FB | 	rdlong	arg01, local01
0bc6c     35 00 00 FF 
0bc70     0C E4 85 F1 | 	sub	objptr, ##27148
0bc74     09 35 02 F6 | 	mov	local08, arg01
0bc78     97 06 48 FB | 	callpa	#(@LR__0979-@LR__0978)>>2,fcache_load_ptr_
0bc7c                 | LR__0978
0bc7c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bc80     01 34 06 51 |  if_ne	add	local08, #1
0bc84     F4 FF 9F 5D |  if_ne	jmp	#LR__0978
0bc88                 | LR__0979
0bc88     09 35 82 F1 | 	sub	local08, arg01
0bc8c     1A 15 02 F6 | 	mov	arg02, local08
0bc90     01 14 86 F1 | 	sub	arg02, #1
0bc94     19 13 02 F6 | 	mov	arg01, local07
0bc98     DC B2 B1 FD | 	call	#__system__Right_S
0bc9c     FD 14 02 F6 | 	mov	arg02, result1
0bca0     17 13 02 F6 | 	mov	arg01, local05
0bca4     28 92 B1 FD | 	call	#__system___string_concat
0bca8     18 FB 61 FC | 	wrlong	result1, local06
0bcac                 | LR__0980
0bcac     37 00 00 FF 
0bcb0     44 E4 05 F1 | 	add	objptr, ##28228
0bcb4     F2 30 02 FB | 	rdlong	local06, objptr
0bcb8     03 30 66 F0 | 	shl	local06, #3
0bcbc     02 00 00 FF 
0bcc0     38 E4 85 F1 | 	sub	objptr, ##1080
0bcc4     F2 30 02 F1 | 	add	local06, objptr
0bcc8     18 13 02 FB | 	rdlong	arg01, local06
0bccc     00 14 06 F6 | 	mov	arg02, #0
0bcd0     35 00 00 FF 
0bcd4     0C E4 85 F1 | 	sub	objptr, ##27148
0bcd8     88 C6 B1 FD | 	call	#__system____builtin_atoi
0bcdc     FD 2C 02 FD | 	qmul	local04, result1
0bce0     4A 00 00 FF 
0bce4     7C E4 05 F1 | 	add	objptr, ##38012
0bce8     F2 30 02 FB | 	rdlong	local06, objptr
0bcec     18 37 02 F6 | 	mov	local09, local06
0bcf0     01 36 66 F0 | 	shl	local09, #1
0bcf4     18 37 02 F1 | 	add	local09, local06
0bcf8     02 36 66 F0 | 	shl	local09, #2
0bcfc     03 00 00 FF 
0bd00     00 E4 85 F1 | 	sub	objptr, ##1536
0bd04     F2 36 02 F1 | 	add	local09, objptr
0bd08     03 00 00 FF 
0bd0c     00 E4 05 F1 | 	add	objptr, ##1536
0bd10     18 26 62 FD | 	getqx	local01
0bd14     1C 2A 06 F6 | 	mov	local03, #28
0bd18     13 31 02 F6 | 	mov	local06, local01
0bd1c     14 33 02 F6 | 	mov	local07, local02
0bd20     1B 31 62 FC | 	wrlong	local06, local09
0bd24     15 37 02 F6 | 	mov	local09, local03
0bd28     F2 30 02 FB | 	rdlong	local06, objptr
0bd2c     18 2F 02 F6 | 	mov	local05, local06
0bd30     01 2E 66 F0 | 	shl	local05, #1
0bd34     18 2F 02 F1 | 	add	local05, local06
0bd38     02 2E 66 F0 | 	shl	local05, #2
0bd3c     03 00 00 FF 
0bd40     00 E4 85 F1 | 	sub	objptr, ##1536
0bd44     F2 2E 02 F1 | 	add	local05, objptr
0bd48     04 2E 06 F1 | 	add	local05, #4
0bd4c     17 33 62 FC | 	wrlong	local07, local05
0bd50     03 00 00 FF 
0bd54     00 E4 05 F1 | 	add	objptr, ##1536
0bd58     F2 32 02 FB | 	rdlong	local07, objptr
0bd5c     19 31 02 F6 | 	mov	local06, local07
0bd60     01 30 66 F0 | 	shl	local06, #1
0bd64     19 31 02 F1 | 	add	local06, local07
0bd68     02 30 66 F0 | 	shl	local06, #2
0bd6c     03 00 00 FF 
0bd70     00 E4 85 F1 | 	sub	objptr, ##1536
0bd74     F2 30 02 F1 | 	add	local06, objptr
0bd78     08 30 06 F1 | 	add	local06, #8
0bd7c     18 37 62 FC | 	wrlong	local09, local06
0bd80     03 00 00 FF 
0bd84     00 E4 05 F1 | 	add	objptr, ##1536
0bd88     F2 30 02 FB | 	rdlong	local06, objptr
0bd8c     01 30 06 F1 | 	add	local06, #1
0bd90     F2 30 62 FC | 	wrlong	local06, objptr
0bd94     13 00 00 FF 
0bd98     38 E4 85 F1 | 	sub	objptr, ##9784
0bd9c     F2 30 02 FB | 	rdlong	local06, objptr
0bda0     01 30 06 F1 | 	add	local06, #1
0bda4     F2 30 62 FC | 	wrlong	local06, objptr
0bda8     37 00 00 FF 
0bdac     44 E4 85 F1 | 	sub	objptr, ##28228
0bdb0     24 05 90 FD | 	jmp	#LR__0993
0bdb4                 | LR__0981
0bdb4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0bdb4     01 2C 0E F2 | 	cmp	local04, #1 wz
0bdb8     48 00 90 5D |  if_ne	jmp	#LR__0982
0bdbc     00 C0 1F FF 
0bdc0     00 30 06 F6 | 	mov	local06, ##1065353216
0bdc4     37 00 00 FF 
0bdc8     44 E4 05 F1 | 	add	objptr, ##28228
0bdcc     F2 36 02 FB | 	rdlong	local09, objptr
0bdd0     03 36 66 F0 | 	shl	local09, #3
0bdd4     02 00 00 FF 
0bdd8     38 E4 85 F1 | 	sub	objptr, ##1080
0bddc     F2 36 02 F1 | 	add	local09, objptr
0bde0     1B 13 02 FB | 	rdlong	arg01, local09
0bde4     35 00 00 FF 
0bde8     0C E4 85 F1 | 	sub	objptr, ##27148
0bdec     08 C7 B1 FD | 	call	#__system____builtin_atof
0bdf0     FD 14 02 F6 | 	mov	arg02, result1
0bdf4     18 13 02 F6 | 	mov	arg01, local06
0bdf8     F0 BE B1 FD | 	call	#__system___float_mul
0bdfc     FD 26 02 F6 | 	mov	local01, result1
0be00     1E 2A 06 F6 | 	mov	local03, #30
0be04                 | LR__0982
0be04                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0be04     FF FF 7F FF 
0be08     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0be0c     48 00 90 5D |  if_ne	jmp	#LR__0983
0be10     00 C0 5F FF 
0be14     00 30 06 F6 | 	mov	local06, ##-1082130432
0be18     37 00 00 FF 
0be1c     44 E4 05 F1 | 	add	objptr, ##28228
0be20     F2 36 02 FB | 	rdlong	local09, objptr
0be24     03 36 66 F0 | 	shl	local09, #3
0be28     02 00 00 FF 
0be2c     38 E4 85 F1 | 	sub	objptr, ##1080
0be30     F2 36 02 F1 | 	add	local09, objptr
0be34     1B 13 02 FB | 	rdlong	arg01, local09
0be38     35 00 00 FF 
0be3c     0C E4 85 F1 | 	sub	objptr, ##27148
0be40     B4 C6 B1 FD | 	call	#__system____builtin_atof
0be44     FD 14 02 F6 | 	mov	arg02, result1
0be48     18 13 02 F6 | 	mov	arg01, local06
0be4c     9C BE B1 FD | 	call	#__system___float_mul
0be50     FD 26 02 F6 | 	mov	local01, result1
0be54     1E 2A 06 F6 | 	mov	local03, #30
0be58                 | LR__0983
0be58     13 31 02 F6 | 	mov	local06, local01
0be5c     14 33 02 F6 | 	mov	local07, local02
0be60     15 2F 02 F6 | 	mov	local05, local03
0be64     4A 00 00 FF 
0be68     7C E4 05 F1 | 	add	objptr, ##38012
0be6c     F2 26 02 FB | 	rdlong	local01, objptr
0be70     13 37 02 F6 | 	mov	local09, local01
0be74     01 36 66 F0 | 	shl	local09, #1
0be78     13 37 02 F1 | 	add	local09, local01
0be7c     02 36 66 F0 | 	shl	local09, #2
0be80     03 00 00 FF 
0be84     00 E4 85 F1 | 	sub	objptr, ##1536
0be88     F2 36 02 F1 | 	add	local09, objptr
0be8c     1B 31 62 FC | 	wrlong	local06, local09
0be90     03 00 00 FF 
0be94     00 E4 05 F1 | 	add	objptr, ##1536
0be98     F2 36 02 FB | 	rdlong	local09, objptr
0be9c     1B 31 02 F6 | 	mov	local06, local09
0bea0     01 30 66 F0 | 	shl	local06, #1
0bea4     1B 31 02 F1 | 	add	local06, local09
0bea8     02 30 66 F0 | 	shl	local06, #2
0beac     03 00 00 FF 
0beb0     00 E4 85 F1 | 	sub	objptr, ##1536
0beb4     F2 30 02 F1 | 	add	local06, objptr
0beb8     04 30 06 F1 | 	add	local06, #4
0bebc     18 33 62 FC | 	wrlong	local07, local06
0bec0     03 00 00 FF 
0bec4     00 E4 05 F1 | 	add	objptr, ##1536
0bec8     F2 36 02 FB | 	rdlong	local09, objptr
0becc     1B 33 02 F6 | 	mov	local07, local09
0bed0     01 32 66 F0 | 	shl	local07, #1
0bed4     1B 33 02 F1 | 	add	local07, local09
0bed8     02 32 66 F0 | 	shl	local07, #2
0bedc     03 00 00 FF 
0bee0     00 E4 85 F1 | 	sub	objptr, ##1536
0bee4     F2 32 02 F1 | 	add	local07, objptr
0bee8     08 32 06 F1 | 	add	local07, #8
0beec     19 2F 62 FC | 	wrlong	local05, local07
0bef0     03 00 00 FF 
0bef4     00 E4 05 F1 | 	add	objptr, ##1536
0bef8     F2 30 02 FB | 	rdlong	local06, objptr
0befc     01 30 06 F1 | 	add	local06, #1
0bf00     F2 30 62 FC | 	wrlong	local06, objptr
0bf04     13 00 00 FF 
0bf08     38 E4 85 F1 | 	sub	objptr, ##9784
0bf0c     F2 30 02 FB | 	rdlong	local06, objptr
0bf10     01 30 06 F1 | 	add	local06, #1
0bf14     F2 30 62 FC | 	wrlong	local06, objptr
0bf18     37 00 00 FF 
0bf1c     44 E4 85 F1 | 	sub	objptr, ##28228
0bf20     B4 03 90 FD | 	jmp	#LR__0993
0bf24                 | LR__0984
0bf24     37 00 00 FF 
0bf28     44 E4 05 F1 | 	add	objptr, ##28228
0bf2c     F2 16 02 FB | 	rdlong	arg03, objptr
0bf30     03 16 66 F0 | 	shl	arg03, #3
0bf34     02 00 00 FF 
0bf38     38 E4 85 F1 | 	sub	objptr, ##1080
0bf3c     F2 16 02 F1 | 	add	arg03, objptr
0bf40     0B 13 02 FB | 	rdlong	arg01, arg03
0bf44     35 00 00 FF 
0bf48     0C E4 85 F1 | 	sub	objptr, ##27148
0bf4c     09 35 02 F6 | 	mov	local08, arg01
0bf50     97 06 48 FB | 	callpa	#(@LR__0986-@LR__0985)>>2,fcache_load_ptr_
0bf54                 | LR__0985
0bf54     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bf58     01 34 06 51 |  if_ne	add	local08, #1
0bf5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0985
0bf60                 | LR__0986
0bf60     09 35 82 F1 | 	sub	local08, arg01
0bf64     1A FB 01 F6 | 	mov	result1, local08
0bf68     52 00 00 FF 
0bf6c     2C E4 05 F1 | 	add	objptr, ##42028
0bf70     F2 FA 61 FC | 	wrlong	result1, objptr
0bf74     58 E4 85 F1 | 	sub	objptr, #88
0bf78     F2 12 02 FB | 	rdlong	arg01, objptr
0bf7c     FD 12 82 F1 | 	sub	arg01, result1
0bf80     04 12 86 F1 | 	sub	arg01, #4
0bf84     03 12 26 F5 | 	andn	arg01, #3
0bf88     F2 12 62 FC | 	wrlong	arg01, objptr
0bf8c     58 E4 05 F1 | 	add	objptr, #88
0bf90     F2 14 02 FB | 	rdlong	arg02, objptr
0bf94     52 00 00 FF 
0bf98     2C E4 85 F1 | 	sub	objptr, ##42028
0bf9c     D0 56 B1 FD | 	call	#_pslpoke
0bfa0                 | '     pslpoke memtop,l
0bfa0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0bfa0     01 38 06 F6 | 	mov	local10, #1
0bfa4     52 00 00 FF 
0bfa8     2C E4 05 F1 | 	add	objptr, ##42028
0bfac     F2 3A 02 FB | 	rdlong	local11, objptr
0bfb0     52 00 00 FF 
0bfb4     2C E4 85 F1 | 	sub	objptr, ##42028
0bfb8     01 3A 06 F1 | 	add	local11, #1
0bfbc                 | LR__0987
0bfbc     1D 39 52 F2 | 	cmps	local10, local11 wc
0bfc0     5C 00 90 3D |  if_ae	jmp	#LR__0988
0bfc4     51 00 00 FF 
0bfc8     D4 E5 05 F1 | 	add	objptr, ##41940
0bfcc     F2 32 02 FB | 	rdlong	local07, objptr
0bfd0     03 32 06 F1 | 	add	local07, #3
0bfd4     1C 33 02 F1 | 	add	local07, local10
0bfd8     1A 00 00 FF 
0bfdc     90 E5 85 F1 | 	sub	objptr, ##13712
0bfe0     F2 36 02 FB | 	rdlong	local09, objptr
0bfe4     03 36 66 F0 | 	shl	local09, #3
0bfe8     02 00 00 FF 
0bfec     38 E4 85 F1 | 	sub	objptr, ##1080
0bff0     F2 36 02 F1 | 	add	local09, objptr
0bff4     1B 13 02 FB | 	rdlong	arg01, local09
0bff8     1C 15 02 F6 | 	mov	arg02, local10
0bffc     01 16 06 F6 | 	mov	arg03, #1
0c000     35 00 00 FF 
0c004     0C E4 85 F1 | 	sub	objptr, ##27148
0c008     FC AF B1 FD | 	call	#__system__Mid_S
0c00c     FD 14 C2 FA | 	rdbyte	arg02, result1
0c010     19 13 02 F6 | 	mov	arg01, local07
0c014     E8 56 B1 FD | 	call	#_pspoke
0c018     01 38 06 F1 | 	add	local10, #1
0c01c     9C FF 9F FD | 	jmp	#LR__0987
0c020                 | LR__0988
0c020     51 00 00 FF 
0c024     D4 E5 05 F1 | 	add	objptr, ##41940
0c028     F2 26 02 FB | 	rdlong	local01, objptr
0c02c     2B 2A 06 F6 | 	mov	local03, #43
0c030     13 31 02 F6 | 	mov	local06, local01
0c034     14 33 02 F6 | 	mov	local07, local02
0c038     15 3B 02 F6 | 	mov	local11, local03
0c03c     07 00 00 FF 
0c040     58 E5 85 F1 | 	sub	objptr, ##3928
0c044     F2 38 02 FB | 	rdlong	local10, objptr
0c048     1C 37 02 F6 | 	mov	local09, local10
0c04c     01 36 66 F0 | 	shl	local09, #1
0c050     1C 37 02 F1 | 	add	local09, local10
0c054     02 36 66 F0 | 	shl	local09, #2
0c058     03 00 00 FF 
0c05c     00 E4 85 F1 | 	sub	objptr, ##1536
0c060     F2 36 02 F1 | 	add	local09, objptr
0c064     1B 31 62 FC | 	wrlong	local06, local09
0c068     03 00 00 FF 
0c06c     00 E4 05 F1 | 	add	objptr, ##1536
0c070     F2 38 02 FB | 	rdlong	local10, objptr
0c074     1C 37 02 F6 | 	mov	local09, local10
0c078     01 36 66 F0 | 	shl	local09, #1
0c07c     1C 37 02 F1 | 	add	local09, local10
0c080     02 36 66 F0 | 	shl	local09, #2
0c084     03 00 00 FF 
0c088     00 E4 85 F1 | 	sub	objptr, ##1536
0c08c     F2 36 02 F1 | 	add	local09, objptr
0c090     04 36 06 F1 | 	add	local09, #4
0c094     1B 33 62 FC | 	wrlong	local07, local09
0c098     03 00 00 FF 
0c09c     00 E4 05 F1 | 	add	objptr, ##1536
0c0a0     F2 38 02 FB | 	rdlong	local10, objptr
0c0a4     1C 37 02 F6 | 	mov	local09, local10
0c0a8     01 36 66 F0 | 	shl	local09, #1
0c0ac     1C 37 02 F1 | 	add	local09, local10
0c0b0     02 36 66 F0 | 	shl	local09, #2
0c0b4     03 00 00 FF 
0c0b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0bc     F2 36 02 F1 | 	add	local09, objptr
0c0c0     08 36 06 F1 | 	add	local09, #8
0c0c4     1B 3B 62 FC | 	wrlong	local11, local09
0c0c8     03 00 00 FF 
0c0cc     00 E4 05 F1 | 	add	objptr, ##1536
0c0d0     F2 30 02 FB | 	rdlong	local06, objptr
0c0d4     01 30 06 F1 | 	add	local06, #1
0c0d8     F2 30 62 FC | 	wrlong	local06, objptr
0c0dc     13 00 00 FF 
0c0e0     38 E4 85 F1 | 	sub	objptr, ##9784
0c0e4     F2 30 02 FB | 	rdlong	local06, objptr
0c0e8     01 30 06 F1 | 	add	local06, #1
0c0ec     F2 30 62 FC | 	wrlong	local06, objptr
0c0f0     37 00 00 FF 
0c0f4     44 E4 85 F1 | 	sub	objptr, ##28228
0c0f8     DC 01 90 FD | 	jmp	#LR__0993
0c0fc                 | LR__0989
0c0fc     2C 2A 06 F6 | 	mov	local03, #44
0c100     37 00 00 FF 
0c104     44 E4 05 F1 | 	add	objptr, ##28228
0c108     F2 30 02 FB | 	rdlong	local06, objptr
0c10c     03 30 66 F0 | 	shl	local06, #3
0c110     02 00 00 FF 
0c114     38 E4 85 F1 | 	sub	objptr, ##1080
0c118     F2 30 02 F1 | 	add	local06, objptr
0c11c     18 13 02 FB | 	rdlong	arg01, local06
0c120     00 14 06 F6 | 	mov	arg02, #0
0c124     35 00 00 FF 
0c128     0C E4 85 F1 | 	sub	objptr, ##27148
0c12c     34 C2 B1 FD | 	call	#__system____builtin_atoi
0c130     FD 26 02 F6 | 	mov	local01, result1
0c134     13 31 02 F6 | 	mov	local06, local01
0c138     14 33 02 F6 | 	mov	local07, local02
0c13c     15 3B 02 F6 | 	mov	local11, local03
0c140     4A 00 00 FF 
0c144     7C E4 05 F1 | 	add	objptr, ##38012
0c148     F2 38 02 FB | 	rdlong	local10, objptr
0c14c     1C 37 02 F6 | 	mov	local09, local10
0c150     01 36 66 F0 | 	shl	local09, #1
0c154     1C 37 02 F1 | 	add	local09, local10
0c158     02 36 66 F0 | 	shl	local09, #2
0c15c     03 00 00 FF 
0c160     00 E4 85 F1 | 	sub	objptr, ##1536
0c164     F2 36 02 F1 | 	add	local09, objptr
0c168     1B 31 62 FC | 	wrlong	local06, local09
0c16c     03 00 00 FF 
0c170     00 E4 05 F1 | 	add	objptr, ##1536
0c174     F2 38 02 FB | 	rdlong	local10, objptr
0c178     1C 37 02 F6 | 	mov	local09, local10
0c17c     01 36 66 F0 | 	shl	local09, #1
0c180     1C 37 02 F1 | 	add	local09, local10
0c184     02 36 66 F0 | 	shl	local09, #2
0c188     03 00 00 FF 
0c18c     00 E4 85 F1 | 	sub	objptr, ##1536
0c190     F2 36 02 F1 | 	add	local09, objptr
0c194     04 36 06 F1 | 	add	local09, #4
0c198     1B 33 62 FC | 	wrlong	local07, local09
0c19c     03 00 00 FF 
0c1a0     00 E4 05 F1 | 	add	objptr, ##1536
0c1a4     F2 38 02 FB | 	rdlong	local10, objptr
0c1a8     1C 37 02 F6 | 	mov	local09, local10
0c1ac     01 36 66 F0 | 	shl	local09, #1
0c1b0     1C 37 02 F1 | 	add	local09, local10
0c1b4     02 36 66 F0 | 	shl	local09, #2
0c1b8     03 00 00 FF 
0c1bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c1c0     F2 36 02 F1 | 	add	local09, objptr
0c1c4     08 36 06 F1 | 	add	local09, #8
0c1c8     1B 3B 62 FC | 	wrlong	local11, local09
0c1cc     03 00 00 FF 
0c1d0     00 E4 05 F1 | 	add	objptr, ##1536
0c1d4     F2 30 02 FB | 	rdlong	local06, objptr
0c1d8     01 30 06 F1 | 	add	local06, #1
0c1dc     F2 30 62 FC | 	wrlong	local06, objptr
0c1e0     13 00 00 FF 
0c1e4     38 E4 85 F1 | 	sub	objptr, ##9784
0c1e8     F2 30 02 FB | 	rdlong	local06, objptr
0c1ec     01 30 06 F1 | 	add	local06, #1
0c1f0     F2 30 62 FC | 	wrlong	local06, objptr
0c1f4     37 00 00 FF 
0c1f8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1fc     D8 00 90 FD | 	jmp	#LR__0993
0c200                 | LR__0990
0c200     16 13 02 F6 | 	mov	arg01, local04
0c204     24 04 B0 FD | 	call	#_getvar
0c208     37 00 00 FF 
0c20c     44 E4 05 F1 | 	add	objptr, ##28228
0c210     F2 30 02 FB | 	rdlong	local06, objptr
0c214     01 30 06 F1 | 	add	local06, #1
0c218     F2 30 62 FC | 	wrlong	local06, objptr
0c21c     37 00 00 FF 
0c220     44 E4 85 F1 | 	sub	objptr, ##28228
0c224                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c224     01 FA 55 F2 | 	cmps	result1, #1 wc
0c228     B0 00 90 3D |  if_ae	jmp	#LR__0994
0c22c     A8 00 90 FD | 	jmp	#LR__0993
0c230                 | LR__0991
0c230     37 00 00 FF 
0c234     44 E4 05 F1 | 	add	objptr, ##28228
0c238     F2 30 02 FB | 	rdlong	local06, objptr
0c23c     01 30 06 F1 | 	add	local06, #1
0c240     F2 30 62 FC | 	wrlong	local06, objptr
0c244     37 00 00 FF 
0c248     44 E4 85 F1 | 	sub	objptr, ##28228
0c24c     20 F1 BF FD | 	call	#_expr
0c250                 | '     ct+=1
0c250                 | '     err=expr() : if err>0 then return err 
0c250     01 FA 55 F2 | 	cmps	result1, #1 wc
0c254     84 00 90 3D |  if_ae	jmp	#LR__0994
0c258                 | '     if lparts(ct).token=token_rpar then ct+=1
0c258     37 00 00 FF 
0c25c     44 E4 05 F1 | 	add	objptr, ##28228
0c260     F2 3A 02 FB | 	rdlong	local11, objptr
0c264     03 3A 66 F0 | 	shl	local11, #3
0c268     02 00 00 FF 
0c26c     38 E4 85 F1 | 	sub	objptr, ##1080
0c270     F2 3A 02 F1 | 	add	local11, objptr
0c274     04 3A 06 F1 | 	add	local11, #4
0c278     1D 3B 02 FB | 	rdlong	local11, local11
0c27c     14 3A 0E F2 | 	cmp	local11, #20 wz
0c280     35 00 00 FF 
0c284     0C E4 85 F1 | 	sub	objptr, ##27148
0c288     4C 00 90 5D |  if_ne	jmp	#LR__0993
0c28c     37 00 00 FF 
0c290     44 E4 05 F1 | 	add	objptr, ##28228
0c294     F2 30 02 FB | 	rdlong	local06, objptr
0c298     01 30 06 F1 | 	add	local06, #1
0c29c     F2 30 62 FC | 	wrlong	local06, objptr
0c2a0     37 00 00 FF 
0c2a4     44 E4 85 F1 | 	sub	objptr, ##28228
0c2a8     2C 00 90 FD | 	jmp	#LR__0993
0c2ac                 | LR__0992
0c2ac     16 13 02 F6 | 	mov	arg01, local04
0c2b0     34 00 B0 FD | 	call	#_getfun
0c2b4     37 00 00 FF 
0c2b8     44 E4 05 F1 | 	add	objptr, ##28228
0c2bc     F2 30 02 FB | 	rdlong	local06, objptr
0c2c0     01 30 06 F1 | 	add	local06, #1
0c2c4     F2 30 62 FC | 	wrlong	local06, objptr
0c2c8     37 00 00 FF 
0c2cc     44 E4 85 F1 | 	sub	objptr, ##28228
0c2d0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0c2d0     01 FA 55 F2 | 	cmps	result1, #1 wc
0c2d4     04 00 90 3D |  if_ae	jmp	#LR__0994
0c2d8                 | LR__0993
0c2d8                 | ' return 0  
0c2d8     00 FA 05 F6 | 	mov	result1, #0
0c2dc                 | LR__0994
0c2dc     A7 F0 03 F6 | 	mov	ptra, fp
0c2e0     B2 00 A0 FD | 	call	#popregs_
0c2e4                 | _getvalue_ret
0c2e4     2D 00 64 FD | 	ret
0c2e8                 | 
0c2e8                 | ' 
0c2e8                 | ' ' Get a function result 
0c2e8                 | ' 
0c2e8                 | ' function getfun(m as integer) as ulong
0c2e8                 | _getfun
0c2e8     0F 4A 05 F6 | 	mov	COUNT_, #15
0c2ec     A8 00 A0 FD | 	call	#pushregs_
0c2f0                 | _getfun_enter
0c2f0     09 2D 02 F6 | 	mov	local04, arg01
0c2f4     37 00 00 FF 
0c2f8     44 E4 05 F1 | 	add	objptr, ##28228
0c2fc     F2 2E 02 FB | 	rdlong	local05, objptr
0c300     17 31 02 F6 | 	mov	local06, local05
0c304     00 32 06 F6 | 	mov	local07, #0
0c308                 | ' oldct=ct
0c308                 | ' numpar=0
0c308                 | ' if lparts(ct+1).token=token_lpar then
0c308     01 2E 06 F1 | 	add	local05, #1
0c30c     03 2E 66 F0 | 	shl	local05, #3
0c310     02 00 00 FF 
0c314     38 E4 85 F1 | 	sub	objptr, ##1080
0c318     F2 2E 02 F1 | 	add	local05, objptr
0c31c     04 2E 06 F1 | 	add	local05, #4
0c320     17 2F 02 FB | 	rdlong	local05, local05
0c324     15 2E 0E F2 | 	cmp	local05, #21 wz
0c328     35 00 00 FF 
0c32c     0C E4 85 F1 | 	sub	objptr, ##27148
0c330     54 01 90 5D |  if_ne	jmp	#LR__1004
0c334     37 00 00 FF 
0c338     44 E4 05 F1 | 	add	objptr, ##28228
0c33c     F2 34 02 FB | 	rdlong	local08, objptr
0c340     01 34 06 F1 | 	add	local08, #1
0c344     F2 34 62 FC | 	wrlong	local08, objptr
0c348     37 00 00 FF 
0c34c     44 E4 85 F1 | 	sub	objptr, ##28228
0c350                 | '   ct+=1 											' omit this lpar, this is for expr list
0c350                 | '   do
0c350                 | LR__1000
0c350     37 00 00 FF 
0c354     44 E4 05 F1 | 	add	objptr, ##28228
0c358     F2 2E 02 FB | 	rdlong	local05, objptr
0c35c     01 2E 06 F1 | 	add	local05, #1
0c360     F2 2E 62 FC | 	wrlong	local05, objptr
0c364                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c364                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c364     03 2E 66 F0 | 	shl	local05, #3
0c368     02 00 00 FF 
0c36c     38 E4 85 F1 | 	sub	objptr, ##1080
0c370     F2 2E 02 F1 | 	add	local05, objptr
0c374     04 2E 06 F1 | 	add	local05, #4
0c378     17 35 02 FB | 	rdlong	local08, local05
0c37c     15 34 0E F2 | 	cmp	local08, #21 wz
0c380     35 00 00 FF 
0c384     0C E4 85 F1 | 	sub	objptr, ##27148
0c388     44 00 90 5D |  if_ne	jmp	#LR__1001
0c38c     37 00 00 FF 
0c390     44 E4 05 F1 | 	add	objptr, ##28228
0c394     F2 34 02 FB | 	rdlong	local08, objptr
0c398     01 34 06 F1 | 	add	local08, #1
0c39c     F2 34 62 FC | 	wrlong	local08, objptr
0c3a0     37 00 00 FF 
0c3a4     44 E4 85 F1 | 	sub	objptr, ##28228
0c3a8     C4 EF BF FD | 	call	#_expr
0c3ac     FD 36 02 F6 | 	mov	local09, result1
0c3b0     37 00 00 FF 
0c3b4     44 E4 05 F1 | 	add	objptr, ##28228
0c3b8     F2 34 02 FB | 	rdlong	local08, objptr
0c3bc     01 34 06 F1 | 	add	local08, #1
0c3c0     F2 34 62 FC | 	wrlong	local08, objptr
0c3c4     37 00 00 FF 
0c3c8     44 E4 85 F1 | 	sub	objptr, ##28228
0c3cc     08 00 90 FD | 	jmp	#LR__1002
0c3d0                 | LR__1001
0c3d0     9C EF BF FD | 	call	#_expr
0c3d4     FD 36 02 F6 | 	mov	local09, result1
0c3d8                 | LR__1002
0c3d8                 | '     if err>0 then return err
0c3d8     01 36 16 F2 | 	cmp	local09, #1 wc
0c3dc     1B FB 01 36 |  if_ae	mov	result1, local09
0c3e0     3C 02 90 3D |  if_ae	jmp	#LR__1006
0c3e4     01 32 06 F1 | 	add	local07, #1
0c3e8     37 00 00 FF 
0c3ec     44 E4 05 F1 | 	add	objptr, ##28228
0c3f0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3f4     03 2E 66 F0 | 	shl	local05, #3
0c3f8     02 00 00 FF 
0c3fc     38 E4 85 F1 | 	sub	objptr, ##1080
0c400     F2 2E 02 F1 | 	add	local05, objptr
0c404     04 2E 06 F1 | 	add	local05, #4
0c408     17 37 02 FB | 	rdlong	local09, local05
0c40c     14 36 0E F2 | 	cmp	local09, #20 wz
0c410     35 00 00 FF 
0c414     0C E4 85 F1 | 	sub	objptr, ##27148
0c418     34 00 90 AD |  if_e	jmp	#LR__1003
0c41c     37 00 00 FF 
0c420     44 E4 05 F1 | 	add	objptr, ##28228
0c424     F2 36 02 FB | 	rdlong	local09, objptr
0c428     03 36 66 F0 | 	shl	local09, #3
0c42c     02 00 00 FF 
0c430     38 E4 85 F1 | 	sub	objptr, ##1080
0c434     F2 36 02 F1 | 	add	local09, objptr
0c438     04 36 06 F1 | 	add	local09, #4
0c43c     1B 37 02 FB | 	rdlong	local09, local09
0c440     FE 37 0E F2 | 	cmp	local09, #510 wz
0c444     35 00 00 FF 
0c448     0C E4 85 F1 | 	sub	objptr, ##27148
0c44c     00 FF 9F 5D |  if_ne	jmp	#LR__1000
0c450                 | LR__1003
0c450                 | '   if lparts(ct).token=token_end then return 14
0c450     37 00 00 FF 
0c454     44 E4 05 F1 | 	add	objptr, ##28228
0c458     F2 2E 02 FB | 	rdlong	local05, objptr
0c45c     03 2E 66 F0 | 	shl	local05, #3
0c460     02 00 00 FF 
0c464     38 E4 85 F1 | 	sub	objptr, ##1080
0c468     F2 2E 02 F1 | 	add	local05, objptr
0c46c     04 2E 06 F1 | 	add	local05, #4
0c470     17 37 02 FB | 	rdlong	local09, local05
0c474     FE 37 0E F2 | 	cmp	local09, #510 wz
0c478     35 00 00 FF 
0c47c     0C E4 85 F1 | 	sub	objptr, ##27148
0c480     0E FA 05 A6 |  if_e	mov	result1, #14
0c484     98 01 90 AD |  if_e	jmp	#LR__1006
0c488                 | LR__1004
0c488     19 27 02 F6 | 	mov	local01, local07
0c48c     03 30 66 F0 | 	shl	local06, #3
0c490     35 00 00 FF 
0c494     0C E4 05 F1 | 	add	objptr, ##27148
0c498     F2 30 02 F1 | 	add	local06, objptr
0c49c     04 30 06 F1 | 	add	local06, #4
0c4a0     18 2B 02 FB | 	rdlong	local03, local06
0c4a4     13 35 02 F6 | 	mov	local08, local01
0c4a8     14 39 02 F6 | 	mov	local10, local02
0c4ac     15 3B 02 F6 | 	mov	local11, local03
0c4b0     15 00 00 FF 
0c4b4     70 E4 05 F1 | 	add	objptr, ##10864
0c4b8     F2 3C 02 FB | 	rdlong	local12, objptr
0c4bc     1E 3F 02 F6 | 	mov	local13, local12
0c4c0     01 3E 66 F0 | 	shl	local13, #1
0c4c4     1E 3F 02 F1 | 	add	local13, local12
0c4c8     02 3E 66 F0 | 	shl	local13, #2
0c4cc     03 00 00 FF 
0c4d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c4d4     F2 3E 02 F1 | 	add	local13, objptr
0c4d8     1F 35 62 FC | 	wrlong	local08, local13
0c4dc     03 00 00 FF 
0c4e0     00 E4 05 F1 | 	add	objptr, ##1536
0c4e4     F2 34 02 FB | 	rdlong	local08, objptr
0c4e8     1A 41 02 F6 | 	mov	local14, local08
0c4ec     01 40 66 F0 | 	shl	local14, #1
0c4f0     1A 41 02 F1 | 	add	local14, local08
0c4f4     02 40 66 F0 | 	shl	local14, #2
0c4f8     03 00 00 FF 
0c4fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c500     F2 40 02 F1 | 	add	local14, objptr
0c504     04 40 06 F1 | 	add	local14, #4
0c508     20 39 62 FC | 	wrlong	local10, local14
0c50c     03 00 00 FF 
0c510     00 E4 05 F1 | 	add	objptr, ##1536
0c514     F2 34 02 FB | 	rdlong	local08, objptr
0c518     1A 43 02 F6 | 	mov	local15, local08
0c51c     01 42 66 F0 | 	shl	local15, #1
0c520     1A 43 02 F1 | 	add	local15, local08
0c524     02 42 66 F0 | 	shl	local15, #2
0c528     03 00 00 FF 
0c52c     00 E4 85 F1 | 	sub	objptr, ##1536
0c530     F2 42 02 F1 | 	add	local15, objptr
0c534     08 42 06 F1 | 	add	local15, #8
0c538     21 3B 62 FC | 	wrlong	local11, local15
0c53c     03 00 00 FF 
0c540     00 E4 05 F1 | 	add	objptr, ##1536
0c544     F2 34 02 FB | 	rdlong	local08, objptr
0c548     01 34 06 F1 | 	add	local08, #1
0c54c     F2 34 62 FC | 	wrlong	local08, objptr
0c550     4A 00 00 FF 
0c554     7C E4 85 F1 | 	sub	objptr, ##38012
0c558                 | ' t2.result.uresult=numpar
0c558                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0c558                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c558                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c558     FF FF 7F FF 
0c55c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c560     B8 00 90 5D |  if_ne	jmp	#LR__1005
0c564     15 2A 06 F6 | 	mov	local03, #21
0c568     13 35 02 F6 | 	mov	local08, local01
0c56c     14 39 02 F6 | 	mov	local10, local02
0c570     15 3B 02 F6 | 	mov	local11, local03
0c574     4A 00 00 FF 
0c578     7C E4 05 F1 | 	add	objptr, ##38012
0c57c     F2 3C 02 FB | 	rdlong	local12, objptr
0c580     1E 3F 02 F6 | 	mov	local13, local12
0c584     01 3E 66 F0 | 	shl	local13, #1
0c588     1E 3F 02 F1 | 	add	local13, local12
0c58c     02 3E 66 F0 | 	shl	local13, #2
0c590     03 00 00 FF 
0c594     00 E4 85 F1 | 	sub	objptr, ##1536
0c598     F2 3E 02 F1 | 	add	local13, objptr
0c59c     1F 35 62 FC | 	wrlong	local08, local13
0c5a0     03 00 00 FF 
0c5a4     00 E4 05 F1 | 	add	objptr, ##1536
0c5a8     F2 42 02 FB | 	rdlong	local15, objptr
0c5ac     21 41 02 F6 | 	mov	local14, local15
0c5b0     01 40 66 F0 | 	shl	local14, #1
0c5b4     21 41 02 F1 | 	add	local14, local15
0c5b8     02 40 66 F0 | 	shl	local14, #2
0c5bc     03 00 00 FF 
0c5c0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5c4     F2 40 02 F1 | 	add	local14, objptr
0c5c8     04 40 06 F1 | 	add	local14, #4
0c5cc     20 39 62 FC | 	wrlong	local10, local14
0c5d0     03 00 00 FF 
0c5d4     00 E4 05 F1 | 	add	objptr, ##1536
0c5d8     F2 40 02 FB | 	rdlong	local14, objptr
0c5dc     20 43 02 F6 | 	mov	local15, local14
0c5e0     01 42 66 F0 | 	shl	local15, #1
0c5e4     20 43 02 F1 | 	add	local15, local14
0c5e8     02 42 66 F0 | 	shl	local15, #2
0c5ec     03 00 00 FF 
0c5f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5f4     F2 42 02 F1 | 	add	local15, objptr
0c5f8     08 42 06 F1 | 	add	local15, #8
0c5fc     21 3B 62 FC | 	wrlong	local11, local15
0c600     03 00 00 FF 
0c604     00 E4 05 F1 | 	add	objptr, ##1536
0c608     F2 34 02 FB | 	rdlong	local08, objptr
0c60c     01 34 06 F1 | 	add	local08, #1
0c610     F2 34 62 FC | 	wrlong	local08, objptr
0c614     4A 00 00 FF 
0c618     7C E4 85 F1 | 	sub	objptr, ##38012
0c61c                 | LR__1005
0c61c                 | ' return 0
0c61c     00 FA 05 F6 | 	mov	result1, #0
0c620                 | LR__1006
0c620     A7 F0 03 F6 | 	mov	ptra, fp
0c624     B2 00 A0 FD | 	call	#popregs_
0c628                 | _getfun_ret
0c628     2D 00 64 FD | 	ret
0c62c                 | 
0c62c                 | '   
0c62c                 | '   
0c62c                 | ' function getvar(m as integer) as ulong
0c62c                 | _getvar
0c62c     11 4A 05 F6 | 	mov	COUNT_, #17
0c630     A8 00 A0 FD | 	call	#pushregs_
0c634                 | _getvar_enter
0c634     09 2D 02 F6 | 	mov	local04, arg01
0c638     37 00 00 FF 
0c63c     44 E4 05 F1 | 	add	objptr, ##28228
0c640     F2 2E 02 FB | 	rdlong	local05, objptr
0c644     03 2E 66 F0 | 	shl	local05, #3
0c648     02 00 00 FF 
0c64c     38 E4 85 F1 | 	sub	objptr, ##1080
0c650     F2 2E 02 F1 | 	add	local05, objptr
0c654     17 31 02 FB | 	rdlong	local06, local05
0c658     01 32 66 F6 | 	neg	local07, #1
0c65c                 | ' 
0c65c                 | ' varname$=lparts(ct).part$
0c65c                 | ' j=-1
0c65c                 | ' 
0c65c                 | ' for i=0 to varnum-1
0c65c     00 34 06 F6 | 	mov	local08, #0
0c660     04 E4 85 F1 | 	sub	objptr, #4
0c664     F2 36 02 FB | 	rdlong	local09, objptr
0c668     35 00 00 FF 
0c66c     08 E4 85 F1 | 	sub	objptr, ##27144
0c670                 | LR__1010
0c670     1B 35 52 F2 | 	cmps	local08, local09 wc
0c674     38 00 90 3D |  if_ae	jmp	#LR__1011
0c678                 | '   if variables(i).name=varname$ then j=i : exit
0c678     1A 2F 02 F6 | 	mov	local05, local08
0c67c     04 2E 66 F0 | 	shl	local05, #4
0c680     14 00 00 FF 
0c684     F8 E5 05 F1 | 	add	objptr, ##10744
0c688     F2 2E 02 F1 | 	add	local05, objptr
0c68c     17 13 02 FB | 	rdlong	arg01, local05
0c690     18 15 02 F6 | 	mov	arg02, local06
0c694     14 00 00 FF 
0c698     F8 E5 85 F1 | 	sub	objptr, ##10744
0c69c     FC 87 B1 FD | 	call	#__system___string_cmp
0c6a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6a4     1A 33 02 A6 |  if_e	mov	local07, local08
0c6a8     01 34 06 51 |  if_ne	add	local08, #1
0c6ac     C0 FF 9F 5D |  if_ne	jmp	#LR__1010
0c6b0                 | LR__1011
0c6b0                 | ' if  j=-1 andalso varnum<maxvars then   
0c6b0     FF FF 7F FF 
0c6b4     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0c6b8     A8 00 90 5D |  if_ne	jmp	#LR__1012
0c6bc     35 00 00 FF 
0c6c0     08 E4 05 F1 | 	add	objptr, ##27144
0c6c4     F2 36 02 FB | 	rdlong	local09, objptr
0c6c8     35 00 00 FF 
0c6cc     08 E4 85 F1 | 	sub	objptr, ##27144
0c6d0     02 00 00 FF 
0c6d4     00 36 56 F2 | 	cmps	local09, ##1024 wc
0c6d8     88 00 90 3D |  if_ae	jmp	#LR__1012
0c6dc     35 00 00 FF 
0c6e0     08 E4 05 F1 | 	add	objptr, ##27144
0c6e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c6e8     04 2E 66 F0 | 	shl	local05, #4
0c6ec     20 00 00 FF 
0c6f0     10 E4 85 F1 | 	sub	objptr, ##16400
0c6f4     F2 2E 02 F1 | 	add	local05, objptr
0c6f8     17 31 62 FC | 	wrlong	local06, local05
0c6fc     20 00 00 FF 
0c700     10 E4 05 F1 | 	add	objptr, ##16400
0c704     F2 2E 02 FB | 	rdlong	local05, objptr
0c708     04 2E 66 F0 | 	shl	local05, #4
0c70c     20 00 00 FF 
0c710     10 E4 85 F1 | 	sub	objptr, ##16400
0c714     F2 2E 02 F1 | 	add	local05, objptr
0c718     04 2E 06 F1 | 	add	local05, #4
0c71c     17 01 68 FC | 	wrlong	#0, local05
0c720     20 00 00 FF 
0c724     10 E4 05 F1 | 	add	objptr, ##16400
0c728     F2 2E 02 FB | 	rdlong	local05, objptr
0c72c     04 2E 66 F0 | 	shl	local05, #4
0c730     20 00 00 FF 
0c734     10 E4 85 F1 | 	sub	objptr, ##16400
0c738     F2 2E 02 F1 | 	add	local05, objptr
0c73c     0C 2E 06 F1 | 	add	local05, #12
0c740     17 39 68 FC | 	wrlong	#28, local05
0c744     20 00 00 FF 
0c748     10 E4 05 F1 | 	add	objptr, ##16400
0c74c     F2 36 02 FB | 	rdlong	local09, objptr
0c750     1B 33 02 F6 | 	mov	local07, local09
0c754     01 36 06 F1 | 	add	local09, #1
0c758     F2 36 62 FC | 	wrlong	local09, objptr
0c75c     35 00 00 FF 
0c760     08 E4 85 F1 | 	sub	objptr, ##27144
0c764                 | LR__1012
0c764     00 36 06 F6 | 	mov	local09, #0
0c768                 | ' numpar=0
0c768                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0c768     37 00 00 FF 
0c76c     44 E4 05 F1 | 	add	objptr, ##28228
0c770     F2 2E 02 FB | 	rdlong	local05, objptr
0c774     01 2E 06 F1 | 	add	local05, #1
0c778     03 2E 66 F0 | 	shl	local05, #3
0c77c     02 00 00 FF 
0c780     38 E4 85 F1 | 	sub	objptr, ##1080
0c784     F2 2E 02 F1 | 	add	local05, objptr
0c788     04 2E 06 F1 | 	add	local05, #4
0c78c     17 35 02 FB | 	rdlong	local08, local05
0c790     15 34 0E F2 | 	cmp	local08, #21 wz
0c794     35 00 00 FF 
0c798     0C E4 85 F1 | 	sub	objptr, ##27148
0c79c     54 01 90 5D |  if_ne	jmp	#LR__1017
0c7a0     37 00 00 FF 
0c7a4     44 E4 05 F1 | 	add	objptr, ##28228
0c7a8     F2 38 02 FB | 	rdlong	local10, objptr
0c7ac     01 38 06 F1 | 	add	local10, #1
0c7b0     F2 38 62 FC | 	wrlong	local10, objptr
0c7b4     37 00 00 FF 
0c7b8     44 E4 85 F1 | 	sub	objptr, ##28228
0c7bc                 | '   ct+=1 											' omit this lpar, this is for expr list
0c7bc                 | '   do
0c7bc                 | LR__1013
0c7bc     37 00 00 FF 
0c7c0     44 E4 05 F1 | 	add	objptr, ##28228
0c7c4     F2 2E 02 FB | 	rdlong	local05, objptr
0c7c8     01 2E 06 F1 | 	add	local05, #1
0c7cc     F2 2E 62 FC | 	wrlong	local05, objptr
0c7d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c7d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c7d0     03 2E 66 F0 | 	shl	local05, #3
0c7d4     02 00 00 FF 
0c7d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7dc     F2 2E 02 F1 | 	add	local05, objptr
0c7e0     04 2E 06 F1 | 	add	local05, #4
0c7e4     17 39 02 FB | 	rdlong	local10, local05
0c7e8     15 38 0E F2 | 	cmp	local10, #21 wz
0c7ec     35 00 00 FF 
0c7f0     0C E4 85 F1 | 	sub	objptr, ##27148
0c7f4     44 00 90 5D |  if_ne	jmp	#LR__1014
0c7f8     37 00 00 FF 
0c7fc     44 E4 05 F1 | 	add	objptr, ##28228
0c800     F2 38 02 FB | 	rdlong	local10, objptr
0c804     01 38 06 F1 | 	add	local10, #1
0c808     F2 38 62 FC | 	wrlong	local10, objptr
0c80c     37 00 00 FF 
0c810     44 E4 85 F1 | 	sub	objptr, ##28228
0c814     58 EB BF FD | 	call	#_expr
0c818     FD 3A 02 F6 | 	mov	local11, result1
0c81c     37 00 00 FF 
0c820     44 E4 05 F1 | 	add	objptr, ##28228
0c824     F2 38 02 FB | 	rdlong	local10, objptr
0c828     01 38 06 F1 | 	add	local10, #1
0c82c     F2 38 62 FC | 	wrlong	local10, objptr
0c830     37 00 00 FF 
0c834     44 E4 85 F1 | 	sub	objptr, ##28228
0c838     08 00 90 FD | 	jmp	#LR__1015
0c83c                 | LR__1014
0c83c     30 EB BF FD | 	call	#_expr
0c840     FD 3A 02 F6 | 	mov	local11, result1
0c844                 | LR__1015
0c844                 | '     if err>0 then return err
0c844     01 3A 56 F2 | 	cmps	local11, #1 wc
0c848     1D FB 01 36 |  if_ae	mov	result1, local11
0c84c     2C 02 90 3D |  if_ae	jmp	#LR__1019
0c850     01 36 06 F1 | 	add	local09, #1
0c854     37 00 00 FF 
0c858     44 E4 05 F1 | 	add	objptr, ##28228
0c85c     F2 2E 02 FB | 	rdlong	local05, objptr
0c860     03 2E 66 F0 | 	shl	local05, #3
0c864     02 00 00 FF 
0c868     38 E4 85 F1 | 	sub	objptr, ##1080
0c86c     F2 2E 02 F1 | 	add	local05, objptr
0c870     04 2E 06 F1 | 	add	local05, #4
0c874     17 3B 02 FB | 	rdlong	local11, local05
0c878     14 3A 0E F2 | 	cmp	local11, #20 wz
0c87c     35 00 00 FF 
0c880     0C E4 85 F1 | 	sub	objptr, ##27148
0c884     34 00 90 AD |  if_e	jmp	#LR__1016
0c888     37 00 00 FF 
0c88c     44 E4 05 F1 | 	add	objptr, ##28228
0c890     F2 3A 02 FB | 	rdlong	local11, objptr
0c894     03 3A 66 F0 | 	shl	local11, #3
0c898     02 00 00 FF 
0c89c     38 E4 85 F1 | 	sub	objptr, ##1080
0c8a0     F2 3A 02 F1 | 	add	local11, objptr
0c8a4     04 3A 06 F1 | 	add	local11, #4
0c8a8     1D 3B 02 FB | 	rdlong	local11, local11
0c8ac     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c8b0     35 00 00 FF 
0c8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0c8b8     00 FF 9F 5D |  if_ne	jmp	#LR__1013
0c8bc                 | LR__1016
0c8bc                 | '     if lparts(ct).token=token_end then return 14
0c8bc     37 00 00 FF 
0c8c0     44 E4 05 F1 | 	add	objptr, ##28228
0c8c4     F2 2E 02 FB | 	rdlong	local05, objptr
0c8c8     03 2E 66 F0 | 	shl	local05, #3
0c8cc     02 00 00 FF 
0c8d0     38 E4 85 F1 | 	sub	objptr, ##1080
0c8d4     F2 2E 02 F1 | 	add	local05, objptr
0c8d8     04 2E 06 F1 | 	add	local05, #4
0c8dc     17 3B 02 FB | 	rdlong	local11, local05
0c8e0     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c8e4     35 00 00 FF 
0c8e8     0C E4 85 F1 | 	sub	objptr, ##27148
0c8ec     0E FA 05 A6 |  if_e	mov	result1, #14
0c8f0     88 01 90 AD |  if_e	jmp	#LR__1019
0c8f4                 | LR__1017
0c8f4     1B 29 02 F6 | 	mov	local02, local09
0c8f8     11 2A 06 F6 | 	mov	local03, #17
0c8fc     19 27 02 F6 | 	mov	local01, local07
0c900     13 39 02 F6 | 	mov	local10, local01
0c904     14 3D 02 F6 | 	mov	local12, local02
0c908     15 3F 02 F6 | 	mov	local13, local03
0c90c     4A 00 00 FF 
0c910     7C E4 05 F1 | 	add	objptr, ##38012
0c914     F2 40 02 FB | 	rdlong	local14, objptr
0c918     20 43 02 F6 | 	mov	local15, local14
0c91c     01 42 66 F0 | 	shl	local15, #1
0c920     20 43 02 F1 | 	add	local15, local14
0c924     02 42 66 F0 | 	shl	local15, #2
0c928     03 00 00 FF 
0c92c     00 E4 85 F1 | 	sub	objptr, ##1536
0c930     F2 42 02 F1 | 	add	local15, objptr
0c934     21 39 62 FC | 	wrlong	local10, local15
0c938     03 00 00 FF 
0c93c     00 E4 05 F1 | 	add	objptr, ##1536
0c940     F2 38 02 FB | 	rdlong	local10, objptr
0c944     1C 45 02 F6 | 	mov	local16, local10
0c948     01 44 66 F0 | 	shl	local16, #1
0c94c     1C 45 02 F1 | 	add	local16, local10
0c950     02 44 66 F0 | 	shl	local16, #2
0c954     03 00 00 FF 
0c958     00 E4 85 F1 | 	sub	objptr, ##1536
0c95c     F2 44 02 F1 | 	add	local16, objptr
0c960     04 44 06 F1 | 	add	local16, #4
0c964     22 3D 62 FC | 	wrlong	local12, local16
0c968     03 00 00 FF 
0c96c     00 E4 05 F1 | 	add	objptr, ##1536
0c970     F2 38 02 FB | 	rdlong	local10, objptr
0c974     1C 47 02 F6 | 	mov	local17, local10
0c978     01 46 66 F0 | 	shl	local17, #1
0c97c     1C 47 02 F1 | 	add	local17, local10
0c980     02 46 66 F0 | 	shl	local17, #2
0c984     03 00 00 FF 
0c988     00 E4 85 F1 | 	sub	objptr, ##1536
0c98c     F2 46 02 F1 | 	add	local17, objptr
0c990     08 46 06 F1 | 	add	local17, #8
0c994     23 3F 62 FC | 	wrlong	local13, local17
0c998     03 00 00 FF 
0c99c     00 E4 05 F1 | 	add	objptr, ##1536
0c9a0     F2 38 02 FB | 	rdlong	local10, objptr
0c9a4     01 38 06 F1 | 	add	local10, #1
0c9a8     F2 38 62 FC | 	wrlong	local10, objptr
0c9ac     4A 00 00 FF 
0c9b0     7C E4 85 F1 | 	sub	objptr, ##38012
0c9b4                 | ' t2.result.twowords(1)=numpar
0c9b4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0c9b4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c9b4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c9b4     FF FF 7F FF 
0c9b8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c9bc     B8 00 90 5D |  if_ne	jmp	#LR__1018
0c9c0     15 2A 06 F6 | 	mov	local03, #21
0c9c4     13 39 02 F6 | 	mov	local10, local01
0c9c8     14 3D 02 F6 | 	mov	local12, local02
0c9cc     15 3F 02 F6 | 	mov	local13, local03
0c9d0     4A 00 00 FF 
0c9d4     7C E4 05 F1 | 	add	objptr, ##38012
0c9d8     F2 40 02 FB | 	rdlong	local14, objptr
0c9dc     20 43 02 F6 | 	mov	local15, local14
0c9e0     01 42 66 F0 | 	shl	local15, #1
0c9e4     20 43 02 F1 | 	add	local15, local14
0c9e8     02 42 66 F0 | 	shl	local15, #2
0c9ec     03 00 00 FF 
0c9f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c9f4     F2 42 02 F1 | 	add	local15, objptr
0c9f8     21 39 62 FC | 	wrlong	local10, local15
0c9fc     03 00 00 FF 
0ca00     00 E4 05 F1 | 	add	objptr, ##1536
0ca04     F2 46 02 FB | 	rdlong	local17, objptr
0ca08     23 45 02 F6 | 	mov	local16, local17
0ca0c     01 44 66 F0 | 	shl	local16, #1
0ca10     23 45 02 F1 | 	add	local16, local17
0ca14     02 44 66 F0 | 	shl	local16, #2
0ca18     03 00 00 FF 
0ca1c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca20     F2 44 02 F1 | 	add	local16, objptr
0ca24     04 44 06 F1 | 	add	local16, #4
0ca28     22 3D 62 FC | 	wrlong	local12, local16
0ca2c     03 00 00 FF 
0ca30     00 E4 05 F1 | 	add	objptr, ##1536
0ca34     F2 44 02 FB | 	rdlong	local16, objptr
0ca38     22 47 02 F6 | 	mov	local17, local16
0ca3c     01 46 66 F0 | 	shl	local17, #1
0ca40     22 47 02 F1 | 	add	local17, local16
0ca44     02 46 66 F0 | 	shl	local17, #2
0ca48     03 00 00 FF 
0ca4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca50     F2 46 02 F1 | 	add	local17, objptr
0ca54     08 46 06 F1 | 	add	local17, #8
0ca58     23 3F 62 FC | 	wrlong	local13, local17
0ca5c     03 00 00 FF 
0ca60     00 E4 05 F1 | 	add	objptr, ##1536
0ca64     F2 38 02 FB | 	rdlong	local10, objptr
0ca68     01 38 06 F1 | 	add	local10, #1
0ca6c     F2 38 62 FC | 	wrlong	local10, objptr
0ca70     4A 00 00 FF 
0ca74     7C E4 85 F1 | 	sub	objptr, ##38012
0ca78                 | LR__1018
0ca78                 | ' return 0
0ca78     00 FA 05 F6 | 	mov	result1, #0
0ca7c                 | LR__1019
0ca7c     A7 F0 03 F6 | 	mov	ptra, fp
0ca80     B2 00 A0 FD | 	call	#popregs_
0ca84                 | _getvar_ret
0ca84     2D 00 64 FD | 	ret
0ca88                 | 
0ca88                 | ' 
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' 
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '                                                                                                                                       -
0ca88                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0ca88                 | ' '                                                                                                                                       -
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0ca88                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' function execute_line (astart=0 as integer) as integer
0ca88                 | _execute_line
0ca88     04 4A 05 F6 | 	mov	COUNT_, #4
0ca8c     A8 00 A0 FD | 	call	#pushregs_
0ca90     50 00 00 FF 
0ca94     BC E4 05 F1 | 	add	objptr, ##41148
0ca98     F2 00 68 FC | 	wrlong	#0, objptr
0ca9c                 | ' 
0ca9c                 | ' runptr2=0
0ca9c                 | ' for lineptr_e=astart to lineptr-1
0ca9c     06 00 00 FF 
0caa0     3C E4 85 F1 | 	sub	objptr, ##3132
0caa4     F2 12 62 FC | 	wrlong	arg01, objptr
0caa8     04 E4 85 F1 | 	sub	objptr, #4
0caac     F2 26 02 FB | 	rdlong	local01, objptr
0cab0     4A 00 00 FF 
0cab4     7C E4 85 F1 | 	sub	objptr, ##38012
0cab8                 | LR__1020
0cab8     4A 00 00 FF 
0cabc     80 E4 05 F1 | 	add	objptr, ##38016
0cac0     F2 FA 01 FB | 	rdlong	result1, objptr
0cac4     4A 00 00 FF 
0cac8     80 E4 85 F1 | 	sub	objptr, ##38016
0cacc     13 FB 51 F2 | 	cmps	result1, local01 wc
0cad0     98 00 90 3D |  if_ae	jmp	#LR__1021
0cad4     4A 00 00 FF 
0cad8     80 E4 05 F1 | 	add	objptr, ##38016
0cadc     F2 FA 01 FB | 	rdlong	result1, objptr
0cae0     FD 28 02 F6 | 	mov	local02, result1
0cae4     01 28 66 F0 | 	shl	local02, #1
0cae8     FD 28 02 F1 | 	add	local02, result1
0caec     02 28 66 F0 | 	shl	local02, #2
0caf0     03 00 00 FF 
0caf4     04 E4 85 F1 | 	sub	objptr, ##1540
0caf8     F2 28 02 F1 | 	add	local02, objptr
0cafc     08 28 06 F1 | 	add	local02, #8
0cb00     14 29 02 FB | 	rdlong	local02, local02
0cb04     14 29 E2 F8 | 	getbyte	local02, local02, #0
0cb08     02 28 66 F0 | 	shl	local02, #2
0cb0c     04 00 00 FF 
0cb10     1C E4 85 F1 | 	sub	objptr, ##2076
0cb14     F2 28 02 F1 | 	add	local02, objptr
0cb18     14 29 02 FB | 	rdlong	local02, local02
0cb1c     14 2B 02 F6 | 	mov	local03, local02
0cb20     13 28 46 F7 | 	zerox	local02, #19
0cb24     14 2A 46 F0 | 	shr	local03, #20
0cb28     02 2A 66 F0 | 	shl	local03, #2
0cb2c     ED 2A 02 F1 | 	add	local03, __methods__
0cb30     15 2B 02 FB | 	rdlong	local03, local03
0cb34     43 00 00 FF 
0cb38     60 E4 85 F1 | 	sub	objptr, ##34400
0cb3c     F2 2C 02 F6 | 	mov	local04, objptr
0cb40     14 E5 01 F6 | 	mov	objptr, local02
0cb44     2D 2A 62 FD | 	call	local03
0cb48     16 E5 01 F6 | 	mov	objptr, local04
0cb4c     4A 00 00 FF 
0cb50     80 E4 05 F1 | 	add	objptr, ##38016
0cb54     F2 2C 02 FB | 	rdlong	local04, objptr
0cb58     01 2C 06 F1 | 	add	local04, #1
0cb5c     F2 2C 62 FC | 	wrlong	local04, objptr
0cb60     4A 00 00 FF 
0cb64     80 E4 85 F1 | 	sub	objptr, ##38016
0cb68     4C FF 9F FD | 	jmp	#LR__1020
0cb6c                 | LR__1021
0cb6c                 | ' return runptr2
0cb6c     50 00 00 FF 
0cb70     BC E4 05 F1 | 	add	objptr, ##41148
0cb74     F2 FA 01 FB | 	rdlong	result1, objptr
0cb78     50 00 00 FF 
0cb7c     BC E4 85 F1 | 	sub	objptr, ##41148
0cb80     A7 F0 03 F6 | 	mov	ptra, fp
0cb84     B2 00 A0 FD | 	call	#popregs_
0cb88                 | _execute_line_ret
0cb88     2D 00 64 FD | 	ret
0cb8c                 | 
0cb8c                 | ' 
0cb8c                 | ' 
0cb8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb8c                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0cb8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb8c                 | ' 
0cb8c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0cb8c                 | ' 
0cb8c                 | ' function pop() as expr_result
0cb8c                 | _pop
0cb8c                 | ' if stackpointer=0 then
0cb8c     43 00 00 FF 
0cb90     58 E4 05 F1 | 	add	objptr, ##34392
0cb94     F2 FA 09 FB | 	rdlong	result1, objptr wz
0cb98     43 00 00 FF 
0cb9c     58 E4 85 F1 | 	sub	objptr, ##34392
0cba0     FF 04 06 A6 |  if_e	mov	_var03, #255
0cba4     18 00 06 A6 |  if_e	mov	_var01, #24
0cba8     68 00 90 AD |  if_e	jmp	#LR__1030
0cbac     43 00 00 FF 
0cbb0     58 E4 05 F1 | 	add	objptr, ##34392
0cbb4     F2 FA 01 FB | 	rdlong	result1, objptr
0cbb8     01 FA 85 F1 | 	sub	result1, #1
0cbbc     F2 FA 61 FC | 	wrlong	result1, objptr
0cbc0     FD FE 01 F6 | 	mov	result3, result1
0cbc4     01 FE 65 F0 | 	shl	result3, #1
0cbc8     FD FE 01 F1 | 	add	result3, result1
0cbcc     02 FE 65 F0 | 	shl	result3, #2
0cbd0     0C 00 00 FF 
0cbd4     0C E4 85 F1 | 	sub	objptr, ##6156
0cbd8     F2 FE 01 F1 | 	add	result3, objptr
0cbdc     FF 00 02 FB | 	rdlong	_var01, result3
0cbe0     04 FE 05 F1 | 	add	result3, #4
0cbe4     FF FE 01 FB | 	rdlong	result3, result3
0cbe8     FD FC 01 F6 | 	mov	result2, result1
0cbec     01 FC 65 F0 | 	shl	result2, #1
0cbf0     FD FC 01 F1 | 	add	result2, result1
0cbf4     02 FC 65 F0 | 	shl	result2, #2
0cbf8     F2 FC 01 F1 | 	add	result2, objptr
0cbfc     08 FC 05 F1 | 	add	result2, #8
0cc00     FE FA 01 FB | 	rdlong	result1, result2
0cc04     FF 02 02 F6 | 	mov	_var02, result3
0cc08     FD 04 02 F6 | 	mov	_var03, result1
0cc0c     37 00 00 FF 
0cc10     4C E4 85 F1 | 	sub	objptr, ##28236
0cc14                 | LR__1030
0cc14                 | ' return t1
0cc14     01 FD 01 F6 | 	mov	result2, _var02
0cc18     02 FF 01 F6 | 	mov	result3, _var03
0cc1c     00 FB 01 F6 | 	mov	result1, _var01
0cc20                 | _pop_ret
0cc20     2D 00 64 FD | 	ret
0cc24                 | 
0cc24                 | ' 
0cc24                 | ' sub push(t1 as expr_result )
0cc24                 | _push
0cc24                 | ' if stackpointer<maxstack then 
0cc24     43 00 00 FF 
0cc28     58 E4 05 F1 | 	add	objptr, ##34392
0cc2c     F2 00 02 FB | 	rdlong	_var01, objptr
0cc30     43 00 00 FF 
0cc34     58 E4 85 F1 | 	sub	objptr, ##34392
0cc38     01 00 00 FF 
0cc3c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0cc40     BC 00 90 3D |  if_ae	jmp	#LR__1040
0cc44     09 01 02 FB | 	rdlong	_var01, arg01
0cc48     04 12 06 F1 | 	add	arg01, #4
0cc4c     09 03 02 FB | 	rdlong	_var02, arg01
0cc50     04 12 06 F1 | 	add	arg01, #4
0cc54     09 13 02 FB | 	rdlong	arg01, arg01
0cc58     43 00 00 FF 
0cc5c     58 E4 05 F1 | 	add	objptr, ##34392
0cc60     F2 04 02 FB | 	rdlong	_var03, objptr
0cc64     02 07 02 F6 | 	mov	_var04, _var03
0cc68     01 06 66 F0 | 	shl	_var04, #1
0cc6c     02 07 02 F1 | 	add	_var04, _var03
0cc70     02 06 66 F0 | 	shl	_var04, #2
0cc74     0C 00 00 FF 
0cc78     0C E4 85 F1 | 	sub	objptr, ##6156
0cc7c     F2 06 02 F1 | 	add	_var04, objptr
0cc80     03 01 62 FC | 	wrlong	_var01, _var04
0cc84     0C 00 00 FF 
0cc88     0C E4 05 F1 | 	add	objptr, ##6156
0cc8c     F2 06 02 FB | 	rdlong	_var04, objptr
0cc90     03 05 02 F6 | 	mov	_var03, _var04
0cc94     01 04 66 F0 | 	shl	_var03, #1
0cc98     03 05 02 F1 | 	add	_var03, _var04
0cc9c     02 04 66 F0 | 	shl	_var03, #2
0cca0     0C 00 00 FF 
0cca4     0C E4 85 F1 | 	sub	objptr, ##6156
0cca8     F2 04 02 F1 | 	add	_var03, objptr
0ccac     04 04 06 F1 | 	add	_var03, #4
0ccb0     02 03 62 FC | 	wrlong	_var02, _var03
0ccb4     0C 00 00 FF 
0ccb8     0C E4 05 F1 | 	add	objptr, ##6156
0ccbc     F2 06 02 FB | 	rdlong	_var04, objptr
0ccc0     03 05 02 F6 | 	mov	_var03, _var04
0ccc4     01 04 66 F0 | 	shl	_var03, #1
0ccc8     03 05 02 F1 | 	add	_var03, _var04
0cccc     02 04 66 F0 | 	shl	_var03, #2
0ccd0     0C 00 00 FF 
0ccd4     0C E4 85 F1 | 	sub	objptr, ##6156
0ccd8     F2 04 02 F1 | 	add	_var03, objptr
0ccdc     08 04 06 F1 | 	add	_var03, #8
0cce0     02 13 62 FC | 	wrlong	arg01, _var03
0cce4     0C 00 00 FF 
0cce8     0C E4 05 F1 | 	add	objptr, ##6156
0ccec     F2 00 02 FB | 	rdlong	_var01, objptr
0ccf0     01 00 06 F1 | 	add	_var01, #1
0ccf4     F2 00 62 FC | 	wrlong	_var01, objptr
0ccf8     43 00 00 FF 
0ccfc     58 E4 85 F1 | 	sub	objptr, ##34392
0cd00                 | LR__1040
0cd00                 | _push_ret
0cd00     2D 00 64 FD | 	ret
0cd04                 | 
0cd04                 | ' 
0cd04                 | ' ' -------------------------------- Runtime converting functions
0cd04                 | ' 
0cd04                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0cd04                 | ' 
0cd04                 | ' function  convertstring(psaddr as ulong) as string
0cd04                 | _convertstring
0cd04     04 4A 05 F6 | 	mov	COUNT_, #4
0cd08     A8 00 A0 FD | 	call	#pushregs_
0cd0c     09 27 02 F6 | 	mov	local01, arg01
0cd10     8C 4A B1 FD | 	call	#_pslpeek
0cd14     FD 28 02 F6 | 	mov	local02, result1
0cd18     A8 01 00 FF 
0cd1c     AE 2A 06 F6 | 	mov	local03, ##@LR__5747
0cd20                 | ' l=pslpeek(psaddr) 
0cd20                 | ' s="" 
0cd20                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0cd20     01 2C 06 F6 | 	mov	local04, #1
0cd24     01 28 06 F1 | 	add	local02, #1
0cd28                 | LR__1050
0cd28     14 2D 52 F2 | 	cmps	local04, local02 wc
0cd2c     30 00 90 3D |  if_ae	jmp	#LR__1051
0cd30     13 13 02 F6 | 	mov	arg01, local01
0cd34     03 12 06 F1 | 	add	arg01, #3
0cd38     16 13 02 F1 | 	add	arg01, local04
0cd3c     08 4A B1 FD | 	call	#_pspeek
0cd40     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0cd44     6C A3 B1 FD | 	call	#__system__Chr_S
0cd48     FD 14 02 F6 | 	mov	arg02, result1
0cd4c     15 13 02 F6 | 	mov	arg01, local03
0cd50     7C 81 B1 FD | 	call	#__system___string_concat
0cd54     FD 2A 02 F6 | 	mov	local03, result1
0cd58     01 2C 06 F1 | 	add	local04, #1
0cd5c     C8 FF 9F FD | 	jmp	#LR__1050
0cd60                 | LR__1051
0cd60                 | ' return s
0cd60     15 FB 01 F6 | 	mov	result1, local03
0cd64     A7 F0 03 F6 | 	mov	ptra, fp
0cd68     B2 00 A0 FD | 	call	#popregs_
0cd6c                 | _convertstring_ret
0cd6c     2D 00 64 FD | 	ret
0cd70                 | 
0cd70                 | ' 
0cd70                 | ' ' converts a variable to an integer
0cd70                 | ' 
0cd70                 | ' function converttoint (t1 as expr_result) as integer 
0cd70                 | _converttoint
0cd70     02 4A 05 F6 | 	mov	COUNT_, #2
0cd74     A8 00 A0 FD | 	call	#pushregs_
0cd78     09 27 02 F6 | 	mov	local01, arg01
0cd7c                 | ' 
0cd7c                 | ' select case t1.result_type
0cd7c     08 26 06 F1 | 	add	local01, #8
0cd80     13 29 02 FB | 	rdlong	local02, local01
0cd84     08 26 86 F1 | 	sub	local01, #8
0cd88     1C 28 0E F2 | 	cmp	local02, #28 wz
0cd8c     2C 00 90 AD |  if_e	jmp	#LR__1060
0cd90     1D 28 0E F2 | 	cmp	local02, #29 wz
0cd94     2C 00 90 AD |  if_e	jmp	#LR__1061
0cd98     1E 28 0E F2 | 	cmp	local02, #30 wz
0cd9c     2C 00 90 AD |  if_e	jmp	#LR__1062
0cda0     1F 28 0E F2 | 	cmp	local02, #31 wz
0cda4     34 00 90 AD |  if_e	jmp	#LR__1063
0cda8     2B 28 0E F2 | 	cmp	local02, #43 wz
0cdac     44 00 90 AD |  if_e	jmp	#LR__1064
0cdb0     2C 28 0E F2 | 	cmp	local02, #44 wz
0cdb4     5C 00 90 AD |  if_e	jmp	#LR__1065
0cdb8     60 00 90 FD | 	jmp	#LR__1066
0cdbc                 | LR__1060
0cdbc     13 FB 01 FB | 	rdlong	result1, local01
0cdc0     5C 00 90 FD | 	jmp	#LR__1067
0cdc4                 | LR__1061
0cdc4     13 FB 01 FB | 	rdlong	result1, local01
0cdc8     54 00 90 FD | 	jmp	#LR__1067
0cdcc                 | LR__1062
0cdcc     13 13 02 FB | 	rdlong	arg01, local01
0cdd0     01 14 06 F6 | 	mov	arg02, #1
0cdd4     DC B3 B1 FD | 	call	#__system___float_tointeger
0cdd8     44 00 90 FD | 	jmp	#LR__1067
0cddc                 | LR__1063
0cddc     13 13 02 FB | 	rdlong	arg01, local01
0cde0     14 B7 B1 FD | 	call	#__system____builtin_atof
0cde4     FD 12 02 F6 | 	mov	arg01, result1
0cde8     01 14 06 F6 | 	mov	arg02, #1
0cdec     C4 B3 B1 FD | 	call	#__system___float_tointeger
0cdf0     2C 00 90 FD | 	jmp	#LR__1067
0cdf4                 | LR__1064
0cdf4     13 13 02 FB | 	rdlong	arg01, local01
0cdf8     08 FF BF FD | 	call	#_convertstring
0cdfc     FD 12 02 F6 | 	mov	arg01, result1
0ce00     F4 B6 B1 FD | 	call	#__system____builtin_atof
0ce04     FD 12 02 F6 | 	mov	arg01, result1
0ce08     01 14 06 F6 | 	mov	arg02, #1
0ce0c     A4 B3 B1 FD | 	call	#__system___float_tointeger
0ce10     0C 00 90 FD | 	jmp	#LR__1067
0ce14                 | LR__1065
0ce14     13 FB 01 FB | 	rdlong	result1, local01
0ce18     04 00 90 FD | 	jmp	#LR__1067
0ce1c                 | LR__1066
0ce1c     00 FA 05 F6 | 	mov	result1, #0
0ce20                 | LR__1067
0ce20     A7 F0 03 F6 | 	mov	ptra, fp
0ce24     B2 00 A0 FD | 	call	#popregs_
0ce28                 | _converttoint_ret
0ce28     2D 00 64 FD | 	ret
0ce2c                 | 
0ce2c                 | ' 
0ce2c                 | ' ' converts a variable to float
0ce2c                 | ' 
0ce2c                 | ' function converttofloat (t1 as expr_result) as single
0ce2c                 | _converttofloat
0ce2c     03 4A 05 F6 | 	mov	COUNT_, #3
0ce30     A8 00 A0 FD | 	call	#pushregs_
0ce34     09 27 02 F6 | 	mov	local01, arg01
0ce38                 | ' 
0ce38                 | ' select case t1.result_type
0ce38     08 26 06 F1 | 	add	local01, #8
0ce3c     13 29 02 FB | 	rdlong	local02, local01
0ce40     08 26 86 F1 | 	sub	local01, #8
0ce44     1C 28 0E F2 | 	cmp	local02, #28 wz
0ce48     24 00 90 AD |  if_e	jmp	#LR__1070
0ce4c     1D 28 0E F2 | 	cmp	local02, #29 wz
0ce50     38 00 90 AD |  if_e	jmp	#LR__1071
0ce54     1E 28 0E F2 | 	cmp	local02, #30 wz
0ce58     3C 00 90 AD |  if_e	jmp	#LR__1072
0ce5c     1F 28 0E F2 | 	cmp	local02, #31 wz
0ce60     3C 00 90 AD |  if_e	jmp	#LR__1073
0ce64     2B 28 0E F2 | 	cmp	local02, #43 wz
0ce68     40 00 90 AD |  if_e	jmp	#LR__1074
0ce6c     50 00 90 FD | 	jmp	#LR__1075
0ce70                 | LR__1070
0ce70     13 13 02 FB | 	rdlong	arg01, local01
0ce74     09 13 52 F6 | 	abs	arg01, arg01 wc
0ce78     1F 2A C6 C9 |  if_b	decod	local03, #31
0ce7c     00 2A 06 36 |  if_ae	mov	local03, #0
0ce80     64 AA B1 FD | 	call	#__system___float_fromuns
0ce84     15 FB 61 F5 | 	xor	result1, local03
0ce88     38 00 90 FD | 	jmp	#LR__1076
0ce8c                 | LR__1071
0ce8c     13 13 02 FB | 	rdlong	arg01, local01
0ce90     54 AA B1 FD | 	call	#__system___float_fromuns
0ce94     2C 00 90 FD | 	jmp	#LR__1076
0ce98                 | LR__1072
0ce98     13 FB 01 FB | 	rdlong	result1, local01
0ce9c     24 00 90 FD | 	jmp	#LR__1076
0cea0                 | LR__1073
0cea0     13 13 02 FB | 	rdlong	arg01, local01
0cea4     50 B6 B1 FD | 	call	#__system____builtin_atof
0cea8     18 00 90 FD | 	jmp	#LR__1076
0ceac                 | LR__1074
0ceac     13 13 02 FB | 	rdlong	arg01, local01
0ceb0     50 FE BF FD | 	call	#_convertstring
0ceb4     FD 12 02 F6 | 	mov	arg01, result1
0ceb8     3C B6 B1 FD | 	call	#__system____builtin_atof
0cebc     04 00 90 FD | 	jmp	#LR__1076
0cec0                 | LR__1075
0cec0     00 FA 05 F6 | 	mov	result1, #0
0cec4                 | LR__1076
0cec4     A7 F0 03 F6 | 	mov	ptra, fp
0cec8     B2 00 A0 FD | 	call	#popregs_
0cecc                 | _converttofloat_ret
0cecc     2D 00 64 FD | 	ret
0ced0                 | 
0ced0                 | ' 
0ced0                 | ' '----------------- End of converting 
0ced0                 | ' 
0ced0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ced0                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0ced0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ced0                 | ' 
0ced0                 | ' sub csave_block(address as ulong)
0ced0                 | _csave_block
0ced0     09 01 02 F6 | 	mov	_var01, arg01
0ced4                 | ' 
0ced4                 | ' for i=0 to 63 step 2
0ced4     00 02 06 F6 | 	mov	_var02, #0
0ced8                 | LR__1080
0ced8                 | '   do: loop until lpeek(base+64*7)>32768
0ced8     37 00 00 FF 
0cedc     10 E4 05 F1 | 	add	objptr, ##28176
0cee0     97 0C 48 FB | 	callpa	#(@LR__1082-@LR__1081)>>2,fcache_load_ptr_
0cee4                 | LR__1081
0cee4     F2 12 02 FB | 	rdlong	arg01, objptr
0cee8     C0 13 06 F1 | 	add	arg01, #448
0ceec     09 FB 01 FB | 	rdlong	result1, arg01
0cef0     40 00 00 FF 
0cef4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cef8     E8 FF 9F CD |  if_b	jmp	#LR__1081
0cefc                 | LR__1082
0cefc     00 13 02 F6 | 	mov	arg01, _var01
0cf00     01 05 02 F6 | 	mov	_var03, _var02
0cf04     02 04 66 F0 | 	shl	_var03, #2
0cf08     02 13 02 F1 | 	add	arg01, _var03
0cf0c     09 07 02 FB | 	rdlong	_var04, arg01
0cf10     1B 00 00 FF 
0cf14     34 E4 05 F1 | 	add	objptr, ##13876
0cf18     F2 06 62 FC | 	wrlong	_var04, objptr
0cf1c     52 00 00 FF 
0cf20     44 E4 85 F1 | 	sub	objptr, ##42052
0cf24                 | '   q=lpeek(address+4*i)
0cf24                 | '      for bit=0 to 31
0cf24     00 08 06 F6 | 	mov	_var05, #0
0cf28     97 84 48 FB | 	callpa	#(@LR__1087-@LR__1083)>>2,fcache_load_ptr_
0cf2c                 | LR__1083
0cf2c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0cf2c     52 00 00 FF 
0cf30     44 E4 05 F1 | 	add	objptr, ##42052
0cf34     F2 06 02 FB | 	rdlong	_var04, objptr
0cf38     52 00 00 FF 
0cf3c     44 E4 85 F1 | 	sub	objptr, ##42052
0cf40     04 05 C2 F9 | 	decod	_var03, _var05
0cf44     02 07 CA F7 | 	test	_var04, _var03 wz
0cf48     60 00 90 AD |  if_e	jmp	#LR__1084
0cf4c     04 05 02 F6 | 	mov	_var03, _var05
0cf50     02 04 66 F0 | 	shl	_var03, #2
0cf54     4D 00 00 FF 
0cf58     B4 E5 05 F1 | 	add	objptr, ##39860
0cf5c     F2 04 02 F1 | 	add	_var03, objptr
0cf60     02 FF 48 FC | 	wrbyte	#127, _var03
0cf64     04 05 02 F6 | 	mov	_var03, _var05
0cf68     02 04 66 F0 | 	shl	_var03, #2
0cf6c     01 04 06 F1 | 	add	_var03, #1
0cf70     F2 04 02 F1 | 	add	_var03, objptr
0cf74     02 01 49 FC | 	wrbyte	#128, _var03
0cf78     04 05 02 F6 | 	mov	_var03, _var05
0cf7c     02 04 66 F0 | 	shl	_var03, #2
0cf80     02 04 06 F1 | 	add	_var03, #2
0cf84     F2 04 02 F1 | 	add	_var03, objptr
0cf88     02 FF 48 FC | 	wrbyte	#127, _var03
0cf8c     04 05 02 F6 | 	mov	_var03, _var05
0cf90     02 04 66 F0 | 	shl	_var03, #2
0cf94     03 04 06 F1 | 	add	_var03, #3
0cf98     F2 04 02 F1 | 	add	_var03, objptr
0cf9c     02 01 49 FC | 	wrbyte	#128, _var03
0cfa0     4D 00 00 FF 
0cfa4     B4 E5 85 F1 | 	sub	objptr, ##39860
0cfa8     5C 00 90 FD | 	jmp	#LR__1085
0cfac                 | LR__1084
0cfac     04 05 02 F6 | 	mov	_var03, _var05
0cfb0     02 04 66 F0 | 	shl	_var03, #2
0cfb4     4D 00 00 FF 
0cfb8     B4 E5 05 F1 | 	add	objptr, ##39860
0cfbc     F2 04 02 F1 | 	add	_var03, objptr
0cfc0     02 01 49 FC | 	wrbyte	#128, _var03
0cfc4     04 05 02 F6 | 	mov	_var03, _var05
0cfc8     02 04 66 F0 | 	shl	_var03, #2
0cfcc     01 04 06 F1 | 	add	_var03, #1
0cfd0     F2 04 02 F1 | 	add	_var03, objptr
0cfd4     02 01 49 FC | 	wrbyte	#128, _var03
0cfd8     04 05 02 F6 | 	mov	_var03, _var05
0cfdc     02 04 66 F0 | 	shl	_var03, #2
0cfe0     02 04 06 F1 | 	add	_var03, #2
0cfe4     F2 04 02 F1 | 	add	_var03, objptr
0cfe8     02 FF 48 FC | 	wrbyte	#127, _var03
0cfec     04 05 02 F6 | 	mov	_var03, _var05
0cff0     02 04 66 F0 | 	shl	_var03, #2
0cff4     03 04 06 F1 | 	add	_var03, #3
0cff8     F2 04 02 F1 | 	add	_var03, objptr
0cffc     02 FF 48 FC | 	wrbyte	#127, _var03
0d000     4D 00 00 FF 
0d004     B4 E5 85 F1 | 	sub	objptr, ##39860
0d008                 | LR__1085
0d008     01 08 06 F1 | 	add	_var05, #1
0d00c     20 08 56 F2 | 	cmps	_var05, #32 wc
0d010     18 FF 9F CD |  if_b	jmp	#LR__1083
0d014                 | '   do: loop until lpeek(base+64*7)<32768
0d014     37 00 00 FF 
0d018     10 E4 05 F1 | 	add	objptr, ##28176
0d01c                 | LR__1086
0d01c     F2 12 02 FB | 	rdlong	arg01, objptr
0d020     C0 13 06 F1 | 	add	arg01, #448
0d024     09 FB 01 FB | 	rdlong	result1, arg01
0d028     40 00 00 FF 
0d02c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d030     E8 FF 9F 3D |  if_ae	jmp	#LR__1086
0d034                 | LR__1087
0d034     00 13 02 F6 | 	mov	arg01, _var01
0d038     04 12 06 F1 | 	add	arg01, #4
0d03c     01 05 02 F6 | 	mov	_var03, _var02
0d040     02 04 66 F0 | 	shl	_var03, #2
0d044     02 13 02 F1 | 	add	arg01, _var03
0d048     09 07 02 FB | 	rdlong	_var04, arg01
0d04c     1B 00 00 FF 
0d050     34 E4 05 F1 | 	add	objptr, ##13876
0d054     F2 06 62 FC | 	wrlong	_var04, objptr
0d058     52 00 00 FF 
0d05c     44 E4 85 F1 | 	sub	objptr, ##42052
0d060                 | '   q=lpeek(address+4+4*i)
0d060                 | '      for bit=0 to 31
0d060     00 08 06 F6 | 	mov	_var05, #0
0d064     97 94 48 FB | 	callpa	#(@LR__1091-@LR__1088)>>2,fcache_load_ptr_
0d068                 | LR__1088
0d068                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0d068     52 00 00 FF 
0d06c     44 E4 05 F1 | 	add	objptr, ##42052
0d070     F2 06 02 FB | 	rdlong	_var04, objptr
0d074     52 00 00 FF 
0d078     44 E4 85 F1 | 	sub	objptr, ##42052
0d07c     04 05 C2 F9 | 	decod	_var03, _var05
0d080     02 07 CA F7 | 	test	_var04, _var03 wz
0d084     80 00 90 AD |  if_e	jmp	#LR__1089
0d088     04 0B 02 F6 | 	mov	_var06, _var05
0d08c     02 0A 66 F0 | 	shl	_var06, #2
0d090     80 04 06 F6 | 	mov	_var03, #128
0d094     05 05 02 F1 | 	add	_var03, _var06
0d098     4D 00 00 FF 
0d09c     B4 E5 05 F1 | 	add	objptr, ##39860
0d0a0     F2 04 02 F1 | 	add	_var03, objptr
0d0a4     02 FF 48 FC | 	wrbyte	#127, _var03
0d0a8     04 0B 02 F6 | 	mov	_var06, _var05
0d0ac     02 0A 66 F0 | 	shl	_var06, #2
0d0b0     80 04 06 F6 | 	mov	_var03, #128
0d0b4     05 05 02 F1 | 	add	_var03, _var06
0d0b8     01 04 06 F1 | 	add	_var03, #1
0d0bc     F2 04 02 F1 | 	add	_var03, objptr
0d0c0     02 01 49 FC | 	wrbyte	#128, _var03
0d0c4     04 0B 02 F6 | 	mov	_var06, _var05
0d0c8     02 0A 66 F0 | 	shl	_var06, #2
0d0cc     80 04 06 F6 | 	mov	_var03, #128
0d0d0     05 05 02 F1 | 	add	_var03, _var06
0d0d4     02 04 06 F1 | 	add	_var03, #2
0d0d8     F2 04 02 F1 | 	add	_var03, objptr
0d0dc     02 FF 48 FC | 	wrbyte	#127, _var03
0d0e0     04 0B 02 F6 | 	mov	_var06, _var05
0d0e4     02 0A 66 F0 | 	shl	_var06, #2
0d0e8     80 04 06 F6 | 	mov	_var03, #128
0d0ec     05 05 02 F1 | 	add	_var03, _var06
0d0f0     03 04 06 F1 | 	add	_var03, #3
0d0f4     F2 04 02 F1 | 	add	_var03, objptr
0d0f8     02 01 49 FC | 	wrbyte	#128, _var03
0d0fc     4D 00 00 FF 
0d100     B4 E5 85 F1 | 	sub	objptr, ##39860
0d104     7C 00 90 FD | 	jmp	#LR__1090
0d108                 | LR__1089
0d108     04 0B 02 F6 | 	mov	_var06, _var05
0d10c     02 0A 66 F0 | 	shl	_var06, #2
0d110     80 04 06 F6 | 	mov	_var03, #128
0d114     05 05 02 F1 | 	add	_var03, _var06
0d118     4D 00 00 FF 
0d11c     B4 E5 05 F1 | 	add	objptr, ##39860
0d120     F2 04 02 F1 | 	add	_var03, objptr
0d124     02 01 49 FC | 	wrbyte	#128, _var03
0d128     04 0B 02 F6 | 	mov	_var06, _var05
0d12c     02 0A 66 F0 | 	shl	_var06, #2
0d130     80 04 06 F6 | 	mov	_var03, #128
0d134     05 05 02 F1 | 	add	_var03, _var06
0d138     01 04 06 F1 | 	add	_var03, #1
0d13c     F2 04 02 F1 | 	add	_var03, objptr
0d140     02 01 49 FC | 	wrbyte	#128, _var03
0d144     04 0B 02 F6 | 	mov	_var06, _var05
0d148     02 0A 66 F0 | 	shl	_var06, #2
0d14c     80 04 06 F6 | 	mov	_var03, #128
0d150     05 05 02 F1 | 	add	_var03, _var06
0d154     02 04 06 F1 | 	add	_var03, #2
0d158     F2 04 02 F1 | 	add	_var03, objptr
0d15c     02 FF 48 FC | 	wrbyte	#127, _var03
0d160     04 0B 02 F6 | 	mov	_var06, _var05
0d164     02 0A 66 F0 | 	shl	_var06, #2
0d168     80 04 06 F6 | 	mov	_var03, #128
0d16c     05 05 02 F1 | 	add	_var03, _var06
0d170     03 04 06 F1 | 	add	_var03, #3
0d174     F2 04 02 F1 | 	add	_var03, objptr
0d178     02 FF 48 FC | 	wrbyte	#127, _var03
0d17c     4D 00 00 FF 
0d180     B4 E5 85 F1 | 	sub	objptr, ##39860
0d184                 | LR__1090
0d184     01 08 06 F1 | 	add	_var05, #1
0d188     20 08 56 F2 | 	cmps	_var05, #32 wc
0d18c     D8 FE 9F CD |  if_b	jmp	#LR__1088
0d190                 | LR__1091
0d190     02 02 06 F1 | 	add	_var02, #2
0d194     40 02 56 F2 | 	cmps	_var02, #64 wc
0d198     3C FD 9F CD |  if_b	jmp	#LR__1080
0d19c                 | ' do: loop until lpeek(base+64*7)>32768
0d19c     37 00 00 FF 
0d1a0     10 E4 05 F1 | 	add	objptr, ##28176
0d1a4     97 84 48 FB | 	callpa	#(@LR__1100-@LR__1092)>>2,fcache_load_ptr_
0d1a8                 | LR__1092
0d1a8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1ac     C0 13 06 F1 | 	add	arg01, #448
0d1b0     09 FB 01 FB | 	rdlong	result1, arg01
0d1b4     40 00 00 FF 
0d1b8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d1bc     E8 FF 9F CD |  if_b	jmp	#LR__1092
0d1c0     37 00 00 FF 
0d1c4     10 E4 85 F1 | 	sub	objptr, ##28176
0d1c8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d1c8     00 02 06 F6 | 	mov	_var02, #0
0d1cc                 | LR__1093
0d1cc     01 07 52 F6 | 	abs	_var04, _var02 wc
0d1d0     07 06 06 F5 | 	and	_var04, #7
0d1d4     03 07 82 F6 | 	negc	_var04, _var04
0d1d8     04 06 56 F2 | 	cmps	_var04, #4 wc
0d1dc     20 00 90 3D |  if_ae	jmp	#LR__1094
0d1e0     01 0B 02 F6 | 	mov	_var06, _var02
0d1e4     4D 00 00 FF 
0d1e8     B4 E5 05 F1 | 	add	objptr, ##39860
0d1ec     F2 0A 02 F1 | 	add	_var06, objptr
0d1f0     05 FF 48 FC | 	wrbyte	#127, _var06
0d1f4     4D 00 00 FF 
0d1f8     B4 E5 85 F1 | 	sub	objptr, ##39860
0d1fc     1C 00 90 FD | 	jmp	#LR__1095
0d200                 | LR__1094
0d200     01 0B 02 F6 | 	mov	_var06, _var02
0d204     4D 00 00 FF 
0d208     B4 E5 05 F1 | 	add	objptr, ##39860
0d20c     F2 0A 02 F1 | 	add	_var06, objptr
0d210     05 01 49 FC | 	wrbyte	#128, _var06
0d214     4D 00 00 FF 
0d218     B4 E5 85 F1 | 	sub	objptr, ##39860
0d21c                 | LR__1095
0d21c     01 02 06 F1 | 	add	_var02, #1
0d220     80 02 56 F2 | 	cmps	_var02, #128 wc
0d224     A4 FF 9F CD |  if_b	jmp	#LR__1093
0d228                 | ' 
0d228                 | ' do: loop until lpeek(base+64*7)<32768
0d228     37 00 00 FF 
0d22c     10 E4 05 F1 | 	add	objptr, ##28176
0d230                 | LR__1096
0d230     F2 12 02 FB | 	rdlong	arg01, objptr
0d234     C0 13 06 F1 | 	add	arg01, #448
0d238     09 FB 01 FB | 	rdlong	result1, arg01
0d23c     40 00 00 FF 
0d240     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d244     E8 FF 9F 3D |  if_ae	jmp	#LR__1096
0d248     37 00 00 FF 
0d24c     10 E4 85 F1 | 	sub	objptr, ##28176
0d250                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d250     80 02 06 F6 | 	mov	_var02, #128
0d254                 | LR__1097
0d254     01 07 52 F6 | 	abs	_var04, _var02 wc
0d258     07 06 06 F5 | 	and	_var04, #7
0d25c     03 07 82 F6 | 	negc	_var04, _var04
0d260     04 06 56 F2 | 	cmps	_var04, #4 wc
0d264     20 00 90 3D |  if_ae	jmp	#LR__1098
0d268     01 0B 02 F6 | 	mov	_var06, _var02
0d26c     4D 00 00 FF 
0d270     B4 E5 05 F1 | 	add	objptr, ##39860
0d274     F2 0A 02 F1 | 	add	_var06, objptr
0d278     05 FF 48 FC | 	wrbyte	#127, _var06
0d27c     4D 00 00 FF 
0d280     B4 E5 85 F1 | 	sub	objptr, ##39860
0d284     1C 00 90 FD | 	jmp	#LR__1099
0d288                 | LR__1098
0d288     01 0B 02 F6 | 	mov	_var06, _var02
0d28c     4D 00 00 FF 
0d290     B4 E5 05 F1 | 	add	objptr, ##39860
0d294     F2 0A 02 F1 | 	add	_var06, objptr
0d298     05 01 49 FC | 	wrbyte	#128, _var06
0d29c     4D 00 00 FF 
0d2a0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d2a4                 | LR__1099
0d2a4     01 02 06 F1 | 	add	_var02, #1
0d2a8     00 03 16 F2 | 	cmp	_var02, #256 wc
0d2ac     A4 FF 9F CD |  if_b	jmp	#LR__1097
0d2b0                 | LR__1100
0d2b0                 | _csave_block_ret
0d2b0     2D 00 64 FD | 	ret
0d2b4                 | 
0d2b4                 | ' 
0d2b4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0d2b4                 | _csave_addtoblock
0d2b4     04 4A 05 F6 | 	mov	COUNT_, #4
0d2b8     A8 00 A0 FD | 	call	#pushregs_
0d2bc     09 27 02 F6 | 	mov	local01, arg01
0d2c0                 | ' 
0d2c0                 | ' if force=0 then
0d2c0     07 14 4E F7 | 	zerox	arg02, #7 wz
0d2c4     78 00 90 5D |  if_ne	jmp	#LR__1110
0d2c8     50 00 00 FF 
0d2cc     B4 E4 05 F1 | 	add	objptr, ##41140
0d2d0     F2 14 02 FB | 	rdlong	arg02, objptr
0d2d4     02 00 00 FF 
0d2d8     00 E4 85 F1 | 	sub	objptr, ##1024
0d2dc     F2 14 02 F1 | 	add	arg02, objptr
0d2e0     0A 27 42 FC | 	wrbyte	local01, arg02
0d2e4     02 00 00 FF 
0d2e8     00 E4 05 F1 | 	add	objptr, ##1024
0d2ec     F2 26 02 FB | 	rdlong	local01, objptr
0d2f0     01 26 06 F1 | 	add	local01, #1
0d2f4     F2 26 62 FC | 	wrlong	local01, objptr
0d2f8                 | '   block(blockptr)=d
0d2f8                 | '   blockptr+=1
0d2f8                 | '   if blockptr>=255 then
0d2f8     50 00 00 FF 
0d2fc     B4 E4 85 F1 | 	sub	objptr, ##41140
0d300     FF 26 16 F2 | 	cmp	local01, #255 wc
0d304     E4 00 90 CD |  if_b	jmp	#LR__1114
0d308     4E 00 00 FF 
0d30c     B4 E4 05 F1 | 	add	objptr, ##40116
0d310     F2 12 02 F6 | 	mov	arg01, objptr
0d314     4E 00 00 FF 
0d318     B4 E4 85 F1 | 	sub	objptr, ##40116
0d31c     B0 FB BF FD | 	call	#_csave_block
0d320     50 00 00 FF 
0d324     B4 E4 05 F1 | 	add	objptr, ##41140
0d328     F2 00 68 FC | 	wrlong	#0, objptr
0d32c     50 00 00 FF 
0d330     B4 E4 85 F1 | 	sub	objptr, ##41140
0d334     2C 13 06 F6 | 	mov	arg01, #300
0d338     2C 7E B1 FD | 	call	#__system___waitms
0d33c     AC 00 90 FD | 	jmp	#LR__1114
0d340                 | LR__1110
0d340     50 00 00 FF 
0d344     B4 E4 05 F1 | 	add	objptr, ##41140
0d348     F2 28 02 FB | 	rdlong	local02, objptr
0d34c     02 00 00 FF 
0d350     00 E4 85 F1 | 	sub	objptr, ##1024
0d354     F2 28 02 F1 | 	add	local02, objptr
0d358     14 27 42 FC | 	wrbyte	local01, local02
0d35c                 | '   block(blockptr)=d
0d35c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0d35c     02 00 00 FF 
0d360     00 E4 05 F1 | 	add	objptr, ##1024
0d364     F2 2A 02 FB | 	rdlong	local03, objptr
0d368     50 00 00 FF 
0d36c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d370     FF 2A 16 F2 | 	cmp	local03, #255 wc
0d374     40 00 90 3D |  if_ae	jmp	#LR__1113
0d378     50 00 00 FF 
0d37c     B4 E4 05 F1 | 	add	objptr, ##41140
0d380     F2 2C 02 FB | 	rdlong	local04, objptr
0d384     50 00 00 FF 
0d388     B4 E4 85 F1 | 	sub	objptr, ##41140
0d38c                 | LR__1111
0d38c     00 2D 56 F2 | 	cmps	local04, #256 wc
0d390     24 00 90 3D |  if_ae	jmp	#LR__1112
0d394     16 29 02 F6 | 	mov	local02, local04
0d398     4E 00 00 FF 
0d39c     B4 E4 05 F1 | 	add	objptr, ##40116
0d3a0     F2 28 02 F1 | 	add	local02, objptr
0d3a4     14 01 48 FC | 	wrbyte	#0, local02
0d3a8     01 2C 06 F1 | 	add	local04, #1
0d3ac     4E 00 00 FF 
0d3b0     B4 E4 85 F1 | 	sub	objptr, ##40116
0d3b4     D4 FF 9F FD | 	jmp	#LR__1111
0d3b8                 | LR__1112
0d3b8                 | LR__1113
0d3b8     4E 00 00 FF 
0d3bc     B4 E4 05 F1 | 	add	objptr, ##40116
0d3c0     F2 12 02 F6 | 	mov	arg01, objptr
0d3c4     4E 00 00 FF 
0d3c8     B4 E4 85 F1 | 	sub	objptr, ##40116
0d3cc     00 FB BF FD | 	call	#_csave_block
0d3d0     50 00 00 FF 
0d3d4     B4 E4 05 F1 | 	add	objptr, ##41140
0d3d8     F2 00 68 FC | 	wrlong	#0, objptr
0d3dc     50 00 00 FF 
0d3e0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d3e4     2C 13 06 F6 | 	mov	arg01, #300
0d3e8     7C 7D B1 FD | 	call	#__system___waitms
0d3ec                 | LR__1114
0d3ec     A7 F0 03 F6 | 	mov	ptra, fp
0d3f0     B2 00 A0 FD | 	call	#popregs_
0d3f4                 | _csave_addtoblock_ret
0d3f4     2D 00 64 FD | 	ret
0d3f8                 | 
0d3f8                 | ' 
0d3f8                 | ' '----------------------- csave
0d3f8                 | ' 
0d3f8                 | ' sub test_csave
0d3f8                 | _test_csave
0d3f8     04 4A 05 F6 | 	mov	COUNT_, #4
0d3fc     A8 00 A0 FD | 	call	#pushregs_
0d400     C0 F0 07 F1 | 	add	ptra, #192
0d404                 | ' 'dim fileheader,savestart, saveptr as ulong
0d404                 | ' 
0d404                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0d404     4A 00 00 FF 
0d408     88 E4 05 F1 | 	add	objptr, ##38024
0d40c     F2 12 02 FB | 	rdlong	arg01, objptr
0d410     4A 00 00 FF 
0d414     88 E4 85 F1 | 	sub	objptr, ##38024
0d418     84 43 B1 FD | 	call	#_pslpeek
0d41c     FF FF 7F FF 
0d420     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0d424     10 00 90 5D |  if_ne	jmp	#LR__1120
0d428     1B 12 06 F6 | 	mov	arg01, #27
0d42c     00 14 06 F6 | 	mov	arg02, #0
0d430     9C 40 B1 FD | 	call	#_printerror
0d434     1C 03 90 FD | 	jmp	#LR__1134
0d438                 | LR__1120
0d438     50 F7 BF FD | 	call	#_pop
0d43c     90 4E 05 F1 | 	add	fp, #144
0d440     A7 FA 61 FC | 	wrlong	result1, fp
0d444     04 4E 05 F1 | 	add	fp, #4
0d448     A7 FC 61 FC | 	wrlong	result2, fp
0d44c     04 4E 05 F1 | 	add	fp, #4
0d450     A7 FE 61 FC | 	wrlong	result3, fp
0d454                 | ' t1=pop()
0d454                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0d454     98 4E 85 F1 | 	sub	fp, #152
0d458     1F FE 0D F2 | 	cmp	result3, #31 wz
0d45c     24 00 90 AD |  if_e	jmp	#LR__1121
0d460     52 00 00 FF 
0d464     00 E4 05 F1 | 	add	objptr, ##41984
0d468     F2 1C 02 FB | 	rdlong	arg06, objptr
0d46c     52 00 00 FF 
0d470     00 E4 85 F1 | 	sub	objptr, ##41984
0d474     8C 4E 05 F1 | 	add	fp, #140
0d478     A7 1C 62 FC | 	wrlong	arg06, fp
0d47c     8C 4E 85 F1 | 	sub	fp, #140
0d480     14 00 90 FD | 	jmp	#LR__1122
0d484                 | LR__1121
0d484     90 4E 05 F1 | 	add	fp, #144
0d488     A7 1C 02 FB | 	rdlong	arg06, fp
0d48c     04 4E 85 F1 | 	sub	fp, #4
0d490     A7 1C 62 FC | 	wrlong	arg06, fp
0d494     8C 4E 85 F1 | 	sub	fp, #140
0d498                 | LR__1122
0d498                 | ' 
0d498                 | ' ' prepare 1 kHz header wave
0d498                 | ' 
0d498                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d498     A7 00 68 FC | 	wrlong	#0, fp
0d49c     97 34 48 FB | 	callpa	#(@LR__1126-@LR__1123)>>2,fcache_load_ptr_
0d4a0                 | LR__1123
0d4a0     A7 1C 02 FB | 	rdlong	arg06, fp
0d4a4     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0d4a8     07 1A 06 F5 | 	and	arg05, #7
0d4ac     0D 1B 82 F6 | 	negc	arg05, arg05
0d4b0     04 1A 56 F2 | 	cmps	arg05, #4 wc
0d4b4     20 00 90 3D |  if_ae	jmp	#LR__1124
0d4b8     A7 1A 02 FB | 	rdlong	arg05, fp
0d4bc     4D 00 00 FF 
0d4c0     B4 E5 05 F1 | 	add	objptr, ##39860
0d4c4     F2 1A 02 F1 | 	add	arg05, objptr
0d4c8     0D FF 48 FC | 	wrbyte	#127, arg05
0d4cc     4D 00 00 FF 
0d4d0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d4d4     1C 00 90 FD | 	jmp	#LR__1125
0d4d8                 | LR__1124
0d4d8     A7 1A 02 FB | 	rdlong	arg05, fp
0d4dc     4D 00 00 FF 
0d4e0     B4 E5 05 F1 | 	add	objptr, ##39860
0d4e4     F2 1A 02 F1 | 	add	arg05, objptr
0d4e8     0D 01 49 FC | 	wrbyte	#128, arg05
0d4ec     4D 00 00 FF 
0d4f0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d4f4                 | LR__1125
0d4f4     A7 1A 02 FB | 	rdlong	arg05, fp
0d4f8     01 1A 06 F1 | 	add	arg05, #1
0d4fc     A7 1A 62 FC | 	wrlong	arg05, fp
0d500     00 1B 56 F2 | 	cmps	arg05, #256 wc
0d504     98 FF 9F CD |  if_b	jmp	#LR__1123
0d508                 | LR__1126
0d508     4D 00 00 FF 
0d50c     B4 E5 05 F1 | 	add	objptr, ##39860
0d510     F2 14 02 F6 | 	mov	arg02, objptr
0d514     07 12 06 F6 | 	mov	arg01, #7
0d518     0F 00 00 FF 
0d51c     40 17 06 F6 | 	mov	arg03, ##8000
0d520     0E 18 C6 F9 | 	decod	arg04, #14
0d524     00 1B 06 F6 | 	mov	arg05, #256
0d528     00 1C 06 F6 | 	mov	arg06, #0
0d52c     42 00 00 FF 
0d530     E8 E4 85 F1 | 	sub	objptr, ##34024
0d534     98 75 B1 FD | 	call	#_audio096_spin2_play8
0d538     0B 00 00 FF 
0d53c     CC E4 85 F1 | 	sub	objptr, ##5836
0d540     05 00 00 FF 
0d544     B8 13 06 F6 | 	mov	arg01, ##3000
0d548     1C 7C B1 FD | 	call	#__system___waitms
0d54c     50 00 00 FF 
0d550     B4 E4 05 F1 | 	add	objptr, ##41140
0d554     F2 00 68 FC | 	wrlong	#0, objptr
0d558     50 00 00 FF 
0d55c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d560     72 12 06 F6 | 	mov	arg01, #114
0d564     00 14 06 F6 | 	mov	arg02, #0
0d568     48 FD BF FD | 	call	#_csave_addtoblock
0d56c     62 12 06 F6 | 	mov	arg01, #98
0d570     00 14 06 F6 | 	mov	arg02, #0
0d574     3C FD BF FD | 	call	#_csave_addtoblock
0d578     61 12 06 F6 | 	mov	arg01, #97
0d57c     00 14 06 F6 | 	mov	arg02, #0
0d580     30 FD BF FD | 	call	#_csave_addtoblock
0d584     0D 12 06 F6 | 	mov	arg01, #13
0d588     00 14 06 F6 | 	mov	arg02, #0
0d58c     24 FD BF FD | 	call	#_csave_addtoblock
0d590                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0d590                 | ' waitms 3000 
0d590                 | ' 
0d590                 | ' blockptr=0
0d590                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0d590                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0d590     A7 02 68 FC | 	wrlong	#1, fp
0d594     8C 4E 05 F1 | 	add	fp, #140
0d598     A7 12 02 FB | 	rdlong	arg01, fp
0d59c     8C 4E 85 F1 | 	sub	fp, #140
0d5a0     09 27 02 F6 | 	mov	local01, arg01
0d5a4     97 06 48 FB | 	callpa	#(@LR__1128-@LR__1127)>>2,fcache_load_ptr_
0d5a8                 | LR__1127
0d5a8     13 FB C9 FA | 	rdbyte	result1, local01 wz
0d5ac     01 26 06 51 |  if_ne	add	local01, #1
0d5b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1127
0d5b4                 | LR__1128
0d5b4     09 27 82 F1 | 	sub	local01, arg01
0d5b8     13 29 02 F6 | 	mov	local02, local01
0d5bc     01 28 06 F1 | 	add	local02, #1
0d5c0                 | LR__1129
0d5c0     A7 1A 02 FB | 	rdlong	arg05, fp
0d5c4     14 1B 52 F2 | 	cmps	arg05, local02 wc
0d5c8     34 00 90 3D |  if_ae	jmp	#LR__1130
0d5cc     8C 4E 05 F1 | 	add	fp, #140
0d5d0     A7 12 02 FB | 	rdlong	arg01, fp
0d5d4     8C 4E 85 F1 | 	sub	fp, #140
0d5d8     A7 14 02 FB | 	rdlong	arg02, fp
0d5dc     01 16 06 F6 | 	mov	arg03, #1
0d5e0     24 9A B1 FD | 	call	#__system__Mid_S
0d5e4     FD 12 C2 FA | 	rdbyte	arg01, result1
0d5e8     00 14 06 F6 | 	mov	arg02, #0
0d5ec     C4 FC BF FD | 	call	#_csave_addtoblock
0d5f0     A7 1A 02 FB | 	rdlong	arg05, fp
0d5f4     01 1A 06 F1 | 	add	arg05, #1
0d5f8     A7 1A 62 FC | 	wrlong	arg05, fp
0d5fc     C0 FF 9F FD | 	jmp	#LR__1129
0d600                 | LR__1130
0d600     00 12 06 F6 | 	mov	arg01, #0
0d604     00 14 06 F6 | 	mov	arg02, #0
0d608     A8 FC BF FD | 	call	#_csave_addtoblock
0d60c     72 12 06 F6 | 	mov	arg01, #114
0d610     00 14 06 F6 | 	mov	arg02, #0
0d614     9C FC BF FD | 	call	#_csave_addtoblock
0d618     62 12 06 F6 | 	mov	arg01, #98
0d61c     00 14 06 F6 | 	mov	arg02, #0
0d620     90 FC BF FD | 	call	#_csave_addtoblock
0d624     73 12 06 F6 | 	mov	arg01, #115
0d628     00 14 06 F6 | 	mov	arg02, #0
0d62c     84 FC BF FD | 	call	#_csave_addtoblock
0d630     0D 12 06 F6 | 	mov	arg01, #13
0d634     00 14 06 F6 | 	mov	arg02, #0
0d638     78 FC BF FD | 	call	#_csave_addtoblock
0d63c     4A 00 00 FF 
0d640     88 E4 05 F1 | 	add	objptr, ##38024
0d644     F2 2A 02 FB | 	rdlong	local03, objptr
0d648     4A 00 00 FF 
0d64c     88 E4 85 F1 | 	sub	objptr, ##38024
0d650     9C 4E 05 F1 | 	add	fp, #156
0d654     A7 2A 62 FC | 	wrlong	local03, fp
0d658     9C 4E 85 F1 | 	sub	fp, #156
0d65c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0d65c                 | ' 
0d65c                 | ' saveptr=programstart
0d65c                 | ' do
0d65c                 | LR__1131
0d65c     A0 4E 05 F1 | 	add	fp, #160
0d660     A7 12 02 F6 | 	mov	arg01, fp
0d664     04 4E 85 F1 | 	sub	fp, #4
0d668     A7 14 02 FB | 	rdlong	arg02, fp
0d66c     9C 4E 85 F1 | 	sub	fp, #156
0d670     18 16 06 F6 | 	mov	arg03, #24
0d674     0B 00 00 FF 
0d678     CC E4 05 F1 | 	add	objptr, ##5836
0d67c     B4 6B B1 FD | 	call	#_psram_spin2_read1
0d680     0C 4E 05 F1 | 	add	fp, #12
0d684     A7 12 02 F6 | 	mov	arg01, fp
0d688     9C 4E 05 F1 | 	add	fp, #156
0d68c     A7 14 02 FB | 	rdlong	arg02, fp
0d690     04 4E 05 F1 | 	add	fp, #4
0d694     A7 16 02 FB | 	rdlong	arg03, fp
0d698     AC 4E 85 F1 | 	sub	fp, #172
0d69c     94 6B B1 FD | 	call	#_psram_spin2_read1
0d6a0     0B 00 00 FF 
0d6a4     CC E4 85 F1 | 	sub	objptr, ##5836
0d6a8     AC 4E 05 F1 | 	add	fp, #172
0d6ac     A7 12 02 FB | 	rdlong	arg01, fp
0d6b0     AC 4E 85 F1 | 	sub	fp, #172
0d6b4     00 14 06 F6 | 	mov	arg02, #0
0d6b8     F8 FB BF FD | 	call	#_csave_addtoblock
0d6bc                 | ' 
0d6bc                 | '   psram.read1(varptr(header(0)),saveptr,24)
0d6bc                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0d6bc                 | '   csave_addtoblock(header(3),0) ' that's always <255
0d6bc                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0d6bc     A7 00 68 FC | 	wrlong	#0, fp
0d6c0     AC 4E 05 F1 | 	add	fp, #172
0d6c4     A7 2C 02 FB | 	rdlong	local04, fp
0d6c8     AC 4E 85 F1 | 	sub	fp, #172
0d6cc                 | LR__1132
0d6cc     A7 2A 02 FB | 	rdlong	local03, fp
0d6d0     16 2B 52 F2 | 	cmps	local03, local04 wc
0d6d4     2C 00 90 3D |  if_ae	jmp	#LR__1133
0d6d8     A7 2A 02 FB | 	rdlong	local03, fp
0d6dc     0C 4E 05 F1 | 	add	fp, #12
0d6e0     A7 2A 02 F1 | 	add	local03, fp
0d6e4     15 13 C2 FA | 	rdbyte	arg01, local03
0d6e8     00 14 06 F6 | 	mov	arg02, #0
0d6ec     0C 4E 85 F1 | 	sub	fp, #12
0d6f0     C0 FB BF FD | 	call	#_csave_addtoblock
0d6f4     A7 2A 02 FB | 	rdlong	local03, fp
0d6f8     01 2A 06 F1 | 	add	local03, #1
0d6fc     A7 2A 62 FC | 	wrlong	local03, fp
0d700     C8 FF 9F FD | 	jmp	#LR__1132
0d704                 | LR__1133
0d704     B4 4E 05 F1 | 	add	fp, #180
0d708     A7 2A 02 FB | 	rdlong	local03, fp
0d70c     18 4E 85 F1 | 	sub	fp, #24
0d710     A7 2A 62 FC | 	wrlong	local03, fp
0d714     18 4E 05 F1 | 	add	fp, #24
0d718     A7 2A 02 FB | 	rdlong	local03, fp
0d71c     B4 4E 85 F1 | 	sub	fp, #180
0d720     FF FF 3F FF 
0d724     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0d728     30 FF 9F 5D |  if_ne	jmp	#LR__1131
0d72c     00 12 06 F6 | 	mov	arg01, #0
0d730     01 14 06 F6 | 	mov	arg02, #1
0d734     7C FB BF FD | 	call	#_csave_addtoblock
0d738     37 00 00 FF 
0d73c     10 E4 05 F1 | 	add	objptr, ##28176
0d740     F2 12 02 FB | 	rdlong	arg01, objptr
0d744     37 00 00 FF 
0d748     10 E4 85 F1 | 	sub	objptr, ##28176
0d74c     D4 13 06 F1 | 	add	arg01, #468
0d750     09 01 58 FC | 	wrword	#0, arg01
0d754                 | LR__1134
0d754     A7 F0 03 F6 | 	mov	ptra, fp
0d758     B2 00 A0 FD | 	call	#popregs_
0d75c                 | _test_csave_ret
0d75c     2D 00 64 FD | 	ret
0d760                 | 
0d760                 | ' 
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' 
0d760                 | ' 
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' 
0d760                 | ' '-------------------- abs
0d760                 | ' 
0d760                 | ' sub do_abs
0d760                 | _do_abs
0d760     01 4A 05 F6 | 	mov	COUNT_, #1
0d764     A8 00 A0 FD | 	call	#pushregs_
0d768     0C F0 07 F1 | 	add	ptra, #12
0d76c     1C F4 BF FD | 	call	#_pop
0d770     FF 26 02 F6 | 	mov	local01, result3
0d774     A7 FA 61 FC | 	wrlong	result1, fp
0d778     04 4E 05 F1 | 	add	fp, #4
0d77c     A7 FC 61 FC | 	wrlong	result2, fp
0d780     04 4E 05 F1 | 	add	fp, #4
0d784     A7 26 62 FC | 	wrlong	local01, fp
0d788                 | ' 
0d788                 | ' t1=pop()
0d788                 | ' if t1.result_type=result_int then 
0d788     08 4E 85 F1 | 	sub	fp, #8
0d78c     1C 26 0E F2 | 	cmp	local01, #28 wz
0d790     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d794     09 27 42 A6 |  if_e	abs	local01, arg01
0d798     A7 26 62 AC |  if_e	wrlong	local01, fp
0d79c     2C 00 90 AD |  if_e	jmp	#LR__1140
0d7a0     08 4E 05 F1 | 	add	fp, #8
0d7a4     A7 26 02 FB | 	rdlong	local01, fp
0d7a8     08 4E 85 F1 | 	sub	fp, #8
0d7ac     1E 26 0E F2 | 	cmp	local01, #30 wz
0d7b0     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d7b4     1F FA 05 A4 |  if_e	bitl	result1, #31
0d7b8     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d7bc     08 4E 05 51 |  if_ne	add	fp, #8
0d7c0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d7c4     08 4E 85 51 |  if_ne	sub	fp, #8
0d7c8     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d7cc                 | LR__1140
0d7cc     A7 12 02 F6 | 	mov	arg01, fp
0d7d0     50 F4 BF FD | 	call	#_push
0d7d4     A7 F0 03 F6 | 	mov	ptra, fp
0d7d8     B2 00 A0 FD | 	call	#popregs_
0d7dc                 | _do_abs_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' '-------------------- acos
0d7e0                 | ' 
0d7e0                 | ' sub do_acos
0d7e0                 | _do_acos
0d7e0     01 4A 05 F6 | 	mov	COUNT_, #1
0d7e4     A8 00 A0 FD | 	call	#pushregs_
0d7e8     10 F0 07 F1 | 	add	ptra, #16
0d7ec     4A 00 00 FF 
0d7f0     80 E4 05 F1 | 	add	objptr, ##38016
0d7f4     F2 26 02 FB | 	rdlong	local01, objptr
0d7f8     13 17 02 F6 | 	mov	arg03, local01
0d7fc     01 16 66 F0 | 	shl	arg03, #1
0d800     13 17 02 F1 | 	add	arg03, local01
0d804     02 16 66 F0 | 	shl	arg03, #2
0d808     03 00 00 FF 
0d80c     04 E4 85 F1 | 	sub	objptr, ##1540
0d810     F2 16 02 F1 | 	add	arg03, objptr
0d814     0B 17 02 FB | 	rdlong	arg03, arg03
0d818     0C 4E 05 F1 | 	add	fp, #12
0d81c     A7 16 62 FC | 	wrlong	arg03, fp
0d820                 | ' 
0d820                 | ' numpar=compiledline(lineptr_e).result.uresult
0d820                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d820     0C 4E 85 F1 | 	sub	fp, #12
0d824     02 16 16 F2 | 	cmp	arg03, #2 wc
0d828     47 00 00 FF 
0d82c     7C E4 85 F1 | 	sub	objptr, ##36476
0d830     0C 4E 05 C1 |  if_b	add	fp, #12
0d834     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d838     0C 4E 85 C1 |  if_b	sub	fp, #12
0d83c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0d840     00 12 06 F6 | 	mov	arg01, #0
0d844     54 D3 B1 FD | 	call	#__system___getiolock_0595
0d848     FD 12 02 F6 | 	mov	arg01, result1
0d84c     24 76 B1 FD | 	call	#__system___lockmem
0d850     A8 01 00 FF 
0d854     AF 14 06 F6 | 	mov	arg02, ##@LR__5748
0d858     00 12 06 F6 | 	mov	arg01, #0
0d85c     00 16 06 F6 | 	mov	arg03, #0
0d860     04 83 B1 FD | 	call	#__system___basic_print_string
0d864     00 12 06 F6 | 	mov	arg01, #0
0d868     30 D3 B1 FD | 	call	#__system___getiolock_0595
0d86c     FD 00 68 FC | 	wrlong	#0, result1
0d870     27 12 06 F6 | 	mov	arg01, #39
0d874     00 14 06 F6 | 	mov	arg02, #0
0d878     54 3C B1 FD | 	call	#_printerror
0d87c     64 00 90 FD | 	jmp	#LR__1151
0d880                 | LR__1150
0d880     08 F3 BF FD | 	call	#_pop
0d884     FF 26 02 F6 | 	mov	local01, result3
0d888     A7 FA 61 FC | 	wrlong	result1, fp
0d88c     04 4E 05 F1 | 	add	fp, #4
0d890     A7 FC 61 FC | 	wrlong	result2, fp
0d894     04 4E 05 F1 | 	add	fp, #4
0d898     A7 26 62 FC | 	wrlong	local01, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     A7 12 02 F6 | 	mov	arg01, fp
0d8a4     84 F5 BF FD | 	call	#_converttofloat
0d8a8     FD 12 02 F6 | 	mov	arg01, result1
0d8ac     7C AF B1 FD | 	call	#__system____builtin_acosf
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     51 00 00 FF 
0d8b8     E8 E5 05 F1 | 	add	objptr, ##41960
0d8bc     F2 14 02 FB | 	rdlong	arg02, objptr
0d8c0     51 00 00 FF 
0d8c4     E8 E5 85 F1 | 	sub	objptr, ##41960
0d8c8     20 A4 B1 FD | 	call	#__system___float_mul
0d8cc     A7 FA 61 FC | 	wrlong	result1, fp
0d8d0     08 4E 05 F1 | 	add	fp, #8
0d8d4     A7 3C 68 FC | 	wrlong	#30, fp
0d8d8     08 4E 85 F1 | 	sub	fp, #8
0d8dc     A7 12 02 F6 | 	mov	arg01, fp
0d8e0     40 F3 BF FD | 	call	#_push
0d8e4                 | LR__1151
0d8e4     A7 F0 03 F6 | 	mov	ptra, fp
0d8e8     B2 00 A0 FD | 	call	#popregs_
0d8ec                 | _do_acos_ret
0d8ec     2D 00 64 FD | 	ret
0d8f0                 | 
0d8f0                 | ' 
0d8f0                 | ' '-------------------- asc
0d8f0                 | ' 
0d8f0                 | ' sub do_asc
0d8f0                 | _do_asc
0d8f0     01 4A 05 F6 | 	mov	COUNT_, #1
0d8f4     A8 00 A0 FD | 	call	#pushregs_
0d8f8     14 F0 07 F1 | 	add	ptra, #20
0d8fc     4A 00 00 FF 
0d900     80 E4 05 F1 | 	add	objptr, ##38016
0d904     F2 26 02 FB | 	rdlong	local01, objptr
0d908     13 17 02 F6 | 	mov	arg03, local01
0d90c     01 16 66 F0 | 	shl	arg03, #1
0d910     13 17 02 F1 | 	add	arg03, local01
0d914     02 16 66 F0 | 	shl	arg03, #2
0d918     03 00 00 FF 
0d91c     04 E4 85 F1 | 	sub	objptr, ##1540
0d920     F2 16 02 F1 | 	add	arg03, objptr
0d924     0B 17 02 FB | 	rdlong	arg03, arg03
0d928     0C 4E 05 F1 | 	add	fp, #12
0d92c     A7 16 62 FC | 	wrlong	arg03, fp
0d930                 | ' 
0d930                 | ' numpar=compiledline(lineptr_e).result.uresult
0d930                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0d930     0C 4E 85 F1 | 	sub	fp, #12
0d934     02 16 16 F2 | 	cmp	arg03, #2 wc
0d938     47 00 00 FF 
0d93c     7C E4 85 F1 | 	sub	objptr, ##36476
0d940     0C 4E 05 C1 |  if_b	add	fp, #12
0d944     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d948     0C 4E 85 C1 |  if_b	sub	fp, #12
0d94c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0d950     00 12 06 F6 | 	mov	arg01, #0
0d954     44 D2 B1 FD | 	call	#__system___getiolock_0595
0d958     FD 12 02 F6 | 	mov	arg01, result1
0d95c     14 75 B1 FD | 	call	#__system___lockmem
0d960     A8 01 00 FF 
0d964     B6 14 06 F6 | 	mov	arg02, ##@LR__5749
0d968     00 12 06 F6 | 	mov	arg01, #0
0d96c     00 16 06 F6 | 	mov	arg03, #0
0d970     F4 81 B1 FD | 	call	#__system___basic_print_string
0d974     00 12 06 F6 | 	mov	arg01, #0
0d978     20 D2 B1 FD | 	call	#__system___getiolock_0595
0d97c     FD 00 68 FC | 	wrlong	#0, result1
0d980     27 12 06 F6 | 	mov	arg01, #39
0d984     00 14 06 F6 | 	mov	arg02, #0
0d988     44 3B B1 FD | 	call	#_printerror
0d98c     B4 00 90 FD | 	jmp	#LR__1163
0d990                 | LR__1160
0d990     F8 F1 BF FD | 	call	#_pop
0d994     FF 16 02 F6 | 	mov	arg03, result3
0d998     A7 FA 61 FC | 	wrlong	result1, fp
0d99c     04 4E 05 F1 | 	add	fp, #4
0d9a0     A7 FC 61 FC | 	wrlong	result2, fp
0d9a4     04 4E 05 F1 | 	add	fp, #4
0d9a8     A7 16 62 FC | 	wrlong	arg03, fp
0d9ac                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d9ac     08 4E 85 F1 | 	sub	fp, #8
0d9b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d9b4     18 00 90 5D |  if_ne	jmp	#LR__1161
0d9b8     A7 12 02 FB | 	rdlong	arg01, fp
0d9bc     44 F3 BF FD | 	call	#_convertstring
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 3E 68 FC | 	wrlong	#31, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0                 | LR__1161
0d9d0                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0d9d0     08 4E 05 F1 | 	add	fp, #8
0d9d4     A7 16 02 FB | 	rdlong	arg03, fp
0d9d8     08 4E 85 F1 | 	sub	fp, #8
0d9dc     1F 16 0E F2 | 	cmp	arg03, #31 wz
0d9e0     40 00 90 AD |  if_e	jmp	#LR__1162
0d9e4     00 12 06 F6 | 	mov	arg01, #0
0d9e8     B0 D1 B1 FD | 	call	#__system___getiolock_0595
0d9ec     FD 12 02 F6 | 	mov	arg01, result1
0d9f0     80 74 B1 FD | 	call	#__system___lockmem
0d9f4     A8 01 00 FF 
0d9f8     BC 14 06 F6 | 	mov	arg02, ##@LR__5750
0d9fc     00 12 06 F6 | 	mov	arg01, #0
0da00     00 16 06 F6 | 	mov	arg03, #0
0da04     60 81 B1 FD | 	call	#__system___basic_print_string
0da08     00 12 06 F6 | 	mov	arg01, #0
0da0c     8C D1 B1 FD | 	call	#__system___getiolock_0595
0da10     FD 00 68 FC | 	wrlong	#0, result1
0da14     0F 12 06 F6 | 	mov	arg01, #15
0da18     00 14 06 F6 | 	mov	arg02, #0
0da1c     B0 3A B1 FD | 	call	#_printerror
0da20     20 00 90 FD | 	jmp	#LR__1163
0da24                 | LR__1162
0da24     A7 26 02 FB | 	rdlong	local01, fp
0da28     13 27 C2 FA | 	rdbyte	local01, local01
0da2c     A7 26 62 FC | 	wrlong	local01, fp
0da30     08 4E 05 F1 | 	add	fp, #8
0da34     A7 38 68 FC | 	wrlong	#28, fp
0da38     08 4E 85 F1 | 	sub	fp, #8
0da3c     A7 12 02 F6 | 	mov	arg01, fp
0da40     E0 F1 BF FD | 	call	#_push
0da44                 | LR__1163
0da44     A7 F0 03 F6 | 	mov	ptra, fp
0da48     B2 00 A0 FD | 	call	#popregs_
0da4c                 | _do_asc_ret
0da4c     2D 00 64 FD | 	ret
0da50                 | 
0da50                 | ' 
0da50                 | ' '-------------------- asin
0da50                 | ' 
0da50                 | ' sub do_asin
0da50                 | _do_asin
0da50     01 4A 05 F6 | 	mov	COUNT_, #1
0da54     A8 00 A0 FD | 	call	#pushregs_
0da58     10 F0 07 F1 | 	add	ptra, #16
0da5c     4A 00 00 FF 
0da60     80 E4 05 F1 | 	add	objptr, ##38016
0da64     F2 26 02 FB | 	rdlong	local01, objptr
0da68     13 17 02 F6 | 	mov	arg03, local01
0da6c     01 16 66 F0 | 	shl	arg03, #1
0da70     13 17 02 F1 | 	add	arg03, local01
0da74     02 16 66 F0 | 	shl	arg03, #2
0da78     03 00 00 FF 
0da7c     04 E4 85 F1 | 	sub	objptr, ##1540
0da80     F2 16 02 F1 | 	add	arg03, objptr
0da84     0B 17 02 FB | 	rdlong	arg03, arg03
0da88     0C 4E 05 F1 | 	add	fp, #12
0da8c     A7 16 62 FC | 	wrlong	arg03, fp
0da90                 | ' 
0da90                 | ' numpar=compiledline(lineptr_e).result.uresult
0da90                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0da90     0C 4E 85 F1 | 	sub	fp, #12
0da94     02 16 16 F2 | 	cmp	arg03, #2 wc
0da98     47 00 00 FF 
0da9c     7C E4 85 F1 | 	sub	objptr, ##36476
0daa0     0C 4E 05 C1 |  if_b	add	fp, #12
0daa4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0daa8     0C 4E 85 C1 |  if_b	sub	fp, #12
0daac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dab0     00 12 06 F6 | 	mov	arg01, #0
0dab4     E4 D0 B1 FD | 	call	#__system___getiolock_0595
0dab8     FD 12 02 F6 | 	mov	arg01, result1
0dabc     B4 73 B1 FD | 	call	#__system___lockmem
0dac0     A8 01 00 FF 
0dac4     C2 14 06 F6 | 	mov	arg02, ##@LR__5751
0dac8     00 12 06 F6 | 	mov	arg01, #0
0dacc     00 16 06 F6 | 	mov	arg03, #0
0dad0     94 80 B1 FD | 	call	#__system___basic_print_string
0dad4     00 12 06 F6 | 	mov	arg01, #0
0dad8     C0 D0 B1 FD | 	call	#__system___getiolock_0595
0dadc     FD 00 68 FC | 	wrlong	#0, result1
0dae0     27 12 06 F6 | 	mov	arg01, #39
0dae4     00 14 06 F6 | 	mov	arg02, #0
0dae8     E4 39 B1 FD | 	call	#_printerror
0daec     64 00 90 FD | 	jmp	#LR__1171
0daf0                 | LR__1170
0daf0     98 F0 BF FD | 	call	#_pop
0daf4     FF 26 02 F6 | 	mov	local01, result3
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 FC 61 FC | 	wrlong	result2, fp
0db04     04 4E 05 F1 | 	add	fp, #4
0db08     A7 26 62 FC | 	wrlong	local01, fp
0db0c     08 4E 85 F1 | 	sub	fp, #8
0db10     A7 12 02 F6 | 	mov	arg01, fp
0db14     14 F3 BF FD | 	call	#_converttofloat
0db18     FD 12 02 F6 | 	mov	arg01, result1
0db1c     C0 AC B1 FD | 	call	#__system____builtin_asinf
0db20     FD 12 02 F6 | 	mov	arg01, result1
0db24     51 00 00 FF 
0db28     E8 E5 05 F1 | 	add	objptr, ##41960
0db2c     F2 14 02 FB | 	rdlong	arg02, objptr
0db30     51 00 00 FF 
0db34     E8 E5 85 F1 | 	sub	objptr, ##41960
0db38     B0 A1 B1 FD | 	call	#__system___float_mul
0db3c     A7 FA 61 FC | 	wrlong	result1, fp
0db40     08 4E 05 F1 | 	add	fp, #8
0db44     A7 3C 68 FC | 	wrlong	#30, fp
0db48     08 4E 85 F1 | 	sub	fp, #8
0db4c     A7 12 02 F6 | 	mov	arg01, fp
0db50     D0 F0 BF FD | 	call	#_push
0db54                 | LR__1171
0db54     A7 F0 03 F6 | 	mov	ptra, fp
0db58     B2 00 A0 FD | 	call	#popregs_
0db5c                 | _do_asin_ret
0db5c     2D 00 64 FD | 	ret
0db60                 | 
0db60                 | ' 
0db60                 | ' '-------------------- atn
0db60                 | ' 
0db60                 | ' sub do_atn
0db60                 | _do_atn
0db60     01 4A 05 F6 | 	mov	COUNT_, #1
0db64     A8 00 A0 FD | 	call	#pushregs_
0db68     10 F0 07 F1 | 	add	ptra, #16
0db6c     4A 00 00 FF 
0db70     80 E4 05 F1 | 	add	objptr, ##38016
0db74     F2 26 02 FB | 	rdlong	local01, objptr
0db78     13 17 02 F6 | 	mov	arg03, local01
0db7c     01 16 66 F0 | 	shl	arg03, #1
0db80     13 17 02 F1 | 	add	arg03, local01
0db84     02 16 66 F0 | 	shl	arg03, #2
0db88     03 00 00 FF 
0db8c     04 E4 85 F1 | 	sub	objptr, ##1540
0db90     F2 16 02 F1 | 	add	arg03, objptr
0db94     0B 17 02 FB | 	rdlong	arg03, arg03
0db98     0C 4E 05 F1 | 	add	fp, #12
0db9c     A7 16 62 FC | 	wrlong	arg03, fp
0dba0                 | ' 
0dba0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dba0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dba0     0C 4E 85 F1 | 	sub	fp, #12
0dba4     02 16 16 F2 | 	cmp	arg03, #2 wc
0dba8     47 00 00 FF 
0dbac     7C E4 85 F1 | 	sub	objptr, ##36476
0dbb0     0C 4E 05 C1 |  if_b	add	fp, #12
0dbb4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dbb8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0dbc0     00 12 06 F6 | 	mov	arg01, #0
0dbc4     D4 CF B1 FD | 	call	#__system___getiolock_0595
0dbc8     FD 12 02 F6 | 	mov	arg01, result1
0dbcc     A4 72 B1 FD | 	call	#__system___lockmem
0dbd0     A8 01 00 FF 
0dbd4     C9 14 06 F6 | 	mov	arg02, ##@LR__5752
0dbd8     00 12 06 F6 | 	mov	arg01, #0
0dbdc     00 16 06 F6 | 	mov	arg03, #0
0dbe0     84 7F B1 FD | 	call	#__system___basic_print_string
0dbe4     00 12 06 F6 | 	mov	arg01, #0
0dbe8     B0 CF B1 FD | 	call	#__system___getiolock_0595
0dbec     FD 00 68 FC | 	wrlong	#0, result1
0dbf0     27 12 06 F6 | 	mov	arg01, #39
0dbf4     00 14 06 F6 | 	mov	arg02, #0
0dbf8     D4 38 B1 FD | 	call	#_printerror
0dbfc     6C 00 90 FD | 	jmp	#LR__1181
0dc00                 | LR__1180
0dc00     88 EF BF FD | 	call	#_pop
0dc04     FF 26 02 F6 | 	mov	local01, result3
0dc08     A7 FA 61 FC | 	wrlong	result1, fp
0dc0c     04 4E 05 F1 | 	add	fp, #4
0dc10     A7 FC 61 FC | 	wrlong	result2, fp
0dc14     04 4E 05 F1 | 	add	fp, #4
0dc18     A7 26 62 FC | 	wrlong	local01, fp
0dc1c     08 4E 85 F1 | 	sub	fp, #8
0dc20     A7 12 02 F6 | 	mov	arg01, fp
0dc24     04 F2 BF FD | 	call	#_converttofloat
0dc28     FD 12 02 F6 | 	mov	arg01, result1
0dc2c     00 C0 1F FF 
0dc30     00 14 06 F6 | 	mov	arg02, ##1065353216
0dc34     40 AC B1 FD | 	call	#__system____builtin_atan2f
0dc38     FD 12 02 F6 | 	mov	arg01, result1
0dc3c     51 00 00 FF 
0dc40     E8 E5 05 F1 | 	add	objptr, ##41960
0dc44     F2 14 02 FB | 	rdlong	arg02, objptr
0dc48     51 00 00 FF 
0dc4c     E8 E5 85 F1 | 	sub	objptr, ##41960
0dc50     98 A0 B1 FD | 	call	#__system___float_mul
0dc54     A7 FA 61 FC | 	wrlong	result1, fp
0dc58     08 4E 05 F1 | 	add	fp, #8
0dc5c     A7 3C 68 FC | 	wrlong	#30, fp
0dc60     08 4E 85 F1 | 	sub	fp, #8
0dc64     A7 12 02 F6 | 	mov	arg01, fp
0dc68     B8 EF BF FD | 	call	#_push
0dc6c                 | LR__1181
0dc6c     A7 F0 03 F6 | 	mov	ptra, fp
0dc70     B2 00 A0 FD | 	call	#popregs_
0dc74                 | _do_atn_ret
0dc74     2D 00 64 FD | 	ret
0dc78                 | 
0dc78                 | ' 
0dc78                 | ' '-------------------- beep
0dc78                 | ' 
0dc78                 | ' sub do_beep
0dc78                 | _do_beep
0dc78     02 4A 05 F6 | 	mov	COUNT_, #2
0dc7c     A8 00 A0 FD | 	call	#pushregs_
0dc80     20 F0 07 F1 | 	add	ptra, #32
0dc84     04 EF BF FD | 	call	#_pop
0dc88     FD 26 02 F6 | 	mov	local01, result1
0dc8c     FE 1C 02 F6 | 	mov	arg06, result2
0dc90     FF 28 02 F6 | 	mov	local02, result3
0dc94     0C 4E 05 F1 | 	add	fp, #12
0dc98     A7 26 62 FC | 	wrlong	local01, fp
0dc9c     04 4E 05 F1 | 	add	fp, #4
0dca0     A7 1C 62 FC | 	wrlong	arg06, fp
0dca4     04 4E 05 F1 | 	add	fp, #4
0dca8     A7 28 62 FC | 	wrlong	local02, fp
0dcac     14 4E 85 F1 | 	sub	fp, #20
0dcb0     D8 EE BF FD | 	call	#_pop
0dcb4     A7 FA 61 FC | 	wrlong	result1, fp
0dcb8     04 4E 05 F1 | 	add	fp, #4
0dcbc     A7 FC 61 FC | 	wrlong	result2, fp
0dcc0     04 4E 05 F1 | 	add	fp, #4
0dcc4     A7 FE 61 FC | 	wrlong	result3, fp
0dcc8                 | ' 
0dcc8                 | ' t2=pop()
0dcc8                 | ' t1=pop()
0dcc8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dcc8     08 4E 85 F1 | 	sub	fp, #8
0dccc     1C FE 0D F2 | 	cmp	result3, #28 wz
0dcd0     08 4E 05 51 |  if_ne	add	fp, #8
0dcd4     A7 28 02 5B |  if_ne	rdlong	local02, fp
0dcd8     08 4E 85 51 |  if_ne	sub	fp, #8
0dcdc     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dce0     A7 26 02 AB |  if_e	rdlong	local01, fp
0dce4     18 4E 05 A1 |  if_e	add	fp, #24
0dce8     A7 26 62 AC |  if_e	wrlong	local01, fp
0dcec     18 4E 85 A1 |  if_e	sub	fp, #24
0dcf0     14 00 90 AD |  if_e	jmp	#LR__1190
0dcf4     A7 12 02 F6 | 	mov	arg01, fp
0dcf8     74 F0 BF FD | 	call	#_converttoint
0dcfc     18 4E 05 F1 | 	add	fp, #24
0dd00     A7 FA 61 FC | 	wrlong	result1, fp
0dd04     18 4E 85 F1 | 	sub	fp, #24
0dd08                 | LR__1190
0dd08     1C 4E 05 F1 | 	add	fp, #28
0dd0c     A7 FE 48 FC | 	wrbyte	#127, fp
0dd10     01 4E 05 F1 | 	add	fp, #1
0dd14     A7 00 49 FC | 	wrbyte	#128, fp
0dd18     01 4E 85 F1 | 	sub	fp, #1
0dd1c     A7 14 02 F6 | 	mov	arg02, fp
0dd20     04 4E 85 F1 | 	sub	fp, #4
0dd24     A7 16 02 FB | 	rdlong	arg03, fp
0dd28     18 4E 85 F1 | 	sub	fp, #24
0dd2c     01 16 66 F0 | 	shl	arg03, #1
0dd30     07 12 06 F6 | 	mov	arg01, #7
0dd34     0E 18 C6 F9 | 	decod	arg04, #14
0dd38     02 1A 06 F6 | 	mov	arg05, #2
0dd3c     00 1C 06 F6 | 	mov	arg06, #0
0dd40     0B 00 00 FF 
0dd44     CC E4 05 F1 | 	add	objptr, ##5836
0dd48     84 6D B1 FD | 	call	#_audio096_spin2_play8
0dd4c     0B 00 00 FF 
0dd50     CC E4 85 F1 | 	sub	objptr, ##5836
0dd54     0C 4E 05 F1 | 	add	fp, #12
0dd58     A7 12 02 F6 | 	mov	arg01, fp
0dd5c     0C 4E 85 F1 | 	sub	fp, #12
0dd60     C0 EE BF FD | 	call	#_push
0dd64     2C CE B0 FD | 	call	#_do_waitms
0dd68     07 12 06 F6 | 	mov	arg01, #7
0dd6c     0B 00 00 FF 
0dd70     CC E4 05 F1 | 	add	objptr, ##5836
0dd74     FC 6D B1 FD | 	call	#_audio096_spin2_stop
0dd78     0B 00 00 FF 
0dd7c     CC E4 85 F1 | 	sub	objptr, ##5836
0dd80     A7 F0 03 F6 | 	mov	ptra, fp
0dd84     B2 00 A0 FD | 	call	#popregs_
0dd88                 | _do_beep_ret
0dd88     2D 00 64 FD | 	ret
0dd8c                 | 
0dd8c                 | ' 
0dd8c                 | ' '-------------------- blit
0dd8c                 | ' 
0dd8c                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dd8c                 | ' sub do_blit
0dd8c                 | _do_blit
0dd8c     02 4A 05 F6 | 	mov	COUNT_, #2
0dd90     A8 00 A0 FD | 	call	#pushregs_
0dd94     3C F0 07 F1 | 	add	ptra, #60
0dd98     4A 00 00 FF 
0dd9c     80 E4 05 F1 | 	add	objptr, ##38016
0dda0     F2 26 02 FB | 	rdlong	local01, objptr
0dda4     13 25 02 F6 | 	mov	arg10, local01
0dda8     01 24 66 F0 | 	shl	arg10, #1
0ddac     13 25 02 F1 | 	add	arg10, local01
0ddb0     02 24 66 F0 | 	shl	arg10, #2
0ddb4     03 00 00 FF 
0ddb8     04 E4 85 F1 | 	sub	objptr, ##1540
0ddbc     F2 24 02 F1 | 	add	arg10, objptr
0ddc0     12 25 02 FB | 	rdlong	arg10, arg10
0ddc4     38 4E 05 F1 | 	add	fp, #56
0ddc8     A7 24 62 FC | 	wrlong	arg10, fp
0ddcc                 | ' 
0ddcc                 | ' numpar=compiledline(lineptr_e).result.uresult
0ddcc                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0ddcc     38 4E 85 F1 | 	sub	fp, #56
0ddd0     0A 24 0E F2 | 	cmp	arg10, #10 wz
0ddd4     47 00 00 FF 
0ddd8     7C E4 85 F1 | 	sub	objptr, ##36476
0dddc     38 4E 05 51 |  if_ne	add	fp, #56
0dde0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0dde4     38 4E 85 51 |  if_ne	sub	fp, #56
0dde8     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0ddec     50 00 90 AD |  if_e	jmp	#LR__1200
0ddf0     00 12 06 F6 | 	mov	arg01, #0
0ddf4     A4 CD B1 FD | 	call	#__system___getiolock_0595
0ddf8     FD 12 02 F6 | 	mov	arg01, result1
0ddfc     74 70 B1 FD | 	call	#__system___lockmem
0de00     A8 01 00 FF 
0de04     CF 14 06 F6 | 	mov	arg02, ##@LR__5753
0de08     00 12 06 F6 | 	mov	arg01, #0
0de0c     00 16 06 F6 | 	mov	arg03, #0
0de10     54 7D B1 FD | 	call	#__system___basic_print_string
0de14     00 12 06 F6 | 	mov	arg01, #0
0de18     80 CD B1 FD | 	call	#__system___getiolock_0595
0de1c     FD 00 68 FC | 	wrlong	#0, result1
0de20     50 00 00 FF 
0de24     F0 E4 05 F1 | 	add	objptr, ##41200
0de28     F2 14 02 FB | 	rdlong	arg02, objptr
0de2c     50 00 00 FF 
0de30     F0 E4 85 F1 | 	sub	objptr, ##41200
0de34     27 12 06 F6 | 	mov	arg01, #39
0de38     94 36 B1 FD | 	call	#_printerror
0de3c     44 01 90 FD | 	jmp	#LR__1205
0de40                 | LR__1200
0de40                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0de40     38 4E 05 F1 | 	add	fp, #56
0de44     A7 28 02 FB | 	rdlong	local02, fp
0de48     01 28 86 F1 | 	sub	local02, #1
0de4c     04 4E 85 F1 | 	sub	fp, #4
0de50     A7 28 62 FC | 	wrlong	local02, fp
0de54     34 4E 85 F1 | 	sub	fp, #52
0de58                 | LR__1201
0de58     38 4E 05 F1 | 	add	fp, #56
0de5c     A7 26 02 FB | 	rdlong	local01, fp
0de60     01 26 86 F1 | 	sub	local01, #1
0de64     04 4E 85 F1 | 	sub	fp, #4
0de68     A7 24 02 FB | 	rdlong	arg10, fp
0de6c     34 4E 85 F1 | 	sub	fp, #52
0de70     13 25 1A F2 | 	cmp	arg10, local01 wcz
0de74     54 00 90 1D |  if_a	jmp	#LR__1202
0de78     10 ED BF FD | 	call	#_pop
0de7c     A7 FA 61 FC | 	wrlong	result1, fp
0de80     04 4E 05 F1 | 	add	fp, #4
0de84     A7 FC 61 FC | 	wrlong	result2, fp
0de88     04 4E 05 F1 | 	add	fp, #4
0de8c     A7 FE 61 FC | 	wrlong	result3, fp
0de90     2C 4E 05 F1 | 	add	fp, #44
0de94     A7 28 02 FB | 	rdlong	local02, fp
0de98     02 28 66 F0 | 	shl	local02, #2
0de9c     28 4E 85 F1 | 	sub	fp, #40
0dea0     A7 28 02 F1 | 	add	local02, fp
0dea4     0C 4E 85 F1 | 	sub	fp, #12
0dea8     A7 12 02 F6 | 	mov	arg01, fp
0deac     C0 EE BF FD | 	call	#_converttoint
0deb0     14 FB 61 FC | 	wrlong	result1, local02
0deb4     34 4E 05 F1 | 	add	fp, #52
0deb8     A7 28 02 FB | 	rdlong	local02, fp
0debc     01 28 86 F1 | 	sub	local02, #1
0dec0     A7 28 62 FC | 	wrlong	local02, fp
0dec4     34 4E 85 F1 | 	sub	fp, #52
0dec8     8C FF 9F FD | 	jmp	#LR__1201
0decc                 | LR__1202
0decc                 | ' if numpar=10 then 
0decc     38 4E 05 F1 | 	add	fp, #56
0ded0     A7 28 02 FB | 	rdlong	local02, fp
0ded4     38 4E 85 F1 | 	sub	fp, #56
0ded8     0A 28 0E F2 | 	cmp	local02, #10 wz
0dedc     5C 00 90 5D |  if_ne	jmp	#LR__1203
0dee0     0C 4E 05 F1 | 	add	fp, #12
0dee4     A7 12 02 FB | 	rdlong	arg01, fp
0dee8     04 4E 05 F1 | 	add	fp, #4
0deec     A7 14 02 FB | 	rdlong	arg02, fp
0def0     04 4E 05 F1 | 	add	fp, #4
0def4     A7 16 02 FB | 	rdlong	arg03, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 18 02 FB | 	rdlong	arg04, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 1A 02 FB | 	rdlong	arg05, fp
0df08     04 4E 05 F1 | 	add	fp, #4
0df0c     A7 1C 02 FB | 	rdlong	arg06, fp
0df10     04 4E 05 F1 | 	add	fp, #4
0df14     A7 1E 02 FB | 	rdlong	arg07, fp
0df18     04 4E 05 F1 | 	add	fp, #4
0df1c     A7 20 02 FB | 	rdlong	arg08, fp
0df20     04 4E 05 F1 | 	add	fp, #4
0df24     A7 22 02 FB | 	rdlong	arg09, fp
0df28     04 4E 05 F1 | 	add	fp, #4
0df2c     A7 24 02 FB | 	rdlong	arg10, fp
0df30     30 4E 85 F1 | 	sub	fp, #48
0df34     70 5D B1 FD | 	call	#_hg010b_spin2_blit
0df38     48 00 90 FD | 	jmp	#LR__1204
0df3c                 | LR__1203
0df3c     F2 1E 02 FB | 	rdlong	arg07, objptr
0df40     0C 4E 05 F1 | 	add	fp, #12
0df44     A7 14 02 FB | 	rdlong	arg02, fp
0df48     04 4E 05 F1 | 	add	fp, #4
0df4c     A7 16 02 FB | 	rdlong	arg03, fp
0df50     04 4E 05 F1 | 	add	fp, #4
0df54     A7 18 02 FB | 	rdlong	arg04, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 1A 02 FB | 	rdlong	arg05, fp
0df60     04 4E 05 F1 | 	add	fp, #4
0df64     A7 20 02 FB | 	rdlong	arg08, fp
0df68     04 4E 05 F1 | 	add	fp, #4
0df6c     A7 22 02 FB | 	rdlong	arg09, fp
0df70     20 4E 85 F1 | 	sub	fp, #32
0df74     0F 13 02 F6 | 	mov	arg01, arg07
0df78     0A 1C C6 F9 | 	decod	arg06, #10
0df7c     0A 24 C6 F9 | 	decod	arg10, #10
0df80     24 5D B1 FD | 	call	#_hg010b_spin2_blit
0df84                 | LR__1204
0df84                 | LR__1205
0df84     A7 F0 03 F6 | 	mov	ptra, fp
0df88     B2 00 A0 FD | 	call	#popregs_
0df8c                 | _do_blit_ret
0df8c     2D 00 64 FD | 	ret
0df90                 | 
0df90                 | ' 
0df90                 | ' 
0df90                 | ' '-------------------- bin$
0df90                 | ' 
0df90                 | ' sub do_bin
0df90                 | _do_bin
0df90     01 4A 05 F6 | 	mov	COUNT_, #1
0df94     A8 00 A0 FD | 	call	#pushregs_
0df98     18 F0 07 F1 | 	add	ptra, #24
0df9c     4A 00 00 FF 
0dfa0     80 E4 05 F1 | 	add	objptr, ##38016
0dfa4     F2 26 02 FB | 	rdlong	local01, objptr
0dfa8     13 17 02 F6 | 	mov	arg03, local01
0dfac     01 16 66 F0 | 	shl	arg03, #1
0dfb0     13 17 02 F1 | 	add	arg03, local01
0dfb4     02 16 66 F0 | 	shl	arg03, #2
0dfb8     03 00 00 FF 
0dfbc     04 E4 85 F1 | 	sub	objptr, ##1540
0dfc0     F2 16 02 F1 | 	add	arg03, objptr
0dfc4     0B 17 02 FB | 	rdlong	arg03, arg03
0dfc8     0C 4E 05 F1 | 	add	fp, #12
0dfcc     A7 16 62 FC | 	wrlong	arg03, fp
0dfd0                 | ' 
0dfd0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfd0                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0dfd0     0C 4E 85 F1 | 	sub	fp, #12
0dfd4     03 16 16 F2 | 	cmp	arg03, #3 wc
0dfd8     47 00 00 FF 
0dfdc     7C E4 85 F1 | 	sub	objptr, ##36476
0dfe0     0C 4E 05 C1 |  if_b	add	fp, #12
0dfe4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dfe8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dfec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0dff0     00 12 06 F6 | 	mov	arg01, #0
0dff4     A4 CB B1 FD | 	call	#__system___getiolock_0595
0dff8     FD 12 02 F6 | 	mov	arg01, result1
0dffc     74 6E B1 FD | 	call	#__system___lockmem
0e000     A8 01 00 FF 
0e004     D6 14 06 F6 | 	mov	arg02, ##@LR__5754
0e008     00 12 06 F6 | 	mov	arg01, #0
0e00c     00 16 06 F6 | 	mov	arg03, #0
0e010     54 7B B1 FD | 	call	#__system___basic_print_string
0e014     00 12 06 F6 | 	mov	arg01, #0
0e018     80 CB B1 FD | 	call	#__system___getiolock_0595
0e01c     FD 00 68 FC | 	wrlong	#0, result1
0e020     27 12 06 F6 | 	mov	arg01, #39
0e024     00 14 06 F6 | 	mov	arg02, #0
0e028     A4 34 B1 FD | 	call	#_printerror
0e02c     B8 00 90 FD | 	jmp	#LR__1213
0e030                 | LR__1210
0e030                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e030     0C 4E 05 F1 | 	add	fp, #12
0e034     A7 26 02 FB | 	rdlong	local01, fp
0e038     0C 4E 85 F1 | 	sub	fp, #12
0e03c     02 26 0E F2 | 	cmp	local01, #2 wz
0e040     38 00 90 5D |  if_ne	jmp	#LR__1211
0e044     44 EB BF FD | 	call	#_pop
0e048     FF 26 02 F6 | 	mov	local01, result3
0e04c     A7 FA 61 FC | 	wrlong	result1, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 FC 61 FC | 	wrlong	result2, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 26 62 FC | 	wrlong	local01, fp
0e060     08 4E 85 F1 | 	sub	fp, #8
0e064     A7 12 02 F6 | 	mov	arg01, fp
0e068     04 ED BF FD | 	call	#_converttoint
0e06c     14 4E 05 F1 | 	add	fp, #20
0e070     A7 FA 61 FC | 	wrlong	result1, fp
0e074     14 4E 85 F1 | 	sub	fp, #20
0e078     0C 00 90 FD | 	jmp	#LR__1212
0e07c                 | LR__1211
0e07c     14 4E 05 F1 | 	add	fp, #20
0e080     A7 00 68 FC | 	wrlong	#0, fp
0e084     14 4E 85 F1 | 	sub	fp, #20
0e088                 | LR__1212
0e088     00 EB BF FD | 	call	#_pop
0e08c     FF 26 02 F6 | 	mov	local01, result3
0e090     A7 FA 61 FC | 	wrlong	result1, fp
0e094     04 4E 05 F1 | 	add	fp, #4
0e098     A7 FC 61 FC | 	wrlong	result2, fp
0e09c     04 4E 05 F1 | 	add	fp, #4
0e0a0     A7 26 62 FC | 	wrlong	local01, fp
0e0a4     08 4E 85 F1 | 	sub	fp, #8
0e0a8     A7 12 02 F6 | 	mov	arg01, fp
0e0ac     C0 EC BF FD | 	call	#_converttoint
0e0b0     10 4E 05 F1 | 	add	fp, #16
0e0b4     A7 FA 61 FC | 	wrlong	result1, fp
0e0b8     FD 12 02 F6 | 	mov	arg01, result1
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 14 02 FB | 	rdlong	arg02, fp
0e0c4     14 4E 85 F1 | 	sub	fp, #20
0e0c8     02 16 06 F6 | 	mov	arg03, #2
0e0cc     74 90 B1 FD | 	call	#__system__Number_S
0e0d0     A7 FA 61 FC | 	wrlong	result1, fp
0e0d4     08 4E 05 F1 | 	add	fp, #8
0e0d8     A7 3E 68 FC | 	wrlong	#31, fp
0e0dc     08 4E 85 F1 | 	sub	fp, #8
0e0e0     A7 12 02 F6 | 	mov	arg01, fp
0e0e4     3C EB BF FD | 	call	#_push
0e0e8                 | LR__1213
0e0e8     A7 F0 03 F6 | 	mov	ptra, fp
0e0ec     B2 00 A0 FD | 	call	#popregs_
0e0f0                 | _do_bin_ret
0e0f0     2D 00 64 FD | 	ret
0e0f4                 | 
0e0f4                 | ' 
0e0f4                 | ' '-------------------- box
0e0f4                 | ' 
0e0f4                 | ' sub do_box
0e0f4                 | _do_box
0e0f4     03 4A 05 F6 | 	mov	COUNT_, #3
0e0f8     A8 00 A0 FD | 	call	#pushregs_
0e0fc     30 F0 07 F1 | 	add	ptra, #48
0e100     88 EA BF FD | 	call	#_pop
0e104     FD 1A 02 F6 | 	mov	arg05, result1
0e108     FE 18 02 F6 | 	mov	arg04, result2
0e10c     FF 16 02 F6 | 	mov	arg03, result3
0e110     24 4E 05 F1 | 	add	fp, #36
0e114     A7 1A 62 FC | 	wrlong	arg05, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 18 62 FC | 	wrlong	arg04, fp
0e120     04 4E 05 F1 | 	add	fp, #4
0e124     A7 16 62 FC | 	wrlong	arg03, fp
0e128     2C 4E 85 F1 | 	sub	fp, #44
0e12c     5C EA BF FD | 	call	#_pop
0e130     FD 1A 02 F6 | 	mov	arg05, result1
0e134     FE 18 02 F6 | 	mov	arg04, result2
0e138     FF 16 02 F6 | 	mov	arg03, result3
0e13c     18 4E 05 F1 | 	add	fp, #24
0e140     A7 1A 62 FC | 	wrlong	arg05, fp
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 18 62 FC | 	wrlong	arg04, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 16 62 FC | 	wrlong	arg03, fp
0e154     20 4E 85 F1 | 	sub	fp, #32
0e158     30 EA BF FD | 	call	#_pop
0e15c     FD 1A 02 F6 | 	mov	arg05, result1
0e160     FE 18 02 F6 | 	mov	arg04, result2
0e164     FF 26 02 F6 | 	mov	local01, result3
0e168     0C 4E 05 F1 | 	add	fp, #12
0e16c     A7 1A 62 FC | 	wrlong	arg05, fp
0e170     04 4E 05 F1 | 	add	fp, #4
0e174     A7 18 62 FC | 	wrlong	arg04, fp
0e178     04 4E 05 F1 | 	add	fp, #4
0e17c     A7 26 62 FC | 	wrlong	local01, fp
0e180     14 4E 85 F1 | 	sub	fp, #20
0e184     04 EA BF FD | 	call	#_pop
0e188     A7 FA 61 FC | 	wrlong	result1, fp
0e18c     04 4E 05 F1 | 	add	fp, #4
0e190     A7 FC 61 FC | 	wrlong	result2, fp
0e194     04 4E 05 F1 | 	add	fp, #4
0e198     A7 FE 61 FC | 	wrlong	result3, fp
0e19c                 | ' 
0e19c                 | ' t4=pop()
0e19c                 | ' t3=pop()
0e19c                 | ' t2=pop()
0e19c                 | ' t1=pop()
0e19c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e19c     FF 1A 02 F6 | 	mov	arg05, result3
0e1a0     08 4E 85 F1 | 	sub	fp, #8
0e1a4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e1a8     08 4E 05 51 |  if_ne	add	fp, #8
0e1ac     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e1b0     08 4E 85 51 |  if_ne	sub	fp, #8
0e1b4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e1b8     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e1bc     14 4E 05 F1 | 	add	fp, #20
0e1c0     A7 26 02 FB | 	rdlong	local01, fp
0e1c4     14 4E 85 F1 | 	sub	fp, #20
0e1c8     1C 26 0E F2 | 	cmp	local01, #28 wz
0e1cc     14 4E 05 51 |  if_ne	add	fp, #20
0e1d0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1d4     14 4E 85 51 |  if_ne	sub	fp, #20
0e1d8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e1dc     84 00 90 5D |  if_ne	jmp	#LR__1220
0e1e0     20 4E 05 F1 | 	add	fp, #32
0e1e4     A7 26 02 FB | 	rdlong	local01, fp
0e1e8     20 4E 85 F1 | 	sub	fp, #32
0e1ec     1C 26 0E F2 | 	cmp	local01, #28 wz
0e1f0     20 4E 05 51 |  if_ne	add	fp, #32
0e1f4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1f8     20 4E 85 51 |  if_ne	sub	fp, #32
0e1fc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e200     60 00 90 5D |  if_ne	jmp	#LR__1220
0e204     2C 4E 05 F1 | 	add	fp, #44
0e208     A7 26 02 FB | 	rdlong	local01, fp
0e20c     2C 4E 85 F1 | 	sub	fp, #44
0e210     1C 26 0E F2 | 	cmp	local01, #28 wz
0e214     2C 4E 05 51 |  if_ne	add	fp, #44
0e218     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e21c     2C 4E 85 51 |  if_ne	sub	fp, #44
0e220     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e224     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e228     A7 12 02 FB | 	rdlong	arg01, fp
0e22c     0C 4E 05 F1 | 	add	fp, #12
0e230     A7 14 02 FB | 	rdlong	arg02, fp
0e234     0C 4E 05 F1 | 	add	fp, #12
0e238     A7 16 02 FB | 	rdlong	arg03, fp
0e23c     0C 4E 05 F1 | 	add	fp, #12
0e240     A7 18 02 FB | 	rdlong	arg04, fp
0e244     24 4E 85 F1 | 	sub	fp, #36
0e248     37 00 00 FF 
0e24c     28 E4 05 F1 | 	add	objptr, ##28200
0e250     F2 1A 02 FB | 	rdlong	arg05, objptr
0e254     37 00 00 FF 
0e258     28 E4 85 F1 | 	sub	objptr, ##28200
0e25c     10 4D B1 FD | 	call	#_hg010b_spin2_box
0e260                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e260     6C 00 90 FD | 	jmp	#LR__1221
0e264                 | LR__1220
0e264     A7 12 02 F6 | 	mov	arg01, fp
0e268     04 EB BF FD | 	call	#_converttoint
0e26c     FD 28 02 F6 | 	mov	local02, result1
0e270     0C 4E 05 F1 | 	add	fp, #12
0e274     A7 12 02 F6 | 	mov	arg01, fp
0e278     0C 4E 85 F1 | 	sub	fp, #12
0e27c     F0 EA BF FD | 	call	#_converttoint
0e280     FD 2A 02 F6 | 	mov	local03, result1
0e284     18 4E 05 F1 | 	add	fp, #24
0e288     A7 12 02 F6 | 	mov	arg01, fp
0e28c     18 4E 85 F1 | 	sub	fp, #24
0e290     DC EA BF FD | 	call	#_converttoint
0e294     FD 26 02 F6 | 	mov	local01, result1
0e298     24 4E 05 F1 | 	add	fp, #36
0e29c     A7 12 02 F6 | 	mov	arg01, fp
0e2a0     24 4E 85 F1 | 	sub	fp, #36
0e2a4     C8 EA BF FD | 	call	#_converttoint
0e2a8     FD 18 02 F6 | 	mov	arg04, result1
0e2ac     37 00 00 FF 
0e2b0     28 E4 05 F1 | 	add	objptr, ##28200
0e2b4     F2 1A 02 FB | 	rdlong	arg05, objptr
0e2b8     37 00 00 FF 
0e2bc     28 E4 85 F1 | 	sub	objptr, ##28200
0e2c0     14 13 02 F6 | 	mov	arg01, local02
0e2c4     15 15 02 F6 | 	mov	arg02, local03
0e2c8     13 17 02 F6 | 	mov	arg03, local01
0e2cc     A0 4C B1 FD | 	call	#_hg010b_spin2_box
0e2d0                 | LR__1221
0e2d0     A7 F0 03 F6 | 	mov	ptra, fp
0e2d4     B2 00 A0 FD | 	call	#popregs_
0e2d8                 | _do_box_ret
0e2d8     2D 00 64 FD | 	ret
0e2dc                 | 
0e2dc                 | ' 
0e2dc                 | ' '-------------------- brun
0e2dc                 | ' 
0e2dc                 | ' sub do_brun
0e2dc                 | _do_brun
0e2dc     08 4A 05 F6 | 	mov	COUNT_, #8
0e2e0     A8 00 A0 FD | 	call	#pushregs_
0e2e4     A4 E8 BF FD | 	call	#_pop
0e2e8     FE 1A 02 F6 | 	mov	arg05, result2
0e2ec     FF 18 02 F6 | 	mov	arg04, result3
0e2f0     FD 26 02 F6 | 	mov	local01, result1
0e2f4     0D 29 02 F6 | 	mov	local02, arg05
0e2f8     0C 2B 02 F6 | 	mov	local03, arg04
0e2fc                 | ' 
0e2fc                 | ' t1=pop() 
0e2fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e2fc     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e300     10 00 90 5D |  if_ne	jmp	#LR__1230
0e304     13 13 02 F6 | 	mov	arg01, local01
0e308     F8 E9 BF FD | 	call	#_convertstring
0e30c     FD 26 02 F6 | 	mov	local01, result1
0e310     1F 2A 06 F6 | 	mov	local03, #31
0e314                 | LR__1230
0e314                 | ' if t1.result_type=result_string then
0e314     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e318     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e31c     13 2D 02 F6 | 	mov	local04, local01
0e320                 | '   filename=t1.result.sresult
0e320                 | '   if left$(filename,1)="/" then 
0e320     16 13 02 F6 | 	mov	arg01, local04
0e324     01 14 06 F6 | 	mov	arg02, #1
0e328     C4 8B B1 FD | 	call	#__system__Left_S
0e32c     FD 12 02 F6 | 	mov	arg01, result1
0e330     A8 01 00 FF 
0e334     DD 14 06 F6 | 	mov	arg02, ##@LR__5755
0e338     60 6B B1 FD | 	call	#__system___string_cmp
0e33c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e340     16 2F 02 A6 |  if_e	mov	local05, local04
0e344     14 00 90 AD |  if_e	jmp	#LR__1231
0e348     A8 01 00 FF 
0e34c     DF 12 06 F6 | 	mov	arg01, ##@LR__5756
0e350     16 15 02 F6 | 	mov	arg02, local04
0e354     78 6B B1 FD | 	call	#__system___string_concat
0e358     FD 2E 02 F6 | 	mov	local05, result1
0e35c                 | LR__1231
0e35c                 | '   open fullfilename for input as #9
0e35c     09 12 06 F6 | 	mov	arg01, #9
0e360     17 15 02 F6 | 	mov	arg02, local05
0e364     00 16 06 F6 | 	mov	arg03, #0
0e368     0C 77 B1 FD | 	call	#__system___basic_open_string
0e36c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e370     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e374     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e378     FD 30 0A F6 | 	mov	local06, result1 wz
0e37c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e37c     8C 00 90 AD |  if_e	jmp	#LR__1232
0e380     00 12 06 F6 | 	mov	arg01, #0
0e384     14 C8 B1 FD | 	call	#__system___getiolock_0595
0e388     FD 12 02 F6 | 	mov	arg01, result1
0e38c     E4 6A B1 FD | 	call	#__system___lockmem
0e390     A8 01 00 FF 
0e394     E8 14 06 F6 | 	mov	arg02, ##@LR__5757
0e398     00 12 06 F6 | 	mov	arg01, #0
0e39c     00 16 06 F6 | 	mov	arg03, #0
0e3a0     C4 77 B1 FD | 	call	#__system___basic_print_string
0e3a4     00 12 06 F6 | 	mov	arg01, #0
0e3a8     18 15 02 F6 | 	mov	arg02, local06
0e3ac     00 16 06 F6 | 	mov	arg03, #0
0e3b0     0A 18 06 F6 | 	mov	arg04, #10
0e3b4     F4 77 B1 FD | 	call	#__system___basic_print_integer
0e3b8     A8 01 00 FF 
0e3bc     F6 14 06 F6 | 	mov	arg02, ##@LR__5758
0e3c0     00 12 06 F6 | 	mov	arg01, #0
0e3c4     00 16 06 F6 | 	mov	arg03, #0
0e3c8     9C 77 B1 FD | 	call	#__system___basic_print_string
0e3cc     18 13 02 F6 | 	mov	arg01, local06
0e3d0     2C 94 B1 FD | 	call	#__system___strerror
0e3d4     FD 14 02 F6 | 	mov	arg02, result1
0e3d8     00 12 06 F6 | 	mov	arg01, #0
0e3dc     00 16 06 F6 | 	mov	arg03, #0
0e3e0     84 77 B1 FD | 	call	#__system___basic_print_string
0e3e4     00 12 06 F6 | 	mov	arg01, #0
0e3e8     0A 14 06 F6 | 	mov	arg02, #10
0e3ec     00 16 06 F6 | 	mov	arg03, #0
0e3f0     1C 77 B1 FD | 	call	#__system___basic_print_char
0e3f4     00 12 06 F6 | 	mov	arg01, #0
0e3f8     A0 C7 B1 FD | 	call	#__system___getiolock_0595
0e3fc     FD 00 68 FC | 	wrlong	#0, result1
0e400     09 12 06 F6 | 	mov	arg01, #9
0e404     C4 BD B1 FD | 	call	#__system__close
0e408     FC 00 90 FD | 	jmp	#LR__1235
0e40c                 | LR__1232
0e40c     01 32 06 F6 | 	mov	local07, #1
0e410     00 34 06 F6 | 	mov	local08, #0
0e414                 | '   do
0e414                 | LR__1233
0e414                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e414     4E 00 00 FF 
0e418     B4 E4 05 F1 | 	add	objptr, ##40116
0e41c     F2 16 02 F6 | 	mov	arg03, objptr
0e420     4E 00 00 FF 
0e424     B4 E4 85 F1 | 	sub	objptr, ##40116
0e428     09 12 06 F6 | 	mov	arg01, #9
0e42c     19 15 02 F6 | 	mov	arg02, local07
0e430     0A 18 C6 F9 | 	decod	arg04, #10
0e434     01 1A 06 F6 | 	mov	arg05, #1
0e438     A8 78 B1 FD | 	call	#__system___basic_get
0e43c     FD 30 02 F6 | 	mov	local06, result1
0e440     FD 32 02 F1 | 	add	local07, result1
0e444     4E 00 00 FF 
0e448     B4 E4 05 F1 | 	add	objptr, ##40116
0e44c     F2 12 02 F6 | 	mov	arg01, objptr
0e450     1A 15 02 F6 | 	mov	arg02, local08
0e454     0A 16 C6 F9 | 	decod	arg03, #10
0e458     42 00 00 FF 
0e45c     E8 E5 85 F1 | 	sub	objptr, ##34280
0e460     6C 5E B1 FD | 	call	#_psram_spin2_write
0e464     0B 00 00 FF 
0e468     CC E4 85 F1 | 	sub	objptr, ##5836
0e46c     18 35 02 F1 | 	add	local08, local06
0e470     02 00 00 FF 
0e474     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e478     E0 03 00 AF 
0e47c     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e480     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e484     36 00 00 FF 
0e488     FC E5 05 F1 | 	add	objptr, ##28156
0e48c     F2 12 02 FB | 	rdlong	arg01, objptr
0e490     03 12 62 FD | 	cogstop	arg01
0e494     04 E4 05 F1 | 	add	objptr, #4
0e498     F2 12 02 FB | 	rdlong	arg01, objptr
0e49c     03 12 62 FD | 	cogstop	arg01
0e4a0     04 E4 05 F1 | 	add	objptr, #4
0e4a4     F2 12 02 FB | 	rdlong	arg01, objptr
0e4a8     03 12 62 FD | 	cogstop	arg01
0e4ac     19 00 00 FF 
0e4b0     3C E5 05 F1 | 	add	objptr, ##13116
0e4b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e4b8     03 12 62 FD | 	cogstop	arg01
0e4bc     18 00 00 FF 
0e4c0     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e4c4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e4c8     18 00 00 FF 
0e4cc     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e4d0     19 00 00 FF 
0e4d4     34 E5 85 F1 | 	sub	objptr, ##13108
0e4d8     1E 34 06 F6 | 	mov	local08, #30
0e4dc     28 E4 61 FD | 	setq	objptr
0e4e0     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e4e4     01 34 66 C6 |  if_b	neg	local08, #1
0e4e8     1B 00 00 FF 
0e4ec     48 E4 05 F1 | 	add	objptr, ##13896
0e4f0     F2 34 62 FC | 	wrlong	local08, objptr
0e4f4     52 00 00 FF 
0e4f8     54 E4 85 F1 | 	sub	objptr, ##42068
0e4fc     00 12 06 F6 | 	mov	arg01, #0
0e500     01 12 62 FD | 	cogid	arg01
0e504     03 12 62 FD | 	cogstop	arg01
0e508                 | LR__1234
0e508                 | LR__1235
0e508     A7 F0 03 F6 | 	mov	ptra, fp
0e50c     B2 00 A0 FD | 	call	#popregs_
0e510                 | _do_brun_ret
0e510     2D 00 64 FD | 	ret
0e514                 | 
0e514                 | ' 
0e514                 | ' '-------------------- cd
0e514                 | ' 
0e514                 | ' sub do_cd
0e514                 | _do_cd
0e514     06 4A 05 F6 | 	mov	COUNT_, #6
0e518     A8 00 A0 FD | 	call	#pushregs_
0e51c     A8 01 00 FF 
0e520     F9 12 06 F6 | 	mov	arg01, ##@LR__5759
0e524     31 14 06 F6 | 	mov	arg02, #49
0e528     A8 C7 B1 FD | 	call	#__system___basic_dir
0e52c     5C E6 BF FD | 	call	#_pop
0e530     FE 18 02 F6 | 	mov	arg04, result2
0e534     FF 16 02 F6 | 	mov	arg03, result3
0e538     FD 26 02 F6 | 	mov	local01, result1
0e53c     0C 29 02 F6 | 	mov	local02, arg04
0e540     0B 2B 02 F6 | 	mov	local03, arg03
0e544                 | ' t1=pop()
0e544                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e544     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e548     10 00 90 5D |  if_ne	jmp	#LR__1240
0e54c     13 13 02 F6 | 	mov	arg01, local01
0e550     B0 E7 BF FD | 	call	#_convertstring
0e554     FD 26 02 F6 | 	mov	local01, result1
0e558     1F 2A 06 F6 | 	mov	local03, #31
0e55c                 | LR__1240
0e55c                 | ' if t1.result_type<>result_string then printerror(15): return
0e55c     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e560     10 00 90 AD |  if_e	jmp	#LR__1241
0e564     0F 12 06 F6 | 	mov	arg01, #15
0e568     00 14 06 F6 | 	mov	arg02, #0
0e56c     60 2F B1 FD | 	call	#_printerror
0e570     48 05 90 FD | 	jmp	#LR__1259
0e574                 | LR__1241
0e574     13 2D 02 F6 | 	mov	local04, local01
0e578                 | ' newdir$=t1.result.sresult
0e578                 | ' if newdir$=".." then 
0e578     A8 01 00 FF 
0e57c     FB 14 06 F6 | 	mov	arg02, ##@LR__5760
0e580     16 13 02 F6 | 	mov	arg01, local04
0e584     14 69 B1 FD | 	call	#__system___string_cmp
0e588     00 FA 0D F2 | 	cmp	result1, #0 wz
0e58c     C4 01 90 5D |  if_ne	jmp	#LR__1248
0e590     4A 00 00 FF 
0e594     94 E4 05 F1 | 	add	objptr, ##38036
0e598     F2 12 02 FB | 	rdlong	arg01, objptr
0e59c     4A 00 00 FF 
0e5a0     94 E4 85 F1 | 	sub	objptr, ##38036
0e5a4     09 2F 02 F6 | 	mov	local05, arg01
0e5a8     97 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e5ac                 | LR__1242
0e5ac     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e5b0     01 2E 06 51 |  if_ne	add	local05, #1
0e5b4     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e5b8                 | LR__1243
0e5b8     17 13 C2 F2 | 	subr	arg01, local05
0e5bc     4A 00 00 FF 
0e5c0     94 E4 05 F1 | 	add	objptr, ##38036
0e5c4     F2 14 02 FB | 	rdlong	arg02, objptr
0e5c8     4A 00 00 FF 
0e5cc     94 E4 85 F1 | 	sub	objptr, ##38036
0e5d0     A8 01 00 FF 
0e5d4     FE 16 06 F6 | 	mov	arg03, ##@LR__5761
0e5d8     60 8F B1 FD | 	call	#__system__InstrRev
0e5dc     FD 2C 02 F6 | 	mov	local04, result1
0e5e0                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e5e0     02 2C 56 F2 | 	cmps	local04, #2 wc
0e5e4     28 00 90 CD |  if_b	jmp	#LR__1244
0e5e8     4A 00 00 FF 
0e5ec     94 E4 05 F1 | 	add	objptr, ##38036
0e5f0     F2 12 02 FB | 	rdlong	arg01, objptr
0e5f4     4A 00 00 FF 
0e5f8     94 E4 85 F1 | 	sub	objptr, ##38036
0e5fc     01 2C 86 F1 | 	sub	local04, #1
0e600     16 15 02 F6 | 	mov	arg02, local04
0e604     E8 88 B1 FD | 	call	#__system__Left_S
0e608     FD 2C 02 F6 | 	mov	local04, result1
0e60c     08 00 90 FD | 	jmp	#LR__1245
0e610                 | LR__1244
0e610     A8 01 00 FF 
0e614     00 2D 06 F6 | 	mov	local04, ##@LR__5762
0e618                 | LR__1245
0e618     16 13 02 F6 | 	mov	arg01, local04
0e61c     E0 6E B1 FD | 	call	#__system___chdir
0e620     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e624     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e628     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e62c     FD 30 0A F6 | 	mov	local06, result1 wz
0e630                 | '   chdir newdir$
0e630                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e630     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e634     A4 00 90 AD |  if_e	jmp	#LR__1246
0e638     00 12 06 F6 | 	mov	arg01, #0
0e63c     5C C5 B1 FD | 	call	#__system___getiolock_0595
0e640     FD 12 02 F6 | 	mov	arg01, result1
0e644     2C 68 B1 FD | 	call	#__system___lockmem
0e648     A8 01 00 FF 
0e64c     02 15 06 F6 | 	mov	arg02, ##@LR__5763
0e650     00 12 06 F6 | 	mov	arg01, #0
0e654     00 16 06 F6 | 	mov	arg03, #0
0e658     0C 75 B1 FD | 	call	#__system___basic_print_string
0e65c     00 12 06 F6 | 	mov	arg01, #0
0e660     18 15 02 F6 | 	mov	arg02, local06
0e664     00 16 06 F6 | 	mov	arg03, #0
0e668     0A 18 06 F6 | 	mov	arg04, #10
0e66c     3C 75 B1 FD | 	call	#__system___basic_print_integer
0e670     A8 01 00 FF 
0e674     10 15 06 F6 | 	mov	arg02, ##@LR__5764
0e678     00 12 06 F6 | 	mov	arg01, #0
0e67c     00 16 06 F6 | 	mov	arg03, #0
0e680     E4 74 B1 FD | 	call	#__system___basic_print_string
0e684     45 00 00 FF 
0e688     50 E5 05 F1 | 	add	objptr, ##35664
0e68c     F2 14 02 FB | 	rdlong	arg02, objptr
0e690     45 00 00 FF 
0e694     50 E5 85 F1 | 	sub	objptr, ##35664
0e698     00 12 06 F6 | 	mov	arg01, #0
0e69c     00 16 06 F6 | 	mov	arg03, #0
0e6a0     C4 74 B1 FD | 	call	#__system___basic_print_string
0e6a4     00 12 06 F6 | 	mov	arg01, #0
0e6a8     0A 14 06 F6 | 	mov	arg02, #10
0e6ac     00 16 06 F6 | 	mov	arg03, #0
0e6b0     5C 74 B1 FD | 	call	#__system___basic_print_char
0e6b4     00 12 06 F6 | 	mov	arg01, #0
0e6b8     E0 C4 B1 FD | 	call	#__system___getiolock_0595
0e6bc     FD 00 68 FC | 	wrlong	#0, result1
0e6c0     4A 00 00 FF 
0e6c4     94 E4 05 F1 | 	add	objptr, ##38036
0e6c8     F2 12 02 FB | 	rdlong	arg01, objptr
0e6cc     4A 00 00 FF 
0e6d0     94 E4 85 F1 | 	sub	objptr, ##38036
0e6d4     28 6E B1 FD | 	call	#__system___chdir
0e6d8     14 00 90 FD | 	jmp	#LR__1247
0e6dc                 | LR__1246
0e6dc     4A 00 00 FF 
0e6e0     94 E4 05 F1 | 	add	objptr, ##38036
0e6e4     F2 2C 62 FC | 	wrlong	local04, objptr
0e6e8     4A 00 00 FF 
0e6ec     94 E4 85 F1 | 	sub	objptr, ##38036
0e6f0                 | LR__1247
0e6f0                 | '   print "Current directory: ";currentdir$
0e6f0     00 12 06 F6 | 	mov	arg01, #0
0e6f4     A4 C4 B1 FD | 	call	#__system___getiolock_0595
0e6f8     FD 12 02 F6 | 	mov	arg01, result1
0e6fc     74 67 B1 FD | 	call	#__system___lockmem
0e700     A8 01 00 FF 
0e704     13 15 06 F6 | 	mov	arg02, ##@LR__5765
0e708     00 12 06 F6 | 	mov	arg01, #0
0e70c     00 16 06 F6 | 	mov	arg03, #0
0e710     54 74 B1 FD | 	call	#__system___basic_print_string
0e714     4A 00 00 FF 
0e718     94 E4 05 F1 | 	add	objptr, ##38036
0e71c     F2 14 02 FB | 	rdlong	arg02, objptr
0e720     4A 00 00 FF 
0e724     94 E4 85 F1 | 	sub	objptr, ##38036
0e728     00 12 06 F6 | 	mov	arg01, #0
0e72c     00 16 06 F6 | 	mov	arg03, #0
0e730     34 74 B1 FD | 	call	#__system___basic_print_string
0e734     00 12 06 F6 | 	mov	arg01, #0
0e738     0A 14 06 F6 | 	mov	arg02, #10
0e73c     00 16 06 F6 | 	mov	arg03, #0
0e740     CC 73 B1 FD | 	call	#__system___basic_print_char
0e744     00 12 06 F6 | 	mov	arg01, #0
0e748     50 C4 B1 FD | 	call	#__system___getiolock_0595
0e74c     FD 00 68 FC | 	wrlong	#0, result1
0e750                 | '   return
0e750     68 03 90 FD | 	jmp	#LR__1259
0e754                 | LR__1248
0e754                 | ' if left$(newdir$,1)="/" then 
0e754     16 13 02 F6 | 	mov	arg01, local04
0e758     01 14 06 F6 | 	mov	arg02, #1
0e75c     90 87 B1 FD | 	call	#__system__Left_S
0e760     FD 12 02 F6 | 	mov	arg01, result1
0e764     A8 01 00 FF 
0e768     27 15 06 F6 | 	mov	arg02, ##@LR__5766
0e76c     2C 67 B1 FD | 	call	#__system___string_cmp
0e770     00 FA 0D F2 | 	cmp	result1, #0 wz
0e774     3C 01 90 5D |  if_ne	jmp	#LR__1251
0e778     16 13 02 F6 | 	mov	arg01, local04
0e77c     80 6D B1 FD | 	call	#__system___chdir
0e780     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e784     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e788     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e78c     FD 30 0A F6 | 	mov	local06, result1 wz
0e790                 | '   chdir(newdir$)
0e790                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e790     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e794     A4 00 90 AD |  if_e	jmp	#LR__1249
0e798     00 12 06 F6 | 	mov	arg01, #0
0e79c     FC C3 B1 FD | 	call	#__system___getiolock_0595
0e7a0     FD 12 02 F6 | 	mov	arg01, result1
0e7a4     CC 66 B1 FD | 	call	#__system___lockmem
0e7a8     A8 01 00 FF 
0e7ac     29 15 06 F6 | 	mov	arg02, ##@LR__5767
0e7b0     00 12 06 F6 | 	mov	arg01, #0
0e7b4     00 16 06 F6 | 	mov	arg03, #0
0e7b8     AC 73 B1 FD | 	call	#__system___basic_print_string
0e7bc     00 12 06 F6 | 	mov	arg01, #0
0e7c0     18 15 02 F6 | 	mov	arg02, local06
0e7c4     00 16 06 F6 | 	mov	arg03, #0
0e7c8     0A 18 06 F6 | 	mov	arg04, #10
0e7cc     DC 73 B1 FD | 	call	#__system___basic_print_integer
0e7d0     A8 01 00 FF 
0e7d4     37 15 06 F6 | 	mov	arg02, ##@LR__5768
0e7d8     00 12 06 F6 | 	mov	arg01, #0
0e7dc     00 16 06 F6 | 	mov	arg03, #0
0e7e0     84 73 B1 FD | 	call	#__system___basic_print_string
0e7e4     45 00 00 FF 
0e7e8     50 E5 05 F1 | 	add	objptr, ##35664
0e7ec     F2 14 02 FB | 	rdlong	arg02, objptr
0e7f0     45 00 00 FF 
0e7f4     50 E5 85 F1 | 	sub	objptr, ##35664
0e7f8     00 12 06 F6 | 	mov	arg01, #0
0e7fc     00 16 06 F6 | 	mov	arg03, #0
0e800     64 73 B1 FD | 	call	#__system___basic_print_string
0e804     00 12 06 F6 | 	mov	arg01, #0
0e808     0A 14 06 F6 | 	mov	arg02, #10
0e80c     00 16 06 F6 | 	mov	arg03, #0
0e810     FC 72 B1 FD | 	call	#__system___basic_print_char
0e814     00 12 06 F6 | 	mov	arg01, #0
0e818     80 C3 B1 FD | 	call	#__system___getiolock_0595
0e81c     FD 00 68 FC | 	wrlong	#0, result1
0e820     4A 00 00 FF 
0e824     94 E4 05 F1 | 	add	objptr, ##38036
0e828     F2 12 02 FB | 	rdlong	arg01, objptr
0e82c     4A 00 00 FF 
0e830     94 E4 85 F1 | 	sub	objptr, ##38036
0e834     C8 6C B1 FD | 	call	#__system___chdir
0e838     14 00 90 FD | 	jmp	#LR__1250
0e83c                 | LR__1249
0e83c     4A 00 00 FF 
0e840     94 E4 05 F1 | 	add	objptr, ##38036
0e844     F2 2C 62 FC | 	wrlong	local04, objptr
0e848     4A 00 00 FF 
0e84c     94 E4 85 F1 | 	sub	objptr, ##38036
0e850                 | LR__1250
0e850                 | '   print "Current directory: ";currentdir$
0e850     00 12 06 F6 | 	mov	arg01, #0
0e854     44 C3 B1 FD | 	call	#__system___getiolock_0595
0e858     FD 12 02 F6 | 	mov	arg01, result1
0e85c     14 66 B1 FD | 	call	#__system___lockmem
0e860     A8 01 00 FF 
0e864     3A 15 06 F6 | 	mov	arg02, ##@LR__5769
0e868     00 12 06 F6 | 	mov	arg01, #0
0e86c     00 16 06 F6 | 	mov	arg03, #0
0e870     F4 72 B1 FD | 	call	#__system___basic_print_string
0e874     4A 00 00 FF 
0e878     94 E4 05 F1 | 	add	objptr, ##38036
0e87c     F2 14 02 FB | 	rdlong	arg02, objptr
0e880     4A 00 00 FF 
0e884     94 E4 85 F1 | 	sub	objptr, ##38036
0e888     00 12 06 F6 | 	mov	arg01, #0
0e88c     00 16 06 F6 | 	mov	arg03, #0
0e890     D4 72 B1 FD | 	call	#__system___basic_print_string
0e894     00 12 06 F6 | 	mov	arg01, #0
0e898     0A 14 06 F6 | 	mov	arg02, #10
0e89c     00 16 06 F6 | 	mov	arg03, #0
0e8a0     6C 72 B1 FD | 	call	#__system___basic_print_char
0e8a4     00 12 06 F6 | 	mov	arg01, #0
0e8a8     F0 C2 B1 FD | 	call	#__system___getiolock_0595
0e8ac     FD 00 68 FC | 	wrlong	#0, result1
0e8b0                 | '   return
0e8b0     08 02 90 FD | 	jmp	#LR__1259
0e8b4                 | LR__1251
0e8b4                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e8b4     4A 00 00 FF 
0e8b8     94 E4 05 F1 | 	add	objptr, ##38036
0e8bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e8c0     4A 00 00 FF 
0e8c4     94 E4 85 F1 | 	sub	objptr, ##38036
0e8c8     A8 01 00 FF 
0e8cc     4E 15 06 F6 | 	mov	arg02, ##@LR__5770
0e8d0     C8 65 B1 FD | 	call	#__system___string_cmp
0e8d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8d8     34 00 90 AD |  if_e	jmp	#LR__1252
0e8dc     4A 00 00 FF 
0e8e0     94 E4 05 F1 | 	add	objptr, ##38036
0e8e4     F2 12 02 FB | 	rdlong	arg01, objptr
0e8e8     4A 00 00 FF 
0e8ec     94 E4 85 F1 | 	sub	objptr, ##38036
0e8f0     A8 01 00 FF 
0e8f4     50 15 06 F6 | 	mov	arg02, ##@LR__5771
0e8f8     D4 65 B1 FD | 	call	#__system___string_concat
0e8fc     FD 12 02 F6 | 	mov	arg01, result1
0e900     16 15 02 F6 | 	mov	arg02, local04
0e904     C8 65 B1 FD | 	call	#__system___string_concat
0e908     FD 2C 02 F6 | 	mov	local04, result1
0e90c     20 00 90 FD | 	jmp	#LR__1253
0e910                 | LR__1252
0e910     4A 00 00 FF 
0e914     94 E4 05 F1 | 	add	objptr, ##38036
0e918     F2 12 02 FB | 	rdlong	arg01, objptr
0e91c     4A 00 00 FF 
0e920     94 E4 85 F1 | 	sub	objptr, ##38036
0e924     16 15 02 F6 | 	mov	arg02, local04
0e928     A4 65 B1 FD | 	call	#__system___string_concat
0e92c     FD 2C 02 F6 | 	mov	local04, result1
0e930                 | LR__1253
0e930                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0e930     16 13 02 F6 | 	mov	arg01, local04
0e934     01 14 06 F6 | 	mov	arg02, #1
0e938     3C 86 B1 FD | 	call	#__system__Right_S
0e93c     FD 12 02 F6 | 	mov	arg01, result1
0e940     A8 01 00 FF 
0e944     52 15 06 F6 | 	mov	arg02, ##@LR__5772
0e948     50 65 B1 FD | 	call	#__system___string_cmp
0e94c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e950     30 00 90 5D |  if_ne	jmp	#LR__1256
0e954     16 13 02 F6 | 	mov	arg01, local04
0e958     09 2F 02 F6 | 	mov	local05, arg01
0e95c     97 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0e960                 | LR__1254
0e960     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e964     01 2E 06 51 |  if_ne	add	local05, #1
0e968     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0e96c                 | LR__1255
0e96c     09 2F 82 F1 | 	sub	local05, arg01
0e970     17 15 02 F6 | 	mov	arg02, local05
0e974     01 14 86 F1 | 	sub	arg02, #1
0e978     16 13 02 F6 | 	mov	arg01, local04
0e97c     70 85 B1 FD | 	call	#__system__Left_S
0e980     FD 2C 02 F6 | 	mov	local04, result1
0e984                 | LR__1256
0e984     16 13 02 F6 | 	mov	arg01, local04
0e988     74 6B B1 FD | 	call	#__system___chdir
0e98c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e990     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e994     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e998     FD 30 0A F6 | 	mov	local06, result1 wz
0e99c                 | '   chdir(newdir$)
0e99c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e99c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e9a0     A4 00 90 AD |  if_e	jmp	#LR__1257
0e9a4     00 12 06 F6 | 	mov	arg01, #0
0e9a8     F0 C1 B1 FD | 	call	#__system___getiolock_0595
0e9ac     FD 12 02 F6 | 	mov	arg01, result1
0e9b0     C0 64 B1 FD | 	call	#__system___lockmem
0e9b4     A8 01 00 FF 
0e9b8     54 15 06 F6 | 	mov	arg02, ##@LR__5773
0e9bc     00 12 06 F6 | 	mov	arg01, #0
0e9c0     00 16 06 F6 | 	mov	arg03, #0
0e9c4     A0 71 B1 FD | 	call	#__system___basic_print_string
0e9c8     00 12 06 F6 | 	mov	arg01, #0
0e9cc     18 15 02 F6 | 	mov	arg02, local06
0e9d0     00 16 06 F6 | 	mov	arg03, #0
0e9d4     0A 18 06 F6 | 	mov	arg04, #10
0e9d8     D0 71 B1 FD | 	call	#__system___basic_print_integer
0e9dc     A8 01 00 FF 
0e9e0     62 15 06 F6 | 	mov	arg02, ##@LR__5774
0e9e4     00 12 06 F6 | 	mov	arg01, #0
0e9e8     00 16 06 F6 | 	mov	arg03, #0
0e9ec     78 71 B1 FD | 	call	#__system___basic_print_string
0e9f0     45 00 00 FF 
0e9f4     50 E5 05 F1 | 	add	objptr, ##35664
0e9f8     F2 14 02 FB | 	rdlong	arg02, objptr
0e9fc     45 00 00 FF 
0ea00     50 E5 85 F1 | 	sub	objptr, ##35664
0ea04     00 12 06 F6 | 	mov	arg01, #0
0ea08     00 16 06 F6 | 	mov	arg03, #0
0ea0c     58 71 B1 FD | 	call	#__system___basic_print_string
0ea10     00 12 06 F6 | 	mov	arg01, #0
0ea14     0A 14 06 F6 | 	mov	arg02, #10
0ea18     00 16 06 F6 | 	mov	arg03, #0
0ea1c     F0 70 B1 FD | 	call	#__system___basic_print_char
0ea20     00 12 06 F6 | 	mov	arg01, #0
0ea24     74 C1 B1 FD | 	call	#__system___getiolock_0595
0ea28     FD 00 68 FC | 	wrlong	#0, result1
0ea2c     4A 00 00 FF 
0ea30     94 E4 05 F1 | 	add	objptr, ##38036
0ea34     F2 12 02 FB | 	rdlong	arg01, objptr
0ea38     4A 00 00 FF 
0ea3c     94 E4 85 F1 | 	sub	objptr, ##38036
0ea40     BC 6A B1 FD | 	call	#__system___chdir
0ea44     14 00 90 FD | 	jmp	#LR__1258
0ea48                 | LR__1257
0ea48     4A 00 00 FF 
0ea4c     94 E4 05 F1 | 	add	objptr, ##38036
0ea50     F2 2C 62 FC | 	wrlong	local04, objptr
0ea54     4A 00 00 FF 
0ea58     94 E4 85 F1 | 	sub	objptr, ##38036
0ea5c                 | LR__1258
0ea5c                 | '   print "Current directory: ";currentdir$
0ea5c     00 12 06 F6 | 	mov	arg01, #0
0ea60     38 C1 B1 FD | 	call	#__system___getiolock_0595
0ea64     FD 12 02 F6 | 	mov	arg01, result1
0ea68     08 64 B1 FD | 	call	#__system___lockmem
0ea6c     A8 01 00 FF 
0ea70     65 15 06 F6 | 	mov	arg02, ##@LR__5775
0ea74     00 12 06 F6 | 	mov	arg01, #0
0ea78     00 16 06 F6 | 	mov	arg03, #0
0ea7c     E8 70 B1 FD | 	call	#__system___basic_print_string
0ea80     4A 00 00 FF 
0ea84     94 E4 05 F1 | 	add	objptr, ##38036
0ea88     F2 14 02 FB | 	rdlong	arg02, objptr
0ea8c     4A 00 00 FF 
0ea90     94 E4 85 F1 | 	sub	objptr, ##38036
0ea94     00 12 06 F6 | 	mov	arg01, #0
0ea98     00 16 06 F6 | 	mov	arg03, #0
0ea9c     C8 70 B1 FD | 	call	#__system___basic_print_string
0eaa0     00 12 06 F6 | 	mov	arg01, #0
0eaa4     0A 14 06 F6 | 	mov	arg02, #10
0eaa8     00 16 06 F6 | 	mov	arg03, #0
0eaac     60 70 B1 FD | 	call	#__system___basic_print_char
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     E4 C0 B1 FD | 	call	#__system___getiolock_0595
0eab8     FD 00 68 FC | 	wrlong	#0, result1
0eabc                 | LR__1259
0eabc     A7 F0 03 F6 | 	mov	ptra, fp
0eac0     B2 00 A0 FD | 	call	#popregs_
0eac4                 | _do_cd_ret
0eac4     2D 00 64 FD | 	ret
0eac8                 | 
0eac8                 | ' 
0eac8                 | ' '-------------------- changefreq
0eac8                 | ' 
0eac8                 | ' sub do_changefreq
0eac8                 | _do_changefreq
0eac8     04 4A 05 F6 | 	mov	COUNT_, #4
0eacc     A8 00 A0 FD | 	call	#pushregs_
0ead0     28 F0 07 F1 | 	add	ptra, #40
0ead4     B4 E0 BF FD | 	call	#_pop
0ead8     FF 14 02 F6 | 	mov	arg02, result3
0eadc     A7 FA 61 FC | 	wrlong	result1, fp
0eae0     04 4E 05 F1 | 	add	fp, #4
0eae4     A7 FC 61 FC | 	wrlong	result2, fp
0eae8     04 4E 05 F1 | 	add	fp, #4
0eaec     A7 14 62 FC | 	wrlong	arg02, fp
0eaf0     08 4E 85 F1 | 	sub	fp, #8
0eaf4     A7 12 02 F6 | 	mov	arg01, fp
0eaf8     30 E3 BF FD | 	call	#_converttofloat
0eafc     24 4E 05 F1 | 	add	fp, #36
0eb00     A7 FA 61 FC | 	wrlong	result1, fp
0eb04     24 4E 85 F1 | 	sub	fp, #36
0eb08     FD 14 02 F6 | 	mov	arg02, result1
0eb0c     FC 16 20 FF 
0eb10     54 12 06 F6 | 	mov	arg01, ##1076754516
0eb14     A4 A1 B1 FD | 	call	#__system____builtin_logbase
0eb18     FD 26 02 F6 | 	mov	local01, result1
0eb1c     1E 14 C6 F9 | 	decod	arg02, #30
0eb20     FC 16 20 FF 
0eb24     54 12 06 F6 | 	mov	arg01, ##1076754516
0eb28     90 A1 B1 FD | 	call	#__system____builtin_logbase
0eb2c     FD 14 02 F6 | 	mov	arg02, result1
0eb30     13 13 02 F6 | 	mov	arg01, local01
0eb34     B8 93 B1 FD | 	call	#__system___float_div
0eb38     FD 12 02 F6 | 	mov	arg01, result1
0eb3c     00 14 06 F6 | 	mov	arg02, #0
0eb40     70 96 B1 FD | 	call	#__system___float_tointeger
0eb44     10 4E 05 F1 | 	add	fp, #16
0eb48     A7 FA 61 FC | 	wrlong	result1, fp
0eb4c     1E 26 C6 F9 | 	decod	local01, #30
0eb50     FD 12 02 F6 | 	mov	arg01, result1
0eb54     10 4E 85 F1 | 	sub	fp, #16
0eb58     05 12 06 F1 | 	add	arg01, #5
0eb5c     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb60     1F 28 C6 C9 |  if_b	decod	local02, #31
0eb64     00 28 06 36 |  if_ae	mov	local02, #0
0eb68     7C 8D B1 FD | 	call	#__system___float_fromuns
0eb6c     14 FB 61 F5 | 	xor	result1, local02
0eb70     FD 14 02 F6 | 	mov	arg02, result1
0eb74     13 13 02 F6 | 	mov	arg01, local01
0eb78     78 A0 B1 FD | 	call	#__system____builtin_powf
0eb7c     FD 12 02 F6 | 	mov	arg01, result1
0eb80     01 14 06 F6 | 	mov	arg02, #1
0eb84     2C 96 B1 FD | 	call	#__system___float_tointeger
0eb88     14 4E 05 F1 | 	add	fp, #20
0eb8c     A7 FA 61 FC | 	wrlong	result1, fp
0eb90                 | ' skip=round(2^(lfreq+5))
0eb90                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0eb90     14 4E 85 F1 | 	sub	fp, #20
0eb94     40 00 00 FF 
0eb98     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0eb9c     30 00 90 CD |  if_b	jmp	#LR__1260
0eba0     14 4E 05 F1 | 	add	fp, #20
0eba4     A7 26 02 FB | 	rdlong	local01, fp
0eba8     13 27 52 F6 | 	abs	local01, local01 wc
0ebac     0F 26 46 F0 | 	shr	local01, #15
0ebb0     13 27 82 F6 | 	negc	local01, local01
0ebb4     04 4E 05 F1 | 	add	fp, #4
0ebb8     A7 26 62 FC | 	wrlong	local01, fp
0ebbc     04 4E 85 F1 | 	sub	fp, #4
0ebc0     40 00 80 FF 
0ebc4     A7 00 68 FC | 	wrlong	##32768, fp
0ebc8     14 4E 85 F1 | 	sub	fp, #20
0ebcc     0C 00 90 FD | 	jmp	#LR__1261
0ebd0                 | LR__1260
0ebd0     18 4E 05 F1 | 	add	fp, #24
0ebd4     A7 02 68 FC | 	wrlong	#1, fp
0ebd8     18 4E 85 F1 | 	sub	fp, #24
0ebdc                 | LR__1261
0ebdc     24 4E 05 F1 | 	add	fp, #36
0ebe0     A7 14 02 FB | 	rdlong	arg02, fp
0ebe4     24 4E 85 F1 | 	sub	fp, #36
0ebe8     3E 2C 25 FF 
0ebec     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ebf0     FC 92 B1 FD | 	call	#__system___float_div
0ebf4     FD 26 02 F6 | 	mov	local01, result1
0ebf8     18 4E 05 F1 | 	add	fp, #24
0ebfc     A7 12 02 FB | 	rdlong	arg01, fp
0ec00     18 4E 85 F1 | 	sub	fp, #24
0ec04     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec08     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec0c     00 28 06 36 |  if_ae	mov	local02, #0
0ec10     D4 8C B1 FD | 	call	#__system___float_fromuns
0ec14     14 FB 61 F5 | 	xor	result1, local02
0ec18     FD 2A 02 F6 | 	mov	local03, result1
0ec1c     1E 2C C6 F9 | 	decod	local04, #30
0ec20     0D 12 06 F6 | 	mov	arg01, #13
0ec24     10 4E 05 F1 | 	add	fp, #16
0ec28     A7 14 02 FB | 	rdlong	arg02, fp
0ec2c     10 4E 85 F1 | 	sub	fp, #16
0ec30     0A 13 82 F1 | 	sub	arg01, arg02
0ec34     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec38     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec3c     00 28 06 36 |  if_ae	mov	local02, #0
0ec40     A4 8C B1 FD | 	call	#__system___float_fromuns
0ec44     14 FB 61 F5 | 	xor	result1, local02
0ec48     FD 14 02 F6 | 	mov	arg02, result1
0ec4c     16 13 02 F6 | 	mov	arg01, local04
0ec50     A0 9F B1 FD | 	call	#__system____builtin_powf
0ec54     FD 14 02 F6 | 	mov	arg02, result1
0ec58     15 13 02 F6 | 	mov	arg01, local03
0ec5c     8C 90 B1 FD | 	call	#__system___float_mul
0ec60     FD 14 02 F6 | 	mov	arg02, result1
0ec64     13 13 02 F6 | 	mov	arg01, local01
0ec68     84 92 B1 FD | 	call	#__system___float_div
0ec6c     FD 12 02 F6 | 	mov	arg01, result1
0ec70     01 14 06 F6 | 	mov	arg02, #1
0ec74     3C 95 B1 FD | 	call	#__system___float_tointeger
0ec78     FD 26 02 F6 | 	mov	local01, result1
0ec7c     1C 4E 05 F1 | 	add	fp, #28
0ec80     A7 26 62 FC | 	wrlong	local01, fp
0ec84     1C 4E 85 F1 | 	sub	fp, #28
0ec88     00 DF BF FD | 	call	#_pop
0ec8c     FF 2C 02 F6 | 	mov	local04, result3
0ec90     A7 FA 61 FC | 	wrlong	result1, fp
0ec94     04 4E 05 F1 | 	add	fp, #4
0ec98     A7 FC 61 FC | 	wrlong	result2, fp
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 2C 62 FC | 	wrlong	local04, fp
0eca4     08 4E 85 F1 | 	sub	fp, #8
0eca8     A7 12 02 F6 | 	mov	arg01, fp
0ecac     C0 E0 BF FD | 	call	#_converttoint
0ecb0     FD 2A 52 F6 | 	abs	local03, result1 wc
0ecb4     07 2A 06 F5 | 	and	local03, #7
0ecb8     15 2B 82 F6 | 	negc	local03, local03
0ecbc     0C 4E 05 F1 | 	add	fp, #12
0ecc0     A7 2A 62 FC | 	wrlong	local03, fp
0ecc4     08 4E 05 F1 | 	add	fp, #8
0ecc8     A7 26 02 FB | 	rdlong	local01, fp
0eccc     10 26 66 F0 | 	shl	local01, #16
0ecd0     08 4E 05 F1 | 	add	fp, #8
0ecd4     A7 2C 02 FB | 	rdlong	local04, fp
0ecd8     16 27 02 F1 | 	add	local01, local04
0ecdc     04 4E 05 F1 | 	add	fp, #4
0ece0     A7 26 62 FC | 	wrlong	local01, fp
0ece4                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ece4     37 00 00 FF 
0ece8     10 E4 05 F1 | 	add	objptr, ##28176
0ecec     F2 12 02 FB | 	rdlong	arg01, objptr
0ecf0     37 00 00 FF 
0ecf4     10 E4 85 F1 | 	sub	objptr, ##28176
0ecf8     14 4E 85 F1 | 	sub	fp, #20
0ecfc     A7 2C 02 FB | 	rdlong	local04, fp
0ed00     0C 4E 85 F1 | 	sub	fp, #12
0ed04     06 2C 66 F0 | 	shl	local04, #6
0ed08     16 13 02 F1 | 	add	arg01, local04
0ed0c     08 12 06 F1 | 	add	arg01, #8
0ed10     09 FB 01 FB | 	rdlong	result1, arg01
0ed14     1B FA 2D F4 | 	testbn	result1, #27 wz
0ed18     3C 00 90 5D |  if_ne	jmp	#LR__1262
0ed1c     37 00 00 FF 
0ed20     10 E4 05 F1 | 	add	objptr, ##28176
0ed24     F2 12 02 FB | 	rdlong	arg01, objptr
0ed28     37 00 00 FF 
0ed2c     10 E4 85 F1 | 	sub	objptr, ##28176
0ed30     0C 4E 05 F1 | 	add	fp, #12
0ed34     A7 2C 02 FB | 	rdlong	local04, fp
0ed38     06 2C 66 F0 | 	shl	local04, #6
0ed3c     16 13 02 F1 | 	add	arg01, local04
0ed40     18 12 06 F1 | 	add	arg01, #24
0ed44     14 4E 05 F1 | 	add	fp, #20
0ed48     A7 14 02 FB | 	rdlong	arg02, fp
0ed4c     20 4E 85 F1 | 	sub	fp, #32
0ed50     09 15 62 FC | 	wrlong	arg02, arg01
0ed54     80 00 90 FD | 	jmp	#LR__1263
0ed58                 | LR__1262
0ed58     37 00 00 FF 
0ed5c     10 E4 05 F1 | 	add	objptr, ##28176
0ed60     F2 26 02 FB | 	rdlong	local01, objptr
0ed64     37 00 00 FF 
0ed68     10 E4 85 F1 | 	sub	objptr, ##28176
0ed6c     0C 4E 05 F1 | 	add	fp, #12
0ed70     A7 2C 02 FB | 	rdlong	local04, fp
0ed74     06 2C 66 F0 | 	shl	local04, #6
0ed78     16 27 02 F1 | 	add	local01, local04
0ed7c     18 26 06 F1 | 	add	local01, #24
0ed80     18 4E 05 F1 | 	add	fp, #24
0ed84     A7 14 02 FB | 	rdlong	arg02, fp
0ed88     24 4E 85 F1 | 	sub	fp, #36
0ed8c     3E 2C 25 FF 
0ed90     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed94     58 91 B1 FD | 	call	#__system___float_div
0ed98     FD 12 02 F6 | 	mov	arg01, result1
0ed9c     01 14 06 F6 | 	mov	arg02, #1
0eda0     10 94 B1 FD | 	call	#__system___float_tointeger
0eda4     13 FB 51 FC | 	wrword	result1, local01
0eda8     37 00 00 FF 
0edac     10 E4 05 F1 | 	add	objptr, ##28176
0edb0     F2 12 02 FB | 	rdlong	arg01, objptr
0edb4     37 00 00 FF 
0edb8     10 E4 85 F1 | 	sub	objptr, ##28176
0edbc     0C 4E 05 F1 | 	add	fp, #12
0edc0     A7 2C 02 FB | 	rdlong	local04, fp
0edc4     0C 4E 85 F1 | 	sub	fp, #12
0edc8     06 2C 66 F0 | 	shl	local04, #6
0edcc     16 13 02 F1 | 	add	arg01, local04
0edd0     1A 12 06 F1 | 	add	arg01, #26
0edd4     09 01 5A FC | 	wrword	#256, arg01
0edd8                 | LR__1263
0edd8     A7 F0 03 F6 | 	mov	ptra, fp
0eddc     B2 00 A0 FD | 	call	#popregs_
0ede0                 | _do_changefreq_ret
0ede0     2D 00 64 FD | 	ret
0ede4                 | 
0ede4                 | ' 
0ede4                 | ' '-------------------- changepan
0ede4                 | ' 
0ede4                 | ' sub do_changepan
0ede4                 | _do_changepan
0ede4     01 4A 05 F6 | 	mov	COUNT_, #1
0ede8     A8 00 A0 FD | 	call	#pushregs_
0edec     14 F0 07 F1 | 	add	ptra, #20
0edf0     98 DD BF FD | 	call	#_pop
0edf4     A7 FA 61 FC | 	wrlong	result1, fp
0edf8     04 4E 05 F1 | 	add	fp, #4
0edfc     A7 FC 61 FC | 	wrlong	result2, fp
0ee00     04 4E 05 F1 | 	add	fp, #4
0ee04     A7 FE 61 FC | 	wrlong	result3, fp
0ee08     08 4E 85 F1 | 	sub	fp, #8
0ee0c     00 00 23 FF 
0ee10     00 26 06 F6 | 	mov	local01, ##1174405120
0ee14     A7 12 02 F6 | 	mov	arg01, fp
0ee18     10 E0 BF FD | 	call	#_converttofloat
0ee1c     FD 14 02 F6 | 	mov	arg02, result1
0ee20     13 13 02 F6 | 	mov	arg01, local01
0ee24     C4 8E B1 FD | 	call	#__system___float_mul
0ee28     FD 12 02 F6 | 	mov	arg01, result1
0ee2c     01 14 06 F6 | 	mov	arg02, #1
0ee30     80 93 B1 FD | 	call	#__system___float_tointeger
0ee34     0D 26 C6 F9 | 	decod	local01, #13
0ee38     FD 26 02 F1 | 	add	local01, result1
0ee3c     10 4E 05 F1 | 	add	fp, #16
0ee40     A7 26 62 FC | 	wrlong	local01, fp
0ee44                 | ' 
0ee44                 | ' t1=pop()
0ee44                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ee44                 | ' if pan<0 then pan=0
0ee44     10 4E 85 F1 | 	sub	fp, #16
0ee48     00 26 56 F2 | 	cmps	local01, #0 wc
0ee4c     10 4E 05 C1 |  if_b	add	fp, #16
0ee50     A7 00 68 CC |  if_b	wrlong	#0, fp
0ee54     10 4E 85 C1 |  if_b	sub	fp, #16
0ee58                 | ' if pan>16384 then pan=16384
0ee58     10 4E 05 F1 | 	add	fp, #16
0ee5c     A7 26 02 FB | 	rdlong	local01, fp
0ee60     10 4E 85 F1 | 	sub	fp, #16
0ee64     20 00 00 FF 
0ee68     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ee6c     10 4E 05 31 |  if_ae	add	fp, #16
0ee70     20 00 80 3F 
0ee74     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ee78     10 4E 85 31 |  if_ae	sub	fp, #16
0ee7c     0C DD BF FD | 	call	#_pop
0ee80     FF 26 02 F6 | 	mov	local01, result3
0ee84     A7 FA 61 FC | 	wrlong	result1, fp
0ee88     04 4E 05 F1 | 	add	fp, #4
0ee8c     A7 FC 61 FC | 	wrlong	result2, fp
0ee90     04 4E 05 F1 | 	add	fp, #4
0ee94     A7 26 62 FC | 	wrlong	local01, fp
0ee98     08 4E 85 F1 | 	sub	fp, #8
0ee9c     A7 12 02 F6 | 	mov	arg01, fp
0eea0     CC DE BF FD | 	call	#_converttoint
0eea4     FD 26 52 F6 | 	abs	local01, result1 wc
0eea8     07 26 06 F5 | 	and	local01, #7
0eeac     13 27 82 F6 | 	negc	local01, local01
0eeb0     0C 4E 05 F1 | 	add	fp, #12
0eeb4     A7 26 62 FC | 	wrlong	local01, fp
0eeb8     37 00 00 FF 
0eebc     10 E4 05 F1 | 	add	objptr, ##28176
0eec0     F2 12 02 FB | 	rdlong	arg01, objptr
0eec4     37 00 00 FF 
0eec8     10 E4 85 F1 | 	sub	objptr, ##28176
0eecc     06 26 66 F0 | 	shl	local01, #6
0eed0     13 13 02 F1 | 	add	arg01, local01
0eed4     16 12 06 F1 | 	add	arg01, #22
0eed8     04 4E 05 F1 | 	add	fp, #4
0eedc     A7 14 02 FB | 	rdlong	arg02, fp
0eee0     10 4E 85 F1 | 	sub	fp, #16
0eee4     09 15 52 FC | 	wrword	arg02, arg01
0eee8     A7 F0 03 F6 | 	mov	ptra, fp
0eeec     B2 00 A0 FD | 	call	#popregs_
0eef0                 | _do_changepan_ret
0eef0     2D 00 64 FD | 	ret
0eef4                 | 
0eef4                 | ' 
0eef4                 | ' '-------------------- changevol
0eef4                 | ' 
0eef4                 | ' sub do_changevol
0eef4                 | _do_changevol
0eef4     00 4A 05 F6 | 	mov	COUNT_, #0
0eef8     A8 00 A0 FD | 	call	#pushregs_
0eefc     14 F0 07 F1 | 	add	ptra, #20
0ef00     88 DC BF FD | 	call	#_pop
0ef04     FF 14 02 F6 | 	mov	arg02, result3
0ef08     A7 FA 61 FC | 	wrlong	result1, fp
0ef0c     04 4E 05 F1 | 	add	fp, #4
0ef10     A7 FC 61 FC | 	wrlong	result2, fp
0ef14     04 4E 05 F1 | 	add	fp, #4
0ef18     A7 14 62 FC | 	wrlong	arg02, fp
0ef1c     08 4E 85 F1 | 	sub	fp, #8
0ef20     A7 12 02 F6 | 	mov	arg01, fp
0ef24     04 DF BF FD | 	call	#_converttofloat
0ef28     FD 12 02 F6 | 	mov	arg01, result1
0ef2c     00 3D 22 FF 
0ef30     00 14 06 F6 | 	mov	arg02, ##1148846080
0ef34     B4 8D B1 FD | 	call	#__system___float_mul
0ef38     FD 12 02 F6 | 	mov	arg01, result1
0ef3c     01 14 06 F6 | 	mov	arg02, #1
0ef40     70 92 B1 FD | 	call	#__system___float_tointeger
0ef44     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef48     0D 14 46 F7 | 	zerox	arg02, #13
0ef4c     0A 15 82 F6 | 	negc	arg02, arg02
0ef50     10 4E 05 F1 | 	add	fp, #16
0ef54     A7 14 62 FC | 	wrlong	arg02, fp
0ef58     10 4E 85 F1 | 	sub	fp, #16
0ef5c     2C DC BF FD | 	call	#_pop
0ef60     FF 14 02 F6 | 	mov	arg02, result3
0ef64     A7 FA 61 FC | 	wrlong	result1, fp
0ef68     04 4E 05 F1 | 	add	fp, #4
0ef6c     A7 FC 61 FC | 	wrlong	result2, fp
0ef70     04 4E 05 F1 | 	add	fp, #4
0ef74     A7 14 62 FC | 	wrlong	arg02, fp
0ef78     08 4E 85 F1 | 	sub	fp, #8
0ef7c     A7 12 02 F6 | 	mov	arg01, fp
0ef80     EC DD BF FD | 	call	#_converttoint
0ef84     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef88     07 14 06 F5 | 	and	arg02, #7
0ef8c     0A 15 82 F6 | 	negc	arg02, arg02
0ef90     0C 4E 05 F1 | 	add	fp, #12
0ef94     A7 14 62 FC | 	wrlong	arg02, fp
0ef98     37 00 00 FF 
0ef9c     10 E4 05 F1 | 	add	objptr, ##28176
0efa0     F2 12 02 FB | 	rdlong	arg01, objptr
0efa4     37 00 00 FF 
0efa8     10 E4 85 F1 | 	sub	objptr, ##28176
0efac     06 14 66 F0 | 	shl	arg02, #6
0efb0     0A 13 02 F1 | 	add	arg01, arg02
0efb4     14 12 06 F1 | 	add	arg01, #20
0efb8     04 4E 05 F1 | 	add	fp, #4
0efbc     A7 14 02 FB | 	rdlong	arg02, fp
0efc0     10 4E 85 F1 | 	sub	fp, #16
0efc4     09 15 52 FC | 	wrword	arg02, arg01
0efc8     A7 F0 03 F6 | 	mov	ptra, fp
0efcc     B2 00 A0 FD | 	call	#popregs_
0efd0                 | _do_changevol_ret
0efd0     2D 00 64 FD | 	ret
0efd4                 | 
0efd4                 | ' 
0efd4                 | ' '-------------------- changewav
0efd4                 | ' 
0efd4                 | ' sub do_changewav
0efd4                 | _do_changewav
0efd4     00 4A 05 F6 | 	mov	COUNT_, #0
0efd8     A8 00 A0 FD | 	call	#pushregs_
0efdc     14 F0 07 F1 | 	add	ptra, #20
0efe0     A8 DB BF FD | 	call	#_pop
0efe4     FF 14 02 F6 | 	mov	arg02, result3
0efe8     A7 FA 61 FC | 	wrlong	result1, fp
0efec     04 4E 05 F1 | 	add	fp, #4
0eff0     A7 FC 61 FC | 	wrlong	result2, fp
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 14 62 FC | 	wrlong	arg02, fp
0effc     08 4E 85 F1 | 	sub	fp, #8
0f000     A7 12 02 F6 | 	mov	arg01, fp
0f004     68 DD BF FD | 	call	#_converttoint
0f008     10 4E 05 F1 | 	add	fp, #16
0f00c     A7 FA 61 FC | 	wrlong	result1, fp
0f010                 | ' 
0f010                 | ' t1=pop()
0f010                 | ' wave=converttoint(t1)
0f010                 | ' if wave<0 then wave=0
0f010     FD 14 02 F6 | 	mov	arg02, result1
0f014     10 4E 85 F1 | 	sub	fp, #16
0f018     00 14 56 F2 | 	cmps	arg02, #0 wc
0f01c     10 4E 05 C1 |  if_b	add	fp, #16
0f020     A7 00 68 CC |  if_b	wrlong	#0, fp
0f024     10 4E 85 C1 |  if_b	sub	fp, #16
0f028     60 DB BF FD | 	call	#_pop
0f02c     FF 14 02 F6 | 	mov	arg02, result3
0f030     A7 FA 61 FC | 	wrlong	result1, fp
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 FC 61 FC | 	wrlong	result2, fp
0f03c     04 4E 05 F1 | 	add	fp, #4
0f040     A7 14 62 FC | 	wrlong	arg02, fp
0f044     08 4E 85 F1 | 	sub	fp, #8
0f048     A7 12 02 F6 | 	mov	arg01, fp
0f04c     20 DD BF FD | 	call	#_converttoint
0f050     FD 14 52 F6 | 	abs	arg02, result1 wc
0f054     07 14 06 F5 | 	and	arg02, #7
0f058     0A 15 82 F6 | 	negc	arg02, arg02
0f05c     0C 4E 05 F1 | 	add	fp, #12
0f060     A7 14 62 FC | 	wrlong	arg02, fp
0f064                 | ' if wave <32 then 
0f064     04 4E 05 F1 | 	add	fp, #4
0f068     A7 14 02 FB | 	rdlong	arg02, fp
0f06c     10 4E 85 F1 | 	sub	fp, #16
0f070     20 14 56 F2 | 	cmps	arg02, #32 wc
0f074     48 00 90 3D |  if_ae	jmp	#LR__1270
0f078     37 00 00 FF 
0f07c     10 E4 05 F1 | 	add	objptr, ##28176
0f080     F2 12 02 FB | 	rdlong	arg01, objptr
0f084     37 00 00 FF 
0f088     10 E4 85 F1 | 	sub	objptr, ##28176
0f08c     0C 4E 05 F1 | 	add	fp, #12
0f090     A7 14 02 FB | 	rdlong	arg02, fp
0f094     06 14 66 F0 | 	shl	arg02, #6
0f098     0A 13 02 F1 | 	add	arg01, arg02
0f09c     08 12 06 F1 | 	add	arg01, #8
0f0a0     04 4E 05 F1 | 	add	fp, #4
0f0a4     A7 14 02 FB | 	rdlong	arg02, fp
0f0a8     10 4E 85 F1 | 	sub	fp, #16
0f0ac     0B 14 66 F0 | 	shl	arg02, #11
0f0b0     00 00 40 FF 
0f0b4     00 14 06 F1 | 	add	arg02, ##-2147483648
0f0b8     09 15 62 FC | 	wrlong	arg02, arg01
0f0bc     34 00 90 FD | 	jmp	#LR__1271
0f0c0                 | LR__1270
0f0c0     37 00 00 FF 
0f0c4     10 E4 05 F1 | 	add	objptr, ##28176
0f0c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0cc     37 00 00 FF 
0f0d0     10 E4 85 F1 | 	sub	objptr, ##28176
0f0d4     0C 4E 05 F1 | 	add	fp, #12
0f0d8     A7 14 02 FB | 	rdlong	arg02, fp
0f0dc     0C 4E 85 F1 | 	sub	fp, #12
0f0e0     06 14 66 F0 | 	shl	arg02, #6
0f0e4     0A 13 02 F1 | 	add	arg01, arg02
0f0e8     08 12 06 F1 | 	add	arg01, #8
0f0ec     00 00 C4 FF 
0f0f0     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f0f4                 | LR__1271
0f0f4     A7 F0 03 F6 | 	mov	ptra, fp
0f0f8     B2 00 A0 FD | 	call	#popregs_
0f0fc                 | _do_changewav_ret
0f0fc     2D 00 64 FD | 	ret
0f100                 | 
0f100                 | ' 
0f100                 | ' '-------------------- chr$
0f100                 | ' 
0f100                 | ' sub do_chr
0f100                 | _do_chr
0f100     01 4A 05 F6 | 	mov	COUNT_, #1
0f104     A8 00 A0 FD | 	call	#pushregs_
0f108     14 F0 07 F1 | 	add	ptra, #20
0f10c     4A 00 00 FF 
0f110     80 E4 05 F1 | 	add	objptr, ##38016
0f114     F2 26 02 FB | 	rdlong	local01, objptr
0f118     13 17 02 F6 | 	mov	arg03, local01
0f11c     01 16 66 F0 | 	shl	arg03, #1
0f120     13 17 02 F1 | 	add	arg03, local01
0f124     02 16 66 F0 | 	shl	arg03, #2
0f128     03 00 00 FF 
0f12c     04 E4 85 F1 | 	sub	objptr, ##1540
0f130     F2 16 02 F1 | 	add	arg03, objptr
0f134     0B 17 02 FB | 	rdlong	arg03, arg03
0f138     0C 4E 05 F1 | 	add	fp, #12
0f13c     A7 16 62 FC | 	wrlong	arg03, fp
0f140                 | ' 
0f140                 | ' numpar=compiledline(lineptr_e).result.uresult
0f140                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f140     0C 4E 85 F1 | 	sub	fp, #12
0f144     02 16 16 F2 | 	cmp	arg03, #2 wc
0f148     47 00 00 FF 
0f14c     7C E4 85 F1 | 	sub	objptr, ##36476
0f150     0C 4E 05 C1 |  if_b	add	fp, #12
0f154     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f158     0C 4E 85 C1 |  if_b	sub	fp, #12
0f15c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f160     00 12 06 F6 | 	mov	arg01, #0
0f164     34 BA B1 FD | 	call	#__system___getiolock_0595
0f168     FD 12 02 F6 | 	mov	arg01, result1
0f16c     04 5D B1 FD | 	call	#__system___lockmem
0f170     A8 01 00 FF 
0f174     79 15 06 F6 | 	mov	arg02, ##@LR__5776
0f178     00 12 06 F6 | 	mov	arg01, #0
0f17c     00 16 06 F6 | 	mov	arg03, #0
0f180     E4 69 B1 FD | 	call	#__system___basic_print_string
0f184     00 12 06 F6 | 	mov	arg01, #0
0f188     10 BA B1 FD | 	call	#__system___getiolock_0595
0f18c     FD 00 68 FC | 	wrlong	#0, result1
0f190     27 12 06 F6 | 	mov	arg01, #39
0f194     00 14 06 F6 | 	mov	arg02, #0
0f198     34 23 B1 FD | 	call	#_printerror
0f19c     54 00 90 FD | 	jmp	#LR__1281
0f1a0                 | LR__1280
0f1a0     E8 D9 BF FD | 	call	#_pop
0f1a4     FF 26 02 F6 | 	mov	local01, result3
0f1a8     A7 FA 61 FC | 	wrlong	result1, fp
0f1ac     04 4E 05 F1 | 	add	fp, #4
0f1b0     A7 FC 61 FC | 	wrlong	result2, fp
0f1b4     04 4E 05 F1 | 	add	fp, #4
0f1b8     A7 26 62 FC | 	wrlong	local01, fp
0f1bc     08 4E 85 F1 | 	sub	fp, #8
0f1c0     A7 12 02 F6 | 	mov	arg01, fp
0f1c4     A8 DB BF FD | 	call	#_converttoint
0f1c8     10 4E 05 F1 | 	add	fp, #16
0f1cc     A7 FA 61 FC | 	wrlong	result1, fp
0f1d0     FD 12 02 F6 | 	mov	arg01, result1
0f1d4     10 4E 85 F1 | 	sub	fp, #16
0f1d8     D8 7E B1 FD | 	call	#__system__Chr_S
0f1dc     A7 FA 61 FC | 	wrlong	result1, fp
0f1e0     08 4E 05 F1 | 	add	fp, #8
0f1e4     A7 3E 68 FC | 	wrlong	#31, fp
0f1e8     08 4E 85 F1 | 	sub	fp, #8
0f1ec     A7 12 02 F6 | 	mov	arg01, fp
0f1f0     30 DA BF FD | 	call	#_push
0f1f4                 | LR__1281
0f1f4     A7 F0 03 F6 | 	mov	ptra, fp
0f1f8     B2 00 A0 FD | 	call	#popregs_
0f1fc                 | _do_chr_ret
0f1fc     2D 00 64 FD | 	ret
0f200                 | 
0f200                 | ' 
0f200                 | ' '-------------------- circle
0f200                 | ' 
0f200                 | ' sub do_circle
0f200                 | _do_circle
0f200     02 4A 05 F6 | 	mov	COUNT_, #2
0f204     A8 00 A0 FD | 	call	#pushregs_
0f208     24 F0 07 F1 | 	add	ptra, #36
0f20c     7C D9 BF FD | 	call	#_pop
0f210     FD 18 02 F6 | 	mov	arg04, result1
0f214     FE 16 02 F6 | 	mov	arg03, result2
0f218     FF 14 02 F6 | 	mov	arg02, result3
0f21c     18 4E 05 F1 | 	add	fp, #24
0f220     A7 18 62 FC | 	wrlong	arg04, fp
0f224     04 4E 05 F1 | 	add	fp, #4
0f228     A7 16 62 FC | 	wrlong	arg03, fp
0f22c     04 4E 05 F1 | 	add	fp, #4
0f230     A7 14 62 FC | 	wrlong	arg02, fp
0f234     20 4E 85 F1 | 	sub	fp, #32
0f238     50 D9 BF FD | 	call	#_pop
0f23c     FD 18 02 F6 | 	mov	arg04, result1
0f240     FE 16 02 F6 | 	mov	arg03, result2
0f244     FF 26 02 F6 | 	mov	local01, result3
0f248     0C 4E 05 F1 | 	add	fp, #12
0f24c     A7 18 62 FC | 	wrlong	arg04, fp
0f250     04 4E 05 F1 | 	add	fp, #4
0f254     A7 16 62 FC | 	wrlong	arg03, fp
0f258     04 4E 05 F1 | 	add	fp, #4
0f25c     A7 26 62 FC | 	wrlong	local01, fp
0f260     14 4E 85 F1 | 	sub	fp, #20
0f264     24 D9 BF FD | 	call	#_pop
0f268     A7 FA 61 FC | 	wrlong	result1, fp
0f26c     04 4E 05 F1 | 	add	fp, #4
0f270     A7 FC 61 FC | 	wrlong	result2, fp
0f274     04 4E 05 F1 | 	add	fp, #4
0f278     A7 FE 61 FC | 	wrlong	result3, fp
0f27c                 | ' 
0f27c                 | ' t3=pop()
0f27c                 | ' t2=pop()
0f27c                 | ' t1=pop()
0f27c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f27c     FF 18 02 F6 | 	mov	arg04, result3
0f280     08 4E 85 F1 | 	sub	fp, #8
0f284     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f288     08 4E 05 51 |  if_ne	add	fp, #8
0f28c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f290     08 4E 85 51 |  if_ne	sub	fp, #8
0f294     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f298     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f29c     14 4E 05 F1 | 	add	fp, #20
0f2a0     A7 26 02 FB | 	rdlong	local01, fp
0f2a4     14 4E 85 F1 | 	sub	fp, #20
0f2a8     1C 26 0E F2 | 	cmp	local01, #28 wz
0f2ac     14 4E 05 51 |  if_ne	add	fp, #20
0f2b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f2b4     14 4E 85 51 |  if_ne	sub	fp, #20
0f2b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2bc     58 00 90 5D |  if_ne	jmp	#LR__1290
0f2c0     20 4E 05 F1 | 	add	fp, #32
0f2c4     A7 26 02 FB | 	rdlong	local01, fp
0f2c8     20 4E 85 F1 | 	sub	fp, #32
0f2cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f2d0     20 4E 05 51 |  if_ne	add	fp, #32
0f2d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f2d8     20 4E 85 51 |  if_ne	sub	fp, #32
0f2dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2e0     34 00 90 5D |  if_ne	jmp	#LR__1290
0f2e4     A7 12 02 FB | 	rdlong	arg01, fp
0f2e8     0C 4E 05 F1 | 	add	fp, #12
0f2ec     A7 14 02 FB | 	rdlong	arg02, fp
0f2f0     0C 4E 05 F1 | 	add	fp, #12
0f2f4     A7 16 02 FB | 	rdlong	arg03, fp
0f2f8     18 4E 85 F1 | 	sub	fp, #24
0f2fc     37 00 00 FF 
0f300     28 E4 05 F1 | 	add	objptr, ##28200
0f304     F2 18 02 FB | 	rdlong	arg04, objptr
0f308     37 00 00 FF 
0f30c     28 E4 85 F1 | 	sub	objptr, ##28200
0f310     90 3A B1 FD | 	call	#_hg010b_spin2_circle
0f314                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f314     54 00 90 FD | 	jmp	#LR__1291
0f318                 | LR__1290
0f318     A7 12 02 F6 | 	mov	arg01, fp
0f31c     50 DA BF FD | 	call	#_converttoint
0f320     FD 26 02 F6 | 	mov	local01, result1
0f324     0C 4E 05 F1 | 	add	fp, #12
0f328     A7 12 02 F6 | 	mov	arg01, fp
0f32c     0C 4E 85 F1 | 	sub	fp, #12
0f330     3C DA BF FD | 	call	#_converttoint
0f334     FD 28 02 F6 | 	mov	local02, result1
0f338     18 4E 05 F1 | 	add	fp, #24
0f33c     A7 12 02 F6 | 	mov	arg01, fp
0f340     18 4E 85 F1 | 	sub	fp, #24
0f344     28 DA BF FD | 	call	#_converttoint
0f348     FD 16 02 F6 | 	mov	arg03, result1
0f34c     37 00 00 FF 
0f350     28 E4 05 F1 | 	add	objptr, ##28200
0f354     F2 18 02 FB | 	rdlong	arg04, objptr
0f358     37 00 00 FF 
0f35c     28 E4 85 F1 | 	sub	objptr, ##28200
0f360     13 13 02 F6 | 	mov	arg01, local01
0f364     14 15 02 F6 | 	mov	arg02, local02
0f368     38 3A B1 FD | 	call	#_hg010b_spin2_circle
0f36c                 | LR__1291
0f36c     A7 F0 03 F6 | 	mov	ptra, fp
0f370     B2 00 A0 FD | 	call	#popregs_
0f374                 | _do_circle_ret
0f374     2D 00 64 FD | 	ret
0f378                 | 
0f378                 | ' 
0f378                 | ' '-------------------- click
0f378                 | ' 
0f378                 | ' sub do_click
0f378                 | _do_click
0f378     10 D8 BF FD | 	call	#_pop
0f37c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f380                 | ' 
0f380                 | ' t1=pop()
0f380                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f380     50 00 00 AF 
0f384     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f388     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f38c     50 00 00 FF 
0f390     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f394     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f398     50 00 00 5F 
0f39c     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f3a0                 | _do_click_ret
0f3a0     2D 00 64 FD | 	ret
0f3a4                 | 
0f3a4                 | ' 
0f3a4                 | ' '-------------------- close
0f3a4                 | ' 
0f3a4                 | ' sub do_close
0f3a4                 | _do_close
0f3a4     03 4A 05 F6 | 	mov	COUNT_, #3
0f3a8     A8 00 A0 FD | 	call	#pushregs_
0f3ac     DC D7 BF FD | 	call	#_pop
0f3b0     FD 26 02 F6 | 	mov	local01, result1
0f3b4     FF 16 02 F6 | 	mov	arg03, result3
0f3b8     FE 28 02 F6 | 	mov	local02, result2
0f3bc     0B 2B 02 F6 | 	mov	local03, arg03
0f3c0                 | ' 
0f3c0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f3c0                 | ' t1=pop()
0f3c0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f3c0     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f3c4     44 00 90 AD |  if_e	jmp	#LR__1300
0f3c8     00 12 06 F6 | 	mov	arg01, #0
0f3cc     CC B7 B1 FD | 	call	#__system___getiolock_0595
0f3d0     FD 12 02 F6 | 	mov	arg01, result1
0f3d4     9C 5A B1 FD | 	call	#__system___lockmem
0f3d8     A8 01 00 FF 
0f3dc     80 15 06 F6 | 	mov	arg02, ##@LR__5777
0f3e0     00 12 06 F6 | 	mov	arg01, #0
0f3e4     00 16 06 F6 | 	mov	arg03, #0
0f3e8     7C 67 B1 FD | 	call	#__system___basic_print_string
0f3ec     00 12 06 F6 | 	mov	arg01, #0
0f3f0     0A 14 06 F6 | 	mov	arg02, #10
0f3f4     00 16 06 F6 | 	mov	arg03, #0
0f3f8     14 67 B1 FD | 	call	#__system___basic_print_char
0f3fc     00 12 06 F6 | 	mov	arg01, #0
0f400     98 B7 B1 FD | 	call	#__system___getiolock_0595
0f404     FD 00 68 FC | 	wrlong	#0, result1
0f408     08 00 90 FD | 	jmp	#LR__1301
0f40c                 | LR__1300
0f40c                 | ' channel  = t1.result.iresult
0f40c                 | ' close #channel
0f40c     13 13 02 F6 | 	mov	arg01, local01
0f410     B8 AD B1 FD | 	call	#__system__close
0f414                 | LR__1301
0f414     A7 F0 03 F6 | 	mov	ptra, fp
0f418     B2 00 A0 FD | 	call	#popregs_
0f41c                 | _do_close_ret
0f41c     2D 00 64 FD | 	ret
0f420                 | 
0f420                 | ' 
0f420                 | ' '-------------------- cls
0f420                 | ' 
0f420                 | ' sub do_cls
0f420                 | _do_cls
0f420     37 00 00 FF 
0f424     3C E4 05 F1 | 	add	objptr, ##28220
0f428     F2 12 02 FB | 	rdlong	arg01, objptr
0f42c     04 E4 85 F1 | 	sub	objptr, #4
0f430     F2 14 02 FB | 	rdlong	arg02, objptr
0f434     37 00 00 FF 
0f438     38 E4 85 F1 | 	sub	objptr, ##28216
0f43c     F8 3D B1 FD | 	call	#_hg010b_spin2_cls
0f440     37 00 00 FF 
0f444     3C E4 05 F1 | 	add	objptr, ##28220
0f448     F2 14 02 FB | 	rdlong	arg02, objptr
0f44c     14 E4 85 F1 | 	sub	objptr, #20
0f450     F2 14 62 FC | 	wrlong	arg02, objptr
0f454     37 00 00 FF 
0f458     28 E4 85 F1 | 	sub	objptr, ##28200
0f45c                 | _do_cls_ret
0f45c     2D 00 64 FD | 	ret
0f460                 | 
0f460                 | ' 
0f460                 | ' '-------------------- color
0f460                 | ' 
0f460                 | ' sub do_color
0f460                 | _do_color
0f460     03 4A 05 F6 | 	mov	COUNT_, #3
0f464     A8 00 A0 FD | 	call	#pushregs_
0f468     20 D7 BF FD | 	call	#_pop
0f46c     FD 26 02 F6 | 	mov	local01, result1
0f470     FE 28 02 F6 | 	mov	local02, result2
0f474     FF 2A 02 F6 | 	mov	local03, result3
0f478     37 00 00 FF 
0f47c     28 E4 05 F1 | 	add	objptr, ##28200
0f480     F2 26 62 FC | 	wrlong	local01, objptr
0f484     37 00 00 FF 
0f488     28 E4 85 F1 | 	sub	objptr, ##28200
0f48c     A7 F0 03 F6 | 	mov	ptra, fp
0f490     B2 00 A0 FD | 	call	#popregs_
0f494                 | _do_color_ret
0f494     2D 00 64 FD | 	ret
0f498                 | 
0f498                 | ' 
0f498                 | ' '-------------------- cos
0f498                 | ' 
0f498                 | ' sub do_cos
0f498                 | _do_cos
0f498     01 4A 05 F6 | 	mov	COUNT_, #1
0f49c     A8 00 A0 FD | 	call	#pushregs_
0f4a0     10 F0 07 F1 | 	add	ptra, #16
0f4a4     4A 00 00 FF 
0f4a8     80 E4 05 F1 | 	add	objptr, ##38016
0f4ac     F2 26 02 FB | 	rdlong	local01, objptr
0f4b0     13 17 02 F6 | 	mov	arg03, local01
0f4b4     01 16 66 F0 | 	shl	arg03, #1
0f4b8     13 17 02 F1 | 	add	arg03, local01
0f4bc     02 16 66 F0 | 	shl	arg03, #2
0f4c0     03 00 00 FF 
0f4c4     04 E4 85 F1 | 	sub	objptr, ##1540
0f4c8     F2 16 02 F1 | 	add	arg03, objptr
0f4cc     0B 17 02 FB | 	rdlong	arg03, arg03
0f4d0     0C 4E 05 F1 | 	add	fp, #12
0f4d4     A7 16 62 FC | 	wrlong	arg03, fp
0f4d8                 | ' 
0f4d8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4d8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f4d8     0C 4E 85 F1 | 	sub	fp, #12
0f4dc     02 16 16 F2 | 	cmp	arg03, #2 wc
0f4e0     47 00 00 FF 
0f4e4     7C E4 85 F1 | 	sub	objptr, ##36476
0f4e8     0C 4E 05 C1 |  if_b	add	fp, #12
0f4ec     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f4f0     0C 4E 85 C1 |  if_b	sub	fp, #12
0f4f4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1310
0f4f8     00 12 06 F6 | 	mov	arg01, #0
0f4fc     9C B6 B1 FD | 	call	#__system___getiolock_0595
0f500     FD 12 02 F6 | 	mov	arg01, result1
0f504     6C 59 B1 FD | 	call	#__system___lockmem
0f508     A8 01 00 FF 
0f50c     92 15 06 F6 | 	mov	arg02, ##@LR__5778
0f510     00 12 06 F6 | 	mov	arg01, #0
0f514     00 16 06 F6 | 	mov	arg03, #0
0f518     4C 66 B1 FD | 	call	#__system___basic_print_string
0f51c     00 12 06 F6 | 	mov	arg01, #0
0f520     78 B6 B1 FD | 	call	#__system___getiolock_0595
0f524     FD 00 68 FC | 	wrlong	#0, result1
0f528     27 12 06 F6 | 	mov	arg01, #39
0f52c     00 14 06 F6 | 	mov	arg02, #0
0f530     9C 1F B1 FD | 	call	#_printerror
0f534     78 00 90 FD | 	jmp	#LR__1311
0f538                 | LR__1310
0f538     50 D6 BF FD | 	call	#_pop
0f53c     A7 FA 61 FC | 	wrlong	result1, fp
0f540     04 4E 05 F1 | 	add	fp, #4
0f544     A7 FC 61 FC | 	wrlong	result2, fp
0f548     04 4E 05 F1 | 	add	fp, #4
0f54c     A7 FE 61 FC | 	wrlong	result3, fp
0f550     08 4E 85 F1 | 	sub	fp, #8
0f554     51 00 00 FF 
0f558     E4 E5 05 F1 | 	add	objptr, ##41956
0f55c     F2 26 02 FB | 	rdlong	local01, objptr
0f560     51 00 00 FF 
0f564     E4 E5 85 F1 | 	sub	objptr, ##41956
0f568     A7 12 02 F6 | 	mov	arg01, fp
0f56c     BC D8 BF FD | 	call	#_converttofloat
0f570     FD 14 02 F6 | 	mov	arg02, result1
0f574     13 13 02 F6 | 	mov	arg01, local01
0f578     70 87 B1 FD | 	call	#__system___float_mul
0f57c     FD 14 02 F6 | 	mov	arg02, result1
0f580     87 E4 1F FF 
0f584     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f588     1F 14 E6 F4 | 	bitnot	arg02, #31
0f58c     8C 83 B1 FD | 	call	#__system___float_add
0f590     FD 12 02 F6 | 	mov	arg01, result1
0f594     B4 90 B1 FD | 	call	#__system____builtin_sinf
0f598     A7 FA 61 FC | 	wrlong	result1, fp
0f59c     08 4E 05 F1 | 	add	fp, #8
0f5a0     A7 3C 68 FC | 	wrlong	#30, fp
0f5a4     08 4E 85 F1 | 	sub	fp, #8
0f5a8     A7 12 02 F6 | 	mov	arg01, fp
0f5ac     74 D6 BF FD | 	call	#_push
0f5b0                 | LR__1311
0f5b0     A7 F0 03 F6 | 	mov	ptra, fp
0f5b4     B2 00 A0 FD | 	call	#popregs_
0f5b8                 | _do_cos_ret
0f5b8     2D 00 64 FD | 	ret
0f5bc                 | 
0f5bc                 | ' 
0f5bc                 | ' '-------------------- cursor
0f5bc                 | ' 
0f5bc                 | ' sub do_cursor
0f5bc                 | _do_cursor
0f5bc     CC D5 BF FD | 	call	#_pop
0f5c0     00 FA 4D F2 | 	cmps	result1, #0 wz
0f5c4                 | ' t1=pop()
0f5c4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f5c4     14 00 90 5D |  if_ne	jmp	#LR__1320
0f5c8     11 12 06 F6 | 	mov	arg01, #17
0f5cc     00 14 06 F6 | 	mov	arg02, #0
0f5d0     00 16 06 F6 | 	mov	arg03, #0
0f5d4     40 2F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f5d8     10 00 90 FD | 	jmp	#LR__1321
0f5dc                 | LR__1320
0f5dc     11 12 06 F6 | 	mov	arg01, #17
0f5e0     08 14 06 F6 | 	mov	arg02, #8
0f5e4     10 16 06 F6 | 	mov	arg03, #16
0f5e8     2C 2F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f5ec                 | LR__1321
0f5ec                 | _do_cursor_ret
0f5ec     2D 00 64 FD | 	ret
0f5f0                 | 
0f5f0                 | ' 
0f5f0                 | ' '-------------------- defenv
0f5f0                 | ' 
0f5f0                 | ' sub do_defenv
0f5f0                 | _do_defenv
0f5f0     08 4A 05 F6 | 	mov	COUNT_, #8
0f5f4     A8 00 A0 FD | 	call	#pushregs_
0f5f8     58 F0 07 F1 | 	add	ptra, #88
0f5fc     4A 00 00 FF 
0f600     80 E4 05 F1 | 	add	objptr, ##38016
0f604     F2 26 02 FB | 	rdlong	local01, objptr
0f608     13 1B 02 F6 | 	mov	arg05, local01
0f60c     01 1A 66 F0 | 	shl	arg05, #1
0f610     13 1B 02 F1 | 	add	arg05, local01
0f614     02 1A 66 F0 | 	shl	arg05, #2
0f618     03 00 00 FF 
0f61c     04 E4 85 F1 | 	sub	objptr, ##1540
0f620     F2 1A 02 F1 | 	add	arg05, objptr
0f624     0D 1B 02 FB | 	rdlong	arg05, arg05
0f628     10 4E 05 F1 | 	add	fp, #16
0f62c     A7 1A 62 FC | 	wrlong	arg05, fp
0f630                 | ' 
0f630                 | ' numpar=compiledline(lineptr_e).result.uresult
0f630                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f630     10 4E 85 F1 | 	sub	fp, #16
0f634     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f638     47 00 00 FF 
0f63c     7C E4 85 F1 | 	sub	objptr, ##36476
0f640     10 4E 05 51 |  if_ne	add	fp, #16
0f644     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f648     10 4E 85 51 |  if_ne	sub	fp, #16
0f64c     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f650     8C 0A 90 5D |  if_ne	jmp	#LR__1351
0f654                 | ' 
0f654                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f654     10 4E 05 F1 | 	add	fp, #16
0f658     A7 26 02 FB | 	rdlong	local01, fp
0f65c     10 4E 85 F1 | 	sub	fp, #16
0f660     02 26 0E F2 | 	cmp	local01, #2 wz
0f664     24 04 90 5D |  if_ne	jmp	#LR__1343
0f668     20 D5 BF FD | 	call	#_pop
0f66c     FF 1A 02 F6 | 	mov	arg05, result3
0f670     40 4E 05 F1 | 	add	fp, #64
0f674     A7 FA 61 FC | 	wrlong	result1, fp
0f678     04 4E 05 F1 | 	add	fp, #4
0f67c     A7 FC 61 FC | 	wrlong	result2, fp
0f680     04 4E 05 F1 | 	add	fp, #4
0f684     A7 1A 62 FC | 	wrlong	arg05, fp
0f688                 | '   t1=pop()
0f688                 | '   if t1.result_type=result_string2 then 
0f688     48 4E 85 F1 | 	sub	fp, #72
0f68c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f690     20 00 90 5D |  if_ne	jmp	#LR__1330
0f694     40 4E 05 F1 | 	add	fp, #64
0f698     A7 12 02 FB | 	rdlong	arg01, fp
0f69c     40 4E 85 F1 | 	sub	fp, #64
0f6a0     60 D6 BF FD | 	call	#_convertstring
0f6a4     4C 4E 05 F1 | 	add	fp, #76
0f6a8     A7 FA 61 FC | 	wrlong	result1, fp
0f6ac     4C 4E 85 F1 | 	sub	fp, #76
0f6b0     58 00 90 FD | 	jmp	#LR__1333
0f6b4                 | LR__1330
0f6b4     48 4E 05 F1 | 	add	fp, #72
0f6b8     A7 26 02 FB | 	rdlong	local01, fp
0f6bc     48 4E 85 F1 | 	sub	fp, #72
0f6c0     1F 26 0E F2 | 	cmp	local01, #31 wz
0f6c4     18 00 90 5D |  if_ne	jmp	#LR__1331
0f6c8     40 4E 05 F1 | 	add	fp, #64
0f6cc     A7 26 02 FB | 	rdlong	local01, fp
0f6d0     0C 4E 05 F1 | 	add	fp, #12
0f6d4     A7 26 62 FC | 	wrlong	local01, fp
0f6d8     4C 4E 85 F1 | 	sub	fp, #76
0f6dc     2C 00 90 FD | 	jmp	#LR__1332
0f6e0                 | LR__1331
0f6e0     A8 01 00 FF 
0f6e4     98 27 06 F6 | 	mov	local01, ##@LR__5779
0f6e8     4C 4E 05 F1 | 	add	fp, #76
0f6ec     A7 26 62 FC | 	wrlong	local01, fp
0f6f0     0C 4E 85 F1 | 	sub	fp, #12
0f6f4     A7 12 02 F6 | 	mov	arg01, fp
0f6f8     40 4E 85 F1 | 	sub	fp, #64
0f6fc     70 D6 BF FD | 	call	#_converttoint
0f700     1C 4E 05 F1 | 	add	fp, #28
0f704     A7 FA 61 FC | 	wrlong	result1, fp
0f708     1C 4E 85 F1 | 	sub	fp, #28
0f70c                 | LR__1332
0f70c                 | LR__1333
0f70c                 | '   if s1<>"" then 
0f70c     4C 4E 05 F1 | 	add	fp, #76
0f710     A7 12 02 FB | 	rdlong	arg01, fp
0f714     4C 4E 85 F1 | 	sub	fp, #76
0f718     A8 01 00 FF 
0f71c     99 15 06 F6 | 	mov	arg02, ##@LR__5780
0f720     78 57 B1 FD | 	call	#__system___string_cmp
0f724     00 FA 0D F2 | 	cmp	result1, #0 wz
0f728     24 02 90 AD |  if_e	jmp	#LR__1337
0f72c     5C D4 BF FD | 	call	#_pop
0f730     FF 26 02 F6 | 	mov	local01, result3
0f734     40 4E 05 F1 | 	add	fp, #64
0f738     A7 FA 61 FC | 	wrlong	result1, fp
0f73c     04 4E 05 F1 | 	add	fp, #4
0f740     A7 FC 61 FC | 	wrlong	result2, fp
0f744     04 4E 05 F1 | 	add	fp, #4
0f748     A7 26 62 FC | 	wrlong	local01, fp
0f74c     08 4E 85 F1 | 	sub	fp, #8
0f750     A7 12 02 F6 | 	mov	arg01, fp
0f754     40 4E 85 F1 | 	sub	fp, #64
0f758     14 D6 BF FD | 	call	#_converttoint
0f75c     18 4E 05 F1 | 	add	fp, #24
0f760     A7 FA 61 FC | 	wrlong	result1, fp
0f764     18 4E 85 F1 | 	sub	fp, #24
0f768                 | '     t1=pop()
0f768                 | '     channel=converttoint(t1) 
0f768                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f768     09 12 06 F6 | 	mov	arg01, #9
0f76c     5C AA B1 FD | 	call	#__system__close
0f770     09 26 06 F6 | 	mov	local01, #9
0f774     A8 01 00 FF 
0f778     9A 13 06 F6 | 	mov	arg01, ##@LR__5781
0f77c     4C 4E 05 F1 | 	add	fp, #76
0f780     A7 14 02 FB | 	rdlong	arg02, fp
0f784     4C 4E 85 F1 | 	sub	fp, #76
0f788     44 57 B1 FD | 	call	#__system___string_concat
0f78c     FD 14 02 F6 | 	mov	arg02, result1
0f790     13 13 02 F6 | 	mov	arg01, local01
0f794     00 16 06 F6 | 	mov	arg03, #0
0f798     DC 62 B1 FD | 	call	#__system___basic_open_string
0f79c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f7a0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f7a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f7a8     0C 4E 05 F1 | 	add	fp, #12
0f7ac     A7 FA 61 FC | 	wrlong	result1, fp
0f7b0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f7b0     0C 4E 85 F1 | 	sub	fp, #12
0f7b4     A0 00 90 AD |  if_e	jmp	#LR__1334
0f7b8     00 12 06 F6 | 	mov	arg01, #0
0f7bc     DC B3 B1 FD | 	call	#__system___getiolock_0595
0f7c0     FD 12 02 F6 | 	mov	arg01, result1
0f7c4     AC 56 B1 FD | 	call	#__system___lockmem
0f7c8     A8 01 00 FF 
0f7cc     A7 15 06 F6 | 	mov	arg02, ##@LR__5782
0f7d0     00 12 06 F6 | 	mov	arg01, #0
0f7d4     00 16 06 F6 | 	mov	arg03, #0
0f7d8     8C 63 B1 FD | 	call	#__system___basic_print_string
0f7dc     0C 4E 05 F1 | 	add	fp, #12
0f7e0     A7 14 02 FB | 	rdlong	arg02, fp
0f7e4     0C 4E 85 F1 | 	sub	fp, #12
0f7e8     00 12 06 F6 | 	mov	arg01, #0
0f7ec     00 16 06 F6 | 	mov	arg03, #0
0f7f0     0A 18 06 F6 | 	mov	arg04, #10
0f7f4     B4 63 B1 FD | 	call	#__system___basic_print_integer
0f7f8     A8 01 00 FF 
0f7fc     B5 15 06 F6 | 	mov	arg02, ##@LR__5783
0f800     00 12 06 F6 | 	mov	arg01, #0
0f804     00 16 06 F6 | 	mov	arg03, #0
0f808     5C 63 B1 FD | 	call	#__system___basic_print_string
0f80c     00 26 06 F6 | 	mov	local01, #0
0f810     0C 4E 05 F1 | 	add	fp, #12
0f814     A7 12 02 FB | 	rdlong	arg01, fp
0f818     0C 4E 85 F1 | 	sub	fp, #12
0f81c     E0 7F B1 FD | 	call	#__system___strerror
0f820     FD 14 02 F6 | 	mov	arg02, result1
0f824     13 13 02 F6 | 	mov	arg01, local01
0f828     00 16 06 F6 | 	mov	arg03, #0
0f82c     38 63 B1 FD | 	call	#__system___basic_print_string
0f830     00 12 06 F6 | 	mov	arg01, #0
0f834     0A 14 06 F6 | 	mov	arg02, #10
0f838     00 16 06 F6 | 	mov	arg03, #0
0f83c     D0 62 B1 FD | 	call	#__system___basic_print_char
0f840     00 12 06 F6 | 	mov	arg01, #0
0f844     54 B3 B1 FD | 	call	#__system___getiolock_0595
0f848     FD 00 68 FC | 	wrlong	#0, result1
0f84c     09 12 06 F6 | 	mov	arg01, #9
0f850     78 A9 B1 FD | 	call	#__system__close
0f854     88 08 90 FD | 	jmp	#LR__1351
0f858                 | LR__1334
0f858                 | '     get #9,17,envbuf8(channel,0),256
0f858     18 4E 05 F1 | 	add	fp, #24
0f85c     A7 1A 02 FB | 	rdlong	arg05, fp
0f860     18 4E 85 F1 | 	sub	fp, #24
0f864     0D 17 02 F6 | 	mov	arg03, arg05
0f868     09 16 66 F0 | 	shl	arg03, #9
0f86c     0D 17 02 F1 | 	add	arg03, arg05
0f870     0C 00 00 FF 
0f874     D8 E4 05 F1 | 	add	objptr, ##6360
0f878     F2 16 02 F1 | 	add	arg03, objptr
0f87c     09 12 06 F6 | 	mov	arg01, #9
0f880     11 14 06 F6 | 	mov	arg02, #17
0f884     00 19 06 F6 | 	mov	arg04, #256
0f888     01 1A 06 F6 | 	mov	arg05, #1
0f88c     0C 00 00 FF 
0f890     D8 E4 85 F1 | 	sub	objptr, ##6360
0f894     4C 64 B1 FD | 	call	#__system___basic_get
0f898                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f898     14 4E 05 F1 | 	add	fp, #20
0f89c     A7 FE 69 FC | 	wrlong	#255, fp
0f8a0     14 4E 85 F1 | 	sub	fp, #20
0f8a4     0C 00 00 FF 
0f8a8     D8 E4 05 F1 | 	add	objptr, ##6360
0f8ac     97 30 48 FB | 	callpa	#(@LR__1336-@LR__1335)>>2,fcache_load_ptr_
0f8b0                 | LR__1335
0f8b0     18 4E 05 F1 | 	add	fp, #24
0f8b4     A7 16 02 FB | 	rdlong	arg03, fp
0f8b8     0B 27 02 F6 | 	mov	local01, arg03
0f8bc     09 26 66 F0 | 	shl	local01, #9
0f8c0     F2 26 02 F1 | 	add	local01, objptr
0f8c4     04 4E 85 F1 | 	sub	fp, #4
0f8c8     A7 1A 02 FB | 	rdlong	arg05, fp
0f8cc     0D 19 02 F6 | 	mov	arg04, arg05
0f8d0     01 18 66 F0 | 	shl	arg04, #1
0f8d4     13 19 02 F1 | 	add	arg04, local01
0f8d8     0B 27 02 F6 | 	mov	local01, arg03
0f8dc     09 26 66 F0 | 	shl	local01, #9
0f8e0     0B 27 02 F1 | 	add	local01, arg03
0f8e4     F2 26 02 F1 | 	add	local01, objptr
0f8e8     13 1B 02 F1 | 	add	arg05, local01
0f8ec     0D 27 C2 FA | 	rdbyte	local01, arg05
0f8f0     00 27 06 FA | 	mul	local01, #256
0f8f4     0C 27 52 FC | 	wrword	local01, arg04
0f8f8     A7 26 02 FB | 	rdlong	local01, fp
0f8fc     01 26 86 F1 | 	sub	local01, #1
0f900     A7 26 62 FC | 	wrlong	local01, fp
0f904     14 4E 85 F1 | 	sub	fp, #20
0f908     00 26 56 F2 | 	cmps	local01, #0 wc
0f90c     A0 FF 9F 3D |  if_ae	jmp	#LR__1335
0f910                 | LR__1336
0f910     0C 00 00 FF 
0f914     D8 E4 85 F1 | 	sub	objptr, ##6360
0f918                 | '     close #9
0f918     09 12 06 F6 | 	mov	arg01, #9
0f91c     AC A8 B1 FD | 	call	#__system__close
0f920     18 4E 05 F1 | 	add	fp, #24
0f924     A7 26 02 FB | 	rdlong	local01, fp
0f928     18 4E 85 F1 | 	sub	fp, #24
0f92c     09 26 66 F0 | 	shl	local01, #9
0f930     0C 00 00 FF 
0f934     D8 E4 05 F1 | 	add	objptr, ##6360
0f938     F2 26 02 F1 | 	add	local01, objptr
0f93c     FE 27 06 F1 | 	add	local01, #510
0f940     13 01 58 FC | 	wrword	#0, local01
0f944                 | '     envbuf(channel,255)=0                                                              
0f944                 | '     return
0f944     0C 00 00 FF 
0f948     D8 E4 85 F1 | 	sub	objptr, ##6360
0f94c     90 07 90 FD | 	jmp	#LR__1351
0f950                 | LR__1337
0f950                 | '     if wptr < $80000 then 
0f950     1C 4E 05 F1 | 	add	fp, #28
0f954     A7 28 02 FB | 	rdlong	local02, fp
0f958     1C 4E 85 F1 | 	sub	fp, #28
0f95c     00 04 00 FF 
0f960     00 28 56 F2 | 	cmps	local02, ##524288 wc
0f964     7C 00 90 3D |  if_ae	jmp	#LR__1340
0f968                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0f968     14 4E 05 F1 | 	add	fp, #20
0f96c     A7 00 68 FC | 	wrlong	#0, fp
0f970     14 4E 85 F1 | 	sub	fp, #20
0f974     0C 00 00 FF 
0f978     D8 E4 05 F1 | 	add	objptr, ##6360
0f97c     97 2C 48 FB | 	callpa	#(@LR__1339-@LR__1338)>>2,fcache_load_ptr_
0f980                 | LR__1338
0f980     18 4E 05 F1 | 	add	fp, #24
0f984     A7 28 02 FB | 	rdlong	local02, fp
0f988     09 28 66 F0 | 	shl	local02, #9
0f98c     F2 28 02 F1 | 	add	local02, objptr
0f990     04 4E 85 F1 | 	sub	fp, #4
0f994     A7 26 02 FB | 	rdlong	local01, fp
0f998     13 1B 02 F6 | 	mov	arg05, local01
0f99c     01 1A 66 F0 | 	shl	arg05, #1
0f9a0     14 1B 02 F1 | 	add	arg05, local02
0f9a4     08 4E 05 F1 | 	add	fp, #8
0f9a8     A7 12 02 FB | 	rdlong	arg01, fp
0f9ac     01 26 66 F0 | 	shl	local01, #1
0f9b0     13 13 02 F1 | 	add	arg01, local01
0f9b4     09 FB E1 FA | 	rdword	result1, arg01
0f9b8     0D FB 51 FC | 	wrword	result1, arg05
0f9bc     08 4E 85 F1 | 	sub	fp, #8
0f9c0     A7 28 02 FB | 	rdlong	local02, fp
0f9c4     01 28 06 F1 | 	add	local02, #1
0f9c8     A7 28 62 FC | 	wrlong	local02, fp
0f9cc     14 4E 85 F1 | 	sub	fp, #20
0f9d0     00 29 56 F2 | 	cmps	local02, #256 wc
0f9d4     A8 FF 9F CD |  if_b	jmp	#LR__1338
0f9d8                 | LR__1339
0f9d8     0C 00 00 FF 
0f9dc     D8 E4 85 F1 | 	sub	objptr, ##6360
0f9e0     78 00 90 FD | 	jmp	#LR__1342
0f9e4                 | LR__1340
0f9e4                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0f9e4     14 4E 05 F1 | 	add	fp, #20
0f9e8     A7 00 68 FC | 	wrlong	#0, fp
0f9ec     14 4E 85 F1 | 	sub	fp, #20
0f9f0                 | LR__1341
0f9f0     18 4E 05 F1 | 	add	fp, #24
0f9f4     A7 28 02 FB | 	rdlong	local02, fp
0f9f8     09 28 66 F0 | 	shl	local02, #9
0f9fc     0C 00 00 FF 
0fa00     D8 E4 05 F1 | 	add	objptr, ##6360
0fa04     F2 28 02 F1 | 	add	local02, objptr
0fa08     04 4E 85 F1 | 	sub	fp, #4
0fa0c     A7 26 02 FB | 	rdlong	local01, fp
0fa10     13 2B 02 F6 | 	mov	local03, local01
0fa14     01 2A 66 F0 | 	shl	local03, #1
0fa18     14 2B 02 F1 | 	add	local03, local02
0fa1c     08 4E 05 F1 | 	add	fp, #8
0fa20     A7 12 02 FB | 	rdlong	arg01, fp
0fa24     1C 4E 85 F1 | 	sub	fp, #28
0fa28     01 26 66 F0 | 	shl	local01, #1
0fa2c     13 13 02 F1 | 	add	arg01, local01
0fa30     0C 00 00 FF 
0fa34     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa38     BC 1D B1 FD | 	call	#_psdpeek
0fa3c     15 FB 51 FC | 	wrword	result1, local03
0fa40     14 4E 05 F1 | 	add	fp, #20
0fa44     A7 2A 02 FB | 	rdlong	local03, fp
0fa48     01 2A 06 F1 | 	add	local03, #1
0fa4c     A7 2A 62 FC | 	wrlong	local03, fp
0fa50     14 4E 85 F1 | 	sub	fp, #20
0fa54     00 2B 56 F2 | 	cmps	local03, #256 wc
0fa58     94 FF 9F CD |  if_b	jmp	#LR__1341
0fa5c                 | LR__1342
0fa5c     18 4E 05 F1 | 	add	fp, #24
0fa60     A7 2A 02 FB | 	rdlong	local03, fp
0fa64     18 4E 85 F1 | 	sub	fp, #24
0fa68     09 2A 66 F0 | 	shl	local03, #9
0fa6c     0C 00 00 FF 
0fa70     D8 E4 05 F1 | 	add	objptr, ##6360
0fa74     F2 2A 02 F1 | 	add	local03, objptr
0fa78     FE 2B 06 F1 | 	add	local03, #510
0fa7c     15 01 58 FC | 	wrword	#0, local03
0fa80                 | '     envbuf(channel,255)=0
0fa80                 | '     return   
0fa80     0C 00 00 FF 
0fa84     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa88     54 06 90 FD | 	jmp	#LR__1351
0fa8c                 | LR__1343
0fa8c                 | ' 
0fa8c                 | ' if numpar=5 then   						 'simple adsr
0fa8c     10 4E 05 F1 | 	add	fp, #16
0fa90     A7 28 02 FB | 	rdlong	local02, fp
0fa94     10 4E 85 F1 | 	sub	fp, #16
0fa98     05 28 0E F2 | 	cmp	local02, #5 wz
0fa9c     14 06 90 5D |  if_ne	jmp	#LR__1350
0faa0     E8 D0 BF FD | 	call	#_pop
0faa4     FF 26 02 F6 | 	mov	local01, result3
0faa8     40 4E 05 F1 | 	add	fp, #64
0faac     A7 FA 61 FC | 	wrlong	result1, fp
0fab0     04 4E 05 F1 | 	add	fp, #4
0fab4     A7 FC 61 FC | 	wrlong	result2, fp
0fab8     04 4E 05 F1 | 	add	fp, #4
0fabc     A7 26 62 FC | 	wrlong	local01, fp
0fac0     08 4E 85 F1 | 	sub	fp, #8
0fac4     A7 12 02 F6 | 	mov	arg01, fp
0fac8     40 4E 85 F1 | 	sub	fp, #64
0facc     5C D3 BF FD | 	call	#_converttofloat
0fad0     FD 28 02 F6 | 	mov	local02, result1
0fad4     2C 4E 05 F1 | 	add	fp, #44
0fad8     A7 28 62 FC | 	wrlong	local02, fp
0fadc     2C 4E 85 F1 | 	sub	fp, #44
0fae0     A8 D0 BF FD | 	call	#_pop
0fae4     FF 26 02 F6 | 	mov	local01, result3
0fae8     40 4E 05 F1 | 	add	fp, #64
0faec     A7 FA 61 FC | 	wrlong	result1, fp
0faf0     04 4E 05 F1 | 	add	fp, #4
0faf4     A7 FC 61 FC | 	wrlong	result2, fp
0faf8     04 4E 05 F1 | 	add	fp, #4
0fafc     A7 26 62 FC | 	wrlong	local01, fp
0fb00     08 4E 85 F1 | 	sub	fp, #8
0fb04     A7 12 02 F6 | 	mov	arg01, fp
0fb08     40 4E 85 F1 | 	sub	fp, #64
0fb0c     1C D3 BF FD | 	call	#_converttofloat
0fb10     FD 28 02 F6 | 	mov	local02, result1
0fb14     28 4E 05 F1 | 	add	fp, #40
0fb18     A7 28 62 FC | 	wrlong	local02, fp
0fb1c     28 4E 85 F1 | 	sub	fp, #40
0fb20     68 D0 BF FD | 	call	#_pop
0fb24     FF 26 02 F6 | 	mov	local01, result3
0fb28     40 4E 05 F1 | 	add	fp, #64
0fb2c     A7 FA 61 FC | 	wrlong	result1, fp
0fb30     04 4E 05 F1 | 	add	fp, #4
0fb34     A7 FC 61 FC | 	wrlong	result2, fp
0fb38     04 4E 05 F1 | 	add	fp, #4
0fb3c     A7 26 62 FC | 	wrlong	local01, fp
0fb40     08 4E 85 F1 | 	sub	fp, #8
0fb44     A7 12 02 F6 | 	mov	arg01, fp
0fb48     40 4E 85 F1 | 	sub	fp, #64
0fb4c     DC D2 BF FD | 	call	#_converttofloat
0fb50     FD 28 02 F6 | 	mov	local02, result1
0fb54     24 4E 05 F1 | 	add	fp, #36
0fb58     A7 28 62 FC | 	wrlong	local02, fp
0fb5c     24 4E 85 F1 | 	sub	fp, #36
0fb60     28 D0 BF FD | 	call	#_pop
0fb64     FF 26 02 F6 | 	mov	local01, result3
0fb68     40 4E 05 F1 | 	add	fp, #64
0fb6c     A7 FA 61 FC | 	wrlong	result1, fp
0fb70     04 4E 05 F1 | 	add	fp, #4
0fb74     A7 FC 61 FC | 	wrlong	result2, fp
0fb78     04 4E 05 F1 | 	add	fp, #4
0fb7c     A7 26 62 FC | 	wrlong	local01, fp
0fb80     08 4E 85 F1 | 	sub	fp, #8
0fb84     A7 12 02 F6 | 	mov	arg01, fp
0fb88     40 4E 85 F1 | 	sub	fp, #64
0fb8c     9C D2 BF FD | 	call	#_converttofloat
0fb90     FD 28 02 F6 | 	mov	local02, result1
0fb94     20 4E 05 F1 | 	add	fp, #32
0fb98     A7 28 62 FC | 	wrlong	local02, fp
0fb9c     20 4E 85 F1 | 	sub	fp, #32
0fba0     E8 CF BF FD | 	call	#_pop
0fba4     FF 26 02 F6 | 	mov	local01, result3
0fba8     40 4E 05 F1 | 	add	fp, #64
0fbac     A7 FA 61 FC | 	wrlong	result1, fp
0fbb0     04 4E 05 F1 | 	add	fp, #4
0fbb4     A7 FC 61 FC | 	wrlong	result2, fp
0fbb8     04 4E 05 F1 | 	add	fp, #4
0fbbc     A7 26 62 FC | 	wrlong	local01, fp
0fbc0     08 4E 85 F1 | 	sub	fp, #8
0fbc4     A7 12 02 F6 | 	mov	arg01, fp
0fbc8     40 4E 85 F1 | 	sub	fp, #64
0fbcc     A0 D1 BF FD | 	call	#_converttoint
0fbd0     18 4E 05 F1 | 	add	fp, #24
0fbd4     A7 FA 61 FC | 	wrlong	result1, fp
0fbd8                 | '   t1=pop() : rr=converttofloat(t1)
0fbd8                 | '   t1=pop() : ss=converttofloat(t1) 
0fbd8                 | '   t1=pop() : dd=converttofloat(t1)
0fbd8                 | '   t1=pop() : aa=converttofloat(t1)
0fbd8                 | '   t1=pop() : channel=converttoint(t1)
0fbd8                 | '   if ss<0.0 then ss=0.0 
0fbd8     10 4E 05 F1 | 	add	fp, #16
0fbdc     A7 12 02 FB | 	rdlong	arg01, fp
0fbe0     28 4E 85 F1 | 	sub	fp, #40
0fbe4     00 14 06 F6 | 	mov	arg02, #0
0fbe8     01 16 06 F6 | 	mov	arg03, #1
0fbec     30 85 B1 FD | 	call	#__system___float_cmp
0fbf0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fbf4     28 4E 05 C1 |  if_b	add	fp, #40
0fbf8     A7 00 68 CC |  if_b	wrlong	#0, fp
0fbfc     28 4E 85 C1 |  if_b	sub	fp, #40
0fc00                 | '   if ss>1.0 then ss=1.0
0fc00     28 4E 05 F1 | 	add	fp, #40
0fc04     A7 12 02 FB | 	rdlong	arg01, fp
0fc08     28 4E 85 F1 | 	sub	fp, #40
0fc0c     00 C0 1F FF 
0fc10     00 14 06 F6 | 	mov	arg02, ##1065353216
0fc14     01 16 66 F6 | 	neg	arg03, #1
0fc18     04 85 B1 FD | 	call	#__system___float_cmp
0fc1c     01 FA 55 F2 | 	cmps	result1, #1 wc
0fc20     28 4E 05 31 |  if_ae	add	fp, #40
0fc24     00 C0 9F 3F 
0fc28     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0fc2c     28 4E 85 31 |  if_ae	sub	fp, #40
0fc30     20 4E 05 F1 | 	add	fp, #32
0fc34     A7 12 02 FB | 	rdlong	arg01, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 14 02 FB | 	rdlong	arg02, fp
0fc40     24 4E 85 F1 | 	sub	fp, #36
0fc44     D4 7C B1 FD | 	call	#__system___float_add
0fc48     FD 12 02 F6 | 	mov	arg01, result1
0fc4c     2C 4E 05 F1 | 	add	fp, #44
0fc50     A7 14 02 FB | 	rdlong	arg02, fp
0fc54     2C 4E 85 F1 | 	sub	fp, #44
0fc58     C0 7C B1 FD | 	call	#__system___float_add
0fc5c     30 4E 05 F1 | 	add	fp, #48
0fc60     A7 FA 61 FC | 	wrlong	result1, fp
0fc64     FD 14 02 F6 | 	mov	arg02, result1
0fc68     30 4E 85 F1 | 	sub	fp, #48
0fc6c     00 C0 21 FF 
0fc70     00 12 06 F6 | 	mov	arg01, ##1132462080
0fc74     78 82 B1 FD | 	call	#__system___float_div
0fc78     34 4E 05 F1 | 	add	fp, #52
0fc7c     A7 FA 61 FC | 	wrlong	result1, fp
0fc80     14 4E 85 F1 | 	sub	fp, #20
0fc84     A7 12 02 FB | 	rdlong	arg01, fp
0fc88     FD 14 02 F6 | 	mov	arg02, result1
0fc8c     20 4E 85 F1 | 	sub	fp, #32
0fc90     58 80 B1 FD | 	call	#__system___float_mul
0fc94     FD 12 02 F6 | 	mov	arg01, result1
0fc98     01 14 06 F6 | 	mov	arg02, #1
0fc9c     14 85 B1 FD | 	call	#__system___float_tointeger
0fca0     A7 FA 61 FC | 	wrlong	result1, fp
0fca4     24 4E 05 F1 | 	add	fp, #36
0fca8     A7 12 02 FB | 	rdlong	arg01, fp
0fcac     10 4E 05 F1 | 	add	fp, #16
0fcb0     A7 14 02 FB | 	rdlong	arg02, fp
0fcb4     34 4E 85 F1 | 	sub	fp, #52
0fcb8     30 80 B1 FD | 	call	#__system___float_mul
0fcbc     FD 12 02 F6 | 	mov	arg01, result1
0fcc0     01 14 06 F6 | 	mov	arg02, #1
0fcc4     EC 84 B1 FD | 	call	#__system___float_tointeger
0fcc8     04 4E 05 F1 | 	add	fp, #4
0fccc     A7 FA 61 FC | 	wrlong	result1, fp
0fcd0     28 4E 05 F1 | 	add	fp, #40
0fcd4     A7 12 02 FB | 	rdlong	arg01, fp
0fcd8     08 4E 05 F1 | 	add	fp, #8
0fcdc     A7 14 02 FB | 	rdlong	arg02, fp
0fce0     34 4E 85 F1 | 	sub	fp, #52
0fce4     04 80 B1 FD | 	call	#__system___float_mul
0fce8     FD 12 02 F6 | 	mov	arg01, result1
0fcec     01 14 06 F6 | 	mov	arg02, #1
0fcf0     C0 84 B1 FD | 	call	#__system___float_tointeger
0fcf4     0C 4E 05 F1 | 	add	fp, #12
0fcf8     A7 FA 61 FC | 	wrlong	result1, fp
0fcfc     0C 4E 85 F1 | 	sub	fp, #12
0fd00     F8 BF 23 FF 
0fd04     00 28 06 F6 | 	mov	local02, ##1199566848
0fd08     A7 12 02 FB | 	rdlong	arg01, fp
0fd0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd10     1F 2C C6 C9 |  if_b	decod	local04, #31
0fd14     00 2C 06 36 |  if_ae	mov	local04, #0
0fd18     CC 7B B1 FD | 	call	#__system___float_fromuns
0fd1c     16 FB 61 F5 | 	xor	result1, local04
0fd20     FD 14 02 F6 | 	mov	arg02, result1
0fd24     14 13 02 F6 | 	mov	arg01, local02
0fd28     C4 81 B1 FD | 	call	#__system___float_div
0fd2c     38 4E 05 F1 | 	add	fp, #56
0fd30     A7 FA 61 FC | 	wrlong	result1, fp
0fd34     F8 BF 23 FF 
0fd38     00 28 06 F6 | 	mov	local02, ##1199566848
0fd3c     10 4E 85 F1 | 	sub	fp, #16
0fd40     A7 14 02 FB | 	rdlong	arg02, fp
0fd44     28 4E 85 F1 | 	sub	fp, #40
0fd48     F8 BF 23 FF 
0fd4c     00 12 06 F6 | 	mov	arg01, ##1199566848
0fd50     98 7F B1 FD | 	call	#__system___float_mul
0fd54     FD 14 02 F6 | 	mov	arg02, result1
0fd58     14 13 02 F6 | 	mov	arg01, local02
0fd5c     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd60     B8 7B B1 FD | 	call	#__system___float_add
0fd64     FD 28 02 F6 | 	mov	local02, result1
0fd68     04 4E 05 F1 | 	add	fp, #4
0fd6c     A7 12 02 FB | 	rdlong	arg01, fp
0fd70     04 4E 85 F1 | 	sub	fp, #4
0fd74     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd78     1F 2C C6 C9 |  if_b	decod	local04, #31
0fd7c     00 2C 06 36 |  if_ae	mov	local04, #0
0fd80     64 7B B1 FD | 	call	#__system___float_fromuns
0fd84     16 FB 61 F5 | 	xor	result1, local04
0fd88     FD 14 02 F6 | 	mov	arg02, result1
0fd8c     14 13 02 F6 | 	mov	arg01, local02
0fd90     5C 81 B1 FD | 	call	#__system___float_div
0fd94     24 4E 05 F1 | 	add	fp, #36
0fd98     A7 FA 61 FC | 	wrlong	result1, fp
0fd9c     04 4E 05 F1 | 	add	fp, #4
0fda0     A7 14 02 FB | 	rdlong	arg02, fp
0fda4     28 4E 85 F1 | 	sub	fp, #40
0fda8     F8 BF 23 FF 
0fdac     00 12 06 F6 | 	mov	arg01, ##1199566848
0fdb0     38 7F B1 FD | 	call	#__system___float_mul
0fdb4     FD 28 02 F6 | 	mov	local02, result1
0fdb8     0C 4E 05 F1 | 	add	fp, #12
0fdbc     A7 12 02 FB | 	rdlong	arg01, fp
0fdc0     0C 4E 85 F1 | 	sub	fp, #12
0fdc4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fdc8     1F 2C C6 C9 |  if_b	decod	local04, #31
0fdcc     00 2C 06 36 |  if_ae	mov	local04, #0
0fdd0     14 7B B1 FD | 	call	#__system___float_fromuns
0fdd4     16 FB 61 F5 | 	xor	result1, local04
0fdd8     FD 14 02 F6 | 	mov	arg02, result1
0fddc     14 13 02 F6 | 	mov	arg01, local02
0fde0     0C 81 B1 FD | 	call	#__system___float_div
0fde4     3C 4E 05 F1 | 	add	fp, #60
0fde8     A7 FA 61 FC | 	wrlong	result1, fp
0fdec     24 4E 85 F1 | 	sub	fp, #36
0fdf0     A7 2E 02 FB | 	rdlong	local05, fp
0fdf4     18 4E 85 F1 | 	sub	fp, #24
0fdf8     01 2E 66 F0 | 	shl	local05, #1
0fdfc     51 00 00 FF 
0fe00     F0 E5 05 F1 | 	add	objptr, ##41968
0fe04     F2 2E 02 F1 | 	add	local05, objptr
0fe08     A7 30 02 FB | 	rdlong	local06, fp
0fe0c     04 4E 05 F1 | 	add	fp, #4
0fe10     A7 2A 02 FB | 	rdlong	local03, fp
0fe14     15 31 02 F1 | 	add	local06, local03
0fe18     17 31 52 FC | 	wrword	local06, local05
0fe1c     1C 4E 05 F1 | 	add	fp, #28
0fe20     A7 00 68 FC | 	wrlong	#0, fp
0fe24                 | '   fulltime=aa+dd+rr
0fe24                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0fe24                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0fe24                 | '   suspoints(channel)=a+d
0fe24                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0fe24     0C 4E 85 F1 | 	sub	fp, #12
0fe28     A7 00 68 FC | 	wrlong	#0, fp
0fe2c     14 4E 85 F1 | 	sub	fp, #20
0fe30     A7 32 02 FB | 	rdlong	local07, fp
0fe34     51 00 00 FF 
0fe38     F0 E5 85 F1 | 	sub	objptr, ##41968
0fe3c                 | LR__1344
0fe3c     14 4E 05 F1 | 	add	fp, #20
0fe40     A7 28 02 FB | 	rdlong	local02, fp
0fe44     14 4E 85 F1 | 	sub	fp, #20
0fe48     19 29 52 F2 | 	cmps	local02, local07 wc
0fe4c     80 00 90 3D |  if_ae	jmp	#LR__1345
0fe50     18 4E 05 F1 | 	add	fp, #24
0fe54     A7 30 02 FB | 	rdlong	local06, fp
0fe58     09 30 66 F0 | 	shl	local06, #9
0fe5c     0C 00 00 FF 
0fe60     D8 E4 05 F1 | 	add	objptr, ##6360
0fe64     F2 30 02 F1 | 	add	local06, objptr
0fe68     04 4E 85 F1 | 	sub	fp, #4
0fe6c     A7 2E 02 FB | 	rdlong	local05, fp
0fe70     01 2E 66 F0 | 	shl	local05, #1
0fe74     18 2F 02 F1 | 	add	local05, local06
0fe78     0C 4E 05 F1 | 	add	fp, #12
0fe7c     A7 12 02 FB | 	rdlong	arg01, fp
0fe80     20 4E 85 F1 | 	sub	fp, #32
0fe84     0C 00 00 FF 
0fe88     D8 E4 85 F1 | 	sub	objptr, ##6360
0fe8c     01 14 06 F6 | 	mov	arg02, #1
0fe90     20 83 B1 FD | 	call	#__system___float_tointeger
0fe94     17 FB 51 FC | 	wrword	result1, local05
0fe98     20 4E 05 F1 | 	add	fp, #32
0fe9c     A7 12 02 FB | 	rdlong	arg01, fp
0fea0     18 4E 05 F1 | 	add	fp, #24
0fea4     A7 14 02 FB | 	rdlong	arg02, fp
0fea8     38 4E 85 F1 | 	sub	fp, #56
0feac     6C 7A B1 FD | 	call	#__system___float_add
0feb0     20 4E 05 F1 | 	add	fp, #32
0feb4     A7 FA 61 FC | 	wrlong	result1, fp
0feb8     0C 4E 85 F1 | 	sub	fp, #12
0febc     A7 30 02 FB | 	rdlong	local06, fp
0fec0     01 30 06 F1 | 	add	local06, #1
0fec4     A7 30 62 FC | 	wrlong	local06, fp
0fec8     14 4E 85 F1 | 	sub	fp, #20
0fecc     6C FF 9F FD | 	jmp	#LR__1344
0fed0                 | LR__1345
0fed0                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0fed0     A7 28 02 FB | 	rdlong	local02, fp
0fed4     14 4E 05 F1 | 	add	fp, #20
0fed8     A7 28 62 FC | 	wrlong	local02, fp
0fedc     14 4E 85 F1 | 	sub	fp, #20
0fee0     A7 34 02 FB | 	rdlong	local08, fp
0fee4     04 4E 05 F1 | 	add	fp, #4
0fee8     A7 28 02 FB | 	rdlong	local02, fp
0feec     04 4E 85 F1 | 	sub	fp, #4
0fef0     14 35 02 F1 | 	add	local08, local02
0fef4                 | LR__1346
0fef4     14 4E 05 F1 | 	add	fp, #20
0fef8     A7 28 02 FB | 	rdlong	local02, fp
0fefc     14 4E 85 F1 | 	sub	fp, #20
0ff00     1A 29 52 F2 | 	cmps	local02, local08 wc
0ff04     A8 00 90 3D |  if_ae	jmp	#LR__1347
0ff08     18 4E 05 F1 | 	add	fp, #24
0ff0c     A7 32 02 FB | 	rdlong	local07, fp
0ff10     09 32 66 F0 | 	shl	local07, #9
0ff14     0C 00 00 FF 
0ff18     D8 E4 05 F1 | 	add	objptr, ##6360
0ff1c     F2 32 02 F1 | 	add	local07, objptr
0ff20     04 4E 85 F1 | 	sub	fp, #4
0ff24     A7 30 02 FB | 	rdlong	local06, fp
0ff28     01 30 66 F0 | 	shl	local06, #1
0ff2c     19 31 02 F1 | 	add	local06, local07
0ff30     0C 4E 05 F1 | 	add	fp, #12
0ff34     A7 12 02 FB | 	rdlong	arg01, fp
0ff38     20 4E 85 F1 | 	sub	fp, #32
0ff3c     0C 00 00 FF 
0ff40     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff44     01 14 06 F6 | 	mov	arg02, #1
0ff48     68 82 B1 FD | 	call	#__system___float_tointeger
0ff4c     18 FB 51 FC | 	wrword	result1, local06
0ff50     20 4E 05 F1 | 	add	fp, #32
0ff54     A7 12 02 FB | 	rdlong	arg01, fp
0ff58     04 4E 05 F1 | 	add	fp, #4
0ff5c     A7 14 02 FB | 	rdlong	arg02, fp
0ff60     24 4E 85 F1 | 	sub	fp, #36
0ff64     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff68     B0 79 B1 FD | 	call	#__system___float_add
0ff6c     20 4E 05 F1 | 	add	fp, #32
0ff70     A7 FA 61 FC | 	wrlong	result1, fp
0ff74     20 4E 85 F1 | 	sub	fp, #32
0ff78     FD 12 02 F6 | 	mov	arg01, result1
0ff7c     00 14 06 F6 | 	mov	arg02, #0
0ff80     01 16 06 F6 | 	mov	arg03, #1
0ff84     98 81 B1 FD | 	call	#__system___float_cmp
0ff88     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff8c     20 4E 05 C1 |  if_b	add	fp, #32
0ff90     A7 00 68 CC |  if_b	wrlong	#0, fp
0ff94     20 4E 85 C1 |  if_b	sub	fp, #32
0ff98     14 4E 05 F1 | 	add	fp, #20
0ff9c     A7 32 02 FB | 	rdlong	local07, fp
0ffa0     01 32 06 F1 | 	add	local07, #1
0ffa4     A7 32 62 FC | 	wrlong	local07, fp
0ffa8     14 4E 85 F1 | 	sub	fp, #20
0ffac     44 FF 9F FD | 	jmp	#LR__1346
0ffb0                 | LR__1347
0ffb0                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0ffb0     A7 28 02 FB | 	rdlong	local02, fp
0ffb4     04 4E 05 F1 | 	add	fp, #4
0ffb8     A7 34 02 FB | 	rdlong	local08, fp
0ffbc     1A 29 02 F1 | 	add	local02, local08
0ffc0     10 4E 05 F1 | 	add	fp, #16
0ffc4     A7 28 62 FC | 	wrlong	local02, fp
0ffc8     14 4E 85 F1 | 	sub	fp, #20
0ffcc                 | LR__1348
0ffcc     14 4E 05 F1 | 	add	fp, #20
0ffd0     A7 2E 02 FB | 	rdlong	local05, fp
0ffd4     14 4E 85 F1 | 	sub	fp, #20
0ffd8     00 2F 56 F2 | 	cmps	local05, #256 wc
0ffdc     A8 00 90 3D |  if_ae	jmp	#LR__1349
0ffe0     18 4E 05 F1 | 	add	fp, #24
0ffe4     A7 34 02 FB | 	rdlong	local08, fp
0ffe8     09 34 66 F0 | 	shl	local08, #9
0ffec     0C 00 00 FF 
0fff0     D8 E4 05 F1 | 	add	objptr, ##6360
0fff4     F2 34 02 F1 | 	add	local08, objptr
0fff8     04 4E 85 F1 | 	sub	fp, #4
0fffc     A7 32 02 FB | 	rdlong	local07, fp
10000     01 32 66 F0 | 	shl	local07, #1
10004     1A 33 02 F1 | 	add	local07, local08
10008     0C 4E 05 F1 | 	add	fp, #12
1000c     A7 12 02 FB | 	rdlong	arg01, fp
10010     20 4E 85 F1 | 	sub	fp, #32
10014     0C 00 00 FF 
10018     D8 E4 85 F1 | 	sub	objptr, ##6360
1001c     01 14 06 F6 | 	mov	arg02, #1
10020     90 81 B1 FD | 	call	#__system___float_tointeger
10024     19 FB 51 FC | 	wrword	result1, local07
10028     20 4E 05 F1 | 	add	fp, #32
1002c     A7 12 02 FB | 	rdlong	arg01, fp
10030     1C 4E 05 F1 | 	add	fp, #28
10034     A7 14 02 FB | 	rdlong	arg02, fp
10038     3C 4E 85 F1 | 	sub	fp, #60
1003c     1F 14 E6 F4 | 	bitnot	arg02, #31
10040     D8 78 B1 FD | 	call	#__system___float_add
10044     20 4E 05 F1 | 	add	fp, #32
10048     A7 FA 61 FC | 	wrlong	result1, fp
1004c     20 4E 85 F1 | 	sub	fp, #32
10050     FD 12 02 F6 | 	mov	arg01, result1
10054     00 14 06 F6 | 	mov	arg02, #0
10058     01 16 06 F6 | 	mov	arg03, #1
1005c     C0 80 B1 FD | 	call	#__system___float_cmp
10060     00 FA 55 F2 | 	cmps	result1, #0 wc
10064     20 4E 05 C1 |  if_b	add	fp, #32
10068     A7 00 68 CC |  if_b	wrlong	#0, fp
1006c     20 4E 85 C1 |  if_b	sub	fp, #32
10070     14 4E 05 F1 | 	add	fp, #20
10074     A7 34 02 FB | 	rdlong	local08, fp
10078     01 34 06 F1 | 	add	local08, #1
1007c     A7 34 62 FC | 	wrlong	local08, fp
10080     14 4E 85 F1 | 	sub	fp, #20
10084     44 FF 9F FD | 	jmp	#LR__1348
10088                 | LR__1349
10088     18 4E 05 F1 | 	add	fp, #24
1008c     A7 2E 02 FB | 	rdlong	local05, fp
10090     18 4E 85 F1 | 	sub	fp, #24
10094     09 2E 66 F0 | 	shl	local05, #9
10098     0C 00 00 FF 
1009c     D8 E4 05 F1 | 	add	objptr, ##6360
100a0     F2 2E 02 F1 | 	add	local05, objptr
100a4     FE 2F 06 F1 | 	add	local05, #510
100a8     17 01 58 FC | 	wrword	#0, local05
100ac     0C 00 00 FF 
100b0     D8 E4 85 F1 | 	sub	objptr, ##6360
100b4                 | LR__1350
100b4     18 4E 05 F1 | 	add	fp, #24
100b8     A7 2E 02 FB | 	rdlong	local05, fp
100bc     18 4E 85 F1 | 	sub	fp, #24
100c0     09 2E 66 F0 | 	shl	local05, #9
100c4     0C 00 00 FF 
100c8     D8 E4 05 F1 | 	add	objptr, ##6360
100cc     F2 2E 02 F1 | 	add	local05, objptr
100d0     FE 2F 06 F1 | 	add	local05, #510
100d4     17 01 58 FC | 	wrword	#0, local05
100d8     0C 00 00 FF 
100dc     D8 E4 85 F1 | 	sub	objptr, ##6360
100e0                 | LR__1351
100e0     A7 F0 03 F6 | 	mov	ptra, fp
100e4     B2 00 A0 FD | 	call	#popregs_
100e8                 | _do_defenv_ret
100e8     2D 00 64 FD | 	ret
100ec                 | 
100ec                 | ' 
100ec                 | ' '-------------------- defsnd
100ec                 | ' 
100ec                 | ' sub do_defsnd
100ec                 | _do_defsnd
100ec     04 4A 05 F6 | 	mov	COUNT_, #4
100f0     A8 00 A0 FD | 	call	#pushregs_
100f4     88 F0 07 F1 | 	add	ptra, #136
100f8     4A 00 00 FF 
100fc     80 E4 05 F1 | 	add	objptr, ##38016
10100     F2 1A 02 FB | 	rdlong	arg05, objptr
10104     0D 19 02 F6 | 	mov	arg04, arg05
10108     01 18 66 F0 | 	shl	arg04, #1
1010c     0D 19 02 F1 | 	add	arg04, arg05
10110     02 18 66 F0 | 	shl	arg04, #2
10114     03 00 00 FF 
10118     04 E4 85 F1 | 	sub	objptr, ##1540
1011c     F2 18 02 F1 | 	add	arg04, objptr
10120     0C 1B 02 FB | 	rdlong	arg05, arg04
10124     A7 1A 62 FC | 	wrlong	arg05, fp
10128                 | ' 
10128                 | ' numpar=compiledline(lineptr_e).result.uresult
10128                 | ' 
10128                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10128                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10128                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10128                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10128                 | ' 
10128                 | ' if numpar<2 then return
10128     02 1A 56 F2 | 	cmps	arg05, #2 wc
1012c     47 00 00 FF 
10130     7C E4 85 F1 | 	sub	objptr, ##36476
10134     94 08 90 CD |  if_b	jmp	#LR__1383
10138                 | '  
10138                 | ' if numpar=2 then
10138     A7 1A 02 FB | 	rdlong	arg05, fp
1013c     02 1A 0E F2 | 	cmp	arg05, #2 wz
10140     A0 03 90 5D |  if_ne	jmp	#LR__1370
10144     44 CA BF FD | 	call	#_pop
10148     FF 1A 02 F6 | 	mov	arg05, result3
1014c     2C 4E 05 F1 | 	add	fp, #44
10150     A7 FA 61 FC | 	wrlong	result1, fp
10154     04 4E 05 F1 | 	add	fp, #4
10158     A7 FC 61 FC | 	wrlong	result2, fp
1015c     04 4E 05 F1 | 	add	fp, #4
10160     A7 1A 62 FC | 	wrlong	arg05, fp
10164                 | '   t1=pop()
10164                 | '   if t1.result_type=result_string2 then 
10164     34 4E 85 F1 | 	sub	fp, #52
10168     2B 1A 0E F2 | 	cmp	arg05, #43 wz
1016c     20 00 90 5D |  if_ne	jmp	#LR__1360
10170     2C 4E 05 F1 | 	add	fp, #44
10174     A7 12 02 FB | 	rdlong	arg01, fp
10178     2C 4E 85 F1 | 	sub	fp, #44
1017c     84 CB BF FD | 	call	#_convertstring
10180     38 4E 05 F1 | 	add	fp, #56
10184     A7 FA 61 FC | 	wrlong	result1, fp
10188     38 4E 85 F1 | 	sub	fp, #56
1018c     58 00 90 FD | 	jmp	#LR__1363
10190                 | LR__1360
10190     34 4E 05 F1 | 	add	fp, #52
10194     A7 1A 02 FB | 	rdlong	arg05, fp
10198     34 4E 85 F1 | 	sub	fp, #52
1019c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
101a0     18 00 90 5D |  if_ne	jmp	#LR__1361
101a4     2C 4E 05 F1 | 	add	fp, #44
101a8     A7 1A 02 FB | 	rdlong	arg05, fp
101ac     0C 4E 05 F1 | 	add	fp, #12
101b0     A7 1A 62 FC | 	wrlong	arg05, fp
101b4     38 4E 85 F1 | 	sub	fp, #56
101b8     2C 00 90 FD | 	jmp	#LR__1362
101bc                 | LR__1361
101bc     A8 01 00 FF 
101c0     B8 1B 06 F6 | 	mov	arg05, ##@LR__5784
101c4     38 4E 05 F1 | 	add	fp, #56
101c8     A7 1A 62 FC | 	wrlong	arg05, fp
101cc     0C 4E 85 F1 | 	sub	fp, #12
101d0     A7 12 02 F6 | 	mov	arg01, fp
101d4     2C 4E 85 F1 | 	sub	fp, #44
101d8     94 CB BF FD | 	call	#_converttoint
101dc     14 4E 05 F1 | 	add	fp, #20
101e0     A7 FA 61 FC | 	wrlong	result1, fp
101e4     14 4E 85 F1 | 	sub	fp, #20
101e8                 | LR__1362
101e8                 | LR__1363
101e8                 | '   if s<>"" then 
101e8     38 4E 05 F1 | 	add	fp, #56
101ec     A7 12 02 FB | 	rdlong	arg01, fp
101f0     38 4E 85 F1 | 	sub	fp, #56
101f4     A8 01 00 FF 
101f8     B9 15 06 F6 | 	mov	arg02, ##@LR__5785
101fc     9C 4C B1 FD | 	call	#__system___string_cmp
10200     00 FA 0D F2 | 	cmp	result1, #0 wz
10204     E0 01 90 AD |  if_e	jmp	#LR__1366
10208     80 C9 BF FD | 	call	#_pop
1020c     FF 1A 02 F6 | 	mov	arg05, result3
10210     2C 4E 05 F1 | 	add	fp, #44
10214     A7 FA 61 FC | 	wrlong	result1, fp
10218     04 4E 05 F1 | 	add	fp, #4
1021c     A7 FC 61 FC | 	wrlong	result2, fp
10220     04 4E 05 F1 | 	add	fp, #4
10224     A7 1A 62 FC | 	wrlong	arg05, fp
10228     08 4E 85 F1 | 	sub	fp, #8
1022c     A7 12 02 F6 | 	mov	arg01, fp
10230     2C 4E 85 F1 | 	sub	fp, #44
10234     38 CB BF FD | 	call	#_converttoint
10238     10 4E 05 F1 | 	add	fp, #16
1023c     A7 FA 61 FC | 	wrlong	result1, fp
10240                 | '     t1=pop()
10240                 | '     channel=converttoint(t1) : if channel>31 then return
10240     FD 1A 02 F6 | 	mov	arg05, result1
10244     10 4E 85 F1 | 	sub	fp, #16
10248     20 1A 56 F2 | 	cmps	arg05, #32 wc
1024c     7C 07 90 3D |  if_ae	jmp	#LR__1383
10250                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10250     09 12 06 F6 | 	mov	arg01, #9
10254     74 9F B1 FD | 	call	#__system__close
10258     09 26 06 F6 | 	mov	local01, #9
1025c     A8 01 00 FF 
10260     BA 13 06 F6 | 	mov	arg01, ##@LR__5786
10264     38 4E 05 F1 | 	add	fp, #56
10268     A7 14 02 FB | 	rdlong	arg02, fp
1026c     38 4E 85 F1 | 	sub	fp, #56
10270     5C 4C B1 FD | 	call	#__system___string_concat
10274     FD 14 02 F6 | 	mov	arg02, result1
10278     13 13 02 F6 | 	mov	arg01, local01
1027c     00 16 06 F6 | 	mov	arg03, #0
10280     F4 57 B1 FD | 	call	#__system___basic_open_string
10284     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10288     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1028c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10290     52 00 00 FF 
10294     4C E4 05 F1 | 	add	objptr, ##42060
10298     F2 FA 61 FC | 	wrlong	result1, objptr
1029c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
1029c     52 00 00 FF 
102a0     4C E4 85 F1 | 	sub	objptr, ##42060
102a4     B0 00 90 AD |  if_e	jmp	#LR__1364
102a8     00 12 06 F6 | 	mov	arg01, #0
102ac     EC A8 B1 FD | 	call	#__system___getiolock_0595
102b0     FD 12 02 F6 | 	mov	arg01, result1
102b4     BC 4B B1 FD | 	call	#__system___lockmem
102b8     A8 01 00 FF 
102bc     C7 15 06 F6 | 	mov	arg02, ##@LR__5787
102c0     00 12 06 F6 | 	mov	arg01, #0
102c4     00 16 06 F6 | 	mov	arg03, #0
102c8     9C 58 B1 FD | 	call	#__system___basic_print_string
102cc     52 00 00 FF 
102d0     4C E4 05 F1 | 	add	objptr, ##42060
102d4     F2 14 02 FB | 	rdlong	arg02, objptr
102d8     52 00 00 FF 
102dc     4C E4 85 F1 | 	sub	objptr, ##42060
102e0     00 12 06 F6 | 	mov	arg01, #0
102e4     00 16 06 F6 | 	mov	arg03, #0
102e8     0A 18 06 F6 | 	mov	arg04, #10
102ec     BC 58 B1 FD | 	call	#__system___basic_print_integer
102f0     A8 01 00 FF 
102f4     D5 15 06 F6 | 	mov	arg02, ##@LR__5788
102f8     00 12 06 F6 | 	mov	arg01, #0
102fc     00 16 06 F6 | 	mov	arg03, #0
10300     64 58 B1 FD | 	call	#__system___basic_print_string
10304     00 26 06 F6 | 	mov	local01, #0
10308     52 00 00 FF 
1030c     4C E4 05 F1 | 	add	objptr, ##42060
10310     F2 12 02 FB | 	rdlong	arg01, objptr
10314     52 00 00 FF 
10318     4C E4 85 F1 | 	sub	objptr, ##42060
1031c     E0 74 B1 FD | 	call	#__system___strerror
10320     FD 14 02 F6 | 	mov	arg02, result1
10324     13 13 02 F6 | 	mov	arg01, local01
10328     00 16 06 F6 | 	mov	arg03, #0
1032c     38 58 B1 FD | 	call	#__system___basic_print_string
10330     00 12 06 F6 | 	mov	arg01, #0
10334     0A 14 06 F6 | 	mov	arg02, #10
10338     00 16 06 F6 | 	mov	arg03, #0
1033c     D0 57 B1 FD | 	call	#__system___basic_print_char
10340     00 12 06 F6 | 	mov	arg01, #0
10344     54 A8 B1 FD | 	call	#__system___getiolock_0595
10348     FD 00 68 FC | 	wrlong	#0, result1
1034c     09 12 06 F6 | 	mov	arg01, #9
10350     78 9E B1 FD | 	call	#__system__close
10354     74 06 90 FD | 	jmp	#LR__1383
10358                 | LR__1364
10358                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10358     04 4E 05 F1 | 	add	fp, #4
1035c     A7 00 68 FC | 	wrlong	#0, fp
10360                 | LR__1365
10360     A7 26 02 FB | 	rdlong	local01, fp
10364     01 26 66 F0 | 	shl	local01, #1
10368     11 14 06 F6 | 	mov	arg02, #17
1036c     13 15 02 F1 | 	add	arg02, local01
10370     78 4E 05 F1 | 	add	fp, #120
10374     A7 16 02 F6 | 	mov	arg03, fp
10378     7C 4E 85 F1 | 	sub	fp, #124
1037c     09 12 06 F6 | 	mov	arg01, #9
10380     01 18 06 F6 | 	mov	arg04, #1
10384     02 1A 06 F6 | 	mov	arg05, #2
10388     58 59 B1 FD | 	call	#__system___basic_get
1038c     10 4E 05 F1 | 	add	fp, #16
10390     A7 12 02 FB | 	rdlong	arg01, fp
10394     0B 12 66 F0 | 	shl	arg01, #11
10398     0C 4E 85 F1 | 	sub	fp, #12
1039c     A7 26 02 FB | 	rdlong	local01, fp
103a0     01 26 66 F0 | 	shl	local01, #1
103a4     13 13 02 F1 | 	add	arg01, local01
103a8     78 4E 05 F1 | 	add	fp, #120
103ac     A7 14 E2 FA | 	rdword	arg02, fp
103b0     7C 4E 85 F1 | 	sub	fp, #124
103b4     0F 14 66 F7 | 	signx	arg02, #15
103b8     FC 12 B1 FD | 	call	#_psdpoke
103bc     04 4E 05 F1 | 	add	fp, #4
103c0     A7 26 02 FB | 	rdlong	local01, fp
103c4     01 26 06 F1 | 	add	local01, #1
103c8     A7 26 62 FC | 	wrlong	local01, fp
103cc     02 00 00 FF 
103d0     01 26 56 F2 | 	cmps	local01, ##1025 wc
103d4     88 FF 9F CD |  if_b	jmp	#LR__1365
103d8     04 4E 85 F1 | 	sub	fp, #4
103dc                 | '     close #9
103dc     09 12 06 F6 | 	mov	arg01, #9
103e0     E8 9D B1 FD | 	call	#__system__close
103e4                 | '     return
103e4     E4 05 90 FD | 	jmp	#LR__1383
103e8                 | LR__1366
103e8                 | '     if wptr < ($80000 - 2048) then 
103e8     14 4E 05 F1 | 	add	fp, #20
103ec     A7 26 02 FB | 	rdlong	local01, fp
103f0     14 4E 85 F1 | 	sub	fp, #20
103f4     FC 03 00 FF 
103f8     00 26 56 F2 | 	cmps	local01, ##522240 wc
103fc     70 00 90 3D |  if_ae	jmp	#LR__1368
10400                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10400     04 4E 05 F1 | 	add	fp, #4
10404     A7 00 68 FC | 	wrlong	#0, fp
10408     04 4E 85 F1 | 	sub	fp, #4
1040c                 | LR__1367
1040c     10 4E 05 F1 | 	add	fp, #16
10410     A7 26 02 FB | 	rdlong	local01, fp
10414     0B 26 66 F0 | 	shl	local01, #11
10418     0C 4E 85 F1 | 	sub	fp, #12
1041c     A7 1A 02 FB | 	rdlong	arg05, fp
10420     0D 19 02 F6 | 	mov	arg04, arg05
10424     01 18 66 F0 | 	shl	arg04, #1
10428     0C 27 02 F1 | 	add	local01, arg04
1042c     10 4E 05 F1 | 	add	fp, #16
10430     A7 12 02 FB | 	rdlong	arg01, fp
10434     14 4E 85 F1 | 	sub	fp, #20
10438     01 1A 66 F0 | 	shl	arg05, #1
1043c     0D 13 02 F1 | 	add	arg01, arg05
10440     09 15 E2 FA | 	rdword	arg02, arg01
10444     13 13 02 F6 | 	mov	arg01, local01
10448     6C 12 B1 FD | 	call	#_psdpoke
1044c     04 4E 05 F1 | 	add	fp, #4
10450     A7 26 02 FB | 	rdlong	local01, fp
10454     01 26 06 F1 | 	add	local01, #1
10458     A7 26 62 FC | 	wrlong	local01, fp
1045c     04 4E 85 F1 | 	sub	fp, #4
10460     02 00 00 FF 
10464     00 26 56 F2 | 	cmps	local01, ##1024 wc
10468     A0 FF 9F CD |  if_b	jmp	#LR__1367
1046c     5C 05 90 FD | 	jmp	#LR__1383
10470                 | LR__1368
10470                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10470     04 4E 05 F1 | 	add	fp, #4
10474     A7 00 68 FC | 	wrlong	#0, fp
10478     04 4E 85 F1 | 	sub	fp, #4
1047c                 | LR__1369
1047c     10 4E 05 F1 | 	add	fp, #16
10480     A7 26 02 FB | 	rdlong	local01, fp
10484     0B 26 66 F0 | 	shl	local01, #11
10488     0C 4E 85 F1 | 	sub	fp, #12
1048c     A7 1A 02 FB | 	rdlong	arg05, fp
10490     0D 19 02 F6 | 	mov	arg04, arg05
10494     01 18 66 F0 | 	shl	arg04, #1
10498     0C 27 02 F1 | 	add	local01, arg04
1049c     10 4E 05 F1 | 	add	fp, #16
104a0     A7 12 02 FB | 	rdlong	arg01, fp
104a4     14 4E 85 F1 | 	sub	fp, #20
104a8     01 1A 66 F0 | 	shl	arg05, #1
104ac     0D 13 02 F1 | 	add	arg01, arg05
104b0     44 13 B1 FD | 	call	#_psdpeek
104b4     FD 14 02 F6 | 	mov	arg02, result1
104b8     13 13 02 F6 | 	mov	arg01, local01
104bc     F8 11 B1 FD | 	call	#_psdpoke
104c0     04 4E 05 F1 | 	add	fp, #4
104c4     A7 26 02 FB | 	rdlong	local01, fp
104c8     01 26 06 F1 | 	add	local01, #1
104cc     A7 26 62 FC | 	wrlong	local01, fp
104d0     04 4E 85 F1 | 	sub	fp, #4
104d4     02 00 00 FF 
104d8     00 26 56 F2 | 	cmps	local01, ##1024 wc
104dc     9C FF 9F CD |  if_b	jmp	#LR__1369
104e0                 | '     return 
104e0     E8 04 90 FD | 	jmp	#LR__1383
104e4                 | '   return
104e4                 | LR__1370
104e4                 | ' for i=0 to 15 : harm(i)=0: next i  
104e4     04 4E 05 F1 | 	add	fp, #4
104e8     A7 00 68 FC | 	wrlong	#0, fp
104ec     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
104f0                 | LR__1371
104f0     A7 26 02 FB | 	rdlong	local01, fp
104f4     02 26 66 F0 | 	shl	local01, #2
104f8     38 4E 05 F1 | 	add	fp, #56
104fc     A7 26 02 F1 | 	add	local01, fp
10500     13 01 68 FC | 	wrlong	#0, local01
10504     38 4E 85 F1 | 	sub	fp, #56
10508     A7 26 02 FB | 	rdlong	local01, fp
1050c     01 26 06 F1 | 	add	local01, #1
10510     A7 26 62 FC | 	wrlong	local01, fp
10514     10 26 56 F2 | 	cmps	local01, #16 wc
10518     D4 FF 9F CD |  if_b	jmp	#LR__1371
1051c                 | LR__1372
1051c     04 4E 85 F1 | 	sub	fp, #4
10520                 | ' for i=numpar to 2 step -1 
10520     A7 26 02 FB | 	rdlong	local01, fp
10524     04 4E 05 F1 | 	add	fp, #4
10528     A7 26 62 FC | 	wrlong	local01, fp
1052c     04 4E 85 F1 | 	sub	fp, #4
10530                 | LR__1373
10530     58 C6 BF FD | 	call	#_pop
10534     2C 4E 05 F1 | 	add	fp, #44
10538     A7 FA 61 FC | 	wrlong	result1, fp
1053c     04 4E 05 F1 | 	add	fp, #4
10540     A7 FC 61 FC | 	wrlong	result2, fp
10544     04 4E 05 F1 | 	add	fp, #4
10548     A7 FE 61 FC | 	wrlong	result3, fp
1054c     30 4E 85 F1 | 	sub	fp, #48
10550     A7 26 02 FB | 	rdlong	local01, fp
10554     02 26 86 F1 | 	sub	local01, #2
10558     02 26 66 F0 | 	shl	local01, #2
1055c     38 4E 05 F1 | 	add	fp, #56
10560     A7 26 02 F1 | 	add	local01, fp
10564     10 4E 85 F1 | 	sub	fp, #16
10568     A7 12 02 F6 | 	mov	arg01, fp
1056c     2C 4E 85 F1 | 	sub	fp, #44
10570     B8 C8 BF FD | 	call	#_converttofloat
10574     13 FB 61 FC | 	wrlong	result1, local01
10578     04 4E 05 F1 | 	add	fp, #4
1057c     A7 26 02 FB | 	rdlong	local01, fp
10580     01 26 86 F1 | 	sub	local01, #1
10584     A7 26 62 FC | 	wrlong	local01, fp
10588     04 4E 85 F1 | 	sub	fp, #4
1058c     02 26 56 F2 | 	cmps	local01, #2 wc
10590     9C FF 9F 3D |  if_ae	jmp	#LR__1373
10594     F4 C5 BF FD | 	call	#_pop
10598     FF 26 02 F6 | 	mov	local01, result3
1059c     2C 4E 05 F1 | 	add	fp, #44
105a0     A7 FA 61 FC | 	wrlong	result1, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 FC 61 FC | 	wrlong	result2, fp
105ac     04 4E 05 F1 | 	add	fp, #4
105b0     A7 26 62 FC | 	wrlong	local01, fp
105b4     08 4E 85 F1 | 	sub	fp, #8
105b8     A7 12 02 F6 | 	mov	arg01, fp
105bc     2C 4E 85 F1 | 	sub	fp, #44
105c0     AC C7 BF FD | 	call	#_converttoint
105c4     10 4E 05 F1 | 	add	fp, #16
105c8     A7 FA 61 FC | 	wrlong	result1, fp
105cc                 | ' t1=pop()
105cc                 | ' channel=converttoint(t1) : : if channel>31 then return
105cc     FD 26 02 F6 | 	mov	local01, result1
105d0     10 4E 85 F1 | 	sub	fp, #16
105d4     20 26 56 F2 | 	cmps	local01, #32 wc
105d8     F0 03 90 3D |  if_ae	jmp	#LR__1383
105dc     20 4E 05 F1 | 	add	fp, #32
105e0     A7 00 68 FC | 	wrlong	#0, fp
105e4                 | ' max=0
105e4                 | ' if harm(0)<0 then
105e4     1C 4E 05 F1 | 	add	fp, #28
105e8     A7 12 02 FB | 	rdlong	arg01, fp
105ec     3C 4E 85 F1 | 	sub	fp, #60
105f0     00 14 06 F6 | 	mov	arg02, #0
105f4     01 16 06 F6 | 	mov	arg03, #1
105f8     24 7B B1 FD | 	call	#__system___float_cmp
105fc     00 FA 55 F2 | 	cmps	result1, #0 wc
10600     04 01 90 3D |  if_ae	jmp	#LR__1376
10604     3C 4E 05 F1 | 	add	fp, #60
10608     A7 FA 01 FB | 	rdlong	result1, fp
1060c     1F FA 05 F4 | 	bitl	result1, #31
10610     24 4E 85 F1 | 	sub	fp, #36
10614     A7 FA 61 FC | 	wrlong	result1, fp
10618     28 4E 05 F1 | 	add	fp, #40
1061c     A7 FA 01 FB | 	rdlong	result1, fp
10620     1F FA 05 F4 | 	bitl	result1, #31
10624     24 4E 85 F1 | 	sub	fp, #36
10628     A7 FA 61 FC | 	wrlong	result1, fp
1062c     20 4E 05 F1 | 	add	fp, #32
10630     00 C0 9F FF 
10634     A7 00 68 FC | 	wrlong	##1065353216, fp
10638     24 4E 85 F1 | 	sub	fp, #36
1063c     A7 26 02 FB | 	rdlong	local01, fp
10640     28 4E 05 F1 | 	add	fp, #40
10644     A7 26 62 FC | 	wrlong	local01, fp
10648     24 4E 85 F1 | 	sub	fp, #36
1064c     A7 26 02 FB | 	rdlong	local01, fp
10650     28 4E 05 F1 | 	add	fp, #40
10654     A7 26 62 FC | 	wrlong	local01, fp
10658                 | '   harm(0)=1
10658                 | '   harm(1)=even
10658                 | '   harm(2)=odd
10658                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10658     40 4E 85 F1 | 	sub	fp, #64
1065c     A7 06 68 FC | 	wrlong	#3, fp
10660                 | LR__1374
10660     A7 1A 02 FB | 	rdlong	arg05, fp
10664     0D 29 02 F6 | 	mov	local02, arg05
10668     02 28 66 F0 | 	shl	local02, #2
1066c     38 4E 05 F1 | 	add	fp, #56
10670     A7 28 02 F1 | 	add	local02, fp
10674     02 1A 86 F1 | 	sub	arg05, #2
10678     02 1A 66 F0 | 	shl	arg05, #2
1067c     A7 1A 02 F1 | 	add	arg05, fp
10680     0D 13 02 FB | 	rdlong	arg01, arg05
10684     24 4E 85 F1 | 	sub	fp, #36
10688     A7 14 02 FB | 	rdlong	arg02, fp
1068c     18 4E 85 F1 | 	sub	fp, #24
10690     58 76 B1 FD | 	call	#__system___float_mul
10694     14 FB 61 FC | 	wrlong	result1, local02
10698     04 4E 05 F1 | 	add	fp, #4
1069c     A7 2A 02 FB | 	rdlong	local03, fp
106a0     02 2A 06 F1 | 	add	local03, #2
106a4     A7 2A 62 FC | 	wrlong	local03, fp
106a8     10 2A 56 F2 | 	cmps	local03, #16 wc
106ac     B0 FF 9F CD |  if_b	jmp	#LR__1374
106b0                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
106b0     A7 08 68 FC | 	wrlong	#4, fp
106b4                 | LR__1375
106b4     A7 2A 02 FB | 	rdlong	local03, fp
106b8     15 29 02 F6 | 	mov	local02, local03
106bc     02 28 66 F0 | 	shl	local02, #2
106c0     38 4E 05 F1 | 	add	fp, #56
106c4     A7 28 02 F1 | 	add	local02, fp
106c8     02 2A 86 F1 | 	sub	local03, #2
106cc     02 2A 66 F0 | 	shl	local03, #2
106d0     A7 2A 02 F1 | 	add	local03, fp
106d4     15 13 02 FB | 	rdlong	arg01, local03
106d8     20 4E 85 F1 | 	sub	fp, #32
106dc     A7 14 02 FB | 	rdlong	arg02, fp
106e0     1C 4E 85 F1 | 	sub	fp, #28
106e4     04 76 B1 FD | 	call	#__system___float_mul
106e8     14 FB 61 FC | 	wrlong	result1, local02
106ec     04 4E 05 F1 | 	add	fp, #4
106f0     A7 2A 02 FB | 	rdlong	local03, fp
106f4     02 2A 06 F1 | 	add	local03, #2
106f8     A7 2A 62 FC | 	wrlong	local03, fp
106fc     0F 2A 56 F2 | 	cmps	local03, #15 wc
10700     B0 FF 9F CD |  if_b	jmp	#LR__1375
10704     04 4E 85 F1 | 	sub	fp, #4
10708                 | LR__1376
10708                 | ' if harm(0)>=0 then ' synthesize with harmonics
10708     3C 4E 05 F1 | 	add	fp, #60
1070c     A7 12 02 FB | 	rdlong	arg01, fp
10710     3C 4E 85 F1 | 	sub	fp, #60
10714     00 14 06 F6 | 	mov	arg02, #0
10718     01 16 66 F6 | 	neg	arg03, #1
1071c     00 7A B1 FD | 	call	#__system___float_cmp
10720     00 FA 55 F2 | 	cmps	result1, #0 wc
10724     A4 02 90 CD |  if_b	jmp	#LR__1382
10728                 | '   for i=0 to 1023
10728     04 4E 05 F1 | 	add	fp, #4
1072c     A7 00 68 FC | 	wrlong	#0, fp
10730     04 4E 85 F1 | 	sub	fp, #4
10734                 | LR__1377
10734     24 4E 05 F1 | 	add	fp, #36
10738     A7 00 68 FC | 	wrlong	#0, fp
1073c                 | '     spl=0
1073c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
1073c     1C 4E 85 F1 | 	sub	fp, #28
10740     A7 00 68 FC | 	wrlong	#0, fp
10744                 | LR__1378
10744     A7 28 02 FB | 	rdlong	local02, fp
10748     02 28 66 F0 | 	shl	local02, #2
1074c     34 4E 05 F1 | 	add	fp, #52
10750     A7 28 02 F1 | 	add	local02, fp
10754     14 2B 02 FB | 	rdlong	local03, local02
10758     87 E4 1D FF 
1075c     DB 29 06 F6 | 	mov	local02, ##1003032539
10760     38 4E 85 F1 | 	sub	fp, #56
10764     A7 12 02 FB | 	rdlong	arg01, fp
10768     04 4E 85 F1 | 	sub	fp, #4
1076c     09 13 52 F6 | 	abs	arg01, arg01 wc
10770     1F 2C C6 C9 |  if_b	decod	local04, #31
10774     00 2C 06 36 |  if_ae	mov	local04, #0
10778     6C 71 B1 FD | 	call	#__system___float_fromuns
1077c     16 FB 61 F5 | 	xor	result1, local04
10780     FD 14 02 F6 | 	mov	arg02, result1
10784     14 13 02 F6 | 	mov	arg01, local02
10788     60 75 B1 FD | 	call	#__system___float_mul
1078c     FD 28 02 F6 | 	mov	local02, result1
10790     08 4E 05 F1 | 	add	fp, #8
10794     A7 12 02 FB | 	rdlong	arg01, fp
10798     08 4E 85 F1 | 	sub	fp, #8
1079c     01 12 06 F1 | 	add	arg01, #1
107a0     09 13 52 F6 | 	abs	arg01, arg01 wc
107a4     1F 2C C6 C9 |  if_b	decod	local04, #31
107a8     00 2C 06 36 |  if_ae	mov	local04, #0
107ac     38 71 B1 FD | 	call	#__system___float_fromuns
107b0     16 FB 61 F5 | 	xor	result1, local04
107b4     FD 14 02 F6 | 	mov	arg02, result1
107b8     14 13 02 F6 | 	mov	arg01, local02
107bc     2C 75 B1 FD | 	call	#__system___float_mul
107c0     FD 12 02 F6 | 	mov	arg01, result1
107c4     84 7E B1 FD | 	call	#__system____builtin_sinf
107c8     FD 14 02 F6 | 	mov	arg02, result1
107cc     15 13 02 F6 | 	mov	arg01, local03
107d0     18 75 B1 FD | 	call	#__system___float_mul
107d4     FD 14 02 F6 | 	mov	arg02, result1
107d8     24 4E 05 F1 | 	add	fp, #36
107dc     A7 12 02 FB | 	rdlong	arg01, fp
107e0     24 4E 85 F1 | 	sub	fp, #36
107e4     34 71 B1 FD | 	call	#__system___float_add
107e8     24 4E 05 F1 | 	add	fp, #36
107ec     A7 FA 61 FC | 	wrlong	result1, fp
107f0     1C 4E 85 F1 | 	sub	fp, #28
107f4     A7 16 02 FB | 	rdlong	arg03, fp
107f8     01 16 06 F1 | 	add	arg03, #1
107fc     A7 16 62 FC | 	wrlong	arg03, fp
10800     10 16 56 F2 | 	cmps	arg03, #16 wc
10804     3C FF 9F CD |  if_b	jmp	#LR__1378
10808                 | '     if abs(spl)>max then max=abs(spl)  
10808     1C 4E 05 F1 | 	add	fp, #28
1080c     A7 12 02 FB | 	rdlong	arg01, fp
10810     1F 12 06 F4 | 	bitl	arg01, #31
10814     04 4E 85 F1 | 	sub	fp, #4
10818     A7 14 02 FB | 	rdlong	arg02, fp
1081c     20 4E 85 F1 | 	sub	fp, #32
10820     01 16 66 F6 | 	neg	arg03, #1
10824     F8 78 B1 FD | 	call	#__system___float_cmp
10828     01 FA 55 F2 | 	cmps	result1, #1 wc
1082c     18 00 90 CD |  if_b	jmp	#LR__1379
10830     24 4E 05 F1 | 	add	fp, #36
10834     A7 FA 01 FB | 	rdlong	result1, fp
10838     1F FA 05 F4 | 	bitl	result1, #31
1083c     04 4E 85 F1 | 	sub	fp, #4
10840     A7 FA 61 FC | 	wrlong	result1, fp
10844     20 4E 85 F1 | 	sub	fp, #32
10848                 | LR__1379
10848     04 4E 05 F1 | 	add	fp, #4
1084c     A7 2A 02 FB | 	rdlong	local03, fp
10850     01 2A 06 F1 | 	add	local03, #1
10854     A7 2A 62 FC | 	wrlong	local03, fp
10858     04 4E 85 F1 | 	sub	fp, #4
1085c     02 00 00 FF 
10860     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10864     CC FE 9F CD |  if_b	jmp	#LR__1377
10868                 | '   for i=0 to 1023
10868     04 4E 05 F1 | 	add	fp, #4
1086c     A7 00 68 FC | 	wrlong	#0, fp
10870     04 4E 85 F1 | 	sub	fp, #4
10874                 | LR__1380
10874     24 4E 05 F1 | 	add	fp, #36
10878     A7 00 68 FC | 	wrlong	#0, fp
1087c                 | '     spl=0
1087c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
1087c     1C 4E 85 F1 | 	sub	fp, #28
10880     A7 00 68 FC | 	wrlong	#0, fp
10884                 | LR__1381
10884     A7 2A 02 FB | 	rdlong	local03, fp
10888     02 2A 66 F0 | 	shl	local03, #2
1088c     34 4E 05 F1 | 	add	fp, #52
10890     A7 2A 02 F1 | 	add	local03, fp
10894     15 2B 02 FB | 	rdlong	local03, local03
10898     1C 4E 85 F1 | 	sub	fp, #28
1089c     A7 14 02 FB | 	rdlong	arg02, fp
108a0     20 4E 85 F1 | 	sub	fp, #32
108a4     58 7F 23 FF 
108a8     00 12 06 F6 | 	mov	arg01, ##1191096320
108ac     40 76 B1 FD | 	call	#__system___float_div
108b0     FD 14 02 F6 | 	mov	arg02, result1
108b4     15 13 02 F6 | 	mov	arg01, local03
108b8     30 74 B1 FD | 	call	#__system___float_mul
108bc     FD 2A 02 F6 | 	mov	local03, result1
108c0     87 E4 1D FF 
108c4     DB 29 06 F6 | 	mov	local02, ##1003032539
108c8     04 4E 05 F1 | 	add	fp, #4
108cc     A7 12 02 FB | 	rdlong	arg01, fp
108d0     04 4E 85 F1 | 	sub	fp, #4
108d4     09 13 52 F6 | 	abs	arg01, arg01 wc
108d8     1F 2C C6 C9 |  if_b	decod	local04, #31
108dc     00 2C 06 36 |  if_ae	mov	local04, #0
108e0     04 70 B1 FD | 	call	#__system___float_fromuns
108e4     16 FB 61 F5 | 	xor	result1, local04
108e8     FD 14 02 F6 | 	mov	arg02, result1
108ec     14 13 02 F6 | 	mov	arg01, local02
108f0     F8 73 B1 FD | 	call	#__system___float_mul
108f4     FD 28 02 F6 | 	mov	local02, result1
108f8     08 4E 05 F1 | 	add	fp, #8
108fc     A7 12 02 FB | 	rdlong	arg01, fp
10900     08 4E 85 F1 | 	sub	fp, #8
10904     01 12 06 F1 | 	add	arg01, #1
10908     09 13 52 F6 | 	abs	arg01, arg01 wc
1090c     1F 2C C6 C9 |  if_b	decod	local04, #31
10910     00 2C 06 36 |  if_ae	mov	local04, #0
10914     D0 6F B1 FD | 	call	#__system___float_fromuns
10918     16 FB 61 F5 | 	xor	result1, local04
1091c     FD 14 02 F6 | 	mov	arg02, result1
10920     14 13 02 F6 | 	mov	arg01, local02
10924     C4 73 B1 FD | 	call	#__system___float_mul
10928     FD 12 02 F6 | 	mov	arg01, result1
1092c     1C 7D B1 FD | 	call	#__system____builtin_sinf
10930     FD 14 02 F6 | 	mov	arg02, result1
10934     15 13 02 F6 | 	mov	arg01, local03
10938     B0 73 B1 FD | 	call	#__system___float_mul
1093c     FD 14 02 F6 | 	mov	arg02, result1
10940     24 4E 05 F1 | 	add	fp, #36
10944     A7 12 02 FB | 	rdlong	arg01, fp
10948     24 4E 85 F1 | 	sub	fp, #36
1094c     CC 6F B1 FD | 	call	#__system___float_add
10950     24 4E 05 F1 | 	add	fp, #36
10954     A7 FA 61 FC | 	wrlong	result1, fp
10958     1C 4E 85 F1 | 	sub	fp, #28
1095c     A7 2A 02 FB | 	rdlong	local03, fp
10960     01 2A 06 F1 | 	add	local03, #1
10964     A7 2A 62 FC | 	wrlong	local03, fp
10968     10 2A 56 F2 | 	cmps	local03, #16 wc
1096c     14 FF 9F CD |  if_b	jmp	#LR__1381
10970     08 4E 05 F1 | 	add	fp, #8
10974     A7 2A 02 FB | 	rdlong	local03, fp
10978     0B 2A 66 F0 | 	shl	local03, #11
1097c     0C 4E 85 F1 | 	sub	fp, #12
10980     A7 28 02 FB | 	rdlong	local02, fp
10984     01 28 66 F0 | 	shl	local02, #1
10988     14 2B 02 F1 | 	add	local03, local02
1098c     20 4E 05 F1 | 	add	fp, #32
10990     A7 12 02 FB | 	rdlong	arg01, fp
10994     24 4E 85 F1 | 	sub	fp, #36
10998     01 14 06 F6 | 	mov	arg02, #1
1099c     14 78 B1 FD | 	call	#__system___float_tointeger
109a0     FD 14 02 F6 | 	mov	arg02, result1
109a4     15 13 02 F6 | 	mov	arg01, local03
109a8     0C 0D B1 FD | 	call	#_psdpoke
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 2A 02 FB | 	rdlong	local03, fp
109b4     01 2A 06 F1 | 	add	local03, #1
109b8     A7 2A 62 FC | 	wrlong	local03, fp
109bc     04 4E 85 F1 | 	sub	fp, #4
109c0     02 00 00 FF 
109c4     00 2A 56 F2 | 	cmps	local03, ##1024 wc
109c8     A8 FE 9F CD |  if_b	jmp	#LR__1380
109cc                 | LR__1382
109cc                 | LR__1383
109cc     A7 F0 03 F6 | 	mov	ptra, fp
109d0     B2 00 A0 FD | 	call	#popregs_
109d4                 | _do_defsnd_ret
109d4     2D 00 64 FD | 	ret
109d8                 | 
109d8                 | ' 
109d8                 | ' '-------------------- defsprite
109d8                 | ' 
109d8                 | ' sub do_defsprite
109d8                 | _do_defsprite
109d8     07 4A 05 F6 | 	mov	COUNT_, #7
109dc     A8 00 A0 FD | 	call	#pushregs_
109e0     60 F0 07 F1 | 	add	ptra, #96
109e4     A4 C1 BF FD | 	call	#_pop
109e8     FD 16 02 F6 | 	mov	arg03, result1
109ec     FE 14 02 F6 | 	mov	arg02, result2
109f0     FF 12 02 F6 | 	mov	arg01, result3
109f4     30 4E 05 F1 | 	add	fp, #48
109f8     A7 16 62 FC | 	wrlong	arg03, fp
109fc     04 4E 05 F1 | 	add	fp, #4
10a00     A7 14 62 FC | 	wrlong	arg02, fp
10a04     04 4E 05 F1 | 	add	fp, #4
10a08     A7 12 62 FC | 	wrlong	arg01, fp
10a0c     38 4E 85 F1 | 	sub	fp, #56
10a10     78 C1 BF FD | 	call	#_pop
10a14     FD 16 02 F6 | 	mov	arg03, result1
10a18     FE 14 02 F6 | 	mov	arg02, result2
10a1c     FF 12 02 F6 | 	mov	arg01, result3
10a20     24 4E 05 F1 | 	add	fp, #36
10a24     A7 16 62 FC | 	wrlong	arg03, fp
10a28     04 4E 05 F1 | 	add	fp, #4
10a2c     A7 14 62 FC | 	wrlong	arg02, fp
10a30     04 4E 05 F1 | 	add	fp, #4
10a34     A7 12 62 FC | 	wrlong	arg01, fp
10a38     2C 4E 85 F1 | 	sub	fp, #44
10a3c     4C C1 BF FD | 	call	#_pop
10a40     FD 16 02 F6 | 	mov	arg03, result1
10a44     FE 14 02 F6 | 	mov	arg02, result2
10a48     FF 12 02 F6 | 	mov	arg01, result3
10a4c     18 4E 05 F1 | 	add	fp, #24
10a50     A7 16 62 FC | 	wrlong	arg03, fp
10a54     04 4E 05 F1 | 	add	fp, #4
10a58     A7 14 62 FC | 	wrlong	arg02, fp
10a5c     04 4E 05 F1 | 	add	fp, #4
10a60     A7 12 62 FC | 	wrlong	arg01, fp
10a64     20 4E 85 F1 | 	sub	fp, #32
10a68     20 C1 BF FD | 	call	#_pop
10a6c     FD 16 02 F6 | 	mov	arg03, result1
10a70     FE 14 02 F6 | 	mov	arg02, result2
10a74     FF 12 02 F6 | 	mov	arg01, result3
10a78     0C 4E 05 F1 | 	add	fp, #12
10a7c     A7 16 62 FC | 	wrlong	arg03, fp
10a80     04 4E 05 F1 | 	add	fp, #4
10a84     A7 14 62 FC | 	wrlong	arg02, fp
10a88     04 4E 05 F1 | 	add	fp, #4
10a8c     A7 12 62 FC | 	wrlong	arg01, fp
10a90     14 4E 85 F1 | 	sub	fp, #20
10a94     F4 C0 BF FD | 	call	#_pop
10a98     FF 16 02 F6 | 	mov	arg03, result3
10a9c     A7 FA 61 FC | 	wrlong	result1, fp
10aa0     04 4E 05 F1 | 	add	fp, #4
10aa4     A7 FC 61 FC | 	wrlong	result2, fp
10aa8     04 4E 05 F1 | 	add	fp, #4
10aac     A7 16 62 FC | 	wrlong	arg03, fp
10ab0     08 4E 85 F1 | 	sub	fp, #8
10ab4     A7 12 02 F6 | 	mov	arg01, fp
10ab8     B4 C2 BF FD | 	call	#_converttoint
10abc     3C 4E 05 F1 | 	add	fp, #60
10ac0     A7 FA 61 FC | 	wrlong	result1, fp
10ac4     30 4E 85 F1 | 	sub	fp, #48
10ac8     A7 12 02 F6 | 	mov	arg01, fp
10acc     0C 4E 85 F1 | 	sub	fp, #12
10ad0     9C C2 BF FD | 	call	#_converttoint
10ad4     40 4E 05 F1 | 	add	fp, #64
10ad8     A7 FA 61 FC | 	wrlong	result1, fp
10adc     28 4E 85 F1 | 	sub	fp, #40
10ae0     A7 12 02 F6 | 	mov	arg01, fp
10ae4     18 4E 85 F1 | 	sub	fp, #24
10ae8     84 C2 BF FD | 	call	#_converttoint
10aec     44 4E 05 F1 | 	add	fp, #68
10af0     A7 FA 61 FC | 	wrlong	result1, fp
10af4     20 4E 85 F1 | 	sub	fp, #32
10af8     A7 12 02 F6 | 	mov	arg01, fp
10afc     24 4E 85 F1 | 	sub	fp, #36
10b00     6C C2 BF FD | 	call	#_converttoint
10b04     48 4E 05 F1 | 	add	fp, #72
10b08     A7 FA 61 FC | 	wrlong	result1, fp
10b0c     18 4E 85 F1 | 	sub	fp, #24
10b10     A7 12 02 F6 | 	mov	arg01, fp
10b14     30 4E 85 F1 | 	sub	fp, #48
10b18     54 C2 BF FD | 	call	#_converttoint
10b1c     4C 4E 05 F1 | 	add	fp, #76
10b20     A7 FA 61 FC | 	wrlong	result1, fp
10b24                 | ' 
10b24                 | ' t5=pop()
10b24                 | ' t4=pop()
10b24                 | ' t3=pop()
10b24                 | ' t2=pop()
10b24                 | ' t1=pop()
10b24                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10b24                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10b24     10 4E 85 F1 | 	sub	fp, #16
10b28     A7 16 02 FB | 	rdlong	arg03, fp
10b2c     3C 4E 85 F1 | 	sub	fp, #60
10b30     02 16 66 F0 | 	shl	arg03, #2
10b34     51 00 00 FF 
10b38     90 E5 05 F1 | 	add	objptr, ##41872
10b3c     F2 16 02 F1 | 	add	arg03, objptr
10b40     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10b44     51 00 00 FF 
10b48     90 E5 85 F1 | 	sub	objptr, ##41872
10b4c     2C 00 90 AD |  if_e	jmp	#LR__1390
10b50     3C 4E 05 F1 | 	add	fp, #60
10b54     A7 16 02 FB | 	rdlong	arg03, fp
10b58     3C 4E 85 F1 | 	sub	fp, #60
10b5c     02 16 66 F0 | 	shl	arg03, #2
10b60     51 00 00 FF 
10b64     90 E5 05 F1 | 	add	objptr, ##41872
10b68     F2 16 02 F1 | 	add	arg03, objptr
10b6c     0B 13 02 FB | 	rdlong	arg01, arg03
10b70     51 00 00 FF 
10b74     90 E5 85 F1 | 	sub	objptr, ##41872
10b78     D4 85 B1 FD | 	call	#__system___gc_free
10b7c                 | LR__1390
10b7c     3C 4E 05 F1 | 	add	fp, #60
10b80     A7 26 02 FB | 	rdlong	local01, fp
10b84     0C 4E 05 F1 | 	add	fp, #12
10b88     A7 16 02 FB | 	rdlong	arg03, fp
10b8c     04 4E 05 F1 | 	add	fp, #4
10b90     A7 14 02 FB | 	rdlong	arg02, fp
10b94     0A 17 02 FD | 	qmul	arg03, arg02
10b98     02 26 66 F0 | 	shl	local01, #2
10b9c     51 00 00 FF 
10ba0     90 E5 05 F1 | 	add	objptr, ##41872
10ba4     F2 26 02 F1 | 	add	local01, objptr
10ba8     4C 4E 85 F1 | 	sub	fp, #76
10bac     51 00 00 FF 
10bb0     90 E5 85 F1 | 	sub	objptr, ##41872
10bb4     18 12 62 FD | 	getqx	arg01
10bb8     58 84 B1 FD | 	call	#__system___gc_alloc_managed
10bbc     13 FB 61 FC | 	wrlong	result1, local01
10bc0                 | ' for y=a3 to a3+a5-1
10bc0     44 4E 05 F1 | 	add	fp, #68
10bc4     A7 28 02 FB | 	rdlong	local02, fp
10bc8     0C 4E 05 F1 | 	add	fp, #12
10bcc     A7 28 62 FC | 	wrlong	local02, fp
10bd0     0C 4E 85 F1 | 	sub	fp, #12
10bd4     A7 2A 02 FB | 	rdlong	local03, fp
10bd8     08 4E 05 F1 | 	add	fp, #8
10bdc     A7 2C 02 FB | 	rdlong	local04, fp
10be0     4C 4E 85 F1 | 	sub	fp, #76
10be4     16 2B 02 F1 | 	add	local03, local04
10be8                 | LR__1391
10be8     50 4E 05 F1 | 	add	fp, #80
10bec     A7 28 02 FB | 	rdlong	local02, fp
10bf0     50 4E 85 F1 | 	sub	fp, #80
10bf4     15 29 52 F2 | 	cmps	local02, local03 wc
10bf8     F4 00 90 3D |  if_ae	jmp	#LR__1394
10bfc                 | '   for x=a2 to a4+a2-1
10bfc     40 4E 05 F1 | 	add	fp, #64
10c00     A7 26 02 FB | 	rdlong	local01, fp
10c04     14 4E 05 F1 | 	add	fp, #20
10c08     A7 26 62 FC | 	wrlong	local01, fp
10c0c     0C 4E 85 F1 | 	sub	fp, #12
10c10     A7 2E 02 FB | 	rdlong	local05, fp
10c14     08 4E 85 F1 | 	sub	fp, #8
10c18     A7 30 02 FB | 	rdlong	local06, fp
10c1c     40 4E 85 F1 | 	sub	fp, #64
10c20     18 2F 02 F1 | 	add	local05, local06
10c24                 | LR__1392
10c24     54 4E 05 F1 | 	add	fp, #84
10c28     A7 26 02 FB | 	rdlong	local01, fp
10c2c     54 4E 85 F1 | 	sub	fp, #84
10c30     17 27 52 F2 | 	cmps	local01, local05 wc
10c34     A0 00 90 3D |  if_ae	jmp	#LR__1393
10c38     3C 4E 05 F1 | 	add	fp, #60
10c3c     A7 30 02 FB | 	rdlong	local06, fp
10c40     18 4E 05 F1 | 	add	fp, #24
10c44     A7 2C 02 FB | 	rdlong	local04, fp
10c48     14 4E 85 F1 | 	sub	fp, #20
10c4c     A7 28 02 FB | 	rdlong	local02, fp
10c50     10 4E 05 F1 | 	add	fp, #16
10c54     A7 26 02 FB | 	rdlong	local01, fp
10c58     13 17 02 F6 | 	mov	arg03, local01
10c5c     0C 4E 85 F1 | 	sub	fp, #12
10c60     A7 14 02 FB | 	rdlong	arg02, fp
10c64     0A 17 82 F1 | 	sub	arg03, arg02
10c68     04 4E 05 F1 | 	add	fp, #4
10c6c     A7 14 02 FB | 	rdlong	arg02, fp
10c70     0A 17 02 FD | 	qmul	arg03, arg02
10c74     02 30 66 F0 | 	shl	local06, #2
10c78     51 00 00 FF 
10c7c     90 E5 05 F1 | 	add	objptr, ##41872
10c80     F2 30 02 F1 | 	add	local06, objptr
10c84     18 31 02 FB | 	rdlong	local06, local06
10c88     16 33 02 F6 | 	mov	local07, local04
10c8c     14 33 82 F1 | 	sub	local07, local02
10c90     51 00 00 FF 
10c94     90 E5 85 F1 | 	sub	objptr, ##41872
10c98     F2 12 02 FB | 	rdlong	arg01, objptr
10c9c     16 13 02 F1 | 	add	arg01, local04
10ca0     48 4E 85 F1 | 	sub	fp, #72
10ca4     0A 26 66 F0 | 	shl	local01, #10
10ca8     13 13 02 F1 | 	add	arg01, local01
10cac     18 2C 62 FD | 	getqx	local04
10cb0     16 33 02 F1 | 	add	local07, local04
10cb4     18 33 02 F1 | 	add	local07, local06
10cb8     8C 0A B1 FD | 	call	#_pspeek
10cbc     19 FB 41 FC | 	wrbyte	result1, local07
10cc0     54 4E 05 F1 | 	add	fp, #84
10cc4     A7 32 02 FB | 	rdlong	local07, fp
10cc8     01 32 06 F1 | 	add	local07, #1
10ccc     A7 32 62 FC | 	wrlong	local07, fp
10cd0     54 4E 85 F1 | 	sub	fp, #84
10cd4     4C FF 9F FD | 	jmp	#LR__1392
10cd8                 | LR__1393
10cd8     50 4E 05 F1 | 	add	fp, #80
10cdc     A7 32 02 FB | 	rdlong	local07, fp
10ce0     01 32 06 F1 | 	add	local07, #1
10ce4     A7 32 62 FC | 	wrlong	local07, fp
10ce8     50 4E 85 F1 | 	sub	fp, #80
10cec     F8 FE 9F FD | 	jmp	#LR__1391
10cf0                 | LR__1394
10cf0     3C 4E 05 F1 | 	add	fp, #60
10cf4     A7 32 02 FB | 	rdlong	local07, fp
10cf8     19 13 02 F6 | 	mov	arg01, local07
10cfc     3C 4E 85 F1 | 	sub	fp, #60
10d00     02 32 66 F0 | 	shl	local07, #2
10d04     51 00 00 FF 
10d08     90 E5 05 F1 | 	add	objptr, ##41872
10d0c     F2 32 02 F1 | 	add	local07, objptr
10d10     19 15 02 FB | 	rdlong	arg02, local07
10d14     51 00 00 FF 
10d18     90 E5 85 F1 | 	sub	objptr, ##41872
10d1c     68 17 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10d20     3C 4E 05 F1 | 	add	fp, #60
10d24     A7 12 02 FB | 	rdlong	arg01, fp
10d28     0C 4E 05 F1 | 	add	fp, #12
10d2c     A7 14 02 FB | 	rdlong	arg02, fp
10d30     04 4E 05 F1 | 	add	fp, #4
10d34     A7 16 02 FB | 	rdlong	arg03, fp
10d38     4C 4E 85 F1 | 	sub	fp, #76
10d3c     D8 17 B1 FD | 	call	#_hg010b_spin2_setspritesize
10d40     A7 F0 03 F6 | 	mov	ptra, fp
10d44     B2 00 A0 FD | 	call	#popregs_
10d48                 | _do_defsprite_ret
10d48     2D 00 64 FD | 	ret
10d4c                 | 
10d4c                 | ' 
10d4c                 | ' '-------------------- deg
10d4c                 | ' 
10d4c                 | ' sub do_deg
10d4c                 | _do_deg
10d4c     51 00 00 FF 
10d50     E4 E5 05 F1 | 	add	objptr, ##41956
10d54     7D 47 9E FF 
10d58     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10d5c     04 E4 05 F1 | 	add	objptr, #4
10d60     97 32 A1 FF 
10d64     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10d68     51 00 00 FF 
10d6c     E8 E5 85 F1 | 	sub	objptr, ##41960
10d70                 | _do_deg_ret
10d70     2D 00 64 FD | 	ret
10d74                 | 
10d74                 | ' 
10d74                 | ' '-------------------- delete
10d74                 | ' 
10d74                 | ' sub do_delete
10d74                 | _do_delete
10d74     05 4A 05 F6 | 	mov	COUNT_, #5
10d78     A8 00 A0 FD | 	call	#pushregs_
10d7c     0C BE BF FD | 	call	#_pop
10d80     FE 18 02 F6 | 	mov	arg04, result2
10d84     FF 16 02 F6 | 	mov	arg03, result3
10d88     FD 26 02 F6 | 	mov	local01, result1
10d8c     0C 29 02 F6 | 	mov	local02, arg04
10d90     0B 2B 02 F6 | 	mov	local03, arg03
10d94                 | ' 
10d94                 | ' t1=pop()
10d94                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10d94     2B 2A 0E F2 | 	cmp	local03, #43 wz
10d98     10 00 90 5D |  if_ne	jmp	#LR__1400
10d9c     13 13 02 F6 | 	mov	arg01, local01
10da0     60 BF BF FD | 	call	#_convertstring
10da4     FD 26 02 F6 | 	mov	local01, result1
10da8     1F 2A 06 F6 | 	mov	local03, #31
10dac                 | LR__1400
10dac                 | ' if t1.result_type<>result_string then printerror(15): return
10dac     1F 2A 0E F2 | 	cmp	local03, #31 wz
10db0     10 00 90 AD |  if_e	jmp	#LR__1401
10db4     0F 12 06 F6 | 	mov	arg01, #15
10db8     00 14 06 F6 | 	mov	arg02, #0
10dbc     10 07 B1 FD | 	call	#_printerror
10dc0     E0 00 90 FD | 	jmp	#LR__1405
10dc4                 | LR__1401
10dc4                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10dc4     4A 00 00 FF 
10dc8     94 E4 05 F1 | 	add	objptr, ##38036
10dcc     F2 12 02 FB | 	rdlong	arg01, objptr
10dd0     4A 00 00 FF 
10dd4     94 E4 85 F1 | 	sub	objptr, ##38036
10dd8     A8 01 00 FF 
10ddc     D8 15 06 F6 | 	mov	arg02, ##@LR__5789
10de0     B8 40 B1 FD | 	call	#__system___string_cmp
10de4     00 FA 0D F2 | 	cmp	result1, #0 wz
10de8     34 00 90 AD |  if_e	jmp	#LR__1402
10dec     4A 00 00 FF 
10df0     94 E4 05 F1 | 	add	objptr, ##38036
10df4     F2 12 02 FB | 	rdlong	arg01, objptr
10df8     4A 00 00 FF 
10dfc     94 E4 85 F1 | 	sub	objptr, ##38036
10e00     A8 01 00 FF 
10e04     DA 15 06 F6 | 	mov	arg02, ##@LR__5790
10e08     C4 40 B1 FD | 	call	#__system___string_concat
10e0c     FD 12 02 F6 | 	mov	arg01, result1
10e10     13 15 02 F6 | 	mov	arg02, local01
10e14     B8 40 B1 FD | 	call	#__system___string_concat
10e18     FD 2C 02 F6 | 	mov	local04, result1
10e1c     14 00 90 FD | 	jmp	#LR__1403
10e20                 | LR__1402
10e20     A8 01 00 FF 
10e24     DC 13 06 F6 | 	mov	arg01, ##@LR__5791
10e28     13 15 02 F6 | 	mov	arg02, local01
10e2c     A0 40 B1 FD | 	call	#__system___string_concat
10e30     FD 2C 02 F6 | 	mov	local04, result1
10e34                 | LR__1403
10e34     16 13 02 F6 | 	mov	arg01, local04
10e38     04 68 B1 FD | 	call	#__system___remove
10e3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10e40     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10e44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10e48     FD 2E 0A F6 | 	mov	local05, result1 wz
10e4c                 | ' kill filename$
10e4c                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10e4c     54 00 90 AD |  if_e	jmp	#LR__1404
10e50     00 12 06 F6 | 	mov	arg01, #0
10e54     44 9D B1 FD | 	call	#__system___getiolock_0595
10e58     FD 12 02 F6 | 	mov	arg01, result1
10e5c     14 40 B1 FD | 	call	#__system___lockmem
10e60     A8 01 00 FF 
10e64     DE 15 06 F6 | 	mov	arg02, ##@LR__5792
10e68     00 12 06 F6 | 	mov	arg01, #0
10e6c     00 16 06 F6 | 	mov	arg03, #0
10e70     F4 4C B1 FD | 	call	#__system___basic_print_string
10e74     00 12 06 F6 | 	mov	arg01, #0
10e78     17 15 02 F6 | 	mov	arg02, local05
10e7c     00 16 06 F6 | 	mov	arg03, #0
10e80     0A 18 06 F6 | 	mov	arg04, #10
10e84     24 4D B1 FD | 	call	#__system___basic_print_integer
10e88     00 12 06 F6 | 	mov	arg01, #0
10e8c     0A 14 06 F6 | 	mov	arg02, #10
10e90     00 16 06 F6 | 	mov	arg03, #0
10e94     78 4C B1 FD | 	call	#__system___basic_print_char
10e98     00 12 06 F6 | 	mov	arg01, #0
10e9c     FC 9C B1 FD | 	call	#__system___getiolock_0595
10ea0     FD 00 68 FC | 	wrlong	#0, result1
10ea4                 | LR__1404
10ea4                 | LR__1405
10ea4     A7 F0 03 F6 | 	mov	ptra, fp
10ea8     B2 00 A0 FD | 	call	#popregs_
10eac                 | _do_delete_ret
10eac     2D 00 64 FD | 	ret
10eb0                 | 
10eb0                 | ' 
10eb0                 | ' '-------------------- dir
10eb0                 | ' 
10eb0                 | ' sub do_dir
10eb0                 | _do_dir
10eb0     13 4A 05 F6 | 	mov	COUNT_, #19
10eb4     A8 00 A0 FD | 	call	#pushregs_
10eb8     01 00 00 FF 
10ebc     38 F0 07 F1 | 	add	ptra, ##568
10ec0                 | ' 
10ec0                 | ' print "Current directory: "; currentdir$ 
10ec0     00 12 06 F6 | 	mov	arg01, #0
10ec4     D4 9C B1 FD | 	call	#__system___getiolock_0595
10ec8     FD 12 02 F6 | 	mov	arg01, result1
10ecc     A4 3F B1 FD | 	call	#__system___lockmem
10ed0     A9 01 00 FF 
10ed4     16 14 06 F6 | 	mov	arg02, ##@LR__5793
10ed8     00 12 06 F6 | 	mov	arg01, #0
10edc     00 16 06 F6 | 	mov	arg03, #0
10ee0     84 4C B1 FD | 	call	#__system___basic_print_string
10ee4     4A 00 00 FF 
10ee8     94 E4 05 F1 | 	add	objptr, ##38036
10eec     F2 14 02 FB | 	rdlong	arg02, objptr
10ef0     4A 00 00 FF 
10ef4     94 E4 85 F1 | 	sub	objptr, ##38036
10ef8     00 12 06 F6 | 	mov	arg01, #0
10efc     00 16 06 F6 | 	mov	arg03, #0
10f00     64 4C B1 FD | 	call	#__system___basic_print_string
10f04     00 12 06 F6 | 	mov	arg01, #0
10f08     0A 14 06 F6 | 	mov	arg02, #10
10f0c     00 16 06 F6 | 	mov	arg03, #0
10f10     FC 4B B1 FD | 	call	#__system___basic_print_char
10f14     01 26 06 F6 | 	mov	local01, #1
10f18     00 12 06 F6 | 	mov	arg01, #0
10f1c     7C 9C B1 FD | 	call	#__system___getiolock_0595
10f20     FD 00 68 FC | 	wrlong	#0, result1
10f24     00 28 06 F6 | 	mov	local02, #0
10f28     00 2A 06 F6 | 	mov	local03, #0
10f2c                 | ' px=0
10f2c                 | ' for i=0 to 127: filelist(i)="" : next i
10f2c     00 2C 06 F6 | 	mov	local04, #0
10f30     1C 4E 05 F1 | 	add	fp, #28
10f34     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
10f38                 | LR__1410
10f38     16 2F 02 F6 | 	mov	local05, local04
10f3c     02 2E 66 F0 | 	shl	local05, #2
10f40     A7 2E 02 F1 | 	add	local05, fp
10f44     A9 01 00 FF 
10f48     2A 30 06 F6 | 	mov	local06, ##@LR__5794
10f4c     17 31 62 FC | 	wrlong	local06, local05
10f50     01 2C 06 F1 | 	add	local04, #1
10f54     80 2C 56 F2 | 	cmps	local04, #128 wc
10f58     DC FF 9F CD |  if_b	jmp	#LR__1410
10f5c                 | LR__1411
10f5c     1C 4E 85 F1 | 	sub	fp, #28
10f60     A9 01 00 FF 
10f64     2B 12 06 F6 | 	mov	arg01, ##@LR__5795
10f68     10 14 06 F6 | 	mov	arg02, #16
10f6c     64 9D B1 FD | 	call	#__system___basic_dir
10f70     FD 32 02 F6 | 	mov	local07, result1
10f74     00 34 06 F6 | 	mov	local08, #0
10f78                 | ' filename=dir$("*", fbDirectory)
10f78                 | ' n=0
10f78                 | ' while filename <> "" andalso filename <> nil andalso n<128
10f78                 | LR__1412
10f78     A9 01 00 FF 
10f7c     2D 36 06 F6 | 	mov	local09, ##@LR__5796
10f80     19 13 02 F6 | 	mov	arg01, local07
10f84     1B 15 02 F6 | 	mov	arg02, local09
10f88     10 3F B1 FD | 	call	#__system___string_cmp
10f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
10f90     68 00 90 AD |  if_e	jmp	#LR__1413
10f94     00 36 06 F6 | 	mov	local09, #0
10f98     19 13 02 F6 | 	mov	arg01, local07
10f9c     00 14 06 F6 | 	mov	arg02, #0
10fa0     F8 3E B1 FD | 	call	#__system___string_cmp
10fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
10fa8     50 00 90 AD |  if_e	jmp	#LR__1413
10fac     80 34 56 F2 | 	cmps	local08, #128 wc
10fb0     48 00 90 3D |  if_ae	jmp	#LR__1413
10fb4     A9 01 00 FF 
10fb8     2E 12 06 F6 | 	mov	arg01, ##@LR__5797
10fbc     19 15 02 F6 | 	mov	arg02, local07
10fc0     0C 3F B1 FD | 	call	#__system___string_concat
10fc4     FD 32 02 F6 | 	mov	local07, result1
10fc8     1A 2F 02 F6 | 	mov	local05, local08
10fcc     02 2E 66 F0 | 	shl	local05, #2
10fd0     1C 4E 05 F1 | 	add	fp, #28
10fd4     A7 2E 02 F1 | 	add	local05, fp
10fd8     17 33 62 FC | 	wrlong	local07, local05
10fdc     01 34 06 F1 | 	add	local08, #1
10fe0     00 2E 06 F6 | 	mov	local05, #0
10fe4     00 12 06 F6 | 	mov	arg01, #0
10fe8     00 14 06 F6 | 	mov	arg02, #0
10fec     1C 4E 85 F1 | 	sub	fp, #28
10ff0     E0 9C B1 FD | 	call	#__system___basic_dir
10ff4     FD 32 02 F6 | 	mov	local07, result1
10ff8     7C FF 9F FD | 	jmp	#LR__1412
10ffc                 | LR__1413
10ffc                 | ' for i=0 to n-1			' now sort this
10ffc     00 2C 06 F6 | 	mov	local04, #0
11000     1A 39 02 F6 | 	mov	local10, local08
11004                 | LR__1414
11004     1C 2D 52 F2 | 	cmps	local04, local10 wc
11008     DC 00 90 3D |  if_ae	jmp	#LR__1418
1100c     00 3A 06 F6 | 	mov	local11, #0
11010                 | '   swapped=false
11010                 | '   for j=0 to n-i-2
11010     00 3C 06 F6 | 	mov	local12, #0
11014     1A 3F 02 F6 | 	mov	local13, local08
11018     16 3F 82 F1 | 	sub	local13, local04
1101c     01 3E 86 F1 | 	sub	local13, #1
11020                 | LR__1415
11020     1F 3D 52 F2 | 	cmps	local12, local13 wc
11024     B0 00 90 3D |  if_ae	jmp	#LR__1417
11028                 | '     if filelist(j) > filelist(j+1) then
11028     1E 37 02 F6 | 	mov	local09, local12
1102c     02 36 66 F0 | 	shl	local09, #2
11030     1C 4E 05 F1 | 	add	fp, #28
11034     A7 36 02 F1 | 	add	local09, fp
11038     1B 13 02 FB | 	rdlong	arg01, local09
1103c     1E 37 02 F6 | 	mov	local09, local12
11040     01 36 06 F1 | 	add	local09, #1
11044     1B 31 02 F6 | 	mov	local06, local09
11048     02 30 66 F0 | 	shl	local06, #2
1104c     A7 26 02 F6 | 	mov	local01, fp
11050     A7 30 02 F1 | 	add	local06, fp
11054     18 2F 02 FB | 	rdlong	local05, local06
11058     17 15 02 F6 | 	mov	arg02, local05
1105c     1C 4E 85 F1 | 	sub	fp, #28
11060     38 3E B1 FD | 	call	#__system___string_cmp
11064     01 FA 55 F2 | 	cmps	result1, #1 wc
11068     64 00 90 CD |  if_b	jmp	#LR__1416
1106c     1E 37 02 F6 | 	mov	local09, local12
11070     01 36 06 F1 | 	add	local09, #1
11074     02 36 66 F0 | 	shl	local09, #2
11078     1C 4E 05 F1 | 	add	fp, #28
1107c     A7 36 02 F1 | 	add	local09, fp
11080     1B 3B 02 FB | 	rdlong	local11, local09
11084     1E 31 02 F6 | 	mov	local06, local12
11088     02 30 66 F0 | 	shl	local06, #2
1108c     A7 30 02 F1 | 	add	local06, fp
11090     18 2F 02 FB | 	rdlong	local05, local06
11094     1E 37 02 F6 | 	mov	local09, local12
11098     1B 31 02 F6 | 	mov	local06, local09
1109c     02 30 66 F0 | 	shl	local06, #2
110a0     A7 26 02 F6 | 	mov	local01, fp
110a4     A7 30 02 F1 | 	add	local06, fp
110a8     18 3B 62 FC | 	wrlong	local11, local06
110ac     1E 29 02 F6 | 	mov	local02, local12
110b0     01 28 06 F1 | 	add	local02, #1
110b4     14 41 02 F6 | 	mov	local14, local02
110b8     02 40 66 F0 | 	shl	local14, #2
110bc     A7 42 02 F6 | 	mov	local15, fp
110c0     A7 40 02 F1 | 	add	local14, fp
110c4     20 2F 62 FC | 	wrlong	local05, local14
110c8     01 3A 66 F6 | 	neg	local11, #1
110cc     1C 4E 85 F1 | 	sub	fp, #28
110d0                 | LR__1416
110d0     01 3C 06 F1 | 	add	local12, #1
110d4     48 FF 9F FD | 	jmp	#LR__1415
110d8                 | LR__1417
110d8                 | ' if not swapped then exit for
110d8     1D 45 22 F6 | 	not	local16, local11
110dc     00 44 0E F2 | 	cmp	local16, #0 wz
110e0     01 2C 06 A1 |  if_e	add	local04, #1
110e4     1C FF 9F AD |  if_e	jmp	#LR__1414
110e8                 | LR__1418
110e8                 | ' for i=0 to n-1
110e8     00 2C 06 F6 | 	mov	local04, #0
110ec     1A 47 02 F6 | 	mov	local17, local08
110f0                 | LR__1419
110f0     23 2D 52 F2 | 	cmps	local04, local17 wc
110f4     94 00 90 3D |  if_ae	jmp	#LR__1421
110f8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
110f8     00 12 06 F6 | 	mov	arg01, #0
110fc     9C 9A B1 FD | 	call	#__system___getiolock_0595
11100     FD 12 02 F6 | 	mov	arg01, result1
11104     6C 3D B1 FD | 	call	#__system___lockmem
11108     16 29 02 F6 | 	mov	local02, local04
1110c     02 28 66 F0 | 	shl	local02, #2
11110     1C 4E 05 F1 | 	add	fp, #28
11114     A7 40 02 F6 | 	mov	local14, fp
11118     A7 28 02 F1 | 	add	local02, fp
1111c     14 15 02 FB | 	rdlong	arg02, local02
11120     00 26 06 F6 | 	mov	local01, #0
11124     00 12 06 F6 | 	mov	arg01, #0
11128     00 16 06 F6 | 	mov	arg03, #0
1112c     1C 4E 85 F1 | 	sub	fp, #28
11130     34 4A B1 FD | 	call	#__system___basic_print_string
11134     00 12 06 F6 | 	mov	arg01, #0
11138     60 9A B1 FD | 	call	#__system___getiolock_0595
1113c     FD 00 68 FC | 	wrlong	#0, result1
11140     40 2A 06 F1 | 	add	local03, #64
11144     15 13 02 F6 | 	mov	arg01, local03
11148     18 20 B1 FD | 	call	#_hg010b_spin2_setcursorx
1114c     00 2B 56 F2 | 	cmps	local03, #256 wc
11150     30 00 90 CD |  if_b	jmp	#LR__1420
11154     00 2A 06 F6 | 	mov	local03, #0
11158     00 12 06 F6 | 	mov	arg01, #0
1115c     3C 9A B1 FD | 	call	#__system___getiolock_0595
11160     FD 12 02 F6 | 	mov	arg01, result1
11164     0C 3D B1 FD | 	call	#__system___lockmem
11168     00 12 06 F6 | 	mov	arg01, #0
1116c     0A 14 06 F6 | 	mov	arg02, #10
11170     00 16 06 F6 | 	mov	arg03, #0
11174     98 49 B1 FD | 	call	#__system___basic_print_char
11178     00 12 06 F6 | 	mov	arg01, #0
1117c     1C 9A B1 FD | 	call	#__system___getiolock_0595
11180     FD 00 68 FC | 	wrlong	#0, result1
11184                 | LR__1420
11184     01 2C 06 F1 | 	add	local04, #1
11188     64 FF 9F FD | 	jmp	#LR__1419
1118c                 | LR__1421
1118c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1118c     80 34 56 F2 | 	cmps	local08, #128 wc
11190     44 00 90 CD |  if_b	jmp	#LR__1422
11194     00 12 06 F6 | 	mov	arg01, #0
11198     00 9A B1 FD | 	call	#__system___getiolock_0595
1119c     FD 12 02 F6 | 	mov	arg01, result1
111a0     D0 3C B1 FD | 	call	#__system___lockmem
111a4     A9 01 00 FF 
111a8     35 14 06 F6 | 	mov	arg02, ##@LR__5798
111ac     00 12 06 F6 | 	mov	arg01, #0
111b0     00 16 06 F6 | 	mov	arg03, #0
111b4     B0 49 B1 FD | 	call	#__system___basic_print_string
111b8     00 12 06 F6 | 	mov	arg01, #0
111bc     0A 14 06 F6 | 	mov	arg02, #10
111c0     00 16 06 F6 | 	mov	arg03, #0
111c4     48 49 B1 FD | 	call	#__system___basic_print_char
111c8     00 12 06 F6 | 	mov	arg01, #0
111cc     CC 99 B1 FD | 	call	#__system___getiolock_0595
111d0     FD 00 68 FC | 	wrlong	#0, result1
111d4     00 26 06 F6 | 	mov	local01, #0
111d8                 | LR__1422
111d8                 | ' print
111d8     00 12 06 F6 | 	mov	arg01, #0
111dc     BC 99 B1 FD | 	call	#__system___getiolock_0595
111e0     FD 12 02 F6 | 	mov	arg01, result1
111e4     8C 3C B1 FD | 	call	#__system___lockmem
111e8     00 12 06 F6 | 	mov	arg01, #0
111ec     0A 14 06 F6 | 	mov	arg02, #10
111f0     00 16 06 F6 | 	mov	arg03, #0
111f4     18 49 B1 FD | 	call	#__system___basic_print_char
111f8     00 12 06 F6 | 	mov	arg01, #0
111fc     9C 99 B1 FD | 	call	#__system___getiolock_0595
11200     FD 00 68 FC | 	wrlong	#0, result1
11204     00 30 06 F6 | 	mov	local06, #0
11208     00 34 06 F6 | 	mov	local08, #0
1120c     00 2A 06 F6 | 	mov	local03, #0
11210                 | ' return cursor_y
11210     3E E4 05 F1 | 	add	objptr, #62
11214     F2 48 C2 FA | 	rdbyte	local18, objptr
11218     3E E4 85 F1 | 	sub	objptr, #62
1121c     A9 01 00 FF 
11220     67 12 06 F6 | 	mov	arg01, ##@LR__5799
11224     21 14 06 F6 | 	mov	arg02, #33
11228     A8 9A B1 FD | 	call	#__system___basic_dir
1122c     FD 32 02 F6 | 	mov	local07, result1
11230                 | ' n=0
11230                 | ' px=0: py=v.getcursory()
11230                 | ' filename = dir$("*", fbNormal )   
11230                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11230                 | LR__1423
11230     A9 01 00 FF 
11234     69 36 06 F6 | 	mov	local09, ##@LR__5800
11238     19 13 02 F6 | 	mov	arg01, local07
1123c     1B 15 02 F6 | 	mov	arg02, local09
11240     58 3C B1 FD | 	call	#__system___string_cmp
11244     00 FA 0D F2 | 	cmp	result1, #0 wz
11248     54 00 90 AD |  if_e	jmp	#LR__1424
1124c     00 36 06 F6 | 	mov	local09, #0
11250     19 13 02 F6 | 	mov	arg01, local07
11254     00 14 06 F6 | 	mov	arg02, #0
11258     40 3C B1 FD | 	call	#__system___string_cmp
1125c     00 FA 0D F2 | 	cmp	result1, #0 wz
11260     3C 00 90 AD |  if_e	jmp	#LR__1424
11264     80 34 56 F2 | 	cmps	local08, #128 wc
11268     34 00 90 3D |  if_ae	jmp	#LR__1424
1126c     1A 2F 02 F6 | 	mov	local05, local08
11270     02 2E 66 F0 | 	shl	local05, #2
11274     1C 4E 05 F1 | 	add	fp, #28
11278     A7 2E 02 F1 | 	add	local05, fp
1127c     17 33 62 FC | 	wrlong	local07, local05
11280     01 34 06 F1 | 	add	local08, #1
11284     00 2E 06 F6 | 	mov	local05, #0
11288     00 12 06 F6 | 	mov	arg01, #0
1128c     00 14 06 F6 | 	mov	arg02, #0
11290     1C 4E 85 F1 | 	sub	fp, #28
11294     3C 9A B1 FD | 	call	#__system___basic_dir
11298     FD 32 02 F6 | 	mov	local07, result1
1129c     90 FF 9F FD | 	jmp	#LR__1423
112a0                 | LR__1424
112a0                 | ' for i =0 to n-1
112a0     00 2C 06 F6 | 	mov	local04, #0
112a4                 | LR__1425
112a4     1A 2D 52 F2 | 	cmps	local04, local08 wc
112a8     D8 00 90 3D |  if_ae	jmp	#LR__1429
112ac     00 3A 06 F6 | 	mov	local11, #0
112b0                 | '   swapped=false
112b0                 | '   for j=0 to n-i-2
112b0     00 3C 06 F6 | 	mov	local12, #0
112b4     1A 4B 02 F6 | 	mov	local19, local08
112b8     16 4B 82 F1 | 	sub	local19, local04
112bc     01 4A 86 F1 | 	sub	local19, #1
112c0                 | LR__1426
112c0     25 3D 52 F2 | 	cmps	local12, local19 wc
112c4     AC 00 90 3D |  if_ae	jmp	#LR__1428
112c8                 | '     if filelist(j) > filelist(j+1) then
112c8     1E 37 02 F6 | 	mov	local09, local12
112cc     02 36 66 F0 | 	shl	local09, #2
112d0     1C 4E 05 F1 | 	add	fp, #28
112d4     A7 36 02 F1 | 	add	local09, fp
112d8     1B 13 02 FB | 	rdlong	arg01, local09
112dc     1E 37 02 F6 | 	mov	local09, local12
112e0     01 36 06 F1 | 	add	local09, #1
112e4     1B 31 02 F6 | 	mov	local06, local09
112e8     02 30 66 F0 | 	shl	local06, #2
112ec     A7 26 02 F6 | 	mov	local01, fp
112f0     A7 30 02 F1 | 	add	local06, fp
112f4     18 2F 02 FB | 	rdlong	local05, local06
112f8     17 15 02 F6 | 	mov	arg02, local05
112fc     1C 4E 85 F1 | 	sub	fp, #28
11300     98 3B B1 FD | 	call	#__system___string_cmp
11304     01 FA 55 F2 | 	cmps	result1, #1 wc
11308     60 00 90 CD |  if_b	jmp	#LR__1427
1130c     1E 37 02 F6 | 	mov	local09, local12
11310     01 36 06 F1 | 	add	local09, #1
11314     02 36 66 F0 | 	shl	local09, #2
11318     1C 4E 05 F1 | 	add	fp, #28
1131c     A7 36 02 F1 | 	add	local09, fp
11320     1B 45 02 FB | 	rdlong	local16, local09
11324     1E 31 02 F6 | 	mov	local06, local12
11328     02 30 66 F0 | 	shl	local06, #2
1132c     A7 30 02 F1 | 	add	local06, fp
11330     18 2F 02 FB | 	rdlong	local05, local06
11334     1E 37 02 F6 | 	mov	local09, local12
11338     1B 31 02 F6 | 	mov	local06, local09
1133c     02 30 66 F0 | 	shl	local06, #2
11340     A7 26 02 F6 | 	mov	local01, fp
11344     A7 30 02 F1 | 	add	local06, fp
11348     18 45 62 FC | 	wrlong	local16, local06
1134c     1E 41 02 F6 | 	mov	local14, local12
11350     01 40 06 F1 | 	add	local14, #1
11354     02 40 66 F0 | 	shl	local14, #2
11358     A7 42 02 F6 | 	mov	local15, fp
1135c     A7 40 02 F1 | 	add	local14, fp
11360     20 2F 62 FC | 	wrlong	local05, local14
11364     01 3A 66 F6 | 	neg	local11, #1
11368     1C 4E 85 F1 | 	sub	fp, #28
1136c                 | LR__1427
1136c     01 3C 06 F1 | 	add	local12, #1
11370     4C FF 9F FD | 	jmp	#LR__1426
11374                 | LR__1428
11374                 | ' if not swapped then exit for
11374     1D 45 22 F6 | 	not	local16, local11
11378     00 44 0E F2 | 	cmp	local16, #0 wz
1137c     01 2C 06 A1 |  if_e	add	local04, #1
11380     20 FF 9F AD |  if_e	jmp	#LR__1425
11384                 | LR__1429
11384                 | ' for i=0 to n-1
11384     00 2C 06 F6 | 	mov	local04, #0
11388                 | LR__1430
11388     1A 2D 52 F2 | 	cmps	local04, local08 wc
1138c     8C 00 90 3D |  if_ae	jmp	#LR__1432
11390                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11390     00 12 06 F6 | 	mov	arg01, #0
11394     04 98 B1 FD | 	call	#__system___getiolock_0595
11398     FD 12 02 F6 | 	mov	arg01, result1
1139c     D4 3A B1 FD | 	call	#__system___lockmem
113a0     16 29 02 F6 | 	mov	local02, local04
113a4     02 28 66 F0 | 	shl	local02, #2
113a8     1C 4E 05 F1 | 	add	fp, #28
113ac     A7 28 02 F1 | 	add	local02, fp
113b0     14 15 02 FB | 	rdlong	arg02, local02
113b4     00 12 06 F6 | 	mov	arg01, #0
113b8     00 16 06 F6 | 	mov	arg03, #0
113bc     1C 4E 85 F1 | 	sub	fp, #28
113c0     A4 47 B1 FD | 	call	#__system___basic_print_string
113c4     00 12 06 F6 | 	mov	arg01, #0
113c8     D0 97 B1 FD | 	call	#__system___getiolock_0595
113cc     FD 00 68 FC | 	wrlong	#0, result1
113d0     40 2A 06 F1 | 	add	local03, #64
113d4     15 13 02 F6 | 	mov	arg01, local03
113d8     88 1D B1 FD | 	call	#_hg010b_spin2_setcursorx
113dc     00 2B 56 F2 | 	cmps	local03, #256 wc
113e0     30 00 90 CD |  if_b	jmp	#LR__1431
113e4     00 2A 06 F6 | 	mov	local03, #0
113e8     00 12 06 F6 | 	mov	arg01, #0
113ec     AC 97 B1 FD | 	call	#__system___getiolock_0595
113f0     FD 12 02 F6 | 	mov	arg01, result1
113f4     7C 3A B1 FD | 	call	#__system___lockmem
113f8     00 12 06 F6 | 	mov	arg01, #0
113fc     0A 14 06 F6 | 	mov	arg02, #10
11400     00 16 06 F6 | 	mov	arg03, #0
11404     08 47 B1 FD | 	call	#__system___basic_print_char
11408     00 12 06 F6 | 	mov	arg01, #0
1140c     8C 97 B1 FD | 	call	#__system___getiolock_0595
11410     FD 00 68 FC | 	wrlong	#0, result1
11414                 | LR__1431
11414     01 2C 06 F1 | 	add	local04, #1
11418     6C FF 9F FD | 	jmp	#LR__1430
1141c                 | LR__1432
1141c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1141c     80 34 56 F2 | 	cmps	local08, #128 wc
11420     40 00 90 CD |  if_b	jmp	#LR__1433
11424     00 12 06 F6 | 	mov	arg01, #0
11428     70 97 B1 FD | 	call	#__system___getiolock_0595
1142c     FD 12 02 F6 | 	mov	arg01, result1
11430     40 3A B1 FD | 	call	#__system___lockmem
11434     A9 01 00 FF 
11438     6A 14 06 F6 | 	mov	arg02, ##@LR__5801
1143c     00 12 06 F6 | 	mov	arg01, #0
11440     00 16 06 F6 | 	mov	arg03, #0
11444     20 47 B1 FD | 	call	#__system___basic_print_string
11448     00 12 06 F6 | 	mov	arg01, #0
1144c     0A 14 06 F6 | 	mov	arg02, #10
11450     00 16 06 F6 | 	mov	arg03, #0
11454     B8 46 B1 FD | 	call	#__system___basic_print_char
11458     00 12 06 F6 | 	mov	arg01, #0
1145c     3C 97 B1 FD | 	call	#__system___getiolock_0595
11460     FD 00 68 FC | 	wrlong	#0, result1
11464                 | LR__1433
11464                 | ' print
11464     00 12 06 F6 | 	mov	arg01, #0
11468     30 97 B1 FD | 	call	#__system___getiolock_0595
1146c     FD 12 02 F6 | 	mov	arg01, result1
11470     00 3A B1 FD | 	call	#__system___lockmem
11474     00 12 06 F6 | 	mov	arg01, #0
11478     0A 14 06 F6 | 	mov	arg02, #10
1147c     00 16 06 F6 | 	mov	arg03, #0
11480     8C 46 B1 FD | 	call	#__system___basic_print_char
11484     00 12 06 F6 | 	mov	arg01, #0
11488     10 97 B1 FD | 	call	#__system___getiolock_0595
1148c     FD 00 68 FC | 	wrlong	#0, result1
11490     A7 F0 03 F6 | 	mov	ptra, fp
11494     B2 00 A0 FD | 	call	#popregs_
11498                 | _do_dir_ret
11498     2D 00 64 FD | 	ret
1149c                 | 
1149c                 | ' 
1149c                 | ' '-------------------- dpeek
1149c                 | ' 
1149c                 | ' sub do_dpeek
1149c                 | _do_dpeek
1149c     00 4A 05 F6 | 	mov	COUNT_, #0
114a0     A8 00 A0 FD | 	call	#pushregs_
114a4     14 F0 07 F1 | 	add	ptra, #20
114a8     E0 B6 BF FD | 	call	#_pop
114ac     A7 FA 61 FC | 	wrlong	result1, fp
114b0     04 4E 05 F1 | 	add	fp, #4
114b4     A7 FC 61 FC | 	wrlong	result2, fp
114b8     04 4E 05 F1 | 	add	fp, #4
114bc     A7 FE 61 FC | 	wrlong	result3, fp
114c0     08 4E 85 F1 | 	sub	fp, #8
114c4     A7 12 02 F6 | 	mov	arg01, fp
114c8     A4 B8 BF FD | 	call	#_converttoint
114cc     0C 4E 05 F1 | 	add	fp, #12
114d0     A7 FA 61 FC | 	wrlong	result1, fp
114d4                 | ' 
114d4                 | ' t1=pop()
114d4                 | ' a=converttoint(t1)
114d4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
114d4     0C 4E 85 F1 | 	sub	fp, #12
114d8     00 04 00 FF 
114dc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
114e0     1C 00 90 3D |  if_ae	jmp	#LR__1440
114e4     0C 4E 05 F1 | 	add	fp, #12
114e8     A7 12 02 FB | 	rdlong	arg01, fp
114ec     09 FB E1 FA | 	rdword	result1, arg01
114f0     04 4E 05 F1 | 	add	fp, #4
114f4     A7 FA 61 FC | 	wrlong	result1, fp
114f8     10 4E 85 F1 | 	sub	fp, #16
114fc     1C 00 90 FD | 	jmp	#LR__1441
11500                 | LR__1440
11500     0C 4E 05 F1 | 	add	fp, #12
11504     A7 12 02 FB | 	rdlong	arg01, fp
11508     0C 4E 85 F1 | 	sub	fp, #12
1150c     E8 02 B1 FD | 	call	#_psdpeek
11510     10 4E 05 F1 | 	add	fp, #16
11514     A7 FA 61 FC | 	wrlong	result1, fp
11518     10 4E 85 F1 | 	sub	fp, #16
1151c                 | LR__1441
1151c     08 4E 05 F1 | 	add	fp, #8
11520     A7 3A 68 FC | 	wrlong	#29, fp
11524     08 4E 05 F1 | 	add	fp, #8
11528     A7 12 02 FB | 	rdlong	arg01, fp
1152c     10 4E 85 F1 | 	sub	fp, #16
11530     A7 12 62 FC | 	wrlong	arg01, fp
11534     A7 12 02 F6 | 	mov	arg01, fp
11538     E8 B6 BF FD | 	call	#_push
1153c     A7 F0 03 F6 | 	mov	ptra, fp
11540     B2 00 A0 FD | 	call	#popregs_
11544                 | _do_dpeek_ret
11544     2D 00 64 FD | 	ret
11548                 | 
11548                 | ' 
11548                 | ' '-------------------- dpoke
11548                 | ' 
11548                 | ' sub do_dpoke
11548                 | _do_dpoke
11548     01 4A 05 F6 | 	mov	COUNT_, #1
1154c     A8 00 A0 FD | 	call	#pushregs_
11550     20 F0 07 F1 | 	add	ptra, #32
11554     34 B6 BF FD | 	call	#_pop
11558     FD 14 02 F6 | 	mov	arg02, result1
1155c     FE 12 02 F6 | 	mov	arg01, result2
11560     FF 26 02 F6 | 	mov	local01, result3
11564     A7 14 62 FC | 	wrlong	arg02, fp
11568     04 4E 05 F1 | 	add	fp, #4
1156c     A7 12 62 FC | 	wrlong	arg01, fp
11570     04 4E 05 F1 | 	add	fp, #4
11574     A7 26 62 FC | 	wrlong	local01, fp
11578     08 4E 85 F1 | 	sub	fp, #8
1157c     0C B6 BF FD | 	call	#_pop
11580     FF 26 02 F6 | 	mov	local01, result3
11584     0C 4E 05 F1 | 	add	fp, #12
11588     A7 FA 61 FC | 	wrlong	result1, fp
1158c     04 4E 05 F1 | 	add	fp, #4
11590     A7 FC 61 FC | 	wrlong	result2, fp
11594     04 4E 05 F1 | 	add	fp, #4
11598     A7 26 62 FC | 	wrlong	local01, fp
1159c     08 4E 85 F1 | 	sub	fp, #8
115a0     A7 12 02 F6 | 	mov	arg01, fp
115a4     0C 4E 85 F1 | 	sub	fp, #12
115a8     C4 B7 BF FD | 	call	#_converttoint
115ac     18 4E 05 F1 | 	add	fp, #24
115b0     A7 FA 61 FC | 	wrlong	result1, fp
115b4     18 4E 85 F1 | 	sub	fp, #24
115b8     A7 12 02 F6 | 	mov	arg01, fp
115bc     B0 B7 BF FD | 	call	#_converttoint
115c0     1C 4E 05 F1 | 	add	fp, #28
115c4     A7 FA 61 FC | 	wrlong	result1, fp
115c8                 | ' 
115c8                 | ' t1=pop() 'value
115c8                 | ' t2=pop() 
115c8                 | ' a=converttoint(t2) : v=converttoint(t1)
115c8                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
115c8     04 4E 85 F1 | 	sub	fp, #4
115cc     A7 26 02 FB | 	rdlong	local01, fp
115d0     18 4E 85 F1 | 	sub	fp, #24
115d4     00 04 00 FF 
115d8     00 26 16 F2 | 	cmp	local01, ##524288 wc
115dc     1C 00 90 3D |  if_ae	jmp	#LR__1450
115e0     18 4E 05 F1 | 	add	fp, #24
115e4     A7 12 02 FB | 	rdlong	arg01, fp
115e8     04 4E 05 F1 | 	add	fp, #4
115ec     A7 14 02 FB | 	rdlong	arg02, fp
115f0     1C 4E 85 F1 | 	sub	fp, #28
115f4     09 15 52 FC | 	wrword	arg02, arg01
115f8     18 00 90 FD | 	jmp	#LR__1451
115fc                 | LR__1450
115fc     18 4E 05 F1 | 	add	fp, #24
11600     A7 12 02 FB | 	rdlong	arg01, fp
11604     04 4E 05 F1 | 	add	fp, #4
11608     A7 14 02 FB | 	rdlong	arg02, fp
1160c     1C 4E 85 F1 | 	sub	fp, #28
11610     A4 00 B1 FD | 	call	#_psdpoke
11614                 | LR__1451
11614     A7 F0 03 F6 | 	mov	ptra, fp
11618     B2 00 A0 FD | 	call	#popregs_
1161c                 | _do_dpoke_ret
1161c     2D 00 64 FD | 	ret
11620                 | 
11620                 | ' '-------------------- draw
11620                 | ' 
11620                 | ' sub do_draw
11620                 | _do_draw
11620     00 4A 05 F6 | 	mov	COUNT_, #0
11624     A8 00 A0 FD | 	call	#pushregs_
11628     20 F0 07 F1 | 	add	ptra, #32
1162c     5C B5 BF FD | 	call	#_pop
11630     FD 1A 02 F6 | 	mov	arg05, result1
11634     FE 18 02 F6 | 	mov	arg04, result2
11638     FF 16 02 F6 | 	mov	arg03, result3
1163c     0C 4E 05 F1 | 	add	fp, #12
11640     A7 1A 62 FC | 	wrlong	arg05, fp
11644     04 4E 05 F1 | 	add	fp, #4
11648     A7 18 62 FC | 	wrlong	arg04, fp
1164c     04 4E 05 F1 | 	add	fp, #4
11650     A7 16 62 FC | 	wrlong	arg03, fp
11654     14 4E 85 F1 | 	sub	fp, #20
11658     30 B5 BF FD | 	call	#_pop
1165c     FF 1A 02 F6 | 	mov	arg05, result3
11660     A7 FA 61 FC | 	wrlong	result1, fp
11664     04 4E 05 F1 | 	add	fp, #4
11668     A7 FC 61 FC | 	wrlong	result2, fp
1166c     04 4E 05 F1 | 	add	fp, #4
11670     A7 1A 62 FC | 	wrlong	arg05, fp
11674     08 4E 85 F1 | 	sub	fp, #8
11678     A7 12 02 F6 | 	mov	arg01, fp
1167c     F0 B6 BF FD | 	call	#_converttoint
11680     18 4E 05 F1 | 	add	fp, #24
11684     A7 FA 61 FC | 	wrlong	result1, fp
11688     0C 4E 85 F1 | 	sub	fp, #12
1168c     A7 12 02 F6 | 	mov	arg01, fp
11690     0C 4E 85 F1 | 	sub	fp, #12
11694     D8 B6 BF FD | 	call	#_converttoint
11698     1C 4E 05 F1 | 	add	fp, #28
1169c     A7 FA 61 FC | 	wrlong	result1, fp
116a0     37 00 00 FF 
116a4     2C E4 05 F1 | 	add	objptr, ##28204
116a8     F2 12 02 FB | 	rdlong	arg01, objptr
116ac     04 E4 05 F1 | 	add	objptr, #4
116b0     F2 14 02 FB | 	rdlong	arg02, objptr
116b4     04 4E 85 F1 | 	sub	fp, #4
116b8     A7 16 02 FB | 	rdlong	arg03, fp
116bc     FD 18 02 F6 | 	mov	arg04, result1
116c0     18 4E 85 F1 | 	sub	fp, #24
116c4     08 E4 85 F1 | 	sub	objptr, #8
116c8     F2 1A 02 FB | 	rdlong	arg05, objptr
116cc     37 00 00 FF 
116d0     28 E4 85 F1 | 	sub	objptr, ##28200
116d4     3C 11 B1 FD | 	call	#_hg010b_spin2_draw
116d8     18 4E 05 F1 | 	add	fp, #24
116dc     A7 1A 02 FB | 	rdlong	arg05, fp
116e0     37 00 00 FF 
116e4     2C E4 05 F1 | 	add	objptr, ##28204
116e8     F2 1A 62 FC | 	wrlong	arg05, objptr
116ec     04 4E 05 F1 | 	add	fp, #4
116f0     A7 1A 02 FB | 	rdlong	arg05, fp
116f4     1C 4E 85 F1 | 	sub	fp, #28
116f8     04 E4 05 F1 | 	add	objptr, #4
116fc     F2 1A 62 FC | 	wrlong	arg05, objptr
11700     37 00 00 FF 
11704     30 E4 85 F1 | 	sub	objptr, ##28208
11708     A7 F0 03 F6 | 	mov	ptra, fp
1170c     B2 00 A0 FD | 	call	#popregs_
11710                 | _do_draw_ret
11710     2D 00 64 FD | 	ret
11714                 | 
11714                 | ' 
11714                 | ' '-------------------- else
11714                 | ' 
11714                 | ' sub do_else
11714                 | _do_else
11714     4A 00 00 FF 
11718     7C E4 05 F1 | 	add	objptr, ##38012
1171c     F2 00 02 FB | 	rdlong	_var01, objptr
11720     01 00 86 F1 | 	sub	_var01, #1
11724     04 E4 05 F1 | 	add	objptr, #4
11728     F2 00 62 FC | 	wrlong	_var01, objptr
1172c     4A 00 00 FF 
11730     80 E4 85 F1 | 	sub	objptr, ##38016
11734                 | _do_else_ret
11734     2D 00 64 FD | 	ret
11738                 | 
11738                 | ' 
11738                 | ' '-------------------- end
11738                 | ' 
11738                 | ' sub do_end
11738                 | _do_end
11738     4A 00 00 FF 
1173c     7C E4 05 F1 | 	add	objptr, ##38012
11740     F2 00 02 FB | 	rdlong	_var01, objptr
11744     01 00 86 F1 | 	sub	_var01, #1
11748     04 E4 05 F1 | 	add	objptr, #4
1174c     F2 00 62 FC | 	wrlong	_var01, objptr
11750     06 00 00 FF 
11754     38 E4 05 F1 | 	add	objptr, ##3128
11758     FF FF BF FF 
1175c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11760     50 00 00 FF 
11764     B8 E4 85 F1 | 	sub	objptr, ##41144
11768                 | _do_end_ret
11768     2D 00 64 FD | 	ret
1176c                 | 
1176c                 | ' 
1176c                 | ' '-------------------- enter
1176c                 | ' 
1176c                 | ' sub do_enter
1176c                 | _do_enter
1176c     02 00 00 FF 
11770     D2 12 06 F6 | 	mov	arg01, ##1234
11774     A0 2E B0 FD | 	call	#_do_load
11778                 | _do_enter_ret
11778     2D 00 64 FD | 	ret
1177c                 | 
1177c                 | ' 
1177c                 | ' '------------------- error processing
1177c                 | ' 
1177c                 | ' sub do_error
1177c                 | _do_error
1177c     01 4A 05 F6 | 	mov	COUNT_, #1
11780     A8 00 A0 FD | 	call	#pushregs_
11784     4A 00 00 FF 
11788     80 E4 05 F1 | 	add	objptr, ##38016
1178c     F2 18 02 FB | 	rdlong	arg04, objptr
11790     0C 17 02 F6 | 	mov	arg03, arg04
11794     01 16 66 F0 | 	shl	arg03, #1
11798     0C 17 02 F1 | 	add	arg03, arg04
1179c     02 16 66 F0 | 	shl	arg03, #2
117a0     03 00 00 FF 
117a4     04 E4 85 F1 | 	sub	objptr, ##1540
117a8     F2 16 02 F1 | 	add	arg03, objptr
117ac     0B 27 02 FB | 	rdlong	local01, arg03
117b0                 | ' r=compiledline(lineptr_e).result.uresult
117b0                 | ' print "Error ";r;": ";errors$(r)
117b0     00 12 06 F6 | 	mov	arg01, #0
117b4     47 00 00 FF 
117b8     7C E4 85 F1 | 	sub	objptr, ##36476
117bc     DC 93 B1 FD | 	call	#__system___getiolock_0595
117c0     FD 12 02 F6 | 	mov	arg01, result1
117c4     AC 36 B1 FD | 	call	#__system___lockmem
117c8     A9 01 00 FF 
117cc     9C 14 06 F6 | 	mov	arg02, ##@LR__5802
117d0     00 12 06 F6 | 	mov	arg01, #0
117d4     00 16 06 F6 | 	mov	arg03, #0
117d8     8C 43 B1 FD | 	call	#__system___basic_print_string
117dc     00 12 06 F6 | 	mov	arg01, #0
117e0     13 15 02 F6 | 	mov	arg02, local01
117e4     00 16 06 F6 | 	mov	arg03, #0
117e8     0A 18 06 F6 | 	mov	arg04, #10
117ec     FC 43 B1 FD | 	call	#__system___basic_print_unsigned
117f0     A9 01 00 FF 
117f4     A3 14 06 F6 | 	mov	arg02, ##@LR__5803
117f8     00 12 06 F6 | 	mov	arg01, #0
117fc     00 16 06 F6 | 	mov	arg03, #0
11800     64 43 B1 FD | 	call	#__system___basic_print_string
11804     02 26 66 F0 | 	shl	local01, #2
11808     45 00 00 FF 
1180c     7C E4 05 F1 | 	add	objptr, ##35452
11810     F2 26 02 F1 | 	add	local01, objptr
11814     13 15 02 FB | 	rdlong	arg02, local01
11818     00 12 06 F6 | 	mov	arg01, #0
1181c     00 16 06 F6 | 	mov	arg03, #0
11820     45 00 00 FF 
11824     7C E4 85 F1 | 	sub	objptr, ##35452
11828     3C 43 B1 FD | 	call	#__system___basic_print_string
1182c     00 12 06 F6 | 	mov	arg01, #0
11830     0A 14 06 F6 | 	mov	arg02, #10
11834     00 16 06 F6 | 	mov	arg03, #0
11838     D4 42 B1 FD | 	call	#__system___basic_print_char
1183c     00 12 06 F6 | 	mov	arg01, #0
11840     58 93 B1 FD | 	call	#__system___getiolock_0595
11844     FD 00 68 FC | 	wrlong	#0, result1
11848     A7 F0 03 F6 | 	mov	ptra, fp
1184c     B2 00 A0 FD | 	call	#popregs_
11850                 | _do_error_ret
11850     2D 00 64 FD | 	ret
11854                 | 
11854                 | ' 
11854                 | ' '-------------------- fcircle
11854                 | ' 
11854                 | ' sub do_fcircle
11854                 | _do_fcircle
11854     02 4A 05 F6 | 	mov	COUNT_, #2
11858     A8 00 A0 FD | 	call	#pushregs_
1185c     24 F0 07 F1 | 	add	ptra, #36
11860     28 B3 BF FD | 	call	#_pop
11864     FD 14 02 F6 | 	mov	arg02, result1
11868     FE 18 02 F6 | 	mov	arg04, result2
1186c     FF 16 02 F6 | 	mov	arg03, result3
11870     18 4E 05 F1 | 	add	fp, #24
11874     A7 14 62 FC | 	wrlong	arg02, fp
11878     04 4E 05 F1 | 	add	fp, #4
1187c     A7 18 62 FC | 	wrlong	arg04, fp
11880     04 4E 05 F1 | 	add	fp, #4
11884     A7 16 62 FC | 	wrlong	arg03, fp
11888     20 4E 85 F1 | 	sub	fp, #32
1188c     FC B2 BF FD | 	call	#_pop
11890     FD 14 02 F6 | 	mov	arg02, result1
11894     FE 18 02 F6 | 	mov	arg04, result2
11898     FF 16 02 F6 | 	mov	arg03, result3
1189c     0C 4E 05 F1 | 	add	fp, #12
118a0     A7 14 62 FC | 	wrlong	arg02, fp
118a4     04 4E 05 F1 | 	add	fp, #4
118a8     A7 18 62 FC | 	wrlong	arg04, fp
118ac     04 4E 05 F1 | 	add	fp, #4
118b0     A7 16 62 FC | 	wrlong	arg03, fp
118b4     14 4E 85 F1 | 	sub	fp, #20
118b8     D0 B2 BF FD | 	call	#_pop
118bc     FF 14 02 F6 | 	mov	arg02, result3
118c0     A7 FA 61 FC | 	wrlong	result1, fp
118c4     04 4E 05 F1 | 	add	fp, #4
118c8     A7 FC 61 FC | 	wrlong	result2, fp
118cc     04 4E 05 F1 | 	add	fp, #4
118d0     A7 14 62 FC | 	wrlong	arg02, fp
118d4     08 4E 85 F1 | 	sub	fp, #8
118d8     A7 12 02 F6 | 	mov	arg01, fp
118dc     90 B4 BF FD | 	call	#_converttoint
118e0     FD 26 02 F6 | 	mov	local01, result1
118e4     0C 4E 05 F1 | 	add	fp, #12
118e8     A7 12 02 F6 | 	mov	arg01, fp
118ec     0C 4E 85 F1 | 	sub	fp, #12
118f0     7C B4 BF FD | 	call	#_converttoint
118f4     FD 28 02 F6 | 	mov	local02, result1
118f8     18 4E 05 F1 | 	add	fp, #24
118fc     A7 12 02 F6 | 	mov	arg01, fp
11900     18 4E 85 F1 | 	sub	fp, #24
11904     68 B4 BF FD | 	call	#_converttoint
11908     FD 16 02 F6 | 	mov	arg03, result1
1190c     37 00 00 FF 
11910     28 E4 05 F1 | 	add	objptr, ##28200
11914     F2 18 02 FB | 	rdlong	arg04, objptr
11918     37 00 00 FF 
1191c     28 E4 85 F1 | 	sub	objptr, ##28200
11920     13 13 02 F6 | 	mov	arg01, local01
11924     14 15 02 F6 | 	mov	arg02, local02
11928     6C 13 B1 FD | 	call	#_hg010b_spin2_fcircle
1192c     A7 F0 03 F6 | 	mov	ptra, fp
11930     B2 00 A0 FD | 	call	#popregs_
11934                 | _do_fcircle_ret
11934     2D 00 64 FD | 	ret
11938                 | 
11938                 | ' 
11938                 | ' '-------------------- fill
11938                 | ' 
11938                 | ' sub do_fill
11938                 | _do_fill
11938     03 4A 05 F6 | 	mov	COUNT_, #3
1193c     A8 00 A0 FD | 	call	#pushregs_
11940     30 F0 07 F1 | 	add	ptra, #48
11944     44 B2 BF FD | 	call	#_pop
11948     FD 16 02 F6 | 	mov	arg03, result1
1194c     FE 14 02 F6 | 	mov	arg02, result2
11950     FF 18 02 F6 | 	mov	arg04, result3
11954     24 4E 05 F1 | 	add	fp, #36
11958     A7 16 62 FC | 	wrlong	arg03, fp
1195c     04 4E 05 F1 | 	add	fp, #4
11960     A7 14 62 FC | 	wrlong	arg02, fp
11964     04 4E 05 F1 | 	add	fp, #4
11968     A7 18 62 FC | 	wrlong	arg04, fp
1196c     2C 4E 85 F1 | 	sub	fp, #44
11970     18 B2 BF FD | 	call	#_pop
11974     FD 16 02 F6 | 	mov	arg03, result1
11978     FE 14 02 F6 | 	mov	arg02, result2
1197c     FF 18 02 F6 | 	mov	arg04, result3
11980     18 4E 05 F1 | 	add	fp, #24
11984     A7 16 62 FC | 	wrlong	arg03, fp
11988     04 4E 05 F1 | 	add	fp, #4
1198c     A7 14 62 FC | 	wrlong	arg02, fp
11990     04 4E 05 F1 | 	add	fp, #4
11994     A7 18 62 FC | 	wrlong	arg04, fp
11998     20 4E 85 F1 | 	sub	fp, #32
1199c     EC B1 BF FD | 	call	#_pop
119a0     FD 16 02 F6 | 	mov	arg03, result1
119a4     FE 14 02 F6 | 	mov	arg02, result2
119a8     FF 18 02 F6 | 	mov	arg04, result3
119ac     0C 4E 05 F1 | 	add	fp, #12
119b0     A7 16 62 FC | 	wrlong	arg03, fp
119b4     04 4E 05 F1 | 	add	fp, #4
119b8     A7 14 62 FC | 	wrlong	arg02, fp
119bc     04 4E 05 F1 | 	add	fp, #4
119c0     A7 18 62 FC | 	wrlong	arg04, fp
119c4     14 4E 85 F1 | 	sub	fp, #20
119c8     C0 B1 BF FD | 	call	#_pop
119cc     FF 16 02 F6 | 	mov	arg03, result3
119d0     A7 FA 61 FC | 	wrlong	result1, fp
119d4     04 4E 05 F1 | 	add	fp, #4
119d8     A7 FC 61 FC | 	wrlong	result2, fp
119dc     04 4E 05 F1 | 	add	fp, #4
119e0     A7 16 62 FC | 	wrlong	arg03, fp
119e4     08 4E 85 F1 | 	sub	fp, #8
119e8     A7 12 02 F6 | 	mov	arg01, fp
119ec     80 B3 BF FD | 	call	#_converttoint
119f0     FD 26 02 F6 | 	mov	local01, result1
119f4     0C 4E 05 F1 | 	add	fp, #12
119f8     A7 12 02 F6 | 	mov	arg01, fp
119fc     0C 4E 85 F1 | 	sub	fp, #12
11a00     6C B3 BF FD | 	call	#_converttoint
11a04     FD 28 02 F6 | 	mov	local02, result1
11a08     18 4E 05 F1 | 	add	fp, #24
11a0c     A7 12 02 F6 | 	mov	arg01, fp
11a10     18 4E 85 F1 | 	sub	fp, #24
11a14     58 B3 BF FD | 	call	#_converttoint
11a18     FD 2A 02 F6 | 	mov	local03, result1
11a1c     24 4E 05 F1 | 	add	fp, #36
11a20     A7 12 02 F6 | 	mov	arg01, fp
11a24     24 4E 85 F1 | 	sub	fp, #36
11a28     44 B3 BF FD | 	call	#_converttoint
11a2c     FD 18 02 F6 | 	mov	arg04, result1
11a30     13 13 02 F6 | 	mov	arg01, local01
11a34     14 15 02 F6 | 	mov	arg02, local02
11a38     15 17 02 F6 | 	mov	arg03, local03
11a3c     C4 0F B1 FD | 	call	#_hg010b_spin2_fill
11a40     A7 F0 03 F6 | 	mov	ptra, fp
11a44     B2 00 A0 FD | 	call	#popregs_
11a48                 | _do_fill_ret
11a48     2D 00 64 FD | 	ret
11a4c                 | 
11a4c                 | ' 
11a4c                 | ' '-------------------- font
11a4c                 | ' 
11a4c                 | ' sub do_font
11a4c                 | _do_font
11a4c     03 4A 05 F6 | 	mov	COUNT_, #3
11a50     A8 00 A0 FD | 	call	#pushregs_
11a54     34 B1 BF FD | 	call	#_pop
11a58     FD 26 02 F6 | 	mov	local01, result1
11a5c     FE 28 02 F6 | 	mov	local02, result2
11a60     FF 2A 02 F6 | 	mov	local03, result3
11a64                 | ' 
11a64                 | ' t1=pop() 
11a64                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11a64     1E 2A 0E F2 | 	cmp	local03, #30 wz
11a68     10 00 90 5D |  if_ne	jmp	#LR__1460
11a6c     13 13 02 F6 | 	mov	arg01, local01
11a70     00 14 06 F6 | 	mov	arg02, #0
11a74     3C 67 B1 FD | 	call	#__system___float_tointeger
11a78     FD 26 02 F6 | 	mov	local01, result1
11a7c                 | LR__1460
11a7c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11a7c     1F 2A 0E F2 | 	cmp	local03, #31 wz
11a80     18 00 90 5D |  if_ne	jmp	#LR__1461
11a84     13 13 02 F6 | 	mov	arg01, local01
11a88     6C 6A B1 FD | 	call	#__system____builtin_atof
11a8c     FD 12 02 F6 | 	mov	arg01, result1
11a90     00 14 06 F6 | 	mov	arg02, #0
11a94     1C 67 B1 FD | 	call	#__system___float_tointeger
11a98     FD 26 02 F6 | 	mov	local01, result1
11a9c                 | LR__1461
11a9c     37 00 00 FF 
11aa0     40 E4 05 F1 | 	add	objptr, ##28224
11aa4     F2 26 62 FC | 	wrlong	local01, objptr
11aa8     37 00 00 FF 
11aac     40 E4 85 F1 | 	sub	objptr, ##28224
11ab0     02 26 66 F0 | 	shl	local01, #2
11ab4     13 13 02 F6 | 	mov	arg01, local01
11ab8     2C 16 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11abc     A7 F0 03 F6 | 	mov	ptra, fp
11ac0     B2 00 A0 FD | 	call	#popregs_
11ac4                 | _do_font_ret
11ac4     2D 00 64 FD | 	ret
11ac8                 | 
11ac8                 | ' 
11ac8                 | ' '-------------------- for
11ac8                 | ' 
11ac8                 | ' sub do_for()
11ac8                 | _do_for
11ac8     01 4A 05 F6 | 	mov	COUNT_, #1
11acc     A8 00 A0 FD | 	call	#pushregs_
11ad0     10 F0 07 F1 | 	add	ptra, #16
11ad4     50 00 00 FF 
11ad8     30 E5 05 F1 | 	add	objptr, ##41264
11adc     F2 12 02 FB | 	rdlong	arg01, objptr
11ae0     01 12 06 F1 | 	add	arg01, #1
11ae4     F2 12 62 FC | 	wrlong	arg01, objptr
11ae8     50 00 00 FF 
11aec     30 E5 85 F1 | 	sub	objptr, ##41264
11af0     98 B0 BF FD | 	call	#_pop
11af4     A7 FA 61 FC | 	wrlong	result1, fp
11af8     04 4E 05 F1 | 	add	fp, #4
11afc     A7 FC 61 FC | 	wrlong	result2, fp
11b00     04 4E 05 F1 | 	add	fp, #4
11b04     A7 FE 61 FC | 	wrlong	result3, fp
11b08     08 4E 85 F1 | 	sub	fp, #8
11b0c     50 00 00 FF 
11b10     30 E5 05 F1 | 	add	objptr, ##41264
11b14     F2 12 02 FB | 	rdlong	arg01, objptr
11b18     09 27 02 F6 | 	mov	local01, arg01
11b1c     02 26 66 F0 | 	shl	local01, #2
11b20     09 27 02 F1 | 	add	local01, arg01
11b24     02 26 66 F0 | 	shl	local01, #2
11b28     06 00 00 FF 
11b2c     98 E4 85 F1 | 	sub	objptr, ##3224
11b30     F2 26 02 F1 | 	add	local01, objptr
11b34     A7 12 02 FB | 	rdlong	arg01, fp
11b38     08 26 06 F1 | 	add	local01, #8
11b3c     13 13 62 FC | 	wrlong	arg01, local01
11b40     4A 00 00 FF 
11b44     98 E4 85 F1 | 	sub	objptr, ##38040
11b48     40 B0 BF FD | 	call	#_pop
11b4c     A7 FA 61 FC | 	wrlong	result1, fp
11b50     04 4E 05 F1 | 	add	fp, #4
11b54     A7 FC 61 FC | 	wrlong	result2, fp
11b58     04 4E 05 F1 | 	add	fp, #4
11b5c     A7 FE 61 FC | 	wrlong	result3, fp
11b60     08 4E 85 F1 | 	sub	fp, #8
11b64     50 00 00 FF 
11b68     30 E5 05 F1 | 	add	objptr, ##41264
11b6c     F2 12 02 FB | 	rdlong	arg01, objptr
11b70     09 27 02 F6 | 	mov	local01, arg01
11b74     02 26 66 F0 | 	shl	local01, #2
11b78     09 27 02 F1 | 	add	local01, arg01
11b7c     02 26 66 F0 | 	shl	local01, #2
11b80     06 00 00 FF 
11b84     98 E4 85 F1 | 	sub	objptr, ##3224
11b88     F2 26 02 F1 | 	add	local01, objptr
11b8c     A7 12 02 F6 | 	mov	arg01, fp
11b90     4A 00 00 FF 
11b94     98 E4 85 F1 | 	sub	objptr, ##38040
11b98     D4 B1 BF FD | 	call	#_converttoint
11b9c     FD 12 02 F6 | 	mov	arg01, result1
11ba0     0C 26 06 F1 | 	add	local01, #12
11ba4     13 13 62 FC | 	wrlong	arg01, local01
11ba8     E0 AF BF FD | 	call	#_pop
11bac     A7 FA 61 FC | 	wrlong	result1, fp
11bb0     04 4E 05 F1 | 	add	fp, #4
11bb4     A7 FC 61 FC | 	wrlong	result2, fp
11bb8     04 4E 05 F1 | 	add	fp, #4
11bbc     A7 FE 61 FC | 	wrlong	result3, fp
11bc0     08 4E 85 F1 | 	sub	fp, #8
11bc4     50 00 00 FF 
11bc8     30 E5 05 F1 | 	add	objptr, ##41264
11bcc     F2 12 02 FB | 	rdlong	arg01, objptr
11bd0     09 27 02 F6 | 	mov	local01, arg01
11bd4     02 26 66 F0 | 	shl	local01, #2
11bd8     09 27 02 F1 | 	add	local01, arg01
11bdc     02 26 66 F0 | 	shl	local01, #2
11be0     06 00 00 FF 
11be4     98 E4 85 F1 | 	sub	objptr, ##3224
11be8     F2 26 02 F1 | 	add	local01, objptr
11bec     A7 12 02 F6 | 	mov	arg01, fp
11bf0     4A 00 00 FF 
11bf4     98 E4 85 F1 | 	sub	objptr, ##38040
11bf8     74 B1 BF FD | 	call	#_converttoint
11bfc     10 26 06 F1 | 	add	local01, #16
11c00     13 FB 61 FC | 	wrlong	result1, local01
11c04                 | ' fortop+=1
11c04                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11c04                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11c04                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11c04                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11c04     4A 00 00 FF 
11c08     80 E4 05 F1 | 	add	objptr, ##38016
11c0c     F2 12 02 FB | 	rdlong	arg01, objptr
11c10     09 27 02 F6 | 	mov	local01, arg01
11c14     01 26 66 F0 | 	shl	local01, #1
11c18     09 27 02 F1 | 	add	local01, arg01
11c1c     02 26 66 F0 | 	shl	local01, #2
11c20     03 00 00 FF 
11c24     04 E4 85 F1 | 	sub	objptr, ##1540
11c28     F2 26 02 F1 | 	add	local01, objptr
11c2c     08 26 06 F1 | 	add	local01, #8
11c30     13 27 02 FB | 	rdlong	local01, local01
11c34     FE 27 0E F2 | 	cmp	local01, #510 wz
11c38     47 00 00 FF 
11c3c     7C E4 85 F1 | 	sub	objptr, ##36476
11c40     70 00 90 5D |  if_ne	jmp	#LR__1470
11c44     50 00 00 FF 
11c48     30 E5 05 F1 | 	add	objptr, ##41264
11c4c     F2 12 02 FB | 	rdlong	arg01, objptr
11c50     09 27 02 F6 | 	mov	local01, arg01
11c54     02 26 66 F0 | 	shl	local01, #2
11c58     09 27 02 F1 | 	add	local01, arg01
11c5c     02 26 66 F0 | 	shl	local01, #2
11c60     06 00 00 FF 
11c64     98 E4 85 F1 | 	sub	objptr, ##3224
11c68     F2 26 02 F1 | 	add	local01, objptr
11c6c     06 00 00 FF 
11c70     20 E4 05 F1 | 	add	objptr, ##3104
11c74     F2 12 02 FB | 	rdlong	arg01, objptr
11c78     13 13 62 FC | 	wrlong	arg01, local01
11c7c     78 E4 05 F1 | 	add	objptr, #120
11c80     F2 12 02 FB | 	rdlong	arg01, objptr
11c84     09 27 02 F6 | 	mov	local01, arg01
11c88     02 26 66 F0 | 	shl	local01, #2
11c8c     09 27 02 F1 | 	add	local01, arg01
11c90     02 26 66 F0 | 	shl	local01, #2
11c94     06 00 00 FF 
11c98     98 E4 85 F1 | 	sub	objptr, ##3224
11c9c     F2 26 02 F1 | 	add	local01, objptr
11ca0     04 26 06 F1 | 	add	local01, #4
11ca4     13 01 68 FC | 	wrlong	#0, local01
11ca8     4A 00 00 FF 
11cac     98 E4 85 F1 | 	sub	objptr, ##38040
11cb0     78 00 90 FD | 	jmp	#LR__1471
11cb4                 | LR__1470
11cb4     50 00 00 FF 
11cb8     30 E5 05 F1 | 	add	objptr, ##41264
11cbc     F2 12 02 FB | 	rdlong	arg01, objptr
11cc0     09 27 02 F6 | 	mov	local01, arg01
11cc4     02 26 66 F0 | 	shl	local01, #2
11cc8     09 27 02 F1 | 	add	local01, arg01
11ccc     02 26 66 F0 | 	shl	local01, #2
11cd0     06 00 00 FF 
11cd4     98 E4 85 F1 | 	sub	objptr, ##3224
11cd8     F2 26 02 F1 | 	add	local01, objptr
11cdc     06 00 00 FF 
11ce0     28 E4 05 F1 | 	add	objptr, ##3112
11ce4     F2 12 02 FB | 	rdlong	arg01, objptr
11ce8     13 13 62 FC | 	wrlong	arg01, local01
11cec     70 E4 05 F1 | 	add	objptr, #112
11cf0     F2 12 02 FB | 	rdlong	arg01, objptr
11cf4     09 27 02 F6 | 	mov	local01, arg01
11cf8     02 26 66 F0 | 	shl	local01, #2
11cfc     09 27 02 F1 | 	add	local01, arg01
11d00     02 26 66 F0 | 	shl	local01, #2
11d04     06 00 00 FF 
11d08     98 E4 85 F1 | 	sub	objptr, ##3224
11d0c     F2 26 02 F1 | 	add	local01, objptr
11d10     18 E4 85 F1 | 	sub	objptr, #24
11d14     F2 12 02 FB | 	rdlong	arg01, objptr
11d18     4A 00 00 FF 
11d1c     80 E4 85 F1 | 	sub	objptr, ##38016
11d20     01 12 06 F1 | 	add	arg01, #1
11d24     04 26 06 F1 | 	add	local01, #4
11d28     13 13 62 FC | 	wrlong	arg01, local01
11d2c                 | LR__1471
11d2c     A7 F0 03 F6 | 	mov	ptra, fp
11d30     B2 00 A0 FD | 	call	#popregs_
11d34                 | _do_for_ret
11d34     2D 00 64 FD | 	ret
11d38                 | 
11d38                 | ' 
11d38                 | ' '-------------------- frame
11d38                 | ' 
11d38                 | ' sub do_frame
11d38                 | _do_frame
11d38     03 4A 05 F6 | 	mov	COUNT_, #3
11d3c     A8 00 A0 FD | 	call	#pushregs_
11d40     30 F0 07 F1 | 	add	ptra, #48
11d44     44 AE BF FD | 	call	#_pop
11d48     FD 16 02 F6 | 	mov	arg03, result1
11d4c     FE 14 02 F6 | 	mov	arg02, result2
11d50     FF 1A 02 F6 | 	mov	arg05, result3
11d54     24 4E 05 F1 | 	add	fp, #36
11d58     A7 16 62 FC | 	wrlong	arg03, fp
11d5c     04 4E 05 F1 | 	add	fp, #4
11d60     A7 14 62 FC | 	wrlong	arg02, fp
11d64     04 4E 05 F1 | 	add	fp, #4
11d68     A7 1A 62 FC | 	wrlong	arg05, fp
11d6c     2C 4E 85 F1 | 	sub	fp, #44
11d70     18 AE BF FD | 	call	#_pop
11d74     FD 16 02 F6 | 	mov	arg03, result1
11d78     FE 14 02 F6 | 	mov	arg02, result2
11d7c     FF 1A 02 F6 | 	mov	arg05, result3
11d80     18 4E 05 F1 | 	add	fp, #24
11d84     A7 16 62 FC | 	wrlong	arg03, fp
11d88     04 4E 05 F1 | 	add	fp, #4
11d8c     A7 14 62 FC | 	wrlong	arg02, fp
11d90     04 4E 05 F1 | 	add	fp, #4
11d94     A7 1A 62 FC | 	wrlong	arg05, fp
11d98     20 4E 85 F1 | 	sub	fp, #32
11d9c     EC AD BF FD | 	call	#_pop
11da0     FD 16 02 F6 | 	mov	arg03, result1
11da4     FE 14 02 F6 | 	mov	arg02, result2
11da8     FF 1A 02 F6 | 	mov	arg05, result3
11dac     0C 4E 05 F1 | 	add	fp, #12
11db0     A7 16 62 FC | 	wrlong	arg03, fp
11db4     04 4E 05 F1 | 	add	fp, #4
11db8     A7 14 62 FC | 	wrlong	arg02, fp
11dbc     04 4E 05 F1 | 	add	fp, #4
11dc0     A7 1A 62 FC | 	wrlong	arg05, fp
11dc4     14 4E 85 F1 | 	sub	fp, #20
11dc8     C0 AD BF FD | 	call	#_pop
11dcc     FF 16 02 F6 | 	mov	arg03, result3
11dd0     A7 FA 61 FC | 	wrlong	result1, fp
11dd4     04 4E 05 F1 | 	add	fp, #4
11dd8     A7 FC 61 FC | 	wrlong	result2, fp
11ddc     04 4E 05 F1 | 	add	fp, #4
11de0     A7 16 62 FC | 	wrlong	arg03, fp
11de4     08 4E 85 F1 | 	sub	fp, #8
11de8     A7 12 02 F6 | 	mov	arg01, fp
11dec     80 AF BF FD | 	call	#_converttoint
11df0     FD 26 02 F6 | 	mov	local01, result1
11df4     0C 4E 05 F1 | 	add	fp, #12
11df8     A7 12 02 F6 | 	mov	arg01, fp
11dfc     0C 4E 85 F1 | 	sub	fp, #12
11e00     6C AF BF FD | 	call	#_converttoint
11e04     FD 28 02 F6 | 	mov	local02, result1
11e08     18 4E 05 F1 | 	add	fp, #24
11e0c     A7 12 02 F6 | 	mov	arg01, fp
11e10     18 4E 85 F1 | 	sub	fp, #24
11e14     58 AF BF FD | 	call	#_converttoint
11e18     FD 2A 02 F6 | 	mov	local03, result1
11e1c     24 4E 05 F1 | 	add	fp, #36
11e20     A7 12 02 F6 | 	mov	arg01, fp
11e24     24 4E 85 F1 | 	sub	fp, #36
11e28     44 AF BF FD | 	call	#_converttoint
11e2c     FD 18 02 F6 | 	mov	arg04, result1
11e30     37 00 00 FF 
11e34     28 E4 05 F1 | 	add	objptr, ##28200
11e38     F2 1A 02 FB | 	rdlong	arg05, objptr
11e3c     37 00 00 FF 
11e40     28 E4 85 F1 | 	sub	objptr, ##28200
11e44     13 13 02 F6 | 	mov	arg01, local01
11e48     14 15 02 F6 | 	mov	arg02, local02
11e4c     15 17 02 F6 | 	mov	arg03, local03
11e50     9C 10 B1 FD | 	call	#_hg010b_spin2_frame
11e54     A7 F0 03 F6 | 	mov	ptra, fp
11e58     B2 00 A0 FD | 	call	#popregs_
11e5c                 | _do_frame_ret
11e5c     2D 00 64 FD | 	ret
11e60                 | 
11e60                 | ' 
11e60                 | ' '-------------------- framebuf
11e60                 | ' 
11e60                 | ' sub do_framebuf
11e60                 | _do_framebuf
11e60     00 4A 05 F6 | 	mov	COUNT_, #0
11e64     A8 00 A0 FD | 	call	#pushregs_
11e68     0C F0 07 F1 | 	add	ptra, #12
11e6c     08 4E 05 F1 | 	add	fp, #8
11e70     A7 3A 68 FC | 	wrlong	#29, fp
11e74     F2 12 02 FB | 	rdlong	arg01, objptr
11e78     08 4E 85 F1 | 	sub	fp, #8
11e7c     A7 12 62 FC | 	wrlong	arg01, fp
11e80     A7 12 02 F6 | 	mov	arg01, fp
11e84     9C AD BF FD | 	call	#_push
11e88     A7 F0 03 F6 | 	mov	ptra, fp
11e8c     B2 00 A0 FD | 	call	#popregs_
11e90                 | _do_framebuf_ret
11e90     2D 00 64 FD | 	ret
11e94                 | 
11e94                 | ' '-------------------- fre
11e94                 | ' 
11e94                 | ' sub do_fre
11e94                 | _do_fre
11e94     01 4A 05 F6 | 	mov	COUNT_, #1
11e98     A8 00 A0 FD | 	call	#pushregs_
11e9c     0C F0 07 F1 | 	add	ptra, #12
11ea0     51 00 00 FF 
11ea4     D4 E5 05 F1 | 	add	objptr, ##41940
11ea8     F2 12 02 FB | 	rdlong	arg01, objptr
11eac     0E 00 00 FF 
11eb0     78 E5 85 F1 | 	sub	objptr, ##7544
11eb4     F2 26 02 FB | 	rdlong	local01, objptr
11eb8     13 13 82 F1 | 	sub	arg01, local01
11ebc     0E 00 00 FF 
11ec0     F0 E5 05 F1 | 	add	objptr, ##7664
11ec4     F2 12 62 FC | 	wrlong	arg01, objptr
11ec8     08 4E 05 F1 | 	add	fp, #8
11ecc     A7 3A 68 FC | 	wrlong	#29, fp
11ed0     08 4E 85 F1 | 	sub	fp, #8
11ed4     F2 26 02 FB | 	rdlong	local01, objptr
11ed8     52 00 00 FF 
11edc     4C E4 85 F1 | 	sub	objptr, ##42060
11ee0     A7 26 62 FC | 	wrlong	local01, fp
11ee4     A7 12 02 F6 | 	mov	arg01, fp
11ee8     38 AD BF FD | 	call	#_push
11eec     A7 F0 03 F6 | 	mov	ptra, fp
11ef0     B2 00 A0 FD | 	call	#popregs_
11ef4                 | _do_fre_ret
11ef4     2D 00 64 FD | 	ret
11ef8                 | 
11ef8                 | ' 
11ef8                 | ' '-------------------- get
11ef8                 | ' 
11ef8                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11ef8                 | _do_get
11ef8     09 4A 05 F6 | 	mov	COUNT_, #9
11efc     A8 00 A0 FD | 	call	#pushregs_
11f00     40 F0 07 F1 | 	add	ptra, #64
11f04     4A 00 00 FF 
11f08     80 E4 05 F1 | 	add	objptr, ##38016
11f0c     F2 1A 02 FB | 	rdlong	arg05, objptr
11f10     0D 19 02 F6 | 	mov	arg04, arg05
11f14     01 18 66 F0 | 	shl	arg04, #1
11f18     0D 19 02 F1 | 	add	arg04, arg05
11f1c     02 18 66 F0 | 	shl	arg04, #2
11f20     03 00 00 FF 
11f24     04 E4 85 F1 | 	sub	objptr, ##1540
11f28     F2 18 02 F1 | 	add	arg04, objptr
11f2c     0C 1B 02 FB | 	rdlong	arg05, arg04
11f30     A7 1A 62 FC | 	wrlong	arg05, fp
11f34                 | ' 
11f34                 | ' numpar=compiledline(lineptr_e).result.uresult
11f34                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11f34     04 1A 0E F2 | 	cmp	arg05, #4 wz
11f38     47 00 00 FF 
11f3c     7C E4 85 F1 | 	sub	objptr, ##36476
11f40     48 00 90 5D |  if_ne	jmp	#LR__1480
11f44     44 AC BF FD | 	call	#_pop
11f48     FF 1A 02 F6 | 	mov	arg05, result3
11f4c     1C 4E 05 F1 | 	add	fp, #28
11f50     A7 FA 61 FC | 	wrlong	result1, fp
11f54     04 4E 05 F1 | 	add	fp, #4
11f58     A7 FC 61 FC | 	wrlong	result2, fp
11f5c     04 4E 05 F1 | 	add	fp, #4
11f60     A7 1A 62 FC | 	wrlong	arg05, fp
11f64     08 4E 85 F1 | 	sub	fp, #8
11f68     A7 12 02 F6 | 	mov	arg01, fp
11f6c     1C 4E 85 F1 | 	sub	fp, #28
11f70     FC AD BF FD | 	call	#_converttoint
11f74     52 00 00 FF 
11f78     48 E4 05 F1 | 	add	objptr, ##42056
11f7c     F2 FA 61 FC | 	wrlong	result1, objptr
11f80     52 00 00 FF 
11f84     48 E4 85 F1 | 	sub	objptr, ##42056
11f88     18 00 90 FD | 	jmp	#LR__1481
11f8c                 | LR__1480
11f8c     52 00 00 FF 
11f90     48 E4 05 F1 | 	add	objptr, ##42056
11f94     FF FF FF FF 
11f98     F2 FE 6B FC | 	wrlong	##-1, objptr
11f9c     52 00 00 FF 
11fa0     48 E4 85 F1 | 	sub	objptr, ##42056
11fa4                 | LR__1481
11fa4                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11fa4     A7 16 02 FB | 	rdlong	arg03, fp
11fa8     03 16 56 F2 | 	cmps	arg03, #3 wc
11fac     40 00 90 CD |  if_b	jmp	#LR__1482
11fb0     D8 AB BF FD | 	call	#_pop
11fb4     FF 16 02 F6 | 	mov	arg03, result3
11fb8     1C 4E 05 F1 | 	add	fp, #28
11fbc     A7 FA 61 FC | 	wrlong	result1, fp
11fc0     04 4E 05 F1 | 	add	fp, #4
11fc4     A7 FC 61 FC | 	wrlong	result2, fp
11fc8     04 4E 05 F1 | 	add	fp, #4
11fcc     A7 16 62 FC | 	wrlong	arg03, fp
11fd0     08 4E 85 F1 | 	sub	fp, #8
11fd4     A7 12 02 F6 | 	mov	arg01, fp
11fd8     1C 4E 85 F1 | 	sub	fp, #28
11fdc     90 AD BF FD | 	call	#_converttoint
11fe0     08 4E 05 F1 | 	add	fp, #8
11fe4     A7 FA 61 FC | 	wrlong	result1, fp
11fe8     08 4E 85 F1 | 	sub	fp, #8
11fec     0C 00 90 FD | 	jmp	#LR__1483
11ff0                 | LR__1482
11ff0     08 4E 05 F1 | 	add	fp, #8
11ff4     A7 02 68 FC | 	wrlong	#1, fp
11ff8     08 4E 85 F1 | 	sub	fp, #8
11ffc                 | LR__1483
11ffc                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
11ffc     A7 16 02 FB | 	rdlong	arg03, fp
12000     02 16 56 F2 | 	cmps	arg03, #2 wc
12004     3C 00 90 CD |  if_b	jmp	#LR__1484
12008     80 AB BF FD | 	call	#_pop
1200c     FF 16 02 F6 | 	mov	arg03, result3
12010     1C 4E 05 F1 | 	add	fp, #28
12014     A7 FA 61 FC | 	wrlong	result1, fp
12018     04 4E 05 F1 | 	add	fp, #4
1201c     A7 FC 61 FC | 	wrlong	result2, fp
12020     04 4E 05 F1 | 	add	fp, #4
12024     A7 16 62 FC | 	wrlong	arg03, fp
12028     08 4E 85 F1 | 	sub	fp, #8
1202c     A7 12 02 F6 | 	mov	arg01, fp
12030     1C 4E 85 F1 | 	sub	fp, #28
12034     38 AD BF FD | 	call	#_converttoint
12038     0C 4E 05 F1 | 	add	fp, #12
1203c     A7 FA 61 FC | 	wrlong	result1, fp
12040     0C 4E 85 F1 | 	sub	fp, #12
12044                 | LR__1484
12044     44 AB BF FD | 	call	#_pop
12048     FF 16 02 F6 | 	mov	arg03, result3
1204c     1C 4E 05 F1 | 	add	fp, #28
12050     A7 FA 61 FC | 	wrlong	result1, fp
12054     04 4E 05 F1 | 	add	fp, #4
12058     A7 FC 61 FC | 	wrlong	result2, fp
1205c     04 4E 05 F1 | 	add	fp, #4
12060     A7 16 62 FC | 	wrlong	arg03, fp
12064     08 4E 85 F1 | 	sub	fp, #8
12068     A7 12 02 F6 | 	mov	arg01, fp
1206c     1C 4E 85 F1 | 	sub	fp, #28
12070     FC AC BF FD | 	call	#_converttoint
12074     04 4E 05 F1 | 	add	fp, #4
12078     A7 FA 61 FC | 	wrlong	result1, fp
1207c     10 4E 05 F1 | 	add	fp, #16
12080     A7 16 02 FB | 	rdlong	arg03, fp
12084     14 4E 85 F1 | 	sub	fp, #20
12088     02 16 66 F0 | 	shl	arg03, #2
1208c     50 00 00 FF 
12090     C4 E4 05 F1 | 	add	objptr, ##41156
12094     F2 26 02 F6 | 	mov	local01, objptr
12098     F2 16 02 F1 | 	add	arg03, objptr
1209c     0B 01 68 FC | 	wrlong	#0, arg03
120a0                 | ' t1=pop() : channel=converttoint(t1)
120a0                 | ' getres(j)=0
120a0                 | ' if pos>=0 then
120a0     01 00 00 FF 
120a4     84 E5 05 F1 | 	add	objptr, ##900
120a8     F2 28 02 FB | 	rdlong	local02, objptr
120ac     52 00 00 FF 
120b0     48 E4 85 F1 | 	sub	objptr, ##42056
120b4     00 28 56 F2 | 	cmps	local02, #0 wc
120b8     F0 01 90 CD |  if_b	jmp	#LR__1491
120bc                 | '   for i=0 to  amount/1024
120bc     10 4E 05 F1 | 	add	fp, #16
120c0     A7 00 68 FC | 	wrlong	#0, fp
120c4     08 4E 85 F1 | 	sub	fp, #8
120c8     A7 2A 02 FB | 	rdlong	local03, fp
120cc     08 4E 85 F1 | 	sub	fp, #8
120d0     15 2D 52 F6 | 	abs	local04, local03 wc
120d4     0A 2C 46 F0 | 	shr	local04, #10
120d8     16 2D 82 F6 | 	negc	local04, local04
120dc     01 2C 06 F1 | 	add	local04, #1
120e0                 | LR__1485
120e0     10 4E 05 F1 | 	add	fp, #16
120e4     A7 2A 02 FB | 	rdlong	local03, fp
120e8     10 4E 85 F1 | 	sub	fp, #16
120ec     16 2B 52 F2 | 	cmps	local03, local04 wc
120f0     9C 03 90 3D |  if_ae	jmp	#LR__1499
120f4                 | '     get #channel,pos+1,block(0),amount,r
120f4     04 4E 05 F1 | 	add	fp, #4
120f8     A7 12 02 FB | 	rdlong	arg01, fp
120fc     52 00 00 FF 
12100     48 E4 05 F1 | 	add	objptr, ##42056
12104     F2 14 02 FB | 	rdlong	arg02, objptr
12108     01 14 06 F1 | 	add	arg02, #1
1210c     03 00 00 FF 
12110     94 E5 85 F1 | 	sub	objptr, ##1940
12114     F2 16 02 F6 | 	mov	arg03, objptr
12118     4E 00 00 FF 
1211c     B4 E4 85 F1 | 	sub	objptr, ##40116
12120     04 4E 05 F1 | 	add	fp, #4
12124     A7 18 02 FB | 	rdlong	arg04, fp
12128     08 4E 85 F1 | 	sub	fp, #8
1212c     01 1A 06 F6 | 	mov	arg05, #1
12130     B0 3B B1 FD | 	call	#__system___basic_get
12134     18 4E 05 F1 | 	add	fp, #24
12138     A7 FA 61 FC | 	wrlong	result1, fp
1213c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     A7 28 02 FB | 	rdlong	local02, fp
12144     0C 4E 85 F1 | 	sub	fp, #12
12148     00 04 00 FF 
1214c     00 28 56 F2 | 	cmps	local02, ##524288 wc
12150     7C 00 90 3D |  if_ae	jmp	#LR__1487
12154     14 4E 05 F1 | 	add	fp, #20
12158     A7 00 68 FC | 	wrlong	#0, fp
1215c     04 4E 05 F1 | 	add	fp, #4
12160     A7 2E 02 FB | 	rdlong	local05, fp
12164     18 4E 85 F1 | 	sub	fp, #24
12168                 | LR__1486
12168     14 4E 05 F1 | 	add	fp, #20
1216c     A7 28 02 FB | 	rdlong	local02, fp
12170     14 4E 85 F1 | 	sub	fp, #20
12174     17 29 52 F2 | 	cmps	local02, local05 wc
12178     D8 00 90 3D |  if_ae	jmp	#LR__1490
1217c     0C 4E 05 F1 | 	add	fp, #12
12180     A7 12 02 FB | 	rdlong	arg01, fp
12184     04 4E 05 F1 | 	add	fp, #4
12188     A7 2A 02 FB | 	rdlong	local03, fp
1218c     0A 2A 66 F0 | 	shl	local03, #10
12190     15 13 02 F1 | 	add	arg01, local03
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 2A 02 FB | 	rdlong	local03, fp
1219c     15 13 02 F1 | 	add	arg01, local03
121a0     4E 00 00 FF 
121a4     B4 E4 05 F1 | 	add	objptr, ##40116
121a8     F2 2A 02 F1 | 	add	local03, objptr
121ac     15 15 C2 FA | 	rdbyte	arg02, local03
121b0     09 15 42 FC | 	wrbyte	arg02, arg01
121b4     4E 00 00 FF 
121b8     B4 E4 85 F1 | 	sub	objptr, ##40116
121bc     A7 2A 02 FB | 	rdlong	local03, fp
121c0     01 2A 06 F1 | 	add	local03, #1
121c4     A7 2A 62 FC | 	wrlong	local03, fp
121c8     14 4E 85 F1 | 	sub	fp, #20
121cc     98 FF 9F FD | 	jmp	#LR__1486
121d0                 | LR__1487
121d0     14 4E 05 F1 | 	add	fp, #20
121d4     A7 00 68 FC | 	wrlong	#0, fp
121d8     04 4E 05 F1 | 	add	fp, #4
121dc     A7 30 02 FB | 	rdlong	local06, fp
121e0     18 4E 85 F1 | 	sub	fp, #24
121e4                 | LR__1488
121e4     14 4E 05 F1 | 	add	fp, #20
121e8     A7 28 02 FB | 	rdlong	local02, fp
121ec     14 4E 85 F1 | 	sub	fp, #20
121f0     18 29 52 F2 | 	cmps	local02, local06 wc
121f4     5C 00 90 3D |  if_ae	jmp	#LR__1489
121f8     0C 4E 05 F1 | 	add	fp, #12
121fc     A7 12 02 FB | 	rdlong	arg01, fp
12200     04 4E 05 F1 | 	add	fp, #4
12204     A7 2E 02 FB | 	rdlong	local05, fp
12208     0A 2E 66 F0 | 	shl	local05, #10
1220c     17 13 02 F1 | 	add	arg01, local05
12210     04 4E 05 F1 | 	add	fp, #4
12214     A7 2E 02 FB | 	rdlong	local05, fp
12218     17 13 02 F1 | 	add	arg01, local05
1221c     14 4E 85 F1 | 	sub	fp, #20
12220     4E 00 00 FF 
12224     B4 E4 05 F1 | 	add	objptr, ##40116
12228     F2 2E 02 F1 | 	add	local05, objptr
1222c     17 15 C2 FA | 	rdbyte	arg02, local05
12230     4E 00 00 FF 
12234     B4 E4 85 F1 | 	sub	objptr, ##40116
12238     C4 F4 B0 FD | 	call	#_pspoke
1223c     14 4E 05 F1 | 	add	fp, #20
12240     A7 2E 02 FB | 	rdlong	local05, fp
12244     01 2E 06 F1 | 	add	local05, #1
12248     A7 2E 62 FC | 	wrlong	local05, fp
1224c     14 4E 85 F1 | 	sub	fp, #20
12250     90 FF 9F FD | 	jmp	#LR__1488
12254                 | LR__1489
12254                 | LR__1490
12254     14 4E 05 F1 | 	add	fp, #20
12258     A7 30 02 FB | 	rdlong	local06, fp
1225c     18 2B 02 F6 | 	mov	local03, local06
12260     02 2A 66 F0 | 	shl	local03, #2
12264     50 00 00 FF 
12268     C4 E4 05 F1 | 	add	objptr, ##41156
1226c     F2 2A 02 F1 | 	add	local03, objptr
12270     02 30 66 F0 | 	shl	local06, #2
12274     F2 30 02 F1 | 	add	local06, objptr
12278     18 31 02 FB | 	rdlong	local06, local06
1227c     04 4E 05 F1 | 	add	fp, #4
12280     A7 2E 02 FB | 	rdlong	local05, fp
12284     17 31 02 F1 | 	add	local06, local05
12288     15 31 62 FC | 	wrlong	local06, local03
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     A7 30 02 FB | 	rdlong	local06, fp
12294     01 30 06 F1 | 	add	local06, #1
12298     A7 30 62 FC | 	wrlong	local06, fp
1229c     10 4E 85 F1 | 	sub	fp, #16
122a0     50 00 00 FF 
122a4     C4 E4 85 F1 | 	sub	objptr, ##41156
122a8     34 FE 9F FD | 	jmp	#LR__1485
122ac                 | LR__1491
122ac                 | '   for i=0 to  amount/1024
122ac     10 4E 05 F1 | 	add	fp, #16
122b0     A7 00 68 FC | 	wrlong	#0, fp
122b4     08 4E 85 F1 | 	sub	fp, #8
122b8     A7 2A 02 FB | 	rdlong	local03, fp
122bc     08 4E 85 F1 | 	sub	fp, #8
122c0     15 33 52 F6 | 	abs	local07, local03 wc
122c4     0A 32 46 F0 | 	shr	local07, #10
122c8     19 33 82 F6 | 	negc	local07, local07
122cc     01 32 06 F1 | 	add	local07, #1
122d0                 | LR__1492
122d0     10 4E 05 F1 | 	add	fp, #16
122d4     A7 2A 02 FB | 	rdlong	local03, fp
122d8     10 4E 85 F1 | 	sub	fp, #16
122dc     19 2B 52 F2 | 	cmps	local03, local07 wc
122e0     AC 01 90 3D |  if_ae	jmp	#LR__1498
122e4                 | '     get #channel,,block(0),amount,r
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 12 02 FB | 	rdlong	arg01, fp
122ec     4E 00 00 FF 
122f0     B4 E4 05 F1 | 	add	objptr, ##40116
122f4     F2 16 02 F6 | 	mov	arg03, objptr
122f8     4E 00 00 FF 
122fc     B4 E4 85 F1 | 	sub	objptr, ##40116
12300     04 4E 05 F1 | 	add	fp, #4
12304     A7 18 02 FB | 	rdlong	arg04, fp
12308     08 4E 85 F1 | 	sub	fp, #8
1230c     00 14 06 F6 | 	mov	arg02, #0
12310     01 1A 06 F6 | 	mov	arg05, #1
12314     CC 39 B1 FD | 	call	#__system___basic_get
12318     18 4E 05 F1 | 	add	fp, #24
1231c     A7 FA 61 FC | 	wrlong	result1, fp
12320                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12320     0C 4E 85 F1 | 	sub	fp, #12
12324     A7 28 02 FB | 	rdlong	local02, fp
12328     0C 4E 85 F1 | 	sub	fp, #12
1232c     00 04 00 FF 
12330     00 28 56 F2 | 	cmps	local02, ##524288 wc
12334     7C 00 90 3D |  if_ae	jmp	#LR__1494
12338     14 4E 05 F1 | 	add	fp, #20
1233c     A7 00 68 FC | 	wrlong	#0, fp
12340     04 4E 05 F1 | 	add	fp, #4
12344     A7 34 02 FB | 	rdlong	local08, fp
12348     18 4E 85 F1 | 	sub	fp, #24
1234c                 | LR__1493
1234c     14 4E 05 F1 | 	add	fp, #20
12350     A7 28 02 FB | 	rdlong	local02, fp
12354     14 4E 85 F1 | 	sub	fp, #20
12358     1A 29 52 F2 | 	cmps	local02, local08 wc
1235c     D8 00 90 3D |  if_ae	jmp	#LR__1497
12360     0C 4E 05 F1 | 	add	fp, #12
12364     A7 12 02 FB | 	rdlong	arg01, fp
12368     04 4E 05 F1 | 	add	fp, #4
1236c     A7 30 02 FB | 	rdlong	local06, fp
12370     0A 30 66 F0 | 	shl	local06, #10
12374     18 13 02 F1 | 	add	arg01, local06
12378     04 4E 05 F1 | 	add	fp, #4
1237c     A7 30 02 FB | 	rdlong	local06, fp
12380     18 13 02 F1 | 	add	arg01, local06
12384     4E 00 00 FF 
12388     B4 E4 05 F1 | 	add	objptr, ##40116
1238c     F2 30 02 F1 | 	add	local06, objptr
12390     18 15 C2 FA | 	rdbyte	arg02, local06
12394     09 15 42 FC | 	wrbyte	arg02, arg01
12398     4E 00 00 FF 
1239c     B4 E4 85 F1 | 	sub	objptr, ##40116
123a0     A7 30 02 FB | 	rdlong	local06, fp
123a4     01 30 06 F1 | 	add	local06, #1
123a8     A7 30 62 FC | 	wrlong	local06, fp
123ac     14 4E 85 F1 | 	sub	fp, #20
123b0     98 FF 9F FD | 	jmp	#LR__1493
123b4                 | LR__1494
123b4     14 4E 05 F1 | 	add	fp, #20
123b8     A7 00 68 FC | 	wrlong	#0, fp
123bc     04 4E 05 F1 | 	add	fp, #4
123c0     A7 36 02 FB | 	rdlong	local09, fp
123c4     18 4E 85 F1 | 	sub	fp, #24
123c8                 | LR__1495
123c8     14 4E 05 F1 | 	add	fp, #20
123cc     A7 28 02 FB | 	rdlong	local02, fp
123d0     14 4E 85 F1 | 	sub	fp, #20
123d4     1B 29 52 F2 | 	cmps	local02, local09 wc
123d8     5C 00 90 3D |  if_ae	jmp	#LR__1496
123dc     0C 4E 05 F1 | 	add	fp, #12
123e0     A7 12 02 FB | 	rdlong	arg01, fp
123e4     04 4E 05 F1 | 	add	fp, #4
123e8     A7 34 02 FB | 	rdlong	local08, fp
123ec     0A 34 66 F0 | 	shl	local08, #10
123f0     1A 13 02 F1 | 	add	arg01, local08
123f4     04 4E 05 F1 | 	add	fp, #4
123f8     A7 34 02 FB | 	rdlong	local08, fp
123fc     1A 13 02 F1 | 	add	arg01, local08
12400     14 4E 85 F1 | 	sub	fp, #20
12404     4E 00 00 FF 
12408     B4 E4 05 F1 | 	add	objptr, ##40116
1240c     F2 34 02 F1 | 	add	local08, objptr
12410     1A 15 C2 FA | 	rdbyte	arg02, local08
12414     4E 00 00 FF 
12418     B4 E4 85 F1 | 	sub	objptr, ##40116
1241c     E0 F2 B0 FD | 	call	#_pspoke
12420     14 4E 05 F1 | 	add	fp, #20
12424     A7 34 02 FB | 	rdlong	local08, fp
12428     01 34 06 F1 | 	add	local08, #1
1242c     A7 34 62 FC | 	wrlong	local08, fp
12430     14 4E 85 F1 | 	sub	fp, #20
12434     90 FF 9F FD | 	jmp	#LR__1495
12438                 | LR__1496
12438                 | LR__1497
12438     14 4E 05 F1 | 	add	fp, #20
1243c     A7 36 02 FB | 	rdlong	local09, fp
12440     1B 31 02 F6 | 	mov	local06, local09
12444     02 30 66 F0 | 	shl	local06, #2
12448     50 00 00 FF 
1244c     C4 E4 05 F1 | 	add	objptr, ##41156
12450     F2 30 02 F1 | 	add	local06, objptr
12454     02 36 66 F0 | 	shl	local09, #2
12458     F2 36 02 F1 | 	add	local09, objptr
1245c     1B 37 02 FB | 	rdlong	local09, local09
12460     04 4E 05 F1 | 	add	fp, #4
12464     A7 34 02 FB | 	rdlong	local08, fp
12468     1A 37 02 F1 | 	add	local09, local08
1246c     18 37 62 FC | 	wrlong	local09, local06
12470     08 4E 85 F1 | 	sub	fp, #8
12474     A7 36 02 FB | 	rdlong	local09, fp
12478     01 36 06 F1 | 	add	local09, #1
1247c     A7 36 62 FC | 	wrlong	local09, fp
12480     10 4E 85 F1 | 	sub	fp, #16
12484     50 00 00 FF 
12488     C4 E4 85 F1 | 	sub	objptr, ##41156
1248c     40 FE 9F FD | 	jmp	#LR__1492
12490                 | LR__1498
12490                 | LR__1499
12490     A7 F0 03 F6 | 	mov	ptra, fp
12494     B2 00 A0 FD | 	call	#popregs_
12498                 | _do_get_ret
12498     2D 00 64 FD | 	ret
1249c                 | 
1249c                 | ' 
1249c                 | ' '-------------------- getenvsustain
1249c                 | ' 
1249c                 | ' sub do_getenvsustain
1249c                 | _do_getenvsustain
1249c     01 4A 05 F6 | 	mov	COUNT_, #1
124a0     A8 00 A0 FD | 	call	#pushregs_
124a4     10 F0 07 F1 | 	add	ptra, #16
124a8     4A 00 00 FF 
124ac     80 E4 05 F1 | 	add	objptr, ##38016
124b0     F2 26 02 FB | 	rdlong	local01, objptr
124b4     13 17 02 F6 | 	mov	arg03, local01
124b8     01 16 66 F0 | 	shl	arg03, #1
124bc     13 17 02 F1 | 	add	arg03, local01
124c0     02 16 66 F0 | 	shl	arg03, #2
124c4     03 00 00 FF 
124c8     04 E4 85 F1 | 	sub	objptr, ##1540
124cc     F2 16 02 F1 | 	add	arg03, objptr
124d0     0B 17 02 FB | 	rdlong	arg03, arg03
124d4     0C 4E 05 F1 | 	add	fp, #12
124d8     A7 16 62 FC | 	wrlong	arg03, fp
124dc                 | ' 
124dc                 | ' numpar=compiledline(lineptr_e).result.uresult
124dc                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
124dc     0C 4E 85 F1 | 	sub	fp, #12
124e0     02 16 16 F2 | 	cmp	arg03, #2 wc
124e4     47 00 00 FF 
124e8     7C E4 85 F1 | 	sub	objptr, ##36476
124ec     0C 4E 05 C1 |  if_b	add	fp, #12
124f0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
124f4     0C 4E 85 C1 |  if_b	sub	fp, #12
124f8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
124fc     00 12 06 F6 | 	mov	arg01, #0
12500     98 86 B1 FD | 	call	#__system___getiolock_0595
12504     FD 12 02 F6 | 	mov	arg01, result1
12508     68 29 B1 FD | 	call	#__system___lockmem
1250c     A9 01 00 FF 
12510     A6 14 06 F6 | 	mov	arg02, ##@LR__5804
12514     00 12 06 F6 | 	mov	arg01, #0
12518     00 16 06 F6 | 	mov	arg03, #0
1251c     48 36 B1 FD | 	call	#__system___basic_print_string
12520     00 12 06 F6 | 	mov	arg01, #0
12524     74 86 B1 FD | 	call	#__system___getiolock_0595
12528     FD 00 68 FC | 	wrlong	#0, result1
1252c     27 12 06 F6 | 	mov	arg01, #39
12530     00 14 06 F6 | 	mov	arg02, #0
12534     98 EF B0 FD | 	call	#_printerror
12538     64 00 90 FD | 	jmp	#LR__1501
1253c                 | LR__1500
1253c     4C A6 BF FD | 	call	#_pop
12540     FD 26 02 F6 | 	mov	local01, result1
12544     FE 16 02 F6 | 	mov	arg03, result2
12548     A7 26 62 FC | 	wrlong	local01, fp
1254c     04 4E 05 F1 | 	add	fp, #4
12550     A7 16 62 FC | 	wrlong	arg03, fp
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 FE 61 FC | 	wrlong	result3, fp
1255c     08 4E 85 F1 | 	sub	fp, #8
12560     A7 12 02 F6 | 	mov	arg01, fp
12564     08 A8 BF FD | 	call	#_converttoint
12568     FD 26 02 F6 | 	mov	local01, result1
1256c     01 26 66 F0 | 	shl	local01, #1
12570     51 00 00 FF 
12574     F0 E5 05 F1 | 	add	objptr, ##41968
12578     F2 26 02 F1 | 	add	local01, objptr
1257c     13 27 E2 FA | 	rdword	local01, local01
12580     A7 26 62 FC | 	wrlong	local01, fp
12584     08 4E 05 F1 | 	add	fp, #8
12588     A7 38 68 FC | 	wrlong	#28, fp
1258c     08 4E 85 F1 | 	sub	fp, #8
12590     A7 12 02 F6 | 	mov	arg01, fp
12594     51 00 00 FF 
12598     F0 E5 85 F1 | 	sub	objptr, ##41968
1259c     84 A6 BF FD | 	call	#_push
125a0                 | LR__1501
125a0     A7 F0 03 F6 | 	mov	ptra, fp
125a4     B2 00 A0 FD | 	call	#popregs_
125a8                 | _do_getenvsustain_ret
125a8     2D 00 64 FD | 	ret
125ac                 | 
125ac                 | ' 
125ac                 | ' '-------------------- getnotevalue
125ac                 | ' 
125ac                 | ' sub do_getnotevalue
125ac                 | _do_getnotevalue
125ac     01 4A 05 F6 | 	mov	COUNT_, #1
125b0     A8 00 A0 FD | 	call	#pushregs_
125b4     1C F0 07 F1 | 	add	ptra, #28
125b8     D0 A5 BF FD | 	call	#_pop
125bc     FF 14 02 F6 | 	mov	arg02, result3
125c0     10 4E 05 F1 | 	add	fp, #16
125c4     A7 FA 61 FC | 	wrlong	result1, fp
125c8     04 4E 05 F1 | 	add	fp, #4
125cc     A7 FC 61 FC | 	wrlong	result2, fp
125d0     04 4E 05 F1 | 	add	fp, #4
125d4     A7 14 62 FC | 	wrlong	arg02, fp
125d8     08 4E 85 F1 | 	sub	fp, #8
125dc     A7 12 02 F6 | 	mov	arg01, fp
125e0     10 4E 85 F1 | 	sub	fp, #16
125e4     88 A7 BF FD | 	call	#_converttoint
125e8     FD 14 52 F6 | 	abs	arg02, result1 wc
125ec     0C 14 16 FD | 	qdiv	arg02, #12
125f0     0C 4E 05 F1 | 	add	fp, #12
125f4     A7 FA 61 FC | 	wrlong	result1, fp
125f8     14 00 00 FF 
125fc     D8 E4 05 F1 | 	add	objptr, ##10456
12600     08 4E 85 F1 | 	sub	fp, #8
12604     19 14 62 FD | 	getqy	arg02
12608     0A 15 82 F6 | 	negc	arg02, arg02
1260c     02 14 66 F0 | 	shl	arg02, #2
12610     F2 14 02 F1 | 	add	arg02, objptr
12614     0A 15 02 FB | 	rdlong	arg02, arg02
12618     A7 14 62 FC | 	wrlong	arg02, fp
1261c     08 4E 05 F1 | 	add	fp, #8
12620     A7 14 02 FB | 	rdlong	arg02, fp
12624     0A 15 52 F6 | 	abs	arg02, arg02 wc
12628     0C 14 16 FD | 	qdiv	arg02, #12
1262c     0C 4E 85 F1 | 	sub	fp, #12
12630     14 00 00 FF 
12634     D8 E4 85 F1 | 	sub	objptr, ##10456
12638     18 14 62 FD | 	getqx	arg02
1263c     0A 13 82 F6 | 	negc	arg01, arg02
12640     09 13 52 F6 | 	abs	arg01, arg01 wc
12644     1F 26 C6 C9 |  if_b	decod	local01, #31
12648     00 26 06 36 |  if_ae	mov	local01, #0
1264c     98 52 B1 FD | 	call	#__system___float_fromuns
12650     13 FB 61 F5 | 	xor	result1, local01
12654     08 4E 05 F1 | 	add	fp, #8
12658     A7 FA 61 FC | 	wrlong	result1, fp
1265c     FD 14 02 F6 | 	mov	arg02, result1
12660     08 4E 85 F1 | 	sub	fp, #8
12664     1E 12 C6 F9 | 	decod	arg01, #30
12668     88 65 B1 FD | 	call	#__system____builtin_powf
1266c     FD 12 02 F6 | 	mov	arg01, result1
12670     04 4E 05 F1 | 	add	fp, #4
12674     A7 14 02 FB | 	rdlong	arg02, fp
12678     04 4E 85 F1 | 	sub	fp, #4
1267c     6C 56 B1 FD | 	call	#__system___float_mul
12680     A7 FA 61 FC | 	wrlong	result1, fp
12684     10 4E 05 F1 | 	add	fp, #16
12688     A7 FA 61 FC | 	wrlong	result1, fp
1268c     08 4E 05 F1 | 	add	fp, #8
12690     A7 3C 68 FC | 	wrlong	#30, fp
12694     08 4E 85 F1 | 	sub	fp, #8
12698     A7 12 02 F6 | 	mov	arg01, fp
1269c     10 4E 85 F1 | 	sub	fp, #16
126a0     80 A5 BF FD | 	call	#_push
126a4     A7 F0 03 F6 | 	mov	ptra, fp
126a8     B2 00 A0 FD | 	call	#popregs_
126ac                 | _do_getnotevalue_ret
126ac     2D 00 64 FD | 	ret
126b0                 | 
126b0                 | ' 
126b0                 | ' '-------------------- getpixel
126b0                 | ' 
126b0                 | ' sub do_getpixel
126b0                 | _do_getpixel
126b0     00 4A 05 F6 | 	mov	COUNT_, #0
126b4     A8 00 A0 FD | 	call	#pushregs_
126b8     24 F0 07 F1 | 	add	ptra, #36
126bc     4A 00 00 FF 
126c0     80 E4 05 F1 | 	add	objptr, ##38016
126c4     F2 16 02 FB | 	rdlong	arg03, objptr
126c8     0B 15 02 F6 | 	mov	arg02, arg03
126cc     01 14 66 F0 | 	shl	arg02, #1
126d0     0B 15 02 F1 | 	add	arg02, arg03
126d4     02 14 66 F0 | 	shl	arg02, #2
126d8     03 00 00 FF 
126dc     04 E4 85 F1 | 	sub	objptr, ##1540
126e0     F2 14 02 F1 | 	add	arg02, objptr
126e4     0A 17 02 FB | 	rdlong	arg03, arg02
126e8     18 4E 05 F1 | 	add	fp, #24
126ec     A7 16 62 FC | 	wrlong	arg03, fp
126f0                 | ' 
126f0                 | ' numpar=compiledline(lineptr_e).result.uresult
126f0                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
126f0     18 4E 85 F1 | 	sub	fp, #24
126f4     02 16 0E F2 | 	cmp	arg03, #2 wz
126f8     47 00 00 FF 
126fc     7C E4 85 F1 | 	sub	objptr, ##36476
12700     40 00 90 AD |  if_e	jmp	#LR__1510
12704     00 12 06 F6 | 	mov	arg01, #0
12708     90 84 B1 FD | 	call	#__system___getiolock_0595
1270c     FD 12 02 F6 | 	mov	arg01, result1
12710     60 27 B1 FD | 	call	#__system___lockmem
12714     A9 01 00 FF 
12718     B6 14 06 F6 | 	mov	arg02, ##@LR__5805
1271c     00 12 06 F6 | 	mov	arg01, #0
12720     00 16 06 F6 | 	mov	arg03, #0
12724     40 34 B1 FD | 	call	#__system___basic_print_string
12728     00 12 06 F6 | 	mov	arg01, #0
1272c     6C 84 B1 FD | 	call	#__system___getiolock_0595
12730     FD 00 68 FC | 	wrlong	#0, result1
12734     27 12 06 F6 | 	mov	arg01, #39
12738     00 14 06 F6 | 	mov	arg02, #0
1273c     90 ED B0 FD | 	call	#_printerror
12740     B4 00 90 FD | 	jmp	#LR__1511
12744                 | LR__1510
12744     44 A4 BF FD | 	call	#_pop
12748     FD 16 02 F6 | 	mov	arg03, result1
1274c     FE 14 02 F6 | 	mov	arg02, result2
12750     FF 12 02 F6 | 	mov	arg01, result3
12754     0C 4E 05 F1 | 	add	fp, #12
12758     A7 16 62 FC | 	wrlong	arg03, fp
1275c     04 4E 05 F1 | 	add	fp, #4
12760     A7 14 62 FC | 	wrlong	arg02, fp
12764     04 4E 05 F1 | 	add	fp, #4
12768     A7 12 62 FC | 	wrlong	arg01, fp
1276c     14 4E 85 F1 | 	sub	fp, #20
12770     18 A4 BF FD | 	call	#_pop
12774     FF 16 02 F6 | 	mov	arg03, result3
12778     A7 FA 61 FC | 	wrlong	result1, fp
1277c     04 4E 05 F1 | 	add	fp, #4
12780     A7 FC 61 FC | 	wrlong	result2, fp
12784     04 4E 05 F1 | 	add	fp, #4
12788     A7 16 62 FC | 	wrlong	arg03, fp
1278c     08 4E 85 F1 | 	sub	fp, #8
12790     A7 12 02 F6 | 	mov	arg01, fp
12794     D8 A5 BF FD | 	call	#_converttoint
12798     1C 4E 05 F1 | 	add	fp, #28
1279c     A7 FA 61 FC | 	wrlong	result1, fp
127a0     10 4E 85 F1 | 	sub	fp, #16
127a4     A7 12 02 F6 | 	mov	arg01, fp
127a8     0C 4E 85 F1 | 	sub	fp, #12
127ac     C0 A5 BF FD | 	call	#_converttoint
127b0     FD 16 02 F6 | 	mov	arg03, result1
127b4     20 4E 05 F1 | 	add	fp, #32
127b8     A7 16 62 FC | 	wrlong	arg03, fp
127bc     F2 12 02 FB | 	rdlong	arg01, objptr
127c0     04 4E 85 F1 | 	sub	fp, #4
127c4     A7 FE 01 FB | 	rdlong	result3, fp
127c8     FF 12 02 F1 | 	add	arg01, result3
127cc     1C 4E 85 F1 | 	sub	fp, #28
127d0     0A 16 66 F0 | 	shl	arg03, #10
127d4     0B 13 02 F1 | 	add	arg01, arg03
127d8     6C EF B0 FD | 	call	#_pspeek
127dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
127e0     A7 FA 61 FC | 	wrlong	result1, fp
127e4     08 4E 05 F1 | 	add	fp, #8
127e8     A7 3A 68 FC | 	wrlong	#29, fp
127ec     08 4E 85 F1 | 	sub	fp, #8
127f0     A7 12 02 F6 | 	mov	arg01, fp
127f4     2C A4 BF FD | 	call	#_push
127f8                 | LR__1511
127f8     A7 F0 03 F6 | 	mov	ptra, fp
127fc     B2 00 A0 FD | 	call	#popregs_
12800                 | _do_getpixel_ret
12800     2D 00 64 FD | 	ret
12804                 | 
12804                 | ' 
12804                 | ' '-------------------- gettime
12804                 | ' 
12804                 | ' sub do_gettime
12804                 | _do_gettime
12804     02 4A 05 F6 | 	mov	COUNT_, #2
12808     A8 00 A0 FD | 	call	#pushregs_
1280c     14 F0 07 F1 | 	add	ptra, #20
12810                 | ' 
12810                 | ' const asm 
12810     1A 26 72 FD | 	getct	local01 wc
12814     1A 28 62 FD | 	getct	local02
12818                 | ' return hi1, lo1
12818     14 FD 01 F6 | 	mov	result2, local02
1281c     A7 26 62 FC | 	wrlong	local01, fp
12820     04 4E 05 F1 | 	add	fp, #4
12824     A7 FC 61 FC | 	wrlong	result2, fp
12828     0C 4E 05 F1 | 	add	fp, #12
1282c     A7 3A 68 FC | 	wrlong	#29, fp
12830     0C 4E 85 F1 | 	sub	fp, #12
12834     A7 12 02 FB | 	rdlong	arg01, fp
12838     04 4E 05 F1 | 	add	fp, #4
1283c     A7 12 62 FC | 	wrlong	arg01, fp
12840     08 4E 85 F1 | 	sub	fp, #8
12844     A7 12 02 FB | 	rdlong	arg01, fp
12848     0C 4E 05 F1 | 	add	fp, #12
1284c     A7 12 62 FC | 	wrlong	arg01, fp
12850     04 4E 85 F1 | 	sub	fp, #4
12854     A7 12 02 F6 | 	mov	arg01, fp
12858     08 4E 85 F1 | 	sub	fp, #8
1285c     C4 A3 BF FD | 	call	#_push
12860     A7 F0 03 F6 | 	mov	ptra, fp
12864     B2 00 A0 FD | 	call	#popregs_
12868                 | _do_gettime_ret
12868     2D 00 64 FD | 	ret
1286c                 | 
1286c                 | ' 
1286c                 | ' '-------------------- gosub
1286c                 | ' 
1286c                 | ' sub do_gosub()
1286c                 | _do_gosub
1286c     50 00 00 FF 
12870     34 E5 05 F1 | 	add	objptr, ##41268
12874     F2 00 02 FB | 	rdlong	_var01, objptr
12878     01 00 06 F1 | 	add	_var01, #1
1287c     F2 00 62 FC | 	wrlong	_var01, objptr
12880                 | ' gosubtop+=1
12880                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12880     06 00 00 FF 
12884     B4 E4 85 F1 | 	sub	objptr, ##3252
12888     F2 00 02 FB | 	rdlong	_var01, objptr
1288c     01 00 06 F1 | 	add	_var01, #1
12890     00 03 02 F6 | 	mov	_var02, _var01
12894     01 02 66 F0 | 	shl	_var02, #1
12898     00 03 02 F1 | 	add	_var02, _var01
1289c     02 02 66 F0 | 	shl	_var02, #2
128a0     03 00 00 FF 
128a4     04 E4 85 F1 | 	sub	objptr, ##1540
128a8     F2 02 02 F1 | 	add	_var02, objptr
128ac     08 02 06 F1 | 	add	_var02, #8
128b0     01 03 02 FB | 	rdlong	_var02, _var02
128b4     FE 03 0E F2 | 	cmp	_var02, #510 wz
128b8     47 00 00 FF 
128bc     7C E4 85 F1 | 	sub	objptr, ##36476
128c0     58 00 90 5D |  if_ne	jmp	#LR__1520
128c4     50 00 00 FF 
128c8     34 E5 05 F1 | 	add	objptr, ##41268
128cc     F2 02 02 FB | 	rdlong	_var02, objptr
128d0     03 02 66 F0 | 	shl	_var02, #3
128d4     03 00 00 FF 
128d8     88 E5 85 F1 | 	sub	objptr, ##1928
128dc     F2 02 02 F1 | 	add	_var02, objptr
128e0     03 00 00 FF 
128e4     0C E5 05 F1 | 	add	objptr, ##1804
128e8     F2 00 02 FB | 	rdlong	_var01, objptr
128ec     01 01 62 FC | 	wrlong	_var01, _var02
128f0     7C E4 05 F1 | 	add	objptr, #124
128f4     F2 02 02 FB | 	rdlong	_var02, objptr
128f8     03 02 66 F0 | 	shl	_var02, #3
128fc     03 00 00 FF 
12900     88 E5 85 F1 | 	sub	objptr, ##1928
12904     F2 02 02 F1 | 	add	_var02, objptr
12908     04 02 06 F1 | 	add	_var02, #4
1290c     01 01 68 FC | 	wrlong	#0, _var02
12910     4C 00 00 FF 
12914     AC E5 85 F1 | 	sub	objptr, ##39340
12918     64 00 90 FD | 	jmp	#LR__1521
1291c                 | LR__1520
1291c     50 00 00 FF 
12920     34 E5 05 F1 | 	add	objptr, ##41268
12924     F2 02 02 FB | 	rdlong	_var02, objptr
12928     03 02 66 F0 | 	shl	_var02, #3
1292c     03 00 00 FF 
12930     88 E5 85 F1 | 	sub	objptr, ##1928
12934     F2 02 02 F1 | 	add	_var02, objptr
12938     03 00 00 FF 
1293c     14 E5 05 F1 | 	add	objptr, ##1812
12940     F2 00 02 FB | 	rdlong	_var01, objptr
12944     01 01 62 FC | 	wrlong	_var01, _var02
12948     74 E4 05 F1 | 	add	objptr, #116
1294c     F2 02 02 FB | 	rdlong	_var02, objptr
12950     03 02 66 F0 | 	shl	_var02, #3
12954     03 00 00 FF 
12958     88 E5 85 F1 | 	sub	objptr, ##1928
1295c     F2 02 02 F1 | 	add	_var02, objptr
12960     02 00 00 FF 
12964     2C E5 85 F1 | 	sub	objptr, ##1324
12968     F2 00 02 FB | 	rdlong	_var01, objptr
1296c     4A 00 00 FF 
12970     80 E4 85 F1 | 	sub	objptr, ##38016
12974     02 00 06 F1 | 	add	_var01, #2
12978     04 02 06 F1 | 	add	_var02, #4
1297c     01 01 62 FC | 	wrlong	_var01, _var02
12980                 | LR__1521
12980                 | _do_gosub_ret
12980     2D 00 64 FD | 	ret
12984                 | 
12984                 | ' 
12984                 | ' '--------------------- goto
12984                 | ' 
12984                 | ' '------- fast goto
12984                 | ' 
12984                 | ' sub do_fast_goto
12984                 | _do_fast_goto
12984     02 4A 05 F6 | 	mov	COUNT_, #2
12988     A8 00 A0 FD | 	call	#pushregs_
1298c                 | _do_fast_goto_enter
1298c     4A 00 00 FF 
12990     80 E4 05 F1 | 	add	objptr, ##38016
12994     F2 12 02 FB | 	rdlong	arg01, objptr
12998     09 27 02 F6 | 	mov	local01, arg01
1299c     01 26 66 F0 | 	shl	local01, #1
129a0     09 27 02 F1 | 	add	local01, arg01
129a4     02 26 66 F0 | 	shl	local01, #2
129a8     03 00 00 FF 
129ac     04 E4 85 F1 | 	sub	objptr, ##1540
129b0     F2 26 02 F1 | 	add	local01, objptr
129b4     13 29 02 FB | 	rdlong	local02, local01
129b8     14 13 02 F6 | 	mov	arg01, local02
129bc     47 00 00 FF 
129c0     7C E4 85 F1 | 	sub	objptr, ##36476
129c4     D8 ED B0 FD | 	call	#_pslpeek
129c8     FD 12 02 F6 | 	mov	arg01, result1
129cc                 | ' 
129cc                 | ' testptr=compiledline(lineptr_e).result.uresult
129cc                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
129cc                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
129cc     4A 00 00 FF 
129d0     80 E4 05 F1 | 	add	objptr, ##38016
129d4     F2 FA 01 FB | 	rdlong	result1, objptr
129d8     FD 26 02 F6 | 	mov	local01, result1
129dc     01 26 66 F0 | 	shl	local01, #1
129e0     FD 26 02 F1 | 	add	local01, result1
129e4     02 26 66 F0 | 	shl	local01, #2
129e8     03 00 00 FF 
129ec     04 E4 85 F1 | 	sub	objptr, ##1540
129f0     F2 26 02 F1 | 	add	local01, objptr
129f4     04 26 06 F1 | 	add	local01, #4
129f8     13 27 02 FB | 	rdlong	local01, local01
129fc     13 13 0A F2 | 	cmp	arg01, local01 wz
12a00     47 00 00 FF 
12a04     7C E4 85 F1 | 	sub	objptr, ##36476
12a08     58 00 90 5D |  if_ne	jmp	#LR__1530
12a0c     50 00 00 FF 
12a10     B8 E4 05 F1 | 	add	objptr, ##41144
12a14     F2 28 62 FC | 	wrlong	local02, objptr
12a18     06 00 00 FF 
12a1c     3C E4 85 F1 | 	sub	objptr, ##3132
12a20     F2 28 02 FB | 	rdlong	local02, objptr
12a24     01 28 86 F1 | 	sub	local02, #1
12a28     04 E4 05 F1 | 	add	objptr, #4
12a2c     F2 28 62 FC | 	wrlong	local02, objptr
12a30                 | '   runptr=testptr
12a30                 | '   lineptr_e=lineptr-1
12a30                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12a30     06 00 00 FF 
12a34     84 E4 05 F1 | 	add	objptr, ##3204
12a38     F2 28 02 FB | 	rdlong	local02, objptr
12a3c     50 00 00 FF 
12a40     04 E5 85 F1 | 	sub	objptr, ##41220
12a44     FF FF 3F FF 
12a48     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12a4c     50 00 00 AF 
12a50     04 E5 05 A1 |  if_e	add	objptr, ##41220
12a54     F2 00 68 AC |  if_e	wrlong	#0, objptr
12a58     50 00 00 AF 
12a5c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12a60     04 00 90 FD | 	jmp	#LR__1531
12a64                 | LR__1530
12a64     0C 00 B0 FD | 	call	#_do_find_goto
12a68                 | LR__1531
12a68     A7 F0 03 F6 | 	mov	ptra, fp
12a6c     B2 00 A0 FD | 	call	#popregs_
12a70                 | _do_fast_goto_ret
12a70     2D 00 64 FD | 	ret
12a74                 | 
12a74                 | ' 
12a74                 | ' '------- find goto  
12a74                 | ' 
12a74                 | ' sub do_find_goto
12a74                 | _do_find_goto
12a74     03 4A 05 F6 | 	mov	COUNT_, #3
12a78     A8 00 A0 FD | 	call	#pushregs_
12a7c     24 F0 07 F1 | 	add	ptra, #36
12a80                 | _do_find_goto_enter
12a80     4A 00 00 FF 
12a84     80 E4 05 F1 | 	add	objptr, ##38016
12a88     F2 26 02 FB | 	rdlong	local01, objptr
12a8c     13 29 02 F6 | 	mov	local02, local01
12a90     01 28 66 F0 | 	shl	local02, #1
12a94     13 29 02 F1 | 	add	local02, local01
12a98     02 28 66 F0 | 	shl	local02, #2
12a9c     03 00 00 FF 
12aa0     04 E4 85 F1 | 	sub	objptr, ##1540
12aa4     F2 28 02 F1 | 	add	local02, objptr
12aa8     04 28 06 F1 | 	add	local02, #4
12aac     14 29 02 FB | 	rdlong	local02, local02
12ab0     A7 28 62 FC | 	wrlong	local02, fp
12ab4     03 00 00 FF 
12ab8     0C E4 05 F1 | 	add	objptr, ##1548
12abc     F2 2A 02 FB | 	rdlong	local03, objptr
12ac0     4A 00 00 FF 
12ac4     88 E4 85 F1 | 	sub	objptr, ##38024
12ac8     04 4E 05 F1 | 	add	fp, #4
12acc     A7 2A 62 FC | 	wrlong	local03, fp
12ad0     04 4E 85 F1 | 	sub	fp, #4
12ad4                 | ' 
12ad4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12ad4                 | ' gotoptr=programstart
12ad4                 | ' do
12ad4                 | LR__1540
12ad4     0C 4E 05 F1 | 	add	fp, #12
12ad8     A7 12 02 F6 | 	mov	arg01, fp
12adc     08 4E 85 F1 | 	sub	fp, #8
12ae0     A7 14 02 FB | 	rdlong	arg02, fp
12ae4     04 4E 85 F1 | 	sub	fp, #4
12ae8     18 16 06 F6 | 	mov	arg03, #24
12aec     0B 00 00 FF 
12af0     CC E4 05 F1 | 	add	objptr, ##5836
12af4     3C 17 B1 FD | 	call	#_psram_spin2_read1
12af8     0B 00 00 FF 
12afc     CC E4 85 F1 | 	sub	objptr, ##5836
12b00                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12b00                 | '   if gotoheader(0)<>$FFFFFFFF then
12b00     0C 4E 05 F1 | 	add	fp, #12
12b04     A7 2A 02 FB | 	rdlong	local03, fp
12b08     0C 4E 85 F1 | 	sub	fp, #12
12b0c     FF FF 7F FF 
12b10     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
12b14     24 00 90 AD |  if_e	jmp	#LR__1541
12b18     04 4E 05 F1 | 	add	fp, #4
12b1c     A7 2A 02 FB | 	rdlong	local03, fp
12b20     04 4E 05 F1 | 	add	fp, #4
12b24     A7 2A 62 FC | 	wrlong	local03, fp
12b28     18 4E 05 F1 | 	add	fp, #24
12b2c     A7 2A 02 FB | 	rdlong	local03, fp
12b30     1C 4E 85 F1 | 	sub	fp, #28
12b34     A7 2A 62 FC | 	wrlong	local03, fp
12b38     04 4E 85 F1 | 	sub	fp, #4
12b3c                 | LR__1541
12b3c     20 4E 05 F1 | 	add	fp, #32
12b40     A7 2A 02 FB | 	rdlong	local03, fp
12b44     20 4E 85 F1 | 	sub	fp, #32
12b48     FF FF 3F FF 
12b4c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
12b50     0C 4E 05 51 |  if_ne	add	fp, #12
12b54     A7 26 02 5B |  if_ne	rdlong	local01, fp
12b58     0C 4E 85 51 |  if_ne	sub	fp, #12
12b5c     FF FF 7F 5F 
12b60     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12b64     18 00 90 AD |  if_e	jmp	#LR__1542
12b68     0C 4E 05 F1 | 	add	fp, #12
12b6c     A7 2A 02 FB | 	rdlong	local03, fp
12b70     0C 4E 85 F1 | 	sub	fp, #12
12b74     A7 28 02 FB | 	rdlong	local02, fp
12b78     14 2B 0A F2 | 	cmp	local03, local02 wz
12b7c     54 FF 9F 5D |  if_ne	jmp	#LR__1540
12b80                 | LR__1542
12b80                 | ' 
12b80                 | ' if gotoheader(0)=gotoline then
12b80     0C 4E 05 F1 | 	add	fp, #12
12b84     A7 2A 02 FB | 	rdlong	local03, fp
12b88     0C 4E 85 F1 | 	sub	fp, #12
12b8c     A7 26 02 FB | 	rdlong	local01, fp
12b90     13 2B 0A F2 | 	cmp	local03, local01 wz
12b94     D8 00 90 5D |  if_ne	jmp	#LR__1543
12b98     4A 00 00 FF 
12b9c     80 E4 05 F1 | 	add	objptr, ##38016
12ba0     F2 26 02 FB | 	rdlong	local01, objptr
12ba4     13 29 02 F6 | 	mov	local02, local01
12ba8     01 28 66 F0 | 	shl	local02, #1
12bac     13 29 02 F1 | 	add	local02, local01
12bb0     02 28 66 F0 | 	shl	local02, #2
12bb4     03 00 00 FF 
12bb8     04 E4 85 F1 | 	sub	objptr, ##1540
12bbc     F2 28 02 F1 | 	add	local02, objptr
12bc0     08 4E 05 F1 | 	add	fp, #8
12bc4     A7 2A 02 FB | 	rdlong	local03, fp
12bc8     14 2B 62 FC | 	wrlong	local03, local02
12bcc     03 00 00 FF 
12bd0     04 E4 05 F1 | 	add	objptr, ##1540
12bd4     F2 26 02 FB | 	rdlong	local01, objptr
12bd8     13 29 02 F6 | 	mov	local02, local01
12bdc     01 28 66 F0 | 	shl	local02, #1
12be0     13 29 02 F1 | 	add	local02, local01
12be4     02 28 66 F0 | 	shl	local02, #2
12be8     03 00 00 FF 
12bec     04 E4 85 F1 | 	sub	objptr, ##1540
12bf0     F2 28 02 F1 | 	add	local02, objptr
12bf4     08 28 06 F1 | 	add	local02, #8
12bf8     14 9D 68 FC | 	wrlong	#78, local02
12bfc     03 00 00 FF 
12c00     04 E4 05 F1 | 	add	objptr, ##1540
12c04     F2 28 02 FB | 	rdlong	local02, objptr
12c08     14 13 02 F6 | 	mov	arg01, local02
12c0c     01 12 66 F0 | 	shl	arg01, #1
12c10     14 13 02 F1 | 	add	arg01, local02
12c14     02 12 66 F0 | 	shl	arg01, #2
12c18     03 00 00 FF 
12c1c     04 E4 85 F1 | 	sub	objptr, ##1540
12c20     F2 12 02 F1 | 	add	arg01, objptr
12c24     09 00 00 FF 
12c28     44 E4 05 F1 | 	add	objptr, ##4676
12c2c     F2 14 02 FB | 	rdlong	arg02, objptr
12c30     02 2A 06 F6 | 	mov	local03, #2
12c34     14 2B 02 F1 | 	add	local03, local02
12c38     0B 00 00 FF 
12c3c     5C E4 85 F1 | 	sub	objptr, ##5724
12c40     F2 16 02 FB | 	rdlong	arg03, objptr
12c44     0B 2B 02 FD | 	qmul	local03, arg03
12c48     08 4E 85 F1 | 	sub	fp, #8
12c4c     39 00 00 FF 
12c50     98 E5 85 F1 | 	sub	objptr, ##29592
12c54     18 2A 62 FD | 	getqx	local03
12c58     15 15 02 F1 | 	add	arg02, local03
12c5c     70 16 B1 FD | 	call	#_psram_spin2_write
12c60     0B 00 00 FF 
12c64     CC E4 85 F1 | 	sub	objptr, ##5836
12c68     18 FD BF FD | 	call	#_do_fast_goto
12c6c     0C 00 90 FD | 	jmp	#LR__1544
12c70                 | LR__1543
12c70     26 12 06 F6 | 	mov	arg01, #38
12c74     00 14 06 F6 | 	mov	arg02, #0
12c78     54 E8 B0 FD | 	call	#_printerror
12c7c                 | LR__1544
12c7c     A7 F0 03 F6 | 	mov	ptra, fp
12c80     B2 00 A0 FD | 	call	#popregs_
12c84                 | _do_find_goto_ret
12c84     2D 00 64 FD | 	ret
12c88                 | 
12c88                 | ' 
12c88                 | ' '------- slow goto  
12c88                 | ' 
12c88                 | ' sub do_slow_goto
12c88                 | _do_slow_goto
12c88     02 4A 05 F6 | 	mov	COUNT_, #2
12c8c     A8 00 A0 FD | 	call	#pushregs_
12c90     30 F0 07 F1 | 	add	ptra, #48
12c94     F4 9E BF FD | 	call	#_pop
12c98     FF 26 02 F6 | 	mov	local01, result3
12c9c     24 4E 05 F1 | 	add	fp, #36
12ca0     A7 FA 61 FC | 	wrlong	result1, fp
12ca4     04 4E 05 F1 | 	add	fp, #4
12ca8     A7 FC 61 FC | 	wrlong	result2, fp
12cac     04 4E 05 F1 | 	add	fp, #4
12cb0     A7 26 62 FC | 	wrlong	local01, fp
12cb4     08 4E 85 F1 | 	sub	fp, #8
12cb8     A7 12 02 F6 | 	mov	arg01, fp
12cbc     24 4E 85 F1 | 	sub	fp, #36
12cc0     AC A0 BF FD | 	call	#_converttoint
12cc4     A7 FA 61 FC | 	wrlong	result1, fp
12cc8     4A 00 00 FF 
12ccc     88 E4 05 F1 | 	add	objptr, ##38024
12cd0     F2 28 02 FB | 	rdlong	local02, objptr
12cd4     4A 00 00 FF 
12cd8     88 E4 85 F1 | 	sub	objptr, ##38024
12cdc     04 4E 05 F1 | 	add	fp, #4
12ce0     A7 28 62 FC | 	wrlong	local02, fp
12ce4     04 4E 85 F1 | 	sub	fp, #4
12ce8                 | ' 
12ce8                 | ' t1=pop() : gotoline=converttoint(t1)
12ce8                 | ' gotoptr=programstart
12ce8                 | ' do
12ce8                 | LR__1550
12ce8     0C 4E 05 F1 | 	add	fp, #12
12cec     A7 12 02 F6 | 	mov	arg01, fp
12cf0     08 4E 85 F1 | 	sub	fp, #8
12cf4     A7 14 02 FB | 	rdlong	arg02, fp
12cf8     04 4E 85 F1 | 	sub	fp, #4
12cfc     18 16 06 F6 | 	mov	arg03, #24
12d00     0B 00 00 FF 
12d04     CC E4 05 F1 | 	add	objptr, ##5836
12d08     28 15 B1 FD | 	call	#_psram_spin2_read1
12d0c     0B 00 00 FF 
12d10     CC E4 85 F1 | 	sub	objptr, ##5836
12d14                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12d14                 | '   if gotoheader(0)<>$FFFFFFFF then
12d14     0C 4E 05 F1 | 	add	fp, #12
12d18     A7 28 02 FB | 	rdlong	local02, fp
12d1c     0C 4E 85 F1 | 	sub	fp, #12
12d20     FF FF 7F FF 
12d24     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12d28     24 00 90 AD |  if_e	jmp	#LR__1551
12d2c     04 4E 05 F1 | 	add	fp, #4
12d30     A7 28 02 FB | 	rdlong	local02, fp
12d34     04 4E 05 F1 | 	add	fp, #4
12d38     A7 28 62 FC | 	wrlong	local02, fp
12d3c     18 4E 05 F1 | 	add	fp, #24
12d40     A7 28 02 FB | 	rdlong	local02, fp
12d44     1C 4E 85 F1 | 	sub	fp, #28
12d48     A7 28 62 FC | 	wrlong	local02, fp
12d4c     04 4E 85 F1 | 	sub	fp, #4
12d50                 | LR__1551
12d50     20 4E 05 F1 | 	add	fp, #32
12d54     A7 28 02 FB | 	rdlong	local02, fp
12d58     20 4E 85 F1 | 	sub	fp, #32
12d5c     FF FF 3F FF 
12d60     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12d64     0C 4E 05 51 |  if_ne	add	fp, #12
12d68     A7 26 02 5B |  if_ne	rdlong	local01, fp
12d6c     0C 4E 85 51 |  if_ne	sub	fp, #12
12d70     FF FF 7F 5F 
12d74     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12d78     18 00 90 AD |  if_e	jmp	#LR__1552
12d7c     0C 4E 05 F1 | 	add	fp, #12
12d80     A7 28 02 FB | 	rdlong	local02, fp
12d84     0C 4E 85 F1 | 	sub	fp, #12
12d88     A7 16 02 FB | 	rdlong	arg03, fp
12d8c     0B 29 0A F2 | 	cmp	local02, arg03 wz
12d90     54 FF 9F 5D |  if_ne	jmp	#LR__1550
12d94                 | LR__1552
12d94                 | ' if gotoheader(0)=gotoline then  
12d94     0C 4E 05 F1 | 	add	fp, #12
12d98     A7 28 02 FB | 	rdlong	local02, fp
12d9c     0C 4E 85 F1 | 	sub	fp, #12
12da0     A7 26 02 FB | 	rdlong	local01, fp
12da4     13 29 0A F2 | 	cmp	local02, local01 wz
12da8     60 00 90 5D |  if_ne	jmp	#LR__1553
12dac     08 4E 05 F1 | 	add	fp, #8
12db0     A7 28 02 FB | 	rdlong	local02, fp
12db4     08 4E 85 F1 | 	sub	fp, #8
12db8     50 00 00 FF 
12dbc     B8 E4 05 F1 | 	add	objptr, ##41144
12dc0     F2 28 62 FC | 	wrlong	local02, objptr
12dc4     06 00 00 FF 
12dc8     3C E4 85 F1 | 	sub	objptr, ##3132
12dcc     F2 28 02 FB | 	rdlong	local02, objptr
12dd0     01 28 86 F1 | 	sub	local02, #1
12dd4     04 E4 05 F1 | 	add	objptr, #4
12dd8     F2 28 62 FC | 	wrlong	local02, objptr
12ddc                 | '    runptr=oldgotoptr
12ddc                 | '    lineptr_e=lineptr-1
12ddc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12ddc     06 00 00 FF 
12de0     84 E4 05 F1 | 	add	objptr, ##3204
12de4     F2 28 02 FB | 	rdlong	local02, objptr
12de8     50 00 00 FF 
12dec     04 E5 85 F1 | 	sub	objptr, ##41220
12df0     FF FF 3F FF 
12df4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12df8     50 00 00 AF 
12dfc     04 E5 05 A1 |  if_e	add	objptr, ##41220
12e00     F2 00 68 AC |  if_e	wrlong	#0, objptr
12e04     50 00 00 AF 
12e08     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12e0c                 | LR__1553
12e0c     A7 F0 03 F6 | 	mov	ptra, fp
12e10     B2 00 A0 FD | 	call	#popregs_
12e14                 | _do_slow_goto_ret
12e14     2D 00 64 FD | 	ret
12e18                 | 
12e18                 | ' 
12e18                 | ' ' ----------------  hex$
12e18                 | ' 
12e18                 | ' sub do_hex
12e18                 | _do_hex
12e18     01 4A 05 F6 | 	mov	COUNT_, #1
12e1c     A8 00 A0 FD | 	call	#pushregs_
12e20     18 F0 07 F1 | 	add	ptra, #24
12e24     4A 00 00 FF 
12e28     80 E4 05 F1 | 	add	objptr, ##38016
12e2c     F2 26 02 FB | 	rdlong	local01, objptr
12e30     13 17 02 F6 | 	mov	arg03, local01
12e34     01 16 66 F0 | 	shl	arg03, #1
12e38     13 17 02 F1 | 	add	arg03, local01
12e3c     02 16 66 F0 | 	shl	arg03, #2
12e40     03 00 00 FF 
12e44     04 E4 85 F1 | 	sub	objptr, ##1540
12e48     F2 16 02 F1 | 	add	arg03, objptr
12e4c     0B 17 02 FB | 	rdlong	arg03, arg03
12e50     0C 4E 05 F1 | 	add	fp, #12
12e54     A7 16 62 FC | 	wrlong	arg03, fp
12e58                 | ' 
12e58                 | ' numpar=compiledline(lineptr_e).result.uresult
12e58                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12e58     0C 4E 85 F1 | 	sub	fp, #12
12e5c     03 16 16 F2 | 	cmp	arg03, #3 wc
12e60     47 00 00 FF 
12e64     7C E4 85 F1 | 	sub	objptr, ##36476
12e68     0C 4E 05 C1 |  if_b	add	fp, #12
12e6c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12e70     0C 4E 85 C1 |  if_b	sub	fp, #12
12e74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
12e78     00 12 06 F6 | 	mov	arg01, #0
12e7c     1C 7D B1 FD | 	call	#__system___getiolock_0595
12e80     FD 12 02 F6 | 	mov	arg01, result1
12e84     EC 1F B1 FD | 	call	#__system___lockmem
12e88     A9 01 00 FF 
12e8c     C1 14 06 F6 | 	mov	arg02, ##@LR__5806
12e90     00 12 06 F6 | 	mov	arg01, #0
12e94     00 16 06 F6 | 	mov	arg03, #0
12e98     CC 2C B1 FD | 	call	#__system___basic_print_string
12e9c     00 12 06 F6 | 	mov	arg01, #0
12ea0     F8 7C B1 FD | 	call	#__system___getiolock_0595
12ea4     FD 00 68 FC | 	wrlong	#0, result1
12ea8     27 12 06 F6 | 	mov	arg01, #39
12eac     00 14 06 F6 | 	mov	arg02, #0
12eb0     1C E6 B0 FD | 	call	#_printerror
12eb4     B8 00 90 FD | 	jmp	#LR__1563
12eb8                 | LR__1560
12eb8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12eb8     0C 4E 05 F1 | 	add	fp, #12
12ebc     A7 26 02 FB | 	rdlong	local01, fp
12ec0     0C 4E 85 F1 | 	sub	fp, #12
12ec4     02 26 0E F2 | 	cmp	local01, #2 wz
12ec8     38 00 90 5D |  if_ne	jmp	#LR__1561
12ecc     BC 9C BF FD | 	call	#_pop
12ed0     FF 26 02 F6 | 	mov	local01, result3
12ed4     A7 FA 61 FC | 	wrlong	result1, fp
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 FC 61 FC | 	wrlong	result2, fp
12ee0     04 4E 05 F1 | 	add	fp, #4
12ee4     A7 26 62 FC | 	wrlong	local01, fp
12ee8     08 4E 85 F1 | 	sub	fp, #8
12eec     A7 12 02 F6 | 	mov	arg01, fp
12ef0     7C 9E BF FD | 	call	#_converttoint
12ef4     14 4E 05 F1 | 	add	fp, #20
12ef8     A7 FA 61 FC | 	wrlong	result1, fp
12efc     14 4E 85 F1 | 	sub	fp, #20
12f00     0C 00 90 FD | 	jmp	#LR__1562
12f04                 | LR__1561
12f04     14 4E 05 F1 | 	add	fp, #20
12f08     A7 10 68 FC | 	wrlong	#8, fp
12f0c     14 4E 85 F1 | 	sub	fp, #20
12f10                 | LR__1562
12f10     78 9C BF FD | 	call	#_pop
12f14     FF 26 02 F6 | 	mov	local01, result3
12f18     A7 FA 61 FC | 	wrlong	result1, fp
12f1c     04 4E 05 F1 | 	add	fp, #4
12f20     A7 FC 61 FC | 	wrlong	result2, fp
12f24     04 4E 05 F1 | 	add	fp, #4
12f28     A7 26 62 FC | 	wrlong	local01, fp
12f2c     08 4E 85 F1 | 	sub	fp, #8
12f30     A7 12 02 F6 | 	mov	arg01, fp
12f34     38 9E BF FD | 	call	#_converttoint
12f38     10 4E 05 F1 | 	add	fp, #16
12f3c     A7 FA 61 FC | 	wrlong	result1, fp
12f40     FD 12 02 F6 | 	mov	arg01, result1
12f44     04 4E 05 F1 | 	add	fp, #4
12f48     A7 14 02 FB | 	rdlong	arg02, fp
12f4c     14 4E 85 F1 | 	sub	fp, #20
12f50     10 16 06 F6 | 	mov	arg03, #16
12f54     EC 41 B1 FD | 	call	#__system__Number_S
12f58     A7 FA 61 FC | 	wrlong	result1, fp
12f5c     08 4E 05 F1 | 	add	fp, #8
12f60     A7 3E 68 FC | 	wrlong	#31, fp
12f64     08 4E 85 F1 | 	sub	fp, #8
12f68     A7 12 02 F6 | 	mov	arg01, fp
12f6c     B4 9C BF FD | 	call	#_push
12f70                 | LR__1563
12f70     A7 F0 03 F6 | 	mov	ptra, fp
12f74     B2 00 A0 FD | 	call	#popregs_
12f78                 | _do_hex_ret
12f78     2D 00 64 FD | 	ret
12f7c                 | 
12f7c                 | ' 
12f7c                 | ' ' ----------------  if
12f7c                 | ' 
12f7c                 | ' sub do_if
12f7c                 | _do_if
12f7c     05 4A 05 F6 | 	mov	COUNT_, #5
12f80     A8 00 A0 FD | 	call	#pushregs_
12f84     04 9C BF FD | 	call	#_pop
12f88     FD 26 0A F6 | 	mov	local01, result1 wz
12f8c     FE 28 02 F6 | 	mov	local02, result2
12f90     FF 2A 02 F6 | 	mov	local03, result3
12f94                 | ' t1=pop()
12f94                 | ' ' if uresult=0, jump over else
12f94                 | ' if t1.result.uresult = 0 then 
12f94     BC 00 90 5D |  if_ne	jmp	#LR__1572
12f98                 | '   for i=lineptr_e to lineptr-1
12f98     4A 00 00 FF 
12f9c     80 E4 05 F1 | 	add	objptr, ##38016
12fa0     F2 2C 02 FB | 	rdlong	local04, objptr
12fa4     04 E4 85 F1 | 	sub	objptr, #4
12fa8     F2 2E 02 FB | 	rdlong	local05, objptr
12fac     4A 00 00 FF 
12fb0     7C E4 85 F1 | 	sub	objptr, ##38012
12fb4                 | LR__1570
12fb4     17 2D 52 F2 | 	cmps	local04, local05 wc
12fb8     78 00 90 3D |  if_ae	jmp	#LR__1571
12fbc     16 FF 01 F6 | 	mov	result3, local04
12fc0     01 FE 65 F0 | 	shl	result3, #1
12fc4     16 FF 01 F1 | 	add	result3, local04
12fc8     02 FE 65 F0 | 	shl	result3, #2
12fcc     47 00 00 FF 
12fd0     7C E4 05 F1 | 	add	objptr, ##36476
12fd4     F2 FE 01 F1 | 	add	result3, objptr
12fd8     FF 26 02 FB | 	rdlong	local01, result3
12fdc     04 FE 05 F1 | 	add	result3, #4
12fe0     FF FC 01 FB | 	rdlong	result2, result3
12fe4     16 FF 01 F6 | 	mov	result3, local04
12fe8     01 FE 65 F0 | 	shl	result3, #1
12fec     16 FF 01 F1 | 	add	result3, local04
12ff0     02 FE 65 F0 | 	shl	result3, #2
12ff4     F2 FE 01 F1 | 	add	result3, objptr
12ff8     08 FE 05 F1 | 	add	result3, #8
12ffc     FF FE 01 FB | 	rdlong	result3, result3
13000     FE 28 02 F6 | 	mov	local02, result2
13004     FF 2A 02 F6 | 	mov	local03, result3
13008                 | '     t1=compiledline(i)
13008                 | '     if t1.result_type=token_else then lineptr_e=i : return
13008     5A 2A 0E F2 | 	cmp	local03, #90 wz
1300c     47 00 00 FF 
13010     7C E4 85 F1 | 	sub	objptr, ##36476
13014     4A 00 00 AF 
13018     80 E4 05 A1 |  if_e	add	objptr, ##38016
1301c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13020     4A 00 00 AF 
13024     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13028     28 00 90 AD |  if_e	jmp	#LR__1573
1302c     01 2C 06 F1 | 	add	local04, #1
13030     80 FF 9F FD | 	jmp	#LR__1570
13034                 | LR__1571
13034     4A 00 00 FF 
13038     7C E4 05 F1 | 	add	objptr, ##38012
1303c     F2 2E 02 FB | 	rdlong	local05, objptr
13040     01 2E 86 F1 | 	sub	local05, #1
13044     04 E4 05 F1 | 	add	objptr, #4
13048     F2 2E 62 FC | 	wrlong	local05, objptr
1304c     4A 00 00 FF 
13050     80 E4 85 F1 | 	sub	objptr, ##38016
13054                 | LR__1572
13054                 | LR__1573
13054     A7 F0 03 F6 | 	mov	ptra, fp
13058     B2 00 A0 FD | 	call	#popregs_
1305c                 | _do_if_ret
1305c     2D 00 64 FD | 	ret
13060                 | 
13060                 | ' 
13060                 | ' ' ----------------  inkey$
13060                 | ' 
13060                 | ' sub do_inkey
13060                 | _do_inkey
13060     02 4A 05 F6 | 	mov	COUNT_, #2
13064     A8 00 A0 FD | 	call	#pushregs_
13068     0C F0 07 F1 | 	add	ptra, #12
1306c     F0 15 B1 FD | 	call	#_usbnew_spin2_get_key
13070     45 00 00 FF 
13074     74 E4 05 F1 | 	add	objptr, ##35444
13078     F2 FA 61 FC | 	wrlong	result1, objptr
1307c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
1307c     45 00 00 FF 
13080     74 E4 85 F1 | 	sub	objptr, ##35444
13084     00 FA 0D F2 | 	cmp	result1, #0 wz
13088     94 00 90 AD |  if_e	jmp	#LR__1581
1308c     45 00 00 FF 
13090     74 E4 05 F1 | 	add	objptr, ##35444
13094     F2 1C 02 FB | 	rdlong	arg06, objptr
13098     45 00 00 FF 
1309c     74 E4 85 F1 | 	sub	objptr, ##35444
130a0     00 00 40 FF 
130a4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
130a8     45 00 00 CF 
130ac     74 E4 05 C1 |  if_b	add	objptr, ##35444
130b0     F2 26 02 CB |  if_b	rdlong	local01, objptr
130b4     45 00 00 CF 
130b8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
130bc     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
130c0     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
130c4     58 00 90 3D |  if_ae	jmp	#LR__1581
130c8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
130c8     50 00 00 FF 
130cc     3C E5 05 F1 | 	add	objptr, ##41276
130d0     F2 1C 02 FB | 	rdlong	arg06, objptr
130d4     50 00 00 FF 
130d8     3C E5 85 F1 | 	sub	objptr, ##41276
130dc     01 1C 0E F2 | 	cmp	arg06, #1 wz
130e0     3C 00 90 5D |  if_ne	jmp	#LR__1580
130e4     51 00 00 FF 
130e8     E0 E5 05 F1 | 	add	objptr, ##41952
130ec     F2 14 02 FB | 	rdlong	arg02, objptr
130f0     04 E4 85 F1 | 	sub	objptr, #4
130f4     F2 1A 02 FB | 	rdlong	arg05, objptr
130f8     07 12 06 F6 | 	mov	arg01, #7
130fc     56 00 00 FF 
13100     44 16 06 F6 | 	mov	arg03, ##44100
13104     0C 18 C6 F9 | 	decod	arg04, #12
13108     01 1C 66 F6 | 	neg	arg06, #1
1310c     46 00 00 FF 
13110     10 E5 85 F1 | 	sub	objptr, ##36112
13114     EC 18 B1 FD | 	call	#_audio096_spin2_play
13118     0B 00 00 FF 
1311c     CC E4 85 F1 | 	sub	objptr, ##5836
13120                 | LR__1580
13120                 | LR__1581
13120                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13120     45 00 00 FF 
13124     74 E4 05 F1 | 	add	objptr, ##35444
13128     F2 1C 0A FB | 	rdlong	arg06, objptr wz
1312c     45 00 00 FF 
13130     74 E4 85 F1 | 	sub	objptr, ##35444
13134     D4 01 90 AD |  if_e	jmp	#LR__1590
13138     45 00 00 FF 
1313c     74 E4 05 F1 | 	add	objptr, ##35444
13140     F2 1C 02 FB | 	rdlong	arg06, objptr
13144     45 00 00 FF 
13148     74 E4 85 F1 | 	sub	objptr, ##35444
1314c     00 00 40 FF 
13150     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13154     45 00 00 CF 
13158     74 E4 05 C1 |  if_b	add	objptr, ##35444
1315c     F2 26 02 CB |  if_b	rdlong	local01, objptr
13160     45 00 00 CF 
13164     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13168     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1316c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13170     98 01 90 3D |  if_ae	jmp	#LR__1590
13174                 | '   if leds and 2 = 2 then 
13174     52 00 00 FF 
13178     1C E4 05 F1 | 	add	objptr, ##42012
1317c     F2 26 0A FB | 	rdlong	local01, objptr wz
13180     52 00 00 FF 
13184     1C E4 85 F1 | 	sub	objptr, ##42012
13188     58 01 90 AD |  if_e	jmp	#LR__1589
1318c                 | '     if key>96 andalso key<123 then
1318c     45 00 00 FF 
13190     74 E4 05 F1 | 	add	objptr, ##35444
13194     F2 26 02 FB | 	rdlong	local01, objptr
13198     45 00 00 FF 
1319c     74 E4 85 F1 | 	sub	objptr, ##35444
131a0     61 26 16 F2 | 	cmp	local01, #97 wc
131a4     3C 00 90 CD |  if_b	jmp	#LR__1582
131a8     45 00 00 FF 
131ac     74 E4 05 F1 | 	add	objptr, ##35444
131b0     F2 26 02 FB | 	rdlong	local01, objptr
131b4     45 00 00 FF 
131b8     74 E4 85 F1 | 	sub	objptr, ##35444
131bc     7B 26 16 F2 | 	cmp	local01, #123 wc
131c0     20 00 90 3D |  if_ae	jmp	#LR__1582
131c4     45 00 00 FF 
131c8     74 E4 05 F1 | 	add	objptr, ##35444
131cc     F2 26 02 FB | 	rdlong	local01, objptr
131d0     20 26 86 F1 | 	sub	local01, #32
131d4     F2 26 62 FC | 	wrlong	local01, objptr
131d8     45 00 00 FF 
131dc     74 E4 85 F1 | 	sub	objptr, ##35444
131e0     00 01 90 FD | 	jmp	#LR__1588
131e4                 | LR__1582
131e4     45 00 00 FF 
131e8     74 E4 05 F1 | 	add	objptr, ##35444
131ec     F2 26 02 FB | 	rdlong	local01, objptr
131f0     45 00 00 FF 
131f4     74 E4 85 F1 | 	sub	objptr, ##35444
131f8     41 26 16 F2 | 	cmp	local01, #65 wc
131fc     3C 00 90 CD |  if_b	jmp	#LR__1583
13200     45 00 00 FF 
13204     74 E4 05 F1 | 	add	objptr, ##35444
13208     F2 26 02 FB | 	rdlong	local01, objptr
1320c     45 00 00 FF 
13210     74 E4 85 F1 | 	sub	objptr, ##35444
13214     5B 26 16 F2 | 	cmp	local01, #91 wc
13218     20 00 90 3D |  if_ae	jmp	#LR__1583
1321c     45 00 00 FF 
13220     74 E4 05 F1 | 	add	objptr, ##35444
13224     F2 26 02 FB | 	rdlong	local01, objptr
13228     20 26 06 F1 | 	add	local01, #32
1322c     F2 26 62 FC | 	wrlong	local01, objptr
13230     45 00 00 FF 
13234     74 E4 85 F1 | 	sub	objptr, ##35444
13238     A8 00 90 FD | 	jmp	#LR__1587
1323c                 | LR__1583
1323c     45 00 00 FF 
13240     74 E4 05 F1 | 	add	objptr, ##35444
13244     F2 26 02 FB | 	rdlong	local01, objptr
13248     45 00 00 FF 
1324c     74 E4 85 F1 | 	sub	objptr, ##35444
13250     17 26 16 F2 | 	cmp	local01, #23 wc
13254     3C 00 90 CD |  if_b	jmp	#LR__1584
13258     45 00 00 FF 
1325c     74 E4 05 F1 | 	add	objptr, ##35444
13260     F2 26 02 FB | 	rdlong	local01, objptr
13264     45 00 00 FF 
13268     74 E4 85 F1 | 	sub	objptr, ##35444
1326c     20 26 16 F2 | 	cmp	local01, #32 wc
13270     20 00 90 3D |  if_ae	jmp	#LR__1584
13274     45 00 00 FF 
13278     74 E4 05 F1 | 	add	objptr, ##35444
1327c     F2 26 02 FB | 	rdlong	local01, objptr
13280     09 26 86 F1 | 	sub	local01, #9
13284     F2 26 62 FC | 	wrlong	local01, objptr
13288     45 00 00 FF 
1328c     74 E4 85 F1 | 	sub	objptr, ##35444
13290     50 00 90 FD | 	jmp	#LR__1586
13294                 | LR__1584
13294     45 00 00 FF 
13298     74 E4 05 F1 | 	add	objptr, ##35444
1329c     F2 28 02 FB | 	rdlong	local02, objptr
132a0     45 00 00 FF 
132a4     74 E4 85 F1 | 	sub	objptr, ##35444
132a8     0E 28 16 F2 | 	cmp	local02, #14 wc
132ac     34 00 90 CD |  if_b	jmp	#LR__1585
132b0     45 00 00 FF 
132b4     74 E4 05 F1 | 	add	objptr, ##35444
132b8     F2 26 02 FB | 	rdlong	local01, objptr
132bc     45 00 00 FF 
132c0     74 E4 85 F1 | 	sub	objptr, ##35444
132c4     17 26 16 F2 | 	cmp	local01, #23 wc
132c8     52 00 00 CF 
132cc     20 E4 05 C1 |  if_b	add	objptr, ##42016
132d0     F2 28 02 CB |  if_b	rdlong	local02, objptr
132d4     27 28 06 C1 |  if_b	add	local02, #39
132d8     F2 28 62 CC |  if_b	wrlong	local02, objptr
132dc     52 00 00 CF 
132e0     20 E4 85 C1 |  if_b	sub	objptr, ##42016
132e4                 | LR__1585
132e4                 | LR__1586
132e4                 | LR__1587
132e4                 | LR__1588
132e4                 | LR__1589
132e4     45 00 00 FF 
132e8     74 E4 05 F1 | 	add	objptr, ##35444
132ec     F2 12 02 FB | 	rdlong	arg01, objptr
132f0     45 00 00 FF 
132f4     74 E4 85 F1 | 	sub	objptr, ##35444
132f8     54 E5 B0 FD | 	call	#_scantochar
132fc     FD 12 02 F6 | 	mov	arg01, result1
13300     B0 3D B1 FD | 	call	#__system__Chr_S
13304     A7 FA 61 FC | 	wrlong	result1, fp
13308     0C 00 90 FD | 	jmp	#LR__1591
1330c                 | LR__1590
1330c     A9 01 00 FF 
13310     C8 28 06 F6 | 	mov	local02, ##@LR__5807
13314     A7 28 62 FC | 	wrlong	local02, fp
13318                 | LR__1591
13318     08 4E 05 F1 | 	add	fp, #8
1331c     A7 3E 68 FC | 	wrlong	#31, fp
13320     08 4E 85 F1 | 	sub	fp, #8
13324     A7 12 02 F6 | 	mov	arg01, fp
13328     F8 98 BF FD | 	call	#_push
1332c     A7 F0 03 F6 | 	mov	ptra, fp
13330     B2 00 A0 FD | 	call	#popregs_
13334                 | _do_inkey_ret
13334     2D 00 64 FD | 	ret
13338                 | 
13338                 | ' 
13338                 | ' ' ----------------  ink
13338                 | ' 
13338                 | ' sub do_ink
13338                 | _do_ink
13338     00 4A 05 F6 | 	mov	COUNT_, #0
1333c     A8 00 A0 FD | 	call	#pushregs_
13340     0C F0 07 F1 | 	add	ptra, #12
13344     44 98 BF FD | 	call	#_pop
13348     FF 14 02 F6 | 	mov	arg02, result3
1334c     A7 FA 61 FC | 	wrlong	result1, fp
13350     04 4E 05 F1 | 	add	fp, #4
13354     A7 FC 61 FC | 	wrlong	result2, fp
13358     04 4E 05 F1 | 	add	fp, #4
1335c     A7 14 62 FC | 	wrlong	arg02, fp
13360     08 4E 85 F1 | 	sub	fp, #8
13364     A7 12 02 F6 | 	mov	arg01, fp
13368     04 9A BF FD | 	call	#_converttoint
1336c     37 00 00 FF 
13370     3C E4 05 F1 | 	add	objptr, ##28220
13374     F2 FA 61 FC | 	wrlong	result1, objptr
13378     04 E4 85 F1 | 	sub	objptr, #4
1337c     F2 14 02 FB | 	rdlong	arg02, objptr
13380                 | ' 
13380                 | ' write_color:=ff
13380     36 00 00 FF 
13384     F7 E5 85 F1 | 	sub	objptr, ##28151
13388     F2 FA 61 FC | 	wrlong	result1, objptr
1338c                 | ' write_background:=bb
1338c     04 E4 05 F1 | 	add	objptr, #4
13390     F2 14 62 FC | 	wrlong	arg02, objptr
13394     36 00 00 FF 
13398     F7 E5 05 F1 | 	add	objptr, ##28151
1339c     F2 12 02 FB | 	rdlong	arg01, objptr
133a0     37 00 00 FF 
133a4     3C E4 85 F1 | 	sub	objptr, ##28220
133a8     F8 EC B0 FD | 	call	#_hg010b_spin2_setcursorcolor
133ac     A7 F0 03 F6 | 	mov	ptra, fp
133b0     B2 00 A0 FD | 	call	#popregs_
133b4                 | _do_ink_ret
133b4     2D 00 64 FD | 	ret
133b8                 | 
133b8                 | ' 
133b8                 | ' ' ----------------  int
133b8                 | ' 
133b8                 | ' sub do_int
133b8                 | _do_int
133b8     02 4A 05 F6 | 	mov	COUNT_, #2
133bc     A8 00 A0 FD | 	call	#pushregs_
133c0     10 F0 07 F1 | 	add	ptra, #16
133c4     C4 97 BF FD | 	call	#_pop
133c8     FE 26 02 F6 | 	mov	local01, result2
133cc     FF 28 02 F6 | 	mov	local02, result3
133d0     A7 FA 61 FC | 	wrlong	result1, fp
133d4     04 4E 05 F1 | 	add	fp, #4
133d8     A7 26 62 FC | 	wrlong	local01, fp
133dc     04 4E 05 F1 | 	add	fp, #4
133e0     A7 28 62 FC | 	wrlong	local02, fp
133e4                 | ' 
133e4                 | ' t1=pop()
133e4                 | ' select case t1.result_type
133e4     08 4E 85 F1 | 	sub	fp, #8
133e8     1E 28 0E F2 | 	cmp	local02, #30 wz
133ec     14 00 90 AD |  if_e	jmp	#LR__1600
133f0     1F 28 0E F2 | 	cmp	local02, #31 wz
133f4     20 00 90 AD |  if_e	jmp	#LR__1601
133f8     2B 28 0E F2 | 	cmp	local02, #43 wz
133fc     34 00 90 AD |  if_e	jmp	#LR__1602
13400     50 00 90 FD | 	jmp	#LR__1603
13404                 | LR__1600
13404     A7 12 02 FB | 	rdlong	arg01, fp
13408     00 14 06 F6 | 	mov	arg02, #0
1340c     A4 4D B1 FD | 	call	#__system___float_tointeger
13410     A7 FA 61 FC | 	wrlong	result1, fp
13414     3C 00 90 FD | 	jmp	#LR__1603
13418                 | LR__1601
13418     A7 12 02 FB | 	rdlong	arg01, fp
1341c     D8 50 B1 FD | 	call	#__system____builtin_atof
13420     FD 12 02 F6 | 	mov	arg01, result1
13424     00 14 06 F6 | 	mov	arg02, #0
13428     88 4D B1 FD | 	call	#__system___float_tointeger
1342c     A7 FA 61 FC | 	wrlong	result1, fp
13430     20 00 90 FD | 	jmp	#LR__1603
13434                 | LR__1602
13434     A7 12 02 FB | 	rdlong	arg01, fp
13438     C8 98 BF FD | 	call	#_convertstring
1343c     FD 12 02 F6 | 	mov	arg01, result1
13440     B4 50 B1 FD | 	call	#__system____builtin_atof
13444     FD 12 02 F6 | 	mov	arg01, result1
13448     00 14 06 F6 | 	mov	arg02, #0
1344c     64 4D B1 FD | 	call	#__system___float_tointeger
13450     A7 FA 61 FC | 	wrlong	result1, fp
13454                 | LR__1603
13454     08 4E 05 F1 | 	add	fp, #8
13458     A7 38 68 FC | 	wrlong	#28, fp
1345c     08 4E 85 F1 | 	sub	fp, #8
13460     A7 12 02 F6 | 	mov	arg01, fp
13464     BC 97 BF FD | 	call	#_push
13468     A7 F0 03 F6 | 	mov	ptra, fp
1346c     B2 00 A0 FD | 	call	#popregs_
13470                 | _do_int_ret
13470     2D 00 64 FD | 	ret
13474                 | 
13474                 | ' 
13474                 | ' ' ----------------  input
13474                 | ' 
13474                 | ' sub do_input
13474                 | _do_input
13474     11 4A 05 F6 | 	mov	COUNT_, #17
13478     A8 00 A0 FD | 	call	#pushregs_
1347c     50 F1 07 F1 | 	add	ptra, #336
13480     4A 00 00 FF 
13484     80 E4 05 F1 | 	add	objptr, ##38016
13488     F2 FE 01 FB | 	rdlong	result3, objptr
1348c     FF FC 01 F6 | 	mov	result2, result3
13490     01 FC 65 F0 | 	shl	result2, #1
13494     FF FC 01 F1 | 	add	result2, result3
13498     02 FC 65 F0 | 	shl	result2, #2
1349c     03 00 00 FF 
134a0     04 E4 85 F1 | 	sub	objptr, ##1540
134a4     F2 FC 01 F1 | 	add	result2, objptr
134a8     FE FC 01 FB | 	rdlong	result2, result2
134ac     08 4E 05 F1 | 	add	fp, #8
134b0     A7 FC 61 FC | 	wrlong	result2, fp
134b4                 | ' 
134b4                 | ' numpar=compiledline(lineptr_e).result.uresult
134b4                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
134b4     08 4E 85 F1 | 	sub	fp, #8
134b8     01 FC 15 F2 | 	cmp	result2, #1 wc
134bc     47 00 00 FF 
134c0     7C E4 85 F1 | 	sub	objptr, ##36476
134c4     14 00 90 CD |  if_b	jmp	#LR__1610
134c8     08 4E 05 F1 | 	add	fp, #8
134cc     A7 FC 01 FB | 	rdlong	result2, fp
134d0     08 4E 85 F1 | 	sub	fp, #8
134d4     41 FC 15 F2 | 	cmp	result2, #65 wc
134d8     50 00 90 CD |  if_b	jmp	#LR__1611
134dc                 | LR__1610
134dc     00 12 06 F6 | 	mov	arg01, #0
134e0     B8 76 B1 FD | 	call	#__system___getiolock_0595
134e4     FD 12 02 F6 | 	mov	arg01, result1
134e8     88 19 B1 FD | 	call	#__system___lockmem
134ec     A9 01 00 FF 
134f0     C9 14 06 F6 | 	mov	arg02, ##@LR__5808
134f4     00 12 06 F6 | 	mov	arg01, #0
134f8     00 16 06 F6 | 	mov	arg03, #0
134fc     68 26 B1 FD | 	call	#__system___basic_print_string
13500     00 12 06 F6 | 	mov	arg01, #0
13504     94 76 B1 FD | 	call	#__system___getiolock_0595
13508     FD 00 68 FC | 	wrlong	#0, result1
1350c     50 00 00 FF 
13510     F0 E4 05 F1 | 	add	objptr, ##41200
13514     F2 14 02 FB | 	rdlong	arg02, objptr
13518     50 00 00 FF 
1351c     F0 E4 85 F1 | 	sub	objptr, ##41200
13520     27 12 06 F6 | 	mov	arg01, #39
13524     A8 DF B0 FD | 	call	#_printerror
13528     44 0B 90 FD | 	jmp	#LR__1660
1352c                 | LR__1611
1352c     08 4E 05 F1 | 	add	fp, #8
13530     A7 FC 01 FB | 	rdlong	result2, fp
13534     01 FC 85 F1 | 	sub	result2, #1
13538     28 4F 05 F1 | 	add	fp, #296
1353c     A7 FC 61 FC | 	wrlong	result2, fp
13540     3C E4 05 F1 | 	add	objptr, #60
13544     F2 FC E1 FA | 	rdword	result2, objptr
13548     FE FC 51 F6 | 	abs	result2, result2 wc
1354c     01 FC 45 F0 | 	shr	result2, #1
13550     FE FC 81 F6 | 	negc	result2, result2
13554     0C 4E 05 F1 | 	add	fp, #12
13558     A7 FC 61 FC | 	wrlong	result2, fp
1355c     02 E4 05 F1 | 	add	objptr, #2
13560     F2 26 C2 FA | 	rdbyte	local01, objptr
13564     3E E4 85 F1 | 	sub	objptr, #62
13568     04 4E 05 F1 | 	add	fp, #4
1356c     A7 26 62 FC | 	wrlong	local01, fp
13570     40 4F 85 F1 | 	sub	fp, #320
13574                 | ' i=numpar-1
13574                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13574                 | ' do
13574                 | LR__1612
13574     8C D2 BE FD | 	call	#_edit
13578     A7 FA 61 FC | 	wrlong	result1, fp
1357c                 | ' 
1357c                 | '   line$=edit()
1357c                 | ' 
1357c                 | '   if v.cursor_y=cpy+1 then
1357c     3E E4 05 F1 | 	add	objptr, #62
13580     F2 26 C2 FA | 	rdbyte	local01, objptr
13584     3E E4 85 F1 | 	sub	objptr, #62
13588     40 4F 05 F1 | 	add	fp, #320
1358c     A7 16 02 FB | 	rdlong	arg03, fp
13590     40 4F 85 F1 | 	sub	fp, #320
13594     01 16 06 F1 | 	add	arg03, #1
13598     0B 27 0A F2 | 	cmp	local01, arg03 wz
1359c     6C 00 90 5D |  if_ne	jmp	#LR__1615
135a0     A7 26 02 FB | 	rdlong	local01, fp
135a4     13 13 02 F6 | 	mov	arg01, local01
135a8     09 29 02 F6 | 	mov	local02, arg01
135ac     97 06 48 FB | 	callpa	#(@LR__1614-@LR__1613)>>2,fcache_load_ptr_
135b0                 | LR__1613
135b0     14 FB C9 FA | 	rdbyte	result1, local02 wz
135b4     01 28 06 51 |  if_ne	add	local02, #1
135b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1613
135bc                 | LR__1614
135bc     09 29 82 F1 | 	sub	local02, arg01
135c0     14 15 02 F6 | 	mov	arg02, local02
135c4     3C 4F 05 F1 | 	add	fp, #316
135c8     A7 16 02 FB | 	rdlong	arg03, fp
135cc     3C 4F 85 F1 | 	sub	fp, #316
135d0     0B 15 82 F1 | 	sub	arg02, arg03
135d4     37 00 00 FF 
135d8     34 E4 05 F1 | 	add	objptr, ##28212
135dc     F2 16 02 FB | 	rdlong	arg03, objptr
135e0     37 00 00 FF 
135e4     34 E4 85 F1 | 	sub	objptr, ##28212
135e8     0B 15 02 F1 | 	add	arg02, arg03
135ec     13 13 02 F6 | 	mov	arg01, local01
135f0     84 39 B1 FD | 	call	#__system__Right_S
135f4     FD 12 02 F6 | 	mov	arg01, result1
135f8     84 3D B1 FD | 	call	#__system__RTrim_S
135fc     FD 12 02 F6 | 	mov	arg01, result1
13600     BC 3C B1 FD | 	call	#__system__LTrim_S
13604     A7 FA 61 FC | 	wrlong	result1, fp
13608     14 00 90 FD | 	jmp	#LR__1616
1360c                 | LR__1615
1360c     A7 12 02 FB | 	rdlong	arg01, fp
13610     6C 3D B1 FD | 	call	#__system__RTrim_S
13614     FD 12 02 F6 | 	mov	arg01, result1
13618     A4 3C B1 FD | 	call	#__system__LTrim_S
1361c     A7 FA 61 FC | 	wrlong	result1, fp
13620                 | LR__1616
13620                 | '   do
13620                 | LR__1617
13620     A7 14 02 FB | 	rdlong	arg02, fp
13624     A9 01 00 FF 
13628     D4 16 06 F6 | 	mov	arg03, ##@LR__5809
1362c     01 12 06 F6 | 	mov	arg01, #1
13630     04 3E B1 FD | 	call	#__system__Instr
13634     0C 4E 05 F1 | 	add	fp, #12
13638     A7 FA 61 FC | 	wrlong	result1, fp
1363c                 | '    comma=instr(1,line$,",")  
1363c                 | '    if comma>0  then 
1363c     0C 4E 85 F1 | 	sub	fp, #12
13640     01 FA 15 F2 | 	cmp	result1, #1 wc
13644     68 00 90 CD |  if_b	jmp	#LR__1620
13648     A7 12 02 FB | 	rdlong	arg01, fp
1364c     0C 4E 05 F1 | 	add	fp, #12
13650     A7 14 02 FB | 	rdlong	arg02, fp
13654     0C 4E 85 F1 | 	sub	fp, #12
13658     01 14 86 F1 | 	sub	arg02, #1
1365c     90 38 B1 FD | 	call	#__system__Left_S
13660     04 4E 05 F1 | 	add	fp, #4
13664     A7 FA 61 FC | 	wrlong	result1, fp
13668     04 4E 85 F1 | 	sub	fp, #4
1366c     A7 26 02 FB | 	rdlong	local01, fp
13670     13 13 02 F6 | 	mov	arg01, local01
13674     09 29 02 F6 | 	mov	local02, arg01
13678     97 06 48 FB | 	callpa	#(@LR__1619-@LR__1618)>>2,fcache_load_ptr_
1367c                 | LR__1618
1367c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13680     01 28 06 51 |  if_ne	add	local02, #1
13684     F4 FF 9F 5D |  if_ne	jmp	#LR__1618
13688                 | LR__1619
13688     09 29 82 F1 | 	sub	local02, arg01
1368c     14 15 02 F6 | 	mov	arg02, local02
13690     0C 4E 05 F1 | 	add	fp, #12
13694     A7 16 02 FB | 	rdlong	arg03, fp
13698     0C 4E 85 F1 | 	sub	fp, #12
1369c     0B 15 82 F1 | 	sub	arg02, arg03
136a0     13 13 02 F6 | 	mov	arg01, local01
136a4     D0 38 B1 FD | 	call	#__system__Right_S
136a8     A7 FA 61 FC | 	wrlong	result1, fp
136ac     28 00 90 FD | 	jmp	#LR__1621
136b0                 | LR__1620
136b0     A7 12 02 FB | 	rdlong	arg01, fp
136b4     C8 3C B1 FD | 	call	#__system__RTrim_S
136b8     FD 12 02 F6 | 	mov	arg01, result1
136bc     00 3C B1 FD | 	call	#__system__LTrim_S
136c0     04 4E 05 F1 | 	add	fp, #4
136c4     A7 FA 61 FC | 	wrlong	result1, fp
136c8     04 4E 85 F1 | 	sub	fp, #4
136cc     A9 01 00 FF 
136d0     D6 26 06 F6 | 	mov	local01, ##@LR__5810
136d4     A7 26 62 FC | 	wrlong	local01, fp
136d8                 | LR__1621
136d8     30 4F 05 F1 | 	add	fp, #304
136dc     A7 26 02 FB | 	rdlong	local01, fp
136e0     02 26 66 F0 | 	shl	local01, #2
136e4     04 4F 85 F1 | 	sub	fp, #260
136e8     A7 26 02 F1 | 	add	local01, fp
136ec     28 4E 85 F1 | 	sub	fp, #40
136f0     A7 FA 01 FB | 	rdlong	result1, fp
136f4     13 FB 61 FC | 	wrlong	result1, local01
136f8     2C 4F 05 F1 | 	add	fp, #300
136fc     A7 26 02 FB | 	rdlong	local01, fp
13700     01 26 86 F1 | 	sub	local01, #1
13704     A7 26 62 FC | 	wrlong	local01, fp
13708     30 4F 85 F1 | 	sub	fp, #304
1370c     00 26 56 F2 | 	cmps	local01, #0 wc
13710     18 00 90 CD |  if_b	jmp	#LR__1622
13714     A7 12 02 FB | 	rdlong	arg01, fp
13718     A9 01 00 FF 
1371c     D7 14 06 F6 | 	mov	arg02, ##@LR__5811
13720     78 17 B1 FD | 	call	#__system___string_cmp
13724     00 FA 0D F2 | 	cmp	result1, #0 wz
13728     F4 FE 9F 5D |  if_ne	jmp	#LR__1617
1372c                 | LR__1622
1372c     30 4F 05 F1 | 	add	fp, #304
13730     A7 26 02 FB | 	rdlong	local01, fp
13734     30 4F 85 F1 | 	sub	fp, #304
13738     00 26 56 F2 | 	cmps	local01, #0 wc
1373c     34 FE 9F 3D |  if_ae	jmp	#LR__1612
13740                 | ' 
13740                 | ' for i=0 to numpar-1
13740     30 4F 05 F1 | 	add	fp, #304
13744     A7 00 68 FC | 	wrlong	#0, fp
13748     28 4F 85 F1 | 	sub	fp, #296
1374c     A7 2A 02 FB | 	rdlong	local03, fp
13750     08 4E 85 F1 | 	sub	fp, #8
13754                 | LR__1623
13754     30 4F 05 F1 | 	add	fp, #304
13758     A7 2C 02 FB | 	rdlong	local04, fp
1375c     30 4F 85 F1 | 	sub	fp, #304
13760     16 27 02 F6 | 	mov	local01, local04
13764     15 27 52 F2 | 	cmps	local01, local03 wc
13768     04 09 90 3D |  if_ae	jmp	#LR__1659
1376c                 | ' 
1376c                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1376c     30 4F 05 F1 | 	add	fp, #304
13770     A7 16 02 FB | 	rdlong	arg03, fp
13774     02 16 66 F0 | 	shl	arg03, #2
13778     04 4F 85 F1 | 	sub	fp, #260
1377c     A7 16 02 F1 | 	add	arg03, fp
13780     0B 13 02 FB | 	rdlong	arg01, arg03
13784     2C 4E 85 F1 | 	sub	fp, #44
13788     1C 2C BF FD | 	call	#_isnum
1378c     FD 2E 02 F6 | 	mov	local05, result1
13790     30 4F 05 F1 | 	add	fp, #304
13794     A7 16 02 FB | 	rdlong	arg03, fp
13798     02 16 66 F0 | 	shl	arg03, #2
1379c     04 4F 85 F1 | 	sub	fp, #260
137a0     A7 30 02 F6 | 	mov	local06, fp
137a4     A7 16 02 F1 | 	add	arg03, fp
137a8     0B 13 02 FB | 	rdlong	arg01, arg03
137ac     2C 4E 85 F1 | 	sub	fp, #44
137b0     E0 2F BF FD | 	call	#_isint
137b4     FD 2E 2A F5 | 	andn	local05, result1 wz
137b8     52 00 00 5F 
137bc     4C E4 05 51 |  if_ne	add	objptr, ##42060
137c0     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
137c4     52 00 00 5F 
137c8     4C E4 85 51 |  if_ne	sub	objptr, ##42060
137cc                 | '   if isint(args(i)) then r=result_int 
137cc     30 4F 05 F1 | 	add	fp, #304
137d0     A7 2E 02 FB | 	rdlong	local05, fp
137d4     02 2E 66 F0 | 	shl	local05, #2
137d8     04 4F 85 F1 | 	sub	fp, #260
137dc     A7 2E 02 F1 | 	add	local05, fp
137e0     17 13 02 FB | 	rdlong	arg01, local05
137e4     2C 4E 85 F1 | 	sub	fp, #44
137e8     A8 2F BF FD | 	call	#_isint
137ec     00 FA 0D F2 | 	cmp	result1, #0 wz
137f0     52 00 00 5F 
137f4     4C E4 05 51 |  if_ne	add	objptr, ##42060
137f8     F2 38 68 5C |  if_ne	wrlong	#28, objptr
137fc     52 00 00 5F 
13800     4C E4 85 51 |  if_ne	sub	objptr, ##42060
13804                 | '   if isdec(args(i)) then r=result_uint 
13804     30 4F 05 F1 | 	add	fp, #304
13808     A7 2E 02 FB | 	rdlong	local05, fp
1380c     02 2E 66 F0 | 	shl	local05, #2
13810     04 4F 85 F1 | 	sub	fp, #260
13814     A7 2E 02 F1 | 	add	local05, fp
13818     17 13 02 FB | 	rdlong	arg01, local05
1381c     2C 4E 85 F1 | 	sub	fp, #44
13820     14 32 BF FD | 	call	#_isdec
13824     00 FA 0D F2 | 	cmp	result1, #0 wz
13828     52 00 00 5F 
1382c     4C E4 05 51 |  if_ne	add	objptr, ##42060
13830     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13834     52 00 00 5F 
13838     4C E4 85 51 |  if_ne	sub	objptr, ##42060
1383c                 | '   if not isnum(args(i)) then 
1383c     30 4F 05 F1 | 	add	fp, #304
13840     A7 32 02 FB | 	rdlong	local07, fp
13844     19 35 02 F6 | 	mov	local08, local07
13848     02 34 66 F0 | 	shl	local08, #2
1384c     04 4F 85 F1 | 	sub	fp, #260
13850     A7 36 02 F6 | 	mov	local09, fp
13854     A7 34 02 F1 | 	add	local08, fp
13858     1A 13 02 FB | 	rdlong	arg01, local08
1385c     2C 4E 85 F1 | 	sub	fp, #44
13860     44 2B BF FD | 	call	#_isnum
13864     FD 2E 22 F6 | 	not	local05, result1
13868     00 2E 0E F2 | 	cmp	local05, #0 wz
1386c     44 01 90 AD |  if_e	jmp	#LR__1628
13870     52 00 00 FF 
13874     4C E4 05 F1 | 	add	objptr, ##42060
13878     F2 56 68 FC | 	wrlong	#43, objptr
1387c     52 00 00 FF 
13880     4C E4 85 F1 | 	sub	objptr, ##42060
13884     04 4E 05 F1 | 	add	fp, #4
13888     A7 12 02 FB | 	rdlong	arg01, fp
1388c     04 4E 85 F1 | 	sub	fp, #4
13890     09 29 02 F6 | 	mov	local02, arg01
13894     97 06 48 FB | 	callpa	#(@LR__1625-@LR__1624)>>2,fcache_load_ptr_
13898                 | LR__1624
13898     14 FB C9 FA | 	rdbyte	result1, local02 wz
1389c     01 28 06 51 |  if_ne	add	local02, #1
138a0     F4 FF 9F 5D |  if_ne	jmp	#LR__1624
138a4                 | LR__1625
138a4     09 29 82 F1 | 	sub	local02, arg01
138a8     14 33 02 F6 | 	mov	local07, local02
138ac     38 4F 05 F1 | 	add	fp, #312
138b0     A7 32 62 FC | 	wrlong	local07, fp
138b4     51 00 00 FF 
138b8     D4 E5 05 F1 | 	add	objptr, ##41940
138bc     F2 12 02 FB | 	rdlong	arg01, objptr
138c0     19 13 82 F1 | 	sub	arg01, local07
138c4     04 12 86 F1 | 	sub	arg01, #4
138c8     03 12 26 F5 | 	andn	arg01, #3
138cc     F2 12 62 FC | 	wrlong	arg01, objptr
138d0     51 00 00 FF 
138d4     D4 E5 85 F1 | 	sub	objptr, ##41940
138d8     A7 14 02 FB | 	rdlong	arg02, fp
138dc     38 4F 85 F1 | 	sub	fp, #312
138e0     8C DD B0 FD | 	call	#_pslpoke
138e4                 | '     pslpoke memtop,l
138e4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
138e4     34 4F 05 F1 | 	add	fp, #308
138e8     A7 02 68 FC | 	wrlong	#1, fp
138ec     04 4E 05 F1 | 	add	fp, #4
138f0     A7 38 02 FB | 	rdlong	local10, fp
138f4     38 4F 85 F1 | 	sub	fp, #312
138f8     01 38 06 F1 | 	add	local10, #1
138fc                 | LR__1626
138fc     34 4F 05 F1 | 	add	fp, #308
13900     A7 2E 02 FB | 	rdlong	local05, fp
13904     34 4F 85 F1 | 	sub	fp, #308
13908     1C 2F 52 F2 | 	cmps	local05, local10 wc
1390c     84 00 90 3D |  if_ae	jmp	#LR__1627
13910     51 00 00 FF 
13914     D4 E5 05 F1 | 	add	objptr, ##41940
13918     F2 32 02 FB | 	rdlong	local07, objptr
1391c     51 00 00 FF 
13920     D4 E5 85 F1 | 	sub	objptr, ##41940
13924     03 32 06 F1 | 	add	local07, #3
13928     34 4F 05 F1 | 	add	fp, #308
1392c     A7 3A 02 FB | 	rdlong	local11, fp
13930     1D 33 02 F1 | 	add	local07, local11
13934     04 4E 85 F1 | 	sub	fp, #4
13938     A7 3C 02 FB | 	rdlong	local12, fp
1393c     02 3C 66 F0 | 	shl	local12, #2
13940     04 4F 85 F1 | 	sub	fp, #260
13944     A7 3E 02 F6 | 	mov	local13, fp
13948     A7 3C 02 F1 | 	add	local12, fp
1394c     1E 13 02 FB | 	rdlong	arg01, local12
13950     2C 4E 85 F1 | 	sub	fp, #44
13954     01 40 06 F6 | 	mov	local14, #1
13958     1D 15 02 F6 | 	mov	arg02, local11
1395c     01 16 06 F6 | 	mov	arg03, #1
13960     A4 36 B1 FD | 	call	#__system__Mid_S
13964     FD 14 C2 FA | 	rdbyte	arg02, result1
13968     19 13 02 F6 | 	mov	arg01, local07
1396c     90 DD B0 FD | 	call	#_pspoke
13970     34 4F 05 F1 | 	add	fp, #308
13974     A7 34 02 FB | 	rdlong	local08, fp
13978     1A 33 02 F6 | 	mov	local07, local08
1397c     1A 31 02 F6 | 	mov	local06, local08
13980     18 37 02 F6 | 	mov	local09, local06
13984     01 36 06 F1 | 	add	local09, #1
13988     A7 36 62 FC | 	wrlong	local09, fp
1398c     34 4F 85 F1 | 	sub	fp, #308
13990     68 FF 9F FD | 	jmp	#LR__1626
13994                 | LR__1627
13994     51 00 00 FF 
13998     D4 E5 05 F1 | 	add	objptr, ##41940
1399c     F2 2E 02 FB | 	rdlong	local05, objptr
139a0     51 00 00 FF 
139a4     D4 E5 85 F1 | 	sub	objptr, ##41940
139a8     10 4E 05 F1 | 	add	fp, #16
139ac     A7 2E 62 FC | 	wrlong	local05, fp
139b0     10 4E 85 F1 | 	sub	fp, #16
139b4                 | LR__1628
139b4     D4 91 BF FD | 	call	#_pop
139b8     FE 2E 02 F6 | 	mov	local05, result2
139bc     FF 42 02 F6 | 	mov	local15, result3
139c0     1C 4E 05 F1 | 	add	fp, #28
139c4     A7 FA 61 FC | 	wrlong	result1, fp
139c8     04 4E 05 F1 | 	add	fp, #4
139cc     A7 2E 62 FC | 	wrlong	local05, fp
139d0     04 4E 05 F1 | 	add	fp, #4
139d4     A7 42 62 FC | 	wrlong	local15, fp
139d8     04 4E 85 F1 | 	sub	fp, #4
139dc     A7 44 02 FB | 	rdlong	local16, fp
139e0     0C 4E 85 F1 | 	sub	fp, #12
139e4     A7 44 62 FC | 	wrlong	local16, fp
139e8                 | '   t1=pop() : vartype=t1.result.twowords(1)
139e8                 | '   select case vartype
139e8     14 4E 85 F1 | 	sub	fp, #20
139ec     22 47 0A F6 | 	mov	local17, local16 wz
139f0     64 00 90 AD |  if_e	jmp	#LR__1629
139f4     00 47 0E F2 | 	cmp	local17, #256 wz
139f8     6C 00 90 AD |  if_e	jmp	#LR__1630
139fc     01 47 0E F2 | 	cmp	local17, #257 wz
13a00     74 00 90 AD |  if_e	jmp	#LR__1631
13a04     02 47 0E F2 | 	cmp	local17, #258 wz
13a08     7C 00 90 AD |  if_e	jmp	#LR__1632
13a0c     03 47 0E F2 | 	cmp	local17, #259 wz
13a10     84 00 90 AD |  if_e	jmp	#LR__1633
13a14     04 47 0E F2 | 	cmp	local17, #260 wz
13a18     8C 00 90 AD |  if_e	jmp	#LR__1634
13a1c     05 47 0E F2 | 	cmp	local17, #261 wz
13a20     94 00 90 AD |  if_e	jmp	#LR__1635
13a24     06 47 0E F2 | 	cmp	local17, #262 wz
13a28     9C 00 90 AD |  if_e	jmp	#LR__1636
13a2c     07 47 0E F2 | 	cmp	local17, #263 wz
13a30     A4 00 90 AD |  if_e	jmp	#LR__1637
13a34     08 47 0E F2 | 	cmp	local17, #264 wz
13a38     AC 00 90 AD |  if_e	jmp	#LR__1638
13a3c     09 47 0E F2 | 	cmp	local17, #265 wz
13a40     B4 00 90 AD |  if_e	jmp	#LR__1639
13a44     0A 47 0E F2 | 	cmp	local17, #266 wz
13a48     BC 00 90 AD |  if_e	jmp	#LR__1640
13a4c     0B 47 0E F2 | 	cmp	local17, #267 wz
13a50     C4 00 90 AD |  if_e	jmp	#LR__1641
13a54     D0 00 90 FD | 	jmp	#LR__1642
13a58                 | LR__1629
13a58     18 4E 05 F1 | 	add	fp, #24
13a5c     A7 18 68 FC | 	wrlong	#12, fp
13a60     18 4E 85 F1 | 	sub	fp, #24
13a64     CC 00 90 FD | 	jmp	#LR__1643
13a68                 | LR__1630
13a68     18 4E 05 F1 | 	add	fp, #24
13a6c     A7 18 68 FC | 	wrlong	#12, fp
13a70     18 4E 85 F1 | 	sub	fp, #24
13a74     BC 00 90 FD | 	jmp	#LR__1643
13a78                 | LR__1631
13a78     18 4E 05 F1 | 	add	fp, #24
13a7c     A7 02 68 FC | 	wrlong	#1, fp
13a80     18 4E 85 F1 | 	sub	fp, #24
13a84     AC 00 90 FD | 	jmp	#LR__1643
13a88                 | LR__1632
13a88     18 4E 05 F1 | 	add	fp, #24
13a8c     A7 02 68 FC | 	wrlong	#1, fp
13a90     18 4E 85 F1 | 	sub	fp, #24
13a94     9C 00 90 FD | 	jmp	#LR__1643
13a98                 | LR__1633
13a98     18 4E 05 F1 | 	add	fp, #24
13a9c     A7 04 68 FC | 	wrlong	#2, fp
13aa0     18 4E 85 F1 | 	sub	fp, #24
13aa4     8C 00 90 FD | 	jmp	#LR__1643
13aa8                 | LR__1634
13aa8     18 4E 05 F1 | 	add	fp, #24
13aac     A7 04 68 FC | 	wrlong	#2, fp
13ab0     18 4E 85 F1 | 	sub	fp, #24
13ab4     7C 00 90 FD | 	jmp	#LR__1643
13ab8                 | LR__1635
13ab8     18 4E 05 F1 | 	add	fp, #24
13abc     A7 08 68 FC | 	wrlong	#4, fp
13ac0     18 4E 85 F1 | 	sub	fp, #24
13ac4     6C 00 90 FD | 	jmp	#LR__1643
13ac8                 | LR__1636
13ac8     18 4E 05 F1 | 	add	fp, #24
13acc     A7 08 68 FC | 	wrlong	#4, fp
13ad0     18 4E 85 F1 | 	sub	fp, #24
13ad4     5C 00 90 FD | 	jmp	#LR__1643
13ad8                 | LR__1637
13ad8     18 4E 05 F1 | 	add	fp, #24
13adc     A7 10 68 FC | 	wrlong	#8, fp
13ae0     18 4E 85 F1 | 	sub	fp, #24
13ae4     4C 00 90 FD | 	jmp	#LR__1643
13ae8                 | LR__1638
13ae8     18 4E 05 F1 | 	add	fp, #24
13aec     A7 10 68 FC | 	wrlong	#8, fp
13af0     18 4E 85 F1 | 	sub	fp, #24
13af4     3C 00 90 FD | 	jmp	#LR__1643
13af8                 | LR__1639
13af8     18 4E 05 F1 | 	add	fp, #24
13afc     A7 0C 68 FC | 	wrlong	#6, fp
13b00     18 4E 85 F1 | 	sub	fp, #24
13b04     2C 00 90 FD | 	jmp	#LR__1643
13b08                 | LR__1640
13b08     18 4E 05 F1 | 	add	fp, #24
13b0c     A7 10 68 FC | 	wrlong	#8, fp
13b10     18 4E 85 F1 | 	sub	fp, #24
13b14     1C 00 90 FD | 	jmp	#LR__1643
13b18                 | LR__1641
13b18     18 4E 05 F1 | 	add	fp, #24
13b1c     A7 0A 68 FC | 	wrlong	#5, fp
13b20     18 4E 85 F1 | 	sub	fp, #24
13b24     0C 00 90 FD | 	jmp	#LR__1643
13b28                 | LR__1642
13b28     18 4E 05 F1 | 	add	fp, #24
13b2c     A7 18 68 FC | 	wrlong	#12, fp
13b30     18 4E 85 F1 | 	sub	fp, #24
13b34                 | LR__1643
13b34                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13b34     18 4E 05 F1 | 	add	fp, #24
13b38     A7 44 02 FB | 	rdlong	local16, fp
13b3c     18 4E 85 F1 | 	sub	fp, #24
13b40     0C 44 0E F2 | 	cmp	local16, #12 wz
13b44     74 01 90 5D |  if_ne	jmp	#LR__1648
13b48     1C 4E 05 F1 | 	add	fp, #28
13b4c     A7 32 02 FB | 	rdlong	local07, fp
13b50     1C 4E 85 F1 | 	sub	fp, #28
13b54     00 04 00 FF 
13b58     00 32 16 F2 | 	cmp	local07, ##524288 wc
13b5c     5C 01 90 3D |  if_ae	jmp	#LR__1648
13b60                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13b60     52 00 00 FF 
13b64     4C E4 05 F1 | 	add	objptr, ##42060
13b68     F2 44 02 FB | 	rdlong	local16, objptr
13b6c     52 00 00 FF 
13b70     4C E4 85 F1 | 	sub	objptr, ##42060
13b74     1C 44 0E F2 | 	cmp	local16, #28 wz
13b78     38 00 90 5D |  if_ne	jmp	#LR__1644
13b7c     1C 4E 05 F1 | 	add	fp, #28
13b80     A7 44 02 FB | 	rdlong	local16, fp
13b84     14 4F 05 F1 | 	add	fp, #276
13b88     A7 32 02 FB | 	rdlong	local07, fp
13b8c     19 35 02 F6 | 	mov	local08, local07
13b90     02 34 66 F0 | 	shl	local08, #2
13b94     04 4F 85 F1 | 	sub	fp, #260
13b98     A7 36 02 F6 | 	mov	local09, fp
13b9c     A7 34 02 F1 | 	add	local08, fp
13ba0     1A 13 02 FB | 	rdlong	arg01, local08
13ba4     00 14 06 F6 | 	mov	arg02, #0
13ba8     2C 4E 85 F1 | 	sub	fp, #44
13bac     B4 47 B1 FD | 	call	#__system____builtin_atoi
13bb0     22 FB 61 FC | 	wrlong	result1, local16
13bb4                 | LR__1644
13bb4                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13bb4     52 00 00 FF 
13bb8     4C E4 05 F1 | 	add	objptr, ##42060
13bbc     F2 44 02 FB | 	rdlong	local16, objptr
13bc0     52 00 00 FF 
13bc4     4C E4 85 F1 | 	sub	objptr, ##42060
13bc8     1D 44 0E F2 | 	cmp	local16, #29 wz
13bcc     38 00 90 5D |  if_ne	jmp	#LR__1645
13bd0     1C 4E 05 F1 | 	add	fp, #28
13bd4     A7 44 02 FB | 	rdlong	local16, fp
13bd8     14 4F 05 F1 | 	add	fp, #276
13bdc     A7 32 02 FB | 	rdlong	local07, fp
13be0     19 35 02 F6 | 	mov	local08, local07
13be4     02 34 66 F0 | 	shl	local08, #2
13be8     04 4F 85 F1 | 	sub	fp, #260
13bec     A7 36 02 F6 | 	mov	local09, fp
13bf0     A7 34 02 F1 | 	add	local08, fp
13bf4     1A 13 02 FB | 	rdlong	arg01, local08
13bf8     00 14 06 F6 | 	mov	arg02, #0
13bfc     2C 4E 85 F1 | 	sub	fp, #44
13c00     60 47 B1 FD | 	call	#__system____builtin_atoi
13c04     22 FB 61 FC | 	wrlong	result1, local16
13c08                 | LR__1645
13c08                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13c08     52 00 00 FF 
13c0c     4C E4 05 F1 | 	add	objptr, ##42060
13c10     F2 44 02 FB | 	rdlong	local16, objptr
13c14     52 00 00 FF 
13c18     4C E4 85 F1 | 	sub	objptr, ##42060
13c1c     1E 44 0E F2 | 	cmp	local16, #30 wz
13c20     3C 00 90 5D |  if_ne	jmp	#LR__1646
13c24     30 4F 05 F1 | 	add	fp, #304
13c28     A7 32 02 FB | 	rdlong	local07, fp
13c2c     02 32 66 F0 | 	shl	local07, #2
13c30     04 4F 85 F1 | 	sub	fp, #260
13c34     A7 34 02 F6 | 	mov	local08, fp
13c38     A7 32 02 F1 | 	add	local07, fp
13c3c     19 13 02 FB | 	rdlong	arg01, local07
13c40     2C 4E 85 F1 | 	sub	fp, #44
13c44     B0 48 B1 FD | 	call	#__system____builtin_atof
13c48     28 4E 05 F1 | 	add	fp, #40
13c4c     A7 FA 61 FC | 	wrlong	result1, fp
13c50     0C 4E 85 F1 | 	sub	fp, #12
13c54     A7 44 02 FB | 	rdlong	local16, fp
13c58     1C 4E 85 F1 | 	sub	fp, #28
13c5c     22 FB 61 FC | 	wrlong	result1, local16
13c60                 | LR__1646
13c60                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13c60     52 00 00 FF 
13c64     4C E4 05 F1 | 	add	objptr, ##42060
13c68     F2 44 02 FB | 	rdlong	local16, objptr
13c6c     52 00 00 FF 
13c70     4C E4 85 F1 | 	sub	objptr, ##42060
13c74     2B 44 0E F2 | 	cmp	local16, #43 wz
13c78     18 00 90 5D |  if_ne	jmp	#LR__1647
13c7c     1C 4E 05 F1 | 	add	fp, #28
13c80     A7 12 02 FB | 	rdlong	arg01, fp
13c84     0C 4E 85 F1 | 	sub	fp, #12
13c88     A7 14 02 FB | 	rdlong	arg02, fp
13c8c     10 4E 85 F1 | 	sub	fp, #16
13c90     09 15 62 FC | 	wrlong	arg02, arg01
13c94                 | LR__1647
13c94     1C 4E 05 F1 | 	add	fp, #28
13c98     A7 12 02 FB | 	rdlong	arg01, fp
13c9c     1C 4E 85 F1 | 	sub	fp, #28
13ca0     08 12 06 F1 | 	add	arg01, #8
13ca4     52 00 00 FF 
13ca8     4C E4 05 F1 | 	add	objptr, ##42060
13cac     F2 14 02 FB | 	rdlong	arg02, objptr
13cb0     52 00 00 FF 
13cb4     4C E4 85 F1 | 	sub	objptr, ##42060
13cb8     09 15 62 FC | 	wrlong	arg02, arg01
13cbc                 | LR__1648
13cbc                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13cbc     18 4E 05 F1 | 	add	fp, #24
13cc0     A7 44 02 FB | 	rdlong	local16, fp
13cc4     18 4E 85 F1 | 	sub	fp, #24
13cc8     0C 44 0E F2 | 	cmp	local16, #12 wz
13ccc     94 01 90 5D |  if_ne	jmp	#LR__1653
13cd0     1C 4E 05 F1 | 	add	fp, #28
13cd4     A7 32 02 FB | 	rdlong	local07, fp
13cd8     1C 4E 85 F1 | 	sub	fp, #28
13cdc     00 04 00 FF 
13ce0     00 32 16 F2 | 	cmp	local07, ##524288 wc
13ce4     7C 01 90 CD |  if_b	jmp	#LR__1653
13ce8                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13ce8     52 00 00 FF 
13cec     4C E4 05 F1 | 	add	objptr, ##42060
13cf0     F2 44 02 FB | 	rdlong	local16, objptr
13cf4     52 00 00 FF 
13cf8     4C E4 85 F1 | 	sub	objptr, ##42060
13cfc     1C 44 0E F2 | 	cmp	local16, #28 wz
13d00     40 00 90 5D |  if_ne	jmp	#LR__1649
13d04     1C 4E 05 F1 | 	add	fp, #28
13d08     A7 44 02 FB | 	rdlong	local16, fp
13d0c     14 4F 05 F1 | 	add	fp, #276
13d10     A7 32 02 FB | 	rdlong	local07, fp
13d14     19 35 02 F6 | 	mov	local08, local07
13d18     02 34 66 F0 | 	shl	local08, #2
13d1c     04 4F 85 F1 | 	sub	fp, #260
13d20     A7 36 02 F6 | 	mov	local09, fp
13d24     A7 34 02 F1 | 	add	local08, fp
13d28     1A 13 02 FB | 	rdlong	arg01, local08
13d2c     00 14 06 F6 | 	mov	arg02, #0
13d30     2C 4E 85 F1 | 	sub	fp, #44
13d34     2C 46 B1 FD | 	call	#__system____builtin_atoi
13d38     FD 14 02 F6 | 	mov	arg02, result1
13d3c     22 13 02 F6 | 	mov	arg01, local16
13d40     2C D9 B0 FD | 	call	#_pslpoke
13d44                 | LR__1649
13d44                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13d44     52 00 00 FF 
13d48     4C E4 05 F1 | 	add	objptr, ##42060
13d4c     F2 44 02 FB | 	rdlong	local16, objptr
13d50     52 00 00 FF 
13d54     4C E4 85 F1 | 	sub	objptr, ##42060
13d58     1D 44 0E F2 | 	cmp	local16, #29 wz
13d5c     40 00 90 5D |  if_ne	jmp	#LR__1650
13d60     1C 4E 05 F1 | 	add	fp, #28
13d64     A7 44 02 FB | 	rdlong	local16, fp
13d68     14 4F 05 F1 | 	add	fp, #276
13d6c     A7 32 02 FB | 	rdlong	local07, fp
13d70     19 35 02 F6 | 	mov	local08, local07
13d74     02 34 66 F0 | 	shl	local08, #2
13d78     04 4F 85 F1 | 	sub	fp, #260
13d7c     A7 36 02 F6 | 	mov	local09, fp
13d80     A7 34 02 F1 | 	add	local08, fp
13d84     1A 13 02 FB | 	rdlong	arg01, local08
13d88     00 14 06 F6 | 	mov	arg02, #0
13d8c     2C 4E 85 F1 | 	sub	fp, #44
13d90     D0 45 B1 FD | 	call	#__system____builtin_atoi
13d94     FD 14 02 F6 | 	mov	arg02, result1
13d98     22 13 02 F6 | 	mov	arg01, local16
13d9c     D0 D8 B0 FD | 	call	#_pslpoke
13da0                 | LR__1650
13da0                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13da0     52 00 00 FF 
13da4     4C E4 05 F1 | 	add	objptr, ##42060
13da8     F2 44 02 FB | 	rdlong	local16, objptr
13dac     52 00 00 FF 
13db0     4C E4 85 F1 | 	sub	objptr, ##42060
13db4     1E 44 0E F2 | 	cmp	local16, #30 wz
13db8     4C 00 90 5D |  if_ne	jmp	#LR__1651
13dbc     30 4F 05 F1 | 	add	fp, #304
13dc0     A7 32 02 FB | 	rdlong	local07, fp
13dc4     02 32 66 F0 | 	shl	local07, #2
13dc8     04 4F 85 F1 | 	sub	fp, #260
13dcc     A7 34 02 F6 | 	mov	local08, fp
13dd0     A7 32 02 F1 | 	add	local07, fp
13dd4     19 13 02 FB | 	rdlong	arg01, local07
13dd8     2C 4E 85 F1 | 	sub	fp, #44
13ddc     18 47 B1 FD | 	call	#__system____builtin_atof
13de0     28 4E 05 F1 | 	add	fp, #40
13de4     A7 FA 61 FC | 	wrlong	result1, fp
13de8     0C 4E 85 F1 | 	sub	fp, #12
13dec     A7 44 02 FB | 	rdlong	local16, fp
13df0     0C 4E 05 F1 | 	add	fp, #12
13df4     A7 12 02 F6 | 	mov	arg01, fp
13df8     28 4E 85 F1 | 	sub	fp, #40
13dfc     09 15 02 FB | 	rdlong	arg02, arg01
13e00     22 13 02 F6 | 	mov	arg01, local16
13e04     68 D8 B0 FD | 	call	#_pslpoke
13e08                 | LR__1651
13e08                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13e08     52 00 00 FF 
13e0c     4C E4 05 F1 | 	add	objptr, ##42060
13e10     F2 44 02 FB | 	rdlong	local16, objptr
13e14     52 00 00 FF 
13e18     4C E4 85 F1 | 	sub	objptr, ##42060
13e1c     2B 44 0E F2 | 	cmp	local16, #43 wz
13e20     18 00 90 5D |  if_ne	jmp	#LR__1652
13e24     1C 4E 05 F1 | 	add	fp, #28
13e28     A7 12 02 FB | 	rdlong	arg01, fp
13e2c     0C 4E 85 F1 | 	sub	fp, #12
13e30     A7 14 02 FB | 	rdlong	arg02, fp
13e34     10 4E 85 F1 | 	sub	fp, #16
13e38     34 D8 B0 FD | 	call	#_pslpoke
13e3c                 | LR__1652
13e3c     1C 4E 05 F1 | 	add	fp, #28
13e40     A7 12 02 FB | 	rdlong	arg01, fp
13e44     1C 4E 85 F1 | 	sub	fp, #28
13e48     08 12 06 F1 | 	add	arg01, #8
13e4c     52 00 00 FF 
13e50     4C E4 05 F1 | 	add	objptr, ##42060
13e54     F2 14 02 FB | 	rdlong	arg02, objptr
13e58     52 00 00 FF 
13e5c     4C E4 85 F1 | 	sub	objptr, ##42060
13e60     0C D8 B0 FD | 	call	#_pslpoke
13e64                 | LR__1653
13e64                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13e64     18 4E 05 F1 | 	add	fp, #24
13e68     A7 44 02 FB | 	rdlong	local16, fp
13e6c     18 4E 85 F1 | 	sub	fp, #24
13e70     05 44 0E F2 | 	cmp	local16, #5 wz
13e74     52 00 00 AF 
13e78     4C E4 05 A1 |  if_e	add	objptr, ##42060
13e7c     F2 42 02 AB |  if_e	rdlong	local15, objptr
13e80     52 00 00 AF 
13e84     4C E4 85 A1 |  if_e	sub	objptr, ##42060
13e88     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13e8c     18 00 90 5D |  if_ne	jmp	#LR__1654
13e90     1C 4E 05 F1 | 	add	fp, #28
13e94     A7 12 02 FB | 	rdlong	arg01, fp
13e98     0C 4E 85 F1 | 	sub	fp, #12
13e9c     A7 14 02 FB | 	rdlong	arg02, fp
13ea0     10 4E 85 F1 | 	sub	fp, #16
13ea4     C8 D7 B0 FD | 	call	#_pslpoke
13ea8                 | LR__1654
13ea8                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13ea8     18 4E 05 F1 | 	add	fp, #24
13eac     A7 44 02 FB | 	rdlong	local16, fp
13eb0     18 4E 85 F1 | 	sub	fp, #24
13eb4     04 44 0E F2 | 	cmp	local16, #4 wz
13eb8     54 00 90 5D |  if_ne	jmp	#LR__1655
13ebc     52 00 00 FF 
13ec0     4C E4 05 F1 | 	add	objptr, ##42060
13ec4     F2 42 02 FB | 	rdlong	local15, objptr
13ec8     52 00 00 FF 
13ecc     4C E4 85 F1 | 	sub	objptr, ##42060
13ed0     2B 42 0E F2 | 	cmp	local15, #43 wz
13ed4     38 00 90 AD |  if_e	jmp	#LR__1655
13ed8     1C 4E 05 F1 | 	add	fp, #28
13edc     A7 44 02 FB | 	rdlong	local16, fp
13ee0     14 4F 05 F1 | 	add	fp, #276
13ee4     A7 34 02 FB | 	rdlong	local08, fp
13ee8     02 34 66 F0 | 	shl	local08, #2
13eec     04 4F 85 F1 | 	sub	fp, #260
13ef0     A7 34 02 F1 | 	add	local08, fp
13ef4     1A 13 02 FB | 	rdlong	arg01, local08
13ef8     00 14 06 F6 | 	mov	arg02, #0
13efc     2C 4E 85 F1 | 	sub	fp, #44
13f00     60 44 B1 FD | 	call	#__system____builtin_atoi
13f04     FD 14 02 F6 | 	mov	arg02, result1
13f08     22 13 02 F6 | 	mov	arg01, local16
13f0c     60 D7 B0 FD | 	call	#_pslpoke
13f10                 | LR__1655
13f10                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13f10     18 4E 05 F1 | 	add	fp, #24
13f14     A7 44 02 FB | 	rdlong	local16, fp
13f18     18 4E 85 F1 | 	sub	fp, #24
13f1c     02 44 0E F2 | 	cmp	local16, #2 wz
13f20     54 00 90 5D |  if_ne	jmp	#LR__1656
13f24     52 00 00 FF 
13f28     4C E4 05 F1 | 	add	objptr, ##42060
13f2c     F2 42 02 FB | 	rdlong	local15, objptr
13f30     52 00 00 FF 
13f34     4C E4 85 F1 | 	sub	objptr, ##42060
13f38     2B 42 0E F2 | 	cmp	local15, #43 wz
13f3c     38 00 90 AD |  if_e	jmp	#LR__1656
13f40     1C 4E 05 F1 | 	add	fp, #28
13f44     A7 44 02 FB | 	rdlong	local16, fp
13f48     14 4F 05 F1 | 	add	fp, #276
13f4c     A7 34 02 FB | 	rdlong	local08, fp
13f50     02 34 66 F0 | 	shl	local08, #2
13f54     04 4F 85 F1 | 	sub	fp, #260
13f58     A7 34 02 F1 | 	add	local08, fp
13f5c     1A 13 02 FB | 	rdlong	arg01, local08
13f60     00 14 06 F6 | 	mov	arg02, #0
13f64     2C 4E 85 F1 | 	sub	fp, #44
13f68     F8 43 B1 FD | 	call	#__system____builtin_atoi
13f6c     FD 14 02 F6 | 	mov	arg02, result1
13f70     22 13 02 F6 | 	mov	arg01, local16
13f74     40 D7 B0 FD | 	call	#_psdpoke
13f78                 | LR__1656
13f78                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13f78     18 4E 05 F1 | 	add	fp, #24
13f7c     A7 44 02 FB | 	rdlong	local16, fp
13f80     18 4E 85 F1 | 	sub	fp, #24
13f84     01 44 0E F2 | 	cmp	local16, #1 wz
13f88     54 00 90 5D |  if_ne	jmp	#LR__1657
13f8c     52 00 00 FF 
13f90     4C E4 05 F1 | 	add	objptr, ##42060
13f94     F2 42 02 FB | 	rdlong	local15, objptr
13f98     52 00 00 FF 
13f9c     4C E4 85 F1 | 	sub	objptr, ##42060
13fa0     2B 42 0E F2 | 	cmp	local15, #43 wz
13fa4     38 00 90 AD |  if_e	jmp	#LR__1657
13fa8     1C 4E 05 F1 | 	add	fp, #28
13fac     A7 44 02 FB | 	rdlong	local16, fp
13fb0     14 4F 05 F1 | 	add	fp, #276
13fb4     A7 34 02 FB | 	rdlong	local08, fp
13fb8     02 34 66 F0 | 	shl	local08, #2
13fbc     04 4F 85 F1 | 	sub	fp, #260
13fc0     A7 34 02 F1 | 	add	local08, fp
13fc4     1A 13 02 FB | 	rdlong	arg01, local08
13fc8     00 14 06 F6 | 	mov	arg02, #0
13fcc     2C 4E 85 F1 | 	sub	fp, #44
13fd0     90 43 B1 FD | 	call	#__system____builtin_atoi
13fd4     FD 14 02 F6 | 	mov	arg02, result1
13fd8     22 13 02 F6 | 	mov	arg01, local16
13fdc     20 D7 B0 FD | 	call	#_pspoke
13fe0                 | LR__1657
13fe0                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13fe0     18 4E 05 F1 | 	add	fp, #24
13fe4     A7 44 02 FB | 	rdlong	local16, fp
13fe8     18 4E 85 F1 | 	sub	fp, #24
13fec     06 44 0E F2 | 	cmp	local16, #6 wz
13ff0     64 00 90 5D |  if_ne	jmp	#LR__1658
13ff4     52 00 00 FF 
13ff8     4C E4 05 F1 | 	add	objptr, ##42060
13ffc     F2 42 02 FB | 	rdlong	local15, objptr
14000     52 00 00 FF 
14004     4C E4 85 F1 | 	sub	objptr, ##42060
14008     2B 42 0E F2 | 	cmp	local15, #43 wz
1400c     48 00 90 AD |  if_e	jmp	#LR__1658
14010     30 4F 05 F1 | 	add	fp, #304
14014     A7 32 02 FB | 	rdlong	local07, fp
14018     02 32 66 F0 | 	shl	local07, #2
1401c     04 4F 85 F1 | 	sub	fp, #260
14020     A7 32 02 F1 | 	add	local07, fp
14024     19 13 02 FB | 	rdlong	arg01, local07
14028     2C 4E 85 F1 | 	sub	fp, #44
1402c     C8 44 B1 FD | 	call	#__system____builtin_atof
14030     28 4E 05 F1 | 	add	fp, #40
14034     A7 FA 61 FC | 	wrlong	result1, fp
14038     0C 4E 85 F1 | 	sub	fp, #12
1403c     A7 44 02 FB | 	rdlong	local16, fp
14040     0C 4E 05 F1 | 	add	fp, #12
14044     A7 12 02 F6 | 	mov	arg01, fp
14048     28 4E 85 F1 | 	sub	fp, #40
1404c     09 15 02 FB | 	rdlong	arg02, arg01
14050     22 13 02 F6 | 	mov	arg01, local16
14054     18 D6 B0 FD | 	call	#_pslpoke
14058                 | LR__1658
14058     30 4F 05 F1 | 	add	fp, #304
1405c     A7 42 02 FB | 	rdlong	local15, fp
14060     01 42 06 F1 | 	add	local15, #1
14064     A7 42 62 FC | 	wrlong	local15, fp
14068     30 4F 85 F1 | 	sub	fp, #304
1406c     E4 F6 9F FD | 	jmp	#LR__1623
14070                 | LR__1659
14070                 | LR__1660
14070     A7 F0 03 F6 | 	mov	ptra, fp
14074     B2 00 A0 FD | 	call	#popregs_
14078                 | _do_input_ret
14078     2D 00 64 FD | 	ret
1407c                 | 
1407c                 | ' 
1407c                 | ' ' ----------------  left$
1407c                 | ' 
1407c                 | ' sub do_left
1407c                 | _do_left
1407c     00 4A 05 F6 | 	mov	COUNT_, #0
14080     A8 00 A0 FD | 	call	#pushregs_
14084     14 F0 07 F1 | 	add	ptra, #20
14088     4A 00 00 FF 
1408c     80 E4 05 F1 | 	add	objptr, ##38016
14090     F2 16 02 FB | 	rdlong	arg03, objptr
14094     0B 15 02 F6 | 	mov	arg02, arg03
14098     01 14 66 F0 | 	shl	arg02, #1
1409c     0B 15 02 F1 | 	add	arg02, arg03
140a0     02 14 66 F0 | 	shl	arg02, #2
140a4     03 00 00 FF 
140a8     04 E4 85 F1 | 	sub	objptr, ##1540
140ac     F2 14 02 F1 | 	add	arg02, objptr
140b0     0A 17 02 FB | 	rdlong	arg03, arg02
140b4     0C 4E 05 F1 | 	add	fp, #12
140b8     A7 16 62 FC | 	wrlong	arg03, fp
140bc                 | ' 
140bc                 | ' numpar=compiledline(lineptr_e).result.uresult
140bc                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140bc     0C 4E 85 F1 | 	sub	fp, #12
140c0     02 16 0E F2 | 	cmp	arg03, #2 wz
140c4     47 00 00 FF 
140c8     7C E4 85 F1 | 	sub	objptr, ##36476
140cc     40 00 90 AD |  if_e	jmp	#LR__1670
140d0     00 12 06 F6 | 	mov	arg01, #0
140d4     C4 6A B1 FD | 	call	#__system___getiolock_0595
140d8     FD 12 02 F6 | 	mov	arg01, result1
140dc     94 0D B1 FD | 	call	#__system___lockmem
140e0     A9 01 00 FF 
140e4     D8 14 06 F6 | 	mov	arg02, ##@LR__5812
140e8     00 12 06 F6 | 	mov	arg01, #0
140ec     00 16 06 F6 | 	mov	arg03, #0
140f0     74 1A B1 FD | 	call	#__system___basic_print_string
140f4     00 12 06 F6 | 	mov	arg01, #0
140f8     A0 6A B1 FD | 	call	#__system___getiolock_0595
140fc     FD 00 68 FC | 	wrlong	#0, result1
14100     27 12 06 F6 | 	mov	arg01, #39
14104     00 14 06 F6 | 	mov	arg02, #0
14108     C4 D3 B0 FD | 	call	#_printerror
1410c     EC 00 90 FD | 	jmp	#LR__1673
14110                 | LR__1670
14110     78 8A BF FD | 	call	#_pop
14114     FF 16 02 F6 | 	mov	arg03, result3
14118     A7 FA 61 FC | 	wrlong	result1, fp
1411c     04 4E 05 F1 | 	add	fp, #4
14120     A7 FC 61 FC | 	wrlong	result2, fp
14124     04 4E 05 F1 | 	add	fp, #4
14128     A7 16 62 FC | 	wrlong	arg03, fp
1412c     08 4E 85 F1 | 	sub	fp, #8
14130     A7 12 02 F6 | 	mov	arg01, fp
14134     38 8C BF FD | 	call	#_converttoint
14138     FD 16 02 F6 | 	mov	arg03, result1
1413c     10 4E 05 F1 | 	add	fp, #16
14140     A7 16 62 FC | 	wrlong	arg03, fp
14144     10 4E 85 F1 | 	sub	fp, #16
14148     40 8A BF FD | 	call	#_pop
1414c     FF 16 02 F6 | 	mov	arg03, result3
14150     A7 FA 61 FC | 	wrlong	result1, fp
14154     04 4E 05 F1 | 	add	fp, #4
14158     A7 FC 61 FC | 	wrlong	result2, fp
1415c     04 4E 05 F1 | 	add	fp, #4
14160     A7 16 62 FC | 	wrlong	arg03, fp
14164                 | ' t1=pop() : arg=converttoint(t1)
14164                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14164     08 4E 85 F1 | 	sub	fp, #8
14168     2B 16 0E F2 | 	cmp	arg03, #43 wz
1416c     18 00 90 5D |  if_ne	jmp	#LR__1671
14170     A7 12 02 FB | 	rdlong	arg01, fp
14174     8C 8B BF FD | 	call	#_convertstring
14178     A7 FA 61 FC | 	wrlong	result1, fp
1417c     08 4E 05 F1 | 	add	fp, #8
14180     A7 3E 68 FC | 	wrlong	#31, fp
14184     08 4E 85 F1 | 	sub	fp, #8
14188                 | LR__1671
14188                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14188     08 4E 05 F1 | 	add	fp, #8
1418c     A7 16 02 FB | 	rdlong	arg03, fp
14190     08 4E 85 F1 | 	sub	fp, #8
14194     1F 16 0E F2 | 	cmp	arg03, #31 wz
14198     40 00 90 AD |  if_e	jmp	#LR__1672
1419c     00 12 06 F6 | 	mov	arg01, #0
141a0     F8 69 B1 FD | 	call	#__system___getiolock_0595
141a4     FD 12 02 F6 | 	mov	arg01, result1
141a8     C8 0C B1 FD | 	call	#__system___lockmem
141ac     A9 01 00 FF 
141b0     E0 14 06 F6 | 	mov	arg02, ##@LR__5813
141b4     00 12 06 F6 | 	mov	arg01, #0
141b8     00 16 06 F6 | 	mov	arg03, #0
141bc     A8 19 B1 FD | 	call	#__system___basic_print_string
141c0     00 12 06 F6 | 	mov	arg01, #0
141c4     D4 69 B1 FD | 	call	#__system___getiolock_0595
141c8     FD 00 68 FC | 	wrlong	#0, result1
141cc     0F 12 06 F6 | 	mov	arg01, #15
141d0     00 14 06 F6 | 	mov	arg02, #0
141d4     F8 D2 B0 FD | 	call	#_printerror
141d8     20 00 90 FD | 	jmp	#LR__1673
141dc                 | LR__1672
141dc     A7 12 02 FB | 	rdlong	arg01, fp
141e0     10 4E 05 F1 | 	add	fp, #16
141e4     A7 14 02 FB | 	rdlong	arg02, fp
141e8     10 4E 85 F1 | 	sub	fp, #16
141ec     00 2D B1 FD | 	call	#__system__Left_S
141f0     A7 FA 61 FC | 	wrlong	result1, fp
141f4     A7 12 02 F6 | 	mov	arg01, fp
141f8     28 8A BF FD | 	call	#_push
141fc                 | LR__1673
141fc     A7 F0 03 F6 | 	mov	ptra, fp
14200     B2 00 A0 FD | 	call	#popregs_
14204                 | _do_left_ret
14204     2D 00 64 FD | 	ret
14208                 | 
14208                 | ' 
14208                 | ' ' ----------------  len
14208                 | ' 
14208                 | ' sub do_len
14208                 | _do_len
14208     02 4A 05 F6 | 	mov	COUNT_, #2
1420c     A8 00 A0 FD | 	call	#pushregs_
14210     14 F0 07 F1 | 	add	ptra, #20
14214     4A 00 00 FF 
14218     80 E4 05 F1 | 	add	objptr, ##38016
1421c     F2 26 02 FB | 	rdlong	local01, objptr
14220     13 17 02 F6 | 	mov	arg03, local01
14224     01 16 66 F0 | 	shl	arg03, #1
14228     13 17 02 F1 | 	add	arg03, local01
1422c     02 16 66 F0 | 	shl	arg03, #2
14230     03 00 00 FF 
14234     04 E4 85 F1 | 	sub	objptr, ##1540
14238     F2 16 02 F1 | 	add	arg03, objptr
1423c     0B 17 02 FB | 	rdlong	arg03, arg03
14240     0C 4E 05 F1 | 	add	fp, #12
14244     A7 16 62 FC | 	wrlong	arg03, fp
14248                 | ' 
14248                 | ' numpar=compiledline(lineptr_e).result.uresult
14248                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14248     0C 4E 85 F1 | 	sub	fp, #12
1424c     02 16 16 F2 | 	cmp	arg03, #2 wc
14250     47 00 00 FF 
14254     7C E4 85 F1 | 	sub	objptr, ##36476
14258     0C 4E 05 C1 |  if_b	add	fp, #12
1425c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14260     0C 4E 85 C1 |  if_b	sub	fp, #12
14264     40 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14268     00 12 06 F6 | 	mov	arg01, #0
1426c     2C 69 B1 FD | 	call	#__system___getiolock_0595
14270     FD 12 02 F6 | 	mov	arg01, result1
14274     FC 0B B1 FD | 	call	#__system___lockmem
14278     A9 01 00 FF 
1427c     E8 14 06 F6 | 	mov	arg02, ##@LR__5814
14280     00 12 06 F6 | 	mov	arg01, #0
14284     00 16 06 F6 | 	mov	arg03, #0
14288     DC 18 B1 FD | 	call	#__system___basic_print_string
1428c     00 12 06 F6 | 	mov	arg01, #0
14290     08 69 B1 FD | 	call	#__system___getiolock_0595
14294     FD 00 68 FC | 	wrlong	#0, result1
14298     27 12 06 F6 | 	mov	arg01, #39
1429c     00 14 06 F6 | 	mov	arg02, #0
142a0     2C D2 B0 FD | 	call	#_printerror
142a4     C8 00 90 FD | 	jmp	#LR__1685
142a8                 | LR__1680
142a8     E0 88 BF FD | 	call	#_pop
142ac     FF 16 02 F6 | 	mov	arg03, result3
142b0     A7 FA 61 FC | 	wrlong	result1, fp
142b4     04 4E 05 F1 | 	add	fp, #4
142b8     A7 FC 61 FC | 	wrlong	result2, fp
142bc     04 4E 05 F1 | 	add	fp, #4
142c0     A7 16 62 FC | 	wrlong	arg03, fp
142c4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142c4     08 4E 85 F1 | 	sub	fp, #8
142c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
142cc     18 00 90 5D |  if_ne	jmp	#LR__1681
142d0     A7 12 02 FB | 	rdlong	arg01, fp
142d4     2C 8A BF FD | 	call	#_convertstring
142d8     A7 FA 61 FC | 	wrlong	result1, fp
142dc     08 4E 05 F1 | 	add	fp, #8
142e0     A7 3E 68 FC | 	wrlong	#31, fp
142e4     08 4E 85 F1 | 	sub	fp, #8
142e8                 | LR__1681
142e8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
142e8     08 4E 05 F1 | 	add	fp, #8
142ec     A7 16 02 FB | 	rdlong	arg03, fp
142f0     08 4E 85 F1 | 	sub	fp, #8
142f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
142f8     40 00 90 AD |  if_e	jmp	#LR__1682
142fc     00 12 06 F6 | 	mov	arg01, #0
14300     98 68 B1 FD | 	call	#__system___getiolock_0595
14304     FD 12 02 F6 | 	mov	arg01, result1
14308     68 0B B1 FD | 	call	#__system___lockmem
1430c     A9 01 00 FF 
14310     EE 14 06 F6 | 	mov	arg02, ##@LR__5815
14314     00 12 06 F6 | 	mov	arg01, #0
14318     00 16 06 F6 | 	mov	arg03, #0
1431c     48 18 B1 FD | 	call	#__system___basic_print_string
14320     00 12 06 F6 | 	mov	arg01, #0
14324     74 68 B1 FD | 	call	#__system___getiolock_0595
14328     FD 00 68 FC | 	wrlong	#0, result1
1432c     0F 12 06 F6 | 	mov	arg01, #15
14330     00 14 06 F6 | 	mov	arg02, #0
14334     98 D1 B0 FD | 	call	#_printerror
14338     34 00 90 FD | 	jmp	#LR__1685
1433c                 | LR__1682
1433c     A7 12 02 FB | 	rdlong	arg01, fp
14340     09 29 02 F6 | 	mov	local02, arg01
14344     97 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
14348                 | LR__1683
14348     14 FB C9 FA | 	rdbyte	result1, local02 wz
1434c     01 28 06 51 |  if_ne	add	local02, #1
14350     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
14354                 | LR__1684
14354     09 29 82 F1 | 	sub	local02, arg01
14358     A7 28 62 FC | 	wrlong	local02, fp
1435c     08 4E 05 F1 | 	add	fp, #8
14360     A7 38 68 FC | 	wrlong	#28, fp
14364     08 4E 85 F1 | 	sub	fp, #8
14368     A7 12 02 F6 | 	mov	arg01, fp
1436c     B4 88 BF FD | 	call	#_push
14370                 | LR__1685
14370     A7 F0 03 F6 | 	mov	ptra, fp
14374     B2 00 A0 FD | 	call	#popregs_
14378                 | _do_len_ret
14378     2D 00 64 FD | 	ret
1437c                 | 
1437c                 | ' 
1437c                 | ' ' ----------------  list
1437c                 | ' 
1437c                 | ' sub do_list
1437c                 | _do_list
1437c     02 4A 05 F6 | 	mov	COUNT_, #2
14380     A8 00 A0 FD | 	call	#pushregs_
14384     B8 F0 07 F1 | 	add	ptra, #184
14388     04 4E 05 F1 | 	add	fp, #4
1438c     A7 00 68 FC | 	wrlong	#0, fp
14390     04 4E 05 F1 | 	add	fp, #4
14394     FF FF BF FF 
14398     A7 FE 6B FC | 	wrlong	##2147483647, fp
1439c     08 4E 85 F1 | 	sub	fp, #8
143a0     4A 00 00 FF 
143a4     80 E4 05 F1 | 	add	objptr, ##38016
143a8     F2 26 02 FB | 	rdlong	local01, objptr
143ac     13 17 02 F6 | 	mov	arg03, local01
143b0     01 16 66 F0 | 	shl	arg03, #1
143b4     13 17 02 F1 | 	add	arg03, local01
143b8     02 16 66 F0 | 	shl	arg03, #2
143bc     03 00 00 FF 
143c0     04 E4 85 F1 | 	sub	objptr, ##1540
143c4     F2 16 02 F1 | 	add	arg03, objptr
143c8     0B 17 02 FB | 	rdlong	arg03, arg03
143cc     A7 16 62 FC | 	wrlong	arg03, fp
143d0                 | ' 
143d0                 | ' startline=0 : endline=$7FFFFFFF
143d0                 | ' numpar=compiledline(lineptr_e).result.uresult
143d0                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143d0     01 16 0E F2 | 	cmp	arg03, #1 wz
143d4     47 00 00 FF 
143d8     7C E4 85 F1 | 	sub	objptr, ##36476
143dc     3C 00 90 5D |  if_ne	jmp	#LR__1690
143e0     A8 87 BF FD | 	call	#_pop
143e4     FF 26 02 F6 | 	mov	local01, result3
143e8     0C 4E 05 F1 | 	add	fp, #12
143ec     A7 FA 61 FC | 	wrlong	result1, fp
143f0     04 4E 05 F1 | 	add	fp, #4
143f4     A7 FC 61 FC | 	wrlong	result2, fp
143f8     04 4E 05 F1 | 	add	fp, #4
143fc     A7 26 62 FC | 	wrlong	local01, fp
14400     08 4E 85 F1 | 	sub	fp, #8
14404     A7 12 02 F6 | 	mov	arg01, fp
14408     0C 4E 85 F1 | 	sub	fp, #12
1440c     60 89 BF FD | 	call	#_converttoint
14410     04 4E 05 F1 | 	add	fp, #4
14414     A7 FA 61 FC | 	wrlong	result1, fp
14418     04 4E 85 F1 | 	sub	fp, #4
1441c                 | LR__1690
1441c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
1441c     A7 16 02 FB | 	rdlong	arg03, fp
14420     02 16 0E F2 | 	cmp	arg03, #2 wz
14424     7C 00 90 5D |  if_ne	jmp	#LR__1691
14428     60 87 BF FD | 	call	#_pop
1442c     FF 26 02 F6 | 	mov	local01, result3
14430     0C 4E 05 F1 | 	add	fp, #12
14434     A7 FA 61 FC | 	wrlong	result1, fp
14438     04 4E 05 F1 | 	add	fp, #4
1443c     A7 FC 61 FC | 	wrlong	result2, fp
14440     04 4E 05 F1 | 	add	fp, #4
14444     A7 26 62 FC | 	wrlong	local01, fp
14448     08 4E 85 F1 | 	sub	fp, #8
1444c     A7 12 02 F6 | 	mov	arg01, fp
14450     0C 4E 85 F1 | 	sub	fp, #12
14454     18 89 BF FD | 	call	#_converttoint
14458     FD 26 02 F6 | 	mov	local01, result1
1445c     08 4E 05 F1 | 	add	fp, #8
14460     A7 26 62 FC | 	wrlong	local01, fp
14464     08 4E 85 F1 | 	sub	fp, #8
14468     20 87 BF FD | 	call	#_pop
1446c     FF 26 02 F6 | 	mov	local01, result3
14470     0C 4E 05 F1 | 	add	fp, #12
14474     A7 FA 61 FC | 	wrlong	result1, fp
14478     04 4E 05 F1 | 	add	fp, #4
1447c     A7 FC 61 FC | 	wrlong	result2, fp
14480     04 4E 05 F1 | 	add	fp, #4
14484     A7 26 62 FC | 	wrlong	local01, fp
14488     08 4E 85 F1 | 	sub	fp, #8
1448c     A7 12 02 F6 | 	mov	arg01, fp
14490     0C 4E 85 F1 | 	sub	fp, #12
14494     D8 88 BF FD | 	call	#_converttoint
14498     04 4E 05 F1 | 	add	fp, #4
1449c     A7 FA 61 FC | 	wrlong	result1, fp
144a0     04 4E 85 F1 | 	sub	fp, #4
144a4                 | LR__1691
144a4                 | ' 
144a4                 | ' 
144a4                 | ' print
144a4     00 12 06 F6 | 	mov	arg01, #0
144a8     F0 66 B1 FD | 	call	#__system___getiolock_0595
144ac     FD 12 02 F6 | 	mov	arg01, result1
144b0     C0 09 B1 FD | 	call	#__system___lockmem
144b4     00 12 06 F6 | 	mov	arg01, #0
144b8     0A 14 06 F6 | 	mov	arg02, #10
144bc     00 16 06 F6 | 	mov	arg03, #0
144c0     4C 16 B1 FD | 	call	#__system___basic_print_char
144c4     00 12 06 F6 | 	mov	arg01, #0
144c8     D0 66 B1 FD | 	call	#__system___getiolock_0595
144cc     FD 00 68 FC | 	wrlong	#0, result1
144d0     4A 00 00 FF 
144d4     88 E4 05 F1 | 	add	objptr, ##38024
144d8     F2 28 02 FB | 	rdlong	local02, objptr
144dc     07 00 00 FF 
144e0     D0 E5 05 F1 | 	add	objptr, ##4048
144e4     F2 28 62 FC | 	wrlong	local02, objptr
144e8     52 00 00 FF 
144ec     58 E4 85 F1 | 	sub	objptr, ##42072
144f0                 | ' do 
144f0                 | LR__1692
144f0     20 4E 05 F1 | 	add	fp, #32
144f4     A7 12 02 F6 | 	mov	arg01, fp
144f8     20 4E 85 F1 | 	sub	fp, #32
144fc     52 00 00 FF 
14500     58 E4 05 F1 | 	add	objptr, ##42072
14504     F2 14 02 FB | 	rdlong	arg02, objptr
14508     18 16 06 F6 | 	mov	arg03, #24
1450c     46 00 00 FF 
14510     8C E5 85 F1 | 	sub	objptr, ##36236
14514     1C FD B0 FD | 	call	#_psram_spin2_read1
14518     0B 00 00 FF 
1451c     CC E4 85 F1 | 	sub	objptr, ##5836
14520                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14520                 | '   
14520                 | '   if header(0)<> $FFFFFFFF then
14520     20 4E 05 F1 | 	add	fp, #32
14524     A7 28 02 FB | 	rdlong	local02, fp
14528     20 4E 85 F1 | 	sub	fp, #32
1452c     FF FF 7F FF 
14530     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14534     A8 00 90 AD |  if_e	jmp	#LR__1694
14538     38 4E 05 F1 | 	add	fp, #56
1453c     3F 16 06 F6 | 	mov	arg03, #63
14540     28 16 62 FD | 	setq	arg03
14544     A7 00 68 FC | 	wrlong	#0, fp
14548     A7 12 02 F6 | 	mov	arg01, fp
1454c     10 4E 85 F1 | 	sub	fp, #16
14550     A7 14 02 FB | 	rdlong	arg02, fp
14554     04 4E 05 F1 | 	add	fp, #4
14558     A7 16 02 FB | 	rdlong	arg03, fp
1455c     2C 4E 85 F1 | 	sub	fp, #44
14560     0B 00 00 FF 
14564     CC E4 05 F1 | 	add	objptr, ##5836
14568     C8 FC B0 FD | 	call	#_psram_spin2_read1
1456c     0B 00 00 FF 
14570     CC E4 85 F1 | 	sub	objptr, ##5836
14574                 | '     longfill(linebuf,0,64)
14574                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14574                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14574     20 4E 05 F1 | 	add	fp, #32
14578     A7 28 02 FB | 	rdlong	local02, fp
1457c     1C 4E 85 F1 | 	sub	fp, #28
14580     A7 26 02 FB | 	rdlong	local01, fp
14584     04 4E 85 F1 | 	sub	fp, #4
14588     13 29 52 F2 | 	cmps	local02, local01 wc
1458c     30 00 90 CD |  if_b	jmp	#LR__1693
14590     20 4E 05 F1 | 	add	fp, #32
14594     A7 28 02 FB | 	rdlong	local02, fp
14598     18 4E 85 F1 | 	sub	fp, #24
1459c     A7 16 02 FB | 	rdlong	arg03, fp
145a0     08 4E 85 F1 | 	sub	fp, #8
145a4     0B 29 5A F2 | 	cmps	local02, arg03 wcz
145a8     14 00 90 1D |  if_a	jmp	#LR__1693
145ac     38 4E 05 F1 | 	add	fp, #56
145b0     A7 12 02 F6 | 	mov	arg01, fp
145b4     38 4E 85 F1 | 	sub	fp, #56
145b8                 | ' 
145b8                 | ' write(text)
145b8     3C F0 B0 FD | 	call	#_hg010b_spin2_write
145bc                 | ' crlf
145bc     38 F5 B0 FD | 	call	#_hg010b_spin2_crlf
145c0                 | LR__1693
145c0     34 4E 05 F1 | 	add	fp, #52
145c4     A7 28 02 FB | 	rdlong	local02, fp
145c8     34 4E 85 F1 | 	sub	fp, #52
145cc     52 00 00 FF 
145d0     58 E4 05 F1 | 	add	objptr, ##42072
145d4     F2 28 62 FC | 	wrlong	local02, objptr
145d8     52 00 00 FF 
145dc     58 E4 85 F1 | 	sub	objptr, ##42072
145e0                 | LR__1694
145e0     34 4E 05 F1 | 	add	fp, #52
145e4     A7 28 02 FB | 	rdlong	local02, fp
145e8     34 4E 85 F1 | 	sub	fp, #52
145ec     FF FF 3F FF 
145f0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
145f4     20 4E 05 51 |  if_ne	add	fp, #32
145f8     A7 26 02 5B |  if_ne	rdlong	local01, fp
145fc     20 4E 85 51 |  if_ne	sub	fp, #32
14600     FF FF 7F 5F 
14604     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14608     E4 FE 9F 5D |  if_ne	jmp	#LR__1692
1460c     A7 F0 03 F6 | 	mov	ptra, fp
14610     B2 00 A0 FD | 	call	#popregs_
14614                 | _do_list_ret
14614     2D 00 64 FD | 	ret
14618                 | 
14618                 | ' 
14618                 | ' '-------------------- load
14618                 | ' 
14618                 | ' sub do_load(amode=0 as integer)  
14618                 | _do_load
14618     01 4A 05 F6 | 	mov	COUNT_, #1
1461c     A8 00 A0 FD | 	call	#pushregs_
14620     AC F0 07 F1 | 	add	ptra, #172
14624     A7 12 62 FC | 	wrlong	arg01, fp
14628     52 00 00 FF 
1462c     10 E4 05 F1 | 	add	objptr, ##42000
14630     F2 02 68 FC | 	wrlong	#1, objptr
14634     07 00 00 FF 
14638     90 E5 85 F1 | 	sub	objptr, ##3984
1463c     F2 14 02 FB | 	rdlong	arg02, objptr
14640     0A 13 02 F6 | 	mov	arg01, arg02
14644     01 12 66 F0 | 	shl	arg01, #1
14648     0A 13 02 F1 | 	add	arg01, arg02
1464c     02 12 66 F0 | 	shl	arg01, #2
14650     03 00 00 FF 
14654     04 E4 85 F1 | 	sub	objptr, ##1540
14658     F2 12 02 F1 | 	add	arg01, objptr
1465c     09 15 02 FB | 	rdlong	arg02, arg01
14660     1C 4E 05 F1 | 	add	fp, #28
14664     A7 14 62 FC | 	wrlong	arg02, fp
14668     8C 4E 05 F1 | 	add	fp, #140
1466c     A7 12 02 F6 | 	mov	arg01, fp
14670     47 00 00 FF 
14674     7C E4 85 F1 | 	sub	objptr, ##36476
14678     80 4E 85 F1 | 	sub	fp, #128
1467c     09 4F 61 FC | 	wrlong	fp, arg01
14680                 | ' 
14680                 | ' inload=1
14680                 | ' numpar=compiledline(lineptr_e).result.uresult
14680                 | ' lpoke varptr(line2$),varptr(line2)
14680                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14680     0C 4E 85 F1 | 	sub	fp, #12
14684     A7 26 02 FB | 	rdlong	local01, fp
14688     1C 4E 85 F1 | 	sub	fp, #28
1468c     01 26 56 F2 | 	cmps	local01, #1 wc
14690     24 00 90 CD |  if_b	jmp	#LR__1700
14694     F4 84 BF FD | 	call	#_pop
14698     04 4E 05 F1 | 	add	fp, #4
1469c     A7 FA 61 FC | 	wrlong	result1, fp
146a0     04 4E 05 F1 | 	add	fp, #4
146a4     A7 FC 61 FC | 	wrlong	result2, fp
146a8     04 4E 05 F1 | 	add	fp, #4
146ac     A7 FE 61 FC | 	wrlong	result3, fp
146b0     0C 4E 85 F1 | 	sub	fp, #12
146b4     28 00 90 FD | 	jmp	#LR__1701
146b8                 | LR__1700
146b8     52 00 00 FF 
146bc     00 E4 05 F1 | 	add	objptr, ##41984
146c0     F2 26 02 FB | 	rdlong	local01, objptr
146c4     52 00 00 FF 
146c8     00 E4 85 F1 | 	sub	objptr, ##41984
146cc     04 4E 05 F1 | 	add	fp, #4
146d0     A7 26 62 FC | 	wrlong	local01, fp
146d4     08 4E 05 F1 | 	add	fp, #8
146d8     A7 3E 68 FC | 	wrlong	#31, fp
146dc     0C 4E 85 F1 | 	sub	fp, #12
146e0                 | LR__1701
146e0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
146e0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
146e0     0C 4E 05 F1 | 	add	fp, #12
146e4     A7 26 02 FB | 	rdlong	local01, fp
146e8     0C 4E 85 F1 | 	sub	fp, #12
146ec     2B 26 0E F2 | 	cmp	local01, #43 wz
146f0     24 00 90 5D |  if_ne	jmp	#LR__1702
146f4     04 4E 05 F1 | 	add	fp, #4
146f8     A7 12 02 FB | 	rdlong	arg01, fp
146fc     04 4E 85 F1 | 	sub	fp, #4
14700     00 86 BF FD | 	call	#_convertstring
14704     04 4E 05 F1 | 	add	fp, #4
14708     A7 FA 61 FC | 	wrlong	result1, fp
1470c     08 4E 05 F1 | 	add	fp, #8
14710     A7 3E 68 FC | 	wrlong	#31, fp
14714     0C 4E 85 F1 | 	sub	fp, #12
14718                 | LR__1702
14718                 | ' if t1.result_type=result_string then
14718     0C 4E 05 F1 | 	add	fp, #12
1471c     A7 26 02 FB | 	rdlong	local01, fp
14720     0C 4E 85 F1 | 	sub	fp, #12
14724     1F 26 0E F2 | 	cmp	local01, #31 wz
14728     E0 02 90 5D |  if_ne	jmp	#LR__1708
1472c                 | '   if amode<>1234 then do_new
1472c     A7 26 02 FB | 	rdlong	local01, fp
14730     02 00 00 FF 
14734     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14738     08 0E B0 5D |  if_ne	call	#_do_new
1473c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1473c     04 4E 05 F1 | 	add	fp, #4
14740     A7 12 02 FB | 	rdlong	arg01, fp
14744     04 4E 85 F1 | 	sub	fp, #4
14748     A9 01 00 FF 
1474c     F4 14 06 F6 | 	mov	arg02, ##@LR__5816
14750     48 07 B1 FD | 	call	#__system___string_cmp
14754     00 FA 0D F2 | 	cmp	result1, #0 wz
14758     24 00 90 5D |  if_ne	jmp	#LR__1703
1475c     52 00 00 FF 
14760     00 E4 05 F1 | 	add	objptr, ##41984
14764     F2 26 02 FB | 	rdlong	local01, objptr
14768     52 00 00 FF 
1476c     00 E4 85 F1 | 	sub	objptr, ##41984
14770     04 4E 05 F1 | 	add	fp, #4
14774     A7 26 62 FC | 	wrlong	local01, fp
14778     04 4E 85 F1 | 	sub	fp, #4
1477c     20 00 90 FD | 	jmp	#LR__1704
14780                 | LR__1703
14780     04 4E 05 F1 | 	add	fp, #4
14784     A7 26 02 FB | 	rdlong	local01, fp
14788     04 4E 85 F1 | 	sub	fp, #4
1478c     52 00 00 FF 
14790     00 E4 05 F1 | 	add	objptr, ##41984
14794     F2 26 62 FC | 	wrlong	local01, objptr
14798     52 00 00 FF 
1479c     00 E4 85 F1 | 	sub	objptr, ##41984
147a0                 | LR__1704
147a0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
147a0     09 12 06 F6 | 	mov	arg01, #9
147a4     24 5A B1 FD | 	call	#__system__close
147a8     09 26 06 F6 | 	mov	local01, #9
147ac     4A 00 00 FF 
147b0     94 E4 05 F1 | 	add	objptr, ##38036
147b4     F2 12 02 FB | 	rdlong	arg01, objptr
147b8     4A 00 00 FF 
147bc     94 E4 85 F1 | 	sub	objptr, ##38036
147c0     A9 01 00 FF 
147c4     F5 14 06 F6 | 	mov	arg02, ##@LR__5817
147c8     04 07 B1 FD | 	call	#__system___string_concat
147cc     FD 12 02 F6 | 	mov	arg01, result1
147d0     04 4E 05 F1 | 	add	fp, #4
147d4     A7 14 02 FB | 	rdlong	arg02, fp
147d8     04 4E 85 F1 | 	sub	fp, #4
147dc     F0 06 B1 FD | 	call	#__system___string_concat
147e0     FD 14 02 F6 | 	mov	arg02, result1
147e4     13 13 02 F6 | 	mov	arg01, local01
147e8     00 16 06 F6 | 	mov	arg03, #0
147ec     88 12 B1 FD | 	call	#__system___basic_open_string
147f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
147f4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
147f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
147fc     14 4E 05 F1 | 	add	fp, #20
14800     A7 FA 61 FC | 	wrlong	result1, fp
14804                 | '   r=geterr() 
14804                 | '   if r then 
14804     14 4E 85 F1 | 	sub	fp, #20
14808     50 01 90 AD |  if_e	jmp	#LR__1706
1480c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
1480c     09 12 06 F6 | 	mov	arg01, #9
14810     B8 59 B1 FD | 	call	#__system__close
14814     09 26 06 F6 | 	mov	local01, #9
14818     4A 00 00 FF 
1481c     94 E4 05 F1 | 	add	objptr, ##38036
14820     F2 12 02 FB | 	rdlong	arg01, objptr
14824     4A 00 00 FF 
14828     94 E4 85 F1 | 	sub	objptr, ##38036
1482c     A9 01 00 FF 
14830     F7 14 06 F6 | 	mov	arg02, ##@LR__5818
14834     98 06 B1 FD | 	call	#__system___string_concat
14838     FD 12 02 F6 | 	mov	arg01, result1
1483c     04 4E 05 F1 | 	add	fp, #4
14840     A7 14 02 FB | 	rdlong	arg02, fp
14844     04 4E 85 F1 | 	sub	fp, #4
14848     84 06 B1 FD | 	call	#__system___string_concat
1484c     FD 12 02 F6 | 	mov	arg01, result1
14850     A9 01 00 FF 
14854     F9 14 06 F6 | 	mov	arg02, ##@LR__5819
14858     74 06 B1 FD | 	call	#__system___string_concat
1485c     FD 14 02 F6 | 	mov	arg02, result1
14860     13 13 02 F6 | 	mov	arg01, local01
14864     00 16 06 F6 | 	mov	arg03, #0
14868     0C 12 B1 FD | 	call	#__system___basic_open_string
1486c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14870     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14874     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14878     14 4E 05 F1 | 	add	fp, #20
1487c     A7 FA 61 FC | 	wrlong	result1, fp
14880                 | '     r=geterr() 
14880                 | '     if r then 
14880     14 4E 85 F1 | 	sub	fp, #20
14884     A0 00 90 AD |  if_e	jmp	#LR__1705
14888                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14888     00 12 06 F6 | 	mov	arg01, #0
1488c     0C 63 B1 FD | 	call	#__system___getiolock_0595
14890     FD 12 02 F6 | 	mov	arg01, result1
14894     DC 05 B1 FD | 	call	#__system___lockmem
14898     A9 01 00 FF 
1489c     FE 14 06 F6 | 	mov	arg02, ##@LR__5820
148a0     00 12 06 F6 | 	mov	arg01, #0
148a4     00 16 06 F6 | 	mov	arg03, #0
148a8     BC 12 B1 FD | 	call	#__system___basic_print_string
148ac     14 4E 05 F1 | 	add	fp, #20
148b0     A7 14 02 FB | 	rdlong	arg02, fp
148b4     14 4E 85 F1 | 	sub	fp, #20
148b8     00 12 06 F6 | 	mov	arg01, #0
148bc     00 16 06 F6 | 	mov	arg03, #0
148c0     0A 18 06 F6 | 	mov	arg04, #10
148c4     E4 12 B1 FD | 	call	#__system___basic_print_integer
148c8     A9 01 00 FF 
148cc     0C 15 06 F6 | 	mov	arg02, ##@LR__5821
148d0     00 12 06 F6 | 	mov	arg01, #0
148d4     00 16 06 F6 | 	mov	arg03, #0
148d8     8C 12 B1 FD | 	call	#__system___basic_print_string
148dc     00 26 06 F6 | 	mov	local01, #0
148e0     14 4E 05 F1 | 	add	fp, #20
148e4     A7 12 02 FB | 	rdlong	arg01, fp
148e8     14 4E 85 F1 | 	sub	fp, #20
148ec     10 2F B1 FD | 	call	#__system___strerror
148f0     FD 14 02 F6 | 	mov	arg02, result1
148f4     13 13 02 F6 | 	mov	arg01, local01
148f8     00 16 06 F6 | 	mov	arg03, #0
148fc     68 12 B1 FD | 	call	#__system___basic_print_string
14900     00 12 06 F6 | 	mov	arg01, #0
14904     0A 14 06 F6 | 	mov	arg02, #10
14908     00 16 06 F6 | 	mov	arg03, #0
1490c     00 12 B1 FD | 	call	#__system___basic_print_char
14910     00 12 06 F6 | 	mov	arg01, #0
14914     84 62 B1 FD | 	call	#__system___getiolock_0595
14918     FD 00 68 FC | 	wrlong	#0, result1
1491c     09 12 06 F6 | 	mov	arg01, #9
14920     A8 58 B1 FD | 	call	#__system__close
14924     94 01 90 FD | 	jmp	#LR__1710
14928                 | LR__1705
14928     52 00 00 FF 
1492c     00 E4 05 F1 | 	add	objptr, ##41984
14930     F2 12 02 FB | 	rdlong	arg01, objptr
14934     52 00 00 FF 
14938     00 E4 85 F1 | 	sub	objptr, ##41984
1493c     A9 01 00 FF 
14940     0F 15 06 F6 | 	mov	arg02, ##@LR__5822
14944     88 05 B1 FD | 	call	#__system___string_concat
14948     52 00 00 FF 
1494c     00 E4 05 F1 | 	add	objptr, ##41984
14950     F2 FA 61 FC | 	wrlong	result1, objptr
14954     52 00 00 FF 
14958     00 E4 85 F1 | 	sub	objptr, ##41984
1495c                 | LR__1706
1495c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
1495c     09 12 06 F6 | 	mov	arg01, #9
14960     68 58 B1 FD | 	call	#__system__close
14964     09 26 06 F6 | 	mov	local01, #9
14968     4A 00 00 FF 
1496c     94 E4 05 F1 | 	add	objptr, ##38036
14970     F2 12 02 FB | 	rdlong	arg01, objptr
14974     4A 00 00 FF 
14978     94 E4 85 F1 | 	sub	objptr, ##38036
1497c     A9 01 00 FF 
14980     14 15 06 F6 | 	mov	arg02, ##@LR__5823
14984     48 05 B1 FD | 	call	#__system___string_concat
14988     FD 12 02 F6 | 	mov	arg01, result1
1498c     52 00 00 FF 
14990     00 E4 05 F1 | 	add	objptr, ##41984
14994     F2 14 02 FB | 	rdlong	arg02, objptr
14998     52 00 00 FF 
1499c     00 E4 85 F1 | 	sub	objptr, ##41984
149a0     2C 05 B1 FD | 	call	#__system___string_concat
149a4     FD 14 02 F6 | 	mov	arg02, result1
149a8     13 13 02 F6 | 	mov	arg01, local01
149ac     00 16 06 F6 | 	mov	arg03, #0
149b0     C4 10 B1 FD | 	call	#__system___basic_open_string
149b4                 | '   do
149b4                 | LR__1707
149b4     09 12 06 F6 | 	mov	arg01, #9
149b8     C4 06 B1 FD | 	call	#__system___basic_read_line
149bc     FD 26 02 F6 | 	mov	local01, result1
149c0     37 00 00 FF 
149c4     1C E4 05 F1 | 	add	objptr, ##28188
149c8     F2 26 62 FC | 	wrlong	local01, objptr
149cc     37 00 00 FF 
149d0     1C E4 85 F1 | 	sub	objptr, ##28188
149d4     70 CD BE FD | 	call	#_interpret
149d8     37 00 00 FF 
149dc     1C E4 05 F1 | 	add	objptr, ##28188
149e0     F2 12 02 FB | 	rdlong	arg01, objptr
149e4     37 00 00 FF 
149e8     1C E4 85 F1 | 	sub	objptr, ##28188
149ec     A9 01 00 FF 
149f0     16 15 06 F6 | 	mov	arg02, ##@LR__5824
149f4     A4 04 B1 FD | 	call	#__system___string_cmp
149f8     00 FA 0D F2 | 	cmp	result1, #0 wz
149fc     B4 FF 9F 5D |  if_ne	jmp	#LR__1707
14a00                 | '   close #9   
14a00     09 12 06 F6 | 	mov	arg01, #9
14a04     C4 57 B1 FD | 	call	#__system__close
14a08     0C 00 90 FD | 	jmp	#LR__1709
14a0c                 | LR__1708
14a0c     1E 12 06 F6 | 	mov	arg01, #30
14a10     00 14 06 F6 | 	mov	arg02, #0
14a14     B8 CA B0 FD | 	call	#_printerror
14a18                 | LR__1709
14a18                 | ' print "Loaded ";currentdir$+"/"+loadname
14a18     00 12 06 F6 | 	mov	arg01, #0
14a1c     7C 61 B1 FD | 	call	#__system___getiolock_0595
14a20     FD 12 02 F6 | 	mov	arg01, result1
14a24     4C 04 B1 FD | 	call	#__system___lockmem
14a28     A9 01 00 FF 
14a2c     17 15 06 F6 | 	mov	arg02, ##@LR__5825
14a30     00 12 06 F6 | 	mov	arg01, #0
14a34     00 16 06 F6 | 	mov	arg03, #0
14a38     2C 11 B1 FD | 	call	#__system___basic_print_string
14a3c     00 26 06 F6 | 	mov	local01, #0
14a40     4A 00 00 FF 
14a44     94 E4 05 F1 | 	add	objptr, ##38036
14a48     F2 12 02 FB | 	rdlong	arg01, objptr
14a4c     4A 00 00 FF 
14a50     94 E4 85 F1 | 	sub	objptr, ##38036
14a54     A9 01 00 FF 
14a58     1F 15 06 F6 | 	mov	arg02, ##@LR__5826
14a5c     70 04 B1 FD | 	call	#__system___string_concat
14a60     FD 12 02 F6 | 	mov	arg01, result1
14a64     52 00 00 FF 
14a68     00 E4 05 F1 | 	add	objptr, ##41984
14a6c     F2 14 02 FB | 	rdlong	arg02, objptr
14a70     52 00 00 FF 
14a74     00 E4 85 F1 | 	sub	objptr, ##41984
14a78     54 04 B1 FD | 	call	#__system___string_concat
14a7c     FD 14 02 F6 | 	mov	arg02, result1
14a80     13 13 02 F6 | 	mov	arg01, local01
14a84     00 16 06 F6 | 	mov	arg03, #0
14a88     DC 10 B1 FD | 	call	#__system___basic_print_string
14a8c     00 12 06 F6 | 	mov	arg01, #0
14a90     0A 14 06 F6 | 	mov	arg02, #10
14a94     00 16 06 F6 | 	mov	arg03, #0
14a98     74 10 B1 FD | 	call	#__system___basic_print_char
14a9c     00 12 06 F6 | 	mov	arg01, #0
14aa0     F8 60 B1 FD | 	call	#__system___getiolock_0595
14aa4     FD 00 68 FC | 	wrlong	#0, result1
14aa8     52 00 00 FF 
14aac     10 E4 05 F1 | 	add	objptr, ##42000
14ab0     F2 00 68 FC | 	wrlong	#0, objptr
14ab4     52 00 00 FF 
14ab8     10 E4 85 F1 | 	sub	objptr, ##42000
14abc                 | LR__1710
14abc     A7 F0 03 F6 | 	mov	ptra, fp
14ac0     B2 00 A0 FD | 	call	#popregs_
14ac4                 | _do_load_ret
14ac4     2D 00 64 FD | 	ret
14ac8                 | 
14ac8                 | ' 
14ac8                 | ' '-------------------- log
14ac8                 | ' 
14ac8                 | ' sub do_log
14ac8                 | _do_log
14ac8     01 4A 05 F6 | 	mov	COUNT_, #1
14acc     A8 00 A0 FD | 	call	#pushregs_
14ad0     14 F0 07 F1 | 	add	ptra, #20
14ad4     4A 00 00 FF 
14ad8     80 E4 05 F1 | 	add	objptr, ##38016
14adc     F2 26 02 FB | 	rdlong	local01, objptr
14ae0     13 17 02 F6 | 	mov	arg03, local01
14ae4     01 16 66 F0 | 	shl	arg03, #1
14ae8     13 17 02 F1 | 	add	arg03, local01
14aec     02 16 66 F0 | 	shl	arg03, #2
14af0     03 00 00 FF 
14af4     04 E4 85 F1 | 	sub	objptr, ##1540
14af8     F2 16 02 F1 | 	add	arg03, objptr
14afc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
14b00     0C 4E 05 F1 | 	add	fp, #12
14b04     A7 16 62 FC | 	wrlong	arg03, fp
14b08                 | ' 
14b08                 | ' numpar=compiledline(lineptr_e).result.uresult
14b08                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14b08     0C 4E 85 F1 | 	sub	fp, #12
14b0c     47 00 00 FF 
14b10     7C E4 85 F1 | 	sub	objptr, ##36476
14b14     0C 4E 05 51 |  if_ne	add	fp, #12
14b18     A7 26 02 5B |  if_ne	rdlong	local01, fp
14b1c     0C 4E 85 51 |  if_ne	sub	fp, #12
14b20     03 26 16 52 |  if_ne	cmp	local01, #3 wc
14b24     40 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14b28     00 12 06 F6 | 	mov	arg01, #0
14b2c     6C 60 B1 FD | 	call	#__system___getiolock_0595
14b30     FD 12 02 F6 | 	mov	arg01, result1
14b34     3C 03 B1 FD | 	call	#__system___lockmem
14b38     A9 01 00 FF 
14b3c     21 15 06 F6 | 	mov	arg02, ##@LR__5827
14b40     00 12 06 F6 | 	mov	arg01, #0
14b44     00 16 06 F6 | 	mov	arg03, #0
14b48     1C 10 B1 FD | 	call	#__system___basic_print_string
14b4c     00 12 06 F6 | 	mov	arg01, #0
14b50     48 60 B1 FD | 	call	#__system___getiolock_0595
14b54     FD 00 68 FC | 	wrlong	#0, result1
14b58     27 12 06 F6 | 	mov	arg01, #39
14b5c     00 14 06 F6 | 	mov	arg02, #0
14b60     6C C9 B0 FD | 	call	#_printerror
14b64     D0 00 90 FD | 	jmp	#LR__1723
14b68                 | LR__1720
14b68                 | ' if numpar=2 then 
14b68     0C 4E 05 F1 | 	add	fp, #12
14b6c     A7 26 02 FB | 	rdlong	local01, fp
14b70     0C 4E 85 F1 | 	sub	fp, #12
14b74     02 26 0E F2 | 	cmp	local01, #2 wz
14b78     48 00 90 5D |  if_ne	jmp	#LR__1721
14b7c     0C 80 BF FD | 	call	#_pop
14b80     FF 26 02 F6 | 	mov	local01, result3
14b84     A7 FA 61 FC | 	wrlong	result1, fp
14b88     04 4E 05 F1 | 	add	fp, #4
14b8c     A7 FC 61 FC | 	wrlong	result2, fp
14b90     04 4E 05 F1 | 	add	fp, #4
14b94     A7 26 62 FC | 	wrlong	local01, fp
14b98     08 4E 85 F1 | 	sub	fp, #8
14b9c     A7 12 02 F6 | 	mov	arg01, fp
14ba0     88 82 BF FD | 	call	#_converttofloat
14ba4     FD 14 02 F6 | 	mov	arg02, result1
14ba8     FC 16 20 FF 
14bac     54 12 06 F6 | 	mov	arg01, ##1076754516
14bb0     08 41 B1 FD | 	call	#__system____builtin_logbase
14bb4     10 4E 05 F1 | 	add	fp, #16
14bb8     A7 FA 61 FC | 	wrlong	result1, fp
14bbc     10 4E 85 F1 | 	sub	fp, #16
14bc0     10 00 90 FD | 	jmp	#LR__1722
14bc4                 | LR__1721
14bc4     10 4E 05 F1 | 	add	fp, #16
14bc8     00 C0 9F FF 
14bcc     A7 00 68 FC | 	wrlong	##1065353216, fp
14bd0     10 4E 85 F1 | 	sub	fp, #16
14bd4                 | LR__1722
14bd4     B4 7F BF FD | 	call	#_pop
14bd8     FF 26 02 F6 | 	mov	local01, result3
14bdc     A7 FA 61 FC | 	wrlong	result1, fp
14be0     04 4E 05 F1 | 	add	fp, #4
14be4     A7 FC 61 FC | 	wrlong	result2, fp
14be8     04 4E 05 F1 | 	add	fp, #4
14bec     A7 26 62 FC | 	wrlong	local01, fp
14bf0     08 4E 85 F1 | 	sub	fp, #8
14bf4     A7 12 02 F6 | 	mov	arg01, fp
14bf8     30 82 BF FD | 	call	#_converttofloat
14bfc     FD 14 02 F6 | 	mov	arg02, result1
14c00     FC 16 20 FF 
14c04     54 12 06 F6 | 	mov	arg01, ##1076754516
14c08     B0 40 B1 FD | 	call	#__system____builtin_logbase
14c0c     FD 12 02 F6 | 	mov	arg01, result1
14c10     10 4E 05 F1 | 	add	fp, #16
14c14     A7 14 02 FB | 	rdlong	arg02, fp
14c18     10 4E 85 F1 | 	sub	fp, #16
14c1c     D0 32 B1 FD | 	call	#__system___float_div
14c20     A7 FA 61 FC | 	wrlong	result1, fp
14c24     08 4E 05 F1 | 	add	fp, #8
14c28     A7 3C 68 FC | 	wrlong	#30, fp
14c2c     08 4E 85 F1 | 	sub	fp, #8
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     EC 7F BF FD | 	call	#_push
14c38                 | LR__1723
14c38     A7 F0 03 F6 | 	mov	ptra, fp
14c3c     B2 00 A0 FD | 	call	#popregs_
14c40                 | _do_log_ret
14c40     2D 00 64 FD | 	ret
14c44                 | 
14c44                 | ' 
14c44                 | ' '-------------------- lpeek
14c44                 | ' 
14c44                 | ' sub do_lpeek
14c44                 | _do_lpeek
14c44     00 4A 05 F6 | 	mov	COUNT_, #0
14c48     A8 00 A0 FD | 	call	#pushregs_
14c4c     14 F0 07 F1 | 	add	ptra, #20
14c50     38 7F BF FD | 	call	#_pop
14c54     A7 FA 61 FC | 	wrlong	result1, fp
14c58     04 4E 05 F1 | 	add	fp, #4
14c5c     A7 FC 61 FC | 	wrlong	result2, fp
14c60     04 4E 05 F1 | 	add	fp, #4
14c64     A7 FE 61 FC | 	wrlong	result3, fp
14c68     08 4E 85 F1 | 	sub	fp, #8
14c6c     A7 12 02 F6 | 	mov	arg01, fp
14c70     FC 80 BF FD | 	call	#_converttoint
14c74     0C 4E 05 F1 | 	add	fp, #12
14c78     A7 FA 61 FC | 	wrlong	result1, fp
14c7c                 | ' 
14c7c                 | ' t1=pop()
14c7c                 | ' a=converttoint(t1)
14c7c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14c7c     0C 4E 85 F1 | 	sub	fp, #12
14c80     00 04 00 FF 
14c84     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14c88     1C 00 90 3D |  if_ae	jmp	#LR__1730
14c8c     0C 4E 05 F1 | 	add	fp, #12
14c90     A7 12 02 FB | 	rdlong	arg01, fp
14c94     09 FB 01 FB | 	rdlong	result1, arg01
14c98     04 4E 05 F1 | 	add	fp, #4
14c9c     A7 FA 61 FC | 	wrlong	result1, fp
14ca0     10 4E 85 F1 | 	sub	fp, #16
14ca4     1C 00 90 FD | 	jmp	#LR__1731
14ca8                 | LR__1730
14ca8     0C 4E 05 F1 | 	add	fp, #12
14cac     A7 12 02 FB | 	rdlong	arg01, fp
14cb0     0C 4E 85 F1 | 	sub	fp, #12
14cb4     E8 CA B0 FD | 	call	#_pslpeek
14cb8     10 4E 05 F1 | 	add	fp, #16
14cbc     A7 FA 61 FC | 	wrlong	result1, fp
14cc0     10 4E 85 F1 | 	sub	fp, #16
14cc4                 | LR__1731
14cc4     08 4E 05 F1 | 	add	fp, #8
14cc8     A7 3A 68 FC | 	wrlong	#29, fp
14ccc     08 4E 05 F1 | 	add	fp, #8
14cd0     A7 12 02 FB | 	rdlong	arg01, fp
14cd4     10 4E 85 F1 | 	sub	fp, #16
14cd8     A7 12 62 FC | 	wrlong	arg01, fp
14cdc     A7 12 02 F6 | 	mov	arg01, fp
14ce0     40 7F BF FD | 	call	#_push
14ce4     A7 F0 03 F6 | 	mov	ptra, fp
14ce8     B2 00 A0 FD | 	call	#popregs_
14cec                 | _do_lpeek_ret
14cec     2D 00 64 FD | 	ret
14cf0                 | 
14cf0                 | ' 
14cf0                 | ' '-------------------- lpoke
14cf0                 | ' 
14cf0                 | ' sub do_lpoke
14cf0                 | _do_lpoke
14cf0     01 4A 05 F6 | 	mov	COUNT_, #1
14cf4     A8 00 A0 FD | 	call	#pushregs_
14cf8     20 F0 07 F1 | 	add	ptra, #32
14cfc     8C 7E BF FD | 	call	#_pop
14d00     FD 14 02 F6 | 	mov	arg02, result1
14d04     FE 12 02 F6 | 	mov	arg01, result2
14d08     FF 26 02 F6 | 	mov	local01, result3
14d0c     A7 14 62 FC | 	wrlong	arg02, fp
14d10     04 4E 05 F1 | 	add	fp, #4
14d14     A7 12 62 FC | 	wrlong	arg01, fp
14d18     04 4E 05 F1 | 	add	fp, #4
14d1c     A7 26 62 FC | 	wrlong	local01, fp
14d20     08 4E 85 F1 | 	sub	fp, #8
14d24     64 7E BF FD | 	call	#_pop
14d28     FF 26 02 F6 | 	mov	local01, result3
14d2c     0C 4E 05 F1 | 	add	fp, #12
14d30     A7 FA 61 FC | 	wrlong	result1, fp
14d34     04 4E 05 F1 | 	add	fp, #4
14d38     A7 FC 61 FC | 	wrlong	result2, fp
14d3c     04 4E 05 F1 | 	add	fp, #4
14d40     A7 26 62 FC | 	wrlong	local01, fp
14d44     08 4E 85 F1 | 	sub	fp, #8
14d48     A7 12 02 F6 | 	mov	arg01, fp
14d4c     0C 4E 85 F1 | 	sub	fp, #12
14d50     1C 80 BF FD | 	call	#_converttoint
14d54     18 4E 05 F1 | 	add	fp, #24
14d58     A7 FA 61 FC | 	wrlong	result1, fp
14d5c     18 4E 85 F1 | 	sub	fp, #24
14d60     A7 12 02 F6 | 	mov	arg01, fp
14d64     08 80 BF FD | 	call	#_converttoint
14d68     1C 4E 05 F1 | 	add	fp, #28
14d6c     A7 FA 61 FC | 	wrlong	result1, fp
14d70                 | ' 
14d70                 | ' t1=pop() 'value
14d70                 | ' t2=pop() 
14d70                 | ' a=converttoint(t2) : v=converttoint(t1)
14d70                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14d70     04 4E 85 F1 | 	sub	fp, #4
14d74     A7 26 02 FB | 	rdlong	local01, fp
14d78     18 4E 85 F1 | 	sub	fp, #24
14d7c     00 04 00 FF 
14d80     00 26 16 F2 | 	cmp	local01, ##524288 wc
14d84     1C 00 90 3D |  if_ae	jmp	#LR__1740
14d88     18 4E 05 F1 | 	add	fp, #24
14d8c     A7 12 02 FB | 	rdlong	arg01, fp
14d90     04 4E 05 F1 | 	add	fp, #4
14d94     A7 14 02 FB | 	rdlong	arg02, fp
14d98     1C 4E 85 F1 | 	sub	fp, #28
14d9c     09 15 62 FC | 	wrlong	arg02, arg01
14da0     18 00 90 FD | 	jmp	#LR__1741
14da4                 | LR__1740
14da4     18 4E 05 F1 | 	add	fp, #24
14da8     A7 12 02 FB | 	rdlong	arg01, fp
14dac     04 4E 05 F1 | 	add	fp, #4
14db0     A7 14 02 FB | 	rdlong	arg02, fp
14db4     1C 4E 85 F1 | 	sub	fp, #28
14db8     B4 C8 B0 FD | 	call	#_pslpoke
14dbc                 | LR__1741
14dbc     A7 F0 03 F6 | 	mov	ptra, fp
14dc0     B2 00 A0 FD | 	call	#popregs_
14dc4                 | _do_lpoke_ret
14dc4     2D 00 64 FD | 	ret
14dc8                 | 
14dc8                 | ' 
14dc8                 | ' '-------------------- mid$
14dc8                 | ' 
14dc8                 | ' sub do_mid
14dc8                 | _do_mid
14dc8     00 4A 05 F6 | 	mov	COUNT_, #0
14dcc     A8 00 A0 FD | 	call	#pushregs_
14dd0     18 F0 07 F1 | 	add	ptra, #24
14dd4     4A 00 00 FF 
14dd8     80 E4 05 F1 | 	add	objptr, ##38016
14ddc     F2 16 02 FB | 	rdlong	arg03, objptr
14de0     0B 15 02 F6 | 	mov	arg02, arg03
14de4     01 14 66 F0 | 	shl	arg02, #1
14de8     0B 15 02 F1 | 	add	arg02, arg03
14dec     02 14 66 F0 | 	shl	arg02, #2
14df0     03 00 00 FF 
14df4     04 E4 85 F1 | 	sub	objptr, ##1540
14df8     F2 14 02 F1 | 	add	arg02, objptr
14dfc     0A 17 02 FB | 	rdlong	arg03, arg02
14e00     0C 4E 05 F1 | 	add	fp, #12
14e04     A7 16 62 FC | 	wrlong	arg03, fp
14e08                 | ' 
14e08                 | ' numpar=compiledline(lineptr_e).result.uresult
14e08                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14e08     0C 4E 85 F1 | 	sub	fp, #12
14e0c     03 16 0E F2 | 	cmp	arg03, #3 wz
14e10     47 00 00 FF 
14e14     7C E4 85 F1 | 	sub	objptr, ##36476
14e18     40 00 90 AD |  if_e	jmp	#LR__1750
14e1c     00 12 06 F6 | 	mov	arg01, #0
14e20     78 5D B1 FD | 	call	#__system___getiolock_0595
14e24     FD 12 02 F6 | 	mov	arg01, result1
14e28     48 00 B1 FD | 	call	#__system___lockmem
14e2c     A9 01 00 FF 
14e30     27 15 06 F6 | 	mov	arg02, ##@LR__5828
14e34     00 12 06 F6 | 	mov	arg01, #0
14e38     00 16 06 F6 | 	mov	arg03, #0
14e3c     28 0D B1 FD | 	call	#__system___basic_print_string
14e40     00 12 06 F6 | 	mov	arg01, #0
14e44     54 5D B1 FD | 	call	#__system___getiolock_0595
14e48     FD 00 68 FC | 	wrlong	#0, result1
14e4c     27 12 06 F6 | 	mov	arg01, #39
14e50     00 14 06 F6 | 	mov	arg02, #0
14e54     78 C6 B0 FD | 	call	#_printerror
14e58     2C 01 90 FD | 	jmp	#LR__1753
14e5c                 | LR__1750
14e5c     2C 7D BF FD | 	call	#_pop
14e60     FF 16 02 F6 | 	mov	arg03, result3
14e64     A7 FA 61 FC | 	wrlong	result1, fp
14e68     04 4E 05 F1 | 	add	fp, #4
14e6c     A7 FC 61 FC | 	wrlong	result2, fp
14e70     04 4E 05 F1 | 	add	fp, #4
14e74     A7 16 62 FC | 	wrlong	arg03, fp
14e78     08 4E 85 F1 | 	sub	fp, #8
14e7c     A7 12 02 F6 | 	mov	arg01, fp
14e80     EC 7E BF FD | 	call	#_converttoint
14e84     FD 16 02 F6 | 	mov	arg03, result1
14e88     14 4E 05 F1 | 	add	fp, #20
14e8c     A7 16 62 FC | 	wrlong	arg03, fp
14e90     14 4E 85 F1 | 	sub	fp, #20
14e94     F4 7C BF FD | 	call	#_pop
14e98     FF 16 02 F6 | 	mov	arg03, result3
14e9c     A7 FA 61 FC | 	wrlong	result1, fp
14ea0     04 4E 05 F1 | 	add	fp, #4
14ea4     A7 FC 61 FC | 	wrlong	result2, fp
14ea8     04 4E 05 F1 | 	add	fp, #4
14eac     A7 16 62 FC | 	wrlong	arg03, fp
14eb0     08 4E 85 F1 | 	sub	fp, #8
14eb4     A7 12 02 F6 | 	mov	arg01, fp
14eb8     B4 7E BF FD | 	call	#_converttoint
14ebc     FD 16 02 F6 | 	mov	arg03, result1
14ec0     10 4E 05 F1 | 	add	fp, #16
14ec4     A7 16 62 FC | 	wrlong	arg03, fp
14ec8     10 4E 85 F1 | 	sub	fp, #16
14ecc     BC 7C BF FD | 	call	#_pop
14ed0     FF 16 02 F6 | 	mov	arg03, result3
14ed4     A7 FA 61 FC | 	wrlong	result1, fp
14ed8     04 4E 05 F1 | 	add	fp, #4
14edc     A7 FC 61 FC | 	wrlong	result2, fp
14ee0     04 4E 05 F1 | 	add	fp, #4
14ee4     A7 16 62 FC | 	wrlong	arg03, fp
14ee8                 | ' t1=pop() : arg2=converttoint(t1)
14ee8                 | ' t1=pop() : arg1=converttoint(t1)
14ee8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14ee8     08 4E 85 F1 | 	sub	fp, #8
14eec     2B 16 0E F2 | 	cmp	arg03, #43 wz
14ef0     18 00 90 5D |  if_ne	jmp	#LR__1751
14ef4     A7 12 02 FB | 	rdlong	arg01, fp
14ef8     08 7E BF FD | 	call	#_convertstring
14efc     A7 FA 61 FC | 	wrlong	result1, fp
14f00     08 4E 05 F1 | 	add	fp, #8
14f04     A7 3E 68 FC | 	wrlong	#31, fp
14f08     08 4E 85 F1 | 	sub	fp, #8
14f0c                 | LR__1751
14f0c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14f0c     08 4E 05 F1 | 	add	fp, #8
14f10     A7 16 02 FB | 	rdlong	arg03, fp
14f14     08 4E 85 F1 | 	sub	fp, #8
14f18     1F 16 0E F2 | 	cmp	arg03, #31 wz
14f1c     40 00 90 AD |  if_e	jmp	#LR__1752
14f20     00 12 06 F6 | 	mov	arg01, #0
14f24     74 5C B1 FD | 	call	#__system___getiolock_0595
14f28     FD 12 02 F6 | 	mov	arg01, result1
14f2c     44 FF B0 FD | 	call	#__system___lockmem
14f30     A9 01 00 FF 
14f34     2E 15 06 F6 | 	mov	arg02, ##@LR__5829
14f38     00 12 06 F6 | 	mov	arg01, #0
14f3c     00 16 06 F6 | 	mov	arg03, #0
14f40     24 0C B1 FD | 	call	#__system___basic_print_string
14f44     00 12 06 F6 | 	mov	arg01, #0
14f48     50 5C B1 FD | 	call	#__system___getiolock_0595
14f4c     FD 00 68 FC | 	wrlong	#0, result1
14f50     0F 12 06 F6 | 	mov	arg01, #15
14f54     00 14 06 F6 | 	mov	arg02, #0
14f58     74 C5 B0 FD | 	call	#_printerror
14f5c     28 00 90 FD | 	jmp	#LR__1753
14f60                 | LR__1752
14f60     A7 12 02 FB | 	rdlong	arg01, fp
14f64     10 4E 05 F1 | 	add	fp, #16
14f68     A7 14 02 FB | 	rdlong	arg02, fp
14f6c     04 4E 05 F1 | 	add	fp, #4
14f70     A7 16 02 FB | 	rdlong	arg03, fp
14f74     14 4E 85 F1 | 	sub	fp, #20
14f78     8C 20 B1 FD | 	call	#__system__Mid_S
14f7c     A7 FA 61 FC | 	wrlong	result1, fp
14f80     A7 12 02 F6 | 	mov	arg01, fp
14f84     9C 7C BF FD | 	call	#_push
14f88                 | LR__1753
14f88     A7 F0 03 F6 | 	mov	ptra, fp
14f8c     B2 00 A0 FD | 	call	#popregs_
14f90                 | _do_mid_ret
14f90     2D 00 64 FD | 	ret
14f94                 | 
14f94                 | ' 
14f94                 | ' '-------------------- mkdir
14f94                 | ' 
14f94                 | ' sub do_mkdir
14f94                 | _do_mkdir
14f94     04 4A 05 F6 | 	mov	COUNT_, #4
14f98     A8 00 A0 FD | 	call	#pushregs_
14f9c     EC 7B BF FD | 	call	#_pop
14fa0     FE 18 02 F6 | 	mov	arg04, result2
14fa4     FF 16 02 F6 | 	mov	arg03, result3
14fa8     FD 26 02 F6 | 	mov	local01, result1
14fac     0C 29 02 F6 | 	mov	local02, arg04
14fb0     0B 2B 02 F6 | 	mov	local03, arg03
14fb4                 | ' 
14fb4                 | ' t1=pop()
14fb4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14fb4     2B 2A 0E F2 | 	cmp	local03, #43 wz
14fb8     10 00 90 5D |  if_ne	jmp	#LR__1760
14fbc     13 13 02 F6 | 	mov	arg01, local01
14fc0     40 7D BF FD | 	call	#_convertstring
14fc4     FD 26 02 F6 | 	mov	local01, result1
14fc8     1F 2A 06 F6 | 	mov	local03, #31
14fcc                 | LR__1760
14fcc                 | ' if t1.result_type<>result_string then printerror(15): return
14fcc     1F 2A 0E F2 | 	cmp	local03, #31 wz
14fd0     10 00 90 AD |  if_e	jmp	#LR__1761
14fd4     0F 12 06 F6 | 	mov	arg01, #15
14fd8     00 14 06 F6 | 	mov	arg02, #0
14fdc     F0 C4 B0 FD | 	call	#_printerror
14fe0     64 00 90 FD | 	jmp	#LR__1763
14fe4                 | LR__1761
14fe4     13 13 02 F6 | 	mov	arg01, local01
14fe8     58 27 B1 FD | 	call	#__system___mkdir
14fec     FD 2C 0A F6 | 	mov	local04, result1 wz
14ff0                 | ' filename$=t1.result.sresult
14ff0                 | ' err=mkdir(filename$)
14ff0                 | ' 'err=geterr() : 
14ff0                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14ff0     54 00 90 AD |  if_e	jmp	#LR__1762
14ff4     00 12 06 F6 | 	mov	arg01, #0
14ff8     A0 5B B1 FD | 	call	#__system___getiolock_0595
14ffc     FD 12 02 F6 | 	mov	arg01, result1
15000     70 FE B0 FD | 	call	#__system___lockmem
15004     A9 01 00 FF 
15008     35 15 06 F6 | 	mov	arg02, ##@LR__5830
1500c     00 12 06 F6 | 	mov	arg01, #0
15010     00 16 06 F6 | 	mov	arg03, #0
15014     50 0B B1 FD | 	call	#__system___basic_print_string
15018     00 12 06 F6 | 	mov	arg01, #0
1501c     16 15 02 F6 | 	mov	arg02, local04
15020     00 16 06 F6 | 	mov	arg03, #0
15024     0A 18 06 F6 | 	mov	arg04, #10
15028     80 0B B1 FD | 	call	#__system___basic_print_integer
1502c     00 12 06 F6 | 	mov	arg01, #0
15030     0A 14 06 F6 | 	mov	arg02, #10
15034     00 16 06 F6 | 	mov	arg03, #0
15038     D4 0A B1 FD | 	call	#__system___basic_print_char
1503c     00 12 06 F6 | 	mov	arg01, #0
15040     58 5B B1 FD | 	call	#__system___getiolock_0595
15044     FD 00 68 FC | 	wrlong	#0, result1
15048                 | LR__1762
15048                 | LR__1763
15048     A7 F0 03 F6 | 	mov	ptra, fp
1504c     B2 00 A0 FD | 	call	#popregs_
15050                 | _do_mkdir_ret
15050     2D 00 64 FD | 	ret
15054                 | 
15054                 | ' 
15054                 | ' '-------------------- mode
15054                 | ' 
15054                 | ' sub do_mode
15054                 | _do_mode
15054     05 4A 05 F6 | 	mov	COUNT_, #5
15058     A8 00 A0 FD | 	call	#pushregs_
1505c     2C 7B BF FD | 	call	#_pop
15060     FD 26 02 F6 | 	mov	local01, result1
15064     FE 28 02 F6 | 	mov	local02, result2
15068     FF 2A 02 F6 | 	mov	local03, result3
1506c                 | ' t1=pop() 
1506c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1506c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15070     10 00 90 5D |  if_ne	jmp	#LR__1770
15074     13 13 02 F6 | 	mov	arg01, local01
15078     00 14 06 F6 | 	mov	arg02, #0
1507c     34 31 B1 FD | 	call	#__system___float_tointeger
15080     FD 26 02 F6 | 	mov	local01, result1
15084                 | LR__1770
15084                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15084     1F 2A 0E F2 | 	cmp	local03, #31 wz
15088     18 00 90 5D |  if_ne	jmp	#LR__1771
1508c     13 13 02 F6 | 	mov	arg01, local01
15090     64 34 B1 FD | 	call	#__system____builtin_atof
15094     FD 12 02 F6 | 	mov	arg01, result1
15098     00 14 06 F6 | 	mov	arg02, #0
1509c     14 31 B1 FD | 	call	#__system___float_tointeger
150a0     FD 26 02 F6 | 	mov	local01, result1
150a4                 | LR__1771
150a4                 | ' select case t1.result.iresult
150a4     13 2D 02 F6 | 	mov	local04, local01
150a8     05 2C 26 F3 | 	fle	local04, #5
150ac     30 2C 62 FD | 	jmprel	local04
150b0                 | LR__1772
150b0     14 00 90 FD | 	jmp	#LR__1773
150b4     A8 00 90 FD | 	jmp	#LR__1774
150b8     10 01 90 FD | 	jmp	#LR__1775
150bc     78 01 90 FD | 	jmp	#LR__1776
150c0     E0 01 90 FD | 	jmp	#LR__1777
150c4     70 02 90 FD | 	jmp	#LR__1778
150c8                 | LR__1773
150c8     37 00 00 FF 
150cc     40 E4 05 F1 | 	add	objptr, ##28224
150d0     F2 02 68 FC | 	wrlong	#1, objptr
150d4     04 E4 85 F1 | 	sub	objptr, #4
150d8     F2 34 69 FC | 	wrlong	#154, objptr
150dc     19 00 00 FF 
150e0     00 E5 05 F1 | 	add	objptr, ##13056
150e4     F2 02 68 FC | 	wrlong	#1, objptr
150e8     19 00 00 FF 
150ec     04 E5 85 F1 | 	sub	objptr, ##13060
150f0     F2 26 69 FC | 	wrlong	#147, objptr
150f4     37 00 00 FF 
150f8     38 E4 85 F1 | 	sub	objptr, ##28216
150fc     04 12 06 F6 | 	mov	arg01, #4
15100     E4 DF B0 FD | 	call	#_hg010b_spin2_setfontfamily
15104     37 00 00 FF 
15108     3C E4 05 F1 | 	add	objptr, ##28220
1510c     F2 12 02 FB | 	rdlong	arg01, objptr
15110     04 E4 85 F1 | 	sub	objptr, #4
15114     F2 14 02 FB | 	rdlong	arg02, objptr
15118                 | ' 
15118                 | ' write_color:=ff
15118     36 00 00 FF 
1511c     F7 E5 85 F1 | 	sub	objptr, ##28151
15120     F2 12 62 FC | 	wrlong	arg01, objptr
15124                 | ' write_background:=bb
15124     04 E4 05 F1 | 	add	objptr, #4
15128     F2 14 62 FC | 	wrlong	arg02, objptr
1512c     01 00 00 FF 
15130     00 EA 05 F1 | 	add	ptr__dat__, ##512
15134     51 00 00 FF 
15138     9B E5 05 F1 | 	add	objptr, ##41883
1513c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15140     04 E4 85 F1 | 	sub	objptr, #4
15144     03 00 80 FF 
15148     F2 30 69 FC | 	wrlong	##1688, objptr
1514c     51 00 00 FF 
15150     DC E5 85 F1 | 	sub	objptr, ##41948
15154     01 00 00 FF 
15158     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1515c     D8 01 90 FD | 	jmp	#LR__1778
15160                 | LR__1774
15160     37 00 00 FF 
15164     40 E4 05 F1 | 	add	objptr, ##28224
15168     F2 00 68 FC | 	wrlong	#0, objptr
1516c     04 E4 85 F1 | 	sub	objptr, #4
15170     F2 2E 68 FC | 	wrlong	#23, objptr
15174     19 00 00 FF 
15178     00 E5 05 F1 | 	add	objptr, ##13056
1517c     F2 00 68 FC | 	wrlong	#0, objptr
15180     19 00 00 FF 
15184     04 E5 85 F1 | 	sub	objptr, ##13060
15188     F2 00 68 FC | 	wrlong	#0, objptr
1518c     37 00 00 FF 
15190     38 E4 85 F1 | 	sub	objptr, ##28216
15194     00 12 06 F6 | 	mov	arg01, #0
15198     4C DF B0 FD | 	call	#_hg010b_spin2_setfontfamily
1519c     37 00 00 FF 
151a0     3C E4 05 F1 | 	add	objptr, ##28220
151a4     F2 12 02 FB | 	rdlong	arg01, objptr
151a8     04 E4 85 F1 | 	sub	objptr, #4
151ac     F2 14 02 FB | 	rdlong	arg02, objptr
151b0                 | ' 
151b0                 | ' write_color:=ff
151b0     36 00 00 FF 
151b4     F7 E5 85 F1 | 	sub	objptr, ##28151
151b8     F2 12 62 FC | 	wrlong	arg01, objptr
151bc                 | ' write_background:=bb
151bc     04 E4 05 F1 | 	add	objptr, #4
151c0     F2 14 62 FC | 	wrlong	arg02, objptr
151c4     45 E4 85 F1 | 	sub	objptr, #69
151c8     6C 01 90 FD | 	jmp	#LR__1778
151cc                 | LR__1775
151cc     37 00 00 FF 
151d0     40 E4 05 F1 | 	add	objptr, ##28224
151d4     F2 00 68 FC | 	wrlong	#0, objptr
151d8     04 E4 85 F1 | 	sub	objptr, #4
151dc     F2 6A 69 FC | 	wrlong	#181, objptr
151e0     19 00 00 FF 
151e4     00 E5 05 F1 | 	add	objptr, ##13056
151e8     F2 00 68 FC | 	wrlong	#0, objptr
151ec     19 00 00 FF 
151f0     04 E5 85 F1 | 	sub	objptr, ##13060
151f4     F2 00 68 FC | 	wrlong	#0, objptr
151f8     37 00 00 FF 
151fc     38 E4 85 F1 | 	sub	objptr, ##28216
15200     00 12 06 F6 | 	mov	arg01, #0
15204     E0 DE B0 FD | 	call	#_hg010b_spin2_setfontfamily
15208     37 00 00 FF 
1520c     3C E4 05 F1 | 	add	objptr, ##28220
15210     F2 12 02 FB | 	rdlong	arg01, objptr
15214     04 E4 85 F1 | 	sub	objptr, #4
15218     F2 14 02 FB | 	rdlong	arg02, objptr
1521c                 | ' 
1521c                 | ' write_color:=ff
1521c     36 00 00 FF 
15220     F7 E5 85 F1 | 	sub	objptr, ##28151
15224     F2 12 62 FC | 	wrlong	arg01, objptr
15228                 | ' write_background:=bb
15228     04 E4 05 F1 | 	add	objptr, #4
1522c     F2 14 62 FC | 	wrlong	arg02, objptr
15230     45 E4 85 F1 | 	sub	objptr, #69
15234     00 01 90 FD | 	jmp	#LR__1778
15238                 | LR__1776
15238     37 00 00 FF 
1523c     40 E4 05 F1 | 	add	objptr, ##28224
15240     F2 00 68 FC | 	wrlong	#0, objptr
15244     04 E4 85 F1 | 	sub	objptr, #4
15248     F2 1E 68 FC | 	wrlong	#15, objptr
1524c     19 00 00 FF 
15250     00 E5 05 F1 | 	add	objptr, ##13056
15254     F2 00 68 FC | 	wrlong	#0, objptr
15258     19 00 00 FF 
1525c     04 E5 85 F1 | 	sub	objptr, ##13060
15260     F2 00 68 FC | 	wrlong	#0, objptr
15264     37 00 00 FF 
15268     38 E4 85 F1 | 	sub	objptr, ##28216
1526c     00 12 06 F6 | 	mov	arg01, #0
15270     74 DE B0 FD | 	call	#_hg010b_spin2_setfontfamily
15274     37 00 00 FF 
15278     3C E4 05 F1 | 	add	objptr, ##28220
1527c     F2 12 02 FB | 	rdlong	arg01, objptr
15280     04 E4 85 F1 | 	sub	objptr, #4
15284     F2 14 02 FB | 	rdlong	arg02, objptr
15288                 | ' 
15288                 | ' write_color:=ff
15288     36 00 00 FF 
1528c     F7 E5 85 F1 | 	sub	objptr, ##28151
15290     F2 12 62 FC | 	wrlong	arg01, objptr
15294                 | ' write_background:=bb
15294     04 E4 05 F1 | 	add	objptr, #4
15298     F2 14 62 FC | 	wrlong	arg02, objptr
1529c     45 E4 85 F1 | 	sub	objptr, #69
152a0     94 00 90 FD | 	jmp	#LR__1778
152a4                 | LR__1777
152a4     37 00 00 FF 
152a8     40 E4 05 F1 | 	add	objptr, ##28224
152ac     F2 02 68 FC | 	wrlong	#1, objptr
152b0     04 E4 85 F1 | 	sub	objptr, #4
152b4     F2 02 68 FC | 	wrlong	#1, objptr
152b8     19 00 00 FF 
152bc     00 E5 05 F1 | 	add	objptr, ##13056
152c0     F2 02 68 FC | 	wrlong	#1, objptr
152c4     19 00 00 FF 
152c8     04 E5 85 F1 | 	sub	objptr, ##13060
152cc     F2 1C 68 FC | 	wrlong	#14, objptr
152d0     37 00 00 FF 
152d4     38 E4 85 F1 | 	sub	objptr, ##28216
152d8     04 12 06 F6 | 	mov	arg01, #4
152dc     08 DE B0 FD | 	call	#_hg010b_spin2_setfontfamily
152e0     37 00 00 FF 
152e4     3C E4 05 F1 | 	add	objptr, ##28220
152e8     F2 12 02 FB | 	rdlong	arg01, objptr
152ec     04 E4 85 F1 | 	sub	objptr, #4
152f0     F2 14 02 FB | 	rdlong	arg02, objptr
152f4                 | ' 
152f4                 | ' write_color:=ff
152f4     36 00 00 FF 
152f8     F7 E5 85 F1 | 	sub	objptr, ##28151
152fc     F2 12 62 FC | 	wrlong	arg01, objptr
15300                 | ' write_background:=bb
15300     04 E4 05 F1 | 	add	objptr, #4
15304     F2 14 62 FC | 	wrlong	arg02, objptr
15308     07 00 00 FF 
1530c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15310     51 00 00 FF 
15314     9B E5 05 F1 | 	add	objptr, ##41883
15318     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1531c     04 E4 85 F1 | 	sub	objptr, #4
15320     03 00 80 FF 
15324     F2 30 69 FC | 	wrlong	##1688, objptr
15328     51 00 00 FF 
1532c     DC E5 85 F1 | 	sub	objptr, ##41948
15330     07 00 00 FF 
15334     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15338                 | LR__1778
15338     51 00 00 FF 
1533c     D8 E5 05 F1 | 	add	objptr, ##41944
15340     F2 26 62 FC | 	wrlong	local01, objptr
15344     04 E4 85 F1 | 	sub	objptr, #4
15348     F2 12 02 FB | 	rdlong	arg01, objptr
1534c     0E 00 00 FF 
15350     78 E5 85 F1 | 	sub	objptr, ##7544
15354     F2 2E 02 FB | 	rdlong	local05, objptr
15358     43 00 00 FF 
1535c     5C E4 85 F1 | 	sub	objptr, ##34396
15360     17 13 82 F1 | 	sub	arg01, local05
15364     00 14 06 F6 | 	mov	arg02, #0
15368     0A 16 06 F6 | 	mov	arg03, #10
1536c     D4 1D B1 FD | 	call	#__system__Number_S
15370     FD 12 02 F6 | 	mov	arg01, result1
15374     A9 01 00 FF 
15378     5E 15 06 F6 | 	mov	arg02, ##@LR__5831
1537c     50 FB B0 FD | 	call	#__system___string_concat
15380     50 00 00 FF 
15384     38 E5 05 F1 | 	add	objptr, ##41272
15388     F2 FA 61 FC | 	wrlong	result1, objptr
1538c     19 00 00 FF 
15390     FC E4 85 F1 | 	sub	objptr, ##13052
15394     F2 12 02 FB | 	rdlong	arg01, objptr
15398     04 E4 85 F1 | 	sub	objptr, #4
1539c     F2 14 02 FB | 	rdlong	arg02, objptr
153a0     37 00 00 FF 
153a4     38 E4 85 F1 | 	sub	objptr, ##28216
153a8     8C DE B0 FD | 	call	#_hg010b_spin2_cls
153ac     A9 01 00 FF 
153b0     70 13 06 F6 | 	mov	arg01, ##@LR__5832
153b4                 | ' 
153b4                 | ' write(text)
153b4     40 E2 B0 FD | 	call	#_hg010b_spin2_write
153b8                 | ' crlf
153b8     3C E7 B0 FD | 	call	#_hg010b_spin2_crlf
153bc     18 00 00 FF 
153c0     40 EB 05 F1 | 	add	ptr__dat__, ##12608
153c4     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
153c8     18 00 00 FF 
153cc     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
153d0                 | ' 
153d0                 | ' write(text)
153d0     24 E2 B0 FD | 	call	#_hg010b_spin2_write
153d4                 | ' crlf
153d4     20 E7 B0 FD | 	call	#_hg010b_spin2_crlf
153d8     50 00 00 FF 
153dc     38 E5 05 F1 | 	add	objptr, ##41272
153e0     F2 12 02 FB | 	rdlong	arg01, objptr
153e4     50 00 00 FF 
153e8     38 E5 85 F1 | 	sub	objptr, ##41272
153ec                 | ' 
153ec                 | ' write(text)
153ec     08 E2 B0 FD | 	call	#_hg010b_spin2_write
153f0                 | ' crlf
153f0     04 E7 B0 FD | 	call	#_hg010b_spin2_crlf
153f4     A7 F0 03 F6 | 	mov	ptra, fp
153f8     B2 00 A0 FD | 	call	#popregs_
153fc                 | _do_mode_ret
153fc     2D 00 64 FD | 	ret
15400                 | 
15400                 | ' 
15400                 | ' '-------------------- mouse
15400                 | ' 
15400                 | ' sub do_mouse
15400                 | _do_mouse
15400     88 77 BF FD | 	call	#_pop
15404     00 FA 4D F2 | 	cmps	result1, #0 wz
15408                 | ' 
15408                 | ' t1=pop()
15408                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15408     14 00 90 5D |  if_ne	jmp	#LR__1780
1540c     10 12 06 F6 | 	mov	arg01, #16
15410     00 14 06 F6 | 	mov	arg02, #0
15414     00 16 06 F6 | 	mov	arg03, #0
15418     FC D0 B0 FD | 	call	#_hg010b_spin2_setspritesize
1541c     10 00 90 FD | 	jmp	#LR__1781
15420                 | LR__1780
15420     10 12 06 F6 | 	mov	arg01, #16
15424     20 14 06 F6 | 	mov	arg02, #32
15428     20 16 06 F6 | 	mov	arg03, #32
1542c     E8 D0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15430                 | LR__1781
15430                 | _do_mouse_ret
15430     2D 00 64 FD | 	ret
15434                 | 
15434                 | ' 
15434                 | ' '-------------------- mousek
15434                 | ' 
15434                 | ' sub do_mousek
15434                 | _do_mousek
15434     00 4A 05 F6 | 	mov	COUNT_, #0
15438     A8 00 A0 FD | 	call	#pushregs_
1543c     0C F0 07 F1 | 	add	ptra, #12
15440     08 4E 05 F1 | 	add	fp, #8
15444     A7 3A 68 FC | 	wrlong	#29, fp
15448     08 4E 85 F1 | 	sub	fp, #8
1544c     51 00 00 FF 
15450     50 E5 05 F1 | 	add	objptr, ##41808
15454     F2 12 02 FB | 	rdlong	arg01, objptr
15458     51 00 00 FF 
1545c     50 E5 85 F1 | 	sub	objptr, ##41808
15460     A7 12 62 FC | 	wrlong	arg01, fp
15464     A7 12 02 F6 | 	mov	arg01, fp
15468     B8 77 BF FD | 	call	#_push
1546c     A7 F0 03 F6 | 	mov	ptra, fp
15470     B2 00 A0 FD | 	call	#popregs_
15474                 | _do_mousek_ret
15474     2D 00 64 FD | 	ret
15478                 | 
15478                 | ' 
15478                 | ' '-------------------- mousew
15478                 | ' 
15478                 | ' sub do_mousew
15478                 | _do_mousew
15478     00 4A 05 F6 | 	mov	COUNT_, #0
1547c     A8 00 A0 FD | 	call	#pushregs_
15480     0C F0 07 F1 | 	add	ptra, #12
15484     08 4E 05 F1 | 	add	fp, #8
15488     A7 38 68 FC | 	wrlong	#28, fp
1548c     08 4E 85 F1 | 	sub	fp, #8
15490     51 00 00 FF 
15494     54 E5 05 F1 | 	add	objptr, ##41812
15498     F2 12 02 FB | 	rdlong	arg01, objptr
1549c     51 00 00 FF 
154a0     54 E5 85 F1 | 	sub	objptr, ##41812
154a4     A7 12 62 FC | 	wrlong	arg01, fp
154a8     A7 12 02 F6 | 	mov	arg01, fp
154ac     74 77 BF FD | 	call	#_push
154b0     A7 F0 03 F6 | 	mov	ptra, fp
154b4     B2 00 A0 FD | 	call	#popregs_
154b8                 | _do_mousew_ret
154b8     2D 00 64 FD | 	ret
154bc                 | 
154bc                 | ' 
154bc                 | ' '-------------------- mousex
154bc                 | ' 
154bc                 | ' sub do_mousex
154bc                 | _do_mousex
154bc     00 4A 05 F6 | 	mov	COUNT_, #0
154c0     A8 00 A0 FD | 	call	#pushregs_
154c4     0C F0 07 F1 | 	add	ptra, #12
154c8     08 4E 05 F1 | 	add	fp, #8
154cc     A7 3A 68 FC | 	wrlong	#29, fp
154d0     08 4E 85 F1 | 	sub	fp, #8
154d4     51 00 00 FF 
154d8     48 E5 05 F1 | 	add	objptr, ##41800
154dc     F2 12 02 FB | 	rdlong	arg01, objptr
154e0     51 00 00 FF 
154e4     48 E5 85 F1 | 	sub	objptr, ##41800
154e8     A7 12 62 FC | 	wrlong	arg01, fp
154ec     A7 12 02 F6 | 	mov	arg01, fp
154f0     30 77 BF FD | 	call	#_push
154f4     A7 F0 03 F6 | 	mov	ptra, fp
154f8     B2 00 A0 FD | 	call	#popregs_
154fc                 | _do_mousex_ret
154fc     2D 00 64 FD | 	ret
15500                 | 
15500                 | ' 
15500                 | ' '-------------------- mousey
15500                 | ' 
15500                 | ' sub do_mousey
15500                 | _do_mousey
15500     00 4A 05 F6 | 	mov	COUNT_, #0
15504     A8 00 A0 FD | 	call	#pushregs_
15508     0C F0 07 F1 | 	add	ptra, #12
1550c     08 4E 05 F1 | 	add	fp, #8
15510     A7 3A 68 FC | 	wrlong	#29, fp
15514     08 4E 85 F1 | 	sub	fp, #8
15518     51 00 00 FF 
1551c     4C E5 05 F1 | 	add	objptr, ##41804
15520     F2 12 02 FB | 	rdlong	arg01, objptr
15524     51 00 00 FF 
15528     4C E5 85 F1 | 	sub	objptr, ##41804
1552c     A7 12 62 FC | 	wrlong	arg01, fp
15530     A7 12 02 F6 | 	mov	arg01, fp
15534     EC 76 BF FD | 	call	#_push
15538     A7 F0 03 F6 | 	mov	ptra, fp
1553c     B2 00 A0 FD | 	call	#popregs_
15540                 | _do_mousey_ret
15540     2D 00 64 FD | 	ret
15544                 | 
15544                 | ' 
15544                 | ' '------------------ new
15544                 | ' 
15544                 | ' sub do_new
15544                 | _do_new
15544     03 4A 05 F6 | 	mov	COUNT_, #3
15548     A8 00 A0 FD | 	call	#pushregs_
1554c                 | ' 
1554c                 | ' if inrun=1 then inrun=2
1554c     50 00 00 FF 
15550     EC E4 05 F1 | 	add	objptr, ##41196
15554     F2 16 02 FB | 	rdlong	arg03, objptr
15558     50 00 00 FF 
1555c     EC E4 85 F1 | 	sub	objptr, ##41196
15560     01 16 0E F2 | 	cmp	arg03, #1 wz
15564     50 00 00 AF 
15568     EC E4 05 A1 |  if_e	add	objptr, ##41196
1556c     F2 04 68 AC |  if_e	wrlong	#2, objptr
15570     50 00 00 AF 
15574     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15578     13 12 C6 F9 | 	decod	arg01, #19
1557c     01 14 66 F6 | 	neg	arg02, #1
15580     EC C0 B0 FD | 	call	#_pslpoke
15584     35 00 00 FF 
15588     08 E4 05 F1 | 	add	objptr, ##27144
1558c     F2 00 68 FC | 	wrlong	#0, objptr
15590                 | ' pslpoke(memlo,$FFFFFFFF)
15590                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15590     00 26 06 F6 | 	mov	local01, #0
15594     20 00 00 FF 
15598     10 E4 85 F1 | 	sub	objptr, ##16400
1559c     97 1E 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
155a0                 | LR__1790
155a0     13 17 02 F6 | 	mov	arg03, local01
155a4     04 16 66 F0 | 	shl	arg03, #4
155a8     F2 16 02 F1 | 	add	arg03, objptr
155ac     A9 01 00 FF 
155b0     71 15 06 F6 | 	mov	arg02, ##@LR__5833
155b4     0B 15 62 FC | 	wrlong	arg02, arg03
155b8     13 29 02 F6 | 	mov	local02, local01
155bc     04 28 66 F0 | 	shl	local02, #4
155c0     F2 28 02 F1 | 	add	local02, objptr
155c4     0C 28 06 F1 | 	add	local02, #12
155c8     14 01 68 FC | 	wrlong	#0, local02
155cc     01 26 06 F1 | 	add	local01, #1
155d0     02 00 00 FF 
155d4     01 26 56 F2 | 	cmps	local01, ##1025 wc
155d8     C4 FF 9F CD |  if_b	jmp	#LR__1790
155dc                 | LR__1791
155dc     35 00 00 FF 
155e0     90 E4 05 F1 | 	add	objptr, ##27280
155e4     00 04 80 FF 
155e8     F2 00 68 FC | 	wrlong	##524288, objptr
155ec     06 00 00 FF 
155f0     30 E4 05 F1 | 	add	objptr, ##3120
155f4     00 04 80 FF 
155f8     F2 00 68 FC | 	wrlong	##524288, objptr
155fc     04 E4 05 F1 | 	add	objptr, #4
15600     00 04 80 FF 
15604     F2 00 68 FC | 	wrlong	##524288, objptr
15608     0D 00 00 FF 
1560c     64 E4 85 F1 | 	sub	objptr, ##6756
15610     F2 00 68 FC | 	wrlong	#0, objptr
15614     07 00 00 FF 
15618     24 E4 05 F1 | 	add	objptr, ##3620
1561c     F2 00 68 FC | 	wrlong	#0, objptr
15620     07 00 00 FF 
15624     20 E4 85 F1 | 	sub	objptr, ##3616
15628     00 04 80 FF 
1562c     F2 00 68 FC | 	wrlong	##524288, objptr
15630     0D 00 00 FF 
15634     D0 E4 05 F1 | 	add	objptr, ##6864
15638     F2 00 68 FC | 	wrlong	#0, objptr
1563c     A9 01 00 FF 
15640     72 2B 06 F6 | 	mov	local03, ##@LR__5834
15644     01 00 00 FF 
15648     EC E4 05 F1 | 	add	objptr, ##748
1564c     F2 2A 62 FC | 	wrlong	local03, objptr
15650     07 00 00 FF 
15654     8C E5 85 F1 | 	sub	objptr, ##3980
15658     F2 00 68 FC | 	wrlong	#0, objptr
1565c     04 E4 05 F1 | 	add	objptr, #4
15660     FF FF FF FF 
15664     F2 FE 6B FC | 	wrlong	##-1, objptr
15668     06 00 00 FF 
1566c     A0 E4 05 F1 | 	add	objptr, ##3232
15670     F2 00 68 FC | 	wrlong	#0, objptr
15674     04 E4 05 F1 | 	add	objptr, #4
15678     F2 00 68 FC | 	wrlong	#0, objptr
1567c                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
1567c                 | ' stackpointer=0
1567c                 | ' lineptr=0 
1567c                 | ' programptr=memlo ': stringptr=0
1567c                 | ' dataptr=0 : readline=""
1567c                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
1567c                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
1567c     00 26 06 F6 | 	mov	local01, #0
15680     06 00 00 FF 
15684     9C E4 85 F1 | 	sub	objptr, ##3228
15688     97 16 48 FB | 	callpa	#(@LR__1793-@LR__1792)>>2,fcache_load_ptr_
1568c                 | LR__1792
1568c     13 29 02 F6 | 	mov	local02, local01
15690     02 28 66 F0 | 	shl	local02, #2
15694     13 29 02 F1 | 	add	local02, local01
15698     02 28 66 F0 | 	shl	local02, #2
1569c     F2 28 02 F1 | 	add	local02, objptr
156a0     08 28 06 F1 | 	add	local02, #8
156a4     FF FF FF FF 
156a8     14 FF 6B FC | 	wrlong	##-1, local02
156ac     01 26 06 F1 | 	add	local01, #1
156b0     41 26 56 F2 | 	cmps	local01, #65 wc
156b4     D4 FF 9F CD |  if_b	jmp	#LR__1792
156b8                 | LR__1793
156b8     4A 00 00 FF 
156bc     98 E4 85 F1 | 	sub	objptr, ##38040
156c0                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
156c0     00 26 06 F6 | 	mov	local01, #0
156c4                 | LR__1794
156c4     13 29 02 F6 | 	mov	local02, local01
156c8     02 28 66 F0 | 	shl	local02, #2
156cc     51 00 00 FF 
156d0     90 E5 05 F1 | 	add	objptr, ##41872
156d4     F2 28 02 F1 | 	add	local02, objptr
156d8     14 2B 0A FB | 	rdlong	local03, local02 wz
156dc     51 00 00 FF 
156e0     90 E5 85 F1 | 	sub	objptr, ##41872
156e4     34 00 90 AD |  if_e	jmp	#LR__1795
156e8     13 13 02 F6 | 	mov	arg01, local01
156ec     00 14 06 F6 | 	mov	arg02, #0
156f0     00 16 06 F6 | 	mov	arg03, #0
156f4     20 CE B0 FD | 	call	#_hg010b_spin2_setspritesize
156f8     13 29 02 F6 | 	mov	local02, local01
156fc     02 28 66 F0 | 	shl	local02, #2
15700     51 00 00 FF 
15704     90 E5 05 F1 | 	add	objptr, ##41872
15708     F2 28 02 F1 | 	add	local02, objptr
1570c     14 13 02 FB | 	rdlong	arg01, local02
15710     51 00 00 FF 
15714     90 E5 85 F1 | 	sub	objptr, ##41872
15718     34 3A B1 FD | 	call	#__system___gc_free
1571c                 | LR__1795
1571c     01 26 06 F1 | 	add	local01, #1
15720     10 26 56 F2 | 	cmps	local01, #16 wc
15724     9C FF 9F CD |  if_b	jmp	#LR__1794
15728     51 00 00 FF 
1572c     E4 E5 05 F1 | 	add	objptr, ##41956
15730     00 C0 9F FF 
15734     F2 00 68 FC | 	wrlong	##1065353216, objptr
15738     04 E4 05 F1 | 	add	objptr, #4
1573c     00 C0 9F FF 
15740     F2 00 68 FC | 	wrlong	##1065353216, objptr
15744     51 00 00 FF 
15748     E4 E5 85 F1 | 	sub	objptr, ##41956
1574c     F2 2A 02 FB | 	rdlong	local03, objptr
15750     51 00 00 FF 
15754     D0 E5 05 F1 | 	add	objptr, ##41936
15758     F2 2A 62 FC | 	wrlong	local03, objptr
1575c     51 00 00 FF 
15760     D4 E5 85 F1 | 	sub	objptr, ##41940
15764     11 12 06 F6 | 	mov	arg01, #17
15768     08 14 06 F6 | 	mov	arg02, #8
1576c     10 16 06 F6 | 	mov	arg03, #16
15770     A4 CD B0 FD | 	call	#_hg010b_spin2_setspritesize
15774     10 12 06 F6 | 	mov	arg01, #16
15778     20 14 06 F6 | 	mov	arg02, #32
1577c     20 16 06 F6 | 	mov	arg03, #32
15780     94 CD B0 FD | 	call	#_hg010b_spin2_setspritesize
15784     A9 01 00 FF 
15788     73 2B 06 F6 | 	mov	local03, ##@LR__5835
1578c     52 00 00 FF 
15790     00 E4 05 F1 | 	add	objptr, ##41984
15794     F2 2A 62 FC | 	wrlong	local03, objptr
15798     52 00 00 FF 
1579c     00 E4 85 F1 | 	sub	objptr, ##41984
157a0     34 B1 B0 FD | 	call	#_init_audio
157a4     A7 F0 03 F6 | 	mov	ptra, fp
157a8     B2 00 A0 FD | 	call	#popregs_
157ac                 | _do_new_ret
157ac     2D 00 64 FD | 	ret
157b0                 | 
157b0                 | ' 
157b0                 | ' '-------------------- next
157b0                 | ' 
157b0                 | ' sub do_next()
157b0                 | _do_next
157b0     04 4A 05 F6 | 	mov	COUNT_, #4
157b4     A8 00 A0 FD | 	call	#pushregs_
157b8     D0 73 BF FD | 	call	#_pop
157bc     FD 26 02 F6 | 	mov	local01, result1
157c0     FE 28 02 F6 | 	mov	local02, result2
157c4     FF 2A 02 F6 | 	mov	local03, result3
157c8                 | ' t1=pop() :varnum=t1.result.uresult
157c8                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
157c8     50 00 00 FF 
157cc     30 E5 05 F1 | 	add	objptr, ##41264
157d0     F2 14 02 FB | 	rdlong	arg02, objptr
157d4     0A 13 02 F6 | 	mov	arg01, arg02
157d8     02 12 66 F0 | 	shl	arg01, #2
157dc     0A 13 02 F1 | 	add	arg01, arg02
157e0     02 12 66 F0 | 	shl	arg01, #2
157e4     06 00 00 FF 
157e8     98 E4 85 F1 | 	sub	objptr, ##3224
157ec     F2 12 02 F1 | 	add	arg01, objptr
157f0     08 12 06 F1 | 	add	arg01, #8
157f4     09 15 02 FB | 	rdlong	arg02, arg01
157f8     13 15 0A F2 | 	cmp	arg02, local01 wz
157fc     4A 00 00 FF 
15800     98 E4 85 F1 | 	sub	objptr, ##38040
15804     10 00 90 AD |  if_e	jmp	#LR__1800
15808     25 12 06 F6 | 	mov	arg01, #37
1580c     00 14 06 F6 | 	mov	arg02, #0
15810     BC BC B0 FD | 	call	#_printerror
15814     54 03 90 FD | 	jmp	#LR__1807
15818                 | LR__1800
15818                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15818     13 15 02 F6 | 	mov	arg02, local01
1581c     04 14 66 F0 | 	shl	arg02, #4
15820     14 00 00 FF 
15824     F8 E5 05 F1 | 	add	objptr, ##10744
15828     F2 14 02 F1 | 	add	arg02, objptr
1582c     0C 14 06 F1 | 	add	arg02, #12
15830     0A 15 02 FB | 	rdlong	arg02, arg02
15834     1E 14 0E F2 | 	cmp	arg02, #30 wz
15838     14 00 00 FF 
1583c     F8 E5 85 F1 | 	sub	objptr, ##10744
15840     54 00 90 5D |  if_ne	jmp	#LR__1801
15844     13 15 02 F6 | 	mov	arg02, local01
15848     04 14 66 F0 | 	shl	arg02, #4
1584c     14 00 00 FF 
15850     F8 E5 05 F1 | 	add	objptr, ##10744
15854     F2 14 02 F1 | 	add	arg02, objptr
15858     0C 14 06 F1 | 	add	arg02, #12
1585c     0A 39 68 FC | 	wrlong	#28, arg02
15860     13 2D 02 F6 | 	mov	local04, local01
15864     04 2C 66 F0 | 	shl	local04, #4
15868     F2 2C 02 F1 | 	add	local04, objptr
1586c     13 15 02 F6 | 	mov	arg02, local01
15870     04 14 66 F0 | 	shl	arg02, #4
15874     F2 14 02 F1 | 	add	arg02, objptr
15878     04 14 06 F1 | 	add	arg02, #4
1587c     0A 13 02 FB | 	rdlong	arg01, arg02
15880     14 00 00 FF 
15884     F8 E5 85 F1 | 	sub	objptr, ##10744
15888     01 14 06 F6 | 	mov	arg02, #1
1588c     24 29 B1 FD | 	call	#__system___float_tointeger
15890     04 2C 06 F1 | 	add	local04, #4
15894     16 FB 61 FC | 	wrlong	result1, local04
15898                 | LR__1801
15898     50 00 00 FF 
1589c     30 E5 05 F1 | 	add	objptr, ##41264
158a0     F2 2C 02 FB | 	rdlong	local04, objptr
158a4     16 15 02 F6 | 	mov	arg02, local04
158a8     02 14 66 F0 | 	shl	arg02, #2
158ac     16 15 02 F1 | 	add	arg02, local04
158b0     02 14 66 F0 | 	shl	arg02, #2
158b4     06 00 00 FF 
158b8     98 E4 85 F1 | 	sub	objptr, ##3224
158bc     F2 14 02 F1 | 	add	arg02, objptr
158c0     0C 14 06 F1 | 	add	arg02, #12
158c4     0A FF 01 FB | 	rdlong	result3, arg02
158c8     13 2D 02 F6 | 	mov	local04, local01
158cc     04 2C 66 F0 | 	shl	local04, #4
158d0     35 00 00 FF 
158d4     A0 E4 85 F1 | 	sub	objptr, ##27296
158d8     F2 2C 02 F1 | 	add	local04, objptr
158dc     13 15 02 F6 | 	mov	arg02, local01
158e0     04 14 66 F0 | 	shl	arg02, #4
158e4     F2 14 02 F1 | 	add	arg02, objptr
158e8     04 14 06 F1 | 	add	arg02, #4
158ec     0A 13 02 FB | 	rdlong	arg01, arg02
158f0     FF 12 02 F1 | 	add	arg01, result3
158f4     04 2C 06 F1 | 	add	local04, #4
158f8     16 13 62 FC | 	wrlong	arg01, local04
158fc                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
158fc                 | ' if fortable(fortop).stepval>=0 then
158fc     3B 00 00 FF 
15900     38 E5 05 F1 | 	add	objptr, ##30520
15904     F2 2C 02 FB | 	rdlong	local04, objptr
15908     16 13 02 F6 | 	mov	arg01, local04
1590c     02 12 66 F0 | 	shl	arg01, #2
15910     16 13 02 F1 | 	add	arg01, local04
15914     02 12 66 F0 | 	shl	arg01, #2
15918     06 00 00 FF 
1591c     98 E4 85 F1 | 	sub	objptr, ##3224
15920     F2 12 02 F1 | 	add	arg01, objptr
15924     0C 12 06 F1 | 	add	arg01, #12
15928     09 13 02 FB | 	rdlong	arg01, arg01
1592c     00 12 56 F2 | 	cmps	arg01, #0 wc
15930     4A 00 00 FF 
15934     98 E4 85 F1 | 	sub	objptr, ##38040
15938     78 00 90 CD |  if_b	jmp	#LR__1802
1593c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
1593c     04 26 66 F0 | 	shl	local01, #4
15940     14 00 00 FF 
15944     F8 E5 05 F1 | 	add	objptr, ##10744
15948     F2 26 02 F1 | 	add	local01, objptr
1594c     3B 00 00 FF 
15950     38 E5 05 F1 | 	add	objptr, ##30520
15954     F2 12 02 FB | 	rdlong	arg01, objptr
15958     09 2D 02 F6 | 	mov	local04, arg01
1595c     02 2C 66 F0 | 	shl	local04, #2
15960     09 2D 02 F1 | 	add	local04, arg01
15964     02 2C 66 F0 | 	shl	local04, #2
15968     06 00 00 FF 
1596c     98 E4 85 F1 | 	sub	objptr, ##3224
15970     F2 2C 02 F1 | 	add	local04, objptr
15974     04 26 06 F1 | 	add	local01, #4
15978     13 27 02 FB | 	rdlong	local01, local01
1597c     10 2C 06 F1 | 	add	local04, #16
15980     16 2D 02 FB | 	rdlong	local04, local04
15984     16 27 5A F2 | 	cmps	local01, local04 wcz
15988     4A 00 00 FF 
1598c     98 E4 85 F1 | 	sub	objptr, ##38040
15990     9C 00 90 ED |  if_be	jmp	#LR__1804
15994     50 00 00 FF 
15998     30 E5 05 F1 | 	add	objptr, ##41264
1599c     F2 2C 02 FB | 	rdlong	local04, objptr
159a0     01 2C 86 F1 | 	sub	local04, #1
159a4     F2 2C 62 FC | 	wrlong	local04, objptr
159a8     50 00 00 FF 
159ac     30 E5 85 F1 | 	sub	objptr, ##41264
159b0     B8 01 90 FD | 	jmp	#LR__1807
159b4                 | LR__1802
159b4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
159b4     13 2D 02 F6 | 	mov	local04, local01
159b8     04 2C 66 F0 | 	shl	local04, #4
159bc     14 00 00 FF 
159c0     F8 E5 05 F1 | 	add	objptr, ##10744
159c4     F2 2C 02 F1 | 	add	local04, objptr
159c8     3B 00 00 FF 
159cc     38 E5 05 F1 | 	add	objptr, ##30520
159d0     F2 26 02 FB | 	rdlong	local01, objptr
159d4     13 13 02 F6 | 	mov	arg01, local01
159d8     02 12 66 F0 | 	shl	arg01, #2
159dc     13 13 02 F1 | 	add	arg01, local01
159e0     02 12 66 F0 | 	shl	arg01, #2
159e4     06 00 00 FF 
159e8     98 E4 85 F1 | 	sub	objptr, ##3224
159ec     F2 12 02 F1 | 	add	arg01, objptr
159f0     04 2C 06 F1 | 	add	local04, #4
159f4     16 2D 02 FB | 	rdlong	local04, local04
159f8     10 12 06 F1 | 	add	arg01, #16
159fc     09 13 02 FB | 	rdlong	arg01, arg01
15a00     09 2D 52 F2 | 	cmps	local04, arg01 wc
15a04     4A 00 00 FF 
15a08     98 E4 85 F1 | 	sub	objptr, ##38040
15a0c     20 00 90 3D |  if_ae	jmp	#LR__1803
15a10     50 00 00 FF 
15a14     30 E5 05 F1 | 	add	objptr, ##41264
15a18     F2 2C 02 FB | 	rdlong	local04, objptr
15a1c     01 2C 86 F1 | 	sub	local04, #1
15a20     F2 2C 62 FC | 	wrlong	local04, objptr
15a24     50 00 00 FF 
15a28     30 E5 85 F1 | 	sub	objptr, ##41264
15a2c     3C 01 90 FD | 	jmp	#LR__1807
15a30                 | LR__1803
15a30                 | LR__1804
15a30                 | ' ' if not returned, goto pointer 
15a30                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15a30     50 00 00 FF 
15a34     EC E4 05 F1 | 	add	objptr, ##41196
15a38     F2 2C 02 FB | 	rdlong	local04, objptr
15a3c     50 00 00 FF 
15a40     EC E4 85 F1 | 	sub	objptr, ##41196
15a44     01 2C 16 F2 | 	cmp	local04, #1 wc
15a48     DC 00 90 CD |  if_b	jmp	#LR__1805
15a4c     50 00 00 FF 
15a50     30 E5 05 F1 | 	add	objptr, ##41264
15a54     F2 2C 02 FB | 	rdlong	local04, objptr
15a58     16 27 02 F6 | 	mov	local01, local04
15a5c     02 26 66 F0 | 	shl	local01, #2
15a60     16 27 02 F1 | 	add	local01, local04
15a64     02 26 66 F0 | 	shl	local01, #2
15a68     06 00 00 FF 
15a6c     98 E4 85 F1 | 	sub	objptr, ##3224
15a70     F2 26 02 F1 | 	add	local01, objptr
15a74     06 00 00 FF 
15a78     20 E4 05 F1 | 	add	objptr, ##3104
15a7c     F2 2C 02 FB | 	rdlong	local04, objptr
15a80     50 00 00 FF 
15a84     B8 E4 85 F1 | 	sub	objptr, ##41144
15a88     13 27 02 FB | 	rdlong	local01, local01
15a8c     13 2D 0A F2 | 	cmp	local04, local01 wz
15a90     94 00 90 AD |  if_e	jmp	#LR__1805
15a94     50 00 00 FF 
15a98     30 E5 05 F1 | 	add	objptr, ##41264
15a9c     F2 2C 02 FB | 	rdlong	local04, objptr
15aa0     16 27 02 F6 | 	mov	local01, local04
15aa4     02 26 66 F0 | 	shl	local01, #2
15aa8     16 27 02 F1 | 	add	local01, local04
15aac     02 26 66 F0 | 	shl	local01, #2
15ab0     06 00 00 FF 
15ab4     98 E4 85 F1 | 	sub	objptr, ##3224
15ab8     F2 26 02 F1 | 	add	local01, objptr
15abc     13 27 02 FB | 	rdlong	local01, local01
15ac0     06 00 00 FF 
15ac4     20 E4 05 F1 | 	add	objptr, ##3104
15ac8     F2 26 62 FC | 	wrlong	local01, objptr
15acc     78 E4 05 F1 | 	add	objptr, #120
15ad0     F2 2C 02 FB | 	rdlong	local04, objptr
15ad4     16 27 02 F6 | 	mov	local01, local04
15ad8     02 26 66 F0 | 	shl	local01, #2
15adc     16 27 02 F1 | 	add	local01, local04
15ae0     02 26 66 F0 | 	shl	local01, #2
15ae4     06 00 00 FF 
15ae8     98 E4 85 F1 | 	sub	objptr, ##3224
15aec     F2 26 02 F1 | 	add	local01, objptr
15af0     04 26 06 F1 | 	add	local01, #4
15af4     13 27 02 FB | 	rdlong	local01, local01
15af8     06 00 00 FF 
15afc     24 E4 05 F1 | 	add	objptr, ##3108
15b00     F2 26 62 FC | 	wrlong	local01, objptr
15b04     06 00 00 FF 
15b08     40 E4 85 F1 | 	sub	objptr, ##3136
15b0c     F2 2C 02 FB | 	rdlong	local04, objptr
15b10     01 2C 86 F1 | 	sub	local04, #1
15b14     04 E4 05 F1 | 	add	objptr, #4
15b18     F2 2C 62 FC | 	wrlong	local04, objptr
15b1c     4A 00 00 FF 
15b20     80 E4 85 F1 | 	sub	objptr, ##38016
15b24     44 00 90 FD | 	jmp	#LR__1806
15b28                 | LR__1805
15b28     50 00 00 FF 
15b2c     30 E5 05 F1 | 	add	objptr, ##41264
15b30     F2 2C 02 FB | 	rdlong	local04, objptr
15b34     16 27 02 F6 | 	mov	local01, local04
15b38     02 26 66 F0 | 	shl	local01, #2
15b3c     16 27 02 F1 | 	add	local01, local04
15b40     02 26 66 F0 | 	shl	local01, #2
15b44     06 00 00 FF 
15b48     98 E4 85 F1 | 	sub	objptr, ##3224
15b4c     F2 26 02 F1 | 	add	local01, objptr
15b50     04 26 06 F1 | 	add	local01, #4
15b54     13 27 02 FB | 	rdlong	local01, local01
15b58     01 26 86 F1 | 	sub	local01, #1
15b5c     18 E4 85 F1 | 	sub	objptr, #24
15b60     F2 26 62 FC | 	wrlong	local01, objptr
15b64     4A 00 00 FF 
15b68     80 E4 85 F1 | 	sub	objptr, ##38016
15b6c                 | LR__1806
15b6c                 | LR__1807
15b6c     A7 F0 03 F6 | 	mov	ptra, fp
15b70     B2 00 A0 FD | 	call	#popregs_
15b74                 | _do_next_ret
15b74     2D 00 64 FD | 	ret
15b78                 | 
15b78                 | ' 
15b78                 | ' '-------------------- no command (print "Unknown command")
15b78                 | ' 
15b78                 | ' sub do_no_command
15b78                 | _do_no_command
15b78     50 00 00 FF 
15b7c     F0 E4 05 F1 | 	add	objptr, ##41200
15b80     F2 14 02 FB | 	rdlong	arg02, objptr
15b84     50 00 00 FF 
15b88     F0 E4 85 F1 | 	sub	objptr, ##41200
15b8c     17 12 06 F6 | 	mov	arg01, #23
15b90     3C B9 B0 FD | 	call	#_printerror
15b94                 | _do_no_command_ret
15b94     2D 00 64 FD | 	ret
15b98                 | 
15b98                 | ' 
15b98                 | ' '-------------------- nothing
15b98                 | ' 
15b98                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15b98                 | _do_nothing
15b98                 | _do_nothing_ret
15b98     2D 00 64 FD | 	ret
15b9c                 | 
15b9c                 | ' 
15b9c                 | ' '-------------------- on
15b9c                 | ' 
15b9c                 | ' sub do_on
15b9c                 | _do_on
15b9c     01 4A 05 F6 | 	mov	COUNT_, #1
15ba0     A8 00 A0 FD | 	call	#pushregs_
15ba4     18 F0 07 F1 | 	add	ptra, #24
15ba8     4A 00 00 FF 
15bac     80 E4 05 F1 | 	add	objptr, ##38016
15bb0     F2 12 02 FB | 	rdlong	arg01, objptr
15bb4     09 FD 01 F6 | 	mov	result2, arg01
15bb8     01 FC 65 F0 | 	shl	result2, #1
15bbc     09 FD 01 F1 | 	add	result2, arg01
15bc0     02 FC 65 F0 | 	shl	result2, #2
15bc4     03 00 00 FF 
15bc8     04 E4 85 F1 | 	sub	objptr, ##1540
15bcc     F2 FC 01 F1 | 	add	result2, objptr
15bd0     FE 12 02 FB | 	rdlong	arg01, result2
15bd4     14 4E 05 F1 | 	add	fp, #20
15bd8     A7 12 62 FC | 	wrlong	arg01, fp
15bdc     03 00 00 FF 
15be0     04 E4 05 F1 | 	add	objptr, ##1540
15be4     F2 12 02 FB | 	rdlong	arg01, objptr
15be8     09 27 02 F6 | 	mov	local01, arg01
15bec     01 26 66 F0 | 	shl	local01, #1
15bf0     09 27 02 F1 | 	add	local01, arg01
15bf4     02 26 66 F0 | 	shl	local01, #2
15bf8     03 00 00 FF 
15bfc     04 E4 85 F1 | 	sub	objptr, ##1540
15c00     F2 26 02 F1 | 	add	local01, objptr
15c04     04 26 06 F1 | 	add	local01, #4
15c08     13 27 02 FB | 	rdlong	local01, local01
15c0c     08 4E 85 F1 | 	sub	fp, #8
15c10     A7 26 62 FC | 	wrlong	local01, fp
15c14     0C 4E 85 F1 | 	sub	fp, #12
15c18     47 00 00 FF 
15c1c     7C E4 85 F1 | 	sub	objptr, ##36476
15c20     68 6F BF FD | 	call	#_pop
15c24     FF 26 02 F6 | 	mov	local01, result3
15c28     A7 FA 61 FC | 	wrlong	result1, fp
15c2c     04 4E 05 F1 | 	add	fp, #4
15c30     A7 FC 61 FC | 	wrlong	result2, fp
15c34     04 4E 05 F1 | 	add	fp, #4
15c38     A7 26 62 FC | 	wrlong	local01, fp
15c3c     08 4E 85 F1 | 	sub	fp, #8
15c40     A7 12 02 F6 | 	mov	arg01, fp
15c44     28 71 BF FD | 	call	#_converttoint
15c48     10 4E 05 F1 | 	add	fp, #16
15c4c     A7 FA 61 FC | 	wrlong	result1, fp
15c50                 | ' 
15c50                 | ' numpar=compiledline(lineptr_e).result.uresult
15c50                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15c50                 | ' t1=pop()
15c50                 | ' t=converttoint(t1)
15c50                 | ' if t<1 orelse t>numpar then return
15c50     10 4E 85 F1 | 	sub	fp, #16
15c54     01 FA 55 F2 | 	cmps	result1, #1 wc
15c58     58 00 90 CD |  if_b	jmp	#LR__1810
15c5c     10 4E 05 F1 | 	add	fp, #16
15c60     A7 26 02 FB | 	rdlong	local01, fp
15c64     04 4E 05 F1 | 	add	fp, #4
15c68     A7 12 02 FB | 	rdlong	arg01, fp
15c6c     14 4E 85 F1 | 	sub	fp, #20
15c70     09 27 5A F2 | 	cmps	local01, arg01 wcz
15c74     3C 00 90 1D |  if_a	jmp	#LR__1810
15c78     10 4E 05 F1 | 	add	fp, #16
15c7c     A7 26 02 FB | 	rdlong	local01, fp
15c80     01 26 86 F1 | 	sub	local01, #1
15c84     04 4E 85 F1 | 	sub	fp, #4
15c88     A7 12 02 FB | 	rdlong	arg01, fp
15c8c     13 13 02 FD | 	qmul	arg01, local01
15c90     4A 00 00 FF 
15c94     80 E4 05 F1 | 	add	objptr, ##38016
15c98     F2 26 02 FB | 	rdlong	local01, objptr
15c9c     0C 4E 85 F1 | 	sub	fp, #12
15ca0     18 12 62 FD | 	getqx	arg01
15ca4     09 27 02 F1 | 	add	local01, arg01
15ca8     F2 26 62 FC | 	wrlong	local01, objptr
15cac     4A 00 00 FF 
15cb0     80 E4 85 F1 | 	sub	objptr, ##38016
15cb4                 | LR__1810
15cb4     A7 F0 03 F6 | 	mov	ptra, fp
15cb8     B2 00 A0 FD | 	call	#popregs_
15cbc                 | _do_on_ret
15cbc     2D 00 64 FD | 	ret
15cc0                 | 
15cc0                 | ' 
15cc0                 | ' '-------------------- open
15cc0                 | ' 
15cc0                 | ' sub do_open
15cc0                 | _do_open
15cc0     02 4A 05 F6 | 	mov	COUNT_, #2
15cc4     A8 00 A0 FD | 	call	#pushregs_
15cc8     20 F0 07 F1 | 	add	ptra, #32
15ccc     4A 00 00 FF 
15cd0     80 E4 05 F1 | 	add	objptr, ##38016
15cd4     F2 16 02 FB | 	rdlong	arg03, objptr
15cd8     0B 15 02 F6 | 	mov	arg02, arg03
15cdc     01 14 66 F0 | 	shl	arg02, #1
15ce0     0B 15 02 F1 | 	add	arg02, arg03
15ce4     02 14 66 F0 | 	shl	arg02, #2
15ce8     03 00 00 FF 
15cec     04 E4 85 F1 | 	sub	objptr, ##1540
15cf0     F2 14 02 F1 | 	add	arg02, objptr
15cf4     0A 17 02 FB | 	rdlong	arg03, arg02
15cf8     10 4E 05 F1 | 	add	fp, #16
15cfc     A7 16 62 FC | 	wrlong	arg03, fp
15d00     10 4E 85 F1 | 	sub	fp, #16
15d04     47 00 00 FF 
15d08     7C E4 85 F1 | 	sub	objptr, ##36476
15d0c     7C 6E BF FD | 	call	#_pop
15d10     FF 16 02 F6 | 	mov	arg03, result3
15d14     A7 FA 61 FC | 	wrlong	result1, fp
15d18     04 4E 05 F1 | 	add	fp, #4
15d1c     A7 FC 61 FC | 	wrlong	result2, fp
15d20     04 4E 05 F1 | 	add	fp, #4
15d24     A7 16 62 FC | 	wrlong	arg03, fp
15d28                 | ' 
15d28                 | ' numpar=compiledline(lineptr_e).result.uresult
15d28                 | ' 
15d28                 | ' t1=pop()
15d28                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15d28     08 4E 85 F1 | 	sub	fp, #8
15d2c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15d30     18 00 90 5D |  if_ne	jmp	#LR__1820
15d34     A7 12 02 FB | 	rdlong	arg01, fp
15d38     C8 6F BF FD | 	call	#_convertstring
15d3c     A7 FA 61 FC | 	wrlong	result1, fp
15d40     08 4E 05 F1 | 	add	fp, #8
15d44     A7 3E 68 FC | 	wrlong	#31, fp
15d48     08 4E 85 F1 | 	sub	fp, #8
15d4c                 | LR__1820
15d4c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15d4c     08 4E 05 F1 | 	add	fp, #8
15d50     A7 16 02 FB | 	rdlong	arg03, fp
15d54     08 4E 85 F1 | 	sub	fp, #8
15d58     1F 16 0E F2 | 	cmp	arg03, #31 wz
15d5c     44 00 90 AD |  if_e	jmp	#LR__1821
15d60     00 12 06 F6 | 	mov	arg01, #0
15d64     34 4E B1 FD | 	call	#__system___getiolock_0595
15d68     FD 12 02 F6 | 	mov	arg01, result1
15d6c     04 F1 B0 FD | 	call	#__system___lockmem
15d70     A9 01 00 FF 
15d74     7E 15 06 F6 | 	mov	arg02, ##@LR__5836
15d78     00 12 06 F6 | 	mov	arg01, #0
15d7c     00 16 06 F6 | 	mov	arg03, #0
15d80     E4 FD B0 FD | 	call	#__system___basic_print_string
15d84     00 12 06 F6 | 	mov	arg01, #0
15d88     0A 14 06 F6 | 	mov	arg02, #10
15d8c     00 16 06 F6 | 	mov	arg03, #0
15d90     7C FD B0 FD | 	call	#__system___basic_print_char
15d94     00 12 06 F6 | 	mov	arg01, #0
15d98     00 4E B1 FD | 	call	#__system___getiolock_0595
15d9c     FD 00 68 FC | 	wrlong	#0, result1
15da0     28 02 90 FD | 	jmp	#LR__1832
15da4                 | LR__1821
15da4     A7 16 02 FB | 	rdlong	arg03, fp
15da8     0C 4E 05 F1 | 	add	fp, #12
15dac     A7 16 62 FC | 	wrlong	arg03, fp
15db0     0C 4E 85 F1 | 	sub	fp, #12
15db4     D4 6D BF FD | 	call	#_pop
15db8     FF 16 02 F6 | 	mov	arg03, result3
15dbc     A7 FA 61 FC | 	wrlong	result1, fp
15dc0     04 4E 05 F1 | 	add	fp, #4
15dc4     A7 FC 61 FC | 	wrlong	result2, fp
15dc8     04 4E 05 F1 | 	add	fp, #4
15dcc     A7 16 62 FC | 	wrlong	arg03, fp
15dd0                 | ' filename=t1.result.sresult
15dd0                 | ' t1=pop()
15dd0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15dd0     08 4E 85 F1 | 	sub	fp, #8
15dd4     2B 16 0E F2 | 	cmp	arg03, #43 wz
15dd8     18 00 90 5D |  if_ne	jmp	#LR__1822
15ddc     A7 12 02 FB | 	rdlong	arg01, fp
15de0     20 6F BF FD | 	call	#_convertstring
15de4     A7 FA 61 FC | 	wrlong	result1, fp
15de8     08 4E 05 F1 | 	add	fp, #8
15dec     A7 3E 68 FC | 	wrlong	#31, fp
15df0     08 4E 85 F1 | 	sub	fp, #8
15df4                 | LR__1822
15df4     14 4E 05 F1 | 	add	fp, #20
15df8     A7 00 68 FC | 	wrlong	#0, fp
15dfc                 | ' mode=0
15dfc                 | ' if t1.result_type=result_string then
15dfc     0C 4E 85 F1 | 	sub	fp, #12
15e00     A7 14 02 FB | 	rdlong	arg02, fp
15e04     08 4E 85 F1 | 	sub	fp, #8
15e08     1F 14 0E F2 | 	cmp	arg02, #31 wz
15e0c     64 00 90 5D |  if_ne	jmp	#LR__1823
15e10                 | '   if t1.result.sresult="read" then mode=1
15e10     A7 12 02 FB | 	rdlong	arg01, fp
15e14     A9 01 00 FF 
15e18     90 15 06 F6 | 	mov	arg02, ##@LR__5837
15e1c     7C F0 B0 FD | 	call	#__system___string_cmp
15e20     00 FA 0D F2 | 	cmp	result1, #0 wz
15e24     14 4E 05 A1 |  if_e	add	fp, #20
15e28     A7 02 68 AC |  if_e	wrlong	#1, fp
15e2c     14 4E 85 A1 |  if_e	sub	fp, #20
15e30                 | '   if t1.result.sresult="write" then mode=2
15e30     A7 12 02 FB | 	rdlong	arg01, fp
15e34     A9 01 00 FF 
15e38     95 15 06 F6 | 	mov	arg02, ##@LR__5838
15e3c     5C F0 B0 FD | 	call	#__system___string_cmp
15e40     00 FA 0D F2 | 	cmp	result1, #0 wz
15e44     14 4E 05 A1 |  if_e	add	fp, #20
15e48     A7 04 68 AC |  if_e	wrlong	#2, fp
15e4c     14 4E 85 A1 |  if_e	sub	fp, #20
15e50                 | '   if t1.result.sresult="append" then mode=4
15e50     A7 12 02 FB | 	rdlong	arg01, fp
15e54     A9 01 00 FF 
15e58     9B 15 06 F6 | 	mov	arg02, ##@LR__5839
15e5c     3C F0 B0 FD | 	call	#__system___string_cmp
15e60     00 FA 0D F2 | 	cmp	result1, #0 wz
15e64     14 4E 05 A1 |  if_e	add	fp, #20
15e68     A7 08 68 AC |  if_e	wrlong	#4, fp
15e6c     14 4E 85 A1 |  if_e	sub	fp, #20
15e70     14 00 90 FD | 	jmp	#LR__1824
15e74                 | LR__1823
15e74     A7 12 02 F6 | 	mov	arg01, fp
15e78     F4 6E BF FD | 	call	#_converttoint
15e7c     14 4E 05 F1 | 	add	fp, #20
15e80     A7 FA 61 FC | 	wrlong	result1, fp
15e84     14 4E 85 F1 | 	sub	fp, #20
15e88                 | LR__1824
15e88     00 6D BF FD | 	call	#_pop
15e8c     FF 16 02 F6 | 	mov	arg03, result3
15e90     A7 FA 61 FC | 	wrlong	result1, fp
15e94     04 4E 05 F1 | 	add	fp, #4
15e98     A7 FC 61 FC | 	wrlong	result2, fp
15e9c     04 4E 05 F1 | 	add	fp, #4
15ea0     A7 16 62 FC | 	wrlong	arg03, fp
15ea4                 | ' t1=pop()
15ea4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15ea4     08 4E 85 F1 | 	sub	fp, #8
15ea8     2C 16 0E F2 | 	cmp	arg03, #44 wz
15eac     44 00 90 AD |  if_e	jmp	#LR__1825
15eb0     00 12 06 F6 | 	mov	arg01, #0
15eb4     E4 4C B1 FD | 	call	#__system___getiolock_0595
15eb8     FD 12 02 F6 | 	mov	arg01, result1
15ebc     B4 EF B0 FD | 	call	#__system___lockmem
15ec0     A9 01 00 FF 
15ec4     A2 15 06 F6 | 	mov	arg02, ##@LR__5840
15ec8     00 12 06 F6 | 	mov	arg01, #0
15ecc     00 16 06 F6 | 	mov	arg03, #0
15ed0     94 FC B0 FD | 	call	#__system___basic_print_string
15ed4     00 12 06 F6 | 	mov	arg01, #0
15ed8     0A 14 06 F6 | 	mov	arg02, #10
15edc     00 16 06 F6 | 	mov	arg03, #0
15ee0     2C FC B0 FD | 	call	#__system___basic_print_char
15ee4     00 12 06 F6 | 	mov	arg01, #0
15ee8     B0 4C B1 FD | 	call	#__system___getiolock_0595
15eec     FD 00 68 FC | 	wrlong	#0, result1
15ef0     D8 00 90 FD | 	jmp	#LR__1832
15ef4                 | LR__1825
15ef4     A7 26 02 FB | 	rdlong	local01, fp
15ef8     18 4E 05 F1 | 	add	fp, #24
15efc     A7 26 62 FC | 	wrlong	local01, fp
15f00                 | ' channel  = t1.result.iresult
15f00                 | ' select case  mode
15f00     04 4E 85 F1 | 	sub	fp, #4
15f04     A7 28 02 FB | 	rdlong	local02, fp
15f08     14 4E 85 F1 | 	sub	fp, #20
15f0c     01 28 86 F1 | 	sub	local02, #1
15f10     04 28 26 F3 | 	fle	local02, #4
15f14     30 28 62 FD | 	jmprel	local02
15f18                 | LR__1826
15f18     10 00 90 FD | 	jmp	#LR__1827
15f1c     2C 00 90 FD | 	jmp	#LR__1828
15f20     68 00 90 FD | 	jmp	#LR__1830
15f24     44 00 90 FD | 	jmp	#LR__1829
15f28     60 00 90 FD | 	jmp	#LR__1830
15f2c                 | LR__1827
15f2c     18 4E 05 F1 | 	add	fp, #24
15f30     A7 12 02 FB | 	rdlong	arg01, fp
15f34     0C 4E 85 F1 | 	sub	fp, #12
15f38     A7 14 02 FB | 	rdlong	arg02, fp
15f3c     0C 4E 85 F1 | 	sub	fp, #12
15f40     00 16 06 F6 | 	mov	arg03, #0
15f44     30 FB B0 FD | 	call	#__system___basic_open_string
15f48     80 00 90 FD | 	jmp	#LR__1831
15f4c                 | LR__1828
15f4c     18 4E 05 F1 | 	add	fp, #24
15f50     A7 12 02 FB | 	rdlong	arg01, fp
15f54     0C 4E 85 F1 | 	sub	fp, #12
15f58     A7 14 02 FB | 	rdlong	arg02, fp
15f5c     0C 4E 85 F1 | 	sub	fp, #12
15f60     0D 16 06 F6 | 	mov	arg03, #13
15f64     10 FB B0 FD | 	call	#__system___basic_open_string
15f68     60 00 90 FD | 	jmp	#LR__1831
15f6c                 | LR__1829
15f6c     18 4E 05 F1 | 	add	fp, #24
15f70     A7 12 02 FB | 	rdlong	arg01, fp
15f74     0C 4E 85 F1 | 	sub	fp, #12
15f78     A7 14 02 FB | 	rdlong	arg02, fp
15f7c     0C 4E 85 F1 | 	sub	fp, #12
15f80     25 16 06 F6 | 	mov	arg03, #37
15f84     F0 FA B0 FD | 	call	#__system___basic_open_string
15f88     40 00 90 FD | 	jmp	#LR__1831
15f8c                 | LR__1830
15f8c     00 12 06 F6 | 	mov	arg01, #0
15f90     08 4C B1 FD | 	call	#__system___getiolock_0595
15f94     FD 12 02 F6 | 	mov	arg01, result1
15f98     D8 EE B0 FD | 	call	#__system___lockmem
15f9c     A9 01 00 FF 
15fa0     B4 15 06 F6 | 	mov	arg02, ##@LR__5841
15fa4     00 12 06 F6 | 	mov	arg01, #0
15fa8     00 16 06 F6 | 	mov	arg03, #0
15fac     B8 FB B0 FD | 	call	#__system___basic_print_string
15fb0     00 12 06 F6 | 	mov	arg01, #0
15fb4     0A 14 06 F6 | 	mov	arg02, #10
15fb8     00 16 06 F6 | 	mov	arg03, #0
15fbc     50 FB B0 FD | 	call	#__system___basic_print_char
15fc0     00 12 06 F6 | 	mov	arg01, #0
15fc4     D4 4B B1 FD | 	call	#__system___getiolock_0595
15fc8     FD 00 68 FC | 	wrlong	#0, result1
15fcc                 | LR__1831
15fcc                 | LR__1832
15fcc     A7 F0 03 F6 | 	mov	ptra, fp
15fd0     B2 00 A0 FD | 	call	#popregs_
15fd4                 | _do_open_ret
15fd4     2D 00 64 FD | 	ret
15fd8                 | 
15fd8                 | ' 
15fd8                 | ' '-------------------- paper
15fd8                 | ' 
15fd8                 | ' sub do_paper
15fd8                 | _do_paper
15fd8     03 4A 05 F6 | 	mov	COUNT_, #3
15fdc     A8 00 A0 FD | 	call	#pushregs_
15fe0     A8 6B BF FD | 	call	#_pop
15fe4     FD 26 02 F6 | 	mov	local01, result1
15fe8     FE 28 02 F6 | 	mov	local02, result2
15fec     FF 2A 02 F6 | 	mov	local03, result3
15ff0                 | ' t1=pop() 
15ff0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15ff0     1E 2A 0E F2 | 	cmp	local03, #30 wz
15ff4     10 00 90 5D |  if_ne	jmp	#LR__1840
15ff8     13 13 02 F6 | 	mov	arg01, local01
15ffc     00 14 06 F6 | 	mov	arg02, #0
16000     B0 21 B1 FD | 	call	#__system___float_tointeger
16004     FD 26 02 F6 | 	mov	local01, result1
16008                 | LR__1840
16008                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16008     1F 2A 0E F2 | 	cmp	local03, #31 wz
1600c     18 00 90 5D |  if_ne	jmp	#LR__1841
16010     13 13 02 F6 | 	mov	arg01, local01
16014     E0 24 B1 FD | 	call	#__system____builtin_atof
16018     FD 12 02 F6 | 	mov	arg01, result1
1601c     00 14 06 F6 | 	mov	arg02, #0
16020     90 21 B1 FD | 	call	#__system___float_tointeger
16024     FD 26 02 F6 | 	mov	local01, result1
16028                 | LR__1841
16028     37 00 00 FF 
1602c     38 E4 05 F1 | 	add	objptr, ##28216
16030     F2 26 62 FC | 	wrlong	local01, objptr
16034     04 E4 05 F1 | 	add	objptr, #4
16038     F2 12 02 FB | 	rdlong	arg01, objptr
1603c                 | ' 
1603c                 | ' write_color:=ff
1603c     36 00 00 FF 
16040     FB E5 85 F1 | 	sub	objptr, ##28155
16044     F2 12 62 FC | 	wrlong	arg01, objptr
16048                 | ' write_background:=bb
16048     04 E4 05 F1 | 	add	objptr, #4
1604c     F2 26 62 FC | 	wrlong	local01, objptr
16050     45 E4 85 F1 | 	sub	objptr, #69
16054     A7 F0 03 F6 | 	mov	ptra, fp
16058     B2 00 A0 FD | 	call	#popregs_
1605c                 | _do_paper_ret
1605c     2D 00 64 FD | 	ret
16060                 | 
16060                 | ' 
16060                 | ' '-------------------- peek
16060                 | ' 
16060                 | ' sub do_peek
16060                 | _do_peek
16060     00 4A 05 F6 | 	mov	COUNT_, #0
16064     A8 00 A0 FD | 	call	#pushregs_
16068     14 F0 07 F1 | 	add	ptra, #20
1606c     1C 6B BF FD | 	call	#_pop
16070     A7 FA 61 FC | 	wrlong	result1, fp
16074     04 4E 05 F1 | 	add	fp, #4
16078     A7 FC 61 FC | 	wrlong	result2, fp
1607c     04 4E 05 F1 | 	add	fp, #4
16080     A7 FE 61 FC | 	wrlong	result3, fp
16084     08 4E 85 F1 | 	sub	fp, #8
16088     A7 12 02 F6 | 	mov	arg01, fp
1608c     E0 6C BF FD | 	call	#_converttoint
16090     0C 4E 05 F1 | 	add	fp, #12
16094     A7 FA 61 FC | 	wrlong	result1, fp
16098                 | ' 
16098                 | ' t1=pop()
16098                 | ' a=converttoint(t1)
16098                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16098     0C 4E 85 F1 | 	sub	fp, #12
1609c     00 04 00 FF 
160a0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
160a4     1C 00 90 3D |  if_ae	jmp	#LR__1850
160a8     0C 4E 05 F1 | 	add	fp, #12
160ac     A7 12 02 FB | 	rdlong	arg01, fp
160b0     09 FB C1 FA | 	rdbyte	result1, arg01
160b4     04 4E 05 F1 | 	add	fp, #4
160b8     A7 FA 61 FC | 	wrlong	result1, fp
160bc     10 4E 85 F1 | 	sub	fp, #16
160c0     20 00 90 FD | 	jmp	#LR__1851
160c4                 | LR__1850
160c4     0C 4E 05 F1 | 	add	fp, #12
160c8     A7 12 02 FB | 	rdlong	arg01, fp
160cc     0C 4E 85 F1 | 	sub	fp, #12
160d0     74 B6 B0 FD | 	call	#_pspeek
160d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
160d8     10 4E 05 F1 | 	add	fp, #16
160dc     A7 FA 61 FC | 	wrlong	result1, fp
160e0     10 4E 85 F1 | 	sub	fp, #16
160e4                 | LR__1851
160e4     08 4E 05 F1 | 	add	fp, #8
160e8     A7 3A 68 FC | 	wrlong	#29, fp
160ec     08 4E 05 F1 | 	add	fp, #8
160f0     A7 12 02 FB | 	rdlong	arg01, fp
160f4     10 4E 85 F1 | 	sub	fp, #16
160f8     A7 12 62 FC | 	wrlong	arg01, fp
160fc     A7 12 02 F6 | 	mov	arg01, fp
16100     20 6B BF FD | 	call	#_push
16104     A7 F0 03 F6 | 	mov	ptra, fp
16108     B2 00 A0 FD | 	call	#popregs_
1610c                 | _do_peek_ret
1610c     2D 00 64 FD | 	ret
16110                 | 
16110                 | ' 
16110                 | ' '-------------------- pinfloat
16110                 | ' 
16110                 | ' sub do_pinfloat
16110                 | _do_pinfloat
16110     00 4A 05 F6 | 	mov	COUNT_, #0
16114     A8 00 A0 FD | 	call	#pushregs_
16118     0C F0 07 F1 | 	add	ptra, #12
1611c     6C 6A BF FD | 	call	#_pop
16120     A7 FA 61 FC | 	wrlong	result1, fp
16124     04 4E 05 F1 | 	add	fp, #4
16128     A7 FC 61 FC | 	wrlong	result2, fp
1612c     04 4E 05 F1 | 	add	fp, #4
16130     A7 FE 61 FC | 	wrlong	result3, fp
16134     08 4E 85 F1 | 	sub	fp, #8
16138     A7 12 02 F6 | 	mov	arg01, fp
1613c     30 6C BF FD | 	call	#_converttoint
16140     50 FA 61 FD | 	fltl	result1
16144     A7 F0 03 F6 | 	mov	ptra, fp
16148     B2 00 A0 FD | 	call	#popregs_
1614c                 | _do_pinfloat_ret
1614c     2D 00 64 FD | 	ret
16150                 | 
16150                 | ' 
16150                 | ' '-------------------- pinhi
16150                 | ' 
16150                 | ' sub do_pinhi
16150                 | _do_pinhi
16150     00 4A 05 F6 | 	mov	COUNT_, #0
16154     A8 00 A0 FD | 	call	#pushregs_
16158     0C F0 07 F1 | 	add	ptra, #12
1615c     2C 6A BF FD | 	call	#_pop
16160     A7 FA 61 FC | 	wrlong	result1, fp
16164     04 4E 05 F1 | 	add	fp, #4
16168     A7 FC 61 FC | 	wrlong	result2, fp
1616c     04 4E 05 F1 | 	add	fp, #4
16170     A7 FE 61 FC | 	wrlong	result3, fp
16174     08 4E 85 F1 | 	sub	fp, #8
16178     A7 12 02 F6 | 	mov	arg01, fp
1617c     F0 6B BF FD | 	call	#_converttoint
16180     59 FA 61 FD | 	drvh	result1
16184     A7 F0 03 F6 | 	mov	ptra, fp
16188     B2 00 A0 FD | 	call	#popregs_
1618c                 | _do_pinhi_ret
1618c     2D 00 64 FD | 	ret
16190                 | 
16190                 | ' 
16190                 | ' '-------------------- pinlo
16190                 | ' 
16190                 | ' sub do_pinlo
16190                 | _do_pinlo
16190     00 4A 05 F6 | 	mov	COUNT_, #0
16194     A8 00 A0 FD | 	call	#pushregs_
16198     0C F0 07 F1 | 	add	ptra, #12
1619c     EC 69 BF FD | 	call	#_pop
161a0     A7 FA 61 FC | 	wrlong	result1, fp
161a4     04 4E 05 F1 | 	add	fp, #4
161a8     A7 FC 61 FC | 	wrlong	result2, fp
161ac     04 4E 05 F1 | 	add	fp, #4
161b0     A7 FE 61 FC | 	wrlong	result3, fp
161b4     08 4E 85 F1 | 	sub	fp, #8
161b8     A7 12 02 F6 | 	mov	arg01, fp
161bc     B0 6B BF FD | 	call	#_converttoint
161c0     58 FA 61 FD | 	drvl	result1
161c4     A7 F0 03 F6 | 	mov	ptra, fp
161c8     B2 00 A0 FD | 	call	#popregs_
161cc                 | _do_pinlo_ret
161cc     2D 00 64 FD | 	ret
161d0                 | 
161d0                 | ' 
161d0                 | ' '-------------------- pinread
161d0                 | ' 
161d0                 | ' sub do_pinread
161d0                 | _do_pinread
161d0     00 4A 05 F6 | 	mov	COUNT_, #0
161d4     A8 00 A0 FD | 	call	#pushregs_
161d8     0C F0 07 F1 | 	add	ptra, #12
161dc     AC 69 BF FD | 	call	#_pop
161e0     A7 FA 61 FC | 	wrlong	result1, fp
161e4     04 4E 05 F1 | 	add	fp, #4
161e8     A7 FC 61 FC | 	wrlong	result2, fp
161ec     04 4E 05 F1 | 	add	fp, #4
161f0     A7 FE 61 FC | 	wrlong	result3, fp
161f4     08 4E 85 F1 | 	sub	fp, #8
161f8     A7 12 02 F6 | 	mov	arg01, fp
161fc     70 6B BF FD | 	call	#_converttoint
16200     FD 12 02 F6 | 	mov	arg01, result1
16204     20 12 CE F7 | 	test	arg01, #32 wz
16208     FF FB 01 56 |  if_ne	mov	result1, inb
1620c     FE FB 01 A6 |  if_e	mov	result1, ina
16210     09 FB 41 F0 | 	shr	result1, arg01
16214     06 12 46 F0 | 	shr	arg01, #6
16218     09 FB 41 F7 | 	zerox	result1, arg01
1621c     52 00 00 FF 
16220     4C E4 05 F1 | 	add	objptr, ##42060
16224     F2 FA 61 FC | 	wrlong	result1, objptr
16228     52 00 00 FF 
1622c     4C E4 85 F1 | 	sub	objptr, ##42060
16230     08 4E 05 F1 | 	add	fp, #8
16234     A7 3A 68 FC | 	wrlong	#29, fp
16238     08 4E 85 F1 | 	sub	fp, #8
1623c     A7 08 68 FC | 	wrlong	#4, fp
16240     A7 12 02 F6 | 	mov	arg01, fp
16244     DC 69 BF FD | 	call	#_push
16248     A7 F0 03 F6 | 	mov	ptra, fp
1624c     B2 00 A0 FD | 	call	#popregs_
16250                 | _do_pinread_ret
16250     2D 00 64 FD | 	ret
16254                 | 
16254                 | ' 
16254                 | ' '-------------------- pinstart
16254                 | ' 
16254                 | ' sub do_pinstart
16254                 | _do_pinstart
16254     03 4A 05 F6 | 	mov	COUNT_, #3
16258     A8 00 A0 FD | 	call	#pushregs_
1625c     30 F0 07 F1 | 	add	ptra, #48
16260     28 69 BF FD | 	call	#_pop
16264     FD 16 02 F6 | 	mov	arg03, result1
16268     FE 14 02 F6 | 	mov	arg02, result2
1626c     FF 18 02 F6 | 	mov	arg04, result3
16270     A7 16 62 FC | 	wrlong	arg03, fp
16274     04 4E 05 F1 | 	add	fp, #4
16278     A7 14 62 FC | 	wrlong	arg02, fp
1627c     04 4E 05 F1 | 	add	fp, #4
16280     A7 18 62 FC | 	wrlong	arg04, fp
16284     08 4E 85 F1 | 	sub	fp, #8
16288     00 69 BF FD | 	call	#_pop
1628c     FD 16 02 F6 | 	mov	arg03, result1
16290     FE 14 02 F6 | 	mov	arg02, result2
16294     FF 18 02 F6 | 	mov	arg04, result3
16298     0C 4E 05 F1 | 	add	fp, #12
1629c     A7 16 62 FC | 	wrlong	arg03, fp
162a0     04 4E 05 F1 | 	add	fp, #4
162a4     A7 14 62 FC | 	wrlong	arg02, fp
162a8     04 4E 05 F1 | 	add	fp, #4
162ac     A7 18 62 FC | 	wrlong	arg04, fp
162b0     14 4E 85 F1 | 	sub	fp, #20
162b4     D4 68 BF FD | 	call	#_pop
162b8     FD 16 02 F6 | 	mov	arg03, result1
162bc     FE 14 02 F6 | 	mov	arg02, result2
162c0     FF 18 02 F6 | 	mov	arg04, result3
162c4     18 4E 05 F1 | 	add	fp, #24
162c8     A7 16 62 FC | 	wrlong	arg03, fp
162cc     04 4E 05 F1 | 	add	fp, #4
162d0     A7 14 62 FC | 	wrlong	arg02, fp
162d4     04 4E 05 F1 | 	add	fp, #4
162d8     A7 18 62 FC | 	wrlong	arg04, fp
162dc     20 4E 85 F1 | 	sub	fp, #32
162e0     A8 68 BF FD | 	call	#_pop
162e4     FF 16 02 F6 | 	mov	arg03, result3
162e8     24 4E 05 F1 | 	add	fp, #36
162ec     A7 FA 61 FC | 	wrlong	result1, fp
162f0     04 4E 05 F1 | 	add	fp, #4
162f4     A7 FC 61 FC | 	wrlong	result2, fp
162f8     04 4E 05 F1 | 	add	fp, #4
162fc     A7 16 62 FC | 	wrlong	arg03, fp
16300     08 4E 85 F1 | 	sub	fp, #8
16304     A7 12 02 F6 | 	mov	arg01, fp
16308     24 4E 85 F1 | 	sub	fp, #36
1630c     60 6A BF FD | 	call	#_converttoint
16310     FD 26 02 F6 | 	mov	local01, result1
16314     18 4E 05 F1 | 	add	fp, #24
16318     A7 12 02 F6 | 	mov	arg01, fp
1631c     18 4E 85 F1 | 	sub	fp, #24
16320     4C 6A BF FD | 	call	#_converttoint
16324     FD 28 02 F6 | 	mov	local02, result1
16328     0C 4E 05 F1 | 	add	fp, #12
1632c     A7 12 02 F6 | 	mov	arg01, fp
16330     0C 4E 85 F1 | 	sub	fp, #12
16334     38 6A BF FD | 	call	#_converttoint
16338     FD 2A 02 F6 | 	mov	local03, result1
1633c     A7 12 02 F6 | 	mov	arg01, fp
16340     2C 6A BF FD | 	call	#_converttoint
16344     40 26 62 FD | 	dirl	local01
16348     13 29 02 FC | 	wrpin	local02, local01
1634c     13 2B 12 FC | 	wxpin	local03, local01
16350     13 FB 21 FC | 	wypin	result1, local01
16354     41 26 62 FD | 	dirh	local01
16358     A7 F0 03 F6 | 	mov	ptra, fp
1635c     B2 00 A0 FD | 	call	#popregs_
16360                 | _do_pinstart_ret
16360     2D 00 64 FD | 	ret
16364                 | 
16364                 | ' 
16364                 | ' '-------------------- pintoggle
16364                 | ' 
16364                 | ' sub do_pintoggle
16364                 | _do_pintoggle
16364     00 4A 05 F6 | 	mov	COUNT_, #0
16368     A8 00 A0 FD | 	call	#pushregs_
1636c     0C F0 07 F1 | 	add	ptra, #12
16370     18 68 BF FD | 	call	#_pop
16374     A7 FA 61 FC | 	wrlong	result1, fp
16378     04 4E 05 F1 | 	add	fp, #4
1637c     A7 FC 61 FC | 	wrlong	result2, fp
16380     04 4E 05 F1 | 	add	fp, #4
16384     A7 FE 61 FC | 	wrlong	result3, fp
16388     08 4E 85 F1 | 	sub	fp, #8
1638c     A7 12 02 F6 | 	mov	arg01, fp
16390     DC 69 BF FD | 	call	#_converttoint
16394     5F FA 61 FD | 	drvnot	result1
16398     A7 F0 03 F6 | 	mov	ptra, fp
1639c     B2 00 A0 FD | 	call	#popregs_
163a0                 | _do_pintoggle_ret
163a0     2D 00 64 FD | 	ret
163a4                 | 
163a4                 | ' 
163a4                 | ' '-------------------- pinwrite
163a4                 | ' 
163a4                 | ' sub do_pinwrite
163a4                 | _do_pinwrite
163a4     01 4A 05 F6 | 	mov	COUNT_, #1
163a8     A8 00 A0 FD | 	call	#pushregs_
163ac     18 F0 07 F1 | 	add	ptra, #24
163b0     D8 67 BF FD | 	call	#_pop
163b4     FD 14 02 F6 | 	mov	arg02, result1
163b8     FE 12 02 F6 | 	mov	arg01, result2
163bc     FF 26 02 F6 | 	mov	local01, result3
163c0     A7 14 62 FC | 	wrlong	arg02, fp
163c4     04 4E 05 F1 | 	add	fp, #4
163c8     A7 12 62 FC | 	wrlong	arg01, fp
163cc     04 4E 05 F1 | 	add	fp, #4
163d0     A7 26 62 FC | 	wrlong	local01, fp
163d4     08 4E 85 F1 | 	sub	fp, #8
163d8     B0 67 BF FD | 	call	#_pop
163dc     FF 26 02 F6 | 	mov	local01, result3
163e0     0C 4E 05 F1 | 	add	fp, #12
163e4     A7 FA 61 FC | 	wrlong	result1, fp
163e8     04 4E 05 F1 | 	add	fp, #4
163ec     A7 FC 61 FC | 	wrlong	result2, fp
163f0     04 4E 05 F1 | 	add	fp, #4
163f4     A7 26 62 FC | 	wrlong	local01, fp
163f8     08 4E 85 F1 | 	sub	fp, #8
163fc     A7 12 02 F6 | 	mov	arg01, fp
16400     0C 4E 85 F1 | 	sub	fp, #12
16404     68 69 BF FD | 	call	#_converttoint
16408     FD 26 02 F6 | 	mov	local01, result1
1640c     A7 12 02 F6 | 	mov	arg01, fp
16410     5C 69 BF FD | 	call	#_converttoint
16414     FD 14 02 F6 | 	mov	arg02, result1
16418     13 13 02 F6 | 	mov	arg01, local01
1641c     08 EC B0 FD | 	call	#__system___pinwrite
16420     A7 F0 03 F6 | 	mov	ptra, fp
16424     B2 00 A0 FD | 	call	#popregs_
16428                 | _do_pinwrite_ret
16428     2D 00 64 FD | 	ret
1642c                 | 
1642c                 | ' 
1642c                 | ' '-------------------- play
1642c                 | ' 
1642c                 | ' sub do_play
1642c                 | _do_play
1642c     08 4A 05 F6 | 	mov	COUNT_, #8
16430     A8 00 A0 FD | 	call	#pushregs_
16434     7C F0 07 F1 | 	add	ptra, #124
16438     68 4E 05 F1 | 	add	fp, #104
1643c     77 CC A1 FF 
16440     A7 7C 6B FC | 	wrlong	##1134096318, fp
16444                 | ' speed_coeff=305.873
16444                 | ' 
16444                 | ' for i=0 to 8 : params(i)=-2.0 : next i
16444     64 4E 85 F1 | 	sub	fp, #100
16448     A7 00 68 FC | 	wrlong	#0, fp
1644c     97 18 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
16450                 | LR__1860
16450     A7 16 02 FB | 	rdlong	arg03, fp
16454     02 16 66 F0 | 	shl	arg03, #2
16458     34 4E 05 F1 | 	add	fp, #52
1645c     A7 16 02 F1 | 	add	arg03, fp
16460     00 00 E0 FF 
16464     0B 01 68 FC | 	wrlong	##-1073741824, arg03
16468     34 4E 85 F1 | 	sub	fp, #52
1646c     A7 26 02 FB | 	rdlong	local01, fp
16470     01 26 06 F1 | 	add	local01, #1
16474     A7 26 62 FC | 	wrlong	local01, fp
16478     09 26 56 F2 | 	cmps	local01, #9 wc
1647c     D0 FF 9F CD |  if_b	jmp	#LR__1860
16480                 | LR__1861
16480     04 4E 85 F1 | 	sub	fp, #4
16484     4A 00 00 FF 
16488     80 E4 05 F1 | 	add	objptr, ##38016
1648c     F2 28 02 FB | 	rdlong	local02, objptr
16490     14 2B 02 F6 | 	mov	local03, local02
16494     01 2A 66 F0 | 	shl	local03, #1
16498     14 2B 02 F1 | 	add	local03, local02
1649c     02 2A 66 F0 | 	shl	local03, #2
164a0     03 00 00 FF 
164a4     04 E4 85 F1 | 	sub	objptr, ##1540
164a8     F2 2A 02 F1 | 	add	local03, objptr
164ac     15 2D 02 FB | 	rdlong	local04, local03
164b0     A7 2C 62 FC | 	wrlong	local04, fp
164b4                 | ' numpar=compiledline(lineptr_e).result.uresult
164b4                 | ' for i=numpar to 1 step -1 
164b4     04 4E 05 F1 | 	add	fp, #4
164b8     A7 2C 62 FC | 	wrlong	local04, fp
164bc     04 4E 85 F1 | 	sub	fp, #4
164c0     47 00 00 FF 
164c4     7C E4 85 F1 | 	sub	objptr, ##36476
164c8                 | LR__1862
164c8     C0 66 BF FD | 	call	#_pop
164cc     5C 4E 05 F1 | 	add	fp, #92
164d0     A7 FA 61 FC | 	wrlong	result1, fp
164d4     04 4E 05 F1 | 	add	fp, #4
164d8     A7 FC 61 FC | 	wrlong	result2, fp
164dc     04 4E 05 F1 | 	add	fp, #4
164e0     A7 FE 61 FC | 	wrlong	result3, fp
164e4     60 4E 85 F1 | 	sub	fp, #96
164e8     A7 2A 02 FB | 	rdlong	local03, fp
164ec     01 2A 86 F1 | 	sub	local03, #1
164f0     02 2A 66 F0 | 	shl	local03, #2
164f4     34 4E 05 F1 | 	add	fp, #52
164f8     A7 2A 02 F1 | 	add	local03, fp
164fc     24 4E 05 F1 | 	add	fp, #36
16500     A7 2E 02 F6 | 	mov	local05, fp
16504     17 13 02 F6 | 	mov	arg01, local05
16508     5C 4E 85 F1 | 	sub	fp, #92
1650c     1C 69 BF FD | 	call	#_converttofloat
16510     15 FB 61 FC | 	wrlong	result1, local03
16514     04 4E 05 F1 | 	add	fp, #4
16518     A7 26 02 FB | 	rdlong	local01, fp
1651c     01 26 86 F1 | 	sub	local01, #1
16520     A7 26 62 FC | 	wrlong	local01, fp
16524     04 4E 85 F1 | 	sub	fp, #4
16528     01 26 56 F2 | 	cmps	local01, #1 wc
1652c     98 FF 9F 3D |  if_ae	jmp	#LR__1862
16530                 | ' 
16530                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
16530     38 4E 05 F1 | 	add	fp, #56
16534     A7 12 02 FB | 	rdlong	arg01, fp
16538     38 4E 85 F1 | 	sub	fp, #56
1653c     00 14 06 F6 | 	mov	arg02, #0
16540     01 16 06 F6 | 	mov	arg03, #1
16544     D8 1B B1 FD | 	call	#__system___float_cmp
16548     00 FA 55 F2 | 	cmps	result1, #0 wc
1654c     0C 4E 05 C1 |  if_b	add	fp, #12
16550     A7 00 68 CC |  if_b	wrlong	#0, fp
16554     0C 4E 85 C1 |  if_b	sub	fp, #12
16558     2C 00 90 CD |  if_b	jmp	#LR__1863
1655c     38 4E 05 F1 | 	add	fp, #56
16560     A7 12 02 FB | 	rdlong	arg01, fp
16564     38 4E 85 F1 | 	sub	fp, #56
16568     01 14 06 F6 | 	mov	arg02, #1
1656c     44 1C B1 FD | 	call	#__system___float_tointeger
16570     FD 26 52 F6 | 	abs	local01, result1 wc
16574     07 26 06 F5 | 	and	local01, #7
16578     13 27 82 F6 | 	negc	local01, local01
1657c     0C 4E 05 F1 | 	add	fp, #12
16580     A7 26 62 FC | 	wrlong	local01, fp
16584     0C 4E 85 F1 | 	sub	fp, #12
16588                 | LR__1863
16588                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
16588     3C 4E 05 F1 | 	add	fp, #60
1658c     A7 12 02 FB | 	rdlong	arg01, fp
16590     3C 4E 85 F1 | 	sub	fp, #60
16594     00 14 06 F6 | 	mov	arg02, #0
16598     01 16 06 F6 | 	mov	arg03, #1
1659c     80 1B B1 FD | 	call	#__system___float_cmp
165a0     00 FA 55 F2 | 	cmps	result1, #0 wc
165a4     40 00 90 3D |  if_ae	jmp	#LR__1864
165a8     0C 4E 05 F1 | 	add	fp, #12
165ac     A7 28 02 FB | 	rdlong	local02, fp
165b0     14 2B 02 F6 | 	mov	local03, local02
165b4     01 2A 66 F0 | 	shl	local03, #1
165b8     14 2B 02 F1 | 	add	local03, local02
165bc     03 2A 66 F0 | 	shl	local03, #3
165c0     14 00 00 FF 
165c4     38 E5 05 F1 | 	add	objptr, ##10552
165c8     F2 2A 02 F1 | 	add	local03, objptr
165cc     15 31 02 FB | 	rdlong	local06, local03
165d0     60 4E 05 F1 | 	add	fp, #96
165d4     A7 30 62 FC | 	wrlong	local06, fp
165d8     6C 4E 85 F1 | 	sub	fp, #108
165dc     14 00 00 FF 
165e0     38 E5 85 F1 | 	sub	objptr, ##10552
165e4     44 00 90 FD | 	jmp	#LR__1865
165e8                 | LR__1864
165e8     3C 4E 05 F1 | 	add	fp, #60
165ec     A7 2C 02 FB | 	rdlong	local04, fp
165f0     30 4E 05 F1 | 	add	fp, #48
165f4     A7 2C 62 FC | 	wrlong	local04, fp
165f8     60 4E 85 F1 | 	sub	fp, #96
165fc     A7 28 02 FB | 	rdlong	local02, fp
16600     14 2B 02 F6 | 	mov	local03, local02
16604     01 2A 66 F0 | 	shl	local03, #1
16608     14 2B 02 F1 | 	add	local03, local02
1660c     03 2A 66 F0 | 	shl	local03, #3
16610     14 00 00 FF 
16614     38 E5 05 F1 | 	add	objptr, ##10552
16618     F2 2A 02 F1 | 	add	local03, objptr
1661c     0C 4E 85 F1 | 	sub	fp, #12
16620     15 2D 62 FC | 	wrlong	local04, local03
16624     14 00 00 FF 
16628     38 E5 85 F1 | 	sub	objptr, ##10552
1662c                 | LR__1865
1662c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
1662c     40 4E 05 F1 | 	add	fp, #64
16630     A7 12 02 FB | 	rdlong	arg01, fp
16634     40 4E 85 F1 | 	sub	fp, #64
16638     00 14 06 F6 | 	mov	arg02, #0
1663c     01 16 06 F6 | 	mov	arg03, #1
16640     DC 1A B1 FD | 	call	#__system___float_cmp
16644     00 FA 55 F2 | 	cmps	result1, #0 wc
16648     24 00 90 CD |  if_b	jmp	#LR__1866
1664c     40 4E 05 F1 | 	add	fp, #64
16650     A7 12 02 FB | 	rdlong	arg01, fp
16654     40 4E 85 F1 | 	sub	fp, #64
16658     20 0E 23 FF 
1665c     00 14 06 F6 | 	mov	arg02, ##1176256512
16660     01 16 66 F6 | 	neg	arg03, #1
16664     B8 1A B1 FD | 	call	#__system___float_cmp
16668     01 FA 55 F2 | 	cmps	result1, #1 wc
1666c     48 00 90 CD |  if_b	jmp	#LR__1867
16670                 | LR__1866
16670     0C 4E 05 F1 | 	add	fp, #12
16674     A7 2A 02 FB | 	rdlong	local03, fp
16678     15 33 02 F6 | 	mov	local07, local03
1667c     01 32 66 F0 | 	shl	local07, #1
16680     15 33 02 F1 | 	add	local07, local03
16684     03 32 66 F0 | 	shl	local07, #3
16688     14 00 00 FF 
1668c     38 E5 05 F1 | 	add	objptr, ##10552
16690     F2 32 02 F1 | 	add	local07, objptr
16694     06 32 06 F1 | 	add	local07, #6
16698     19 2F E2 FA | 	rdword	local05, local07
1669c     17 2D 32 F9 | 	getword	local04, local05, #0
166a0     1C 4E 05 F1 | 	add	fp, #28
166a4     A7 2C 62 FC | 	wrlong	local04, fp
166a8     28 4E 85 F1 | 	sub	fp, #40
166ac     14 00 00 FF 
166b0     38 E5 85 F1 | 	sub	objptr, ##10552
166b4     54 00 90 FD | 	jmp	#LR__1868
166b8                 | LR__1867
166b8     40 4E 05 F1 | 	add	fp, #64
166bc     A7 12 02 FB | 	rdlong	arg01, fp
166c0     40 4E 85 F1 | 	sub	fp, #64
166c4     01 14 06 F6 | 	mov	arg02, #1
166c8     E8 1A B1 FD | 	call	#__system___float_tointeger
166cc     28 4E 05 F1 | 	add	fp, #40
166d0     A7 FA 61 FC | 	wrlong	result1, fp
166d4     1C 4E 85 F1 | 	sub	fp, #28
166d8     A7 28 02 FB | 	rdlong	local02, fp
166dc     14 2B 02 F6 | 	mov	local03, local02
166e0     01 2A 66 F0 | 	shl	local03, #1
166e4     14 2B 02 F1 | 	add	local03, local02
166e8     03 2A 66 F0 | 	shl	local03, #3
166ec     14 00 00 FF 
166f0     38 E5 05 F1 | 	add	objptr, ##10552
166f4     F2 2A 02 F1 | 	add	local03, objptr
166f8     0C 4E 85 F1 | 	sub	fp, #12
166fc     06 2A 06 F1 | 	add	local03, #6
16700     15 FB 51 FC | 	wrword	result1, local03
16704     14 00 00 FF 
16708     38 E5 85 F1 | 	sub	objptr, ##10552
1670c                 | LR__1868
1670c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
1670c     44 4E 05 F1 | 	add	fp, #68
16710     A7 12 02 FB | 	rdlong	arg01, fp
16714     44 4E 85 F1 | 	sub	fp, #68
16718     00 14 06 F6 | 	mov	arg02, #0
1671c     01 16 06 F6 | 	mov	arg03, #1
16720     FC 19 B1 FD | 	call	#__system___float_cmp
16724     00 FA 55 F2 | 	cmps	result1, #0 wc
16728     24 00 90 CD |  if_b	jmp	#LR__1869
1672c     44 4E 05 F1 | 	add	fp, #68
16730     A7 12 02 FB | 	rdlong	arg01, fp
16734     44 4E 85 F1 | 	sub	fp, #68
16738     89 C1 20 FF 
1673c     6F 14 06 F6 | 	mov	arg02, ##1099108975
16740     01 16 66 F6 | 	neg	arg03, #1
16744     D8 19 B1 FD | 	call	#__system___float_cmp
16748     01 FA 55 F2 | 	cmps	result1, #1 wc
1674c     44 00 90 CD |  if_b	jmp	#LR__1870
16750                 | LR__1869
16750     0C 4E 05 F1 | 	add	fp, #12
16754     A7 28 02 FB | 	rdlong	local02, fp
16758     14 2B 02 F6 | 	mov	local03, local02
1675c     01 2A 66 F0 | 	shl	local03, #1
16760     14 2B 02 F1 | 	add	local03, local02
16764     03 2A 66 F0 | 	shl	local03, #3
16768     14 00 00 FF 
1676c     38 E5 05 F1 | 	add	objptr, ##10552
16770     F2 2A 02 F1 | 	add	local03, objptr
16774     0C 2A 06 F1 | 	add	local03, #12
16778     15 31 02 FB | 	rdlong	local06, local03
1677c     68 4E 05 F1 | 	add	fp, #104
16780     A7 30 62 FC | 	wrlong	local06, fp
16784     74 4E 85 F1 | 	sub	fp, #116
16788     14 00 00 FF 
1678c     38 E5 85 F1 | 	sub	objptr, ##10552
16790     48 00 90 FD | 	jmp	#LR__1871
16794                 | LR__1870
16794     44 4E 05 F1 | 	add	fp, #68
16798     A7 2C 02 FB | 	rdlong	local04, fp
1679c     30 4E 05 F1 | 	add	fp, #48
167a0     A7 2C 62 FC | 	wrlong	local04, fp
167a4     68 4E 85 F1 | 	sub	fp, #104
167a8     A7 28 02 FB | 	rdlong	local02, fp
167ac     14 2B 02 F6 | 	mov	local03, local02
167b0     01 2A 66 F0 | 	shl	local03, #1
167b4     14 2B 02 F1 | 	add	local03, local02
167b8     03 2A 66 F0 | 	shl	local03, #3
167bc     14 00 00 FF 
167c0     38 E5 05 F1 | 	add	objptr, ##10552
167c4     F2 2A 02 F1 | 	add	local03, objptr
167c8     0C 4E 85 F1 | 	sub	fp, #12
167cc     0C 2A 06 F1 | 	add	local03, #12
167d0     15 2D 62 FC | 	wrlong	local04, local03
167d4     14 00 00 FF 
167d8     38 E5 85 F1 | 	sub	objptr, ##10552
167dc                 | LR__1871
167dc                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
167dc     48 4E 05 F1 | 	add	fp, #72
167e0     A7 12 02 FB | 	rdlong	arg01, fp
167e4     48 4E 85 F1 | 	sub	fp, #72
167e8     00 14 06 F6 | 	mov	arg02, #0
167ec     01 16 06 F6 | 	mov	arg03, #1
167f0     2C 19 B1 FD | 	call	#__system___float_cmp
167f4     00 FA 55 F2 | 	cmps	result1, #0 wc
167f8     24 00 90 CD |  if_b	jmp	#LR__1872
167fc     48 4E 05 F1 | 	add	fp, #72
16800     A7 12 02 FB | 	rdlong	arg01, fp
16804     48 4E 85 F1 | 	sub	fp, #72
16808     00 00 21 FF 
1680c     00 14 06 F6 | 	mov	arg02, ##1107296256
16810     01 16 66 F6 | 	neg	arg03, #1
16814     08 19 B1 FD | 	call	#__system___float_cmp
16818     01 FA 55 F2 | 	cmps	result1, #1 wc
1681c     48 00 90 CD |  if_b	jmp	#LR__1873
16820                 | LR__1872
16820     0C 4E 05 F1 | 	add	fp, #12
16824     A7 2A 02 FB | 	rdlong	local03, fp
16828     15 33 02 F6 | 	mov	local07, local03
1682c     01 32 66 F0 | 	shl	local07, #1
16830     15 33 02 F1 | 	add	local07, local03
16834     03 32 66 F0 | 	shl	local07, #3
16838     14 00 00 FF 
1683c     38 E5 05 F1 | 	add	objptr, ##10552
16840     F2 32 02 F1 | 	add	local07, objptr
16844     04 32 06 F1 | 	add	local07, #4
16848     19 2F C2 FA | 	rdbyte	local05, local07
1684c     17 2D E2 F8 | 	getbyte	local04, local05, #0
16850     14 4E 05 F1 | 	add	fp, #20
16854     A7 2C 62 FC | 	wrlong	local04, fp
16858     20 4E 85 F1 | 	sub	fp, #32
1685c     14 00 00 FF 
16860     38 E5 85 F1 | 	sub	objptr, ##10552
16864     54 00 90 FD | 	jmp	#LR__1874
16868                 | LR__1873
16868     48 4E 05 F1 | 	add	fp, #72
1686c     A7 12 02 FB | 	rdlong	arg01, fp
16870     48 4E 85 F1 | 	sub	fp, #72
16874     01 14 06 F6 | 	mov	arg02, #1
16878     38 19 B1 FD | 	call	#__system___float_tointeger
1687c     20 4E 05 F1 | 	add	fp, #32
16880     A7 FA 61 FC | 	wrlong	result1, fp
16884     14 4E 85 F1 | 	sub	fp, #20
16888     A7 28 02 FB | 	rdlong	local02, fp
1688c     14 2B 02 F6 | 	mov	local03, local02
16890     01 2A 66 F0 | 	shl	local03, #1
16894     14 2B 02 F1 | 	add	local03, local02
16898     03 2A 66 F0 | 	shl	local03, #3
1689c     14 00 00 FF 
168a0     38 E5 05 F1 | 	add	objptr, ##10552
168a4     F2 2A 02 F1 | 	add	local03, objptr
168a8     0C 4E 85 F1 | 	sub	fp, #12
168ac     04 2A 06 F1 | 	add	local03, #4
168b0     15 FB 41 FC | 	wrbyte	result1, local03
168b4     14 00 00 FF 
168b8     38 E5 85 F1 | 	sub	objptr, ##10552
168bc                 | LR__1874
168bc                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
168bc     4C 4E 05 F1 | 	add	fp, #76
168c0     A7 12 02 FB | 	rdlong	arg01, fp
168c4     4C 4E 85 F1 | 	sub	fp, #76
168c8     00 14 06 F6 | 	mov	arg02, #0
168cc     01 16 06 F6 | 	mov	arg03, #1
168d0     4C 18 B1 FD | 	call	#__system___float_cmp
168d4     00 FA 55 F2 | 	cmps	result1, #0 wc
168d8     24 00 90 CD |  if_b	jmp	#LR__1875
168dc     4C 4E 05 F1 | 	add	fp, #76
168e0     A7 12 02 FB | 	rdlong	arg01, fp
168e4     4C 4E 85 F1 | 	sub	fp, #76
168e8     00 80 20 FF 
168ec     00 14 06 F6 | 	mov	arg02, ##1090519040
168f0     01 16 66 F6 | 	neg	arg03, #1
168f4     28 18 B1 FD | 	call	#__system___float_cmp
168f8     01 FA 55 F2 | 	cmps	result1, #1 wc
168fc     48 00 90 CD |  if_b	jmp	#LR__1876
16900                 | LR__1875
16900     0C 4E 05 F1 | 	add	fp, #12
16904     A7 2A 02 FB | 	rdlong	local03, fp
16908     15 33 02 F6 | 	mov	local07, local03
1690c     01 32 66 F0 | 	shl	local07, #1
16910     15 33 02 F1 | 	add	local07, local03
16914     03 32 66 F0 | 	shl	local07, #3
16918     14 00 00 FF 
1691c     38 E5 05 F1 | 	add	objptr, ##10552
16920     F2 32 02 F1 | 	add	local07, objptr
16924     05 32 06 F1 | 	add	local07, #5
16928     19 2F C2 FA | 	rdbyte	local05, local07
1692c     17 2D E2 F8 | 	getbyte	local04, local05, #0
16930     18 4E 05 F1 | 	add	fp, #24
16934     A7 2C 62 FC | 	wrlong	local04, fp
16938     24 4E 85 F1 | 	sub	fp, #36
1693c     14 00 00 FF 
16940     38 E5 85 F1 | 	sub	objptr, ##10552
16944     54 00 90 FD | 	jmp	#LR__1877
16948                 | LR__1876
16948     4C 4E 05 F1 | 	add	fp, #76
1694c     A7 12 02 FB | 	rdlong	arg01, fp
16950     4C 4E 85 F1 | 	sub	fp, #76
16954     01 14 06 F6 | 	mov	arg02, #1
16958     58 18 B1 FD | 	call	#__system___float_tointeger
1695c     24 4E 05 F1 | 	add	fp, #36
16960     A7 FA 61 FC | 	wrlong	result1, fp
16964     18 4E 85 F1 | 	sub	fp, #24
16968     A7 28 02 FB | 	rdlong	local02, fp
1696c     14 2B 02 F6 | 	mov	local03, local02
16970     01 2A 66 F0 | 	shl	local03, #1
16974     14 2B 02 F1 | 	add	local03, local02
16978     03 2A 66 F0 | 	shl	local03, #3
1697c     14 00 00 FF 
16980     38 E5 05 F1 | 	add	objptr, ##10552
16984     F2 2A 02 F1 | 	add	local03, objptr
16988     0C 4E 85 F1 | 	sub	fp, #12
1698c     05 2A 06 F1 | 	add	local03, #5
16990     15 FB 41 FC | 	wrbyte	result1, local03
16994     14 00 00 FF 
16998     38 E5 85 F1 | 	sub	objptr, ##10552
1699c                 | LR__1877
1699c                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
1699c     50 4E 05 F1 | 	add	fp, #80
169a0     A7 12 02 FB | 	rdlong	arg01, fp
169a4     50 4E 85 F1 | 	sub	fp, #80
169a8     00 14 06 F6 | 	mov	arg02, #0
169ac     01 16 06 F6 | 	mov	arg03, #1
169b0     6C 17 B1 FD | 	call	#__system___float_cmp
169b4     00 FA 55 F2 | 	cmps	result1, #0 wc
169b8     24 00 90 CD |  if_b	jmp	#LR__1878
169bc     50 4E 05 F1 | 	add	fp, #80
169c0     A7 12 02 FB | 	rdlong	arg01, fp
169c4     50 4E 85 F1 | 	sub	fp, #80
169c8     00 3D 22 FF 
169cc     00 14 06 F6 | 	mov	arg02, ##1148846080
169d0     01 16 66 F6 | 	neg	arg03, #1
169d4     48 17 B1 FD | 	call	#__system___float_cmp
169d8     01 FA 55 F2 | 	cmps	result1, #1 wc
169dc     44 00 90 CD |  if_b	jmp	#LR__1879
169e0                 | LR__1878
169e0     0C 4E 05 F1 | 	add	fp, #12
169e4     A7 28 02 FB | 	rdlong	local02, fp
169e8     14 2B 02 F6 | 	mov	local03, local02
169ec     01 2A 66 F0 | 	shl	local03, #1
169f0     14 2B 02 F1 | 	add	local03, local02
169f4     03 2A 66 F0 | 	shl	local03, #3
169f8     14 00 00 FF 
169fc     38 E5 05 F1 | 	add	objptr, ##10552
16a00     F2 2A 02 F1 | 	add	local03, objptr
16a04     08 2A 06 F1 | 	add	local03, #8
16a08     15 31 02 FB | 	rdlong	local06, local03
16a0c     6C 4E 05 F1 | 	add	fp, #108
16a10     A7 30 62 FC | 	wrlong	local06, fp
16a14     78 4E 85 F1 | 	sub	fp, #120
16a18     14 00 00 FF 
16a1c     38 E5 85 F1 | 	sub	objptr, ##10552
16a20     48 00 90 FD | 	jmp	#LR__1880
16a24                 | LR__1879
16a24     50 4E 05 F1 | 	add	fp, #80
16a28     A7 30 02 FB | 	rdlong	local06, fp
16a2c     28 4E 05 F1 | 	add	fp, #40
16a30     A7 30 62 FC | 	wrlong	local06, fp
16a34     6C 4E 85 F1 | 	sub	fp, #108
16a38     A7 28 02 FB | 	rdlong	local02, fp
16a3c     14 2B 02 F6 | 	mov	local03, local02
16a40     01 2A 66 F0 | 	shl	local03, #1
16a44     14 2B 02 F1 | 	add	local03, local02
16a48     03 2A 66 F0 | 	shl	local03, #3
16a4c     14 00 00 FF 
16a50     38 E5 05 F1 | 	add	objptr, ##10552
16a54     F2 2A 02 F1 | 	add	local03, objptr
16a58     0C 4E 85 F1 | 	sub	fp, #12
16a5c     08 2A 06 F1 | 	add	local03, #8
16a60     15 31 62 FC | 	wrlong	local06, local03
16a64     14 00 00 FF 
16a68     38 E5 85 F1 | 	sub	objptr, ##10552
16a6c                 | LR__1880
16a6c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
16a6c     54 4E 05 F1 | 	add	fp, #84
16a70     A7 12 02 FB | 	rdlong	arg01, fp
16a74     54 4E 85 F1 | 	sub	fp, #84
16a78     00 C0 5F FF 
16a7c     00 14 06 F6 | 	mov	arg02, ##-1082130432
16a80     01 16 06 F6 | 	mov	arg03, #1
16a84     98 16 B1 FD | 	call	#__system___float_cmp
16a88     00 FA 55 F2 | 	cmps	result1, #0 wc
16a8c     24 00 90 CD |  if_b	jmp	#LR__1881
16a90     54 4E 05 F1 | 	add	fp, #84
16a94     A7 12 02 FB | 	rdlong	arg01, fp
16a98     54 4E 85 F1 | 	sub	fp, #84
16a9c     00 C0 1F FF 
16aa0     00 14 06 F6 | 	mov	arg02, ##1065353216
16aa4     01 16 66 F6 | 	neg	arg03, #1
16aa8     74 16 B1 FD | 	call	#__system___float_cmp
16aac     01 FA 55 F2 | 	cmps	result1, #1 wc
16ab0     44 00 90 CD |  if_b	jmp	#LR__1882
16ab4                 | LR__1881
16ab4     0C 4E 05 F1 | 	add	fp, #12
16ab8     A7 28 02 FB | 	rdlong	local02, fp
16abc     14 2B 02 F6 | 	mov	local03, local02
16ac0     01 2A 66 F0 | 	shl	local03, #1
16ac4     14 2B 02 F1 | 	add	local03, local02
16ac8     03 2A 66 F0 | 	shl	local03, #3
16acc     14 00 00 FF 
16ad0     38 E5 05 F1 | 	add	objptr, ##10552
16ad4     F2 2A 02 F1 | 	add	local03, objptr
16ad8     10 2A 06 F1 | 	add	local03, #16
16adc     15 31 02 FB | 	rdlong	local06, local03
16ae0     64 4E 05 F1 | 	add	fp, #100
16ae4     A7 30 62 FC | 	wrlong	local06, fp
16ae8     70 4E 85 F1 | 	sub	fp, #112
16aec     14 00 00 FF 
16af0     38 E5 85 F1 | 	sub	objptr, ##10552
16af4     48 00 90 FD | 	jmp	#LR__1883
16af8                 | LR__1882
16af8     54 4E 05 F1 | 	add	fp, #84
16afc     A7 30 02 FB | 	rdlong	local06, fp
16b00     1C 4E 05 F1 | 	add	fp, #28
16b04     A7 30 62 FC | 	wrlong	local06, fp
16b08     64 4E 85 F1 | 	sub	fp, #100
16b0c     A7 28 02 FB | 	rdlong	local02, fp
16b10     14 2B 02 F6 | 	mov	local03, local02
16b14     01 2A 66 F0 | 	shl	local03, #1
16b18     14 2B 02 F1 | 	add	local03, local02
16b1c     03 2A 66 F0 | 	shl	local03, #3
16b20     14 00 00 FF 
16b24     38 E5 05 F1 | 	add	objptr, ##10552
16b28     F2 2A 02 F1 | 	add	local03, objptr
16b2c     0C 4E 85 F1 | 	sub	fp, #12
16b30     10 2A 06 F1 | 	add	local03, #16
16b34     15 31 62 FC | 	wrlong	local06, local03
16b38     14 00 00 FF 
16b3c     38 E5 85 F1 | 	sub	objptr, ##10552
16b40                 | LR__1883
16b40                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
16b40     58 4E 05 F1 | 	add	fp, #88
16b44     A7 12 02 FB | 	rdlong	arg01, fp
16b48     58 4E 85 F1 | 	sub	fp, #88
16b4c     00 14 06 F6 | 	mov	arg02, #0
16b50     01 16 06 F6 | 	mov	arg03, #1
16b54     C8 15 B1 FD | 	call	#__system___float_cmp
16b58     00 FA 55 F2 | 	cmps	result1, #0 wc
16b5c     24 00 90 CD |  if_b	jmp	#LR__1884
16b60     58 4E 05 F1 | 	add	fp, #88
16b64     A7 12 02 FB | 	rdlong	arg01, fp
16b68     58 4E 85 F1 | 	sub	fp, #88
16b6c     80 BF 21 FF 
16b70     00 14 06 F6 | 	mov	arg02, ##1132396544
16b74     01 16 66 F6 | 	neg	arg03, #1
16b78     A4 15 B1 FD | 	call	#__system___float_cmp
16b7c     01 FA 55 F2 | 	cmps	result1, #1 wc
16b80     44 00 90 CD |  if_b	jmp	#LR__1885
16b84                 | LR__1884
16b84     0C 4E 05 F1 | 	add	fp, #12
16b88     A7 2A 02 FB | 	rdlong	local03, fp
16b8c     15 33 02 F6 | 	mov	local07, local03
16b90     01 32 66 F0 | 	shl	local07, #1
16b94     15 33 02 F1 | 	add	local07, local03
16b98     03 32 66 F0 | 	shl	local07, #3
16b9c     14 00 00 FF 
16ba0     38 E5 05 F1 | 	add	objptr, ##10552
16ba4     F2 32 02 F1 | 	add	local07, objptr
16ba8     14 32 06 F1 | 	add	local07, #20
16bac     19 2D E2 FA | 	rdword	local04, local07
16bb0     20 4E 05 F1 | 	add	fp, #32
16bb4     A7 2C 62 FC | 	wrlong	local04, fp
16bb8     2C 4E 85 F1 | 	sub	fp, #44
16bbc     14 00 00 FF 
16bc0     38 E5 85 F1 | 	sub	objptr, ##10552
16bc4     54 00 90 FD | 	jmp	#LR__1886
16bc8                 | LR__1885
16bc8     58 4E 05 F1 | 	add	fp, #88
16bcc     A7 12 02 FB | 	rdlong	arg01, fp
16bd0     58 4E 85 F1 | 	sub	fp, #88
16bd4     01 14 06 F6 | 	mov	arg02, #1
16bd8     D8 15 B1 FD | 	call	#__system___float_tointeger
16bdc     2C 4E 05 F1 | 	add	fp, #44
16be0     A7 FA 61 FC | 	wrlong	result1, fp
16be4     20 4E 85 F1 | 	sub	fp, #32
16be8     A7 28 02 FB | 	rdlong	local02, fp
16bec     14 2B 02 F6 | 	mov	local03, local02
16bf0     01 2A 66 F0 | 	shl	local03, #1
16bf4     14 2B 02 F1 | 	add	local03, local02
16bf8     03 2A 66 F0 | 	shl	local03, #3
16bfc     14 00 00 FF 
16c00     38 E5 05 F1 | 	add	objptr, ##10552
16c04     F2 2A 02 F1 | 	add	local03, objptr
16c08     0C 4E 85 F1 | 	sub	fp, #12
16c0c     14 2A 06 F1 | 	add	local03, #20
16c10     15 FB 51 FC | 	wrword	result1, local03
16c14     14 00 00 FF 
16c18     38 E5 85 F1 | 	sub	objptr, ##10552
16c1c                 | LR__1886
16c1c     6C 4E 05 F1 | 	add	fp, #108
16c20     A7 14 02 FB | 	rdlong	arg02, fp
16c24     6C 4E 85 F1 | 	sub	fp, #108
16c28     FC 16 20 FF 
16c2c     54 12 06 F6 | 	mov	arg01, ##1076754516
16c30     88 20 B1 FD | 	call	#__system____builtin_logbase
16c34     FD 2C 02 F6 | 	mov	local04, result1
16c38     1E 14 C6 F9 | 	decod	arg02, #30
16c3c     FC 16 20 FF 
16c40     54 12 06 F6 | 	mov	arg01, ##1076754516
16c44     74 20 B1 FD | 	call	#__system____builtin_logbase
16c48     FD 14 02 F6 | 	mov	arg02, result1
16c4c     16 13 02 F6 | 	mov	arg01, local04
16c50     9C 12 B1 FD | 	call	#__system___float_div
16c54     FD 12 02 F6 | 	mov	arg01, result1
16c58     00 14 06 F6 | 	mov	arg02, #0
16c5c     54 15 B1 FD | 	call	#__system___float_tointeger
16c60     30 4E 05 F1 | 	add	fp, #48
16c64     A7 FA 61 FC | 	wrlong	result1, fp
16c68     1E 2C C6 F9 | 	decod	local04, #30
16c6c     FD 12 02 F6 | 	mov	arg01, result1
16c70     30 4E 85 F1 | 	sub	fp, #48
16c74     05 12 06 F1 | 	add	arg01, #5
16c78     09 13 52 F6 | 	abs	arg01, arg01 wc
16c7c     1F 34 C6 C9 |  if_b	decod	local08, #31
16c80     00 34 06 36 |  if_ae	mov	local08, #0
16c84     60 0C B1 FD | 	call	#__system___float_fromuns
16c88     1A FB 61 F5 | 	xor	result1, local08
16c8c     FD 14 02 F6 | 	mov	arg02, result1
16c90     16 13 02 F6 | 	mov	arg01, local04
16c94     5C 1F B1 FD | 	call	#__system____builtin_powf
16c98     FD 12 02 F6 | 	mov	arg01, result1
16c9c     01 14 06 F6 | 	mov	arg02, #1
16ca0     10 15 B1 FD | 	call	#__system___float_tointeger
16ca4     10 4E 05 F1 | 	add	fp, #16
16ca8     A7 FA 61 FC | 	wrlong	result1, fp
16cac                 | ' skip=round(2^(lfreq+5))
16cac                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
16cac     10 4E 85 F1 | 	sub	fp, #16
16cb0     40 00 00 FF 
16cb4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
16cb8     30 00 90 CD |  if_b	jmp	#LR__1887
16cbc     10 4E 05 F1 | 	add	fp, #16
16cc0     A7 26 02 FB | 	rdlong	local01, fp
16cc4     13 2D 52 F6 | 	abs	local04, local01 wc
16cc8     0F 2C 46 F0 | 	shr	local04, #15
16ccc     16 2D 82 F6 | 	negc	local04, local04
16cd0     0C 4E 85 F1 | 	sub	fp, #12
16cd4     A7 2C 62 FC | 	wrlong	local04, fp
16cd8     0C 4E 05 F1 | 	add	fp, #12
16cdc     40 00 80 FF 
16ce0     A7 00 68 FC | 	wrlong	##32768, fp
16ce4     10 4E 85 F1 | 	sub	fp, #16
16ce8     0C 00 90 FD | 	jmp	#LR__1888
16cec                 | LR__1887
16cec     04 4E 05 F1 | 	add	fp, #4
16cf0     A7 02 68 FC | 	wrlong	#1, fp
16cf4     04 4E 85 F1 | 	sub	fp, #4
16cf8                 | LR__1888
16cf8     6C 4E 05 F1 | 	add	fp, #108
16cfc     A7 14 02 FB | 	rdlong	arg02, fp
16d00     6C 4E 85 F1 | 	sub	fp, #108
16d04     3E 2C 25 FF 
16d08     3C 12 06 F6 | 	mov	arg01, ##1247312956
16d0c     E0 11 B1 FD | 	call	#__system___float_div
16d10     FD 2C 02 F6 | 	mov	local04, result1
16d14     04 4E 05 F1 | 	add	fp, #4
16d18     A7 12 02 FB | 	rdlong	arg01, fp
16d1c     04 4E 85 F1 | 	sub	fp, #4
16d20     09 13 52 F6 | 	abs	arg01, arg01 wc
16d24     1F 34 C6 C9 |  if_b	decod	local08, #31
16d28     00 34 06 36 |  if_ae	mov	local08, #0
16d2c     B8 0B B1 FD | 	call	#__system___float_fromuns
16d30     1A FB 61 F5 | 	xor	result1, local08
16d34     FD 26 02 F6 | 	mov	local01, result1
16d38     1E 28 C6 F9 | 	decod	local02, #30
16d3c     0D 12 06 F6 | 	mov	arg01, #13
16d40     30 4E 05 F1 | 	add	fp, #48
16d44     A7 30 02 FB | 	rdlong	local06, fp
16d48     30 4E 85 F1 | 	sub	fp, #48
16d4c     18 13 82 F1 | 	sub	arg01, local06
16d50     09 13 52 F6 | 	abs	arg01, arg01 wc
16d54     1F 34 C6 C9 |  if_b	decod	local08, #31
16d58     00 34 06 36 |  if_ae	mov	local08, #0
16d5c     88 0B B1 FD | 	call	#__system___float_fromuns
16d60     1A FB 61 F5 | 	xor	result1, local08
16d64     FD 14 02 F6 | 	mov	arg02, result1
16d68     14 13 02 F6 | 	mov	arg01, local02
16d6c     84 1E B1 FD | 	call	#__system____builtin_powf
16d70     FD 14 02 F6 | 	mov	arg02, result1
16d74     13 13 02 F6 | 	mov	arg01, local01
16d78     70 0F B1 FD | 	call	#__system___float_mul
16d7c     FD 14 02 F6 | 	mov	arg02, result1
16d80     16 13 02 F6 | 	mov	arg01, local04
16d84     68 11 B1 FD | 	call	#__system___float_div
16d88     FD 12 02 F6 | 	mov	arg01, result1
16d8c     01 14 06 F6 | 	mov	arg02, #1
16d90     20 14 B1 FD | 	call	#__system___float_tointeger
16d94     34 4E 05 F1 | 	add	fp, #52
16d98     A7 FA 61 FC | 	wrlong	result1, fp
16d9c     34 4E 05 F1 | 	add	fp, #52
16da0     A7 12 02 FB | 	rdlong	arg01, fp
16da4     10 4E 05 F1 | 	add	fp, #16
16da8     A7 14 02 FB | 	rdlong	arg02, fp
16dac     78 4E 85 F1 | 	sub	fp, #120
16db0     3C 11 B1 FD | 	call	#__system___float_div
16db4     FD 12 02 F6 | 	mov	arg01, result1
16db8     01 14 06 F6 | 	mov	arg02, #1
16dbc     F4 13 B1 FD | 	call	#__system___float_tointeger
16dc0     FD 2C 02 F6 | 	mov	local04, result1
16dc4     14 4E 05 F1 | 	add	fp, #20
16dc8     A7 2C 62 FC | 	wrlong	local04, fp
16dcc     5C 4E 05 F1 | 	add	fp, #92
16dd0     A7 14 02 FB | 	rdlong	arg02, fp
16dd4     70 4E 85 F1 | 	sub	fp, #112
16dd8     00 00 23 FF 
16ddc     00 12 06 F6 | 	mov	arg01, ##1174405120
16de0     08 0F B1 FD | 	call	#__system___float_mul
16de4     FD 12 02 F6 | 	mov	arg01, result1
16de8     01 14 06 F6 | 	mov	arg02, #1
16dec     C4 13 B1 FD | 	call	#__system___float_tointeger
16df0     0D 2C C6 F9 | 	decod	local04, #13
16df4     FD 2C 02 F1 | 	add	local04, result1
16df8     18 4E 05 F1 | 	add	fp, #24
16dfc     A7 2C 62 FC | 	wrlong	local04, fp
16e00     5C 4E 05 F1 | 	add	fp, #92
16e04     A7 14 02 FB | 	rdlong	arg02, fp
16e08     74 4E 85 F1 | 	sub	fp, #116
16e0c     00 3D 22 FF 
16e10     00 12 06 F6 | 	mov	arg01, ##1148846080
16e14     D4 0E B1 FD | 	call	#__system___float_mul
16e18     FD 12 02 F6 | 	mov	arg01, result1
16e1c     01 14 06 F6 | 	mov	arg02, #1
16e20     90 13 B1 FD | 	call	#__system___float_tointeger
16e24     1C 4E 05 F1 | 	add	fp, #28
16e28     A7 FA 61 FC | 	wrlong	result1, fp
16e2c     37 00 00 FF 
16e30     10 E4 05 F1 | 	add	objptr, ##28176
16e34     F2 2C 02 FB | 	rdlong	local04, objptr
16e38     37 00 00 FF 
16e3c     10 E4 85 F1 | 	sub	objptr, ##28176
16e40     10 4E 85 F1 | 	sub	fp, #16
16e44     A7 28 02 FB | 	rdlong	local02, fp
16e48     06 28 66 F0 | 	shl	local02, #6
16e4c     14 2D 02 F1 | 	add	local04, local02
16e50     04 4E 85 F1 | 	sub	fp, #4
16e54     A7 2C 62 FC | 	wrlong	local04, fp
16e58                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
16e58                 | ' speed=round(speed_coeff/slen)
16e58                 | ' ipan=8192+round(8192*pan)
16e58                 | ' ivol=round(1000.0*vol)
16e58                 | ' base2=base+64*channel
16e58                 | ' if wave <32 then 
16e58     18 4E 05 F1 | 	add	fp, #24
16e5c     A7 2C 02 FB | 	rdlong	local04, fp
16e60     20 4E 85 F1 | 	sub	fp, #32
16e64     20 2C 56 F2 | 	cmps	local04, #32 wc
16e68     2C 00 90 3D |  if_ae	jmp	#LR__1889
16e6c     08 4E 05 F1 | 	add	fp, #8
16e70     A7 12 02 FB | 	rdlong	arg01, fp
16e74     08 12 06 F1 | 	add	arg01, #8
16e78     18 4E 05 F1 | 	add	fp, #24
16e7c     A7 14 02 FB | 	rdlong	arg02, fp
16e80     20 4E 85 F1 | 	sub	fp, #32
16e84     0B 14 66 F0 | 	shl	arg02, #11
16e88     00 00 60 FF 
16e8c     00 14 06 F1 | 	add	arg02, ##-1073741824
16e90     09 15 62 FC | 	wrlong	arg02, arg01
16e94     18 00 90 FD | 	jmp	#LR__1890
16e98                 | LR__1889
16e98     08 4E 05 F1 | 	add	fp, #8
16e9c     A7 12 02 FB | 	rdlong	arg01, fp
16ea0     08 4E 85 F1 | 	sub	fp, #8
16ea4     08 12 06 F1 | 	add	arg01, #8
16ea8     00 00 E4 FF 
16eac     09 01 68 FC | 	wrlong	##-939524096, arg01
16eb0                 | LR__1890
16eb0     08 4E 05 F1 | 	add	fp, #8
16eb4     A7 12 02 FB | 	rdlong	arg01, fp
16eb8     10 12 06 F1 | 	add	arg01, #16
16ebc     04 00 80 FF 
16ec0     09 01 68 FC | 	wrlong	##2048, arg01
16ec4     A7 12 02 FB | 	rdlong	arg01, fp
16ec8     0C 12 06 F1 | 	add	arg01, #12
16ecc     09 01 68 FC | 	wrlong	#0, arg01
16ed0     A7 12 02 FB | 	rdlong	arg01, fp
16ed4     14 12 06 F1 | 	add	arg01, #20
16ed8     14 4E 05 F1 | 	add	fp, #20
16edc     A7 14 02 FB | 	rdlong	arg02, fp
16ee0     09 15 52 FC | 	wrword	arg02, arg01
16ee4     14 4E 85 F1 | 	sub	fp, #20
16ee8     A7 12 02 FB | 	rdlong	arg01, fp
16eec     16 12 06 F1 | 	add	arg01, #22
16ef0     10 4E 05 F1 | 	add	fp, #16
16ef4     A7 14 02 FB | 	rdlong	arg02, fp
16ef8     09 15 52 FC | 	wrword	arg02, arg01
16efc                 | ' lpoke base2+16,2048
16efc                 | ' lpoke base2+12,0
16efc                 | ' dpoke base2+20,ivol 
16efc                 | ' dpoke base2+22,ipan 
16efc                 | ' if wave<32 then
16efc     08 4E 05 F1 | 	add	fp, #8
16f00     A7 2C 02 FB | 	rdlong	local04, fp
16f04     20 4E 85 F1 | 	sub	fp, #32
16f08     20 2C 56 F2 | 	cmps	local04, #32 wc
16f0c     38 00 90 3D |  if_ae	jmp	#LR__1891
16f10     08 4E 05 F1 | 	add	fp, #8
16f14     A7 12 02 FB | 	rdlong	arg01, fp
16f18     18 12 06 F1 | 	add	arg01, #24
16f1c     2C 4E 05 F1 | 	add	fp, #44
16f20     A7 14 02 FB | 	rdlong	arg02, fp
16f24     09 15 52 FC | 	wrword	arg02, arg01
16f28     2C 4E 85 F1 | 	sub	fp, #44
16f2c     A7 12 02 FB | 	rdlong	arg01, fp
16f30     1A 12 06 F1 | 	add	arg01, #26
16f34     08 4E 05 F1 | 	add	fp, #8
16f38     A7 14 02 FB | 	rdlong	arg02, fp
16f3c     10 4E 85 F1 | 	sub	fp, #16
16f40     09 15 52 FC | 	wrword	arg02, arg01
16f44     48 00 90 FD | 	jmp	#LR__1892
16f48                 | LR__1891
16f48     08 4E 05 F1 | 	add	fp, #8
16f4c     A7 2C 02 FB | 	rdlong	local04, fp
16f50     18 2C 06 F1 | 	add	local04, #24
16f54     64 4E 05 F1 | 	add	fp, #100
16f58     A7 14 02 FB | 	rdlong	arg02, fp
16f5c     6C 4E 85 F1 | 	sub	fp, #108
16f60     3E 2C 25 FF 
16f64     3C 12 06 F6 | 	mov	arg01, ##1247312956
16f68     84 0F B1 FD | 	call	#__system___float_div
16f6c     FD 12 02 F6 | 	mov	arg01, result1
16f70     01 14 06 F6 | 	mov	arg02, #1
16f74     3C 12 B1 FD | 	call	#__system___float_tointeger
16f78     16 FB 51 FC | 	wrword	result1, local04
16f7c     08 4E 05 F1 | 	add	fp, #8
16f80     A7 12 02 FB | 	rdlong	arg01, fp
16f84     08 4E 85 F1 | 	sub	fp, #8
16f88     1A 12 06 F1 | 	add	arg01, #26
16f8c     09 01 5A FC | 	wrword	#256, arg01
16f90                 | LR__1892
16f90     08 4E 05 F1 | 	add	fp, #8
16f94     A7 12 02 FB | 	rdlong	arg01, fp
16f98     1C 12 06 F1 | 	add	arg01, #28
16f9c     09 01 68 FC | 	wrlong	#0, arg01
16fa0     A7 12 02 FB | 	rdlong	arg01, fp
16fa4     20 12 06 F1 | 	add	arg01, #32
16fa8     09 01 68 FC | 	wrlong	#0, arg01
16fac                 | ' lpoke base2+28,$0000_0000
16fac                 | ' lpoke base2+32,0 
16fac                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
16fac     1C 4E 05 F1 | 	add	fp, #28
16fb0     A7 2C 02 FB | 	rdlong	local04, fp
16fb4     24 4E 85 F1 | 	sub	fp, #36
16fb8     08 2C 0E F2 | 	cmp	local04, #8 wz
16fbc     18 00 90 5D |  if_ne	jmp	#LR__1893
16fc0     08 4E 05 F1 | 	add	fp, #8
16fc4     A7 12 02 FB | 	rdlong	arg01, fp
16fc8     08 4E 85 F1 | 	sub	fp, #8
16fcc     24 12 06 F1 | 	add	arg01, #36
16fd0     09 01 68 FC | 	wrlong	#0, arg01
16fd4     34 00 90 FD | 	jmp	#LR__1894
16fd8                 | LR__1893
16fd8     08 4E 05 F1 | 	add	fp, #8
16fdc     A7 12 02 FB | 	rdlong	arg01, fp
16fe0     24 12 06 F1 | 	add	arg01, #36
16fe4     1C 4E 05 F1 | 	add	fp, #28
16fe8     A7 14 02 FB | 	rdlong	arg02, fp
16fec     24 4E 85 F1 | 	sub	fp, #36
16ff0     09 14 66 F0 | 	shl	arg02, #9
16ff4     0C 00 00 FF 
16ff8     D8 E4 05 F1 | 	add	objptr, ##6360
16ffc     F2 14 02 F1 | 	add	arg02, objptr
17000     0C 00 00 FF 
17004     D8 E4 85 F1 | 	sub	objptr, ##6360
17008     09 15 62 FC | 	wrlong	arg02, arg01
1700c                 | LR__1894
1700c     08 4E 05 F1 | 	add	fp, #8
17010     A7 12 02 FB | 	rdlong	arg01, fp
17014     28 12 06 F1 | 	add	arg01, #40
17018     0C 4E 05 F1 | 	add	fp, #12
1701c     A7 14 02 FB | 	rdlong	arg02, fp
17020     09 15 62 FC | 	wrlong	arg02, arg01
17024     0C 4E 85 F1 | 	sub	fp, #12
17028     A7 12 02 FB | 	rdlong	arg01, fp
1702c     2C 12 06 F1 | 	add	arg01, #44
17030     24 4E 05 F1 | 	add	fp, #36
17034     A7 14 02 FB | 	rdlong	arg02, fp
17038     09 15 62 FC | 	wrlong	arg02, arg01
1703c                 | ' lpoke base2+40,speed 
1703c                 | ' lpoke base2+44,sus 
1703c                 | ' if delay>0 then waitms(delay) 
1703c     04 4E 85 F1 | 	sub	fp, #4
17040     A7 2C 02 FB | 	rdlong	local04, fp
17044     28 4E 85 F1 | 	sub	fp, #40
17048     01 2C 56 F2 | 	cmps	local04, #1 wc
1704c     28 4E 05 31 |  if_ae	add	fp, #40
17050     A7 12 02 3B |  if_ae	rdlong	arg01, fp
17054     28 4E 85 31 |  if_ae	sub	fp, #40
17058     0C E1 B0 3D |  if_ae	call	#__system___waitms
1705c     A7 F0 03 F6 | 	mov	ptra, fp
17060     B2 00 A0 FD | 	call	#popregs_
17064                 | _do_play_ret
17064     2D 00 64 FD | 	ret
17068                 | 
17068                 | ' 
17068                 | ' '-------------------- plot
17068                 | ' 
17068                 | ' sub do_plot
17068                 | _do_plot
17068     00 4A 05 F6 | 	mov	COUNT_, #0
1706c     A8 00 A0 FD | 	call	#pushregs_
17070     20 F0 07 F1 | 	add	ptra, #32
17074     14 5B BF FD | 	call	#_pop
17078     FD 16 02 F6 | 	mov	arg03, result1
1707c     FE 14 02 F6 | 	mov	arg02, result2
17080     FF 12 02 F6 | 	mov	arg01, result3
17084     0C 4E 05 F1 | 	add	fp, #12
17088     A7 16 62 FC | 	wrlong	arg03, fp
1708c     04 4E 05 F1 | 	add	fp, #4
17090     A7 14 62 FC | 	wrlong	arg02, fp
17094     04 4E 05 F1 | 	add	fp, #4
17098     A7 12 62 FC | 	wrlong	arg01, fp
1709c     14 4E 85 F1 | 	sub	fp, #20
170a0     E8 5A BF FD | 	call	#_pop
170a4     FF 16 02 F6 | 	mov	arg03, result3
170a8     A7 FA 61 FC | 	wrlong	result1, fp
170ac     04 4E 05 F1 | 	add	fp, #4
170b0     A7 FC 61 FC | 	wrlong	result2, fp
170b4     04 4E 05 F1 | 	add	fp, #4
170b8     A7 16 62 FC | 	wrlong	arg03, fp
170bc     08 4E 85 F1 | 	sub	fp, #8
170c0     A7 12 02 F6 | 	mov	arg01, fp
170c4     A8 5C BF FD | 	call	#_converttoint
170c8     18 4E 05 F1 | 	add	fp, #24
170cc     A7 FA 61 FC | 	wrlong	result1, fp
170d0     0C 4E 85 F1 | 	sub	fp, #12
170d4     A7 12 02 F6 | 	mov	arg01, fp
170d8     0C 4E 85 F1 | 	sub	fp, #12
170dc     90 5C BF FD | 	call	#_converttoint
170e0     1C 4E 05 F1 | 	add	fp, #28
170e4     A7 FA 61 FC | 	wrlong	result1, fp
170e8     04 4E 85 F1 | 	sub	fp, #4
170ec     A7 16 02 FB | 	rdlong	arg03, fp
170f0     37 00 00 FF 
170f4     2C E4 05 F1 | 	add	objptr, ##28204
170f8     F2 16 62 FC | 	wrlong	arg03, objptr
170fc     04 4E 05 F1 | 	add	fp, #4
17100     A7 14 02 FB | 	rdlong	arg02, fp
17104     1C 4E 85 F1 | 	sub	fp, #28
17108     04 E4 05 F1 | 	add	objptr, #4
1710c     F2 14 62 FC | 	wrlong	arg02, objptr
17110     04 E4 85 F1 | 	sub	objptr, #4
17114     F2 12 02 FB | 	rdlong	arg01, objptr
17118     04 E4 85 F1 | 	sub	objptr, #4
1711c     F2 16 02 FB | 	rdlong	arg03, objptr
17120     37 00 00 FF 
17124     28 E4 85 F1 | 	sub	objptr, ##28200
17128     38 B4 B0 FD | 	call	#_hg010b_spin2_putpixel
1712c     A7 F0 03 F6 | 	mov	ptra, fp
17130     B2 00 A0 FD | 	call	#popregs_
17134                 | _do_plot_ret
17134     2D 00 64 FD | 	ret
17138                 | 
17138                 | ' 
17138                 | ' '-------------------- poke
17138                 | ' 
17138                 | ' sub do_poke
17138                 | _do_poke
17138     01 4A 05 F6 | 	mov	COUNT_, #1
1713c     A8 00 A0 FD | 	call	#pushregs_
17140     20 F0 07 F1 | 	add	ptra, #32
17144     44 5A BF FD | 	call	#_pop
17148     FD 14 02 F6 | 	mov	arg02, result1
1714c     FE 12 02 F6 | 	mov	arg01, result2
17150     FF 26 02 F6 | 	mov	local01, result3
17154     A7 14 62 FC | 	wrlong	arg02, fp
17158     04 4E 05 F1 | 	add	fp, #4
1715c     A7 12 62 FC | 	wrlong	arg01, fp
17160     04 4E 05 F1 | 	add	fp, #4
17164     A7 26 62 FC | 	wrlong	local01, fp
17168     08 4E 85 F1 | 	sub	fp, #8
1716c     1C 5A BF FD | 	call	#_pop
17170     FF 26 02 F6 | 	mov	local01, result3
17174     0C 4E 05 F1 | 	add	fp, #12
17178     A7 FA 61 FC | 	wrlong	result1, fp
1717c     04 4E 05 F1 | 	add	fp, #4
17180     A7 FC 61 FC | 	wrlong	result2, fp
17184     04 4E 05 F1 | 	add	fp, #4
17188     A7 26 62 FC | 	wrlong	local01, fp
1718c     08 4E 85 F1 | 	sub	fp, #8
17190     A7 12 02 F6 | 	mov	arg01, fp
17194     0C 4E 85 F1 | 	sub	fp, #12
17198     D4 5B BF FD | 	call	#_converttoint
1719c     18 4E 05 F1 | 	add	fp, #24
171a0     A7 FA 61 FC | 	wrlong	result1, fp
171a4     18 4E 85 F1 | 	sub	fp, #24
171a8     A7 12 02 F6 | 	mov	arg01, fp
171ac     C0 5B BF FD | 	call	#_converttoint
171b0     1C 4E 05 F1 | 	add	fp, #28
171b4     A7 FA 61 FC | 	wrlong	result1, fp
171b8                 | ' t1=pop() 'value
171b8                 | ' t2=pop() 
171b8                 | ' a=converttoint(t2) : v=converttoint(t1)
171b8                 | ' if a<$80000 then poke a,v else pspoke a,v
171b8     04 4E 85 F1 | 	sub	fp, #4
171bc     A7 26 02 FB | 	rdlong	local01, fp
171c0     18 4E 85 F1 | 	sub	fp, #24
171c4     00 04 00 FF 
171c8     00 26 16 F2 | 	cmp	local01, ##524288 wc
171cc     1C 00 90 3D |  if_ae	jmp	#LR__1900
171d0     18 4E 05 F1 | 	add	fp, #24
171d4     A7 12 02 FB | 	rdlong	arg01, fp
171d8     04 4E 05 F1 | 	add	fp, #4
171dc     A7 14 02 FB | 	rdlong	arg02, fp
171e0     1C 4E 85 F1 | 	sub	fp, #28
171e4     09 15 42 FC | 	wrbyte	arg02, arg01
171e8     18 00 90 FD | 	jmp	#LR__1901
171ec                 | LR__1900
171ec     18 4E 05 F1 | 	add	fp, #24
171f0     A7 12 02 FB | 	rdlong	arg01, fp
171f4     04 4E 05 F1 | 	add	fp, #4
171f8     A7 14 02 FB | 	rdlong	arg02, fp
171fc     1C 4E 85 F1 | 	sub	fp, #28
17200     FC A4 B0 FD | 	call	#_pspoke
17204                 | LR__1901
17204     A7 F0 03 F6 | 	mov	ptra, fp
17208     B2 00 A0 FD | 	call	#popregs_
1720c                 | _do_poke_ret
1720c     2D 00 64 FD | 	ret
17210                 | 
17210                 | ' 
17210                 | ' '-------------------- pop
17210                 | ' 
17210                 | ' sub do_pop()
17210                 | _do_pop
17210                 | ' if gosubtop>0 then  gosubtop -=1 
17210     50 00 00 FF 
17214     34 E5 05 F1 | 	add	objptr, ##41268
17218     F2 00 02 FB | 	rdlong	_var01, objptr
1721c     50 00 00 FF 
17220     34 E5 85 F1 | 	sub	objptr, ##41268
17224     01 00 56 F2 | 	cmps	_var01, #1 wc
17228     50 00 00 3F 
1722c     34 E5 05 31 |  if_ae	add	objptr, ##41268
17230     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
17234     01 00 86 31 |  if_ae	sub	_var01, #1
17238     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
1723c     50 00 00 3F 
17240     34 E5 85 31 |  if_ae	sub	objptr, ##41268
17244                 | _do_pop_ret
17244     2D 00 64 FD | 	ret
17248                 | 
17248                 | ' 
17248                 | ' '-------------------- position
17248                 | ' 
17248                 | ' sub do_position
17248                 | _do_position
17248     01 4A 05 F6 | 	mov	COUNT_, #1
1724c     A8 00 A0 FD | 	call	#pushregs_
17250     18 F0 07 F1 | 	add	ptra, #24
17254     34 59 BF FD | 	call	#_pop
17258     FD 14 02 F6 | 	mov	arg02, result1
1725c     FE 12 02 F6 | 	mov	arg01, result2
17260     FF 26 02 F6 | 	mov	local01, result3
17264     A7 14 62 FC | 	wrlong	arg02, fp
17268     04 4E 05 F1 | 	add	fp, #4
1726c     A7 12 62 FC | 	wrlong	arg01, fp
17270     04 4E 05 F1 | 	add	fp, #4
17274     A7 26 62 FC | 	wrlong	local01, fp
17278     08 4E 85 F1 | 	sub	fp, #8
1727c     0C 59 BF FD | 	call	#_pop
17280     FF 26 02 F6 | 	mov	local01, result3
17284     0C 4E 05 F1 | 	add	fp, #12
17288     A7 FA 61 FC | 	wrlong	result1, fp
1728c     04 4E 05 F1 | 	add	fp, #4
17290     A7 FC 61 FC | 	wrlong	result2, fp
17294     04 4E 05 F1 | 	add	fp, #4
17298     A7 26 62 FC | 	wrlong	local01, fp
1729c     08 4E 85 F1 | 	sub	fp, #8
172a0     A7 12 02 F6 | 	mov	arg01, fp
172a4     0C 4E 85 F1 | 	sub	fp, #12
172a8     C4 5A BF FD | 	call	#_converttoint
172ac     FD 26 02 F6 | 	mov	local01, result1
172b0     A7 12 02 F6 | 	mov	arg01, fp
172b4     B8 5A BF FD | 	call	#_converttoint
172b8     FD 14 02 F6 | 	mov	arg02, result1
172bc     13 13 02 F6 | 	mov	arg01, local01
172c0     64 BE B0 FD | 	call	#_hg010b_spin2_setcursorpos
172c4     A7 F0 03 F6 | 	mov	ptra, fp
172c8     B2 00 A0 FD | 	call	#popregs_
172cc                 | _do_position_ret
172cc     2D 00 64 FD | 	ret
172d0                 | 
172d0                 | ' 
172d0                 | ' '-------------------- print
172d0                 | ' 
172d0                 | ' sub do_print  
172d0                 | _do_print
172d0     0B 4A 05 F6 | 	mov	COUNT_, #11
172d4     A8 00 A0 FD | 	call	#pushregs_
172d8     00 2C 06 F6 | 	mov	local04, #0
172dc     AC 58 BF FD | 	call	#_pop
172e0     FD 2E 02 F6 | 	mov	local05, result1
172e4     FE 30 02 F6 | 	mov	local06, result2
172e8     FF 32 02 F6 | 	mov	local07, result3
172ec     17 27 02 F6 | 	mov	local01, local05
172f0     18 29 02 F6 | 	mov	local02, local06
172f4     19 2B 02 F6 | 	mov	local03, local07
172f8                 | '  
172f8                 | ' r=0
172f8                 | ' t1=pop() 
172f8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
172f8     21 2A 0E F2 | 	cmp	local03, #33 wz
172fc     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
17300     20 00 90 5D |  if_ne	jmp	#LR__1910
17304     15 2D 02 F6 | 	mov	local04, local03
17308     80 58 BF FD | 	call	#_pop
1730c     FD 2E 02 F6 | 	mov	local05, result1
17310     FE 30 02 F6 | 	mov	local06, result2
17314     FF 32 02 F6 | 	mov	local07, result3
17318     17 27 02 F6 | 	mov	local01, local05
1731c     18 29 02 F6 | 	mov	local02, local06
17320     19 2B 02 F6 | 	mov	local03, local07
17324                 | LR__1910
17324                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17324     20 2A 0E F2 | 	cmp	local03, #32 wz
17328     15 2D 02 A6 |  if_e	mov	local04, local03
1732c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
1732c     FF 2A 0E F2 | 	cmp	local03, #255 wz
17330     10 00 90 5D |  if_ne	jmp	#LR__1911
17334     13 13 02 F6 | 	mov	arg01, local01
17338     00 14 06 F6 | 	mov	arg02, #0
1733c     90 A1 B0 FD | 	call	#_printerror
17340     D4 04 90 FD | 	jmp	#LR__1930
17344                 | LR__1911
17344                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17344     2B 2A 0E F2 | 	cmp	local03, #43 wz
17348     14 00 90 5D |  if_ne	jmp	#LR__1912
1734c     13 13 02 F6 | 	mov	arg01, local01
17350     B0 59 BF FD | 	call	#_convertstring
17354     FD 2E 02 F6 | 	mov	local05, result1
17358     17 27 02 F6 | 	mov	local01, local05
1735c     1F 2A 06 F6 | 	mov	local03, #31
17360                 | LR__1912
17360                 | ' 
17360                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17360     2C 2A 0E F2 | 	cmp	local03, #44 wz
17364     80 00 90 5D |  if_ne	jmp	#LR__1913
17368     00 12 06 F6 | 	mov	arg01, #0
1736c     2C 38 B1 FD | 	call	#__system___getiolock_0595
17370     FD 12 02 F6 | 	mov	arg01, result1
17374     FC DA B0 FD | 	call	#__system___lockmem
17378     A9 01 00 FF 
1737c     C7 15 06 F6 | 	mov	arg02, ##@LR__5842
17380     00 12 06 F6 | 	mov	arg01, #0
17384     00 16 06 F6 | 	mov	arg03, #0
17388     DC E7 B0 FD | 	call	#__system___basic_print_string
1738c     0A 34 06 F6 | 	mov	local08, #10
17390     00 12 06 F6 | 	mov	arg01, #0
17394     13 15 02 F6 | 	mov	arg02, local01
17398     00 16 06 F6 | 	mov	arg03, #0
1739c     0A 18 06 F6 | 	mov	arg04, #10
173a0     08 E8 B0 FD | 	call	#__system___basic_print_integer
173a4     FD 36 02 F6 | 	mov	local09, result1
173a8     00 12 06 F6 | 	mov	arg01, #0
173ac     0A 14 06 F6 | 	mov	arg02, #10
173b0     00 16 06 F6 | 	mov	arg03, #0
173b4     58 E7 B0 FD | 	call	#__system___basic_print_char
173b8     01 38 06 F6 | 	mov	local10, #1
173bc     00 12 06 F6 | 	mov	arg01, #0
173c0     D8 37 B1 FD | 	call	#__system___getiolock_0595
173c4     FD 00 68 FC | 	wrlong	#0, result1
173c8     00 3A 06 F6 | 	mov	local11, #0
173cc     BC 57 BF FD | 	call	#_pop
173d0     FD 2E 02 F6 | 	mov	local05, result1
173d4     FE 30 02 F6 | 	mov	local06, result2
173d8     FF 32 02 F6 | 	mov	local07, result3
173dc     17 27 02 F6 | 	mov	local01, local05
173e0     18 29 02 F6 | 	mov	local02, local06
173e4     19 2B 02 F6 | 	mov	local03, local07
173e8                 | LR__1913
173e8                 | ' 
173e8                 | ' if r=print_mod_comma  then
173e8     21 2C 0E F2 | 	cmp	local04, #33 wz
173ec     AC 01 90 5D |  if_ne	jmp	#LR__1918
173f0                 | '   if t1.result_type=result_int then print t1.result.iresult,
173f0     1C 2A 0E F2 | 	cmp	local03, #28 wz
173f4     64 00 90 5D |  if_ne	jmp	#LR__1914
173f8     00 12 06 F6 | 	mov	arg01, #0
173fc     9C 37 B1 FD | 	call	#__system___getiolock_0595
17400     FD 12 02 F6 | 	mov	arg01, result1
17404     6C DA B0 FD | 	call	#__system___lockmem
17408     00 30 06 F6 | 	mov	local06, #0
1740c     00 12 06 F6 | 	mov	arg01, #0
17410     13 15 02 F6 | 	mov	arg02, local01
17414     00 16 06 F6 | 	mov	arg03, #0
17418     0A 18 06 F6 | 	mov	arg04, #10
1741c     8C E7 B0 FD | 	call	#__system___basic_print_integer
17420     FD 32 02 F6 | 	mov	local07, result1
17424     18 2F 02 F6 | 	mov	local05, local06
17428     19 2F 02 F1 | 	add	local05, local07
1742c     00 3A 06 F6 | 	mov	local11, #0
17430     00 12 06 F6 | 	mov	arg01, #0
17434     09 14 06 F6 | 	mov	arg02, #9
17438     00 16 06 F6 | 	mov	arg03, #0
1743c     D0 E6 B0 FD | 	call	#__system___basic_print_char
17440     FD 36 02 F6 | 	mov	local09, result1
17444     FD 2E 02 F1 | 	add	local05, result1
17448     00 12 06 F6 | 	mov	arg01, #0
1744c     4C 37 B1 FD | 	call	#__system___getiolock_0595
17450     FD 00 68 FC | 	wrlong	#0, result1
17454     00 FA 05 F6 | 	mov	result1, #0
17458     00 38 06 F6 | 	mov	local10, #0
1745c                 | LR__1914
1745c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1745c     1D 2A 0E F2 | 	cmp	local03, #29 wz
17460     64 00 90 5D |  if_ne	jmp	#LR__1915
17464     00 12 06 F6 | 	mov	arg01, #0
17468     30 37 B1 FD | 	call	#__system___getiolock_0595
1746c     FD 12 02 F6 | 	mov	arg01, result1
17470     00 DA B0 FD | 	call	#__system___lockmem
17474     00 30 06 F6 | 	mov	local06, #0
17478     00 12 06 F6 | 	mov	arg01, #0
1747c     13 15 02 F6 | 	mov	arg02, local01
17480     00 16 06 F6 | 	mov	arg03, #0
17484     0A 18 06 F6 | 	mov	arg04, #10
17488     60 E7 B0 FD | 	call	#__system___basic_print_unsigned
1748c     FD 32 02 F6 | 	mov	local07, result1
17490     18 2F 02 F6 | 	mov	local05, local06
17494     19 2F 02 F1 | 	add	local05, local07
17498     00 3A 06 F6 | 	mov	local11, #0
1749c     00 12 06 F6 | 	mov	arg01, #0
174a0     09 14 06 F6 | 	mov	arg02, #9
174a4     00 16 06 F6 | 	mov	arg03, #0
174a8     64 E6 B0 FD | 	call	#__system___basic_print_char
174ac     FD 36 02 F6 | 	mov	local09, result1
174b0     FD 2E 02 F1 | 	add	local05, result1
174b4     00 12 06 F6 | 	mov	arg01, #0
174b8     E0 36 B1 FD | 	call	#__system___getiolock_0595
174bc     FD 00 68 FC | 	wrlong	#0, result1
174c0     00 FA 05 F6 | 	mov	result1, #0
174c4     00 38 06 F6 | 	mov	local10, #0
174c8                 | LR__1915
174c8                 | '   if t1.result_type=result_float then print t1.result.fresult,
174c8     1E 2A 0E F2 | 	cmp	local03, #30 wz
174cc     64 00 90 5D |  if_ne	jmp	#LR__1916
174d0     00 12 06 F6 | 	mov	arg01, #0
174d4     C4 36 B1 FD | 	call	#__system___getiolock_0595
174d8     FD 12 02 F6 | 	mov	arg01, result1
174dc     94 D9 B0 FD | 	call	#__system___lockmem
174e0     00 30 06 F6 | 	mov	local06, #0
174e4     00 12 06 F6 | 	mov	arg01, #0
174e8     13 15 02 F6 | 	mov	arg02, local01
174ec     00 16 06 F6 | 	mov	arg03, #0
174f0     23 18 06 F6 | 	mov	arg04, #35
174f4     0C 0E B1 FD | 	call	#__system___basic_print_float
174f8     FD 32 02 F6 | 	mov	local07, result1
174fc     18 2F 02 F6 | 	mov	local05, local06
17500     19 2F 02 F1 | 	add	local05, local07
17504     00 3A 06 F6 | 	mov	local11, #0
17508     00 12 06 F6 | 	mov	arg01, #0
1750c     09 14 06 F6 | 	mov	arg02, #9
17510     00 16 06 F6 | 	mov	arg03, #0
17514     F8 E5 B0 FD | 	call	#__system___basic_print_char
17518     FD 36 02 F6 | 	mov	local09, result1
1751c     FD 2E 02 F1 | 	add	local05, result1
17520     00 12 06 F6 | 	mov	arg01, #0
17524     74 36 B1 FD | 	call	#__system___getiolock_0595
17528     FD 00 68 FC | 	wrlong	#0, result1
1752c     00 FA 05 F6 | 	mov	result1, #0
17530     00 38 06 F6 | 	mov	local10, #0
17534                 | LR__1916
17534                 | '   if t1.result_type=result_string then print t1.result.sresult,
17534     1F 2A 0E F2 | 	cmp	local03, #31 wz
17538     60 00 90 5D |  if_ne	jmp	#LR__1917
1753c     00 12 06 F6 | 	mov	arg01, #0
17540     58 36 B1 FD | 	call	#__system___getiolock_0595
17544     FD 12 02 F6 | 	mov	arg01, result1
17548     28 D9 B0 FD | 	call	#__system___lockmem
1754c     00 30 06 F6 | 	mov	local06, #0
17550     00 12 06 F6 | 	mov	arg01, #0
17554     13 15 02 F6 | 	mov	arg02, local01
17558     00 16 06 F6 | 	mov	arg03, #0
1755c     08 E6 B0 FD | 	call	#__system___basic_print_string
17560     FD 32 02 F6 | 	mov	local07, result1
17564     18 2F 02 F6 | 	mov	local05, local06
17568     19 2F 02 F1 | 	add	local05, local07
1756c     00 3A 06 F6 | 	mov	local11, #0
17570     00 12 06 F6 | 	mov	arg01, #0
17574     09 14 06 F6 | 	mov	arg02, #9
17578     00 16 06 F6 | 	mov	arg03, #0
1757c     90 E5 B0 FD | 	call	#__system___basic_print_char
17580     FD 36 02 F6 | 	mov	local09, result1
17584     FD 2E 02 F1 | 	add	local05, result1
17588     00 12 06 F6 | 	mov	arg01, #0
1758c     0C 36 B1 FD | 	call	#__system___getiolock_0595
17590     FD 00 68 FC | 	wrlong	#0, result1
17594     00 FA 05 F6 | 	mov	result1, #0
17598     00 38 06 F6 | 	mov	local10, #0
1759c                 | LR__1917
1759c                 | LR__1918
1759c                 | ' if r=print_mod_semicolon then 
1759c     22 2C 0E F2 | 	cmp	local04, #34 wz
175a0     1C 01 90 5D |  if_ne	jmp	#LR__1923
175a4                 | '   if t1.result_type=result_int then print t1.result.iresult;
175a4     1C 2A 0E F2 | 	cmp	local03, #28 wz
175a8     50 00 90 5D |  if_ne	jmp	#LR__1919
175ac     00 12 06 F6 | 	mov	arg01, #0
175b0     E8 35 B1 FD | 	call	#__system___getiolock_0595
175b4     FD 12 02 F6 | 	mov	arg01, result1
175b8     B8 D8 B0 FD | 	call	#__system___lockmem
175bc     00 30 06 F6 | 	mov	local06, #0
175c0     00 38 06 F6 | 	mov	local10, #0
175c4     0A 3A 06 F6 | 	mov	local11, #10
175c8     00 12 06 F6 | 	mov	arg01, #0
175cc     13 15 02 F6 | 	mov	arg02, local01
175d0     00 16 06 F6 | 	mov	arg03, #0
175d4     0A 18 06 F6 | 	mov	arg04, #10
175d8     D0 E5 B0 FD | 	call	#__system___basic_print_integer
175dc     FD 32 02 F6 | 	mov	local07, result1
175e0     18 2F 02 F6 | 	mov	local05, local06
175e4     19 2F 02 F1 | 	add	local05, local07
175e8     00 12 06 F6 | 	mov	arg01, #0
175ec     AC 35 B1 FD | 	call	#__system___getiolock_0595
175f0     FD 00 68 FC | 	wrlong	#0, result1
175f4     00 FA 05 F6 | 	mov	result1, #0
175f8     00 36 06 F6 | 	mov	local09, #0
175fc                 | LR__1919
175fc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
175fc     1D 2A 0E F2 | 	cmp	local03, #29 wz
17600     50 00 90 5D |  if_ne	jmp	#LR__1920
17604     00 12 06 F6 | 	mov	arg01, #0
17608     90 35 B1 FD | 	call	#__system___getiolock_0595
1760c     FD 12 02 F6 | 	mov	arg01, result1
17610     60 D8 B0 FD | 	call	#__system___lockmem
17614     00 30 06 F6 | 	mov	local06, #0
17618     00 38 06 F6 | 	mov	local10, #0
1761c     0A 3A 06 F6 | 	mov	local11, #10
17620     00 12 06 F6 | 	mov	arg01, #0
17624     13 15 02 F6 | 	mov	arg02, local01
17628     00 16 06 F6 | 	mov	arg03, #0
1762c     0A 18 06 F6 | 	mov	arg04, #10
17630     B8 E5 B0 FD | 	call	#__system___basic_print_unsigned
17634     FD 32 02 F6 | 	mov	local07, result1
17638     18 2F 02 F6 | 	mov	local05, local06
1763c     19 2F 02 F1 | 	add	local05, local07
17640     00 12 06 F6 | 	mov	arg01, #0
17644     54 35 B1 FD | 	call	#__system___getiolock_0595
17648     FD 00 68 FC | 	wrlong	#0, result1
1764c     00 FA 05 F6 | 	mov	result1, #0
17650     00 36 06 F6 | 	mov	local09, #0
17654                 | LR__1920
17654                 | '   if t1.result_type=result_float then print t1.result.fresult;
17654     1E 2A 0E F2 | 	cmp	local03, #30 wz
17658     30 00 90 5D |  if_ne	jmp	#LR__1921
1765c     00 12 06 F6 | 	mov	arg01, #0
17660     38 35 B1 FD | 	call	#__system___getiolock_0595
17664     FD 12 02 F6 | 	mov	arg01, result1
17668     08 D8 B0 FD | 	call	#__system___lockmem
1766c     00 12 06 F6 | 	mov	arg01, #0
17670     13 15 02 F6 | 	mov	arg02, local01
17674     00 16 06 F6 | 	mov	arg03, #0
17678     23 18 06 F6 | 	mov	arg04, #35
1767c     84 0C B1 FD | 	call	#__system___basic_print_float
17680     00 12 06 F6 | 	mov	arg01, #0
17684     14 35 B1 FD | 	call	#__system___getiolock_0595
17688     FD 00 68 FC | 	wrlong	#0, result1
1768c                 | LR__1921
1768c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1768c     1F 2A 0E F2 | 	cmp	local03, #31 wz
17690     2C 00 90 5D |  if_ne	jmp	#LR__1922
17694     00 12 06 F6 | 	mov	arg01, #0
17698     00 35 B1 FD | 	call	#__system___getiolock_0595
1769c     FD 12 02 F6 | 	mov	arg01, result1
176a0     D0 D7 B0 FD | 	call	#__system___lockmem
176a4     00 12 06 F6 | 	mov	arg01, #0
176a8     13 15 02 F6 | 	mov	arg02, local01
176ac     00 16 06 F6 | 	mov	arg03, #0
176b0     B4 E4 B0 FD | 	call	#__system___basic_print_string
176b4     00 12 06 F6 | 	mov	arg01, #0
176b8     E0 34 B1 FD | 	call	#__system___getiolock_0595
176bc     FD 00 68 FC | 	wrlong	#0, result1
176c0                 | LR__1922
176c0                 | LR__1923
176c0                 | ' if r=0 then 
176c0     00 2C 0E F2 | 	cmp	local04, #0 wz
176c4     1C 01 90 5D |  if_ne	jmp	#LR__1928
176c8                 | '   if t1.result_type=result_int then print t1.result.iresult
176c8     1C 2A 0E F2 | 	cmp	local03, #28 wz
176cc     40 00 90 5D |  if_ne	jmp	#LR__1924
176d0     00 12 06 F6 | 	mov	arg01, #0
176d4     C4 34 B1 FD | 	call	#__system___getiolock_0595
176d8     FD 12 02 F6 | 	mov	arg01, result1
176dc     94 D7 B0 FD | 	call	#__system___lockmem
176e0     00 12 06 F6 | 	mov	arg01, #0
176e4     13 15 02 F6 | 	mov	arg02, local01
176e8     00 16 06 F6 | 	mov	arg03, #0
176ec     0A 18 06 F6 | 	mov	arg04, #10
176f0     B8 E4 B0 FD | 	call	#__system___basic_print_integer
176f4     00 12 06 F6 | 	mov	arg01, #0
176f8     0A 14 06 F6 | 	mov	arg02, #10
176fc     00 16 06 F6 | 	mov	arg03, #0
17700     0C E4 B0 FD | 	call	#__system___basic_print_char
17704     00 12 06 F6 | 	mov	arg01, #0
17708     90 34 B1 FD | 	call	#__system___getiolock_0595
1770c     FD 00 68 FC | 	wrlong	#0, result1
17710                 | LR__1924
17710                 | '   if t1.result_type=result_uint then print t1.result.uresult
17710     1D 2A 0E F2 | 	cmp	local03, #29 wz
17714     40 00 90 5D |  if_ne	jmp	#LR__1925
17718     00 12 06 F6 | 	mov	arg01, #0
1771c     7C 34 B1 FD | 	call	#__system___getiolock_0595
17720     FD 12 02 F6 | 	mov	arg01, result1
17724     4C D7 B0 FD | 	call	#__system___lockmem
17728     00 12 06 F6 | 	mov	arg01, #0
1772c     13 15 02 F6 | 	mov	arg02, local01
17730     00 16 06 F6 | 	mov	arg03, #0
17734     0A 18 06 F6 | 	mov	arg04, #10
17738     B0 E4 B0 FD | 	call	#__system___basic_print_unsigned
1773c     00 12 06 F6 | 	mov	arg01, #0
17740     0A 14 06 F6 | 	mov	arg02, #10
17744     00 16 06 F6 | 	mov	arg03, #0
17748     C4 E3 B0 FD | 	call	#__system___basic_print_char
1774c     00 12 06 F6 | 	mov	arg01, #0
17750     48 34 B1 FD | 	call	#__system___getiolock_0595
17754     FD 00 68 FC | 	wrlong	#0, result1
17758                 | LR__1925
17758                 | '   if t1.result_type=result_float then print t1.result.fresult
17758     1E 2A 0E F2 | 	cmp	local03, #30 wz
1775c     40 00 90 5D |  if_ne	jmp	#LR__1926
17760     00 12 06 F6 | 	mov	arg01, #0
17764     34 34 B1 FD | 	call	#__system___getiolock_0595
17768     FD 12 02 F6 | 	mov	arg01, result1
1776c     04 D7 B0 FD | 	call	#__system___lockmem
17770     00 12 06 F6 | 	mov	arg01, #0
17774     13 15 02 F6 | 	mov	arg02, local01
17778     00 16 06 F6 | 	mov	arg03, #0
1777c     23 18 06 F6 | 	mov	arg04, #35
17780     80 0B B1 FD | 	call	#__system___basic_print_float
17784     00 12 06 F6 | 	mov	arg01, #0
17788     0A 14 06 F6 | 	mov	arg02, #10
1778c     00 16 06 F6 | 	mov	arg03, #0
17790     7C E3 B0 FD | 	call	#__system___basic_print_char
17794     00 12 06 F6 | 	mov	arg01, #0
17798     00 34 B1 FD | 	call	#__system___getiolock_0595
1779c     FD 00 68 FC | 	wrlong	#0, result1
177a0                 | LR__1926
177a0                 | '   if t1.result_type=result_string then print t1.result.sresult
177a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
177a4     3C 00 90 5D |  if_ne	jmp	#LR__1927
177a8     00 12 06 F6 | 	mov	arg01, #0
177ac     EC 33 B1 FD | 	call	#__system___getiolock_0595
177b0     FD 12 02 F6 | 	mov	arg01, result1
177b4     BC D6 B0 FD | 	call	#__system___lockmem
177b8     00 12 06 F6 | 	mov	arg01, #0
177bc     13 15 02 F6 | 	mov	arg02, local01
177c0     00 16 06 F6 | 	mov	arg03, #0
177c4     A0 E3 B0 FD | 	call	#__system___basic_print_string
177c8     00 12 06 F6 | 	mov	arg01, #0
177cc     0A 14 06 F6 | 	mov	arg02, #10
177d0     00 16 06 F6 | 	mov	arg03, #0
177d4     38 E3 B0 FD | 	call	#__system___basic_print_char
177d8     00 12 06 F6 | 	mov	arg01, #0
177dc     BC 33 B1 FD | 	call	#__system___getiolock_0595
177e0     FD 00 68 FC | 	wrlong	#0, result1
177e4                 | LR__1927
177e4                 | LR__1928
177e4                 | ' if r=print_mod_empty then print
177e4     20 2C 0E F2 | 	cmp	local04, #32 wz
177e8     2C 00 90 5D |  if_ne	jmp	#LR__1929
177ec     00 12 06 F6 | 	mov	arg01, #0
177f0     A8 33 B1 FD | 	call	#__system___getiolock_0595
177f4     FD 12 02 F6 | 	mov	arg01, result1
177f8     78 D6 B0 FD | 	call	#__system___lockmem
177fc     00 12 06 F6 | 	mov	arg01, #0
17800     0A 14 06 F6 | 	mov	arg02, #10
17804     00 16 06 F6 | 	mov	arg03, #0
17808     04 E3 B0 FD | 	call	#__system___basic_print_char
1780c     00 12 06 F6 | 	mov	arg01, #0
17810     88 33 B1 FD | 	call	#__system___getiolock_0595
17814     FD 00 68 FC | 	wrlong	#0, result1
17818                 | LR__1929
17818                 | LR__1930
17818     A7 F0 03 F6 | 	mov	ptra, fp
1781c     B2 00 A0 FD | 	call	#popregs_
17820                 | _do_print_ret
17820     2D 00 64 FD | 	ret
17824                 | 
17824                 | ' 
17824                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
17824                 | ' 
17824                 | ' sub do_push
17824                 | _do_push
17824                 | ' if stackpointer<maxstack then 
17824     43 00 00 FF 
17828     58 E4 05 F1 | 	add	objptr, ##34392
1782c     F2 00 02 FB | 	rdlong	_var01, objptr
17830     43 00 00 FF 
17834     58 E4 85 F1 | 	sub	objptr, ##34392
17838     01 00 00 FF 
1783c     00 00 56 F2 | 	cmps	_var01, ##512 wc
17840     F8 00 90 3D |  if_ae	jmp	#LR__1940
17844     4A 00 00 FF 
17848     80 E4 05 F1 | 	add	objptr, ##38016
1784c     F2 02 02 FB | 	rdlong	_var02, objptr
17850     01 05 02 F6 | 	mov	_var03, _var02
17854     01 04 66 F0 | 	shl	_var03, #1
17858     01 05 02 F1 | 	add	_var03, _var02
1785c     02 04 66 F0 | 	shl	_var03, #2
17860     03 00 00 FF 
17864     04 E4 85 F1 | 	sub	objptr, ##1540
17868     F2 04 02 F1 | 	add	_var03, objptr
1786c     02 01 02 FB | 	rdlong	_var01, _var03
17870     04 04 06 F1 | 	add	_var03, #4
17874     02 07 02 FB | 	rdlong	_var04, _var03
17878     01 05 02 F6 | 	mov	_var03, _var02
1787c     01 04 66 F0 | 	shl	_var03, #1
17880     01 05 02 F1 | 	add	_var03, _var02
17884     02 04 66 F0 | 	shl	_var03, #2
17888     F2 04 02 F1 | 	add	_var03, objptr
1788c     08 04 06 F1 | 	add	_var03, #8
17890     02 03 02 FB | 	rdlong	_var02, _var03
17894     04 00 00 FF 
17898     24 E4 85 F1 | 	sub	objptr, ##2084
1789c     F2 04 02 FB | 	rdlong	_var03, objptr
178a0     02 09 02 F6 | 	mov	_var05, _var03
178a4     01 08 66 F0 | 	shl	_var05, #1
178a8     02 09 02 F1 | 	add	_var05, _var03
178ac     02 08 66 F0 | 	shl	_var05, #2
178b0     0C 00 00 FF 
178b4     0C E4 85 F1 | 	sub	objptr, ##6156
178b8     F2 08 02 F1 | 	add	_var05, objptr
178bc     04 01 62 FC | 	wrlong	_var01, _var05
178c0     0C 00 00 FF 
178c4     0C E4 05 F1 | 	add	objptr, ##6156
178c8     F2 08 02 FB | 	rdlong	_var05, objptr
178cc     04 05 02 F6 | 	mov	_var03, _var05
178d0     01 04 66 F0 | 	shl	_var03, #1
178d4     04 05 02 F1 | 	add	_var03, _var05
178d8     02 04 66 F0 | 	shl	_var03, #2
178dc     0C 00 00 FF 
178e0     0C E4 85 F1 | 	sub	objptr, ##6156
178e4     F2 04 02 F1 | 	add	_var03, objptr
178e8     04 04 06 F1 | 	add	_var03, #4
178ec     02 07 62 FC | 	wrlong	_var04, _var03
178f0     0C 00 00 FF 
178f4     0C E4 05 F1 | 	add	objptr, ##6156
178f8     F2 08 02 FB | 	rdlong	_var05, objptr
178fc     04 07 02 F6 | 	mov	_var04, _var05
17900     01 06 66 F0 | 	shl	_var04, #1
17904     04 07 02 F1 | 	add	_var04, _var05
17908     02 06 66 F0 | 	shl	_var04, #2
1790c     0C 00 00 FF 
17910     0C E4 85 F1 | 	sub	objptr, ##6156
17914     F2 06 02 F1 | 	add	_var04, objptr
17918     08 06 06 F1 | 	add	_var04, #8
1791c     03 03 62 FC | 	wrlong	_var02, _var04
17920     0C 00 00 FF 
17924     0C E4 05 F1 | 	add	objptr, ##6156
17928     F2 00 02 FB | 	rdlong	_var01, objptr
1792c     01 00 06 F1 | 	add	_var01, #1
17930     F2 00 62 FC | 	wrlong	_var01, objptr
17934     43 00 00 FF 
17938     58 E4 85 F1 | 	sub	objptr, ##34392
1793c                 | LR__1940
1793c                 | _do_push_ret
1793c     2D 00 64 FD | 	ret
17940                 | 
17940                 | ' 
17940                 | ' '-------------------- put
17940                 | ' 
17940                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
17940                 | _do_put
17940     03 4A 05 F6 | 	mov	COUNT_, #3
17944     A8 00 A0 FD | 	call	#pushregs_
17948     28 F0 07 F1 | 	add	ptra, #40
1794c     4A 00 00 FF 
17950     80 E4 05 F1 | 	add	objptr, ##38016
17954     F2 1A 02 FB | 	rdlong	arg05, objptr
17958     0D 19 02 F6 | 	mov	arg04, arg05
1795c     01 18 66 F0 | 	shl	arg04, #1
17960     0D 19 02 F1 | 	add	arg04, arg05
17964     02 18 66 F0 | 	shl	arg04, #2
17968     03 00 00 FF 
1796c     04 E4 85 F1 | 	sub	objptr, ##1540
17970     F2 18 02 F1 | 	add	arg04, objptr
17974     0C 1B 02 FB | 	rdlong	arg05, arg04
17978     A7 1A 62 FC | 	wrlong	arg05, fp
1797c                 | ' 
1797c                 | ' numpar=compiledline(lineptr_e).result.uresult
1797c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1797c     04 1A 0E F2 | 	cmp	arg05, #4 wz
17980     47 00 00 FF 
17984     7C E4 85 F1 | 	sub	objptr, ##36476
17988     48 00 90 5D |  if_ne	jmp	#LR__1950
1798c     FC 51 BF FD | 	call	#_pop
17990     FF 1A 02 F6 | 	mov	arg05, result3
17994     1C 4E 05 F1 | 	add	fp, #28
17998     A7 FA 61 FC | 	wrlong	result1, fp
1799c     04 4E 05 F1 | 	add	fp, #4
179a0     A7 FC 61 FC | 	wrlong	result2, fp
179a4     04 4E 05 F1 | 	add	fp, #4
179a8     A7 1A 62 FC | 	wrlong	arg05, fp
179ac     08 4E 85 F1 | 	sub	fp, #8
179b0     A7 12 02 F6 | 	mov	arg01, fp
179b4     1C 4E 85 F1 | 	sub	fp, #28
179b8     B4 53 BF FD | 	call	#_converttoint
179bc     52 00 00 FF 
179c0     48 E4 05 F1 | 	add	objptr, ##42056
179c4     F2 FA 61 FC | 	wrlong	result1, objptr
179c8     52 00 00 FF 
179cc     48 E4 85 F1 | 	sub	objptr, ##42056
179d0     18 00 90 FD | 	jmp	#LR__1951
179d4                 | LR__1950
179d4     52 00 00 FF 
179d8     48 E4 05 F1 | 	add	objptr, ##42056
179dc     FF FF FF FF 
179e0     F2 FE 6B FC | 	wrlong	##-1, objptr
179e4     52 00 00 FF 
179e8     48 E4 85 F1 | 	sub	objptr, ##42056
179ec                 | LR__1951
179ec                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
179ec     A7 1A 02 FB | 	rdlong	arg05, fp
179f0     03 1A 56 F2 | 	cmps	arg05, #3 wc
179f4     40 00 90 CD |  if_b	jmp	#LR__1952
179f8     90 51 BF FD | 	call	#_pop
179fc     FF 1A 02 F6 | 	mov	arg05, result3
17a00     1C 4E 05 F1 | 	add	fp, #28
17a04     A7 FA 61 FC | 	wrlong	result1, fp
17a08     04 4E 05 F1 | 	add	fp, #4
17a0c     A7 FC 61 FC | 	wrlong	result2, fp
17a10     04 4E 05 F1 | 	add	fp, #4
17a14     A7 1A 62 FC | 	wrlong	arg05, fp
17a18     08 4E 85 F1 | 	sub	fp, #8
17a1c     A7 12 02 F6 | 	mov	arg01, fp
17a20     1C 4E 85 F1 | 	sub	fp, #28
17a24     48 53 BF FD | 	call	#_converttoint
17a28     08 4E 05 F1 | 	add	fp, #8
17a2c     A7 FA 61 FC | 	wrlong	result1, fp
17a30     08 4E 85 F1 | 	sub	fp, #8
17a34     0C 00 90 FD | 	jmp	#LR__1953
17a38                 | LR__1952
17a38     08 4E 05 F1 | 	add	fp, #8
17a3c     A7 02 68 FC | 	wrlong	#1, fp
17a40     08 4E 85 F1 | 	sub	fp, #8
17a44                 | LR__1953
17a44                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
17a44     A7 18 02 FB | 	rdlong	arg04, fp
17a48     02 18 56 F2 | 	cmps	arg04, #2 wc
17a4c     3C 00 90 CD |  if_b	jmp	#LR__1954
17a50     38 51 BF FD | 	call	#_pop
17a54     FF 18 02 F6 | 	mov	arg04, result3
17a58     1C 4E 05 F1 | 	add	fp, #28
17a5c     A7 FA 61 FC | 	wrlong	result1, fp
17a60     04 4E 05 F1 | 	add	fp, #4
17a64     A7 FC 61 FC | 	wrlong	result2, fp
17a68     04 4E 05 F1 | 	add	fp, #4
17a6c     A7 18 62 FC | 	wrlong	arg04, fp
17a70     08 4E 85 F1 | 	sub	fp, #8
17a74     A7 12 02 F6 | 	mov	arg01, fp
17a78     1C 4E 85 F1 | 	sub	fp, #28
17a7c     F0 52 BF FD | 	call	#_converttoint
17a80     0C 4E 05 F1 | 	add	fp, #12
17a84     A7 FA 61 FC | 	wrlong	result1, fp
17a88     0C 4E 85 F1 | 	sub	fp, #12
17a8c                 | LR__1954
17a8c     FC 50 BF FD | 	call	#_pop
17a90     FF 18 02 F6 | 	mov	arg04, result3
17a94     1C 4E 05 F1 | 	add	fp, #28
17a98     A7 FA 61 FC | 	wrlong	result1, fp
17a9c     04 4E 05 F1 | 	add	fp, #4
17aa0     A7 FC 61 FC | 	wrlong	result2, fp
17aa4     04 4E 05 F1 | 	add	fp, #4
17aa8     A7 18 62 FC | 	wrlong	arg04, fp
17aac     08 4E 85 F1 | 	sub	fp, #8
17ab0     A7 12 02 F6 | 	mov	arg01, fp
17ab4     1C 4E 85 F1 | 	sub	fp, #28
17ab8     B4 52 BF FD | 	call	#_converttoint
17abc     04 4E 05 F1 | 	add	fp, #4
17ac0     A7 FA 61 FC | 	wrlong	result1, fp
17ac4     10 4E 05 F1 | 	add	fp, #16
17ac8     A7 26 02 FB | 	rdlong	local01, fp
17acc     14 4E 85 F1 | 	sub	fp, #20
17ad0     02 26 66 F0 | 	shl	local01, #2
17ad4     50 00 00 FF 
17ad8     C4 E4 05 F1 | 	add	objptr, ##41156
17adc     F2 26 02 F1 | 	add	local01, objptr
17ae0     13 01 68 FC | 	wrlong	#0, local01
17ae4                 | ' t1=pop() : channel=converttoint(t1)
17ae4                 | ' getres(j)=0
17ae4                 | ' if pos>=0 then
17ae4     01 00 00 FF 
17ae8     84 E5 05 F1 | 	add	objptr, ##900
17aec     F2 28 02 FB | 	rdlong	local02, objptr
17af0     52 00 00 FF 
17af4     48 E4 85 F1 | 	sub	objptr, ##42056
17af8     00 28 56 F2 | 	cmps	local02, #0 wc
17afc     C0 01 90 CD |  if_b	jmp	#LR__1960
17b00     10 4E 05 F1 | 	add	fp, #16
17b04     A7 00 68 FC | 	wrlong	#0, fp
17b08     10 4E 85 F1 | 	sub	fp, #16
17b0c                 | '    i=0: do
17b0c                 | LR__1955
17b0c     14 4E 05 F1 | 	add	fp, #20
17b10     A7 00 68 FC | 	wrlong	#0, fp
17b14     14 4E 85 F1 | 	sub	fp, #20
17b18                 | '    j=0: do    
17b18                 | LR__1956
17b18                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17b18     0C 4E 05 F1 | 	add	fp, #12
17b1c     A7 28 02 FB | 	rdlong	local02, fp
17b20     0C 4E 85 F1 | 	sub	fp, #12
17b24     00 04 00 FF 
17b28     00 28 56 F2 | 	cmps	local02, ##524288 wc
17b2c     4C 00 90 3D |  if_ae	jmp	#LR__1957
17b30     14 4E 05 F1 | 	add	fp, #20
17b34     A7 28 02 FB | 	rdlong	local02, fp
17b38     14 27 02 F6 | 	mov	local01, local02
17b3c     4E 00 00 FF 
17b40     B4 E4 05 F1 | 	add	objptr, ##40116
17b44     F2 26 02 F1 | 	add	local01, objptr
17b48     08 4E 85 F1 | 	sub	fp, #8
17b4c     A7 12 02 FB | 	rdlong	arg01, fp
17b50     04 4E 05 F1 | 	add	fp, #4
17b54     A7 18 02 FB | 	rdlong	arg04, fp
17b58     0A 18 66 F0 | 	shl	arg04, #10
17b5c     0C 13 02 F1 | 	add	arg01, arg04
17b60     10 4E 85 F1 | 	sub	fp, #16
17b64     14 13 02 F1 | 	add	arg01, local02
17b68     09 FB C1 FA | 	rdbyte	result1, arg01
17b6c     4E 00 00 FF 
17b70     B4 E4 85 F1 | 	sub	objptr, ##40116
17b74     13 FB 41 FC | 	wrbyte	result1, local01
17b78     48 00 90 FD | 	jmp	#LR__1958
17b7c                 | LR__1957
17b7c     14 4E 05 F1 | 	add	fp, #20
17b80     A7 28 02 FB | 	rdlong	local02, fp
17b84     14 27 02 F6 | 	mov	local01, local02
17b88     4E 00 00 FF 
17b8c     B4 E4 05 F1 | 	add	objptr, ##40116
17b90     F2 26 02 F1 | 	add	local01, objptr
17b94     08 4E 85 F1 | 	sub	fp, #8
17b98     A7 12 02 FB | 	rdlong	arg01, fp
17b9c     04 4E 05 F1 | 	add	fp, #4
17ba0     A7 18 02 FB | 	rdlong	arg04, fp
17ba4     0A 18 66 F0 | 	shl	arg04, #10
17ba8     0C 13 02 F1 | 	add	arg01, arg04
17bac     10 4E 85 F1 | 	sub	fp, #16
17bb0     14 13 02 F1 | 	add	arg01, local02
17bb4     4E 00 00 FF 
17bb8     B4 E4 85 F1 | 	sub	objptr, ##40116
17bbc     88 9B B0 FD | 	call	#_pspeek
17bc0     13 FB 41 FC | 	wrbyte	result1, local01
17bc4                 | LR__1958
17bc4     14 4E 05 F1 | 	add	fp, #20
17bc8     A7 28 02 FB | 	rdlong	local02, fp
17bcc     01 28 06 F1 | 	add	local02, #1
17bd0     A7 28 62 FC | 	wrlong	local02, fp
17bd4     14 4E 85 F1 | 	sub	fp, #20
17bd8     02 00 00 FF 
17bdc     00 28 56 F2 | 	cmps	local02, ##1024 wc
17be0     2C 00 90 3D |  if_ae	jmp	#LR__1959
17be4     10 4E 05 F1 | 	add	fp, #16
17be8     A7 26 02 FB | 	rdlong	local01, fp
17bec     0A 26 66 F0 | 	shl	local01, #10
17bf0     04 4E 05 F1 | 	add	fp, #4
17bf4     A7 28 02 FB | 	rdlong	local02, fp
17bf8     14 27 02 F1 | 	add	local01, local02
17bfc     0C 4E 85 F1 | 	sub	fp, #12
17c00     A7 28 02 FB | 	rdlong	local02, fp
17c04     08 4E 85 F1 | 	sub	fp, #8
17c08     14 27 5A F2 | 	cmps	local01, local02 wcz
17c0c     08 FF 9F ED |  if_be	jmp	#LR__1956
17c10                 | LR__1959
17c10                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
17c10     04 4E 05 F1 | 	add	fp, #4
17c14     A7 12 02 FB | 	rdlong	arg01, fp
17c18     52 00 00 FF 
17c1c     48 E4 05 F1 | 	add	objptr, ##42056
17c20     F2 14 02 FB | 	rdlong	arg02, objptr
17c24     01 14 06 F1 | 	add	arg02, #1
17c28     03 00 00 FF 
17c2c     94 E5 85 F1 | 	sub	objptr, ##1940
17c30     F2 16 02 F6 | 	mov	arg03, objptr
17c34     4E 00 00 FF 
17c38     B4 E4 85 F1 | 	sub	objptr, ##40116
17c3c     04 4E 05 F1 | 	add	fp, #4
17c40     A7 18 02 FB | 	rdlong	arg04, fp
17c44     08 4E 85 F1 | 	sub	fp, #8
17c48     01 1A 06 F6 | 	mov	arg05, #1
17c4c     28 E0 B0 FD | 	call	#__system___basic_put
17c50     18 4E 05 F1 | 	add	fp, #24
17c54     A7 FA 61 FC | 	wrlong	result1, fp
17c58     14 4E 85 F1 | 	sub	fp, #20
17c5c     A7 26 02 FB | 	rdlong	local01, fp
17c60     02 26 66 F0 | 	shl	local01, #2
17c64     50 00 00 FF 
17c68     C4 E4 05 F1 | 	add	objptr, ##41156
17c6c     F2 26 02 F1 | 	add	local01, objptr
17c70     13 FB 61 FC | 	wrlong	result1, local01
17c74                 | '    if 1024*i+j>amount then exit loop
17c74     0C 4E 05 F1 | 	add	fp, #12
17c78     A7 28 02 FB | 	rdlong	local02, fp
17c7c     0A 28 66 F0 | 	shl	local02, #10
17c80     04 4E 05 F1 | 	add	fp, #4
17c84     A7 26 02 FB | 	rdlong	local01, fp
17c88     13 29 02 F1 | 	add	local02, local01
17c8c     0C 4E 85 F1 | 	sub	fp, #12
17c90     A7 26 02 FB | 	rdlong	local01, fp
17c94     08 4E 85 F1 | 	sub	fp, #8
17c98     13 29 5A F2 | 	cmps	local02, local01 wcz
17c9c     50 00 00 FF 
17ca0     C4 E4 85 F1 | 	sub	objptr, ##41156
17ca4     CC 01 90 1D |  if_a	jmp	#LR__1967
17ca8     10 4E 05 F1 | 	add	fp, #16
17cac     A7 28 02 FB | 	rdlong	local02, fp
17cb0     01 28 06 F1 | 	add	local02, #1
17cb4     A7 28 62 FC | 	wrlong	local02, fp
17cb8     10 4E 85 F1 | 	sub	fp, #16
17cbc     4C FE 9F FD | 	jmp	#LR__1955
17cc0                 | LR__1960
17cc0     10 4E 05 F1 | 	add	fp, #16
17cc4     A7 00 68 FC | 	wrlong	#0, fp
17cc8     10 4E 85 F1 | 	sub	fp, #16
17ccc                 | '    i=0: do
17ccc                 | LR__1961
17ccc     14 4E 05 F1 | 	add	fp, #20
17cd0     A7 00 68 FC | 	wrlong	#0, fp
17cd4     14 4E 85 F1 | 	sub	fp, #20
17cd8                 | '    j=0: do  
17cd8                 | LR__1962
17cd8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17cd8     0C 4E 05 F1 | 	add	fp, #12
17cdc     A7 28 02 FB | 	rdlong	local02, fp
17ce0     0C 4E 85 F1 | 	sub	fp, #12
17ce4     00 04 00 FF 
17ce8     00 28 56 F2 | 	cmps	local02, ##524288 wc
17cec     4C 00 90 3D |  if_ae	jmp	#LR__1963
17cf0     14 4E 05 F1 | 	add	fp, #20
17cf4     A7 28 02 FB | 	rdlong	local02, fp
17cf8     14 27 02 F6 | 	mov	local01, local02
17cfc     4E 00 00 FF 
17d00     B4 E4 05 F1 | 	add	objptr, ##40116
17d04     F2 26 02 F1 | 	add	local01, objptr
17d08     08 4E 85 F1 | 	sub	fp, #8
17d0c     A7 12 02 FB | 	rdlong	arg01, fp
17d10     04 4E 05 F1 | 	add	fp, #4
17d14     A7 18 02 FB | 	rdlong	arg04, fp
17d18     0A 18 66 F0 | 	shl	arg04, #10
17d1c     0C 13 02 F1 | 	add	arg01, arg04
17d20     10 4E 85 F1 | 	sub	fp, #16
17d24     14 13 02 F1 | 	add	arg01, local02
17d28     09 FB C1 FA | 	rdbyte	result1, arg01
17d2c     4E 00 00 FF 
17d30     B4 E4 85 F1 | 	sub	objptr, ##40116
17d34     13 FB 41 FC | 	wrbyte	result1, local01
17d38     48 00 90 FD | 	jmp	#LR__1964
17d3c                 | LR__1963
17d3c     14 4E 05 F1 | 	add	fp, #20
17d40     A7 28 02 FB | 	rdlong	local02, fp
17d44     14 27 02 F6 | 	mov	local01, local02
17d48     4E 00 00 FF 
17d4c     B4 E4 05 F1 | 	add	objptr, ##40116
17d50     F2 26 02 F1 | 	add	local01, objptr
17d54     08 4E 85 F1 | 	sub	fp, #8
17d58     A7 12 02 FB | 	rdlong	arg01, fp
17d5c     04 4E 05 F1 | 	add	fp, #4
17d60     A7 18 02 FB | 	rdlong	arg04, fp
17d64     0A 18 66 F0 | 	shl	arg04, #10
17d68     0C 13 02 F1 | 	add	arg01, arg04
17d6c     10 4E 85 F1 | 	sub	fp, #16
17d70     14 13 02 F1 | 	add	arg01, local02
17d74     4E 00 00 FF 
17d78     B4 E4 85 F1 | 	sub	objptr, ##40116
17d7c     C8 99 B0 FD | 	call	#_pspeek
17d80     13 FB 41 FC | 	wrbyte	result1, local01
17d84                 | LR__1964
17d84     14 4E 05 F1 | 	add	fp, #20
17d88     A7 28 02 FB | 	rdlong	local02, fp
17d8c     01 28 06 F1 | 	add	local02, #1
17d90     A7 28 62 FC | 	wrlong	local02, fp
17d94     14 4E 85 F1 | 	sub	fp, #20
17d98     02 00 00 FF 
17d9c     00 28 56 F2 | 	cmps	local02, ##1024 wc
17da0     2C 00 90 3D |  if_ae	jmp	#LR__1965
17da4     10 4E 05 F1 | 	add	fp, #16
17da8     A7 26 02 FB | 	rdlong	local01, fp
17dac     0A 26 66 F0 | 	shl	local01, #10
17db0     04 4E 05 F1 | 	add	fp, #4
17db4     A7 28 02 FB | 	rdlong	local02, fp
17db8     14 27 02 F1 | 	add	local01, local02
17dbc     0C 4E 85 F1 | 	sub	fp, #12
17dc0     A7 28 02 FB | 	rdlong	local02, fp
17dc4     08 4E 85 F1 | 	sub	fp, #8
17dc8     14 27 5A F2 | 	cmps	local01, local02 wcz
17dcc     08 FF 9F ED |  if_be	jmp	#LR__1962
17dd0                 | LR__1965
17dd0                 | '    put #channel,,block(0),amount, r : getres(channel)=r
17dd0     04 4E 05 F1 | 	add	fp, #4
17dd4     A7 12 02 FB | 	rdlong	arg01, fp
17dd8     4E 00 00 FF 
17ddc     B4 E4 05 F1 | 	add	objptr, ##40116
17de0     F2 16 02 F6 | 	mov	arg03, objptr
17de4     4E 00 00 FF 
17de8     B4 E4 85 F1 | 	sub	objptr, ##40116
17dec     04 4E 05 F1 | 	add	fp, #4
17df0     A7 18 02 FB | 	rdlong	arg04, fp
17df4     08 4E 85 F1 | 	sub	fp, #8
17df8     00 14 06 F6 | 	mov	arg02, #0
17dfc     01 1A 06 F6 | 	mov	arg05, #1
17e00     74 DE B0 FD | 	call	#__system___basic_put
17e04     18 4E 05 F1 | 	add	fp, #24
17e08     A7 FA 61 FC | 	wrlong	result1, fp
17e0c     14 4E 85 F1 | 	sub	fp, #20
17e10     A7 26 02 FB | 	rdlong	local01, fp
17e14     02 26 66 F0 | 	shl	local01, #2
17e18     50 00 00 FF 
17e1c     C4 E4 05 F1 | 	add	objptr, ##41156
17e20     F2 26 02 F1 | 	add	local01, objptr
17e24     13 FB 61 FC | 	wrlong	result1, local01
17e28                 | '    if 1024*i+j>amount then exit loop
17e28     0C 4E 05 F1 | 	add	fp, #12
17e2c     A7 28 02 FB | 	rdlong	local02, fp
17e30     0A 28 66 F0 | 	shl	local02, #10
17e34     04 4E 05 F1 | 	add	fp, #4
17e38     A7 26 02 FB | 	rdlong	local01, fp
17e3c     13 29 02 F1 | 	add	local02, local01
17e40     0C 4E 85 F1 | 	sub	fp, #12
17e44     A7 2A 02 FB | 	rdlong	local03, fp
17e48     08 4E 85 F1 | 	sub	fp, #8
17e4c     15 29 5A F2 | 	cmps	local02, local03 wcz
17e50     50 00 00 FF 
17e54     C4 E4 85 F1 | 	sub	objptr, ##41156
17e58     18 00 90 1D |  if_a	jmp	#LR__1966
17e5c     10 4E 05 F1 | 	add	fp, #16
17e60     A7 28 02 FB | 	rdlong	local02, fp
17e64     01 28 06 F1 | 	add	local02, #1
17e68     A7 28 62 FC | 	wrlong	local02, fp
17e6c     10 4E 85 F1 | 	sub	fp, #16
17e70     58 FE 9F FD | 	jmp	#LR__1961
17e74                 | LR__1966
17e74                 | LR__1967
17e74     A7 F0 03 F6 | 	mov	ptra, fp
17e78     B2 00 A0 FD | 	call	#popregs_
17e7c                 | _do_put_ret
17e7c     2D 00 64 FD | 	ret
17e80                 | 
17e80                 | ' 
17e80                 | ' '-------------------- rad
17e80                 | ' 
17e80                 | ' sub do_rad
17e80                 | _do_rad
17e80     51 00 00 FF 
17e84     E4 E5 05 F1 | 	add	objptr, ##41956
17e88     00 C0 9F FF 
17e8c     F2 00 68 FC | 	wrlong	##1065353216, objptr
17e90     04 E4 05 F1 | 	add	objptr, #4
17e94     00 C0 9F FF 
17e98     F2 00 68 FC | 	wrlong	##1065353216, objptr
17e9c     51 00 00 FF 
17ea0     E8 E5 85 F1 | 	sub	objptr, ##41960
17ea4                 | _do_rad_ret
17ea4     2D 00 64 FD | 	ret
17ea8                 | 
17ea8                 | ' 
17ea8                 | ' '-------------------- rdpin
17ea8                 | ' 
17ea8                 | ' sub do_rdpin
17ea8                 | _do_rdpin
17ea8     00 4A 05 F6 | 	mov	COUNT_, #0
17eac     A8 00 A0 FD | 	call	#pushregs_
17eb0     0C F0 07 F1 | 	add	ptra, #12
17eb4     D4 4C BF FD | 	call	#_pop
17eb8     A7 FA 61 FC | 	wrlong	result1, fp
17ebc     04 4E 05 F1 | 	add	fp, #4
17ec0     A7 FC 61 FC | 	wrlong	result2, fp
17ec4     04 4E 05 F1 | 	add	fp, #4
17ec8     A7 FE 61 FC | 	wrlong	result3, fp
17ecc     08 4E 85 F1 | 	sub	fp, #8
17ed0     A7 12 02 F6 | 	mov	arg01, fp
17ed4     98 4E BF FD | 	call	#_converttoint
17ed8     FD FA 89 FA | 	rdpin	result1, result1
17edc     52 00 00 FF 
17ee0     4C E4 05 F1 | 	add	objptr, ##42060
17ee4     F2 FA 61 FC | 	wrlong	result1, objptr
17ee8     52 00 00 FF 
17eec     4C E4 85 F1 | 	sub	objptr, ##42060
17ef0     08 4E 05 F1 | 	add	fp, #8
17ef4     A7 3A 68 FC | 	wrlong	#29, fp
17ef8     08 4E 85 F1 | 	sub	fp, #8
17efc     A7 08 68 FC | 	wrlong	#4, fp
17f00     A7 12 02 F6 | 	mov	arg01, fp
17f04     1C 4D BF FD | 	call	#_push
17f08     A7 F0 03 F6 | 	mov	ptra, fp
17f0c     B2 00 A0 FD | 	call	#popregs_
17f10                 | _do_rdpin_ret
17f10     2D 00 64 FD | 	ret
17f14                 | 
17f14                 | ' 
17f14                 | ' ' ----------------  read
17f14                 | ' 
17f14                 | ' function read_next_line() as string
17f14                 | _read_next_line
17f14     07 4A 05 F6 | 	mov	COUNT_, #7
17f18     A8 00 A0 FD | 	call	#pushregs_
17f1c                 | ' if dataptr=$7FFFFFFF then return("")
17f1c     50 00 00 FF 
17f20     2C E5 05 F1 | 	add	objptr, ##41260
17f24     F2 26 02 FB | 	rdlong	local01, objptr
17f28     50 00 00 FF 
17f2c     2C E5 85 F1 | 	sub	objptr, ##41260
17f30     FF FF 3F FF 
17f34     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
17f38     A9 01 00 AF 
17f3c     EE FB 05 A6 |  if_e	mov	result1, ##@LR__5843
17f40     BC 01 90 AD |  if_e	jmp	#LR__1977
17f44                 | ' do
17f44                 | LR__1970
17f44     50 00 00 FF 
17f48     08 E5 05 F1 | 	add	objptr, ##41224
17f4c     F2 12 02 F6 | 	mov	arg01, objptr
17f50     24 E4 05 F1 | 	add	objptr, #36
17f54     F2 14 02 FB | 	rdlong	arg02, objptr
17f58     24 16 06 F6 | 	mov	arg03, #36
17f5c     45 00 00 FF 
17f60     60 E4 85 F1 | 	sub	objptr, ##35424
17f64     CC C2 B0 FD | 	call	#_psram_spin2_read1
17f68                 | '  ' print dataptr
17f68                 | '   psram.read1(varptr(dataheader),dataptr,36) 
17f68                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
17f68     45 00 00 FF 
17f6c     3C E4 05 F1 | 	add	objptr, ##35388
17f70     F2 26 02 FB | 	rdlong	local01, objptr
17f74     50 00 00 FF 
17f78     08 E5 85 F1 | 	sub	objptr, ##41224
17f7c     FF FF 7F FF 
17f80     FF 27 0E F2 | 	cmp	local01, ##-1 wz
17f84     50 00 00 5F 
17f88     1C E5 05 51 |  if_ne	add	objptr, ##41244
17f8c     F2 26 02 5B |  if_ne	rdlong	local01, objptr
17f90     10 E4 05 51 |  if_ne	add	objptr, #16
17f94     F2 26 62 5C |  if_ne	wrlong	local01, objptr
17f98     50 00 00 5F 
17f9c     2C E5 85 51 |  if_ne	sub	objptr, ##41260
17fa0     50 00 00 FF 
17fa4     1C E5 05 F1 | 	add	objptr, ##41244
17fa8     F2 26 02 FB | 	rdlong	local01, objptr
17fac     50 00 00 FF 
17fb0     1C E5 85 F1 | 	sub	objptr, ##41244
17fb4     FF FF 3F FF 
17fb8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
17fbc     50 00 00 5F 
17fc0     08 E5 05 51 |  if_ne	add	objptr, ##41224
17fc4     F2 28 02 5B |  if_ne	rdlong	local02, objptr
17fc8     50 00 00 5F 
17fcc     08 E5 85 51 |  if_ne	sub	objptr, ##41224
17fd0     FF FF 7F 5F 
17fd4     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
17fd8     50 00 00 5F 
17fdc     28 E5 05 51 |  if_ne	add	objptr, ##41256
17fe0     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
17fe4     50 00 00 5F 
17fe8     28 E5 85 51 |  if_ne	sub	objptr, ##41256
17fec     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
17ff0     50 FF 9F 5D |  if_ne	jmp	#LR__1970
17ff4                 | ' if dataheader(8)=token_data then 
17ff4     50 00 00 FF 
17ff8     28 E5 05 F1 | 	add	objptr, ##41256
17ffc     F2 26 02 FB | 	rdlong	local01, objptr
18000     50 00 00 FF 
18004     28 E5 85 F1 | 	sub	objptr, ##41256
18008     B7 26 0E F2 | 	cmp	local01, #183 wz
1800c     E0 00 90 5D |  if_ne	jmp	#LR__1975
18010     50 00 00 FF 
18014     10 E5 05 F1 | 	add	objptr, ##41232
18018     F2 26 02 FB | 	rdlong	local01, objptr
1801c     01 00 00 FF 
18020     1C E5 05 F1 | 	add	objptr, ##796
18024     F2 26 62 FC | 	wrlong	local01, objptr
18028     01 00 00 FF 
1802c     18 E5 85 F1 | 	sub	objptr, ##792
18030     F2 2C 02 FB | 	rdlong	local04, objptr
18034     01 00 00 FF 
18038     10 E5 05 F1 | 	add	objptr, ##784
1803c     F2 2C 62 FC | 	wrlong	local04, objptr
18040                 | '  'print "data found at line "; dataheader(0)
18040                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18040     00 2E 06 F6 | 	mov	local05, #0
18044     52 00 00 FF 
18048     24 E4 85 F1 | 	sub	objptr, ##42020
1804c                 | LR__1971
1804c     16 2F 52 F2 | 	cmps	local05, local04 wc
18050     3C 00 90 3D |  if_ae	jmp	#LR__1972
18054     52 00 00 FF 
18058     2C E4 05 F1 | 	add	objptr, ##42028
1805c     F2 12 02 FB | 	rdlong	arg01, objptr
18060     52 00 00 FF 
18064     2C E4 85 F1 | 	sub	objptr, ##42028
18068     17 13 02 F1 | 	add	arg01, local05
1806c     D8 96 B0 FD | 	call	#_pspeek
18070     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
18074     3C F0 B0 FD | 	call	#__system__Chr_S
18078     FD 14 02 F6 | 	mov	arg02, result1
1807c     18 13 02 F6 | 	mov	arg01, local06
18080     4C CE B0 FD | 	call	#__system___string_concat
18084     FD 30 02 F6 | 	mov	local06, result1
18088     01 2E 06 F1 | 	add	local05, #1
1808c     BC FF 9F FD | 	jmp	#LR__1971
18090                 | LR__1972
18090     A9 01 00 FF 
18094     EF 17 06 F6 | 	mov	arg03, ##@LR__5844
18098     01 12 06 F6 | 	mov	arg01, #1
1809c     18 15 02 F6 | 	mov	arg02, local06
180a0     94 F3 B0 FD | 	call	#__system__Instr
180a4     FD 2E 02 F6 | 	mov	local05, result1
180a8     18 13 02 F6 | 	mov	arg01, local06
180ac     09 33 02 F6 | 	mov	local07, arg01
180b0     97 06 48 FB | 	callpa	#(@LR__1974-@LR__1973)>>2,fcache_load_ptr_
180b4                 | LR__1973
180b4     19 FB C9 FA | 	rdbyte	result1, local07 wz
180b8     01 32 06 51 |  if_ne	add	local07, #1
180bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1973
180c0                 | LR__1974
180c0     09 33 82 F1 | 	sub	local07, arg01
180c4     19 15 02 F6 | 	mov	arg02, local07
180c8     17 15 82 F1 | 	sub	arg02, local05
180cc     04 14 86 F1 | 	sub	arg02, #4
180d0     18 13 02 F6 | 	mov	arg01, local06
180d4     A0 EE B0 FD | 	call	#__system__Right_S
180d8     FD 12 02 F6 | 	mov	arg01, result1
180dc     A0 F2 B0 FD | 	call	#__system__RTrim_S
180e0     FD 12 02 F6 | 	mov	arg01, result1
180e4     D8 F1 B0 FD | 	call	#__system__LTrim_S
180e8     FD 30 02 F6 | 	mov	local06, result1
180ec     0C 00 90 FD | 	jmp	#LR__1976
180f0                 | LR__1975
180f0                 | '   return ("") 'todo proper err
180f0     A9 01 00 FF 
180f4     F4 FB 05 F6 | 	mov	result1, ##@LR__5845
180f8     04 00 90 FD | 	jmp	#LR__1977
180fc                 | LR__1976
180fc                 | ' return readline
180fc     18 FB 01 F6 | 	mov	result1, local06
18100                 | LR__1977
18100     A7 F0 03 F6 | 	mov	ptra, fp
18104     B2 00 A0 FD | 	call	#popregs_
18108                 | _read_next_line_ret
18108     2D 00 64 FD | 	ret
1810c                 | 
1810c                 | ' 
1810c                 | ' sub do_read
1810c                 | _do_read
1810c     11 4A 05 F6 | 	mov	COUNT_, #17
18110     A8 00 A0 FD | 	call	#pushregs_
18114     58 F1 07 F1 | 	add	ptra, #344
18118     4A 00 00 FF 
1811c     80 E4 05 F1 | 	add	objptr, ##38016
18120     F2 FE 01 FB | 	rdlong	result3, objptr
18124     FF FC 01 F6 | 	mov	result2, result3
18128     01 FC 65 F0 | 	shl	result2, #1
1812c     FF FC 01 F1 | 	add	result2, result3
18130     02 FC 65 F0 | 	shl	result2, #2
18134     03 00 00 FF 
18138     04 E4 85 F1 | 	sub	objptr, ##1540
1813c     F2 FC 01 F1 | 	add	result2, objptr
18140     FE FC 01 FB | 	rdlong	result2, result2
18144     08 4E 05 F1 | 	add	fp, #8
18148     A7 FC 61 FC | 	wrlong	result2, fp
1814c                 | ' 
1814c                 | ' 
1814c                 | ' numpar=compiledline(lineptr_e).result.uresult
1814c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1814c     08 4E 85 F1 | 	sub	fp, #8
18150     01 FC 15 F2 | 	cmp	result2, #1 wc
18154     47 00 00 FF 
18158     7C E4 85 F1 | 	sub	objptr, ##36476
1815c     14 00 90 CD |  if_b	jmp	#LR__1980
18160     08 4E 05 F1 | 	add	fp, #8
18164     A7 FC 01 FB | 	rdlong	result2, fp
18168     08 4E 85 F1 | 	sub	fp, #8
1816c     41 FC 15 F2 | 	cmp	result2, #65 wc
18170     50 00 90 CD |  if_b	jmp	#LR__1981
18174                 | LR__1980
18174     00 12 06 F6 | 	mov	arg01, #0
18178     20 2A B1 FD | 	call	#__system___getiolock_0595
1817c     FD 12 02 F6 | 	mov	arg01, result1
18180     F0 CC B0 FD | 	call	#__system___lockmem
18184     A9 01 00 FF 
18188     F5 15 06 F6 | 	mov	arg02, ##@LR__5846
1818c     00 12 06 F6 | 	mov	arg01, #0
18190     00 16 06 F6 | 	mov	arg03, #0
18194     D0 D9 B0 FD | 	call	#__system___basic_print_string
18198     00 12 06 F6 | 	mov	arg01, #0
1819c     FC 29 B1 FD | 	call	#__system___getiolock_0595
181a0     FD 00 68 FC | 	wrlong	#0, result1
181a4     50 00 00 FF 
181a8     F0 E4 05 F1 | 	add	objptr, ##41200
181ac     F2 14 02 FB | 	rdlong	arg02, objptr
181b0     50 00 00 FF 
181b4     F0 E4 85 F1 | 	sub	objptr, ##41200
181b8     27 12 06 F6 | 	mov	arg01, #39
181bc     10 93 B0 FD | 	call	#_printerror
181c0     58 0C 90 FD | 	jmp	#LR__2029
181c4                 | LR__1981
181c4     08 4E 05 F1 | 	add	fp, #8
181c8     A7 18 02 FB | 	rdlong	arg04, fp
181cc     01 18 86 F1 | 	sub	arg04, #1
181d0     28 4F 05 F1 | 	add	fp, #296
181d4     A7 18 62 FC | 	wrlong	arg04, fp
181d8     30 4F 85 F1 | 	sub	fp, #304
181dc                 | ' i=numpar-1
181dc                 | ' if readline="" then readline=read_next_line() ': print readline
181dc     52 00 00 FF 
181e0     18 E4 05 F1 | 	add	objptr, ##42008
181e4     F2 12 02 FB | 	rdlong	arg01, objptr
181e8     52 00 00 FF 
181ec     18 E4 85 F1 | 	sub	objptr, ##42008
181f0     A9 01 00 FF 
181f4     FF 15 06 F6 | 	mov	arg02, ##@LR__5847
181f8     A0 CC B0 FD | 	call	#__system___string_cmp
181fc     00 FA 0D F2 | 	cmp	result1, #0 wz
18200     18 00 90 5D |  if_ne	jmp	#LR__1982
18204     0C FD BF FD | 	call	#_read_next_line
18208     52 00 00 FF 
1820c     18 E4 05 F1 | 	add	objptr, ##42008
18210     F2 FA 61 FC | 	wrlong	result1, objptr
18214     52 00 00 FF 
18218     18 E4 85 F1 | 	sub	objptr, ##42008
1821c                 | LR__1982
1821c                 | ' if readline=""  then print "No more data" : return ' error
1821c     52 00 00 FF 
18220     18 E4 05 F1 | 	add	objptr, ##42008
18224     F2 12 02 FB | 	rdlong	arg01, objptr
18228     52 00 00 FF 
1822c     18 E4 85 F1 | 	sub	objptr, ##42008
18230     AA 01 00 FF 
18234     00 14 06 F6 | 	mov	arg02, ##@LR__5848
18238     60 CC B0 FD | 	call	#__system___string_cmp
1823c     00 FA 0D F2 | 	cmp	result1, #0 wz
18240     44 00 90 5D |  if_ne	jmp	#LR__1983
18244     00 12 06 F6 | 	mov	arg01, #0
18248     50 29 B1 FD | 	call	#__system___getiolock_0595
1824c     FD 12 02 F6 | 	mov	arg01, result1
18250     20 CC B0 FD | 	call	#__system___lockmem
18254     AA 01 00 FF 
18258     01 14 06 F6 | 	mov	arg02, ##@LR__5849
1825c     00 12 06 F6 | 	mov	arg01, #0
18260     00 16 06 F6 | 	mov	arg03, #0
18264     00 D9 B0 FD | 	call	#__system___basic_print_string
18268     00 12 06 F6 | 	mov	arg01, #0
1826c     0A 14 06 F6 | 	mov	arg02, #10
18270     00 16 06 F6 | 	mov	arg03, #0
18274     98 D8 B0 FD | 	call	#__system___basic_print_char
18278     00 12 06 F6 | 	mov	arg01, #0
1827c     1C 29 B1 FD | 	call	#__system___getiolock_0595
18280     FD 00 68 FC | 	wrlong	#0, result1
18284     94 0B 90 FD | 	jmp	#LR__2029
18288                 | LR__1983
18288     08 4E 05 F1 | 	add	fp, #8
1828c     A7 26 02 FB | 	rdlong	local01, fp
18290     01 26 86 F1 | 	sub	local01, #1
18294     28 4F 05 F1 | 	add	fp, #296
18298     A7 26 62 FC | 	wrlong	local01, fp
1829c     30 4F 85 F1 | 	sub	fp, #304
182a0                 | ' 
182a0                 | ' 
182a0                 | ' i=numpar-1
182a0                 | ' do
182a0                 | LR__1984
182a0                 | '  
182a0                 | '   do
182a0                 | LR__1985
182a0     52 00 00 FF 
182a4     18 E4 05 F1 | 	add	objptr, ##42008
182a8     F2 14 02 FB | 	rdlong	arg02, objptr
182ac     52 00 00 FF 
182b0     18 E4 85 F1 | 	sub	objptr, ##42008
182b4     AA 01 00 FF 
182b8     0E 16 06 F6 | 	mov	arg03, ##@LR__5850
182bc     01 12 06 F6 | 	mov	arg01, #1
182c0     74 F1 B0 FD | 	call	#__system__Instr
182c4     0C 4E 05 F1 | 	add	fp, #12
182c8     A7 FA 61 FC | 	wrlong	result1, fp
182cc                 | '     
182cc                 | '     comma=instr(1,readline,",")  
182cc                 | '       if comma>0  then 
182cc     0C 4E 85 F1 | 	sub	fp, #12
182d0     01 FA 15 F2 | 	cmp	result1, #1 wc
182d4     98 00 90 CD |  if_b	jmp	#LR__1988
182d8     52 00 00 FF 
182dc     18 E4 05 F1 | 	add	objptr, ##42008
182e0     F2 12 02 FB | 	rdlong	arg01, objptr
182e4     52 00 00 FF 
182e8     18 E4 85 F1 | 	sub	objptr, ##42008
182ec     0C 4E 05 F1 | 	add	fp, #12
182f0     A7 14 02 FB | 	rdlong	arg02, fp
182f4     0C 4E 85 F1 | 	sub	fp, #12
182f8     01 14 86 F1 | 	sub	arg02, #1
182fc     F0 EB B0 FD | 	call	#__system__Left_S
18300     04 4E 05 F1 | 	add	fp, #4
18304     A7 FA 61 FC | 	wrlong	result1, fp
18308     04 4E 85 F1 | 	sub	fp, #4
1830c     52 00 00 FF 
18310     18 E4 05 F1 | 	add	objptr, ##42008
18314     F2 12 02 FB | 	rdlong	arg01, objptr
18318     09 27 02 F6 | 	mov	local01, arg01
1831c     52 00 00 FF 
18320     18 E4 85 F1 | 	sub	objptr, ##42008
18324     09 29 02 F6 | 	mov	local02, arg01
18328     97 06 48 FB | 	callpa	#(@LR__1987-@LR__1986)>>2,fcache_load_ptr_
1832c                 | LR__1986
1832c     14 FB C9 FA | 	rdbyte	result1, local02 wz
18330     01 28 06 51 |  if_ne	add	local02, #1
18334     F4 FF 9F 5D |  if_ne	jmp	#LR__1986
18338                 | LR__1987
18338     09 29 82 F1 | 	sub	local02, arg01
1833c     14 15 02 F6 | 	mov	arg02, local02
18340     0C 4E 05 F1 | 	add	fp, #12
18344     A7 18 02 FB | 	rdlong	arg04, fp
18348     0C 4E 85 F1 | 	sub	fp, #12
1834c     0C 15 82 F1 | 	sub	arg02, arg04
18350     13 13 02 F6 | 	mov	arg01, local01
18354     20 EC B0 FD | 	call	#__system__Right_S
18358     52 00 00 FF 
1835c     18 E4 05 F1 | 	add	objptr, ##42008
18360     F2 FA 61 FC | 	wrlong	result1, objptr
18364     52 00 00 FF 
18368     18 E4 85 F1 | 	sub	objptr, ##42008
1836c     48 00 90 FD | 	jmp	#LR__1989
18370                 | LR__1988
18370     52 00 00 FF 
18374     18 E4 05 F1 | 	add	objptr, ##42008
18378     F2 12 02 FB | 	rdlong	arg01, objptr
1837c     52 00 00 FF 
18380     18 E4 85 F1 | 	sub	objptr, ##42008
18384     F8 EF B0 FD | 	call	#__system__RTrim_S
18388     FD 12 02 F6 | 	mov	arg01, result1
1838c     30 EF B0 FD | 	call	#__system__LTrim_S
18390     04 4E 05 F1 | 	add	fp, #4
18394     A7 FA 61 FC | 	wrlong	result1, fp
18398     04 4E 85 F1 | 	sub	fp, #4
1839c     AA 01 00 FF 
183a0     10 26 06 F6 | 	mov	local01, ##@LR__5851
183a4     52 00 00 FF 
183a8     18 E4 05 F1 | 	add	objptr, ##42008
183ac     F2 26 62 FC | 	wrlong	local01, objptr
183b0     52 00 00 FF 
183b4     18 E4 85 F1 | 	sub	objptr, ##42008
183b8                 | LR__1989
183b8     30 4F 05 F1 | 	add	fp, #304
183bc     A7 26 02 FB | 	rdlong	local01, fp
183c0     02 26 66 F0 | 	shl	local01, #2
183c4     04 4F 85 F1 | 	sub	fp, #260
183c8     A7 26 02 F1 | 	add	local01, fp
183cc     28 4E 85 F1 | 	sub	fp, #40
183d0     A7 FA 01 FB | 	rdlong	result1, fp
183d4     13 FB 61 FC | 	wrlong	result1, local01
183d8     2C 4F 05 F1 | 	add	fp, #300
183dc     A7 26 02 FB | 	rdlong	local01, fp
183e0     01 26 86 F1 | 	sub	local01, #1
183e4     A7 26 62 FC | 	wrlong	local01, fp
183e8     30 4F 85 F1 | 	sub	fp, #304
183ec                 | ' 
183ec                 | '      args(i)=part$  
183ec                 | '      i=i-1
183ec                 | '     if readline="" then readline=read_next_line() : if readline=""  then qqqqq=i
183ec     52 00 00 FF 
183f0     18 E4 05 F1 | 	add	objptr, ##42008
183f4     F2 12 02 FB | 	rdlong	arg01, objptr
183f8     52 00 00 FF 
183fc     18 E4 85 F1 | 	sub	objptr, ##42008
18400     AA 01 00 FF 
18404     11 14 06 F6 | 	mov	arg02, ##@LR__5852
18408     90 CA B0 FD | 	call	#__system___string_cmp
1840c     00 FA 0D F2 | 	cmp	result1, #0 wz
18410     40 00 90 5D |  if_ne	jmp	#LR__1990
18414     FC FA BF FD | 	call	#_read_next_line
18418     52 00 00 FF 
1841c     18 E4 05 F1 | 	add	objptr, ##42008
18420     F2 FA 61 FC | 	wrlong	result1, objptr
18424     52 00 00 FF 
18428     18 E4 85 F1 | 	sub	objptr, ##42008
1842c     FD 12 02 F6 | 	mov	arg01, result1
18430     AA 01 00 FF 
18434     12 14 06 F6 | 	mov	arg02, ##@LR__5853
18438     60 CA B0 FD | 	call	#__system___string_cmp
1843c     00 FA 0D F2 | 	cmp	result1, #0 wz
18440     30 4F 05 A1 |  if_e	add	fp, #304
18444     A7 26 02 AB |  if_e	rdlong	local01, fp
18448     14 4E 05 A1 |  if_e	add	fp, #20
1844c     A7 26 62 AC |  if_e	wrlong	local01, fp
18450     44 4F 85 A1 |  if_e	sub	fp, #324
18454                 | LR__1990
18454     30 4F 05 F1 | 	add	fp, #304
18458     A7 26 02 FB | 	rdlong	local01, fp
1845c     30 4F 85 F1 | 	sub	fp, #304
18460     00 26 56 F2 | 	cmps	local01, #0 wc
18464     28 00 90 CD |  if_b	jmp	#LR__1991
18468     52 00 00 FF 
1846c     18 E4 05 F1 | 	add	objptr, ##42008
18470     F2 12 02 FB | 	rdlong	arg01, objptr
18474     52 00 00 FF 
18478     18 E4 85 F1 | 	sub	objptr, ##42008
1847c     AA 01 00 FF 
18480     13 14 06 F6 | 	mov	arg02, ##@LR__5854
18484     14 CA B0 FD | 	call	#__system___string_cmp
18488     00 FA 0D F2 | 	cmp	result1, #0 wz
1848c     10 FE 9F 5D |  if_ne	jmp	#LR__1985
18490                 | LR__1991
18490     30 4F 05 F1 | 	add	fp, #304
18494     A7 18 02 FB | 	rdlong	arg04, fp
18498     30 4F 85 F1 | 	sub	fp, #304
1849c     00 18 56 F2 | 	cmps	arg04, #0 wc
184a0     FC FD 9F 3D |  if_ae	jmp	#LR__1984
184a4                 | ' print qqqqq
184a4     00 12 06 F6 | 	mov	arg01, #0
184a8     F0 26 B1 FD | 	call	#__system___getiolock_0595
184ac     FD 12 02 F6 | 	mov	arg01, result1
184b0     C0 C9 B0 FD | 	call	#__system___lockmem
184b4     44 4F 05 F1 | 	add	fp, #324
184b8     A7 14 02 FB | 	rdlong	arg02, fp
184bc     44 4F 85 F1 | 	sub	fp, #324
184c0     00 12 06 F6 | 	mov	arg01, #0
184c4     00 16 06 F6 | 	mov	arg03, #0
184c8     0A 18 06 F6 | 	mov	arg04, #10
184cc     DC D6 B0 FD | 	call	#__system___basic_print_integer
184d0     00 12 06 F6 | 	mov	arg01, #0
184d4     0A 14 06 F6 | 	mov	arg02, #10
184d8     00 16 06 F6 | 	mov	arg03, #0
184dc     30 D6 B0 FD | 	call	#__system___basic_print_char
184e0     00 12 06 F6 | 	mov	arg01, #0
184e4     B4 26 B1 FD | 	call	#__system___getiolock_0595
184e8     FD 00 68 FC | 	wrlong	#0, result1
184ec                 | ' for i=0 to numpar-1
184ec     30 4F 05 F1 | 	add	fp, #304
184f0     A7 00 68 FC | 	wrlong	#0, fp
184f4     28 4F 85 F1 | 	sub	fp, #296
184f8     A7 2A 02 FB | 	rdlong	local03, fp
184fc     08 4E 85 F1 | 	sub	fp, #8
18500                 | LR__1992
18500     30 4F 05 F1 | 	add	fp, #304
18504     A7 2C 02 FB | 	rdlong	local04, fp
18508     30 4F 85 F1 | 	sub	fp, #304
1850c     16 27 02 F6 | 	mov	local01, local04
18510     15 27 52 F2 | 	cmps	local01, local03 wc
18514     04 09 90 3D |  if_ae	jmp	#LR__2028
18518                 | ' 
18518                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18518     30 4F 05 F1 | 	add	fp, #304
1851c     A7 18 02 FB | 	rdlong	arg04, fp
18520     02 18 66 F0 | 	shl	arg04, #2
18524     04 4F 85 F1 | 	sub	fp, #260
18528     A7 18 02 F1 | 	add	arg04, fp
1852c     0C 13 02 FB | 	rdlong	arg01, arg04
18530     2C 4E 85 F1 | 	sub	fp, #44
18534     70 DE BE FD | 	call	#_isnum
18538     FD 2E 02 F6 | 	mov	local05, result1
1853c     30 4F 05 F1 | 	add	fp, #304
18540     A7 18 02 FB | 	rdlong	arg04, fp
18544     02 18 66 F0 | 	shl	arg04, #2
18548     04 4F 85 F1 | 	sub	fp, #260
1854c     A7 30 02 F6 | 	mov	local06, fp
18550     A7 18 02 F1 | 	add	arg04, fp
18554     0C 13 02 FB | 	rdlong	arg01, arg04
18558     2C 4E 85 F1 | 	sub	fp, #44
1855c     34 E2 BE FD | 	call	#_isint
18560     FD 2E 2A F5 | 	andn	local05, result1 wz
18564     52 00 00 5F 
18568     4C E4 05 51 |  if_ne	add	objptr, ##42060
1856c     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
18570     52 00 00 5F 
18574     4C E4 85 51 |  if_ne	sub	objptr, ##42060
18578                 | '   if isint(args(i)) then r=result_int 
18578     30 4F 05 F1 | 	add	fp, #304
1857c     A7 2E 02 FB | 	rdlong	local05, fp
18580     02 2E 66 F0 | 	shl	local05, #2
18584     04 4F 85 F1 | 	sub	fp, #260
18588     A7 2E 02 F1 | 	add	local05, fp
1858c     17 13 02 FB | 	rdlong	arg01, local05
18590     2C 4E 85 F1 | 	sub	fp, #44
18594     FC E1 BE FD | 	call	#_isint
18598     00 FA 0D F2 | 	cmp	result1, #0 wz
1859c     52 00 00 5F 
185a0     4C E4 05 51 |  if_ne	add	objptr, ##42060
185a4     F2 38 68 5C |  if_ne	wrlong	#28, objptr
185a8     52 00 00 5F 
185ac     4C E4 85 51 |  if_ne	sub	objptr, ##42060
185b0                 | '   if isdec(args(i)) then r=result_uint 
185b0     30 4F 05 F1 | 	add	fp, #304
185b4     A7 2E 02 FB | 	rdlong	local05, fp
185b8     02 2E 66 F0 | 	shl	local05, #2
185bc     04 4F 85 F1 | 	sub	fp, #260
185c0     A7 2E 02 F1 | 	add	local05, fp
185c4     17 13 02 FB | 	rdlong	arg01, local05
185c8     2C 4E 85 F1 | 	sub	fp, #44
185cc     68 E4 BE FD | 	call	#_isdec
185d0     00 FA 0D F2 | 	cmp	result1, #0 wz
185d4     52 00 00 5F 
185d8     4C E4 05 51 |  if_ne	add	objptr, ##42060
185dc     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
185e0     52 00 00 5F 
185e4     4C E4 85 51 |  if_ne	sub	objptr, ##42060
185e8                 | '   if not isnum(args(i)) then 
185e8     30 4F 05 F1 | 	add	fp, #304
185ec     A7 2E 02 FB | 	rdlong	local05, fp
185f0     17 33 02 F6 | 	mov	local07, local05
185f4     02 32 66 F0 | 	shl	local07, #2
185f8     04 4F 85 F1 | 	sub	fp, #260
185fc     A7 34 02 F6 | 	mov	local08, fp
18600     A7 32 02 F1 | 	add	local07, fp
18604     19 13 02 FB | 	rdlong	arg01, local07
18608     2C 4E 85 F1 | 	sub	fp, #44
1860c     98 DD BE FD | 	call	#_isnum
18610     FD FA 21 F6 | 	not	result1, result1
18614     00 FA 0D F2 | 	cmp	result1, #0 wz
18618     44 01 90 AD |  if_e	jmp	#LR__1997
1861c     52 00 00 FF 
18620     4C E4 05 F1 | 	add	objptr, ##42060
18624     F2 56 68 FC | 	wrlong	#43, objptr
18628     52 00 00 FF 
1862c     4C E4 85 F1 | 	sub	objptr, ##42060
18630     04 4E 05 F1 | 	add	fp, #4
18634     A7 12 02 FB | 	rdlong	arg01, fp
18638     04 4E 85 F1 | 	sub	fp, #4
1863c     09 29 02 F6 | 	mov	local02, arg01
18640     97 06 48 FB | 	callpa	#(@LR__1994-@LR__1993)>>2,fcache_load_ptr_
18644                 | LR__1993
18644     14 FB C9 FA | 	rdbyte	result1, local02 wz
18648     01 28 06 51 |  if_ne	add	local02, #1
1864c     F4 FF 9F 5D |  if_ne	jmp	#LR__1993
18650                 | LR__1994
18650     09 29 82 F1 | 	sub	local02, arg01
18654     14 2F 02 F6 | 	mov	local05, local02
18658     38 4F 05 F1 | 	add	fp, #312
1865c     A7 2E 62 FC | 	wrlong	local05, fp
18660     51 00 00 FF 
18664     D4 E5 05 F1 | 	add	objptr, ##41940
18668     F2 12 02 FB | 	rdlong	arg01, objptr
1866c     17 13 82 F1 | 	sub	arg01, local05
18670     04 12 86 F1 | 	sub	arg01, #4
18674     03 12 26 F5 | 	andn	arg01, #3
18678     F2 12 62 FC | 	wrlong	arg01, objptr
1867c     51 00 00 FF 
18680     D4 E5 85 F1 | 	sub	objptr, ##41940
18684     A7 14 02 FB | 	rdlong	arg02, fp
18688     38 4F 85 F1 | 	sub	fp, #312
1868c     E0 8F B0 FD | 	call	#_pslpoke
18690                 | '     pslpoke memtop,l
18690                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
18690     34 4F 05 F1 | 	add	fp, #308
18694     A7 02 68 FC | 	wrlong	#1, fp
18698     04 4E 05 F1 | 	add	fp, #4
1869c     A7 36 02 FB | 	rdlong	local09, fp
186a0     38 4F 85 F1 | 	sub	fp, #312
186a4     01 36 06 F1 | 	add	local09, #1
186a8                 | LR__1995
186a8     34 4F 05 F1 | 	add	fp, #308
186ac     A7 38 02 FB | 	rdlong	local10, fp
186b0     34 4F 85 F1 | 	sub	fp, #308
186b4     1B 39 52 F2 | 	cmps	local10, local09 wc
186b8     84 00 90 3D |  if_ae	jmp	#LR__1996
186bc     51 00 00 FF 
186c0     D4 E5 05 F1 | 	add	objptr, ##41940
186c4     F2 2E 02 FB | 	rdlong	local05, objptr
186c8     51 00 00 FF 
186cc     D4 E5 85 F1 | 	sub	objptr, ##41940
186d0     03 2E 06 F1 | 	add	local05, #3
186d4     34 4F 05 F1 | 	add	fp, #308
186d8     A7 3A 02 FB | 	rdlong	local11, fp
186dc     1D 2F 02 F1 | 	add	local05, local11
186e0     04 4E 85 F1 | 	sub	fp, #4
186e4     A7 3C 02 FB | 	rdlong	local12, fp
186e8     02 3C 66 F0 | 	shl	local12, #2
186ec     04 4F 85 F1 | 	sub	fp, #260
186f0     A7 3E 02 F6 | 	mov	local13, fp
186f4     A7 3C 02 F1 | 	add	local12, fp
186f8     1E 13 02 FB | 	rdlong	arg01, local12
186fc     2C 4E 85 F1 | 	sub	fp, #44
18700     01 40 06 F6 | 	mov	local14, #1
18704     1D 15 02 F6 | 	mov	arg02, local11
18708     01 16 06 F6 | 	mov	arg03, #1
1870c     F8 E8 B0 FD | 	call	#__system__Mid_S
18710     FD 14 C2 FA | 	rdbyte	arg02, result1
18714     17 13 02 F6 | 	mov	arg01, local05
18718     E4 8F B0 FD | 	call	#_pspoke
1871c     34 4F 05 F1 | 	add	fp, #308
18720     A7 32 02 FB | 	rdlong	local07, fp
18724     19 2F 02 F6 | 	mov	local05, local07
18728     19 31 02 F6 | 	mov	local06, local07
1872c     18 35 02 F6 | 	mov	local08, local06
18730     01 34 06 F1 | 	add	local08, #1
18734     A7 34 62 FC | 	wrlong	local08, fp
18738     34 4F 85 F1 | 	sub	fp, #308
1873c     68 FF 9F FD | 	jmp	#LR__1995
18740                 | LR__1996
18740     51 00 00 FF 
18744     D4 E5 05 F1 | 	add	objptr, ##41940
18748     F2 38 02 FB | 	rdlong	local10, objptr
1874c     51 00 00 FF 
18750     D4 E5 85 F1 | 	sub	objptr, ##41940
18754     10 4E 05 F1 | 	add	fp, #16
18758     A7 38 62 FC | 	wrlong	local10, fp
1875c     10 4E 85 F1 | 	sub	fp, #16
18760                 | LR__1997
18760     28 44 BF FD | 	call	#_pop
18764     FE 38 02 F6 | 	mov	local10, result2
18768     FF 42 02 F6 | 	mov	local15, result3
1876c     1C 4E 05 F1 | 	add	fp, #28
18770     A7 FA 61 FC | 	wrlong	result1, fp
18774     04 4E 05 F1 | 	add	fp, #4
18778     A7 38 62 FC | 	wrlong	local10, fp
1877c     04 4E 05 F1 | 	add	fp, #4
18780     A7 42 62 FC | 	wrlong	local15, fp
18784     04 4E 85 F1 | 	sub	fp, #4
18788     A7 44 02 FB | 	rdlong	local16, fp
1878c     0C 4E 85 F1 | 	sub	fp, #12
18790     A7 44 62 FC | 	wrlong	local16, fp
18794                 | '   t1=pop() : vartype=t1.result.twowords(1)
18794                 | '   select case vartype
18794     14 4E 85 F1 | 	sub	fp, #20
18798     22 47 0A F6 | 	mov	local17, local16 wz
1879c     64 00 90 AD |  if_e	jmp	#LR__1998
187a0     00 47 0E F2 | 	cmp	local17, #256 wz
187a4     6C 00 90 AD |  if_e	jmp	#LR__1999
187a8     01 47 0E F2 | 	cmp	local17, #257 wz
187ac     74 00 90 AD |  if_e	jmp	#LR__2000
187b0     02 47 0E F2 | 	cmp	local17, #258 wz
187b4     7C 00 90 AD |  if_e	jmp	#LR__2001
187b8     03 47 0E F2 | 	cmp	local17, #259 wz
187bc     84 00 90 AD |  if_e	jmp	#LR__2002
187c0     04 47 0E F2 | 	cmp	local17, #260 wz
187c4     8C 00 90 AD |  if_e	jmp	#LR__2003
187c8     05 47 0E F2 | 	cmp	local17, #261 wz
187cc     94 00 90 AD |  if_e	jmp	#LR__2004
187d0     06 47 0E F2 | 	cmp	local17, #262 wz
187d4     9C 00 90 AD |  if_e	jmp	#LR__2005
187d8     07 47 0E F2 | 	cmp	local17, #263 wz
187dc     A4 00 90 AD |  if_e	jmp	#LR__2006
187e0     08 47 0E F2 | 	cmp	local17, #264 wz
187e4     AC 00 90 AD |  if_e	jmp	#LR__2007
187e8     09 47 0E F2 | 	cmp	local17, #265 wz
187ec     B4 00 90 AD |  if_e	jmp	#LR__2008
187f0     0A 47 0E F2 | 	cmp	local17, #266 wz
187f4     BC 00 90 AD |  if_e	jmp	#LR__2009
187f8     0B 47 0E F2 | 	cmp	local17, #267 wz
187fc     C4 00 90 AD |  if_e	jmp	#LR__2010
18800     D0 00 90 FD | 	jmp	#LR__2011
18804                 | LR__1998
18804     18 4E 05 F1 | 	add	fp, #24
18808     A7 18 68 FC | 	wrlong	#12, fp
1880c     18 4E 85 F1 | 	sub	fp, #24
18810     CC 00 90 FD | 	jmp	#LR__2012
18814                 | LR__1999
18814     18 4E 05 F1 | 	add	fp, #24
18818     A7 18 68 FC | 	wrlong	#12, fp
1881c     18 4E 85 F1 | 	sub	fp, #24
18820     BC 00 90 FD | 	jmp	#LR__2012
18824                 | LR__2000
18824     18 4E 05 F1 | 	add	fp, #24
18828     A7 02 68 FC | 	wrlong	#1, fp
1882c     18 4E 85 F1 | 	sub	fp, #24
18830     AC 00 90 FD | 	jmp	#LR__2012
18834                 | LR__2001
18834     18 4E 05 F1 | 	add	fp, #24
18838     A7 02 68 FC | 	wrlong	#1, fp
1883c     18 4E 85 F1 | 	sub	fp, #24
18840     9C 00 90 FD | 	jmp	#LR__2012
18844                 | LR__2002
18844     18 4E 05 F1 | 	add	fp, #24
18848     A7 04 68 FC | 	wrlong	#2, fp
1884c     18 4E 85 F1 | 	sub	fp, #24
18850     8C 00 90 FD | 	jmp	#LR__2012
18854                 | LR__2003
18854     18 4E 05 F1 | 	add	fp, #24
18858     A7 04 68 FC | 	wrlong	#2, fp
1885c     18 4E 85 F1 | 	sub	fp, #24
18860     7C 00 90 FD | 	jmp	#LR__2012
18864                 | LR__2004
18864     18 4E 05 F1 | 	add	fp, #24
18868     A7 08 68 FC | 	wrlong	#4, fp
1886c     18 4E 85 F1 | 	sub	fp, #24
18870     6C 00 90 FD | 	jmp	#LR__2012
18874                 | LR__2005
18874     18 4E 05 F1 | 	add	fp, #24
18878     A7 08 68 FC | 	wrlong	#4, fp
1887c     18 4E 85 F1 | 	sub	fp, #24
18880     5C 00 90 FD | 	jmp	#LR__2012
18884                 | LR__2006
18884     18 4E 05 F1 | 	add	fp, #24
18888     A7 10 68 FC | 	wrlong	#8, fp
1888c     18 4E 85 F1 | 	sub	fp, #24
18890     4C 00 90 FD | 	jmp	#LR__2012
18894                 | LR__2007
18894     18 4E 05 F1 | 	add	fp, #24
18898     A7 10 68 FC | 	wrlong	#8, fp
1889c     18 4E 85 F1 | 	sub	fp, #24
188a0     3C 00 90 FD | 	jmp	#LR__2012
188a4                 | LR__2008
188a4     18 4E 05 F1 | 	add	fp, #24
188a8     A7 0C 68 FC | 	wrlong	#6, fp
188ac     18 4E 85 F1 | 	sub	fp, #24
188b0     2C 00 90 FD | 	jmp	#LR__2012
188b4                 | LR__2009
188b4     18 4E 05 F1 | 	add	fp, #24
188b8     A7 10 68 FC | 	wrlong	#8, fp
188bc     18 4E 85 F1 | 	sub	fp, #24
188c0     1C 00 90 FD | 	jmp	#LR__2012
188c4                 | LR__2010
188c4     18 4E 05 F1 | 	add	fp, #24
188c8     A7 0A 68 FC | 	wrlong	#5, fp
188cc     18 4E 85 F1 | 	sub	fp, #24
188d0     0C 00 90 FD | 	jmp	#LR__2012
188d4                 | LR__2011
188d4     18 4E 05 F1 | 	add	fp, #24
188d8     A7 18 68 FC | 	wrlong	#12, fp
188dc     18 4E 85 F1 | 	sub	fp, #24
188e0                 | LR__2012
188e0                 | '   if esize=12 andalso t1.result.uresult<$80000 then
188e0     18 4E 05 F1 | 	add	fp, #24
188e4     A7 44 02 FB | 	rdlong	local16, fp
188e8     18 4E 85 F1 | 	sub	fp, #24
188ec     0C 44 0E F2 | 	cmp	local16, #12 wz
188f0     74 01 90 5D |  if_ne	jmp	#LR__2017
188f4     1C 4E 05 F1 | 	add	fp, #28
188f8     A7 2E 02 FB | 	rdlong	local05, fp
188fc     1C 4E 85 F1 | 	sub	fp, #28
18900     00 04 00 FF 
18904     00 2E 16 F2 | 	cmp	local05, ##524288 wc
18908     5C 01 90 3D |  if_ae	jmp	#LR__2017
1890c                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
1890c     52 00 00 FF 
18910     4C E4 05 F1 | 	add	objptr, ##42060
18914     F2 44 02 FB | 	rdlong	local16, objptr
18918     52 00 00 FF 
1891c     4C E4 85 F1 | 	sub	objptr, ##42060
18920     1C 44 0E F2 | 	cmp	local16, #28 wz
18924     38 00 90 5D |  if_ne	jmp	#LR__2013
18928     1C 4E 05 F1 | 	add	fp, #28
1892c     A7 44 02 FB | 	rdlong	local16, fp
18930     14 4F 05 F1 | 	add	fp, #276
18934     A7 2E 02 FB | 	rdlong	local05, fp
18938     17 33 02 F6 | 	mov	local07, local05
1893c     02 32 66 F0 | 	shl	local07, #2
18940     04 4F 85 F1 | 	sub	fp, #260
18944     A7 34 02 F6 | 	mov	local08, fp
18948     A7 32 02 F1 | 	add	local07, fp
1894c     19 13 02 FB | 	rdlong	arg01, local07
18950     00 14 06 F6 | 	mov	arg02, #0
18954     2C 4E 85 F1 | 	sub	fp, #44
18958     08 FA B0 FD | 	call	#__system____builtin_atoi
1895c     22 FB 61 FC | 	wrlong	result1, local16
18960                 | LR__2013
18960                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
18960     52 00 00 FF 
18964     4C E4 05 F1 | 	add	objptr, ##42060
18968     F2 44 02 FB | 	rdlong	local16, objptr
1896c     52 00 00 FF 
18970     4C E4 85 F1 | 	sub	objptr, ##42060
18974     1D 44 0E F2 | 	cmp	local16, #29 wz
18978     38 00 90 5D |  if_ne	jmp	#LR__2014
1897c     1C 4E 05 F1 | 	add	fp, #28
18980     A7 44 02 FB | 	rdlong	local16, fp
18984     14 4F 05 F1 | 	add	fp, #276
18988     A7 2E 02 FB | 	rdlong	local05, fp
1898c     17 33 02 F6 | 	mov	local07, local05
18990     02 32 66 F0 | 	shl	local07, #2
18994     04 4F 85 F1 | 	sub	fp, #260
18998     A7 34 02 F6 | 	mov	local08, fp
1899c     A7 32 02 F1 | 	add	local07, fp
189a0     19 13 02 FB | 	rdlong	arg01, local07
189a4     00 14 06 F6 | 	mov	arg02, #0
189a8     2C 4E 85 F1 | 	sub	fp, #44
189ac     B4 F9 B0 FD | 	call	#__system____builtin_atoi
189b0     22 FB 61 FC | 	wrlong	result1, local16
189b4                 | LR__2014
189b4                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
189b4     52 00 00 FF 
189b8     4C E4 05 F1 | 	add	objptr, ##42060
189bc     F2 44 02 FB | 	rdlong	local16, objptr
189c0     52 00 00 FF 
189c4     4C E4 85 F1 | 	sub	objptr, ##42060
189c8     1E 44 0E F2 | 	cmp	local16, #30 wz
189cc     3C 00 90 5D |  if_ne	jmp	#LR__2015
189d0     30 4F 05 F1 | 	add	fp, #304
189d4     A7 2E 02 FB | 	rdlong	local05, fp
189d8     02 2E 66 F0 | 	shl	local05, #2
189dc     04 4F 85 F1 | 	sub	fp, #260
189e0     A7 32 02 F6 | 	mov	local07, fp
189e4     A7 2E 02 F1 | 	add	local05, fp
189e8     17 13 02 FB | 	rdlong	arg01, local05
189ec     2C 4E 85 F1 | 	sub	fp, #44
189f0     04 FB B0 FD | 	call	#__system____builtin_atof
189f4     28 4E 05 F1 | 	add	fp, #40
189f8     A7 FA 61 FC | 	wrlong	result1, fp
189fc     0C 4E 85 F1 | 	sub	fp, #12
18a00     A7 44 02 FB | 	rdlong	local16, fp
18a04     1C 4E 85 F1 | 	sub	fp, #28
18a08     22 FB 61 FC | 	wrlong	result1, local16
18a0c                 | LR__2015
18a0c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
18a0c     52 00 00 FF 
18a10     4C E4 05 F1 | 	add	objptr, ##42060
18a14     F2 44 02 FB | 	rdlong	local16, objptr
18a18     52 00 00 FF 
18a1c     4C E4 85 F1 | 	sub	objptr, ##42060
18a20     2B 44 0E F2 | 	cmp	local16, #43 wz
18a24     18 00 90 5D |  if_ne	jmp	#LR__2016
18a28     1C 4E 05 F1 | 	add	fp, #28
18a2c     A7 12 02 FB | 	rdlong	arg01, fp
18a30     0C 4E 85 F1 | 	sub	fp, #12
18a34     A7 14 02 FB | 	rdlong	arg02, fp
18a38     10 4E 85 F1 | 	sub	fp, #16
18a3c     09 15 62 FC | 	wrlong	arg02, arg01
18a40                 | LR__2016
18a40     1C 4E 05 F1 | 	add	fp, #28
18a44     A7 12 02 FB | 	rdlong	arg01, fp
18a48     1C 4E 85 F1 | 	sub	fp, #28
18a4c     08 12 06 F1 | 	add	arg01, #8
18a50     52 00 00 FF 
18a54     4C E4 05 F1 | 	add	objptr, ##42060
18a58     F2 14 02 FB | 	rdlong	arg02, objptr
18a5c     52 00 00 FF 
18a60     4C E4 85 F1 | 	sub	objptr, ##42060
18a64     09 15 62 FC | 	wrlong	arg02, arg01
18a68                 | LR__2017
18a68                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
18a68     18 4E 05 F1 | 	add	fp, #24
18a6c     A7 44 02 FB | 	rdlong	local16, fp
18a70     18 4E 85 F1 | 	sub	fp, #24
18a74     0C 44 0E F2 | 	cmp	local16, #12 wz
18a78     94 01 90 5D |  if_ne	jmp	#LR__2022
18a7c     1C 4E 05 F1 | 	add	fp, #28
18a80     A7 2E 02 FB | 	rdlong	local05, fp
18a84     1C 4E 85 F1 | 	sub	fp, #28
18a88     00 04 00 FF 
18a8c     00 2E 16 F2 | 	cmp	local05, ##524288 wc
18a90     7C 01 90 CD |  if_b	jmp	#LR__2022
18a94                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
18a94     52 00 00 FF 
18a98     4C E4 05 F1 | 	add	objptr, ##42060
18a9c     F2 44 02 FB | 	rdlong	local16, objptr
18aa0     52 00 00 FF 
18aa4     4C E4 85 F1 | 	sub	objptr, ##42060
18aa8     1C 44 0E F2 | 	cmp	local16, #28 wz
18aac     40 00 90 5D |  if_ne	jmp	#LR__2018
18ab0     1C 4E 05 F1 | 	add	fp, #28
18ab4     A7 44 02 FB | 	rdlong	local16, fp
18ab8     14 4F 05 F1 | 	add	fp, #276
18abc     A7 2E 02 FB | 	rdlong	local05, fp
18ac0     17 33 02 F6 | 	mov	local07, local05
18ac4     02 32 66 F0 | 	shl	local07, #2
18ac8     04 4F 85 F1 | 	sub	fp, #260
18acc     A7 34 02 F6 | 	mov	local08, fp
18ad0     A7 32 02 F1 | 	add	local07, fp
18ad4     19 13 02 FB | 	rdlong	arg01, local07
18ad8     00 14 06 F6 | 	mov	arg02, #0
18adc     2C 4E 85 F1 | 	sub	fp, #44
18ae0     80 F8 B0 FD | 	call	#__system____builtin_atoi
18ae4     FD 14 02 F6 | 	mov	arg02, result1
18ae8     22 13 02 F6 | 	mov	arg01, local16
18aec     80 8B B0 FD | 	call	#_pslpoke
18af0                 | LR__2018
18af0                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
18af0     52 00 00 FF 
18af4     4C E4 05 F1 | 	add	objptr, ##42060
18af8     F2 44 02 FB | 	rdlong	local16, objptr
18afc     52 00 00 FF 
18b00     4C E4 85 F1 | 	sub	objptr, ##42060
18b04     1D 44 0E F2 | 	cmp	local16, #29 wz
18b08     40 00 90 5D |  if_ne	jmp	#LR__2019
18b0c     1C 4E 05 F1 | 	add	fp, #28
18b10     A7 44 02 FB | 	rdlong	local16, fp
18b14     14 4F 05 F1 | 	add	fp, #276
18b18     A7 2E 02 FB | 	rdlong	local05, fp
18b1c     17 33 02 F6 | 	mov	local07, local05
18b20     02 32 66 F0 | 	shl	local07, #2
18b24     04 4F 85 F1 | 	sub	fp, #260
18b28     A7 34 02 F6 | 	mov	local08, fp
18b2c     A7 32 02 F1 | 	add	local07, fp
18b30     19 13 02 FB | 	rdlong	arg01, local07
18b34     00 14 06 F6 | 	mov	arg02, #0
18b38     2C 4E 85 F1 | 	sub	fp, #44
18b3c     24 F8 B0 FD | 	call	#__system____builtin_atoi
18b40     FD 14 02 F6 | 	mov	arg02, result1
18b44     22 13 02 F6 | 	mov	arg01, local16
18b48     24 8B B0 FD | 	call	#_pslpoke
18b4c                 | LR__2019
18b4c                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
18b4c     52 00 00 FF 
18b50     4C E4 05 F1 | 	add	objptr, ##42060
18b54     F2 44 02 FB | 	rdlong	local16, objptr
18b58     52 00 00 FF 
18b5c     4C E4 85 F1 | 	sub	objptr, ##42060
18b60     1E 44 0E F2 | 	cmp	local16, #30 wz
18b64     4C 00 90 5D |  if_ne	jmp	#LR__2020
18b68     30 4F 05 F1 | 	add	fp, #304
18b6c     A7 2E 02 FB | 	rdlong	local05, fp
18b70     02 2E 66 F0 | 	shl	local05, #2
18b74     04 4F 85 F1 | 	sub	fp, #260
18b78     A7 32 02 F6 | 	mov	local07, fp
18b7c     A7 2E 02 F1 | 	add	local05, fp
18b80     17 13 02 FB | 	rdlong	arg01, local05
18b84     2C 4E 85 F1 | 	sub	fp, #44
18b88     6C F9 B0 FD | 	call	#__system____builtin_atof
18b8c     28 4E 05 F1 | 	add	fp, #40
18b90     A7 FA 61 FC | 	wrlong	result1, fp
18b94     0C 4E 85 F1 | 	sub	fp, #12
18b98     A7 44 02 FB | 	rdlong	local16, fp
18b9c     0C 4E 05 F1 | 	add	fp, #12
18ba0     A7 12 02 F6 | 	mov	arg01, fp
18ba4     28 4E 85 F1 | 	sub	fp, #40
18ba8     09 15 02 FB | 	rdlong	arg02, arg01
18bac     22 13 02 F6 | 	mov	arg01, local16
18bb0     BC 8A B0 FD | 	call	#_pslpoke
18bb4                 | LR__2020
18bb4                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
18bb4     52 00 00 FF 
18bb8     4C E4 05 F1 | 	add	objptr, ##42060
18bbc     F2 44 02 FB | 	rdlong	local16, objptr
18bc0     52 00 00 FF 
18bc4     4C E4 85 F1 | 	sub	objptr, ##42060
18bc8     2B 44 0E F2 | 	cmp	local16, #43 wz
18bcc     18 00 90 5D |  if_ne	jmp	#LR__2021
18bd0     1C 4E 05 F1 | 	add	fp, #28
18bd4     A7 12 02 FB | 	rdlong	arg01, fp
18bd8     0C 4E 85 F1 | 	sub	fp, #12
18bdc     A7 14 02 FB | 	rdlong	arg02, fp
18be0     10 4E 85 F1 | 	sub	fp, #16
18be4     88 8A B0 FD | 	call	#_pslpoke
18be8                 | LR__2021
18be8     1C 4E 05 F1 | 	add	fp, #28
18bec     A7 12 02 FB | 	rdlong	arg01, fp
18bf0     1C 4E 85 F1 | 	sub	fp, #28
18bf4     08 12 06 F1 | 	add	arg01, #8
18bf8     52 00 00 FF 
18bfc     4C E4 05 F1 | 	add	objptr, ##42060
18c00     F2 14 02 FB | 	rdlong	arg02, objptr
18c04     52 00 00 FF 
18c08     4C E4 85 F1 | 	sub	objptr, ##42060
18c0c     60 8A B0 FD | 	call	#_pslpoke
18c10                 | LR__2022
18c10                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
18c10     18 4E 05 F1 | 	add	fp, #24
18c14     A7 44 02 FB | 	rdlong	local16, fp
18c18     18 4E 85 F1 | 	sub	fp, #24
18c1c     05 44 0E F2 | 	cmp	local16, #5 wz
18c20     52 00 00 AF 
18c24     4C E4 05 A1 |  if_e	add	objptr, ##42060
18c28     F2 42 02 AB |  if_e	rdlong	local15, objptr
18c2c     52 00 00 AF 
18c30     4C E4 85 A1 |  if_e	sub	objptr, ##42060
18c34     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
18c38     18 00 90 5D |  if_ne	jmp	#LR__2023
18c3c     1C 4E 05 F1 | 	add	fp, #28
18c40     A7 12 02 FB | 	rdlong	arg01, fp
18c44     0C 4E 85 F1 | 	sub	fp, #12
18c48     A7 14 02 FB | 	rdlong	arg02, fp
18c4c     10 4E 85 F1 | 	sub	fp, #16
18c50     1C 8A B0 FD | 	call	#_pslpoke
18c54                 | LR__2023
18c54                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
18c54     18 4E 05 F1 | 	add	fp, #24
18c58     A7 44 02 FB | 	rdlong	local16, fp
18c5c     18 4E 85 F1 | 	sub	fp, #24
18c60     04 44 0E F2 | 	cmp	local16, #4 wz
18c64     54 00 90 5D |  if_ne	jmp	#LR__2024
18c68     52 00 00 FF 
18c6c     4C E4 05 F1 | 	add	objptr, ##42060
18c70     F2 42 02 FB | 	rdlong	local15, objptr
18c74     52 00 00 FF 
18c78     4C E4 85 F1 | 	sub	objptr, ##42060
18c7c     2B 42 0E F2 | 	cmp	local15, #43 wz
18c80     38 00 90 AD |  if_e	jmp	#LR__2024
18c84     1C 4E 05 F1 | 	add	fp, #28
18c88     A7 44 02 FB | 	rdlong	local16, fp
18c8c     14 4F 05 F1 | 	add	fp, #276
18c90     A7 32 02 FB | 	rdlong	local07, fp
18c94     02 32 66 F0 | 	shl	local07, #2
18c98     04 4F 85 F1 | 	sub	fp, #260
18c9c     A7 32 02 F1 | 	add	local07, fp
18ca0     19 13 02 FB | 	rdlong	arg01, local07
18ca4     00 14 06 F6 | 	mov	arg02, #0
18ca8     2C 4E 85 F1 | 	sub	fp, #44
18cac     B4 F6 B0 FD | 	call	#__system____builtin_atoi
18cb0     FD 14 02 F6 | 	mov	arg02, result1
18cb4     22 13 02 F6 | 	mov	arg01, local16
18cb8     B4 89 B0 FD | 	call	#_pslpoke
18cbc                 | LR__2024
18cbc                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
18cbc     18 4E 05 F1 | 	add	fp, #24
18cc0     A7 44 02 FB | 	rdlong	local16, fp
18cc4     18 4E 85 F1 | 	sub	fp, #24
18cc8     02 44 0E F2 | 	cmp	local16, #2 wz
18ccc     54 00 90 5D |  if_ne	jmp	#LR__2025
18cd0     52 00 00 FF 
18cd4     4C E4 05 F1 | 	add	objptr, ##42060
18cd8     F2 42 02 FB | 	rdlong	local15, objptr
18cdc     52 00 00 FF 
18ce0     4C E4 85 F1 | 	sub	objptr, ##42060
18ce4     2B 42 0E F2 | 	cmp	local15, #43 wz
18ce8     38 00 90 AD |  if_e	jmp	#LR__2025
18cec     1C 4E 05 F1 | 	add	fp, #28
18cf0     A7 44 02 FB | 	rdlong	local16, fp
18cf4     14 4F 05 F1 | 	add	fp, #276
18cf8     A7 32 02 FB | 	rdlong	local07, fp
18cfc     02 32 66 F0 | 	shl	local07, #2
18d00     04 4F 85 F1 | 	sub	fp, #260
18d04     A7 32 02 F1 | 	add	local07, fp
18d08     19 13 02 FB | 	rdlong	arg01, local07
18d0c     00 14 06 F6 | 	mov	arg02, #0
18d10     2C 4E 85 F1 | 	sub	fp, #44
18d14     4C F6 B0 FD | 	call	#__system____builtin_atoi
18d18     FD 14 02 F6 | 	mov	arg02, result1
18d1c     22 13 02 F6 | 	mov	arg01, local16
18d20     94 89 B0 FD | 	call	#_psdpoke
18d24                 | LR__2025
18d24                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
18d24     18 4E 05 F1 | 	add	fp, #24
18d28     A7 44 02 FB | 	rdlong	local16, fp
18d2c     18 4E 85 F1 | 	sub	fp, #24
18d30     01 44 0E F2 | 	cmp	local16, #1 wz
18d34     54 00 90 5D |  if_ne	jmp	#LR__2026
18d38     52 00 00 FF 
18d3c     4C E4 05 F1 | 	add	objptr, ##42060
18d40     F2 42 02 FB | 	rdlong	local15, objptr
18d44     52 00 00 FF 
18d48     4C E4 85 F1 | 	sub	objptr, ##42060
18d4c     2B 42 0E F2 | 	cmp	local15, #43 wz
18d50     38 00 90 AD |  if_e	jmp	#LR__2026
18d54     1C 4E 05 F1 | 	add	fp, #28
18d58     A7 44 02 FB | 	rdlong	local16, fp
18d5c     14 4F 05 F1 | 	add	fp, #276
18d60     A7 32 02 FB | 	rdlong	local07, fp
18d64     02 32 66 F0 | 	shl	local07, #2
18d68     04 4F 85 F1 | 	sub	fp, #260
18d6c     A7 32 02 F1 | 	add	local07, fp
18d70     19 13 02 FB | 	rdlong	arg01, local07
18d74     00 14 06 F6 | 	mov	arg02, #0
18d78     2C 4E 85 F1 | 	sub	fp, #44
18d7c     E4 F5 B0 FD | 	call	#__system____builtin_atoi
18d80     FD 14 02 F6 | 	mov	arg02, result1
18d84     22 13 02 F6 | 	mov	arg01, local16
18d88     74 89 B0 FD | 	call	#_pspoke
18d8c                 | LR__2026
18d8c                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
18d8c     18 4E 05 F1 | 	add	fp, #24
18d90     A7 44 02 FB | 	rdlong	local16, fp
18d94     18 4E 85 F1 | 	sub	fp, #24
18d98     06 44 0E F2 | 	cmp	local16, #6 wz
18d9c     64 00 90 5D |  if_ne	jmp	#LR__2027
18da0     52 00 00 FF 
18da4     4C E4 05 F1 | 	add	objptr, ##42060
18da8     F2 42 02 FB | 	rdlong	local15, objptr
18dac     52 00 00 FF 
18db0     4C E4 85 F1 | 	sub	objptr, ##42060
18db4     2B 42 0E F2 | 	cmp	local15, #43 wz
18db8     48 00 90 AD |  if_e	jmp	#LR__2027
18dbc     30 4F 05 F1 | 	add	fp, #304
18dc0     A7 2E 02 FB | 	rdlong	local05, fp
18dc4     02 2E 66 F0 | 	shl	local05, #2
18dc8     04 4F 85 F1 | 	sub	fp, #260
18dcc     A7 2E 02 F1 | 	add	local05, fp
18dd0     17 13 02 FB | 	rdlong	arg01, local05
18dd4     2C 4E 85 F1 | 	sub	fp, #44
18dd8     1C F7 B0 FD | 	call	#__system____builtin_atof
18ddc     28 4E 05 F1 | 	add	fp, #40
18de0     A7 FA 61 FC | 	wrlong	result1, fp
18de4     0C 4E 85 F1 | 	sub	fp, #12
18de8     A7 44 02 FB | 	rdlong	local16, fp
18dec     0C 4E 05 F1 | 	add	fp, #12
18df0     A7 12 02 F6 | 	mov	arg01, fp
18df4     28 4E 85 F1 | 	sub	fp, #40
18df8     09 15 02 FB | 	rdlong	arg02, arg01
18dfc     22 13 02 F6 | 	mov	arg01, local16
18e00     6C 88 B0 FD | 	call	#_pslpoke
18e04                 | LR__2027
18e04     30 4F 05 F1 | 	add	fp, #304
18e08     A7 42 02 FB | 	rdlong	local15, fp
18e0c     01 42 06 F1 | 	add	local15, #1
18e10     A7 42 62 FC | 	wrlong	local15, fp
18e14     30 4F 85 F1 | 	sub	fp, #304
18e18     E4 F6 9F FD | 	jmp	#LR__1992
18e1c                 | LR__2028
18e1c                 | LR__2029
18e1c     A7 F0 03 F6 | 	mov	ptra, fp
18e20     B2 00 A0 FD | 	call	#popregs_
18e24                 | _do_read_ret
18e24     2D 00 64 FD | 	ret
18e28                 | 
18e28                 | ' 
18e28                 | ' '------------------- release
18e28                 | ' 
18e28                 | ' sub do_release
18e28                 | _do_release
18e28     00 4A 05 F6 | 	mov	COUNT_, #0
18e2c     A8 00 A0 FD | 	call	#pushregs_
18e30     10 F0 07 F1 | 	add	ptra, #16
18e34     54 3D BF FD | 	call	#_pop
18e38     FF 14 02 F6 | 	mov	arg02, result3
18e3c     A7 FA 61 FC | 	wrlong	result1, fp
18e40     04 4E 05 F1 | 	add	fp, #4
18e44     A7 FC 61 FC | 	wrlong	result2, fp
18e48     04 4E 05 F1 | 	add	fp, #4
18e4c     A7 14 62 FC | 	wrlong	arg02, fp
18e50     08 4E 85 F1 | 	sub	fp, #8
18e54     A7 12 02 F6 | 	mov	arg01, fp
18e58     14 3F BF FD | 	call	#_converttoint
18e5c     0C 4E 05 F1 | 	add	fp, #12
18e60     A7 FA 61 FC | 	wrlong	result1, fp
18e64                 | ' 
18e64                 | ' t1=pop()
18e64                 | ' channel=converttoint(t1)
18e64                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
18e64     0C 4E 85 F1 | 	sub	fp, #12
18e68     00 FA 55 F2 | 	cmps	result1, #0 wc
18e6c     44 00 90 CD |  if_b	jmp	#LR__2030
18e70     0C 4E 05 F1 | 	add	fp, #12
18e74     A7 14 02 FB | 	rdlong	arg02, fp
18e78     0C 4E 85 F1 | 	sub	fp, #12
18e7c     08 14 56 F2 | 	cmps	arg02, #8 wc
18e80     30 00 90 3D |  if_ae	jmp	#LR__2030
18e84     37 00 00 FF 
18e88     10 E4 05 F1 | 	add	objptr, ##28176
18e8c     F2 12 02 FB | 	rdlong	arg01, objptr
18e90     37 00 00 FF 
18e94     10 E4 85 F1 | 	sub	objptr, ##28176
18e98     0C 4E 05 F1 | 	add	fp, #12
18e9c     A7 14 02 FB | 	rdlong	arg02, fp
18ea0     0C 4E 85 F1 | 	sub	fp, #12
18ea4     06 14 66 F0 | 	shl	arg02, #6
18ea8     0A 13 02 F1 | 	add	arg01, arg02
18eac     2C 12 06 F1 | 	add	arg01, #44
18eb0     09 FF 69 FC | 	wrlong	#255, arg01
18eb4                 | LR__2030
18eb4     A7 F0 03 F6 | 	mov	ptra, fp
18eb8     B2 00 A0 FD | 	call	#popregs_
18ebc                 | _do_release_ret
18ebc     2D 00 64 FD | 	ret
18ec0                 | 
18ec0                 | ' 
18ec0                 | ' '------------------- restore
18ec0                 | ' 
18ec0                 | ' sub do_restore()
18ec0                 | _do_restore
18ec0                 | _do_restore_ret
18ec0     2D 00 64 FD | 	ret
18ec4                 | 
18ec4                 | ' 
18ec4                 | ' '------------------- return
18ec4                 | ' 
18ec4                 | ' sub do_return()
18ec4                 | _do_return
18ec4                 | ' if gosubtop>0 then
18ec4     50 00 00 FF 
18ec8     34 E5 05 F1 | 	add	objptr, ##41268
18ecc     F2 00 02 FB | 	rdlong	_var01, objptr
18ed0     50 00 00 FF 
18ed4     34 E5 85 F1 | 	sub	objptr, ##41268
18ed8     01 00 56 F2 | 	cmps	_var01, #1 wc
18edc     8C 00 90 CD |  if_b	jmp	#LR__2040
18ee0     50 00 00 FF 
18ee4     34 E5 05 F1 | 	add	objptr, ##41268
18ee8     F2 00 02 FB | 	rdlong	_var01, objptr
18eec     03 00 66 F0 | 	shl	_var01, #3
18ef0     03 00 00 FF 
18ef4     88 E5 85 F1 | 	sub	objptr, ##1928
18ef8     F2 00 02 F1 | 	add	_var01, objptr
18efc     00 01 02 FB | 	rdlong	_var01, _var01
18f00     03 00 00 FF 
18f04     0C E5 05 F1 | 	add	objptr, ##1804
18f08     F2 00 62 FC | 	wrlong	_var01, objptr
18f0c     7C E4 05 F1 | 	add	objptr, #124
18f10     F2 00 02 FB | 	rdlong	_var01, objptr
18f14     03 00 66 F0 | 	shl	_var01, #3
18f18     03 00 00 FF 
18f1c     88 E5 85 F1 | 	sub	objptr, ##1928
18f20     F2 00 02 F1 | 	add	_var01, objptr
18f24     04 00 06 F1 | 	add	_var01, #4
18f28     00 01 02 FB | 	rdlong	_var01, _var01
18f2c     03 00 00 FF 
18f30     10 E5 05 F1 | 	add	objptr, ##1808
18f34     F2 00 62 FC | 	wrlong	_var01, objptr
18f38     06 00 00 FF 
18f3c     40 E4 85 F1 | 	sub	objptr, ##3136
18f40     F2 00 02 FB | 	rdlong	_var01, objptr
18f44     01 00 86 F1 | 	sub	_var01, #1
18f48     04 E4 05 F1 | 	add	objptr, #4
18f4c     F2 00 62 FC | 	wrlong	_var01, objptr
18f50     06 00 00 FF 
18f54     B4 E4 05 F1 | 	add	objptr, ##3252
18f58     F2 00 02 FB | 	rdlong	_var01, objptr
18f5c     01 00 86 F1 | 	sub	_var01, #1
18f60     F2 00 62 FC | 	wrlong	_var01, objptr
18f64     50 00 00 FF 
18f68     34 E5 85 F1 | 	sub	objptr, ##41268
18f6c                 | LR__2040
18f6c                 | _do_return_ret
18f6c     2D 00 64 FD | 	ret
18f70                 | 
18f70                 | ' 
18f70                 | ' '------------------- right$
18f70                 | ' 
18f70                 | ' sub do_right
18f70                 | _do_right
18f70     00 4A 05 F6 | 	mov	COUNT_, #0
18f74     A8 00 A0 FD | 	call	#pushregs_
18f78     14 F0 07 F1 | 	add	ptra, #20
18f7c     4A 00 00 FF 
18f80     80 E4 05 F1 | 	add	objptr, ##38016
18f84     F2 16 02 FB | 	rdlong	arg03, objptr
18f88     0B 15 02 F6 | 	mov	arg02, arg03
18f8c     01 14 66 F0 | 	shl	arg02, #1
18f90     0B 15 02 F1 | 	add	arg02, arg03
18f94     02 14 66 F0 | 	shl	arg02, #2
18f98     03 00 00 FF 
18f9c     04 E4 85 F1 | 	sub	objptr, ##1540
18fa0     F2 14 02 F1 | 	add	arg02, objptr
18fa4     0A 17 02 FB | 	rdlong	arg03, arg02
18fa8     0C 4E 05 F1 | 	add	fp, #12
18fac     A7 16 62 FC | 	wrlong	arg03, fp
18fb0                 | ' 
18fb0                 | ' numpar=compiledline(lineptr_e).result.uresult
18fb0                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
18fb0     0C 4E 85 F1 | 	sub	fp, #12
18fb4     02 16 0E F2 | 	cmp	arg03, #2 wz
18fb8     47 00 00 FF 
18fbc     7C E4 85 F1 | 	sub	objptr, ##36476
18fc0     40 00 90 AD |  if_e	jmp	#LR__2050
18fc4     00 12 06 F6 | 	mov	arg01, #0
18fc8     D0 1B B1 FD | 	call	#__system___getiolock_0595
18fcc     FD 12 02 F6 | 	mov	arg01, result1
18fd0     A0 BE B0 FD | 	call	#__system___lockmem
18fd4     AA 01 00 FF 
18fd8     14 14 06 F6 | 	mov	arg02, ##@LR__5855
18fdc     00 12 06 F6 | 	mov	arg01, #0
18fe0     00 16 06 F6 | 	mov	arg03, #0
18fe4     80 CB B0 FD | 	call	#__system___basic_print_string
18fe8     00 12 06 F6 | 	mov	arg01, #0
18fec     AC 1B B1 FD | 	call	#__system___getiolock_0595
18ff0     FD 00 68 FC | 	wrlong	#0, result1
18ff4     27 12 06 F6 | 	mov	arg01, #39
18ff8     00 14 06 F6 | 	mov	arg02, #0
18ffc     D0 84 B0 FD | 	call	#_printerror
19000     EC 00 90 FD | 	jmp	#LR__2053
19004                 | LR__2050
19004     84 3B BF FD | 	call	#_pop
19008     FF 16 02 F6 | 	mov	arg03, result3
1900c     A7 FA 61 FC | 	wrlong	result1, fp
19010     04 4E 05 F1 | 	add	fp, #4
19014     A7 FC 61 FC | 	wrlong	result2, fp
19018     04 4E 05 F1 | 	add	fp, #4
1901c     A7 16 62 FC | 	wrlong	arg03, fp
19020     08 4E 85 F1 | 	sub	fp, #8
19024     A7 12 02 F6 | 	mov	arg01, fp
19028     44 3D BF FD | 	call	#_converttoint
1902c     FD 16 02 F6 | 	mov	arg03, result1
19030     10 4E 05 F1 | 	add	fp, #16
19034     A7 16 62 FC | 	wrlong	arg03, fp
19038     10 4E 85 F1 | 	sub	fp, #16
1903c     4C 3B BF FD | 	call	#_pop
19040     FF 16 02 F6 | 	mov	arg03, result3
19044     A7 FA 61 FC | 	wrlong	result1, fp
19048     04 4E 05 F1 | 	add	fp, #4
1904c     A7 FC 61 FC | 	wrlong	result2, fp
19050     04 4E 05 F1 | 	add	fp, #4
19054     A7 16 62 FC | 	wrlong	arg03, fp
19058                 | ' t1=pop() : arg=converttoint(t1)
19058                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19058     08 4E 85 F1 | 	sub	fp, #8
1905c     2B 16 0E F2 | 	cmp	arg03, #43 wz
19060     18 00 90 5D |  if_ne	jmp	#LR__2051
19064     A7 12 02 FB | 	rdlong	arg01, fp
19068     98 3C BF FD | 	call	#_convertstring
1906c     A7 FA 61 FC | 	wrlong	result1, fp
19070     08 4E 05 F1 | 	add	fp, #8
19074     A7 3E 68 FC | 	wrlong	#31, fp
19078     08 4E 85 F1 | 	sub	fp, #8
1907c                 | LR__2051
1907c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1907c     08 4E 05 F1 | 	add	fp, #8
19080     A7 16 02 FB | 	rdlong	arg03, fp
19084     08 4E 85 F1 | 	sub	fp, #8
19088     1F 16 0E F2 | 	cmp	arg03, #31 wz
1908c     40 00 90 AD |  if_e	jmp	#LR__2052
19090     00 12 06 F6 | 	mov	arg01, #0
19094     04 1B B1 FD | 	call	#__system___getiolock_0595
19098     FD 12 02 F6 | 	mov	arg01, result1
1909c     D4 BD B0 FD | 	call	#__system___lockmem
190a0     AA 01 00 FF 
190a4     1D 14 06 F6 | 	mov	arg02, ##@LR__5856
190a8     00 12 06 F6 | 	mov	arg01, #0
190ac     00 16 06 F6 | 	mov	arg03, #0
190b0     B4 CA B0 FD | 	call	#__system___basic_print_string
190b4     00 12 06 F6 | 	mov	arg01, #0
190b8     E0 1A B1 FD | 	call	#__system___getiolock_0595
190bc     FD 00 68 FC | 	wrlong	#0, result1
190c0     0F 12 06 F6 | 	mov	arg01, #15
190c4     00 14 06 F6 | 	mov	arg02, #0
190c8     04 84 B0 FD | 	call	#_printerror
190cc     20 00 90 FD | 	jmp	#LR__2053
190d0                 | LR__2052
190d0     A7 12 02 FB | 	rdlong	arg01, fp
190d4     10 4E 05 F1 | 	add	fp, #16
190d8     A7 14 02 FB | 	rdlong	arg02, fp
190dc     10 4E 85 F1 | 	sub	fp, #16
190e0     94 DE B0 FD | 	call	#__system__Right_S
190e4     A7 FA 61 FC | 	wrlong	result1, fp
190e8     A7 12 02 F6 | 	mov	arg01, fp
190ec     34 3B BF FD | 	call	#_push
190f0                 | LR__2053
190f0     A7 F0 03 F6 | 	mov	ptra, fp
190f4     B2 00 A0 FD | 	call	#popregs_
190f8                 | _do_right_ret
190f8     2D 00 64 FD | 	ret
190fc                 | 
190fc                 | ' 
190fc                 | ' '------------------- rnd
190fc                 | ' 
190fc                 | ' sub do_rnd
190fc                 | _do_rnd
190fc     01 4A 05 F6 | 	mov	COUNT_, #1
19100     A8 00 A0 FD | 	call	#pushregs_
19104     10 F0 07 F1 | 	add	ptra, #16
19108     4A 00 00 FF 
1910c     80 E4 05 F1 | 	add	objptr, ##38016
19110     F2 26 02 FB | 	rdlong	local01, objptr
19114     13 17 02 F6 | 	mov	arg03, local01
19118     01 16 66 F0 | 	shl	arg03, #1
1911c     13 17 02 F1 | 	add	arg03, local01
19120     02 16 66 F0 | 	shl	arg03, #2
19124     03 00 00 FF 
19128     04 E4 85 F1 | 	sub	objptr, ##1540
1912c     F2 16 02 F1 | 	add	arg03, objptr
19130     0B 17 02 FB | 	rdlong	arg03, arg03
19134     0C 4E 05 F1 | 	add	fp, #12
19138     A7 16 62 FC | 	wrlong	arg03, fp
1913c                 | ' 
1913c                 | ' numpar=compiledline(lineptr_e).result.uresult
1913c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1913c     0C 4E 85 F1 | 	sub	fp, #12
19140     02 16 16 F2 | 	cmp	arg03, #2 wc
19144     47 00 00 FF 
19148     7C E4 85 F1 | 	sub	objptr, ##36476
1914c     40 00 90 CD |  if_b	jmp	#LR__2060
19150     00 12 06 F6 | 	mov	arg01, #0
19154     44 1A B1 FD | 	call	#__system___getiolock_0595
19158     FD 12 02 F6 | 	mov	arg01, result1
1915c     14 BD B0 FD | 	call	#__system___lockmem
19160     AA 01 00 FF 
19164     26 14 06 F6 | 	mov	arg02, ##@LR__5857
19168     00 12 06 F6 | 	mov	arg01, #0
1916c     00 16 06 F6 | 	mov	arg03, #0
19170     F4 C9 B0 FD | 	call	#__system___basic_print_string
19174     00 12 06 F6 | 	mov	arg01, #0
19178     20 1A B1 FD | 	call	#__system___getiolock_0595
1917c     FD 00 68 FC | 	wrlong	#0, result1
19180     27 12 06 F6 | 	mov	arg01, #39
19184     00 14 06 F6 | 	mov	arg02, #0
19188     44 83 B0 FD | 	call	#_printerror
1918c     30 01 90 FD | 	jmp	#LR__2067
19190                 | LR__2060
19190                 | ' if numpar=0 then
19190     0C 4E 05 F1 | 	add	fp, #12
19194     A7 FE 09 FB | 	rdlong	result3, fp wz
19198     0C 4E 85 F1 | 	sub	fp, #12
1919c     20 00 90 5D |  if_ne	jmp	#LR__2061
191a0     08 4E 05 F1 | 	add	fp, #8
191a4     A7 3A 68 FC | 	wrlong	#29, fp
191a8     08 4E 85 F1 | 	sub	fp, #8
191ac     1B FA 61 FD | 	getrnd	result1
191b0     A7 FA 61 FC | 	wrlong	result1, fp
191b4     A7 12 02 F6 | 	mov	arg01, fp
191b8     68 3A BF FD | 	call	#_push
191bc     00 01 90 FD | 	jmp	#LR__2066
191c0                 | LR__2061
191c0     C8 39 BF FD | 	call	#_pop
191c4     A7 FA 61 FC | 	wrlong	result1, fp
191c8     04 4E 05 F1 | 	add	fp, #4
191cc     A7 FC 61 FC | 	wrlong	result2, fp
191d0     04 4E 05 F1 | 	add	fp, #4
191d4     A7 FE 61 FC | 	wrlong	result3, fp
191d8                 | '   t1=pop()
191d8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
191d8     08 4E 85 F1 | 	sub	fp, #8
191dc     1C FE 0D F2 | 	cmp	result3, #28 wz
191e0     08 4E 05 51 |  if_ne	add	fp, #8
191e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
191e8     08 4E 85 51 |  if_ne	sub	fp, #8
191ec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
191f0     2C 00 90 5D |  if_ne	jmp	#LR__2062
191f4     1B FA 61 FD | 	getrnd	result1
191f8     A7 26 02 FB | 	rdlong	local01, fp
191fc     13 FB 11 FD | 	qdiv	result1, local01
19200     A7 12 02 F6 | 	mov	arg01, fp
19204     19 26 62 FD | 	getqy	local01
19208     A7 26 62 FC | 	wrlong	local01, fp
1920c     08 4E 05 F1 | 	add	fp, #8
19210     A7 3A 68 FC | 	wrlong	#29, fp
19214     08 4E 85 F1 | 	sub	fp, #8
19218     08 3A BF FD | 	call	#_push
1921c     A0 00 90 FD | 	jmp	#LR__2065
19220                 | LR__2062
19220     08 4E 05 F1 | 	add	fp, #8
19224     A7 26 02 FB | 	rdlong	local01, fp
19228     08 4E 85 F1 | 	sub	fp, #8
1922c     1E 26 0E F2 | 	cmp	local01, #30 wz
19230     48 00 90 5D |  if_ne	jmp	#LR__2063
19234     A7 12 02 FB | 	rdlong	arg01, fp
19238     00 C0 24 FF 
1923c     00 14 06 F6 | 	mov	arg02, ##1233125376
19240     AC EC B0 FD | 	call	#__system___float_div
19244     FD 26 02 F6 | 	mov	local01, result1
19248     1B 12 62 FD | 	getrnd	arg01
1924c     74 13 06 F4 | 	bitl	arg01, #372
19250     94 E6 B0 FD | 	call	#__system___float_fromuns
19254     FD 14 02 F6 | 	mov	arg02, result1
19258     13 13 02 F6 | 	mov	arg01, local01
1925c     8C EA B0 FD | 	call	#__system___float_mul
19260     A7 FA 61 FC | 	wrlong	result1, fp
19264     08 4E 05 F1 | 	add	fp, #8
19268     A7 3C 68 FC | 	wrlong	#30, fp
1926c     08 4E 85 F1 | 	sub	fp, #8
19270     A7 12 02 F6 | 	mov	arg01, fp
19274     AC 39 BF FD | 	call	#_push
19278     44 00 90 FD | 	jmp	#LR__2064
1927c                 | LR__2063
1927c                 | '     print "rnd: "; : printerror(40) 
1927c     00 12 06 F6 | 	mov	arg01, #0
19280     18 19 B1 FD | 	call	#__system___getiolock_0595
19284     FD 12 02 F6 | 	mov	arg01, result1
19288     E8 BB B0 FD | 	call	#__system___lockmem
1928c     AA 01 00 FF 
19290     2C 14 06 F6 | 	mov	arg02, ##@LR__5858
19294     00 12 06 F6 | 	mov	arg01, #0
19298     00 16 06 F6 | 	mov	arg03, #0
1929c     C8 C8 B0 FD | 	call	#__system___basic_print_string
192a0     00 12 06 F6 | 	mov	arg01, #0
192a4     F4 18 B1 FD | 	call	#__system___getiolock_0595
192a8     FD 00 68 FC | 	wrlong	#0, result1
192ac     28 12 06 F6 | 	mov	arg01, #40
192b0     00 14 06 F6 | 	mov	arg02, #0
192b4     18 82 B0 FD | 	call	#_printerror
192b8     A7 12 02 F6 | 	mov	arg01, fp
192bc     64 39 BF FD | 	call	#_push
192c0                 | LR__2064
192c0                 | LR__2065
192c0                 | LR__2066
192c0                 | LR__2067
192c0     A7 F0 03 F6 | 	mov	ptra, fp
192c4     B2 00 A0 FD | 	call	#popregs_
192c8                 | _do_rnd_ret
192c8     2D 00 64 FD | 	ret
192cc                 | 
192cc                 | ' 
192cc                 | ' '-------------------- round
192cc                 | ' 
192cc                 | ' sub do_round
192cc                 | _do_round
192cc     00 4A 05 F6 | 	mov	COUNT_, #0
192d0     A8 00 A0 FD | 	call	#pushregs_
192d4     0C F0 07 F1 | 	add	ptra, #12
192d8     B0 38 BF FD | 	call	#_pop
192dc     A7 FA 61 FC | 	wrlong	result1, fp
192e0     04 4E 05 F1 | 	add	fp, #4
192e4     A7 FC 61 FC | 	wrlong	result2, fp
192e8     04 4E 05 F1 | 	add	fp, #4
192ec     A7 FE 61 FC | 	wrlong	result3, fp
192f0     08 4E 85 F1 | 	sub	fp, #8
192f4     A7 12 02 F6 | 	mov	arg01, fp
192f8     74 3A BF FD | 	call	#_converttoint
192fc     A7 FA 61 FC | 	wrlong	result1, fp
19300     08 4E 05 F1 | 	add	fp, #8
19304     A7 38 68 FC | 	wrlong	#28, fp
19308     08 4E 85 F1 | 	sub	fp, #8
1930c     A7 12 02 F6 | 	mov	arg01, fp
19310     10 39 BF FD | 	call	#_push
19314     A7 F0 03 F6 | 	mov	ptra, fp
19318     B2 00 A0 FD | 	call	#popregs_
1931c                 | _do_round_ret
1931c     2D 00 64 FD | 	ret
19320                 | 
19320                 | ' 
19320                 | ' '-------------------- rqpin
19320                 | ' 
19320                 | ' sub do_rqpin
19320                 | _do_rqpin
19320     00 4A 05 F6 | 	mov	COUNT_, #0
19324     A8 00 A0 FD | 	call	#pushregs_
19328     0C F0 07 F1 | 	add	ptra, #12
1932c     5C 38 BF FD | 	call	#_pop
19330     A7 FA 61 FC | 	wrlong	result1, fp
19334     04 4E 05 F1 | 	add	fp, #4
19338     A7 FC 61 FC | 	wrlong	result2, fp
1933c     04 4E 05 F1 | 	add	fp, #4
19340     A7 FE 61 FC | 	wrlong	result3, fp
19344     08 4E 85 F1 | 	sub	fp, #8
19348     A7 12 02 F6 | 	mov	arg01, fp
1934c     20 3A BF FD | 	call	#_converttoint
19350     FD 12 02 F6 | 	mov	arg01, result1
19354     00 FA 05 F6 | 	mov	result1, #0
19358     09 FB 81 FA | 	rqpin	result1, arg01
1935c     52 00 00 FF 
19360     4C E4 05 F1 | 	add	objptr, ##42060
19364     F2 FA 61 FC | 	wrlong	result1, objptr
19368     52 00 00 FF 
1936c     4C E4 85 F1 | 	sub	objptr, ##42060
19370     08 4E 05 F1 | 	add	fp, #8
19374     A7 3A 68 FC | 	wrlong	#29, fp
19378     08 4E 85 F1 | 	sub	fp, #8
1937c     A7 08 68 FC | 	wrlong	#4, fp
19380     A7 12 02 F6 | 	mov	arg01, fp
19384     9C 38 BF FD | 	call	#_push
19388     A7 F0 03 F6 | 	mov	ptra, fp
1938c     B2 00 A0 FD | 	call	#popregs_
19390                 | _do_rqpin_ret
19390     2D 00 64 FD | 	ret
19394                 | 
19394                 | ' 
19394                 | ' ' ------------------ run
19394                 | ' 
19394                 | ' sub do_run
19394                 | _do_run
19394     04 4A 05 F6 | 	mov	COUNT_, #4
19398     A8 00 A0 FD | 	call	#pushregs_
1939c     4A 00 00 FF 
193a0     80 E4 05 F1 | 	add	objptr, ##38016
193a4     F2 26 02 FB | 	rdlong	local01, objptr
193a8     06 00 00 FF 
193ac     38 E4 05 F1 | 	add	objptr, ##3128
193b0     F2 28 02 FB | 	rdlong	local02, objptr
193b4     04 E4 05 F1 | 	add	objptr, #4
193b8     F2 2A 02 FB | 	rdlong	local03, objptr
193bc     13 19 02 F6 | 	mov	arg04, local01
193c0     0C 17 02 F6 | 	mov	arg03, arg04
193c4     01 16 66 F0 | 	shl	arg03, #1
193c8     0C 17 02 F1 | 	add	arg03, arg04
193cc     02 16 66 F0 | 	shl	arg03, #2
193d0     09 00 00 FF 
193d4     40 E4 85 F1 | 	sub	objptr, ##4672
193d8     F2 16 02 F1 | 	add	arg03, objptr
193dc     0B 15 02 FB | 	rdlong	arg02, arg03
193e0                 | ' 
193e0                 | ' r_lineptr_e=lineptr_e
193e0                 | ' r_runptr=runptr
193e0                 | ' r_runptr2=runptr2
193e0                 | ' 
193e0                 | ' numpar=compiledline(lineptr_e).result.uresult
193e0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
193e0     01 14 0E F2 | 	cmp	arg02, #1 wz
193e4     47 00 00 FF 
193e8     7C E4 85 F1 | 	sub	objptr, ##36476
193ec     00 12 06 A6 |  if_e	mov	arg01, #0
193f0     24 B2 BF AD |  if_e	call	#_do_load
193f4     4A 00 00 FF 
193f8     88 E4 05 F1 | 	add	objptr, ##38024
193fc     F2 18 02 FB | 	rdlong	arg04, objptr
19400     06 00 00 FF 
19404     30 E4 05 F1 | 	add	objptr, ##3120
19408     F2 18 62 FC | 	wrlong	arg04, objptr
1940c     04 E4 05 F1 | 	add	objptr, #4
19410     F2 00 68 FC | 	wrlong	#0, objptr
19414     04 E4 05 F1 | 	add	objptr, #4
19418     FF FF FF FF 
1941c     F2 FE 6B FC | 	wrlong	##-1, objptr
19420     06 00 00 FF 
19424     38 E4 85 F1 | 	sub	objptr, ##3128
19428     F2 18 02 FB | 	rdlong	arg04, objptr
1942c     06 00 00 FF 
19430     A4 E4 05 F1 | 	add	objptr, ##3236
19434     F2 18 62 FC | 	wrlong	arg04, objptr
19438     AA 01 00 FF 
1943c     32 18 06 F6 | 	mov	arg04, ##@LR__5859
19440     01 00 00 FF 
19444     EC E4 05 F1 | 	add	objptr, ##748
19448     F2 18 62 FC | 	wrlong	arg04, objptr
1944c                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1944c                 | ' dataptr=programstart : readline="" ' reset the data pointer
1944c                 | ' if inrun>0 then 
1944c     01 00 00 FF 
19450     2C E5 85 F1 | 	sub	objptr, ##812
19454     F2 18 02 FB | 	rdlong	arg04, objptr
19458     50 00 00 FF 
1945c     EC E4 85 F1 | 	sub	objptr, ##41196
19460     01 18 16 F2 | 	cmp	arg04, #1 wc
19464     30 00 90 CD |  if_b	jmp	#LR__2070
19468     50 00 00 FF 
1946c     F0 E4 05 F1 | 	add	objptr, ##41200
19470     F2 12 02 F6 | 	mov	arg01, objptr
19474     38 E4 85 F1 | 	sub	objptr, #56
19478     F2 14 02 FB | 	rdlong	arg02, objptr
1947c     18 16 06 F6 | 	mov	arg03, #24
19480     44 00 00 FF 
19484     EC E5 85 F1 | 	sub	objptr, ##35308
19488     A8 AD B0 FD | 	call	#_psram_spin2_read1
1948c     0B 00 00 FF 
19490     CC E4 85 F1 | 	sub	objptr, ##5836
19494                 | '   psram.read1(varptr(runheader),runptr,24)  
19494                 | '   return
19494     0C 03 90 FD | 	jmp	#LR__2077
19498                 | LR__2070
19498     50 00 00 FF 
1949c     EC E4 05 F1 | 	add	objptr, ##41196
194a0     F2 02 68 FC | 	wrlong	#1, objptr
194a4     04 E4 05 F1 | 	add	objptr, #4
194a8     F2 12 02 F6 | 	mov	arg01, objptr
194ac     38 E4 85 F1 | 	sub	objptr, #56
194b0     F2 14 02 FB | 	rdlong	arg02, objptr
194b4     18 16 06 F6 | 	mov	arg03, #24
194b8     44 00 00 FF 
194bc     EC E5 85 F1 | 	sub	objptr, ##35308
194c0     70 AD B0 FD | 	call	#_psram_spin2_read1
194c4                 | ' inrun=1
194c4                 | ' psram.read1(varptr(runheader),runptr,24) 
194c4                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
194c4     45 00 00 FF 
194c8     24 E4 05 F1 | 	add	objptr, ##35364
194cc     F2 2C 02 FB | 	rdlong	local04, objptr
194d0     50 00 00 FF 
194d4     F0 E4 85 F1 | 	sub	objptr, ##41200
194d8     FF FF 7F FF 
194dc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
194e0     50 00 00 AF 
194e4     EC E4 05 A1 |  if_e	add	objptr, ##41196
194e8     F2 00 68 AC |  if_e	wrlong	#0, objptr
194ec     50 00 00 AF 
194f0     EC E4 85 A1 |  if_e	sub	objptr, ##41196
194f4     AC 02 90 AD |  if_e	jmp	#LR__2077
194f8                 | ' do 
194f8                 | LR__2071
194f8                 | '   if runptr<>oldrunptr then
194f8     50 00 00 FF 
194fc     B8 E4 05 F1 | 	add	objptr, ##41144
19500     F2 2C 02 FB | 	rdlong	local04, objptr
19504     08 E4 05 F1 | 	add	objptr, #8
19508     F2 18 02 FB | 	rdlong	arg04, objptr
1950c     50 00 00 FF 
19510     C0 E4 85 F1 | 	sub	objptr, ##41152
19514     0C 2D 0A F2 | 	cmp	local04, arg04 wz
19518     CC 00 90 AD |  if_e	jmp	#LR__2072
1951c     50 00 00 FF 
19520     F0 E4 05 F1 | 	add	objptr, ##41200
19524     F2 12 02 F6 | 	mov	arg01, objptr
19528     38 E4 85 F1 | 	sub	objptr, #56
1952c     F2 14 02 FB | 	rdlong	arg02, objptr
19530     18 16 06 F6 | 	mov	arg03, #24
19534     44 00 00 FF 
19538     EC E5 85 F1 | 	sub	objptr, ##35308
1953c     F4 AC B0 FD | 	call	#_psram_spin2_read1
19540     3B 00 00 FF 
19544     B0 E5 05 F1 | 	add	objptr, ##30640
19548     F2 12 02 F6 | 	mov	arg01, objptr
1954c     09 00 00 FF 
19550     3C E4 05 F1 | 	add	objptr, ##4668
19554     F2 14 02 FB | 	rdlong	arg02, objptr
19558     0B 00 00 FF 
1955c     54 E4 85 F1 | 	sub	objptr, ##5716
19560     F2 2C 02 FB | 	rdlong	local04, objptr
19564     01 2C 66 F0 | 	shl	local04, #1
19568     16 15 02 F1 | 	add	arg02, local04
1956c     0B 00 00 FF 
19570     94 E4 05 F1 | 	add	objptr, ##5780
19574     F2 16 02 FB | 	rdlong	arg03, objptr
19578     40 E4 85 F1 | 	sub	objptr, #64
1957c     F2 2C 02 FB | 	rdlong	local04, objptr
19580     16 17 82 F1 | 	sub	arg03, local04
19584     44 00 00 FF 
19588     EC E5 85 F1 | 	sub	objptr, ##35308
1958c     A4 AC B0 FD | 	call	#_psram_spin2_read1
19590     45 00 00 FF 
19594     2C E4 05 F1 | 	add	objptr, ##35372
19598     F2 2C 02 FB | 	rdlong	local04, objptr
1959c     40 E4 85 F1 | 	sub	objptr, #64
195a0     F2 14 02 FB | 	rdlong	arg02, objptr
195a4     0A 2D 82 F1 | 	sub	local04, arg02
195a8     0B 00 00 FF 
195ac     54 E4 85 F1 | 	sub	objptr, ##5716
195b0     F2 14 02 FB | 	rdlong	arg02, objptr
195b4     0A 2D 12 FD | 	qdiv	local04, arg02
195b8     05 00 00 FF 
195bc     18 E4 05 F1 | 	add	objptr, ##2584
195c0     18 2C 62 FD | 	getqx	local04
195c4     03 2C 86 F1 | 	sub	local04, #3
195c8     F2 2C 62 FC | 	wrlong	local04, objptr
195cc     06 00 00 FF 
195d0     3C E4 05 F1 | 	add	objptr, ##3132
195d4     F2 2C 02 FB | 	rdlong	local04, objptr
195d8     08 E4 05 F1 | 	add	objptr, #8
195dc     F2 2C 62 FC | 	wrlong	local04, objptr
195e0     50 00 00 FF 
195e4     C0 E4 85 F1 | 	sub	objptr, ##41152
195e8                 | LR__2072
195e8     50 00 00 FF 
195ec     04 E5 05 F1 | 	add	objptr, ##41220
195f0     F2 2C 02 FB | 	rdlong	local04, objptr
195f4     4C E4 85 F1 | 	sub	objptr, #76
195f8     F2 2C 62 FC | 	wrlong	local04, objptr
195fc     04 E4 05 F1 | 	add	objptr, #4
19600     F2 12 02 FB | 	rdlong	arg01, objptr
19604     50 00 00 FF 
19608     BC E4 85 F1 | 	sub	objptr, ##41148
1960c     78 34 BF FD | 	call	#_execute_line
19610     50 00 00 FF 
19614     BC E4 05 F1 | 	add	objptr, ##41148
19618     F2 FA 61 FC | 	wrlong	result1, objptr
1961c     04 E4 85 F1 | 	sub	objptr, #4
19620     F2 2C 02 FB | 	rdlong	local04, objptr
19624     50 00 00 FF 
19628     B8 E4 85 F1 | 	sub	objptr, ##41144
1962c     FF FF 3F FF 
19630     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
19634     4C 00 90 AD |  if_e	jmp	#LR__2075
19638     E0 12 06 F6 | 	mov	arg01, #224
1963c     84 AF B0 FD | 	call	#_usbnew_spin2_keystate
19640     00 FA 0D F2 | 	cmp	result1, #0 wz
19644     10 00 90 5D |  if_ne	jmp	#LR__2073
19648     E4 12 06 F6 | 	mov	arg01, #228
1964c     74 AF B0 FD | 	call	#_usbnew_spin2_keystate
19650     00 FA 0D F2 | 	cmp	result1, #0 wz
19654     10 00 90 AD |  if_e	jmp	#LR__2074
19658                 | LR__2073
19658     06 12 06 F6 | 	mov	arg01, #6
1965c     64 AF B0 FD | 	call	#_usbnew_spin2_keystate
19660     00 FA 0D F2 | 	cmp	result1, #0 wz
19664     1C 00 90 5D |  if_ne	jmp	#LR__2075
19668                 | LR__2074
19668     50 00 00 FF 
1966c     EC E4 05 F1 | 	add	objptr, ##41196
19670     F2 2C 02 FB | 	rdlong	local04, objptr
19674     50 00 00 FF 
19678     EC E4 85 F1 | 	sub	objptr, ##41196
1967c     02 2C 0E F2 | 	cmp	local04, #2 wz
19680     74 FE 9F 5D |  if_ne	jmp	#LR__2071
19684                 | LR__2075
19684                 | '   ''do whatever kbm.peek_latest_key()=$106 
19684                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
19684     50 00 00 FF 
19688     B8 E4 05 F1 | 	add	objptr, ##41144
1968c     F2 2C 02 FB | 	rdlong	local04, objptr
19690     50 00 00 FF 
19694     B8 E4 85 F1 | 	sub	objptr, ##41144
19698     FF FF 3F FF 
1969c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
196a0     AC 00 90 AD |  if_e	jmp	#LR__2076
196a4     50 00 00 FF 
196a8     EC E4 05 F1 | 	add	objptr, ##41196
196ac     F2 2C 02 FB | 	rdlong	local04, objptr
196b0     50 00 00 FF 
196b4     EC E4 85 F1 | 	sub	objptr, ##41196
196b8     01 2C 0E F2 | 	cmp	local04, #1 wz
196bc     90 00 90 5D |  if_ne	jmp	#LR__2076
196c0                 | '   print: print "Stopped at line ";runheader(0) 
196c0     00 12 06 F6 | 	mov	arg01, #0
196c4     D4 14 B1 FD | 	call	#__system___getiolock_0595
196c8     FD 12 02 F6 | 	mov	arg01, result1
196cc     A4 B7 B0 FD | 	call	#__system___lockmem
196d0     00 12 06 F6 | 	mov	arg01, #0
196d4     0A 14 06 F6 | 	mov	arg02, #10
196d8     00 16 06 F6 | 	mov	arg03, #0
196dc     30 C4 B0 FD | 	call	#__system___basic_print_char
196e0     00 12 06 F6 | 	mov	arg01, #0
196e4     B4 14 B1 FD | 	call	#__system___getiolock_0595
196e8     FD 00 68 FC | 	wrlong	#0, result1
196ec     00 12 06 F6 | 	mov	arg01, #0
196f0     A8 14 B1 FD | 	call	#__system___getiolock_0595
196f4     FD 12 02 F6 | 	mov	arg01, result1
196f8     78 B7 B0 FD | 	call	#__system___lockmem
196fc     AA 01 00 FF 
19700     33 14 06 F6 | 	mov	arg02, ##@LR__5860
19704     00 12 06 F6 | 	mov	arg01, #0
19708     00 16 06 F6 | 	mov	arg03, #0
1970c     58 C4 B0 FD | 	call	#__system___basic_print_string
19710     50 00 00 FF 
19714     F0 E4 05 F1 | 	add	objptr, ##41200
19718     F2 14 02 FB | 	rdlong	arg02, objptr
1971c     50 00 00 FF 
19720     F0 E4 85 F1 | 	sub	objptr, ##41200
19724     00 12 06 F6 | 	mov	arg01, #0
19728     00 16 06 F6 | 	mov	arg03, #0
1972c     0A 18 06 F6 | 	mov	arg04, #10
19730     B8 C4 B0 FD | 	call	#__system___basic_print_unsigned
19734     00 12 06 F6 | 	mov	arg01, #0
19738     0A 14 06 F6 | 	mov	arg02, #10
1973c     00 16 06 F6 | 	mov	arg03, #0
19740     CC C3 B0 FD | 	call	#__system___basic_print_char
19744     00 12 06 F6 | 	mov	arg01, #0
19748     50 14 B1 FD | 	call	#__system___getiolock_0595
1974c     FD 00 68 FC | 	wrlong	#0, result1
19750                 | LR__2076
19750     50 00 00 FF 
19754     EC E4 05 F1 | 	add	objptr, ##41196
19758     F2 00 68 FC | 	wrlong	#0, objptr
1975c     06 00 00 FF 
19760     6C E4 85 F1 | 	sub	objptr, ##3180
19764     F2 26 62 FC | 	wrlong	local01, objptr
19768     06 00 00 FF 
1976c     38 E4 05 F1 | 	add	objptr, ##3128
19770     F2 28 62 FC | 	wrlong	local02, objptr
19774     04 E4 05 F1 | 	add	objptr, #4
19778     F2 2A 62 FC | 	wrlong	local03, objptr
1977c     50 00 00 FF 
19780     BC E4 85 F1 | 	sub	objptr, ##41148
19784     11 12 06 F6 | 	mov	arg01, #17
19788     08 14 06 F6 | 	mov	arg02, #8
1978c     10 16 06 F6 | 	mov	arg03, #16
19790     84 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
19794     10 12 06 F6 | 	mov	arg01, #16
19798     20 14 06 F6 | 	mov	arg02, #32
1979c     20 16 06 F6 | 	mov	arg03, #32
197a0     74 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
197a4                 | LR__2077
197a4     A7 F0 03 F6 | 	mov	ptra, fp
197a8     B2 00 A0 FD | 	call	#popregs_
197ac                 | _do_run_ret
197ac     2D 00 64 FD | 	ret
197b0                 | 
197b0                 | ' 
197b0                 | ' ' ------------------ save
197b0                 | ' 
197b0                 | ' sub do_save                        
197b0                 | _do_save
197b0     04 4A 05 F6 | 	mov	COUNT_, #4
197b4     A8 00 A0 FD | 	call	#pushregs_
197b8     B8 F0 07 F1 | 	add	ptra, #184
197bc     4A 00 00 FF 
197c0     80 E4 05 F1 | 	add	objptr, ##38016
197c4     F2 26 02 FB | 	rdlong	local01, objptr
197c8     13 29 02 F6 | 	mov	local02, local01
197cc     01 28 66 F0 | 	shl	local02, #1
197d0     13 29 02 F1 | 	add	local02, local01
197d4     02 28 66 F0 | 	shl	local02, #2
197d8     03 00 00 FF 
197dc     04 E4 85 F1 | 	sub	objptr, ##1540
197e0     F2 28 02 F1 | 	add	local02, objptr
197e4     14 2B 02 FB | 	rdlong	local03, local02
197e8     10 4E 05 F1 | 	add	fp, #16
197ec     A7 2A 62 FC | 	wrlong	local03, fp
197f0                 | ' 
197f0                 | ' numpar=compiledline(lineptr_e).result.uresult
197f0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
197f0     10 4E 85 F1 | 	sub	fp, #16
197f4     01 2A 56 F2 | 	cmps	local03, #1 wc
197f8     47 00 00 FF 
197fc     7C E4 85 F1 | 	sub	objptr, ##36476
19800     20 00 90 CD |  if_b	jmp	#LR__2080
19804     84 33 BF FD | 	call	#_pop
19808     A7 FA 61 FC | 	wrlong	result1, fp
1980c     04 4E 05 F1 | 	add	fp, #4
19810     A7 FC 61 FC | 	wrlong	result2, fp
19814     04 4E 05 F1 | 	add	fp, #4
19818     A7 FE 61 FC | 	wrlong	result3, fp
1981c     08 4E 85 F1 | 	sub	fp, #8
19820     24 00 90 FD | 	jmp	#LR__2081
19824                 | LR__2080
19824     52 00 00 FF 
19828     00 E4 05 F1 | 	add	objptr, ##41984
1982c     F2 2A 02 FB | 	rdlong	local03, objptr
19830     52 00 00 FF 
19834     00 E4 85 F1 | 	sub	objptr, ##41984
19838     A7 2A 62 FC | 	wrlong	local03, fp
1983c     08 4E 05 F1 | 	add	fp, #8
19840     A7 3E 68 FC | 	wrlong	#31, fp
19844     08 4E 85 F1 | 	sub	fp, #8
19848                 | LR__2081
19848                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
19848     4A 00 00 FF 
1984c     88 E4 05 F1 | 	add	objptr, ##38024
19850     F2 12 02 FB | 	rdlong	arg01, objptr
19854     4A 00 00 FF 
19858     88 E4 85 F1 | 	sub	objptr, ##38024
1985c     40 7F B0 FD | 	call	#_pslpeek
19860     FF FF 7F FF 
19864     FF FB 0D F2 | 	cmp	result1, ##-1 wz
19868     10 00 90 5D |  if_ne	jmp	#LR__2082
1986c     1B 12 06 F6 | 	mov	arg01, #27
19870     00 14 06 F6 | 	mov	arg02, #0
19874     58 7C B0 FD | 	call	#_printerror
19878     CC 02 90 FD | 	jmp	#LR__2088
1987c                 | LR__2082
1987c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1987c     08 4E 05 F1 | 	add	fp, #8
19880     A7 2A 02 FB | 	rdlong	local03, fp
19884     08 4E 85 F1 | 	sub	fp, #8
19888     2B 2A 0E F2 | 	cmp	local03, #43 wz
1988c     18 00 90 5D |  if_ne	jmp	#LR__2083
19890     A7 12 02 FB | 	rdlong	arg01, fp
19894     6C 34 BF FD | 	call	#_convertstring
19898     A7 FA 61 FC | 	wrlong	result1, fp
1989c     08 4E 05 F1 | 	add	fp, #8
198a0     A7 3E 68 FC | 	wrlong	#31, fp
198a4     08 4E 85 F1 | 	sub	fp, #8
198a8                 | LR__2083
198a8                 | ' if t1.result_type=result_string then
198a8     08 4E 05 F1 | 	add	fp, #8
198ac     A7 2A 02 FB | 	rdlong	local03, fp
198b0     08 4E 85 F1 | 	sub	fp, #8
198b4     1F 2A 0E F2 | 	cmp	local03, #31 wz
198b8     8C 02 90 5D |  if_ne	jmp	#LR__2087
198bc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
198bc     A7 12 02 FB | 	rdlong	arg01, fp
198c0     AA 01 00 FF 
198c4     44 14 06 F6 | 	mov	arg02, ##@LR__5861
198c8     D0 B5 B0 FD | 	call	#__system___string_cmp
198cc     00 FA 0D F2 | 	cmp	result1, #0 wz
198d0     52 00 00 AF 
198d4     00 E4 05 A1 |  if_e	add	objptr, ##41984
198d8     F2 2A 02 AB |  if_e	rdlong	local03, objptr
198dc     A7 2A 62 AC |  if_e	wrlong	local03, fp
198e0     52 00 00 AF 
198e4     00 E4 85 A1 |  if_e	sub	objptr, ##41984
198e8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
198ec     52 00 00 5F 
198f0     00 E4 05 51 |  if_ne	add	objptr, ##41984
198f4     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
198f8     52 00 00 5F 
198fc     00 E4 85 51 |  if_ne	sub	objptr, ##41984
19900                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
19900     09 12 06 F6 | 	mov	arg01, #9
19904     C4 08 B1 FD | 	call	#__system__close
19908     09 2A 06 F6 | 	mov	local03, #9
1990c     4A 00 00 FF 
19910     94 E4 05 F1 | 	add	objptr, ##38036
19914     F2 12 02 FB | 	rdlong	arg01, objptr
19918     4A 00 00 FF 
1991c     94 E4 85 F1 | 	sub	objptr, ##38036
19920     AA 01 00 FF 
19924     45 14 06 F6 | 	mov	arg02, ##@LR__5862
19928     A4 B5 B0 FD | 	call	#__system___string_concat
1992c     FD 12 02 F6 | 	mov	arg01, result1
19930     A7 14 02 FB | 	rdlong	arg02, fp
19934     98 B5 B0 FD | 	call	#__system___string_concat
19938     FD 14 02 F6 | 	mov	arg02, result1
1993c     15 13 02 F6 | 	mov	arg01, local03
19940     0D 16 06 F6 | 	mov	arg03, #13
19944     30 C1 B0 FD | 	call	#__system___basic_open_string
19948     4A 00 00 FF 
1994c     88 E4 05 F1 | 	add	objptr, ##38024
19950     F2 2A 02 FB | 	rdlong	local03, objptr
19954     4A 00 00 FF 
19958     88 E4 85 F1 | 	sub	objptr, ##38024
1995c     B0 4E 05 F1 | 	add	fp, #176
19960     A7 2A 62 FC | 	wrlong	local03, fp
19964     B0 4E 85 F1 | 	sub	fp, #176
19968                 | '   saveptr=programstart
19968                 | '   do
19968                 | LR__2084
19968     14 4E 05 F1 | 	add	fp, #20
1996c     A7 12 02 F6 | 	mov	arg01, fp
19970     9C 4E 05 F1 | 	add	fp, #156
19974     A7 14 02 FB | 	rdlong	arg02, fp
19978     B0 4E 85 F1 | 	sub	fp, #176
1997c     18 16 06 F6 | 	mov	arg03, #24
19980     0B 00 00 FF 
19984     CC E4 05 F1 | 	add	objptr, ##5836
19988     A8 A8 B0 FD | 	call	#_psram_spin2_read1
1998c     2C 4E 05 F1 | 	add	fp, #44
19990     A7 12 02 F6 | 	mov	arg01, fp
19994     10 4E 85 F1 | 	sub	fp, #16
19998     A7 14 02 FB | 	rdlong	arg02, fp
1999c     04 4E 05 F1 | 	add	fp, #4
199a0     A7 16 02 FB | 	rdlong	arg03, fp
199a4     20 4E 85 F1 | 	sub	fp, #32
199a8     88 A8 B0 FD | 	call	#_psram_spin2_read1
199ac     0B 00 00 FF 
199b0     CC E4 85 F1 | 	sub	objptr, ##5836
199b4     AA 01 00 FF 
199b8     47 2A 06 F6 | 	mov	local03, ##@LR__5863
199bc     AC 4E 05 F1 | 	add	fp, #172
199c0     A7 2A 62 FC | 	wrlong	local03, fp
199c4                 | '     psram.read1(varptr(header(0)),saveptr,24)
199c4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
199c4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
199c4     A0 4E 85 F1 | 	sub	fp, #160
199c8     A7 02 68 FC | 	wrlong	#1, fp
199cc     14 4E 05 F1 | 	add	fp, #20
199d0     A7 2C 02 FB | 	rdlong	local04, fp
199d4     20 4E 85 F1 | 	sub	fp, #32
199d8     01 2C 06 F1 | 	add	local04, #1
199dc                 | LR__2085
199dc     0C 4E 05 F1 | 	add	fp, #12
199e0     A7 2A 02 FB | 	rdlong	local03, fp
199e4     0C 4E 85 F1 | 	sub	fp, #12
199e8     16 2B 52 F2 | 	cmps	local03, local04 wc
199ec     54 00 90 3D |  if_ae	jmp	#LR__2086
199f0     AC 4E 05 F1 | 	add	fp, #172
199f4     A7 26 02 FB | 	rdlong	local01, fp
199f8     A0 4E 85 F1 | 	sub	fp, #160
199fc     A7 2A 02 FB | 	rdlong	local03, fp
19a00     01 2A 86 F1 | 	sub	local03, #1
19a04     20 4E 05 F1 | 	add	fp, #32
19a08     A7 2A 02 F1 | 	add	local03, fp
19a0c     15 13 C2 FA | 	rdbyte	arg01, local03
19a10     2C 4E 85 F1 | 	sub	fp, #44
19a14     9C D6 B0 FD | 	call	#__system__Chr_S
19a18     FD 14 02 F6 | 	mov	arg02, result1
19a1c     13 13 02 F6 | 	mov	arg01, local01
19a20     AC B4 B0 FD | 	call	#__system___string_concat
19a24     AC 4E 05 F1 | 	add	fp, #172
19a28     A7 FA 61 FC | 	wrlong	result1, fp
19a2c     A0 4E 85 F1 | 	sub	fp, #160
19a30     A7 2A 02 FB | 	rdlong	local03, fp
19a34     01 2A 06 F1 | 	add	local03, #1
19a38     A7 2A 62 FC | 	wrlong	local03, fp
19a3c     0C 4E 85 F1 | 	sub	fp, #12
19a40     98 FF 9F FD | 	jmp	#LR__2085
19a44                 | LR__2086
19a44                 | '     print #9, saveline$
19a44     09 12 06 F6 | 	mov	arg01, #9
19a48     50 11 B1 FD | 	call	#__system___getiolock_0595
19a4c     FD 12 02 F6 | 	mov	arg01, result1
19a50     20 B4 B0 FD | 	call	#__system___lockmem
19a54     AC 4E 05 F1 | 	add	fp, #172
19a58     A7 14 02 FB | 	rdlong	arg02, fp
19a5c     AC 4E 85 F1 | 	sub	fp, #172
19a60     09 12 06 F6 | 	mov	arg01, #9
19a64     00 16 06 F6 | 	mov	arg03, #0
19a68     FC C0 B0 FD | 	call	#__system___basic_print_string
19a6c     09 12 06 F6 | 	mov	arg01, #9
19a70     0A 14 06 F6 | 	mov	arg02, #10
19a74     00 16 06 F6 | 	mov	arg03, #0
19a78     94 C0 B0 FD | 	call	#__system___basic_print_char
19a7c     09 12 06 F6 | 	mov	arg01, #9
19a80     18 11 B1 FD | 	call	#__system___getiolock_0595
19a84     FD 00 68 FC | 	wrlong	#0, result1
19a88     28 4E 05 F1 | 	add	fp, #40
19a8c     A7 2A 02 FB | 	rdlong	local03, fp
19a90     88 4E 05 F1 | 	add	fp, #136
19a94     A7 2A 62 FC | 	wrlong	local03, fp
19a98     88 4E 85 F1 | 	sub	fp, #136
19a9c     A7 2A 02 FB | 	rdlong	local03, fp
19aa0     28 4E 85 F1 | 	sub	fp, #40
19aa4     FF FF 3F FF 
19aa8     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
19aac     B8 FE 9F 5D |  if_ne	jmp	#LR__2084
19ab0                 | '   close #9  
19ab0     09 12 06 F6 | 	mov	arg01, #9
19ab4     14 07 B1 FD | 	call	#__system__close
19ab8                 | '   print "Saved as ";currentdir$+"/"+loadname
19ab8     00 12 06 F6 | 	mov	arg01, #0
19abc     DC 10 B1 FD | 	call	#__system___getiolock_0595
19ac0     FD 12 02 F6 | 	mov	arg01, result1
19ac4     AC B3 B0 FD | 	call	#__system___lockmem
19ac8     AA 01 00 FF 
19acc     48 14 06 F6 | 	mov	arg02, ##@LR__5864
19ad0     00 12 06 F6 | 	mov	arg01, #0
19ad4     00 16 06 F6 | 	mov	arg03, #0
19ad8     8C C0 B0 FD | 	call	#__system___basic_print_string
19adc     00 28 06 F6 | 	mov	local02, #0
19ae0     4A 00 00 FF 
19ae4     94 E4 05 F1 | 	add	objptr, ##38036
19ae8     F2 12 02 FB | 	rdlong	arg01, objptr
19aec     4A 00 00 FF 
19af0     94 E4 85 F1 | 	sub	objptr, ##38036
19af4     AA 01 00 FF 
19af8     52 14 06 F6 | 	mov	arg02, ##@LR__5865
19afc     D0 B3 B0 FD | 	call	#__system___string_concat
19b00     FD 12 02 F6 | 	mov	arg01, result1
19b04     52 00 00 FF 
19b08     00 E4 05 F1 | 	add	objptr, ##41984
19b0c     F2 14 02 FB | 	rdlong	arg02, objptr
19b10     52 00 00 FF 
19b14     00 E4 85 F1 | 	sub	objptr, ##41984
19b18     B4 B3 B0 FD | 	call	#__system___string_concat
19b1c     FD 14 02 F6 | 	mov	arg02, result1
19b20     14 13 02 F6 | 	mov	arg01, local02
19b24     00 16 06 F6 | 	mov	arg03, #0
19b28     3C C0 B0 FD | 	call	#__system___basic_print_string
19b2c     00 12 06 F6 | 	mov	arg01, #0
19b30     0A 14 06 F6 | 	mov	arg02, #10
19b34     00 16 06 F6 | 	mov	arg03, #0
19b38     D4 BF B0 FD | 	call	#__system___basic_print_char
19b3c     00 12 06 F6 | 	mov	arg01, #0
19b40     58 10 B1 FD | 	call	#__system___getiolock_0595
19b44     FD 00 68 FC | 	wrlong	#0, result1
19b48                 | LR__2087
19b48                 | LR__2088
19b48     A7 F0 03 F6 | 	mov	ptra, fp
19b4c     B2 00 A0 FD | 	call	#popregs_
19b50                 | _do_save_ret
19b50     2D 00 64 FD | 	ret
19b54                 | 
19b54                 | ' 
19b54                 | ' ' ------------------ setdelay
19b54                 | ' 
19b54                 | ' sub do_setdelay
19b54                 | _do_setdelay
19b54     02 4A 05 F6 | 	mov	COUNT_, #2
19b58     A8 00 A0 FD | 	call	#pushregs_
19b5c     18 F0 07 F1 | 	add	ptra, #24
19b60     28 30 BF FD | 	call	#_pop
19b64     FD 12 02 F6 | 	mov	arg01, result1
19b68     FE 26 02 F6 | 	mov	local01, result2
19b6c     FF 28 02 F6 | 	mov	local02, result3
19b70     A7 12 62 FC | 	wrlong	arg01, fp
19b74     04 4E 05 F1 | 	add	fp, #4
19b78     A7 26 62 FC | 	wrlong	local01, fp
19b7c     04 4E 05 F1 | 	add	fp, #4
19b80     A7 28 62 FC | 	wrlong	local02, fp
19b84     08 4E 85 F1 | 	sub	fp, #8
19b88     00 30 BF FD | 	call	#_pop
19b8c     FD 28 02 F6 | 	mov	local02, result1
19b90     0C 4E 05 F1 | 	add	fp, #12
19b94     A7 28 62 FC | 	wrlong	local02, fp
19b98     04 4E 05 F1 | 	add	fp, #4
19b9c     A7 FC 61 FC | 	wrlong	result2, fp
19ba0     04 4E 05 F1 | 	add	fp, #4
19ba4     A7 FE 61 FC | 	wrlong	result3, fp
19ba8     08 4E 85 F1 | 	sub	fp, #8
19bac     A7 12 02 F6 | 	mov	arg01, fp
19bb0     0C 4E 85 F1 | 	sub	fp, #12
19bb4     B8 31 BF FD | 	call	#_converttoint
19bb8     FD 28 02 F6 | 	mov	local02, result1
19bbc     14 27 02 F6 | 	mov	local01, local02
19bc0     01 26 66 F0 | 	shl	local01, #1
19bc4     14 27 02 F1 | 	add	local01, local02
19bc8     03 26 66 F0 | 	shl	local01, #3
19bcc     14 00 00 FF 
19bd0     38 E5 05 F1 | 	add	objptr, ##10552
19bd4     F2 26 02 F1 | 	add	local01, objptr
19bd8     A7 12 02 F6 | 	mov	arg01, fp
19bdc     14 00 00 FF 
19be0     38 E5 85 F1 | 	sub	objptr, ##10552
19be4     88 31 BF FD | 	call	#_converttoint
19be8     06 26 06 F1 | 	add	local01, #6
19bec     13 FB 51 FC | 	wrword	result1, local01
19bf0     A7 F0 03 F6 | 	mov	ptra, fp
19bf4     B2 00 A0 FD | 	call	#popregs_
19bf8                 | _do_setdelay_ret
19bf8     2D 00 64 FD | 	ret
19bfc                 | 
19bfc                 | ' 
19bfc                 | ' ' ------------------ setenv
19bfc                 | ' 
19bfc                 | ' sub do_setenv
19bfc                 | _do_setenv
19bfc     02 4A 05 F6 | 	mov	COUNT_, #2
19c00     A8 00 A0 FD | 	call	#pushregs_
19c04     18 F0 07 F1 | 	add	ptra, #24
19c08     80 2F BF FD | 	call	#_pop
19c0c     FD 12 02 F6 | 	mov	arg01, result1
19c10     FE 26 02 F6 | 	mov	local01, result2
19c14     FF 28 02 F6 | 	mov	local02, result3
19c18     A7 12 62 FC | 	wrlong	arg01, fp
19c1c     04 4E 05 F1 | 	add	fp, #4
19c20     A7 26 62 FC | 	wrlong	local01, fp
19c24     04 4E 05 F1 | 	add	fp, #4
19c28     A7 28 62 FC | 	wrlong	local02, fp
19c2c     08 4E 85 F1 | 	sub	fp, #8
19c30     58 2F BF FD | 	call	#_pop
19c34     FD 28 02 F6 | 	mov	local02, result1
19c38     0C 4E 05 F1 | 	add	fp, #12
19c3c     A7 28 62 FC | 	wrlong	local02, fp
19c40     04 4E 05 F1 | 	add	fp, #4
19c44     A7 FC 61 FC | 	wrlong	result2, fp
19c48     04 4E 05 F1 | 	add	fp, #4
19c4c     A7 FE 61 FC | 	wrlong	result3, fp
19c50     08 4E 85 F1 | 	sub	fp, #8
19c54     A7 12 02 F6 | 	mov	arg01, fp
19c58     0C 4E 85 F1 | 	sub	fp, #12
19c5c     10 31 BF FD | 	call	#_converttoint
19c60     FD 28 02 F6 | 	mov	local02, result1
19c64     14 27 02 F6 | 	mov	local01, local02
19c68     01 26 66 F0 | 	shl	local01, #1
19c6c     14 27 02 F1 | 	add	local01, local02
19c70     03 26 66 F0 | 	shl	local01, #3
19c74     14 00 00 FF 
19c78     38 E5 05 F1 | 	add	objptr, ##10552
19c7c     F2 26 02 F1 | 	add	local01, objptr
19c80     A7 12 02 F6 | 	mov	arg01, fp
19c84     14 00 00 FF 
19c88     38 E5 85 F1 | 	sub	objptr, ##10552
19c8c     E0 30 BF FD | 	call	#_converttoint
19c90     05 26 06 F1 | 	add	local01, #5
19c94     13 FB 41 FC | 	wrbyte	result1, local01
19c98     A7 F0 03 F6 | 	mov	ptra, fp
19c9c     B2 00 A0 FD | 	call	#popregs_
19ca0                 | _do_setenv_ret
19ca0     2D 00 64 FD | 	ret
19ca4                 | 
19ca4                 | ' 
19ca4                 | ' ' ------------------ setlen
19ca4                 | ' 
19ca4                 | ' sub do_setlen
19ca4                 | _do_setlen
19ca4     02 4A 05 F6 | 	mov	COUNT_, #2
19ca8     A8 00 A0 FD | 	call	#pushregs_
19cac     18 F0 07 F1 | 	add	ptra, #24
19cb0     D8 2E BF FD | 	call	#_pop
19cb4     FD 12 02 F6 | 	mov	arg01, result1
19cb8     FE 26 02 F6 | 	mov	local01, result2
19cbc     FF 28 02 F6 | 	mov	local02, result3
19cc0     A7 12 62 FC | 	wrlong	arg01, fp
19cc4     04 4E 05 F1 | 	add	fp, #4
19cc8     A7 26 62 FC | 	wrlong	local01, fp
19ccc     04 4E 05 F1 | 	add	fp, #4
19cd0     A7 28 62 FC | 	wrlong	local02, fp
19cd4     08 4E 85 F1 | 	sub	fp, #8
19cd8     B0 2E BF FD | 	call	#_pop
19cdc     FD 28 02 F6 | 	mov	local02, result1
19ce0     0C 4E 05 F1 | 	add	fp, #12
19ce4     A7 28 62 FC | 	wrlong	local02, fp
19ce8     04 4E 05 F1 | 	add	fp, #4
19cec     A7 FC 61 FC | 	wrlong	result2, fp
19cf0     04 4E 05 F1 | 	add	fp, #4
19cf4     A7 FE 61 FC | 	wrlong	result3, fp
19cf8     08 4E 85 F1 | 	sub	fp, #8
19cfc     A7 12 02 F6 | 	mov	arg01, fp
19d00     0C 4E 85 F1 | 	sub	fp, #12
19d04     68 30 BF FD | 	call	#_converttoint
19d08     FD 28 02 F6 | 	mov	local02, result1
19d0c     14 27 02 F6 | 	mov	local01, local02
19d10     01 26 66 F0 | 	shl	local01, #1
19d14     14 27 02 F1 | 	add	local01, local02
19d18     03 26 66 F0 | 	shl	local01, #3
19d1c     14 00 00 FF 
19d20     38 E5 05 F1 | 	add	objptr, ##10552
19d24     F2 26 02 F1 | 	add	local01, objptr
19d28     A7 12 02 F6 | 	mov	arg01, fp
19d2c     14 00 00 FF 
19d30     38 E5 85 F1 | 	sub	objptr, ##10552
19d34     F4 30 BF FD | 	call	#_converttofloat
19d38     08 26 06 F1 | 	add	local01, #8
19d3c     13 FB 61 FC | 	wrlong	result1, local01
19d40     A7 F0 03 F6 | 	mov	ptra, fp
19d44     B2 00 A0 FD | 	call	#popregs_
19d48                 | _do_setlen_ret
19d48     2D 00 64 FD | 	ret
19d4c                 | 
19d4c                 | ' 
19d4c                 | ' ' ------------------ setpan
19d4c                 | ' 
19d4c                 | ' sub do_setpan
19d4c                 | _do_setpan
19d4c     02 4A 05 F6 | 	mov	COUNT_, #2
19d50     A8 00 A0 FD | 	call	#pushregs_
19d54     18 F0 07 F1 | 	add	ptra, #24
19d58     30 2E BF FD | 	call	#_pop
19d5c     FD 12 02 F6 | 	mov	arg01, result1
19d60     FE 26 02 F6 | 	mov	local01, result2
19d64     FF 28 02 F6 | 	mov	local02, result3
19d68     A7 12 62 FC | 	wrlong	arg01, fp
19d6c     04 4E 05 F1 | 	add	fp, #4
19d70     A7 26 62 FC | 	wrlong	local01, fp
19d74     04 4E 05 F1 | 	add	fp, #4
19d78     A7 28 62 FC | 	wrlong	local02, fp
19d7c     08 4E 85 F1 | 	sub	fp, #8
19d80     08 2E BF FD | 	call	#_pop
19d84     FD 28 02 F6 | 	mov	local02, result1
19d88     0C 4E 05 F1 | 	add	fp, #12
19d8c     A7 28 62 FC | 	wrlong	local02, fp
19d90     04 4E 05 F1 | 	add	fp, #4
19d94     A7 FC 61 FC | 	wrlong	result2, fp
19d98     04 4E 05 F1 | 	add	fp, #4
19d9c     A7 FE 61 FC | 	wrlong	result3, fp
19da0     08 4E 85 F1 | 	sub	fp, #8
19da4     A7 12 02 F6 | 	mov	arg01, fp
19da8     0C 4E 85 F1 | 	sub	fp, #12
19dac     C0 2F BF FD | 	call	#_converttoint
19db0     FD 28 02 F6 | 	mov	local02, result1
19db4     14 27 02 F6 | 	mov	local01, local02
19db8     01 26 66 F0 | 	shl	local01, #1
19dbc     14 27 02 F1 | 	add	local01, local02
19dc0     03 26 66 F0 | 	shl	local01, #3
19dc4     14 00 00 FF 
19dc8     38 E5 05 F1 | 	add	objptr, ##10552
19dcc     F2 26 02 F1 | 	add	local01, objptr
19dd0     A7 12 02 F6 | 	mov	arg01, fp
19dd4     14 00 00 FF 
19dd8     38 E5 85 F1 | 	sub	objptr, ##10552
19ddc     4C 30 BF FD | 	call	#_converttofloat
19de0     10 26 06 F1 | 	add	local01, #16
19de4     13 FB 61 FC | 	wrlong	result1, local01
19de8     A7 F0 03 F6 | 	mov	ptra, fp
19dec     B2 00 A0 FD | 	call	#popregs_
19df0                 | _do_setpan_ret
19df0     2D 00 64 FD | 	ret
19df4                 | 
19df4                 | ' 
19df4                 | ' ' ------------------ setsustain
19df4                 | ' 
19df4                 | ' sub do_setsustain
19df4                 | _do_setsustain
19df4     02 4A 05 F6 | 	mov	COUNT_, #2
19df8     A8 00 A0 FD | 	call	#pushregs_
19dfc     18 F0 07 F1 | 	add	ptra, #24
19e00     88 2D BF FD | 	call	#_pop
19e04     FD 12 02 F6 | 	mov	arg01, result1
19e08     FE 26 02 F6 | 	mov	local01, result2
19e0c     FF 28 02 F6 | 	mov	local02, result3
19e10     A7 12 62 FC | 	wrlong	arg01, fp
19e14     04 4E 05 F1 | 	add	fp, #4
19e18     A7 26 62 FC | 	wrlong	local01, fp
19e1c     04 4E 05 F1 | 	add	fp, #4
19e20     A7 28 62 FC | 	wrlong	local02, fp
19e24     08 4E 85 F1 | 	sub	fp, #8
19e28     60 2D BF FD | 	call	#_pop
19e2c     FD 28 02 F6 | 	mov	local02, result1
19e30     0C 4E 05 F1 | 	add	fp, #12
19e34     A7 28 62 FC | 	wrlong	local02, fp
19e38     04 4E 05 F1 | 	add	fp, #4
19e3c     A7 FC 61 FC | 	wrlong	result2, fp
19e40     04 4E 05 F1 | 	add	fp, #4
19e44     A7 FE 61 FC | 	wrlong	result3, fp
19e48     08 4E 85 F1 | 	sub	fp, #8
19e4c     A7 12 02 F6 | 	mov	arg01, fp
19e50     0C 4E 85 F1 | 	sub	fp, #12
19e54     18 2F BF FD | 	call	#_converttoint
19e58     FD 28 02 F6 | 	mov	local02, result1
19e5c     14 27 02 F6 | 	mov	local01, local02
19e60     01 26 66 F0 | 	shl	local01, #1
19e64     14 27 02 F1 | 	add	local01, local02
19e68     03 26 66 F0 | 	shl	local01, #3
19e6c     14 00 00 FF 
19e70     38 E5 05 F1 | 	add	objptr, ##10552
19e74     F2 26 02 F1 | 	add	local01, objptr
19e78     A7 12 02 F6 | 	mov	arg01, fp
19e7c     14 00 00 FF 
19e80     38 E5 85 F1 | 	sub	objptr, ##10552
19e84     E8 2E BF FD | 	call	#_converttoint
19e88     14 26 06 F1 | 	add	local01, #20
19e8c     13 FB 51 FC | 	wrword	result1, local01
19e90     A7 F0 03 F6 | 	mov	ptra, fp
19e94     B2 00 A0 FD | 	call	#popregs_
19e98                 | _do_setsustain_ret
19e98     2D 00 64 FD | 	ret
19e9c                 | 
19e9c                 | ' 
19e9c                 | ' ' ------------------ setvol
19e9c                 | ' 
19e9c                 | ' sub do_setvol
19e9c                 | _do_setvol
19e9c     02 4A 05 F6 | 	mov	COUNT_, #2
19ea0     A8 00 A0 FD | 	call	#pushregs_
19ea4     18 F0 07 F1 | 	add	ptra, #24
19ea8     E0 2C BF FD | 	call	#_pop
19eac     FD 12 02 F6 | 	mov	arg01, result1
19eb0     FE 26 02 F6 | 	mov	local01, result2
19eb4     FF 28 02 F6 | 	mov	local02, result3
19eb8     A7 12 62 FC | 	wrlong	arg01, fp
19ebc     04 4E 05 F1 | 	add	fp, #4
19ec0     A7 26 62 FC | 	wrlong	local01, fp
19ec4     04 4E 05 F1 | 	add	fp, #4
19ec8     A7 28 62 FC | 	wrlong	local02, fp
19ecc     08 4E 85 F1 | 	sub	fp, #8
19ed0     B8 2C BF FD | 	call	#_pop
19ed4     FD 28 02 F6 | 	mov	local02, result1
19ed8     0C 4E 05 F1 | 	add	fp, #12
19edc     A7 28 62 FC | 	wrlong	local02, fp
19ee0     04 4E 05 F1 | 	add	fp, #4
19ee4     A7 FC 61 FC | 	wrlong	result2, fp
19ee8     04 4E 05 F1 | 	add	fp, #4
19eec     A7 FE 61 FC | 	wrlong	result3, fp
19ef0     08 4E 85 F1 | 	sub	fp, #8
19ef4     A7 12 02 F6 | 	mov	arg01, fp
19ef8     0C 4E 85 F1 | 	sub	fp, #12
19efc     70 2E BF FD | 	call	#_converttoint
19f00     FD 28 02 F6 | 	mov	local02, result1
19f04     14 27 02 F6 | 	mov	local01, local02
19f08     01 26 66 F0 | 	shl	local01, #1
19f0c     14 27 02 F1 | 	add	local01, local02
19f10     03 26 66 F0 | 	shl	local01, #3
19f14     14 00 00 FF 
19f18     38 E5 05 F1 | 	add	objptr, ##10552
19f1c     F2 26 02 F1 | 	add	local01, objptr
19f20     A7 12 02 F6 | 	mov	arg01, fp
19f24     14 00 00 FF 
19f28     38 E5 85 F1 | 	sub	objptr, ##10552
19f2c     FC 2E BF FD | 	call	#_converttofloat
19f30     0C 26 06 F1 | 	add	local01, #12
19f34     13 FB 61 FC | 	wrlong	result1, local01
19f38     A7 F0 03 F6 | 	mov	ptra, fp
19f3c     B2 00 A0 FD | 	call	#popregs_
19f40                 | _do_setvol_ret
19f40     2D 00 64 FD | 	ret
19f44                 | 
19f44                 | ' 
19f44                 | ' ' ------------------ setwave
19f44                 | ' 
19f44                 | ' sub do_setwave
19f44                 | _do_setwave
19f44     02 4A 05 F6 | 	mov	COUNT_, #2
19f48     A8 00 A0 FD | 	call	#pushregs_
19f4c     18 F0 07 F1 | 	add	ptra, #24
19f50     38 2C BF FD | 	call	#_pop
19f54     FD 12 02 F6 | 	mov	arg01, result1
19f58     FE 26 02 F6 | 	mov	local01, result2
19f5c     FF 28 02 F6 | 	mov	local02, result3
19f60     A7 12 62 FC | 	wrlong	arg01, fp
19f64     04 4E 05 F1 | 	add	fp, #4
19f68     A7 26 62 FC | 	wrlong	local01, fp
19f6c     04 4E 05 F1 | 	add	fp, #4
19f70     A7 28 62 FC | 	wrlong	local02, fp
19f74     08 4E 85 F1 | 	sub	fp, #8
19f78     10 2C BF FD | 	call	#_pop
19f7c     FD 28 02 F6 | 	mov	local02, result1
19f80     0C 4E 05 F1 | 	add	fp, #12
19f84     A7 28 62 FC | 	wrlong	local02, fp
19f88     04 4E 05 F1 | 	add	fp, #4
19f8c     A7 FC 61 FC | 	wrlong	result2, fp
19f90     04 4E 05 F1 | 	add	fp, #4
19f94     A7 FE 61 FC | 	wrlong	result3, fp
19f98     08 4E 85 F1 | 	sub	fp, #8
19f9c     A7 12 02 F6 | 	mov	arg01, fp
19fa0     0C 4E 85 F1 | 	sub	fp, #12
19fa4     C8 2D BF FD | 	call	#_converttoint
19fa8     FD 28 02 F6 | 	mov	local02, result1
19fac     14 27 02 F6 | 	mov	local01, local02
19fb0     01 26 66 F0 | 	shl	local01, #1
19fb4     14 27 02 F1 | 	add	local01, local02
19fb8     03 26 66 F0 | 	shl	local01, #3
19fbc     14 00 00 FF 
19fc0     38 E5 05 F1 | 	add	objptr, ##10552
19fc4     F2 26 02 F1 | 	add	local01, objptr
19fc8     A7 12 02 F6 | 	mov	arg01, fp
19fcc     14 00 00 FF 
19fd0     38 E5 85 F1 | 	sub	objptr, ##10552
19fd4     98 2D BF FD | 	call	#_converttoint
19fd8     04 26 06 F1 | 	add	local01, #4
19fdc     13 FB 41 FC | 	wrbyte	result1, local01
19fe0     A7 F0 03 F6 | 	mov	ptra, fp
19fe4     B2 00 A0 FD | 	call	#popregs_
19fe8                 | _do_setwave_ret
19fe8     2D 00 64 FD | 	ret
19fec                 | 
19fec                 | ' 
19fec                 | ' ' ------------------ shutup
19fec                 | ' 
19fec                 | ' sub do_shutup
19fec                 | _do_shutup
19fec     03 4A 05 F6 | 	mov	COUNT_, #3
19ff0     A8 00 A0 FD | 	call	#pushregs_
19ff4     18 F0 07 F1 | 	add	ptra, #24
19ff8     4A 00 00 FF 
19ffc     80 E4 05 F1 | 	add	objptr, ##38016
1a000     F2 26 02 FB | 	rdlong	local01, objptr
1a004     13 29 02 F6 | 	mov	local02, local01
1a008     01 28 66 F0 | 	shl	local02, #1
1a00c     13 29 02 F1 | 	add	local02, local01
1a010     02 28 66 F0 | 	shl	local02, #2
1a014     03 00 00 FF 
1a018     04 E4 85 F1 | 	sub	objptr, ##1540
1a01c     F2 28 02 F1 | 	add	local02, objptr
1a020     14 2B 0A FB | 	rdlong	local03, local02 wz
1a024     14 4E 05 F1 | 	add	fp, #20
1a028     A7 2A 62 FC | 	wrlong	local03, fp
1a02c                 | ' 
1a02c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a02c                 | ' if numpar=0 then
1a02c     14 4E 85 F1 | 	sub	fp, #20
1a030     47 00 00 FF 
1a034     7C E4 85 F1 | 	sub	objptr, ##36476
1a038     50 00 90 5D |  if_ne	jmp	#LR__2092
1a03c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1a03c     10 4E 05 F1 | 	add	fp, #16
1a040     A7 00 68 FC | 	wrlong	#0, fp
1a044     37 00 00 FF 
1a048     10 E4 05 F1 | 	add	objptr, ##28176
1a04c     97 16 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
1a050                 | LR__2090
1a050     F2 12 02 FB | 	rdlong	arg01, objptr
1a054     A7 2A 02 FB | 	rdlong	local03, fp
1a058     06 2A 66 F0 | 	shl	local03, #6
1a05c     15 13 02 F1 | 	add	arg01, local03
1a060     14 12 06 F1 | 	add	arg01, #20
1a064     09 01 58 FC | 	wrword	#0, arg01
1a068     A7 2A 02 FB | 	rdlong	local03, fp
1a06c     01 2A 06 F1 | 	add	local03, #1
1a070     A7 2A 62 FC | 	wrlong	local03, fp
1a074     08 2A 56 F2 | 	cmps	local03, #8 wc
1a078     D4 FF 9F CD |  if_b	jmp	#LR__2090
1a07c                 | LR__2091
1a07c     37 00 00 FF 
1a080     10 E4 85 F1 | 	sub	objptr, ##28176
1a084     10 4E 85 F1 | 	sub	fp, #16
1a088     64 00 90 FD | 	jmp	#LR__2093
1a08c                 | LR__2092
1a08c     FC 2A BF FD | 	call	#_pop
1a090     FF 26 02 F6 | 	mov	local01, result3
1a094     A7 FA 61 FC | 	wrlong	result1, fp
1a098     04 4E 05 F1 | 	add	fp, #4
1a09c     A7 FC 61 FC | 	wrlong	result2, fp
1a0a0     04 4E 05 F1 | 	add	fp, #4
1a0a4     A7 26 62 FC | 	wrlong	local01, fp
1a0a8     08 4E 85 F1 | 	sub	fp, #8
1a0ac     A7 12 02 F6 | 	mov	arg01, fp
1a0b0     BC 2C BF FD | 	call	#_converttoint
1a0b4     FD 2A 52 F6 | 	abs	local03, result1 wc
1a0b8     07 2A 06 F5 | 	and	local03, #7
1a0bc     15 29 82 F6 | 	negc	local02, local03
1a0c0     0C 4E 05 F1 | 	add	fp, #12
1a0c4     A7 28 62 FC | 	wrlong	local02, fp
1a0c8     37 00 00 FF 
1a0cc     10 E4 05 F1 | 	add	objptr, ##28176
1a0d0     F2 12 02 FB | 	rdlong	arg01, objptr
1a0d4     37 00 00 FF 
1a0d8     10 E4 85 F1 | 	sub	objptr, ##28176
1a0dc     0C 4E 85 F1 | 	sub	fp, #12
1a0e0     06 28 66 F0 | 	shl	local02, #6
1a0e4     14 13 02 F1 | 	add	arg01, local02
1a0e8     14 12 06 F1 | 	add	arg01, #20
1a0ec     09 01 58 FC | 	wrword	#0, arg01
1a0f0                 | LR__2093
1a0f0     A7 F0 03 F6 | 	mov	ptra, fp
1a0f4     B2 00 A0 FD | 	call	#popregs_
1a0f8                 | _do_shutup_ret
1a0f8     2D 00 64 FD | 	ret
1a0fc                 | 
1a0fc                 | ' 
1a0fc                 | ' ' ------------------ sin
1a0fc                 | ' 
1a0fc                 | ' sub do_sin
1a0fc                 | _do_sin
1a0fc     01 4A 05 F6 | 	mov	COUNT_, #1
1a100     A8 00 A0 FD | 	call	#pushregs_
1a104     10 F0 07 F1 | 	add	ptra, #16
1a108     4A 00 00 FF 
1a10c     80 E4 05 F1 | 	add	objptr, ##38016
1a110     F2 26 02 FB | 	rdlong	local01, objptr
1a114     13 17 02 F6 | 	mov	arg03, local01
1a118     01 16 66 F0 | 	shl	arg03, #1
1a11c     13 17 02 F1 | 	add	arg03, local01
1a120     02 16 66 F0 | 	shl	arg03, #2
1a124     03 00 00 FF 
1a128     04 E4 85 F1 | 	sub	objptr, ##1540
1a12c     F2 16 02 F1 | 	add	arg03, objptr
1a130     0B 17 02 FB | 	rdlong	arg03, arg03
1a134     0C 4E 05 F1 | 	add	fp, #12
1a138     A7 16 62 FC | 	wrlong	arg03, fp
1a13c                 | ' 
1a13c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a13c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1a13c     0C 4E 85 F1 | 	sub	fp, #12
1a140     02 16 16 F2 | 	cmp	arg03, #2 wc
1a144     47 00 00 FF 
1a148     7C E4 85 F1 | 	sub	objptr, ##36476
1a14c     0C 4E 05 C1 |  if_b	add	fp, #12
1a150     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a154     0C 4E 85 C1 |  if_b	sub	fp, #12
1a158     40 00 90 4D |  if_c_and_nz	jmp	#LR__2100
1a15c     00 12 06 F6 | 	mov	arg01, #0
1a160     38 0A B1 FD | 	call	#__system___getiolock_0595
1a164     FD 12 02 F6 | 	mov	arg01, result1
1a168     08 AD B0 FD | 	call	#__system___lockmem
1a16c     AA 01 00 FF 
1a170     54 14 06 F6 | 	mov	arg02, ##@LR__5866
1a174     00 12 06 F6 | 	mov	arg01, #0
1a178     00 16 06 F6 | 	mov	arg03, #0
1a17c     E8 B9 B0 FD | 	call	#__system___basic_print_string
1a180     00 12 06 F6 | 	mov	arg01, #0
1a184     14 0A B1 FD | 	call	#__system___getiolock_0595
1a188     FD 00 68 FC | 	wrlong	#0, result1
1a18c     27 12 06 F6 | 	mov	arg01, #39
1a190     00 14 06 F6 | 	mov	arg02, #0
1a194     38 73 B0 FD | 	call	#_printerror
1a198     64 00 90 FD | 	jmp	#LR__2101
1a19c                 | LR__2100
1a19c     EC 29 BF FD | 	call	#_pop
1a1a0     A7 FA 61 FC | 	wrlong	result1, fp
1a1a4     04 4E 05 F1 | 	add	fp, #4
1a1a8     A7 FC 61 FC | 	wrlong	result2, fp
1a1ac     04 4E 05 F1 | 	add	fp, #4
1a1b0     A7 FE 61 FC | 	wrlong	result3, fp
1a1b4     08 4E 85 F1 | 	sub	fp, #8
1a1b8     51 00 00 FF 
1a1bc     E4 E5 05 F1 | 	add	objptr, ##41956
1a1c0     F2 26 02 FB | 	rdlong	local01, objptr
1a1c4     51 00 00 FF 
1a1c8     E4 E5 85 F1 | 	sub	objptr, ##41956
1a1cc     A7 12 02 F6 | 	mov	arg01, fp
1a1d0     58 2C BF FD | 	call	#_converttofloat
1a1d4     FD 14 02 F6 | 	mov	arg02, result1
1a1d8     13 13 02 F6 | 	mov	arg01, local01
1a1dc     0C DB B0 FD | 	call	#__system___float_mul
1a1e0     FD 12 02 F6 | 	mov	arg01, result1
1a1e4     64 E4 B0 FD | 	call	#__system____builtin_sinf
1a1e8     A7 FA 61 FC | 	wrlong	result1, fp
1a1ec     08 4E 05 F1 | 	add	fp, #8
1a1f0     A7 3C 68 FC | 	wrlong	#30, fp
1a1f4     08 4E 85 F1 | 	sub	fp, #8
1a1f8     A7 12 02 F6 | 	mov	arg01, fp
1a1fc     24 2A BF FD | 	call	#_push
1a200                 | LR__2101
1a200     A7 F0 03 F6 | 	mov	ptra, fp
1a204     B2 00 A0 FD | 	call	#popregs_
1a208                 | _do_sin_ret
1a208     2D 00 64 FD | 	ret
1a20c                 | 
1a20c                 | ' 
1a20c                 | ' ' ------------------ skip
1a20c                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1a20c                 | ' 
1a20c                 | ' sub do_skip
1a20c                 | _do_skip
1a20c     4A 00 00 FF 
1a210     80 E4 05 F1 | 	add	objptr, ##38016
1a214     F2 00 02 FB | 	rdlong	_var01, objptr
1a218     00 03 02 F6 | 	mov	_var02, _var01
1a21c     01 02 66 F0 | 	shl	_var02, #1
1a220     00 03 02 F1 | 	add	_var02, _var01
1a224     02 02 66 F0 | 	shl	_var02, #2
1a228     03 00 00 FF 
1a22c     04 E4 85 F1 | 	sub	objptr, ##1540
1a230     F2 02 02 F1 | 	add	_var02, objptr
1a234     01 03 02 FB | 	rdlong	_var02, _var02
1a238     01 02 86 F1 | 	sub	_var02, #1
1a23c     03 00 00 FF 
1a240     04 E4 05 F1 | 	add	objptr, ##1540
1a244     F2 02 62 FC | 	wrlong	_var02, objptr
1a248     4A 00 00 FF 
1a24c     80 E4 85 F1 | 	sub	objptr, ##38016
1a250                 | _do_skip_ret
1a250     2D 00 64 FD | 	ret
1a254                 | 
1a254                 | ' 
1a254                 | ' ' ------------------ sprite
1a254                 | ' 
1a254                 | ' sub do_sprite
1a254                 | _do_sprite
1a254     00 4A 05 F6 | 	mov	COUNT_, #0
1a258     A8 00 A0 FD | 	call	#pushregs_
1a25c     30 F0 07 F1 | 	add	ptra, #48
1a260     28 29 BF FD | 	call	#_pop
1a264     FD 16 02 F6 | 	mov	arg03, result1
1a268     FE 14 02 F6 | 	mov	arg02, result2
1a26c     FF 12 02 F6 | 	mov	arg01, result3
1a270     18 4E 05 F1 | 	add	fp, #24
1a274     A7 16 62 FC | 	wrlong	arg03, fp
1a278     04 4E 05 F1 | 	add	fp, #4
1a27c     A7 14 62 FC | 	wrlong	arg02, fp
1a280     04 4E 05 F1 | 	add	fp, #4
1a284     A7 12 62 FC | 	wrlong	arg01, fp
1a288     20 4E 85 F1 | 	sub	fp, #32
1a28c     FC 28 BF FD | 	call	#_pop
1a290     FD 16 02 F6 | 	mov	arg03, result1
1a294     FE 14 02 F6 | 	mov	arg02, result2
1a298     FF 12 02 F6 | 	mov	arg01, result3
1a29c     0C 4E 05 F1 | 	add	fp, #12
1a2a0     A7 16 62 FC | 	wrlong	arg03, fp
1a2a4     04 4E 05 F1 | 	add	fp, #4
1a2a8     A7 14 62 FC | 	wrlong	arg02, fp
1a2ac     04 4E 05 F1 | 	add	fp, #4
1a2b0     A7 12 62 FC | 	wrlong	arg01, fp
1a2b4     14 4E 85 F1 | 	sub	fp, #20
1a2b8     D0 28 BF FD | 	call	#_pop
1a2bc     FF 16 02 F6 | 	mov	arg03, result3
1a2c0     A7 FA 61 FC | 	wrlong	result1, fp
1a2c4     04 4E 05 F1 | 	add	fp, #4
1a2c8     A7 FC 61 FC | 	wrlong	result2, fp
1a2cc     04 4E 05 F1 | 	add	fp, #4
1a2d0     A7 16 62 FC | 	wrlong	arg03, fp
1a2d4     08 4E 85 F1 | 	sub	fp, #8
1a2d8     A7 12 02 F6 | 	mov	arg01, fp
1a2dc     90 2A BF FD | 	call	#_converttoint
1a2e0     24 4E 05 F1 | 	add	fp, #36
1a2e4     A7 FA 61 FC | 	wrlong	result1, fp
1a2e8     18 4E 85 F1 | 	sub	fp, #24
1a2ec     A7 12 02 F6 | 	mov	arg01, fp
1a2f0     0C 4E 85 F1 | 	sub	fp, #12
1a2f4     78 2A BF FD | 	call	#_converttoint
1a2f8     28 4E 05 F1 | 	add	fp, #40
1a2fc     A7 FA 61 FC | 	wrlong	result1, fp
1a300     10 4E 85 F1 | 	sub	fp, #16
1a304     A7 12 02 F6 | 	mov	arg01, fp
1a308     18 4E 85 F1 | 	sub	fp, #24
1a30c     60 2A BF FD | 	call	#_converttoint
1a310     2C 4E 05 F1 | 	add	fp, #44
1a314     A7 FA 61 FC | 	wrlong	result1, fp
1a318     08 4E 85 F1 | 	sub	fp, #8
1a31c     A7 12 02 FB | 	rdlong	arg01, fp
1a320     04 4E 05 F1 | 	add	fp, #4
1a324     A7 14 02 FB | 	rdlong	arg02, fp
1a328     FD 16 02 F6 | 	mov	arg03, result1
1a32c     28 4E 85 F1 | 	sub	fp, #40
1a330     7C 81 B0 FD | 	call	#_hg010b_spin2_setspritepos
1a334     A7 F0 03 F6 | 	mov	ptra, fp
1a338     B2 00 A0 FD | 	call	#popregs_
1a33c                 | _do_sprite_ret
1a33c     2D 00 64 FD | 	ret
1a340                 | 
1a340                 | ' 
1a340                 | ' ' ------------------ sqr
1a340                 | ' 
1a340                 | ' sub do_sqr
1a340                 | _do_sqr
1a340     01 4A 05 F6 | 	mov	COUNT_, #1
1a344     A8 00 A0 FD | 	call	#pushregs_
1a348     10 F0 07 F1 | 	add	ptra, #16
1a34c     4A 00 00 FF 
1a350     80 E4 05 F1 | 	add	objptr, ##38016
1a354     F2 26 02 FB | 	rdlong	local01, objptr
1a358     13 17 02 F6 | 	mov	arg03, local01
1a35c     01 16 66 F0 | 	shl	arg03, #1
1a360     13 17 02 F1 | 	add	arg03, local01
1a364     02 16 66 F0 | 	shl	arg03, #2
1a368     03 00 00 FF 
1a36c     04 E4 85 F1 | 	sub	objptr, ##1540
1a370     F2 16 02 F1 | 	add	arg03, objptr
1a374     0B 17 02 FB | 	rdlong	arg03, arg03
1a378     0C 4E 05 F1 | 	add	fp, #12
1a37c     A7 16 62 FC | 	wrlong	arg03, fp
1a380                 | ' 
1a380                 | ' numpar=compiledline(lineptr_e).result.uresult
1a380                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1a380     0C 4E 85 F1 | 	sub	fp, #12
1a384     02 16 16 F2 | 	cmp	arg03, #2 wc
1a388     47 00 00 FF 
1a38c     7C E4 85 F1 | 	sub	objptr, ##36476
1a390     0C 4E 05 C1 |  if_b	add	fp, #12
1a394     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a398     0C 4E 85 C1 |  if_b	sub	fp, #12
1a39c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2110
1a3a0     00 12 06 F6 | 	mov	arg01, #0
1a3a4     F4 07 B1 FD | 	call	#__system___getiolock_0595
1a3a8     FD 12 02 F6 | 	mov	arg01, result1
1a3ac     C4 AA B0 FD | 	call	#__system___lockmem
1a3b0     AA 01 00 FF 
1a3b4     5A 14 06 F6 | 	mov	arg02, ##@LR__5867
1a3b8     00 12 06 F6 | 	mov	arg01, #0
1a3bc     00 16 06 F6 | 	mov	arg03, #0
1a3c0     A4 B7 B0 FD | 	call	#__system___basic_print_string
1a3c4     00 12 06 F6 | 	mov	arg01, #0
1a3c8     D0 07 B1 FD | 	call	#__system___getiolock_0595
1a3cc     FD 00 68 FC | 	wrlong	#0, result1
1a3d0     27 12 06 F6 | 	mov	arg01, #39
1a3d4     00 14 06 F6 | 	mov	arg02, #0
1a3d8     F4 70 B0 FD | 	call	#_printerror
1a3dc     48 00 90 FD | 	jmp	#LR__2111
1a3e0                 | LR__2110
1a3e0     A8 27 BF FD | 	call	#_pop
1a3e4     FF 26 02 F6 | 	mov	local01, result3
1a3e8     A7 FA 61 FC | 	wrlong	result1, fp
1a3ec     04 4E 05 F1 | 	add	fp, #4
1a3f0     A7 FC 61 FC | 	wrlong	result2, fp
1a3f4     04 4E 05 F1 | 	add	fp, #4
1a3f8     A7 26 62 FC | 	wrlong	local01, fp
1a3fc     08 4E 85 F1 | 	sub	fp, #8
1a400     A7 12 02 F6 | 	mov	arg01, fp
1a404     24 2A BF FD | 	call	#_converttofloat
1a408     FD 12 02 F6 | 	mov	arg01, result1
1a40c     04 D8 B0 FD | 	call	#__system___float_sqrt
1a410     A7 FA 61 FC | 	wrlong	result1, fp
1a414     08 4E 05 F1 | 	add	fp, #8
1a418     A7 3C 68 FC | 	wrlong	#30, fp
1a41c     08 4E 85 F1 | 	sub	fp, #8
1a420     A7 12 02 F6 | 	mov	arg01, fp
1a424     FC 27 BF FD | 	call	#_push
1a428                 | LR__2111
1a428     A7 F0 03 F6 | 	mov	ptra, fp
1a42c     B2 00 A0 FD | 	call	#popregs_
1a430                 | _do_sqr_ret
1a430     2D 00 64 FD | 	ret
1a434                 | 
1a434                 | ' 
1a434                 | ' ' ------------------ stick
1a434                 | ' 
1a434                 | ' sub do_stick
1a434                 | _do_stick
1a434     01 4A 05 F6 | 	mov	COUNT_, #1
1a438     A8 00 A0 FD | 	call	#pushregs_
1a43c     10 F0 07 F1 | 	add	ptra, #16
1a440     4A 00 00 FF 
1a444     80 E4 05 F1 | 	add	objptr, ##38016
1a448     F2 26 02 FB | 	rdlong	local01, objptr
1a44c     13 17 02 F6 | 	mov	arg03, local01
1a450     01 16 66 F0 | 	shl	arg03, #1
1a454     13 17 02 F1 | 	add	arg03, local01
1a458     02 16 66 F0 | 	shl	arg03, #2
1a45c     03 00 00 FF 
1a460     04 E4 85 F1 | 	sub	objptr, ##1540
1a464     F2 16 02 F1 | 	add	arg03, objptr
1a468     0B 17 02 FB | 	rdlong	arg03, arg03
1a46c     0C 4E 05 F1 | 	add	fp, #12
1a470     A7 16 62 FC | 	wrlong	arg03, fp
1a474                 | ' 
1a474                 | ' numpar=compiledline(lineptr_e).result.uresult
1a474                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1a474     0C 4E 85 F1 | 	sub	fp, #12
1a478     02 16 16 F2 | 	cmp	arg03, #2 wc
1a47c     47 00 00 FF 
1a480     7C E4 85 F1 | 	sub	objptr, ##36476
1a484     40 00 90 CD |  if_b	jmp	#LR__2120
1a488     00 12 06 F6 | 	mov	arg01, #0
1a48c     0C 07 B1 FD | 	call	#__system___getiolock_0595
1a490     FD 12 02 F6 | 	mov	arg01, result1
1a494     DC A9 B0 FD | 	call	#__system___lockmem
1a498     AA 01 00 FF 
1a49c     60 14 06 F6 | 	mov	arg02, ##@LR__5868
1a4a0     00 12 06 F6 | 	mov	arg01, #0
1a4a4     00 16 06 F6 | 	mov	arg03, #0
1a4a8     BC B6 B0 FD | 	call	#__system___basic_print_string
1a4ac     00 12 06 F6 | 	mov	arg01, #0
1a4b0     E8 06 B1 FD | 	call	#__system___getiolock_0595
1a4b4     FD 00 68 FC | 	wrlong	#0, result1
1a4b8     27 12 06 F6 | 	mov	arg01, #39
1a4bc     00 14 06 F6 | 	mov	arg02, #0
1a4c0     0C 70 B0 FD | 	call	#_printerror
1a4c4     F0 00 90 FD | 	jmp	#LR__2124
1a4c8                 | LR__2120
1a4c8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1a4c8     0C 4E 05 F1 | 	add	fp, #12
1a4cc     A7 FE 09 FB | 	rdlong	result3, fp wz
1a4d0     0C 4E 85 F1 | 	sub	fp, #12
1a4d4     30 00 90 5D |  if_ne	jmp	#LR__2121
1a4d8     51 00 00 FF 
1a4dc     58 E5 05 F1 | 	add	objptr, ##41816
1a4e0     F2 26 02 FB | 	rdlong	local01, objptr
1a4e4     51 00 00 FF 
1a4e8     58 E5 85 F1 | 	sub	objptr, ##41816
1a4ec     A7 26 62 FC | 	wrlong	local01, fp
1a4f0     08 4E 05 F1 | 	add	fp, #8
1a4f4     A7 3A 68 FC | 	wrlong	#29, fp
1a4f8     08 4E 85 F1 | 	sub	fp, #8
1a4fc     A7 12 02 F6 | 	mov	arg01, fp
1a500     20 27 BF FD | 	call	#_push
1a504     B0 00 90 FD | 	jmp	#LR__2124
1a508                 | LR__2121
1a508     80 26 BF FD | 	call	#_pop
1a50c     A7 FA 61 FC | 	wrlong	result1, fp
1a510     04 4E 05 F1 | 	add	fp, #4
1a514     A7 FC 61 FC | 	wrlong	result2, fp
1a518     04 4E 05 F1 | 	add	fp, #4
1a51c     A7 FE 61 FC | 	wrlong	result3, fp
1a520                 | ' t1=pop()
1a520                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1a520     08 4E 85 F1 | 	sub	fp, #8
1a524     1C FE 0D F2 | 	cmp	result3, #28 wz
1a528     08 4E 05 51 |  if_ne	add	fp, #8
1a52c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a530     08 4E 85 51 |  if_ne	sub	fp, #8
1a534     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a538     70 00 90 5D |  if_ne	jmp	#LR__2123
1a53c     A7 26 02 FB | 	rdlong	local01, fp
1a540     52 00 00 FF 
1a544     44 E4 05 F1 | 	add	objptr, ##42052
1a548     F2 26 62 FC | 	wrlong	local01, objptr
1a54c                 | '   q=t1.result.uresult
1a54c                 | '   if q<7 then 
1a54c     52 00 00 FF 
1a550     44 E4 85 F1 | 	sub	objptr, ##42052
1a554     07 26 56 F2 | 	cmps	local01, #7 wc
1a558     40 00 90 3D |  if_ae	jmp	#LR__2122
1a55c     52 00 00 FF 
1a560     44 E4 05 F1 | 	add	objptr, ##42052
1a564     F2 26 02 FB | 	rdlong	local01, objptr
1a568     02 26 66 F0 | 	shl	local01, #2
1a56c     EC E4 85 F1 | 	sub	objptr, #236
1a570     F2 26 02 F1 | 	add	local01, objptr
1a574     13 27 02 FB | 	rdlong	local01, local01
1a578     A7 26 62 FC | 	wrlong	local01, fp
1a57c     08 4E 05 F1 | 	add	fp, #8
1a580     A7 3A 68 FC | 	wrlong	#29, fp
1a584     08 4E 85 F1 | 	sub	fp, #8
1a588     A7 12 02 F6 | 	mov	arg01, fp
1a58c     51 00 00 FF 
1a590     58 E5 85 F1 | 	sub	objptr, ##41816
1a594     8C 26 BF FD | 	call	#_push
1a598                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1a598     1C 00 90 FD | 	jmp	#LR__2124
1a59c                 | LR__2122
1a59c     29 12 06 F6 | 	mov	arg01, #41
1a5a0     00 14 06 F6 | 	mov	arg02, #0
1a5a4     28 6F B0 FD | 	call	#_printerror
1a5a8                 | '      printerror(41) : return
1a5a8     0C 00 90 FD | 	jmp	#LR__2124
1a5ac                 | LR__2123
1a5ac     29 12 06 F6 | 	mov	arg01, #41
1a5b0     00 14 06 F6 | 	mov	arg02, #0
1a5b4     18 6F B0 FD | 	call	#_printerror
1a5b8                 | LR__2124
1a5b8     A7 F0 03 F6 | 	mov	ptra, fp
1a5bc     B2 00 A0 FD | 	call	#popregs_
1a5c0                 | _do_stick_ret
1a5c0     2D 00 64 FD | 	ret
1a5c4                 | 
1a5c4                 | ' 
1a5c4                 | ' ' ------------------ strig
1a5c4                 | ' 
1a5c4                 | ' sub do_strig
1a5c4                 | _do_strig
1a5c4     01 4A 05 F6 | 	mov	COUNT_, #1
1a5c8     A8 00 A0 FD | 	call	#pushregs_
1a5cc     10 F0 07 F1 | 	add	ptra, #16
1a5d0     4A 00 00 FF 
1a5d4     80 E4 05 F1 | 	add	objptr, ##38016
1a5d8     F2 26 02 FB | 	rdlong	local01, objptr
1a5dc     13 17 02 F6 | 	mov	arg03, local01
1a5e0     01 16 66 F0 | 	shl	arg03, #1
1a5e4     13 17 02 F1 | 	add	arg03, local01
1a5e8     02 16 66 F0 | 	shl	arg03, #2
1a5ec     03 00 00 FF 
1a5f0     04 E4 85 F1 | 	sub	objptr, ##1540
1a5f4     F2 16 02 F1 | 	add	arg03, objptr
1a5f8     0B 17 02 FB | 	rdlong	arg03, arg03
1a5fc     0C 4E 05 F1 | 	add	fp, #12
1a600     A7 16 62 FC | 	wrlong	arg03, fp
1a604                 | ' 
1a604                 | ' numpar=compiledline(lineptr_e).result.uresult
1a604                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1a604     0C 4E 85 F1 | 	sub	fp, #12
1a608     02 16 16 F2 | 	cmp	arg03, #2 wc
1a60c     47 00 00 FF 
1a610     7C E4 85 F1 | 	sub	objptr, ##36476
1a614     40 00 90 CD |  if_b	jmp	#LR__2130
1a618     00 12 06 F6 | 	mov	arg01, #0
1a61c     7C 05 B1 FD | 	call	#__system___getiolock_0595
1a620     FD 12 02 F6 | 	mov	arg01, result1
1a624     4C A8 B0 FD | 	call	#__system___lockmem
1a628     AA 01 00 FF 
1a62c     68 14 06 F6 | 	mov	arg02, ##@LR__5869
1a630     00 12 06 F6 | 	mov	arg01, #0
1a634     00 16 06 F6 | 	mov	arg03, #0
1a638     2C B5 B0 FD | 	call	#__system___basic_print_string
1a63c     00 12 06 F6 | 	mov	arg01, #0
1a640     58 05 B1 FD | 	call	#__system___getiolock_0595
1a644     FD 00 68 FC | 	wrlong	#0, result1
1a648     27 12 06 F6 | 	mov	arg01, #39
1a64c     00 14 06 F6 | 	mov	arg02, #0
1a650     7C 6E B0 FD | 	call	#_printerror
1a654     F0 00 90 FD | 	jmp	#LR__2134
1a658                 | LR__2130
1a658                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1a658     0C 4E 05 F1 | 	add	fp, #12
1a65c     A7 FE 09 FB | 	rdlong	result3, fp wz
1a660     0C 4E 85 F1 | 	sub	fp, #12
1a664     30 00 90 5D |  if_ne	jmp	#LR__2131
1a668     51 00 00 FF 
1a66c     74 E5 05 F1 | 	add	objptr, ##41844
1a670     F2 26 02 FB | 	rdlong	local01, objptr
1a674     51 00 00 FF 
1a678     74 E5 85 F1 | 	sub	objptr, ##41844
1a67c     A7 26 62 FC | 	wrlong	local01, fp
1a680     08 4E 05 F1 | 	add	fp, #8
1a684     A7 3A 68 FC | 	wrlong	#29, fp
1a688     08 4E 85 F1 | 	sub	fp, #8
1a68c     A7 12 02 F6 | 	mov	arg01, fp
1a690     90 25 BF FD | 	call	#_push
1a694     B0 00 90 FD | 	jmp	#LR__2134
1a698                 | LR__2131
1a698     F0 24 BF FD | 	call	#_pop
1a69c     A7 FA 61 FC | 	wrlong	result1, fp
1a6a0     04 4E 05 F1 | 	add	fp, #4
1a6a4     A7 FC 61 FC | 	wrlong	result2, fp
1a6a8     04 4E 05 F1 | 	add	fp, #4
1a6ac     A7 FE 61 FC | 	wrlong	result3, fp
1a6b0                 | ' t1=pop()
1a6b0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1a6b0     08 4E 85 F1 | 	sub	fp, #8
1a6b4     1C FE 0D F2 | 	cmp	result3, #28 wz
1a6b8     08 4E 05 51 |  if_ne	add	fp, #8
1a6bc     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a6c0     08 4E 85 51 |  if_ne	sub	fp, #8
1a6c4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a6c8     70 00 90 5D |  if_ne	jmp	#LR__2133
1a6cc     A7 26 02 FB | 	rdlong	local01, fp
1a6d0     52 00 00 FF 
1a6d4     44 E4 05 F1 | 	add	objptr, ##42052
1a6d8     F2 26 62 FC | 	wrlong	local01, objptr
1a6dc                 | '   q=t1.result.uresult
1a6dc                 | '   if q<7 then 
1a6dc     52 00 00 FF 
1a6e0     44 E4 85 F1 | 	sub	objptr, ##42052
1a6e4     07 26 56 F2 | 	cmps	local01, #7 wc
1a6e8     40 00 90 3D |  if_ae	jmp	#LR__2132
1a6ec     52 00 00 FF 
1a6f0     44 E4 05 F1 | 	add	objptr, ##42052
1a6f4     F2 26 02 FB | 	rdlong	local01, objptr
1a6f8     02 26 66 F0 | 	shl	local01, #2
1a6fc     D0 E4 85 F1 | 	sub	objptr, #208
1a700     F2 26 02 F1 | 	add	local01, objptr
1a704     13 27 02 FB | 	rdlong	local01, local01
1a708     A7 26 62 FC | 	wrlong	local01, fp
1a70c     08 4E 05 F1 | 	add	fp, #8
1a710     A7 3A 68 FC | 	wrlong	#29, fp
1a714     08 4E 85 F1 | 	sub	fp, #8
1a718     A7 12 02 F6 | 	mov	arg01, fp
1a71c     51 00 00 FF 
1a720     74 E5 85 F1 | 	sub	objptr, ##41844
1a724     FC 24 BF FD | 	call	#_push
1a728                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1a728     1C 00 90 FD | 	jmp	#LR__2134
1a72c                 | LR__2132
1a72c     29 12 06 F6 | 	mov	arg01, #41
1a730     00 14 06 F6 | 	mov	arg02, #0
1a734     98 6D B0 FD | 	call	#_printerror
1a738                 | '      printerror(41) : return
1a738     0C 00 90 FD | 	jmp	#LR__2134
1a73c                 | LR__2133
1a73c     29 12 06 F6 | 	mov	arg01, #41
1a740     00 14 06 F6 | 	mov	arg02, #0
1a744     88 6D B0 FD | 	call	#_printerror
1a748                 | LR__2134
1a748     A7 F0 03 F6 | 	mov	ptra, fp
1a74c     B2 00 A0 FD | 	call	#popregs_
1a750                 | _do_strig_ret
1a750     2D 00 64 FD | 	ret
1a754                 | 
1a754                 | ' 
1a754                 | ' ' ------------------ tan
1a754                 | ' 
1a754                 | ' sub do_tan
1a754                 | _do_tan
1a754     01 4A 05 F6 | 	mov	COUNT_, #1
1a758     A8 00 A0 FD | 	call	#pushregs_
1a75c     10 F0 07 F1 | 	add	ptra, #16
1a760     4A 00 00 FF 
1a764     80 E4 05 F1 | 	add	objptr, ##38016
1a768     F2 26 02 FB | 	rdlong	local01, objptr
1a76c     13 17 02 F6 | 	mov	arg03, local01
1a770     01 16 66 F0 | 	shl	arg03, #1
1a774     13 17 02 F1 | 	add	arg03, local01
1a778     02 16 66 F0 | 	shl	arg03, #2
1a77c     03 00 00 FF 
1a780     04 E4 85 F1 | 	sub	objptr, ##1540
1a784     F2 16 02 F1 | 	add	arg03, objptr
1a788     0B 17 02 FB | 	rdlong	arg03, arg03
1a78c     0C 4E 05 F1 | 	add	fp, #12
1a790     A7 16 62 FC | 	wrlong	arg03, fp
1a794                 | ' 
1a794                 | ' numpar=compiledline(lineptr_e).result.uresult
1a794                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1a794     0C 4E 85 F1 | 	sub	fp, #12
1a798     02 16 16 F2 | 	cmp	arg03, #2 wc
1a79c     47 00 00 FF 
1a7a0     7C E4 85 F1 | 	sub	objptr, ##36476
1a7a4     0C 4E 05 C1 |  if_b	add	fp, #12
1a7a8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a7ac     0C 4E 85 C1 |  if_b	sub	fp, #12
1a7b0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2140
1a7b4     00 12 06 F6 | 	mov	arg01, #0
1a7b8     E0 03 B1 FD | 	call	#__system___getiolock_0595
1a7bc     FD 12 02 F6 | 	mov	arg01, result1
1a7c0     B0 A6 B0 FD | 	call	#__system___lockmem
1a7c4     AA 01 00 FF 
1a7c8     70 14 06 F6 | 	mov	arg02, ##@LR__5870
1a7cc     00 12 06 F6 | 	mov	arg01, #0
1a7d0     00 16 06 F6 | 	mov	arg03, #0
1a7d4     90 B3 B0 FD | 	call	#__system___basic_print_string
1a7d8     00 12 06 F6 | 	mov	arg01, #0
1a7dc     BC 03 B1 FD | 	call	#__system___getiolock_0595
1a7e0     FD 00 68 FC | 	wrlong	#0, result1
1a7e4     27 12 06 F6 | 	mov	arg01, #39
1a7e8     00 14 06 F6 | 	mov	arg02, #0
1a7ec     E0 6C B0 FD | 	call	#_printerror
1a7f0     64 00 90 FD | 	jmp	#LR__2141
1a7f4                 | LR__2140
1a7f4     94 23 BF FD | 	call	#_pop
1a7f8     A7 FA 61 FC | 	wrlong	result1, fp
1a7fc     04 4E 05 F1 | 	add	fp, #4
1a800     A7 FC 61 FC | 	wrlong	result2, fp
1a804     04 4E 05 F1 | 	add	fp, #4
1a808     A7 FE 61 FC | 	wrlong	result3, fp
1a80c     08 4E 85 F1 | 	sub	fp, #8
1a810     51 00 00 FF 
1a814     E4 E5 05 F1 | 	add	objptr, ##41956
1a818     F2 26 02 FB | 	rdlong	local01, objptr
1a81c     51 00 00 FF 
1a820     E4 E5 85 F1 | 	sub	objptr, ##41956
1a824     A7 12 02 F6 | 	mov	arg01, fp
1a828     00 26 BF FD | 	call	#_converttofloat
1a82c     FD 14 02 F6 | 	mov	arg02, result1
1a830     13 13 02 F6 | 	mov	arg01, local01
1a834     B4 D4 B0 FD | 	call	#__system___float_mul
1a838     FD 12 02 F6 | 	mov	arg01, result1
1a83c     58 DF B0 FD | 	call	#__system____builtin_tanf
1a840     A7 FA 61 FC | 	wrlong	result1, fp
1a844     08 4E 05 F1 | 	add	fp, #8
1a848     A7 3C 68 FC | 	wrlong	#30, fp
1a84c     08 4E 85 F1 | 	sub	fp, #8
1a850     A7 12 02 F6 | 	mov	arg01, fp
1a854     CC 23 BF FD | 	call	#_push
1a858                 | LR__2141
1a858     A7 F0 03 F6 | 	mov	ptra, fp
1a85c     B2 00 A0 FD | 	call	#popregs_
1a860                 | _do_tan_ret
1a860     2D 00 64 FD | 	ret
1a864                 | 
1a864                 | ' 
1a864                 | ' ' ------------------ val
1a864                 | ' 
1a864                 | ' sub do_val
1a864                 | _do_val
1a864     03 4A 05 F6 | 	mov	COUNT_, #3
1a868     A8 00 A0 FD | 	call	#pushregs_
1a86c     20 F0 07 F1 | 	add	ptra, #32
1a870     4A 00 00 FF 
1a874     80 E4 05 F1 | 	add	objptr, ##38016
1a878     F2 16 02 FB | 	rdlong	arg03, objptr
1a87c     0B 27 02 F6 | 	mov	local01, arg03
1a880     01 26 66 F0 | 	shl	local01, #1
1a884     0B 27 02 F1 | 	add	local01, arg03
1a888     02 26 66 F0 | 	shl	local01, #2
1a88c     03 00 00 FF 
1a890     04 E4 85 F1 | 	sub	objptr, ##1540
1a894     F2 26 02 F1 | 	add	local01, objptr
1a898     13 17 02 FB | 	rdlong	arg03, local01
1a89c     0C 4E 05 F1 | 	add	fp, #12
1a8a0     A7 16 62 FC | 	wrlong	arg03, fp
1a8a4                 | ' 
1a8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
1a8a4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1a8a4     0C 4E 85 F1 | 	sub	fp, #12
1a8a8     02 16 16 F2 | 	cmp	arg03, #2 wc
1a8ac     47 00 00 FF 
1a8b0     7C E4 85 F1 | 	sub	objptr, ##36476
1a8b4     0C 4E 05 C1 |  if_b	add	fp, #12
1a8b8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a8bc     0C 4E 85 C1 |  if_b	sub	fp, #12
1a8c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2150
1a8c4     00 12 06 F6 | 	mov	arg01, #0
1a8c8     D0 02 B1 FD | 	call	#__system___getiolock_0595
1a8cc     FD 12 02 F6 | 	mov	arg01, result1
1a8d0     A0 A5 B0 FD | 	call	#__system___lockmem
1a8d4     AA 01 00 FF 
1a8d8     76 14 06 F6 | 	mov	arg02, ##@LR__5871
1a8dc     00 12 06 F6 | 	mov	arg01, #0
1a8e0     00 16 06 F6 | 	mov	arg03, #0
1a8e4     80 B2 B0 FD | 	call	#__system___basic_print_string
1a8e8     00 12 06 F6 | 	mov	arg01, #0
1a8ec     AC 02 B1 FD | 	call	#__system___getiolock_0595
1a8f0     FD 00 68 FC | 	wrlong	#0, result1
1a8f4     27 12 06 F6 | 	mov	arg01, #39
1a8f8     00 14 06 F6 | 	mov	arg02, #0
1a8fc     D0 6B B0 FD | 	call	#_printerror
1a900     60 02 90 FD | 	jmp	#LR__2163
1a904                 | LR__2150
1a904     84 22 BF FD | 	call	#_pop
1a908     FF 16 02 F6 | 	mov	arg03, result3
1a90c     A7 FA 61 FC | 	wrlong	result1, fp
1a910     04 4E 05 F1 | 	add	fp, #4
1a914     A7 FC 61 FC | 	wrlong	result2, fp
1a918     04 4E 05 F1 | 	add	fp, #4
1a91c     A7 16 62 FC | 	wrlong	arg03, fp
1a920                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a920     08 4E 85 F1 | 	sub	fp, #8
1a924     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a928     18 00 90 5D |  if_ne	jmp	#LR__2151
1a92c     A7 12 02 FB | 	rdlong	arg01, fp
1a930     D0 23 BF FD | 	call	#_convertstring
1a934     A7 FA 61 FC | 	wrlong	result1, fp
1a938     08 4E 05 F1 | 	add	fp, #8
1a93c     A7 3E 68 FC | 	wrlong	#31, fp
1a940     08 4E 85 F1 | 	sub	fp, #8
1a944                 | LR__2151
1a944                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1a944     08 4E 05 F1 | 	add	fp, #8
1a948     A7 16 02 FB | 	rdlong	arg03, fp
1a94c     08 4E 85 F1 | 	sub	fp, #8
1a950     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a954     40 00 90 AD |  if_e	jmp	#LR__2152
1a958     00 12 06 F6 | 	mov	arg01, #0
1a95c     3C 02 B1 FD | 	call	#__system___getiolock_0595
1a960     FD 12 02 F6 | 	mov	arg01, result1
1a964     0C A5 B0 FD | 	call	#__system___lockmem
1a968     AA 01 00 FF 
1a96c     7C 14 06 F6 | 	mov	arg02, ##@LR__5872
1a970     00 12 06 F6 | 	mov	arg01, #0
1a974     00 16 06 F6 | 	mov	arg03, #0
1a978     EC B1 B0 FD | 	call	#__system___basic_print_string
1a97c     00 12 06 F6 | 	mov	arg01, #0
1a980     18 02 B1 FD | 	call	#__system___getiolock_0595
1a984     FD 00 68 FC | 	wrlong	#0, result1
1a988     0F 12 06 F6 | 	mov	arg01, #15
1a98c     00 14 06 F6 | 	mov	arg02, #0
1a990     3C 6B B0 FD | 	call	#_printerror
1a994     CC 01 90 FD | 	jmp	#LR__2163
1a998                 | LR__2152
1a998                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1a998     A7 12 02 FB | 	rdlong	arg01, fp
1a99c     01 14 06 F6 | 	mov	arg02, #1
1a9a0     4C C5 B0 FD | 	call	#__system__Left_S
1a9a4     FD 12 02 F6 | 	mov	arg01, result1
1a9a8     AA 01 00 FF 
1a9ac     82 14 06 F6 | 	mov	arg02, ##@LR__5873
1a9b0     E8 A4 B0 FD | 	call	#__system___string_cmp
1a9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9b8     48 00 90 5D |  if_ne	jmp	#LR__2155
1a9bc     AA 01 00 FF 
1a9c0     84 26 06 F6 | 	mov	local01, ##@LR__5874
1a9c4     A7 16 02 FB | 	rdlong	arg03, fp
1a9c8     0B 13 02 F6 | 	mov	arg01, arg03
1a9cc     09 29 02 F6 | 	mov	local02, arg01
1a9d0     97 06 48 FB | 	callpa	#(@LR__2154-@LR__2153)>>2,fcache_load_ptr_
1a9d4                 | LR__2153
1a9d4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1a9d8     01 28 06 51 |  if_ne	add	local02, #1
1a9dc     F4 FF 9F 5D |  if_ne	jmp	#LR__2153
1a9e0                 | LR__2154
1a9e0     09 29 82 F1 | 	sub	local02, arg01
1a9e4     14 15 02 F6 | 	mov	arg02, local02
1a9e8     01 14 86 F1 | 	sub	arg02, #1
1a9ec     0B 13 02 F6 | 	mov	arg01, arg03
1a9f0     84 C5 B0 FD | 	call	#__system__Right_S
1a9f4     FD 14 02 F6 | 	mov	arg02, result1
1a9f8     13 13 02 F6 | 	mov	arg01, local01
1a9fc     D0 A4 B0 FD | 	call	#__system___string_concat
1aa00     A7 FA 61 FC | 	wrlong	result1, fp
1aa04                 | LR__2155
1aa04                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1aa04     A7 12 02 FB | 	rdlong	arg01, fp
1aa08     01 14 06 F6 | 	mov	arg02, #1
1aa0c     E0 C4 B0 FD | 	call	#__system__Left_S
1aa10     FD 12 02 F6 | 	mov	arg01, result1
1aa14     AA 01 00 FF 
1aa18     87 14 06 F6 | 	mov	arg02, ##@LR__5875
1aa1c     7C A4 B0 FD | 	call	#__system___string_cmp
1aa20     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa24     48 00 90 5D |  if_ne	jmp	#LR__2158
1aa28     AA 01 00 FF 
1aa2c     89 26 06 F6 | 	mov	local01, ##@LR__5876
1aa30     A7 16 02 FB | 	rdlong	arg03, fp
1aa34     0B 13 02 F6 | 	mov	arg01, arg03
1aa38     09 29 02 F6 | 	mov	local02, arg01
1aa3c     97 06 48 FB | 	callpa	#(@LR__2157-@LR__2156)>>2,fcache_load_ptr_
1aa40                 | LR__2156
1aa40     14 FB C9 FA | 	rdbyte	result1, local02 wz
1aa44     01 28 06 51 |  if_ne	add	local02, #1
1aa48     F4 FF 9F 5D |  if_ne	jmp	#LR__2156
1aa4c                 | LR__2157
1aa4c     09 29 82 F1 | 	sub	local02, arg01
1aa50     14 15 02 F6 | 	mov	arg02, local02
1aa54     01 14 86 F1 | 	sub	arg02, #1
1aa58     0B 13 02 F6 | 	mov	arg01, arg03
1aa5c     18 C5 B0 FD | 	call	#__system__Right_S
1aa60     FD 14 02 F6 | 	mov	arg02, result1
1aa64     13 13 02 F6 | 	mov	arg01, local01
1aa68     64 A4 B0 FD | 	call	#__system___string_concat
1aa6c     A7 FA 61 FC | 	wrlong	result1, fp
1aa70                 | LR__2158
1aa70     A7 12 02 FB | 	rdlong	arg01, fp
1aa74     80 DA B0 FD | 	call	#__system____builtin_atof
1aa78     1C 4E 05 F1 | 	add	fp, #28
1aa7c     A7 FA 61 FC | 	wrlong	result1, fp
1aa80     1C 4E 85 F1 | 	sub	fp, #28
1aa84     A7 12 02 FB | 	rdlong	arg01, fp
1aa88     00 14 06 F6 | 	mov	arg02, #0
1aa8c     D4 D8 B0 FD | 	call	#__system____builtin_atoi
1aa90     18 4E 05 F1 | 	add	fp, #24
1aa94     A7 FA 61 FC | 	wrlong	result1, fp
1aa98                 | ' fval=val(t1.result.sresult)
1aa98                 | ' ival=val%(t1.result.sresult)
1aa98                 | ' if fval=ival then
1aa98     04 4E 05 F1 | 	add	fp, #4
1aa9c     A7 26 02 FB | 	rdlong	local01, fp
1aaa0     1C 4E 85 F1 | 	sub	fp, #28
1aaa4     FD 12 52 F6 | 	abs	arg01, result1 wc
1aaa8     1F 2A C6 C9 |  if_b	decod	local03, #31
1aaac     00 2A 06 36 |  if_ae	mov	local03, #0
1aab0     34 CE B0 FD | 	call	#__system___float_fromuns
1aab4     15 FB 61 F5 | 	xor	result1, local03
1aab8     FD 14 02 F6 | 	mov	arg02, result1
1aabc     13 13 02 F6 | 	mov	arg01, local01
1aac0     01 16 06 F6 | 	mov	arg03, #1
1aac4     58 D6 B0 FD | 	call	#__system___float_cmp
1aac8     00 FA 0D F2 | 	cmp	result1, #0 wz
1aacc     20 00 90 5D |  if_ne	jmp	#LR__2159
1aad0     18 4E 05 F1 | 	add	fp, #24
1aad4     A7 26 02 FB | 	rdlong	local01, fp
1aad8     18 4E 85 F1 | 	sub	fp, #24
1aadc     A7 26 62 FC | 	wrlong	local01, fp
1aae0     08 4E 05 F1 | 	add	fp, #8
1aae4     A7 38 68 FC | 	wrlong	#28, fp
1aae8     08 4E 85 F1 | 	sub	fp, #8
1aaec     6C 00 90 FD | 	jmp	#LR__2162
1aaf0                 | LR__2159
1aaf0                 | '   if fval=0 andalso ival<>0 then
1aaf0     1C 4E 05 F1 | 	add	fp, #28
1aaf4     A7 12 02 FB | 	rdlong	arg01, fp
1aaf8     1C 4E 85 F1 | 	sub	fp, #28
1aafc     00 14 06 F6 | 	mov	arg02, #0
1ab00     01 16 06 F6 | 	mov	arg03, #1
1ab04     18 D6 B0 FD | 	call	#__system___float_cmp
1ab08     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab0c     30 00 90 5D |  if_ne	jmp	#LR__2160
1ab10     18 4E 05 F1 | 	add	fp, #24
1ab14     A7 26 0A FB | 	rdlong	local01, fp wz
1ab18     18 4E 85 F1 | 	sub	fp, #24
1ab1c     20 00 90 AD |  if_e	jmp	#LR__2160
1ab20     18 4E 05 F1 | 	add	fp, #24
1ab24     A7 26 02 FB | 	rdlong	local01, fp
1ab28     18 4E 85 F1 | 	sub	fp, #24
1ab2c     A7 26 62 FC | 	wrlong	local01, fp
1ab30     08 4E 05 F1 | 	add	fp, #8
1ab34     A7 38 68 FC | 	wrlong	#28, fp
1ab38     08 4E 85 F1 | 	sub	fp, #8
1ab3c     1C 00 90 FD | 	jmp	#LR__2161
1ab40                 | LR__2160
1ab40     1C 4E 05 F1 | 	add	fp, #28
1ab44     A7 26 02 FB | 	rdlong	local01, fp
1ab48     1C 4E 85 F1 | 	sub	fp, #28
1ab4c     A7 26 62 FC | 	wrlong	local01, fp
1ab50     08 4E 05 F1 | 	add	fp, #8
1ab54     A7 3C 68 FC | 	wrlong	#30, fp
1ab58     08 4E 85 F1 | 	sub	fp, #8
1ab5c                 | LR__2161
1ab5c                 | LR__2162
1ab5c     A7 12 02 F6 | 	mov	arg01, fp
1ab60     C0 20 BF FD | 	call	#_push
1ab64                 | LR__2163
1ab64     A7 F0 03 F6 | 	mov	ptra, fp
1ab68     B2 00 A0 FD | 	call	#popregs_
1ab6c                 | _do_val_ret
1ab6c     2D 00 64 FD | 	ret
1ab70                 | 
1ab70                 | ' 
1ab70                 | ' ' ------------------ waitclock
1ab70                 | ' 
1ab70                 | ' sub do_waitclock
1ab70                 | _do_waitclock
1ab70     51 00 00 FF 
1ab74     D0 E5 05 F1 | 	add	objptr, ##41936
1ab78     F2 00 02 FB | 	rdlong	_var01, objptr
1ab7c                 | ' c=hkcnt
1ab7c                 | ' do: loop until hkcnt<>c
1ab7c                 | LR__2170
1ab7c     F2 02 02 FB | 	rdlong	_var02, objptr
1ab80     00 03 0A F2 | 	cmp	_var02, _var01 wz
1ab84     F4 FF 9F AD |  if_e	jmp	#LR__2170
1ab88     51 00 00 FF 
1ab8c     D0 E5 85 F1 | 	sub	objptr, ##41936
1ab90                 | _do_waitclock_ret
1ab90     2D 00 64 FD | 	ret
1ab94                 | 
1ab94                 | ' 
1ab94                 | ' ' ------------------ waitms
1ab94                 | ' 
1ab94                 | ' sub do_waitms
1ab94                 | _do_waitms
1ab94     01 4A 05 F6 | 	mov	COUNT_, #1
1ab98     A8 00 A0 FD | 	call	#pushregs_
1ab9c     18 F0 07 F1 | 	add	ptra, #24
1aba0     E8 1F BF FD | 	call	#_pop
1aba4     A7 FA 61 FC | 	wrlong	result1, fp
1aba8     04 4E 05 F1 | 	add	fp, #4
1abac     A7 FC 61 FC | 	wrlong	result2, fp
1abb0     04 4E 05 F1 | 	add	fp, #4
1abb4     A7 FE 61 FC | 	wrlong	result3, fp
1abb8     08 4E 85 F1 | 	sub	fp, #8
1abbc     A7 12 02 F6 | 	mov	arg01, fp
1abc0     AC 21 BF FD | 	call	#_converttoint
1abc4     0C 4E 05 F1 | 	add	fp, #12
1abc8     A7 FA 61 FC | 	wrlong	result1, fp
1abcc                 | ' 
1abcc                 | ' t1=pop()  
1abcc                 | ' t=converttoint(t1)
1abcc                 | ' if t<0 then return
1abcc     0C 4E 85 F1 | 	sub	fp, #12
1abd0     00 FA 55 F2 | 	cmps	result1, #0 wc
1abd4     E4 00 90 CD |  if_b	jmp	#LR__2186
1abd8                 | ' if t < 1000 then 
1abd8     0C 4E 05 F1 | 	add	fp, #12
1abdc     A7 12 02 FB | 	rdlong	arg01, fp
1abe0     0C 4E 85 F1 | 	sub	fp, #12
1abe4     01 00 00 FF 
1abe8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1abec     14 00 90 3D |  if_ae	jmp	#LR__2180
1abf0     0C 4E 05 F1 | 	add	fp, #12
1abf4     A7 12 02 FB | 	rdlong	arg01, fp
1abf8     0C 4E 85 F1 | 	sub	fp, #12
1abfc     68 A5 B0 FD | 	call	#__system___waitms
1ac00     B8 00 90 FD | 	jmp	#LR__2185
1ac04                 | LR__2180
1ac04     10 4E 05 F1 | 	add	fp, #16
1ac08     A7 02 68 FC | 	wrlong	#1, fp
1ac0c     04 4E 85 F1 | 	sub	fp, #4
1ac10     A7 12 02 FB | 	rdlong	arg01, fp
1ac14     09 13 52 F6 | 	abs	arg01, arg01 wc
1ac18     01 00 00 FF 
1ac1c     E8 13 16 FD | 	qdiv	arg01, ##1000
1ac20                 | '   for i=1 to t/1000
1ac20     0C 4E 85 F1 | 	sub	fp, #12
1ac24     18 26 62 FD | 	getqx	local01
1ac28     13 27 82 F6 | 	negc	local01, local01
1ac2c     01 26 06 F1 | 	add	local01, #1
1ac30                 | LR__2181
1ac30     10 4E 05 F1 | 	add	fp, #16
1ac34     A7 12 02 FB | 	rdlong	arg01, fp
1ac38     10 4E 85 F1 | 	sub	fp, #16
1ac3c     13 13 52 F2 | 	cmps	arg01, local01 wc
1ac40     54 00 90 3D |  if_ae	jmp	#LR__2184
1ac44     01 00 00 FF 
1ac48     E8 13 06 F6 | 	mov	arg01, ##1000
1ac4c     18 A5 B0 FD | 	call	#__system___waitms
1ac50                 | '     waitms(1000)
1ac50                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1ac50     E0 12 06 F6 | 	mov	arg01, #224
1ac54     6C 99 B0 FD | 	call	#_usbnew_spin2_keystate
1ac58     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac5c     10 00 90 5D |  if_ne	jmp	#LR__2182
1ac60     E4 12 06 F6 | 	mov	arg01, #228
1ac64     5C 99 B0 FD | 	call	#_usbnew_spin2_keystate
1ac68     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac6c     10 00 90 AD |  if_e	jmp	#LR__2183
1ac70                 | LR__2182
1ac70     06 12 06 F6 | 	mov	arg01, #6
1ac74     4C 99 B0 FD | 	call	#_usbnew_spin2_keystate
1ac78     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac7c     3C 00 90 5D |  if_ne	jmp	#LR__2186
1ac80                 | LR__2183
1ac80     10 4E 05 F1 | 	add	fp, #16
1ac84     A7 12 02 FB | 	rdlong	arg01, fp
1ac88     01 12 06 F1 | 	add	arg01, #1
1ac8c     A7 12 62 FC | 	wrlong	arg01, fp
1ac90     10 4E 85 F1 | 	sub	fp, #16
1ac94     98 FF 9F FD | 	jmp	#LR__2181
1ac98                 | LR__2184
1ac98     0C 4E 05 F1 | 	add	fp, #12
1ac9c     A7 26 02 FB | 	rdlong	local01, fp
1aca0     13 27 52 F6 | 	abs	local01, local01 wc
1aca4     01 00 00 FF 
1aca8     E8 27 16 FD | 	qdiv	local01, ##1000
1acac     0C 4E 85 F1 | 	sub	fp, #12
1acb0     19 26 62 FD | 	getqy	local01
1acb4     13 13 82 F6 | 	negc	arg01, local01
1acb8     AC A4 B0 FD | 	call	#__system___waitms
1acbc                 | LR__2185
1acbc                 | LR__2186
1acbc     A7 F0 03 F6 | 	mov	ptra, fp
1acc0     B2 00 A0 FD | 	call	#popregs_
1acc4                 | _do_waitms_ret
1acc4     2D 00 64 FD | 	ret
1acc8                 | 
1acc8                 | ' 
1acc8                 | ' ' ------------------ waitvbl
1acc8                 | ' 
1acc8                 | ' sub do_waitvbl
1acc8                 | _do_waitvbl
1acc8     01 12 06 F6 | 	mov	arg01, #1
1accc     F8 84 B0 FD | 	call	#_hg010b_spin2_waitvbl
1acd0                 | _do_waitvbl_ret
1acd0     2D 00 64 FD | 	ret
1acd4                 | 
1acd4                 | ' 
1acd4                 | ' ' ------------------ wrpin
1acd4                 | ' 
1acd4                 | ' sub do_wrpin
1acd4                 | _do_wrpin
1acd4     01 4A 05 F6 | 	mov	COUNT_, #1
1acd8     A8 00 A0 FD | 	call	#pushregs_
1acdc     18 F0 07 F1 | 	add	ptra, #24
1ace0     A8 1E BF FD | 	call	#_pop
1ace4     FD 14 02 F6 | 	mov	arg02, result1
1ace8     FE 12 02 F6 | 	mov	arg01, result2
1acec     FF 26 02 F6 | 	mov	local01, result3
1acf0     A7 14 62 FC | 	wrlong	arg02, fp
1acf4     04 4E 05 F1 | 	add	fp, #4
1acf8     A7 12 62 FC | 	wrlong	arg01, fp
1acfc     04 4E 05 F1 | 	add	fp, #4
1ad00     A7 26 62 FC | 	wrlong	local01, fp
1ad04     08 4E 85 F1 | 	sub	fp, #8
1ad08     80 1E BF FD | 	call	#_pop
1ad0c     FF 26 02 F6 | 	mov	local01, result3
1ad10     0C 4E 05 F1 | 	add	fp, #12
1ad14     A7 FA 61 FC | 	wrlong	result1, fp
1ad18     04 4E 05 F1 | 	add	fp, #4
1ad1c     A7 FC 61 FC | 	wrlong	result2, fp
1ad20     04 4E 05 F1 | 	add	fp, #4
1ad24     A7 26 62 FC | 	wrlong	local01, fp
1ad28     08 4E 85 F1 | 	sub	fp, #8
1ad2c     A7 12 02 F6 | 	mov	arg01, fp
1ad30     0C 4E 85 F1 | 	sub	fp, #12
1ad34     38 20 BF FD | 	call	#_converttoint
1ad38     FD 26 02 F6 | 	mov	local01, result1
1ad3c     A7 12 02 F6 | 	mov	arg01, fp
1ad40     2C 20 BF FD | 	call	#_converttoint
1ad44     13 FB 01 FC | 	wrpin	result1, local01
1ad48     A7 F0 03 F6 | 	mov	ptra, fp
1ad4c     B2 00 A0 FD | 	call	#popregs_
1ad50                 | _do_wrpin_ret
1ad50     2D 00 64 FD | 	ret
1ad54                 | 
1ad54                 | ' 
1ad54                 | ' ' ------------------ wxpin
1ad54                 | ' 
1ad54                 | ' sub do_wxpin
1ad54                 | _do_wxpin
1ad54     01 4A 05 F6 | 	mov	COUNT_, #1
1ad58     A8 00 A0 FD | 	call	#pushregs_
1ad5c     18 F0 07 F1 | 	add	ptra, #24
1ad60     28 1E BF FD | 	call	#_pop
1ad64     FD 14 02 F6 | 	mov	arg02, result1
1ad68     FE 12 02 F6 | 	mov	arg01, result2
1ad6c     FF 26 02 F6 | 	mov	local01, result3
1ad70     A7 14 62 FC | 	wrlong	arg02, fp
1ad74     04 4E 05 F1 | 	add	fp, #4
1ad78     A7 12 62 FC | 	wrlong	arg01, fp
1ad7c     04 4E 05 F1 | 	add	fp, #4
1ad80     A7 26 62 FC | 	wrlong	local01, fp
1ad84     08 4E 85 F1 | 	sub	fp, #8
1ad88     00 1E BF FD | 	call	#_pop
1ad8c     FF 26 02 F6 | 	mov	local01, result3
1ad90     0C 4E 05 F1 | 	add	fp, #12
1ad94     A7 FA 61 FC | 	wrlong	result1, fp
1ad98     04 4E 05 F1 | 	add	fp, #4
1ad9c     A7 FC 61 FC | 	wrlong	result2, fp
1ada0     04 4E 05 F1 | 	add	fp, #4
1ada4     A7 26 62 FC | 	wrlong	local01, fp
1ada8     08 4E 85 F1 | 	sub	fp, #8
1adac     A7 12 02 F6 | 	mov	arg01, fp
1adb0     0C 4E 85 F1 | 	sub	fp, #12
1adb4     B8 1F BF FD | 	call	#_converttoint
1adb8     FD 26 02 F6 | 	mov	local01, result1
1adbc     A7 12 02 F6 | 	mov	arg01, fp
1adc0     AC 1F BF FD | 	call	#_converttoint
1adc4     13 FB 11 FC | 	wxpin	result1, local01
1adc8     A7 F0 03 F6 | 	mov	ptra, fp
1adcc     B2 00 A0 FD | 	call	#popregs_
1add0                 | _do_wxpin_ret
1add0     2D 00 64 FD | 	ret
1add4                 | 
1add4                 | ' 
1add4                 | ' ' ------------------ wypin
1add4                 | ' 
1add4                 | ' sub do_wypin
1add4                 | _do_wypin
1add4     01 4A 05 F6 | 	mov	COUNT_, #1
1add8     A8 00 A0 FD | 	call	#pushregs_
1addc     18 F0 07 F1 | 	add	ptra, #24
1ade0     A8 1D BF FD | 	call	#_pop
1ade4     FD 14 02 F6 | 	mov	arg02, result1
1ade8     FE 12 02 F6 | 	mov	arg01, result2
1adec     FF 26 02 F6 | 	mov	local01, result3
1adf0     A7 14 62 FC | 	wrlong	arg02, fp
1adf4     04 4E 05 F1 | 	add	fp, #4
1adf8     A7 12 62 FC | 	wrlong	arg01, fp
1adfc     04 4E 05 F1 | 	add	fp, #4
1ae00     A7 26 62 FC | 	wrlong	local01, fp
1ae04     08 4E 85 F1 | 	sub	fp, #8
1ae08     80 1D BF FD | 	call	#_pop
1ae0c     FF 26 02 F6 | 	mov	local01, result3
1ae10     0C 4E 05 F1 | 	add	fp, #12
1ae14     A7 FA 61 FC | 	wrlong	result1, fp
1ae18     04 4E 05 F1 | 	add	fp, #4
1ae1c     A7 FC 61 FC | 	wrlong	result2, fp
1ae20     04 4E 05 F1 | 	add	fp, #4
1ae24     A7 26 62 FC | 	wrlong	local01, fp
1ae28     08 4E 85 F1 | 	sub	fp, #8
1ae2c     A7 12 02 F6 | 	mov	arg01, fp
1ae30     0C 4E 85 F1 | 	sub	fp, #12
1ae34     38 1F BF FD | 	call	#_converttoint
1ae38     FD 26 02 F6 | 	mov	local01, result1
1ae3c     A7 12 02 F6 | 	mov	arg01, fp
1ae40     2C 1F BF FD | 	call	#_converttoint
1ae44     13 FB 21 FC | 	wypin	result1, local01
1ae48     A7 F0 03 F6 | 	mov	ptra, fp
1ae4c     B2 00 A0 FD | 	call	#popregs_
1ae50                 | _do_wypin_ret
1ae50     2D 00 64 FD | 	ret
1ae54                 | 
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ae54                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1ae54                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ae54                 | ' 
1ae54                 | ' 
1ae54                 | ' '------------------ Assign
1ae54                 | ' 
1ae54                 | ' sub do_assign
1ae54                 | _do_assign
1ae54     05 4A 05 F6 | 	mov	COUNT_, #5
1ae58     A8 00 A0 FD | 	call	#pushregs_
1ae5c     44 F0 07 F1 | 	add	ptra, #68
1ae60     4A 00 00 FF 
1ae64     80 E4 05 F1 | 	add	objptr, ##38016
1ae68     F2 16 02 FB | 	rdlong	arg03, objptr
1ae6c     0B 15 02 F6 | 	mov	arg02, arg03
1ae70     01 14 66 F0 | 	shl	arg02, #1
1ae74     0B 15 02 F1 | 	add	arg02, arg03
1ae78     02 14 66 F0 | 	shl	arg02, #2
1ae7c     03 00 00 FF 
1ae80     04 E4 85 F1 | 	sub	objptr, ##1540
1ae84     F2 14 02 F1 | 	add	arg02, objptr
1ae88     0A 15 02 FB | 	rdlong	arg02, arg02
1ae8c     18 4E 05 F1 | 	add	fp, #24
1ae90     A7 14 62 FC | 	wrlong	arg02, fp
1ae94                 | ' 
1ae94                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1ae94                 | ' if variables(varnum).vartype<array_no_type then 
1ae94     18 4E 85 F1 | 	sub	fp, #24
1ae98     04 14 66 F0 | 	shl	arg02, #4
1ae9c     32 00 00 FF 
1aea0     84 E4 85 F1 | 	sub	objptr, ##25732
1aea4     F2 14 02 F1 | 	add	arg02, objptr
1aea8     0C 14 06 F1 | 	add	arg02, #12
1aeac     0A 17 02 FB | 	rdlong	arg03, arg02
1aeb0     00 17 16 F2 | 	cmp	arg03, #256 wc
1aeb4     14 00 00 FF 
1aeb8     F8 E5 85 F1 | 	sub	objptr, ##10744
1aebc     18 01 90 3D |  if_ae	jmp	#LR__2190
1aec0     C8 1C BF FD | 	call	#_pop
1aec4     A7 FA 61 FC | 	wrlong	result1, fp
1aec8     04 4E 05 F1 | 	add	fp, #4
1aecc     A7 FC 61 FC | 	wrlong	result2, fp
1aed0     04 4E 05 F1 | 	add	fp, #4
1aed4     A7 FE 61 FC | 	wrlong	result3, fp
1aed8     08 4E 85 F1 | 	sub	fp, #8
1aedc     A7 16 02 FB | 	rdlong	arg03, fp
1aee0     04 4E 05 F1 | 	add	fp, #4
1aee4     A7 14 02 FB | 	rdlong	arg02, fp
1aee8     14 4E 05 F1 | 	add	fp, #20
1aeec     A7 12 02 FB | 	rdlong	arg01, fp
1aef0     04 12 66 F0 | 	shl	arg01, #4
1aef4     14 00 00 FF 
1aef8     F8 E5 05 F1 | 	add	objptr, ##10744
1aefc     F2 12 02 F1 | 	add	arg01, objptr
1af00     04 12 06 F1 | 	add	arg01, #4
1af04     09 17 62 FC | 	wrlong	arg03, arg01
1af08     A7 16 02 FB | 	rdlong	arg03, fp
1af0c     04 16 66 F0 | 	shl	arg03, #4
1af10     F2 16 02 F1 | 	add	arg03, objptr
1af14     08 16 06 F1 | 	add	arg03, #8
1af18     0B 15 62 FC | 	wrlong	arg02, arg03
1af1c     A7 16 02 FB | 	rdlong	arg03, fp
1af20     04 16 66 F0 | 	shl	arg03, #4
1af24     F2 16 02 F1 | 	add	arg03, objptr
1af28     10 4E 85 F1 | 	sub	fp, #16
1af2c     A7 14 02 FB | 	rdlong	arg02, fp
1af30     0C 16 06 F1 | 	add	arg03, #12
1af34     0B 15 62 FC | 	wrlong	arg02, arg03
1af38                 | '   t1=pop() 
1af38                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1af38                 | '   if variables(varnum).vartype<>result_string2 then return
1af38     10 4E 05 F1 | 	add	fp, #16
1af3c     A7 16 02 FB | 	rdlong	arg03, fp
1af40     18 4E 85 F1 | 	sub	fp, #24
1af44     04 16 66 F0 | 	shl	arg03, #4
1af48     F2 16 02 F1 | 	add	arg03, objptr
1af4c     0C 16 06 F1 | 	add	arg03, #12
1af50     0B 17 02 FB | 	rdlong	arg03, arg03
1af54     2B 16 0E F2 | 	cmp	arg03, #43 wz
1af58     14 00 00 FF 
1af5c     F8 E5 85 F1 | 	sub	objptr, ##10744
1af60     EC 04 90 5D |  if_ne	jmp	#LR__2213
1af64     18 4E 05 F1 | 	add	fp, #24
1af68     A7 16 02 FB | 	rdlong	arg03, fp
1af6c     0B 27 02 F6 | 	mov	local01, arg03
1af70     04 26 66 F0 | 	shl	local01, #4
1af74     14 00 00 FF 
1af78     F8 E5 05 F1 | 	add	objptr, ##10744
1af7c     F2 26 02 F1 | 	add	local01, objptr
1af80     18 4E 85 F1 | 	sub	fp, #24
1af84     04 16 66 F0 | 	shl	arg03, #4
1af88     F2 16 02 F1 | 	add	arg03, objptr
1af8c     04 16 06 F1 | 	add	arg03, #4
1af90     0B 13 02 FB | 	rdlong	arg01, arg03
1af94     14 00 00 FF 
1af98     F8 E5 85 F1 | 	sub	objptr, ##10744
1af9c     64 1D BF FD | 	call	#_convertstring
1afa0     04 26 06 F1 | 	add	local01, #4
1afa4     13 FB 61 FC | 	wrlong	result1, local01
1afa8     18 4E 05 F1 | 	add	fp, #24
1afac     A7 26 02 FB | 	rdlong	local01, fp
1afb0     18 4E 85 F1 | 	sub	fp, #24
1afb4     04 26 66 F0 | 	shl	local01, #4
1afb8     14 00 00 FF 
1afbc     F8 E5 05 F1 | 	add	objptr, ##10744
1afc0     F2 26 02 F1 | 	add	local01, objptr
1afc4     0C 26 06 F1 | 	add	local01, #12
1afc8     13 3F 68 FC | 	wrlong	#31, local01
1afcc                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1afcc                 | '   variables(varnum).vartype=result_string
1afcc                 | '   return
1afcc     14 00 00 FF 
1afd0     F8 E5 85 F1 | 	sub	objptr, ##10744
1afd4     78 04 90 FD | 	jmp	#LR__2213
1afd8                 | LR__2190
1afd8                 | ' for i=0 to 2 : arrid(i)=0 : next i
1afd8     1C 4E 05 F1 | 	add	fp, #28
1afdc     A7 00 68 FC | 	wrlong	#0, fp
1afe0     97 16 48 FB | 	callpa	#(@LR__2192-@LR__2191)>>2,fcache_load_ptr_
1afe4                 | LR__2191
1afe4     A7 26 02 FB | 	rdlong	local01, fp
1afe8     02 26 66 F0 | 	shl	local01, #2
1afec     18 4E 05 F1 | 	add	fp, #24
1aff0     A7 26 02 F1 | 	add	local01, fp
1aff4     13 01 68 FC | 	wrlong	#0, local01
1aff8     18 4E 85 F1 | 	sub	fp, #24
1affc     A7 26 02 FB | 	rdlong	local01, fp
1b000     01 26 06 F1 | 	add	local01, #1
1b004     A7 26 62 FC | 	wrlong	local01, fp
1b008     03 26 16 F2 | 	cmp	local01, #3 wc
1b00c     D4 FF 9F CD |  if_b	jmp	#LR__2191
1b010                 | LR__2192
1b010     4A 00 00 FF 
1b014     80 E4 05 F1 | 	add	objptr, ##38016
1b018     F2 16 02 FB | 	rdlong	arg03, objptr
1b01c     0B 27 02 F6 | 	mov	local01, arg03
1b020     01 26 66 F0 | 	shl	local01, #1
1b024     0B 27 02 F1 | 	add	local01, arg03
1b028     02 26 66 F0 | 	shl	local01, #2
1b02c     03 00 00 FF 
1b030     04 E4 85 F1 | 	sub	objptr, ##1540
1b034     F2 26 02 F1 | 	add	local01, objptr
1b038     04 26 06 F1 | 	add	local01, #4
1b03c     13 29 02 FB | 	rdlong	local02, local01
1b040     04 4E 05 F1 | 	add	fp, #4
1b044     A7 28 62 FC | 	wrlong	local02, fp
1b048     20 4E 85 F1 | 	sub	fp, #32
1b04c     47 00 00 FF 
1b050     7C E4 85 F1 | 	sub	objptr, ##36476
1b054     34 1B BF FD | 	call	#_pop
1b058     A7 FA 61 FC | 	wrlong	result1, fp
1b05c     04 4E 05 F1 | 	add	fp, #4
1b060     A7 FC 61 FC | 	wrlong	result2, fp
1b064     04 4E 05 F1 | 	add	fp, #4
1b068     A7 FE 61 FC | 	wrlong	result3, fp
1b06c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1b06c                 | ' t1=pop() ' var value
1b06c                 | ' if numpar>0 then
1b06c     18 4E 05 F1 | 	add	fp, #24
1b070     A7 2A 02 FB | 	rdlong	local03, fp
1b074     20 4E 85 F1 | 	sub	fp, #32
1b078     01 2A 16 F2 | 	cmp	local03, #1 wc
1b07c     78 00 90 CD |  if_b	jmp	#LR__2195
1b080                 | '   for i=numpar to 1 step -1
1b080     20 4E 05 F1 | 	add	fp, #32
1b084     A7 2C 0A FB | 	rdlong	local04, fp wz
1b088     04 4E 85 F1 | 	sub	fp, #4
1b08c     A7 2C 62 FC | 	wrlong	local04, fp
1b090     1C 4E 85 F1 | 	sub	fp, #28
1b094     60 00 90 AD |  if_e	jmp	#LR__2194
1b098                 | LR__2193
1b098     F0 1A BF FD | 	call	#_pop
1b09c     0C 4E 05 F1 | 	add	fp, #12
1b0a0     A7 FA 61 FC | 	wrlong	result1, fp
1b0a4     04 4E 05 F1 | 	add	fp, #4
1b0a8     A7 FC 61 FC | 	wrlong	result2, fp
1b0ac     04 4E 05 F1 | 	add	fp, #4
1b0b0     A7 FE 61 FC | 	wrlong	result3, fp
1b0b4     08 4E 05 F1 | 	add	fp, #8
1b0b8     A7 2A 02 FB | 	rdlong	local03, fp
1b0bc     01 2A 86 F1 | 	sub	local03, #1
1b0c0     02 2A 66 F0 | 	shl	local03, #2
1b0c4     18 4E 05 F1 | 	add	fp, #24
1b0c8     A7 2A 02 F1 | 	add	local03, fp
1b0cc     28 4E 85 F1 | 	sub	fp, #40
1b0d0     A7 12 02 F6 | 	mov	arg01, fp
1b0d4     0C 4E 85 F1 | 	sub	fp, #12
1b0d8     94 1C BF FD | 	call	#_converttoint
1b0dc     15 FB 61 FC | 	wrlong	result1, local03
1b0e0     1C 4E 05 F1 | 	add	fp, #28
1b0e4     A7 2C 02 FB | 	rdlong	local04, fp
1b0e8     01 2C 8E F1 | 	sub	local04, #1 wz
1b0ec     A7 2C 62 FC | 	wrlong	local04, fp
1b0f0     1C 4E 85 F1 | 	sub	fp, #28
1b0f4     A0 FF 9F 5D |  if_ne	jmp	#LR__2193
1b0f8                 | LR__2194
1b0f8                 | LR__2195
1b0f8     18 4E 05 F1 | 	add	fp, #24
1b0fc     A7 26 02 FB | 	rdlong	local01, fp
1b100     04 26 66 F0 | 	shl	local01, #4
1b104     14 00 00 FF 
1b108     F8 E5 05 F1 | 	add	objptr, ##10744
1b10c     F2 26 02 F1 | 	add	local01, objptr
1b110     04 26 06 F1 | 	add	local01, #4
1b114     13 13 02 FB | 	rdlong	arg01, local01
1b118     0C 4E 05 F1 | 	add	fp, #12
1b11c     A7 12 62 FC | 	wrlong	arg01, fp
1b120     24 4E 85 F1 | 	sub	fp, #36
1b124     14 00 00 FF 
1b128     F8 E5 85 F1 | 	sub	objptr, ##10744
1b12c     70 66 B0 FD | 	call	#_pslpeek
1b130     FD 2C 32 F9 | 	getword	local04, result1, #0
1b134     28 4E 05 F1 | 	add	fp, #40
1b138     A7 2C 62 FC | 	wrlong	local04, fp
1b13c     04 4E 85 F1 | 	sub	fp, #4
1b140     A7 12 02 FB | 	rdlong	arg01, fp
1b144     24 4E 85 F1 | 	sub	fp, #36
1b148     02 12 06 F1 | 	add	arg01, #2
1b14c     F8 65 B0 FD | 	call	#_pspeek
1b150     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b154     2C 4E 05 F1 | 	add	fp, #44
1b158     A7 FA 61 FC | 	wrlong	result1, fp
1b15c                 | ' esize=pspeek(arrptr+2)
1b15c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1b15c     08 4E 85 F1 | 	sub	fp, #8
1b160     A7 12 02 FB | 	rdlong	arg01, fp
1b164     24 4E 85 F1 | 	sub	fp, #36
1b168     04 12 06 F1 | 	add	arg01, #4
1b16c     30 66 B0 FD | 	call	#_pslpeek
1b170     FD 2C 02 F6 | 	mov	local04, result1
1b174     34 4E 05 F1 | 	add	fp, #52
1b178     A7 26 02 FB | 	rdlong	local01, fp
1b17c     34 4E 85 F1 | 	sub	fp, #52
1b180     16 27 12 F2 | 	cmp	local01, local04 wc
1b184     54 00 90 3D |  if_ae	jmp	#LR__2196
1b188     24 4E 05 F1 | 	add	fp, #36
1b18c     A7 12 02 FB | 	rdlong	arg01, fp
1b190     24 4E 85 F1 | 	sub	fp, #36
1b194     08 12 06 F1 | 	add	arg01, #8
1b198     04 66 B0 FD | 	call	#_pslpeek
1b19c     FD 26 02 F6 | 	mov	local01, result1
1b1a0     38 4E 05 F1 | 	add	fp, #56
1b1a4     A7 2C 02 FB | 	rdlong	local04, fp
1b1a8     38 4E 85 F1 | 	sub	fp, #56
1b1ac     13 2D 12 F2 | 	cmp	local04, local01 wc
1b1b0     28 00 90 3D |  if_ae	jmp	#LR__2196
1b1b4     24 4E 05 F1 | 	add	fp, #36
1b1b8     A7 12 02 FB | 	rdlong	arg01, fp
1b1bc     24 4E 85 F1 | 	sub	fp, #36
1b1c0     0C 12 06 F1 | 	add	arg01, #12
1b1c4     D8 65 B0 FD | 	call	#_pslpeek
1b1c8     3C 4E 05 F1 | 	add	fp, #60
1b1cc     A7 2C 02 FB | 	rdlong	local04, fp
1b1d0     3C 4E 85 F1 | 	sub	fp, #60
1b1d4     FD 2C 12 F2 | 	cmp	local04, result1 wc
1b1d8     10 00 90 CD |  if_b	jmp	#LR__2197
1b1dc                 | LR__2196
1b1dc     31 12 06 F6 | 	mov	arg01, #49
1b1e0     00 14 06 F6 | 	mov	arg02, #0
1b1e4     E8 62 B0 FD | 	call	#_printerror
1b1e8     64 02 90 FD | 	jmp	#LR__2213
1b1ec                 | LR__2197
1b1ec     24 4E 05 F1 | 	add	fp, #36
1b1f0     A7 12 02 FB | 	rdlong	arg01, fp
1b1f4     09 2D 02 F6 | 	mov	local04, arg01
1b1f8     10 2C 06 F1 | 	add	local04, #16
1b1fc     24 4E 85 F1 | 	sub	fp, #36
1b200     04 12 06 F1 | 	add	arg01, #4
1b204     98 65 B0 FD | 	call	#_pslpeek
1b208     FD 26 02 F6 | 	mov	local01, result1
1b20c     38 4E 05 F1 | 	add	fp, #56
1b210     A7 28 02 FB | 	rdlong	local02, fp
1b214     14 27 02 FD | 	qmul	local01, local02
1b218     04 4E 85 F1 | 	sub	fp, #4
1b21c     A7 2A 02 FB | 	rdlong	local03, fp
1b220     10 4E 85 F1 | 	sub	fp, #16
1b224     A7 12 02 FB | 	rdlong	arg01, fp
1b228     24 4E 85 F1 | 	sub	fp, #36
1b22c     08 12 06 F1 | 	add	arg01, #8
1b230     18 28 62 FD | 	getqx	local02
1b234     14 2B 02 F1 | 	add	local03, local02
1b238     64 65 B0 FD | 	call	#_pslpeek
1b23c     FD 28 02 F6 | 	mov	local02, result1
1b240     24 4E 05 F1 | 	add	fp, #36
1b244     A7 12 02 FB | 	rdlong	arg01, fp
1b248     24 4E 85 F1 | 	sub	fp, #36
1b24c     04 12 06 F1 | 	add	arg01, #4
1b250     4C 65 B0 FD | 	call	#_pslpeek
1b254     FD 28 02 FD | 	qmul	local02, result1
1b258     3C 4E 05 F1 | 	add	fp, #60
1b25c     A7 28 02 FB | 	rdlong	local02, fp
1b260     18 26 62 FD | 	getqx	local01
1b264     14 27 02 FD | 	qmul	local01, local02
1b268     10 4E 85 F1 | 	sub	fp, #16
1b26c     A7 28 02 FB | 	rdlong	local02, fp
1b270     18 26 62 FD | 	getqx	local01
1b274     13 2B 02 F1 | 	add	local03, local01
1b278     15 29 02 FD | 	qmul	local02, local03
1b27c     04 4E 05 F1 | 	add	fp, #4
1b280                 | ' 
1b280                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1b280                 | ' select case arrtype
1b280     18 2A 62 FD | 	getqx	local03
1b284     15 2D 02 F1 | 	add	local04, local03
1b288     A7 2C 62 FC | 	wrlong	local04, fp
1b28c     08 4E 85 F1 | 	sub	fp, #8
1b290     A7 2E 02 FB | 	rdlong	local05, fp
1b294     28 4E 85 F1 | 	sub	fp, #40
1b298     00 2F 86 F1 | 	sub	local05, #256
1b29c     0C 2E 26 F3 | 	fle	local05, #12
1b2a0     30 2E 62 FD | 	jmprel	local05
1b2a4                 | LR__2198
1b2a4     30 00 90 FD | 	jmp	#LR__2199
1b2a8     58 00 90 FD | 	jmp	#LR__2200
1b2ac     6C 00 90 FD | 	jmp	#LR__2201
1b2b0     80 00 90 FD | 	jmp	#LR__2202
1b2b4     B0 00 90 FD | 	jmp	#LR__2203
1b2b8     E0 00 90 FD | 	jmp	#LR__2204
1b2bc     F4 00 90 FD | 	jmp	#LR__2205
1b2c0     08 01 90 FD | 	jmp	#LR__2206
1b2c4     1C 01 90 FD | 	jmp	#LR__2207
1b2c8     30 01 90 FD | 	jmp	#LR__2208
1b2cc     44 01 90 FD | 	jmp	#LR__2209
1b2d0     58 01 90 FD | 	jmp	#LR__2210
1b2d4     6C 01 90 FD | 	jmp	#LR__2211
1b2d8                 | LR__2199
1b2d8     A7 12 02 F6 | 	mov	arg01, fp
1b2dc     30 4E 05 F1 | 	add	fp, #48
1b2e0     A7 14 02 FB | 	rdlong	arg02, fp
1b2e4     30 4E 85 F1 | 	sub	fp, #48
1b2e8     0C 16 06 F6 | 	mov	arg03, #12
1b2ec     0B 00 00 FF 
1b2f0     CC E4 05 F1 | 	add	objptr, ##5836
1b2f4     D8 8F B0 FD | 	call	#_psram_spin2_write
1b2f8     0B 00 00 FF 
1b2fc     CC E4 85 F1 | 	sub	objptr, ##5836
1b300     4C 01 90 FD | 	jmp	#LR__2212
1b304                 | LR__2200
1b304     30 4E 05 F1 | 	add	fp, #48
1b308     A7 12 02 FB | 	rdlong	arg01, fp
1b30c     30 4E 85 F1 | 	sub	fp, #48
1b310     A7 14 02 FB | 	rdlong	arg02, fp
1b314     E8 63 B0 FD | 	call	#_pspoke
1b318     34 01 90 FD | 	jmp	#LR__2212
1b31c                 | LR__2201
1b31c     30 4E 05 F1 | 	add	fp, #48
1b320     A7 12 02 FB | 	rdlong	arg01, fp
1b324     30 4E 85 F1 | 	sub	fp, #48
1b328     A7 14 02 FB | 	rdlong	arg02, fp
1b32c     D0 63 B0 FD | 	call	#_pspoke
1b330     1C 01 90 FD | 	jmp	#LR__2212
1b334                 | LR__2202
1b334     30 4E 05 F1 | 	add	fp, #48
1b338     A7 12 02 FB | 	rdlong	arg01, fp
1b33c     30 4E 85 F1 | 	sub	fp, #48
1b340     A7 14 02 FB | 	rdlong	arg02, fp
1b344     B8 63 B0 FD | 	call	#_pspoke
1b348     30 4E 05 F1 | 	add	fp, #48
1b34c     A7 12 02 FB | 	rdlong	arg01, fp
1b350     30 4E 85 F1 | 	sub	fp, #48
1b354     01 12 06 F1 | 	add	arg01, #1
1b358     A7 14 02 FB | 	rdlong	arg02, fp
1b35c     08 14 46 F0 | 	shr	arg02, #8
1b360     9C 63 B0 FD | 	call	#_pspoke
1b364     E8 00 90 FD | 	jmp	#LR__2212
1b368                 | LR__2203
1b368     30 4E 05 F1 | 	add	fp, #48
1b36c     A7 12 02 FB | 	rdlong	arg01, fp
1b370     30 4E 85 F1 | 	sub	fp, #48
1b374     A7 14 02 FB | 	rdlong	arg02, fp
1b378     84 63 B0 FD | 	call	#_pspoke
1b37c     30 4E 05 F1 | 	add	fp, #48
1b380     A7 12 02 FB | 	rdlong	arg01, fp
1b384     30 4E 85 F1 | 	sub	fp, #48
1b388     01 12 06 F1 | 	add	arg01, #1
1b38c     A7 14 02 FB | 	rdlong	arg02, fp
1b390     08 14 46 F0 | 	shr	arg02, #8
1b394     68 63 B0 FD | 	call	#_pspoke
1b398     B4 00 90 FD | 	jmp	#LR__2212
1b39c                 | LR__2204
1b39c     30 4E 05 F1 | 	add	fp, #48
1b3a0     A7 12 02 FB | 	rdlong	arg01, fp
1b3a4     30 4E 85 F1 | 	sub	fp, #48
1b3a8     A7 14 02 FB | 	rdlong	arg02, fp
1b3ac     C0 62 B0 FD | 	call	#_pslpoke
1b3b0     9C 00 90 FD | 	jmp	#LR__2212
1b3b4                 | LR__2205
1b3b4     30 4E 05 F1 | 	add	fp, #48
1b3b8     A7 12 02 FB | 	rdlong	arg01, fp
1b3bc     30 4E 85 F1 | 	sub	fp, #48
1b3c0     A7 14 02 FB | 	rdlong	arg02, fp
1b3c4     A8 62 B0 FD | 	call	#_pslpoke
1b3c8     84 00 90 FD | 	jmp	#LR__2212
1b3cc                 | LR__2206
1b3cc     30 4E 05 F1 | 	add	fp, #48
1b3d0     A7 12 02 FB | 	rdlong	arg01, fp
1b3d4     30 4E 85 F1 | 	sub	fp, #48
1b3d8     A7 14 02 FB | 	rdlong	arg02, fp
1b3dc     90 62 B0 FD | 	call	#_pslpoke
1b3e0     6C 00 90 FD | 	jmp	#LR__2212
1b3e4                 | LR__2207
1b3e4     30 4E 05 F1 | 	add	fp, #48
1b3e8     A7 12 02 FB | 	rdlong	arg01, fp
1b3ec     30 4E 85 F1 | 	sub	fp, #48
1b3f0     A7 14 02 FB | 	rdlong	arg02, fp
1b3f4     78 62 B0 FD | 	call	#_pslpoke
1b3f8     54 00 90 FD | 	jmp	#LR__2212
1b3fc                 | LR__2208
1b3fc     30 4E 05 F1 | 	add	fp, #48
1b400     A7 12 02 FB | 	rdlong	arg01, fp
1b404     30 4E 85 F1 | 	sub	fp, #48
1b408     A7 14 02 FB | 	rdlong	arg02, fp
1b40c     60 62 B0 FD | 	call	#_pslpoke
1b410     3C 00 90 FD | 	jmp	#LR__2212
1b414                 | LR__2209
1b414     30 4E 05 F1 | 	add	fp, #48
1b418     A7 12 02 FB | 	rdlong	arg01, fp
1b41c     30 4E 85 F1 | 	sub	fp, #48
1b420     A7 14 02 FB | 	rdlong	arg02, fp
1b424     48 62 B0 FD | 	call	#_pslpoke
1b428     24 00 90 FD | 	jmp	#LR__2212
1b42c                 | LR__2210
1b42c     30 4E 05 F1 | 	add	fp, #48
1b430     A7 12 02 FB | 	rdlong	arg01, fp
1b434     30 4E 85 F1 | 	sub	fp, #48
1b438     A7 14 02 FB | 	rdlong	arg02, fp
1b43c     30 62 B0 FD | 	call	#_pslpoke
1b440     0C 00 90 FD | 	jmp	#LR__2212
1b444                 | LR__2211
1b444     32 12 06 F6 | 	mov	arg01, #50
1b448     00 14 06 F6 | 	mov	arg02, #0
1b44c     80 60 B0 FD | 	call	#_printerror
1b450                 | LR__2212
1b450                 | LR__2213
1b450     A7 F0 03 F6 | 	mov	ptra, fp
1b454     B2 00 A0 FD | 	call	#popregs_
1b458                 | _do_assign_ret
1b458     2D 00 64 FD | 	ret
1b45c                 | 
1b45c                 | ' 
1b45c                 | ' 
1b45c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1b45c                 | ' 
1b45c                 | ' sub do_getvar
1b45c                 | _do_getvar
1b45c     04 4A 05 F6 | 	mov	COUNT_, #4
1b460     A8 00 A0 FD | 	call	#pushregs_
1b464     3C F0 07 F1 | 	add	ptra, #60
1b468                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1b468     4A 00 00 FF 
1b46c     80 E4 05 F1 | 	add	objptr, ##38016
1b470     F2 26 02 FB | 	rdlong	local01, objptr
1b474     13 17 02 F6 | 	mov	arg03, local01
1b478     01 16 66 F0 | 	shl	arg03, #1
1b47c     13 17 02 F1 | 	add	arg03, local01
1b480     02 16 66 F0 | 	shl	arg03, #2
1b484     03 00 00 FF 
1b488     04 E4 85 F1 | 	sub	objptr, ##1540
1b48c     F2 16 02 F1 | 	add	arg03, objptr
1b490     04 16 06 F1 | 	add	arg03, #4
1b494     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1b498     47 00 00 FF 
1b49c     7C E4 85 F1 | 	sub	objptr, ##36476
1b4a0     C4 00 90 5D |  if_ne	jmp	#LR__2221
1b4a4     4A 00 00 FF 
1b4a8     80 E4 05 F1 | 	add	objptr, ##38016
1b4ac     F2 26 02 FB | 	rdlong	local01, objptr
1b4b0     13 13 02 F6 | 	mov	arg01, local01
1b4b4     01 12 66 F0 | 	shl	arg01, #1
1b4b8     13 13 02 F1 | 	add	arg01, local01
1b4bc     02 12 66 F0 | 	shl	arg01, #2
1b4c0     03 00 00 FF 
1b4c4     04 E4 85 F1 | 	sub	objptr, ##1540
1b4c8     F2 12 02 F1 | 	add	arg01, objptr
1b4cc     09 27 02 FB | 	rdlong	local01, arg01
1b4d0     04 26 66 F0 | 	shl	local01, #4
1b4d4     32 00 00 FF 
1b4d8     84 E4 85 F1 | 	sub	objptr, ##25732
1b4dc     F2 26 02 F1 | 	add	local01, objptr
1b4e0     04 26 06 F1 | 	add	local01, #4
1b4e4     13 13 02 FB | 	rdlong	arg01, local01
1b4e8     04 26 06 F1 | 	add	local01, #4
1b4ec     13 27 02 FB | 	rdlong	local01, local01
1b4f0     A7 12 62 FC | 	wrlong	arg01, fp
1b4f4     04 4E 05 F1 | 	add	fp, #4
1b4f8     A7 26 62 FC | 	wrlong	local01, fp
1b4fc     35 00 00 FF 
1b500     88 E4 05 F1 | 	add	objptr, ##27272
1b504     F2 26 02 FB | 	rdlong	local01, objptr
1b508     13 13 02 F6 | 	mov	arg01, local01
1b50c     01 12 66 F0 | 	shl	arg01, #1
1b510     13 13 02 F1 | 	add	arg01, local01
1b514     02 12 66 F0 | 	shl	arg01, #2
1b518     03 00 00 FF 
1b51c     04 E4 85 F1 | 	sub	objptr, ##1540
1b520     F2 12 02 F1 | 	add	arg01, objptr
1b524     09 27 02 FB | 	rdlong	local01, arg01
1b528     04 26 66 F0 | 	shl	local01, #4
1b52c     32 00 00 FF 
1b530     84 E4 85 F1 | 	sub	objptr, ##25732
1b534     F2 26 02 F1 | 	add	local01, objptr
1b538     0C 26 06 F1 | 	add	local01, #12
1b53c     13 27 02 FB | 	rdlong	local01, local01
1b540     04 4E 05 F1 | 	add	fp, #4
1b544     A7 26 62 FC | 	wrlong	local01, fp
1b548                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1b548                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1b548                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1b548     08 4E 85 F1 | 	sub	fp, #8
1b54c     00 27 16 F2 | 	cmp	local01, #256 wc
1b550     14 00 00 FF 
1b554     F8 E5 85 F1 | 	sub	objptr, ##10744
1b558     0C 00 90 3D |  if_ae	jmp	#LR__2220
1b55c     A7 12 02 F6 | 	mov	arg01, fp
1b560     C0 16 BF FD | 	call	#_push
1b564     A0 04 90 FD | 	jmp	#LR__2242
1b568                 | LR__2220
1b568                 | LR__2221
1b568     4A 00 00 FF 
1b56c     80 E4 05 F1 | 	add	objptr, ##38016
1b570     F2 16 02 FB | 	rdlong	arg03, objptr
1b574     0B 15 02 F6 | 	mov	arg02, arg03
1b578     01 14 66 F0 | 	shl	arg02, #1
1b57c     0B 15 02 F1 | 	add	arg02, arg03
1b580     02 14 66 F0 | 	shl	arg02, #2
1b584     03 00 00 FF 
1b588     04 E4 85 F1 | 	sub	objptr, ##1540
1b58c     F2 14 02 F1 | 	add	arg02, objptr
1b590     0A 17 02 FB | 	rdlong	arg03, arg02
1b594     04 16 66 F0 | 	shl	arg03, #4
1b598     32 00 00 FF 
1b59c     84 E4 85 F1 | 	sub	objptr, ##25732
1b5a0     F2 16 02 F1 | 	add	arg03, objptr
1b5a4     04 16 06 F1 | 	add	arg03, #4
1b5a8     0B 13 02 FB | 	rdlong	arg01, arg03
1b5ac     0C 4E 05 F1 | 	add	fp, #12
1b5b0     A7 12 62 FC | 	wrlong	arg01, fp
1b5b4     0C 4E 85 F1 | 	sub	fp, #12
1b5b8     14 00 00 FF 
1b5bc     F8 E5 85 F1 | 	sub	objptr, ##10744
1b5c0     DC 61 B0 FD | 	call	#_pslpeek
1b5c4     FD FA 31 F9 | 	getword	result1, result1, #0
1b5c8     10 4E 05 F1 | 	add	fp, #16
1b5cc     A7 FA 61 FC | 	wrlong	result1, fp
1b5d0     4A 00 00 FF 
1b5d4     80 E4 05 F1 | 	add	objptr, ##38016
1b5d8     F2 16 02 FB | 	rdlong	arg03, objptr
1b5dc     0B 15 02 F6 | 	mov	arg02, arg03
1b5e0     01 14 66 F0 | 	shl	arg02, #1
1b5e4     0B 15 02 F1 | 	add	arg02, arg03
1b5e8     02 14 66 F0 | 	shl	arg02, #2
1b5ec     03 00 00 FF 
1b5f0     04 E4 85 F1 | 	sub	objptr, ##1540
1b5f4     F2 14 02 F1 | 	add	arg02, objptr
1b5f8     04 14 06 F1 | 	add	arg02, #4
1b5fc     0A 17 02 FB | 	rdlong	arg03, arg02
1b600     04 4E 05 F1 | 	add	fp, #4
1b604     A7 16 62 FC | 	wrlong	arg03, fp
1b608     08 4E 85 F1 | 	sub	fp, #8
1b60c     A7 12 02 FB | 	rdlong	arg01, fp
1b610     0C 4E 85 F1 | 	sub	fp, #12
1b614     02 12 06 F1 | 	add	arg01, #2
1b618     47 00 00 FF 
1b61c     7C E4 85 F1 | 	sub	objptr, ##36476
1b620     24 61 B0 FD | 	call	#_pspeek
1b624     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b628     18 4E 05 F1 | 	add	fp, #24
1b62c     A7 FA 61 FC | 	wrlong	result1, fp
1b630     0C 4E 85 F1 | 	sub	fp, #12
1b634     A7 12 02 FB | 	rdlong	arg01, fp
1b638     0C 4E 85 F1 | 	sub	fp, #12
1b63c     04 12 06 F1 | 	add	arg01, #4
1b640     5C 61 B0 FD | 	call	#_pslpeek
1b644     1C 4E 05 F1 | 	add	fp, #28
1b648     A7 FA 61 FC | 	wrlong	result1, fp
1b64c     10 4E 85 F1 | 	sub	fp, #16
1b650     A7 12 02 FB | 	rdlong	arg01, fp
1b654     0C 4E 85 F1 | 	sub	fp, #12
1b658     08 12 06 F1 | 	add	arg01, #8
1b65c     40 61 B0 FD | 	call	#_pslpeek
1b660     20 4E 05 F1 | 	add	fp, #32
1b664     A7 FA 61 FC | 	wrlong	result1, fp
1b668     14 4E 85 F1 | 	sub	fp, #20
1b66c     A7 12 02 FB | 	rdlong	arg01, fp
1b670     0C 4E 85 F1 | 	sub	fp, #12
1b674     0C 12 06 F1 | 	add	arg01, #12
1b678     24 61 B0 FD | 	call	#_pslpeek
1b67c     24 4E 05 F1 | 	add	fp, #36
1b680     A7 FA 61 FC | 	wrlong	result1, fp
1b684                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1b684                 | ' esize=pspeek(arrptr+2)
1b684                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1b684                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1b684                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1b684                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1b684     10 4E 85 F1 | 	sub	fp, #16
1b688     A7 16 02 FB | 	rdlong	arg03, fp
1b68c     14 4E 85 F1 | 	sub	fp, #20
1b690     03 16 16 F2 | 	cmp	arg03, #3 wc
1b694     38 00 90 CD |  if_b	jmp	#LR__2222
1b698     F0 14 BF FD | 	call	#_pop
1b69c     FF 16 02 F6 | 	mov	arg03, result3
1b6a0     A7 FA 61 FC | 	wrlong	result1, fp
1b6a4     04 4E 05 F1 | 	add	fp, #4
1b6a8     A7 FC 61 FC | 	wrlong	result2, fp
1b6ac     04 4E 05 F1 | 	add	fp, #4
1b6b0     A7 16 62 FC | 	wrlong	arg03, fp
1b6b4     08 4E 85 F1 | 	sub	fp, #8
1b6b8     A7 12 02 F6 | 	mov	arg01, fp
1b6bc     B0 16 BF FD | 	call	#_converttoint
1b6c0     30 4E 05 F1 | 	add	fp, #48
1b6c4     A7 FA 61 FC | 	wrlong	result1, fp
1b6c8     30 4E 85 F1 | 	sub	fp, #48
1b6cc     0C 00 90 FD | 	jmp	#LR__2223
1b6d0                 | LR__2222
1b6d0     30 4E 05 F1 | 	add	fp, #48
1b6d4     A7 00 68 FC | 	wrlong	#0, fp
1b6d8     30 4E 85 F1 | 	sub	fp, #48
1b6dc                 | LR__2223
1b6dc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1b6dc     14 4E 05 F1 | 	add	fp, #20
1b6e0     A7 16 02 FB | 	rdlong	arg03, fp
1b6e4     14 4E 85 F1 | 	sub	fp, #20
1b6e8     02 16 16 F2 | 	cmp	arg03, #2 wc
1b6ec     38 00 90 CD |  if_b	jmp	#LR__2224
1b6f0     98 14 BF FD | 	call	#_pop
1b6f4     FF 16 02 F6 | 	mov	arg03, result3
1b6f8     A7 FA 61 FC | 	wrlong	result1, fp
1b6fc     04 4E 05 F1 | 	add	fp, #4
1b700     A7 FC 61 FC | 	wrlong	result2, fp
1b704     04 4E 05 F1 | 	add	fp, #4
1b708     A7 16 62 FC | 	wrlong	arg03, fp
1b70c     08 4E 85 F1 | 	sub	fp, #8
1b710     A7 12 02 F6 | 	mov	arg01, fp
1b714     58 16 BF FD | 	call	#_converttoint
1b718     2C 4E 05 F1 | 	add	fp, #44
1b71c     A7 FA 61 FC | 	wrlong	result1, fp
1b720     2C 4E 85 F1 | 	sub	fp, #44
1b724     0C 00 90 FD | 	jmp	#LR__2225
1b728                 | LR__2224
1b728     2C 4E 05 F1 | 	add	fp, #44
1b72c     A7 00 68 FC | 	wrlong	#0, fp
1b730     2C 4E 85 F1 | 	sub	fp, #44
1b734                 | LR__2225
1b734                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1b734     14 4E 05 F1 | 	add	fp, #20
1b738     A7 16 02 FB | 	rdlong	arg03, fp
1b73c     14 4E 85 F1 | 	sub	fp, #20
1b740     01 16 16 F2 | 	cmp	arg03, #1 wc
1b744     38 00 90 CD |  if_b	jmp	#LR__2226
1b748     40 14 BF FD | 	call	#_pop
1b74c     FF 16 02 F6 | 	mov	arg03, result3
1b750     A7 FA 61 FC | 	wrlong	result1, fp
1b754     04 4E 05 F1 | 	add	fp, #4
1b758     A7 FC 61 FC | 	wrlong	result2, fp
1b75c     04 4E 05 F1 | 	add	fp, #4
1b760     A7 16 62 FC | 	wrlong	arg03, fp
1b764     08 4E 85 F1 | 	sub	fp, #8
1b768     A7 12 02 F6 | 	mov	arg01, fp
1b76c     00 16 BF FD | 	call	#_converttoint
1b770     28 4E 05 F1 | 	add	fp, #40
1b774     A7 FA 61 FC | 	wrlong	result1, fp
1b778     28 4E 85 F1 | 	sub	fp, #40
1b77c     0C 00 90 FD | 	jmp	#LR__2227
1b780                 | LR__2226
1b780     28 4E 05 F1 | 	add	fp, #40
1b784     A7 00 68 FC | 	wrlong	#0, fp
1b788     28 4E 85 F1 | 	sub	fp, #40
1b78c                 | LR__2227
1b78c     0C 4E 05 F1 | 	add	fp, #12
1b790     A7 28 02 FB | 	rdlong	local02, fp
1b794     1C 4E 05 F1 | 	add	fp, #28
1b798     A7 2A 02 FB | 	rdlong	local03, fp
1b79c     04 4E 05 F1 | 	add	fp, #4
1b7a0     A7 FC 01 FB | 	rdlong	result2, fp
1b7a4     10 4E 85 F1 | 	sub	fp, #16
1b7a8     A7 FE 01 FB | 	rdlong	result3, fp
1b7ac     FF FC 01 FD | 	qmul	result2, result3
1b7b0     10 28 06 F1 | 	add	local02, #16
1b7b4     14 4E 05 F1 | 	add	fp, #20
1b7b8     A7 FC 01 FB | 	rdlong	result2, fp
1b7bc     18 FA 61 FD | 	getqx	result1
1b7c0     FF FC 01 FD | 	qmul	result2, result3
1b7c4     FD 2A 02 F1 | 	add	local03, result1
1b7c8     10 4E 85 F1 | 	sub	fp, #16
1b7cc     A7 FE 01 FB | 	rdlong	result3, fp
1b7d0     18 FC 61 FD | 	getqx	result2
1b7d4     FF FC 01 FD | 	qmul	result2, result3
1b7d8     08 4E 85 F1 | 	sub	fp, #8
1b7dc     A7 FE 01 FB | 	rdlong	result3, fp
1b7e0     18 FC 61 FD | 	getqx	result2
1b7e4     FE 2A 02 F1 | 	add	local03, result2
1b7e8     FF 2A 02 FD | 	qmul	local03, result3
1b7ec     1C 4E 05 F1 | 	add	fp, #28
1b7f0                 | ' 
1b7f0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1b7f0                 | ' 
1b7f0                 | ' select case vartype
1b7f0     18 FC 61 FD | 	getqx	result2
1b7f4     FE 28 02 F1 | 	add	local02, result2
1b7f8     A7 28 62 FC | 	wrlong	local02, fp
1b7fc     24 4E 85 F1 | 	sub	fp, #36
1b800     A7 2C 02 FB | 	rdlong	local04, fp
1b804     10 4E 85 F1 | 	sub	fp, #16
1b808     00 2D 86 F1 | 	sub	local04, #256
1b80c     0C 2C 26 F3 | 	fle	local04, #12
1b810     30 2C 62 FD | 	jmprel	local04
1b814                 | LR__2228
1b814     30 00 90 FD | 	jmp	#LR__2229
1b818     58 00 90 FD | 	jmp	#LR__2230
1b81c     8C 00 90 FD | 	jmp	#LR__2231
1b820     AC 00 90 FD | 	jmp	#LR__2232
1b824     E8 00 90 FD | 	jmp	#LR__2233
1b828     08 01 90 FD | 	jmp	#LR__2234
1b82c     24 01 90 FD | 	jmp	#LR__2235
1b830     40 01 90 FD | 	jmp	#LR__2236
1b834     50 01 90 FD | 	jmp	#LR__2237
1b838     60 01 90 FD | 	jmp	#LR__2238
1b83c     7C 01 90 FD | 	jmp	#LR__2239
1b840     8C 01 90 FD | 	jmp	#LR__2240
1b844     B8 01 90 FD | 	jmp	#LR__2241
1b848                 | LR__2229
1b848     A7 12 02 F6 | 	mov	arg01, fp
1b84c     34 4E 05 F1 | 	add	fp, #52
1b850     A7 14 02 FB | 	rdlong	arg02, fp
1b854     34 4E 85 F1 | 	sub	fp, #52
1b858     0C 16 06 F6 | 	mov	arg03, #12
1b85c     0B 00 00 FF 
1b860     CC E4 05 F1 | 	add	objptr, ##5836
1b864     CC 89 B0 FD | 	call	#_psram_spin2_read1
1b868     0B 00 00 FF 
1b86c     CC E4 85 F1 | 	sub	objptr, ##5836
1b870     8C 01 90 FD | 	jmp	#LR__2241
1b874                 | LR__2230
1b874     08 4E 05 F1 | 	add	fp, #8
1b878     A7 38 68 FC | 	wrlong	#28, fp
1b87c     2C 4E 05 F1 | 	add	fp, #44
1b880     A7 12 02 FB | 	rdlong	arg01, fp
1b884     34 4E 85 F1 | 	sub	fp, #52
1b888     BC 5E B0 FD | 	call	#_pspeek
1b88c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b890     A7 FA 61 FC | 	wrlong	result1, fp
1b894     80 FA 15 F2 | 	cmp	result1, #128 wc
1b898     00 27 66 36 |  if_ae	neg	local01, #256
1b89c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1b8a0     15 27 42 35 |  if_ae	or	local01, local03
1b8a4     A7 26 62 3C |  if_ae	wrlong	local01, fp
1b8a8     54 01 90 FD | 	jmp	#LR__2241
1b8ac                 | LR__2231
1b8ac     08 4E 05 F1 | 	add	fp, #8
1b8b0     A7 3A 68 FC | 	wrlong	#29, fp
1b8b4     2C 4E 05 F1 | 	add	fp, #44
1b8b8     A7 12 02 FB | 	rdlong	arg01, fp
1b8bc     34 4E 85 F1 | 	sub	fp, #52
1b8c0     84 5E B0 FD | 	call	#_pspeek
1b8c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b8c8     A7 FA 61 FC | 	wrlong	result1, fp
1b8cc     30 01 90 FD | 	jmp	#LR__2241
1b8d0                 | LR__2232
1b8d0     08 4E 05 F1 | 	add	fp, #8
1b8d4     A7 38 68 FC | 	wrlong	#28, fp
1b8d8     2C 4E 05 F1 | 	add	fp, #44
1b8dc     A7 12 02 FB | 	rdlong	arg01, fp
1b8e0     34 4E 85 F1 | 	sub	fp, #52
1b8e4     B8 5E B0 FD | 	call	#_pslpeek
1b8e8     FD FA 31 F9 | 	getword	result1, result1, #0
1b8ec     A7 FA 61 FC | 	wrlong	result1, fp
1b8f0     40 00 00 FF 
1b8f4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1b8f8     FF 7F 00 3F 
1b8fc     00 27 06 36 |  if_ae	mov	local01, ##16776960
1b900     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1b904     15 27 42 35 |  if_ae	or	local01, local03
1b908     A7 26 62 3C |  if_ae	wrlong	local01, fp
1b90c     F0 00 90 FD | 	jmp	#LR__2241
1b910                 | LR__2233
1b910     08 4E 05 F1 | 	add	fp, #8
1b914     A7 3A 68 FC | 	wrlong	#29, fp
1b918     2C 4E 05 F1 | 	add	fp, #44
1b91c     A7 12 02 FB | 	rdlong	arg01, fp
1b920     34 4E 85 F1 | 	sub	fp, #52
1b924     78 5E B0 FD | 	call	#_pslpeek
1b928     FD FA 31 F9 | 	getword	result1, result1, #0
1b92c     A7 FA 61 FC | 	wrlong	result1, fp
1b930     CC 00 90 FD | 	jmp	#LR__2241
1b934                 | LR__2234
1b934     08 4E 05 F1 | 	add	fp, #8
1b938     A7 38 68 FC | 	wrlong	#28, fp
1b93c     2C 4E 05 F1 | 	add	fp, #44
1b940     A7 12 02 FB | 	rdlong	arg01, fp
1b944     34 4E 85 F1 | 	sub	fp, #52
1b948     54 5E B0 FD | 	call	#_pslpeek
1b94c     A7 FA 61 FC | 	wrlong	result1, fp
1b950     AC 00 90 FD | 	jmp	#LR__2241
1b954                 | LR__2235
1b954     08 4E 05 F1 | 	add	fp, #8
1b958     A7 3A 68 FC | 	wrlong	#29, fp
1b95c     2C 4E 05 F1 | 	add	fp, #44
1b960     A7 12 02 FB | 	rdlong	arg01, fp
1b964     34 4E 85 F1 | 	sub	fp, #52
1b968     34 5E B0 FD | 	call	#_pslpeek
1b96c     A7 FA 61 FC | 	wrlong	result1, fp
1b970     8C 00 90 FD | 	jmp	#LR__2241
1b974                 | LR__2236
1b974     08 4E 05 F1 | 	add	fp, #8
1b978     A7 FE 69 FC | 	wrlong	#255, fp
1b97c     08 4E 85 F1 | 	sub	fp, #8
1b980     A7 60 68 FC | 	wrlong	#48, fp
1b984     78 00 90 FD | 	jmp	#LR__2241
1b988                 | LR__2237
1b988     08 4E 05 F1 | 	add	fp, #8
1b98c     A7 FE 69 FC | 	wrlong	#255, fp
1b990     08 4E 85 F1 | 	sub	fp, #8
1b994     A7 60 68 FC | 	wrlong	#48, fp
1b998     64 00 90 FD | 	jmp	#LR__2241
1b99c                 | LR__2238
1b99c     08 4E 05 F1 | 	add	fp, #8
1b9a0     A7 3C 68 FC | 	wrlong	#30, fp
1b9a4     2C 4E 05 F1 | 	add	fp, #44
1b9a8     A7 12 02 FB | 	rdlong	arg01, fp
1b9ac     34 4E 85 F1 | 	sub	fp, #52
1b9b0     EC 5D B0 FD | 	call	#_pslpeek
1b9b4     A7 FA 61 FC | 	wrlong	result1, fp
1b9b8     44 00 90 FD | 	jmp	#LR__2241
1b9bc                 | LR__2239
1b9bc     08 4E 05 F1 | 	add	fp, #8
1b9c0     A7 FE 69 FC | 	wrlong	#255, fp
1b9c4     08 4E 85 F1 | 	sub	fp, #8
1b9c8     A7 60 68 FC | 	wrlong	#48, fp
1b9cc     30 00 90 FD | 	jmp	#LR__2241
1b9d0                 | LR__2240
1b9d0     08 4E 05 F1 | 	add	fp, #8
1b9d4     A7 3E 68 FC | 	wrlong	#31, fp
1b9d8     2C 4E 05 F1 | 	add	fp, #44
1b9dc     A7 12 02 FB | 	rdlong	arg01, fp
1b9e0     34 4E 85 F1 | 	sub	fp, #52
1b9e4     B8 5D B0 FD | 	call	#_pslpeek
1b9e8     A7 FA 61 FC | 	wrlong	result1, fp
1b9ec     00 04 00 FF 
1b9f0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1b9f4     08 4E 05 31 |  if_ae	add	fp, #8
1b9f8     A7 56 68 3C |  if_ae	wrlong	#43, fp
1b9fc     08 4E 85 31 |  if_ae	sub	fp, #8
1ba00                 | LR__2241
1ba00     A7 12 02 F6 | 	mov	arg01, fp
1ba04     1C 12 BF FD | 	call	#_push
1ba08                 | LR__2242
1ba08     A7 F0 03 F6 | 	mov	ptra, fp
1ba0c     B2 00 A0 FD | 	call	#popregs_
1ba10                 | _do_getvar_ret
1ba10     2D 00 64 FD | 	ret
1ba14                 | 
1ba14                 | ' 
1ba14                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1ba14                 | ' 
1ba14                 | ' sub do_getaddr
1ba14                 | _do_getaddr
1ba14     01 4A 05 F6 | 	mov	COUNT_, #1
1ba18     A8 00 A0 FD | 	call	#pushregs_
1ba1c     38 F0 07 F1 | 	add	ptra, #56
1ba20                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1ba20                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1ba20     4A 00 00 FF 
1ba24     80 E4 05 F1 | 	add	objptr, ##38016
1ba28     F2 12 02 FB | 	rdlong	arg01, objptr
1ba2c     09 FD 01 F6 | 	mov	result2, arg01
1ba30     01 FC 65 F0 | 	shl	result2, #1
1ba34     09 FD 01 F1 | 	add	result2, arg01
1ba38     02 FC 65 F0 | 	shl	result2, #2
1ba3c     03 00 00 FF 
1ba40     04 E4 85 F1 | 	sub	objptr, ##1540
1ba44     F2 FC 01 F1 | 	add	result2, objptr
1ba48     04 FC 05 F1 | 	add	result2, #4
1ba4c     FE FC 09 FB | 	rdlong	result2, result2 wz
1ba50     47 00 00 FF 
1ba54     7C E4 85 F1 | 	sub	objptr, ##36476
1ba58     10 01 90 5D |  if_ne	jmp	#LR__2250
1ba5c     4A 00 00 FF 
1ba60     80 E4 05 F1 | 	add	objptr, ##38016
1ba64     F2 12 02 FB | 	rdlong	arg01, objptr
1ba68     09 FD 01 F6 | 	mov	result2, arg01
1ba6c     01 FC 65 F0 | 	shl	result2, #1
1ba70     09 FD 01 F1 | 	add	result2, arg01
1ba74     02 FC 65 F0 | 	shl	result2, #2
1ba78     03 00 00 FF 
1ba7c     04 E4 85 F1 | 	sub	objptr, ##1540
1ba80     F2 FC 01 F1 | 	add	result2, objptr
1ba84     FE 12 02 FB | 	rdlong	arg01, result2
1ba88     04 12 66 F0 | 	shl	arg01, #4
1ba8c     32 00 00 FF 
1ba90     84 E4 85 F1 | 	sub	objptr, ##25732
1ba94     F2 12 02 F1 | 	add	arg01, objptr
1ba98     0C 12 06 F1 | 	add	arg01, #12
1ba9c     09 13 02 FB | 	rdlong	arg01, arg01
1baa0     08 4E 05 F1 | 	add	fp, #8
1baa4     A7 12 62 FC | 	wrlong	arg01, fp
1baa8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1baa8                 | '    if t1.result_type>=array_no_type then goto 2200
1baa8     08 4E 85 F1 | 	sub	fp, #8
1baac     00 13 16 F2 | 	cmp	arg01, #256 wc
1bab0     14 00 00 FF 
1bab4     F8 E5 85 F1 | 	sub	objptr, ##10744
1bab8     B0 00 90 3D |  if_ae	jmp	#LR__2251
1babc     4A 00 00 FF 
1bac0     80 E4 05 F1 | 	add	objptr, ##38016
1bac4     F2 12 02 FB | 	rdlong	arg01, objptr
1bac8     09 FF 01 F6 | 	mov	result3, arg01
1bacc     01 FE 65 F0 | 	shl	result3, #1
1bad0     09 FF 01 F1 | 	add	result3, arg01
1bad4     02 FE 65 F0 | 	shl	result3, #2
1bad8     03 00 00 FF 
1badc     04 E4 85 F1 | 	sub	objptr, ##1540
1bae0     F2 FE 01 F1 | 	add	result3, objptr
1bae4     FF FA 01 FB | 	rdlong	result1, result3
1bae8     04 FA 65 F0 | 	shl	result1, #4
1baec     32 00 00 FF 
1baf0     84 E4 85 F1 | 	sub	objptr, ##25732
1baf4     F2 FA 01 F1 | 	add	result1, objptr
1baf8     04 FA 05 F1 | 	add	result1, #4
1bafc     A7 FA 61 FC | 	wrlong	result1, fp
1bb00     35 00 00 FF 
1bb04     88 E4 05 F1 | 	add	objptr, ##27272
1bb08     F2 FE 01 FB | 	rdlong	result3, objptr
1bb0c     FF 12 02 F6 | 	mov	arg01, result3
1bb10     01 12 66 F0 | 	shl	arg01, #1
1bb14     FF 12 02 F1 | 	add	arg01, result3
1bb18     02 12 66 F0 | 	shl	arg01, #2
1bb1c     03 00 00 FF 
1bb20     04 E4 85 F1 | 	sub	objptr, ##1540
1bb24     F2 12 02 F1 | 	add	arg01, objptr
1bb28     09 13 02 FB | 	rdlong	arg01, arg01
1bb2c     04 12 66 F0 | 	shl	arg01, #4
1bb30     32 00 00 FF 
1bb34     84 E4 85 F1 | 	sub	objptr, ##25732
1bb38     F2 12 02 F1 | 	add	arg01, objptr
1bb3c     0C 12 06 F1 | 	add	arg01, #12
1bb40     09 13 02 FB | 	rdlong	arg01, arg01
1bb44     04 4E 05 F1 | 	add	fp, #4
1bb48     A7 12 62 FC | 	wrlong	arg01, fp
1bb4c     04 4E 05 F1 | 	add	fp, #4
1bb50     A7 3A 68 FC | 	wrlong	#29, fp
1bb54     08 4E 85 F1 | 	sub	fp, #8
1bb58     A7 12 02 F6 | 	mov	arg01, fp
1bb5c     14 00 00 FF 
1bb60     F8 E5 85 F1 | 	sub	objptr, ##10744
1bb64     BC 10 BF FD | 	call	#_push
1bb68                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1bb68                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1bb68                 | '   t1.result_type=result_uint
1bb68                 | '   push t1 : return
1bb68     2C 03 90 FD | 	jmp	#LR__2260
1bb6c                 | LR__2250
1bb6c                 | LR__2251
1bb6c     4A 00 00 FF 
1bb70     80 E4 05 F1 | 	add	objptr, ##38016
1bb74     F2 FE 01 FB | 	rdlong	result3, objptr
1bb78     FF FC 01 F6 | 	mov	result2, result3
1bb7c     01 FC 65 F0 | 	shl	result2, #1
1bb80     FF FC 01 F1 | 	add	result2, result3
1bb84     02 FC 65 F0 | 	shl	result2, #2
1bb88     03 00 00 FF 
1bb8c     04 E4 85 F1 | 	sub	objptr, ##1540
1bb90     F2 FC 01 F1 | 	add	result2, objptr
1bb94     FE FE 01 FB | 	rdlong	result3, result2
1bb98     04 FE 65 F0 | 	shl	result3, #4
1bb9c     32 00 00 FF 
1bba0     84 E4 85 F1 | 	sub	objptr, ##25732
1bba4     F2 FE 01 F1 | 	add	result3, objptr
1bba8     04 FE 05 F1 | 	add	result3, #4
1bbac     FF FE 01 FB | 	rdlong	result3, result3
1bbb0     0C 4E 05 F1 | 	add	fp, #12
1bbb4     A7 FE 61 FC | 	wrlong	result3, fp
1bbb8     35 00 00 FF 
1bbbc     88 E4 05 F1 | 	add	objptr, ##27272
1bbc0     F2 FE 01 FB | 	rdlong	result3, objptr
1bbc4     FF 12 02 F6 | 	mov	arg01, result3
1bbc8     01 12 66 F0 | 	shl	arg01, #1
1bbcc     FF 12 02 F1 | 	add	arg01, result3
1bbd0     02 12 66 F0 | 	shl	arg01, #2
1bbd4     03 00 00 FF 
1bbd8     04 E4 85 F1 | 	sub	objptr, ##1540
1bbdc     F2 12 02 F1 | 	add	arg01, objptr
1bbe0     09 13 02 FB | 	rdlong	arg01, arg01
1bbe4     04 12 66 F0 | 	shl	arg01, #4
1bbe8     32 00 00 FF 
1bbec     84 E4 85 F1 | 	sub	objptr, ##25732
1bbf0     F2 12 02 F1 | 	add	arg01, objptr
1bbf4     0C 12 06 F1 | 	add	arg01, #12
1bbf8     09 13 02 FB | 	rdlong	arg01, arg01
1bbfc     08 4E 85 F1 | 	sub	fp, #8
1bc00     A7 12 62 FC | 	wrlong	arg01, fp
1bc04     08 4E 05 F1 | 	add	fp, #8
1bc08     A7 12 02 FB | 	rdlong	arg01, fp
1bc0c     0C 4E 85 F1 | 	sub	fp, #12
1bc10     14 00 00 FF 
1bc14     F8 E5 85 F1 | 	sub	objptr, ##10744
1bc18     84 5B B0 FD | 	call	#_pslpeek
1bc1c     FD FA 31 F9 | 	getword	result1, result1, #0
1bc20     10 4E 05 F1 | 	add	fp, #16
1bc24     A7 FA 61 FC | 	wrlong	result1, fp
1bc28     4A 00 00 FF 
1bc2c     80 E4 05 F1 | 	add	objptr, ##38016
1bc30     F2 FE 01 FB | 	rdlong	result3, objptr
1bc34     FF 12 02 F6 | 	mov	arg01, result3
1bc38     01 12 66 F0 | 	shl	arg01, #1
1bc3c     FF 12 02 F1 | 	add	arg01, result3
1bc40     02 12 66 F0 | 	shl	arg01, #2
1bc44     03 00 00 FF 
1bc48     04 E4 85 F1 | 	sub	objptr, ##1540
1bc4c     F2 12 02 F1 | 	add	arg01, objptr
1bc50     04 12 06 F1 | 	add	arg01, #4
1bc54     09 13 02 FB | 	rdlong	arg01, arg01
1bc58     04 4E 05 F1 | 	add	fp, #4
1bc5c     A7 12 62 FC | 	wrlong	arg01, fp
1bc60     08 4E 85 F1 | 	sub	fp, #8
1bc64     A7 12 02 FB | 	rdlong	arg01, fp
1bc68     0C 4E 85 F1 | 	sub	fp, #12
1bc6c     02 12 06 F1 | 	add	arg01, #2
1bc70     47 00 00 FF 
1bc74     7C E4 85 F1 | 	sub	objptr, ##36476
1bc78     CC 5A B0 FD | 	call	#_pspeek
1bc7c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bc80     18 4E 05 F1 | 	add	fp, #24
1bc84     A7 FA 61 FC | 	wrlong	result1, fp
1bc88     0C 4E 85 F1 | 	sub	fp, #12
1bc8c     A7 12 02 FB | 	rdlong	arg01, fp
1bc90     0C 4E 85 F1 | 	sub	fp, #12
1bc94     04 12 06 F1 | 	add	arg01, #4
1bc98     04 5B B0 FD | 	call	#_pslpeek
1bc9c     1C 4E 05 F1 | 	add	fp, #28
1bca0     A7 FA 61 FC | 	wrlong	result1, fp
1bca4     10 4E 85 F1 | 	sub	fp, #16
1bca8     A7 12 02 FB | 	rdlong	arg01, fp
1bcac     0C 4E 85 F1 | 	sub	fp, #12
1bcb0     08 12 06 F1 | 	add	arg01, #8
1bcb4     E8 5A B0 FD | 	call	#_pslpeek
1bcb8     20 4E 05 F1 | 	add	fp, #32
1bcbc     A7 FA 61 FC | 	wrlong	result1, fp
1bcc0     14 4E 85 F1 | 	sub	fp, #20
1bcc4     A7 12 02 FB | 	rdlong	arg01, fp
1bcc8     0C 4E 85 F1 | 	sub	fp, #12
1bccc     0C 12 06 F1 | 	add	arg01, #12
1bcd0     CC 5A B0 FD | 	call	#_pslpeek
1bcd4     24 4E 05 F1 | 	add	fp, #36
1bcd8     A7 FA 61 FC | 	wrlong	result1, fp
1bcdc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1bcdc                 | ' esize=pspeek(arrptr+2)
1bcdc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1bcdc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1bcdc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1bcdc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1bcdc     10 4E 85 F1 | 	sub	fp, #16
1bce0     A7 12 02 FB | 	rdlong	arg01, fp
1bce4     14 4E 85 F1 | 	sub	fp, #20
1bce8     03 12 16 F2 | 	cmp	arg01, #3 wc
1bcec     34 00 90 CD |  if_b	jmp	#LR__2252
1bcf0     98 0E BF FD | 	call	#_pop
1bcf4     A7 FA 61 FC | 	wrlong	result1, fp
1bcf8     04 4E 05 F1 | 	add	fp, #4
1bcfc     A7 FC 61 FC | 	wrlong	result2, fp
1bd00     04 4E 05 F1 | 	add	fp, #4
1bd04     A7 FE 61 FC | 	wrlong	result3, fp
1bd08     08 4E 85 F1 | 	sub	fp, #8
1bd0c     A7 12 02 F6 | 	mov	arg01, fp
1bd10     5C 10 BF FD | 	call	#_converttoint
1bd14     30 4E 05 F1 | 	add	fp, #48
1bd18     A7 FA 61 FC | 	wrlong	result1, fp
1bd1c     30 4E 85 F1 | 	sub	fp, #48
1bd20     0C 00 90 FD | 	jmp	#LR__2253
1bd24                 | LR__2252
1bd24     30 4E 05 F1 | 	add	fp, #48
1bd28     A7 00 68 FC | 	wrlong	#0, fp
1bd2c     30 4E 85 F1 | 	sub	fp, #48
1bd30                 | LR__2253
1bd30                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1bd30     14 4E 05 F1 | 	add	fp, #20
1bd34     A7 12 02 FB | 	rdlong	arg01, fp
1bd38     14 4E 85 F1 | 	sub	fp, #20
1bd3c     02 12 16 F2 | 	cmp	arg01, #2 wc
1bd40     34 00 90 CD |  if_b	jmp	#LR__2254
1bd44     44 0E BF FD | 	call	#_pop
1bd48     A7 FA 61 FC | 	wrlong	result1, fp
1bd4c     04 4E 05 F1 | 	add	fp, #4
1bd50     A7 FC 61 FC | 	wrlong	result2, fp
1bd54     04 4E 05 F1 | 	add	fp, #4
1bd58     A7 FE 61 FC | 	wrlong	result3, fp
1bd5c     08 4E 85 F1 | 	sub	fp, #8
1bd60     A7 12 02 F6 | 	mov	arg01, fp
1bd64     08 10 BF FD | 	call	#_converttoint
1bd68     2C 4E 05 F1 | 	add	fp, #44
1bd6c     A7 FA 61 FC | 	wrlong	result1, fp
1bd70     2C 4E 85 F1 | 	sub	fp, #44
1bd74     0C 00 90 FD | 	jmp	#LR__2255
1bd78                 | LR__2254
1bd78     2C 4E 05 F1 | 	add	fp, #44
1bd7c     A7 00 68 FC | 	wrlong	#0, fp
1bd80     2C 4E 85 F1 | 	sub	fp, #44
1bd84                 | LR__2255
1bd84                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1bd84     14 4E 05 F1 | 	add	fp, #20
1bd88     A7 12 02 FB | 	rdlong	arg01, fp
1bd8c     14 4E 85 F1 | 	sub	fp, #20
1bd90     01 12 16 F2 | 	cmp	arg01, #1 wc
1bd94     34 00 90 CD |  if_b	jmp	#LR__2256
1bd98     F0 0D BF FD | 	call	#_pop
1bd9c     A7 FA 61 FC | 	wrlong	result1, fp
1bda0     04 4E 05 F1 | 	add	fp, #4
1bda4     A7 FC 61 FC | 	wrlong	result2, fp
1bda8     04 4E 05 F1 | 	add	fp, #4
1bdac     A7 FE 61 FC | 	wrlong	result3, fp
1bdb0     08 4E 85 F1 | 	sub	fp, #8
1bdb4     A7 12 02 F6 | 	mov	arg01, fp
1bdb8     B4 0F BF FD | 	call	#_converttoint
1bdbc     28 4E 05 F1 | 	add	fp, #40
1bdc0     A7 FA 61 FC | 	wrlong	result1, fp
1bdc4     28 4E 85 F1 | 	sub	fp, #40
1bdc8     0C 00 90 FD | 	jmp	#LR__2257
1bdcc                 | LR__2256
1bdcc     28 4E 05 F1 | 	add	fp, #40
1bdd0     A7 00 68 FC | 	wrlong	#0, fp
1bdd4     28 4E 85 F1 | 	sub	fp, #40
1bdd8                 | LR__2257
1bdd8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1bdd8                 | ' if numpar>0 then
1bdd8     14 4E 05 F1 | 	add	fp, #20
1bddc     A7 FE 01 FB | 	rdlong	result3, fp
1bde0     14 4E 85 F1 | 	sub	fp, #20
1bde4     01 FE 15 F2 | 	cmp	result3, #1 wc
1bde8     8C 00 90 CD |  if_b	jmp	#LR__2258
1bdec     0C 4E 05 F1 | 	add	fp, #12
1bdf0     A7 FC 01 FB | 	rdlong	result2, fp
1bdf4     1C 4E 05 F1 | 	add	fp, #28
1bdf8     A7 FE 01 FB | 	rdlong	result3, fp
1bdfc     04 4E 05 F1 | 	add	fp, #4
1be00     A7 12 02 FB | 	rdlong	arg01, fp
1be04     10 4E 85 F1 | 	sub	fp, #16
1be08     A7 FA 01 FB | 	rdlong	result1, fp
1be0c     FD 12 02 FD | 	qmul	arg01, result1
1be10     10 FC 05 F1 | 	add	result2, #16
1be14     14 4E 05 F1 | 	add	fp, #20
1be18     A7 26 02 FB | 	rdlong	local01, fp
1be1c     18 12 62 FD | 	getqx	arg01
1be20     FD 26 02 FD | 	qmul	local01, result1
1be24     09 FF 01 F1 | 	add	result3, arg01
1be28     10 4E 85 F1 | 	sub	fp, #16
1be2c     A7 26 02 FB | 	rdlong	local01, fp
1be30     18 FA 61 FD | 	getqx	result1
1be34     13 FB 01 FD | 	qmul	result1, local01
1be38     08 4E 85 F1 | 	sub	fp, #8
1be3c     A7 26 02 FB | 	rdlong	local01, fp
1be40     18 FA 61 FD | 	getqx	result1
1be44     FD FE 01 F1 | 	add	result3, result1
1be48     13 FF 01 FD | 	qmul	result3, local01
1be4c     1C 4E 05 F1 | 	add	fp, #28
1be50     18 26 62 FD | 	getqx	local01
1be54     13 FD 01 F1 | 	add	result2, local01
1be58     A7 FC 61 FC | 	wrlong	result2, fp
1be5c     2C 4E 85 F1 | 	sub	fp, #44
1be60     A7 3A 68 FC | 	wrlong	#29, fp
1be64     2C 4E 05 F1 | 	add	fp, #44
1be68     A7 26 02 FB | 	rdlong	local01, fp
1be6c     34 4E 85 F1 | 	sub	fp, #52
1be70     A7 26 62 FC | 	wrlong	local01, fp
1be74     18 00 90 FD | 	jmp	#LR__2259
1be78                 | LR__2258
1be78     08 4E 05 F1 | 	add	fp, #8
1be7c     A7 3A 68 FC | 	wrlong	#29, fp
1be80     04 4E 05 F1 | 	add	fp, #4
1be84     A7 26 02 FB | 	rdlong	local01, fp
1be88     0C 4E 85 F1 | 	sub	fp, #12
1be8c     A7 26 62 FC | 	wrlong	local01, fp
1be90                 | LR__2259
1be90     A7 12 02 F6 | 	mov	arg01, fp
1be94     8C 0D BF FD | 	call	#_push
1be98                 | LR__2260
1be98     A7 F0 03 F6 | 	mov	ptra, fp
1be9c     B2 00 A0 FD | 	call	#popregs_
1bea0                 | _do_getaddr_ret
1bea0     2D 00 64 FD | 	ret
1bea4                 | 
1bea4                 | ' 
1bea4                 | ' 
1bea4                 | ' 
1bea4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bea4                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1bea4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bea4                 | ' 
1bea4                 | ' '--------------------------------- AND 
1bea4                 | ' 
1bea4                 | ' sub do_and 
1bea4                 | _do_and
1bea4     03 4A 05 F6 | 	mov	COUNT_, #3
1bea8     A8 00 A0 FD | 	call	#pushregs_
1beac     18 F0 07 F1 | 	add	ptra, #24
1beb0     D8 0C BF FD | 	call	#_pop
1beb4     FD 12 02 F6 | 	mov	arg01, result1
1beb8     FE 26 02 F6 | 	mov	local01, result2
1bebc     FF 28 02 F6 | 	mov	local02, result3
1bec0     0C 4E 05 F1 | 	add	fp, #12
1bec4     A7 12 62 FC | 	wrlong	arg01, fp
1bec8     04 4E 05 F1 | 	add	fp, #4
1becc     A7 26 62 FC | 	wrlong	local01, fp
1bed0     04 4E 05 F1 | 	add	fp, #4
1bed4     A7 28 62 FC | 	wrlong	local02, fp
1bed8     14 4E 85 F1 | 	sub	fp, #20
1bedc     AC 0C BF FD | 	call	#_pop
1bee0     FF 2A 02 F6 | 	mov	local03, result3
1bee4     A7 FA 61 FC | 	wrlong	result1, fp
1bee8     04 4E 05 F1 | 	add	fp, #4
1beec     A7 FC 61 FC | 	wrlong	result2, fp
1bef0     04 4E 05 F1 | 	add	fp, #4
1bef4     A7 2A 62 FC | 	wrlong	local03, fp
1bef8                 | ' 
1bef8                 | ' t2=pop()
1bef8                 | ' t1=pop()
1bef8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bef8     08 4E 85 F1 | 	sub	fp, #8
1befc     1C 2A 0E F2 | 	cmp	local03, #28 wz
1bf00     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bf04     A7 2A 62 AC |  if_e	wrlong	local03, fp
1bf08     08 4E 05 A1 |  if_e	add	fp, #8
1bf0c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1bf10     08 4E 85 A1 |  if_e	sub	fp, #8
1bf14                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1bf14     14 4E 05 F1 | 	add	fp, #20
1bf18     A7 2A 02 FB | 	rdlong	local03, fp
1bf1c     14 4E 85 F1 | 	sub	fp, #20
1bf20     1C 2A 0E F2 | 	cmp	local03, #28 wz
1bf24     18 00 90 5D |  if_ne	jmp	#LR__2270
1bf28     0C 4E 05 F1 | 	add	fp, #12
1bf2c     A7 2A 02 FB | 	rdlong	local03, fp
1bf30     A7 2A 62 FC | 	wrlong	local03, fp
1bf34     08 4E 05 F1 | 	add	fp, #8
1bf38     A7 3A 68 FC | 	wrlong	#29, fp
1bf3c     14 4E 85 F1 | 	sub	fp, #20
1bf40                 | LR__2270
1bf40                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1bf40     08 4E 05 F1 | 	add	fp, #8
1bf44     A7 2A 02 FB | 	rdlong	local03, fp
1bf48     08 4E 85 F1 | 	sub	fp, #8
1bf4c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1bf50     14 4E 05 51 |  if_ne	add	fp, #20
1bf54     A7 28 02 5B |  if_ne	rdlong	local02, fp
1bf58     14 4E 85 51 |  if_ne	sub	fp, #20
1bf5c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1bf60     08 4E 05 51 |  if_ne	add	fp, #8
1bf64     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1bf68     08 4E 85 51 |  if_ne	sub	fp, #8
1bf6c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1bf70     14 4E 05 51 |  if_ne	add	fp, #20
1bf74     14 4E 85 51 |  if_ne	sub	fp, #20
1bf78     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1bf7c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1bf80     08 4E 05 A1 |  if_e	add	fp, #8
1bf84     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bf88     08 4E 85 A1 |  if_e	sub	fp, #8
1bf8c     18 00 90 AD |  if_e	jmp	#LR__2271
1bf90     A7 2A 02 FB | 	rdlong	local03, fp
1bf94     0C 4E 05 F1 | 	add	fp, #12
1bf98     A7 26 02 FB | 	rdlong	local01, fp
1bf9c     0C 4E 85 F1 | 	sub	fp, #12
1bfa0     13 2B 02 F5 | 	and	local03, local01
1bfa4     A7 2A 62 FC | 	wrlong	local03, fp
1bfa8                 | LR__2271
1bfa8     A7 12 02 F6 | 	mov	arg01, fp
1bfac     74 0C BF FD | 	call	#_push
1bfb0     A7 F0 03 F6 | 	mov	ptra, fp
1bfb4     B2 00 A0 FD | 	call	#popregs_
1bfb8                 | _do_and_ret
1bfb8     2D 00 64 FD | 	ret
1bfbc                 | 
1bfbc                 | ' 
1bfbc                 | ' '--------------------------------- DIV (integer divide)
1bfbc                 | ' 
1bfbc                 | ' sub do_div 
1bfbc                 | _do_div
1bfbc     01 4A 05 F6 | 	mov	COUNT_, #1
1bfc0     A8 00 A0 FD | 	call	#pushregs_
1bfc4     18 F0 07 F1 | 	add	ptra, #24
1bfc8     C0 0B BF FD | 	call	#_pop
1bfcc     FD 8A 02 F6 | 	mov	muldivb_, result1
1bfd0     FE 88 02 F6 | 	mov	muldiva_, result2
1bfd4     FF 26 02 F6 | 	mov	local01, result3
1bfd8     0C 4E 05 F1 | 	add	fp, #12
1bfdc     A7 8A 62 FC | 	wrlong	muldivb_, fp
1bfe0     04 4E 05 F1 | 	add	fp, #4
1bfe4     A7 88 62 FC | 	wrlong	muldiva_, fp
1bfe8     04 4E 05 F1 | 	add	fp, #4
1bfec     A7 26 62 FC | 	wrlong	local01, fp
1bff0     14 4E 85 F1 | 	sub	fp, #20
1bff4     94 0B BF FD | 	call	#_pop
1bff8     A7 FA 61 FC | 	wrlong	result1, fp
1bffc     04 4E 05 F1 | 	add	fp, #4
1c000     A7 FC 61 FC | 	wrlong	result2, fp
1c004     04 4E 05 F1 | 	add	fp, #4
1c008     A7 FE 61 FC | 	wrlong	result3, fp
1c00c                 | ' 
1c00c                 | ' t2=pop()
1c00c                 | ' t1=pop()
1c00c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c00c     08 4E 85 F1 | 	sub	fp, #8
1c010     1F FE 0D F2 | 	cmp	result3, #31 wz
1c014     14 4E 05 51 |  if_ne	add	fp, #20
1c018     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1c01c     14 4E 85 51 |  if_ne	sub	fp, #20
1c020     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1c024     A7 14 68 AC |  if_e	wrlong	#10, fp
1c028     08 4E 05 A1 |  if_e	add	fp, #8
1c02c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c030     08 4E 85 A1 |  if_e	sub	fp, #8
1c034     90 01 90 AD |  if_e	jmp	#LR__2286
1c038                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c038     08 4E 05 F1 | 	add	fp, #8
1c03c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c040     08 4E 85 F1 | 	sub	fp, #8
1c044     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1c048     1C 00 90 5D |  if_ne	jmp	#LR__2280
1c04c     08 4E 05 F1 | 	add	fp, #8
1c050     A7 38 68 FC | 	wrlong	#28, fp
1c054     08 4E 85 F1 | 	sub	fp, #8
1c058     A7 12 02 FB | 	rdlong	arg01, fp
1c05c     00 14 06 F6 | 	mov	arg02, #0
1c060     50 C1 B0 FD | 	call	#__system___float_tointeger
1c064     A7 FA 61 FC | 	wrlong	result1, fp
1c068                 | LR__2280
1c068                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c068     14 4E 05 F1 | 	add	fp, #20
1c06c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c070     14 4E 85 F1 | 	sub	fp, #20
1c074     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1c078     28 00 90 5D |  if_ne	jmp	#LR__2281
1c07c     14 4E 05 F1 | 	add	fp, #20
1c080     A7 38 68 FC | 	wrlong	#28, fp
1c084     08 4E 85 F1 | 	sub	fp, #8
1c088     A7 12 02 FB | 	rdlong	arg01, fp
1c08c     0C 4E 85 F1 | 	sub	fp, #12
1c090     00 14 06 F6 | 	mov	arg02, #0
1c094     1C C1 B0 FD | 	call	#__system___float_tointeger
1c098     0C 4E 05 F1 | 	add	fp, #12
1c09c     A7 FA 61 FC | 	wrlong	result1, fp
1c0a0     0C 4E 85 F1 | 	sub	fp, #12
1c0a4                 | LR__2281
1c0a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c0a4     08 4E 05 F1 | 	add	fp, #8
1c0a8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c0ac     08 4E 85 F1 | 	sub	fp, #8
1c0b0     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1c0b4     14 4E 05 A1 |  if_e	add	fp, #20
1c0b8     A7 26 02 AB |  if_e	rdlong	local01, fp
1c0bc     14 4E 85 A1 |  if_e	sub	fp, #20
1c0c0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1c0c4     20 00 90 5D |  if_ne	jmp	#LR__2282
1c0c8     0C 4E 05 F1 | 	add	fp, #12
1c0cc     A7 26 02 FB | 	rdlong	local01, fp
1c0d0     0C 4E 85 F1 | 	sub	fp, #12
1c0d4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c0d8     13 8B 12 FD | 	qdiv	muldivb_, local01
1c0dc     18 26 62 FD | 	getqx	local01
1c0e0     A7 26 62 FC | 	wrlong	local01, fp
1c0e4     E0 00 90 FD | 	jmp	#LR__2286
1c0e8                 | LR__2282
1c0e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c0e8     08 4E 05 F1 | 	add	fp, #8
1c0ec     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c0f0     08 4E 85 F1 | 	sub	fp, #8
1c0f4     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1c0f8     14 4E 05 A1 |  if_e	add	fp, #20
1c0fc     A7 26 02 AB |  if_e	rdlong	local01, fp
1c100     14 4E 85 A1 |  if_e	sub	fp, #20
1c104     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1c108     2C 00 90 5D |  if_ne	jmp	#LR__2283
1c10c     0C 4E 05 F1 | 	add	fp, #12
1c110     A7 26 02 FB | 	rdlong	local01, fp
1c114     0C 4E 85 F1 | 	sub	fp, #12
1c118     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c11c     13 8B 12 FD | 	qdiv	muldivb_, local01
1c120     18 26 62 FD | 	getqx	local01
1c124     A7 26 62 FC | 	wrlong	local01, fp
1c128     08 4E 05 F1 | 	add	fp, #8
1c12c     A7 38 68 FC | 	wrlong	#28, fp
1c130     08 4E 85 F1 | 	sub	fp, #8
1c134     90 00 90 FD | 	jmp	#LR__2286
1c138                 | LR__2283
1c138                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c138     08 4E 05 F1 | 	add	fp, #8
1c13c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c140     08 4E 85 F1 | 	sub	fp, #8
1c144     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1c148     14 4E 05 A1 |  if_e	add	fp, #20
1c14c     A7 26 02 AB |  if_e	rdlong	local01, fp
1c150     14 4E 85 A1 |  if_e	sub	fp, #20
1c154     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1c158     1C 00 90 5D |  if_ne	jmp	#LR__2284
1c15c     A7 88 02 FB | 	rdlong	muldiva_, fp
1c160     0C 4E 05 F1 | 	add	fp, #12
1c164     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c168     0C 4E 85 F1 | 	sub	fp, #12
1c16c     BA 00 A0 FD | 	call	#divide_
1c170     A7 8A 62 FC | 	wrlong	muldivb_, fp
1c174     50 00 90 FD | 	jmp	#LR__2286
1c178                 | LR__2284
1c178                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c178     08 4E 05 F1 | 	add	fp, #8
1c17c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c180     08 4E 85 F1 | 	sub	fp, #8
1c184     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1c188     14 4E 05 A1 |  if_e	add	fp, #20
1c18c     A7 26 02 AB |  if_e	rdlong	local01, fp
1c190     14 4E 85 A1 |  if_e	sub	fp, #20
1c194     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1c198     1C 00 90 5D |  if_ne	jmp	#LR__2285
1c19c     A7 88 02 FB | 	rdlong	muldiva_, fp
1c1a0     0C 4E 05 F1 | 	add	fp, #12
1c1a4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c1a8     0C 4E 85 F1 | 	sub	fp, #12
1c1ac     BA 00 A0 FD | 	call	#divide_
1c1b0     A7 8A 62 FC | 	wrlong	muldivb_, fp
1c1b4     10 00 90 FD | 	jmp	#LR__2286
1c1b8                 | LR__2285
1c1b8     A7 16 68 FC | 	wrlong	#11, fp
1c1bc     08 4E 05 F1 | 	add	fp, #8
1c1c0     A7 FE 69 FC | 	wrlong	#255, fp
1c1c4     08 4E 85 F1 | 	sub	fp, #8
1c1c8                 | LR__2286
1c1c8     A7 12 02 F6 | 	mov	arg01, fp
1c1cc     54 0A BF FD | 	call	#_push
1c1d0     A7 F0 03 F6 | 	mov	ptra, fp
1c1d4     B2 00 A0 FD | 	call	#popregs_
1c1d8                 | _do_div_ret
1c1d8     2D 00 64 FD | 	ret
1c1dc                 | 
1c1dc                 | ' 
1c1dc                 | ' '--------------------------------- equal (=)
1c1dc                 | ' 
1c1dc                 | ' sub do_eq
1c1dc                 | _do_eq
1c1dc     05 4A 05 F6 | 	mov	COUNT_, #5
1c1e0     A8 00 A0 FD | 	call	#pushregs_
1c1e4     18 F0 07 F1 | 	add	ptra, #24
1c1e8     A0 09 BF FD | 	call	#_pop
1c1ec     FD 26 02 F6 | 	mov	local01, result1
1c1f0     FE 28 02 F6 | 	mov	local02, result2
1c1f4     FF 2A 02 F6 | 	mov	local03, result3
1c1f8     0C 4E 05 F1 | 	add	fp, #12
1c1fc     A7 26 62 FC | 	wrlong	local01, fp
1c200     04 4E 05 F1 | 	add	fp, #4
1c204     A7 28 62 FC | 	wrlong	local02, fp
1c208     04 4E 05 F1 | 	add	fp, #4
1c20c     A7 2A 62 FC | 	wrlong	local03, fp
1c210     14 4E 85 F1 | 	sub	fp, #20
1c214     74 09 BF FD | 	call	#_pop
1c218     FF 2A 02 F6 | 	mov	local03, result3
1c21c     A7 FA 61 FC | 	wrlong	result1, fp
1c220     04 4E 05 F1 | 	add	fp, #4
1c224     A7 FC 61 FC | 	wrlong	result2, fp
1c228     04 4E 05 F1 | 	add	fp, #4
1c22c     A7 2A 62 FC | 	wrlong	local03, fp
1c230                 | ' 
1c230                 | ' t2=pop()
1c230                 | ' t1=pop()
1c230                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c230     08 4E 85 F1 | 	sub	fp, #8
1c234     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c238     14 4E 05 A1 |  if_e	add	fp, #20
1c23c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c240     14 4E 85 A1 |  if_e	sub	fp, #20
1c244     16 2B 02 A6 |  if_e	mov	local03, local04
1c248     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c24c     28 00 90 5D |  if_ne	jmp	#LR__2290
1c250     00 26 06 F6 | 	mov	local01, #0
1c254     A7 12 02 FB | 	rdlong	arg01, fp
1c258     0C 4E 05 F1 | 	add	fp, #12
1c25c     A7 14 02 FB | 	rdlong	arg02, fp
1c260     0C 4E 85 F1 | 	sub	fp, #12
1c264     34 8C B0 FD | 	call	#__system___string_cmp
1c268     00 FA 0D F2 | 	cmp	result1, #0 wz
1c26c     00 26 26 A6 |  if_e	not	local01, #0
1c270     A7 26 62 FC | 	wrlong	local01, fp
1c274     20 04 90 FD | 	jmp	#LR__2303
1c278                 | LR__2290
1c278                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c278     08 4E 05 F1 | 	add	fp, #8
1c27c     A7 26 02 FB | 	rdlong	local01, fp
1c280     08 4E 85 F1 | 	sub	fp, #8
1c284     1E 26 0E F2 | 	cmp	local01, #30 wz
1c288     14 4E 05 A1 |  if_e	add	fp, #20
1c28c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c290     14 4E 85 A1 |  if_e	sub	fp, #20
1c294     16 2B 02 A6 |  if_e	mov	local03, local04
1c298     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c29c     2C 00 90 5D |  if_ne	jmp	#LR__2291
1c2a0     00 26 06 F6 | 	mov	local01, #0
1c2a4     A7 12 02 FB | 	rdlong	arg01, fp
1c2a8     0C 4E 05 F1 | 	add	fp, #12
1c2ac     A7 14 02 FB | 	rdlong	arg02, fp
1c2b0     0C 4E 85 F1 | 	sub	fp, #12
1c2b4     01 16 06 F6 | 	mov	arg03, #1
1c2b8     64 BE B0 FD | 	call	#__system___float_cmp
1c2bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c2c0     00 26 26 A6 |  if_e	not	local01, #0
1c2c4     A7 26 62 FC | 	wrlong	local01, fp
1c2c8     CC 03 90 FD | 	jmp	#LR__2303
1c2cc                 | LR__2291
1c2cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c2cc     08 4E 05 F1 | 	add	fp, #8
1c2d0     A7 26 02 FB | 	rdlong	local01, fp
1c2d4     08 4E 85 F1 | 	sub	fp, #8
1c2d8     1E 26 0E F2 | 	cmp	local01, #30 wz
1c2dc     14 4E 05 A1 |  if_e	add	fp, #20
1c2e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c2e4     14 4E 85 A1 |  if_e	sub	fp, #20
1c2e8     16 2B 02 A6 |  if_e	mov	local03, local04
1c2ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c2f0     48 00 90 5D |  if_ne	jmp	#LR__2292
1c2f4     00 26 06 F6 | 	mov	local01, #0
1c2f8     A7 28 02 FB | 	rdlong	local02, fp
1c2fc     0C 4E 05 F1 | 	add	fp, #12
1c300     A7 12 02 FB | 	rdlong	arg01, fp
1c304     0C 4E 85 F1 | 	sub	fp, #12
1c308     09 13 52 F6 | 	abs	arg01, arg01 wc
1c30c     1F 2E C6 C9 |  if_b	decod	local05, #31
1c310     00 2E 06 36 |  if_ae	mov	local05, #0
1c314     D0 B5 B0 FD | 	call	#__system___float_fromuns
1c318     17 FB 61 F5 | 	xor	result1, local05
1c31c     FD 14 02 F6 | 	mov	arg02, result1
1c320     14 13 02 F6 | 	mov	arg01, local02
1c324     01 16 06 F6 | 	mov	arg03, #1
1c328     F4 BD B0 FD | 	call	#__system___float_cmp
1c32c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c330     00 26 26 A6 |  if_e	not	local01, #0
1c334     A7 26 62 FC | 	wrlong	local01, fp
1c338     5C 03 90 FD | 	jmp	#LR__2303
1c33c                 | LR__2292
1c33c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c33c     08 4E 05 F1 | 	add	fp, #8
1c340     A7 26 02 FB | 	rdlong	local01, fp
1c344     08 4E 85 F1 | 	sub	fp, #8
1c348     1E 26 0E F2 | 	cmp	local01, #30 wz
1c34c     14 4E 05 A1 |  if_e	add	fp, #20
1c350     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c354     14 4E 85 A1 |  if_e	sub	fp, #20
1c358     16 2B 02 A6 |  if_e	mov	local03, local04
1c35c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c360     38 00 90 5D |  if_ne	jmp	#LR__2293
1c364     00 26 06 F6 | 	mov	local01, #0
1c368     A7 28 02 FB | 	rdlong	local02, fp
1c36c     0C 4E 05 F1 | 	add	fp, #12
1c370     A7 12 02 FB | 	rdlong	arg01, fp
1c374     0C 4E 85 F1 | 	sub	fp, #12
1c378     6C B5 B0 FD | 	call	#__system___float_fromuns
1c37c     FD 14 02 F6 | 	mov	arg02, result1
1c380     14 13 02 F6 | 	mov	arg01, local02
1c384     01 16 06 F6 | 	mov	arg03, #1
1c388     94 BD B0 FD | 	call	#__system___float_cmp
1c38c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c390     00 26 26 A6 |  if_e	not	local01, #0
1c394     A7 26 62 FC | 	wrlong	local01, fp
1c398     FC 02 90 FD | 	jmp	#LR__2303
1c39c                 | LR__2293
1c39c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c39c     08 4E 05 F1 | 	add	fp, #8
1c3a0     A7 26 02 FB | 	rdlong	local01, fp
1c3a4     08 4E 85 F1 | 	sub	fp, #8
1c3a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1c3ac     14 4E 05 A1 |  if_e	add	fp, #20
1c3b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c3b4     14 4E 85 A1 |  if_e	sub	fp, #20
1c3b8     16 2B 02 A6 |  if_e	mov	local03, local04
1c3bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c3c0     44 00 90 5D |  if_ne	jmp	#LR__2294
1c3c4     00 26 06 F6 | 	mov	local01, #0
1c3c8     A7 12 02 FB | 	rdlong	arg01, fp
1c3cc     09 13 52 F6 | 	abs	arg01, arg01 wc
1c3d0     1F 2E C6 C9 |  if_b	decod	local05, #31
1c3d4     00 2E 06 36 |  if_ae	mov	local05, #0
1c3d8     0C B5 B0 FD | 	call	#__system___float_fromuns
1c3dc     17 FB 61 F5 | 	xor	result1, local05
1c3e0     FD 12 02 F6 | 	mov	arg01, result1
1c3e4     0C 4E 05 F1 | 	add	fp, #12
1c3e8     A7 14 02 FB | 	rdlong	arg02, fp
1c3ec     0C 4E 85 F1 | 	sub	fp, #12
1c3f0     01 16 06 F6 | 	mov	arg03, #1
1c3f4     28 BD B0 FD | 	call	#__system___float_cmp
1c3f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3fc     00 26 26 A6 |  if_e	not	local01, #0
1c400     A7 26 62 FC | 	wrlong	local01, fp
1c404     90 02 90 FD | 	jmp	#LR__2303
1c408                 | LR__2294
1c408                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1c408     08 4E 05 F1 | 	add	fp, #8
1c40c     A7 26 02 FB | 	rdlong	local01, fp
1c410     08 4E 85 F1 | 	sub	fp, #8
1c414     1C 26 0E F2 | 	cmp	local01, #28 wz
1c418     14 4E 05 A1 |  if_e	add	fp, #20
1c41c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c420     14 4E 85 A1 |  if_e	sub	fp, #20
1c424     16 2B 02 A6 |  if_e	mov	local03, local04
1c428     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c42c     24 00 90 5D |  if_ne	jmp	#LR__2295
1c430     00 26 06 F6 | 	mov	local01, #0
1c434     A7 28 02 FB | 	rdlong	local02, fp
1c438     0C 4E 05 F1 | 	add	fp, #12
1c43c     A7 2A 02 FB | 	rdlong	local03, fp
1c440     0C 4E 85 F1 | 	sub	fp, #12
1c444     15 29 0A F2 | 	cmp	local02, local03 wz
1c448     01 26 66 A6 |  if_e	neg	local01, #1
1c44c     A7 26 62 FC | 	wrlong	local01, fp
1c450     44 02 90 FD | 	jmp	#LR__2303
1c454                 | LR__2295
1c454                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1c454     08 4E 05 F1 | 	add	fp, #8
1c458     A7 26 02 FB | 	rdlong	local01, fp
1c45c     08 4E 85 F1 | 	sub	fp, #8
1c460     1C 26 0E F2 | 	cmp	local01, #28 wz
1c464     14 4E 05 A1 |  if_e	add	fp, #20
1c468     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c46c     14 4E 85 A1 |  if_e	sub	fp, #20
1c470     16 2B 02 A6 |  if_e	mov	local03, local04
1c474     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c478     24 00 90 5D |  if_ne	jmp	#LR__2296
1c47c     00 26 06 F6 | 	mov	local01, #0
1c480     A7 28 02 FB | 	rdlong	local02, fp
1c484     0C 4E 05 F1 | 	add	fp, #12
1c488     A7 2A 02 FB | 	rdlong	local03, fp
1c48c     0C 4E 85 F1 | 	sub	fp, #12
1c490     15 29 0A F2 | 	cmp	local02, local03 wz
1c494     01 26 66 A6 |  if_e	neg	local01, #1
1c498     A7 26 62 FC | 	wrlong	local01, fp
1c49c     F8 01 90 FD | 	jmp	#LR__2303
1c4a0                 | LR__2296
1c4a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1c4a0     08 4E 05 F1 | 	add	fp, #8
1c4a4     A7 26 02 FB | 	rdlong	local01, fp
1c4a8     08 4E 85 F1 | 	sub	fp, #8
1c4ac     1D 26 0E F2 | 	cmp	local01, #29 wz
1c4b0     14 4E 05 A1 |  if_e	add	fp, #20
1c4b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c4b8     14 4E 85 A1 |  if_e	sub	fp, #20
1c4bc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c4c0     34 00 90 5D |  if_ne	jmp	#LR__2297
1c4c4     00 26 06 F6 | 	mov	local01, #0
1c4c8     A7 12 02 FB | 	rdlong	arg01, fp
1c4cc     18 B4 B0 FD | 	call	#__system___float_fromuns
1c4d0     FD 12 02 F6 | 	mov	arg01, result1
1c4d4     0C 4E 05 F1 | 	add	fp, #12
1c4d8     A7 14 02 FB | 	rdlong	arg02, fp
1c4dc     0C 4E 85 F1 | 	sub	fp, #12
1c4e0     01 16 06 F6 | 	mov	arg03, #1
1c4e4     38 BC B0 FD | 	call	#__system___float_cmp
1c4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4ec     00 26 26 A6 |  if_e	not	local01, #0
1c4f0     A7 26 62 FC | 	wrlong	local01, fp
1c4f4     A0 01 90 FD | 	jmp	#LR__2303
1c4f8                 | LR__2297
1c4f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1c4f8     08 4E 05 F1 | 	add	fp, #8
1c4fc     A7 26 02 FB | 	rdlong	local01, fp
1c500     08 4E 85 F1 | 	sub	fp, #8
1c504     1D 26 0E F2 | 	cmp	local01, #29 wz
1c508     14 4E 05 A1 |  if_e	add	fp, #20
1c50c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c510     14 4E 85 A1 |  if_e	sub	fp, #20
1c514     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c518     24 00 90 5D |  if_ne	jmp	#LR__2298
1c51c     00 26 06 F6 | 	mov	local01, #0
1c520     A7 28 02 FB | 	rdlong	local02, fp
1c524     0C 4E 05 F1 | 	add	fp, #12
1c528     A7 2A 02 FB | 	rdlong	local03, fp
1c52c     0C 4E 85 F1 | 	sub	fp, #12
1c530     15 29 0A F2 | 	cmp	local02, local03 wz
1c534     01 26 66 A6 |  if_e	neg	local01, #1
1c538     A7 26 62 FC | 	wrlong	local01, fp
1c53c     58 01 90 FD | 	jmp	#LR__2303
1c540                 | LR__2298
1c540                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1c540     08 4E 05 F1 | 	add	fp, #8
1c544     A7 26 02 FB | 	rdlong	local01, fp
1c548     08 4E 85 F1 | 	sub	fp, #8
1c54c     1D 26 0E F2 | 	cmp	local01, #29 wz
1c550     14 4E 05 A1 |  if_e	add	fp, #20
1c554     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c558     14 4E 85 A1 |  if_e	sub	fp, #20
1c55c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c560     24 00 90 5D |  if_ne	jmp	#LR__2299
1c564     00 26 06 F6 | 	mov	local01, #0
1c568     A7 28 02 FB | 	rdlong	local02, fp
1c56c     0C 4E 05 F1 | 	add	fp, #12
1c570     A7 2A 02 FB | 	rdlong	local03, fp
1c574     0C 4E 85 F1 | 	sub	fp, #12
1c578     15 29 0A F2 | 	cmp	local02, local03 wz
1c57c     01 26 66 A6 |  if_e	neg	local01, #1
1c580     A7 26 62 FC | 	wrlong	local01, fp
1c584     10 01 90 FD | 	jmp	#LR__2303
1c588                 | LR__2299
1c588                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1c588     08 4E 05 F1 | 	add	fp, #8
1c58c     A7 26 02 FB | 	rdlong	local01, fp
1c590     08 4E 85 F1 | 	sub	fp, #8
1c594     2B 26 0E F2 | 	cmp	local01, #43 wz
1c598     14 4E 05 A1 |  if_e	add	fp, #20
1c59c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c5a0     14 4E 85 A1 |  if_e	sub	fp, #20
1c5a4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c5a8     30 00 90 5D |  if_ne	jmp	#LR__2300
1c5ac     00 26 06 F6 | 	mov	local01, #0
1c5b0     A7 12 02 FB | 	rdlong	arg01, fp
1c5b4     4C 07 BF FD | 	call	#_convertstring
1c5b8     FD 12 02 F6 | 	mov	arg01, result1
1c5bc     0C 4E 05 F1 | 	add	fp, #12
1c5c0     A7 14 02 FB | 	rdlong	arg02, fp
1c5c4     0C 4E 85 F1 | 	sub	fp, #12
1c5c8     D0 88 B0 FD | 	call	#__system___string_cmp
1c5cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5d0     00 26 26 A6 |  if_e	not	local01, #0
1c5d4     A7 26 62 FC | 	wrlong	local01, fp
1c5d8     BC 00 90 FD | 	jmp	#LR__2303
1c5dc                 | LR__2300
1c5dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1c5dc     08 4E 05 F1 | 	add	fp, #8
1c5e0     A7 26 02 FB | 	rdlong	local01, fp
1c5e4     08 4E 85 F1 | 	sub	fp, #8
1c5e8     1F 26 0E F2 | 	cmp	local01, #31 wz
1c5ec     14 4E 05 A1 |  if_e	add	fp, #20
1c5f0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c5f4     14 4E 85 A1 |  if_e	sub	fp, #20
1c5f8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c5fc     34 00 90 5D |  if_ne	jmp	#LR__2301
1c600     00 26 06 F6 | 	mov	local01, #0
1c604     A7 28 02 FB | 	rdlong	local02, fp
1c608     0C 4E 05 F1 | 	add	fp, #12
1c60c     A7 12 02 FB | 	rdlong	arg01, fp
1c610     0C 4E 85 F1 | 	sub	fp, #12
1c614     EC 06 BF FD | 	call	#_convertstring
1c618     FD 14 02 F6 | 	mov	arg02, result1
1c61c     14 13 02 F6 | 	mov	arg01, local02
1c620     78 88 B0 FD | 	call	#__system___string_cmp
1c624     00 FA 0D F2 | 	cmp	result1, #0 wz
1c628     00 26 26 A6 |  if_e	not	local01, #0
1c62c     A7 26 62 FC | 	wrlong	local01, fp
1c630     64 00 90 FD | 	jmp	#LR__2303
1c634                 | LR__2301
1c634                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1c634     08 4E 05 F1 | 	add	fp, #8
1c638     A7 26 02 FB | 	rdlong	local01, fp
1c63c     08 4E 85 F1 | 	sub	fp, #8
1c640     2B 26 0E F2 | 	cmp	local01, #43 wz
1c644     14 4E 05 A1 |  if_e	add	fp, #20
1c648     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c64c     14 4E 85 A1 |  if_e	sub	fp, #20
1c650     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c654     3C 00 90 5D |  if_ne	jmp	#LR__2302
1c658     00 26 06 F6 | 	mov	local01, #0
1c65c     A7 12 02 FB | 	rdlong	arg01, fp
1c660     A0 06 BF FD | 	call	#_convertstring
1c664     FD 28 02 F6 | 	mov	local02, result1
1c668     0C 4E 05 F1 | 	add	fp, #12
1c66c     A7 12 02 FB | 	rdlong	arg01, fp
1c670     0C 4E 85 F1 | 	sub	fp, #12
1c674     8C 06 BF FD | 	call	#_convertstring
1c678     FD 14 02 F6 | 	mov	arg02, result1
1c67c     14 13 02 F6 | 	mov	arg01, local02
1c680     18 88 B0 FD | 	call	#__system___string_cmp
1c684     00 FA 0D F2 | 	cmp	result1, #0 wz
1c688     00 26 26 A6 |  if_e	not	local01, #0
1c68c     A7 26 62 FC | 	wrlong	local01, fp
1c690     04 00 90 FD | 	jmp	#LR__2303
1c694                 | LR__2302
1c694     A7 00 68 FC | 	wrlong	#0, fp
1c698                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c698                 | LR__2303
1c698     08 4E 05 F1 | 	add	fp, #8
1c69c     A7 38 68 FC | 	wrlong	#28, fp
1c6a0     08 4E 85 F1 | 	sub	fp, #8
1c6a4     A7 12 02 F6 | 	mov	arg01, fp
1c6a8     78 05 BF FD | 	call	#_push
1c6ac     A7 F0 03 F6 | 	mov	ptra, fp
1c6b0     B2 00 A0 FD | 	call	#popregs_
1c6b4                 | _do_eq_ret
1c6b4     2D 00 64 FD | 	ret
1c6b8                 | 
1c6b8                 | ' 
1c6b8                 | ' '--------------------------------- fdiv (/) - float divide
1c6b8                 | ' 
1c6b8                 | ' sub do_fdiv 
1c6b8                 | _do_fdiv
1c6b8     02 4A 05 F6 | 	mov	COUNT_, #2
1c6bc     A8 00 A0 FD | 	call	#pushregs_
1c6c0     18 F0 07 F1 | 	add	ptra, #24
1c6c4     C4 04 BF FD | 	call	#_pop
1c6c8     FD 14 02 F6 | 	mov	arg02, result1
1c6cc     FE 12 02 F6 | 	mov	arg01, result2
1c6d0     FF 26 02 F6 | 	mov	local01, result3
1c6d4     0C 4E 05 F1 | 	add	fp, #12
1c6d8     A7 14 62 FC | 	wrlong	arg02, fp
1c6dc     04 4E 05 F1 | 	add	fp, #4
1c6e0     A7 12 62 FC | 	wrlong	arg01, fp
1c6e4     04 4E 05 F1 | 	add	fp, #4
1c6e8     A7 26 62 FC | 	wrlong	local01, fp
1c6ec     14 4E 85 F1 | 	sub	fp, #20
1c6f0     98 04 BF FD | 	call	#_pop
1c6f4     A7 FA 61 FC | 	wrlong	result1, fp
1c6f8     04 4E 05 F1 | 	add	fp, #4
1c6fc     A7 FC 61 FC | 	wrlong	result2, fp
1c700     04 4E 05 F1 | 	add	fp, #4
1c704     A7 FE 61 FC | 	wrlong	result3, fp
1c708                 | ' 
1c708                 | ' t2=pop()
1c708                 | ' t1=pop()
1c708                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1c708     08 4E 85 F1 | 	sub	fp, #8
1c70c     1F FE 0D F2 | 	cmp	result3, #31 wz
1c710     14 4E 05 51 |  if_ne	add	fp, #20
1c714     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c718     14 4E 85 51 |  if_ne	sub	fp, #20
1c71c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1c720     A7 14 68 AC |  if_e	wrlong	#10, fp
1c724     08 4E 05 A1 |  if_e	add	fp, #8
1c728     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c72c     08 4E 85 A1 |  if_e	sub	fp, #8
1c730     38 01 90 AD |  if_e	jmp	#LR__2315
1c734                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c734     08 4E 05 F1 | 	add	fp, #8
1c738     A7 14 02 FB | 	rdlong	arg02, fp
1c73c     08 4E 85 F1 | 	sub	fp, #8
1c740     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c744     28 00 90 5D |  if_ne	jmp	#LR__2310
1c748     08 4E 05 F1 | 	add	fp, #8
1c74c     A7 3C 68 FC | 	wrlong	#30, fp
1c750     08 4E 85 F1 | 	sub	fp, #8
1c754     A7 12 02 FB | 	rdlong	arg01, fp
1c758     09 13 52 F6 | 	abs	arg01, arg01 wc
1c75c     1F 28 C6 C9 |  if_b	decod	local02, #31
1c760     00 28 06 36 |  if_ae	mov	local02, #0
1c764     80 B1 B0 FD | 	call	#__system___float_fromuns
1c768     14 FB 61 F5 | 	xor	result1, local02
1c76c     A7 FA 61 FC | 	wrlong	result1, fp
1c770                 | LR__2310
1c770                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1c770     08 4E 05 F1 | 	add	fp, #8
1c774     A7 14 02 FB | 	rdlong	arg02, fp
1c778     08 4E 85 F1 | 	sub	fp, #8
1c77c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c780     18 00 90 5D |  if_ne	jmp	#LR__2311
1c784     08 4E 05 F1 | 	add	fp, #8
1c788     A7 3C 68 FC | 	wrlong	#30, fp
1c78c     08 4E 85 F1 | 	sub	fp, #8
1c790     A7 12 02 FB | 	rdlong	arg01, fp
1c794     50 B1 B0 FD | 	call	#__system___float_fromuns
1c798     A7 FA 61 FC | 	wrlong	result1, fp
1c79c                 | LR__2311
1c79c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c79c     14 4E 05 F1 | 	add	fp, #20
1c7a0     A7 14 02 FB | 	rdlong	arg02, fp
1c7a4     14 4E 85 F1 | 	sub	fp, #20
1c7a8     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c7ac     34 00 90 5D |  if_ne	jmp	#LR__2312
1c7b0     14 4E 05 F1 | 	add	fp, #20
1c7b4     A7 3C 68 FC | 	wrlong	#30, fp
1c7b8     08 4E 85 F1 | 	sub	fp, #8
1c7bc     A7 12 02 FB | 	rdlong	arg01, fp
1c7c0     0C 4E 85 F1 | 	sub	fp, #12
1c7c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1c7c8     1F 28 C6 C9 |  if_b	decod	local02, #31
1c7cc     00 28 06 36 |  if_ae	mov	local02, #0
1c7d0     14 B1 B0 FD | 	call	#__system___float_fromuns
1c7d4     14 FB 61 F5 | 	xor	result1, local02
1c7d8     0C 4E 05 F1 | 	add	fp, #12
1c7dc     A7 FA 61 FC | 	wrlong	result1, fp
1c7e0     0C 4E 85 F1 | 	sub	fp, #12
1c7e4                 | LR__2312
1c7e4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c7e4     14 4E 05 F1 | 	add	fp, #20
1c7e8     A7 14 02 FB | 	rdlong	arg02, fp
1c7ec     14 4E 85 F1 | 	sub	fp, #20
1c7f0     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c7f4     24 00 90 5D |  if_ne	jmp	#LR__2313
1c7f8     14 4E 05 F1 | 	add	fp, #20
1c7fc     A7 3C 68 FC | 	wrlong	#30, fp
1c800     08 4E 85 F1 | 	sub	fp, #8
1c804     A7 12 02 FB | 	rdlong	arg01, fp
1c808     0C 4E 85 F1 | 	sub	fp, #12
1c80c     D8 B0 B0 FD | 	call	#__system___float_fromuns
1c810     0C 4E 05 F1 | 	add	fp, #12
1c814     A7 FA 61 FC | 	wrlong	result1, fp
1c818     0C 4E 85 F1 | 	sub	fp, #12
1c81c                 | LR__2313
1c81c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1c81c     08 4E 05 F1 | 	add	fp, #8
1c820     A7 14 02 FB | 	rdlong	arg02, fp
1c824     08 4E 85 F1 | 	sub	fp, #8
1c828     1E 14 0E F2 | 	cmp	arg02, #30 wz
1c82c     14 4E 05 A1 |  if_e	add	fp, #20
1c830     A7 26 02 AB |  if_e	rdlong	local01, fp
1c834     14 4E 85 A1 |  if_e	sub	fp, #20
1c838     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1c83c     1C 00 90 5D |  if_ne	jmp	#LR__2314
1c840     A7 12 02 FB | 	rdlong	arg01, fp
1c844     0C 4E 05 F1 | 	add	fp, #12
1c848     A7 14 02 FB | 	rdlong	arg02, fp
1c84c     0C 4E 85 F1 | 	sub	fp, #12
1c850     9C B6 B0 FD | 	call	#__system___float_div
1c854     A7 FA 61 FC | 	wrlong	result1, fp
1c858     10 00 90 FD | 	jmp	#LR__2315
1c85c                 | LR__2314
1c85c     A7 16 68 FC | 	wrlong	#11, fp
1c860     08 4E 05 F1 | 	add	fp, #8
1c864     A7 FE 69 FC | 	wrlong	#255, fp
1c868     08 4E 85 F1 | 	sub	fp, #8
1c86c                 | LR__2315
1c86c     A7 12 02 F6 | 	mov	arg01, fp
1c870     B0 03 BF FD | 	call	#_push
1c874     A7 F0 03 F6 | 	mov	ptra, fp
1c878     B2 00 A0 FD | 	call	#popregs_
1c87c                 | _do_fdiv_ret
1c87c     2D 00 64 FD | 	ret
1c880                 | 
1c880                 | ' 
1c880                 | ' '--------------------------------- greater or equal (>=)
1c880                 | ' 
1c880                 | ' sub do_ge
1c880                 | _do_ge
1c880     05 4A 05 F6 | 	mov	COUNT_, #5
1c884     A8 00 A0 FD | 	call	#pushregs_
1c888     18 F0 07 F1 | 	add	ptra, #24
1c88c     FC 02 BF FD | 	call	#_pop
1c890     FD 26 02 F6 | 	mov	local01, result1
1c894     FE 28 02 F6 | 	mov	local02, result2
1c898     FF 2A 02 F6 | 	mov	local03, result3
1c89c     0C 4E 05 F1 | 	add	fp, #12
1c8a0     A7 26 62 FC | 	wrlong	local01, fp
1c8a4     04 4E 05 F1 | 	add	fp, #4
1c8a8     A7 28 62 FC | 	wrlong	local02, fp
1c8ac     04 4E 05 F1 | 	add	fp, #4
1c8b0     A7 2A 62 FC | 	wrlong	local03, fp
1c8b4     14 4E 85 F1 | 	sub	fp, #20
1c8b8     D0 02 BF FD | 	call	#_pop
1c8bc     FF 2A 02 F6 | 	mov	local03, result3
1c8c0     A7 FA 61 FC | 	wrlong	result1, fp
1c8c4     04 4E 05 F1 | 	add	fp, #4
1c8c8     A7 FC 61 FC | 	wrlong	result2, fp
1c8cc     04 4E 05 F1 | 	add	fp, #4
1c8d0     A7 2A 62 FC | 	wrlong	local03, fp
1c8d4                 | ' 
1c8d4                 | ' t2=pop()
1c8d4                 | ' t1=pop()
1c8d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1c8d4     08 4E 85 F1 | 	sub	fp, #8
1c8d8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c8dc     14 4E 05 A1 |  if_e	add	fp, #20
1c8e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c8e4     14 4E 85 A1 |  if_e	sub	fp, #20
1c8e8     16 2B 02 A6 |  if_e	mov	local03, local04
1c8ec     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c8f0     28 00 90 5D |  if_ne	jmp	#LR__2320
1c8f4     00 26 06 F6 | 	mov	local01, #0
1c8f8     A7 12 02 FB | 	rdlong	arg01, fp
1c8fc     0C 4E 05 F1 | 	add	fp, #12
1c900     A7 14 02 FB | 	rdlong	arg02, fp
1c904     0C 4E 85 F1 | 	sub	fp, #12
1c908     90 85 B0 FD | 	call	#__system___string_cmp
1c90c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c910     00 26 26 36 |  if_ae	not	local01, #0
1c914     A7 26 62 FC | 	wrlong	local01, fp
1c918     24 04 90 FD | 	jmp	#LR__2333
1c91c                 | LR__2320
1c91c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1c91c     08 4E 05 F1 | 	add	fp, #8
1c920     A7 26 02 FB | 	rdlong	local01, fp
1c924     08 4E 85 F1 | 	sub	fp, #8
1c928     1E 26 0E F2 | 	cmp	local01, #30 wz
1c92c     14 4E 05 A1 |  if_e	add	fp, #20
1c930     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c934     14 4E 85 A1 |  if_e	sub	fp, #20
1c938     16 2B 02 A6 |  if_e	mov	local03, local04
1c93c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c940     2C 00 90 5D |  if_ne	jmp	#LR__2321
1c944     00 26 06 F6 | 	mov	local01, #0
1c948     A7 12 02 FB | 	rdlong	arg01, fp
1c94c     0C 4E 05 F1 | 	add	fp, #12
1c950     A7 14 02 FB | 	rdlong	arg02, fp
1c954     0C 4E 85 F1 | 	sub	fp, #12
1c958     01 16 66 F6 | 	neg	arg03, #1
1c95c     C0 B7 B0 FD | 	call	#__system___float_cmp
1c960     00 FA 55 F2 | 	cmps	result1, #0 wc
1c964     00 26 26 36 |  if_ae	not	local01, #0
1c968     A7 26 62 FC | 	wrlong	local01, fp
1c96c     D0 03 90 FD | 	jmp	#LR__2333
1c970                 | LR__2321
1c970                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1c970     08 4E 05 F1 | 	add	fp, #8
1c974     A7 26 02 FB | 	rdlong	local01, fp
1c978     08 4E 85 F1 | 	sub	fp, #8
1c97c     1E 26 0E F2 | 	cmp	local01, #30 wz
1c980     14 4E 05 A1 |  if_e	add	fp, #20
1c984     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c988     14 4E 85 A1 |  if_e	sub	fp, #20
1c98c     16 2B 02 A6 |  if_e	mov	local03, local04
1c990     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c994     48 00 90 5D |  if_ne	jmp	#LR__2322
1c998     00 26 06 F6 | 	mov	local01, #0
1c99c     A7 28 02 FB | 	rdlong	local02, fp
1c9a0     0C 4E 05 F1 | 	add	fp, #12
1c9a4     A7 12 02 FB | 	rdlong	arg01, fp
1c9a8     0C 4E 85 F1 | 	sub	fp, #12
1c9ac     09 13 52 F6 | 	abs	arg01, arg01 wc
1c9b0     1F 2E C6 C9 |  if_b	decod	local05, #31
1c9b4     00 2E 06 36 |  if_ae	mov	local05, #0
1c9b8     2C AF B0 FD | 	call	#__system___float_fromuns
1c9bc     17 FB 61 F5 | 	xor	result1, local05
1c9c0     FD 14 02 F6 | 	mov	arg02, result1
1c9c4     14 13 02 F6 | 	mov	arg01, local02
1c9c8     01 16 66 F6 | 	neg	arg03, #1
1c9cc     50 B7 B0 FD | 	call	#__system___float_cmp
1c9d0     00 FA 55 F2 | 	cmps	result1, #0 wc
1c9d4     00 26 26 36 |  if_ae	not	local01, #0
1c9d8     A7 26 62 FC | 	wrlong	local01, fp
1c9dc     60 03 90 FD | 	jmp	#LR__2333
1c9e0                 | LR__2322
1c9e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1c9e0     08 4E 05 F1 | 	add	fp, #8
1c9e4     A7 26 02 FB | 	rdlong	local01, fp
1c9e8     08 4E 85 F1 | 	sub	fp, #8
1c9ec     1E 26 0E F2 | 	cmp	local01, #30 wz
1c9f0     14 4E 05 A1 |  if_e	add	fp, #20
1c9f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c9f8     14 4E 85 A1 |  if_e	sub	fp, #20
1c9fc     16 2B 02 A6 |  if_e	mov	local03, local04
1ca00     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ca04     38 00 90 5D |  if_ne	jmp	#LR__2323
1ca08     00 26 06 F6 | 	mov	local01, #0
1ca0c     A7 28 02 FB | 	rdlong	local02, fp
1ca10     0C 4E 05 F1 | 	add	fp, #12
1ca14     A7 12 02 FB | 	rdlong	arg01, fp
1ca18     0C 4E 85 F1 | 	sub	fp, #12
1ca1c     C8 AE B0 FD | 	call	#__system___float_fromuns
1ca20     FD 14 02 F6 | 	mov	arg02, result1
1ca24     14 13 02 F6 | 	mov	arg01, local02
1ca28     01 16 66 F6 | 	neg	arg03, #1
1ca2c     F0 B6 B0 FD | 	call	#__system___float_cmp
1ca30     00 FA 55 F2 | 	cmps	result1, #0 wc
1ca34     00 26 26 36 |  if_ae	not	local01, #0
1ca38     A7 26 62 FC | 	wrlong	local01, fp
1ca3c     00 03 90 FD | 	jmp	#LR__2333
1ca40                 | LR__2323
1ca40                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1ca40     08 4E 05 F1 | 	add	fp, #8
1ca44     A7 26 02 FB | 	rdlong	local01, fp
1ca48     08 4E 85 F1 | 	sub	fp, #8
1ca4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ca50     14 4E 05 A1 |  if_e	add	fp, #20
1ca54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ca58     14 4E 85 A1 |  if_e	sub	fp, #20
1ca5c     16 2B 02 A6 |  if_e	mov	local03, local04
1ca60     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ca64     44 00 90 5D |  if_ne	jmp	#LR__2324
1ca68     00 26 06 F6 | 	mov	local01, #0
1ca6c     A7 12 02 FB | 	rdlong	arg01, fp
1ca70     09 13 52 F6 | 	abs	arg01, arg01 wc
1ca74     1F 2E C6 C9 |  if_b	decod	local05, #31
1ca78     00 2E 06 36 |  if_ae	mov	local05, #0
1ca7c     68 AE B0 FD | 	call	#__system___float_fromuns
1ca80     17 FB 61 F5 | 	xor	result1, local05
1ca84     FD 12 02 F6 | 	mov	arg01, result1
1ca88     0C 4E 05 F1 | 	add	fp, #12
1ca8c     A7 14 02 FB | 	rdlong	arg02, fp
1ca90     0C 4E 85 F1 | 	sub	fp, #12
1ca94     01 16 66 F6 | 	neg	arg03, #1
1ca98     84 B6 B0 FD | 	call	#__system___float_cmp
1ca9c     00 FA 55 F2 | 	cmps	result1, #0 wc
1caa0     00 26 26 36 |  if_ae	not	local01, #0
1caa4     A7 26 62 FC | 	wrlong	local01, fp
1caa8     94 02 90 FD | 	jmp	#LR__2333
1caac                 | LR__2324
1caac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1caac     08 4E 05 F1 | 	add	fp, #8
1cab0     A7 26 02 FB | 	rdlong	local01, fp
1cab4     08 4E 85 F1 | 	sub	fp, #8
1cab8     1C 26 0E F2 | 	cmp	local01, #28 wz
1cabc     14 4E 05 A1 |  if_e	add	fp, #20
1cac0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cac4     14 4E 85 A1 |  if_e	sub	fp, #20
1cac8     16 2B 02 A6 |  if_e	mov	local03, local04
1cacc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cad0     24 00 90 5D |  if_ne	jmp	#LR__2325
1cad4     00 26 06 F6 | 	mov	local01, #0
1cad8     A7 28 02 FB | 	rdlong	local02, fp
1cadc     0C 4E 05 F1 | 	add	fp, #12
1cae0     A7 2A 02 FB | 	rdlong	local03, fp
1cae4     0C 4E 85 F1 | 	sub	fp, #12
1cae8     15 29 52 F2 | 	cmps	local02, local03 wc
1caec     01 26 66 36 |  if_ae	neg	local01, #1
1caf0     A7 26 62 FC | 	wrlong	local01, fp
1caf4     48 02 90 FD | 	jmp	#LR__2333
1caf8                 | LR__2325
1caf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1caf8     08 4E 05 F1 | 	add	fp, #8
1cafc     A7 26 02 FB | 	rdlong	local01, fp
1cb00     08 4E 85 F1 | 	sub	fp, #8
1cb04     1C 26 0E F2 | 	cmp	local01, #28 wz
1cb08     14 4E 05 A1 |  if_e	add	fp, #20
1cb0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cb10     14 4E 85 A1 |  if_e	sub	fp, #20
1cb14     16 2B 02 A6 |  if_e	mov	local03, local04
1cb18     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cb1c     24 00 90 5D |  if_ne	jmp	#LR__2326
1cb20     00 26 06 F6 | 	mov	local01, #0
1cb24     A7 28 02 FB | 	rdlong	local02, fp
1cb28     0C 4E 05 F1 | 	add	fp, #12
1cb2c     A7 2A 02 FB | 	rdlong	local03, fp
1cb30     0C 4E 85 F1 | 	sub	fp, #12
1cb34     15 29 52 F2 | 	cmps	local02, local03 wc
1cb38     01 26 66 36 |  if_ae	neg	local01, #1
1cb3c     A7 26 62 FC | 	wrlong	local01, fp
1cb40     FC 01 90 FD | 	jmp	#LR__2333
1cb44                 | LR__2326
1cb44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cb44     08 4E 05 F1 | 	add	fp, #8
1cb48     A7 26 02 FB | 	rdlong	local01, fp
1cb4c     08 4E 85 F1 | 	sub	fp, #8
1cb50     1D 26 0E F2 | 	cmp	local01, #29 wz
1cb54     14 4E 05 A1 |  if_e	add	fp, #20
1cb58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cb5c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb60     16 2B 02 A6 |  if_e	mov	local03, local04
1cb64     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cb68     34 00 90 5D |  if_ne	jmp	#LR__2327
1cb6c     00 26 06 F6 | 	mov	local01, #0
1cb70     A7 12 02 FB | 	rdlong	arg01, fp
1cb74     70 AD B0 FD | 	call	#__system___float_fromuns
1cb78     FD 12 02 F6 | 	mov	arg01, result1
1cb7c     0C 4E 05 F1 | 	add	fp, #12
1cb80     A7 14 02 FB | 	rdlong	arg02, fp
1cb84     0C 4E 85 F1 | 	sub	fp, #12
1cb88     01 16 66 F6 | 	neg	arg03, #1
1cb8c     90 B5 B0 FD | 	call	#__system___float_cmp
1cb90     00 FA 55 F2 | 	cmps	result1, #0 wc
1cb94     00 26 26 36 |  if_ae	not	local01, #0
1cb98     A7 26 62 FC | 	wrlong	local01, fp
1cb9c     A0 01 90 FD | 	jmp	#LR__2333
1cba0                 | LR__2327
1cba0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cba0     08 4E 05 F1 | 	add	fp, #8
1cba4     A7 26 02 FB | 	rdlong	local01, fp
1cba8     08 4E 85 F1 | 	sub	fp, #8
1cbac     1D 26 0E F2 | 	cmp	local01, #29 wz
1cbb0     14 4E 05 A1 |  if_e	add	fp, #20
1cbb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cbb8     14 4E 85 A1 |  if_e	sub	fp, #20
1cbbc     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1cbc0     24 00 90 5D |  if_ne	jmp	#LR__2328
1cbc4     00 26 06 F6 | 	mov	local01, #0
1cbc8     A7 28 02 FB | 	rdlong	local02, fp
1cbcc     0C 4E 05 F1 | 	add	fp, #12
1cbd0     A7 2A 02 FB | 	rdlong	local03, fp
1cbd4     0C 4E 85 F1 | 	sub	fp, #12
1cbd8     15 29 52 F2 | 	cmps	local02, local03 wc
1cbdc     01 26 66 36 |  if_ae	neg	local01, #1
1cbe0     A7 26 62 FC | 	wrlong	local01, fp
1cbe4     58 01 90 FD | 	jmp	#LR__2333
1cbe8                 | LR__2328
1cbe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1cbe8     08 4E 05 F1 | 	add	fp, #8
1cbec     A7 26 02 FB | 	rdlong	local01, fp
1cbf0     08 4E 85 F1 | 	sub	fp, #8
1cbf4     1D 26 0E F2 | 	cmp	local01, #29 wz
1cbf8     14 4E 05 A1 |  if_e	add	fp, #20
1cbfc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cc00     14 4E 85 A1 |  if_e	sub	fp, #20
1cc04     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cc08     24 00 90 5D |  if_ne	jmp	#LR__2329
1cc0c     00 26 06 F6 | 	mov	local01, #0
1cc10     A7 28 02 FB | 	rdlong	local02, fp
1cc14     0C 4E 05 F1 | 	add	fp, #12
1cc18     A7 2A 02 FB | 	rdlong	local03, fp
1cc1c     0C 4E 85 F1 | 	sub	fp, #12
1cc20     15 29 12 F2 | 	cmp	local02, local03 wc
1cc24     01 26 66 36 |  if_ae	neg	local01, #1
1cc28     A7 26 62 FC | 	wrlong	local01, fp
1cc2c     10 01 90 FD | 	jmp	#LR__2333
1cc30                 | LR__2329
1cc30                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1cc30     08 4E 05 F1 | 	add	fp, #8
1cc34     A7 26 02 FB | 	rdlong	local01, fp
1cc38     08 4E 85 F1 | 	sub	fp, #8
1cc3c     2B 26 0E F2 | 	cmp	local01, #43 wz
1cc40     14 4E 05 A1 |  if_e	add	fp, #20
1cc44     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cc48     14 4E 85 A1 |  if_e	sub	fp, #20
1cc4c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cc50     30 00 90 5D |  if_ne	jmp	#LR__2330
1cc54     00 26 06 F6 | 	mov	local01, #0
1cc58     A7 12 02 FB | 	rdlong	arg01, fp
1cc5c     A4 00 BF FD | 	call	#_convertstring
1cc60     FD 12 02 F6 | 	mov	arg01, result1
1cc64     0C 4E 05 F1 | 	add	fp, #12
1cc68     A7 14 02 FB | 	rdlong	arg02, fp
1cc6c     0C 4E 85 F1 | 	sub	fp, #12
1cc70     28 82 B0 FD | 	call	#__system___string_cmp
1cc74     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc78     00 26 26 36 |  if_ae	not	local01, #0
1cc7c     A7 26 62 FC | 	wrlong	local01, fp
1cc80     BC 00 90 FD | 	jmp	#LR__2333
1cc84                 | LR__2330
1cc84                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1cc84     08 4E 05 F1 | 	add	fp, #8
1cc88     A7 26 02 FB | 	rdlong	local01, fp
1cc8c     08 4E 85 F1 | 	sub	fp, #8
1cc90     1F 26 0E F2 | 	cmp	local01, #31 wz
1cc94     14 4E 05 A1 |  if_e	add	fp, #20
1cc98     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cc9c     14 4E 85 A1 |  if_e	sub	fp, #20
1cca0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1cca4     34 00 90 5D |  if_ne	jmp	#LR__2331
1cca8     00 26 06 F6 | 	mov	local01, #0
1ccac     A7 28 02 FB | 	rdlong	local02, fp
1ccb0     0C 4E 05 F1 | 	add	fp, #12
1ccb4     A7 12 02 FB | 	rdlong	arg01, fp
1ccb8     0C 4E 85 F1 | 	sub	fp, #12
1ccbc     44 00 BF FD | 	call	#_convertstring
1ccc0     FD 14 02 F6 | 	mov	arg02, result1
1ccc4     14 13 02 F6 | 	mov	arg01, local02
1ccc8     D0 81 B0 FD | 	call	#__system___string_cmp
1cccc     00 FA 55 F2 | 	cmps	result1, #0 wc
1ccd0     00 26 26 36 |  if_ae	not	local01, #0
1ccd4     A7 26 62 FC | 	wrlong	local01, fp
1ccd8     64 00 90 FD | 	jmp	#LR__2333
1ccdc                 | LR__2331
1ccdc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1ccdc     08 4E 05 F1 | 	add	fp, #8
1cce0     A7 26 02 FB | 	rdlong	local01, fp
1cce4     08 4E 85 F1 | 	sub	fp, #8
1cce8     2B 26 0E F2 | 	cmp	local01, #43 wz
1ccec     14 4E 05 A1 |  if_e	add	fp, #20
1ccf0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ccf4     14 4E 85 A1 |  if_e	sub	fp, #20
1ccf8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ccfc     3C 00 90 5D |  if_ne	jmp	#LR__2332
1cd00     00 26 06 F6 | 	mov	local01, #0
1cd04     A7 12 02 FB | 	rdlong	arg01, fp
1cd08     F8 FF BE FD | 	call	#_convertstring
1cd0c     FD 28 02 F6 | 	mov	local02, result1
1cd10     0C 4E 05 F1 | 	add	fp, #12
1cd14     A7 12 02 FB | 	rdlong	arg01, fp
1cd18     0C 4E 85 F1 | 	sub	fp, #12
1cd1c     E4 FF BE FD | 	call	#_convertstring
1cd20     FD 14 02 F6 | 	mov	arg02, result1
1cd24     14 13 02 F6 | 	mov	arg01, local02
1cd28     70 81 B0 FD | 	call	#__system___string_cmp
1cd2c     00 FA 55 F2 | 	cmps	result1, #0 wc
1cd30     00 26 26 36 |  if_ae	not	local01, #0
1cd34     A7 26 62 FC | 	wrlong	local01, fp
1cd38     04 00 90 FD | 	jmp	#LR__2333
1cd3c                 | LR__2332
1cd3c     A7 00 68 FC | 	wrlong	#0, fp
1cd40                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd40                 | LR__2333
1cd40     08 4E 05 F1 | 	add	fp, #8
1cd44     A7 38 68 FC | 	wrlong	#28, fp
1cd48     08 4E 85 F1 | 	sub	fp, #8
1cd4c                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd4c     A7 26 0A FB | 	rdlong	local01, fp wz
1cd50     A7 02 68 5C |  if_ne	wrlong	#1, fp
1cd54     A7 12 02 F6 | 	mov	arg01, fp
1cd58     C8 FE BE FD | 	call	#_push
1cd5c     A7 F0 03 F6 | 	mov	ptra, fp
1cd60     B2 00 A0 FD | 	call	#popregs_
1cd64                 | _do_ge_ret
1cd64     2D 00 64 FD | 	ret
1cd68                 | 
1cd68                 | ' 
1cd68                 | ' '--------------------------------- greater than (>)
1cd68                 | ' 
1cd68                 | ' sub do_gt
1cd68                 | _do_gt
1cd68     05 4A 05 F6 | 	mov	COUNT_, #5
1cd6c     A8 00 A0 FD | 	call	#pushregs_
1cd70     18 F0 07 F1 | 	add	ptra, #24
1cd74     14 FE BE FD | 	call	#_pop
1cd78     FD 26 02 F6 | 	mov	local01, result1
1cd7c     FE 28 02 F6 | 	mov	local02, result2
1cd80     FF 2A 02 F6 | 	mov	local03, result3
1cd84     0C 4E 05 F1 | 	add	fp, #12
1cd88     A7 26 62 FC | 	wrlong	local01, fp
1cd8c     04 4E 05 F1 | 	add	fp, #4
1cd90     A7 28 62 FC | 	wrlong	local02, fp
1cd94     04 4E 05 F1 | 	add	fp, #4
1cd98     A7 2A 62 FC | 	wrlong	local03, fp
1cd9c     14 4E 85 F1 | 	sub	fp, #20
1cda0     E8 FD BE FD | 	call	#_pop
1cda4     FF 2A 02 F6 | 	mov	local03, result3
1cda8     A7 FA 61 FC | 	wrlong	result1, fp
1cdac     04 4E 05 F1 | 	add	fp, #4
1cdb0     A7 FC 61 FC | 	wrlong	result2, fp
1cdb4     04 4E 05 F1 | 	add	fp, #4
1cdb8     A7 2A 62 FC | 	wrlong	local03, fp
1cdbc                 | ' 
1cdbc                 | ' t2=pop()
1cdbc                 | ' t1=pop()
1cdbc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1cdbc     08 4E 85 F1 | 	sub	fp, #8
1cdc0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1cdc4     14 4E 05 A1 |  if_e	add	fp, #20
1cdc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cdcc     14 4E 85 A1 |  if_e	sub	fp, #20
1cdd0     16 2B 02 A6 |  if_e	mov	local03, local04
1cdd4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cdd8     28 00 90 5D |  if_ne	jmp	#LR__2340
1cddc     00 26 06 F6 | 	mov	local01, #0
1cde0     A7 12 02 FB | 	rdlong	arg01, fp
1cde4     0C 4E 05 F1 | 	add	fp, #12
1cde8     A7 14 02 FB | 	rdlong	arg02, fp
1cdec     0C 4E 85 F1 | 	sub	fp, #12
1cdf0     A8 80 B0 FD | 	call	#__system___string_cmp
1cdf4     01 FA 55 F2 | 	cmps	result1, #1 wc
1cdf8     00 26 26 36 |  if_ae	not	local01, #0
1cdfc     A7 26 62 FC | 	wrlong	local01, fp
1ce00     20 04 90 FD | 	jmp	#LR__2353
1ce04                 | LR__2340
1ce04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ce04     08 4E 05 F1 | 	add	fp, #8
1ce08     A7 26 02 FB | 	rdlong	local01, fp
1ce0c     08 4E 85 F1 | 	sub	fp, #8
1ce10     1E 26 0E F2 | 	cmp	local01, #30 wz
1ce14     14 4E 05 A1 |  if_e	add	fp, #20
1ce18     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce1c     14 4E 85 A1 |  if_e	sub	fp, #20
1ce20     16 2B 02 A6 |  if_e	mov	local03, local04
1ce24     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ce28     2C 00 90 5D |  if_ne	jmp	#LR__2341
1ce2c     00 26 06 F6 | 	mov	local01, #0
1ce30     A7 12 02 FB | 	rdlong	arg01, fp
1ce34     0C 4E 05 F1 | 	add	fp, #12
1ce38     A7 14 02 FB | 	rdlong	arg02, fp
1ce3c     0C 4E 85 F1 | 	sub	fp, #12
1ce40     01 16 66 F6 | 	neg	arg03, #1
1ce44     D8 B2 B0 FD | 	call	#__system___float_cmp
1ce48     01 FA 55 F2 | 	cmps	result1, #1 wc
1ce4c     00 26 26 36 |  if_ae	not	local01, #0
1ce50     A7 26 62 FC | 	wrlong	local01, fp
1ce54     CC 03 90 FD | 	jmp	#LR__2353
1ce58                 | LR__2341
1ce58                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1ce58     08 4E 05 F1 | 	add	fp, #8
1ce5c     A7 26 02 FB | 	rdlong	local01, fp
1ce60     08 4E 85 F1 | 	sub	fp, #8
1ce64     1E 26 0E F2 | 	cmp	local01, #30 wz
1ce68     14 4E 05 A1 |  if_e	add	fp, #20
1ce6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce70     14 4E 85 A1 |  if_e	sub	fp, #20
1ce74     16 2B 02 A6 |  if_e	mov	local03, local04
1ce78     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ce7c     48 00 90 5D |  if_ne	jmp	#LR__2342
1ce80     00 26 06 F6 | 	mov	local01, #0
1ce84     A7 28 02 FB | 	rdlong	local02, fp
1ce88     0C 4E 05 F1 | 	add	fp, #12
1ce8c     A7 12 02 FB | 	rdlong	arg01, fp
1ce90     0C 4E 85 F1 | 	sub	fp, #12
1ce94     09 13 52 F6 | 	abs	arg01, arg01 wc
1ce98     1F 2E C6 C9 |  if_b	decod	local05, #31
1ce9c     00 2E 06 36 |  if_ae	mov	local05, #0
1cea0     44 AA B0 FD | 	call	#__system___float_fromuns
1cea4     17 FB 61 F5 | 	xor	result1, local05
1cea8     FD 14 02 F6 | 	mov	arg02, result1
1ceac     14 13 02 F6 | 	mov	arg01, local02
1ceb0     01 16 66 F6 | 	neg	arg03, #1
1ceb4     68 B2 B0 FD | 	call	#__system___float_cmp
1ceb8     01 FA 55 F2 | 	cmps	result1, #1 wc
1cebc     00 26 26 36 |  if_ae	not	local01, #0
1cec0     A7 26 62 FC | 	wrlong	local01, fp
1cec4     5C 03 90 FD | 	jmp	#LR__2353
1cec8                 | LR__2342
1cec8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1cec8     08 4E 05 F1 | 	add	fp, #8
1cecc     A7 26 02 FB | 	rdlong	local01, fp
1ced0     08 4E 85 F1 | 	sub	fp, #8
1ced4     1E 26 0E F2 | 	cmp	local01, #30 wz
1ced8     14 4E 05 A1 |  if_e	add	fp, #20
1cedc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cee0     14 4E 85 A1 |  if_e	sub	fp, #20
1cee4     16 2B 02 A6 |  if_e	mov	local03, local04
1cee8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ceec     38 00 90 5D |  if_ne	jmp	#LR__2343
1cef0     00 26 06 F6 | 	mov	local01, #0
1cef4     A7 28 02 FB | 	rdlong	local02, fp
1cef8     0C 4E 05 F1 | 	add	fp, #12
1cefc     A7 12 02 FB | 	rdlong	arg01, fp
1cf00     0C 4E 85 F1 | 	sub	fp, #12
1cf04     E0 A9 B0 FD | 	call	#__system___float_fromuns
1cf08     FD 14 02 F6 | 	mov	arg02, result1
1cf0c     14 13 02 F6 | 	mov	arg01, local02
1cf10     01 16 66 F6 | 	neg	arg03, #1
1cf14     08 B2 B0 FD | 	call	#__system___float_cmp
1cf18     01 FA 55 F2 | 	cmps	result1, #1 wc
1cf1c     00 26 26 36 |  if_ae	not	local01, #0
1cf20     A7 26 62 FC | 	wrlong	local01, fp
1cf24     FC 02 90 FD | 	jmp	#LR__2353
1cf28                 | LR__2343
1cf28                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1cf28     08 4E 05 F1 | 	add	fp, #8
1cf2c     A7 26 02 FB | 	rdlong	local01, fp
1cf30     08 4E 85 F1 | 	sub	fp, #8
1cf34     1C 26 0E F2 | 	cmp	local01, #28 wz
1cf38     14 4E 05 A1 |  if_e	add	fp, #20
1cf3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cf40     14 4E 85 A1 |  if_e	sub	fp, #20
1cf44     16 2B 02 A6 |  if_e	mov	local03, local04
1cf48     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cf4c     44 00 90 5D |  if_ne	jmp	#LR__2344
1cf50     00 26 06 F6 | 	mov	local01, #0
1cf54     A7 12 02 FB | 	rdlong	arg01, fp
1cf58     09 13 52 F6 | 	abs	arg01, arg01 wc
1cf5c     1F 2E C6 C9 |  if_b	decod	local05, #31
1cf60     00 2E 06 36 |  if_ae	mov	local05, #0
1cf64     80 A9 B0 FD | 	call	#__system___float_fromuns
1cf68     17 FB 61 F5 | 	xor	result1, local05
1cf6c     FD 12 02 F6 | 	mov	arg01, result1
1cf70     0C 4E 05 F1 | 	add	fp, #12
1cf74     A7 14 02 FB | 	rdlong	arg02, fp
1cf78     0C 4E 85 F1 | 	sub	fp, #12
1cf7c     01 16 66 F6 | 	neg	arg03, #1
1cf80     9C B1 B0 FD | 	call	#__system___float_cmp
1cf84     01 FA 55 F2 | 	cmps	result1, #1 wc
1cf88     00 26 26 36 |  if_ae	not	local01, #0
1cf8c     A7 26 62 FC | 	wrlong	local01, fp
1cf90     90 02 90 FD | 	jmp	#LR__2353
1cf94                 | LR__2344
1cf94                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1cf94     08 4E 05 F1 | 	add	fp, #8
1cf98     A7 26 02 FB | 	rdlong	local01, fp
1cf9c     08 4E 85 F1 | 	sub	fp, #8
1cfa0     1C 26 0E F2 | 	cmp	local01, #28 wz
1cfa4     14 4E 05 A1 |  if_e	add	fp, #20
1cfa8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cfac     14 4E 85 A1 |  if_e	sub	fp, #20
1cfb0     16 2B 02 A6 |  if_e	mov	local03, local04
1cfb4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cfb8     24 00 90 5D |  if_ne	jmp	#LR__2345
1cfbc     00 26 06 F6 | 	mov	local01, #0
1cfc0     A7 28 02 FB | 	rdlong	local02, fp
1cfc4     0C 4E 05 F1 | 	add	fp, #12
1cfc8     A7 2A 02 FB | 	rdlong	local03, fp
1cfcc     0C 4E 85 F1 | 	sub	fp, #12
1cfd0     15 29 5A F2 | 	cmps	local02, local03 wcz
1cfd4     01 26 66 16 |  if_a	neg	local01, #1
1cfd8     A7 26 62 FC | 	wrlong	local01, fp
1cfdc     44 02 90 FD | 	jmp	#LR__2353
1cfe0                 | LR__2345
1cfe0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1cfe0     08 4E 05 F1 | 	add	fp, #8
1cfe4     A7 26 02 FB | 	rdlong	local01, fp
1cfe8     08 4E 85 F1 | 	sub	fp, #8
1cfec     1C 26 0E F2 | 	cmp	local01, #28 wz
1cff0     14 4E 05 A1 |  if_e	add	fp, #20
1cff4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cff8     14 4E 85 A1 |  if_e	sub	fp, #20
1cffc     16 2B 02 A6 |  if_e	mov	local03, local04
1d000     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d004     24 00 90 5D |  if_ne	jmp	#LR__2346
1d008     00 26 06 F6 | 	mov	local01, #0
1d00c     A7 28 02 FB | 	rdlong	local02, fp
1d010     0C 4E 05 F1 | 	add	fp, #12
1d014     A7 2A 02 FB | 	rdlong	local03, fp
1d018     0C 4E 85 F1 | 	sub	fp, #12
1d01c     15 29 5A F2 | 	cmps	local02, local03 wcz
1d020     01 26 66 16 |  if_a	neg	local01, #1
1d024     A7 26 62 FC | 	wrlong	local01, fp
1d028     F8 01 90 FD | 	jmp	#LR__2353
1d02c                 | LR__2346
1d02c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1d02c     08 4E 05 F1 | 	add	fp, #8
1d030     A7 26 02 FB | 	rdlong	local01, fp
1d034     08 4E 85 F1 | 	sub	fp, #8
1d038     1D 26 0E F2 | 	cmp	local01, #29 wz
1d03c     14 4E 05 A1 |  if_e	add	fp, #20
1d040     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d044     14 4E 85 A1 |  if_e	sub	fp, #20
1d048     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d04c     34 00 90 5D |  if_ne	jmp	#LR__2347
1d050     00 26 06 F6 | 	mov	local01, #0
1d054     A7 12 02 FB | 	rdlong	arg01, fp
1d058     8C A8 B0 FD | 	call	#__system___float_fromuns
1d05c     FD 12 02 F6 | 	mov	arg01, result1
1d060     0C 4E 05 F1 | 	add	fp, #12
1d064     A7 14 02 FB | 	rdlong	arg02, fp
1d068     0C 4E 85 F1 | 	sub	fp, #12
1d06c     01 16 66 F6 | 	neg	arg03, #1
1d070     AC B0 B0 FD | 	call	#__system___float_cmp
1d074     01 FA 55 F2 | 	cmps	result1, #1 wc
1d078     00 26 26 36 |  if_ae	not	local01, #0
1d07c     A7 26 62 FC | 	wrlong	local01, fp
1d080     A0 01 90 FD | 	jmp	#LR__2353
1d084                 | LR__2347
1d084                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1d084     08 4E 05 F1 | 	add	fp, #8
1d088     A7 26 02 FB | 	rdlong	local01, fp
1d08c     08 4E 85 F1 | 	sub	fp, #8
1d090     1D 26 0E F2 | 	cmp	local01, #29 wz
1d094     14 4E 05 A1 |  if_e	add	fp, #20
1d098     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d09c     14 4E 85 A1 |  if_e	sub	fp, #20
1d0a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d0a4     24 00 90 5D |  if_ne	jmp	#LR__2348
1d0a8     00 26 06 F6 | 	mov	local01, #0
1d0ac     A7 28 02 FB | 	rdlong	local02, fp
1d0b0     0C 4E 05 F1 | 	add	fp, #12
1d0b4     A7 2A 02 FB | 	rdlong	local03, fp
1d0b8     0C 4E 85 F1 | 	sub	fp, #12
1d0bc     15 29 5A F2 | 	cmps	local02, local03 wcz
1d0c0     01 26 66 16 |  if_a	neg	local01, #1
1d0c4     A7 26 62 FC | 	wrlong	local01, fp
1d0c8     58 01 90 FD | 	jmp	#LR__2353
1d0cc                 | LR__2348
1d0cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1d0cc     08 4E 05 F1 | 	add	fp, #8
1d0d0     A7 26 02 FB | 	rdlong	local01, fp
1d0d4     08 4E 85 F1 | 	sub	fp, #8
1d0d8     1D 26 0E F2 | 	cmp	local01, #29 wz
1d0dc     14 4E 05 A1 |  if_e	add	fp, #20
1d0e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d0e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d0e8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d0ec     24 00 90 5D |  if_ne	jmp	#LR__2349
1d0f0     00 26 06 F6 | 	mov	local01, #0
1d0f4     A7 28 02 FB | 	rdlong	local02, fp
1d0f8     0C 4E 05 F1 | 	add	fp, #12
1d0fc     A7 2A 02 FB | 	rdlong	local03, fp
1d100     0C 4E 85 F1 | 	sub	fp, #12
1d104     15 29 1A F2 | 	cmp	local02, local03 wcz
1d108     01 26 66 16 |  if_a	neg	local01, #1
1d10c     A7 26 62 FC | 	wrlong	local01, fp
1d110     10 01 90 FD | 	jmp	#LR__2353
1d114                 | LR__2349
1d114                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d114     08 4E 05 F1 | 	add	fp, #8
1d118     A7 26 02 FB | 	rdlong	local01, fp
1d11c     08 4E 85 F1 | 	sub	fp, #8
1d120     2B 26 0E F2 | 	cmp	local01, #43 wz
1d124     14 4E 05 A1 |  if_e	add	fp, #20
1d128     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d12c     14 4E 85 A1 |  if_e	sub	fp, #20
1d130     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d134     30 00 90 5D |  if_ne	jmp	#LR__2350
1d138     00 26 06 F6 | 	mov	local01, #0
1d13c     A7 12 02 FB | 	rdlong	arg01, fp
1d140     C0 FB BE FD | 	call	#_convertstring
1d144     FD 12 02 F6 | 	mov	arg01, result1
1d148     0C 4E 05 F1 | 	add	fp, #12
1d14c     A7 14 02 FB | 	rdlong	arg02, fp
1d150     0C 4E 85 F1 | 	sub	fp, #12
1d154     44 7D B0 FD | 	call	#__system___string_cmp
1d158     01 FA 55 F2 | 	cmps	result1, #1 wc
1d15c     00 26 26 36 |  if_ae	not	local01, #0
1d160     A7 26 62 FC | 	wrlong	local01, fp
1d164     BC 00 90 FD | 	jmp	#LR__2353
1d168                 | LR__2350
1d168                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d168     08 4E 05 F1 | 	add	fp, #8
1d16c     A7 26 02 FB | 	rdlong	local01, fp
1d170     08 4E 85 F1 | 	sub	fp, #8
1d174     1F 26 0E F2 | 	cmp	local01, #31 wz
1d178     14 4E 05 A1 |  if_e	add	fp, #20
1d17c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d180     14 4E 85 A1 |  if_e	sub	fp, #20
1d184     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d188     34 00 90 5D |  if_ne	jmp	#LR__2351
1d18c     00 26 06 F6 | 	mov	local01, #0
1d190     A7 28 02 FB | 	rdlong	local02, fp
1d194     0C 4E 05 F1 | 	add	fp, #12
1d198     A7 12 02 FB | 	rdlong	arg01, fp
1d19c     0C 4E 85 F1 | 	sub	fp, #12
1d1a0     60 FB BE FD | 	call	#_convertstring
1d1a4     FD 14 02 F6 | 	mov	arg02, result1
1d1a8     14 13 02 F6 | 	mov	arg01, local02
1d1ac     EC 7C B0 FD | 	call	#__system___string_cmp
1d1b0     01 FA 55 F2 | 	cmps	result1, #1 wc
1d1b4     00 26 26 36 |  if_ae	not	local01, #0
1d1b8     A7 26 62 FC | 	wrlong	local01, fp
1d1bc     64 00 90 FD | 	jmp	#LR__2353
1d1c0                 | LR__2351
1d1c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d1c0     08 4E 05 F1 | 	add	fp, #8
1d1c4     A7 26 02 FB | 	rdlong	local01, fp
1d1c8     08 4E 85 F1 | 	sub	fp, #8
1d1cc     2B 26 0E F2 | 	cmp	local01, #43 wz
1d1d0     14 4E 05 A1 |  if_e	add	fp, #20
1d1d4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d1d8     14 4E 85 A1 |  if_e	sub	fp, #20
1d1dc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d1e0     3C 00 90 5D |  if_ne	jmp	#LR__2352
1d1e4     00 26 06 F6 | 	mov	local01, #0
1d1e8     A7 12 02 FB | 	rdlong	arg01, fp
1d1ec     14 FB BE FD | 	call	#_convertstring
1d1f0     FD 28 02 F6 | 	mov	local02, result1
1d1f4     0C 4E 05 F1 | 	add	fp, #12
1d1f8     A7 12 02 FB | 	rdlong	arg01, fp
1d1fc     0C 4E 85 F1 | 	sub	fp, #12
1d200     00 FB BE FD | 	call	#_convertstring
1d204     FD 14 02 F6 | 	mov	arg02, result1
1d208     14 13 02 F6 | 	mov	arg01, local02
1d20c     8C 7C B0 FD | 	call	#__system___string_cmp
1d210     01 FA 55 F2 | 	cmps	result1, #1 wc
1d214     00 26 26 36 |  if_ae	not	local01, #0
1d218     A7 26 62 FC | 	wrlong	local01, fp
1d21c     04 00 90 FD | 	jmp	#LR__2353
1d220                 | LR__2352
1d220     A7 00 68 FC | 	wrlong	#0, fp
1d224                 | LR__2353
1d224     08 4E 05 F1 | 	add	fp, #8
1d228     A7 38 68 FC | 	wrlong	#28, fp
1d22c     08 4E 85 F1 | 	sub	fp, #8
1d230                 | ' t1.result.uresult=0
1d230                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d230     A7 26 0A FB | 	rdlong	local01, fp wz
1d234     A7 02 68 5C |  if_ne	wrlong	#1, fp
1d238     A7 12 02 F6 | 	mov	arg01, fp
1d23c     E4 F9 BE FD | 	call	#_push
1d240     A7 F0 03 F6 | 	mov	ptra, fp
1d244     B2 00 A0 FD | 	call	#popregs_
1d248                 | _do_gt_ret
1d248     2D 00 64 FD | 	ret
1d24c                 | 
1d24c                 | ' 
1d24c                 | ' '--------------------------------- less or equal (<=)
1d24c                 | ' 
1d24c                 | ' sub do_le
1d24c                 | _do_le
1d24c     05 4A 05 F6 | 	mov	COUNT_, #5
1d250     A8 00 A0 FD | 	call	#pushregs_
1d254     18 F0 07 F1 | 	add	ptra, #24
1d258     30 F9 BE FD | 	call	#_pop
1d25c     FD 26 02 F6 | 	mov	local01, result1
1d260     FE 28 02 F6 | 	mov	local02, result2
1d264     FF 2A 02 F6 | 	mov	local03, result3
1d268     0C 4E 05 F1 | 	add	fp, #12
1d26c     A7 26 62 FC | 	wrlong	local01, fp
1d270     04 4E 05 F1 | 	add	fp, #4
1d274     A7 28 62 FC | 	wrlong	local02, fp
1d278     04 4E 05 F1 | 	add	fp, #4
1d27c     A7 2A 62 FC | 	wrlong	local03, fp
1d280     14 4E 85 F1 | 	sub	fp, #20
1d284     04 F9 BE FD | 	call	#_pop
1d288     FF 2A 02 F6 | 	mov	local03, result3
1d28c     A7 FA 61 FC | 	wrlong	result1, fp
1d290     04 4E 05 F1 | 	add	fp, #4
1d294     A7 FC 61 FC | 	wrlong	result2, fp
1d298     04 4E 05 F1 | 	add	fp, #4
1d29c     A7 2A 62 FC | 	wrlong	local03, fp
1d2a0                 | ' 
1d2a0                 | ' t2=pop()
1d2a0                 | ' t1=pop()
1d2a0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d2a0     08 4E 85 F1 | 	sub	fp, #8
1d2a4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d2a8     14 4E 05 A1 |  if_e	add	fp, #20
1d2ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d2b0     14 4E 85 A1 |  if_e	sub	fp, #20
1d2b4     16 2B 02 A6 |  if_e	mov	local03, local04
1d2b8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d2bc     28 00 90 5D |  if_ne	jmp	#LR__2360
1d2c0     00 26 06 F6 | 	mov	local01, #0
1d2c4     A7 12 02 FB | 	rdlong	arg01, fp
1d2c8     0C 4E 05 F1 | 	add	fp, #12
1d2cc     A7 14 02 FB | 	rdlong	arg02, fp
1d2d0     0C 4E 85 F1 | 	sub	fp, #12
1d2d4     C4 7B B0 FD | 	call	#__system___string_cmp
1d2d8     01 FA 55 F2 | 	cmps	result1, #1 wc
1d2dc     00 26 26 C6 |  if_b	not	local01, #0
1d2e0     A7 26 62 FC | 	wrlong	local01, fp
1d2e4     20 04 90 FD | 	jmp	#LR__2373
1d2e8                 | LR__2360
1d2e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d2e8     08 4E 05 F1 | 	add	fp, #8
1d2ec     A7 26 02 FB | 	rdlong	local01, fp
1d2f0     08 4E 85 F1 | 	sub	fp, #8
1d2f4     1E 26 0E F2 | 	cmp	local01, #30 wz
1d2f8     14 4E 05 A1 |  if_e	add	fp, #20
1d2fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d300     14 4E 85 A1 |  if_e	sub	fp, #20
1d304     16 2B 02 A6 |  if_e	mov	local03, local04
1d308     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d30c     2C 00 90 5D |  if_ne	jmp	#LR__2361
1d310     00 26 06 F6 | 	mov	local01, #0
1d314     A7 12 02 FB | 	rdlong	arg01, fp
1d318     0C 4E 05 F1 | 	add	fp, #12
1d31c     A7 14 02 FB | 	rdlong	arg02, fp
1d320     0C 4E 85 F1 | 	sub	fp, #12
1d324     01 16 06 F6 | 	mov	arg03, #1
1d328     F4 AD B0 FD | 	call	#__system___float_cmp
1d32c     01 FA 55 F2 | 	cmps	result1, #1 wc
1d330     00 26 26 C6 |  if_b	not	local01, #0
1d334     A7 26 62 FC | 	wrlong	local01, fp
1d338     CC 03 90 FD | 	jmp	#LR__2373
1d33c                 | LR__2361
1d33c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d33c     08 4E 05 F1 | 	add	fp, #8
1d340     A7 26 02 FB | 	rdlong	local01, fp
1d344     08 4E 85 F1 | 	sub	fp, #8
1d348     1E 26 0E F2 | 	cmp	local01, #30 wz
1d34c     14 4E 05 A1 |  if_e	add	fp, #20
1d350     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d354     14 4E 85 A1 |  if_e	sub	fp, #20
1d358     16 2B 02 A6 |  if_e	mov	local03, local04
1d35c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d360     48 00 90 5D |  if_ne	jmp	#LR__2362
1d364     00 26 06 F6 | 	mov	local01, #0
1d368     A7 28 02 FB | 	rdlong	local02, fp
1d36c     0C 4E 05 F1 | 	add	fp, #12
1d370     A7 12 02 FB | 	rdlong	arg01, fp
1d374     0C 4E 85 F1 | 	sub	fp, #12
1d378     09 13 52 F6 | 	abs	arg01, arg01 wc
1d37c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d380     00 2E 06 36 |  if_ae	mov	local05, #0
1d384     60 A5 B0 FD | 	call	#__system___float_fromuns
1d388     17 FB 61 F5 | 	xor	result1, local05
1d38c     FD 14 02 F6 | 	mov	arg02, result1
1d390     14 13 02 F6 | 	mov	arg01, local02
1d394     01 16 06 F6 | 	mov	arg03, #1
1d398     84 AD B0 FD | 	call	#__system___float_cmp
1d39c     01 FA 55 F2 | 	cmps	result1, #1 wc
1d3a0     00 26 26 C6 |  if_b	not	local01, #0
1d3a4     A7 26 62 FC | 	wrlong	local01, fp
1d3a8     5C 03 90 FD | 	jmp	#LR__2373
1d3ac                 | LR__2362
1d3ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d3ac     08 4E 05 F1 | 	add	fp, #8
1d3b0     A7 26 02 FB | 	rdlong	local01, fp
1d3b4     08 4E 85 F1 | 	sub	fp, #8
1d3b8     1E 26 0E F2 | 	cmp	local01, #30 wz
1d3bc     14 4E 05 A1 |  if_e	add	fp, #20
1d3c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3c4     14 4E 85 A1 |  if_e	sub	fp, #20
1d3c8     16 2B 02 A6 |  if_e	mov	local03, local04
1d3cc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d3d0     38 00 90 5D |  if_ne	jmp	#LR__2363
1d3d4     00 26 06 F6 | 	mov	local01, #0
1d3d8     A7 28 02 FB | 	rdlong	local02, fp
1d3dc     0C 4E 05 F1 | 	add	fp, #12
1d3e0     A7 12 02 FB | 	rdlong	arg01, fp
1d3e4     0C 4E 85 F1 | 	sub	fp, #12
1d3e8     FC A4 B0 FD | 	call	#__system___float_fromuns
1d3ec     FD 14 02 F6 | 	mov	arg02, result1
1d3f0     14 13 02 F6 | 	mov	arg01, local02
1d3f4     01 16 06 F6 | 	mov	arg03, #1
1d3f8     24 AD B0 FD | 	call	#__system___float_cmp
1d3fc     01 FA 55 F2 | 	cmps	result1, #1 wc
1d400     00 26 26 C6 |  if_b	not	local01, #0
1d404     A7 26 62 FC | 	wrlong	local01, fp
1d408     FC 02 90 FD | 	jmp	#LR__2373
1d40c                 | LR__2363
1d40c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d40c     08 4E 05 F1 | 	add	fp, #8
1d410     A7 26 02 FB | 	rdlong	local01, fp
1d414     08 4E 85 F1 | 	sub	fp, #8
1d418     1C 26 0E F2 | 	cmp	local01, #28 wz
1d41c     14 4E 05 A1 |  if_e	add	fp, #20
1d420     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d424     14 4E 85 A1 |  if_e	sub	fp, #20
1d428     16 2B 02 A6 |  if_e	mov	local03, local04
1d42c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d430     44 00 90 5D |  if_ne	jmp	#LR__2364
1d434     00 26 06 F6 | 	mov	local01, #0
1d438     A7 12 02 FB | 	rdlong	arg01, fp
1d43c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d440     1F 2E C6 C9 |  if_b	decod	local05, #31
1d444     00 2E 06 36 |  if_ae	mov	local05, #0
1d448     9C A4 B0 FD | 	call	#__system___float_fromuns
1d44c     17 FB 61 F5 | 	xor	result1, local05
1d450     FD 12 02 F6 | 	mov	arg01, result1
1d454     0C 4E 05 F1 | 	add	fp, #12
1d458     A7 14 02 FB | 	rdlong	arg02, fp
1d45c     0C 4E 85 F1 | 	sub	fp, #12
1d460     01 16 06 F6 | 	mov	arg03, #1
1d464     B8 AC B0 FD | 	call	#__system___float_cmp
1d468     01 FA 55 F2 | 	cmps	result1, #1 wc
1d46c     00 26 26 C6 |  if_b	not	local01, #0
1d470     A7 26 62 FC | 	wrlong	local01, fp
1d474     90 02 90 FD | 	jmp	#LR__2373
1d478                 | LR__2364
1d478                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d478     08 4E 05 F1 | 	add	fp, #8
1d47c     A7 26 02 FB | 	rdlong	local01, fp
1d480     08 4E 85 F1 | 	sub	fp, #8
1d484     1C 26 0E F2 | 	cmp	local01, #28 wz
1d488     14 4E 05 A1 |  if_e	add	fp, #20
1d48c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d490     14 4E 85 A1 |  if_e	sub	fp, #20
1d494     16 2B 02 A6 |  if_e	mov	local03, local04
1d498     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d49c     24 00 90 5D |  if_ne	jmp	#LR__2365
1d4a0     00 26 06 F6 | 	mov	local01, #0
1d4a4     A7 28 02 FB | 	rdlong	local02, fp
1d4a8     0C 4E 05 F1 | 	add	fp, #12
1d4ac     A7 2A 02 FB | 	rdlong	local03, fp
1d4b0     0C 4E 85 F1 | 	sub	fp, #12
1d4b4     15 29 5A F2 | 	cmps	local02, local03 wcz
1d4b8     01 26 66 E6 |  if_be	neg	local01, #1
1d4bc     A7 26 62 FC | 	wrlong	local01, fp
1d4c0     44 02 90 FD | 	jmp	#LR__2373
1d4c4                 | LR__2365
1d4c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d4c4     08 4E 05 F1 | 	add	fp, #8
1d4c8     A7 26 02 FB | 	rdlong	local01, fp
1d4cc     08 4E 85 F1 | 	sub	fp, #8
1d4d0     1C 26 0E F2 | 	cmp	local01, #28 wz
1d4d4     14 4E 05 A1 |  if_e	add	fp, #20
1d4d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d4dc     14 4E 85 A1 |  if_e	sub	fp, #20
1d4e0     16 2B 02 A6 |  if_e	mov	local03, local04
1d4e4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d4e8     24 00 90 5D |  if_ne	jmp	#LR__2366
1d4ec     00 26 06 F6 | 	mov	local01, #0
1d4f0     A7 28 02 FB | 	rdlong	local02, fp
1d4f4     0C 4E 05 F1 | 	add	fp, #12
1d4f8     A7 2A 02 FB | 	rdlong	local03, fp
1d4fc     0C 4E 85 F1 | 	sub	fp, #12
1d500     15 29 5A F2 | 	cmps	local02, local03 wcz
1d504     01 26 66 E6 |  if_be	neg	local01, #1
1d508     A7 26 62 FC | 	wrlong	local01, fp
1d50c     F8 01 90 FD | 	jmp	#LR__2373
1d510                 | LR__2366
1d510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d510     08 4E 05 F1 | 	add	fp, #8
1d514     A7 26 02 FB | 	rdlong	local01, fp
1d518     08 4E 85 F1 | 	sub	fp, #8
1d51c     1D 26 0E F2 | 	cmp	local01, #29 wz
1d520     14 4E 05 A1 |  if_e	add	fp, #20
1d524     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d528     14 4E 85 A1 |  if_e	sub	fp, #20
1d52c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d530     34 00 90 5D |  if_ne	jmp	#LR__2367
1d534     00 26 06 F6 | 	mov	local01, #0
1d538     A7 12 02 FB | 	rdlong	arg01, fp
1d53c     A8 A3 B0 FD | 	call	#__system___float_fromuns
1d540     FD 12 02 F6 | 	mov	arg01, result1
1d544     0C 4E 05 F1 | 	add	fp, #12
1d548     A7 14 02 FB | 	rdlong	arg02, fp
1d54c     0C 4E 85 F1 | 	sub	fp, #12
1d550     01 16 06 F6 | 	mov	arg03, #1
1d554     C8 AB B0 FD | 	call	#__system___float_cmp
1d558     01 FA 55 F2 | 	cmps	result1, #1 wc
1d55c     00 26 26 C6 |  if_b	not	local01, #0
1d560     A7 26 62 FC | 	wrlong	local01, fp
1d564     A0 01 90 FD | 	jmp	#LR__2373
1d568                 | LR__2367
1d568                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d568     08 4E 05 F1 | 	add	fp, #8
1d56c     A7 26 02 FB | 	rdlong	local01, fp
1d570     08 4E 85 F1 | 	sub	fp, #8
1d574     1D 26 0E F2 | 	cmp	local01, #29 wz
1d578     14 4E 05 A1 |  if_e	add	fp, #20
1d57c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d580     14 4E 85 A1 |  if_e	sub	fp, #20
1d584     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d588     24 00 90 5D |  if_ne	jmp	#LR__2368
1d58c     00 26 06 F6 | 	mov	local01, #0
1d590     A7 28 02 FB | 	rdlong	local02, fp
1d594     0C 4E 05 F1 | 	add	fp, #12
1d598     A7 2A 02 FB | 	rdlong	local03, fp
1d59c     0C 4E 85 F1 | 	sub	fp, #12
1d5a0     15 29 5A F2 | 	cmps	local02, local03 wcz
1d5a4     01 26 66 E6 |  if_be	neg	local01, #1
1d5a8     A7 26 62 FC | 	wrlong	local01, fp
1d5ac     58 01 90 FD | 	jmp	#LR__2373
1d5b0                 | LR__2368
1d5b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d5b0     08 4E 05 F1 | 	add	fp, #8
1d5b4     A7 26 02 FB | 	rdlong	local01, fp
1d5b8     08 4E 85 F1 | 	sub	fp, #8
1d5bc     1D 26 0E F2 | 	cmp	local01, #29 wz
1d5c0     14 4E 05 A1 |  if_e	add	fp, #20
1d5c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d5c8     14 4E 85 A1 |  if_e	sub	fp, #20
1d5cc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d5d0     24 00 90 5D |  if_ne	jmp	#LR__2369
1d5d4     00 26 06 F6 | 	mov	local01, #0
1d5d8     A7 28 02 FB | 	rdlong	local02, fp
1d5dc     0C 4E 05 F1 | 	add	fp, #12
1d5e0     A7 2A 02 FB | 	rdlong	local03, fp
1d5e4     0C 4E 85 F1 | 	sub	fp, #12
1d5e8     15 29 1A F2 | 	cmp	local02, local03 wcz
1d5ec     01 26 66 E6 |  if_be	neg	local01, #1
1d5f0     A7 26 62 FC | 	wrlong	local01, fp
1d5f4     10 01 90 FD | 	jmp	#LR__2373
1d5f8                 | LR__2369
1d5f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d5f8     08 4E 05 F1 | 	add	fp, #8
1d5fc     A7 26 02 FB | 	rdlong	local01, fp
1d600     08 4E 85 F1 | 	sub	fp, #8
1d604     2B 26 0E F2 | 	cmp	local01, #43 wz
1d608     14 4E 05 A1 |  if_e	add	fp, #20
1d60c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d610     14 4E 85 A1 |  if_e	sub	fp, #20
1d614     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d618     30 00 90 5D |  if_ne	jmp	#LR__2370
1d61c     00 26 06 F6 | 	mov	local01, #0
1d620     A7 12 02 FB | 	rdlong	arg01, fp
1d624     DC F6 BE FD | 	call	#_convertstring
1d628     FD 12 02 F6 | 	mov	arg01, result1
1d62c     0C 4E 05 F1 | 	add	fp, #12
1d630     A7 14 02 FB | 	rdlong	arg02, fp
1d634     0C 4E 85 F1 | 	sub	fp, #12
1d638     60 78 B0 FD | 	call	#__system___string_cmp
1d63c     01 FA 55 F2 | 	cmps	result1, #1 wc
1d640     00 26 26 C6 |  if_b	not	local01, #0
1d644     A7 26 62 FC | 	wrlong	local01, fp
1d648     BC 00 90 FD | 	jmp	#LR__2373
1d64c                 | LR__2370
1d64c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d64c     08 4E 05 F1 | 	add	fp, #8
1d650     A7 26 02 FB | 	rdlong	local01, fp
1d654     08 4E 85 F1 | 	sub	fp, #8
1d658     1F 26 0E F2 | 	cmp	local01, #31 wz
1d65c     14 4E 05 A1 |  if_e	add	fp, #20
1d660     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d664     14 4E 85 A1 |  if_e	sub	fp, #20
1d668     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d66c     34 00 90 5D |  if_ne	jmp	#LR__2371
1d670     00 26 06 F6 | 	mov	local01, #0
1d674     A7 28 02 FB | 	rdlong	local02, fp
1d678     0C 4E 05 F1 | 	add	fp, #12
1d67c     A7 12 02 FB | 	rdlong	arg01, fp
1d680     0C 4E 85 F1 | 	sub	fp, #12
1d684     7C F6 BE FD | 	call	#_convertstring
1d688     FD 14 02 F6 | 	mov	arg02, result1
1d68c     14 13 02 F6 | 	mov	arg01, local02
1d690     08 78 B0 FD | 	call	#__system___string_cmp
1d694     01 FA 55 F2 | 	cmps	result1, #1 wc
1d698     00 26 26 C6 |  if_b	not	local01, #0
1d69c     A7 26 62 FC | 	wrlong	local01, fp
1d6a0     64 00 90 FD | 	jmp	#LR__2373
1d6a4                 | LR__2371
1d6a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d6a4     08 4E 05 F1 | 	add	fp, #8
1d6a8     A7 26 02 FB | 	rdlong	local01, fp
1d6ac     08 4E 85 F1 | 	sub	fp, #8
1d6b0     2B 26 0E F2 | 	cmp	local01, #43 wz
1d6b4     14 4E 05 A1 |  if_e	add	fp, #20
1d6b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d6bc     14 4E 85 A1 |  if_e	sub	fp, #20
1d6c0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d6c4     3C 00 90 5D |  if_ne	jmp	#LR__2372
1d6c8     00 26 06 F6 | 	mov	local01, #0
1d6cc     A7 12 02 FB | 	rdlong	arg01, fp
1d6d0     30 F6 BE FD | 	call	#_convertstring
1d6d4     FD 28 02 F6 | 	mov	local02, result1
1d6d8     0C 4E 05 F1 | 	add	fp, #12
1d6dc     A7 12 02 FB | 	rdlong	arg01, fp
1d6e0     0C 4E 85 F1 | 	sub	fp, #12
1d6e4     1C F6 BE FD | 	call	#_convertstring
1d6e8     FD 14 02 F6 | 	mov	arg02, result1
1d6ec     14 13 02 F6 | 	mov	arg01, local02
1d6f0     A8 77 B0 FD | 	call	#__system___string_cmp
1d6f4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d6f8     00 26 26 C6 |  if_b	not	local01, #0
1d6fc     A7 26 62 FC | 	wrlong	local01, fp
1d700     04 00 90 FD | 	jmp	#LR__2373
1d704                 | LR__2372
1d704     A7 00 68 FC | 	wrlong	#0, fp
1d708                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d708                 | LR__2373
1d708     08 4E 05 F1 | 	add	fp, #8
1d70c     A7 38 68 FC | 	wrlong	#28, fp
1d710     08 4E 85 F1 | 	sub	fp, #8
1d714     A7 12 02 F6 | 	mov	arg01, fp
1d718     08 F5 BE FD | 	call	#_push
1d71c     A7 F0 03 F6 | 	mov	ptra, fp
1d720     B2 00 A0 FD | 	call	#popregs_
1d724                 | _do_le_ret
1d724     2D 00 64 FD | 	ret
1d728                 | 
1d728                 | ' 
1d728                 | ' '--------------------------------- less than (<)
1d728                 | ' 
1d728                 | ' sub do_lt
1d728                 | _do_lt
1d728     05 4A 05 F6 | 	mov	COUNT_, #5
1d72c     A8 00 A0 FD | 	call	#pushregs_
1d730     18 F0 07 F1 | 	add	ptra, #24
1d734     54 F4 BE FD | 	call	#_pop
1d738     FD 26 02 F6 | 	mov	local01, result1
1d73c     FE 28 02 F6 | 	mov	local02, result2
1d740     FF 2A 02 F6 | 	mov	local03, result3
1d744     0C 4E 05 F1 | 	add	fp, #12
1d748     A7 26 62 FC | 	wrlong	local01, fp
1d74c     04 4E 05 F1 | 	add	fp, #4
1d750     A7 28 62 FC | 	wrlong	local02, fp
1d754     04 4E 05 F1 | 	add	fp, #4
1d758     A7 2A 62 FC | 	wrlong	local03, fp
1d75c     14 4E 85 F1 | 	sub	fp, #20
1d760     28 F4 BE FD | 	call	#_pop
1d764     FF 2A 02 F6 | 	mov	local03, result3
1d768     A7 FA 61 FC | 	wrlong	result1, fp
1d76c     04 4E 05 F1 | 	add	fp, #4
1d770     A7 FC 61 FC | 	wrlong	result2, fp
1d774     04 4E 05 F1 | 	add	fp, #4
1d778     A7 2A 62 FC | 	wrlong	local03, fp
1d77c                 | ' 
1d77c                 | ' t2=pop()
1d77c                 | ' t1=pop()
1d77c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d77c     08 4E 85 F1 | 	sub	fp, #8
1d780     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d784     14 4E 05 A1 |  if_e	add	fp, #20
1d788     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d78c     14 4E 85 A1 |  if_e	sub	fp, #20
1d790     16 2B 02 A6 |  if_e	mov	local03, local04
1d794     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d798     28 00 90 5D |  if_ne	jmp	#LR__2380
1d79c     00 26 06 F6 | 	mov	local01, #0
1d7a0     A7 12 02 FB | 	rdlong	arg01, fp
1d7a4     0C 4E 05 F1 | 	add	fp, #12
1d7a8     A7 14 02 FB | 	rdlong	arg02, fp
1d7ac     0C 4E 85 F1 | 	sub	fp, #12
1d7b0     E8 76 B0 FD | 	call	#__system___string_cmp
1d7b4     00 FA 55 F2 | 	cmps	result1, #0 wc
1d7b8     00 26 26 C6 |  if_b	not	local01, #0
1d7bc     A7 26 62 FC | 	wrlong	local01, fp
1d7c0     10 04 90 FD | 	jmp	#LR__2393
1d7c4                 | LR__2380
1d7c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d7c4     08 4E 05 F1 | 	add	fp, #8
1d7c8     A7 26 02 FB | 	rdlong	local01, fp
1d7cc     08 4E 85 F1 | 	sub	fp, #8
1d7d0     1E 26 0E F2 | 	cmp	local01, #30 wz
1d7d4     14 4E 05 A1 |  if_e	add	fp, #20
1d7d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d7dc     14 4E 85 A1 |  if_e	sub	fp, #20
1d7e0     16 2B 02 A6 |  if_e	mov	local03, local04
1d7e4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d7e8     2C 00 90 5D |  if_ne	jmp	#LR__2381
1d7ec     00 26 06 F6 | 	mov	local01, #0
1d7f0     A7 12 02 FB | 	rdlong	arg01, fp
1d7f4     0C 4E 05 F1 | 	add	fp, #12
1d7f8     A7 14 02 FB | 	rdlong	arg02, fp
1d7fc     0C 4E 85 F1 | 	sub	fp, #12
1d800     01 16 06 F6 | 	mov	arg03, #1
1d804     18 A9 B0 FD | 	call	#__system___float_cmp
1d808     00 FA 55 F2 | 	cmps	result1, #0 wc
1d80c     00 26 26 C6 |  if_b	not	local01, #0
1d810     A7 26 62 FC | 	wrlong	local01, fp
1d814     BC 03 90 FD | 	jmp	#LR__2393
1d818                 | LR__2381
1d818                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d818     08 4E 05 F1 | 	add	fp, #8
1d81c     A7 26 02 FB | 	rdlong	local01, fp
1d820     08 4E 85 F1 | 	sub	fp, #8
1d824     1E 26 0E F2 | 	cmp	local01, #30 wz
1d828     14 4E 05 A1 |  if_e	add	fp, #20
1d82c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d830     14 4E 85 A1 |  if_e	sub	fp, #20
1d834     16 2B 02 A6 |  if_e	mov	local03, local04
1d838     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d83c     48 00 90 5D |  if_ne	jmp	#LR__2382
1d840     00 26 06 F6 | 	mov	local01, #0
1d844     A7 28 02 FB | 	rdlong	local02, fp
1d848     0C 4E 05 F1 | 	add	fp, #12
1d84c     A7 12 02 FB | 	rdlong	arg01, fp
1d850     0C 4E 85 F1 | 	sub	fp, #12
1d854     09 13 52 F6 | 	abs	arg01, arg01 wc
1d858     1F 2E C6 C9 |  if_b	decod	local05, #31
1d85c     00 2E 06 36 |  if_ae	mov	local05, #0
1d860     84 A0 B0 FD | 	call	#__system___float_fromuns
1d864     17 FB 61 F5 | 	xor	result1, local05
1d868     FD 14 02 F6 | 	mov	arg02, result1
1d86c     14 13 02 F6 | 	mov	arg01, local02
1d870     01 16 06 F6 | 	mov	arg03, #1
1d874     A8 A8 B0 FD | 	call	#__system___float_cmp
1d878     00 FA 55 F2 | 	cmps	result1, #0 wc
1d87c     00 26 26 C6 |  if_b	not	local01, #0
1d880     A7 26 62 FC | 	wrlong	local01, fp
1d884     4C 03 90 FD | 	jmp	#LR__2393
1d888                 | LR__2382
1d888                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d888     08 4E 05 F1 | 	add	fp, #8
1d88c     A7 26 02 FB | 	rdlong	local01, fp
1d890     08 4E 85 F1 | 	sub	fp, #8
1d894     1E 26 0E F2 | 	cmp	local01, #30 wz
1d898     14 4E 05 A1 |  if_e	add	fp, #20
1d89c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d8a0     14 4E 85 A1 |  if_e	sub	fp, #20
1d8a4     16 2B 02 A6 |  if_e	mov	local03, local04
1d8a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d8ac     38 00 90 5D |  if_ne	jmp	#LR__2383
1d8b0     00 26 06 F6 | 	mov	local01, #0
1d8b4     A7 28 02 FB | 	rdlong	local02, fp
1d8b8     0C 4E 05 F1 | 	add	fp, #12
1d8bc     A7 12 02 FB | 	rdlong	arg01, fp
1d8c0     0C 4E 85 F1 | 	sub	fp, #12
1d8c4     20 A0 B0 FD | 	call	#__system___float_fromuns
1d8c8     FD 14 02 F6 | 	mov	arg02, result1
1d8cc     14 13 02 F6 | 	mov	arg01, local02
1d8d0     01 16 06 F6 | 	mov	arg03, #1
1d8d4     48 A8 B0 FD | 	call	#__system___float_cmp
1d8d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1d8dc     00 26 26 C6 |  if_b	not	local01, #0
1d8e0     A7 26 62 FC | 	wrlong	local01, fp
1d8e4     EC 02 90 FD | 	jmp	#LR__2393
1d8e8                 | LR__2383
1d8e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d8e8     08 4E 05 F1 | 	add	fp, #8
1d8ec     A7 26 02 FB | 	rdlong	local01, fp
1d8f0     08 4E 85 F1 | 	sub	fp, #8
1d8f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1d8f8     14 4E 05 A1 |  if_e	add	fp, #20
1d8fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d900     14 4E 85 A1 |  if_e	sub	fp, #20
1d904     16 2B 02 A6 |  if_e	mov	local03, local04
1d908     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d90c     44 00 90 5D |  if_ne	jmp	#LR__2384
1d910     00 26 06 F6 | 	mov	local01, #0
1d914     A7 12 02 FB | 	rdlong	arg01, fp
1d918     09 13 52 F6 | 	abs	arg01, arg01 wc
1d91c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d920     00 2E 06 36 |  if_ae	mov	local05, #0
1d924     C0 9F B0 FD | 	call	#__system___float_fromuns
1d928     17 FB 61 F5 | 	xor	result1, local05
1d92c     FD 12 02 F6 | 	mov	arg01, result1
1d930     0C 4E 05 F1 | 	add	fp, #12
1d934     A7 14 02 FB | 	rdlong	arg02, fp
1d938     0C 4E 85 F1 | 	sub	fp, #12
1d93c     01 16 06 F6 | 	mov	arg03, #1
1d940     DC A7 B0 FD | 	call	#__system___float_cmp
1d944     00 FA 55 F2 | 	cmps	result1, #0 wc
1d948     00 26 26 C6 |  if_b	not	local01, #0
1d94c     A7 26 62 FC | 	wrlong	local01, fp
1d950     80 02 90 FD | 	jmp	#LR__2393
1d954                 | LR__2384
1d954                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d954     08 4E 05 F1 | 	add	fp, #8
1d958     A7 26 02 FB | 	rdlong	local01, fp
1d95c     08 4E 85 F1 | 	sub	fp, #8
1d960     1C 26 0E F2 | 	cmp	local01, #28 wz
1d964     14 4E 05 A1 |  if_e	add	fp, #20
1d968     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d96c     14 4E 85 A1 |  if_e	sub	fp, #20
1d970     16 2B 02 A6 |  if_e	mov	local03, local04
1d974     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d978     20 00 90 5D |  if_ne	jmp	#LR__2385
1d97c     A7 28 02 FB | 	rdlong	local02, fp
1d980     0C 4E 05 F1 | 	add	fp, #12
1d984     A7 2A 02 FB | 	rdlong	local03, fp
1d988     0C 4E 85 F1 | 	sub	fp, #12
1d98c     15 29 52 F2 | 	cmps	local02, local03 wc
1d990     13 27 A2 F1 | 	subx	local01, local01
1d994     A7 26 62 FC | 	wrlong	local01, fp
1d998     38 02 90 FD | 	jmp	#LR__2393
1d99c                 | LR__2385
1d99c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d99c     08 4E 05 F1 | 	add	fp, #8
1d9a0     A7 26 02 FB | 	rdlong	local01, fp
1d9a4     08 4E 85 F1 | 	sub	fp, #8
1d9a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1d9ac     14 4E 05 A1 |  if_e	add	fp, #20
1d9b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9b4     14 4E 85 A1 |  if_e	sub	fp, #20
1d9b8     16 2B 02 A6 |  if_e	mov	local03, local04
1d9bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d9c0     20 00 90 5D |  if_ne	jmp	#LR__2386
1d9c4     A7 28 02 FB | 	rdlong	local02, fp
1d9c8     0C 4E 05 F1 | 	add	fp, #12
1d9cc     A7 2A 02 FB | 	rdlong	local03, fp
1d9d0     0C 4E 85 F1 | 	sub	fp, #12
1d9d4     15 29 52 F2 | 	cmps	local02, local03 wc
1d9d8     13 27 A2 F1 | 	subx	local01, local01
1d9dc     A7 26 62 FC | 	wrlong	local01, fp
1d9e0     F0 01 90 FD | 	jmp	#LR__2393
1d9e4                 | LR__2386
1d9e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1d9e4     08 4E 05 F1 | 	add	fp, #8
1d9e8     A7 26 02 FB | 	rdlong	local01, fp
1d9ec     08 4E 85 F1 | 	sub	fp, #8
1d9f0     1D 26 0E F2 | 	cmp	local01, #29 wz
1d9f4     14 4E 05 A1 |  if_e	add	fp, #20
1d9f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9fc     14 4E 85 A1 |  if_e	sub	fp, #20
1da00     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1da04     34 00 90 5D |  if_ne	jmp	#LR__2387
1da08     00 26 06 F6 | 	mov	local01, #0
1da0c     A7 12 02 FB | 	rdlong	arg01, fp
1da10     D4 9E B0 FD | 	call	#__system___float_fromuns
1da14     FD 12 02 F6 | 	mov	arg01, result1
1da18     0C 4E 05 F1 | 	add	fp, #12
1da1c     A7 14 02 FB | 	rdlong	arg02, fp
1da20     0C 4E 85 F1 | 	sub	fp, #12
1da24     01 16 06 F6 | 	mov	arg03, #1
1da28     F4 A6 B0 FD | 	call	#__system___float_cmp
1da2c     00 FA 55 F2 | 	cmps	result1, #0 wc
1da30     00 26 26 C6 |  if_b	not	local01, #0
1da34     A7 26 62 FC | 	wrlong	local01, fp
1da38     98 01 90 FD | 	jmp	#LR__2393
1da3c                 | LR__2387
1da3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1da3c     08 4E 05 F1 | 	add	fp, #8
1da40     A7 26 02 FB | 	rdlong	local01, fp
1da44     08 4E 85 F1 | 	sub	fp, #8
1da48     1D 26 0E F2 | 	cmp	local01, #29 wz
1da4c     14 4E 05 A1 |  if_e	add	fp, #20
1da50     A7 2A 02 AB |  if_e	rdlong	local03, fp
1da54     14 4E 85 A1 |  if_e	sub	fp, #20
1da58     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1da5c     20 00 90 5D |  if_ne	jmp	#LR__2388
1da60     A7 28 02 FB | 	rdlong	local02, fp
1da64     0C 4E 05 F1 | 	add	fp, #12
1da68     A7 2A 02 FB | 	rdlong	local03, fp
1da6c     0C 4E 85 F1 | 	sub	fp, #12
1da70     15 29 52 F2 | 	cmps	local02, local03 wc
1da74     13 27 A2 F1 | 	subx	local01, local01
1da78     A7 26 62 FC | 	wrlong	local01, fp
1da7c     54 01 90 FD | 	jmp	#LR__2393
1da80                 | LR__2388
1da80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1da80     08 4E 05 F1 | 	add	fp, #8
1da84     A7 26 02 FB | 	rdlong	local01, fp
1da88     08 4E 85 F1 | 	sub	fp, #8
1da8c     1D 26 0E F2 | 	cmp	local01, #29 wz
1da90     14 4E 05 A1 |  if_e	add	fp, #20
1da94     A7 2A 02 AB |  if_e	rdlong	local03, fp
1da98     14 4E 85 A1 |  if_e	sub	fp, #20
1da9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1daa0     20 00 90 5D |  if_ne	jmp	#LR__2389
1daa4     A7 28 02 FB | 	rdlong	local02, fp
1daa8     0C 4E 05 F1 | 	add	fp, #12
1daac     A7 2A 02 FB | 	rdlong	local03, fp
1dab0     0C 4E 85 F1 | 	sub	fp, #12
1dab4     15 29 12 F2 | 	cmp	local02, local03 wc
1dab8     13 27 A2 F1 | 	subx	local01, local01
1dabc     A7 26 62 FC | 	wrlong	local01, fp
1dac0     10 01 90 FD | 	jmp	#LR__2393
1dac4                 | LR__2389
1dac4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1dac4     08 4E 05 F1 | 	add	fp, #8
1dac8     A7 26 02 FB | 	rdlong	local01, fp
1dacc     08 4E 85 F1 | 	sub	fp, #8
1dad0     2B 26 0E F2 | 	cmp	local01, #43 wz
1dad4     14 4E 05 A1 |  if_e	add	fp, #20
1dad8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dadc     14 4E 85 A1 |  if_e	sub	fp, #20
1dae0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dae4     30 00 90 5D |  if_ne	jmp	#LR__2390
1dae8     00 26 06 F6 | 	mov	local01, #0
1daec     A7 12 02 FB | 	rdlong	arg01, fp
1daf0     10 F2 BE FD | 	call	#_convertstring
1daf4     FD 12 02 F6 | 	mov	arg01, result1
1daf8     0C 4E 05 F1 | 	add	fp, #12
1dafc     A7 14 02 FB | 	rdlong	arg02, fp
1db00     0C 4E 85 F1 | 	sub	fp, #12
1db04     94 73 B0 FD | 	call	#__system___string_cmp
1db08     00 FA 55 F2 | 	cmps	result1, #0 wc
1db0c     00 26 26 C6 |  if_b	not	local01, #0
1db10     A7 26 62 FC | 	wrlong	local01, fp
1db14     BC 00 90 FD | 	jmp	#LR__2393
1db18                 | LR__2390
1db18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1db18     08 4E 05 F1 | 	add	fp, #8
1db1c     A7 26 02 FB | 	rdlong	local01, fp
1db20     08 4E 85 F1 | 	sub	fp, #8
1db24     1F 26 0E F2 | 	cmp	local01, #31 wz
1db28     14 4E 05 A1 |  if_e	add	fp, #20
1db2c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db30     14 4E 85 A1 |  if_e	sub	fp, #20
1db34     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1db38     34 00 90 5D |  if_ne	jmp	#LR__2391
1db3c     00 26 06 F6 | 	mov	local01, #0
1db40     A7 28 02 FB | 	rdlong	local02, fp
1db44     0C 4E 05 F1 | 	add	fp, #12
1db48     A7 12 02 FB | 	rdlong	arg01, fp
1db4c     0C 4E 85 F1 | 	sub	fp, #12
1db50     B0 F1 BE FD | 	call	#_convertstring
1db54     FD 14 02 F6 | 	mov	arg02, result1
1db58     14 13 02 F6 | 	mov	arg01, local02
1db5c     3C 73 B0 FD | 	call	#__system___string_cmp
1db60     00 FA 55 F2 | 	cmps	result1, #0 wc
1db64     00 26 26 C6 |  if_b	not	local01, #0
1db68     A7 26 62 FC | 	wrlong	local01, fp
1db6c     64 00 90 FD | 	jmp	#LR__2393
1db70                 | LR__2391
1db70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1db70     08 4E 05 F1 | 	add	fp, #8
1db74     A7 26 02 FB | 	rdlong	local01, fp
1db78     08 4E 85 F1 | 	sub	fp, #8
1db7c     2B 26 0E F2 | 	cmp	local01, #43 wz
1db80     14 4E 05 A1 |  if_e	add	fp, #20
1db84     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db88     14 4E 85 A1 |  if_e	sub	fp, #20
1db8c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1db90     3C 00 90 5D |  if_ne	jmp	#LR__2392
1db94     00 26 06 F6 | 	mov	local01, #0
1db98     A7 12 02 FB | 	rdlong	arg01, fp
1db9c     64 F1 BE FD | 	call	#_convertstring
1dba0     FD 28 02 F6 | 	mov	local02, result1
1dba4     0C 4E 05 F1 | 	add	fp, #12
1dba8     A7 12 02 FB | 	rdlong	arg01, fp
1dbac     0C 4E 85 F1 | 	sub	fp, #12
1dbb0     50 F1 BE FD | 	call	#_convertstring
1dbb4     FD 14 02 F6 | 	mov	arg02, result1
1dbb8     14 13 02 F6 | 	mov	arg01, local02
1dbbc     DC 72 B0 FD | 	call	#__system___string_cmp
1dbc0     00 FA 55 F2 | 	cmps	result1, #0 wc
1dbc4     00 26 26 C6 |  if_b	not	local01, #0
1dbc8     A7 26 62 FC | 	wrlong	local01, fp
1dbcc     04 00 90 FD | 	jmp	#LR__2393
1dbd0                 | LR__2392
1dbd0     A7 00 68 FC | 	wrlong	#0, fp
1dbd4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dbd4                 | LR__2393
1dbd4     08 4E 05 F1 | 	add	fp, #8
1dbd8     A7 38 68 FC | 	wrlong	#28, fp
1dbdc     08 4E 85 F1 | 	sub	fp, #8
1dbe0     A7 12 02 F6 | 	mov	arg01, fp
1dbe4     3C F0 BE FD | 	call	#_push
1dbe8     A7 F0 03 F6 | 	mov	ptra, fp
1dbec     B2 00 A0 FD | 	call	#popregs_
1dbf0                 | _do_lt_ret
1dbf0     2D 00 64 FD | 	ret
1dbf4                 | 
1dbf4                 | ' 
1dbf4                 | ' '--------------------------------- minus (-)
1dbf4                 | ' 
1dbf4                 | ' sub do_minus
1dbf4                 | _do_minus
1dbf4     05 4A 05 F6 | 	mov	COUNT_, #5
1dbf8     A8 00 A0 FD | 	call	#pushregs_
1dbfc     18 F0 07 F1 | 	add	ptra, #24
1dc00     88 EF BE FD | 	call	#_pop
1dc04     FD 26 02 F6 | 	mov	local01, result1
1dc08     FE 28 02 F6 | 	mov	local02, result2
1dc0c     FF 2A 02 F6 | 	mov	local03, result3
1dc10     0C 4E 05 F1 | 	add	fp, #12
1dc14     A7 26 62 FC | 	wrlong	local01, fp
1dc18     04 4E 05 F1 | 	add	fp, #4
1dc1c     A7 28 62 FC | 	wrlong	local02, fp
1dc20     04 4E 05 F1 | 	add	fp, #4
1dc24     A7 2A 62 FC | 	wrlong	local03, fp
1dc28     14 4E 85 F1 | 	sub	fp, #20
1dc2c     5C EF BE FD | 	call	#_pop
1dc30     FF 2A 02 F6 | 	mov	local03, result3
1dc34     A7 FA 61 FC | 	wrlong	result1, fp
1dc38     04 4E 05 F1 | 	add	fp, #4
1dc3c     A7 FC 61 FC | 	wrlong	result2, fp
1dc40     04 4E 05 F1 | 	add	fp, #4
1dc44     A7 2A 62 FC | 	wrlong	local03, fp
1dc48                 | ' 
1dc48                 | ' t2=pop()
1dc48                 | ' t1=pop()
1dc48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1dc48     08 4E 85 F1 | 	sub	fp, #8
1dc4c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1dc50     14 4E 05 A1 |  if_e	add	fp, #20
1dc54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc58     14 4E 85 A1 |  if_e	sub	fp, #20
1dc5c     16 2B 02 A6 |  if_e	mov	local03, local04
1dc60     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dc64     5C 00 90 5D |  if_ne	jmp	#LR__2401
1dc68                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1dc68     0C 4E 05 F1 | 	add	fp, #12
1dc6c     A7 26 02 FB | 	rdlong	local01, fp
1dc70     0C 4E 85 F1 | 	sub	fp, #12
1dc74     A7 2A 02 FB | 	rdlong	local03, fp
1dc78     15 27 12 F2 | 	cmp	local01, local03 wc
1dc7c     1C 00 90 3D |  if_ae	jmp	#LR__2400
1dc80     A7 26 02 FB | 	rdlong	local01, fp
1dc84     0C 4E 05 F1 | 	add	fp, #12
1dc88     A7 28 02 FB | 	rdlong	local02, fp
1dc8c     0C 4E 85 F1 | 	sub	fp, #12
1dc90     14 27 82 F1 | 	sub	local01, local02
1dc94     A7 26 62 FC | 	wrlong	local01, fp
1dc98     F4 02 90 FD | 	jmp	#LR__2410
1dc9c                 | LR__2400
1dc9c     A7 26 02 FB | 	rdlong	local01, fp
1dca0     0C 4E 05 F1 | 	add	fp, #12
1dca4     A7 28 02 FB | 	rdlong	local02, fp
1dca8     0C 4E 85 F1 | 	sub	fp, #12
1dcac     14 27 82 F1 | 	sub	local01, local02
1dcb0     A7 26 62 FC | 	wrlong	local01, fp
1dcb4     08 4E 05 F1 | 	add	fp, #8
1dcb8     A7 38 68 FC | 	wrlong	#28, fp
1dcbc     08 4E 85 F1 | 	sub	fp, #8
1dcc0     CC 02 90 FD | 	jmp	#LR__2410
1dcc4                 | LR__2401
1dcc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1dcc4     08 4E 05 F1 | 	add	fp, #8
1dcc8     A7 26 02 FB | 	rdlong	local01, fp
1dccc     08 4E 85 F1 | 	sub	fp, #8
1dcd0     1D 26 0E F2 | 	cmp	local01, #29 wz
1dcd4     14 4E 05 A1 |  if_e	add	fp, #20
1dcd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcdc     14 4E 85 A1 |  if_e	sub	fp, #20
1dce0     16 2B 02 A6 |  if_e	mov	local03, local04
1dce4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dce8     28 00 90 5D |  if_ne	jmp	#LR__2402
1dcec     A7 26 02 FB | 	rdlong	local01, fp
1dcf0     0C 4E 05 F1 | 	add	fp, #12
1dcf4     A7 28 02 FB | 	rdlong	local02, fp
1dcf8     0C 4E 85 F1 | 	sub	fp, #12
1dcfc     14 27 82 F1 | 	sub	local01, local02
1dd00     A7 26 62 FC | 	wrlong	local01, fp
1dd04     08 4E 05 F1 | 	add	fp, #8
1dd08     A7 38 68 FC | 	wrlong	#28, fp
1dd0c     08 4E 85 F1 | 	sub	fp, #8
1dd10     7C 02 90 FD | 	jmp	#LR__2410
1dd14                 | LR__2402
1dd14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dd14     08 4E 05 F1 | 	add	fp, #8
1dd18     A7 26 02 FB | 	rdlong	local01, fp
1dd1c     08 4E 85 F1 | 	sub	fp, #8
1dd20     1D 26 0E F2 | 	cmp	local01, #29 wz
1dd24     14 4E 05 A1 |  if_e	add	fp, #20
1dd28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd2c     14 4E 85 A1 |  if_e	sub	fp, #20
1dd30     16 2B 02 A6 |  if_e	mov	local03, local04
1dd34     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dd38     34 00 90 5D |  if_ne	jmp	#LR__2403
1dd3c     A7 12 02 FB | 	rdlong	arg01, fp
1dd40     A4 9B B0 FD | 	call	#__system___float_fromuns
1dd44     FD 12 02 F6 | 	mov	arg01, result1
1dd48     0C 4E 05 F1 | 	add	fp, #12
1dd4c     A7 14 02 FB | 	rdlong	arg02, fp
1dd50     0C 4E 85 F1 | 	sub	fp, #12
1dd54     1F 14 E6 F4 | 	bitnot	arg02, #31
1dd58     C0 9B B0 FD | 	call	#__system___float_add
1dd5c     A7 FA 61 FC | 	wrlong	result1, fp
1dd60     08 4E 05 F1 | 	add	fp, #8
1dd64     A7 3C 68 FC | 	wrlong	#30, fp
1dd68     08 4E 85 F1 | 	sub	fp, #8
1dd6c     20 02 90 FD | 	jmp	#LR__2410
1dd70                 | LR__2403
1dd70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1dd70     08 4E 05 F1 | 	add	fp, #8
1dd74     A7 26 02 FB | 	rdlong	local01, fp
1dd78     08 4E 85 F1 | 	sub	fp, #8
1dd7c     1C 26 0E F2 | 	cmp	local01, #28 wz
1dd80     14 4E 05 A1 |  if_e	add	fp, #20
1dd84     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd88     14 4E 85 A1 |  if_e	sub	fp, #20
1dd8c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd90     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dd94     1C 00 90 5D |  if_ne	jmp	#LR__2404
1dd98     A7 26 02 FB | 	rdlong	local01, fp
1dd9c     0C 4E 05 F1 | 	add	fp, #12
1dda0     A7 28 02 FB | 	rdlong	local02, fp
1dda4     0C 4E 85 F1 | 	sub	fp, #12
1dda8     14 27 82 F1 | 	sub	local01, local02
1ddac     A7 26 62 FC | 	wrlong	local01, fp
1ddb0     DC 01 90 FD | 	jmp	#LR__2410
1ddb4                 | LR__2404
1ddb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1ddb4     08 4E 05 F1 | 	add	fp, #8
1ddb8     A7 26 02 FB | 	rdlong	local01, fp
1ddbc     08 4E 85 F1 | 	sub	fp, #8
1ddc0     1C 26 0E F2 | 	cmp	local01, #28 wz
1ddc4     14 4E 05 A1 |  if_e	add	fp, #20
1ddc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddcc     14 4E 85 A1 |  if_e	sub	fp, #20
1ddd0     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ddd4     1C 00 90 5D |  if_ne	jmp	#LR__2405
1ddd8     A7 26 02 FB | 	rdlong	local01, fp
1dddc     0C 4E 05 F1 | 	add	fp, #12
1dde0     A7 28 02 FB | 	rdlong	local02, fp
1dde4     0C 4E 85 F1 | 	sub	fp, #12
1dde8     14 27 82 F1 | 	sub	local01, local02
1ddec     A7 26 62 FC | 	wrlong	local01, fp
1ddf0     9C 01 90 FD | 	jmp	#LR__2410
1ddf4                 | LR__2405
1ddf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1ddf4     08 4E 05 F1 | 	add	fp, #8
1ddf8     A7 26 02 FB | 	rdlong	local01, fp
1ddfc     08 4E 85 F1 | 	sub	fp, #8
1de00     1C 26 0E F2 | 	cmp	local01, #28 wz
1de04     14 4E 05 A1 |  if_e	add	fp, #20
1de08     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de0c     14 4E 85 A1 |  if_e	sub	fp, #20
1de10     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1de14     44 00 90 5D |  if_ne	jmp	#LR__2406
1de18     A7 12 02 FB | 	rdlong	arg01, fp
1de1c     09 13 52 F6 | 	abs	arg01, arg01 wc
1de20     1F 2E C6 C9 |  if_b	decod	local05, #31
1de24     00 2E 06 36 |  if_ae	mov	local05, #0
1de28     BC 9A B0 FD | 	call	#__system___float_fromuns
1de2c     17 FB 61 F5 | 	xor	result1, local05
1de30     FD 12 02 F6 | 	mov	arg01, result1
1de34     0C 4E 05 F1 | 	add	fp, #12
1de38     A7 14 02 FB | 	rdlong	arg02, fp
1de3c     0C 4E 85 F1 | 	sub	fp, #12
1de40     1F 14 E6 F4 | 	bitnot	arg02, #31
1de44     D4 9A B0 FD | 	call	#__system___float_add
1de48     A7 FA 61 FC | 	wrlong	result1, fp
1de4c     08 4E 05 F1 | 	add	fp, #8
1de50     A7 3C 68 FC | 	wrlong	#30, fp
1de54     08 4E 85 F1 | 	sub	fp, #8
1de58     34 01 90 FD | 	jmp	#LR__2410
1de5c                 | LR__2406
1de5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1de5c     08 4E 05 F1 | 	add	fp, #8
1de60     A7 26 02 FB | 	rdlong	local01, fp
1de64     08 4E 85 F1 | 	sub	fp, #8
1de68     1E 26 0E F2 | 	cmp	local01, #30 wz
1de6c     14 4E 05 A1 |  if_e	add	fp, #20
1de70     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de74     14 4E 85 A1 |  if_e	sub	fp, #20
1de78     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1de7c     2C 00 90 5D |  if_ne	jmp	#LR__2407
1de80     A7 26 02 FB | 	rdlong	local01, fp
1de84     0C 4E 05 F1 | 	add	fp, #12
1de88     A7 12 02 FB | 	rdlong	arg01, fp
1de8c     0C 4E 85 F1 | 	sub	fp, #12
1de90     54 9A B0 FD | 	call	#__system___float_fromuns
1de94     FD 14 02 F6 | 	mov	arg02, result1
1de98     13 13 02 F6 | 	mov	arg01, local01
1de9c     1F 14 E6 F4 | 	bitnot	arg02, #31
1dea0     78 9A B0 FD | 	call	#__system___float_add
1dea4     A7 FA 61 FC | 	wrlong	result1, fp
1dea8     E4 00 90 FD | 	jmp	#LR__2410
1deac                 | LR__2407
1deac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1deac     08 4E 05 F1 | 	add	fp, #8
1deb0     A7 26 02 FB | 	rdlong	local01, fp
1deb4     08 4E 85 F1 | 	sub	fp, #8
1deb8     1E 26 0E F2 | 	cmp	local01, #30 wz
1debc     14 4E 05 A1 |  if_e	add	fp, #20
1dec0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dec4     14 4E 85 A1 |  if_e	sub	fp, #20
1dec8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1decc     3C 00 90 5D |  if_ne	jmp	#LR__2408
1ded0     A7 26 02 FB | 	rdlong	local01, fp
1ded4     0C 4E 05 F1 | 	add	fp, #12
1ded8     A7 12 02 FB | 	rdlong	arg01, fp
1dedc     0C 4E 85 F1 | 	sub	fp, #12
1dee0     09 13 52 F6 | 	abs	arg01, arg01 wc
1dee4     1F 2E C6 C9 |  if_b	decod	local05, #31
1dee8     00 2E 06 36 |  if_ae	mov	local05, #0
1deec     F8 99 B0 FD | 	call	#__system___float_fromuns
1def0     17 FB 61 F5 | 	xor	result1, local05
1def4     FD 14 02 F6 | 	mov	arg02, result1
1def8     13 13 02 F6 | 	mov	arg01, local01
1defc     1F 14 E6 F4 | 	bitnot	arg02, #31
1df00     18 9A B0 FD | 	call	#__system___float_add
1df04     A7 FA 61 FC | 	wrlong	result1, fp
1df08     84 00 90 FD | 	jmp	#LR__2410
1df0c                 | LR__2408
1df0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1df0c     08 4E 05 F1 | 	add	fp, #8
1df10     A7 26 02 FB | 	rdlong	local01, fp
1df14     08 4E 85 F1 | 	sub	fp, #8
1df18     1E 26 0E F2 | 	cmp	local01, #30 wz
1df1c     14 4E 05 A1 |  if_e	add	fp, #20
1df20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df24     14 4E 85 A1 |  if_e	sub	fp, #20
1df28     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1df2c     20 00 90 5D |  if_ne	jmp	#LR__2409
1df30     A7 12 02 FB | 	rdlong	arg01, fp
1df34     0C 4E 05 F1 | 	add	fp, #12
1df38     A7 14 02 FB | 	rdlong	arg02, fp
1df3c     0C 4E 85 F1 | 	sub	fp, #12
1df40     1F 14 E6 F4 | 	bitnot	arg02, #31
1df44     D4 99 B0 FD | 	call	#__system___float_add
1df48     A7 FA 61 FC | 	wrlong	result1, fp
1df4c     40 00 90 FD | 	jmp	#LR__2410
1df50                 | LR__2409
1df50                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1df50     08 4E 05 F1 | 	add	fp, #8
1df54     A7 26 02 FB | 	rdlong	local01, fp
1df58     08 4E 85 F1 | 	sub	fp, #8
1df5c     1F 26 0E F2 | 	cmp	local01, #31 wz
1df60     14 4E 05 51 |  if_ne	add	fp, #20
1df64     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1df68     14 4E 85 51 |  if_ne	sub	fp, #20
1df6c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1df70     A7 06 68 AC |  if_e	wrlong	#3, fp
1df74     08 4E 05 A1 |  if_e	add	fp, #8
1df78     A7 FE 69 AC |  if_e	wrlong	#255, fp
1df7c     08 4E 85 A1 |  if_e	sub	fp, #8
1df80     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1df84     08 4E 05 51 |  if_ne	add	fp, #8
1df88     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1df8c     08 4E 85 51 |  if_ne	sub	fp, #8
1df90                 | LR__2410
1df90     A7 12 02 F6 | 	mov	arg01, fp
1df94     8C EC BE FD | 	call	#_push
1df98     A7 F0 03 F6 | 	mov	ptra, fp
1df9c     B2 00 A0 FD | 	call	#popregs_
1dfa0                 | _do_minus_ret
1dfa0     2D 00 64 FD | 	ret
1dfa4                 | 
1dfa4                 | ' 
1dfa4                 | ' '--------------------------------- negative (-), one argument negative
1dfa4                 | ' 
1dfa4                 | ' sub do_negative
1dfa4                 | _do_negative
1dfa4     02 4A 05 F6 | 	mov	COUNT_, #2
1dfa8     A8 00 A0 FD | 	call	#pushregs_
1dfac     0C F0 07 F1 | 	add	ptra, #12
1dfb0     D8 EB BE FD | 	call	#_pop
1dfb4     FF 26 02 F6 | 	mov	local01, result3
1dfb8     A7 FA 61 FC | 	wrlong	result1, fp
1dfbc     04 4E 05 F1 | 	add	fp, #4
1dfc0     A7 FC 61 FC | 	wrlong	result2, fp
1dfc4     04 4E 05 F1 | 	add	fp, #4
1dfc8     A7 26 62 FC | 	wrlong	local01, fp
1dfcc                 | ' 
1dfcc                 | ' t1=pop()
1dfcc                 | ' if t1.result_type=result_int then 
1dfcc     08 4E 85 F1 | 	sub	fp, #8
1dfd0     1C 26 0E F2 | 	cmp	local01, #28 wz
1dfd4     A7 28 02 AB |  if_e	rdlong	local02, fp
1dfd8     14 27 62 A6 |  if_e	neg	local01, local02
1dfdc     A7 26 62 AC |  if_e	wrlong	local01, fp
1dfe0     5C 00 90 AD |  if_e	jmp	#LR__2422
1dfe4     08 4E 05 F1 | 	add	fp, #8
1dfe8     A7 26 02 FB | 	rdlong	local01, fp
1dfec     08 4E 85 F1 | 	sub	fp, #8
1dff0     1D 26 0E F2 | 	cmp	local01, #29 wz
1dff4     1C 00 90 5D |  if_ne	jmp	#LR__2420
1dff8     A7 28 02 FB | 	rdlong	local02, fp
1dffc     14 27 62 F6 | 	neg	local01, local02
1e000     A7 26 62 FC | 	wrlong	local01, fp
1e004     08 4E 05 F1 | 	add	fp, #8
1e008     A7 38 68 FC | 	wrlong	#28, fp
1e00c     08 4E 85 F1 | 	sub	fp, #8
1e010     2C 00 90 FD | 	jmp	#LR__2421
1e014                 | LR__2420
1e014     08 4E 05 F1 | 	add	fp, #8
1e018     A7 26 02 FB | 	rdlong	local01, fp
1e01c     08 4E 85 F1 | 	sub	fp, #8
1e020     1E 26 0E F2 | 	cmp	local01, #30 wz
1e024     A7 FA 01 AB |  if_e	rdlong	result1, fp
1e028     1F FA E5 A4 |  if_e	bitnot	result1, #31
1e02c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1e030     08 4E 05 51 |  if_ne	add	fp, #8
1e034     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e038     08 4E 85 51 |  if_ne	sub	fp, #8
1e03c     A7 50 68 5C |  if_ne	wrlong	#40, fp
1e040                 | LR__2421
1e040                 | LR__2422
1e040     A7 12 02 F6 | 	mov	arg01, fp
1e044     DC EB BE FD | 	call	#_push
1e048     A7 F0 03 F6 | 	mov	ptra, fp
1e04c     B2 00 A0 FD | 	call	#popregs_
1e050                 | _do_negative_ret
1e050     2D 00 64 FD | 	ret
1e054                 | 
1e054                 | ' 
1e054                 | ' '--------------------------------- MOD (modulo)
1e054                 | ' 
1e054                 | ' sub do_mod 
1e054                 | _do_mod
1e054     01 4A 05 F6 | 	mov	COUNT_, #1
1e058     A8 00 A0 FD | 	call	#pushregs_
1e05c     18 F0 07 F1 | 	add	ptra, #24
1e060     28 EB BE FD | 	call	#_pop
1e064     FD 8A 02 F6 | 	mov	muldivb_, result1
1e068     FE 88 02 F6 | 	mov	muldiva_, result2
1e06c     FF 26 02 F6 | 	mov	local01, result3
1e070     0C 4E 05 F1 | 	add	fp, #12
1e074     A7 8A 62 FC | 	wrlong	muldivb_, fp
1e078     04 4E 05 F1 | 	add	fp, #4
1e07c     A7 88 62 FC | 	wrlong	muldiva_, fp
1e080     04 4E 05 F1 | 	add	fp, #4
1e084     A7 26 62 FC | 	wrlong	local01, fp
1e088     14 4E 85 F1 | 	sub	fp, #20
1e08c     FC EA BE FD | 	call	#_pop
1e090     A7 FA 61 FC | 	wrlong	result1, fp
1e094     04 4E 05 F1 | 	add	fp, #4
1e098     A7 FC 61 FC | 	wrlong	result2, fp
1e09c     04 4E 05 F1 | 	add	fp, #4
1e0a0     A7 FE 61 FC | 	wrlong	result3, fp
1e0a4                 | ' 
1e0a4                 | ' t2=pop()
1e0a4                 | ' t1=pop()
1e0a4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1e0a4     08 4E 85 F1 | 	sub	fp, #8
1e0a8     1F FE 0D F2 | 	cmp	result3, #31 wz
1e0ac     14 4E 05 51 |  if_ne	add	fp, #20
1e0b0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1e0b4     14 4E 85 51 |  if_ne	sub	fp, #20
1e0b8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1e0bc     A7 14 68 AC |  if_e	wrlong	#10, fp
1e0c0     08 4E 05 A1 |  if_e	add	fp, #8
1e0c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e0c8     08 4E 85 A1 |  if_e	sub	fp, #8
1e0cc     90 01 90 AD |  if_e	jmp	#LR__2436
1e0d0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1e0d0     08 4E 05 F1 | 	add	fp, #8
1e0d4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e0d8     08 4E 85 F1 | 	sub	fp, #8
1e0dc     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1e0e0     1C 00 90 5D |  if_ne	jmp	#LR__2430
1e0e4     08 4E 05 F1 | 	add	fp, #8
1e0e8     A7 38 68 FC | 	wrlong	#28, fp
1e0ec     08 4E 85 F1 | 	sub	fp, #8
1e0f0     A7 12 02 FB | 	rdlong	arg01, fp
1e0f4     00 14 06 F6 | 	mov	arg02, #0
1e0f8     B8 A0 B0 FD | 	call	#__system___float_tointeger
1e0fc     A7 FA 61 FC | 	wrlong	result1, fp
1e100                 | LR__2430
1e100                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1e100     14 4E 05 F1 | 	add	fp, #20
1e104     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e108     14 4E 85 F1 | 	sub	fp, #20
1e10c     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1e110     28 00 90 5D |  if_ne	jmp	#LR__2431
1e114     14 4E 05 F1 | 	add	fp, #20
1e118     A7 38 68 FC | 	wrlong	#28, fp
1e11c     08 4E 85 F1 | 	sub	fp, #8
1e120     A7 12 02 FB | 	rdlong	arg01, fp
1e124     0C 4E 85 F1 | 	sub	fp, #12
1e128     00 14 06 F6 | 	mov	arg02, #0
1e12c     84 A0 B0 FD | 	call	#__system___float_tointeger
1e130     0C 4E 05 F1 | 	add	fp, #12
1e134     A7 FA 61 FC | 	wrlong	result1, fp
1e138     0C 4E 85 F1 | 	sub	fp, #12
1e13c                 | LR__2431
1e13c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1e13c     08 4E 05 F1 | 	add	fp, #8
1e140     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e144     08 4E 85 F1 | 	sub	fp, #8
1e148     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1e14c     14 4E 05 A1 |  if_e	add	fp, #20
1e150     A7 26 02 AB |  if_e	rdlong	local01, fp
1e154     14 4E 85 A1 |  if_e	sub	fp, #20
1e158     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e15c     20 00 90 5D |  if_ne	jmp	#LR__2432
1e160     0C 4E 05 F1 | 	add	fp, #12
1e164     A7 26 02 FB | 	rdlong	local01, fp
1e168     0C 4E 85 F1 | 	sub	fp, #12
1e16c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e170     13 8B 12 FD | 	qdiv	muldivb_, local01
1e174     19 26 62 FD | 	getqy	local01
1e178     A7 26 62 FC | 	wrlong	local01, fp
1e17c     E0 00 90 FD | 	jmp	#LR__2436
1e180                 | LR__2432
1e180                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1e180     08 4E 05 F1 | 	add	fp, #8
1e184     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e188     08 4E 85 F1 | 	sub	fp, #8
1e18c     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1e190     14 4E 05 A1 |  if_e	add	fp, #20
1e194     A7 26 02 AB |  if_e	rdlong	local01, fp
1e198     14 4E 85 A1 |  if_e	sub	fp, #20
1e19c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e1a0     2C 00 90 5D |  if_ne	jmp	#LR__2433
1e1a4     0C 4E 05 F1 | 	add	fp, #12
1e1a8     A7 26 02 FB | 	rdlong	local01, fp
1e1ac     0C 4E 85 F1 | 	sub	fp, #12
1e1b0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e1b4     13 8B 12 FD | 	qdiv	muldivb_, local01
1e1b8     19 26 62 FD | 	getqy	local01
1e1bc     A7 26 62 FC | 	wrlong	local01, fp
1e1c0     08 4E 05 F1 | 	add	fp, #8
1e1c4     A7 38 68 FC | 	wrlong	#28, fp
1e1c8     08 4E 85 F1 | 	sub	fp, #8
1e1cc     90 00 90 FD | 	jmp	#LR__2436
1e1d0                 | LR__2433
1e1d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1e1d0     08 4E 05 F1 | 	add	fp, #8
1e1d4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e1d8     08 4E 85 F1 | 	sub	fp, #8
1e1dc     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1e1e0     14 4E 05 A1 |  if_e	add	fp, #20
1e1e4     A7 26 02 AB |  if_e	rdlong	local01, fp
1e1e8     14 4E 85 A1 |  if_e	sub	fp, #20
1e1ec     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e1f0     1C 00 90 5D |  if_ne	jmp	#LR__2434
1e1f4     A7 88 02 FB | 	rdlong	muldiva_, fp
1e1f8     0C 4E 05 F1 | 	add	fp, #12
1e1fc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e200     0C 4E 85 F1 | 	sub	fp, #12
1e204     BA 00 A0 FD | 	call	#divide_
1e208     A7 88 62 FC | 	wrlong	muldiva_, fp
1e20c     50 00 90 FD | 	jmp	#LR__2436
1e210                 | LR__2434
1e210                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1e210     08 4E 05 F1 | 	add	fp, #8
1e214     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e218     08 4E 85 F1 | 	sub	fp, #8
1e21c     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1e220     14 4E 05 A1 |  if_e	add	fp, #20
1e224     A7 26 02 AB |  if_e	rdlong	local01, fp
1e228     14 4E 85 A1 |  if_e	sub	fp, #20
1e22c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e230     1C 00 90 5D |  if_ne	jmp	#LR__2435
1e234     A7 88 02 FB | 	rdlong	muldiva_, fp
1e238     0C 4E 05 F1 | 	add	fp, #12
1e23c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e240     0C 4E 85 F1 | 	sub	fp, #12
1e244     BA 00 A0 FD | 	call	#divide_
1e248     A7 88 62 FC | 	wrlong	muldiva_, fp
1e24c     10 00 90 FD | 	jmp	#LR__2436
1e250                 | LR__2435
1e250     A7 16 68 FC | 	wrlong	#11, fp
1e254     08 4E 05 F1 | 	add	fp, #8
1e258     A7 FE 69 FC | 	wrlong	#255, fp
1e25c     08 4E 85 F1 | 	sub	fp, #8
1e260                 | LR__2436
1e260     A7 12 02 F6 | 	mov	arg01, fp
1e264     BC E9 BE FD | 	call	#_push
1e268     A7 F0 03 F6 | 	mov	ptra, fp
1e26c     B2 00 A0 FD | 	call	#popregs_
1e270                 | _do_mod_ret
1e270     2D 00 64 FD | 	ret
1e274                 | 
1e274                 | ' 
1e274                 | ' '--------------------------------- mul (*)
1e274                 | ' 
1e274                 | ' sub do_mul
1e274                 | _do_mul
1e274     05 4A 05 F6 | 	mov	COUNT_, #5
1e278     A8 00 A0 FD | 	call	#pushregs_
1e27c     18 F0 07 F1 | 	add	ptra, #24
1e280     08 E9 BE FD | 	call	#_pop
1e284     FD 26 02 F6 | 	mov	local01, result1
1e288     FE 28 02 F6 | 	mov	local02, result2
1e28c     FF 2A 02 F6 | 	mov	local03, result3
1e290     0C 4E 05 F1 | 	add	fp, #12
1e294     A7 26 62 FC | 	wrlong	local01, fp
1e298     04 4E 05 F1 | 	add	fp, #4
1e29c     A7 28 62 FC | 	wrlong	local02, fp
1e2a0     04 4E 05 F1 | 	add	fp, #4
1e2a4     A7 2A 62 FC | 	wrlong	local03, fp
1e2a8     14 4E 85 F1 | 	sub	fp, #20
1e2ac     DC E8 BE FD | 	call	#_pop
1e2b0     FF 2A 02 F6 | 	mov	local03, result3
1e2b4     A7 FA 61 FC | 	wrlong	result1, fp
1e2b8     04 4E 05 F1 | 	add	fp, #4
1e2bc     A7 FC 61 FC | 	wrlong	result2, fp
1e2c0     04 4E 05 F1 | 	add	fp, #4
1e2c4     A7 2A 62 FC | 	wrlong	local03, fp
1e2c8                 | ' 
1e2c8                 | ' t2=pop()
1e2c8                 | ' t1=pop()
1e2c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1e2c8     08 4E 85 F1 | 	sub	fp, #8
1e2cc     1D 2A 0E F2 | 	cmp	local03, #29 wz
1e2d0     14 4E 05 A1 |  if_e	add	fp, #20
1e2d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2d8     14 4E 85 A1 |  if_e	sub	fp, #20
1e2dc     16 2B 02 A6 |  if_e	mov	local03, local04
1e2e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e2e4     20 00 90 5D |  if_ne	jmp	#LR__2440
1e2e8     A7 28 02 FB | 	rdlong	local02, fp
1e2ec     0C 4E 05 F1 | 	add	fp, #12
1e2f0     A7 2A 02 FB | 	rdlong	local03, fp
1e2f4     15 29 02 FD | 	qmul	local02, local03
1e2f8     0C 4E 85 F1 | 	sub	fp, #12
1e2fc     18 26 62 FD | 	getqx	local01
1e300     A7 26 62 FC | 	wrlong	local01, fp
1e304     C4 02 90 FD | 	jmp	#LR__2449
1e308                 | LR__2440
1e308                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1e308     08 4E 05 F1 | 	add	fp, #8
1e30c     A7 26 02 FB | 	rdlong	local01, fp
1e310     08 4E 85 F1 | 	sub	fp, #8
1e314     1D 26 0E F2 | 	cmp	local01, #29 wz
1e318     14 4E 05 A1 |  if_e	add	fp, #20
1e31c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e320     14 4E 85 A1 |  if_e	sub	fp, #20
1e324     16 2B 02 A6 |  if_e	mov	local03, local04
1e328     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e32c     2C 00 90 5D |  if_ne	jmp	#LR__2441
1e330     A7 28 02 FB | 	rdlong	local02, fp
1e334     0C 4E 05 F1 | 	add	fp, #12
1e338     A7 2A 02 FB | 	rdlong	local03, fp
1e33c     15 29 02 FD | 	qmul	local02, local03
1e340     0C 4E 85 F1 | 	sub	fp, #12
1e344     18 26 62 FD | 	getqx	local01
1e348     A7 26 62 FC | 	wrlong	local01, fp
1e34c     08 4E 05 F1 | 	add	fp, #8
1e350     A7 38 68 FC | 	wrlong	#28, fp
1e354     08 4E 85 F1 | 	sub	fp, #8
1e358     70 02 90 FD | 	jmp	#LR__2449
1e35c                 | LR__2441
1e35c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e35c     08 4E 05 F1 | 	add	fp, #8
1e360     A7 26 02 FB | 	rdlong	local01, fp
1e364     08 4E 85 F1 | 	sub	fp, #8
1e368     1D 26 0E F2 | 	cmp	local01, #29 wz
1e36c     14 4E 05 A1 |  if_e	add	fp, #20
1e370     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e374     14 4E 85 A1 |  if_e	sub	fp, #20
1e378     16 2B 02 A6 |  if_e	mov	local03, local04
1e37c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e380     30 00 90 5D |  if_ne	jmp	#LR__2442
1e384     A7 12 02 FB | 	rdlong	arg01, fp
1e388     5C 95 B0 FD | 	call	#__system___float_fromuns
1e38c     FD 12 02 F6 | 	mov	arg01, result1
1e390     0C 4E 05 F1 | 	add	fp, #12
1e394     A7 14 02 FB | 	rdlong	arg02, fp
1e398     0C 4E 85 F1 | 	sub	fp, #12
1e39c     4C 99 B0 FD | 	call	#__system___float_mul
1e3a0     A7 FA 61 FC | 	wrlong	result1, fp
1e3a4     08 4E 05 F1 | 	add	fp, #8
1e3a8     A7 3C 68 FC | 	wrlong	#30, fp
1e3ac     08 4E 85 F1 | 	sub	fp, #8
1e3b0     18 02 90 FD | 	jmp	#LR__2449
1e3b4                 | LR__2442
1e3b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1e3b4     08 4E 05 F1 | 	add	fp, #8
1e3b8     A7 26 02 FB | 	rdlong	local01, fp
1e3bc     08 4E 85 F1 | 	sub	fp, #8
1e3c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3c4     14 4E 05 A1 |  if_e	add	fp, #20
1e3c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3cc     14 4E 85 A1 |  if_e	sub	fp, #20
1e3d0     16 2B 02 A6 |  if_e	mov	local03, local04
1e3d4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e3d8     20 00 90 5D |  if_ne	jmp	#LR__2443
1e3dc     A7 28 02 FB | 	rdlong	local02, fp
1e3e0     0C 4E 05 F1 | 	add	fp, #12
1e3e4     A7 2A 02 FB | 	rdlong	local03, fp
1e3e8     15 29 02 FD | 	qmul	local02, local03
1e3ec     0C 4E 85 F1 | 	sub	fp, #12
1e3f0     18 26 62 FD | 	getqx	local01
1e3f4     A7 26 62 FC | 	wrlong	local01, fp
1e3f8     D0 01 90 FD | 	jmp	#LR__2449
1e3fc                 | LR__2443
1e3fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1e3fc     08 4E 05 F1 | 	add	fp, #8
1e400     A7 26 02 FB | 	rdlong	local01, fp
1e404     08 4E 85 F1 | 	sub	fp, #8
1e408     1C 26 0E F2 | 	cmp	local01, #28 wz
1e40c     14 4E 05 A1 |  if_e	add	fp, #20
1e410     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e414     14 4E 85 A1 |  if_e	sub	fp, #20
1e418     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e41c     20 00 90 5D |  if_ne	jmp	#LR__2444
1e420     A7 28 02 FB | 	rdlong	local02, fp
1e424     0C 4E 05 F1 | 	add	fp, #12
1e428     A7 2A 02 FB | 	rdlong	local03, fp
1e42c     15 29 02 FD | 	qmul	local02, local03
1e430     0C 4E 85 F1 | 	sub	fp, #12
1e434     18 26 62 FD | 	getqx	local01
1e438     A7 26 62 FC | 	wrlong	local01, fp
1e43c     8C 01 90 FD | 	jmp	#LR__2449
1e440                 | LR__2444
1e440                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e440     08 4E 05 F1 | 	add	fp, #8
1e444     A7 26 02 FB | 	rdlong	local01, fp
1e448     08 4E 85 F1 | 	sub	fp, #8
1e44c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e450     14 4E 05 A1 |  if_e	add	fp, #20
1e454     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e458     14 4E 85 A1 |  if_e	sub	fp, #20
1e45c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e460     40 00 90 5D |  if_ne	jmp	#LR__2445
1e464     A7 12 02 FB | 	rdlong	arg01, fp
1e468     09 13 52 F6 | 	abs	arg01, arg01 wc
1e46c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e470     00 2E 06 36 |  if_ae	mov	local05, #0
1e474     70 94 B0 FD | 	call	#__system___float_fromuns
1e478     17 FB 61 F5 | 	xor	result1, local05
1e47c     FD 12 02 F6 | 	mov	arg01, result1
1e480     0C 4E 05 F1 | 	add	fp, #12
1e484     A7 14 02 FB | 	rdlong	arg02, fp
1e488     0C 4E 85 F1 | 	sub	fp, #12
1e48c     5C 98 B0 FD | 	call	#__system___float_mul
1e490     A7 FA 61 FC | 	wrlong	result1, fp
1e494     08 4E 05 F1 | 	add	fp, #8
1e498     A7 3C 68 FC | 	wrlong	#30, fp
1e49c     08 4E 85 F1 | 	sub	fp, #8
1e4a0     28 01 90 FD | 	jmp	#LR__2449
1e4a4                 | LR__2445
1e4a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1e4a4     08 4E 05 F1 | 	add	fp, #8
1e4a8     A7 26 02 FB | 	rdlong	local01, fp
1e4ac     08 4E 85 F1 | 	sub	fp, #8
1e4b0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e4b4     14 4E 05 A1 |  if_e	add	fp, #20
1e4b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4bc     14 4E 85 A1 |  if_e	sub	fp, #20
1e4c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e4c4     28 00 90 5D |  if_ne	jmp	#LR__2446
1e4c8     A7 26 02 FB | 	rdlong	local01, fp
1e4cc     0C 4E 05 F1 | 	add	fp, #12
1e4d0     A7 12 02 FB | 	rdlong	arg01, fp
1e4d4     0C 4E 85 F1 | 	sub	fp, #12
1e4d8     0C 94 B0 FD | 	call	#__system___float_fromuns
1e4dc     FD 14 02 F6 | 	mov	arg02, result1
1e4e0     13 13 02 F6 | 	mov	arg01, local01
1e4e4     04 98 B0 FD | 	call	#__system___float_mul
1e4e8     A7 FA 61 FC | 	wrlong	result1, fp
1e4ec     DC 00 90 FD | 	jmp	#LR__2449
1e4f0                 | LR__2446
1e4f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1e4f0     08 4E 05 F1 | 	add	fp, #8
1e4f4     A7 26 02 FB | 	rdlong	local01, fp
1e4f8     08 4E 85 F1 | 	sub	fp, #8
1e4fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e500     14 4E 05 A1 |  if_e	add	fp, #20
1e504     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e508     14 4E 85 A1 |  if_e	sub	fp, #20
1e50c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e510     38 00 90 5D |  if_ne	jmp	#LR__2447
1e514     A7 26 02 FB | 	rdlong	local01, fp
1e518     0C 4E 05 F1 | 	add	fp, #12
1e51c     A7 12 02 FB | 	rdlong	arg01, fp
1e520     0C 4E 85 F1 | 	sub	fp, #12
1e524     09 13 52 F6 | 	abs	arg01, arg01 wc
1e528     1F 2E C6 C9 |  if_b	decod	local05, #31
1e52c     00 2E 06 36 |  if_ae	mov	local05, #0
1e530     B4 93 B0 FD | 	call	#__system___float_fromuns
1e534     17 FB 61 F5 | 	xor	result1, local05
1e538     FD 14 02 F6 | 	mov	arg02, result1
1e53c     13 13 02 F6 | 	mov	arg01, local01
1e540     A8 97 B0 FD | 	call	#__system___float_mul
1e544     A7 FA 61 FC | 	wrlong	result1, fp
1e548     80 00 90 FD | 	jmp	#LR__2449
1e54c                 | LR__2447
1e54c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1e54c     08 4E 05 F1 | 	add	fp, #8
1e550     A7 26 02 FB | 	rdlong	local01, fp
1e554     08 4E 85 F1 | 	sub	fp, #8
1e558     1E 26 0E F2 | 	cmp	local01, #30 wz
1e55c     14 4E 05 A1 |  if_e	add	fp, #20
1e560     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e564     14 4E 85 A1 |  if_e	sub	fp, #20
1e568     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e56c     1C 00 90 5D |  if_ne	jmp	#LR__2448
1e570     A7 12 02 FB | 	rdlong	arg01, fp
1e574     0C 4E 05 F1 | 	add	fp, #12
1e578     A7 14 02 FB | 	rdlong	arg02, fp
1e57c     0C 4E 85 F1 | 	sub	fp, #12
1e580     68 97 B0 FD | 	call	#__system___float_mul
1e584     A7 FA 61 FC | 	wrlong	result1, fp
1e588     40 00 90 FD | 	jmp	#LR__2449
1e58c                 | LR__2448
1e58c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1e58c     08 4E 05 F1 | 	add	fp, #8
1e590     A7 26 02 FB | 	rdlong	local01, fp
1e594     08 4E 85 F1 | 	sub	fp, #8
1e598     1F 26 0E F2 | 	cmp	local01, #31 wz
1e59c     14 4E 05 51 |  if_ne	add	fp, #20
1e5a0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e5a4     14 4E 85 51 |  if_ne	sub	fp, #20
1e5a8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1e5ac     A7 10 68 AC |  if_e	wrlong	#8, fp
1e5b0     08 4E 05 A1 |  if_e	add	fp, #8
1e5b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e5b8     08 4E 85 A1 |  if_e	sub	fp, #8
1e5bc     A7 12 68 5C |  if_ne	wrlong	#9, fp
1e5c0     08 4E 05 51 |  if_ne	add	fp, #8
1e5c4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e5c8     08 4E 85 51 |  if_ne	sub	fp, #8
1e5cc                 | LR__2449
1e5cc     A7 12 02 F6 | 	mov	arg01, fp
1e5d0     50 E6 BE FD | 	call	#_push
1e5d4     A7 F0 03 F6 | 	mov	ptra, fp
1e5d8     B2 00 A0 FD | 	call	#popregs_
1e5dc                 | _do_mul_ret
1e5dc     2D 00 64 FD | 	ret
1e5e0                 | 
1e5e0                 | ' 
1e5e0                 | ' '--------------------------------- not equal (<>)
1e5e0                 | ' 
1e5e0                 | ' sub do_ne
1e5e0                 | _do_ne
1e5e0     05 4A 05 F6 | 	mov	COUNT_, #5
1e5e4     A8 00 A0 FD | 	call	#pushregs_
1e5e8     18 F0 07 F1 | 	add	ptra, #24
1e5ec     9C E5 BE FD | 	call	#_pop
1e5f0     FD 26 02 F6 | 	mov	local01, result1
1e5f4     FE 28 02 F6 | 	mov	local02, result2
1e5f8     FF 2A 02 F6 | 	mov	local03, result3
1e5fc     0C 4E 05 F1 | 	add	fp, #12
1e600     A7 26 62 FC | 	wrlong	local01, fp
1e604     04 4E 05 F1 | 	add	fp, #4
1e608     A7 28 62 FC | 	wrlong	local02, fp
1e60c     04 4E 05 F1 | 	add	fp, #4
1e610     A7 2A 62 FC | 	wrlong	local03, fp
1e614     14 4E 85 F1 | 	sub	fp, #20
1e618     70 E5 BE FD | 	call	#_pop
1e61c     FF 2A 02 F6 | 	mov	local03, result3
1e620     A7 FA 61 FC | 	wrlong	result1, fp
1e624     04 4E 05 F1 | 	add	fp, #4
1e628     A7 FC 61 FC | 	wrlong	result2, fp
1e62c     04 4E 05 F1 | 	add	fp, #4
1e630     A7 2A 62 FC | 	wrlong	local03, fp
1e634                 | ' 
1e634                 | ' t2=pop()
1e634                 | ' t1=pop()
1e634                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1e634     08 4E 85 F1 | 	sub	fp, #8
1e638     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e63c     14 4E 05 A1 |  if_e	add	fp, #20
1e640     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e644     14 4E 85 A1 |  if_e	sub	fp, #20
1e648     16 2B 02 A6 |  if_e	mov	local03, local04
1e64c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e650     28 00 90 5D |  if_ne	jmp	#LR__2450
1e654     00 26 06 F6 | 	mov	local01, #0
1e658     A7 12 02 FB | 	rdlong	arg01, fp
1e65c     0C 4E 05 F1 | 	add	fp, #12
1e660     A7 14 02 FB | 	rdlong	arg02, fp
1e664     0C 4E 85 F1 | 	sub	fp, #12
1e668     30 68 B0 FD | 	call	#__system___string_cmp
1e66c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e670     00 26 26 56 |  if_ne	not	local01, #0
1e674     A7 26 62 FC | 	wrlong	local01, fp
1e678     20 04 90 FD | 	jmp	#LR__2463
1e67c                 | LR__2450
1e67c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1e67c     08 4E 05 F1 | 	add	fp, #8
1e680     A7 26 02 FB | 	rdlong	local01, fp
1e684     08 4E 85 F1 | 	sub	fp, #8
1e688     1E 26 0E F2 | 	cmp	local01, #30 wz
1e68c     14 4E 05 A1 |  if_e	add	fp, #20
1e690     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e694     14 4E 85 A1 |  if_e	sub	fp, #20
1e698     16 2B 02 A6 |  if_e	mov	local03, local04
1e69c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e6a0     2C 00 90 5D |  if_ne	jmp	#LR__2451
1e6a4     00 26 06 F6 | 	mov	local01, #0
1e6a8     A7 12 02 FB | 	rdlong	arg01, fp
1e6ac     0C 4E 05 F1 | 	add	fp, #12
1e6b0     A7 14 02 FB | 	rdlong	arg02, fp
1e6b4     0C 4E 85 F1 | 	sub	fp, #12
1e6b8     01 16 06 F6 | 	mov	arg03, #1
1e6bc     60 9A B0 FD | 	call	#__system___float_cmp
1e6c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e6c4     00 26 26 56 |  if_ne	not	local01, #0
1e6c8     A7 26 62 FC | 	wrlong	local01, fp
1e6cc     CC 03 90 FD | 	jmp	#LR__2463
1e6d0                 | LR__2451
1e6d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e6d0     08 4E 05 F1 | 	add	fp, #8
1e6d4     A7 26 02 FB | 	rdlong	local01, fp
1e6d8     08 4E 85 F1 | 	sub	fp, #8
1e6dc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e6e0     14 4E 05 A1 |  if_e	add	fp, #20
1e6e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6e8     14 4E 85 A1 |  if_e	sub	fp, #20
1e6ec     16 2B 02 A6 |  if_e	mov	local03, local04
1e6f0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e6f4     48 00 90 5D |  if_ne	jmp	#LR__2452
1e6f8     00 26 06 F6 | 	mov	local01, #0
1e6fc     A7 28 02 FB | 	rdlong	local02, fp
1e700     0C 4E 05 F1 | 	add	fp, #12
1e704     A7 12 02 FB | 	rdlong	arg01, fp
1e708     0C 4E 85 F1 | 	sub	fp, #12
1e70c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e710     1F 2E C6 C9 |  if_b	decod	local05, #31
1e714     00 2E 06 36 |  if_ae	mov	local05, #0
1e718     CC 91 B0 FD | 	call	#__system___float_fromuns
1e71c     17 FB 61 F5 | 	xor	result1, local05
1e720     FD 14 02 F6 | 	mov	arg02, result1
1e724     14 13 02 F6 | 	mov	arg01, local02
1e728     01 16 06 F6 | 	mov	arg03, #1
1e72c     F0 99 B0 FD | 	call	#__system___float_cmp
1e730     00 FA 0D F2 | 	cmp	result1, #0 wz
1e734     00 26 26 56 |  if_ne	not	local01, #0
1e738     A7 26 62 FC | 	wrlong	local01, fp
1e73c     5C 03 90 FD | 	jmp	#LR__2463
1e740                 | LR__2452
1e740                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e740     08 4E 05 F1 | 	add	fp, #8
1e744     A7 26 02 FB | 	rdlong	local01, fp
1e748     08 4E 85 F1 | 	sub	fp, #8
1e74c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e750     14 4E 05 A1 |  if_e	add	fp, #20
1e754     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e758     14 4E 85 A1 |  if_e	sub	fp, #20
1e75c     16 2B 02 A6 |  if_e	mov	local03, local04
1e760     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e764     38 00 90 5D |  if_ne	jmp	#LR__2453
1e768     00 26 06 F6 | 	mov	local01, #0
1e76c     A7 28 02 FB | 	rdlong	local02, fp
1e770     0C 4E 05 F1 | 	add	fp, #12
1e774     A7 12 02 FB | 	rdlong	arg01, fp
1e778     0C 4E 85 F1 | 	sub	fp, #12
1e77c     68 91 B0 FD | 	call	#__system___float_fromuns
1e780     FD 14 02 F6 | 	mov	arg02, result1
1e784     14 13 02 F6 | 	mov	arg01, local02
1e788     01 16 06 F6 | 	mov	arg03, #1
1e78c     90 99 B0 FD | 	call	#__system___float_cmp
1e790     00 FA 0D F2 | 	cmp	result1, #0 wz
1e794     00 26 26 56 |  if_ne	not	local01, #0
1e798     A7 26 62 FC | 	wrlong	local01, fp
1e79c     FC 02 90 FD | 	jmp	#LR__2463
1e7a0                 | LR__2453
1e7a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e7a0     08 4E 05 F1 | 	add	fp, #8
1e7a4     A7 26 02 FB | 	rdlong	local01, fp
1e7a8     08 4E 85 F1 | 	sub	fp, #8
1e7ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1e7b0     14 4E 05 A1 |  if_e	add	fp, #20
1e7b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7b8     14 4E 85 A1 |  if_e	sub	fp, #20
1e7bc     16 2B 02 A6 |  if_e	mov	local03, local04
1e7c0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e7c4     44 00 90 5D |  if_ne	jmp	#LR__2454
1e7c8     00 26 06 F6 | 	mov	local01, #0
1e7cc     A7 12 02 FB | 	rdlong	arg01, fp
1e7d0     09 13 52 F6 | 	abs	arg01, arg01 wc
1e7d4     1F 2E C6 C9 |  if_b	decod	local05, #31
1e7d8     00 2E 06 36 |  if_ae	mov	local05, #0
1e7dc     08 91 B0 FD | 	call	#__system___float_fromuns
1e7e0     17 FB 61 F5 | 	xor	result1, local05
1e7e4     FD 12 02 F6 | 	mov	arg01, result1
1e7e8     0C 4E 05 F1 | 	add	fp, #12
1e7ec     A7 14 02 FB | 	rdlong	arg02, fp
1e7f0     0C 4E 85 F1 | 	sub	fp, #12
1e7f4     01 16 06 F6 | 	mov	arg03, #1
1e7f8     24 99 B0 FD | 	call	#__system___float_cmp
1e7fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e800     00 26 26 56 |  if_ne	not	local01, #0
1e804     A7 26 62 FC | 	wrlong	local01, fp
1e808     90 02 90 FD | 	jmp	#LR__2463
1e80c                 | LR__2454
1e80c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e80c     08 4E 05 F1 | 	add	fp, #8
1e810     A7 26 02 FB | 	rdlong	local01, fp
1e814     08 4E 85 F1 | 	sub	fp, #8
1e818     1C 26 0E F2 | 	cmp	local01, #28 wz
1e81c     14 4E 05 A1 |  if_e	add	fp, #20
1e820     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e824     14 4E 85 A1 |  if_e	sub	fp, #20
1e828     16 2B 02 A6 |  if_e	mov	local03, local04
1e82c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e830     24 00 90 5D |  if_ne	jmp	#LR__2455
1e834     00 26 06 F6 | 	mov	local01, #0
1e838     A7 28 02 FB | 	rdlong	local02, fp
1e83c     0C 4E 05 F1 | 	add	fp, #12
1e840     A7 2A 02 FB | 	rdlong	local03, fp
1e844     0C 4E 85 F1 | 	sub	fp, #12
1e848     15 29 0A F2 | 	cmp	local02, local03 wz
1e84c     01 26 66 56 |  if_ne	neg	local01, #1
1e850     A7 26 62 FC | 	wrlong	local01, fp
1e854     44 02 90 FD | 	jmp	#LR__2463
1e858                 | LR__2455
1e858                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e858     08 4E 05 F1 | 	add	fp, #8
1e85c     A7 26 02 FB | 	rdlong	local01, fp
1e860     08 4E 85 F1 | 	sub	fp, #8
1e864     1C 26 0E F2 | 	cmp	local01, #28 wz
1e868     14 4E 05 A1 |  if_e	add	fp, #20
1e86c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e870     14 4E 85 A1 |  if_e	sub	fp, #20
1e874     16 2B 02 A6 |  if_e	mov	local03, local04
1e878     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e87c     24 00 90 5D |  if_ne	jmp	#LR__2456
1e880     00 26 06 F6 | 	mov	local01, #0
1e884     A7 28 02 FB | 	rdlong	local02, fp
1e888     0C 4E 05 F1 | 	add	fp, #12
1e88c     A7 2A 02 FB | 	rdlong	local03, fp
1e890     0C 4E 85 F1 | 	sub	fp, #12
1e894     15 29 0A F2 | 	cmp	local02, local03 wz
1e898     01 26 66 56 |  if_ne	neg	local01, #1
1e89c     A7 26 62 FC | 	wrlong	local01, fp
1e8a0     F8 01 90 FD | 	jmp	#LR__2463
1e8a4                 | LR__2456
1e8a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e8a4     08 4E 05 F1 | 	add	fp, #8
1e8a8     A7 26 02 FB | 	rdlong	local01, fp
1e8ac     08 4E 85 F1 | 	sub	fp, #8
1e8b0     1D 26 0E F2 | 	cmp	local01, #29 wz
1e8b4     14 4E 05 A1 |  if_e	add	fp, #20
1e8b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8bc     14 4E 85 A1 |  if_e	sub	fp, #20
1e8c0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e8c4     34 00 90 5D |  if_ne	jmp	#LR__2457
1e8c8     00 26 06 F6 | 	mov	local01, #0
1e8cc     A7 12 02 FB | 	rdlong	arg01, fp
1e8d0     14 90 B0 FD | 	call	#__system___float_fromuns
1e8d4     FD 12 02 F6 | 	mov	arg01, result1
1e8d8     0C 4E 05 F1 | 	add	fp, #12
1e8dc     A7 14 02 FB | 	rdlong	arg02, fp
1e8e0     0C 4E 85 F1 | 	sub	fp, #12
1e8e4     01 16 06 F6 | 	mov	arg03, #1
1e8e8     34 98 B0 FD | 	call	#__system___float_cmp
1e8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1e8f0     00 26 26 56 |  if_ne	not	local01, #0
1e8f4     A7 26 62 FC | 	wrlong	local01, fp
1e8f8     A0 01 90 FD | 	jmp	#LR__2463
1e8fc                 | LR__2457
1e8fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e8fc     08 4E 05 F1 | 	add	fp, #8
1e900     A7 26 02 FB | 	rdlong	local01, fp
1e904     08 4E 85 F1 | 	sub	fp, #8
1e908     1D 26 0E F2 | 	cmp	local01, #29 wz
1e90c     14 4E 05 A1 |  if_e	add	fp, #20
1e910     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e914     14 4E 85 A1 |  if_e	sub	fp, #20
1e918     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e91c     24 00 90 5D |  if_ne	jmp	#LR__2458
1e920     00 26 06 F6 | 	mov	local01, #0
1e924     A7 28 02 FB | 	rdlong	local02, fp
1e928     0C 4E 05 F1 | 	add	fp, #12
1e92c     A7 2A 02 FB | 	rdlong	local03, fp
1e930     0C 4E 85 F1 | 	sub	fp, #12
1e934     15 29 0A F2 | 	cmp	local02, local03 wz
1e938     01 26 66 56 |  if_ne	neg	local01, #1
1e93c     A7 26 62 FC | 	wrlong	local01, fp
1e940     58 01 90 FD | 	jmp	#LR__2463
1e944                 | LR__2458
1e944                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e944     08 4E 05 F1 | 	add	fp, #8
1e948     A7 26 02 FB | 	rdlong	local01, fp
1e94c     08 4E 85 F1 | 	sub	fp, #8
1e950     1D 26 0E F2 | 	cmp	local01, #29 wz
1e954     14 4E 05 A1 |  if_e	add	fp, #20
1e958     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e95c     14 4E 85 A1 |  if_e	sub	fp, #20
1e960     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e964     24 00 90 5D |  if_ne	jmp	#LR__2459
1e968     00 26 06 F6 | 	mov	local01, #0
1e96c     A7 28 02 FB | 	rdlong	local02, fp
1e970     0C 4E 05 F1 | 	add	fp, #12
1e974     A7 2A 02 FB | 	rdlong	local03, fp
1e978     0C 4E 85 F1 | 	sub	fp, #12
1e97c     15 29 0A F2 | 	cmp	local02, local03 wz
1e980     01 26 66 56 |  if_ne	neg	local01, #1
1e984     A7 26 62 FC | 	wrlong	local01, fp
1e988     10 01 90 FD | 	jmp	#LR__2463
1e98c                 | LR__2459
1e98c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e98c     08 4E 05 F1 | 	add	fp, #8
1e990     A7 26 02 FB | 	rdlong	local01, fp
1e994     08 4E 85 F1 | 	sub	fp, #8
1e998     2B 26 0E F2 | 	cmp	local01, #43 wz
1e99c     14 4E 05 A1 |  if_e	add	fp, #20
1e9a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9a4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9a8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e9ac     30 00 90 5D |  if_ne	jmp	#LR__2460
1e9b0     00 26 06 F6 | 	mov	local01, #0
1e9b4     A7 12 02 FB | 	rdlong	arg01, fp
1e9b8     48 E3 BE FD | 	call	#_convertstring
1e9bc     FD 12 02 F6 | 	mov	arg01, result1
1e9c0     0C 4E 05 F1 | 	add	fp, #12
1e9c4     A7 14 02 FB | 	rdlong	arg02, fp
1e9c8     0C 4E 85 F1 | 	sub	fp, #12
1e9cc     CC 64 B0 FD | 	call	#__system___string_cmp
1e9d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9d4     00 26 26 56 |  if_ne	not	local01, #0
1e9d8     A7 26 62 FC | 	wrlong	local01, fp
1e9dc     BC 00 90 FD | 	jmp	#LR__2463
1e9e0                 | LR__2460
1e9e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1e9e0     08 4E 05 F1 | 	add	fp, #8
1e9e4     A7 26 02 FB | 	rdlong	local01, fp
1e9e8     08 4E 85 F1 | 	sub	fp, #8
1e9ec     1F 26 0E F2 | 	cmp	local01, #31 wz
1e9f0     14 4E 05 A1 |  if_e	add	fp, #20
1e9f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9f8     14 4E 85 A1 |  if_e	sub	fp, #20
1e9fc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ea00     34 00 90 5D |  if_ne	jmp	#LR__2461
1ea04     00 26 06 F6 | 	mov	local01, #0
1ea08     A7 28 02 FB | 	rdlong	local02, fp
1ea0c     0C 4E 05 F1 | 	add	fp, #12
1ea10     A7 12 02 FB | 	rdlong	arg01, fp
1ea14     0C 4E 85 F1 | 	sub	fp, #12
1ea18     E8 E2 BE FD | 	call	#_convertstring
1ea1c     FD 14 02 F6 | 	mov	arg02, result1
1ea20     14 13 02 F6 | 	mov	arg01, local02
1ea24     74 64 B0 FD | 	call	#__system___string_cmp
1ea28     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea2c     00 26 26 56 |  if_ne	not	local01, #0
1ea30     A7 26 62 FC | 	wrlong	local01, fp
1ea34     64 00 90 FD | 	jmp	#LR__2463
1ea38                 | LR__2461
1ea38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1ea38     08 4E 05 F1 | 	add	fp, #8
1ea3c     A7 26 02 FB | 	rdlong	local01, fp
1ea40     08 4E 85 F1 | 	sub	fp, #8
1ea44     2B 26 0E F2 | 	cmp	local01, #43 wz
1ea48     14 4E 05 A1 |  if_e	add	fp, #20
1ea4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea50     14 4E 85 A1 |  if_e	sub	fp, #20
1ea54     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ea58     3C 00 90 5D |  if_ne	jmp	#LR__2462
1ea5c     00 26 06 F6 | 	mov	local01, #0
1ea60     A7 12 02 FB | 	rdlong	arg01, fp
1ea64     9C E2 BE FD | 	call	#_convertstring
1ea68     FD 28 02 F6 | 	mov	local02, result1
1ea6c     0C 4E 05 F1 | 	add	fp, #12
1ea70     A7 12 02 FB | 	rdlong	arg01, fp
1ea74     0C 4E 85 F1 | 	sub	fp, #12
1ea78     88 E2 BE FD | 	call	#_convertstring
1ea7c     FD 14 02 F6 | 	mov	arg02, result1
1ea80     14 13 02 F6 | 	mov	arg01, local02
1ea84     14 64 B0 FD | 	call	#__system___string_cmp
1ea88     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea8c     00 26 26 56 |  if_ne	not	local01, #0
1ea90     A7 26 62 FC | 	wrlong	local01, fp
1ea94     04 00 90 FD | 	jmp	#LR__2463
1ea98                 | LR__2462
1ea98     A7 00 68 FC | 	wrlong	#0, fp
1ea9c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ea9c                 | LR__2463
1ea9c     08 4E 05 F1 | 	add	fp, #8
1eaa0     A7 38 68 FC | 	wrlong	#28, fp
1eaa4     08 4E 85 F1 | 	sub	fp, #8
1eaa8     A7 12 02 F6 | 	mov	arg01, fp
1eaac     74 E1 BE FD | 	call	#_push
1eab0     A7 F0 03 F6 | 	mov	ptra, fp
1eab4     B2 00 A0 FD | 	call	#popregs_
1eab8                 | _do_ne_ret
1eab8     2D 00 64 FD | 	ret
1eabc                 | 
1eabc                 | ' 
1eabc                 | ' '--------------------------------- OR
1eabc                 | ' 
1eabc                 | ' sub do_or 
1eabc                 | _do_or
1eabc     03 4A 05 F6 | 	mov	COUNT_, #3
1eac0     A8 00 A0 FD | 	call	#pushregs_
1eac4     18 F0 07 F1 | 	add	ptra, #24
1eac8     C0 E0 BE FD | 	call	#_pop
1eacc     FD 12 02 F6 | 	mov	arg01, result1
1ead0     FE 26 02 F6 | 	mov	local01, result2
1ead4     FF 28 02 F6 | 	mov	local02, result3
1ead8     0C 4E 05 F1 | 	add	fp, #12
1eadc     A7 12 62 FC | 	wrlong	arg01, fp
1eae0     04 4E 05 F1 | 	add	fp, #4
1eae4     A7 26 62 FC | 	wrlong	local01, fp
1eae8     04 4E 05 F1 | 	add	fp, #4
1eaec     A7 28 62 FC | 	wrlong	local02, fp
1eaf0     14 4E 85 F1 | 	sub	fp, #20
1eaf4     94 E0 BE FD | 	call	#_pop
1eaf8     FF 2A 02 F6 | 	mov	local03, result3
1eafc     A7 FA 61 FC | 	wrlong	result1, fp
1eb00     04 4E 05 F1 | 	add	fp, #4
1eb04     A7 FC 61 FC | 	wrlong	result2, fp
1eb08     04 4E 05 F1 | 	add	fp, #4
1eb0c     A7 2A 62 FC | 	wrlong	local03, fp
1eb10                 | ' 
1eb10                 | ' t2=pop()
1eb10                 | ' t1=pop()
1eb10                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1eb10     08 4E 85 F1 | 	sub	fp, #8
1eb14     1C 2A 0E F2 | 	cmp	local03, #28 wz
1eb18     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb1c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1eb20     08 4E 05 A1 |  if_e	add	fp, #8
1eb24     A7 3A 68 AC |  if_e	wrlong	#29, fp
1eb28     08 4E 85 A1 |  if_e	sub	fp, #8
1eb2c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1eb2c     14 4E 05 F1 | 	add	fp, #20
1eb30     A7 2A 02 FB | 	rdlong	local03, fp
1eb34     14 4E 85 F1 | 	sub	fp, #20
1eb38     1C 2A 0E F2 | 	cmp	local03, #28 wz
1eb3c     18 00 90 5D |  if_ne	jmp	#LR__2470
1eb40     0C 4E 05 F1 | 	add	fp, #12
1eb44     A7 2A 02 FB | 	rdlong	local03, fp
1eb48     A7 2A 62 FC | 	wrlong	local03, fp
1eb4c     08 4E 05 F1 | 	add	fp, #8
1eb50     A7 3A 68 FC | 	wrlong	#29, fp
1eb54     14 4E 85 F1 | 	sub	fp, #20
1eb58                 | LR__2470
1eb58                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1eb58     08 4E 05 F1 | 	add	fp, #8
1eb5c     A7 2A 02 FB | 	rdlong	local03, fp
1eb60     08 4E 85 F1 | 	sub	fp, #8
1eb64     1F 2A 0E F2 | 	cmp	local03, #31 wz
1eb68     14 4E 05 51 |  if_ne	add	fp, #20
1eb6c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1eb70     14 4E 85 51 |  if_ne	sub	fp, #20
1eb74     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1eb78     08 4E 05 51 |  if_ne	add	fp, #8
1eb7c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1eb80     08 4E 85 51 |  if_ne	sub	fp, #8
1eb84     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1eb88     14 4E 05 51 |  if_ne	add	fp, #20
1eb8c     14 4E 85 51 |  if_ne	sub	fp, #20
1eb90     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1eb94     A7 0C 68 AC |  if_e	wrlong	#6, fp
1eb98     08 4E 05 A1 |  if_e	add	fp, #8
1eb9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1eba0     08 4E 85 A1 |  if_e	sub	fp, #8
1eba4     18 00 90 AD |  if_e	jmp	#LR__2471
1eba8     A7 2A 02 FB | 	rdlong	local03, fp
1ebac     0C 4E 05 F1 | 	add	fp, #12
1ebb0     A7 26 02 FB | 	rdlong	local01, fp
1ebb4     0C 4E 85 F1 | 	sub	fp, #12
1ebb8     13 2B 42 F5 | 	or	local03, local01
1ebbc     A7 2A 62 FC | 	wrlong	local03, fp
1ebc0                 | LR__2471
1ebc0     A7 12 02 F6 | 	mov	arg01, fp
1ebc4     5C E0 BE FD | 	call	#_push
1ebc8     A7 F0 03 F6 | 	mov	ptra, fp
1ebcc     B2 00 A0 FD | 	call	#popregs_
1ebd0                 | _do_or_ret
1ebd0     2D 00 64 FD | 	ret
1ebd4                 | 
1ebd4                 | ' 
1ebd4                 | ' '--------------------------------- plus (+)
1ebd4                 | ' 
1ebd4                 | ' sub do_plus 
1ebd4                 | _do_plus
1ebd4     05 4A 05 F6 | 	mov	COUNT_, #5
1ebd8     A8 00 A0 FD | 	call	#pushregs_
1ebdc     18 F0 07 F1 | 	add	ptra, #24
1ebe0     A8 DF BE FD | 	call	#_pop
1ebe4     FD 26 02 F6 | 	mov	local01, result1
1ebe8     FE 28 02 F6 | 	mov	local02, result2
1ebec     FF 2A 02 F6 | 	mov	local03, result3
1ebf0     0C 4E 05 F1 | 	add	fp, #12
1ebf4     A7 26 62 FC | 	wrlong	local01, fp
1ebf8     04 4E 05 F1 | 	add	fp, #4
1ebfc     A7 28 62 FC | 	wrlong	local02, fp
1ec00     04 4E 05 F1 | 	add	fp, #4
1ec04     A7 2A 62 FC | 	wrlong	local03, fp
1ec08     14 4E 85 F1 | 	sub	fp, #20
1ec0c     7C DF BE FD | 	call	#_pop
1ec10     FF 2A 02 F6 | 	mov	local03, result3
1ec14     A7 FA 61 FC | 	wrlong	result1, fp
1ec18     04 4E 05 F1 | 	add	fp, #4
1ec1c     A7 FC 61 FC | 	wrlong	result2, fp
1ec20     04 4E 05 F1 | 	add	fp, #4
1ec24     A7 2A 62 FC | 	wrlong	local03, fp
1ec28                 | ' 
1ec28                 | ' t2=pop()
1ec28                 | ' t1=pop()
1ec28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1ec28     08 4E 85 F1 | 	sub	fp, #8
1ec2c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ec30     14 4E 05 A1 |  if_e	add	fp, #20
1ec34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec38     14 4E 85 A1 |  if_e	sub	fp, #20
1ec3c     16 2B 02 A6 |  if_e	mov	local03, local04
1ec40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ec44     1C 00 90 5D |  if_ne	jmp	#LR__2480
1ec48     A7 26 02 FB | 	rdlong	local01, fp
1ec4c     0C 4E 05 F1 | 	add	fp, #12
1ec50     A7 28 02 FB | 	rdlong	local02, fp
1ec54     0C 4E 85 F1 | 	sub	fp, #12
1ec58     14 27 02 F1 | 	add	local01, local02
1ec5c     A7 26 62 FC | 	wrlong	local01, fp
1ec60     48 04 90 FD | 	jmp	#LR__2495
1ec64                 | LR__2480
1ec64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1ec64     08 4E 05 F1 | 	add	fp, #8
1ec68     A7 26 02 FB | 	rdlong	local01, fp
1ec6c     08 4E 85 F1 | 	sub	fp, #8
1ec70     1D 26 0E F2 | 	cmp	local01, #29 wz
1ec74     14 4E 05 A1 |  if_e	add	fp, #20
1ec78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec7c     14 4E 85 A1 |  if_e	sub	fp, #20
1ec80     16 2B 02 A6 |  if_e	mov	local03, local04
1ec84     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ec88     28 00 90 5D |  if_ne	jmp	#LR__2481
1ec8c     A7 26 02 FB | 	rdlong	local01, fp
1ec90     0C 4E 05 F1 | 	add	fp, #12
1ec94     A7 28 02 FB | 	rdlong	local02, fp
1ec98     0C 4E 85 F1 | 	sub	fp, #12
1ec9c     14 27 02 F1 | 	add	local01, local02
1eca0     A7 26 62 FC | 	wrlong	local01, fp
1eca4     08 4E 05 F1 | 	add	fp, #8
1eca8     A7 38 68 FC | 	wrlong	#28, fp
1ecac     08 4E 85 F1 | 	sub	fp, #8
1ecb0     F8 03 90 FD | 	jmp	#LR__2495
1ecb4                 | LR__2481
1ecb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ecb4     08 4E 05 F1 | 	add	fp, #8
1ecb8     A7 26 02 FB | 	rdlong	local01, fp
1ecbc     08 4E 85 F1 | 	sub	fp, #8
1ecc0     1D 26 0E F2 | 	cmp	local01, #29 wz
1ecc4     14 4E 05 A1 |  if_e	add	fp, #20
1ecc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eccc     14 4E 85 A1 |  if_e	sub	fp, #20
1ecd0     16 2B 02 A6 |  if_e	mov	local03, local04
1ecd4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ecd8     30 00 90 5D |  if_ne	jmp	#LR__2482
1ecdc     A7 12 02 FB | 	rdlong	arg01, fp
1ece0     04 8C B0 FD | 	call	#__system___float_fromuns
1ece4     FD 12 02 F6 | 	mov	arg01, result1
1ece8     0C 4E 05 F1 | 	add	fp, #12
1ecec     A7 14 02 FB | 	rdlong	arg02, fp
1ecf0     0C 4E 85 F1 | 	sub	fp, #12
1ecf4     24 8C B0 FD | 	call	#__system___float_add
1ecf8     A7 FA 61 FC | 	wrlong	result1, fp
1ecfc     08 4E 05 F1 | 	add	fp, #8
1ed00     A7 3C 68 FC | 	wrlong	#30, fp
1ed04     08 4E 85 F1 | 	sub	fp, #8
1ed08     A0 03 90 FD | 	jmp	#LR__2495
1ed0c                 | LR__2482
1ed0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1ed0c     08 4E 05 F1 | 	add	fp, #8
1ed10     A7 26 02 FB | 	rdlong	local01, fp
1ed14     08 4E 85 F1 | 	sub	fp, #8
1ed18     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed1c     14 4E 05 A1 |  if_e	add	fp, #20
1ed20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed24     14 4E 85 A1 |  if_e	sub	fp, #20
1ed28     16 2B 02 A6 |  if_e	mov	local03, local04
1ed2c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed30     1C 00 90 5D |  if_ne	jmp	#LR__2483
1ed34     A7 26 02 FB | 	rdlong	local01, fp
1ed38     0C 4E 05 F1 | 	add	fp, #12
1ed3c     A7 28 02 FB | 	rdlong	local02, fp
1ed40     0C 4E 85 F1 | 	sub	fp, #12
1ed44     14 27 02 F1 | 	add	local01, local02
1ed48     A7 26 62 FC | 	wrlong	local01, fp
1ed4c     5C 03 90 FD | 	jmp	#LR__2495
1ed50                 | LR__2483
1ed50                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1ed50     08 4E 05 F1 | 	add	fp, #8
1ed54     A7 26 02 FB | 	rdlong	local01, fp
1ed58     08 4E 85 F1 | 	sub	fp, #8
1ed5c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed60     14 4E 05 A1 |  if_e	add	fp, #20
1ed64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed68     14 4E 85 A1 |  if_e	sub	fp, #20
1ed6c     16 2B 02 A6 |  if_e	mov	local03, local04
1ed70     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ed74     1C 00 90 5D |  if_ne	jmp	#LR__2484
1ed78     A7 26 02 FB | 	rdlong	local01, fp
1ed7c     0C 4E 05 F1 | 	add	fp, #12
1ed80     A7 28 02 FB | 	rdlong	local02, fp
1ed84     0C 4E 85 F1 | 	sub	fp, #12
1ed88     14 27 02 F1 | 	add	local01, local02
1ed8c     A7 26 62 FC | 	wrlong	local01, fp
1ed90     18 03 90 FD | 	jmp	#LR__2495
1ed94                 | LR__2484
1ed94                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ed94     08 4E 05 F1 | 	add	fp, #8
1ed98     A7 26 02 FB | 	rdlong	local01, fp
1ed9c     08 4E 85 F1 | 	sub	fp, #8
1eda0     1C 26 0E F2 | 	cmp	local01, #28 wz
1eda4     14 4E 05 A1 |  if_e	add	fp, #20
1eda8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edac     14 4E 85 A1 |  if_e	sub	fp, #20
1edb0     16 2B 02 A6 |  if_e	mov	local03, local04
1edb4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1edb8     40 00 90 5D |  if_ne	jmp	#LR__2485
1edbc     A7 12 02 FB | 	rdlong	arg01, fp
1edc0     09 13 52 F6 | 	abs	arg01, arg01 wc
1edc4     1F 2E C6 C9 |  if_b	decod	local05, #31
1edc8     00 2E 06 36 |  if_ae	mov	local05, #0
1edcc     18 8B B0 FD | 	call	#__system___float_fromuns
1edd0     17 FB 61 F5 | 	xor	result1, local05
1edd4     FD 12 02 F6 | 	mov	arg01, result1
1edd8     0C 4E 05 F1 | 	add	fp, #12
1eddc     A7 14 02 FB | 	rdlong	arg02, fp
1ede0     0C 4E 85 F1 | 	sub	fp, #12
1ede4     34 8B B0 FD | 	call	#__system___float_add
1ede8     A7 FA 61 FC | 	wrlong	result1, fp
1edec     08 4E 05 F1 | 	add	fp, #8
1edf0     A7 3C 68 FC | 	wrlong	#30, fp
1edf4     08 4E 85 F1 | 	sub	fp, #8
1edf8     B0 02 90 FD | 	jmp	#LR__2495
1edfc                 | LR__2485
1edfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1edfc     08 4E 05 F1 | 	add	fp, #8
1ee00     A7 26 02 FB | 	rdlong	local01, fp
1ee04     08 4E 85 F1 | 	sub	fp, #8
1ee08     1E 26 0E F2 | 	cmp	local01, #30 wz
1ee0c     14 4E 05 A1 |  if_e	add	fp, #20
1ee10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee14     14 4E 85 A1 |  if_e	sub	fp, #20
1ee18     16 2B 02 A6 |  if_e	mov	local03, local04
1ee1c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee20     28 00 90 5D |  if_ne	jmp	#LR__2486
1ee24     A7 26 02 FB | 	rdlong	local01, fp
1ee28     0C 4E 05 F1 | 	add	fp, #12
1ee2c     A7 12 02 FB | 	rdlong	arg01, fp
1ee30     0C 4E 85 F1 | 	sub	fp, #12
1ee34     B0 8A B0 FD | 	call	#__system___float_fromuns
1ee38     FD 14 02 F6 | 	mov	arg02, result1
1ee3c     13 13 02 F6 | 	mov	arg01, local01
1ee40     D8 8A B0 FD | 	call	#__system___float_add
1ee44     A7 FA 61 FC | 	wrlong	result1, fp
1ee48     60 02 90 FD | 	jmp	#LR__2495
1ee4c                 | LR__2486
1ee4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1ee4c     08 4E 05 F1 | 	add	fp, #8
1ee50     A7 26 02 FB | 	rdlong	local01, fp
1ee54     08 4E 85 F1 | 	sub	fp, #8
1ee58     1E 26 0E F2 | 	cmp	local01, #30 wz
1ee5c     14 4E 05 A1 |  if_e	add	fp, #20
1ee60     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee64     14 4E 85 A1 |  if_e	sub	fp, #20
1ee68     16 2B 02 A6 |  if_e	mov	local03, local04
1ee6c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee70     38 00 90 5D |  if_ne	jmp	#LR__2487
1ee74     A7 26 02 FB | 	rdlong	local01, fp
1ee78     0C 4E 05 F1 | 	add	fp, #12
1ee7c     A7 12 02 FB | 	rdlong	arg01, fp
1ee80     0C 4E 85 F1 | 	sub	fp, #12
1ee84     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee88     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee8c     00 2E 06 36 |  if_ae	mov	local05, #0
1ee90     54 8A B0 FD | 	call	#__system___float_fromuns
1ee94     17 FB 61 F5 | 	xor	result1, local05
1ee98     FD 14 02 F6 | 	mov	arg02, result1
1ee9c     13 13 02 F6 | 	mov	arg01, local01
1eea0     78 8A B0 FD | 	call	#__system___float_add
1eea4     A7 FA 61 FC | 	wrlong	result1, fp
1eea8     00 02 90 FD | 	jmp	#LR__2495
1eeac                 | LR__2487
1eeac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1eeac     08 4E 05 F1 | 	add	fp, #8
1eeb0     A7 26 02 FB | 	rdlong	local01, fp
1eeb4     08 4E 85 F1 | 	sub	fp, #8
1eeb8     1E 26 0E F2 | 	cmp	local01, #30 wz
1eebc     14 4E 05 A1 |  if_e	add	fp, #20
1eec0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eec4     14 4E 85 A1 |  if_e	sub	fp, #20
1eec8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1eecc     1C 00 90 5D |  if_ne	jmp	#LR__2488
1eed0     A7 12 02 FB | 	rdlong	arg01, fp
1eed4     0C 4E 05 F1 | 	add	fp, #12
1eed8     A7 14 02 FB | 	rdlong	arg02, fp
1eedc     0C 4E 85 F1 | 	sub	fp, #12
1eee0     38 8A B0 FD | 	call	#__system___float_add
1eee4     A7 FA 61 FC | 	wrlong	result1, fp
1eee8     C0 01 90 FD | 	jmp	#LR__2495
1eeec                 | LR__2488
1eeec                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1eeec     08 4E 05 F1 | 	add	fp, #8
1eef0     A7 26 02 FB | 	rdlong	local01, fp
1eef4     08 4E 85 F1 | 	sub	fp, #8
1eef8     1F 26 0E F2 | 	cmp	local01, #31 wz
1eefc     24 00 90 5D |  if_ne	jmp	#LR__2489
1ef00     14 4E 05 F1 | 	add	fp, #20
1ef04     A7 2A 02 FB | 	rdlong	local03, fp
1ef08     14 4E 85 F1 | 	sub	fp, #20
1ef0c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ef10     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ef14     08 4E 05 51 |  if_ne	add	fp, #8
1ef18     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ef1c     08 4E 85 51 |  if_ne	sub	fp, #8
1ef20     88 01 90 5D |  if_ne	jmp	#LR__2495
1ef24                 | LR__2489
1ef24                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ef24     14 4E 05 F1 | 	add	fp, #20
1ef28     A7 26 02 FB | 	rdlong	local01, fp
1ef2c     14 4E 85 F1 | 	sub	fp, #20
1ef30     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef34     24 00 90 5D |  if_ne	jmp	#LR__2490
1ef38     08 4E 05 F1 | 	add	fp, #8
1ef3c     A7 2A 02 FB | 	rdlong	local03, fp
1ef40     08 4E 85 F1 | 	sub	fp, #8
1ef44     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ef48     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ef4c     08 4E 05 51 |  if_ne	add	fp, #8
1ef50     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ef54     08 4E 85 51 |  if_ne	sub	fp, #8
1ef58     50 01 90 5D |  if_ne	jmp	#LR__2495
1ef5c                 | LR__2490
1ef5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1ef5c     08 4E 05 F1 | 	add	fp, #8
1ef60     A7 26 02 FB | 	rdlong	local01, fp
1ef64     08 4E 85 F1 | 	sub	fp, #8
1ef68     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef6c     14 4E 05 A1 |  if_e	add	fp, #20
1ef70     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef74     14 4E 85 A1 |  if_e	sub	fp, #20
1ef78     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ef7c     1C 00 90 5D |  if_ne	jmp	#LR__2491
1ef80     A7 12 02 FB | 	rdlong	arg01, fp
1ef84     0C 4E 05 F1 | 	add	fp, #12
1ef88     A7 14 02 FB | 	rdlong	arg02, fp
1ef8c     0C 4E 85 F1 | 	sub	fp, #12
1ef90     3C 5F B0 FD | 	call	#__system___string_concat
1ef94     A7 FA 61 FC | 	wrlong	result1, fp
1ef98     10 01 90 FD | 	jmp	#LR__2495
1ef9c                 | LR__2491
1ef9c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1ef9c     08 4E 05 F1 | 	add	fp, #8
1efa0     A7 26 02 FB | 	rdlong	local01, fp
1efa4     08 4E 85 F1 | 	sub	fp, #8
1efa8     2B 26 0E F2 | 	cmp	local01, #43 wz
1efac     14 4E 05 A1 |  if_e	add	fp, #20
1efb0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efb4     14 4E 85 A1 |  if_e	sub	fp, #20
1efb8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1efbc     30 00 90 5D |  if_ne	jmp	#LR__2492
1efc0     A7 12 02 FB | 	rdlong	arg01, fp
1efc4     3C DD BE FD | 	call	#_convertstring
1efc8     FD 12 02 F6 | 	mov	arg01, result1
1efcc     0C 4E 05 F1 | 	add	fp, #12
1efd0     A7 14 02 FB | 	rdlong	arg02, fp
1efd4     0C 4E 85 F1 | 	sub	fp, #12
1efd8     F4 5E B0 FD | 	call	#__system___string_concat
1efdc     A7 FA 61 FC | 	wrlong	result1, fp
1efe0     08 4E 05 F1 | 	add	fp, #8
1efe4     A7 3E 68 FC | 	wrlong	#31, fp
1efe8     08 4E 85 F1 | 	sub	fp, #8
1efec     BC 00 90 FD | 	jmp	#LR__2495
1eff0                 | LR__2492
1eff0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1eff0     08 4E 05 F1 | 	add	fp, #8
1eff4     A7 26 02 FB | 	rdlong	local01, fp
1eff8     08 4E 85 F1 | 	sub	fp, #8
1effc     1F 26 0E F2 | 	cmp	local01, #31 wz
1f000     14 4E 05 A1 |  if_e	add	fp, #20
1f004     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f008     14 4E 85 A1 |  if_e	sub	fp, #20
1f00c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f010     28 00 90 5D |  if_ne	jmp	#LR__2493
1f014     A7 26 02 FB | 	rdlong	local01, fp
1f018     0C 4E 05 F1 | 	add	fp, #12
1f01c     A7 12 02 FB | 	rdlong	arg01, fp
1f020     0C 4E 85 F1 | 	sub	fp, #12
1f024     DC DC BE FD | 	call	#_convertstring
1f028     FD 14 02 F6 | 	mov	arg02, result1
1f02c     13 13 02 F6 | 	mov	arg01, local01
1f030     9C 5E B0 FD | 	call	#__system___string_concat
1f034     A7 FA 61 FC | 	wrlong	result1, fp
1f038     70 00 90 FD | 	jmp	#LR__2495
1f03c                 | LR__2493
1f03c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1f03c     08 4E 05 F1 | 	add	fp, #8
1f040     A7 26 02 FB | 	rdlong	local01, fp
1f044     08 4E 85 F1 | 	sub	fp, #8
1f048     2B 26 0E F2 | 	cmp	local01, #43 wz
1f04c     14 4E 05 A1 |  if_e	add	fp, #20
1f050     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f054     14 4E 85 A1 |  if_e	sub	fp, #20
1f058     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f05c     3C 00 90 5D |  if_ne	jmp	#LR__2494
1f060     A7 12 02 FB | 	rdlong	arg01, fp
1f064     9C DC BE FD | 	call	#_convertstring
1f068     FD 26 02 F6 | 	mov	local01, result1
1f06c     0C 4E 05 F1 | 	add	fp, #12
1f070     A7 12 02 FB | 	rdlong	arg01, fp
1f074     0C 4E 85 F1 | 	sub	fp, #12
1f078     88 DC BE FD | 	call	#_convertstring
1f07c     FD 14 02 F6 | 	mov	arg02, result1
1f080     13 13 02 F6 | 	mov	arg01, local01
1f084     48 5E B0 FD | 	call	#__system___string_concat
1f088     A7 FA 61 FC | 	wrlong	result1, fp
1f08c     08 4E 05 F1 | 	add	fp, #8
1f090     A7 3E 68 FC | 	wrlong	#31, fp
1f094     08 4E 85 F1 | 	sub	fp, #8
1f098     10 00 90 FD | 	jmp	#LR__2495
1f09c                 | LR__2494
1f09c     A7 08 68 FC | 	wrlong	#4, fp
1f0a0     08 4E 05 F1 | 	add	fp, #8
1f0a4     A7 FE 69 FC | 	wrlong	#255, fp
1f0a8     08 4E 85 F1 | 	sub	fp, #8
1f0ac                 | LR__2495
1f0ac     A7 12 02 F6 | 	mov	arg01, fp
1f0b0     70 DB BE FD | 	call	#_push
1f0b4     A7 F0 03 F6 | 	mov	ptra, fp
1f0b8     B2 00 A0 FD | 	call	#popregs_
1f0bc                 | _do_plus_ret
1f0bc     2D 00 64 FD | 	ret
1f0c0                 | 
1f0c0                 | ' 
1f0c0                 | ' '--------------------------------- power (^)
1f0c0                 | ' 
1f0c0                 | ' sub do_power 
1f0c0                 | _do_power
1f0c0     02 4A 05 F6 | 	mov	COUNT_, #2
1f0c4     A8 00 A0 FD | 	call	#pushregs_
1f0c8     18 F0 07 F1 | 	add	ptra, #24
1f0cc     BC DA BE FD | 	call	#_pop
1f0d0     FD 14 02 F6 | 	mov	arg02, result1
1f0d4     FE 12 02 F6 | 	mov	arg01, result2
1f0d8     FF 26 02 F6 | 	mov	local01, result3
1f0dc     0C 4E 05 F1 | 	add	fp, #12
1f0e0     A7 14 62 FC | 	wrlong	arg02, fp
1f0e4     04 4E 05 F1 | 	add	fp, #4
1f0e8     A7 12 62 FC | 	wrlong	arg01, fp
1f0ec     04 4E 05 F1 | 	add	fp, #4
1f0f0     A7 26 62 FC | 	wrlong	local01, fp
1f0f4     14 4E 85 F1 | 	sub	fp, #20
1f0f8     90 DA BE FD | 	call	#_pop
1f0fc     A7 FA 61 FC | 	wrlong	result1, fp
1f100     04 4E 05 F1 | 	add	fp, #4
1f104     A7 FC 61 FC | 	wrlong	result2, fp
1f108     04 4E 05 F1 | 	add	fp, #4
1f10c     A7 FE 61 FC | 	wrlong	result3, fp
1f110                 | ' 
1f110                 | ' t2=pop()
1f110                 | ' t1=pop()
1f110                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1f110     08 4E 85 F1 | 	sub	fp, #8
1f114     1F FE 0D F2 | 	cmp	result3, #31 wz
1f118     14 4E 05 51 |  if_ne	add	fp, #20
1f11c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1f120     14 4E 85 51 |  if_ne	sub	fp, #20
1f124     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1f128     A7 18 68 AC |  if_e	wrlong	#12, fp
1f12c     08 4E 05 A1 |  if_e	add	fp, #8
1f130     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f134     08 4E 85 A1 |  if_e	sub	fp, #8
1f138     38 01 90 AD |  if_e	jmp	#LR__2505
1f13c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1f13c     08 4E 05 F1 | 	add	fp, #8
1f140     A7 14 02 FB | 	rdlong	arg02, fp
1f144     08 4E 85 F1 | 	sub	fp, #8
1f148     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f14c     28 00 90 5D |  if_ne	jmp	#LR__2500
1f150     08 4E 05 F1 | 	add	fp, #8
1f154     A7 3C 68 FC | 	wrlong	#30, fp
1f158     08 4E 85 F1 | 	sub	fp, #8
1f15c     A7 12 02 FB | 	rdlong	arg01, fp
1f160     09 13 52 F6 | 	abs	arg01, arg01 wc
1f164     1F 28 C6 C9 |  if_b	decod	local02, #31
1f168     00 28 06 36 |  if_ae	mov	local02, #0
1f16c     78 87 B0 FD | 	call	#__system___float_fromuns
1f170     14 FB 61 F5 | 	xor	result1, local02
1f174     A7 FA 61 FC | 	wrlong	result1, fp
1f178                 | LR__2500
1f178                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1f178     08 4E 05 F1 | 	add	fp, #8
1f17c     A7 14 02 FB | 	rdlong	arg02, fp
1f180     08 4E 85 F1 | 	sub	fp, #8
1f184     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f188     18 00 90 5D |  if_ne	jmp	#LR__2501
1f18c     08 4E 05 F1 | 	add	fp, #8
1f190     A7 3C 68 FC | 	wrlong	#30, fp
1f194     08 4E 85 F1 | 	sub	fp, #8
1f198     A7 12 02 FB | 	rdlong	arg01, fp
1f19c     48 87 B0 FD | 	call	#__system___float_fromuns
1f1a0     A7 FA 61 FC | 	wrlong	result1, fp
1f1a4                 | LR__2501
1f1a4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1f1a4     14 4E 05 F1 | 	add	fp, #20
1f1a8     A7 14 02 FB | 	rdlong	arg02, fp
1f1ac     14 4E 85 F1 | 	sub	fp, #20
1f1b0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f1b4     34 00 90 5D |  if_ne	jmp	#LR__2502
1f1b8     14 4E 05 F1 | 	add	fp, #20
1f1bc     A7 3C 68 FC | 	wrlong	#30, fp
1f1c0     08 4E 85 F1 | 	sub	fp, #8
1f1c4     A7 12 02 FB | 	rdlong	arg01, fp
1f1c8     0C 4E 85 F1 | 	sub	fp, #12
1f1cc     09 13 52 F6 | 	abs	arg01, arg01 wc
1f1d0     1F 28 C6 C9 |  if_b	decod	local02, #31
1f1d4     00 28 06 36 |  if_ae	mov	local02, #0
1f1d8     0C 87 B0 FD | 	call	#__system___float_fromuns
1f1dc     14 FB 61 F5 | 	xor	result1, local02
1f1e0     0C 4E 05 F1 | 	add	fp, #12
1f1e4     A7 FA 61 FC | 	wrlong	result1, fp
1f1e8     0C 4E 85 F1 | 	sub	fp, #12
1f1ec                 | LR__2502
1f1ec                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1f1ec     14 4E 05 F1 | 	add	fp, #20
1f1f0     A7 14 02 FB | 	rdlong	arg02, fp
1f1f4     14 4E 85 F1 | 	sub	fp, #20
1f1f8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f1fc     24 00 90 5D |  if_ne	jmp	#LR__2503
1f200     14 4E 05 F1 | 	add	fp, #20
1f204     A7 3C 68 FC | 	wrlong	#30, fp
1f208     08 4E 85 F1 | 	sub	fp, #8
1f20c     A7 12 02 FB | 	rdlong	arg01, fp
1f210     0C 4E 85 F1 | 	sub	fp, #12
1f214     D0 86 B0 FD | 	call	#__system___float_fromuns
1f218     0C 4E 05 F1 | 	add	fp, #12
1f21c     A7 FA 61 FC | 	wrlong	result1, fp
1f220     0C 4E 85 F1 | 	sub	fp, #12
1f224                 | LR__2503
1f224                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1f224     08 4E 05 F1 | 	add	fp, #8
1f228     A7 14 02 FB | 	rdlong	arg02, fp
1f22c     08 4E 85 F1 | 	sub	fp, #8
1f230     1E 14 0E F2 | 	cmp	arg02, #30 wz
1f234     14 4E 05 A1 |  if_e	add	fp, #20
1f238     A7 26 02 AB |  if_e	rdlong	local01, fp
1f23c     14 4E 85 A1 |  if_e	sub	fp, #20
1f240     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1f244     1C 00 90 5D |  if_ne	jmp	#LR__2504
1f248     A7 12 02 FB | 	rdlong	arg01, fp
1f24c     0C 4E 05 F1 | 	add	fp, #12
1f250     A7 14 02 FB | 	rdlong	arg02, fp
1f254     0C 4E 85 F1 | 	sub	fp, #12
1f258     98 99 B0 FD | 	call	#__system____builtin_powf
1f25c     A7 FA 61 FC | 	wrlong	result1, fp
1f260     10 00 90 FD | 	jmp	#LR__2505
1f264                 | LR__2504
1f264     A7 1A 68 FC | 	wrlong	#13, fp
1f268     08 4E 05 F1 | 	add	fp, #8
1f26c     A7 FE 69 FC | 	wrlong	#255, fp
1f270     08 4E 85 F1 | 	sub	fp, #8
1f274                 | LR__2505
1f274     A7 12 02 F6 | 	mov	arg01, fp
1f278     A8 D9 BE FD | 	call	#_push
1f27c     A7 F0 03 F6 | 	mov	ptra, fp
1f280     B2 00 A0 FD | 	call	#popregs_
1f284                 | _do_power_ret
1f284     2D 00 64 FD | 	ret
1f288                 | 
1f288                 | ' 
1f288                 | ' '--------------------------------- SHL
1f288                 | ' 
1f288                 | ' sub do_shl 
1f288                 | _do_shl
1f288     03 4A 05 F6 | 	mov	COUNT_, #3
1f28c     A8 00 A0 FD | 	call	#pushregs_
1f290     18 F0 07 F1 | 	add	ptra, #24
1f294     F4 D8 BE FD | 	call	#_pop
1f298     FD 12 02 F6 | 	mov	arg01, result1
1f29c     FE 26 02 F6 | 	mov	local01, result2
1f2a0     FF 28 02 F6 | 	mov	local02, result3
1f2a4     0C 4E 05 F1 | 	add	fp, #12
1f2a8     A7 12 62 FC | 	wrlong	arg01, fp
1f2ac     04 4E 05 F1 | 	add	fp, #4
1f2b0     A7 26 62 FC | 	wrlong	local01, fp
1f2b4     04 4E 05 F1 | 	add	fp, #4
1f2b8     A7 28 62 FC | 	wrlong	local02, fp
1f2bc     14 4E 85 F1 | 	sub	fp, #20
1f2c0     C8 D8 BE FD | 	call	#_pop
1f2c4     FF 2A 02 F6 | 	mov	local03, result3
1f2c8     A7 FA 61 FC | 	wrlong	result1, fp
1f2cc     04 4E 05 F1 | 	add	fp, #4
1f2d0     A7 FC 61 FC | 	wrlong	result2, fp
1f2d4     04 4E 05 F1 | 	add	fp, #4
1f2d8     A7 2A 62 FC | 	wrlong	local03, fp
1f2dc                 | ' 
1f2dc                 | ' t2=pop()
1f2dc                 | ' t1=pop()
1f2dc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f2dc     08 4E 85 F1 | 	sub	fp, #8
1f2e0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f2e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f2e8     A7 2A 62 AC |  if_e	wrlong	local03, fp
1f2ec     08 4E 05 A1 |  if_e	add	fp, #8
1f2f0     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f2f4     08 4E 85 A1 |  if_e	sub	fp, #8
1f2f8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f2f8     14 4E 05 F1 | 	add	fp, #20
1f2fc     A7 2A 02 FB | 	rdlong	local03, fp
1f300     14 4E 85 F1 | 	sub	fp, #20
1f304     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f308     18 00 90 5D |  if_ne	jmp	#LR__2510
1f30c     0C 4E 05 F1 | 	add	fp, #12
1f310     A7 2A 02 FB | 	rdlong	local03, fp
1f314     A7 2A 62 FC | 	wrlong	local03, fp
1f318     08 4E 05 F1 | 	add	fp, #8
1f31c     A7 3A 68 FC | 	wrlong	#29, fp
1f320     14 4E 85 F1 | 	sub	fp, #20
1f324                 | LR__2510
1f324                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1f324     08 4E 05 F1 | 	add	fp, #8
1f328     A7 2A 02 FB | 	rdlong	local03, fp
1f32c     08 4E 85 F1 | 	sub	fp, #8
1f330     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f334     14 4E 05 51 |  if_ne	add	fp, #20
1f338     A7 28 02 5B |  if_ne	rdlong	local02, fp
1f33c     14 4E 85 51 |  if_ne	sub	fp, #20
1f340     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1f344     08 4E 05 51 |  if_ne	add	fp, #8
1f348     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f34c     08 4E 85 51 |  if_ne	sub	fp, #8
1f350     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f354     14 4E 05 51 |  if_ne	add	fp, #20
1f358     14 4E 85 51 |  if_ne	sub	fp, #20
1f35c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1f360     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f364     08 4E 05 A1 |  if_e	add	fp, #8
1f368     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f36c     08 4E 85 A1 |  if_e	sub	fp, #8
1f370     18 00 90 AD |  if_e	jmp	#LR__2511
1f374     A7 2A 02 FB | 	rdlong	local03, fp
1f378     0C 4E 05 F1 | 	add	fp, #12
1f37c     A7 26 02 FB | 	rdlong	local01, fp
1f380     0C 4E 85 F1 | 	sub	fp, #12
1f384     13 2B 62 F0 | 	shl	local03, local01
1f388     A7 2A 62 FC | 	wrlong	local03, fp
1f38c                 | LR__2511
1f38c     A7 12 02 F6 | 	mov	arg01, fp
1f390     90 D8 BE FD | 	call	#_push
1f394     A7 F0 03 F6 | 	mov	ptra, fp
1f398     B2 00 A0 FD | 	call	#popregs_
1f39c                 | _do_shl_ret
1f39c     2D 00 64 FD | 	ret
1f3a0                 | 
1f3a0                 | ' 
1f3a0                 | ' '--------------------------------- SHR
1f3a0                 | ' 
1f3a0                 | ' sub do_shr 
1f3a0                 | _do_shr
1f3a0     03 4A 05 F6 | 	mov	COUNT_, #3
1f3a4     A8 00 A0 FD | 	call	#pushregs_
1f3a8     18 F0 07 F1 | 	add	ptra, #24
1f3ac     DC D7 BE FD | 	call	#_pop
1f3b0     FD 12 02 F6 | 	mov	arg01, result1
1f3b4     FE 26 02 F6 | 	mov	local01, result2
1f3b8     FF 28 02 F6 | 	mov	local02, result3
1f3bc     0C 4E 05 F1 | 	add	fp, #12
1f3c0     A7 12 62 FC | 	wrlong	arg01, fp
1f3c4     04 4E 05 F1 | 	add	fp, #4
1f3c8     A7 26 62 FC | 	wrlong	local01, fp
1f3cc     04 4E 05 F1 | 	add	fp, #4
1f3d0     A7 28 62 FC | 	wrlong	local02, fp
1f3d4     14 4E 85 F1 | 	sub	fp, #20
1f3d8     B0 D7 BE FD | 	call	#_pop
1f3dc     FF 2A 02 F6 | 	mov	local03, result3
1f3e0     A7 FA 61 FC | 	wrlong	result1, fp
1f3e4     04 4E 05 F1 | 	add	fp, #4
1f3e8     A7 FC 61 FC | 	wrlong	result2, fp
1f3ec     04 4E 05 F1 | 	add	fp, #4
1f3f0     A7 2A 62 FC | 	wrlong	local03, fp
1f3f4                 | ' 
1f3f4                 | ' t2=pop()
1f3f4                 | ' t1=pop()
1f3f4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f3f4     08 4E 85 F1 | 	sub	fp, #8
1f3f8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f3fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f400     A7 2A 62 AC |  if_e	wrlong	local03, fp
1f404     08 4E 05 A1 |  if_e	add	fp, #8
1f408     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f40c     08 4E 85 A1 |  if_e	sub	fp, #8
1f410                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f410     14 4E 05 F1 | 	add	fp, #20
1f414     A7 2A 02 FB | 	rdlong	local03, fp
1f418     14 4E 85 F1 | 	sub	fp, #20
1f41c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f420     18 00 90 5D |  if_ne	jmp	#LR__2520
1f424     0C 4E 05 F1 | 	add	fp, #12
1f428     A7 2A 02 FB | 	rdlong	local03, fp
1f42c     A7 2A 62 FC | 	wrlong	local03, fp
1f430     08 4E 05 F1 | 	add	fp, #8
1f434     A7 3A 68 FC | 	wrlong	#29, fp
1f438     14 4E 85 F1 | 	sub	fp, #20
1f43c                 | LR__2520
1f43c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1f43c     08 4E 05 F1 | 	add	fp, #8
1f440     A7 2A 02 FB | 	rdlong	local03, fp
1f444     08 4E 85 F1 | 	sub	fp, #8
1f448     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f44c     14 4E 05 51 |  if_ne	add	fp, #20
1f450     A7 28 02 5B |  if_ne	rdlong	local02, fp
1f454     14 4E 85 51 |  if_ne	sub	fp, #20
1f458     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1f45c     08 4E 05 51 |  if_ne	add	fp, #8
1f460     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f464     08 4E 85 51 |  if_ne	sub	fp, #8
1f468     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f46c     14 4E 05 51 |  if_ne	add	fp, #20
1f470     14 4E 85 51 |  if_ne	sub	fp, #20
1f474     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1f478     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f47c     08 4E 05 A1 |  if_e	add	fp, #8
1f480     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f484     08 4E 85 A1 |  if_e	sub	fp, #8
1f488     18 00 90 AD |  if_e	jmp	#LR__2521
1f48c     A7 2A 02 FB | 	rdlong	local03, fp
1f490     0C 4E 05 F1 | 	add	fp, #12
1f494     A7 26 02 FB | 	rdlong	local01, fp
1f498     0C 4E 85 F1 | 	sub	fp, #12
1f49c     13 2B 42 F0 | 	shr	local03, local01
1f4a0     A7 2A 62 FC | 	wrlong	local03, fp
1f4a4                 | LR__2521
1f4a4     A7 12 02 F6 | 	mov	arg01, fp
1f4a8     78 D7 BE FD | 	call	#_push
1f4ac     A7 F0 03 F6 | 	mov	ptra, fp
1f4b0     B2 00 A0 FD | 	call	#popregs_
1f4b4                 | _do_shr_ret
1f4b4     2D 00 64 FD | 	ret
1f4b8                 | 
1f4b8                 | ' 
1f4b8                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1f4b8                 | ' 
1f4b8                 | ' ''----------------------------------------------------------------------------------------------------
1f4b8                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1f4b8                 | ' ''----------------------------------------------------------------------------------------------------
1f4b8                 | ' 
1f4b8                 | ' ''--------------------------- Command function pointers
1f4b8                 | ' 
1f4b8                 | ' sub init_commands
1f4b8                 | _init_commands
1f4b8                 | ' 
1f4b8                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1f4b8     00 00 06 F6 | 	mov	_var01, #0
1f4bc     97 16 48 FB | 	callpa	#(@LR__2531-@LR__2530)>>2,fcache_load_ptr_
1f4c0                 | LR__2530
1f4c0     00 FB 01 F6 | 	mov	result1, _var01
1f4c4     02 FA 65 F0 | 	shl	result1, #2
1f4c8     43 00 00 FF 
1f4cc     60 E4 05 F1 | 	add	objptr, ##34400
1f4d0     F2 FA 01 F1 | 	add	result1, objptr
1f4d4     43 00 00 FF 
1f4d8     60 E4 85 F1 | 	sub	objptr, ##34400
1f4dc     FD E4 61 FC | 	wrlong	objptr, result1
1f4e0     01 00 06 F1 | 	add	_var01, #1
1f4e4     00 01 56 F2 | 	cmps	_var01, #256 wc
1f4e8     D4 FF 9F CD |  if_b	jmp	#LR__2530
1f4ec                 | LR__2531
1f4ec     F2 FA 01 F6 | 	mov	result1, objptr
1f4f0     14 FA 25 F4 | 	bith	result1, #20
1f4f4     43 00 00 FF 
1f4f8     64 E4 05 F1 | 	add	objptr, ##34404
1f4fc     F2 FA 61 FC | 	wrlong	result1, objptr
1f500     43 00 00 FF 
1f504     64 E4 85 F1 | 	sub	objptr, ##34404
1f508     F2 FA 01 F6 | 	mov	result1, objptr
1f50c     15 FA 25 F4 | 	bith	result1, #21
1f510     43 00 00 FF 
1f514     68 E4 05 F1 | 	add	objptr, ##34408
1f518     F2 FA 61 FC | 	wrlong	result1, objptr
1f51c     43 00 00 FF 
1f520     68 E4 85 F1 | 	sub	objptr, ##34408
1f524     F2 FA 01 F6 | 	mov	result1, objptr
1f528     34 FA 25 F4 | 	bith	result1, #52
1f52c     43 00 00 FF 
1f530     6C E4 05 F1 | 	add	objptr, ##34412
1f534     F2 FA 61 FC | 	wrlong	result1, objptr
1f538     43 00 00 FF 
1f53c     6C E4 85 F1 | 	sub	objptr, ##34412
1f540     F2 FA 01 F6 | 	mov	result1, objptr
1f544     16 FA 25 F4 | 	bith	result1, #22
1f548     43 00 00 FF 
1f54c     74 E4 05 F1 | 	add	objptr, ##34420
1f550     F2 FA 61 FC | 	wrlong	result1, objptr
1f554     43 00 00 FF 
1f558     74 E4 85 F1 | 	sub	objptr, ##34420
1f55c     F2 FA 01 F6 | 	mov	result1, objptr
1f560     00 28 00 FF 
1f564     00 FA 45 F5 | 	or	result1, ##5242880
1f568     43 00 00 FF 
1f56c     78 E4 05 F1 | 	add	objptr, ##34424
1f570     F2 FA 61 FC | 	wrlong	result1, objptr
1f574     43 00 00 FF 
1f578     78 E4 85 F1 | 	sub	objptr, ##34424
1f57c     F2 FA 01 F6 | 	mov	result1, objptr
1f580     35 FA 25 F4 | 	bith	result1, #53
1f584     43 00 00 FF 
1f588     7C E4 05 F1 | 	add	objptr, ##34428
1f58c     F2 FA 61 FC | 	wrlong	result1, objptr
1f590     43 00 00 FF 
1f594     7C E4 85 F1 | 	sub	objptr, ##34428
1f598     F2 FA 01 F6 | 	mov	result1, objptr
1f59c     54 FA 25 F4 | 	bith	result1, #84
1f5a0     43 00 00 FF 
1f5a4     80 E4 05 F1 | 	add	objptr, ##34432
1f5a8     F2 FA 61 FC | 	wrlong	result1, objptr
1f5ac     43 00 00 FF 
1f5b0     80 E4 85 F1 | 	sub	objptr, ##34432
1f5b4     F2 FA 01 F6 | 	mov	result1, objptr
1f5b8     17 FA 25 F4 | 	bith	result1, #23
1f5bc     43 00 00 FF 
1f5c0     84 E4 05 F1 | 	add	objptr, ##34436
1f5c4     F2 FA 61 FC | 	wrlong	result1, objptr
1f5c8     43 00 00 FF 
1f5cc     84 E4 85 F1 | 	sub	objptr, ##34436
1f5d0     F2 FA 01 F6 | 	mov	result1, objptr
1f5d4     00 48 00 FF 
1f5d8     00 FA 45 F5 | 	or	result1, ##9437184
1f5dc     43 00 00 FF 
1f5e0     88 E4 05 F1 | 	add	objptr, ##34440
1f5e4     F2 FA 61 FC | 	wrlong	result1, objptr
1f5e8     43 00 00 FF 
1f5ec     88 E4 85 F1 | 	sub	objptr, ##34440
1f5f0     F2 FA 01 F6 | 	mov	result1, objptr
1f5f4     00 50 00 FF 
1f5f8     00 FA 45 F5 | 	or	result1, ##10485760
1f5fc     43 00 00 FF 
1f600     8C E4 05 F1 | 	add	objptr, ##34444
1f604     F2 FA 61 FC | 	wrlong	result1, objptr
1f608     43 00 00 FF 
1f60c     8C E4 85 F1 | 	sub	objptr, ##34444
1f610     F2 FA 01 F6 | 	mov	result1, objptr
1f614     00 58 00 FF 
1f618     00 FA 45 F5 | 	or	result1, ##11534336
1f61c     43 00 00 FF 
1f620     90 E4 05 F1 | 	add	objptr, ##34448
1f624     F2 FA 61 FC | 	wrlong	result1, objptr
1f628     43 00 00 FF 
1f62c     90 E4 85 F1 | 	sub	objptr, ##34448
1f630     F2 FA 01 F6 | 	mov	result1, objptr
1f634     36 FA 25 F4 | 	bith	result1, #54
1f638     43 00 00 FF 
1f63c     A4 E4 05 F1 | 	add	objptr, ##34468
1f640     F2 FA 61 FC | 	wrlong	result1, objptr
1f644     43 00 00 FF 
1f648     A4 E4 85 F1 | 	sub	objptr, ##34468
1f64c     F2 FA 01 F6 | 	mov	result1, objptr
1f650     00 68 00 FF 
1f654     00 FA 45 F5 | 	or	result1, ##13631488
1f658     43 00 00 FF 
1f65c     D4 E4 05 F1 | 	add	objptr, ##34516
1f660     F2 FA 61 FC | 	wrlong	result1, objptr
1f664     43 00 00 FF 
1f668     D4 E4 85 F1 | 	sub	objptr, ##34516
1f66c     F2 FA 01 F6 | 	mov	result1, objptr
1f670     00 68 00 FF 
1f674     00 FA 45 F5 | 	or	result1, ##13631488
1f678     43 00 00 FF 
1f67c     D0 E4 05 F1 | 	add	objptr, ##34512
1f680     F2 FA 61 FC | 	wrlong	result1, objptr
1f684     43 00 00 FF 
1f688     D0 E4 85 F1 | 	sub	objptr, ##34512
1f68c     F2 FA 01 F6 | 	mov	result1, objptr
1f690     00 68 00 FF 
1f694     00 FA 45 F5 | 	or	result1, ##13631488
1f698     43 00 00 FF 
1f69c     D8 E4 05 F1 | 	add	objptr, ##34520
1f6a0     F2 FA 61 FC | 	wrlong	result1, objptr
1f6a4     43 00 00 FF 
1f6a8     D8 E4 85 F1 | 	sub	objptr, ##34520
1f6ac     F2 FA 01 F6 | 	mov	result1, objptr
1f6b0     00 68 00 FF 
1f6b4     00 FA 45 F5 | 	or	result1, ##13631488
1f6b8     43 00 00 FF 
1f6bc     DC E4 05 F1 | 	add	objptr, ##34524
1f6c0     F2 FA 61 FC | 	wrlong	result1, objptr
1f6c4     43 00 00 FF 
1f6c8     DC E4 85 F1 | 	sub	objptr, ##34524
1f6cc     F2 FA 01 F6 | 	mov	result1, objptr
1f6d0     00 68 00 FF 
1f6d4     00 FA 45 F5 | 	or	result1, ##13631488
1f6d8     43 00 00 FF 
1f6dc     0C E5 05 F1 | 	add	objptr, ##34572
1f6e0     F2 FA 61 FC | 	wrlong	result1, objptr
1f6e4     43 00 00 FF 
1f6e8     0C E5 85 F1 | 	sub	objptr, ##34572
1f6ec     F2 FA 01 F6 | 	mov	result1, objptr
1f6f0     55 FA 25 F4 | 	bith	result1, #85
1f6f4     43 00 00 FF 
1f6f8     BC E4 05 F1 | 	add	objptr, ##34492
1f6fc     F2 FA 61 FC | 	wrlong	result1, objptr
1f700     43 00 00 FF 
1f704     BC E4 85 F1 | 	sub	objptr, ##34492
1f708     F2 FA 01 F6 | 	mov	result1, objptr
1f70c     00 68 00 FF 
1f710     00 FA 45 F5 | 	or	result1, ##13631488
1f714     43 00 00 FF 
1f718     10 E5 05 F1 | 	add	objptr, ##34576
1f71c     F2 FA 61 FC | 	wrlong	result1, objptr
1f720     43 00 00 FF 
1f724     10 E5 85 F1 | 	sub	objptr, ##34576
1f728     F2 FA 01 F6 | 	mov	result1, objptr
1f72c     00 68 00 FF 
1f730     00 FA 45 F5 | 	or	result1, ##13631488
1f734     43 00 00 FF 
1f738     E0 E4 05 F1 | 	add	objptr, ##34528
1f73c     F2 FA 61 FC | 	wrlong	result1, objptr
1f740     43 00 00 FF 
1f744     E0 E4 85 F1 | 	sub	objptr, ##34528
1f748     F2 FA 01 F6 | 	mov	result1, objptr
1f74c     00 68 00 FF 
1f750     00 FA 45 F5 | 	or	result1, ##13631488
1f754     43 00 00 FF 
1f758     E4 E4 05 F1 | 	add	objptr, ##34532
1f75c     F2 FA 61 FC | 	wrlong	result1, objptr
1f760     43 00 00 FF 
1f764     E4 E4 85 F1 | 	sub	objptr, ##34532
1f768     F2 FA 01 F6 | 	mov	result1, objptr
1f76c     00 68 00 FF 
1f770     00 FA 45 F5 | 	or	result1, ##13631488
1f774     43 00 00 FF 
1f778     E8 E4 05 F1 | 	add	objptr, ##34536
1f77c     F2 FA 61 FC | 	wrlong	result1, objptr
1f780     43 00 00 FF 
1f784     E8 E4 85 F1 | 	sub	objptr, ##34536
1f788     F2 FA 01 F6 | 	mov	result1, objptr
1f78c     74 FA 25 F4 | 	bith	result1, #116
1f790     43 00 00 FF 
1f794     60 E5 05 F1 | 	add	objptr, ##34656
1f798     F2 FA 61 FC | 	wrlong	result1, objptr
1f79c     43 00 00 FF 
1f7a0     60 E5 85 F1 | 	sub	objptr, ##34656
1f7a4     F2 FA 01 F6 | 	mov	result1, objptr
1f7a8     18 FA 25 F4 | 	bith	result1, #24
1f7ac     43 00 00 FF 
1f7b0     64 E5 05 F1 | 	add	objptr, ##34660
1f7b4     F2 FA 61 FC | 	wrlong	result1, objptr
1f7b8     43 00 00 FF 
1f7bc     64 E5 85 F1 | 	sub	objptr, ##34660
1f7c0     F2 FA 01 F6 | 	mov	result1, objptr
1f7c4     00 88 00 FF 
1f7c8     00 FA 45 F5 | 	or	result1, ##17825792
1f7cc     43 00 00 FF 
1f7d0     68 E5 05 F1 | 	add	objptr, ##34664
1f7d4     F2 FA 61 FC | 	wrlong	result1, objptr
1f7d8     43 00 00 FF 
1f7dc     68 E5 85 F1 | 	sub	objptr, ##34664
1f7e0     F2 FA 01 F6 | 	mov	result1, objptr
1f7e4     00 90 00 FF 
1f7e8     00 FA 45 F5 | 	or	result1, ##18874368
1f7ec     43 00 00 FF 
1f7f0     6C E5 05 F1 | 	add	objptr, ##34668
1f7f4     F2 FA 61 FC | 	wrlong	result1, objptr
1f7f8     43 00 00 FF 
1f7fc     6C E5 85 F1 | 	sub	objptr, ##34668
1f800     F2 FA 01 F6 | 	mov	result1, objptr
1f804     00 98 00 FF 
1f808     00 FA 45 F5 | 	or	result1, ##19922944
1f80c     43 00 00 FF 
1f810     70 E5 05 F1 | 	add	objptr, ##34672
1f814     F2 FA 61 FC | 	wrlong	result1, objptr
1f818     43 00 00 FF 
1f81c     70 E5 85 F1 | 	sub	objptr, ##34672
1f820     F2 FA 01 F6 | 	mov	result1, objptr
1f824     00 A0 00 FF 
1f828     00 FA 45 F5 | 	or	result1, ##20971520
1f82c     43 00 00 FF 
1f830     74 E5 05 F1 | 	add	objptr, ##34676
1f834     F2 FA 61 FC | 	wrlong	result1, objptr
1f838     43 00 00 FF 
1f83c     74 E5 85 F1 | 	sub	objptr, ##34676
1f840     F2 FA 01 F6 | 	mov	result1, objptr
1f844     00 A8 00 FF 
1f848     00 FA 45 F5 | 	or	result1, ##22020096
1f84c     43 00 00 FF 
1f850     78 E5 05 F1 | 	add	objptr, ##34680
1f854     F2 FA 61 FC | 	wrlong	result1, objptr
1f858     43 00 00 FF 
1f85c     78 E5 85 F1 | 	sub	objptr, ##34680
1f860     F2 FA 01 F6 | 	mov	result1, objptr
1f864     00 B0 00 FF 
1f868     00 FA 45 F5 | 	or	result1, ##23068672
1f86c     43 00 00 FF 
1f870     7C E5 05 F1 | 	add	objptr, ##34684
1f874     F2 FA 61 FC | 	wrlong	result1, objptr
1f878     43 00 00 FF 
1f87c     7C E5 85 F1 | 	sub	objptr, ##34684
1f880     F2 FA 01 F6 | 	mov	result1, objptr
1f884     00 B8 00 FF 
1f888     00 FA 45 F5 | 	or	result1, ##24117248
1f88c     43 00 00 FF 
1f890     80 E5 05 F1 | 	add	objptr, ##34688
1f894     F2 FA 61 FC | 	wrlong	result1, objptr
1f898     43 00 00 FF 
1f89c     80 E5 85 F1 | 	sub	objptr, ##34688
1f8a0     F2 FA 01 F6 | 	mov	result1, objptr
1f8a4     37 FA 25 F4 | 	bith	result1, #55
1f8a8     43 00 00 FF 
1f8ac     84 E5 05 F1 | 	add	objptr, ##34692
1f8b0     F2 FA 61 FC | 	wrlong	result1, objptr
1f8b4     43 00 00 FF 
1f8b8     84 E5 85 F1 | 	sub	objptr, ##34692
1f8bc     F2 FA 01 F6 | 	mov	result1, objptr
1f8c0     00 C8 00 FF 
1f8c4     00 FA 45 F5 | 	or	result1, ##26214400
1f8c8     43 00 00 FF 
1f8cc     88 E5 05 F1 | 	add	objptr, ##34696
1f8d0     F2 FA 61 FC | 	wrlong	result1, objptr
1f8d4     43 00 00 FF 
1f8d8     88 E5 85 F1 | 	sub	objptr, ##34696
1f8dc     F2 FA 01 F6 | 	mov	result1, objptr
1f8e0     00 D0 00 FF 
1f8e4     00 FA 45 F5 | 	or	result1, ##27262976
1f8e8     43 00 00 FF 
1f8ec     8C E5 05 F1 | 	add	objptr, ##34700
1f8f0     F2 FA 61 FC | 	wrlong	result1, objptr
1f8f4     43 00 00 FF 
1f8f8     8C E5 85 F1 | 	sub	objptr, ##34700
1f8fc     F2 FA 01 F6 | 	mov	result1, objptr
1f900     00 D8 00 FF 
1f904     00 FA 45 F5 | 	or	result1, ##28311552
1f908     43 00 00 FF 
1f90c     90 E5 05 F1 | 	add	objptr, ##34704
1f910     F2 FA 61 FC | 	wrlong	result1, objptr
1f914     43 00 00 FF 
1f918     90 E5 85 F1 | 	sub	objptr, ##34704
1f91c     F2 FA 01 F6 | 	mov	result1, objptr
1f920     56 FA 25 F4 | 	bith	result1, #86
1f924     43 00 00 FF 
1f928     94 E5 05 F1 | 	add	objptr, ##34708
1f92c     F2 FA 61 FC | 	wrlong	result1, objptr
1f930     43 00 00 FF 
1f934     94 E5 85 F1 | 	sub	objptr, ##34708
1f938     F2 FA 01 F6 | 	mov	result1, objptr
1f93c     00 E8 00 FF 
1f940     00 FA 45 F5 | 	or	result1, ##30408704
1f944     45 00 00 FF 
1f948     5C E4 05 F1 | 	add	objptr, ##35420
1f94c     F2 FA 61 FC | 	wrlong	result1, objptr
1f950     45 00 00 FF 
1f954     5C E4 85 F1 | 	sub	objptr, ##35420
1f958     F2 FA 01 F6 | 	mov	result1, objptr
1f95c     75 FA 25 F4 | 	bith	result1, #117
1f960     43 00 00 FF 
1f964     98 E5 05 F1 | 	add	objptr, ##34712
1f968     F2 FA 61 FC | 	wrlong	result1, objptr
1f96c     43 00 00 FF 
1f970     98 E5 85 F1 | 	sub	objptr, ##34712
1f974     F2 FA 01 F6 | 	mov	result1, objptr
1f978     94 FA 25 F4 | 	bith	result1, #148
1f97c     43 00 00 FF 
1f980     AC E5 05 F1 | 	add	objptr, ##34732
1f984     F2 FA 61 FC | 	wrlong	result1, objptr
1f988     43 00 00 FF 
1f98c     AC E5 85 F1 | 	sub	objptr, ##34732
1f990     F2 FA 01 F6 | 	mov	result1, objptr
1f994     19 FA 25 F4 | 	bith	result1, #25
1f998     43 00 00 FF 
1f99c     9C E5 05 F1 | 	add	objptr, ##34716
1f9a0     F2 FA 61 FC | 	wrlong	result1, objptr
1f9a4     43 00 00 FF 
1f9a8     9C E5 85 F1 | 	sub	objptr, ##34716
1f9ac     F2 FA 01 F6 | 	mov	result1, objptr
1f9b0     00 08 01 FF 
1f9b4     00 FA 45 F5 | 	or	result1, ##34603008
1f9b8     43 00 00 FF 
1f9bc     B8 E4 05 F1 | 	add	objptr, ##34488
1f9c0     F2 FA 61 FC | 	wrlong	result1, objptr
1f9c4     43 00 00 FF 
1f9c8     B8 E4 85 F1 | 	sub	objptr, ##34488
1f9cc     F2 FA 01 F6 | 	mov	result1, objptr
1f9d0     00 10 01 FF 
1f9d4     00 FA 45 F5 | 	or	result1, ##35651584
1f9d8     43 00 00 FF 
1f9dc     A0 E5 05 F1 | 	add	objptr, ##34720
1f9e0     F2 FA 61 FC | 	wrlong	result1, objptr
1f9e4     43 00 00 FF 
1f9e8     A0 E5 85 F1 | 	sub	objptr, ##34720
1f9ec     F2 FA 01 F6 | 	mov	result1, objptr
1f9f0     00 18 01 FF 
1f9f4     00 FA 45 F5 | 	or	result1, ##36700160
1f9f8     43 00 00 FF 
1f9fc     A4 E5 05 F1 | 	add	objptr, ##34724
1fa00     F2 FA 61 FC | 	wrlong	result1, objptr
1fa04     43 00 00 FF 
1fa08     A4 E5 85 F1 | 	sub	objptr, ##34724
1fa0c     F2 FA 01 F6 | 	mov	result1, objptr
1fa10     00 20 01 FF 
1fa14     00 FA 45 F5 | 	or	result1, ##37748736
1fa18     43 00 00 FF 
1fa1c     A8 E5 05 F1 | 	add	objptr, ##34728
1fa20     F2 FA 61 FC | 	wrlong	result1, objptr
1fa24     43 00 00 FF 
1fa28     A8 E5 85 F1 | 	sub	objptr, ##34728
1fa2c     F2 FA 01 F6 | 	mov	result1, objptr
1fa30     00 28 01 FF 
1fa34     00 FA 45 F5 | 	or	result1, ##38797312
1fa38     43 00 00 FF 
1fa3c     B4 E5 05 F1 | 	add	objptr, ##34740
1fa40     F2 FA 61 FC | 	wrlong	result1, objptr
1fa44     43 00 00 FF 
1fa48     B4 E5 85 F1 | 	sub	objptr, ##34740
1fa4c     F2 FA 01 F6 | 	mov	result1, objptr
1fa50     00 30 01 FF 
1fa54     00 FA 45 F5 | 	or	result1, ##39845888
1fa58     43 00 00 FF 
1fa5c     B8 E5 05 F1 | 	add	objptr, ##34744
1fa60     F2 FA 61 FC | 	wrlong	result1, objptr
1fa64     43 00 00 FF 
1fa68     B8 E5 85 F1 | 	sub	objptr, ##34744
1fa6c     F2 FA 01 F6 | 	mov	result1, objptr
1fa70     00 38 01 FF 
1fa74     00 FA 45 F5 | 	or	result1, ##40894464
1fa78     43 00 00 FF 
1fa7c     BC E5 05 F1 | 	add	objptr, ##34748
1fa80     F2 FA 61 FC | 	wrlong	result1, objptr
1fa84     43 00 00 FF 
1fa88     BC E5 85 F1 | 	sub	objptr, ##34748
1fa8c     F2 FA 01 F6 | 	mov	result1, objptr
1fa90     00 40 01 FF 
1fa94     00 FA 45 F5 | 	or	result1, ##41943040
1fa98     43 00 00 FF 
1fa9c     C0 E5 05 F1 | 	add	objptr, ##34752
1faa0     F2 FA 61 FC | 	wrlong	result1, objptr
1faa4     43 00 00 FF 
1faa8     C0 E5 85 F1 | 	sub	objptr, ##34752
1faac     F2 FA 01 F6 | 	mov	result1, objptr
1fab0     00 48 01 FF 
1fab4     00 FA 45 F5 | 	or	result1, ##42991616
1fab8     43 00 00 FF 
1fabc     C8 E5 05 F1 | 	add	objptr, ##34760
1fac0     F2 FA 61 FC | 	wrlong	result1, objptr
1fac4     43 00 00 FF 
1fac8     C8 E5 85 F1 | 	sub	objptr, ##34760
1facc     F2 FA 01 F6 | 	mov	result1, objptr
1fad0     00 08 01 FF 
1fad4     00 FA 45 F5 | 	or	result1, ##34603008
1fad8     43 00 00 FF 
1fadc     CC E5 05 F1 | 	add	objptr, ##34764
1fae0     F2 FA 61 FC | 	wrlong	result1, objptr
1fae4     43 00 00 FF 
1fae8     CC E5 85 F1 | 	sub	objptr, ##34764
1faec     F2 FA 01 F6 | 	mov	result1, objptr
1faf0     00 50 01 FF 
1faf4     00 FA 45 F5 | 	or	result1, ##44040192
1faf8     43 00 00 FF 
1fafc     CC E4 05 F1 | 	add	objptr, ##34508
1fb00     F2 FA 61 FC | 	wrlong	result1, objptr
1fb04     43 00 00 FF 
1fb08     CC E4 85 F1 | 	sub	objptr, ##34508
1fb0c     F2 FA 01 F6 | 	mov	result1, objptr
1fb10     00 58 01 FF 
1fb14     00 FA 45 F5 | 	or	result1, ##45088768
1fb18     43 00 00 FF 
1fb1c     FC E4 05 F1 | 	add	objptr, ##34556
1fb20     F2 FA 61 FC | 	wrlong	result1, objptr
1fb24     43 00 00 FF 
1fb28     FC E4 85 F1 | 	sub	objptr, ##34556
1fb2c     F2 FA 01 F6 | 	mov	result1, objptr
1fb30     00 60 01 FF 
1fb34     00 FA 45 F5 | 	or	result1, ##46137344
1fb38     43 00 00 FF 
1fb3c     F8 E4 05 F1 | 	add	objptr, ##34552
1fb40     F2 FA 61 FC | 	wrlong	result1, objptr
1fb44     43 00 00 FF 
1fb48     F8 E4 85 F1 | 	sub	objptr, ##34552
1fb4c     F2 FA 01 F6 | 	mov	result1, objptr
1fb50     00 68 01 FF 
1fb54     00 FA 45 F5 | 	or	result1, ##47185920
1fb58     43 00 00 FF 
1fb5c     9C E4 05 F1 | 	add	objptr, ##34460
1fb60     F2 FA 61 FC | 	wrlong	result1, objptr
1fb64     43 00 00 FF 
1fb68     9C E4 85 F1 | 	sub	objptr, ##34460
1fb6c     F2 FA 01 F6 | 	mov	result1, objptr
1fb70     00 70 01 FF 
1fb74     00 FA 45 F5 | 	or	result1, ##48234496
1fb78     43 00 00 FF 
1fb7c     A0 E4 05 F1 | 	add	objptr, ##34464
1fb80     F2 FA 61 FC | 	wrlong	result1, objptr
1fb84     43 00 00 FF 
1fb88     A0 E4 85 F1 | 	sub	objptr, ##34464
1fb8c     F2 FA 01 F6 | 	mov	result1, objptr
1fb90     00 78 01 FF 
1fb94     00 FA 45 F5 | 	or	result1, ##49283072
1fb98     43 00 00 FF 
1fb9c     08 E5 05 F1 | 	add	objptr, ##34568
1fba0     F2 FA 61 FC | 	wrlong	result1, objptr
1fba4     43 00 00 FF 
1fba8     08 E5 85 F1 | 	sub	objptr, ##34568
1fbac     F2 FA 01 F6 | 	mov	result1, objptr
1fbb0     38 FA 25 F4 | 	bith	result1, #56
1fbb4     43 00 00 FF 
1fbb8     B0 E5 05 F1 | 	add	objptr, ##34736
1fbbc     F2 FA 61 FC | 	wrlong	result1, objptr
1fbc0     43 00 00 FF 
1fbc4     B0 E5 85 F1 | 	sub	objptr, ##34736
1fbc8     F2 FA 01 F6 | 	mov	result1, objptr
1fbcc     00 88 01 FF 
1fbd0     00 FA 45 F5 | 	or	result1, ##51380224
1fbd4     43 00 00 FF 
1fbd8     C4 E5 05 F1 | 	add	objptr, ##34756
1fbdc     F2 FA 61 FC | 	wrlong	result1, objptr
1fbe0     43 00 00 FF 
1fbe4     C4 E5 85 F1 | 	sub	objptr, ##34756
1fbe8     F2 FA 01 F6 | 	mov	result1, objptr
1fbec     00 90 01 FF 
1fbf0     00 FA 45 F5 | 	or	result1, ##52428800
1fbf4     43 00 00 FF 
1fbf8     D0 E5 05 F1 | 	add	objptr, ##34768
1fbfc     F2 FA 61 FC | 	wrlong	result1, objptr
1fc00     43 00 00 FF 
1fc04     D0 E5 85 F1 | 	sub	objptr, ##34768
1fc08     F2 FA 01 F6 | 	mov	result1, objptr
1fc0c     00 98 01 FF 
1fc10     00 FA 45 F5 | 	or	result1, ##53477376
1fc14     43 00 00 FF 
1fc18     D4 E5 05 F1 | 	add	objptr, ##34772
1fc1c     F2 FA 61 FC | 	wrlong	result1, objptr
1fc20     43 00 00 FF 
1fc24     D4 E5 85 F1 | 	sub	objptr, ##34772
1fc28     F2 FA 01 F6 | 	mov	result1, objptr
1fc2c     00 A0 01 FF 
1fc30     00 FA 45 F5 | 	or	result1, ##54525952
1fc34     43 00 00 FF 
1fc38     D8 E5 05 F1 | 	add	objptr, ##34776
1fc3c     F2 FA 61 FC | 	wrlong	result1, objptr
1fc40     43 00 00 FF 
1fc44     D8 E5 85 F1 | 	sub	objptr, ##34776
1fc48     F2 FA 01 F6 | 	mov	result1, objptr
1fc4c     00 A8 01 FF 
1fc50     00 FA 45 F5 | 	or	result1, ##55574528
1fc54     43 00 00 FF 
1fc58     DC E5 05 F1 | 	add	objptr, ##34780
1fc5c     F2 FA 61 FC | 	wrlong	result1, objptr
1fc60     43 00 00 FF 
1fc64     DC E5 85 F1 | 	sub	objptr, ##34780
1fc68     F2 FA 01 F6 | 	mov	result1, objptr
1fc6c     00 B0 01 FF 
1fc70     00 FA 45 F5 | 	or	result1, ##56623104
1fc74     43 00 00 FF 
1fc78     E0 E5 05 F1 | 	add	objptr, ##34784
1fc7c     F2 FA 61 FC | 	wrlong	result1, objptr
1fc80     43 00 00 FF 
1fc84     E0 E5 85 F1 | 	sub	objptr, ##34784
1fc88     F2 FA 01 F6 | 	mov	result1, objptr
1fc8c     00 B8 01 FF 
1fc90     00 FA 45 F5 | 	or	result1, ##57671680
1fc94     43 00 00 FF 
1fc98     E4 E5 05 F1 | 	add	objptr, ##34788
1fc9c     F2 FA 61 FC | 	wrlong	result1, objptr
1fca0     43 00 00 FF 
1fca4     E4 E5 85 F1 | 	sub	objptr, ##34788
1fca8     F2 FA 01 F6 | 	mov	result1, objptr
1fcac     94 FA 25 F4 | 	bith	result1, #148
1fcb0     43 00 00 FF 
1fcb4     AC E5 05 F1 | 	add	objptr, ##34732
1fcb8     F2 FA 61 FC | 	wrlong	result1, objptr
1fcbc     43 00 00 FF 
1fcc0     AC E5 85 F1 | 	sub	objptr, ##34732
1fcc4     F2 FA 01 F6 | 	mov	result1, objptr
1fcc8     57 FA 25 F4 | 	bith	result1, #87
1fccc     43 00 00 FF 
1fcd0     EC E5 05 F1 | 	add	objptr, ##34796
1fcd4     F2 FA 61 FC | 	wrlong	result1, objptr
1fcd8     43 00 00 FF 
1fcdc     EC E5 85 F1 | 	sub	objptr, ##34796
1fce0     F2 FA 01 F6 | 	mov	result1, objptr
1fce4     00 C8 01 FF 
1fce8     00 FA 45 F5 | 	or	result1, ##59768832
1fcec     43 00 00 FF 
1fcf0     E8 E5 05 F1 | 	add	objptr, ##34792
1fcf4     F2 FA 61 FC | 	wrlong	result1, objptr
1fcf8     43 00 00 FF 
1fcfc     E8 E5 85 F1 | 	sub	objptr, ##34792
1fd00     F2 FA 01 F6 | 	mov	result1, objptr
1fd04     00 D0 01 FF 
1fd08     00 FA 45 F5 | 	or	result1, ##60817408
1fd0c     44 00 00 FF 
1fd10     00 E4 05 F1 | 	add	objptr, ##34816
1fd14     F2 FA 61 FC | 	wrlong	result1, objptr
1fd18     44 00 00 FF 
1fd1c     00 E4 85 F1 | 	sub	objptr, ##34816
1fd20     F2 FA 01 F6 | 	mov	result1, objptr
1fd24     00 D8 01 FF 
1fd28     00 FA 45 F5 | 	or	result1, ##61865984
1fd2c     44 00 00 FF 
1fd30     04 E4 05 F1 | 	add	objptr, ##34820
1fd34     F2 FA 61 FC | 	wrlong	result1, objptr
1fd38     44 00 00 FF 
1fd3c     04 E4 85 F1 | 	sub	objptr, ##34820
1fd40     F2 FA 01 F6 | 	mov	result1, objptr
1fd44     76 FA 25 F4 | 	bith	result1, #118
1fd48     43 00 00 FF 
1fd4c     F0 E5 05 F1 | 	add	objptr, ##34800
1fd50     F2 FA 61 FC | 	wrlong	result1, objptr
1fd54     43 00 00 FF 
1fd58     F0 E5 85 F1 | 	sub	objptr, ##34800
1fd5c     F2 FA 01 F6 | 	mov	result1, objptr
1fd60     00 E8 01 FF 
1fd64     00 FA 45 F5 | 	or	result1, ##63963136
1fd68     43 00 00 FF 
1fd6c     F4 E5 05 F1 | 	add	objptr, ##34804
1fd70     F2 FA 61 FC | 	wrlong	result1, objptr
1fd74     43 00 00 FF 
1fd78     F4 E5 85 F1 | 	sub	objptr, ##34804
1fd7c     F2 FA 01 F6 | 	mov	result1, objptr
1fd80     95 FA 25 F4 | 	bith	result1, #149
1fd84     43 00 00 FF 
1fd88     F8 E5 05 F1 | 	add	objptr, ##34808
1fd8c     F2 FA 61 FC | 	wrlong	result1, objptr
1fd90     43 00 00 FF 
1fd94     F8 E5 85 F1 | 	sub	objptr, ##34808
1fd98     F2 FA 01 F6 | 	mov	result1, objptr
1fd9c     B4 FA 25 F4 | 	bith	result1, #180
1fda0     43 00 00 FF 
1fda4     FC E5 05 F1 | 	add	objptr, ##34812
1fda8     F2 FA 61 FC | 	wrlong	result1, objptr
1fdac     43 00 00 FF 
1fdb0     FC E5 85 F1 | 	sub	objptr, ##34812
1fdb4     F2 FA 01 F6 | 	mov	result1, objptr
1fdb8     1A FA 25 F4 | 	bith	result1, #26
1fdbc     44 00 00 FF 
1fdc0     0C E4 05 F1 | 	add	objptr, ##34828
1fdc4     F2 FA 61 FC | 	wrlong	result1, objptr
1fdc8     44 00 00 FF 
1fdcc     0C E4 85 F1 | 	sub	objptr, ##34828
1fdd0     F2 FA 01 F6 | 	mov	result1, objptr
1fdd4     00 08 02 FF 
1fdd8     00 FA 45 F5 | 	or	result1, ##68157440
1fddc     44 00 00 FF 
1fde0     08 E4 05 F1 | 	add	objptr, ##34824
1fde4     F2 FA 61 FC | 	wrlong	result1, objptr
1fde8     44 00 00 FF 
1fdec     08 E4 85 F1 | 	sub	objptr, ##34824
1fdf0     F2 FA 01 F6 | 	mov	result1, objptr
1fdf4     00 10 02 FF 
1fdf8     00 FA 45 F5 | 	or	result1, ##69206016
1fdfc     44 00 00 FF 
1fe00     18 E4 05 F1 | 	add	objptr, ##34840
1fe04     F2 FA 61 FC | 	wrlong	result1, objptr
1fe08     44 00 00 FF 
1fe0c     18 E4 85 F1 | 	sub	objptr, ##34840
1fe10     F2 FA 01 F6 | 	mov	result1, objptr
1fe14     00 18 02 FF 
1fe18     00 FA 45 F5 | 	or	result1, ##70254592
1fe1c     44 00 00 FF 
1fe20     14 E4 05 F1 | 	add	objptr, ##34836
1fe24     F2 FA 61 FC | 	wrlong	result1, objptr
1fe28     44 00 00 FF 
1fe2c     14 E4 85 F1 | 	sub	objptr, ##34836
1fe30     F2 FA 01 F6 | 	mov	result1, objptr
1fe34     00 20 02 FF 
1fe38     00 FA 45 F5 | 	or	result1, ##71303168
1fe3c     44 00 00 FF 
1fe40     10 E4 05 F1 | 	add	objptr, ##34832
1fe44     F2 FA 61 FC | 	wrlong	result1, objptr
1fe48     44 00 00 FF 
1fe4c     10 E4 85 F1 | 	sub	objptr, ##34832
1fe50     F2 FA 01 F6 | 	mov	result1, objptr
1fe54     00 28 02 FF 
1fe58     00 FA 45 F5 | 	or	result1, ##72351744
1fe5c     44 00 00 FF 
1fe60     1C E4 05 F1 | 	add	objptr, ##34844
1fe64     F2 FA 61 FC | 	wrlong	result1, objptr
1fe68     44 00 00 FF 
1fe6c     1C E4 85 F1 | 	sub	objptr, ##34844
1fe70     F2 FA 01 F6 | 	mov	result1, objptr
1fe74     00 30 02 FF 
1fe78     00 FA 45 F5 | 	or	result1, ##73400320
1fe7c     44 00 00 FF 
1fe80     20 E4 05 F1 | 	add	objptr, ##34848
1fe84     F2 FA 61 FC | 	wrlong	result1, objptr
1fe88     44 00 00 FF 
1fe8c     20 E4 85 F1 | 	sub	objptr, ##34848
1fe90     F2 FA 01 F6 | 	mov	result1, objptr
1fe94     00 38 02 FF 
1fe98     00 FA 45 F5 | 	or	result1, ##74448896
1fe9c     43 00 00 FF 
1fea0     B4 E4 05 F1 | 	add	objptr, ##34484
1fea4     F2 FA 61 FC | 	wrlong	result1, objptr
1fea8     43 00 00 FF 
1feac     B4 E4 85 F1 | 	sub	objptr, ##34484
1feb0     F2 FA 01 F6 | 	mov	result1, objptr
1feb4     00 40 02 FF 
1feb8     00 FA 45 F5 | 	or	result1, ##75497472
1febc     44 00 00 FF 
1fec0     38 E4 05 F1 | 	add	objptr, ##34872
1fec4     F2 FA 61 FC | 	wrlong	result1, objptr
1fec8     44 00 00 FF 
1fecc     38 E4 85 F1 | 	sub	objptr, ##34872
1fed0     F2 FA 01 F6 | 	mov	result1, objptr
1fed4     00 48 02 FF 
1fed8     00 FA 45 F5 | 	or	result1, ##76546048
1fedc     44 00 00 FF 
1fee0     48 E4 05 F1 | 	add	objptr, ##34888
1fee4     F2 FA 61 FC | 	wrlong	result1, objptr
1fee8     44 00 00 FF 
1feec     48 E4 85 F1 | 	sub	objptr, ##34888
1fef0     F2 FA 01 F6 | 	mov	result1, objptr
1fef4     00 50 02 FF 
1fef8     00 FA 45 F5 | 	or	result1, ##77594624
1fefc     44 00 00 FF 
1ff00     4C E4 05 F1 | 	add	objptr, ##34892
1ff04     F2 FA 61 FC | 	wrlong	result1, objptr
1ff08     44 00 00 FF 
1ff0c     4C E4 85 F1 | 	sub	objptr, ##34892
1ff10     F2 FA 01 F6 | 	mov	result1, objptr
1ff14     00 58 02 FF 
1ff18     00 FA 45 F5 | 	or	result1, ##78643200
1ff1c     44 00 00 FF 
1ff20     44 E4 05 F1 | 	add	objptr, ##34884
1ff24     F2 FA 61 FC | 	wrlong	result1, objptr
1ff28     44 00 00 FF 
1ff2c     44 E4 85 F1 | 	sub	objptr, ##34884
1ff30     F2 FA 01 F6 | 	mov	result1, objptr
1ff34     00 60 02 FF 
1ff38     00 FA 45 F5 | 	or	result1, ##79691776
1ff3c     44 00 00 FF 
1ff40     3C E4 05 F1 | 	add	objptr, ##34876
1ff44     F2 FA 61 FC | 	wrlong	result1, objptr
1ff48     44 00 00 FF 
1ff4c     3C E4 85 F1 | 	sub	objptr, ##34876
1ff50     F2 FA 01 F6 | 	mov	result1, objptr
1ff54     00 68 02 FF 
1ff58     00 FA 45 F5 | 	or	result1, ##80740352
1ff5c     44 00 00 FF 
1ff60     40 E4 05 F1 | 	add	objptr, ##34880
1ff64     F2 FA 61 FC | 	wrlong	result1, objptr
1ff68     44 00 00 FF 
1ff6c     40 E4 85 F1 | 	sub	objptr, ##34880
1ff70     F2 FA 01 F6 | 	mov	result1, objptr
1ff74     00 70 02 FF 
1ff78     00 FA 45 F5 | 	or	result1, ##81788928
1ff7c     44 00 00 FF 
1ff80     50 E4 05 F1 | 	add	objptr, ##34896
1ff84     F2 FA 61 FC | 	wrlong	result1, objptr
1ff88     44 00 00 FF 
1ff8c     50 E4 85 F1 | 	sub	objptr, ##34896
1ff90     F2 FA 01 F6 | 	mov	result1, objptr
1ff94     00 78 02 FF 
1ff98     00 FA 45 F5 | 	or	result1, ##82837504
1ff9c     44 00 00 FF 
1ffa0     54 E4 05 F1 | 	add	objptr, ##34900
1ffa4     F2 FA 61 FC | 	wrlong	result1, objptr
1ffa8     44 00 00 FF 
1ffac     54 E4 85 F1 | 	sub	objptr, ##34900
1ffb0     F2 FA 01 F6 | 	mov	result1, objptr
1ffb4     00 80 02 FF 
1ffb8     00 FA 45 F5 | 	or	result1, ##83886080
1ffbc     44 00 00 FF 
1ffc0     58 E4 05 F1 | 	add	objptr, ##34904
1ffc4     F2 FA 61 FC | 	wrlong	result1, objptr
1ffc8     44 00 00 FF 
1ffcc     58 E4 85 F1 | 	sub	objptr, ##34904
1ffd0     F2 FA 01 F6 | 	mov	result1, objptr
1ffd4     00 88 02 FF 
1ffd8     00 FA 45 F5 | 	or	result1, ##84934656
1ffdc     44 00 00 FF 
1ffe0     5C E4 05 F1 | 	add	objptr, ##34908
1ffe4     F2 FA 61 FC | 	wrlong	result1, objptr
1ffe8     44 00 00 FF 
1ffec     5C E4 85 F1 | 	sub	objptr, ##34908
1fff0     F2 FA 01 F6 | 	mov	result1, objptr
1fff4     00 90 02 FF 
1fff8     00 FA 45 F5 | 	or	result1, ##85983232
1fffc     44 00 00 FF 
20000     60 E4 05 F1 | 	add	objptr, ##34912
20004     F2 FA 61 FC | 	wrlong	result1, objptr
20008     44 00 00 FF 
2000c     60 E4 85 F1 | 	sub	objptr, ##34912
20010     F2 FA 01 F6 | 	mov	result1, objptr
20014     00 98 02 FF 
20018     00 FA 45 F5 | 	or	result1, ##87031808
2001c     44 00 00 FF 
20020     64 E4 05 F1 | 	add	objptr, ##34916
20024     F2 FA 61 FC | 	wrlong	result1, objptr
20028     44 00 00 FF 
2002c     64 E4 85 F1 | 	sub	objptr, ##34916
20030     F2 FA 01 F6 | 	mov	result1, objptr
20034     00 A0 02 FF 
20038     00 FA 45 F5 | 	or	result1, ##88080384
2003c     44 00 00 FF 
20040     68 E4 05 F1 | 	add	objptr, ##34920
20044     F2 FA 61 FC | 	wrlong	result1, objptr
20048     44 00 00 FF 
2004c     68 E4 85 F1 | 	sub	objptr, ##34920
20050     F2 FA 01 F6 | 	mov	result1, objptr
20054     00 A8 02 FF 
20058     00 FA 45 F5 | 	or	result1, ##89128960
2005c     44 00 00 FF 
20060     6C E4 05 F1 | 	add	objptr, ##34924
20064     F2 FA 61 FC | 	wrlong	result1, objptr
20068     44 00 00 FF 
2006c     6C E4 85 F1 | 	sub	objptr, ##34924
20070     F2 FA 01 F6 | 	mov	result1, objptr
20074     00 B0 02 FF 
20078     00 FA 45 F5 | 	or	result1, ##90177536
2007c     44 00 00 FF 
20080     78 E4 05 F1 | 	add	objptr, ##34936
20084     F2 FA 61 FC | 	wrlong	result1, objptr
20088     44 00 00 FF 
2008c     78 E4 85 F1 | 	sub	objptr, ##34936
20090     F2 FA 01 F6 | 	mov	result1, objptr
20094     00 B8 02 FF 
20098     00 FA 45 F5 | 	or	result1, ##91226112
2009c     44 00 00 FF 
200a0     70 E4 05 F1 | 	add	objptr, ##34928
200a4     F2 FA 61 FC | 	wrlong	result1, objptr
200a8     44 00 00 FF 
200ac     70 E4 85 F1 | 	sub	objptr, ##34928
200b0     F2 FA 01 F6 | 	mov	result1, objptr
200b4     00 C0 02 FF 
200b8     00 FA 45 F5 | 	or	result1, ##92274688
200bc     44 00 00 FF 
200c0     74 E4 05 F1 | 	add	objptr, ##34932
200c4     F2 FA 61 FC | 	wrlong	result1, objptr
200c8     44 00 00 FF 
200cc     74 E4 85 F1 | 	sub	objptr, ##34932
200d0     F2 FA 01 F6 | 	mov	result1, objptr
200d4     00 C8 02 FF 
200d8     00 FA 45 F5 | 	or	result1, ##93323264
200dc     44 00 00 FF 
200e0     7C E4 05 F1 | 	add	objptr, ##34940
200e4     F2 FA 61 FC | 	wrlong	result1, objptr
200e8     44 00 00 FF 
200ec     7C E4 85 F1 | 	sub	objptr, ##34940
200f0     F2 FA 01 F6 | 	mov	result1, objptr
200f4     00 D0 02 FF 
200f8     00 FA 45 F5 | 	or	result1, ##94371840
200fc     44 00 00 FF 
20100     24 E4 05 F1 | 	add	objptr, ##34852
20104     F2 FA 61 FC | 	wrlong	result1, objptr
20108     44 00 00 FF 
2010c     24 E4 85 F1 | 	sub	objptr, ##34852
20110     F2 FA 01 F6 | 	mov	result1, objptr
20114     00 D8 02 FF 
20118     00 FA 45 F5 | 	or	result1, ##95420416
2011c     44 00 00 FF 
20120     2C E4 05 F1 | 	add	objptr, ##34860
20124     F2 FA 61 FC | 	wrlong	result1, objptr
20128     44 00 00 FF 
2012c     2C E4 85 F1 | 	sub	objptr, ##34860
20130     F2 FA 01 F6 | 	mov	result1, objptr
20134     00 E0 02 FF 
20138     00 FA 45 F5 | 	or	result1, ##96468992
2013c     44 00 00 FF 
20140     30 E4 05 F1 | 	add	objptr, ##34864
20144     F2 FA 61 FC | 	wrlong	result1, objptr
20148     44 00 00 FF 
2014c     30 E4 85 F1 | 	sub	objptr, ##34864
20150     F2 FA 01 F6 | 	mov	result1, objptr
20154     00 E8 02 FF 
20158     00 FA 45 F5 | 	or	result1, ##97517568
2015c     44 00 00 FF 
20160     80 E4 05 F1 | 	add	objptr, ##34944
20164     F2 FA 61 FC | 	wrlong	result1, objptr
20168     44 00 00 FF 
2016c     80 E4 85 F1 | 	sub	objptr, ##34944
20170     F2 FA 01 F6 | 	mov	result1, objptr
20174     00 F0 02 FF 
20178     00 FA 45 F5 | 	or	result1, ##98566144
2017c     44 00 00 FF 
20180     84 E4 05 F1 | 	add	objptr, ##34948
20184     F2 FA 61 FC | 	wrlong	result1, objptr
20188     44 00 00 FF 
2018c     84 E4 85 F1 | 	sub	objptr, ##34948
20190     F2 FA 01 F6 | 	mov	result1, objptr
20194     00 F8 02 FF 
20198     00 FA 45 F5 | 	or	result1, ##99614720
2019c     44 00 00 FF 
201a0     88 E4 05 F1 | 	add	objptr, ##34952
201a4     F2 FA 61 FC | 	wrlong	result1, objptr
201a8     44 00 00 FF 
201ac     88 E4 85 F1 | 	sub	objptr, ##34952
201b0     F2 FA 01 F6 | 	mov	result1, objptr
201b4     39 FA 25 F4 | 	bith	result1, #57
201b8     44 00 00 FF 
201bc     34 E4 05 F1 | 	add	objptr, ##34868
201c0     F2 FA 61 FC | 	wrlong	result1, objptr
201c4     44 00 00 FF 
201c8     34 E4 85 F1 | 	sub	objptr, ##34868
201cc     F2 FA 01 F6 | 	mov	result1, objptr
201d0     00 08 03 FF 
201d4     00 FA 45 F5 | 	or	result1, ##101711872
201d8     44 00 00 FF 
201dc     98 E4 05 F1 | 	add	objptr, ##34968
201e0     F2 FA 61 FC | 	wrlong	result1, objptr
201e4     44 00 00 FF 
201e8     98 E4 85 F1 | 	sub	objptr, ##34968
201ec     F2 FA 01 F6 | 	mov	result1, objptr
201f0     00 10 03 FF 
201f4     00 FA 45 F5 | 	or	result1, ##102760448
201f8     44 00 00 FF 
201fc     A0 E4 05 F1 | 	add	objptr, ##34976
20200     F2 FA 61 FC | 	wrlong	result1, objptr
20204     44 00 00 FF 
20208     A0 E4 85 F1 | 	sub	objptr, ##34976
2020c     F2 FA 01 F6 | 	mov	result1, objptr
20210     00 18 03 FF 
20214     00 FA 45 F5 | 	or	result1, ##103809024
20218     44 00 00 FF 
2021c     94 E4 05 F1 | 	add	objptr, ##34964
20220     F2 FA 61 FC | 	wrlong	result1, objptr
20224     44 00 00 FF 
20228     94 E4 85 F1 | 	sub	objptr, ##34964
2022c     F2 FA 01 F6 | 	mov	result1, objptr
20230     00 20 03 FF 
20234     00 FA 45 F5 | 	or	result1, ##104857600
20238     44 00 00 FF 
2023c     90 E4 05 F1 | 	add	objptr, ##34960
20240     F2 FA 61 FC | 	wrlong	result1, objptr
20244     44 00 00 FF 
20248     90 E4 85 F1 | 	sub	objptr, ##34960
2024c     F2 FA 01 F6 | 	mov	result1, objptr
20250     00 28 03 FF 
20254     00 FA 45 F5 | 	or	result1, ##105906176
20258     44 00 00 FF 
2025c     8C E4 05 F1 | 	add	objptr, ##34956
20260     F2 FA 61 FC | 	wrlong	result1, objptr
20264     44 00 00 FF 
20268     8C E4 85 F1 | 	sub	objptr, ##34956
2026c     F2 FA 01 F6 | 	mov	result1, objptr
20270     00 30 03 FF 
20274     00 FA 45 F5 | 	or	result1, ##106954752
20278     44 00 00 FF 
2027c     9C E4 05 F1 | 	add	objptr, ##34972
20280     F2 FA 61 FC | 	wrlong	result1, objptr
20284     44 00 00 FF 
20288     9C E4 85 F1 | 	sub	objptr, ##34972
2028c     F2 FA 01 F6 | 	mov	result1, objptr
20290     00 38 03 FF 
20294     00 FA 45 F5 | 	or	result1, ##108003328
20298     44 00 00 FF 
2029c     A4 E4 05 F1 | 	add	objptr, ##34980
202a0     F2 FA 61 FC | 	wrlong	result1, objptr
202a4     44 00 00 FF 
202a8     A4 E4 85 F1 | 	sub	objptr, ##34980
202ac     F2 FA 01 F6 | 	mov	result1, objptr
202b0     00 40 03 FF 
202b4     00 FA 45 F5 | 	or	result1, ##109051904
202b8     44 00 00 FF 
202bc     A8 E4 05 F1 | 	add	objptr, ##34984
202c0     F2 FA 61 FC | 	wrlong	result1, objptr
202c4     44 00 00 FF 
202c8     A8 E4 85 F1 | 	sub	objptr, ##34984
202cc     F2 FA 01 F6 | 	mov	result1, objptr
202d0     00 48 03 FF 
202d4     00 FA 45 F5 | 	or	result1, ##110100480
202d8     44 00 00 FF 
202dc     AC E4 05 F1 | 	add	objptr, ##34988
202e0     F2 FA 61 FC | 	wrlong	result1, objptr
202e4     44 00 00 FF 
202e8     AC E4 85 F1 | 	sub	objptr, ##34988
202ec     F2 FA 01 F6 | 	mov	result1, objptr
202f0     00 50 03 FF 
202f4     00 FA 45 F5 | 	or	result1, ##111149056
202f8     44 00 00 FF 
202fc     B4 E4 05 F1 | 	add	objptr, ##34996
20300     F2 FA 61 FC | 	wrlong	result1, objptr
20304     44 00 00 FF 
20308     B4 E4 85 F1 | 	sub	objptr, ##34996
2030c     F2 FA 01 F6 | 	mov	result1, objptr
20310     00 58 03 FF 
20314     00 FA 45 F5 | 	or	result1, ##112197632
20318     44 00 00 FF 
2031c     B8 E4 05 F1 | 	add	objptr, ##35000
20320     F2 FA 61 FC | 	wrlong	result1, objptr
20324     44 00 00 FF 
20328     B8 E4 85 F1 | 	sub	objptr, ##35000
2032c     F2 FA 01 F6 | 	mov	result1, objptr
20330     00 60 03 FF 
20334     00 FA 45 F5 | 	or	result1, ##113246208
20338     44 00 00 FF 
2033c     BC E4 05 F1 | 	add	objptr, ##35004
20340     F2 FA 61 FC | 	wrlong	result1, objptr
20344     44 00 00 FF 
20348     BC E4 85 F1 | 	sub	objptr, ##35004
2034c     F2 FA 01 F6 | 	mov	result1, objptr
20350     00 68 03 FF 
20354     00 FA 45 F5 | 	or	result1, ##114294784
20358     44 00 00 FF 
2035c     C0 E4 05 F1 | 	add	objptr, ##35008
20360     F2 FA 61 FC | 	wrlong	result1, objptr
20364     44 00 00 FF 
20368     C0 E4 85 F1 | 	sub	objptr, ##35008
2036c     F2 FA 01 F6 | 	mov	result1, objptr
20370     00 70 03 FF 
20374     00 FA 45 F5 | 	or	result1, ##115343360
20378     44 00 00 FF 
2037c     C4 E4 05 F1 | 	add	objptr, ##35012
20380     F2 FA 61 FC | 	wrlong	result1, objptr
20384     44 00 00 FF 
20388     C4 E4 85 F1 | 	sub	objptr, ##35012
2038c     F2 FA 01 F6 | 	mov	result1, objptr
20390     00 78 03 FF 
20394     00 FA 45 F5 | 	or	result1, ##116391936
20398     44 00 00 FF 
2039c     C8 E4 05 F1 | 	add	objptr, ##35016
203a0     F2 FA 61 FC | 	wrlong	result1, objptr
203a4     44 00 00 FF 
203a8     C8 E4 85 F1 | 	sub	objptr, ##35016
203ac     F2 FA 01 F6 | 	mov	result1, objptr
203b0     00 08 01 FF 
203b4     00 FA 45 F5 | 	or	result1, ##34603008
203b8     44 00 00 FF 
203bc     CC E4 05 F1 | 	add	objptr, ##35020
203c0     F2 FA 61 FC | 	wrlong	result1, objptr
203c4     44 00 00 FF 
203c8     CC E4 85 F1 | 	sub	objptr, ##35020
203cc     F2 FA 01 F6 | 	mov	result1, objptr
203d0     58 FA 25 F4 | 	bith	result1, #88
203d4     44 00 00 FF 
203d8     D0 E4 05 F1 | 	add	objptr, ##35024
203dc     F2 FA 61 FC | 	wrlong	result1, objptr
203e0     44 00 00 FF 
203e4     D0 E4 85 F1 | 	sub	objptr, ##35024
203e8     F2 FA 01 F6 | 	mov	result1, objptr
203ec     00 88 03 FF 
203f0     00 FA 45 F5 | 	or	result1, ##118489088
203f4     44 00 00 FF 
203f8     B0 E4 05 F1 | 	add	objptr, ##34992
203fc     F2 FA 61 FC | 	wrlong	result1, objptr
20400     44 00 00 FF 
20404     B0 E4 85 F1 | 	sub	objptr, ##34992
20408     F2 FA 01 F6 | 	mov	result1, objptr
2040c     00 90 03 FF 
20410     00 FA 45 F5 | 	or	result1, ##119537664
20414     43 00 00 FF 
20418     A8 E4 05 F1 | 	add	objptr, ##34472
2041c     F2 FA 61 FC | 	wrlong	result1, objptr
20420     43 00 00 FF 
20424     A8 E4 85 F1 | 	sub	objptr, ##34472
20428     F2 FA 01 F6 | 	mov	result1, objptr
2042c     00 98 03 FF 
20430     00 FA 45 F5 | 	or	result1, ##120586240
20434     44 00 00 FF 
20438     D4 E4 05 F1 | 	add	objptr, ##35028
2043c     F2 FA 61 FC | 	wrlong	result1, objptr
20440     44 00 00 FF 
20444     D4 E4 85 F1 | 	sub	objptr, ##35028
20448     F2 FA 01 F6 | 	mov	result1, objptr
2044c     00 A0 03 FF 
20450     00 FA 45 F5 | 	or	result1, ##121634816
20454     44 00 00 FF 
20458     D8 E4 05 F1 | 	add	objptr, ##35032
2045c     F2 FA 61 FC | 	wrlong	result1, objptr
20460     44 00 00 FF 
20464     D8 E4 85 F1 | 	sub	objptr, ##35032
20468     F2 FA 01 F6 | 	mov	result1, objptr
2046c     00 A8 03 FF 
20470     00 FA 45 F5 | 	or	result1, ##122683392
20474     44 00 00 FF 
20478     EC E4 05 F1 | 	add	objptr, ##35052
2047c     F2 FA 61 FC | 	wrlong	result1, objptr
20480     44 00 00 FF 
20484     EC E4 85 F1 | 	sub	objptr, ##35052
20488     F2 FA 01 F6 | 	mov	result1, objptr
2048c     00 B0 03 FF 
20490     00 FA 45 F5 | 	or	result1, ##123731968
20494     44 00 00 FF 
20498     E8 E4 05 F1 | 	add	objptr, ##35048
2049c     F2 FA 61 FC | 	wrlong	result1, objptr
204a0     44 00 00 FF 
204a4     E8 E4 85 F1 | 	sub	objptr, ##35048
204a8     F2 FA 01 F6 | 	mov	result1, objptr
204ac     00 B8 03 FF 
204b0     00 FA 45 F5 | 	or	result1, ##124780544
204b4     44 00 00 FF 
204b8     E0 E4 05 F1 | 	add	objptr, ##35040
204bc     F2 FA 61 FC | 	wrlong	result1, objptr
204c0     44 00 00 FF 
204c4     E0 E4 85 F1 | 	sub	objptr, ##35040
204c8     F2 FA 01 F6 | 	mov	result1, objptr
204cc     77 FA 25 F4 | 	bith	result1, #119
204d0     44 00 00 FF 
204d4     DC E4 05 F1 | 	add	objptr, ##35036
204d8     F2 FA 61 FC | 	wrlong	result1, objptr
204dc     44 00 00 FF 
204e0     DC E4 85 F1 | 	sub	objptr, ##35036
204e4     F2 FA 01 F6 | 	mov	result1, objptr
204e8     00 C8 03 FF 
204ec     00 FA 45 F5 | 	or	result1, ##126877696
204f0     44 00 00 FF 
204f4     FC E4 05 F1 | 	add	objptr, ##35068
204f8     F2 FA 61 FC | 	wrlong	result1, objptr
204fc     44 00 00 FF 
20500     FC E4 85 F1 | 	sub	objptr, ##35068
20504     F2 FA 01 F6 | 	mov	result1, objptr
20508     00 D0 03 FF 
2050c     00 FA 45 F5 | 	or	result1, ##127926272
20510     44 00 00 FF 
20514     F0 E4 05 F1 | 	add	objptr, ##35056
20518     F2 FA 61 FC | 	wrlong	result1, objptr
2051c     44 00 00 FF 
20520     F0 E4 85 F1 | 	sub	objptr, ##35056
20524     F2 FA 01 F6 | 	mov	result1, objptr
20528     00 D8 03 FF 
2052c     00 FA 45 F5 | 	or	result1, ##128974848
20530     44 00 00 FF 
20534     F4 E4 05 F1 | 	add	objptr, ##35060
20538     F2 FA 61 FC | 	wrlong	result1, objptr
2053c     44 00 00 FF 
20540     F4 E4 85 F1 | 	sub	objptr, ##35060
20544     F2 FA 01 F6 | 	mov	result1, objptr
20548     96 FA 25 F4 | 	bith	result1, #150
2054c     44 00 00 FF 
20550     F8 E4 05 F1 | 	add	objptr, ##35064
20554     F2 FA 61 FC | 	wrlong	result1, objptr
20558     44 00 00 FF 
2055c     F8 E4 85 F1 | 	sub	objptr, ##35064
20560     F2 FA 01 F6 | 	mov	result1, objptr
20564     00 E8 03 FF 
20568     00 FA 45 F5 | 	or	result1, ##131072000
2056c     44 00 00 FF 
20570     00 E5 05 F1 | 	add	objptr, ##35072
20574     F2 FA 61 FC | 	wrlong	result1, objptr
20578     44 00 00 FF 
2057c     00 E5 85 F1 | 	sub	objptr, ##35072
20580     F2 FA 01 F6 | 	mov	result1, objptr
20584     B5 FA 25 F4 | 	bith	result1, #181
20588     44 00 00 FF 
2058c     04 E5 05 F1 | 	add	objptr, ##35076
20590     F2 FA 61 FC | 	wrlong	result1, objptr
20594     44 00 00 FF 
20598     04 E5 85 F1 | 	sub	objptr, ##35076
2059c     F2 FA 01 F6 | 	mov	result1, objptr
205a0     D4 FA 25 F4 | 	bith	result1, #212
205a4     44 00 00 FF 
205a8     08 E5 05 F1 | 	add	objptr, ##35080
205ac     F2 FA 61 FC | 	wrlong	result1, objptr
205b0     44 00 00 FF 
205b4     08 E5 85 F1 | 	sub	objptr, ##35080
205b8     F2 FA 01 F6 | 	mov	result1, objptr
205bc     1B FA 25 F4 | 	bith	result1, #27
205c0     44 00 00 FF 
205c4     0C E5 05 F1 | 	add	objptr, ##35084
205c8     F2 FA 61 FC | 	wrlong	result1, objptr
205cc     44 00 00 FF 
205d0     0C E5 85 F1 | 	sub	objptr, ##35084
205d4     F2 FA 01 F6 | 	mov	result1, objptr
205d8     00 08 04 FF 
205dc     00 FA 45 F5 | 	or	result1, ##135266304
205e0     44 00 00 FF 
205e4     10 E5 05 F1 | 	add	objptr, ##35088
205e8     F2 FA 61 FC | 	wrlong	result1, objptr
205ec     44 00 00 FF 
205f0     10 E5 85 F1 | 	sub	objptr, ##35088
205f4     F2 FA 01 F6 | 	mov	result1, objptr
205f8     00 10 04 FF 
205fc     00 FA 45 F5 | 	or	result1, ##136314880
20600     44 00 00 FF 
20604     14 E5 05 F1 | 	add	objptr, ##35092
20608     F2 FA 61 FC | 	wrlong	result1, objptr
2060c     44 00 00 FF 
20610     14 E5 85 F1 | 	sub	objptr, ##35092
20614     F2 FA 01 F6 | 	mov	result1, objptr
20618     00 18 04 FF 
2061c     00 FA 45 F5 | 	or	result1, ##137363456
20620     44 00 00 FF 
20624     1C E5 05 F1 | 	add	objptr, ##35100
20628     F2 FA 61 FC | 	wrlong	result1, objptr
2062c     44 00 00 FF 
20630     1C E5 85 F1 | 	sub	objptr, ##35100
20634     F2 FA 01 F6 | 	mov	result1, objptr
20638     00 20 04 FF 
2063c     00 FA 45 F5 | 	or	result1, ##138412032
20640     44 00 00 FF 
20644     20 E5 05 F1 | 	add	objptr, ##35104
20648     F2 FA 61 FC | 	wrlong	result1, objptr
2064c     44 00 00 FF 
20650     20 E5 85 F1 | 	sub	objptr, ##35104
20654     F2 FA 01 F6 | 	mov	result1, objptr
20658     00 28 04 FF 
2065c     00 FA 45 F5 | 	or	result1, ##139460608
20660     44 00 00 FF 
20664     24 E5 05 F1 | 	add	objptr, ##35108
20668     F2 FA 61 FC | 	wrlong	result1, objptr
2066c     44 00 00 FF 
20670     24 E5 85 F1 | 	sub	objptr, ##35108
20674     F2 FA 01 F6 | 	mov	result1, objptr
20678     00 30 04 FF 
2067c     00 FA 45 F5 | 	or	result1, ##140509184
20680     44 00 00 FF 
20684     18 E5 05 F1 | 	add	objptr, ##35096
20688     F2 FA 61 FC | 	wrlong	result1, objptr
2068c     44 00 00 FF 
20690     18 E5 85 F1 | 	sub	objptr, ##35096
20694     F2 FA 01 F6 | 	mov	result1, objptr
20698     00 38 04 FF 
2069c     00 FA 45 F5 | 	or	result1, ##141557760
206a0     44 00 00 FF 
206a4     28 E5 05 F1 | 	add	objptr, ##35112
206a8     F2 FA 61 FC | 	wrlong	result1, objptr
206ac     44 00 00 FF 
206b0     28 E5 85 F1 | 	sub	objptr, ##35112
206b4     F2 FA 01 F6 | 	mov	result1, objptr
206b8     00 40 04 FF 
206bc     00 FA 45 F5 | 	or	result1, ##142606336
206c0     44 00 00 FF 
206c4     5C E5 05 F1 | 	add	objptr, ##35164
206c8     F2 FA 61 FC | 	wrlong	result1, objptr
206cc     44 00 00 FF 
206d0     5C E5 85 F1 | 	sub	objptr, ##35164
206d4     F2 FA 01 F6 | 	mov	result1, objptr
206d8     00 48 04 FF 
206dc     00 FA 45 F5 | 	or	result1, ##143654912
206e0     44 00 00 FF 
206e4     54 E5 05 F1 | 	add	objptr, ##35156
206e8     F2 FA 61 FC | 	wrlong	result1, objptr
206ec     44 00 00 FF 
206f0     54 E5 85 F1 | 	sub	objptr, ##35156
206f4     F2 FA 01 F6 | 	mov	result1, objptr
206f8     00 50 04 FF 
206fc     00 FA 45 F5 | 	or	result1, ##144703488
20700     44 00 00 FF 
20704     2C E5 05 F1 | 	add	objptr, ##35116
20708     F2 FA 61 FC | 	wrlong	result1, objptr
2070c     44 00 00 FF 
20710     2C E5 85 F1 | 	sub	objptr, ##35116
20714     F2 FA 01 F6 | 	mov	result1, objptr
20718     00 58 04 FF 
2071c     00 FA 45 F5 | 	or	result1, ##145752064
20720     44 00 00 FF 
20724     30 E5 05 F1 | 	add	objptr, ##35120
20728     F2 FA 61 FC | 	wrlong	result1, objptr
2072c     44 00 00 FF 
20730     30 E5 85 F1 | 	sub	objptr, ##35120
20734     F2 FA 01 F6 | 	mov	result1, objptr
20738     00 60 04 FF 
2073c     00 FA 45 F5 | 	or	result1, ##146800640
20740     44 00 00 FF 
20744     4C E5 05 F1 | 	add	objptr, ##35148
20748     F2 FA 61 FC | 	wrlong	result1, objptr
2074c     44 00 00 FF 
20750     4C E5 85 F1 | 	sub	objptr, ##35148
20754     F2 FA 01 F6 | 	mov	result1, objptr
20758     00 68 04 FF 
2075c     00 FA 45 F5 | 	or	result1, ##147849216
20760     44 00 00 FF 
20764     50 E5 05 F1 | 	add	objptr, ##35152
20768     F2 FA 61 FC | 	wrlong	result1, objptr
2076c     44 00 00 FF 
20770     50 E5 85 F1 | 	sub	objptr, ##35152
20774     F2 FA 01 F6 | 	mov	result1, objptr
20778     00 70 04 FF 
2077c     00 FA 45 F5 | 	or	result1, ##148897792
20780     44 00 00 FF 
20784     6C E5 05 F1 | 	add	objptr, ##35180
20788     F2 FA 61 FC | 	wrlong	result1, objptr
2078c     44 00 00 FF 
20790     6C E5 85 F1 | 	sub	objptr, ##35180
20794     F2 FA 01 F6 | 	mov	result1, objptr
20798     00 78 04 FF 
2079c     00 FA 45 F5 | 	or	result1, ##149946368
207a0     44 00 00 FF 
207a4     68 E5 05 F1 | 	add	objptr, ##35176
207a8     F2 FA 61 FC | 	wrlong	result1, objptr
207ac     44 00 00 FF 
207b0     68 E5 85 F1 | 	sub	objptr, ##35176
207b4     F2 FA 01 F6 | 	mov	result1, objptr
207b8     00 80 04 FF 
207bc     00 FA 45 F5 | 	or	result1, ##150994944
207c0     44 00 00 FF 
207c4     78 E5 05 F1 | 	add	objptr, ##35192
207c8     F2 FA 61 FC | 	wrlong	result1, objptr
207cc     44 00 00 FF 
207d0     78 E5 85 F1 | 	sub	objptr, ##35192
207d4     F2 FA 01 F6 | 	mov	result1, objptr
207d8     00 88 04 FF 
207dc     00 FA 45 F5 | 	or	result1, ##152043520
207e0     44 00 00 FF 
207e4     44 E5 05 F1 | 	add	objptr, ##35140
207e8     F2 FA 61 FC | 	wrlong	result1, objptr
207ec     44 00 00 FF 
207f0     44 E5 85 F1 | 	sub	objptr, ##35140
207f4     F2 FA 01 F6 | 	mov	result1, objptr
207f8     00 90 04 FF 
207fc     00 FA 45 F5 | 	or	result1, ##153092096
20800     44 00 00 FF 
20804     74 E5 05 F1 | 	add	objptr, ##35188
20808     F2 FA 61 FC | 	wrlong	result1, objptr
2080c     44 00 00 FF 
20810     74 E5 85 F1 | 	sub	objptr, ##35188
20814     F2 FA 01 F6 | 	mov	result1, objptr
20818     00 98 04 FF 
2081c     00 FA 45 F5 | 	or	result1, ##154140672
20820     44 00 00 FF 
20824     64 E5 05 F1 | 	add	objptr, ##35172
20828     F2 FA 61 FC | 	wrlong	result1, objptr
2082c     44 00 00 FF 
20830     64 E5 85 F1 | 	sub	objptr, ##35172
20834     F2 FA 01 F6 | 	mov	result1, objptr
20838     00 A0 04 FF 
2083c     00 FA 45 F5 | 	or	result1, ##155189248
20840     43 00 00 FF 
20844     14 E5 05 F1 | 	add	objptr, ##34580
20848     F2 FA 61 FC | 	wrlong	result1, objptr
2084c     43 00 00 FF 
20850     14 E5 85 F1 | 	sub	objptr, ##34580
20854     F2 FA 01 F6 | 	mov	result1, objptr
20858     00 A8 04 FF 
2085c     00 FA 45 F5 | 	or	result1, ##156237824
20860     44 00 00 FF 
20864     34 E5 05 F1 | 	add	objptr, ##35124
20868     F2 FA 61 FC | 	wrlong	result1, objptr
2086c     44 00 00 FF 
20870     34 E5 85 F1 | 	sub	objptr, ##35124
20874     F2 FA 01 F6 | 	mov	result1, objptr
20878     00 08 01 FF 
2087c     00 FA 45 F5 | 	or	result1, ##34603008
20880     44 00 00 FF 
20884     3C E5 05 F1 | 	add	objptr, ##35132
20888     F2 FA 61 FC | 	wrlong	result1, objptr
2088c     44 00 00 FF 
20890     3C E5 85 F1 | 	sub	objptr, ##35132
20894     F2 FA 01 F6 | 	mov	result1, objptr
20898     00 B0 04 FF 
2089c     00 FA 45 F5 | 	or	result1, ##157286400
208a0     44 00 00 FF 
208a4     38 E5 05 F1 | 	add	objptr, ##35128
208a8     F2 FA 61 FC | 	wrlong	result1, objptr
208ac     44 00 00 FF 
208b0     38 E5 85 F1 | 	sub	objptr, ##35128
208b4     F2 FA 01 F6 | 	mov	result1, objptr
208b8     00 B8 04 FF 
208bc     00 FA 45 F5 | 	or	result1, ##158334976
208c0     44 00 00 FF 
208c4     7C E5 05 F1 | 	add	objptr, ##35196
208c8     F2 FA 61 FC | 	wrlong	result1, objptr
208cc     44 00 00 FF 
208d0     7C E5 85 F1 | 	sub	objptr, ##35196
208d4                 | _init_commands_ret
208d4     2D 00 64 FD | 	ret
208d8                 | 
208d8                 | ' 
208d8                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
208d8                 | ' 
208d8                 | ' sub init_audio
208d8                 | _init_audio
208d8     06 4A 05 F6 | 	mov	COUNT_, #6
208dc     A8 00 A0 FD | 	call	#pushregs_
208e0     00 C0 1F FF 
208e4     00 26 06 F6 | 	mov	local01, ##1065353216
208e8                 | ' 
208e8                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
208e8     00 28 06 F6 | 	mov	local02, #0
208ec                 | LR__2540
208ec     14 2B 02 F6 | 	mov	local03, local02
208f0     01 2A 66 F0 | 	shl	local03, #1
208f4     58 7F 23 FF 
208f8     00 2C 06 F6 | 	mov	local04, ##1191096320
208fc     14 13 52 F6 | 	abs	arg01, local02 wc
20900     1F 2E C6 C9 |  if_b	decod	local05, #31
20904     00 2E 06 36 |  if_ae	mov	local05, #0
20908     DC 6F B0 FD | 	call	#__system___float_fromuns
2090c     17 FB 61 F5 | 	xor	result1, local05
20910     FD 12 02 F6 | 	mov	arg01, result1
20914     87 24 20 FF 
20918     DB 15 06 F6 | 	mov	arg02, ##1078530011
2091c     CC 73 B0 FD | 	call	#__system___float_mul
20920     FD 12 02 F6 | 	mov	arg01, result1
20924     00 00 22 FF 
20928     00 14 06 F6 | 	mov	arg02, ##1140850688
2092c     C0 75 B0 FD | 	call	#__system___float_div
20930     FD 12 02 F6 | 	mov	arg01, result1
20934     14 7D B0 FD | 	call	#__system____builtin_sinf
20938     FD 14 02 F6 | 	mov	arg02, result1
2093c     16 13 02 F6 | 	mov	arg01, local04
20940     A8 73 B0 FD | 	call	#__system___float_mul
20944     FD 12 02 F6 | 	mov	arg01, result1
20948     01 14 06 F6 | 	mov	arg02, #1
2094c     64 78 B0 FD | 	call	#__system___float_tointeger
20950     FD 14 02 F6 | 	mov	arg02, result1
20954     15 13 02 F6 | 	mov	arg01, local03
20958     5C 0D B0 FD | 	call	#_psdpoke
2095c     01 28 06 F1 | 	add	local02, #1
20960     02 00 00 FF 
20964     00 28 56 F2 | 	cmps	local02, ##1024 wc
20968     80 FF 9F CD |  if_b	jmp	#LR__2540
2096c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
2096c     00 28 06 F6 | 	mov	local02, #0
20970                 | LR__2541
20970     14 15 02 F6 | 	mov	arg02, local02
20974     01 14 66 F0 | 	shl	arg02, #1
20978     0B 12 C6 F9 | 	decod	arg01, #11
2097c     0A 13 02 F1 | 	add	arg01, arg02
20980     14 2D 02 F6 | 	mov	local04, local02
20984     07 2C 66 F0 | 	shl	local04, #7
20988     14 2D 82 F1 | 	sub	local04, local02
2098c     C0 FF 7F FF 
20990     00 15 06 F6 | 	mov	arg02, ##-32512
20994     16 15 02 F1 | 	add	arg02, local04
20998     1C 0D B0 FD | 	call	#_psdpoke
2099c     09 2C C6 F9 | 	decod	local04, #9
209a0     14 2D 02 F1 | 	add	local04, local02
209a4     01 2C 66 F0 | 	shl	local04, #1
209a8     0B 12 C6 F9 | 	decod	arg01, #11
209ac     16 13 02 F1 | 	add	arg01, local04
209b0     14 2F 02 F6 | 	mov	local05, local02
209b4     07 2E 66 F0 | 	shl	local05, #7
209b8     14 2F 82 F1 | 	sub	local05, local02
209bc     3F 00 00 FF 
209c0     00 15 06 F6 | 	mov	arg02, ##32512
209c4     17 15 82 F1 | 	sub	arg02, local05
209c8     EC 0C B0 FD | 	call	#_psdpoke
209cc     01 28 06 F1 | 	add	local02, #1
209d0     01 00 00 FF 
209d4     00 28 56 F2 | 	cmps	local02, ##512 wc
209d8     94 FF 9F CD |  if_b	jmp	#LR__2541
209dc                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
209dc     00 28 06 F6 | 	mov	local02, #0
209e0                 | LR__2542
209e0     14 2F 02 F6 | 	mov	local05, local02
209e4     01 2E 66 F0 | 	shl	local05, #1
209e8     0C 12 C6 F9 | 	decod	arg01, #12
209ec     17 13 02 F1 | 	add	arg01, local05
209f0     14 2F 02 F6 | 	mov	local05, local02
209f4     06 2E 66 F0 | 	shl	local05, #6
209f8     14 2F 82 F1 | 	sub	local05, local02
209fc     C1 FF 7F FF 
20a00     00 14 06 F6 | 	mov	arg02, ##-32256
20a04     17 15 02 F1 | 	add	arg02, local05
20a08     AC 0C B0 FD | 	call	#_psdpoke
20a0c     01 28 06 F1 | 	add	local02, #1
20a10     02 00 00 FF 
20a14     00 28 56 F2 | 	cmps	local02, ##1024 wc
20a18     C4 FF 9F CD |  if_b	jmp	#LR__2542
20a1c                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
20a1c     00 28 06 F6 | 	mov	local02, #0
20a20                 | LR__2543
20a20     14 2F 02 F6 | 	mov	local05, local02
20a24     01 2E 66 F0 | 	shl	local05, #1
20a28     0C 00 00 FF 
20a2c     00 12 06 F6 | 	mov	arg01, ##6144
20a30     17 13 02 F1 | 	add	arg01, local05
20a34     C0 FF 7F FF 
20a38     A8 14 06 F6 | 	mov	arg02, ##-32600
20a3c     78 0C B0 FD | 	call	#_psdpoke
20a40     01 28 06 F1 | 	add	local02, #1
20a44     80 28 56 F2 | 	cmps	local02, #128 wc
20a48     D4 FF 9F CD |  if_b	jmp	#LR__2543
20a4c     80 28 06 F6 | 	mov	local02, #128
20a50                 | LR__2544
20a50     14 2F 02 F6 | 	mov	local05, local02
20a54     01 2E 66 F0 | 	shl	local05, #1
20a58     0C 00 00 FF 
20a5c     00 12 06 F6 | 	mov	arg01, ##6144
20a60     17 13 02 F1 | 	add	arg01, local05
20a64     3F 00 00 FF 
20a68     58 15 06 F6 | 	mov	arg02, ##32600
20a6c     48 0C B0 FD | 	call	#_psdpoke
20a70     01 28 06 F1 | 	add	local02, #1
20a74     02 00 00 FF 
20a78     00 28 16 F2 | 	cmp	local02, ##1024 wc
20a7c     D0 FF 9F CD |  if_b	jmp	#LR__2544
20a80                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
20a80     00 28 06 F6 | 	mov	local02, #0
20a84                 | LR__2545
20a84     14 2F 02 F6 | 	mov	local05, local02
20a88     01 2E 66 F0 | 	shl	local05, #1
20a8c     0D 12 C6 F9 | 	decod	arg01, #13
20a90     17 13 02 F1 | 	add	arg01, local05
20a94     C0 FF 7F FF 
20a98     A8 14 06 F6 | 	mov	arg02, ##-32600
20a9c     18 0C B0 FD | 	call	#_psdpoke
20aa0     01 28 06 F1 | 	add	local02, #1
20aa4     01 00 00 FF 
20aa8     00 28 56 F2 | 	cmps	local02, ##512 wc
20aac     D4 FF 9F CD |  if_b	jmp	#LR__2545
20ab0     09 28 C6 F9 | 	decod	local02, #9
20ab4                 | LR__2546
20ab4     14 2F 02 F6 | 	mov	local05, local02
20ab8     01 2E 66 F0 | 	shl	local05, #1
20abc     0D 12 C6 F9 | 	decod	arg01, #13
20ac0     17 13 02 F1 | 	add	arg01, local05
20ac4     3F 00 00 FF 
20ac8     58 15 06 F6 | 	mov	arg02, ##32600
20acc     E8 0B B0 FD | 	call	#_psdpoke
20ad0     01 28 06 F1 | 	add	local02, #1
20ad4     02 00 00 FF 
20ad8     00 28 16 F2 | 	cmp	local02, ##1024 wc
20adc     D4 FF 9F CD |  if_b	jmp	#LR__2546
20ae0                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
20ae0     00 28 06 F6 | 	mov	local02, #0
20ae4                 | LR__2547
20ae4     14 2F 02 F6 | 	mov	local05, local02
20ae8     01 2E 66 F0 | 	shl	local05, #1
20aec     14 00 00 FF 
20af0     00 12 06 F6 | 	mov	arg01, ##10240
20af4     17 13 02 F1 | 	add	arg01, local05
20af8     C0 FF 7F FF 
20afc     A8 14 06 F6 | 	mov	arg02, ##-32600
20b00     B4 0B B0 FD | 	call	#_psdpoke
20b04     01 28 06 F1 | 	add	local02, #1
20b08     00 29 56 F2 | 	cmps	local02, #256 wc
20b0c     D4 FF 9F CD |  if_b	jmp	#LR__2547
20b10     00 29 06 F6 | 	mov	local02, #256
20b14                 | LR__2548
20b14     14 2F 02 F6 | 	mov	local05, local02
20b18     01 2E 66 F0 | 	shl	local05, #1
20b1c     14 00 00 FF 
20b20     00 12 06 F6 | 	mov	arg01, ##10240
20b24     17 13 02 F1 | 	add	arg01, local05
20b28     3F 00 00 FF 
20b2c     58 15 06 F6 | 	mov	arg02, ##32600
20b30     84 0B B0 FD | 	call	#_psdpoke
20b34     01 28 06 F1 | 	add	local02, #1
20b38     02 00 00 FF 
20b3c     00 28 16 F2 | 	cmp	local02, ##1024 wc
20b40     D0 FF 9F CD |  if_b	jmp	#LR__2548
20b44                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
20b44     18 00 00 FF 
20b48     00 28 06 F6 | 	mov	local02, ##12288
20b4c                 | LR__2549
20b4c     14 13 02 F6 | 	mov	arg01, local02
20b50     00 14 06 F6 | 	mov	arg02, #0
20b54     18 0B B0 FD | 	call	#_pslpoke
20b58     04 28 06 F1 | 	add	local02, #4
20b5c     77 00 00 FF 
20b60     FD 29 56 F2 | 	cmps	local02, ##61437 wc
20b64     E4 FF 9F CD |  if_b	jmp	#LR__2549
20b68                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
20b68     00 28 06 F6 | 	mov	local02, #0
20b6c                 | LR__2550
20b6c     14 2F 02 F6 | 	mov	local05, local02
20b70     01 2E 66 F0 | 	shl	local05, #1
20b74     78 00 00 FF 
20b78     00 2A 06 F6 | 	mov	local03, ##61440
20b7c     17 2B 02 F1 | 	add	local03, local05
20b80     12 00 00 FF 
20b84     BA EA 05 F1 | 	add	ptr__dat__, ##9402
20b88     F5 12 02 F6 | 	mov	arg01, ptr__dat__
20b8c     12 00 00 FF 
20b90     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
20b94     10 12 06 F1 | 	add	arg01, #16
20b98     14 15 02 F6 | 	mov	arg02, local02
20b9c     01 14 66 F0 | 	shl	arg02, #1
20ba0     0A 13 02 F1 | 	add	arg01, arg02
20ba4     09 15 E2 FA | 	rdword	arg02, arg01
20ba8     15 13 02 F6 | 	mov	arg01, local03
20bac     08 0B B0 FD | 	call	#_psdpoke
20bb0     01 28 06 F1 | 	add	local02, #1
20bb4     02 00 00 FF 
20bb8     00 28 56 F2 | 	cmps	local02, ##1024 wc
20bbc     AC FF 9F CD |  if_b	jmp	#LR__2550
20bc0                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
20bc0     00 28 06 F6 | 	mov	local02, #0
20bc4                 | LR__2551
20bc4     14 2F 02 F6 | 	mov	local05, local02
20bc8     01 2E 66 F0 | 	shl	local05, #1
20bcc     7C 00 00 FF 
20bd0     00 2A 06 F6 | 	mov	local03, ##63488
20bd4     17 2B 02 F1 | 	add	local03, local05
20bd8     0E 00 00 FF 
20bdc     AA EA 05 F1 | 	add	ptr__dat__, ##7338
20be0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
20be4     0E 00 00 FF 
20be8     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
20bec     10 12 06 F1 | 	add	arg01, #16
20bf0     14 15 02 F6 | 	mov	arg02, local02
20bf4     01 14 66 F0 | 	shl	arg02, #1
20bf8     0A 13 02 F1 | 	add	arg01, arg02
20bfc     09 15 E2 FA | 	rdword	arg02, arg01
20c00     15 13 02 F6 | 	mov	arg01, local03
20c04     B0 0A B0 FD | 	call	#_psdpoke
20c08     01 28 06 F1 | 	add	local02, #1
20c0c     02 00 00 FF 
20c10     00 28 56 F2 | 	cmps	local02, ##1024 wc
20c14     AC FF 9F CD |  if_b	jmp	#LR__2551
20c18                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
20c18     00 28 06 F6 | 	mov	local02, #0
20c1c     0C 00 00 FF 
20c20     D8 E4 05 F1 | 	add	objptr, ##6360
20c24     97 18 48 FB | 	callpa	#(@LR__2553-@LR__2552)>>2,fcache_load_ptr_
20c28                 | LR__2552
20c28     14 2F 02 F6 | 	mov	local05, local02
20c2c     01 2E 66 F0 | 	shl	local05, #1
20c30     F2 2E 02 F1 | 	add	local05, objptr
20c34     14 2B 02 F6 | 	mov	local03, local02
20c38     08 2A 66 F0 | 	shl	local03, #8
20c3c     7F 00 00 FF 
20c40     00 31 06 F6 | 	mov	local06, ##65280
20c44     15 31 82 F1 | 	sub	local06, local03
20c48     17 31 52 FC | 	wrword	local06, local05
20c4c     01 28 06 F1 | 	add	local02, #1
20c50     00 29 56 F2 | 	cmps	local02, #256 wc
20c54     D0 FF 9F CD |  if_b	jmp	#LR__2552
20c58                 | LR__2553
20c58     0C 00 00 FF 
20c5c     D8 E4 85 F1 | 	sub	objptr, ##6360
20c60                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
20c60     00 28 06 F6 | 	mov	local02, #0
20c64                 | LR__2554
20c64     14 2F 02 F6 | 	mov	local05, local02
20c68     01 2E 66 F0 | 	shl	local05, #1
20c6c     0D 00 00 FF 
20c70     D8 E4 05 F1 | 	add	objptr, ##6872
20c74     F2 2E 02 F1 | 	add	local05, objptr
20c78     80 BF 23 FF 
20c7c     00 12 06 F6 | 	mov	arg01, ##1199505408
20c80     13 15 02 F6 | 	mov	arg02, local01
20c84     0D 00 00 FF 
20c88     D8 E4 85 F1 | 	sub	objptr, ##6872
20c8c     5C 70 B0 FD | 	call	#__system___float_mul
20c90     FD 12 02 F6 | 	mov	arg01, result1
20c94     01 14 06 F6 | 	mov	arg02, #1
20c98     18 75 B0 FD | 	call	#__system___float_tointeger
20c9c     17 FB 51 FC | 	wrword	result1, local05
20ca0     13 13 02 F6 | 	mov	arg01, local01
20ca4     CC BC 1F FF 
20ca8     9A 15 06 F6 | 	mov	arg02, ##1064933786
20cac     3C 70 B0 FD | 	call	#__system___float_mul
20cb0     FD 26 02 F6 | 	mov	local01, result1
20cb4     01 28 06 F1 | 	add	local02, #1
20cb8     00 29 56 F2 | 	cmps	local02, #256 wc
20cbc     A4 FF 9F CD |  if_b	jmp	#LR__2554
20cc0     0E 00 00 FF 
20cc4     D6 E4 05 F1 | 	add	objptr, ##7382
20cc8     F2 00 58 FC | 	wrword	#0, objptr
20ccc                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
20ccc     00 28 06 F6 | 	mov	local02, #0
20cd0     02 E4 05 F1 | 	add	objptr, #2
20cd4     97 10 48 FB | 	callpa	#(@LR__2556-@LR__2555)>>2,fcache_load_ptr_
20cd8                 | LR__2555
20cd8     14 2F 02 F6 | 	mov	local05, local02
20cdc     01 2E 66 F0 | 	shl	local05, #1
20ce0     F2 2E 02 F1 | 	add	local05, objptr
20ce4     7F 00 80 FF 
20ce8     17 01 5A FC | 	wrword	##65280, local05
20cec     01 28 06 F1 | 	add	local02, #1
20cf0     FF 28 56 F2 | 	cmps	local02, #255 wc
20cf4     E0 FF 9F CD |  if_b	jmp	#LR__2555
20cf8                 | LR__2556
20cf8     FE E5 05 F1 | 	add	objptr, #510
20cfc     F2 00 58 FC | 	wrword	#0, objptr
20d00                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
20d00     00 28 06 F6 | 	mov	local02, #0
20d04     02 E4 05 F1 | 	add	objptr, #2
20d08     97 52 48 FB | 	callpa	#(@LR__2561-@LR__2557)>>2,fcache_load_ptr_
20d0c                 | LR__2557
20d0c     14 2F 02 F6 | 	mov	local05, local02
20d10     01 2E 66 F0 | 	shl	local05, #1
20d14     F2 2E 02 F1 | 	add	local05, objptr
20d18     14 31 02 F6 | 	mov	local06, local02
20d1c     0C 30 66 F0 | 	shl	local06, #12
20d20     17 31 52 FC | 	wrword	local06, local05
20d24     01 28 06 F1 | 	add	local02, #1
20d28     10 28 56 F2 | 	cmps	local02, #16 wc
20d2c     DC FF 9F CD |  if_b	jmp	#LR__2557
20d30                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
20d30     10 28 06 F6 | 	mov	local02, #16
20d34                 | LR__2558
20d34     14 2F 02 F6 | 	mov	local05, local02
20d38     01 2E 66 F0 | 	shl	local05, #1
20d3c     F2 2E 02 F1 | 	add	local05, objptr
20d40     7F 00 80 FF 
20d44     17 01 5A FC | 	wrword	##65280, local05
20d48     01 28 06 F1 | 	add	local02, #1
20d4c     F0 28 16 F2 | 	cmp	local02, #240 wc
20d50     E0 FF 9F CD |  if_b	jmp	#LR__2558
20d54                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
20d54     F0 28 06 F6 | 	mov	local02, #240
20d58                 | LR__2559
20d58     14 2F 02 F6 | 	mov	local05, local02
20d5c     01 2E 66 F0 | 	shl	local05, #1
20d60     F2 2E 02 F1 | 	add	local05, objptr
20d64     FF 2A 06 F6 | 	mov	local03, #255
20d68     14 2B 82 F1 | 	sub	local03, local02
20d6c     0C 2A 66 F0 | 	shl	local03, #12
20d70     17 2B 52 FC | 	wrword	local03, local05
20d74     01 28 06 F1 | 	add	local02, #1
20d78     00 29 16 F2 | 	cmp	local02, #256 wc
20d7c     D8 FF 9F CD |  if_b	jmp	#LR__2559
20d80                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
20d80     00 28 06 F6 | 	mov	local02, #0
20d84     01 00 00 FF 
20d88     00 E4 05 F1 | 	add	objptr, ##512
20d8c                 | LR__2560
20d8c     14 2F 02 F6 | 	mov	local05, local02
20d90     01 2E 66 F0 | 	shl	local05, #1
20d94     F2 2E 02 F1 | 	add	local05, objptr
20d98     14 31 02 F6 | 	mov	local06, local02
20d9c     08 30 66 F0 | 	shl	local06, #8
20da0     17 31 52 FC | 	wrword	local06, local05
20da4     01 28 06 F1 | 	add	local02, #1
20da8     00 29 56 F2 | 	cmps	local02, #256 wc
20dac     DC FF 9F CD |  if_b	jmp	#LR__2560
20db0                 | LR__2561
20db0     FE E5 05 F1 | 	add	objptr, #510
20db4     F2 00 58 FC | 	wrword	#0, objptr
20db8                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
20db8     00 28 06 F6 | 	mov	local02, #0
20dbc     02 E4 05 F1 | 	add	objptr, #2
20dc0     97 6A 48 FB | 	callpa	#(@LR__2566-@LR__2562)>>2,fcache_load_ptr_
20dc4                 | LR__2562
20dc4     14 2F 02 F6 | 	mov	local05, local02
20dc8     01 2E 66 F0 | 	shl	local05, #1
20dcc     F2 2E 02 F1 | 	add	local05, objptr
20dd0     14 31 02 F6 | 	mov	local06, local02
20dd4     04 30 66 F0 | 	shl	local06, #4
20dd8     14 31 02 F1 | 	add	local06, local02
20ddc     04 30 66 F0 | 	shl	local06, #4
20de0     17 31 52 FC | 	wrword	local06, local05
20de4     01 28 06 F1 | 	add	local02, #1
20de8     F0 28 56 F2 | 	cmps	local02, #240 wc
20dec     D4 FF 9F CD |  if_b	jmp	#LR__2562
20df0     F0 28 06 F6 | 	mov	local02, #240
20df4                 | LR__2563
20df4     14 2F 02 F6 | 	mov	local05, local02
20df8     01 2E 66 F0 | 	shl	local05, #1
20dfc     F2 2E 02 F1 | 	add	local05, objptr
20e00     FF 2A 06 F6 | 	mov	local03, #255
20e04     14 2B 82 F1 | 	sub	local03, local02
20e08     0C 2A 66 F0 | 	shl	local03, #12
20e0c     17 2B 52 FC | 	wrword	local03, local05
20e10     01 28 06 F1 | 	add	local02, #1
20e14     00 29 16 F2 | 	cmp	local02, #256 wc
20e18     D8 FF 9F CD |  if_b	jmp	#LR__2563
20e1c                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
20e1c     00 28 06 F6 | 	mov	local02, #0
20e20     01 00 00 FF 
20e24     00 E4 05 F1 | 	add	objptr, ##512
20e28                 | LR__2564
20e28     14 2F 02 F6 | 	mov	local05, local02
20e2c     01 2E 66 F0 | 	shl	local05, #1
20e30     F2 2E 02 F1 | 	add	local05, objptr
20e34     14 31 02 F6 | 	mov	local06, local02
20e38     09 30 66 F0 | 	shl	local06, #9
20e3c     17 31 52 FC | 	wrword	local06, local05
20e40     FF 2E 06 F6 | 	mov	local05, #255
20e44     14 2F 82 F1 | 	sub	local05, local02
20e48     01 2E 66 F0 | 	shl	local05, #1
20e4c     F2 2E 02 F1 | 	add	local05, objptr
20e50     14 31 02 F6 | 	mov	local06, local02
20e54     09 30 66 F0 | 	shl	local06, #9
20e58     17 31 52 FC | 	wrword	local06, local05
20e5c     01 28 06 F1 | 	add	local02, #1
20e60     80 28 56 F2 | 	cmps	local02, #128 wc
20e64     C0 FF 9F CD |  if_b	jmp	#LR__2564
20e68                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
20e68     00 28 06 F6 | 	mov	local02, #0
20e6c     01 00 00 FF 
20e70     00 E4 05 F1 | 	add	objptr, ##512
20e74                 | LR__2565
20e74     14 2F 02 F6 | 	mov	local05, local02
20e78     01 2E 66 F0 | 	shl	local05, #1
20e7c     F2 2E 02 F1 | 	add	local05, objptr
20e80     14 31 02 F6 | 	mov	local06, local02
20e84     0D 30 66 F0 | 	shl	local06, #13
20e88     17 31 52 FC | 	wrword	local06, local05
20e8c     01 28 06 F1 | 	add	local02, #1
20e90     08 28 56 F2 | 	cmps	local02, #8 wc
20e94     DC FF 9F CD |  if_b	jmp	#LR__2565
20e98                 | LR__2566
20e98                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
20e98     08 28 06 F6 | 	mov	local02, #8
20e9c     97 42 48 FB | 	callpa	#(@LR__2570-@LR__2567)>>2,fcache_load_ptr_
20ea0                 | LR__2567
20ea0     14 2F 02 F6 | 	mov	local05, local02
20ea4     01 2E 66 F0 | 	shl	local05, #1
20ea8     F2 2E 02 F1 | 	add	local05, objptr
20eac     14 27 02 F6 | 	mov	local01, local02
20eb0     08 26 86 F1 | 	sub	local01, #8
20eb4     0B 26 66 F0 | 	shl	local01, #11
20eb8     7F 00 00 FF 
20ebc     00 31 06 F6 | 	mov	local06, ##65280
20ec0     13 31 82 F1 | 	sub	local06, local01
20ec4     17 31 52 FC | 	wrword	local06, local05
20ec8     01 28 06 F1 | 	add	local02, #1
20ecc     18 28 16 F2 | 	cmp	local02, #24 wc
20ed0     CC FF 9F CD |  if_b	jmp	#LR__2567
20ed4                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
20ed4     18 28 06 F6 | 	mov	local02, #24
20ed8                 | LR__2568
20ed8     14 2F 02 F6 | 	mov	local05, local02
20edc     01 2E 66 F0 | 	shl	local05, #1
20ee0     F2 2E 02 F1 | 	add	local05, objptr
20ee4     40 00 80 FF 
20ee8     17 01 58 FC | 	wrword	##32768, local05
20eec     01 28 06 F1 | 	add	local02, #1
20ef0     81 28 16 F2 | 	cmp	local02, #129 wc
20ef4     E0 FF 9F CD |  if_b	jmp	#LR__2568
20ef8                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
20ef8     81 28 06 F6 | 	mov	local02, #129
20efc                 | LR__2569
20efc     14 2F 02 F6 | 	mov	local05, local02
20f00     01 2E 66 F0 | 	shl	local05, #1
20f04     F2 2E 02 F1 | 	add	local05, objptr
20f08     FF 2A 06 F6 | 	mov	local03, #255
20f0c     14 2B 82 F1 | 	sub	local03, local02
20f10     08 2A 66 F0 | 	shl	local03, #8
20f14     17 2B 52 FC | 	wrword	local03, local05
20f18     01 28 06 F1 | 	add	local02, #1
20f1c     00 29 16 F2 | 	cmp	local02, #256 wc
20f20     D8 FF 9F CD |  if_b	jmp	#LR__2569
20f24                 | LR__2570
20f24     3E 00 00 FF 
20f28     26 E5 05 F1 | 	add	objptr, ##32038
20f2c     F2 00 59 FC | 	wrword	#128, objptr
20f30     51 00 00 FF 
20f34     FE E5 85 F1 | 	sub	objptr, ##41982
20f38                 | ' for i=0 to 7
20f38     00 28 06 F6 | 	mov	local02, #0
20f3c     97 8E 48 FB | 	callpa	#(@LR__2572-@LR__2571)>>2,fcache_load_ptr_
20f40                 | LR__2571
20f40     14 2F 02 F6 | 	mov	local05, local02
20f44     01 2E 66 F0 | 	shl	local05, #1
20f48     14 2F 02 F1 | 	add	local05, local02
20f4c     03 2E 66 F0 | 	shl	local05, #3
20f50     14 00 00 FF 
20f54     38 E5 05 F1 | 	add	objptr, ##10552
20f58     F2 2E 02 F1 | 	add	local05, objptr
20f5c     00 EE A1 FF 
20f60     17 01 68 FC | 	wrlong	##1138491392, local05
20f64     14 2F 02 F6 | 	mov	local05, local02
20f68     01 2E 66 F0 | 	shl	local05, #1
20f6c     14 2F 02 F1 | 	add	local05, local02
20f70     03 2E 66 F0 | 	shl	local05, #3
20f74     F2 2E 02 F1 | 	add	local05, objptr
20f78     04 2E 06 F1 | 	add	local05, #4
20f7c     17 29 42 FC | 	wrbyte	local02, local05
20f80     14 2F 02 F6 | 	mov	local05, local02
20f84     01 2E 66 F0 | 	shl	local05, #1
20f88     14 2F 02 F1 | 	add	local05, local02
20f8c     03 2E 66 F0 | 	shl	local05, #3
20f90     F2 2E 02 F1 | 	add	local05, objptr
20f94     05 2E 06 F1 | 	add	local05, #5
20f98     17 29 42 FC | 	wrbyte	local02, local05
20f9c     14 2F 02 F6 | 	mov	local05, local02
20fa0     01 2E 66 F0 | 	shl	local05, #1
20fa4     14 2F 02 F1 | 	add	local05, local02
20fa8     03 2E 66 F0 | 	shl	local05, #3
20fac     F2 2E 02 F1 | 	add	local05, objptr
20fb0     06 2E 06 F1 | 	add	local05, #6
20fb4     17 01 58 FC | 	wrword	#0, local05
20fb8     14 2F 02 F6 | 	mov	local05, local02
20fbc     01 2E 66 F0 | 	shl	local05, #1
20fc0     14 2F 02 F1 | 	add	local05, local02
20fc4     03 2E 66 F0 | 	shl	local05, #3
20fc8     F2 2E 02 F1 | 	add	local05, objptr
20fcc     08 2E 06 F1 | 	add	local05, #8
20fd0     00 C0 9F FF 
20fd4     17 01 68 FC | 	wrlong	##1065353216, local05
20fd8     14 2F 02 F6 | 	mov	local05, local02
20fdc     01 2E 66 F0 | 	shl	local05, #1
20fe0     14 2F 02 F1 | 	add	local05, local02
20fe4     03 2E 66 F0 | 	shl	local05, #3
20fe8     F2 2E 02 F1 | 	add	local05, objptr
20fec     0C 2E 06 F1 | 	add	local05, #12
20ff0     00 40 A0 FF 
20ff4     17 01 68 FC | 	wrlong	##1082130432, local05
20ff8     14 2F 02 F6 | 	mov	local05, local02
20ffc     01 2E 66 F0 | 	shl	local05, #1
21000     14 2F 02 F1 | 	add	local05, local02
21004     03 2E 66 F0 | 	shl	local05, #3
21008     F2 2E 02 F1 | 	add	local05, objptr
2100c     10 2E 06 F1 | 	add	local05, #16
21010     17 01 68 FC | 	wrlong	#0, local05
21014     14 2F 02 F6 | 	mov	local05, local02
21018     01 2E 66 F0 | 	shl	local05, #1
2101c     14 2F 02 F1 | 	add	local05, local02
21020     03 2E 66 F0 | 	shl	local05, #3
21024     F2 2E 02 F1 | 	add	local05, objptr
21028     14 2E 06 F1 | 	add	local05, #20
2102c     17 FF 59 FC | 	wrword	#255, local05
21030     14 2F 02 F6 | 	mov	local05, local02
21034     01 2E 66 F0 | 	shl	local05, #1
21038     3D 00 00 FF 
2103c     B8 E4 05 F1 | 	add	objptr, ##31416
21040     F2 2E 02 F1 | 	add	local05, objptr
21044     17 FF 59 FC | 	wrword	#255, local05
21048     01 28 06 F1 | 	add	local02, #1
2104c     08 28 56 F2 | 	cmps	local02, #8 wc
21050     51 00 00 FF 
21054     F0 E5 85 F1 | 	sub	objptr, ##41968
21058     E4 FE 9F CD |  if_b	jmp	#LR__2571
2105c                 | LR__2572
2105c     00 6E 20 FF 
21060     00 30 06 F6 | 	mov	local06, ##1088159744
21064                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
21064     03 2E 06 F6 | 	mov	local05, #3
21068                 | LR__2573
21068     18 13 02 F6 | 	mov	arg01, local06
2106c     CE C3 1F FF 
21070     7D 14 06 F6 | 	mov	arg02, ##1065852029
21074     74 6C B0 FD | 	call	#__system___float_mul
21078     FD 30 02 F6 | 	mov	local06, result1
2107c     FA 2F 6E FB | 	djnz	local05, #LR__2573
21080     00 28 06 F6 | 	mov	local02, #0
21084                 | LR__2574
21084     14 2D 02 F6 | 	mov	local04, local02
21088     02 2C 66 F0 | 	shl	local04, #2
2108c     14 00 00 FF 
21090     D8 E4 05 F1 | 	add	objptr, ##10456
21094     F2 2C 02 F1 | 	add	local04, objptr
21098     16 31 62 FC | 	wrlong	local06, local04
2109c     18 13 02 F6 | 	mov	arg01, local06
210a0     CE C3 1F FF 
210a4     7D 14 06 F6 | 	mov	arg02, ##1065852029
210a8     14 00 00 FF 
210ac     D8 E4 85 F1 | 	sub	objptr, ##10456
210b0     38 6C B0 FD | 	call	#__system___float_mul
210b4     FD 30 02 F6 | 	mov	local06, result1
210b8     01 28 06 F1 | 	add	local02, #1
210bc     0C 28 56 F2 | 	cmps	local02, #12 wc
210c0     C0 FF 9F CD |  if_b	jmp	#LR__2574
210c4     14 00 00 FF 
210c8     08 E5 05 F1 | 	add	objptr, ##10504
210cc     F2 50 6B FC | 	wrlong	#424, objptr
210d0     04 E4 05 F1 | 	add	objptr, #4
210d4     F2 20 6B FC | 	wrlong	#400, objptr
210d8     04 E4 05 F1 | 	add	objptr, #4
210dc     F2 F2 6A FC | 	wrlong	#377, objptr
210e0     04 E4 05 F1 | 	add	objptr, #4
210e4     F2 C8 6A FC | 	wrlong	#356, objptr
210e8     04 E4 05 F1 | 	add	objptr, #4
210ec     F2 A0 6A FC | 	wrlong	#336, objptr
210f0     04 E4 05 F1 | 	add	objptr, #4
210f4     F2 7A 6A FC | 	wrlong	#317, objptr
210f8     04 E4 05 F1 | 	add	objptr, #4
210fc     F2 58 6A FC | 	wrlong	#300, objptr
21100     04 E4 05 F1 | 	add	objptr, #4
21104     F2 36 6A FC | 	wrlong	#283, objptr
21108     04 E4 05 F1 | 	add	objptr, #4
2110c     F2 16 6A FC | 	wrlong	#267, objptr
21110     04 E4 05 F1 | 	add	objptr, #4
21114     F2 F8 69 FC | 	wrlong	#252, objptr
21118     04 E4 05 F1 | 	add	objptr, #4
2111c     F2 DC 69 FC | 	wrlong	#238, objptr
21120     04 E4 05 F1 | 	add	objptr, #4
21124     F2 C0 69 FC | 	wrlong	#224, objptr
21128     3D 00 00 FF 
2112c     CA E4 05 F1 | 	add	objptr, ##31434
21130     F2 00 59 FC | 	wrword	#128, objptr
21134     02 E4 85 F1 | 	sub	objptr, #2
21138     F2 00 59 FC | 	wrword	#128, objptr
2113c     51 00 00 FF 
21140     FC E5 85 F1 | 	sub	objptr, ##41980
21144     A7 F0 03 F6 | 	mov	ptra, fp
21148     B2 00 A0 FD | 	call	#popregs_
2114c                 | _init_audio_ret
2114c     2D 00 64 FD | 	ret
21150                 | 
21150                 | ' 
21150                 | ' '------------------- Error messages
21150                 | ' 
21150                 | ' sub init_error_strings
21150                 | _init_error_strings
21150     AA 01 00 FF 
21154     8C 00 06 F6 | 	mov	_var01, ##@LR__5877
21158     45 00 00 FF 
2115c     7C E4 05 F1 | 	add	objptr, ##35452
21160     F2 00 62 FC | 	wrlong	_var01, objptr
21164     AA 01 00 FF 
21168     8D 00 06 F6 | 	mov	_var01, ##@LR__5878
2116c     04 E4 05 F1 | 	add	objptr, #4
21170     F2 00 62 FC | 	wrlong	_var01, objptr
21174     AA 01 00 FF 
21178     B1 00 06 F6 | 	mov	_var01, ##@LR__5879
2117c     04 E4 05 F1 | 	add	objptr, #4
21180     F2 00 62 FC | 	wrlong	_var01, objptr
21184     AA 01 00 FF 
21188     D1 00 06 F6 | 	mov	_var01, ##@LR__5880
2118c     04 E4 05 F1 | 	add	objptr, #4
21190     F2 00 62 FC | 	wrlong	_var01, objptr
21194     AA 01 00 FF 
21198     EA 00 06 F6 | 	mov	_var01, ##@LR__5881
2119c     04 E4 05 F1 | 	add	objptr, #4
211a0     F2 00 62 FC | 	wrlong	_var01, objptr
211a4     AA 01 00 FF 
211a8     05 01 06 F6 | 	mov	_var01, ##@LR__5882
211ac     04 E4 05 F1 | 	add	objptr, #4
211b0     F2 00 62 FC | 	wrlong	_var01, objptr
211b4     AA 01 00 FF 
211b8     26 01 06 F6 | 	mov	_var01, ##@LR__5883
211bc     04 E4 05 F1 | 	add	objptr, #4
211c0     F2 00 62 FC | 	wrlong	_var01, objptr
211c4     AA 01 00 FF 
211c8     53 01 06 F6 | 	mov	_var01, ##@LR__5884
211cc     04 E4 05 F1 | 	add	objptr, #4
211d0     F2 00 62 FC | 	wrlong	_var01, objptr
211d4     AA 01 00 FF 
211d8     7D 01 06 F6 | 	mov	_var01, ##@LR__5885
211dc     04 E4 05 F1 | 	add	objptr, #4
211e0     F2 00 62 FC | 	wrlong	_var01, objptr
211e4     AA 01 00 FF 
211e8     95 01 06 F6 | 	mov	_var01, ##@LR__5886
211ec     04 E4 05 F1 | 	add	objptr, #4
211f0     F2 00 62 FC | 	wrlong	_var01, objptr
211f4     AA 01 00 FF 
211f8     B5 01 06 F6 | 	mov	_var01, ##@LR__5887
211fc     04 E4 05 F1 | 	add	objptr, #4
21200     F2 00 62 FC | 	wrlong	_var01, objptr
21204     AA 01 00 FF 
21208     CB 01 06 F6 | 	mov	_var01, ##@LR__5888
2120c     04 E4 05 F1 | 	add	objptr, #4
21210     F2 00 62 FC | 	wrlong	_var01, objptr
21214     AA 01 00 FF 
21218     E8 01 06 F6 | 	mov	_var01, ##@LR__5889
2121c     04 E4 05 F1 | 	add	objptr, #4
21220     F2 00 62 FC | 	wrlong	_var01, objptr
21224     AB 01 00 FF 
21228     0B 00 06 F6 | 	mov	_var01, ##@LR__5890
2122c     04 E4 05 F1 | 	add	objptr, #4
21230     F2 00 62 FC | 	wrlong	_var01, objptr
21234     AB 01 00 FF 
21238     31 00 06 F6 | 	mov	_var01, ##@LR__5891
2123c     04 E4 05 F1 | 	add	objptr, #4
21240     F2 00 62 FC | 	wrlong	_var01, objptr
21244     AB 01 00 FF 
21248     4C 00 06 F6 | 	mov	_var01, ##@LR__5892
2124c     04 E4 05 F1 | 	add	objptr, #4
21250     F2 00 62 FC | 	wrlong	_var01, objptr
21254     AB 01 00 FF 
21258     5C 00 06 F6 | 	mov	_var01, ##@LR__5893
2125c     04 E4 05 F1 | 	add	objptr, #4
21260     F2 00 62 FC | 	wrlong	_var01, objptr
21264     AB 01 00 FF 
21268     6B 00 06 F6 | 	mov	_var01, ##@LR__5894
2126c     04 E4 05 F1 | 	add	objptr, #4
21270     F2 00 62 FC | 	wrlong	_var01, objptr
21274     AB 01 00 FF 
21278     85 00 06 F6 | 	mov	_var01, ##@LR__5895
2127c     04 E4 05 F1 | 	add	objptr, #4
21280     F2 00 62 FC | 	wrlong	_var01, objptr
21284     AB 01 00 FF 
21288     96 00 06 F6 | 	mov	_var01, ##@LR__5896
2128c     04 E4 05 F1 | 	add	objptr, #4
21290     F2 00 62 FC | 	wrlong	_var01, objptr
21294     AB 01 00 FF 
21298     AD 00 06 F6 | 	mov	_var01, ##@LR__5897
2129c     04 E4 05 F1 | 	add	objptr, #4
212a0     F2 00 62 FC | 	wrlong	_var01, objptr
212a4     AB 01 00 FF 
212a8     C0 00 06 F6 | 	mov	_var01, ##@LR__5898
212ac     04 E4 05 F1 | 	add	objptr, #4
212b0     F2 00 62 FC | 	wrlong	_var01, objptr
212b4     AB 01 00 FF 
212b8     CF 00 06 F6 | 	mov	_var01, ##@LR__5899
212bc     04 E4 05 F1 | 	add	objptr, #4
212c0     F2 00 62 FC | 	wrlong	_var01, objptr
212c4     AB 01 00 FF 
212c8     EB 00 06 F6 | 	mov	_var01, ##@LR__5900
212cc     04 E4 05 F1 | 	add	objptr, #4
212d0     F2 00 62 FC | 	wrlong	_var01, objptr
212d4     AB 01 00 FF 
212d8     FB 00 06 F6 | 	mov	_var01, ##@LR__5901
212dc     04 E4 05 F1 | 	add	objptr, #4
212e0     F2 00 62 FC | 	wrlong	_var01, objptr
212e4     AB 01 00 FF 
212e8     0B 01 06 F6 | 	mov	_var01, ##@LR__5902
212ec     04 E4 05 F1 | 	add	objptr, #4
212f0     F2 00 62 FC | 	wrlong	_var01, objptr
212f4     AB 01 00 FF 
212f8     3E 01 06 F6 | 	mov	_var01, ##@LR__5903
212fc     04 E4 05 F1 | 	add	objptr, #4
21300     F2 00 62 FC | 	wrlong	_var01, objptr
21304     AB 01 00 FF 
21308     59 01 06 F6 | 	mov	_var01, ##@LR__5904
2130c     04 E4 05 F1 | 	add	objptr, #4
21310     F2 00 62 FC | 	wrlong	_var01, objptr
21314     AB 01 00 FF 
21318     6E 01 06 F6 | 	mov	_var01, ##@LR__5905
2131c     04 E4 05 F1 | 	add	objptr, #4
21320     F2 00 62 FC | 	wrlong	_var01, objptr
21324     AB 01 00 FF 
21328     7A 01 06 F6 | 	mov	_var01, ##@LR__5906
2132c     04 E4 05 F1 | 	add	objptr, #4
21330     F2 00 62 FC | 	wrlong	_var01, objptr
21334     AB 01 00 FF 
21338     8B 01 06 F6 | 	mov	_var01, ##@LR__5907
2133c     04 E4 05 F1 | 	add	objptr, #4
21340     F2 00 62 FC | 	wrlong	_var01, objptr
21344     AB 01 00 FF 
21348     9B 01 06 F6 | 	mov	_var01, ##@LR__5908
2134c     04 E4 05 F1 | 	add	objptr, #4
21350     F2 00 62 FC | 	wrlong	_var01, objptr
21354     AB 01 00 FF 
21358     B6 01 06 F6 | 	mov	_var01, ##@LR__5909
2135c     04 E4 05 F1 | 	add	objptr, #4
21360     F2 00 62 FC | 	wrlong	_var01, objptr
21364     AB 01 00 FF 
21368     C6 01 06 F6 | 	mov	_var01, ##@LR__5910
2136c     04 E4 05 F1 | 	add	objptr, #4
21370     F2 00 62 FC | 	wrlong	_var01, objptr
21374     AB 01 00 FF 
21378     D4 01 06 F6 | 	mov	_var01, ##@LR__5911
2137c     04 E4 05 F1 | 	add	objptr, #4
21380     F2 00 62 FC | 	wrlong	_var01, objptr
21384     AB 01 00 FF 
21388     EE 01 06 F6 | 	mov	_var01, ##@LR__5912
2138c     04 E4 05 F1 | 	add	objptr, #4
21390     F2 00 62 FC | 	wrlong	_var01, objptr
21394     AC 01 00 FF 
21398     21 00 06 F6 | 	mov	_var01, ##@LR__5913
2139c     04 E4 05 F1 | 	add	objptr, #4
213a0     F2 00 62 FC | 	wrlong	_var01, objptr
213a4     AC 01 00 FF 
213a8     39 00 06 F6 | 	mov	_var01, ##@LR__5914
213ac     04 E4 05 F1 | 	add	objptr, #4
213b0     F2 00 62 FC | 	wrlong	_var01, objptr
213b4     AC 01 00 FF 
213b8     54 00 06 F6 | 	mov	_var01, ##@LR__5915
213bc     04 E4 05 F1 | 	add	objptr, #4
213c0     F2 00 62 FC | 	wrlong	_var01, objptr
213c4     AC 01 00 FF 
213c8     71 00 06 F6 | 	mov	_var01, ##@LR__5916
213cc     04 E4 05 F1 | 	add	objptr, #4
213d0     F2 00 62 FC | 	wrlong	_var01, objptr
213d4     AC 01 00 FF 
213d8     8A 00 06 F6 | 	mov	_var01, ##@LR__5917
213dc     04 E4 05 F1 | 	add	objptr, #4
213e0     F2 00 62 FC | 	wrlong	_var01, objptr
213e4     AC 01 00 FF 
213e8     A9 00 06 F6 | 	mov	_var01, ##@LR__5918
213ec     04 E4 05 F1 | 	add	objptr, #4
213f0     F2 00 62 FC | 	wrlong	_var01, objptr
213f4     AC 01 00 FF 
213f8     B7 00 06 F6 | 	mov	_var01, ##@LR__5919
213fc     04 E4 05 F1 | 	add	objptr, #4
21400     F2 00 62 FC | 	wrlong	_var01, objptr
21404     AC 01 00 FF 
21408     E4 00 06 F6 | 	mov	_var01, ##@LR__5920
2140c     04 E4 05 F1 | 	add	objptr, #4
21410     F2 00 62 FC | 	wrlong	_var01, objptr
21414     AC 01 00 FF 
21418     F1 00 06 F6 | 	mov	_var01, ##@LR__5921
2141c     04 E4 05 F1 | 	add	objptr, #4
21420     F2 00 62 FC | 	wrlong	_var01, objptr
21424     AC 01 00 FF 
21428     05 01 06 F6 | 	mov	_var01, ##@LR__5922
2142c     04 E4 05 F1 | 	add	objptr, #4
21430     F2 00 62 FC | 	wrlong	_var01, objptr
21434     AC 01 00 FF 
21438     29 01 06 F6 | 	mov	_var01, ##@LR__5923
2143c     04 E4 05 F1 | 	add	objptr, #4
21440     F2 00 62 FC | 	wrlong	_var01, objptr
21444     AC 01 00 FF 
21448     40 01 06 F6 | 	mov	_var01, ##@LR__5924
2144c     04 E4 05 F1 | 	add	objptr, #4
21450     F2 00 62 FC | 	wrlong	_var01, objptr
21454     AC 01 00 FF 
21458     53 01 06 F6 | 	mov	_var01, ##@LR__5925
2145c     04 E4 05 F1 | 	add	objptr, #4
21460     F2 00 62 FC | 	wrlong	_var01, objptr
21464     AC 01 00 FF 
21468     6A 01 06 F6 | 	mov	_var01, ##@LR__5926
2146c     04 E4 05 F1 | 	add	objptr, #4
21470     F2 00 62 FC | 	wrlong	_var01, objptr
21474     AC 01 00 FF 
21478     83 01 06 F6 | 	mov	_var01, ##@LR__5927
2147c     04 E4 05 F1 | 	add	objptr, #4
21480     F2 00 62 FC | 	wrlong	_var01, objptr
21484     AC 01 00 FF 
21488     A5 01 06 F6 | 	mov	_var01, ##@LR__5928
2148c     04 E4 05 F1 | 	add	objptr, #4
21490     F2 00 62 FC | 	wrlong	_var01, objptr
21494     AC 01 00 FF 
21498     B8 01 06 F6 | 	mov	_var01, ##@LR__5929
2149c     04 E4 05 F1 | 	add	objptr, #4
214a0     F2 00 62 FC | 	wrlong	_var01, objptr
214a4     AC 01 00 FF 
214a8     C8 01 06 F6 | 	mov	_var01, ##@LR__5930
214ac     04 E4 05 F1 | 	add	objptr, #4
214b0     F2 00 62 FC | 	wrlong	_var01, objptr
214b4     AC 01 00 FF 
214b8     E0 01 06 F6 | 	mov	_var01, ##@LR__5931
214bc     04 E4 05 F1 | 	add	objptr, #4
214c0     F2 00 62 FC | 	wrlong	_var01, objptr
214c4     45 00 00 FF 
214c8     54 E5 85 F1 | 	sub	objptr, ##35668
214cc                 | _init_error_strings_ret
214cc     2D 00 64 FD | 	ret
214d0                 | 
214d0                 | '         
214d0                 | ' sub printerror(err as integer, linenum=0 as integer)
214d0                 | _printerror
214d0     02 4A 05 F6 | 	mov	COUNT_, #2
214d4     A8 00 A0 FD | 	call	#pushregs_
214d8     09 27 02 F6 | 	mov	local01, arg01
214dc     0A 29 02 F6 | 	mov	local02, arg02
214e0     AC 01 00 FF 
214e4     F7 13 06 F6 | 	mov	arg01, ##@LR__5932
214e8     0C 21 B0 FD | 	call	#_hg010b_spin2_write
214ec     13 13 02 F6 | 	mov	arg01, local01
214f0     A8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
214f4     FD 12 02 F6 | 	mov	arg01, result1
214f8     FC 20 B0 FD | 	call	#_hg010b_spin2_write
214fc     AC 01 00 FF 
21500     FE 13 06 F6 | 	mov	arg01, ##@LR__5933
21504     F0 20 B0 FD | 	call	#_hg010b_spin2_write
21508     02 26 66 F0 | 	shl	local01, #2
2150c     45 00 00 FF 
21510     7C E4 05 F1 | 	add	objptr, ##35452
21514     F2 26 02 F1 | 	add	local01, objptr
21518     13 13 02 FB | 	rdlong	arg01, local01
2151c     45 00 00 FF 
21520     7C E4 85 F1 | 	sub	objptr, ##35452
21524     D0 20 B0 FD | 	call	#_hg010b_spin2_write
21528                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
21528                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
21528     01 28 56 F2 | 	cmps	local02, #1 wc
2152c     24 00 90 CD |  if_b	jmp	#LR__2580
21530     AD 01 00 FF 
21534     02 12 06 F6 | 	mov	arg01, ##@LR__5934
21538     BC 20 B0 FD | 	call	#_hg010b_spin2_write
2153c     14 13 02 F6 | 	mov	arg01, local02
21540     58 26 B0 FD | 	call	#_hg010b_spin2_inttostr
21544     FD 12 02 F6 | 	mov	arg01, result1
21548                 | ' 
21548                 | ' write(text)
21548     AC 20 B0 FD | 	call	#_hg010b_spin2_write
2154c                 | ' crlf
2154c     A8 25 B0 FD | 	call	#_hg010b_spin2_crlf
21550     10 00 90 FD | 	jmp	#LR__2581
21554                 | LR__2580
21554     AD 01 00 FF 
21558     0C 12 06 F6 | 	mov	arg01, ##@LR__5935
2155c                 | ' 
2155c                 | ' write(text)
2155c     98 20 B0 FD | 	call	#_hg010b_spin2_write
21560                 | ' crlf
21560     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
21564                 | LR__2581
21564     A7 F0 03 F6 | 	mov	ptra, fp
21568     B2 00 A0 FD | 	call	#popregs_
2156c                 | _printerror_ret
2156c     2D 00 64 FD | 	ret
21570                 | 
21570                 | ' 
21570                 | ' '' ------------------------------- Hardware start/stop/initialization 
21570                 | ' 
21570                 | ' sub startpsram
21570                 | _startpsram
21570     00 12 06 F6 | 	mov	arg01, #0
21574     0A 14 C6 F9 | 	decod	arg02, #10
21578     0B 16 06 F6 | 	mov	arg03, #11
2157c     07 18 06 F6 | 	mov	arg04, #7
21580     0B 00 00 FF 
21584     CC E4 05 F1 | 	add	objptr, ##5836
21588     7C 2A B0 FD | 	call	#_psram_spin2_startx
2158c     2B 00 00 FF 
21590     3C E5 05 F1 | 	add	objptr, ##22332
21594     F2 FA 61 FC | 	wrlong	result1, objptr
21598                 | '     return $7FF00 + cog*12
21598     0C E4 05 F1 | 	add	objptr, #12
2159c     FF 03 80 FF 
215a0     F2 00 6A FC | 	wrlong	##524032, objptr
215a4     37 00 00 FF 
215a8     14 E4 85 F1 | 	sub	objptr, ##28180
215ac                 | _startpsram_ret
215ac     2D 00 64 FD | 	ret
215b0                 | 
215b0                 | ' 
215b0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
215b0                 | _startvideo
215b0     01 4A 05 F6 | 	mov	COUNT_, #1
215b4     A8 00 A0 FD | 	call	#pushregs_
215b8     37 00 00 FF 
215bc     14 E4 05 F1 | 	add	objptr, ##28180
215c0     F2 18 02 FB | 	rdlong	arg04, objptr
215c4     37 00 00 FF 
215c8     14 E4 85 F1 | 	sub	objptr, ##28180
215cc     0A 13 02 F6 | 	mov	arg01, arg02
215d0     0C 15 02 F6 | 	mov	arg02, arg04
215d4     18 08 B0 FD | 	call	#_hg010b_spin2_start
215d8     37 00 00 FF 
215dc     00 E4 05 F1 | 	add	objptr, ##28160
215e0     F2 FA 61 FC | 	wrlong	result1, objptr
215e4                 | ' 
215e4                 | ' videocog=v.start(pin,mbox)
215e4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
215e4     00 26 06 F6 | 	mov	local01, #0
215e8     2B 00 00 FF 
215ec     34 E5 85 F1 | 	sub	objptr, ##22324
215f0                 | LR__2590
215f0     13 13 02 F6 | 	mov	arg01, local01
215f4     00 28 00 FF 
215f8     00 14 06 F6 | 	mov	arg02, ##5242880
215fc     60 2E B0 FD | 	call	#_psram_spin2_setQos
21600     01 26 06 F1 | 	add	local01, #1
21604     08 26 56 F2 | 	cmps	local01, #8 wc
21608     E4 FF 9F CD |  if_b	jmp	#LR__2590
2160c     2B 00 00 FF 
21610     34 E5 05 F1 | 	add	objptr, ##22324
21614     F2 12 02 FB | 	rdlong	arg01, objptr
21618     7A 00 02 FF 
2161c     00 14 06 F6 | 	mov	arg02, ##67171328
21620     2B 00 00 FF 
21624     34 E5 85 F1 | 	sub	objptr, ##22324
21628     34 2E B0 FD | 	call	#_psram_spin2_setQos
2162c     0B 00 00 FF 
21630     CC E4 85 F1 | 	sub	objptr, ##5836
21634                 | ' psram.setQoS(videocog, $0400f400) 
21634                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
21634     F2 14 02 F6 | 	mov	arg02, objptr
21638     00 C0 04 FF 
2163c     00 14 46 F5 | 	or	arg02, ##159383552
21640     00 16 06 F6 | 	mov	arg03, #0
21644     00 18 06 F6 | 	mov	arg04, #0
21648     00 12 06 F6 | 	mov	arg01, #0
2164c     CC 42 B0 FD | 	call	#__system___basic_open
21650                 | ' return videocog
21650     37 00 00 FF 
21654     00 E4 05 F1 | 	add	objptr, ##28160
21658     F2 FA 01 FB | 	rdlong	result1, objptr
2165c     37 00 00 FF 
21660     00 E4 85 F1 | 	sub	objptr, ##28160
21664     A7 F0 03 F6 | 	mov	ptra, fp
21668     B2 00 A0 FD | 	call	#popregs_
2166c                 | _startvideo_ret
2166c     2D 00 64 FD | 	ret
21670                 | 
21670                 | ' 
21670                 | ' 
21670                 | ' 
21670                 | ' '' ------------------------------- Convenient psram peek/poke
21670                 | ' 
21670                 | ' sub pslpoke(addr as ulong,value as ulong)
21670                 | _pslpoke
21670     00 4A 05 F6 | 	mov	COUNT_, #0
21674     A8 00 A0 FD | 	call	#pushregs_
21678     08 F0 07 F1 | 	add	ptra, #8
2167c     A7 12 62 FC | 	wrlong	arg01, fp
21680     04 4E 05 F1 | 	add	fp, #4
21684     A7 14 62 FC | 	wrlong	arg02, fp
21688     A7 12 02 F6 | 	mov	arg01, fp
2168c     04 4E 85 F1 | 	sub	fp, #4
21690     A7 14 02 FB | 	rdlong	arg02, fp
21694     04 16 06 F6 | 	mov	arg03, #4
21698     0B 00 00 FF 
2169c     CC E4 05 F1 | 	add	objptr, ##5836
216a0     2C 2C B0 FD | 	call	#_psram_spin2_write
216a4     0B 00 00 FF 
216a8     CC E4 85 F1 | 	sub	objptr, ##5836
216ac     A7 F0 03 F6 | 	mov	ptra, fp
216b0     B2 00 A0 FD | 	call	#popregs_
216b4                 | _pslpoke_ret
216b4     2D 00 64 FD | 	ret
216b8                 | 
216b8                 | ' 
216b8                 | ' sub psdpoke(addr as ulong,value as ulong)
216b8                 | _psdpoke
216b8     00 4A 05 F6 | 	mov	COUNT_, #0
216bc     A8 00 A0 FD | 	call	#pushregs_
216c0     08 F0 07 F1 | 	add	ptra, #8
216c4     A7 12 62 FC | 	wrlong	arg01, fp
216c8     04 4E 05 F1 | 	add	fp, #4
216cc     A7 14 62 FC | 	wrlong	arg02, fp
216d0     A7 12 02 F6 | 	mov	arg01, fp
216d4     04 4E 85 F1 | 	sub	fp, #4
216d8     A7 14 02 FB | 	rdlong	arg02, fp
216dc     02 16 06 F6 | 	mov	arg03, #2
216e0     0B 00 00 FF 
216e4     CC E4 05 F1 | 	add	objptr, ##5836
216e8     E4 2B B0 FD | 	call	#_psram_spin2_write
216ec     0B 00 00 FF 
216f0     CC E4 85 F1 | 	sub	objptr, ##5836
216f4     A7 F0 03 F6 | 	mov	ptra, fp
216f8     B2 00 A0 FD | 	call	#popregs_
216fc                 | _psdpoke_ret
216fc     2D 00 64 FD | 	ret
21700                 | 
21700                 | ' 
21700                 | ' sub pspoke(addr as ulong,value as ulong)
21700                 | _pspoke
21700     00 4A 05 F6 | 	mov	COUNT_, #0
21704     A8 00 A0 FD | 	call	#pushregs_
21708     08 F0 07 F1 | 	add	ptra, #8
2170c     A7 12 62 FC | 	wrlong	arg01, fp
21710     04 4E 05 F1 | 	add	fp, #4
21714     A7 14 62 FC | 	wrlong	arg02, fp
21718     A7 12 02 F6 | 	mov	arg01, fp
2171c     04 4E 85 F1 | 	sub	fp, #4
21720     A7 14 02 FB | 	rdlong	arg02, fp
21724     01 16 06 F6 | 	mov	arg03, #1
21728     0B 00 00 FF 
2172c     CC E4 05 F1 | 	add	objptr, ##5836
21730     9C 2B B0 FD | 	call	#_psram_spin2_write
21734     0B 00 00 FF 
21738     CC E4 85 F1 | 	sub	objptr, ##5836
2173c     A7 F0 03 F6 | 	mov	ptra, fp
21740     B2 00 A0 FD | 	call	#popregs_
21744                 | _pspoke_ret
21744     2D 00 64 FD | 	ret
21748                 | 
21748                 | ' 
21748                 | ' function pspeek(adr as ulong) as ubyte
21748                 | _pspeek
21748     00 4A 05 F6 | 	mov	COUNT_, #0
2174c     A8 00 A0 FD | 	call	#pushregs_
21750     0C F0 07 F1 | 	add	ptra, #12
21754     04 4E 05 F1 | 	add	fp, #4
21758     A7 12 62 FC | 	wrlong	arg01, fp
2175c     04 4E 05 F1 | 	add	fp, #4
21760     A7 12 02 F6 | 	mov	arg01, fp
21764     04 4E 85 F1 | 	sub	fp, #4
21768     A7 14 02 FB | 	rdlong	arg02, fp
2176c     04 4E 85 F1 | 	sub	fp, #4
21770     01 16 06 F6 | 	mov	arg03, #1
21774     0B 00 00 FF 
21778     CC E4 05 F1 | 	add	objptr, ##5836
2177c     B4 2A B0 FD | 	call	#_psram_spin2_read1
21780     0B 00 00 FF 
21784     CC E4 85 F1 | 	sub	objptr, ##5836
21788                 | ' psram.read1(varptr(res),adr,1)
21788                 | ' return res
21788     08 4E 05 F1 | 	add	fp, #8
2178c     A7 FA C1 FA | 	rdbyte	result1, fp
21790     08 4E 85 F1 | 	sub	fp, #8
21794     A7 F0 03 F6 | 	mov	ptra, fp
21798     B2 00 A0 FD | 	call	#popregs_
2179c                 | _pspeek_ret
2179c     2D 00 64 FD | 	ret
217a0                 | 
217a0                 | ' 
217a0                 | ' function pslpeek(adr as ulong) as ulong
217a0                 | _pslpeek
217a0     00 4A 05 F6 | 	mov	COUNT_, #0
217a4     A8 00 A0 FD | 	call	#pushregs_
217a8     0C F0 07 F1 | 	add	ptra, #12
217ac     04 4E 05 F1 | 	add	fp, #4
217b0     A7 12 62 FC | 	wrlong	arg01, fp
217b4     04 4E 05 F1 | 	add	fp, #4
217b8     A7 12 02 F6 | 	mov	arg01, fp
217bc     04 4E 85 F1 | 	sub	fp, #4
217c0     A7 14 02 FB | 	rdlong	arg02, fp
217c4     04 4E 85 F1 | 	sub	fp, #4
217c8     04 16 06 F6 | 	mov	arg03, #4
217cc     0B 00 00 FF 
217d0     CC E4 05 F1 | 	add	objptr, ##5836
217d4     5C 2A B0 FD | 	call	#_psram_spin2_read1
217d8     0B 00 00 FF 
217dc     CC E4 85 F1 | 	sub	objptr, ##5836
217e0                 | ' psram.read1(varptr(res),adr,4)
217e0                 | ' return res
217e0     08 4E 05 F1 | 	add	fp, #8
217e4     A7 FA 01 FB | 	rdlong	result1, fp
217e8     08 4E 85 F1 | 	sub	fp, #8
217ec     A7 F0 03 F6 | 	mov	ptra, fp
217f0     B2 00 A0 FD | 	call	#popregs_
217f4                 | _pslpeek_ret
217f4     2D 00 64 FD | 	ret
217f8                 | 
217f8                 | ' 
217f8                 | ' function psdpeek(adr as ulong) as ulong
217f8                 | _psdpeek
217f8     00 4A 05 F6 | 	mov	COUNT_, #0
217fc     A8 00 A0 FD | 	call	#pushregs_
21800     0C F0 07 F1 | 	add	ptra, #12
21804     04 4E 05 F1 | 	add	fp, #4
21808     A7 12 62 FC | 	wrlong	arg01, fp
2180c     04 4E 05 F1 | 	add	fp, #4
21810     A7 12 02 F6 | 	mov	arg01, fp
21814     04 4E 85 F1 | 	sub	fp, #4
21818     A7 14 02 FB | 	rdlong	arg02, fp
2181c     04 4E 85 F1 | 	sub	fp, #4
21820     02 16 06 F6 | 	mov	arg03, #2
21824     0B 00 00 FF 
21828     CC E4 05 F1 | 	add	objptr, ##5836
2182c     04 2A B0 FD | 	call	#_psram_spin2_read1
21830     0B 00 00 FF 
21834     CC E4 85 F1 | 	sub	objptr, ##5836
21838                 | ' psram.read1(varptr(res),adr,2)
21838                 | ' return res
21838     08 4E 05 F1 | 	add	fp, #8
2183c     A7 FA E1 FA | 	rdword	result1, fp
21840     08 4E 85 F1 | 	sub	fp, #8
21844     A7 F0 03 F6 | 	mov	ptra, fp
21848     B2 00 A0 FD | 	call	#popregs_
2184c                 | _psdpeek_ret
2184c     2D 00 64 FD | 	ret
21850                 | 
21850                 | ' 
21850                 | ' '' ------------------------------- USB keyboard scan to char translator
21850                 | ' 
21850                 | ' function scantochar(key)
21850                 | _scantochar
21850                 | ' 
21850                 | ' select case (key shr 8) and 255
21850     09 01 02 F6 | 	mov	_var01, arg01
21854     08 00 C6 F0 | 	sar	_var01, #8
21858     FF 00 0E F5 | 	and	_var01, #255 wz
2185c     24 00 90 AD |  if_e	jmp	#LR__2600
21860     02 00 0E F2 | 	cmp	_var01, #2 wz
21864     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
21868     30 00 90 AD |  if_e	jmp	#LR__2601
2186c     40 00 0E F2 | 	cmp	_var01, #64 wz
21870     44 00 90 AD |  if_e	jmp	#LR__2602
21874     42 00 0E F2 | 	cmp	_var01, #66 wz
21878     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
2187c     70 00 90 5D |  if_ne	jmp	#LR__2604
21880     50 00 90 FD | 	jmp	#LR__2603
21884                 | LR__2600
21884     09 FB 01 F6 | 	mov	result1, arg01
21888     7F FA 05 F5 | 	and	result1, #127
2188c     02 FA 65 F0 | 	shl	result1, #2
21890     F5 FA 01 F1 | 	add	result1, ptr__dat__
21894     FD FA C1 FA | 	rdbyte	result1, result1
21898     54 00 90 FD | 	jmp	#_scantochar_ret
2189c                 | LR__2601
2189c     09 FB 01 F6 | 	mov	result1, arg01
218a0     7F FA 05 F5 | 	and	result1, #127
218a4     02 FA 65 F0 | 	shl	result1, #2
218a8     01 FA 05 F1 | 	add	result1, #1
218ac     F5 FA 01 F1 | 	add	result1, ptr__dat__
218b0     FD FA C1 FA | 	rdbyte	result1, result1
218b4     38 00 90 FD | 	jmp	#_scantochar_ret
218b8                 | LR__2602
218b8     09 FB 01 F6 | 	mov	result1, arg01
218bc     7F FA 05 F5 | 	and	result1, #127
218c0     02 FA 65 F0 | 	shl	result1, #2
218c4     02 FA 05 F1 | 	add	result1, #2
218c8     F5 FA 01 F1 | 	add	result1, ptr__dat__
218cc     FD FA C1 FA | 	rdbyte	result1, result1
218d0     1C 00 90 FD | 	jmp	#_scantochar_ret
218d4                 | LR__2603
218d4     09 FB 01 F6 | 	mov	result1, arg01
218d8     7F FA 05 F5 | 	and	result1, #127
218dc     02 FA 65 F0 | 	shl	result1, #2
218e0     03 FA 05 F1 | 	add	result1, #3
218e4     F5 FA 01 F1 | 	add	result1, ptr__dat__
218e8     FD FA C1 FA | 	rdbyte	result1, result1
218ec     00 00 90 FD | 	jmp	#_scantochar_ret
218f0                 | LR__2604
218f0                 | _scantochar_ret
218f0     2D 00 64 FD | 	ret
218f4                 | 
218f4                 | _program
218f4     01 4A 05 F6 | 	mov	COUNT_, #1
218f8     A8 00 A0 FD | 	call	#pushregs_
218fc     70 FC BF FD | 	call	#_startpsram
21900     40 12 06 F6 | 	mov	arg01, #64
21904     00 14 06 F6 | 	mov	arg02, #0
21908     00 16 06 F6 | 	mov	arg03, #0
2190c     A0 FC BF FD | 	call	#_startvideo
21910     37 00 00 FF 
21914     14 E4 05 F1 | 	add	objptr, ##28180
21918     F2 12 02 FB | 	rdlong	arg01, objptr
2191c     00 14 06 F6 | 	mov	arg02, #0
21920     FB 03 00 FF 
21924     00 17 06 F6 | 	mov	arg03, ##521984
21928     2B 00 00 FF 
2192c     48 E5 85 F1 | 	sub	objptr, ##22344
21930     DC 2E B0 FD | 	call	#_audio096_spin2_start
21934     FE 16 02 F6 | 	mov	arg03, result2
21938     2B 00 00 FF 
2193c     30 E5 05 F1 | 	add	objptr, ##22320
21940     F2 FA 61 FC | 	wrlong	result1, objptr
21944     14 E4 05 F1 | 	add	objptr, #20
21948     F2 16 62 FC | 	wrlong	arg03, objptr
2194c     37 00 00 FF 
21950     10 E4 85 F1 | 	sub	objptr, ##28176
21954     32 12 06 F6 | 	mov	arg01, #50
21958     0C 38 B0 FD | 	call	#__system___waitms
2195c     37 00 00 FF 
21960     10 E4 05 F1 | 	add	objptr, ##28176
21964     F2 12 02 FB | 	rdlong	arg01, objptr
21968     37 00 00 FF 
2196c     10 E4 85 F1 | 	sub	objptr, ##28176
21970     14 12 06 F1 | 	add	arg01, #20
21974     20 00 80 FF 
21978     09 01 58 FC | 	wrword	##16384, arg01
2197c     E8 2B B0 FD | 	call	#_usbnew_spin2_start
21980     37 00 00 FF 
21984     04 E4 05 F1 | 	add	objptr, ##28164
21988     F2 FA 61 FC | 	wrlong	result1, objptr
2198c                 | '   mouse_limits[0] := xlim
2198c     0F 00 00 FF 
21990     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
21994     01 00 80 FF 
21998     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
2199c                 | '   mouse_limits[1] := ylim
2199c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
219a0     01 00 80 FF 
219a4     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
219a8     36 00 00 FF 
219ac     F3 E4 85 F1 | 	sub	objptr, ##27891
219b0     F2 12 02 F6 | 	mov	arg01, objptr
219b4     11 E5 85 F1 | 	sub	objptr, #273
219b8     C4 12 06 F1 | 	add	arg01, #196
219bc                 | '   mouse_outptr := ptr
219bc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
219c0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
219c4     0F 00 00 FF 
219c8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
219cc     16 00 00 FF 
219d0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
219d4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
219d8     16 00 00 FF 
219dc     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
219e0     10 12 06 F6 | 	mov	arg01, #16
219e4     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
219e8     10 12 06 F6 | 	mov	arg01, #16
219ec     20 14 06 F6 | 	mov	arg02, #32
219f0     20 16 06 F6 | 	mov	arg03, #32
219f4     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
219f8     09 12 C6 F9 | 	decod	arg01, #9
219fc     2C 15 06 F6 | 	mov	arg02, #300
21a00     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
21a04     F2 16 02 F6 | 	mov	arg03, objptr
21a08     50 00 00 FF 
21a0c     44 E5 05 F1 | 	add	objptr, ##41284
21a10     F2 14 02 F6 | 	mov	arg02, objptr
21a14     0A 17 62 FC | 	wrlong	arg03, arg02
21a18     04 14 06 F1 | 	add	arg02, #4
21a1c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
21a20     EF 14 02 F6 | 	mov	arg02, entryptr__
21a24     1E FA 05 F6 | 	mov	result1, #30
21a28     28 E4 61 FD | 	setq	objptr
21a2c     0A FB F1 FC | 	coginit	result1, arg02 wc
21a30     01 FA 65 C6 |  if_b	neg	result1, #1
21a34     04 E4 85 F1 | 	sub	objptr, #4
21a38     F2 FA 61 FC | 	wrlong	result1, objptr
21a3c     01 00 00 FF 
21a40     90 E4 05 F1 | 	add	objptr, ##656
21a44     F2 00 68 FC | 	wrlong	#0, objptr
21a48     1A 00 00 FF 
21a4c     9C E5 85 F1 | 	sub	objptr, ##13724
21a50     F2 04 68 FC | 	wrlong	#2, objptr
21a54     04 E4 05 F1 | 	add	objptr, #4
21a58     F2 26 69 FC | 	wrlong	#147, objptr
21a5c     04 E4 05 F1 | 	add	objptr, #4
21a60     F2 34 69 FC | 	wrlong	#154, objptr
21a64     04 E4 05 F1 | 	add	objptr, #4
21a68     F2 08 68 FC | 	wrlong	#4, objptr
21a6c     04 E4 85 F1 | 	sub	objptr, #4
21a70     F2 16 02 FB | 	rdlong	arg03, objptr
21a74     14 E4 85 F1 | 	sub	objptr, #20
21a78     F2 16 62 FC | 	wrlong	arg03, objptr
21a7c     04 E4 05 F1 | 	add	objptr, #4
21a80     F2 00 68 FC | 	wrlong	#0, objptr
21a84     04 E4 05 F1 | 	add	objptr, #4
21a88     F2 00 68 FC | 	wrlong	#0, objptr
21a8c     19 00 00 FF 
21a90     0C E5 05 F1 | 	add	objptr, ##13068
21a94     F2 02 68 FC | 	wrlong	#1, objptr
21a98     01 00 00 FF 
21a9c     9C E4 05 F1 | 	add	objptr, ##668
21aa0     F2 00 68 FC | 	wrlong	#0, objptr
21aa4     01 00 00 FF 
21aa8     00 EA 05 F1 | 	add	ptr__dat__, ##512
21aac     08 E4 05 F1 | 	add	objptr, #8
21ab0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
21ab4     04 E4 85 F1 | 	sub	objptr, #4
21ab8     03 00 80 FF 
21abc     F2 3C 69 FC | 	wrlong	##1694, objptr
21ac0     0C 00 00 FF 
21ac4     78 E5 85 F1 | 	sub	objptr, ##6520
21ac8     F2 18 68 FC | 	wrlong	#12, objptr
21acc     45 00 00 FF 
21ad0     64 E4 85 F1 | 	sub	objptr, ##35428
21ad4     01 00 00 FF 
21ad8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
21adc     D8 D9 BF FD | 	call	#_init_commands
21ae0     6C F6 BF FD | 	call	#_init_error_strings
21ae4     F0 ED BF FD | 	call	#_init_audio
21ae8     58 3A BF FD | 	call	#_do_new
21aec     37 00 00 FF 
21af0     3C E4 05 F1 | 	add	objptr, ##28220
21af4     F2 12 02 FB | 	rdlong	arg01, objptr
21af8     04 E4 85 F1 | 	sub	objptr, #4
21afc     F2 14 02 FB | 	rdlong	arg02, objptr
21b00     37 00 00 FF 
21b04     38 E4 85 F1 | 	sub	objptr, ##28216
21b08     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
21b0c     37 00 00 FF 
21b10     40 E4 05 F1 | 	add	objptr, ##28224
21b14     F2 12 02 FB | 	rdlong	arg01, objptr
21b18     37 00 00 FF 
21b1c     40 E4 85 F1 | 	sub	objptr, ##28224
21b20     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
21b24                 | ' 
21b24                 | ' leading_spaces:=amount
21b24     01 00 00 FF 
21b28     B6 E4 05 F1 | 	add	objptr, ##694
21b2c     F2 04 68 FC | 	wrlong	#2, objptr
21b30     01 00 00 FF 
21b34     B6 E4 85 F1 | 	sub	objptr, ##694
21b38     AD 01 00 FF 
21b3c     0D 26 06 F6 | 	mov	local01, ##@LR__5936
21b40     3D 12 06 F6 | 	mov	arg01, #61
21b44     3C 14 06 F6 | 	mov	arg02, #60
21b48     3B 16 06 F6 | 	mov	arg03, #59
21b4c     3A 18 06 F6 | 	mov	arg04, #58
21b50     A4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
21b54     FD 14 02 F6 | 	mov	arg02, result1
21b58     13 13 02 F6 | 	mov	arg01, local01
21b5c     E0 36 B0 FD | 	call	#__system___mount
21b60     AD 01 00 FF 
21b64     11 12 06 F6 | 	mov	arg01, ##@LR__5937
21b68     94 39 B0 FD | 	call	#__system___chdir
21b6c     AD 01 00 FF 
21b70     19 26 06 F6 | 	mov	local01, ##@LR__5938
21b74     4A 00 00 FF 
21b78     94 E4 05 F1 | 	add	objptr, ##38036
21b7c     F2 26 62 FC | 	wrlong	local01, objptr
21b80     13 00 00 FF 
21b84     60 E4 85 F1 | 	sub	objptr, ##9824
21b88     F2 12 02 FB | 	rdlong	arg01, objptr
21b8c     37 00 00 FF 
21b90     34 E4 85 F1 | 	sub	objptr, ##28212
21b94     01 12 66 F0 | 	shl	arg01, #1
21b98     01 14 06 F6 | 	mov	arg02, #1
21b9c     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21ba0                 | ' init_commands
21ba0                 | ' init_error_strings
21ba0                 | ' init_audio
21ba0                 | ' do_new
21ba0                 | ' cls(ink, paper)
21ba0                 | ' v.setfontfamily(font) 				' use ST Mono font
21ba0                 | ' v.setleadingspaces(2)
21ba0                 | ' mount "/sd", _vfs_open_sdcard()
21ba0                 | ' chdir "/sd/bas"
21ba0                 | ' currentdir$="/sd/bas"
21ba0                 | ' position 2*editor_spaces,1 : print ver$
21ba0     00 12 06 F6 | 	mov	arg01, #0
21ba4     F4 8F B0 FD | 	call	#__system___getiolock_0595
21ba8     FD 12 02 F6 | 	mov	arg01, result1
21bac     C4 32 B0 FD | 	call	#__system___lockmem
21bb0     18 00 00 FF 
21bb4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
21bb8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
21bbc     18 00 00 FF 
21bc0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
21bc4     00 12 06 F6 | 	mov	arg01, #0
21bc8     00 16 06 F6 | 	mov	arg03, #0
21bcc     98 3F B0 FD | 	call	#__system___basic_print_string
21bd0     00 12 06 F6 | 	mov	arg01, #0
21bd4     0A 14 06 F6 | 	mov	arg02, #10
21bd8     00 16 06 F6 | 	mov	arg03, #0
21bdc     30 3F B0 FD | 	call	#__system___basic_print_char
21be0     00 12 06 F6 | 	mov	arg01, #0
21be4     B4 8F B0 FD | 	call	#__system___getiolock_0595
21be8     FD 00 68 FC | 	wrlong	#0, result1
21bec     51 00 00 FF 
21bf0     D4 E5 05 F1 | 	add	objptr, ##41940
21bf4     F2 12 02 FB | 	rdlong	arg01, objptr
21bf8     0E 00 00 FF 
21bfc     78 E5 85 F1 | 	sub	objptr, ##7544
21c00     F2 26 02 FB | 	rdlong	local01, objptr
21c04     43 00 00 FF 
21c08     5C E4 85 F1 | 	sub	objptr, ##34396
21c0c     13 13 82 F1 | 	sub	arg01, local01
21c10     00 14 06 F6 | 	mov	arg02, #0
21c14     0A 16 06 F6 | 	mov	arg03, #10
21c18     28 55 B0 FD | 	call	#__system__Number_S
21c1c     FD 12 02 F6 | 	mov	arg01, result1
21c20     AD 01 00 FF 
21c24     21 14 06 F6 | 	mov	arg02, ##@LR__5939
21c28     A4 32 B0 FD | 	call	#__system___string_concat
21c2c     FD 26 02 F6 | 	mov	local01, result1
21c30     50 00 00 FF 
21c34     38 E5 05 F1 | 	add	objptr, ##41272
21c38     F2 26 62 FC | 	wrlong	local01, objptr
21c3c     50 00 00 FF 
21c40     38 E5 85 F1 | 	sub	objptr, ##41272
21c44                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
21c44     00 12 06 F6 | 	mov	arg01, #0
21c48     50 8F B0 FD | 	call	#__system___getiolock_0595
21c4c     FD 12 02 F6 | 	mov	arg01, result1
21c50     20 32 B0 FD | 	call	#__system___lockmem
21c54     50 00 00 FF 
21c58     38 E5 05 F1 | 	add	objptr, ##41272
21c5c     F2 14 02 FB | 	rdlong	arg02, objptr
21c60     50 00 00 FF 
21c64     38 E5 85 F1 | 	sub	objptr, ##41272
21c68     00 12 06 F6 | 	mov	arg01, #0
21c6c     00 16 06 F6 | 	mov	arg03, #0
21c70     F4 3E B0 FD | 	call	#__system___basic_print_string
21c74     00 12 06 F6 | 	mov	arg01, #0
21c78     0A 14 06 F6 | 	mov	arg02, #10
21c7c     00 16 06 F6 | 	mov	arg03, #0
21c80     8C 3E B0 FD | 	call	#__system___basic_print_char
21c84     00 12 06 F6 | 	mov	arg01, #0
21c88     10 8F B0 FD | 	call	#__system___getiolock_0595
21c8c     FD 00 68 FC | 	wrlong	#0, result1
21c90     37 00 00 FF 
21c94     34 E4 05 F1 | 	add	objptr, ##28212
21c98     F2 12 02 FB | 	rdlong	arg01, objptr
21c9c     37 00 00 FF 
21ca0     34 E4 85 F1 | 	sub	objptr, ##28212
21ca4     01 12 66 F0 | 	shl	arg01, #1
21ca8     04 14 06 F6 | 	mov	arg02, #4
21cac     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21cb0                 | ' position 2*editor_spaces,4 : print "Ready"
21cb0     00 12 06 F6 | 	mov	arg01, #0
21cb4     E4 8E B0 FD | 	call	#__system___getiolock_0595
21cb8     FD 12 02 F6 | 	mov	arg01, result1
21cbc     B4 31 B0 FD | 	call	#__system___lockmem
21cc0     AD 01 00 FF 
21cc4     33 14 06 F6 | 	mov	arg02, ##@LR__5940
21cc8     00 12 06 F6 | 	mov	arg01, #0
21ccc     00 16 06 F6 | 	mov	arg03, #0
21cd0     94 3E B0 FD | 	call	#__system___basic_print_string
21cd4     00 12 06 F6 | 	mov	arg01, #0
21cd8     0A 14 06 F6 | 	mov	arg02, #10
21cdc     00 16 06 F6 | 	mov	arg03, #0
21ce0     2C 3E B0 FD | 	call	#__system___basic_print_char
21ce4     00 12 06 F6 | 	mov	arg01, #0
21ce8     B0 8E B0 FD | 	call	#__system___getiolock_0595
21cec     FD 00 68 FC | 	wrlong	#0, result1
21cf0     00 14 06 F6 | 	mov	arg02, #0
21cf4     01 14 D6 F7 | 	test	arg02, #1 wc
21cf8     5A 4C 64 FD | 	drvc	#38
21cfc     01 14 D6 F7 | 	test	arg02, #1 wc
21d00     5A 4E 64 FD | 	drvc	#39
21d04     AD 01 00 FF 
21d08     39 26 06 F6 | 	mov	local01, ##@LR__5941
21d0c     52 00 00 FF 
21d10     00 E4 05 F1 | 	add	objptr, ##41984
21d14     F2 26 62 FC | 	wrlong	local01, objptr
21d18     04 E4 05 F1 | 	add	objptr, #4
21d1c     FF FF FF FF 
21d20     F2 FE 6B FC | 	wrlong	##-1, objptr
21d24     0C E4 05 F1 | 	add	objptr, #12
21d28     F2 00 68 FC | 	wrlong	#0, objptr
21d2c     52 00 00 FF 
21d30     10 E4 85 F1 | 	sub	objptr, ##42000
21d34                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
21d34                 | ' loadname="noname.bas"
21d34                 | ' do_insert=-1
21d34                 | ' inload=0
21d34                 | ' 
21d34                 | ' open "/sd/bas/autorun.bas" for input as #9
21d34     AD 01 00 FF 
21d38     44 14 06 F6 | 	mov	arg02, ##@LR__5942
21d3c     09 12 06 F6 | 	mov	arg01, #9
21d40     00 16 06 F6 | 	mov	arg03, #0
21d44     30 3D B0 FD | 	call	#__system___basic_open_string
21d48     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21d4c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21d50     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21d54     52 00 00 FF 
21d58     14 E4 05 F1 | 	add	objptr, ##42004
21d5c     F2 FA 61 FC | 	wrlong	result1, objptr
21d60     52 00 00 FF 
21d64     14 E4 85 F1 | 	sub	objptr, ##42004
21d68                 | ' err=geterr()
21d68                 | ' close #9
21d68     09 12 06 F6 | 	mov	arg01, #9
21d6c     5C 84 B0 FD | 	call	#__system__close
21d70                 | ' if err=0 then line$="run autorun.bas" : interpret
21d70     52 00 00 FF 
21d74     14 E4 05 F1 | 	add	objptr, ##42004
21d78     F2 26 0A FB | 	rdlong	local01, objptr wz
21d7c     52 00 00 FF 
21d80     14 E4 85 F1 | 	sub	objptr, ##42004
21d84     AD 01 00 AF 
21d88     58 26 06 A6 |  if_e	mov	local01, ##@LR__5943
21d8c     37 00 00 AF 
21d90     1C E4 05 A1 |  if_e	add	objptr, ##28188
21d94     F2 26 62 AC |  if_e	wrlong	local01, objptr
21d98     37 00 00 AF 
21d9c     1C E4 85 A1 |  if_e	sub	objptr, ##28188
21da0     A4 F9 BD AD |  if_e	call	#_interpret
21da4                 | ' 
21da4                 | ' 
21da4                 | ' '-------------------------------------------------------------------------------------------------------- 
21da4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
21da4                 | ' '--------------------------------------------------------------------------------------------------------
21da4                 | ' 
21da4                 | ' do
21da4                 | LR__2610
21da4     5C EA BD FD | 	call	#_edit
21da8     FD 26 02 F6 | 	mov	local01, result1
21dac     37 00 00 FF 
21db0     1C E4 05 F1 | 	add	objptr, ##28188
21db4     F2 26 62 FC | 	wrlong	local01, objptr
21db8     37 00 00 FF 
21dbc     1C E4 85 F1 | 	sub	objptr, ##28188
21dc0     84 F9 BD FD | 	call	#_interpret
21dc4     AD 01 00 FF 
21dc8     68 26 06 F6 | 	mov	local01, ##@LR__5944
21dcc     37 00 00 FF 
21dd0     1C E4 05 F1 | 	add	objptr, ##28188
21dd4     F2 26 62 FC | 	wrlong	local01, objptr
21dd8     37 00 00 FF 
21ddc     1C E4 85 F1 | 	sub	objptr, ##28188
21de0     C0 FF 9F FD | 	jmp	#LR__2610
21de4     A7 F0 03 F6 | 	mov	ptra, fp
21de8     B2 00 A0 FD | 	call	#popregs_
21dec                 | _program_ret
21dec     2D 00 64 FD | 	ret
21df0                 | 
21df0                 | ' '' this is not a main program.
21df0                 | ' 
21df0                 | ' '****************************************************************************************************************
21df0                 | ' '                                                                                                             	*
21df0                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
21df0                 | ' '                                                                                                            	*
21df0                 | ' ' base - HDMI base pin												*
21df0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
21df0                 | ' '														*
21df0                 | ' '														*
21df0                 | ' '****************************************************************************************************************
21df0                 | ' 
21df0                 | ' pub start(base,mb):result |i
21df0                 | _hg010b_spin2_start
21df0                 | ' 
21df0                 | ' '--------------------------- initialize pointers and variables
21df0                 | ' 
21df0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
21df0     34 E4 05 F1 | 	add	objptr, #52
21df4     F2 FA 01 F6 | 	mov	result1, objptr
21df8     28 E4 85 F1 | 	sub	objptr, #40
21dfc     F2 FA 61 FC | 	wrlong	result1, objptr
21e00                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
21e00                 | ' hdmibase:=base							' HDMI base pin, 8*n
21e00     18 E4 05 F1 | 	add	objptr, #24
21e04     F2 12 62 FC | 	wrlong	arg01, objptr
21e08                 | ' mailbox_ptr:=mb		
21e08     04 E4 05 F1 | 	add	objptr, #4
21e0c     F2 14 62 FC | 	wrlong	arg02, objptr
21e10                 | ' mailbox0:=mb				' PSRAM mailbox pointer
21e10     C1 E5 05 F1 | 	add	objptr, #449
21e14     F2 14 62 FC | 	wrlong	arg02, objptr
21e18                 | ' sprite_ptr:=@spr1ptr
21e18     D8 E4 85 F1 | 	sub	objptr, #216
21e1c     F2 FA 01 F6 | 	mov	result1, objptr
21e20     E5 E4 85 F1 | 	sub	objptr, #229
21e24     F2 FA 61 FC | 	wrlong	result1, objptr
21e28                 | ' 
21e28                 | ' 		'
21e28                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
21e28     E5 E4 05 F1 | 	add	objptr, #229
21e2c     F2 FA 01 FB | 	rdlong	result1, objptr
21e30     D0 FA 05 F1 | 	add	result1, #208
21e34     FD 10 58 FC | 	wrword	#8, result1
21e38                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
21e38     F2 16 02 FB | 	rdlong	arg03, objptr
21e3c     D2 16 06 F1 | 	add	arg03, #210
21e40     0B 21 58 FC | 	wrword	#16, arg03
21e44                 | ' leading_spaces:=0				'
21e44     A5 E5 05 F1 | 	add	objptr, #421
21e48     F2 00 68 FC | 	wrlong	#0, objptr
21e4c                 | ' 
21e4c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
21e4c     99 E4 85 F1 | 	sub	objptr, #153
21e50     00 00 A0 FF 
21e54     F2 0E 68 FC | 	wrlong	##1073741831, objptr
21e58                 | ' emptydl[1]:=0
21e58     04 E4 05 F1 | 	add	objptr, #4
21e5c     F2 00 68 FC | 	wrlong	#0, objptr
21e60                 | ' 
21e60                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
21e60                 | ' 
21e60                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
21e60     28 E5 85 F1 | 	sub	objptr, #296
21e64     F2 02 68 FC | 	wrlong	#1, objptr
21e68                 | ' if s_debug<>0
21e68                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
21e68     20 00 80 FF 
21e6c     F2 00 68 FC | 	wrlong	##16384, objptr
21e70     F9 E4 85 F1 | 	sub	objptr, #249
21e74                 | ' setmode()							' set the mode, see below
21e74     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
21e78                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
21e78     49 E4 05 F1 | 	add	objptr, #73
21e7c     F2 FA 01 F6 | 	mov	result1, objptr
21e80     35 E4 85 F1 | 	sub	objptr, #53
21e84     F2 FA 61 FC | 	wrlong	result1, objptr
21e88                 | ' cursor_ptr:=@cursor_x						
21e88     28 E4 05 F1 | 	add	objptr, #40
21e8c     F2 16 02 F6 | 	mov	arg03, objptr
21e90     2C E4 85 F1 | 	sub	objptr, #44
21e94     F2 16 62 FC | 	wrlong	arg03, objptr
21e98                 | ' fontnum:=0  							' start with a PC type font 
21e98     55 E4 05 F1 | 	add	objptr, #85
21e9c     F2 00 68 FC | 	wrlong	#0, objptr
21ea0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
21ea0     1C E4 05 F1 | 	add	objptr, #28
21ea4     F2 12 02 F6 | 	mov	arg01, objptr
21ea8     81 E4 85 F1 | 	sub	objptr, #129
21eac     10 00 00 FF 
21eb0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
21eb4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21eb8     10 00 00 FF 
21ebc     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
21ec0     10 16 06 F6 | 	mov	arg03, #16
21ec4     CC 2E B0 FD | 	call	#__system____builtin_memmove
21ec8                 | ' leading_spaces:=0
21ec8     01 00 00 FF 
21ecc     B6 E4 05 F1 | 	add	objptr, ##694
21ed0     F2 00 68 FC | 	wrlong	#0, objptr
21ed4     01 00 00 FF 
21ed8     B6 E4 85 F1 | 	sub	objptr, ##694
21edc                 | ' '---------------------------- initialize a cursor (MSDOS type)
21edc                 | ' 
21edc                 | ' initcursor(154)
21edc     9A 12 06 F6 | 	mov	arg01, #154
21ee0     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
21ee4                 | ' 
21ee4                 | ' '---------------------------- start the cog
21ee4                 | ' 
21ee4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
21ee4     10 00 00 FF 
21ee8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
21eec     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21ef0     10 00 00 FF 
21ef4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
21ef8     14 E4 05 F1 | 	add	objptr, #20
21efc     10 FA 05 F6 | 	mov	result1, #16
21f00     28 E4 61 FD | 	setq	objptr
21f04     0A FB F1 FC | 	coginit	result1, arg02 wc
21f08     01 FA 65 C6 |  if_b	neg	result1, #1
21f0c     1C E4 05 F1 | 	add	objptr, #28
21f10     F2 FA 61 FC | 	wrlong	result1, objptr
21f14     30 E4 85 F1 | 	sub	objptr, #48
21f18                 | ' waitms(40)							' wait for stabilize
21f18     28 12 06 F6 | 	mov	arg01, #40
21f1c     48 32 B0 FD | 	call	#__system___waitms
21f20                 | ' return cog							' return the driver's cog #
21f20     30 E4 05 F1 | 	add	objptr, #48
21f24     F2 FA 01 FB | 	rdlong	result1, objptr
21f28     30 E4 85 F1 | 	sub	objptr, #48
21f2c                 | _hg010b_spin2_start_ret
21f2c     2D 00 64 FD | 	ret
21f30                 | 
21f30                 | ' 
21f30                 | ' 
21f30                 | ' '**************************************************************************************************************** 
21f30                 | ' '                                                                                                             	*
21f30                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
21f30                 | ' '  Mode number - see start() above or bits below								*
21f30                 | ' '                                                                                                             	*
21f30                 | ' '****************************************************************************************************************
21f30                 | ' 
21f30                 | ' '---------------------------- initialize a cursor (MSDOS type)
21f30                 | ' pub initcursor(color) |i
21f30                 | _hg010b_spin2_initcursor
21f30     03 4A 05 F6 | 	mov	COUNT_, #3
21f34     A8 00 A0 FD | 	call	#pushregs_
21f38     09 27 02 F6 | 	mov	local01, arg01
21f3c                 | ' 
21f3c                 | ' cursor_x:=0							' place the cursor at 0:0
21f3c     3C E4 05 F1 | 	add	objptr, #60
21f40     F2 00 58 FC | 	wrword	#0, objptr
21f44                 | ' cursor_y:=0
21f44     02 E4 05 F1 | 	add	objptr, #2
21f48     F2 00 48 FC | 	wrbyte	#0, objptr
21f4c                 | ' repeat i from 0 to 111
21f4c     00 28 06 F6 | 	mov	local02, #0
21f50     F8 E5 05 F1 | 	add	objptr, #504
21f54     97 1A 48 FB | 	callpa	#(@LR__2622-@LR__2620)>>2,fcache_load_ptr_
21f58                 | LR__2620
21f58                 | '   cursor[i]:=0
21f58     14 2B 02 F6 | 	mov	local03, local02
21f5c     F2 2A 02 F1 | 	add	local03, objptr
21f60     15 01 48 FC | 	wrbyte	#0, local03
21f64     01 28 06 F1 | 	add	local02, #1
21f68     70 28 56 F2 | 	cmps	local02, #112 wc
21f6c     E8 FF 9F CD |  if_b	jmp	#LR__2620
21f70                 | ' repeat i from 112 to 127
21f70     70 28 06 F6 | 	mov	local02, #112
21f74                 | LR__2621
21f74                 | '   cursor[i]:=color  
21f74     14 2B 02 F6 | 	mov	local03, local02
21f78     F2 2A 02 F1 | 	add	local03, objptr
21f7c     15 27 42 FC | 	wrbyte	local01, local03
21f80     01 28 06 F1 | 	add	local02, #1
21f84     80 28 16 F2 | 	cmp	local02, #128 wc
21f88     E8 FF 9F CD |  if_b	jmp	#LR__2621
21f8c                 | LR__2622
21f8c                 | ' 'repeat i from 0 to 127
21f8c                 | ' '  if ((i/8)//2)
21f8c                 | ' '    cursor[i]:=15
21f8c                 | ' '  else
21f8c                 | ' '    cursor[i]:=0
21f8c                 | ' '  if i>=120    
21f8c                 | ' '    cursor[i]:=40
21f8c                 | ' setspriteptr(17,@cursor)
21f8c     F2 14 02 F6 | 	mov	arg02, objptr
21f90     01 00 00 FF 
21f94     36 E4 85 F1 | 	sub	objptr, ##566
21f98     11 12 06 F6 | 	mov	arg01, #17
21f9c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
21fa0                 | ' setspritesize(17,8,16)
21fa0     11 12 06 F6 | 	mov	arg01, #17
21fa4     08 14 06 F6 | 	mov	arg02, #8
21fa8     10 16 06 F6 | 	mov	arg03, #16
21fac     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
21fb0                 | ' setspritepos(17,0,0)
21fb0     11 12 06 F6 | 	mov	arg01, #17
21fb4     00 14 06 F6 | 	mov	arg02, #0
21fb8     00 16 06 F6 | 	mov	arg03, #0
21fbc     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
21fc0                 | ' cursorshape:=14
21fc0     0B 00 00 FF 
21fc4     C6 E4 05 F1 | 	add	objptr, ##5830
21fc8     F2 1C 68 FC | 	wrlong	#14, objptr
21fcc                 | ' cursorcolor:=color
21fcc     04 E4 85 F1 | 	sub	objptr, #4
21fd0     F2 26 62 FC | 	wrlong	local01, objptr
21fd4     0B 00 00 FF 
21fd8     C2 E4 85 F1 | 	sub	objptr, ##5826
21fdc     A7 F0 03 F6 | 	mov	ptra, fp
21fe0     B2 00 A0 FD | 	call	#popregs_
21fe4                 | _hg010b_spin2_initcursor_ret
21fe4     2D 00 64 FD | 	ret
21fe8                 | 
21fe8                 | ' 
21fe8                 | ' pub setcursorshape(shape) | i
21fe8                 | _hg010b_spin2_setcursorshape
21fe8                 | ' 
21fe8                 | ' cursorshape:=shape
21fe8     0B 00 00 FF 
21fec     C6 E4 05 F1 | 	add	objptr, ##5830
21ff0     F2 12 62 FC | 	wrlong	arg01, objptr
21ff4                 | ' repeat i from 0 to (8*cursorshape)-1
21ff4     00 00 06 F6 | 	mov	_var01, #0
21ff8     09 03 02 F6 | 	mov	_var02, arg01
21ffc     03 02 66 F0 | 	shl	_var02, #3
22000     01 02 86 F1 | 	sub	_var02, #1
22004     00 02 56 F2 | 	cmps	_var02, #0 wc
22008     01 04 86 F6 | 	negc	_var03, #1
2200c     02 07 02 F6 | 	mov	_var04, _var03
22010     02 03 02 F1 | 	add	_var02, _var03
22014     0A 00 00 FF 
22018     90 E4 85 F1 | 	sub	objptr, ##5264
2201c     97 0C 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
22020                 | LR__2630
22020                 | '   cursor[i]:=0
22020     00 05 02 F6 | 	mov	_var03, _var01
22024     F2 04 02 F1 | 	add	_var03, objptr
22028     02 01 48 FC | 	wrbyte	#0, _var03
2202c     03 01 02 F1 | 	add	_var01, _var04
22030     01 01 0A F2 | 	cmp	_var01, _var02 wz
22034     E8 FF 9F 5D |  if_ne	jmp	#LR__2630
22038                 | LR__2631
22038                 | ' repeat i from 8*cursorshape to 127
22038     0A 00 00 FF 
2203c     90 E4 05 F1 | 	add	objptr, ##5264
22040     F2 06 02 FB | 	rdlong	_var04, objptr
22044     03 01 02 F6 | 	mov	_var01, _var04
22048     03 00 66 F0 | 	shl	_var01, #3
2204c     0B 00 00 FF 
22050     C6 E4 85 F1 | 	sub	objptr, ##5830
22054     03 06 66 F0 | 	shl	_var04, #3
22058     80 06 56 F2 | 	cmps	_var04, #128 wc
2205c     01 04 A6 F6 | 	negnc	_var03, #1
22060     7F 02 06 F6 | 	mov	_var02, #127
22064     02 03 02 F1 | 	add	_var02, _var03
22068     97 1A 48 FB | 	callpa	#(@LR__2633-@LR__2632)>>2,fcache_load_ptr_
2206c                 | LR__2632
2206c                 | '   cursor[i]:=cursorcolor
2206c     00 07 02 F6 | 	mov	_var04, _var01
22070     01 00 00 FF 
22074     36 E4 05 F1 | 	add	objptr, ##566
22078     F2 06 02 F1 | 	add	_var04, objptr
2207c     0A 00 00 FF 
22080     8C E4 05 F1 | 	add	objptr, ##5260
22084     F2 12 02 FB | 	rdlong	arg01, objptr
22088     0B 00 00 FF 
2208c     C2 E4 85 F1 | 	sub	objptr, ##5826
22090     03 13 42 FC | 	wrbyte	arg01, _var04
22094     02 01 02 F1 | 	add	_var01, _var03
22098     01 01 0A F2 | 	cmp	_var01, _var02 wz
2209c     CC FF 9F 5D |  if_ne	jmp	#LR__2632
220a0                 | LR__2633
220a0                 | _hg010b_spin2_setcursorshape_ret
220a0     2D 00 64 FD | 	ret
220a4                 | 
220a4                 | ' 
220a4                 | ' pub setcursorcolor(color) | i
220a4                 | _hg010b_spin2_setcursorcolor
220a4                 | ' 
220a4                 | ' cursorcolor:=color
220a4     0B 00 00 FF 
220a8     C2 E4 05 F1 | 	add	objptr, ##5826
220ac     F2 12 62 FC | 	wrlong	arg01, objptr
220b0                 | ' repeat i from 0 to (8*cursorshape)-1
220b0     00 12 06 F6 | 	mov	arg01, #0
220b4     04 E4 05 F1 | 	add	objptr, #4
220b8     F2 00 02 FB | 	rdlong	_var01, objptr
220bc     03 00 66 F0 | 	shl	_var01, #3
220c0     01 00 86 F1 | 	sub	_var01, #1
220c4     00 00 56 F2 | 	cmps	_var01, #0 wc
220c8     01 02 86 F6 | 	negc	_var02, #1
220cc     01 05 02 F6 | 	mov	_var03, _var02
220d0     01 01 02 F1 | 	add	_var01, _var02
220d4     0A 00 00 FF 
220d8     90 E4 85 F1 | 	sub	objptr, ##5264
220dc     97 0C 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
220e0                 | LR__2640
220e0                 | '   cursor[i]:=0
220e0     09 03 02 F6 | 	mov	_var02, arg01
220e4     F2 02 02 F1 | 	add	_var02, objptr
220e8     01 01 48 FC | 	wrbyte	#0, _var02
220ec     02 13 02 F1 | 	add	arg01, _var03
220f0     00 13 0A F2 | 	cmp	arg01, _var01 wz
220f4     E8 FF 9F 5D |  if_ne	jmp	#LR__2640
220f8                 | LR__2641
220f8                 | ' repeat i from 8*cursorshape to 127
220f8     0A 00 00 FF 
220fc     90 E4 05 F1 | 	add	objptr, ##5264
22100     F2 04 02 FB | 	rdlong	_var03, objptr
22104     02 13 02 F6 | 	mov	arg01, _var03
22108     03 12 66 F0 | 	shl	arg01, #3
2210c     0B 00 00 FF 
22110     C6 E4 85 F1 | 	sub	objptr, ##5830
22114     03 04 66 F0 | 	shl	_var03, #3
22118     80 04 56 F2 | 	cmps	_var03, #128 wc
2211c     01 02 A6 F6 | 	negnc	_var02, #1
22120     7F 00 06 F6 | 	mov	_var01, #127
22124     01 01 02 F1 | 	add	_var01, _var02
22128     97 1A 48 FB | 	callpa	#(@LR__2643-@LR__2642)>>2,fcache_load_ptr_
2212c                 | LR__2642
2212c                 | '   cursor[i]:=cursorcolor
2212c     09 05 02 F6 | 	mov	_var03, arg01
22130     01 00 00 FF 
22134     36 E4 05 F1 | 	add	objptr, ##566
22138     F2 04 02 F1 | 	add	_var03, objptr
2213c     0A 00 00 FF 
22140     8C E4 05 F1 | 	add	objptr, ##5260
22144     F2 06 02 FB | 	rdlong	_var04, objptr
22148     0B 00 00 FF 
2214c     C2 E4 85 F1 | 	sub	objptr, ##5826
22150     02 07 42 FC | 	wrbyte	_var04, _var03
22154     01 13 02 F1 | 	add	arg01, _var02
22158     00 13 0A F2 | 	cmp	arg01, _var01 wz
2215c     CC FF 9F 5D |  if_ne	jmp	#LR__2642
22160                 | LR__2643
22160                 | _hg010b_spin2_setcursorcolor_ret
22160     2D 00 64 FD | 	ret
22164                 | 
22164                 | '   
22164                 | '   
22164                 | '   
22164                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
22164                 | _hg010b_spin2_setmode
22164     02 4A 05 F6 | 	mov	COUNT_, #2
22168     A8 00 A0 FD | 	call	#pushregs_
2216c                 | ' 
2216c                 | ' 
2216c                 | ' dl_ptr:=@emptydl[0]
2216c     01 00 00 FF 
22170     1D E4 05 F1 | 	add	objptr, ##541
22174     F2 1A 02 F6 | 	mov	arg05, objptr
22178     FD E5 85 F1 | 	sub	objptr, #509
2217c     F2 1A 62 FC | 	wrlong	arg05, objptr
22180                 | ' 
22180                 | ' if cog>0 
22180     10 E4 05 F1 | 	add	objptr, #16
22184     F2 1A 02 FB | 	rdlong	arg05, objptr
22188     30 E4 85 F1 | 	sub	objptr, #48
2218c     01 1A 56 F2 | 	cmps	arg05, #1 wc
22190                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
22190     01 12 06 36 |  if_ae	mov	arg01, #1
22194     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
22198                 | ' xres:=1024
22198     01 00 00 FF 
2219c     26 E4 05 F1 | 	add	objptr, ##550
221a0     02 00 80 FF 
221a4     F2 00 68 FC | 	wrlong	##1024, objptr
221a8                 | ' yres:=600
221a8     04 E4 05 F1 | 	add	objptr, #4
221ac     01 00 80 FF 
221b0     F2 B0 68 FC | 	wrlong	##600, objptr
221b4                 | ' ppl:=(timings[3])
221b4     10 00 00 FF 
221b8     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
221bc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
221c0     51 E5 85 F1 | 	sub	objptr, #337
221c4     F2 1A 62 FC | 	wrlong	arg05, objptr
221c8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
221c8     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
221cc     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
221d0     01 26 66 F0 | 	shl	local01, #1
221d4     80 E4 85 F1 | 	sub	objptr, #128
221d8     F2 26 62 FC | 	wrlong	local01, objptr
221dc                 | ' cpl1:=cpl '' todo remove
221dc     04 E4 05 F1 | 	add	objptr, #4
221e0     F2 26 62 FC | 	wrlong	local01, objptr
221e4                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
221e4     02 00 00 FF 
221e8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
221ec     41 E4 85 F1 | 	sub	objptr, #65
221f0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
221f4                 | ' repeat i from 0 to 3
221f4     00 28 06 F6 | 	mov	local02, #0
221f8     02 00 00 FF 
221fc     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
22200     08 E4 05 F1 | 	add	objptr, #8
22204     97 20 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
22208                 | LR__2650
22208                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
22208     14 27 02 F6 | 	mov	local01, local02
2220c     02 26 66 F0 | 	shl	local01, #2
22210     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
22214     F2 1A 02 FB | 	rdlong	arg05, objptr
22218     11 1A 66 F0 | 	shl	arg05, #17
2221c     13 27 02 FB | 	rdlong	local01, local01
22220     0D 27 02 F1 | 	add	local01, arg05
22224     80 40 38 FF 
22228     00 26 06 F1 | 	add	local01, ##1887502336
2222c     14 1B 02 F6 | 	mov	arg05, local02
22230     02 1A 66 F0 | 	shl	arg05, #2
22234     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
22238     0D 27 62 FC | 	wrlong	local01, arg05
2223c     01 28 06 F1 | 	add	local02, #1
22240     04 28 56 F2 | 	cmps	local02, #4 wc
22244     C0 FF 9F CD |  if_b	jmp	#LR__2650
22248                 | LR__2651
22248     24 E4 85 F1 | 	sub	objptr, #36
2224c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
2224c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
22250     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
22254     14 26 66 FC | 	wrlong	local01, #20
22258                 | ' hubset(timings[10])
22258     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
2225c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
22260     10 00 00 FF 
22264     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
22268     00 12 62 FD | 	hubset	arg01
2226c                 | ' waitms(1)                                                   	' wait for stabilization
2226c     01 12 06 F6 | 	mov	arg01, #1
22270     F4 2E B0 FD | 	call	#__system___waitms
22274     10 00 00 FF 
22278     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
2227c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
22280     61 E4 05 F1 | 	add	objptr, #97
22284     F2 28 62 FC | 	wrlong	local02, objptr
22288     14 27 52 F6 | 	abs	local01, local02 wc
2228c     04 26 46 F0 | 	shr	local01, #4
22290     13 27 82 F6 | 	negc	local01, local01
22294     9C E4 05 F1 | 	add	objptr, #156
22298     F2 26 62 FC | 	wrlong	local01, objptr
2229c     A4 E4 85 F1 | 	sub	objptr, #164
222a0     F2 28 02 FB | 	rdlong	local02, objptr
222a4     08 E4 05 F1 | 	add	objptr, #8
222a8     F2 26 02 FB | 	rdlong	local01, objptr
222ac     13 29 02 FD | 	qmul	local02, local01
222b0                 | ' lines:=timings[11]
222b0                 | ' t_lines:=lines/16
222b0                 | ' buflen:=cpl*lines						' framebuffer length in longs
222b0     29 E4 85 F1 | 	sub	objptr, #41
222b4     19 26 C6 F9 | 	decod	local01, #25
222b8     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
222bc     18 28 62 FD | 	getqx	local02
222c0     F2 28 62 FC | 	wrlong	local02, objptr
222c4     38 E4 85 F1 | 	sub	objptr, #56
222c8     02 28 66 F0 | 	shl	local02, #2
222cc     14 27 82 F1 | 	sub	local01, local02
222d0     F2 26 62 FC | 	wrlong	local01, objptr
222d4     FD E4 05 F1 | 	add	objptr, #253
222d8     F2 28 02 FB | 	rdlong	local02, objptr
222dc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
222e0     0D 29 02 FD | 	qmul	local02, arg05
222e4                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
222e4                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
222e4     F9 E4 85 F1 | 	sub	objptr, #249
222e8                 | ' mode_ptr:=@timings						' set pointers to timings
222e8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
222ec                 | ' graphmode:=1024+512+192+48							' det global variable
222ec                 | ' makedl(graphmode)							' make a DL for the mode
222ec     03 00 00 FF 
222f0     F0 12 06 F6 | 	mov	arg01, ##1776
222f4     18 28 62 FD | 	getqx	local02
222f8     14 27 82 F1 | 	sub	local01, local02
222fc     F2 26 62 FC | 	wrlong	local01, objptr
22300     14 E4 05 F1 | 	add	objptr, #20
22304     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
22308     79 E4 05 F1 | 	add	objptr, #121
2230c     03 00 80 FF 
22310     F2 E0 69 FC | 	wrlong	##1776, objptr
22314     91 E4 85 F1 | 	sub	objptr, #145
22318     10 00 00 FF 
2231c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
22320     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
22324                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
22324     F2 26 02 FB | 	rdlong	local01, objptr
22328     DD E4 05 F1 | 	add	objptr, #221
2232c     F2 26 62 FC | 	wrlong	local01, objptr
22330                 | ' s_font_ptr:=font_ptr
22330     D5 E4 85 F1 | 	sub	objptr, #213
22334     F2 26 02 FB | 	rdlong	local01, objptr
22338     D9 E4 05 F1 | 	add	objptr, #217
2233c     F2 26 62 FC | 	wrlong	local01, objptr
22340                 | ' s_lines:=lines
22340     80 E4 85 F1 | 	sub	objptr, #128
22344     F2 26 02 FB | 	rdlong	local01, objptr
22348     84 E4 05 F1 | 	add	objptr, #132
2234c     F2 26 62 FC | 	wrlong	local01, objptr
22350                 | ' s_buflen:=buflen
22350     AD E4 85 F1 | 	sub	objptr, #173
22354     F2 26 02 FB | 	rdlong	local01, objptr
22358     B5 E4 05 F1 | 	add	objptr, #181
2235c     F2 26 62 FC | 	wrlong	local01, objptr
22360                 | ' s_cpl:=cpl
22360     94 E4 85 F1 | 	sub	objptr, #148
22364     F2 26 02 FB | 	rdlong	local01, objptr
22368     90 E4 05 F1 | 	add	objptr, #144
2236c     F2 26 62 FC | 	wrlong	local01, objptr
22370                 | ' s_cpl1:=cpl
22370     90 E4 85 F1 | 	sub	objptr, #144
22374     F2 26 02 FB | 	rdlong	local01, objptr
22378     98 E4 05 F1 | 	add	objptr, #152
2237c     F2 26 62 FC | 	wrlong	local01, objptr
22380                 | ' st_lines:=t_lines
22380     0C E4 05 F1 | 	add	objptr, #12
22384     F2 26 02 FB | 	rdlong	local01, objptr
22388     04 E4 05 F1 | 	add	objptr, #4
2238c     F2 26 62 FC | 	wrlong	local01, objptr
22390                 | ' ppl:=ppl/xzoom  
22390     28 E4 85 F1 | 	sub	objptr, #40
22394     F2 88 02 FB | 	rdlong	muldiva_, objptr
22398     2C E4 05 F1 | 	add	objptr, #44
2239c     F2 8A 02 FB | 	rdlong	muldivb_, objptr
223a0     05 E5 85 F1 | 	sub	objptr, #261
223a4     BA 00 A0 FD | 	call	#divide_
223a8     D9 E4 05 F1 | 	add	objptr, #217
223ac     F2 8A 62 FC | 	wrlong	muldivb_, objptr
223b0                 | ' s_ppl:=ppl
223b0     1C E4 05 F1 | 	add	objptr, #28
223b4     F2 8A 62 FC | 	wrlong	muldivb_, objptr
223b8     F5 E4 85 F1 | 	sub	objptr, #245
223bc                 | ' waitms(20)							' wait 
223bc     14 12 06 F6 | 	mov	arg01, #20
223c0     A4 2D B0 FD | 	call	#__system___waitms
223c4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
223c4     04 E4 05 F1 | 	add	objptr, #4
223c8     F2 12 02 FB | 	rdlong	arg01, objptr
223cc     04 E4 85 F1 | 	sub	objptr, #4
223d0     F2 16 02 FB | 	rdlong	arg03, objptr
223d4     09 17 82 F1 | 	sub	arg03, arg01
223d8     20 14 06 F6 | 	mov	arg02, #32
223dc     00 18 06 F6 | 	mov	arg04, #0
223e0     01 1A 06 F6 | 	mov	arg05, #1
223e4     0B 00 00 FF 
223e8     CC E4 05 F1 | 	add	objptr, ##5836
223ec     7C 1F B0 FD | 	call	#_psram_spin2_fill
223f0     0B 00 00 FF 
223f4     CC E4 85 F1 | 	sub	objptr, ##5836
223f8     A7 F0 03 F6 | 	mov	ptra, fp
223fc     B2 00 A0 FD | 	call	#popregs_
22400                 | _hg010b_spin2_setmode_ret
22400     2D 00 64 FD | 	ret
22404                 | 
22404                 | ' 
22404                 | ' '****************************************************************************************************************
22404                 | ' '                                                                                                             	*
22404                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
22404                 | ' '                                                                                                             	*
22404                 | ' '****************************************************************************************************************
22404                 | ' 
22404                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
22404                 | _hg010b_spin2_makedl
22404                 | ' 
22404                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
22404                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
22404                 | ' repeat i from 0 to 11                                                           ' clear DL
22404     00 00 06 F6 | 	mov	_var01, #0
22408     ED E5 05 F1 | 	add	objptr, #493
2240c     97 0E 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
22410                 | LR__2660
22410                 | '   displaylist[i]:=0 
22410     00 03 02 F6 | 	mov	_var02, _var01
22414     02 02 66 F0 | 	shl	_var02, #2
22418     F2 02 02 F1 | 	add	_var02, objptr
2241c     01 01 68 FC | 	wrlong	#0, _var02
22420     01 00 06 F1 | 	add	_var01, #1
22424     0C 00 56 F2 | 	cmps	_var01, #12 wc
22428     E4 FF 9F CD |  if_b	jmp	#LR__2660
2242c                 | LR__2661
2242c                 | '                         ' 
2242c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
2242c     8C E5 85 F1 | 	sub	objptr, #396
22430     F2 02 02 FB | 	rdlong	_var02, objptr
22434     14 02 66 F0 | 	shl	_var02, #20
22438     01 02 06 F1 | 	add	_var02, #1
2243c     04 E4 85 F1 | 	sub	objptr, #4
22440     F2 00 02 FB | 	rdlong	_var01, objptr
22444     02 00 66 F0 | 	shl	_var01, #2
22448     04 00 66 F0 | 	shl	_var01, #4
2244c     00 03 02 F1 | 	add	_var02, _var01
22450     90 E5 05 F1 | 	add	objptr, #400
22454     F2 02 62 FC | 	wrlong	_var02, objptr
22458     ED E5 85 F1 | 	sub	objptr, #493
2245c                 | ' displaylist[1]:=buf_ptr<<4+%10  
2245c     F2 02 02 FB | 	rdlong	_var02, objptr
22460     04 02 66 F0 | 	shl	_var02, #4
22464     02 02 06 F1 | 	add	_var02, #2
22468     F1 E5 05 F1 | 	add	objptr, #497
2246c     F2 02 62 FC | 	wrlong	_var02, objptr
22470                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
22470     04 E4 85 F1 | 	sub	objptr, #4
22474     F2 02 02 F6 | 	mov	_var02, objptr
22478     CD E5 85 F1 | 	sub	objptr, #461
2247c     F2 02 62 FC | 	wrlong	_var02, objptr
22480     20 E4 85 F1 | 	sub	objptr, #32
22484                 | _hg010b_spin2_makedl_ret
22484     2D 00 64 FD | 	ret
22488                 | 
22488                 | ' 
22488                 | ' 
22488                 | ' '****************************************************************************************************************
22488                 | ' '                                                                        					*
22488                 | ' '  Graphic primitives                                                    					*
22488                 | ' '                                                                        					*
22488                 | ' '****************************************************************************************************************
22488                 | ' 
22488                 | ' pub setspriteptr(num,ptr)
22488                 | _hg010b_spin2_setspriteptr
22488                 | ' long[@spr1ptr+12*num]:=ptr
22488     11 E5 05 F1 | 	add	objptr, #273
2248c     F2 00 02 F6 | 	mov	_var01, objptr
22490     09 03 02 F6 | 	mov	_var02, arg01
22494     01 02 66 F0 | 	shl	_var02, #1
22498     09 03 02 F1 | 	add	_var02, arg01
2249c     02 02 66 F0 | 	shl	_var02, #2
224a0     01 01 02 F1 | 	add	_var01, _var02
224a4     00 15 62 FC | 	wrlong	arg02, _var01
224a8     11 E5 85 F1 | 	sub	objptr, #273
224ac                 | _hg010b_spin2_setspriteptr_ret
224ac     2D 00 64 FD | 	ret
224b0                 | 
224b0                 | ' 
224b0                 | ' pub setspritepos(num,x,y)
224b0                 | _hg010b_spin2_setspritepos
224b0                 | ' if y>601
224b0     01 00 00 FF 
224b4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
224b8                 | '   y:=601
224b8     01 00 00 3F 
224bc     59 16 06 36 |  if_ae	mov	arg03, ##601
224c0                 | ' if x>1024
224c0     02 00 00 FF 
224c4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
224c8                 | '   x:=1024
224c8     0A 14 C6 39 |  if_ae	decod	arg02, #10
224cc                 | ' word[@spr1ptr+12*num+4]:=x
224cc     11 E5 05 F1 | 	add	objptr, #273
224d0     F2 00 02 F6 | 	mov	_var01, objptr
224d4     09 03 02 F6 | 	mov	_var02, arg01
224d8     01 02 66 F0 | 	shl	_var02, #1
224dc     09 03 02 F1 | 	add	_var02, arg01
224e0     02 02 66 F0 | 	shl	_var02, #2
224e4     01 01 02 F1 | 	add	_var01, _var02
224e8     04 00 06 F1 | 	add	_var01, #4
224ec     00 15 52 FC | 	wrword	arg02, _var01
224f0                 | ' word[@spr1ptr+12*num+6]:=y
224f0     F2 00 02 F6 | 	mov	_var01, objptr
224f4     09 03 02 F6 | 	mov	_var02, arg01
224f8     01 02 66 F0 | 	shl	_var02, #1
224fc     09 03 02 F1 | 	add	_var02, arg01
22500     02 02 66 F0 | 	shl	_var02, #2
22504     01 01 02 F1 | 	add	_var01, _var02
22508     06 00 06 F1 | 	add	_var01, #6
2250c     00 17 52 FC | 	wrword	arg03, _var01
22510     11 E5 85 F1 | 	sub	objptr, #273
22514                 | _hg010b_spin2_setspritepos_ret
22514     2D 00 64 FD | 	ret
22518                 | 
22518                 | ' 
22518                 | ' pub setspritesize(num,w,h)
22518                 | _hg010b_spin2_setspritesize
22518                 | ' word[@spr1ptr+12*num+8]:=w
22518     11 E5 05 F1 | 	add	objptr, #273
2251c     F2 00 02 F6 | 	mov	_var01, objptr
22520     09 03 02 F6 | 	mov	_var02, arg01
22524     01 02 66 F0 | 	shl	_var02, #1
22528     09 03 02 F1 | 	add	_var02, arg01
2252c     02 02 66 F0 | 	shl	_var02, #2
22530     01 01 02 F1 | 	add	_var01, _var02
22534     08 00 06 F1 | 	add	_var01, #8
22538     00 15 52 FC | 	wrword	arg02, _var01
2253c                 | ' word[@spr1ptr+12*num+10]:=h
2253c     F2 00 02 F6 | 	mov	_var01, objptr
22540     09 03 02 F6 | 	mov	_var02, arg01
22544     01 02 66 F0 | 	shl	_var02, #1
22548     09 03 02 F1 | 	add	_var02, arg01
2254c     02 02 66 F0 | 	shl	_var02, #2
22550     01 01 02 F1 | 	add	_var01, _var02
22554     0A 00 06 F1 | 	add	_var01, #10
22558     00 17 52 FC | 	wrword	arg03, _var01
2255c     11 E5 85 F1 | 	sub	objptr, #273
22560                 | _hg010b_spin2_setspritesize_ret
22560     2D 00 64 FD | 	ret
22564                 | 
22564                 | ' 
22564                 | ' 
22564                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
22564                 | ' 
22564                 | ' 
22564                 | ' pub putpixel(x,y,c)
22564                 | _hg010b_spin2_putpixel
22564     04 4A 05 F6 | 	mov	COUNT_, #4
22568     A8 00 A0 FD | 	call	#pushregs_
2256c     09 27 02 F6 | 	mov	local01, arg01
22570                 | ' 
22570                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
22570     00 28 06 F6 | 	mov	local02, #0
22574     00 26 56 F2 | 	cmps	local01, #0 wc
22578     01 28 66 36 |  if_ae	neg	local02, #1
2257c     E9 E4 05 F1 | 	add	objptr, #233
22580     F2 1A 02 FB | 	rdlong	arg05, objptr
22584     02 1A 66 F0 | 	shl	arg05, #2
22588     0D 27 52 F2 | 	cmps	local01, arg05 wc
2258c     15 2B A2 F1 | 	subx	local03, local03
22590     15 29 02 F5 | 	and	local02, local03
22594     00 2A 06 F6 | 	mov	local03, #0
22598     00 14 56 F2 | 	cmps	arg02, #0 wc
2259c     01 2A 66 36 |  if_ae	neg	local03, #1
225a0     15 29 02 F5 | 	and	local02, local03
225a4     04 E4 85 F1 | 	sub	objptr, #4
225a8     F2 2A 02 FB | 	rdlong	local03, objptr
225ac     E5 E4 85 F1 | 	sub	objptr, #229
225b0     15 15 52 F2 | 	cmps	arg02, local03 wc
225b4     16 2D A2 F1 | 	subx	local04, local04
225b8     16 29 CA F7 | 	test	local02, local04 wz
225bc     48 00 90 AD |  if_e	jmp	#LR__2670
225c0     DD E4 05 F1 | 	add	objptr, #221
225c4     F2 12 02 FB | 	rdlong	arg01, objptr
225c8     14 E4 05 F1 | 	add	objptr, #20
225cc     F2 2C 02 FB | 	rdlong	local04, objptr
225d0     02 2C 66 F0 | 	shl	local04, #2
225d4     0A 2D 02 FD | 	qmul	local04, arg02
225d8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
225d8     0B 15 02 F6 | 	mov	arg02, arg03
225dc     01 16 06 F6 | 	mov	arg03, #1
225e0     00 18 06 F6 | 	mov	arg04, #0
225e4     01 1A 06 F6 | 	mov	arg05, #1
225e8     0A 00 00 FF 
225ec     DB E5 05 F1 | 	add	objptr, ##5595
225f0     18 2C 62 FD | 	getqx	local04
225f4     13 2D 02 F1 | 	add	local04, local01
225f8     16 13 02 F1 | 	add	arg01, local04
225fc     6C 1D B0 FD | 	call	#_psram_spin2_fill
22600     0B 00 00 FF 
22604     CC E4 85 F1 | 	sub	objptr, ##5836
22608                 | LR__2670
22608     A7 F0 03 F6 | 	mov	ptra, fp
2260c     B2 00 A0 FD | 	call	#popregs_
22610                 | _hg010b_spin2_putpixel_ret
22610     2D 00 64 FD | 	ret
22614                 | 
22614                 | ' 
22614                 | ' pub putpixel2(x,y,c)
22614                 | _hg010b_spin2_putpixel2
22614     02 4A 05 F6 | 	mov	COUNT_, #2
22618     A8 00 A0 FD | 	call	#pushregs_
2261c     DD E4 05 F1 | 	add	objptr, #221
22620     F2 26 02 FB | 	rdlong	local01, objptr
22624     14 E4 05 F1 | 	add	objptr, #20
22628     F2 1A 02 FB | 	rdlong	arg05, objptr
2262c     02 1A 66 F0 | 	shl	arg05, #2
22630     0A 1B 02 FD | 	qmul	arg05, arg02
22634                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
22634     0B 15 02 F6 | 	mov	arg02, arg03
22638     01 16 06 F6 | 	mov	arg03, #1
2263c     00 18 06 F6 | 	mov	arg04, #0
22640     01 1A 06 F6 | 	mov	arg05, #1
22644     0A 00 00 FF 
22648     DB E5 05 F1 | 	add	objptr, ##5595
2264c     18 28 62 FD | 	getqx	local02
22650     09 29 02 F1 | 	add	local02, arg01
22654     14 27 02 F1 | 	add	local01, local02
22658     13 13 02 F6 | 	mov	arg01, local01
2265c     0C 1D B0 FD | 	call	#_psram_spin2_fill
22660     0B 00 00 FF 
22664     CC E4 85 F1 | 	sub	objptr, ##5836
22668     A7 F0 03 F6 | 	mov	ptra, fp
2266c     B2 00 A0 FD | 	call	#popregs_
22670                 | _hg010b_spin2_putpixel2_ret
22670     2D 00 64 FD | 	ret
22674                 | 
22674                 | ' 
22674                 | ' pub getpixel2(x,y): c 
22674                 | _hg010b_spin2_getpixel2
22674     02 4A 05 F6 | 	mov	COUNT_, #2
22678     A8 00 A0 FD | 	call	#pushregs_
2267c     0C F0 07 F1 | 	add	ptra, #12
22680     04 4E 05 F1 | 	add	fp, #4
22684     A7 12 62 FC | 	wrlong	arg01, fp
22688     04 4E 05 F1 | 	add	fp, #4
2268c     A7 14 62 FC | 	wrlong	arg02, fp
22690     08 4E 85 F1 | 	sub	fp, #8
22694     A7 00 68 FC | 	wrlong	#0, fp
22698     A7 12 02 F6 | 	mov	arg01, fp
2269c     DD E4 05 F1 | 	add	objptr, #221
226a0     F2 14 02 FB | 	rdlong	arg02, objptr
226a4     14 E4 05 F1 | 	add	objptr, #20
226a8     F2 16 02 FB | 	rdlong	arg03, objptr
226ac     02 16 66 F0 | 	shl	arg03, #2
226b0     08 4E 05 F1 | 	add	fp, #8
226b4     A7 FA 01 FB | 	rdlong	result1, fp
226b8     FD 16 02 FD | 	qmul	arg03, result1
226bc                 | ' 
226bc                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
226bc     04 4E 85 F1 | 	sub	fp, #4
226c0     A7 26 02 FB | 	rdlong	local01, fp
226c4     04 4E 85 F1 | 	sub	fp, #4
226c8     01 16 06 F6 | 	mov	arg03, #1
226cc     0A 00 00 FF 
226d0     DB E5 05 F1 | 	add	objptr, ##5595
226d4     18 28 62 FD | 	getqx	local02
226d8     13 29 02 F1 | 	add	local02, local01
226dc     14 15 02 F1 | 	add	arg02, local02
226e0     50 1B B0 FD | 	call	#_psram_spin2_read1
226e4     0B 00 00 FF 
226e8     CC E4 85 F1 | 	sub	objptr, ##5836
226ec                 | ' return c
226ec     A7 FA 01 FB | 	rdlong	result1, fp
226f0     A7 F0 03 F6 | 	mov	ptra, fp
226f4     B2 00 A0 FD | 	call	#popregs_
226f8                 | _hg010b_spin2_getpixel2_ret
226f8     2D 00 64 FD | 	ret
226fc                 | 
226fc                 | '   
226fc                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
226fc                 | ' 
226fc                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
226fc                 | _hg010b_spin2_fastline
226fc     02 4A 05 F6 | 	mov	COUNT_, #2
22700     A8 00 A0 FD | 	call	#pushregs_
22704     09 27 02 F6 | 	mov	local01, arg01
22708     0A 29 02 F6 | 	mov	local02, arg02
2270c                 | ' 
2270c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
2270c     00 16 56 F2 | 	cmps	arg03, #0 wc
22710     F4 00 90 CD |  if_b	jmp	#LR__2680
22714     01 00 00 FF 
22718     2A E4 05 F1 | 	add	objptr, ##554
2271c     F2 1A 02 FB | 	rdlong	arg05, objptr
22720     01 00 00 FF 
22724     2A E4 85 F1 | 	sub	objptr, ##554
22728     0D 17 52 F2 | 	cmps	arg03, arg05 wc
2272c     D8 00 90 3D |  if_ae	jmp	#LR__2680
22730     00 26 56 F2 | 	cmps	local01, #0 wc
22734     00 28 56 C2 |  if_b	cmps	local02, #0 wc
22738     CC 00 90 CD |  if_b	jmp	#LR__2680
2273c     01 00 00 FF 
22740     26 E4 05 F1 | 	add	objptr, ##550
22744     F2 1A 02 FB | 	rdlong	arg05, objptr
22748     01 00 00 FF 
2274c     26 E4 85 F1 | 	sub	objptr, ##550
22750     0D 27 5A F2 | 	cmps	local01, arg05 wcz
22754     01 00 00 1F 
22758     26 E4 05 11 |  if_a	add	objptr, ##550
2275c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
22760     01 00 00 1F 
22764     26 E4 85 11 |  if_a	sub	objptr, ##550
22768     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
2276c                 | '   return
2276c     98 00 90 1D |  if_a	jmp	#LR__2680
22770     14 27 5A F2 | 	cmps	local01, local02 wcz
22774     13 1B 02 16 |  if_a	mov	arg05, local01
22778     14 27 02 16 |  if_a	mov	local01, local02
2277c     0D 29 02 16 |  if_a	mov	local02, arg05
22780     00 26 56 F2 | 	cmps	local01, #0 wc
22784     00 26 06 C6 |  if_b	mov	local01, #0
22788     01 00 00 FF 
2278c     26 E4 05 F1 | 	add	objptr, ##550
22790     F2 1A 02 FB | 	rdlong	arg05, objptr
22794     01 00 00 FF 
22798     26 E4 85 F1 | 	sub	objptr, ##550
2279c     0D 29 52 F2 | 	cmps	local02, arg05 wc
227a0     01 00 00 3F 
227a4     26 E4 05 31 |  if_ae	add	objptr, ##550
227a8     F2 28 02 3B |  if_ae	rdlong	local02, objptr
227ac     01 00 00 3F 
227b0     26 E4 85 31 |  if_ae	sub	objptr, ##550
227b4     DD E4 05 F1 | 	add	objptr, #221
227b8     F2 12 02 FB | 	rdlong	arg01, objptr
227bc     14 E4 05 F1 | 	add	objptr, #20
227c0     F2 1A 02 FB | 	rdlong	arg05, objptr
227c4     02 1A 66 F0 | 	shl	arg05, #2
227c8     0B 1B 02 FD | 	qmul	arg05, arg03
227cc                 | ' if x1>x2
227cc                 | '   x1,x2:=x2,x1
227cc                 | ' if x1<0 
227cc                 | '   x1:=0
227cc                 | ' if x2>=xres
227cc                 | '   x2:=xres-1  
227cc     01 28 86 31 |  if_ae	sub	local02, #1
227d0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
227d0     01 16 06 F6 | 	mov	arg03, #1
227d4     14 17 02 F1 | 	add	arg03, local02
227d8     13 17 82 F1 | 	sub	arg03, local01
227dc     0C 15 02 F6 | 	mov	arg02, arg04
227e0     00 18 06 F6 | 	mov	arg04, #0
227e4     01 1A 06 F6 | 	mov	arg05, #1
227e8     0A 00 00 FF 
227ec     DB E5 05 F1 | 	add	objptr, ##5595
227f0     18 28 62 FD | 	getqx	local02
227f4     13 29 02 F1 | 	add	local02, local01
227f8     14 13 02 F1 | 	add	arg01, local02
227fc     6C 1B B0 FD | 	call	#_psram_spin2_fill
22800     0B 00 00 FF 
22804     CC E4 85 F1 | 	sub	objptr, ##5836
22808                 | LR__2680
22808     A7 F0 03 F6 | 	mov	ptra, fp
2280c     B2 00 A0 FD | 	call	#popregs_
22810                 | _hg010b_spin2_fastline_ret
22810     2D 00 64 FD | 	ret
22814                 | 
22814                 | ' 
22814                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
22814                 | _hg010b_spin2_draw
22814     0E 4A 05 F6 | 	mov	COUNT_, #14
22818     A8 00 A0 FD | 	call	#pushregs_
2281c     09 27 02 F6 | 	mov	local01, arg01
22820     0A 29 02 F6 | 	mov	local02, arg02
22824     0B 2B 02 F6 | 	mov	local03, arg03
22828     0C 2D 02 F6 | 	mov	local04, arg04
2282c     0D 2F 02 F6 | 	mov	local05, arg05
22830                 | ' 
22830                 | ' if (y1==y2)
22830     16 29 0A F2 | 	cmp	local02, local04 wz
22834     18 00 90 5D |  if_ne	jmp	#LR__2690
22838                 | '   fastline(x1,x2,y1,c)
22838     13 13 02 F6 | 	mov	arg01, local01
2283c     15 15 02 F6 | 	mov	arg02, local03
22840     14 17 02 F6 | 	mov	arg03, local02
22844     17 19 02 F6 | 	mov	arg04, local05
22848     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
2284c     F8 00 90 FD | 	jmp	#LR__2696
22850                 | LR__2690
22850                 | ' else  
22850                 | '   x:=x1
22850     13 31 02 F6 | 	mov	local06, local01
22854                 | '   y:=y1
22854     14 33 02 F6 | 	mov	local07, local02
22858                 | ' 
22858                 | '   if (x1<x2) 
22858     15 27 52 F2 | 	cmps	local01, local03 wc
2285c                 | '     xi:=1
2285c     01 34 06 C6 |  if_b	mov	local08, #1
22860                 | '     dx:=x2-x1
22860     15 37 02 C6 |  if_b	mov	local09, local03
22864     13 37 82 C1 |  if_b	sub	local09, local01
22868                 | '   else
22868                 | '     xi:=-1
22868     01 34 66 36 |  if_ae	neg	local08, #1
2286c                 | '     dx:=x1-x2
2286c     15 27 82 31 |  if_ae	sub	local01, local03
22870     13 37 02 36 |  if_ae	mov	local09, local01
22874                 | '   
22874                 | '   if (y1<y2) 
22874     16 29 52 F2 | 	cmps	local02, local04 wc
22878                 | '     yi:=1
22878     01 38 06 C6 |  if_b	mov	local10, #1
2287c                 | '     dy:=y2-y1
2287c     16 3B 02 C6 |  if_b	mov	local11, local04
22880     14 3B 82 C1 |  if_b	sub	local11, local02
22884                 | '   else
22884                 | '     yi:=-1
22884     01 38 66 36 |  if_ae	neg	local10, #1
22888                 | '     dy:=y1-y2
22888     16 29 82 31 |  if_ae	sub	local02, local04
2288c     14 3B 02 36 |  if_ae	mov	local11, local02
22890                 | ' 
22890                 | '   putpixel(x,y,c)
22890     17 17 02 F6 | 	mov	arg03, local05
22894     18 13 02 F6 | 	mov	arg01, local06
22898     19 15 02 F6 | 	mov	arg02, local07
2289c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
228a0                 | ' 
228a0                 | '   if (dx>dy)
228a0     1D 37 5A F2 | 	cmps	local09, local11 wcz
228a4     50 00 90 ED |  if_be	jmp	#LR__2692
228a8                 | '     ai:=(dy-dx)*2
228a8     1D 3D 02 F6 | 	mov	local12, local11
228ac     1B 3D 82 F1 | 	sub	local12, local09
228b0     01 3C 66 F0 | 	shl	local12, #1
228b4                 | '     bi:=dy*2
228b4     01 3A 66 F0 | 	shl	local11, #1
228b8     1D 3F 02 F6 | 	mov	local13, local11
228bc                 | '     d:= bi-dx
228bc     1F 41 02 F6 | 	mov	local14, local13
228c0     1B 41 82 F1 | 	sub	local14, local09
228c4                 | '     repeat while (x<>x2) 
228c4                 | LR__2691
228c4     15 31 0A F2 | 	cmp	local06, local03 wz
228c8     7C 00 90 AD |  if_e	jmp	#LR__2695
228cc                 | '       if (d>=0) 
228cc     00 40 56 F2 | 	cmps	local14, #0 wc
228d0                 | '         x+=xi
228d0     1A 31 02 31 |  if_ae	add	local06, local08
228d4                 | '         y+=yi
228d4     1C 33 02 31 |  if_ae	add	local07, local10
228d8                 | '         d+=ai
228d8     1E 41 02 31 |  if_ae	add	local14, local12
228dc                 | '       else
228dc                 | '         d+=bi
228dc     1F 41 02 C1 |  if_b	add	local14, local13
228e0                 | '         x+=xi
228e0     1A 31 02 C1 |  if_b	add	local06, local08
228e4                 | '       putpixel(x,y,c)
228e4     18 13 02 F6 | 	mov	arg01, local06
228e8     19 15 02 F6 | 	mov	arg02, local07
228ec     17 17 02 F6 | 	mov	arg03, local05
228f0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
228f4     CC FF 9F FD | 	jmp	#LR__2691
228f8                 | LR__2692
228f8                 | '   else
228f8                 | '     ai:=(dx-dy)*2
228f8     1B 3D 02 F6 | 	mov	local12, local09
228fc     1D 3D 82 F1 | 	sub	local12, local11
22900     01 3C 66 F0 | 	shl	local12, #1
22904                 | '     bi:=dx*2
22904     01 36 66 F0 | 	shl	local09, #1
22908     1B 3F 02 F6 | 	mov	local13, local09
2290c                 | '     d:=bi-dy
2290c     1F 41 02 F6 | 	mov	local14, local13
22910     1D 41 82 F1 | 	sub	local14, local11
22914                 | '     repeat while (y<>y2)
22914                 | LR__2693
22914     16 33 0A F2 | 	cmp	local07, local04 wz
22918     2C 00 90 AD |  if_e	jmp	#LR__2694
2291c                 | '       if (d>=0)
2291c     00 40 56 F2 | 	cmps	local14, #0 wc
22920                 | '         x+=xi
22920     1A 31 02 31 |  if_ae	add	local06, local08
22924                 | '         y+=yi
22924     1C 33 02 31 |  if_ae	add	local07, local10
22928                 | '         d+=ai
22928     1E 41 02 31 |  if_ae	add	local14, local12
2292c                 | '       else
2292c                 | '         d+=bi
2292c     1F 41 02 C1 |  if_b	add	local14, local13
22930                 | '         y+=yi
22930     1C 33 02 C1 |  if_b	add	local07, local10
22934                 | '       putpixel(x, y,c)
22934     18 13 02 F6 | 	mov	arg01, local06
22938     19 15 02 F6 | 	mov	arg02, local07
2293c     17 17 02 F6 | 	mov	arg03, local05
22940     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
22944     CC FF 9F FD | 	jmp	#LR__2693
22948                 | LR__2694
22948                 | LR__2695
22948                 | LR__2696
22948     A7 F0 03 F6 | 	mov	ptra, fp
2294c     B2 00 A0 FD | 	call	#popregs_
22950                 | _hg010b_spin2_draw_ret
22950     2D 00 64 FD | 	ret
22954                 | 
22954                 | '  
22954                 | ' pub fillpush(val) 
22954                 | _hg010b_spin2_fillpush
22954                 | ' fillstack[fillptr]:=val
22954     0B 00 00 FF 
22958     BA E4 05 F1 | 	add	objptr, ##5818
2295c     F2 00 02 FB | 	rdlong	_var01, objptr
22960     02 00 66 F0 | 	shl	_var01, #2
22964     0A 00 00 FF 
22968     00 E4 85 F1 | 	sub	objptr, ##5120
2296c     F2 00 02 F1 | 	add	_var01, objptr
22970     00 13 62 FC | 	wrlong	arg01, _var01
22974                 | ' fillptr+=1   
22974     0A 00 00 FF 
22978     00 E4 05 F1 | 	add	objptr, ##5120
2297c     F2 00 02 FB | 	rdlong	_var01, objptr
22980     01 00 06 F1 | 	add	_var01, #1
22984     F2 00 62 FC | 	wrlong	_var01, objptr
22988     0B 00 00 FF 
2298c     BA E4 85 F1 | 	sub	objptr, ##5818
22990                 | _hg010b_spin2_fillpush_ret
22990     2D 00 64 FD | 	ret
22994                 | 
22994                 | ' 
22994                 | '     
22994                 | ' pub fillpop() : val
22994                 | _hg010b_spin2_fillpop
22994                 | ' 
22994                 | ' fillptr-=1
22994     0B 00 00 FF 
22998     BA E4 05 F1 | 	add	objptr, ##5818
2299c     F2 FA 01 FB | 	rdlong	result1, objptr
229a0     01 FA 85 F1 | 	sub	result1, #1
229a4     F2 FA 61 FC | 	wrlong	result1, objptr
229a8                 | ' if fillptr<0
229a8     0B 00 00 FF 
229ac     BA E4 85 F1 | 	sub	objptr, ##5818
229b0     00 FA 55 F2 | 	cmps	result1, #0 wc
229b4                 | '   fillptr:=0
229b4     0B 00 00 CF 
229b8     BA E4 05 C1 |  if_b	add	objptr, ##5818
229bc     F2 00 68 CC |  if_b	wrlong	#0, objptr
229c0     0B 00 00 CF 
229c4     BA E4 85 C1 |  if_b	sub	objptr, ##5818
229c8                 | '   val:=-12345
229c8     E7 FF 7F CF 
229cc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
229d0     28 00 90 CD |  if_b	jmp	#LR__2700
229d4                 | ' else 
229d4                 | '   val:=fillstack[fillptr]
229d4     0B 00 00 FF 
229d8     BA E4 05 F1 | 	add	objptr, ##5818
229dc     F2 00 02 FB | 	rdlong	_var01, objptr
229e0     02 00 66 F0 | 	shl	_var01, #2
229e4     0A 00 00 FF 
229e8     00 E4 85 F1 | 	sub	objptr, ##5120
229ec     F2 00 02 F1 | 	add	_var01, objptr
229f0     00 01 02 FB | 	rdlong	_var01, _var01
229f4     01 00 00 FF 
229f8     BA E4 85 F1 | 	sub	objptr, ##698
229fc                 | LR__2700
229fc                 | ' return val
229fc     00 FB 01 F6 | 	mov	result1, _var01
22a00                 | _hg010b_spin2_fillpop_ret
22a00     2D 00 64 FD | 	ret
22a04                 | 
22a04                 | ' 
22a04                 | '       
22a04                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
22a04                 | _hg010b_spin2_fill
22a04     0B 4A 05 F6 | 	mov	COUNT_, #11
22a08     A8 00 A0 FD | 	call	#pushregs_
22a0c                 | ' 
22a0c                 | ' newcolor:=newcolor & 255
22a0c     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
22a10                 | ' oldcolor:=oldcolor & 255
22a10     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
22a14                 | ' 
22a14                 | ' if (oldcolor == newcolor) 
22a14     13 29 0A F2 | 	cmp	local02, local01 wz
22a18                 | '   return
22a18     70 02 90 AD |  if_e	jmp	#LR__2719
22a1c                 | ' 
22a1c                 | ' fillptr:=0
22a1c     0B 00 00 FF 
22a20     BA E4 05 F1 | 	add	objptr, ##5818
22a24     F2 00 68 FC | 	wrlong	#0, objptr
22a28                 | ' fillmax:=0
22a28     04 E4 05 F1 | 	add	objptr, #4
22a2c     F2 00 68 FC | 	wrlong	#0, objptr
22a30     0B 00 00 FF 
22a34     BE E4 85 F1 | 	sub	objptr, ##5822
22a38                 | ' fillpush(x)
22a38     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
22a3c                 | ' fillpush(y)
22a3c     0A 13 02 F6 | 	mov	arg01, arg02
22a40     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
22a44                 | ' y:=fillpop()
22a44     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
22a48     FD 2A 02 F6 | 	mov	local03, result1
22a4c                 | ' x:=fillpop()
22a4c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
22a50     FD 2C 02 F6 | 	mov	local04, result1
22a54                 | ' 'pinhigh(38)
22a54                 | ' repeat while (x>-1)       
22a54                 | LR__2710
22a54     00 2C 56 F2 | 	cmps	local04, #0 wc
22a58     30 02 90 CD |  if_b	jmp	#LR__2718
22a5c                 | '  ' pintoggle(39)
22a5c                 | '   x1 := x
22a5c     16 2F 02 F6 | 	mov	local05, local04
22a60                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
22a60                 | LR__2711
22a60     00 30 06 F6 | 	mov	local06, #0
22a64     00 32 06 F6 | 	mov	local07, #0
22a68     00 2E 56 F2 | 	cmps	local05, #0 wc
22a6c     01 32 66 36 |  if_ae	neg	local07, #1
22a70     00 32 0E F2 | 	cmp	local07, #0 wz
22a74     00 30 26 56 |  if_ne	not	local06, #0
22a78     00 34 06 F6 | 	mov	local08, #0
22a7c     00 36 06 F6 | 	mov	local09, #0
22a80     15 15 02 F6 | 	mov	arg02, local03
22a84     17 13 02 F6 | 	mov	arg01, local05
22a88     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
22a8c     14 FB 09 F2 | 	cmp	result1, local02 wz
22a90     00 36 26 A6 |  if_e	not	local09, #0
22a94     00 36 0E F2 | 	cmp	local09, #0 wz
22a98     00 34 26 56 |  if_ne	not	local08, #0
22a9c     1A 31 CA F7 | 	test	local06, local08 wz
22aa0                 | '     x1--
22aa0     01 2E 86 51 |  if_ne	sub	local05, #1
22aa4     B8 FF 9F 5D |  if_ne	jmp	#LR__2711
22aa8                 | '   x1++
22aa8     01 2E 06 F1 | 	add	local05, #1
22aac                 | '   spanabove := 0
22aac     00 38 06 F6 | 	mov	local10, #0
22ab0                 | '   spanbelow := 0
22ab0     00 3A 06 F6 | 	mov	local11, #0
22ab4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
22ab4                 | LR__2712
22ab4     00 30 06 F6 | 	mov	local06, #0
22ab8     02 00 00 FF 
22abc     00 2E 56 F2 | 	cmps	local05, ##1024 wc
22ac0     00 30 26 C6 |  if_b	not	local06, #0
22ac4     00 34 06 F6 | 	mov	local08, #0
22ac8     00 36 06 F6 | 	mov	local09, #0
22acc     15 15 02 F6 | 	mov	arg02, local03
22ad0     17 13 02 F6 | 	mov	arg01, local05
22ad4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
22ad8     14 FB 09 F2 | 	cmp	result1, local02 wz
22adc     00 36 26 A6 |  if_e	not	local09, #0
22ae0     00 36 0E F2 | 	cmp	local09, #0 wz
22ae4     00 34 26 56 |  if_ne	not	local08, #0
22ae8     1A 31 CA F7 | 	test	local06, local08 wz
22aec     88 01 90 AD |  if_e	jmp	#LR__2717
22af0                 | '     putpixel2 (x1,y, newcolor & 255)
22af0     13 17 E2 F8 | 	getbyte	arg03, local01, #0
22af4     17 13 02 F6 | 	mov	arg01, local05
22af8     15 15 02 F6 | 	mov	arg02, local03
22afc     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
22b00                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
22b00     00 30 06 F6 | 	mov	local06, #0
22b04     00 32 06 F6 | 	mov	local07, #0
22b08     00 38 0E F2 | 	cmp	local10, #0 wz
22b0c     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
22b10     01 32 66 26 |  if_nc_and_z	neg	local07, #1
22b14     00 32 0E F2 | 	cmp	local07, #0 wz
22b18     00 30 26 56 |  if_ne	not	local06, #0
22b1c     00 34 06 F6 | 	mov	local08, #0
22b20     00 36 06 F6 | 	mov	local09, #0
22b24     15 15 02 F6 | 	mov	arg02, local03
22b28     01 14 86 F1 | 	sub	arg02, #1
22b2c     17 13 02 F6 | 	mov	arg01, local05
22b30     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
22b34     14 FB 09 F2 | 	cmp	result1, local02 wz
22b38     00 36 26 A6 |  if_e	not	local09, #0
22b3c     00 36 0E F2 | 	cmp	local09, #0 wz
22b40     00 34 26 56 |  if_ne	not	local08, #0
22b44     1A 31 CA F7 | 	test	local06, local08 wz
22b48     1C 00 90 AD |  if_e	jmp	#LR__2713
22b4c                 | '       fillpush(x1)
22b4c     17 13 02 F6 | 	mov	arg01, local05
22b50     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
22b54                 | '       fillpush(y-1)
22b54     15 13 02 F6 | 	mov	arg01, local03
22b58     01 12 86 F1 | 	sub	arg01, #1
22b5c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
22b60                 | '       spanabove := 1 
22b60     01 38 06 F6 | 	mov	local10, #1
22b64     4C 00 90 FD | 	jmp	#LR__2714
22b68                 | LR__2713
22b68                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
22b68     00 30 06 F6 | 	mov	local06, #0
22b6c     00 32 06 F6 | 	mov	local07, #0
22b70     00 38 0E F2 | 	cmp	local10, #0 wz
22b74     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
22b78     01 32 66 16 |  if_a	neg	local07, #1
22b7c     00 32 0E F2 | 	cmp	local07, #0 wz
22b80     00 30 26 56 |  if_ne	not	local06, #0
22b84     00 34 06 F6 | 	mov	local08, #0
22b88     00 36 06 F6 | 	mov	local09, #0
22b8c     15 15 02 F6 | 	mov	arg02, local03
22b90     01 14 86 F1 | 	sub	arg02, #1
22b94     17 13 02 F6 | 	mov	arg01, local05
22b98     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22b9c     14 FB 09 F2 | 	cmp	result1, local02 wz
22ba0     00 36 26 56 |  if_ne	not	local09, #0
22ba4     00 36 0E F2 | 	cmp	local09, #0 wz
22ba8     00 34 26 56 |  if_ne	not	local08, #0
22bac     1A 31 CA F7 | 	test	local06, local08 wz
22bb0                 | '       spanabove := 0 
22bb0     00 38 06 56 |  if_ne	mov	local10, #0
22bb4                 | LR__2714
22bb4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
22bb4     00 30 06 F6 | 	mov	local06, #0
22bb8     00 32 06 F6 | 	mov	local07, #0
22bbc     00 3A 0E F2 | 	cmp	local11, #0 wz
22bc0     01 00 00 AF 
22bc4     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
22bc8     01 32 66 86 |  if_c_and_z	neg	local07, #1
22bcc     00 32 0E F2 | 	cmp	local07, #0 wz
22bd0     00 30 26 56 |  if_ne	not	local06, #0
22bd4     00 34 06 F6 | 	mov	local08, #0
22bd8     00 36 06 F6 | 	mov	local09, #0
22bdc     15 15 02 F6 | 	mov	arg02, local03
22be0     01 14 06 F1 | 	add	arg02, #1
22be4     17 13 02 F6 | 	mov	arg01, local05
22be8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22bec     14 FB 09 F2 | 	cmp	result1, local02 wz
22bf0     00 36 26 A6 |  if_e	not	local09, #0
22bf4     00 36 0E F2 | 	cmp	local09, #0 wz
22bf8     00 34 26 56 |  if_ne	not	local08, #0
22bfc     1A 31 CA F7 | 	test	local06, local08 wz
22c00     1C 00 90 AD |  if_e	jmp	#LR__2715
22c04                 | '       fillpush(x1)
22c04     17 13 02 F6 | 	mov	arg01, local05
22c08     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
22c0c                 | '       fillpush(y + 1)
22c0c     15 13 02 F6 | 	mov	arg01, local03
22c10     01 12 06 F1 | 	add	arg01, #1
22c14     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
22c18                 | '       spanBelow := 1
22c18     01 3A 06 F6 | 	mov	local11, #1
22c1c     50 00 90 FD | 	jmp	#LR__2716
22c20                 | LR__2715
22c20                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
22c20     00 30 06 F6 | 	mov	local06, #0
22c24     00 32 06 F6 | 	mov	local07, #0
22c28     00 3A 0E F2 | 	cmp	local11, #0 wz
22c2c     01 00 00 5F 
22c30     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
22c34     01 32 66 46 |  if_c_and_nz	neg	local07, #1
22c38     00 32 0E F2 | 	cmp	local07, #0 wz
22c3c     00 30 26 56 |  if_ne	not	local06, #0
22c40     00 34 06 F6 | 	mov	local08, #0
22c44     00 36 06 F6 | 	mov	local09, #0
22c48     15 15 02 F6 | 	mov	arg02, local03
22c4c     01 14 06 F1 | 	add	arg02, #1
22c50     17 13 02 F6 | 	mov	arg01, local05
22c54     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
22c58     14 FB 09 F2 | 	cmp	result1, local02 wz
22c5c     00 36 26 56 |  if_ne	not	local09, #0
22c60     00 36 0E F2 | 	cmp	local09, #0 wz
22c64     00 34 26 56 |  if_ne	not	local08, #0
22c68     1A 31 CA F7 | 	test	local06, local08 wz
22c6c                 | '       spanbelow := 0
22c6c     00 3A 06 56 |  if_ne	mov	local11, #0
22c70                 | LR__2716
22c70                 | '     x1++
22c70     01 2E 06 F1 | 	add	local05, #1
22c74     3C FE 9F FD | 	jmp	#LR__2712
22c78                 | LR__2717
22c78                 | '   y:=fillpop()
22c78     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
22c7c     FD 2A 02 F6 | 	mov	local03, result1
22c80                 | '   x:=fillpop()
22c80     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
22c84     FD 2C 02 F6 | 	mov	local04, result1
22c88     C8 FD 9F FD | 	jmp	#LR__2710
22c8c                 | LR__2718
22c8c                 | LR__2719
22c8c     A7 F0 03 F6 | 	mov	ptra, fp
22c90     B2 00 A0 FD | 	call	#popregs_
22c94                 | _hg010b_spin2_fill_ret
22c94     2D 00 64 FD | 	ret
22c98                 | 
22c98                 | ' 'pinlow(38)    
22c98                 | ' 
22c98                 | ' '-- A filled circle -----------------------------------------------------
22c98                 | ' 
22c98                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
22c98                 | _hg010b_spin2_fcircle
22c98     08 4A 05 F6 | 	mov	COUNT_, #8
22c9c     A8 00 A0 FD | 	call	#pushregs_
22ca0     0B 27 02 F6 | 	mov	local01, arg03
22ca4     FF FF 7F FF 
22ca8     FE 27 06 FD | 	qmul	local01, ##-2
22cac     09 29 02 F6 | 	mov	local02, arg01
22cb0     0A 2B 02 F6 | 	mov	local03, arg02
22cb4     0C 2D 02 F6 | 	mov	local04, arg04
22cb8                 | ' 
22cb8                 | ' d:=5-4*r
22cb8     13 19 02 F6 | 	mov	arg04, local01
22cbc     02 18 66 F0 | 	shl	arg04, #2
22cc0     05 2E 06 F6 | 	mov	local05, #5
22cc4     0C 2F 82 F1 | 	sub	local05, arg04
22cc8                 | ' x:=0
22cc8     00 30 06 F6 | 	mov	local06, #0
22ccc                 | ' y:=r
22ccc                 | ' da:=(-2*r+5)*4
22ccc                 | ' db:=3*4
22ccc     0C 32 06 F6 | 	mov	local07, #12
22cd0                 | ' repeat while (x<=y) 
22cd0     18 34 62 FD | 	getqx	local08
22cd4     05 34 06 F1 | 	add	local08, #5
22cd8     02 34 66 F0 | 	shl	local08, #2
22cdc                 | LR__2720
22cdc     13 31 5A F2 | 	cmps	local06, local01 wcz
22ce0     B4 00 90 1D |  if_a	jmp	#LR__2722
22ce4                 | '   fastline(x0-x,x0+x,y0-y,c)
22ce4     14 13 02 F6 | 	mov	arg01, local02
22ce8     18 13 82 F1 | 	sub	arg01, local06
22cec     14 15 02 F6 | 	mov	arg02, local02
22cf0     18 15 02 F1 | 	add	arg02, local06
22cf4     15 17 02 F6 | 	mov	arg03, local03
22cf8     13 17 82 F1 | 	sub	arg03, local01
22cfc     16 19 02 F6 | 	mov	arg04, local04
22d00     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22d04                 | '   fastline(x0-x,x0+x,y0+y,c)
22d04     14 13 02 F6 | 	mov	arg01, local02
22d08     18 13 82 F1 | 	sub	arg01, local06
22d0c     14 15 02 F6 | 	mov	arg02, local02
22d10     18 15 02 F1 | 	add	arg02, local06
22d14     15 17 02 F6 | 	mov	arg03, local03
22d18     13 17 02 F1 | 	add	arg03, local01
22d1c     16 19 02 F6 | 	mov	arg04, local04
22d20     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22d24                 | '   fastline(x0-y,x0+y,y0-x,c)
22d24     14 13 02 F6 | 	mov	arg01, local02
22d28     13 13 82 F1 | 	sub	arg01, local01
22d2c     14 15 02 F6 | 	mov	arg02, local02
22d30     13 15 02 F1 | 	add	arg02, local01
22d34     15 17 02 F6 | 	mov	arg03, local03
22d38     18 17 82 F1 | 	sub	arg03, local06
22d3c     16 19 02 F6 | 	mov	arg04, local04
22d40     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22d44                 | '   fastline(x0-y,x0+y,y0+x,c)
22d44     14 13 02 F6 | 	mov	arg01, local02
22d48     13 13 82 F1 | 	sub	arg01, local01
22d4c     14 15 02 F6 | 	mov	arg02, local02
22d50     13 15 02 F1 | 	add	arg02, local01
22d54     15 17 02 F6 | 	mov	arg03, local03
22d58     18 17 02 F1 | 	add	arg03, local06
22d5c     16 19 02 F6 | 	mov	arg04, local04
22d60     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
22d64                 | '   if d>0 
22d64     01 2E 56 F2 | 	cmps	local05, #1 wc
22d68     18 00 90 CD |  if_b	jmp	#LR__2721
22d6c                 | '     d+=da
22d6c     1A 2F 02 F1 | 	add	local05, local08
22d70                 | '     y-=1
22d70     01 26 86 F1 | 	sub	local01, #1
22d74                 | '     x+=1
22d74     01 30 06 F1 | 	add	local06, #1
22d78                 | '     da+=4*4
22d78     10 34 06 F1 | 	add	local08, #16
22d7c                 | '     db+=2*4
22d7c     08 32 06 F1 | 	add	local07, #8
22d80     58 FF 9F FD | 	jmp	#LR__2720
22d84                 | LR__2721
22d84                 | '   else
22d84                 | '     d+=db
22d84     19 2F 02 F1 | 	add	local05, local07
22d88                 | '     x+=1
22d88     01 30 06 F1 | 	add	local06, #1
22d8c                 | '     da+=2*4
22d8c     08 34 06 F1 | 	add	local08, #8
22d90                 | '     db+=2*4
22d90     08 32 06 F1 | 	add	local07, #8
22d94     44 FF 9F FD | 	jmp	#LR__2720
22d98                 | LR__2722
22d98     A7 F0 03 F6 | 	mov	ptra, fp
22d9c     B2 00 A0 FD | 	call	#popregs_
22da0                 | _hg010b_spin2_fcircle_ret
22da0     2D 00 64 FD | 	ret
22da4                 | 
22da4                 | '  
22da4                 | ' '-- A circle ------------------------------------------------------------ 
22da4                 | '  
22da4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
22da4                 | _hg010b_spin2_circle
22da4     08 4A 05 F6 | 	mov	COUNT_, #8
22da8     A8 00 A0 FD | 	call	#pushregs_
22dac     0B 27 02 F6 | 	mov	local01, arg03
22db0     FF FF 7F FF 
22db4     FE 27 06 FD | 	qmul	local01, ##-2
22db8     09 29 02 F6 | 	mov	local02, arg01
22dbc     0A 2B 02 F6 | 	mov	local03, arg02
22dc0     0C 2D 02 F6 | 	mov	local04, arg04
22dc4                 | ' 
22dc4                 | '  
22dc4                 | ' d:=5-4*r
22dc4     13 19 02 F6 | 	mov	arg04, local01
22dc8     02 18 66 F0 | 	shl	arg04, #2
22dcc     05 2E 06 F6 | 	mov	local05, #5
22dd0     0C 2F 82 F1 | 	sub	local05, arg04
22dd4                 | ' x:=0
22dd4     00 30 06 F6 | 	mov	local06, #0
22dd8                 | ' y:=r
22dd8                 | ' da:=(-2*r+5)*4
22dd8                 | ' db:=3*4
22dd8     0C 32 06 F6 | 	mov	local07, #12
22ddc                 | ' repeat while (x<=y) 
22ddc     18 34 62 FD | 	getqx	local08
22de0     05 34 06 F1 | 	add	local08, #5
22de4     02 34 66 F0 | 	shl	local08, #2
22de8                 | LR__2730
22de8     13 31 5A F2 | 	cmps	local06, local01 wcz
22dec     F4 00 90 1D |  if_a	jmp	#LR__2732
22df0                 | '   putpixel(x0-x,y0-y,c)
22df0     14 13 02 F6 | 	mov	arg01, local02
22df4     18 13 82 F1 | 	sub	arg01, local06
22df8     15 15 02 F6 | 	mov	arg02, local03
22dfc     13 15 82 F1 | 	sub	arg02, local01
22e00     16 17 02 F6 | 	mov	arg03, local04
22e04     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22e08                 | '   putpixel(x0-x,y0+y,c)
22e08     14 13 02 F6 | 	mov	arg01, local02
22e0c     18 13 82 F1 | 	sub	arg01, local06
22e10     15 15 02 F6 | 	mov	arg02, local03
22e14     13 15 02 F1 | 	add	arg02, local01
22e18     16 17 02 F6 | 	mov	arg03, local04
22e1c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22e20                 | '   putpixel(x0+x,y0-y,c)
22e20     14 13 02 F6 | 	mov	arg01, local02
22e24     18 13 02 F1 | 	add	arg01, local06
22e28     15 15 02 F6 | 	mov	arg02, local03
22e2c     13 15 82 F1 | 	sub	arg02, local01
22e30     16 17 02 F6 | 	mov	arg03, local04
22e34     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22e38                 | '   putpixel(x0+x,y0+y,c)
22e38     14 13 02 F6 | 	mov	arg01, local02
22e3c     18 13 02 F1 | 	add	arg01, local06
22e40     15 15 02 F6 | 	mov	arg02, local03
22e44     13 15 02 F1 | 	add	arg02, local01
22e48     16 17 02 F6 | 	mov	arg03, local04
22e4c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22e50                 | '   putpixel(x0-y,y0-x,c)
22e50     14 13 02 F6 | 	mov	arg01, local02
22e54     13 13 82 F1 | 	sub	arg01, local01
22e58     15 15 02 F6 | 	mov	arg02, local03
22e5c     18 15 82 F1 | 	sub	arg02, local06
22e60     16 17 02 F6 | 	mov	arg03, local04
22e64     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22e68                 | '   putpixel(x0-y,y0+x,c)
22e68     14 13 02 F6 | 	mov	arg01, local02
22e6c     13 13 82 F1 | 	sub	arg01, local01
22e70     15 15 02 F6 | 	mov	arg02, local03
22e74     18 15 02 F1 | 	add	arg02, local06
22e78     16 17 02 F6 | 	mov	arg03, local04
22e7c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22e80                 | '   putpixel(x0+y,y0-x,c)
22e80     14 13 02 F6 | 	mov	arg01, local02
22e84     13 13 02 F1 | 	add	arg01, local01
22e88     15 15 02 F6 | 	mov	arg02, local03
22e8c     18 15 82 F1 | 	sub	arg02, local06
22e90     16 17 02 F6 | 	mov	arg03, local04
22e94     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22e98                 | '   putpixel(x0+y,y0+x,c)
22e98     14 13 02 F6 | 	mov	arg01, local02
22e9c     13 13 02 F1 | 	add	arg01, local01
22ea0     15 15 02 F6 | 	mov	arg02, local03
22ea4     18 15 02 F1 | 	add	arg02, local06
22ea8     16 17 02 F6 | 	mov	arg03, local04
22eac     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22eb0                 | '   if d>0 
22eb0     01 2E 56 F2 | 	cmps	local05, #1 wc
22eb4     18 00 90 CD |  if_b	jmp	#LR__2731
22eb8                 | '     d+=da
22eb8     1A 2F 02 F1 | 	add	local05, local08
22ebc                 | '     y-=1
22ebc     01 26 86 F1 | 	sub	local01, #1
22ec0                 | '     x+=1
22ec0     01 30 06 F1 | 	add	local06, #1
22ec4                 | '     da+=4*4
22ec4     10 34 06 F1 | 	add	local08, #16
22ec8                 | '     db+=2*4
22ec8     08 32 06 F1 | 	add	local07, #8
22ecc     18 FF 9F FD | 	jmp	#LR__2730
22ed0                 | LR__2731
22ed0                 | '   else
22ed0                 | '     d+=db
22ed0     19 2F 02 F1 | 	add	local05, local07
22ed4                 | '     x+=1
22ed4     01 30 06 F1 | 	add	local06, #1
22ed8                 | '     da+=2*4
22ed8     08 34 06 F1 | 	add	local08, #8
22edc                 | '     db+=2*4
22edc     08 32 06 F1 | 	add	local07, #8
22ee0     04 FF 9F FD | 	jmp	#LR__2730
22ee4                 | LR__2732
22ee4     A7 F0 03 F6 | 	mov	ptra, fp
22ee8     B2 00 A0 FD | 	call	#popregs_
22eec                 | _hg010b_spin2_circle_ret
22eec     2D 00 64 FD | 	ret
22ef0                 | 
22ef0                 | '     
22ef0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
22ef0                 | ' 
22ef0                 | ' pub frame(x1,y1,x2,y2,c)
22ef0                 | _hg010b_spin2_frame
22ef0     05 4A 05 F6 | 	mov	COUNT_, #5
22ef4     A8 00 A0 FD | 	call	#pushregs_
22ef8     09 27 02 F6 | 	mov	local01, arg01
22efc     0A 29 02 F6 | 	mov	local02, arg02
22f00     0B 2B 02 F6 | 	mov	local03, arg03
22f04     0C 2D 02 F6 | 	mov	local04, arg04
22f08     0D 2F 02 F6 | 	mov	local05, arg05
22f0c                 | ' 
22f0c                 | ' fastline(x1,x2,y1,c)
22f0c     13 13 02 F6 | 	mov	arg01, local01
22f10     15 15 02 F6 | 	mov	arg02, local03
22f14     14 17 02 F6 | 	mov	arg03, local02
22f18     17 19 02 F6 | 	mov	arg04, local05
22f1c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
22f20                 | ' fastline(x1,x2,y2,c)
22f20     13 13 02 F6 | 	mov	arg01, local01
22f24     15 15 02 F6 | 	mov	arg02, local03
22f28     16 17 02 F6 | 	mov	arg03, local04
22f2c     17 19 02 F6 | 	mov	arg04, local05
22f30     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
22f34                 | ' line(x1,y1,x1,y2,c)
22f34     13 13 02 F6 | 	mov	arg01, local01
22f38     14 15 02 F6 | 	mov	arg02, local02
22f3c     13 17 02 F6 | 	mov	arg03, local01
22f40     16 19 02 F6 | 	mov	arg04, local04
22f44     17 1B 02 F6 | 	mov	arg05, local05
22f48                 | ' draw(x1,y1,x2,y2,c)
22f48     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
22f4c                 | ' line(x2,y1,x2,y2,c)
22f4c     15 13 02 F6 | 	mov	arg01, local03
22f50     14 15 02 F6 | 	mov	arg02, local02
22f54     15 17 02 F6 | 	mov	arg03, local03
22f58     16 19 02 F6 | 	mov	arg04, local04
22f5c     17 1B 02 F6 | 	mov	arg05, local05
22f60                 | ' draw(x1,y1,x2,y2,c)
22f60     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22f64     A7 F0 03 F6 | 	mov	ptra, fp
22f68     B2 00 A0 FD | 	call	#popregs_
22f6c                 | _hg010b_spin2_frame_ret
22f6c     2D 00 64 FD | 	ret
22f70                 | 
22f70                 | ' 
22f70                 | ' '-- A box (a filled rectangle) ----------------------------------------
22f70                 | ' 
22f70                 | ' pub box(x1,y1,x2,y2,c) |yy
22f70                 | _hg010b_spin2_box
22f70     06 4A 05 F6 | 	mov	COUNT_, #6
22f74     A8 00 A0 FD | 	call	#pushregs_
22f78     09 27 02 F6 | 	mov	local01, arg01
22f7c     0A 29 02 F6 | 	mov	local02, arg02
22f80     0B 2B 02 F6 | 	mov	local03, arg03
22f84     0C 2D 02 F6 | 	mov	local04, arg04
22f88     0D 2F 02 F6 | 	mov	local05, arg05
22f8c                 | ' 
22f8c                 | ' repeat yy from y1 to y2
22f8c     14 2D 52 F2 | 	cmps	local04, local02 wc
22f90     01 30 86 F6 | 	negc	local06, #1
22f94     18 2D 02 F1 | 	add	local04, local06
22f98                 | LR__2740
22f98                 | '   fastline(x1,x2,yy,c)
22f98     13 13 02 F6 | 	mov	arg01, local01
22f9c     15 15 02 F6 | 	mov	arg02, local03
22fa0     17 19 02 F6 | 	mov	arg04, local05
22fa4     14 17 02 F6 | 	mov	arg03, local02
22fa8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
22fac     18 29 02 F1 | 	add	local02, local06
22fb0     16 29 0A F2 | 	cmp	local02, local04 wz
22fb4     E0 FF 9F 5D |  if_ne	jmp	#LR__2740
22fb8     A7 F0 03 F6 | 	mov	ptra, fp
22fbc     B2 00 A0 FD | 	call	#popregs_
22fc0                 | _hg010b_spin2_box_ret
22fc0     2D 00 64 FD | 	ret
22fc4                 | 
22fc4                 | '       
22fc4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
22fc4                 | _hg010b_spin2_putcharxycgf
22fc4                 | ' 
22fc4                 | '  
22fc4                 | ' repeat yy from 0 to 15
22fc4     00 00 06 F6 | 	mov	_var01, #0
22fc8     97 8C 48 FB | 	callpa	#(@LR__2752-@LR__2750)>>2,fcache_load_ptr_
22fcc                 | LR__2750
22fcc                 | ' 
22fcc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
22fcc     95 E4 05 F1 | 	add	objptr, #149
22fd0     F2 02 02 FB | 	rdlong	_var02, objptr
22fd4     0A 02 66 F0 | 	shl	_var02, #10
22fd8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
22fdc     01 05 02 F1 | 	add	_var03, _var02
22fe0     0B 03 02 F6 | 	mov	_var02, arg03
22fe4     04 02 66 F0 | 	shl	_var02, #4
22fe8     01 05 02 F1 | 	add	_var03, _var02
22fec     00 05 02 F1 | 	add	_var03, _var01
22ff0     02 05 C2 FA | 	rdbyte	_var03, _var03
22ff4                 | '   asm
22ff4     00 04 0E F4 | 	testb	_var03, #0 wz
22ff8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
22ffc     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
23000     01 04 0E F4 | 	testb	_var03, #1 wz
23004     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
23008     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
2300c     02 04 0E F4 | 	testb	_var03, #2 wz
23010     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
23014     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
23018     03 04 0E F4 | 	testb	_var03, #3 wz
2301c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
23020     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
23024     04 04 0E F4 | 	testb	_var03, #4 wz
23028     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
2302c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
23030     05 04 0E F4 | 	testb	_var03, #5 wz
23034     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
23038     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
2303c     06 04 0E F4 | 	testb	_var03, #6 wz
23040     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
23044     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
23048     07 04 0E F4 | 	testb	_var03, #7 wz
2304c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
23050     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
23054                 | '   
23054                 | '   ccc[0]:=c1
23054     99 E5 05 F1 | 	add	objptr, #409
23058     F2 06 62 FC | 	wrlong	_var04, objptr
2305c                 | '   ccc[1]:=c2 
2305c     04 E4 05 F1 | 	add	objptr, #4
23060     F2 08 62 FC | 	wrlong	_var05, objptr
23064                 | '   long[mailbox0][2]:=8
23064     49 E4 85 F1 | 	sub	objptr, #73
23068     F2 04 02 FB | 	rdlong	_var03, objptr
2306c     08 04 06 F1 | 	add	_var03, #8
23070     02 11 68 FC | 	wrlong	#8, _var03
23074                 | '   long[mailbox0][1]:=@ccc
23074     45 E4 05 F1 | 	add	objptr, #69
23078     F2 04 02 F6 | 	mov	_var03, objptr
2307c     45 E4 85 F1 | 	sub	objptr, #69
23080     F2 02 02 FB | 	rdlong	_var02, objptr
23084     04 02 06 F1 | 	add	_var02, #4
23088     01 05 62 FC | 	wrlong	_var03, _var02
2308c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
2308c     0C E5 85 F1 | 	sub	objptr, #268
23090     F2 04 02 FB | 	rdlong	_var03, objptr
23094     0A 03 02 F6 | 	mov	_var02, arg02
23098     00 03 02 F1 | 	add	_var02, _var01
2309c     0A 02 66 F0 | 	shl	_var02, #10
230a0     09 0B 02 F6 | 	mov	_var06, arg01
230a4     02 0A 66 F0 | 	shl	_var06, #2
230a8     05 03 02 F1 | 	add	_var02, _var06
230ac     01 05 02 F1 | 	add	_var03, _var02
230b0     00 00 78 FF 
230b4     00 04 06 F1 | 	add	_var03, ##-268435456
230b8     0C E5 05 F1 | 	add	objptr, #268
230bc     F2 0A 02 FB | 	rdlong	_var06, objptr
230c0     05 05 62 FC | 	wrlong	_var03, _var06
230c4                 | '   repeat
230c4                 | LR__2751
230c4     F2 04 02 FB | 	rdlong	_var03, objptr
230c8     02 03 02 FB | 	rdlong	_var02, _var03
230cc     00 02 56 F2 | 	cmps	_var02, #0 wc
230d0     F0 FF 9F CD |  if_b	jmp	#LR__2751
230d4     E9 E5 85 F1 | 	sub	objptr, #489
230d8     01 00 06 F1 | 	add	_var01, #1
230dc     10 00 56 F2 | 	cmps	_var01, #16 wc
230e0     E8 FE 9F CD |  if_b	jmp	#LR__2750
230e4                 | LR__2752
230e4                 | _hg010b_spin2_putcharxycgf_ret
230e4     2D 00 64 FD | 	ret
230e8                 | 
230e8                 | ' 
230e8                 | ' 
230e8                 | ' '**********************************************************************r***
230e8                 | ' '                                                                        *
230e8                 | ' ' Font related functions                                                 *
230e8                 | ' '                                                                        *
230e8                 | ' '*************************************************************************
230e8                 | ' 
230e8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
230e8                 | ' 
230e8                 | ' pub setfontfamily(afontnum)
230e8                 | _hg010b_spin2_setfontfamily
230e8                 | ' 
230e8                 | ' font_family:=afontnum
230e8     95 E4 05 F1 | 	add	objptr, #149
230ec     F2 12 62 FC | 	wrlong	arg01, objptr
230f0     95 E4 85 F1 | 	sub	objptr, #149
230f4                 | ' 'if afontnum==8
230f4                 | ' '  font_ptr:=@amiga_font
230f4                 | ' 
230f4                 | ' if afontnum==4
230f4     04 12 0E F2 | 	cmp	arg01, #4 wz
230f8                 | '   font_ptr:=@st_font
230f8     08 00 00 AF 
230fc     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
23100     08 E4 05 A1 |  if_e	add	objptr, #8
23104     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23108     08 E4 85 A1 |  if_e	sub	objptr, #8
2310c     08 00 00 AF 
23110     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
23114                 | ' if afontnum==0
23114     00 12 0E F2 | 	cmp	arg01, #0 wz
23118                 | '   font_ptr:=@vga_font
23118     08 E4 05 A1 |  if_e	add	objptr, #8
2311c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23120     08 E4 85 A1 |  if_e	sub	objptr, #8
23124                 | _hg010b_spin2_setfontfamily_ret
23124     2D 00 64 FD | 	ret
23128                 | 
23128                 | ' 
23128                 | ' '*************************************************************************
23128                 | ' '                                                                        *
23128                 | ' '  Cursor functions                                                      *
23128                 | ' '                                                                        *
23128                 | ' '*************************************************************************
23128                 | ' 
23128                 | ' 
23128                 | ' pub setcursorpos(x,y)
23128                 | _hg010b_spin2_setcursorpos
23128                 | ' 
23128                 | ' ''---------- Set the (x,y) position of cursor
23128                 | ' 
23128                 | ' cursor_x:=x
23128     3C E4 05 F1 | 	add	objptr, #60
2312c     F2 12 52 FC | 	wrword	arg01, objptr
23130                 | ' cursor_y:=y
23130     02 E4 05 F1 | 	add	objptr, #2
23134     F2 14 42 FC | 	wrbyte	arg02, objptr
23138                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23138     02 E4 85 F1 | 	sub	objptr, #2
2313c     F2 14 E2 FA | 	rdword	arg02, objptr
23140     02 14 66 F0 | 	shl	arg02, #2
23144     02 E4 05 F1 | 	add	objptr, #2
23148     F2 16 C2 FA | 	rdbyte	arg03, objptr
2314c     3E E4 85 F1 | 	sub	objptr, #62
23150     04 16 66 F0 | 	shl	arg03, #4
23154     04 16 06 F1 | 	add	arg03, #4
23158     11 12 06 F6 | 	mov	arg01, #17
2315c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
23160                 | _hg010b_spin2_setcursorpos_ret
23160     2D 00 64 FD | 	ret
23164                 | 
23164                 | ' 
23164                 | ' pub setcursorx(x)
23164                 | _hg010b_spin2_setcursorx
23164                 | ' cursor_x:=x
23164     3C E4 05 F1 | 	add	objptr, #60
23168     F2 12 52 FC | 	wrword	arg01, objptr
2316c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2316c     F2 14 E2 FA | 	rdword	arg02, objptr
23170     02 14 66 F0 | 	shl	arg02, #2
23174     02 E4 05 F1 | 	add	objptr, #2
23178     F2 16 C2 FA | 	rdbyte	arg03, objptr
2317c     3E E4 85 F1 | 	sub	objptr, #62
23180     04 16 66 F0 | 	shl	arg03, #4
23184     04 16 06 F1 | 	add	arg03, #4
23188     11 12 06 F6 | 	mov	arg01, #17
2318c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
23190                 | _hg010b_spin2_setcursorx_ret
23190     2D 00 64 FD | 	ret
23194                 | 
23194                 | ' 
23194                 | ' pub setcursory(y) 
23194                 | _hg010b_spin2_setcursory
23194                 | ' cursor_y:=y
23194     3E E4 05 F1 | 	add	objptr, #62
23198     F2 12 42 FC | 	wrbyte	arg01, objptr
2319c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
2319c     02 E4 85 F1 | 	sub	objptr, #2
231a0     F2 14 E2 FA | 	rdword	arg02, objptr
231a4     02 14 66 F0 | 	shl	arg02, #2
231a8     02 E4 05 F1 | 	add	objptr, #2
231ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
231b0     3E E4 85 F1 | 	sub	objptr, #62
231b4     04 16 66 F0 | 	shl	arg03, #4
231b8     04 16 06 F1 | 	add	arg03, #4
231bc     11 12 06 F6 | 	mov	arg01, #17
231c0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
231c4                 | _hg010b_spin2_setcursory_ret
231c4     2D 00 64 FD | 	ret
231c8                 | 
231c8                 | ' 
231c8                 | ' '*************************************************************************
231c8                 | ' '                                                                        *
231c8                 | ' '  VBlank functions                                                      *
231c8                 | ' '                                                                        *
231c8                 | ' '*************************************************************************
231c8                 | ' 
231c8                 | ' pub waitvbl(amount) | i
231c8                 | _hg010b_spin2_waitvbl
231c8     03 4A 05 F6 | 	mov	COUNT_, #3
231cc     A8 00 A0 FD | 	call	#pushregs_
231d0     09 27 02 F6 | 	mov	local01, arg01
231d4                 | ' 
231d4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
231d4                 | ' 
231d4                 | ' repeat i from 1 to amount
231d4     01 28 06 F6 | 	mov	local02, #1
231d8     01 26 56 F2 | 	cmps	local01, #1 wc
231dc     01 2A 86 F6 | 	negc	local03, #1
231e0     15 27 02 F1 | 	add	local01, local03
231e4                 | LR__2760
231e4                 | '   repeat until vblank==0
231e4                 | LR__2761
231e4     49 E4 05 F1 | 	add	objptr, #73
231e8     F2 12 0A FB | 	rdlong	arg01, objptr wz
231ec     49 E4 85 F1 | 	sub	objptr, #73
231f0     0C 00 90 AD |  if_e	jmp	#LR__2762
231f4                 | '     waitus(100)
231f4     64 12 06 F6 | 	mov	arg01, #100
231f8     D8 1F B0 FD | 	call	#__system___waitus
231fc     E4 FF 9F FD | 	jmp	#LR__2761
23200                 | LR__2762
23200                 | '   repeat until vblank==1
23200                 | LR__2763
23200     49 E4 05 F1 | 	add	objptr, #73
23204     F2 12 02 FB | 	rdlong	arg01, objptr
23208     49 E4 85 F1 | 	sub	objptr, #73
2320c     01 12 0E F2 | 	cmp	arg01, #1 wz
23210     0C 00 90 AD |  if_e	jmp	#LR__2764
23214                 | '     waitus(100)
23214     64 12 06 F6 | 	mov	arg01, #100
23218     B8 1F B0 FD | 	call	#__system___waitus
2321c     E0 FF 9F FD | 	jmp	#LR__2763
23220                 | LR__2764
23220     15 29 02 F1 | 	add	local02, local03
23224     13 29 0A F2 | 	cmp	local02, local01 wz
23228     B8 FF 9F 5D |  if_ne	jmp	#LR__2760
2322c     A7 F0 03 F6 | 	mov	ptra, fp
23230     B2 00 A0 FD | 	call	#popregs_
23234                 | _hg010b_spin2_waitvbl_ret
23234     2D 00 64 FD | 	ret
23238                 | 
23238                 | ' 
23238                 | ' 
23238                 | ' pub cls(fc,bc)   :c,i
23238                 | _hg010b_spin2_cls
23238     02 4A 05 F6 | 	mov	COUNT_, #2
2323c     A8 00 A0 FD | 	call	#pushregs_
23240     09 27 02 F6 | 	mov	local01, arg01
23244     0A 29 02 F6 | 	mov	local02, arg02
23248                 | ' 
23248                 | ' c:=bc
23248                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
23248     DD E4 05 F1 | 	add	objptr, #221
2324c     F2 12 02 FB | 	rdlong	arg01, objptr
23250     A5 E4 85 F1 | 	sub	objptr, #165
23254     F2 16 02 FB | 	rdlong	arg03, objptr
23258     02 16 66 F0 | 	shl	arg03, #2
2325c     14 15 02 F6 | 	mov	arg02, local02
23260     00 18 06 F6 | 	mov	arg04, #0
23264     01 1A 06 F6 | 	mov	arg05, #1
23268     0B 00 00 FF 
2326c     94 E4 05 F1 | 	add	objptr, ##5780
23270     F8 10 B0 FD | 	call	#_psram_spin2_fill
23274                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23274     0B 00 00 FF 
23278     C8 E4 85 F1 | 	sub	objptr, ##5832
2327c     F2 12 02 FB | 	rdlong	arg01, objptr
23280     04 E4 85 F1 | 	sub	objptr, #4
23284     F2 16 02 FB | 	rdlong	arg03, objptr
23288     09 17 82 F1 | 	sub	arg03, arg01
2328c     20 14 06 F6 | 	mov	arg02, #32
23290     00 18 06 F6 | 	mov	arg04, #0
23294     01 1A 06 F6 | 	mov	arg05, #1
23298     0B 00 00 FF 
2329c     CC E4 05 F1 | 	add	objptr, ##5836
232a0     C8 10 B0 FD | 	call	#_psram_spin2_fill
232a4                 | ' setwritecolors(fc,bc)
232a4                 | ' 
232a4                 | ' write_color:=ff
232a4     0B 00 00 FF 
232a8     8B E4 85 F1 | 	sub	objptr, ##5771
232ac     F2 26 62 FC | 	wrlong	local01, objptr
232b0                 | ' write_background:=bb
232b0     04 E4 05 F1 | 	add	objptr, #4
232b4     F2 28 62 FC | 	wrlong	local02, objptr
232b8                 | ' cursor_x:=0
232b8     09 E4 85 F1 | 	sub	objptr, #9
232bc     F2 00 58 FC | 	wrword	#0, objptr
232c0                 | ' cursor_y:=0
232c0     02 E4 05 F1 | 	add	objptr, #2
232c4     F2 00 48 FC | 	wrbyte	#0, objptr
232c8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
232c8     02 E4 85 F1 | 	sub	objptr, #2
232cc     F2 14 E2 FA | 	rdword	arg02, objptr
232d0     02 14 66 F0 | 	shl	arg02, #2
232d4     02 E4 05 F1 | 	add	objptr, #2
232d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
232dc     3E E4 85 F1 | 	sub	objptr, #62
232e0     04 16 66 F0 | 	shl	arg03, #4
232e4     04 16 06 F1 | 	add	arg03, #4
232e8     11 12 06 F6 | 	mov	arg01, #17
232ec     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
232f0                 | ' setcursorcolor(fc)
232f0     13 13 02 F6 | 	mov	arg01, local01
232f4     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
232f8     14 FB 01 F6 | 	mov	result1, local02
232fc     00 FC 05 F6 | 	mov	result2, #0
23300     A7 F0 03 F6 | 	mov	ptra, fp
23304     B2 00 A0 FD | 	call	#popregs_
23308                 | _hg010b_spin2_cls_ret
23308     2D 00 64 FD | 	ret
2330c                 | 
2330c                 | ' 
2330c                 | ' ''---------- Output a char at the cursor position, move the cursor 
2330c                 | ' 
2330c                 | ' pub putchar(achar) | c,x,y,l,newcpl
2330c                 | _hg010b_spin2_putchar
2330c     02 4A 05 F6 | 	mov	COUNT_, #2
23310     A8 00 A0 FD | 	call	#pushregs_
23314     09 27 02 F6 | 	mov	local01, arg01
23318                 | ' 
23318                 | ' if achar==10
23318     0A 26 0E F2 | 	cmp	local01, #10 wz
2331c                 | '   crlf()
2331c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
23320                 | ' if achar==9
23320     09 26 0E F2 | 	cmp	local01, #9 wz
23324     18 00 90 5D |  if_ne	jmp	#LR__2770
23328                 | '   cursor_x:=(cursor_x& %11110000)+16
23328     3C E4 05 F1 | 	add	objptr, #60
2332c     F2 16 E2 FA | 	rdword	arg03, objptr
23330     F0 16 06 F5 | 	and	arg03, #240
23334     10 16 06 F1 | 	add	arg03, #16
23338     F2 16 52 FC | 	wrword	arg03, objptr
2333c     3C E4 85 F1 | 	sub	objptr, #60
23340                 | LR__2770
23340                 | '   
23340                 | ' if (achar<>9) && (achar<>10) 
23340     09 26 0E F2 | 	cmp	local01, #9 wz
23344     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
23348     A8 00 90 AD |  if_e	jmp	#LR__2771
2334c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2334c     3C E4 05 F1 | 	add	objptr, #60
23350     F2 12 E2 FA | 	rdword	arg01, objptr
23354     02 E4 05 F1 | 	add	objptr, #2
23358     F2 14 C2 FA | 	rdbyte	arg02, objptr
2335c     04 14 66 F0 | 	shl	arg02, #4
23360     04 14 06 F1 | 	add	arg02, #4
23364     03 E4 05 F1 | 	add	objptr, #3
23368     F2 18 02 FB | 	rdlong	arg04, objptr
2336c     04 E4 05 F1 | 	add	objptr, #4
23370     F2 1A 02 FB | 	rdlong	arg05, objptr
23374     45 E4 85 F1 | 	sub	objptr, #69
23378     13 17 02 F6 | 	mov	arg03, local01
2337c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
23380     04 E4 05 F1 | 	add	objptr, #4
23384     F2 12 02 FB | 	rdlong	arg01, objptr
23388     10 00 00 FF 
2338c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23390     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23394     3A E4 05 F1 | 	add	objptr, #58
23398     F2 1A C2 FA | 	rdbyte	arg05, objptr
2339c     0D 17 02 FD | 	qmul	arg03, arg05
233a0                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
233a0     10 00 00 FF 
233a4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
233a8     02 E4 85 F1 | 	sub	objptr, #2
233ac     F2 28 E2 FA | 	rdword	local02, objptr
233b0     01 28 46 F0 | 	shr	local02, #1
233b4     13 15 02 F6 | 	mov	arg02, local01
233b8     01 16 06 F6 | 	mov	arg03, #1
233bc     00 18 06 F6 | 	mov	arg04, #0
233c0     01 1A 06 F6 | 	mov	arg05, #1
233c4     0B 00 00 FF 
233c8     90 E4 05 F1 | 	add	objptr, ##5776
233cc     18 26 62 FD | 	getqx	local01
233d0     14 27 02 F1 | 	add	local01, local02
233d4     13 13 02 F1 | 	add	arg01, local01
233d8     90 0F B0 FD | 	call	#_psram_spin2_fill
233dc                 | '   cursor_x+=2
233dc     0B 00 00 FF 
233e0     90 E4 85 F1 | 	sub	objptr, ##5776
233e4     F2 28 E2 FA | 	rdword	local02, objptr
233e8     02 28 06 F1 | 	add	local02, #2
233ec     F2 28 52 FC | 	wrword	local02, objptr
233f0     3C E4 85 F1 | 	sub	objptr, #60
233f4                 | LR__2771
233f4                 | ' 
233f4                 | ' if cursor_x>=256
233f4     3C E4 05 F1 | 	add	objptr, #60
233f8     F2 28 E2 FA | 	rdword	local02, objptr
233fc     3C E4 85 F1 | 	sub	objptr, #60
23400     00 29 56 F2 | 	cmps	local02, #256 wc
23404     64 00 90 CD |  if_b	jmp	#LR__2773
23408                 | '   cursor_x:=0
23408     3C E4 05 F1 | 	add	objptr, #60
2340c     F2 00 58 FC | 	wrword	#0, objptr
23410                 | '   cursor_y+=1
23410     02 E4 05 F1 | 	add	objptr, #2
23414     F2 28 C2 FA | 	rdbyte	local02, objptr
23418     01 28 06 F1 | 	add	local02, #1
2341c     F2 28 42 FC | 	wrbyte	local02, objptr
23420                 | '   if cursor_y>st_lines-1
23420     C3 E4 05 F1 | 	add	objptr, #195
23424     F2 28 02 FB | 	rdlong	local02, objptr
23428     01 28 86 F1 | 	sub	local02, #1
2342c     C3 E4 85 F1 | 	sub	objptr, #195
23430     F2 16 C2 FA | 	rdbyte	arg03, objptr
23434     3E E4 85 F1 | 	sub	objptr, #62
23438     14 17 5A F2 | 	cmps	arg03, local02 wcz
2343c     2C 00 90 ED |  if_be	jmp	#LR__2772
23440                 | '     scrollup2()
23440     00 12 06 F6 | 	mov	arg01, #0
23444     01 00 00 FF 
23448     58 14 06 F6 | 	mov	arg02, ##600
2344c     10 16 06 F6 | 	mov	arg03, #16
23450     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
23454                 | '     cursor_y:=st_lines-1
23454     01 E5 05 F1 | 	add	objptr, #257
23458     F2 28 02 FB | 	rdlong	local02, objptr
2345c     01 28 86 F1 | 	sub	local02, #1
23460     C3 E4 85 F1 | 	sub	objptr, #195
23464     F2 28 42 FC | 	wrbyte	local02, objptr
23468     3E E4 85 F1 | 	sub	objptr, #62
2346c                 | LR__2772
2346c                 | LR__2773
2346c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2346c     3C E4 05 F1 | 	add	objptr, #60
23470     F2 14 E2 FA | 	rdword	arg02, objptr
23474     02 14 66 F0 | 	shl	arg02, #2
23478     02 E4 05 F1 | 	add	objptr, #2
2347c     F2 16 C2 FA | 	rdbyte	arg03, objptr
23480     3E E4 85 F1 | 	sub	objptr, #62
23484     04 16 66 F0 | 	shl	arg03, #4
23488     04 16 06 F1 | 	add	arg03, #4
2348c     11 12 06 F6 | 	mov	arg01, #17
23490     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
23494     A7 F0 03 F6 | 	mov	ptra, fp
23498     B2 00 A0 FD | 	call	#popregs_
2349c                 | _hg010b_spin2_putchar_ret
2349c     2D 00 64 FD | 	ret
234a0                 | 
234a0                 | '     
234a0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
234a0                 | ' 
234a0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
234a0                 | _hg010b_spin2_putchar2
234a0     02 4A 05 F6 | 	mov	COUNT_, #2
234a4     A8 00 A0 FD | 	call	#pushregs_
234a8     09 27 02 F6 | 	mov	local01, arg01
234ac                 | ' 
234ac                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
234ac     3C E4 05 F1 | 	add	objptr, #60
234b0     F2 12 E2 FA | 	rdword	arg01, objptr
234b4     02 E4 05 F1 | 	add	objptr, #2
234b8     F2 14 C2 FA | 	rdbyte	arg02, objptr
234bc     04 14 66 F0 | 	shl	arg02, #4
234c0     04 14 06 F1 | 	add	arg02, #4
234c4     03 E4 05 F1 | 	add	objptr, #3
234c8     F2 18 02 FB | 	rdlong	arg04, objptr
234cc     04 E4 05 F1 | 	add	objptr, #4
234d0     F2 1A 02 FB | 	rdlong	arg05, objptr
234d4     45 E4 85 F1 | 	sub	objptr, #69
234d8     13 17 02 F6 | 	mov	arg03, local01
234dc     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
234e0     04 E4 05 F1 | 	add	objptr, #4
234e4     F2 12 02 FB | 	rdlong	arg01, objptr
234e8     10 00 00 FF 
234ec     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
234f0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
234f4     3A E4 05 F1 | 	add	objptr, #58
234f8     F2 1A C2 FA | 	rdbyte	arg05, objptr
234fc     0D 17 02 FD | 	qmul	arg03, arg05
23500                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23500     10 00 00 FF 
23504     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23508     02 E4 85 F1 | 	sub	objptr, #2
2350c     F2 28 E2 FA | 	rdword	local02, objptr
23510     01 28 46 F0 | 	shr	local02, #1
23514     13 15 02 F6 | 	mov	arg02, local01
23518     01 16 06 F6 | 	mov	arg03, #1
2351c     00 18 06 F6 | 	mov	arg04, #0
23520     01 1A 06 F6 | 	mov	arg05, #1
23524     0B 00 00 FF 
23528     90 E4 05 F1 | 	add	objptr, ##5776
2352c     18 26 62 FD | 	getqx	local01
23530     14 27 02 F1 | 	add	local01, local02
23534     13 13 02 F1 | 	add	arg01, local01
23538     30 0E B0 FD | 	call	#_psram_spin2_fill
2353c                 | ' 
2353c                 | ' cursor_x+=2
2353c     0B 00 00 FF 
23540     90 E4 85 F1 | 	sub	objptr, ##5776
23544     F2 28 E2 FA | 	rdword	local02, objptr
23548     02 28 06 F1 | 	add	local02, #2
2354c     F2 28 52 FC | 	wrword	local02, objptr
23550                 | ' if cursor_x>=256
23550     F2 28 E2 FA | 	rdword	local02, objptr
23554     3C E4 85 F1 | 	sub	objptr, #60
23558     00 29 56 F2 | 	cmps	local02, #256 wc
2355c     64 00 90 CD |  if_b	jmp	#LR__2781
23560                 | '   cursor_x:=0
23560     3C E4 05 F1 | 	add	objptr, #60
23564     F2 00 58 FC | 	wrword	#0, objptr
23568                 | '   cursor_y+=1
23568     02 E4 05 F1 | 	add	objptr, #2
2356c     F2 28 C2 FA | 	rdbyte	local02, objptr
23570     01 28 06 F1 | 	add	local02, #1
23574     F2 28 42 FC | 	wrbyte	local02, objptr
23578                 | '   if cursor_y>st_lines-1
23578     C3 E4 05 F1 | 	add	objptr, #195
2357c     F2 28 02 FB | 	rdlong	local02, objptr
23580     01 28 86 F1 | 	sub	local02, #1
23584     C3 E4 85 F1 | 	sub	objptr, #195
23588     F2 16 C2 FA | 	rdbyte	arg03, objptr
2358c     3E E4 85 F1 | 	sub	objptr, #62
23590     14 17 5A F2 | 	cmps	arg03, local02 wcz
23594     2C 00 90 ED |  if_be	jmp	#LR__2780
23598                 | '     scrollup2()
23598     00 12 06 F6 | 	mov	arg01, #0
2359c     01 00 00 FF 
235a0     58 14 06 F6 | 	mov	arg02, ##600
235a4     10 16 06 F6 | 	mov	arg03, #16
235a8     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
235ac                 | '     cursor_y:=st_lines-1
235ac     01 E5 05 F1 | 	add	objptr, #257
235b0     F2 28 02 FB | 	rdlong	local02, objptr
235b4     01 28 86 F1 | 	sub	local02, #1
235b8     C3 E4 85 F1 | 	sub	objptr, #195
235bc     F2 28 42 FC | 	wrbyte	local02, objptr
235c0     3E E4 85 F1 | 	sub	objptr, #62
235c4                 | LR__2780
235c4                 | LR__2781
235c4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
235c4     3C E4 05 F1 | 	add	objptr, #60
235c8     F2 14 E2 FA | 	rdword	arg02, objptr
235cc     02 14 66 F0 | 	shl	arg02, #2
235d0     02 E4 05 F1 | 	add	objptr, #2
235d4     F2 16 C2 FA | 	rdbyte	arg03, objptr
235d8     3E E4 85 F1 | 	sub	objptr, #62
235dc     04 16 66 F0 | 	shl	arg03, #4
235e0     04 16 06 F1 | 	add	arg03, #4
235e4     11 12 06 F6 | 	mov	arg01, #17
235e8     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
235ec     A7 F0 03 F6 | 	mov	ptra, fp
235f0     B2 00 A0 FD | 	call	#popregs_
235f4                 | _hg010b_spin2_putchar2_ret
235f4     2D 00 64 FD | 	ret
235f8                 | 
235f8                 | ' ''--------- Output a string at the cursor position, move the cursor  
235f8                 | ' 
235f8                 | ' pub write(text) | iii,c,ncx,ncy
235f8                 | _hg010b_spin2_write
235f8     04 4A 05 F6 | 	mov	COUNT_, #4
235fc     A8 00 A0 FD | 	call	#pushregs_
23600     09 27 02 F6 | 	mov	local01, arg01
23604                 | ' 
23604                 | ' repeat iii from 0 to strsize(text)-1
23604     00 28 06 F6 | 	mov	local02, #0
23608     13 13 02 F6 | 	mov	arg01, local01
2360c     09 2B 02 F6 | 	mov	local03, arg01
23610     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
23614                 | LR__2790
23614     15 FB C9 FA | 	rdbyte	result1, local03 wz
23618     01 2A 06 51 |  if_ne	add	local03, #1
2361c     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
23620                 | LR__2791
23620     09 2B 82 F1 | 	sub	local03, arg01
23624     01 2A 86 F1 | 	sub	local03, #1
23628     00 2A 56 F2 | 	cmps	local03, #0 wc
2362c     01 2C 86 F6 | 	negc	local04, #1
23630     16 2B 02 F1 | 	add	local03, local04
23634                 | LR__2792
23634                 | '   putchar2(byte[text+iii])
23634     13 13 02 F6 | 	mov	arg01, local01
23638     14 13 02 F1 | 	add	arg01, local02
2363c     09 13 C2 FA | 	rdbyte	arg01, arg01
23640     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
23644     16 29 02 F1 | 	add	local02, local04
23648     15 29 0A F2 | 	cmp	local02, local03 wz
2364c     E4 FF 9F 5D |  if_ne	jmp	#LR__2792
23650     A7 F0 03 F6 | 	mov	ptra, fp
23654     B2 00 A0 FD | 	call	#popregs_
23658                 | _hg010b_spin2_write_ret
23658     2D 00 64 FD | 	ret
2365c                 | 
2365c                 | '    
2365c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
2365c                 | ' 
2365c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
2365c                 | _hg010b_spin2_scrollup2
2365c     03 4A 05 F6 | 	mov	COUNT_, #3
23660     A8 00 A0 FD | 	call	#pushregs_
23664                 | ' 	
23664                 | ' repeat i from 4 to 579 
23664     04 26 06 F6 | 	mov	local01, #4
23668                 | LR__2800
23668     F9 E4 05 F1 | 	add	objptr, #249
2366c     F2 1A 02 FB | 	rdlong	arg05, objptr
23670     1C E4 85 F1 | 	sub	objptr, #28
23674     F2 14 02 FB | 	rdlong	arg02, objptr
23678     13 19 02 F6 | 	mov	arg04, local01
2367c     10 18 06 F1 | 	add	arg04, #16
23680     02 18 66 F0 | 	shl	arg04, #2
23684     14 E4 05 F1 | 	add	objptr, #20
23688     F2 16 02 FB | 	rdlong	arg03, objptr
2368c     0B 19 02 FD | 	qmul	arg04, arg03
23690                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
23690     F6 03 00 FF 
23694     00 12 06 F6 | 	mov	arg01, ##519168
23698     0D 13 82 F1 | 	sub	arg01, arg05
2369c     02 16 66 F0 | 	shl	arg03, #2
236a0     0A 00 00 FF 
236a4     DB E5 05 F1 | 	add	objptr, ##5595
236a8     18 1A 62 FD | 	getqx	arg05
236ac     0D 15 02 F1 | 	add	arg02, arg05
236b0     80 0B B0 FD | 	call	#_psram_spin2_read1
236b4     0A 00 00 FF 
236b8     D3 E5 85 F1 | 	sub	objptr, ##5587
236bc     F2 1A 02 FB | 	rdlong	arg05, objptr
236c0     1C E4 85 F1 | 	sub	objptr, #28
236c4     F2 14 02 FB | 	rdlong	arg02, objptr
236c8     13 19 02 F6 | 	mov	arg04, local01
236cc     02 18 66 F0 | 	shl	arg04, #2
236d0     14 E4 05 F1 | 	add	objptr, #20
236d4     F2 16 02 FB | 	rdlong	arg03, objptr
236d8     0B 19 02 FD | 	qmul	arg04, arg03
236dc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
236dc     F6 03 00 FF 
236e0     00 12 06 F6 | 	mov	arg01, ##519168
236e4     0D 13 82 F1 | 	sub	arg01, arg05
236e8     02 16 66 F0 | 	shl	arg03, #2
236ec     0A 00 00 FF 
236f0     DB E5 05 F1 | 	add	objptr, ##5595
236f4     18 1A 62 FD | 	getqx	arg05
236f8     0D 15 02 F1 | 	add	arg02, arg05
236fc     D0 0B B0 FD | 	call	#_psram_spin2_write
23700     0B 00 00 FF 
23704     CC E4 85 F1 | 	sub	objptr, ##5836
23708     01 26 06 F1 | 	add	local01, #1
2370c     01 00 00 FF 
23710     44 26 16 F2 | 	cmp	local01, ##580 wc
23714     50 FF 9F CD |  if_b	jmp	#LR__2800
23718                 | ' 
23718                 | ' repeat i from 580 to 599
23718     01 00 00 FF 
2371c     44 26 06 F6 | 	mov	local01, ##580
23720                 | LR__2801
23720                 | '    fastline(0,1023,i,write_background)   
23720     45 E4 05 F1 | 	add	objptr, #69
23724     F2 18 02 FB | 	rdlong	arg04, objptr
23728     45 E4 85 F1 | 	sub	objptr, #69
2372c     00 12 06 F6 | 	mov	arg01, #0
23730     09 14 CE F9 | 	bmask	arg02, #9
23734     13 17 02 F6 | 	mov	arg03, local01
23738     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
2373c     01 26 06 F1 | 	add	local01, #1
23740     01 00 00 FF 
23744     58 26 16 F2 | 	cmp	local01, ##600 wc
23748     D4 FF 9F CD |  if_b	jmp	#LR__2801
2374c                 | ' repeat i from 0 to 3
2374c     00 26 06 F6 | 	mov	local01, #0
23750                 | LR__2802
23750                 | '    fastline(0,1023,i,write_background)      
23750     45 E4 05 F1 | 	add	objptr, #69
23754     F2 18 02 FB | 	rdlong	arg04, objptr
23758     45 E4 85 F1 | 	sub	objptr, #69
2375c     00 12 06 F6 | 	mov	arg01, #0
23760     09 14 CE F9 | 	bmask	arg02, #9
23764     13 17 02 F6 | 	mov	arg03, local01
23768     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2376c     01 26 06 F1 | 	add	local01, #1
23770     04 26 56 F2 | 	cmps	local01, #4 wc
23774     D8 FF 9F CD |  if_b	jmp	#LR__2802
23778                 | ' 
23778                 | ' repeat i from 0 to 35
23778     00 26 06 F6 | 	mov	local01, #0
2377c                 | LR__2803
2377c     13 1B 02 F6 | 	mov	arg05, local01
23780     01 1A 06 F1 | 	add	arg05, #1
23784     10 00 00 FF 
23788     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2378c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23790     0B 1B 02 FD | 	qmul	arg05, arg03
23794                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
23794     F6 03 00 FF 
23798     00 12 06 F6 | 	mov	arg01, ##519168
2379c     F9 E4 05 F1 | 	add	objptr, #249
237a0     F2 1A 02 FB | 	rdlong	arg05, objptr
237a4     0D 13 82 F1 | 	sub	arg01, arg05
237a8     F5 E4 85 F1 | 	sub	objptr, #245
237ac     F2 14 02 FB | 	rdlong	arg02, objptr
237b0     10 00 00 FF 
237b4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
237b8     0B 00 00 FF 
237bc     C8 E4 05 F1 | 	add	objptr, ##5832
237c0     18 1A 62 FD | 	getqx	arg05
237c4     0D 15 02 F1 | 	add	arg02, arg05
237c8     68 0A B0 FD | 	call	#_psram_spin2_read1
237cc     10 00 00 FF 
237d0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
237d4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
237d8     0B 27 02 FD | 	qmul	local01, arg03
237dc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
237dc     F6 03 00 FF 
237e0     00 12 06 F6 | 	mov	arg01, ##519168
237e4     0A 00 00 FF 
237e8     D3 E5 85 F1 | 	sub	objptr, ##5587
237ec     F2 1A 02 FB | 	rdlong	arg05, objptr
237f0     0D 13 82 F1 | 	sub	arg01, arg05
237f4     F5 E4 85 F1 | 	sub	objptr, #245
237f8     F2 14 02 FB | 	rdlong	arg02, objptr
237fc     10 00 00 FF 
23800     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23804     0B 00 00 FF 
23808     C8 E4 05 F1 | 	add	objptr, ##5832
2380c     18 1A 62 FD | 	getqx	arg05
23810     0D 15 02 F1 | 	add	arg02, arg05
23814     B8 0A B0 FD | 	call	#_psram_spin2_write
23818     0B 00 00 FF 
2381c     CC E4 85 F1 | 	sub	objptr, ##5836
23820     01 26 06 F1 | 	add	local01, #1
23824     24 26 56 F2 | 	cmps	local01, #36 wc
23828     50 FF 9F CD |  if_b	jmp	#LR__2803
2382c                 | ' repeat i from 0 to timings[7]-1
2382c     00 26 06 F6 | 	mov	local01, #0
23830     10 00 00 FF 
23834     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23838     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
2383c     10 00 00 FF 
23840     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23844     01 28 86 F1 | 	sub	local02, #1
23848     00 28 56 F2 | 	cmps	local02, #0 wc
2384c     01 2A 86 F6 | 	negc	local03, #1
23850     15 29 02 F1 | 	add	local02, local03
23854                 | LR__2804
23854                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
23854     04 E4 05 F1 | 	add	objptr, #4
23858     F2 12 02 FB | 	rdlong	arg01, objptr
2385c     10 00 00 FF 
23860     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23864     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23868     10 00 00 FF 
2386c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23870     0D 19 02 F6 | 	mov	arg04, arg05
23874     03 18 66 F0 | 	shl	arg04, #3
23878     0D 19 02 F1 | 	add	arg04, arg05
2387c     02 18 66 F0 | 	shl	arg04, #2
23880     13 19 02 F1 | 	add	arg04, local01
23884     0C 13 02 F1 | 	add	arg01, arg04
23888     20 14 06 F6 | 	mov	arg02, #32
2388c     01 16 06 F6 | 	mov	arg03, #1
23890     00 18 06 F6 | 	mov	arg04, #0
23894     01 1A 06 F6 | 	mov	arg05, #1
23898     0B 00 00 FF 
2389c     C8 E4 05 F1 | 	add	objptr, ##5832
238a0     C8 0A B0 FD | 	call	#_psram_spin2_fill
238a4     0B 00 00 FF 
238a8     CC E4 85 F1 | 	sub	objptr, ##5836
238ac     15 27 02 F1 | 	add	local01, local03
238b0     14 27 0A F2 | 	cmp	local01, local02 wz
238b4     9C FF 9F 5D |  if_ne	jmp	#LR__2804
238b8     A7 F0 03 F6 | 	mov	ptra, fp
238bc     B2 00 A0 FD | 	call	#popregs_
238c0                 | _hg010b_spin2_scrollup2_ret
238c0     2D 00 64 FD | 	ret
238c4                 | 
238c4                 | '  
238c4                 | ' ''----------- Scroll the screen one line down 
238c4                 | ' 
238c4                 | ' pub scrolldown(start=0) | i
238c4                 | _hg010b_spin2_scrolldown
238c4     05 4A 05 F6 | 	mov	COUNT_, #5
238c8     A8 00 A0 FD | 	call	#pushregs_
238cc     09 27 02 F6 | 	mov	local01, arg01
238d0                 | ' 
238d0                 | ' repeat i from 579 to (start*16)+4
238d0     01 00 00 FF 
238d4     43 28 06 F6 | 	mov	local02, ##579
238d8     13 2B 02 F6 | 	mov	local03, local01
238dc     04 2A 66 F0 | 	shl	local03, #4
238e0     04 2A 06 F1 | 	add	local03, #4
238e4     01 00 00 FF 
238e8     43 2A 56 F2 | 	cmps	local03, ##579 wc
238ec     01 2C 86 F6 | 	negc	local04, #1
238f0     16 2F 02 F6 | 	mov	local05, local04
238f4     16 2B 02 F1 | 	add	local03, local04
238f8                 | LR__2810
238f8     F9 E4 05 F1 | 	add	objptr, #249
238fc     F2 2C 02 FB | 	rdlong	local04, objptr
23900     1C E4 85 F1 | 	sub	objptr, #28
23904     F2 14 02 FB | 	rdlong	arg02, objptr
23908     14 1B 02 F6 | 	mov	arg05, local02
2390c     02 1A 66 F0 | 	shl	arg05, #2
23910     14 E4 05 F1 | 	add	objptr, #20
23914     F2 16 02 FB | 	rdlong	arg03, objptr
23918     0B 1B 02 FD | 	qmul	arg05, arg03
2391c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2391c     F6 03 00 FF 
23920     00 12 06 F6 | 	mov	arg01, ##519168
23924     16 13 82 F1 | 	sub	arg01, local04
23928     02 16 66 F0 | 	shl	arg03, #2
2392c     0A 00 00 FF 
23930     DB E5 05 F1 | 	add	objptr, ##5595
23934     18 2C 62 FD | 	getqx	local04
23938     16 15 02 F1 | 	add	arg02, local04
2393c     F4 08 B0 FD | 	call	#_psram_spin2_read1
23940     0A 00 00 FF 
23944     D3 E5 85 F1 | 	sub	objptr, ##5587
23948     F2 2C 02 FB | 	rdlong	local04, objptr
2394c     1C E4 85 F1 | 	sub	objptr, #28
23950     F2 14 02 FB | 	rdlong	arg02, objptr
23954     14 1B 02 F6 | 	mov	arg05, local02
23958     10 1A 06 F1 | 	add	arg05, #16
2395c     02 1A 66 F0 | 	shl	arg05, #2
23960     14 E4 05 F1 | 	add	objptr, #20
23964     F2 16 02 FB | 	rdlong	arg03, objptr
23968     0B 1B 02 FD | 	qmul	arg05, arg03
2396c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2396c     F6 03 00 FF 
23970     00 12 06 F6 | 	mov	arg01, ##519168
23974     16 13 82 F1 | 	sub	arg01, local04
23978     02 16 66 F0 | 	shl	arg03, #2
2397c     0A 00 00 FF 
23980     DB E5 05 F1 | 	add	objptr, ##5595
23984     18 2C 62 FD | 	getqx	local04
23988     16 15 02 F1 | 	add	arg02, local04
2398c     40 09 B0 FD | 	call	#_psram_spin2_write
23990     0B 00 00 FF 
23994     CC E4 85 F1 | 	sub	objptr, ##5836
23998     17 29 02 F1 | 	add	local02, local05
2399c     15 29 0A F2 | 	cmp	local02, local03 wz
239a0     54 FF 9F 5D |  if_ne	jmp	#LR__2810
239a4                 | ' 
239a4                 | ' repeat i from (start*16)+4 to (start*16)+19
239a4     13 29 02 F6 | 	mov	local02, local01
239a8     04 28 66 F0 | 	shl	local02, #4
239ac     04 28 06 F1 | 	add	local02, #4
239b0     13 2F 02 F6 | 	mov	local05, local01
239b4     04 2E 66 F0 | 	shl	local05, #4
239b8     13 2E 06 F1 | 	add	local05, #19
239bc     13 2D 02 F6 | 	mov	local04, local01
239c0     04 2C 66 F0 | 	shl	local04, #4
239c4     04 2C 06 F1 | 	add	local04, #4
239c8     16 2F 52 F2 | 	cmps	local05, local04 wc
239cc     01 2C 86 F6 | 	negc	local04, #1
239d0     16 2B 02 F6 | 	mov	local03, local04
239d4     16 2F 02 F1 | 	add	local05, local04
239d8                 | LR__2811
239d8                 | '    fastline(0,1023,i,write_background)    
239d8     45 E4 05 F1 | 	add	objptr, #69
239dc     F2 18 02 FB | 	rdlong	arg04, objptr
239e0     45 E4 85 F1 | 	sub	objptr, #69
239e4     00 12 06 F6 | 	mov	arg01, #0
239e8     09 14 CE F9 | 	bmask	arg02, #9
239ec     14 17 02 F6 | 	mov	arg03, local02
239f0     08 ED BF FD | 	call	#_hg010b_spin2_fastline
239f4     15 29 02 F1 | 	add	local02, local03
239f8     17 29 0A F2 | 	cmp	local02, local05 wz
239fc     D8 FF 9F 5D |  if_ne	jmp	#LR__2811
23a00                 | '    
23a00                 | ' repeat i from 35 to start
23a00     23 28 06 F6 | 	mov	local02, #35
23a04     23 26 56 F2 | 	cmps	local01, #35 wc
23a08     01 2C 86 F6 | 	negc	local04, #1
23a0c     13 2F 02 F6 | 	mov	local05, local01
23a10     16 2F 02 F1 | 	add	local05, local04
23a14                 | LR__2812
23a14                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
23a14     F6 03 00 FF 
23a18     00 12 06 F6 | 	mov	arg01, ##519168
23a1c     F9 E4 05 F1 | 	add	objptr, #249
23a20     F2 2A 02 FB | 	rdlong	local03, objptr
23a24     15 13 82 F1 | 	sub	arg01, local03
23a28     F5 E4 85 F1 | 	sub	objptr, #245
23a2c     F2 14 02 FB | 	rdlong	arg02, objptr
23a30     14 2B 02 F6 | 	mov	local03, local02
23a34     07 2A 66 F0 | 	shl	local03, #7
23a38     15 15 02 F1 | 	add	arg02, local03
23a3c     80 16 06 F6 | 	mov	arg03, #128
23a40     0B 00 00 FF 
23a44     C8 E4 05 F1 | 	add	objptr, ##5832
23a48     E8 07 B0 FD | 	call	#_psram_spin2_read1
23a4c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
23a4c     F6 03 00 FF 
23a50     00 12 06 F6 | 	mov	arg01, ##519168
23a54     0A 00 00 FF 
23a58     D3 E5 85 F1 | 	sub	objptr, ##5587
23a5c     F2 2A 02 FB | 	rdlong	local03, objptr
23a60     15 13 82 F1 | 	sub	arg01, local03
23a64     F5 E4 85 F1 | 	sub	objptr, #245
23a68     F2 14 02 FB | 	rdlong	arg02, objptr
23a6c     14 2B 02 F6 | 	mov	local03, local02
23a70     01 2A 06 F1 | 	add	local03, #1
23a74     07 2A 66 F0 | 	shl	local03, #7
23a78     15 15 02 F1 | 	add	arg02, local03
23a7c     80 16 06 F6 | 	mov	arg03, #128
23a80     0B 00 00 FF 
23a84     C8 E4 05 F1 | 	add	objptr, ##5832
23a88     44 08 B0 FD | 	call	#_psram_spin2_write
23a8c     0B 00 00 FF 
23a90     CC E4 85 F1 | 	sub	objptr, ##5836
23a94     16 29 02 F1 | 	add	local02, local04
23a98     17 29 0A F2 | 	cmp	local02, local05 wz
23a9c     74 FF 9F 5D |  if_ne	jmp	#LR__2812
23aa0                 | ' repeat i from 0 to 127
23aa0     00 28 06 F6 | 	mov	local02, #0
23aa4                 | LR__2813
23aa4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
23aa4     04 E4 05 F1 | 	add	objptr, #4
23aa8     F2 12 02 FB | 	rdlong	arg01, objptr
23aac     13 2F 02 F6 | 	mov	local05, local01
23ab0     07 2E 66 F0 | 	shl	local05, #7
23ab4     17 13 02 F1 | 	add	arg01, local05
23ab8     14 13 02 F1 | 	add	arg01, local02
23abc     20 14 06 F6 | 	mov	arg02, #32
23ac0     01 16 06 F6 | 	mov	arg03, #1
23ac4     00 18 06 F6 | 	mov	arg04, #0
23ac8     01 1A 06 F6 | 	mov	arg05, #1
23acc     0B 00 00 FF 
23ad0     C8 E4 05 F1 | 	add	objptr, ##5832
23ad4     94 08 B0 FD | 	call	#_psram_spin2_fill
23ad8     0B 00 00 FF 
23adc     CC E4 85 F1 | 	sub	objptr, ##5836
23ae0     01 28 06 F1 | 	add	local02, #1
23ae4     80 28 56 F2 | 	cmps	local02, #128 wc
23ae8     B8 FF 9F CD |  if_b	jmp	#LR__2813
23aec     A7 F0 03 F6 | 	mov	ptra, fp
23af0     B2 00 A0 FD | 	call	#popregs_
23af4                 | _hg010b_spin2_scrolldown_ret
23af4     2D 00 64 FD | 	ret
23af8                 | 
23af8                 | ' 
23af8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
23af8                 | ' 
23af8                 | ' pub crlf()
23af8                 | _hg010b_spin2_crlf
23af8                 | ' 
23af8                 | ' cursor_x:=leading_spaces*2
23af8     01 00 00 FF 
23afc     B6 E4 05 F1 | 	add	objptr, ##694
23b00     F2 16 02 FB | 	rdlong	arg03, objptr
23b04     01 16 66 F0 | 	shl	arg03, #1
23b08     01 00 00 FF 
23b0c     7A E4 85 F1 | 	sub	objptr, ##634
23b10     F2 16 52 FC | 	wrword	arg03, objptr
23b14                 | ' cursor_y+=1
23b14     02 E4 05 F1 | 	add	objptr, #2
23b18     F2 16 C2 FA | 	rdbyte	arg03, objptr
23b1c     01 16 06 F1 | 	add	arg03, #1
23b20     F2 16 42 FC | 	wrbyte	arg03, objptr
23b24                 | ' if cursor_y>st_lines-1
23b24     C3 E4 05 F1 | 	add	objptr, #195
23b28     F2 16 02 FB | 	rdlong	arg03, objptr
23b2c     01 16 86 F1 | 	sub	arg03, #1
23b30     C3 E4 85 F1 | 	sub	objptr, #195
23b34     F2 14 C2 FA | 	rdbyte	arg02, objptr
23b38     3E E4 85 F1 | 	sub	objptr, #62
23b3c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
23b40     2C 00 90 ED |  if_be	jmp	#LR__2820
23b44                 | '   scrollup2()
23b44     00 12 06 F6 | 	mov	arg01, #0
23b48     01 00 00 FF 
23b4c     58 14 06 F6 | 	mov	arg02, ##600
23b50     10 16 06 F6 | 	mov	arg03, #16
23b54     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
23b58                 | '   cursor_y:=st_lines-1
23b58     01 E5 05 F1 | 	add	objptr, #257
23b5c     F2 16 02 FB | 	rdlong	arg03, objptr
23b60     01 16 86 F1 | 	sub	arg03, #1
23b64     C3 E4 85 F1 | 	sub	objptr, #195
23b68     F2 16 42 FC | 	wrbyte	arg03, objptr
23b6c     3E E4 85 F1 | 	sub	objptr, #62
23b70                 | LR__2820
23b70                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
23b70     3C E4 05 F1 | 	add	objptr, #60
23b74     F2 14 E2 FA | 	rdword	arg02, objptr
23b78     02 14 66 F0 | 	shl	arg02, #2
23b7c     02 E4 05 F1 | 	add	objptr, #2
23b80     F2 16 C2 FA | 	rdbyte	arg03, objptr
23b84     3E E4 85 F1 | 	sub	objptr, #62
23b88     04 16 66 F0 | 	shl	arg03, #4
23b8c     04 16 06 F1 | 	add	arg03, #4
23b90     11 12 06 F6 | 	mov	arg01, #17
23b94     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
23b98                 | _hg010b_spin2_crlf_ret
23b98     2D 00 64 FD | 	ret
23b9c                 | 
23b9c                 | ' 
23b9c                 | ' 
23b9c                 | ' '*************************************************************************
23b9c                 | ' '                                                                        *
23b9c                 | ' '  Conversions                                                           *
23b9c                 | ' '                                                                        *
23b9c                 | ' '*************************************************************************
23b9c                 | ' 
23b9c                 | ' ''---------- Convert a integer to dec string, return a pointer
23b9c                 | ' 
23b9c                 | ' pub inttostr(i):result |q,pos,k,j
23b9c                 | _hg010b_spin2_inttostr
23b9c     03 4A 05 F6 | 	mov	COUNT_, #3
23ba0     A8 00 A0 FD | 	call	#pushregs_
23ba4     09 27 0A F6 | 	mov	local01, arg01 wz
23ba8                 | ' 
23ba8                 | ' j:=i
23ba8                 | ' pos:=10
23ba8     0A 28 06 F6 | 	mov	local02, #10
23bac                 | ' k:=0
23bac     00 2A 06 F6 | 	mov	local03, #0
23bb0                 | ' 
23bb0                 | ' if (j==0)
23bb0     18 00 90 5D |  if_ne	jmp	#LR__2830
23bb4                 | '   n_string[0]:=48
23bb4     4D E4 05 F1 | 	add	objptr, #77
23bb8     F2 60 48 FC | 	wrbyte	#48, objptr
23bbc                 | '   n_string[1]:=0
23bbc     01 E4 05 F1 | 	add	objptr, #1
23bc0     F2 00 48 FC | 	wrbyte	#0, objptr
23bc4     4E E4 85 F1 | 	sub	objptr, #78
23bc8     C4 00 90 FD | 	jmp	#LR__2837
23bcc                 | LR__2830
23bcc                 | ' 
23bcc                 | ' else
23bcc                 | '   if (j<0)
23bcc     13 27 52 F6 | 	abs	local01, local01 wc
23bd0                 | '     j:=0-j
23bd0                 | '     k:=45
23bd0     2D 2A 06 C6 |  if_b	mov	local03, #45
23bd4                 | ' 
23bd4                 | '   n_string[11]:=0
23bd4     58 E4 05 F1 | 	add	objptr, #88
23bd8     F2 00 48 FC | 	wrbyte	#0, objptr
23bdc     58 E4 85 F1 | 	sub	objptr, #88
23be0     97 24 48 FB | 	callpa	#(@LR__2832-@LR__2831)>>2,fcache_load_ptr_
23be4                 | '   repeat while (pos>-1)
23be4                 | LR__2831
23be4     00 28 56 F2 | 	cmps	local02, #0 wc
23be8     40 00 90 CD |  if_b	jmp	#LR__2833
23bec     13 FB 51 F6 | 	abs	result1, local01 wc
23bf0     0A FA 15 FD | 	qdiv	result1, #10
23bf4                 | '     q:=j//10
23bf4     19 FA 61 FD | 	getqy	result1
23bf8     FD FA 81 F6 | 	negc	result1, result1
23bfc     13 27 52 F6 | 	abs	local01, local01 wc
23c00     0A 26 16 FD | 	qdiv	local01, #10
23c04                 | '     q:=48+q
23c04     30 FA 05 F1 | 	add	result1, #48
23c08                 | '     n_string[pos]:=q
23c08     14 27 02 F6 | 	mov	local01, local02
23c0c     4D E4 05 F1 | 	add	objptr, #77
23c10     F2 26 02 F1 | 	add	local01, objptr
23c14     13 FB 41 FC | 	wrbyte	result1, local01
23c18                 | '     j:=j/10
23c18     4D E4 85 F1 | 	sub	objptr, #77
23c1c                 | '     pos-=1
23c1c     01 28 86 F1 | 	sub	local02, #1
23c20     18 26 62 FD | 	getqx	local01
23c24     13 27 82 F6 | 	negc	local01, local01
23c28     B8 FF 9F FD | 	jmp	#LR__2831
23c2c                 | LR__2832
23c2c                 | LR__2833
23c2c                 | '   repeat while n_string[0]==48
23c2c                 | LR__2834
23c2c     4D E4 05 F1 | 	add	objptr, #77
23c30     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c34     4D E4 85 F1 | 	sub	objptr, #77
23c38     30 16 0E F2 | 	cmp	arg03, #48 wz
23c3c     20 00 90 5D |  if_ne	jmp	#LR__2835
23c40                 | '     bytemove(@n_string,@n_string+1,12)
23c40     4D E4 05 F1 | 	add	objptr, #77
23c44     F2 12 02 F6 | 	mov	arg01, objptr
23c48     F2 14 02 F6 | 	mov	arg02, objptr
23c4c     4D E4 85 F1 | 	sub	objptr, #77
23c50     01 14 06 F1 | 	add	arg02, #1
23c54     0C 16 06 F6 | 	mov	arg03, #12
23c58     38 11 B0 FD | 	call	#__system____builtin_memmove
23c5c     CC FF 9F FD | 	jmp	#LR__2834
23c60                 | LR__2835
23c60                 | ' 
23c60                 | '   if k==45
23c60     2D 2A 0E F2 | 	cmp	local03, #45 wz
23c64     28 00 90 5D |  if_ne	jmp	#LR__2836
23c68                 | '      bytemove(@n_string+1,@n_string,12)
23c68     4D E4 05 F1 | 	add	objptr, #77
23c6c     F2 12 02 F6 | 	mov	arg01, objptr
23c70     01 12 06 F1 | 	add	arg01, #1
23c74     F2 14 02 F6 | 	mov	arg02, objptr
23c78     4D E4 85 F1 | 	sub	objptr, #77
23c7c     0C 16 06 F6 | 	mov	arg03, #12
23c80     10 11 B0 FD | 	call	#__system____builtin_memmove
23c84                 | '      n_string[0]:=k
23c84     4D E4 05 F1 | 	add	objptr, #77
23c88     F2 2A 42 FC | 	wrbyte	local03, objptr
23c8c     4D E4 85 F1 | 	sub	objptr, #77
23c90                 | LR__2836
23c90                 | LR__2837
23c90                 | ' 
23c90                 | ' q:=@n_string
23c90     4D E4 05 F1 | 	add	objptr, #77
23c94     F2 FA 01 F6 | 	mov	result1, objptr
23c98     4D E4 85 F1 | 	sub	objptr, #77
23c9c                 | ' return q
23c9c     A7 F0 03 F6 | 	mov	ptra, fp
23ca0     B2 00 A0 FD | 	call	#popregs_
23ca4                 | _hg010b_spin2_inttostr_ret
23ca4     2D 00 64 FD | 	ret
23ca8                 | 
23ca8                 | ' 
23ca8                 | ' '**********************************************************************************
23ca8                 | ' '
23ca8                 | ' '        Blitting
23ca8                 | ' '
23ca8                 | ' '**********************************************************************************
23ca8                 | ' 
23ca8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
23ca8                 | _hg010b_spin2_blit
23ca8     18 4A 05 F6 | 	mov	COUNT_, #24
23cac     A8 00 A0 FD | 	call	#pushregs_
23cb0     09 27 02 F6 | 	mov	local01, arg01
23cb4     0A 29 02 F6 | 	mov	local02, arg02
23cb8     0B 2B 02 F6 | 	mov	local03, arg03
23cbc     0C 2D 02 F6 | 	mov	local04, arg04
23cc0     0D 2F 02 F6 | 	mov	local05, arg05
23cc4     0E 31 02 F6 | 	mov	local06, arg06
23cc8     0F 33 02 F6 | 	mov	local07, arg07
23ccc     10 35 02 F6 | 	mov	local08, arg08
23cd0     11 37 02 F6 | 	mov	local09, arg09
23cd4     12 39 02 F6 | 	mov	local10, arg10
23cd8                 | ' 
23cd8                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
23cd8     00 04 00 FF 
23cdc     00 26 56 F2 | 	cmps	local01, ##524288 wc
23ce0     00 04 00 3F 
23ce4     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
23ce8     7C 01 90 CD |  if_b	jmp	#LR__2844
23cec     16 29 5A F2 | 	cmps	local02, local04 wcz
23cf0     14 3B 02 16 |  if_a	mov	local11, local02
23cf4     16 29 02 16 |  if_a	mov	local02, local04
23cf8     1D 2D 02 16 |  if_a	mov	local04, local11
23cfc     17 2B 5A F2 | 	cmps	local03, local05 wcz
23d00     15 3B 02 16 |  if_a	mov	local11, local03
23d04     17 2B 02 16 |  if_a	mov	local03, local05
23d08     18 2B 02 FD | 	qmul	local03, local06
23d0c                 | '   if x1a>x2a
23d0c                 | '     x1a,x2a:=x2a,x1a
23d0c                 | '   if y1a>y2a
23d0c                 | '     y1a,y2a:=y2a,y1a  
23d0c     1D 2F 02 16 |  if_a	mov	local05, local11
23d10                 | ' 
23d10                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
23d10     19 3D 02 F6 | 	mov	local12, local07
23d14     14 3D 02 F1 | 	add	local12, local02
23d18     18 3A 62 FD | 	getqx	local11
23d1c     1C 37 02 FD | 	qmul	local09, local10
23d20     1D 3D 02 F1 | 	add	local12, local11
23d24     13 3F 02 F6 | 	mov	local13, local01
23d28     1A 3F 02 F1 | 	add	local13, local08
23d2c     18 3A 62 FD | 	getqx	local11
23d30     1D 3F 02 F1 | 	add	local13, local11
23d34     1F 3D 5A F2 | 	cmps	local12, local13 wcz
23d38     98 00 90 ED |  if_be	jmp	#LR__2841
23d3c                 | '     repeat y from y1a to y2a
23d3c     15 41 02 F6 | 	mov	local14, local03
23d40     15 2F 52 F2 | 	cmps	local05, local03 wc
23d44     01 42 86 F6 | 	negc	local15, #1
23d48     17 45 02 F6 | 	mov	local16, local05
23d4c     21 45 02 F1 | 	add	local16, local15
23d50     0B 00 00 FF 
23d54     CC E4 05 F1 | 	add	objptr, ##5836
23d58                 | LR__2840
23d58     18 41 02 FD | 	qmul	local14, local06
23d5c                 | '   '    writeln(string("I am here"))
23d5c                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
23d5c     13 15 02 F6 | 	mov	arg02, local01
23d60     16 17 02 F6 | 	mov	arg03, local04
23d64     14 17 82 F1 | 	sub	arg03, local02
23d68     01 16 06 F1 | 	add	arg03, #1
23d6c     F6 03 00 FF 
23d70     00 12 06 F6 | 	mov	arg01, ##519168
23d74     18 3E 62 FD | 	getqx	local13
23d78     1F 15 02 F1 | 	add	arg02, local13
23d7c     14 15 02 F1 | 	add	arg02, local02
23d80     B0 04 B0 FD | 	call	#_psram_spin2_read1
23d84     1B 3F 02 F6 | 	mov	local13, local09
23d88     15 3F 82 F1 | 	sub	local13, local03
23d8c     20 3F 02 F1 | 	add	local13, local14
23d90     1C 3F 02 FD | 	qmul	local13, local10
23d94                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
23d94     19 15 02 F6 | 	mov	arg02, local07
23d98     16 17 02 F6 | 	mov	arg03, local04
23d9c     14 17 82 F1 | 	sub	arg03, local02
23da0     01 16 06 F1 | 	add	arg03, #1
23da4     F6 03 00 FF 
23da8     00 12 06 F6 | 	mov	arg01, ##519168
23dac     18 3E 62 FD | 	getqx	local13
23db0     1F 15 02 F1 | 	add	arg02, local13
23db4     1A 15 02 F1 | 	add	arg02, local08
23db8     14 05 B0 FD | 	call	#_psram_spin2_write
23dbc     21 41 02 F1 | 	add	local14, local15
23dc0     22 41 0A F2 | 	cmp	local14, local16 wz
23dc4     90 FF 9F 5D |  if_ne	jmp	#LR__2840
23dc8     0B 00 00 FF 
23dcc     CC E4 85 F1 | 	sub	objptr, ##5836
23dd0     94 00 90 FD | 	jmp	#LR__2843
23dd4                 | LR__2841
23dd4                 | '   else
23dd4                 | '     repeat y from y2a to y1a
23dd4     17 41 02 F6 | 	mov	local14, local05
23dd8     17 2B 52 F2 | 	cmps	local03, local05 wc
23ddc     01 46 86 F6 | 	negc	local17, #1
23de0     15 49 02 F6 | 	mov	local18, local03
23de4     23 49 02 F1 | 	add	local18, local17
23de8     0B 00 00 FF 
23dec     CC E4 05 F1 | 	add	objptr, ##5836
23df0                 | LR__2842
23df0     18 41 02 FD | 	qmul	local14, local06
23df4                 | '  '     writeln(string("I am there"))
23df4                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
23df4     13 15 02 F6 | 	mov	arg02, local01
23df8     16 17 02 F6 | 	mov	arg03, local04
23dfc     14 17 82 F1 | 	sub	arg03, local02
23e00     01 16 06 F1 | 	add	arg03, #1
23e04     F6 03 00 FF 
23e08     00 12 06 F6 | 	mov	arg01, ##519168
23e0c     18 44 62 FD | 	getqx	local16
23e10     22 15 02 F1 | 	add	arg02, local16
23e14     14 15 02 F1 | 	add	arg02, local02
23e18     18 04 B0 FD | 	call	#_psram_spin2_read1
23e1c     1B 45 02 F6 | 	mov	local16, local09
23e20     15 45 82 F1 | 	sub	local16, local03
23e24     20 45 02 F1 | 	add	local16, local14
23e28     1C 45 02 FD | 	qmul	local16, local10
23e2c                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23e2c     19 15 02 F6 | 	mov	arg02, local07
23e30     16 17 02 F6 | 	mov	arg03, local04
23e34     14 17 82 F1 | 	sub	arg03, local02
23e38     01 16 06 F1 | 	add	arg03, #1
23e3c     F6 03 00 FF 
23e40     00 12 06 F6 | 	mov	arg01, ##519168
23e44     18 44 62 FD | 	getqx	local16
23e48     22 15 02 F1 | 	add	arg02, local16
23e4c     1A 15 02 F1 | 	add	arg02, local08
23e50     7C 04 B0 FD | 	call	#_psram_spin2_write
23e54     23 41 02 F1 | 	add	local14, local17
23e58     24 41 0A F2 | 	cmp	local14, local18 wz
23e5c     90 FF 9F 5D |  if_ne	jmp	#LR__2842
23e60     0B 00 00 FF 
23e64     CC E4 85 F1 | 	sub	objptr, ##5836
23e68                 | LR__2843
23e68                 | LR__2844
23e68                 | '     
23e68                 | ' if ((f>=$80000) && (t<$80000)) 
23e68     00 04 00 FF 
23e6c     00 26 56 F2 | 	cmps	local01, ##524288 wc
23e70     80 00 90 CD |  if_b	jmp	#LR__2846
23e74     00 04 00 FF 
23e78     00 32 56 F2 | 	cmps	local07, ##524288 wc
23e7c     74 00 90 3D |  if_ae	jmp	#LR__2846
23e80                 | '   repeat y from y1a to y2a
23e80     15 41 02 F6 | 	mov	local14, local03
23e84     15 2F 52 F2 | 	cmps	local05, local03 wc
23e88     01 4A 86 F6 | 	negc	local19, #1
23e8c     17 4D 02 F6 | 	mov	local20, local05
23e90     25 4D 02 F1 | 	add	local20, local19
23e94     0B 00 00 FF 
23e98     CC E4 05 F1 | 	add	objptr, ##5836
23e9c                 | LR__2845
23e9c     1B 49 02 F6 | 	mov	local18, local09
23ea0     15 49 82 F1 | 	sub	local18, local03
23ea4     20 49 02 F1 | 	add	local18, local14
23ea8     1C 49 02 FD | 	qmul	local18, local10
23eac                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
23eac     19 13 02 F6 | 	mov	arg01, local07
23eb0     18 48 62 FD | 	getqx	local18
23eb4     18 41 02 FD | 	qmul	local14, local06
23eb8     24 13 02 F1 | 	add	arg01, local18
23ebc     1A 13 02 F1 | 	add	arg01, local08
23ec0     13 15 02 F6 | 	mov	arg02, local01
23ec4     16 17 02 F6 | 	mov	arg03, local04
23ec8     14 17 82 F1 | 	sub	arg03, local02
23ecc     01 16 06 F1 | 	add	arg03, #1
23ed0     18 48 62 FD | 	getqx	local18
23ed4     24 15 02 F1 | 	add	arg02, local18
23ed8     14 15 02 F1 | 	add	arg02, local02
23edc     54 03 B0 FD | 	call	#_psram_spin2_read1
23ee0     25 41 02 F1 | 	add	local14, local19
23ee4     26 41 0A F2 | 	cmp	local14, local20 wz
23ee8     B0 FF 9F 5D |  if_ne	jmp	#LR__2845
23eec     0B 00 00 FF 
23ef0     CC E4 85 F1 | 	sub	objptr, ##5836
23ef4                 | LR__2846
23ef4                 | '     
23ef4                 | ' if ((f<$80000) && (t>=$80000)) 
23ef4     00 04 00 FF 
23ef8     00 26 56 F2 | 	cmps	local01, ##524288 wc
23efc     84 00 90 3D |  if_ae	jmp	#LR__2848
23f00     00 04 00 FF 
23f04     00 32 56 F2 | 	cmps	local07, ##524288 wc
23f08     78 00 90 CD |  if_b	jmp	#LR__2848
23f0c                 | '   t:=t & $FFFFFFF
23f0c     7C 32 06 F4 | 	bitl	local07, #124
23f10                 | '   repeat y from y1a to y2a
23f10     15 41 02 F6 | 	mov	local14, local03
23f14     15 2F 52 F2 | 	cmps	local05, local03 wc
23f18     01 4E 86 F6 | 	negc	local21, #1
23f1c     17 51 02 F6 | 	mov	local22, local05
23f20     27 51 02 F1 | 	add	local22, local21
23f24     0B 00 00 FF 
23f28     CC E4 05 F1 | 	add	objptr, ##5836
23f2c                 | LR__2847
23f2c     18 41 02 FD | 	qmul	local14, local06
23f30                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23f30     13 13 02 F6 | 	mov	arg01, local01
23f34     1B 4D 02 F6 | 	mov	local20, local09
23f38     15 4D 82 F1 | 	sub	local20, local03
23f3c     20 4D 02 F1 | 	add	local20, local14
23f40     18 4A 62 FD | 	getqx	local19
23f44     1C 4D 02 FD | 	qmul	local20, local10
23f48     25 13 02 F1 | 	add	arg01, local19
23f4c     14 13 02 F1 | 	add	arg01, local02
23f50     19 15 02 F6 | 	mov	arg02, local07
23f54     16 17 02 F6 | 	mov	arg03, local04
23f58     14 17 82 F1 | 	sub	arg03, local02
23f5c     01 16 06 F1 | 	add	arg03, #1
23f60     18 4C 62 FD | 	getqx	local20
23f64     26 15 02 F1 | 	add	arg02, local20
23f68     1A 15 02 F1 | 	add	arg02, local08
23f6c     60 03 B0 FD | 	call	#_psram_spin2_write
23f70     27 41 02 F1 | 	add	local14, local21
23f74     28 41 0A F2 | 	cmp	local14, local22 wz
23f78     B0 FF 9F 5D |  if_ne	jmp	#LR__2847
23f7c     0B 00 00 FF 
23f80     CC E4 85 F1 | 	sub	objptr, ##5836
23f84                 | LR__2848
23f84                 | '     
23f84                 | ' if ((f<$80000) && (t<$80000)) 
23f84     00 04 00 FF 
23f88     00 26 56 F2 | 	cmps	local01, ##524288 wc
23f8c     00 04 00 CF 
23f90     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
23f94     64 00 90 3D |  if_ae	jmp	#LR__2850
23f98                 | '   repeat y from y1a to y2a
23f98     15 41 02 F6 | 	mov	local14, local03
23f9c     15 2F 52 F2 | 	cmps	local05, local03 wc
23fa0     01 52 86 F6 | 	negc	local23, #1
23fa4     17 55 02 F6 | 	mov	local24, local05
23fa8     29 55 02 F1 | 	add	local24, local23
23fac                 | LR__2849
23fac     18 41 02 FD | 	qmul	local14, local06
23fb0                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23fb0     13 13 02 F6 | 	mov	arg01, local01
23fb4     1B 51 02 F6 | 	mov	local22, local09
23fb8     15 51 82 F1 | 	sub	local22, local03
23fbc     20 51 02 F1 | 	add	local22, local14
23fc0     18 4E 62 FD | 	getqx	local21
23fc4     1C 51 02 FD | 	qmul	local22, local10
23fc8     27 13 02 F1 | 	add	arg01, local21
23fcc     14 13 02 F1 | 	add	arg01, local02
23fd0     19 15 02 F6 | 	mov	arg02, local07
23fd4     16 17 02 F6 | 	mov	arg03, local04
23fd8     14 17 82 F1 | 	sub	arg03, local02
23fdc     01 16 06 F1 | 	add	arg03, #1
23fe0     18 50 62 FD | 	getqx	local22
23fe4     28 15 02 F1 | 	add	arg02, local22
23fe8     1A 15 02 F1 | 	add	arg02, local08
23fec     A4 0D B0 FD | 	call	#__system____builtin_memmove
23ff0     29 41 02 F1 | 	add	local14, local23
23ff4     2A 41 0A F2 | 	cmp	local14, local24 wz
23ff8     B0 FF 9F 5D |  if_ne	jmp	#LR__2849
23ffc                 | LR__2850
23ffc     A7 F0 03 F6 | 	mov	ptra, fp
24000     B2 00 A0 FD | 	call	#popregs_
24004                 | _hg010b_spin2_blit_ret
24004     2D 00 64 FD | 	ret
24008                 | 
24008                 | ' 
24008                 | ' '..............................................................................
24008                 | ' 
24008                 | ' {{
24008                 | ' }}
24008                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
24008                 | _psram_spin2_startx
24008     04 4A 05 F6 | 	mov	COUNT_, #4
2400c     A8 00 A0 FD | 	call	#pushregs_
24010     09 27 02 F6 | 	mov	local01, arg01
24014     0B 29 02 F6 | 	mov	local02, arg03
24018     0C 2B 02 F6 | 	mov	local03, arg04
2401c                 | '     stop() ' restart driver if required
2401c     54 01 B0 FD | 	call	#_psram_spin2_stop
24020     00 26 0E F2 | 	cmp	local01, #0 wz
24024     14 26 06 AB |  if_e	rdlong	local01, #20
24028     13 15 52 F6 | 	abs	arg02, local01 wc
2402c     A1 07 00 FF 
24030     40 14 16 FD | 	qdiv	arg02, ##1000000
24034                 | ' 
24034                 | '     ' use current frequency if none specified
24034                 | ' 
24034                 | '     if freq == 0 
24034                 | '         freq := clkfreq 
24034                 | ' 
24034                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
24034                 | ' 
24034                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
24034                 | '     if burst < 0
24034                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
24034     18 14 62 FD | 	getqx	arg02
24038     0A 19 82 F6 | 	negc	arg04, arg02
2403c     03 18 66 F0 | 	shl	arg04, #3
24040     84 18 86 F1 | 	sub	arg04, #132
24044     04 18 46 F0 | 	shr	arg04, #4
24048     04 18 66 F0 | 	shl	arg04, #4
2404c     00 18 56 F2 | 	cmps	arg04, #0 wc
24050     0E FA 65 C6 |  if_b	neg	result1, #14
24054     10 01 90 CD |  if_b	jmp	#LR__2863
24058                 | ' 
24058                 | '     ' compute the input delay
24058                 | ' 
24058                 | '     if delay <= 0
24058     01 28 56 F2 | 	cmps	local02, #1 wc
2405c     10 00 90 3D |  if_ae	jmp	#LR__2860
24060                 | '         delay := lookupDelay(freq)
24060     13 13 02 F6 | 	mov	arg01, local01
24064     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
24068     FD 28 02 F6 | 	mov	local02, result1
2406c     04 00 90 FD | 	jmp	#LR__2861
24070                 | LR__2860
24070                 | '     else
24070                 | '         delay <#= $f ' limit to 15
24070     0F 28 66 F3 | 	fles	local02, #15
24074                 | LR__2861
24074                 | ' 
24074                 | '     ' create our lock
24074                 | ' 
24074                 | '     driverlock := LOCKNEW()  
24074     00 FA 05 F6 | 	mov	result1, #0
24078     04 FA 61 FD | 	locknew	result1
2407c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24080     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
24084                 | '     if driverlock == -1
24084     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24088     FF FF 7F FF 
2408c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24090                 | '         return ERR_NO_LOCK
24090     1A FA 65 A6 |  if_e	neg	result1, #26
24094     D0 00 90 AD |  if_e	jmp	#LR__2863
24098                 | ' 
24098                 | '     ' patch in the proper data and HUB addresses to the startup structure
24098                 | ' 
24098                 | '     long[@startupData][0]:=clkfreq
24098     14 26 06 FB | 	rdlong	local01, #20
2409c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
240a0     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
240a4                 | ' '    long[@startupData][1]:=$1000_0000
240a4                 | '     long[@startupData][5]:=@deviceData
240a4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
240a8     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
240ac     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
240b0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
240b4     14 14 06 F1 | 	add	arg02, #20
240b8     0A 27 62 FC | 	wrlong	local01, arg02
240bc                 | '     long[@startupData][6]:=@qosData
240bc     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
240c0     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
240c4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
240c8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
240cc     18 14 06 F1 | 	add	arg02, #24
240d0     0A 27 62 FC | 	wrlong	local01, arg02
240d4                 | '     long[@startupData][7]:=$7FF00
240d4     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
240d8     1C 26 06 F1 | 	add	local01, #28
240dc     FF 03 80 FF 
240e0     13 01 6A FC | 	wrlong	##524032, local01
240e4                 | ' 
240e4                 | '     ' setup some default bank and QoS parameter values
240e4                 | ' 
240e4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
240e4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
240e8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
240ec     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
240f0     10 18 66 F0 | 	shl	arg04, #16
240f4     0C 28 66 F0 | 	shl	local02, #12
240f8     14 19 42 F5 | 	or	arg04, local02
240fc     18 18 46 F5 | 	or	arg04, #24
24100     0C 15 02 F6 | 	mov	arg02, arg04
24104     02 16 06 F6 | 	mov	arg03, #2
24108     A0 00 A0 FD | 	call	#\builtin_longfill_
2410c                 | '     longfill(@qosData, $FFFF0000, 8)
2410c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24110     07 16 06 F6 | 	mov	arg03, #7
24114     28 16 62 FD | 	setq	arg03
24118     80 FF FF FF 
2411c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
24120                 | ' 
24120                 | '     ' get the address of the PSRAM memory driver so we can start it
24120                 | ' 
24120                 | '     driverAddr:= driver.getDriverAddr()
24120                 | '     return @driver_start
24120     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
24124     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
24128     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2412c                 | ' 
2412c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2412c                 | ' 
2412c                 | '     if desiredcog < 0
2412c     00 2A 56 F2 | 	cmps	local03, #0 wc
24130                 | '         desiredcog := NEWCOG
24130     10 2A 06 C6 |  if_b	mov	local03, #16
24134                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
24134     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
24138     15 2D 02 F6 | 	mov	local04, local03
2413c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
24140     0A 2D F2 FC | 	coginit	local04, arg02 wc
24144     01 2C 66 C6 |  if_b	neg	local04, #1
24148     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2414c     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
24150                 | '     repeat until long[@startupData] == 0 
24150     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
24154                 | LR__2862
24154     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
24158     F8 FF 9F 5D |  if_ne	jmp	#LR__2862
2415c                 | ' 
2415c                 | '     return drivercog
2415c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
24160     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
24164     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24168                 | LR__2863
24168     A7 F0 03 F6 | 	mov	ptra, fp
2416c     B2 00 A0 FD | 	call	#popregs_
24170                 | _psram_spin2_startx_ret
24170     2D 00 64 FD | 	ret
24174                 | 
24174                 | ' 
24174                 | ' '..............................................................................
24174                 | ' 
24174                 | ' {{
24174                 | ' }}
24174                 | ' PUB stop() : i
24174                 | _psram_spin2_stop
24174     00 00 06 F6 | 	mov	_var01, #0
24178                 | '     if drivercog <> -1
24178     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2417c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24180     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24184     FF FF 7F FF 
24188     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
2418c     70 00 90 AD |  if_e	jmp	#LR__2873
24190                 | '         cogstop(drivercog) ' a rather brutal stop
24190     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24194     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24198     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2419c     03 12 62 FD | 	cogstop	arg01
241a0     97 26 48 FB | 	callpa	#(@LR__2872-@LR__2870)>>2,fcache_load_ptr_
241a4                 | '         repeat i from 0 to 7
241a4                 | LR__2870
241a4                 | '             if long[$7FF00][i*3] < 0
241a4     00 FB 01 F6 | 	mov	result1, _var01
241a8     01 FA 65 F0 | 	shl	result1, #1
241ac     00 FB 01 F1 | 	add	result1, _var01
241b0     02 FA 65 F0 | 	shl	result1, #2
241b4     FF 03 00 FF 
241b8     00 FB 05 F1 | 	add	result1, ##524032
241bc     FD FA 01 FB | 	rdlong	result1, result1
241c0     00 FA 55 F2 | 	cmps	result1, #0 wc
241c4     1C 00 90 3D |  if_ae	jmp	#LR__2871
241c8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
241c8     00 FB 01 F6 | 	mov	result1, _var01
241cc     01 FA 65 F0 | 	shl	result1, #1
241d0     00 FB 01 F1 | 	add	result1, _var01
241d4     02 FA 65 F0 | 	shl	result1, #2
241d8     FF 03 00 FF 
241dc     00 FB 05 F1 | 	add	result1, ##524032
241e0     FD 20 68 FC | 	wrlong	#16, result1
241e4                 | LR__2871
241e4     01 00 06 F1 | 	add	_var01, #1
241e8     08 00 56 F2 | 	cmps	_var01, #8 wc
241ec     B4 FF 9F CD |  if_b	jmp	#LR__2870
241f0                 | LR__2872
241f0                 | '         drivercog := -1
241f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
241f4     FF FF FF FF 
241f8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
241fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24200                 | LR__2873
24200                 | '     if driverlock <> -1
24200     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24204     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
24208     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2420c     FF FF 7F FF 
24210     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24214                 | '         LOCKRET(driverlock)
24214     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
24218     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
2421c     05 12 62 5D |  if_ne	lockret	arg01
24220                 | '         driverlock := -1
24220     FF FF FF 5F 
24224     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
24228     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2422c     00 FB 01 F6 | 	mov	result1, _var01
24230                 | _psram_spin2_stop_ret
24230     2D 00 64 FD | 	ret
24234                 | 
24234                 | ' 
24234                 | ' '..............................................................................
24234                 | ' 
24234                 | ' {{
24234                 | ' }}
24234                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
24234                 | _psram_spin2_read1
24234                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24234                 | '     if drivercog == -1 ' driver must be running
24234     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24238     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2423c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24240     FF FF 7F FF 
24244     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
24248                 | '         return ERR_INACTIVE
24248     0F FA 65 A6 |  if_e	neg	result1, #15
2424c     7C 00 90 AD |  if_e	jmp	#LR__2881
24250                 | '     if count == 0 ' don't even bother reading
24250     00 16 0E F2 | 	cmp	arg03, #0 wz
24254                 | '         return 0
24254     00 FA 05 A6 |  if_e	mov	result1, #0
24258     70 00 90 AD |  if_e	jmp	#LR__2881
2425c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2425c     00 FA 05 F6 | 	mov	result1, #0
24260     01 FA 61 FD | 	cogid	result1
24264     FD 00 02 F6 | 	mov	_var01, result1
24268     01 00 66 F0 | 	shl	_var01, #1
2426c     FD 00 02 F1 | 	add	_var01, result1
24270     02 00 66 F0 | 	shl	_var01, #2
24274     FF 03 00 FF 
24278     00 03 06 F6 | 	mov	_var02, ##524032
2427c     00 03 02 F1 | 	add	_var02, _var01
24280                 | '     if long[mailbox] < 0
24280     01 01 02 FB | 	rdlong	_var01, _var02
24284     00 00 56 F2 | 	cmps	_var01, #0 wc
24288                 | '         return ERR_MAILBOX_BUSY
24288     1C FA 65 C6 |  if_b	neg	result1, #28
2428c     3C 00 90 CD |  if_b	jmp	#LR__2881
24290                 | '     long[mailbox][2] := count
24290     08 02 06 F1 | 	add	_var02, #8
24294     01 17 62 FC | 	wrlong	arg03, _var02
24298                 | '     long[mailbox][1] := dstHubAddr
24298     04 02 86 F1 | 	sub	_var02, #4
2429c     01 13 62 FC | 	wrlong	arg01, _var02
242a0     04 02 86 F1 | 	sub	_var02, #4
242a4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
242a4     0A 05 02 F6 | 	mov	_var03, arg02
242a8     D9 04 06 F4 | 	bitl	_var03, #217
242ac     00 00 58 FF 
242b0     00 00 06 F6 | 	mov	_var01, ##-1342177280
242b4     02 01 02 F1 | 	add	_var01, _var03
242b8     01 01 62 FC | 	wrlong	_var01, _var02
242bc                 | '     repeat
242bc                 | LR__2880
242bc                 | '         result := long[mailbox]    
242bc     01 05 02 FB | 	rdlong	_var03, _var02
242c0     00 04 56 F2 | 	cmps	_var03, #0 wc
242c4     F4 FF 9F CD |  if_b	jmp	#LR__2880
242c8                 | '     while result < 0   
242c8                 | '     return -result                       'return success or error
242c8     02 FB 61 F6 | 	neg	result1, _var03
242cc                 | LR__2881
242cc                 | _psram_spin2_read1_ret
242cc     2D 00 64 FD | 	ret
242d0                 | 
242d0                 | ' 
242d0                 | ' '..............................................................................
242d0                 | ' 
242d0                 | ' {{
242d0                 | ' }}
242d0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
242d0                 | _psram_spin2_write
242d0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
242d0                 | '     if drivercog == -1 ' driver must be running
242d0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
242d4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
242d8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
242dc     FF FF 7F FF 
242e0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
242e4                 | '         return ERR_INACTIVE
242e4     0F FA 65 A6 |  if_e	neg	result1, #15
242e8     7C 00 90 AD |  if_e	jmp	#LR__2891
242ec                 | '     if count == 0 ' don't even bother writing
242ec     00 16 0E F2 | 	cmp	arg03, #0 wz
242f0                 | '         return 0
242f0     00 FA 05 A6 |  if_e	mov	result1, #0
242f4     70 00 90 AD |  if_e	jmp	#LR__2891
242f8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
242f8     00 FA 05 F6 | 	mov	result1, #0
242fc     01 FA 61 FD | 	cogid	result1
24300     FD 00 02 F6 | 	mov	_var01, result1
24304     01 00 66 F0 | 	shl	_var01, #1
24308     FD 00 02 F1 | 	add	_var01, result1
2430c     02 00 66 F0 | 	shl	_var01, #2
24310     FF 03 00 FF 
24314     00 03 06 F6 | 	mov	_var02, ##524032
24318     00 03 02 F1 | 	add	_var02, _var01
2431c                 | '     if long[mailbox] < 0
2431c     01 01 02 FB | 	rdlong	_var01, _var02
24320     00 00 56 F2 | 	cmps	_var01, #0 wc
24324                 | '         return ERR_MAILBOX_BUSY
24324     1C FA 65 C6 |  if_b	neg	result1, #28
24328     3C 00 90 CD |  if_b	jmp	#LR__2891
2432c                 | '     long[mailbox][2] := count
2432c     08 02 06 F1 | 	add	_var02, #8
24330     01 17 62 FC | 	wrlong	arg03, _var02
24334                 | '     long[mailbox][1] := srcHubAddr
24334     04 02 86 F1 | 	sub	_var02, #4
24338     01 13 62 FC | 	wrlong	arg01, _var02
2433c     04 02 86 F1 | 	sub	_var02, #4
24340                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
24340     0A 05 02 F6 | 	mov	_var03, arg02
24344     D9 04 06 F4 | 	bitl	_var03, #217
24348     00 00 78 FF 
2434c     00 00 06 F6 | 	mov	_var01, ##-268435456
24350     02 01 02 F1 | 	add	_var01, _var03
24354     01 01 62 FC | 	wrlong	_var01, _var02
24358                 | '     repeat
24358                 | LR__2890
24358                 | '         result := long[mailbox]    
24358     01 05 02 FB | 	rdlong	_var03, _var02
2435c     00 04 56 F2 | 	cmps	_var03, #0 wc
24360     F4 FF 9F CD |  if_b	jmp	#LR__2890
24364                 | '     while result < 0   
24364                 | '     return -result                       'return success or error
24364     02 FB 61 F6 | 	neg	result1, _var03
24368                 | LR__2891
24368                 | _psram_spin2_write_ret
24368     2D 00 64 FD | 	ret
2436c                 | 
2436c                 | ' 
2436c                 | ' ' generalized fill
2436c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
2436c                 | _psram_spin2_fill
2436c     09 01 02 F6 | 	mov	_var01, arg01
24370     0A 03 02 F6 | 	mov	_var02, arg02
24374     0B 05 02 F6 | 	mov	_var03, arg03
24378     0D 07 02 F6 | 	mov	_var04, arg05
2437c                 | '     case datasize 
2437c     01 06 86 F1 | 	sub	_var04, #1
24380     04 06 26 F3 | 	fle	_var04, #4
24384     30 06 62 FD | 	jmprel	_var04
24388                 | LR__2900
24388     10 00 90 FD | 	jmp	#LR__2901
2438c     18 00 90 FD | 	jmp	#LR__2902
24390     2C 00 90 FD | 	jmp	#LR__2904
24394     1C 00 90 FD | 	jmp	#LR__2903
24398     24 00 90 FD | 	jmp	#LR__2904
2439c                 | LR__2901
2439c                 | '         1: req := driver.R_WRITEBYTE
2439c     00 00 60 FF 
243a0     00 08 06 F6 | 	mov	_var05, ##-1073741824
243a4     20 00 90 FD | 	jmp	#LR__2905
243a8                 | LR__2902
243a8                 | '         2: req := driver.R_WRITEWORD
243a8     00 00 68 FF 
243ac     00 08 06 F6 | 	mov	_var05, ##-805306368
243b0     14 00 90 FD | 	jmp	#LR__2905
243b4                 | LR__2903
243b4                 | '         4: req := driver.R_WRITELONG
243b4     00 00 70 FF 
243b8     00 08 06 F6 | 	mov	_var05, ##-536870912
243bc     08 00 90 FD | 	jmp	#LR__2905
243c0                 | LR__2904
243c0                 | '         other : return ERR_INVALID
243c0     06 FA 65 F6 | 	neg	result1, #6
243c4     94 00 90 FD | 	jmp	#LR__2907
243c8                 | LR__2905
243c8                 | '     if count == 0   ' nothing to do
243c8     00 04 0E F2 | 	cmp	_var03, #0 wz
243cc                 | '         return 0
243cc     00 FA 05 A6 |  if_e	mov	result1, #0
243d0     88 00 90 AD |  if_e	jmp	#LR__2907
243d4                 | '     if drivercog == -1
243d4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
243d8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
243dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
243e0     FF FF 7F FF 
243e4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
243e8                 | '         return ERR_INACTIVE
243e8     0F FA 65 A6 |  if_e	neg	result1, #15
243ec     6C 00 90 AD |  if_e	jmp	#LR__2907
243f0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
243f0     00 FA 05 F6 | 	mov	result1, #0
243f4     01 FA 61 FD | 	cogid	result1
243f8     FD 06 02 F6 | 	mov	_var04, result1
243fc     01 06 66 F0 | 	shl	_var04, #1
24400     FD 06 02 F1 | 	add	_var04, result1
24404     02 06 66 F0 | 	shl	_var04, #2
24408     FF 03 00 FF 
2440c     00 0B 06 F6 | 	mov	_var06, ##524032
24410     03 0B 02 F1 | 	add	_var06, _var04
24414                 | '     if long[mailbox] < 0
24414     05 07 02 FB | 	rdlong	_var04, _var06
24418     00 06 56 F2 | 	cmps	_var04, #0 wc
2441c                 | '         return ERR_MAILBOX_BUSY
2441c     1C FA 65 C6 |  if_b	neg	result1, #28
24420     38 00 90 CD |  if_b	jmp	#LR__2907
24424                 | '     long[mailbox][2] := count
24424     08 0A 06 F1 | 	add	_var06, #8
24428     05 05 62 FC | 	wrlong	_var03, _var06
2442c                 | '     long[mailbox][1] := pattern
2442c     04 0A 86 F1 | 	sub	_var06, #4
24430     05 03 62 FC | 	wrlong	_var02, _var06
24434     04 0A 86 F1 | 	sub	_var06, #4
24438                 | '     long[mailbox] := req + (addr & $1ffffff)
24438     04 0D 02 F6 | 	mov	_var07, _var05
2443c     00 0F 02 F6 | 	mov	_var08, _var01
24440     D9 0E 06 F4 | 	bitl	_var08, #217
24444     07 0D 02 F1 | 	add	_var07, _var08
24448     05 0D 62 FC | 	wrlong	_var07, _var06
2444c                 | '     repeat
2444c                 | LR__2906
2444c                 | '         r := long[mailbox]
2444c     05 0F 02 FB | 	rdlong	_var08, _var06
24450     00 0E 56 F2 | 	cmps	_var08, #0 wc
24454     F4 FF 9F CD |  if_b	jmp	#LR__2906
24458                 | '     while r < 0
24458                 | '     return -r                  ' return 0 for success or negated error code
24458     07 FB 61 F6 | 	neg	result1, _var08
2445c                 | LR__2907
2445c                 | _psram_spin2_fill_ret
2445c     2D 00 64 FD | 	ret
24460                 | 
24460                 | ' 
24460                 | ' '..............................................................................
24460                 | ' 
24460                 | ' {{
24460                 | ' }}
24460                 | ' PUB setQos(cog, qos) : result | mailbox
24460                 | _psram_spin2_setQos
24460     09 01 02 F6 | 	mov	_var01, arg01
24464                 | '     if drivercog == -1 ' driver must be running
24464     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24468     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2446c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24470     FF FF 7F FF 
24474     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24478                 | '         return ERR_INACTIVE
24478     0F FA 65 A6 |  if_e	neg	result1, #15
2447c     9C 00 90 AD |  if_e	jmp	#LR__2914
24480                 | '     if cog < 0 or cog > 7 ' enforce cog id range
24480     00 00 56 F2 | 	cmps	_var01, #0 wc
24484     08 00 90 CD |  if_b	jmp	#LR__2910
24488     08 00 56 F2 | 	cmps	_var01, #8 wc
2448c     08 00 90 CD |  if_b	jmp	#LR__2911
24490                 | LR__2910
24490                 | '         return ERR_INVALID
24490     06 FA 65 F6 | 	neg	result1, #6
24494     84 00 90 FD | 	jmp	#LR__2914
24498                 | LR__2911
24498                 | '     long[@qosData][cog] := qos & !$1ff
24498     FF 15 26 F5 | 	andn	arg02, #511
2449c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
244a0     02 00 66 F0 | 	shl	_var01, #2
244a4     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
244a8     00 15 62 FC | 	wrlong	arg02, _var01
244ac                 | '     mailbox := $7FF00 + drivercog*12
244ac     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
244b0     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
244b4     02 07 02 F6 | 	mov	_var04, _var03
244b8     01 06 66 F0 | 	shl	_var04, #1
244bc     02 07 02 F1 | 	add	_var04, _var03
244c0     02 06 66 F0 | 	shl	_var04, #2
244c4     FF 03 00 FF 
244c8     00 09 06 F6 | 	mov	_var05, ##524032
244cc     03 09 02 F1 | 	add	_var05, _var04
244d0                 | '     repeat until LOCKTRY(driverlock)
244d0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
244d4                 | LR__2912
244d4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
244d8     06 12 72 FD | 	locktry	arg01 wc
244dc     F4 FF 9F 3D |  if_ae	jmp	#LR__2912
244e0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
244e4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
244e4     00 06 06 F6 | 	mov	_var04, #0
244e8     01 06 62 FD | 	cogid	_var04
244ec     00 00 78 FF 
244f0     00 02 06 F6 | 	mov	_var02, ##-268435456
244f4     03 03 02 F1 | 	add	_var02, _var04
244f8     04 03 62 FC | 	wrlong	_var02, _var05
244fc                 | '     repeat while long[mailbox] < 0
244fc                 | LR__2913
244fc     04 03 02 FB | 	rdlong	_var02, _var05
24500     00 02 56 F2 | 	cmps	_var02, #0 wc
24504     F4 FF 9F CD |  if_b	jmp	#LR__2913
24508                 | '     LOCKREL(driverlock)
24508     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2450c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24510     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24514     07 12 72 FD | 	lockrel	arg01 wc
24518     00 FA 05 F6 | 	mov	result1, #0
2451c                 | LR__2914
2451c                 | _psram_spin2_setQos_ret
2451c     2D 00 64 FD | 	ret
24520                 | 
24520                 | ' 
24520                 | ' '..............................................................................
24520                 | ' 
24520                 | ' {{
24520                 | ' }}
24520                 | ' PRI lookupDelay(freq) : delay | profile
24520                 | _psram_spin2_lookupDelay
24520                 | '     profile := @delayTable
24520     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
24524     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
24528                 | '     delay := long[profile][0]
24528     00 03 02 FB | 	rdlong	_var02, _var01
2452c                 | '     repeat while long[profile][1] 
2452c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
24530     97 16 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
24534                 | LR__2920
24534     04 00 06 F1 | 	add	_var01, #4
24538     00 FB 09 FB | 	rdlong	result1, _var01 wz
2453c     04 00 86 F1 | 	sub	_var01, #4
24540     1C 00 90 AD |  if_e	jmp	#LR__2922
24544                 | '         if freq +< long[profile][1] 
24544     04 00 06 F1 | 	add	_var01, #4
24548     00 FB 01 FB | 	rdlong	result1, _var01
2454c     04 00 86 F1 | 	sub	_var01, #4
24550     FD 12 12 F2 | 	cmp	arg01, result1 wc
24554                 | '             quit
24554                 | '         profile += 4
24554     04 00 06 31 |  if_ae	add	_var01, #4
24558                 | '         delay++
24558     01 02 06 31 |  if_ae	add	_var02, #1
2455c     D4 FF 9F 3D |  if_ae	jmp	#LR__2920
24560                 | LR__2921
24560                 | LR__2922
24560     01 FB 01 F6 | 	mov	result1, _var02
24564                 | _psram_spin2_lookupDelay_ret
24564     2D 00 64 FD | 	ret
24568                 | 
24568                 | ' 
24568                 | ' PUB start() : r
24568                 | _usbnew_spin2_start
24568     00 00 06 F6 | 	mov	_var01, #0
2456c                 | '   ifnot driver_cog
2456c     15 00 00 FF 
24570     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
24574     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
24578     15 00 00 FF 
2457c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
24580     38 00 90 5D |  if_ne	jmp	#LR__2930
24584                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
24584     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
24588     10 00 06 F6 | 	mov	_var01, #16
2458c     00 16 06 F6 | 	mov	arg03, #0
24590     28 16 62 FD | 	setq	arg03
24594     0A 01 F2 FC | 	coginit	_var01, arg02 wc
24598     01 00 66 C6 |  if_b	neg	_var01, #1
2459c                 | '     if r >= 0
2459c     00 00 56 F2 | 	cmps	_var01, #0 wc
245a0                 | '       driver_cog := r+1
245a0     00 03 02 36 |  if_ae	mov	_var02, _var01
245a4     01 02 06 31 |  if_ae	add	_var02, #1
245a8     15 00 00 3F 
245ac     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
245b0     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
245b4     15 00 00 3F 
245b8     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
245bc                 | LR__2930
245bc     00 FB 01 F6 | 	mov	result1, _var01
245c0                 | _usbnew_spin2_start_ret
245c0     2D 00 64 FD | 	ret
245c4                 | 
245c4                 | '     '' (Always enabled)
245c4                 | ' 
245c4                 | ' '' Get current pressed state of a keyboard key
245c4                 | ' PUB keystate(key) : r | buf[2],tmp
245c4                 | _usbnew_spin2_keystate
245c4     00 04 06 F6 | 	mov	_var03, #0
245c8                 | '   if key >= $E0 && key < $E8
245c8     E0 12 56 F2 | 	cmps	arg01, #224 wc
245cc     34 00 90 CD |  if_b	jmp	#LR__2940
245d0     E8 12 56 F2 | 	cmps	arg01, #232 wc
245d4     2C 00 90 3D |  if_ae	jmp	#LR__2940
245d8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
245d8     00 FA 05 F6 | 	mov	result1, #0
245dc     13 00 00 FF 
245e0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
245e4     09 07 02 F6 | 	mov	_var04, arg01
245e8     E0 06 86 F1 | 	sub	_var04, #224
245ec     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
245f0     03 09 4A F0 | 	shr	_var05, _var04 wz
245f4     13 00 00 FF 
245f8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
245fc     01 FA 65 56 |  if_ne	neg	result1, #1
24600     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
24604                 | LR__2940
24604                 | '   else
24604                 | '     '' Do this in inline ASM to ensure atomicity
24604                 | '     tmp := @hkbd_report
24604     13 00 00 FF 
24608     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
2460c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
24610                 | '     org
24610     13 00 00 FF 
24614     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
24618     97 1E 48 FB | 	callpa	#(@LR__2942-@LR__2941)>>2,fcache_load_ptr_
2461c                 | LR__2941
2461c 000             | 	org	0
2461c 000 28 02 64 FD | 	setq	#1
24620 001 04 01 02 FB | 	rdlong	_var01, _var05
24624 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
24628 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
2462c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
24630 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
24634 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
24638 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2463c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
24640 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
24644 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
24648 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2464c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
24650 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
24654 00e 01 04 66 A6 |  if_e	neg	_var03, #1
24658 00f             | LR__2942
24658                 | 	orgh
24658     02 FB 01 F6 | 	mov	result1, _var03
2465c                 | _usbnew_spin2_keystate_ret
2465c     2D 00 64 FD | 	ret
24660                 | 
24660                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
24660                 | ' 
24660                 | ' '' Return key event from buffer if there is one
24660                 | ' PUB get_key() : r | tail
24660                 | _usbnew_spin2_get_key
24660                 | '   tail := keyq_tail
24660     0F 00 00 FF 
24664     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
24668     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2466c                 | '   if keyq_head == tail
2466c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
24670     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
24674     0F 00 00 FF 
24678     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2467c     00 03 0A F2 | 	cmp	_var02, _var01 wz
24680                 | '     return 0 ' No event
24680     00 FA 05 A6 |  if_e	mov	result1, #0
24684     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
24688                 | '   r := keyq_data[tail]
24688     00 03 02 F6 | 	mov	_var02, _var01
2468c     02 02 66 F0 | 	shl	_var02, #2
24690     0F 00 00 FF 
24694     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
24698     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2469c     01 FB 01 FB | 	rdlong	result1, _var02
246a0                 | '   if ++tail == KEYQUEUE_SIZE
246a0     01 00 06 F1 | 	add	_var01, #1
246a4     80 00 0E F2 | 	cmp	_var01, #128 wz
246a8                 | '     tail := 0
246a8     00 00 06 A6 |  if_e	mov	_var01, #0
246ac                 | '   keyq_tail := tail
246ac     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
246b0     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
246b4     0F 00 00 FF 
246b8     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
246bc                 | _usbnew_spin2_get_key_ret
246bc     2D 00 64 FD | 	ret
246c0                 | 
246c0                 | ' 
246c0                 | ' '' Emulate mouse movement
246c0                 | ' PUB mouse_move(x,y)
246c0                 | _usbnew_spin2_mouse_move
246c0     02 4A 05 F6 | 	mov	COUNT_, #2
246c4     A8 00 A0 FD | 	call	#pushregs_
246c8     09 27 02 F6 | 	mov	local01, arg01
246cc     0A 29 02 F6 | 	mov	local02, arg02
246d0                 | '   mouse_lock := 1
246d0     14 00 00 FF 
246d4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
246d8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
246dc     14 00 00 FF 
246e0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
246e4                 | '   waitus(2) ' hope driver is now done
246e4     02 12 06 F6 | 	mov	arg01, #2
246e8     E8 0A B0 FD | 	call	#__system___waitus
246ec                 | '   mouse_xacc := x
246ec     14 00 00 FF 
246f0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
246f4     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
246f8                 | '   mouse_yacc := y
246f8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
246fc     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
24700                 | '   if mouse_outptr
24700     04 00 00 FF 
24704     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
24708     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
2470c     0F 00 00 FF 
24710     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
24714     24 00 90 AD |  if_e	jmp	#LR__2950
24718                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
24718     10 28 66 F0 | 	shl	local02, #16
2471c     13 27 32 F9 | 	getword	local01, local01, #0
24720     13 29 42 F5 | 	or	local02, local01
24724     0F 00 00 FF 
24728     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
2472c     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
24730     0F 00 00 FF 
24734     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
24738     13 29 62 FC | 	wrlong	local02, local01
2473c                 | LR__2950
2473c                 | '   mouse_lock := 0
2473c     14 00 00 FF 
24740     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
24744     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
24748     14 00 00 FF 
2474c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
24750     A7 F0 03 F6 | 	mov	ptra, fp
24754     B2 00 A0 FD | 	call	#popregs_
24758                 | _usbnew_spin2_mouse_move_ret
24758     2D 00 64 FD | 	ret
2475c                 | 
2475c                 | '     '' Set HAVE_HIDPAD to enable.
2475c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
2475c                 | ' 
2475c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
2475c                 | ' PUB hidpad_id(dev) : r
2475c                 | _usbnew_spin2_hidpad_id
2475c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
2475c     13 00 00 FF 
24760     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
24764     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24768     09 01 02 F6 | 	mov	_var01, arg01
2476c     03 00 66 F0 | 	shl	_var01, #3
24770     09 01 82 F1 | 	sub	_var01, arg01
24774     02 00 66 F0 | 	shl	_var01, #2
24778     00 FB 01 F1 | 	add	result1, _var01
2477c     FD FA 01 FB | 	rdlong	result1, result1
24780     13 00 00 FF 
24784     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
24788                 | _usbnew_spin2_hidpad_id_ret
24788     2D 00 64 FD | 	ret
2478c                 | 
2478c                 | ' 
2478c                 | ' '' Get all button states for a device
2478c                 | ' PUB hidpad_buttons(dev) : r 
2478c                 | _usbnew_spin2_hidpad_buttons
2478c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2478c     13 00 00 FF 
24790     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
24794     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24798     09 01 02 F6 | 	mov	_var01, arg01
2479c     03 00 66 F0 | 	shl	_var01, #3
247a0     09 01 82 F1 | 	sub	_var01, arg01
247a4     02 00 66 F0 | 	shl	_var01, #2
247a8     00 FB 01 F1 | 	add	result1, _var01
247ac     14 FA 05 F1 | 	add	result1, #20
247b0     FD FA 01 FB | 	rdlong	result1, result1
247b4     13 00 00 FF 
247b8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
247bc                 | _usbnew_spin2_hidpad_buttons_ret
247bc     2D 00 64 FD | 	ret
247c0                 | 
247c0                 | ' 
247c0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
247c0                 | ' PUB hidpad_axis(dev,axnum) : r
247c0                 | _usbnew_spin2_hidpad_axis
247c0                 | '   if axnum +>= 6
247c0     06 14 16 F2 | 	cmp	arg02, #6 wc
247c4                 | '     return 0
247c4     00 FA 05 36 |  if_ae	mov	result1, #0
247c8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
247cc                 | '   else 
247cc                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
247cc     13 00 00 FF 
247d0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
247d4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
247d8     09 01 02 F6 | 	mov	_var01, arg01
247dc     03 00 66 F0 | 	shl	_var01, #3
247e0     09 01 82 F1 | 	sub	_var01, arg01
247e4     02 00 66 F0 | 	shl	_var01, #2
247e8     00 FB 01 F1 | 	add	result1, _var01
247ec     04 00 06 F6 | 	mov	_var01, #4
247f0     0A 01 02 F1 | 	add	_var01, arg02
247f4     01 00 66 F0 | 	shl	_var01, #1
247f8     FD 00 02 F1 | 	add	_var01, result1
247fc     00 FB E1 FA | 	rdword	result1, _var01
24800     0F FA 65 F7 | 	signx	result1, #15
24804     13 00 00 FF 
24808     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2480c                 | _usbnew_spin2_hidpad_axis_ret
2480c     2D 00 64 FD | 	ret
24810                 | 
24810                 | ' 
24810                 | ' 
24810                 | ' '--------------------------------------------------------------
24810                 | ' '---------- Init the variables, start the cog. ----------------
24810                 | ' '--------------------------------------------------------------
24810                 | ' 
24810                 | ' pub start(mbox,scope,cache) :cog,base | iii
24810                 | _audio096_spin2_start
24810     04 4A 05 F6 | 	mov	COUNT_, #4
24814     A8 00 A0 FD | 	call	#pushregs_
24818     09 27 02 F6 | 	mov	local01, arg01
2481c                 | ' 
2481c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
2481c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
2481c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
2481c                 | ' 
2481c                 | ' mailboxaddr:=mbox 
2481c     F2 26 62 FC | 	wrlong	local01, objptr
24820                 | ' scope_ptr:=scope
24820     04 E4 05 F1 | 	add	objptr, #4
24824     F2 14 62 FC | 	wrlong	arg02, objptr
24828                 | ' cache_ptr:=cache
24828     04 E4 05 F1 | 	add	objptr, #4
2482c     F2 16 62 FC | 	wrlong	arg03, objptr
24830                 | ' base:=@channel1[0]
24830     04 E4 05 F1 | 	add	objptr, #4
24834     F2 28 02 F6 | 	mov	local02, objptr
24838                 | ' long[$40]:=mbox
24838     40 26 66 FC | 	wrlong	local01, #64
2483c                 | ' repeat iii from 0 to 7
2483c     00 2A 06 F6 | 	mov	local03, #0
24840     02 00 00 FF 
24844     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
24848     0C E4 85 F1 | 	sub	objptr, #12
2484c     97 BC 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
24850                 | LR__2960
24850                 | '   long[base+64*iii]:=0
24850     14 27 02 F6 | 	mov	local01, local02
24854     15 FD 01 F6 | 	mov	result2, local03
24858     06 FC 65 F0 | 	shl	result2, #6
2485c     FE 26 02 F1 | 	add	local01, result2
24860     13 01 68 FC | 	wrlong	#0, local01
24864                 | '   long[base+64*iii+4]:=0
24864     14 27 02 F6 | 	mov	local01, local02
24868     15 FD 01 F6 | 	mov	result2, local03
2486c     06 FC 65 F0 | 	shl	result2, #6
24870     FE 26 02 F1 | 	add	local01, result2
24874     04 26 06 F1 | 	add	local01, #4
24878     13 01 68 FC | 	wrlong	#0, local01
2487c                 | '   long[base+64*iii+12]:=0
2487c     14 2D 02 F6 | 	mov	local04, local02
24880     15 27 02 F6 | 	mov	local01, local03
24884     06 26 66 F0 | 	shl	local01, #6
24888     13 2D 02 F1 | 	add	local04, local01
2488c     0C 2C 06 F1 | 	add	local04, #12
24890     16 01 68 FC | 	wrlong	#0, local04
24894                 | '   long[base+64*iii+16]:=2 
24894     14 2D 02 F6 | 	mov	local04, local02
24898     15 27 02 F6 | 	mov	local01, local03
2489c     06 26 66 F0 | 	shl	local01, #6
248a0     13 2D 02 F1 | 	add	local04, local01
248a4     10 2C 06 F1 | 	add	local04, #16
248a8     16 05 68 FC | 	wrlong	#2, local04
248ac                 | '   word[base+64*iii+20]:=0
248ac     14 2D 02 F6 | 	mov	local04, local02
248b0     15 27 02 F6 | 	mov	local01, local03
248b4     06 26 66 F0 | 	shl	local01, #6
248b8     13 2D 02 F1 | 	add	local04, local01
248bc     14 2C 06 F1 | 	add	local04, #20
248c0     16 01 58 FC | 	wrword	#0, local04
248c4                 | '   word[base+64*iii+22]:=8192
248c4     14 2D 02 F6 | 	mov	local04, local02
248c8     15 27 02 F6 | 	mov	local01, local03
248cc     06 26 66 F0 | 	shl	local01, #6
248d0     13 2D 02 F1 | 	add	local04, local01
248d4     16 2C 06 F1 | 	add	local04, #22
248d8     10 00 80 FF 
248dc     16 01 58 FC | 	wrword	##8192, local04
248e0                 | '   word[base+64*iii+24]:=4000+2*iii
248e0     15 2D 02 F6 | 	mov	local04, local03
248e4     01 2C 66 F0 | 	shl	local04, #1
248e8     07 00 00 FF 
248ec     A0 27 06 F6 | 	mov	local01, ##4000
248f0     16 27 02 F1 | 	add	local01, local04
248f4     14 2D 02 F6 | 	mov	local04, local02
248f8     15 FD 01 F6 | 	mov	result2, local03
248fc     06 FC 65 F0 | 	shl	result2, #6
24900     FE 2C 02 F1 | 	add	local04, result2
24904     18 2C 06 F1 | 	add	local04, #24
24908     16 27 52 FC | 	wrword	local01, local04
2490c                 | '   word[base+64*iii+26]:=2
2490c     14 2D 02 F6 | 	mov	local04, local02
24910     15 27 02 F6 | 	mov	local01, local03
24914     06 26 66 F0 | 	shl	local01, #6
24918     13 2D 02 F1 | 	add	local04, local01
2491c     1A 2C 06 F1 | 	add	local04, #26
24920     16 05 58 FC | 	wrword	#2, local04
24924                 | '   long [base+64*iii+8]:=@null | $C0000000
24924     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
24928     3E 26 26 F4 | 	bith	local01, #62
2492c     14 2D 02 F6 | 	mov	local04, local02
24930     15 17 02 F6 | 	mov	arg03, local03
24934     06 16 66 F0 | 	shl	arg03, #6
24938     0B 2D 02 F1 | 	add	local04, arg03
2493c     08 2C 06 F1 | 	add	local04, #8
24940     16 27 62 FC | 	wrlong	local01, local04
24944                 | '   long[base+64*iii+32]:=0
24944     14 2D 02 F6 | 	mov	local04, local02
24948     15 27 02 F6 | 	mov	local01, local03
2494c     06 26 66 F0 | 	shl	local01, #6
24950     13 2D 02 F1 | 	add	local04, local01
24954     20 2C 06 F1 | 	add	local04, #32
24958     16 01 68 FC | 	wrlong	#0, local04
2495c                 | '   long[base+64*iii+36]:=0
2495c     14 2D 02 F6 | 	mov	local04, local02
24960     15 27 02 F6 | 	mov	local01, local03
24964     06 26 66 F0 | 	shl	local01, #6
24968     13 2D 02 F1 | 	add	local04, local01
2496c     24 2C 06 F1 | 	add	local04, #36
24970     16 01 68 FC | 	wrlong	#0, local04
24974                 | '   long[base+64*iii+40]:=0
24974     14 2D 02 F6 | 	mov	local04, local02
24978     15 27 02 F6 | 	mov	local01, local03
2497c     06 26 66 F0 | 	shl	local01, #6
24980     13 2D 02 F1 | 	add	local04, local01
24984     28 2C 06 F1 | 	add	local04, #40
24988     16 01 68 FC | 	wrlong	#0, local04
2498c                 | '   long[base+64*iii+44]:=0
2498c     14 2D 02 F6 | 	mov	local04, local02
24990     15 27 02 F6 | 	mov	local01, local03
24994     06 26 66 F0 | 	shl	local01, #6
24998     13 2D 02 F1 | 	add	local04, local01
2499c     2C 2C 06 F1 | 	add	local04, #44
249a0     16 01 68 FC | 	wrlong	#0, local04
249a4                 | '   long[base+64*iii+28]:=0
249a4     14 2D 02 F6 | 	mov	local04, local02
249a8     15 27 02 F6 | 	mov	local01, local03
249ac     06 26 66 F0 | 	shl	local01, #6
249b0     13 2D 02 F1 | 	add	local04, local01
249b4     1C 2C 06 F1 | 	add	local04, #28
249b8     16 01 68 FC | 	wrlong	#0, local04
249bc     01 2A 06 F1 | 	add	local03, #1
249c0     08 2A 56 F2 | 	cmps	local03, #8 wc
249c4     88 FE 9F CD |  if_b	jmp	#LR__2960
249c8                 | LR__2961
249c8     02 00 00 FF 
249cc     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
249d0                 | '   
249d0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
249d0     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
249d4     F2 16 02 F6 | 	mov	arg03, objptr
249d8     10 2C 06 F6 | 	mov	local04, #16
249dc     28 16 62 FD | 	setq	arg03
249e0     0A 2D F2 FC | 	coginit	local04, arg02 wc
249e4     01 2C 66 C6 |  if_b	neg	local04, #1
249e8                 | ' waitms(100)
249e8     64 12 06 F6 | 	mov	arg01, #100
249ec     78 07 B0 FD | 	call	#__system___waitms
249f0                 | ' return cog,base
249f0     14 FD 01 F6 | 	mov	result2, local02
249f4     16 FB 01 F6 | 	mov	result1, local04
249f8     A7 F0 03 F6 | 	mov	ptra, fp
249fc     B2 00 A0 FD | 	call	#popregs_
24a00                 | _audio096_spin2_start_ret
24a00     2D 00 64 FD | 	ret
24a04                 | 
24a04                 | ' 
24a04                 | ' ' a simple play procedure to not poke everything. 
24a04                 | ' 
24a04                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
24a04                 | _audio096_spin2_play
24a04     0C E4 05 F1 | 	add	objptr, #12
24a08     F2 00 02 F6 | 	mov	_var01, objptr
24a0c     06 12 66 F0 | 	shl	arg01, #6
24a10     09 01 02 F1 | 	add	_var01, arg01
24a14     00 13 02 F6 | 	mov	arg01, _var01
24a18     0C 12 06 F1 | 	add	arg01, #12
24a1c     09 1B 62 FC | 	wrlong	arg05, arg01
24a20     00 1C 56 F2 | 	cmps	arg06, #0 wc
24a24     00 13 02 36 |  if_ae	mov	arg01, _var01
24a28     10 12 06 31 |  if_ae	add	arg01, #16
24a2c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
24a30     02 1A 06 C1 |  if_b	add	arg05, #2
24a34     00 13 02 C6 |  if_b	mov	arg01, _var01
24a38     10 12 06 C1 |  if_b	add	arg01, #16
24a3c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
24a40     0B 13 52 F6 | 	abs	arg01, arg03 wc
24a44     0F 1B 80 FF 
24a48     09 1F 1A FD | 	qdiv	##3546895, arg01
24a4c                 | ' 
24a4c                 | ' base2:=@channel1[0]+64*channel
24a4c                 | ' 
24a4c                 | ' 
24a4c                 | ' long[base2+12]:= len
24a4c                 | ' if loop >=0 
24a4c                 | '   long[base2+16]:= loop
24a4c     0C E4 85 F1 | 	sub	objptr, #12
24a50                 | ' else
24a50                 | '   long[base2+16]:= len+2
24a50                 | ' word[base2+20]:=vol
24a50     00 13 02 F6 | 	mov	arg01, _var01
24a54     14 12 06 F1 | 	add	arg01, #20
24a58     09 19 52 FC | 	wrword	arg04, arg01
24a5c                 | ' word[base2+24]:= 3546895/splfreq 
24a5c     00 19 02 F6 | 	mov	arg04, _var01
24a60     18 18 06 F1 | 	add	arg04, #24
24a64                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
24a64                 | ' long[base2+28]:=$40000000    
24a64                 | ' long[base2+32]:=0    
24a64                 | ' long[base2+36]:=0    
24a64                 | ' long[base2+40]:=0    
24a64                 | ' long[base2+44]:=0    
24a64                 | ' long[base2+8]:=sample+$C0000000     
24a64     00 00 60 FF 
24a68     00 14 06 F1 | 	add	arg02, ##-1073741824
24a6c     18 12 62 FD | 	getqx	arg01
24a70     09 13 82 F6 | 	negc	arg01, arg01
24a74     0C 13 52 FC | 	wrword	arg01, arg04
24a78     00 13 02 F6 | 	mov	arg01, _var01
24a7c     1A 12 06 F1 | 	add	arg01, #26
24a80     09 01 5A FC | 	wrword	#256, arg01
24a84     00 13 02 F6 | 	mov	arg01, _var01
24a88     1C 12 06 F1 | 	add	arg01, #28
24a8c     00 00 A0 FF 
24a90     09 01 68 FC | 	wrlong	##1073741824, arg01
24a94     00 13 02 F6 | 	mov	arg01, _var01
24a98     20 12 06 F1 | 	add	arg01, #32
24a9c     09 01 68 FC | 	wrlong	#0, arg01
24aa0     00 13 02 F6 | 	mov	arg01, _var01
24aa4     24 12 06 F1 | 	add	arg01, #36
24aa8     09 01 68 FC | 	wrlong	#0, arg01
24aac     00 13 02 F6 | 	mov	arg01, _var01
24ab0     28 12 06 F1 | 	add	arg01, #40
24ab4     09 01 68 FC | 	wrlong	#0, arg01
24ab8     00 13 02 F6 | 	mov	arg01, _var01
24abc     2C 12 06 F1 | 	add	arg01, #44
24ac0     09 01 68 FC | 	wrlong	#0, arg01
24ac4     08 00 06 F1 | 	add	_var01, #8
24ac8     00 15 62 FC | 	wrlong	arg02, _var01
24acc                 | _audio096_spin2_play_ret
24acc     2D 00 64 FD | 	ret
24ad0                 | 
24ad0                 | ' 
24ad0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
24ad0                 | _audio096_spin2_play8
24ad0                 | ' 
24ad0                 | ' base2:=@channel1[0]+64*channel
24ad0     0C E4 05 F1 | 	add	objptr, #12
24ad4     F2 00 02 F6 | 	mov	_var01, objptr
24ad8     06 12 66 F0 | 	shl	arg01, #6
24adc     09 01 02 F1 | 	add	_var01, arg01
24ae0                 | ' long[base2]:=0
24ae0     00 01 68 FC | 	wrlong	#0, _var01
24ae4                 | ' long[base2+8]:=sample+$40000000 
24ae4     00 00 20 FF 
24ae8     00 14 06 F1 | 	add	arg02, ##1073741824
24aec     00 13 02 F6 | 	mov	arg01, _var01
24af0     08 12 06 F1 | 	add	arg01, #8
24af4     09 15 62 FC | 	wrlong	arg02, arg01
24af8                 | ' if loop>=0
24af8     00 1C 56 F2 | 	cmps	arg06, #0 wc
24afc     0C E4 85 F1 | 	sub	objptr, #12
24b00     1C 00 90 CD |  if_b	jmp	#LR__2970
24b04                 | '   long[base2+12]:=loop
24b04     00 15 02 F6 | 	mov	arg02, _var01
24b08     0C 14 06 F1 | 	add	arg02, #12
24b0c     0A 1D 62 FC | 	wrlong	arg06, arg02
24b10                 | '   long[base2+16]:= len
24b10     00 1D 02 F6 | 	mov	arg06, _var01
24b14     10 1C 06 F1 | 	add	arg06, #16
24b18     0E 1B 62 FC | 	wrlong	arg05, arg06
24b1c     1C 00 90 FD | 	jmp	#LR__2971
24b20                 | LR__2970
24b20                 | ' else
24b20                 | '   long[base2+12]:= len
24b20     00 1D 02 F6 | 	mov	arg06, _var01
24b24     0C 1C 06 F1 | 	add	arg06, #12
24b28     0E 1B 62 FC | 	wrlong	arg05, arg06
24b2c                 | '   long[base2+16]:= len+1
24b2c     01 1A 06 F1 | 	add	arg05, #1
24b30     00 13 02 F6 | 	mov	arg01, _var01
24b34     10 12 06 F1 | 	add	arg01, #16
24b38     09 1B 62 FC | 	wrlong	arg05, arg01
24b3c                 | LR__2971
24b3c     0B 17 52 F6 | 	abs	arg03, arg03 wc
24b40     0F 1B 80 FF 
24b44     0B 1F 1A FD | 	qdiv	##3546895, arg03
24b48                 | ' word[base2+20]:=vol
24b48     00 17 02 F6 | 	mov	arg03, _var01
24b4c     14 16 06 F1 | 	add	arg03, #20
24b50     0B 19 52 FC | 	wrword	arg04, arg03
24b54                 | ' word[base2+24]:= 3546895 /splfreq 
24b54     00 13 02 F6 | 	mov	arg01, _var01
24b58     18 12 06 F1 | 	add	arg01, #24
24b5c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
24b5c     1A 00 06 F1 | 	add	_var01, #26
24b60     18 18 62 FD | 	getqx	arg04
24b64     0C 19 82 F6 | 	negc	arg04, arg04
24b68     09 19 52 FC | 	wrword	arg04, arg01
24b6c     00 01 5A FC | 	wrword	#256, _var01
24b70                 | _audio096_spin2_play8_ret
24b70     2D 00 64 FD | 	ret
24b74                 | 
24b74                 | ' 'long[base2+28]:=$40000000
24b74                 | ' 
24b74                 | '     
24b74                 | ' pub stop(channel) 'silence it
24b74                 | _audio096_spin2_stop
24b74                 | ' 
24b74                 | ' word[@channel1[0]+64*channel+20]:=0
24b74     0C E4 05 F1 | 	add	objptr, #12
24b78     F2 00 02 F6 | 	mov	_var01, objptr
24b7c     09 03 02 F6 | 	mov	_var02, arg01
24b80     06 02 66 F0 | 	shl	_var02, #6
24b84     01 01 02 F1 | 	add	_var01, _var02
24b88     14 00 06 F1 | 	add	_var01, #20
24b8c     00 01 58 FC | 	wrword	#0, _var01
24b90                 | ' word[@channel1[0]+64*channel+20]:=0
24b90     F2 00 02 F6 | 	mov	_var01, objptr
24b94     06 12 66 F0 | 	shl	arg01, #6
24b98     09 01 02 F1 | 	add	_var01, arg01
24b9c     14 00 06 F1 | 	add	_var01, #20
24ba0     00 01 58 FC | 	wrword	#0, _var01
24ba4     0C E4 85 F1 | 	sub	objptr, #12
24ba8                 | _audio096_spin2_stop_ret
24ba8     2D 00 64 FD | 	ret
24bac                 | hubexit
24bac     81 00 80 FD | 	jmp	#cogexit
24bb0                 | 
24bb0                 | __system___setbaud
24bb0     14 88 06 FB | 	rdlong	muldiva_, #20
24bb4     09 8B 02 F6 | 	mov	muldivb_, arg01
24bb8     BA 00 A0 FD | 	call	#divide_
24bbc     97 06 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
24bc0                 | LR__2980
24bc0     3E FA 9D FA | 	rdpin	result1, #62 wc
24bc4     FE FC A1 F1 | 	subx	result2, result2
24bc8     F4 FF 9F CD |  if_b	jmp	#LR__2980
24bcc                 | LR__2981
24bcc     40 7C 64 FD | 	dirl	#62
24bd0     40 7E 64 FD | 	dirl	#63
24bd4     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
24bd8     10 8A 66 F0 | 	shl	muldivb_, #16
24bdc     07 14 06 F6 | 	mov	arg02, #7
24be0     45 15 02 F1 | 	add	arg02, muldivb_
24be4     3E F8 0C FC | 	wrpin	#124, #62
24be8     3E 14 16 FC | 	wxpin	arg02, #62
24bec     3F 7C 0C FC | 	wrpin	#62, #63
24bf0     14 14 06 F1 | 	add	arg02, #20
24bf4     3F 14 16 FC | 	wxpin	arg02, #63
24bf8     41 7C 64 FD | 	dirh	#62
24bfc     41 7E 64 FD | 	dirh	#63
24c00                 | __system___setbaud_ret
24c00     2D 00 64 FD | 	ret
24c04                 | 
24c04                 | __system___txraw
24c04     01 4A 05 F6 | 	mov	COUNT_, #1
24c08     A8 00 A0 FD | 	call	#pushregs_
24c0c     09 27 02 F6 | 	mov	local01, arg01
24c10     97 06 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
24c14                 | LR__2990
24c14     3E FA 9D FA | 	rdpin	result1, #62 wc
24c18     FE FC A1 F1 | 	subx	result2, result2
24c1c     F4 FF 9F CD |  if_b	jmp	#LR__2990
24c20                 | LR__2991
24c20     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
24c24     C2 01 00 AF 
24c28     00 12 06 A6 |  if_e	mov	arg01, ##230400
24c2c     80 FF BF AD |  if_e	call	#__system___setbaud
24c30     58 7C 64 FD | 	drvl	#62
24c34     3E 26 26 FC | 	wypin	local01, #62
24c38     01 FA 05 F6 | 	mov	result1, #1
24c3c     A7 F0 03 F6 | 	mov	ptra, fp
24c40     B2 00 A0 FD | 	call	#popregs_
24c44                 | __system___txraw_ret
24c44     2D 00 64 FD | 	ret
24c48                 | 
24c48                 | __system___rxraw
24c48     0D 4A 05 F6 | 	mov	COUNT_, #13
24c4c     A8 00 A0 FD | 	call	#pushregs_
24c50     09 27 02 F6 | 	mov	local01, arg01
24c54     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24c58     C2 01 00 AF 
24c5c     00 12 06 A6 |  if_e	mov	arg01, ##230400
24c60     4C FF BF AD |  if_e	call	#__system___setbaud
24c64     00 26 0E F2 | 	cmp	local01, #0 wz
24c68     20 00 90 AD |  if_e	jmp	#LR__3000
24c6c     14 2A 06 FB | 	rdlong	local03, #20
24c70     0A 2A 46 F0 | 	shr	local03, #10
24c74     15 27 02 FD | 	qmul	local01, local03
24c78     1A FA 61 FD | 	getct	result1
24c7c     18 2C 62 FD | 	getqx	local04
24c80     16 FB 01 F1 | 	add	result1, local04
24c84     FD 2E 02 F6 | 	mov	local05, result1
24c88     04 00 90 FD | 	jmp	#LR__3001
24c8c                 | LR__3000
24c8c     00 2E 06 F6 | 	mov	local05, #0
24c90                 | LR__3001
24c90     01 30 66 F6 | 	neg	local06, #1
24c94     3F 32 06 F6 | 	mov	local07, #63
24c98     00 34 06 F6 | 	mov	local08, #0
24c9c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24ca0     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
24ca4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
24ca8                 | LR__3002
24ca8     08 36 16 F4 | 	testb	local09, #8 wc
24cac     09 36 76 F4 | 	testbn	local09, #9 andc
24cb0     0A 36 46 F0 | 	shr	local09, #10
24cb4     01 34 06 C6 |  if_b	mov	local08, #1
24cb8     40 7E 6C 3D |  if_ae	testp	#63 wz
24cbc     01 34 06 26 |  if_nc_and_z	mov	local08, #1
24cc0     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
24cc4     04 36 46 20 |  if_nc_and_z	shr	local09, #4
24cc8                 | LR__3003
24cc8     00 28 06 F6 | 	mov	local02, #0
24ccc     00 34 0E F2 | 	cmp	local08, #0 wz
24cd0     01 28 66 56 |  if_ne	neg	local02, #1
24cd4     00 38 06 F6 | 	mov	local10, #0
24cd8     00 2A 06 F6 | 	mov	local03, #0
24cdc     00 26 0E F2 | 	cmp	local01, #0 wz
24ce0     01 2A 66 56 |  if_ne	neg	local03, #1
24ce4     00 2C 06 F6 | 	mov	local04, #0
24ce8     00 3A 06 F6 | 	mov	local11, #0
24cec     17 3D 02 F6 | 	mov	local12, local05
24cf0     1A FA 61 FD | 	getct	result1
24cf4     FD 3E 02 F6 | 	mov	local13, result1
24cf8     1F 3D 82 F1 | 	sub	local12, local13
24cfc     00 3C 56 F2 | 	cmps	local12, #0 wc
24d00     00 3A 26 C6 |  if_b	not	local11, #0
24d04     00 3A 0E F2 | 	cmp	local11, #0 wz
24d08     00 2C 26 56 |  if_ne	not	local04, #0
24d0c     16 2B CA F7 | 	test	local03, local04 wz
24d10     00 38 26 56 |  if_ne	not	local10, #0
24d14     1C 29 4A F5 | 	or	local02, local10 wz
24d18     8C FF 9F AD |  if_e	jmp	#LR__3002
24d1c     00 34 0E F2 | 	cmp	local08, #0 wz
24d20     1B 31 02 56 |  if_ne	mov	local06, local09
24d24     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
24d28     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24d2c     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
24d30     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
24d34     18 FB 01 F6 | 	mov	result1, local06
24d38     A7 F0 03 F6 | 	mov	ptra, fp
24d3c     B2 00 A0 FD | 	call	#popregs_
24d40                 | __system___rxraw_ret
24d40     2D 00 64 FD | 	ret
24d44                 | 
24d44                 | __system___getus
24d44     1A FC 71 FD | 	getct	result2 wc
24d48     1A 00 62 FD | 	getct	_var01
24d4c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
24d50     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
24d54     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
24d58     20 00 90 5D |  if_ne	jmp	#LR__3010
24d5c     14 02 06 FB | 	rdlong	_var02, #20
24d60     A1 07 00 FF 
24d64     40 02 16 FD | 	qdiv	_var02, ##1000000
24d68     10 E6 05 F1 | 	add	ptr___system__dat__, #16
24d6c     18 FA 61 FD | 	getqx	result1
24d70     FD 02 02 F6 | 	mov	_var02, result1
24d74     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
24d78     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
24d7c                 | LR__3010
24d7c     01 FD 11 FD | 	qdiv	result2, _var02
24d80     19 FC 61 FD | 	getqy	result2
24d84     28 FC 61 FD | 	setq	result2
24d88     01 01 12 FD | 	qdiv	_var01, _var02
24d8c     18 FA 61 FD | 	getqx	result1
24d90                 | __system___getus_ret
24d90     2D 00 64 FD | 	ret
24d94                 | 
24d94                 | __system____builtin_memmove
24d94     09 01 02 F6 | 	mov	_var01, arg01
24d98     0A 13 52 F2 | 	cmps	arg01, arg02 wc
24d9c     10 00 90 CD |  if_b	jmp	#LR__3020
24da0     0A 03 02 F6 | 	mov	_var02, arg02
24da4     0B 03 02 F1 | 	add	_var02, arg03
24da8     01 13 52 F2 | 	cmps	arg01, _var02 wc
24dac     48 00 90 CD |  if_b	jmp	#LR__3026
24db0                 | LR__3020
24db0     0B 05 02 F6 | 	mov	_var03, arg03
24db4     02 04 4E F0 | 	shr	_var03, #2 wz
24db8     18 00 90 AD |  if_e	jmp	#LR__3025
24dbc     97 0A 48 FB | 	callpa	#(@LR__3023-@LR__3021)>>2,fcache_load_ptr_
24dc0                 | LR__3021
24dc0     02 09 D8 FC | 	rep	@LR__3024, _var03
24dc4                 | LR__3022
24dc4     0A 05 02 FB | 	rdlong	_var03, arg02
24dc8     09 05 62 FC | 	wrlong	_var03, arg01
24dcc     04 12 06 F1 | 	add	arg01, #4
24dd0     04 14 06 F1 | 	add	arg02, #4
24dd4                 | LR__3023
24dd4                 | LR__3024
24dd4                 | LR__3025
24dd4     02 16 CE F7 | 	test	arg03, #2 wz
24dd8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
24ddc     09 03 52 5C |  if_ne	wrword	_var02, arg01
24de0     02 12 06 51 |  if_ne	add	arg01, #2
24de4     02 14 06 51 |  if_ne	add	arg02, #2
24de8     01 16 CE F7 | 	test	arg03, #1 wz
24dec     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
24df0     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
24df4     28 00 90 FD | 	jmp	#LR__3032
24df8                 | LR__3026
24df8     0B 13 02 F1 | 	add	arg01, arg03
24dfc     0B 15 02 F1 | 	add	arg02, arg03
24e00     0B 07 0A F6 | 	mov	_var04, arg03 wz
24e04     18 00 90 AD |  if_e	jmp	#LR__3031
24e08     97 0A 48 FB | 	callpa	#(@LR__3029-@LR__3027)>>2,fcache_load_ptr_
24e0c                 | LR__3027
24e0c     03 09 D8 FC | 	rep	@LR__3030, _var04
24e10                 | LR__3028
24e10     01 12 86 F1 | 	sub	arg01, #1
24e14     01 14 86 F1 | 	sub	arg02, #1
24e18     0A 03 C2 FA | 	rdbyte	_var02, arg02
24e1c     09 03 42 FC | 	wrbyte	_var02, arg01
24e20                 | LR__3029
24e20                 | LR__3030
24e20                 | LR__3031
24e20                 | LR__3032
24e20     00 FB 01 F6 | 	mov	result1, _var01
24e24                 | __system____builtin_memmove_ret
24e24     2D 00 64 FD | 	ret
24e28                 | 
24e28                 | __system____builtin_strcpy
24e28     09 01 02 F6 | 	mov	_var01, arg01
24e2c     97 0A 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
24e30                 | LR__3040
24e30     0A FB C9 FA | 	rdbyte	result1, arg02 wz
24e34     09 FB 41 FC | 	wrbyte	result1, arg01
24e38     01 14 06 F1 | 	add	arg02, #1
24e3c     01 12 06 F1 | 	add	arg01, #1
24e40     EC FF 9F 5D |  if_ne	jmp	#LR__3040
24e44                 | LR__3041
24e44     00 FB 01 F6 | 	mov	result1, _var01
24e48                 | __system____builtin_strcpy_ret
24e48     2D 00 64 FD | 	ret
24e4c                 | 
24e4c                 | __system____topofstack
24e4c     00 4A 05 F6 | 	mov	COUNT_, #0
24e50     A8 00 A0 FD | 	call	#pushregs_
24e54     08 F0 07 F1 | 	add	ptra, #8
24e58     04 4E 05 F1 | 	add	fp, #4
24e5c     A7 12 62 FC | 	wrlong	arg01, fp
24e60     A7 FA 01 F6 | 	mov	result1, fp
24e64     04 4E 85 F1 | 	sub	fp, #4
24e68     A7 F0 03 F6 | 	mov	ptra, fp
24e6c     B2 00 A0 FD | 	call	#popregs_
24e70                 | __system____topofstack_ret
24e70     2D 00 64 FD | 	ret
24e74                 | 
24e74                 | __system___lockmem
24e74     00 FA 05 F6 | 	mov	result1, #0
24e78     01 FA 61 FD | 	cogid	result1
24e7c     00 FB 05 F1 | 	add	result1, #256
24e80                 | LR__3050
24e80     09 01 0A FB | 	rdlong	_var01, arg01 wz
24e84     09 FB 61 AC |  if_e	wrlong	result1, arg01
24e88     09 01 02 AB |  if_e	rdlong	_var01, arg01
24e8c     09 01 02 AB |  if_e	rdlong	_var01, arg01
24e90     FD 00 0A F2 | 	cmp	_var01, result1 wz
24e94     E8 FF 9F 5D |  if_ne	jmp	#LR__3050
24e98                 | __system___lockmem_ret
24e98     2D 00 64 FD | 	ret
24e9c                 | 
24e9c                 | __system___string_cmp
24e9c     97 14 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
24ea0                 | LR__3060
24ea0     09 01 C2 FA | 	rdbyte	_var01, arg01
24ea4     0A 03 C2 FA | 	rdbyte	_var02, arg02
24ea8     00 05 02 F6 | 	mov	_var03, _var01
24eac     01 05 8A F1 | 	sub	_var03, _var02 wz
24eb0     01 12 06 F1 | 	add	arg01, #1
24eb4     01 14 06 F1 | 	add	arg02, #1
24eb8     0C 00 90 5D |  if_ne	jmp	#LR__3062
24ebc     00 00 0E F2 | 	cmp	_var01, #0 wz
24ec0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
24ec4     D8 FF 9F 5D |  if_ne	jmp	#LR__3060
24ec8                 | LR__3061
24ec8                 | LR__3062
24ec8     02 FB 01 F6 | 	mov	result1, _var03
24ecc                 | __system___string_cmp_ret
24ecc     2D 00 64 FD | 	ret
24ed0                 | 
24ed0                 | __system___string_concat
24ed0     05 4A 05 F6 | 	mov	COUNT_, #5
24ed4     A8 00 A0 FD | 	call	#pushregs_
24ed8     09 27 02 F6 | 	mov	local01, arg01
24edc     0A 29 02 F6 | 	mov	local02, arg02
24ee0     13 13 02 F6 | 	mov	arg01, local01
24ee4     09 2B 02 F6 | 	mov	local03, arg01
24ee8     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
24eec                 | LR__3070
24eec     15 FB C9 FA | 	rdbyte	result1, local03 wz
24ef0     01 2A 06 51 |  if_ne	add	local03, #1
24ef4     F4 FF 9F 5D |  if_ne	jmp	#LR__3070
24ef8                 | LR__3071
24ef8     09 2B 82 F1 | 	sub	local03, arg01
24efc     15 2D 02 F6 | 	mov	local04, local03
24f00     14 13 02 F6 | 	mov	arg01, local02
24f04     09 2B 02 F6 | 	mov	local03, arg01
24f08     97 06 48 FB | 	callpa	#(@LR__3073-@LR__3072)>>2,fcache_load_ptr_
24f0c                 | LR__3072
24f0c     15 FB C9 FA | 	rdbyte	result1, local03 wz
24f10     01 2A 06 51 |  if_ne	add	local03, #1
24f14     F4 FF 9F 5D |  if_ne	jmp	#LR__3072
24f18                 | LR__3073
24f18     09 2B 82 F1 | 	sub	local03, arg01
24f1c     16 13 02 F6 | 	mov	arg01, local04
24f20     15 13 02 F1 | 	add	arg01, local03
24f24     01 12 06 F1 | 	add	arg01, #1
24f28     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
24f2c     FD 2E 0A F6 | 	mov	local05, result1 wz
24f30     28 00 90 AD |  if_e	jmp	#LR__3074
24f34     17 13 02 F6 | 	mov	arg01, local05
24f38     13 15 02 F6 | 	mov	arg02, local01
24f3c     16 17 02 F6 | 	mov	arg03, local04
24f40     50 FE BF FD | 	call	#__system____builtin_memmove
24f44     17 13 02 F6 | 	mov	arg01, local05
24f48     16 13 02 F1 | 	add	arg01, local04
24f4c     01 2A 06 F1 | 	add	local03, #1
24f50     14 15 02 F6 | 	mov	arg02, local02
24f54     15 17 02 F6 | 	mov	arg03, local03
24f58     38 FE BF FD | 	call	#__system____builtin_memmove
24f5c                 | LR__3074
24f5c     17 FB 01 F6 | 	mov	result1, local05
24f60     A7 F0 03 F6 | 	mov	ptra, fp
24f64     B2 00 A0 FD | 	call	#popregs_
24f68                 | __system___string_concat_ret
24f68     2D 00 64 FD | 	ret
24f6c                 | 
24f6c                 | __system___tx
24f6c     02 4A 05 F6 | 	mov	COUNT_, #2
24f70     A8 00 A0 FD | 	call	#pushregs_
24f74     09 27 02 F6 | 	mov	local01, arg01
24f78     0A 26 0E F2 | 	cmp	local01, #10 wz
24f7c     18 00 90 5D |  if_ne	jmp	#LR__3080
24f80     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24f84     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
24f88     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24f8c     02 28 CE F7 | 	test	local02, #2 wz
24f90     0D 12 06 56 |  if_ne	mov	arg01, #13
24f94     6C FC BF 5D |  if_ne	call	#__system___txraw
24f98                 | LR__3080
24f98     13 13 02 F6 | 	mov	arg01, local01
24f9c     64 FC BF FD | 	call	#__system___txraw
24fa0     A7 F0 03 F6 | 	mov	ptra, fp
24fa4     B2 00 A0 FD | 	call	#popregs_
24fa8                 | __system___tx_ret
24fa8     2D 00 64 FD | 	ret
24fac                 | 
24fac                 | __system___rx
24fac     01 4A 05 F6 | 	mov	COUNT_, #1
24fb0     A8 00 A0 FD | 	call	#pushregs_
24fb4                 | LR__3090
24fb4     00 12 06 F6 | 	mov	arg01, #0
24fb8     8C FC BF FD | 	call	#__system___rxraw
24fbc     FD 26 02 F6 | 	mov	local01, result1
24fc0     FF FF 7F FF 
24fc4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
24fc8     E8 FF 9F AD |  if_e	jmp	#LR__3090
24fcc     0D 26 0E F2 | 	cmp	local01, #13 wz
24fd0     14 00 90 5D |  if_ne	jmp	#LR__3091
24fd4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24fd8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24fdc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24fe0     02 FA CD F7 | 	test	result1, #2 wz
24fe4     0A 26 06 56 |  if_ne	mov	local01, #10
24fe8                 | LR__3091
24fe8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24fec     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
24ff0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24ff4     01 12 CE F7 | 	test	arg01, #1 wz
24ff8     1C 00 90 AD |  if_e	jmp	#LR__3094
24ffc     7F 26 0E F2 | 	cmp	local01, #127 wz
25000     0C 00 90 5D |  if_ne	jmp	#LR__3092
25004     08 12 06 F6 | 	mov	arg01, #8
25008     60 FF BF FD | 	call	#__system___tx
2500c     08 00 90 FD | 	jmp	#LR__3093
25010                 | LR__3092
25010     13 13 02 F6 | 	mov	arg01, local01
25014     54 FF BF FD | 	call	#__system___tx
25018                 | LR__3093
25018                 | LR__3094
25018     13 FB 01 F6 | 	mov	result1, local01
2501c     A7 F0 03 F6 | 	mov	ptra, fp
25020     B2 00 A0 FD | 	call	#popregs_
25024                 | __system___rx_ret
25024     2D 00 64 FD | 	ret
25028                 | 
25028                 | __system___pinwrite
25028     09 01 02 F6 | 	mov	_var01, arg01
2502c     1F 00 06 F5 | 	and	_var01, #31
25030     20 12 CE F7 | 	test	arg01, #32 wz
25034     06 12 46 F0 | 	shr	arg01, #6
25038     09 13 CA F9 | 	bmask	arg01, arg01
2503c     00 13 62 F0 | 	shl	arg01, _var01
25040     00 15 62 F0 | 	shl	arg02, _var01
25044     1C 00 90 AD |  if_e	jmp	#LR__3100
25048     09 F7 43 F5 | 	or	dirb, arg01
2504c     FD 01 02 F6 | 	mov	_var01, outb
25050     09 01 22 F5 | 	andn	_var01, arg01
25054     09 15 02 F5 | 	and	arg02, arg01
25058     0A 01 42 F5 | 	or	_var01, arg02
2505c     00 FB 03 F6 | 	mov	outb, _var01
25060     18 00 90 FD | 	jmp	#LR__3101
25064                 | LR__3100
25064     09 F5 43 F5 | 	or	dira, arg01
25068     FC 01 02 F6 | 	mov	_var01, outa
2506c     09 01 22 F5 | 	andn	_var01, arg01
25070     09 15 02 F5 | 	and	arg02, arg01
25074     0A 01 42 F5 | 	or	_var01, arg02
25078     00 F9 03 F6 | 	mov	outa, _var01
2507c                 | LR__3101
2507c                 | __system___pinwrite_ret
2507c     2D 00 64 FD | 	ret
25080                 | 
25080                 | __system___basic_read_line
25080     06 4A 05 F6 | 	mov	COUNT_, #6
25084     A8 00 A0 FD | 	call	#pushregs_
25088     09 27 02 F6 | 	mov	local01, arg01
2508c     00 28 06 F6 | 	mov	local02, #0
25090     18 2A 06 F6 | 	mov	local03, #24
25094     00 2C 06 F6 | 	mov	local04, #0
25098     18 12 06 F6 | 	mov	arg01, #24
2509c     74 3F B0 FD | 	call	#__system___gc_alloc_managed
250a0     FD 2E 0A F6 | 	mov	local05, result1 wz
250a4     17 FB 01 A6 |  if_e	mov	result1, local05
250a8     B0 00 90 AD |  if_e	jmp	#LR__3113
250ac                 | LR__3110
250ac     13 13 02 F6 | 	mov	arg01, local01
250b0     78 0B B0 FD | 	call	#__system___basic_get_char
250b4     FD 30 02 F6 | 	mov	local06, result1
250b8     01 30 56 F2 | 	cmps	local06, #1 wc
250bc     8C 00 90 CD |  if_b	jmp	#LR__3112
250c0     0A 30 0E F2 | 	cmp	local06, #10 wz
250c4     10 00 90 5D |  if_ne	jmp	#LR__3111
250c8     00 2C 0E F2 | 	cmp	local04, #0 wz
250cc     01 28 56 52 |  if_ne	cmps	local02, #1 wc
250d0     01 28 86 11 |  if_a	sub	local02, #1
250d4     74 00 90 FD | 	jmp	#LR__3112
250d8                 | LR__3111
250d8     0D 30 0E F2 | 	cmp	local06, #13 wz
250dc     01 2C 06 A6 |  if_e	mov	local04, #1
250e0     00 2C 06 56 |  if_ne	mov	local04, #0
250e4     08 30 0E F2 | 	cmp	local06, #8 wz
250e8     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
250ec     01 28 56 A2 |  if_e	cmps	local02, #1 wc
250f0     01 28 86 21 |  if_nc_and_z	sub	local02, #1
250f4     B4 FF 9F AD |  if_e	jmp	#LR__3110
250f8     17 17 02 F6 | 	mov	arg03, local05
250fc     14 17 02 F1 | 	add	arg03, local02
25100     0B 31 42 FC | 	wrbyte	local06, arg03
25104     01 28 06 F1 | 	add	local02, #1
25108     15 29 0A F2 | 	cmp	local02, local03 wz
2510c     9C FF 9F 5D |  if_ne	jmp	#LR__3110
25110     15 13 02 F6 | 	mov	arg01, local03
25114     20 12 06 F1 | 	add	arg01, #32
25118     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
2511c     FD 30 0A F6 | 	mov	local06, result1 wz
25120     18 FB 01 A6 |  if_e	mov	result1, local06
25124     34 00 90 AD |  if_e	jmp	#LR__3113
25128     18 13 02 F6 | 	mov	arg01, local06
2512c     17 15 02 F6 | 	mov	arg02, local05
25130     15 17 02 F6 | 	mov	arg03, local03
25134     5C FC BF FD | 	call	#__system____builtin_memmove
25138     20 2A 06 F1 | 	add	local03, #32
2513c     17 13 02 F6 | 	mov	arg01, local05
25140     0C 40 B0 FD | 	call	#__system___gc_free
25144     18 2F 02 F6 | 	mov	local05, local06
25148     60 FF 9F FD | 	jmp	#LR__3110
2514c                 | LR__3112
2514c     17 31 02 F6 | 	mov	local06, local05
25150     14 31 02 F1 | 	add	local06, local02
25154     18 01 48 FC | 	wrbyte	#0, local06
25158     17 FB 01 F6 | 	mov	result1, local05
2515c                 | LR__3113
2515c     A7 F0 03 F6 | 	mov	ptra, fp
25160     B2 00 A0 FD | 	call	#popregs_
25164                 | __system___basic_read_line_ret
25164     2D 00 64 FD | 	ret
25168                 | 
25168                 | __system___waitms
25168     09 01 02 F6 | 	mov	_var01, arg01
2516c     1A 02 62 FD | 	getct	_var02
25170     14 04 06 FB | 	rdlong	_var03, #20
25174     97 14 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
25178                 | LR__3120
25178     01 00 00 FF 
2517c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
25180     1C 00 90 CD |  if_b	jmp	#LR__3122
25184     02 03 02 F1 | 	add	_var02, _var03
25188     01 13 02 F6 | 	mov	arg01, _var02
2518c     00 12 66 FA | 	addct1	arg01, #0
25190     24 22 60 FD | 	waitct1
25194     01 00 00 FF 
25198     E8 01 86 F1 | 	sub	_var01, ##1000
2519c     D8 FF 9F FD | 	jmp	#LR__3120
251a0                 | LR__3121
251a0                 | LR__3122
251a0     01 00 56 F2 | 	cmps	_var01, #1 wc
251a4     28 00 90 CD |  if_b	jmp	#LR__3123
251a8     02 01 02 FD | 	qmul	_var01, _var03
251ac     01 00 00 FF 
251b0     E8 17 06 F6 | 	mov	arg03, ##1000
251b4     19 FA 61 FD | 	getqy	result1
251b8     18 12 62 FD | 	getqx	arg01
251bc     28 FA 61 FD | 	setq	result1
251c0     0B 13 12 FD | 	qdiv	arg01, arg03
251c4     18 12 62 FD | 	getqx	arg01
251c8     01 13 62 FA | 	addct1	arg01, _var02
251cc     24 22 60 FD | 	waitct1
251d0                 | LR__3123
251d0                 | __system___waitms_ret
251d0     2D 00 64 FD | 	ret
251d4                 | 
251d4                 | __system___waitus
251d4     09 01 02 F6 | 	mov	_var01, arg01
251d8     1A 02 62 FD | 	getct	_var02
251dc     14 04 06 FB | 	rdlong	_var03, #20
251e0     97 14 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
251e4                 | LR__3130
251e4     A1 07 00 FF 
251e8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
251ec     1C 00 90 CD |  if_b	jmp	#LR__3132
251f0     02 03 02 F1 | 	add	_var02, _var03
251f4     01 13 02 F6 | 	mov	arg01, _var02
251f8     00 12 66 FA | 	addct1	arg01, #0
251fc     24 22 60 FD | 	waitct1
25200     A1 07 00 FF 
25204     40 00 86 F1 | 	sub	_var01, ##1000000
25208     D8 FF 9F FD | 	jmp	#LR__3130
2520c                 | LR__3131
2520c                 | LR__3132
2520c     01 00 56 F2 | 	cmps	_var01, #1 wc
25210     28 00 90 CD |  if_b	jmp	#LR__3133
25214     02 01 02 FD | 	qmul	_var01, _var03
25218     A1 07 00 FF 
2521c     40 16 06 F6 | 	mov	arg03, ##1000000
25220     19 FA 61 FD | 	getqy	result1
25224     18 12 62 FD | 	getqx	arg01
25228     28 FA 61 FD | 	setq	result1
2522c     0B 13 12 FD | 	qdiv	arg01, arg03
25230     18 FA 61 FD | 	getqx	result1
25234     FD 02 62 FA | 	addct1	_var02, result1
25238     24 22 60 FD | 	waitct1
2523c                 | LR__3133
2523c                 | __system___waitus_ret
2523c     2D 00 64 FD | 	ret
25240                 | 
25240                 | __system___mount
25240     0B 4A 05 F6 | 	mov	COUNT_, #11
25244     A8 00 A0 FD | 	call	#pushregs_
25248     09 27 02 F6 | 	mov	local01, arg01
2524c     0A 29 0A F6 | 	mov	local02, arg02 wz
25250     01 2A 66 F6 | 	neg	local03, #1
25254     01 FA 65 A6 |  if_e	neg	result1, #1
25258     98 02 90 AD |  if_e	jmp	#LR__3155
2525c     13 FB C1 FA | 	rdbyte	result1, local01
25260     2F FA 0D F2 | 	cmp	result1, #47 wz
25264     28 00 90 5D |  if_ne	jmp	#LR__3142
25268     13 13 02 F6 | 	mov	arg01, local01
2526c     09 2D 02 F6 | 	mov	local04, arg01
25270     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
25274                 | LR__3140
25274     16 FB C9 FA | 	rdbyte	result1, local04 wz
25278     01 2C 06 51 |  if_ne	add	local04, #1
2527c     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
25280                 | LR__3141
25280     09 2D 82 F1 | 	sub	local04, arg01
25284     16 FB 01 F6 | 	mov	result1, local04
25288     10 FA 55 F2 | 	cmps	result1, #16 wc
2528c     14 00 90 CD |  if_b	jmp	#LR__3143
25290                 | LR__3142
25290     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25294     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
25298     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2529c     01 FA 65 F6 | 	neg	result1, #1
252a0     50 02 90 FD | 	jmp	#LR__3155
252a4                 | LR__3143
252a4     00 2E 06 F6 | 	mov	local05, #0
252a8                 | LR__3144
252a8     04 2E 56 F2 | 	cmps	local05, #4 wc
252ac     B0 00 90 3D |  if_ae	jmp	#LR__3149
252b0     17 13 02 F6 | 	mov	arg01, local05
252b4     02 12 66 F0 | 	shl	arg01, #2
252b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
252bc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
252c0     09 FB 09 FB | 	rdlong	result1, arg01 wz
252c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
252c8     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
252cc     17 2B 02 86 |  if_c_and_z	mov	local03, local05
252d0     84 00 90 8D |  if_c_and_z	jmp	#LR__3148
252d4     17 13 02 F6 | 	mov	arg01, local05
252d8     02 12 66 F0 | 	shl	arg01, #2
252dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
252e0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
252e4     09 13 02 FB | 	rdlong	arg01, arg01
252e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
252ec     09 2D 02 F6 | 	mov	local04, arg01
252f0     97 06 48 FB | 	callpa	#(@LR__3146-@LR__3145)>>2,fcache_load_ptr_
252f4                 | LR__3145
252f4     16 FB C9 FA | 	rdbyte	result1, local04 wz
252f8     01 2C 06 51 |  if_ne	add	local04, #1
252fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3145
25300                 | LR__3146
25300     09 2D 82 F1 | 	sub	local04, arg01
25304     16 31 02 F6 | 	mov	local06, local04
25308     18 13 02 F6 | 	mov	arg01, local06
2530c     13 13 02 F1 | 	add	arg01, local01
25310     09 FB C1 FA | 	rdbyte	result1, arg01
25314     2F FA 0D F2 | 	cmp	result1, #47 wz
25318     18 33 02 56 |  if_ne	mov	local07, local06
2531c     13 33 02 51 |  if_ne	add	local07, local01
25320     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
25324     30 00 90 5D |  if_ne	jmp	#LR__3147
25328     17 17 02 F6 | 	mov	arg03, local05
2532c     02 16 66 F0 | 	shl	arg03, #2
25330     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25334     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
25338     0B 15 02 FB | 	rdlong	arg02, arg03
2533c     13 13 02 F6 | 	mov	arg01, local01
25340     18 17 02 F6 | 	mov	arg03, local06
25344     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25348     48 51 B0 FD | 	call	#__system__strncmp
2534c     00 FA 0D F2 | 	cmp	result1, #0 wz
25350     17 2B 02 A6 |  if_e	mov	local03, local05
25354     08 00 90 AD |  if_e	jmp	#LR__3149
25358                 | LR__3147
25358                 | LR__3148
25358     01 2E 06 F1 | 	add	local05, #1
2535c     48 FF 9F FD | 	jmp	#LR__3144
25360                 | LR__3149
25360     FF FF 7F FF 
25364     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
25368     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2536c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25370     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25374     01 FA 65 A6 |  if_e	neg	result1, #1
25378     78 01 90 AD |  if_e	jmp	#LR__3155
2537c     15 2F 02 F6 | 	mov	local05, local03
25380     17 33 02 F6 | 	mov	local07, local05
25384     02 32 66 F0 | 	shl	local07, #2
25388     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2538c     F3 32 02 F1 | 	add	local07, ptr___system__dat__
25390     19 31 0A FB | 	rdlong	local06, local07 wz
25394     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25398     58 00 90 AD |  if_e	jmp	#LR__3150
2539c     4C 30 06 F1 | 	add	local06, #76
253a0     18 33 0A FB | 	rdlong	local07, local06 wz
253a4     4C 30 86 F1 | 	sub	local06, #76
253a8     48 00 90 AD |  if_e	jmp	#LR__3150
253ac     4C 30 06 F1 | 	add	local06, #76
253b0     18 33 02 FB | 	rdlong	local07, local06
253b4     19 2B 02 F6 | 	mov	local03, local07
253b8     13 32 46 F7 | 	zerox	local07, #19
253bc     14 2A 46 F0 | 	shr	local03, #20
253c0     02 2A 66 F0 | 	shl	local03, #2
253c4     ED 2A 02 F1 | 	add	local03, __methods__
253c8     15 2B 02 FB | 	rdlong	local03, local03
253cc     17 31 02 F6 | 	mov	local06, local05
253d0     02 30 66 F0 | 	shl	local06, #2
253d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
253d8     F3 30 02 F1 | 	add	local06, ptr___system__dat__
253dc     18 13 02 FB | 	rdlong	arg01, local06
253e0     F2 30 02 F6 | 	mov	local06, objptr
253e4     19 E5 01 F6 | 	mov	objptr, local07
253e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
253ec     2D 2A 62 FD | 	call	local03
253f0     18 E5 01 F6 | 	mov	objptr, local06
253f4                 | LR__3150
253f4     17 35 02 F6 | 	mov	local08, local05
253f8     02 34 66 F0 | 	shl	local08, #2
253fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25400     F3 34 02 F1 | 	add	local08, ptr___system__dat__
25404     1A 29 62 FC | 	wrlong	local02, local08
25408     00 28 0E F2 | 	cmp	local02, #0 wz
2540c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25410     18 00 90 5D |  if_ne	jmp	#LR__3151
25414     02 2E 66 F0 | 	shl	local05, #2
25418     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2541c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25420     17 01 68 FC | 	wrlong	#0, local05
25424     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25428     C4 00 90 FD | 	jmp	#LR__3154
2542c                 | LR__3151
2542c     17 37 02 F6 | 	mov	local09, local05
25430     04 36 66 F0 | 	shl	local09, #4
25434     24 E6 05 F1 | 	add	ptr___system__dat__, #36
25438     F3 36 02 F1 | 	add	local09, ptr___system__dat__
2543c     1B 13 02 F6 | 	mov	arg01, local09
25440     13 15 02 F6 | 	mov	arg02, local01
25444     10 16 06 F6 | 	mov	arg03, #16
25448     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
2544c     98 4F B0 FD | 	call	#__system__strncpy
25450     48 28 06 F1 | 	add	local02, #72
25454     14 35 0A FB | 	rdlong	local08, local02 wz
25458     48 28 86 F1 | 	sub	local02, #72
2545c     7C 00 90 AD |  if_e	jmp	#LR__3153
25460     48 28 06 F1 | 	add	local02, #72
25464     14 35 02 FB | 	rdlong	local08, local02
25468     1A 39 02 F6 | 	mov	local10, local08
2546c     13 34 46 F7 | 	zerox	local08, #19
25470     14 38 46 F0 | 	shr	local10, #20
25474     02 38 66 F0 | 	shl	local10, #2
25478     ED 38 02 F1 | 	add	local10, __methods__
2547c     1C 39 02 FB | 	rdlong	local10, local10
25480     1B 13 02 F6 | 	mov	arg01, local09
25484     F2 3A 02 F6 | 	mov	local11, objptr
25488     1A E5 01 F6 | 	mov	objptr, local08
2548c     2D 38 62 FD | 	call	local10
25490     1D E5 01 F6 | 	mov	objptr, local11
25494     FD 12 0A F6 | 	mov	arg01, result1 wz
25498     40 00 90 AD |  if_e	jmp	#LR__3152
2549c     17 35 02 F6 | 	mov	local08, local05
254a0     02 34 66 F0 | 	shl	local08, #2
254a4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
254a8     F3 34 02 F1 | 	add	local08, ptr___system__dat__
254ac     1A 01 68 FC | 	wrlong	#0, local08
254b0     02 2E 66 F0 | 	shl	local05, #2
254b4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
254b8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
254bc     17 01 68 FC | 	wrlong	#0, local05
254c0     09 13 6A F6 | 	neg	arg01, arg01 wz
254c4     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
254c8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
254cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
254d0     01 FA 65 56 |  if_ne	neg	result1, #1
254d4     00 FA 05 A6 |  if_e	mov	result1, #0
254d8     18 00 90 FD | 	jmp	#LR__3155
254dc                 | LR__3152
254dc                 | LR__3153
254dc     02 2E 66 F0 | 	shl	local05, #2
254e0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
254e4     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
254e8     17 37 62 FC | 	wrlong	local09, local05
254ec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
254f0                 | LR__3154
254f0     00 FA 05 F6 | 	mov	result1, #0
254f4                 | LR__3155
254f4     A7 F0 03 F6 | 	mov	ptra, fp
254f8     B2 00 A0 FD | 	call	#popregs_
254fc                 | __system___mount_ret
254fc     2D 00 64 FD | 	ret
25500                 | 
25500                 | __system___chdir
25500     00 4A 05 F6 | 	mov	COUNT_, #0
25504     A8 00 A0 FD | 	call	#pushregs_
25508     40 F0 07 F1 | 	add	ptra, #64
2550c     04 4E 05 F1 | 	add	fp, #4
25510     A7 12 62 FC | 	wrlong	arg01, fp
25514     04 4E 05 F1 | 	add	fp, #4
25518     A7 14 02 F6 | 	mov	arg02, fp
2551c     08 4E 85 F1 | 	sub	fp, #8
25520     68 4B B0 FD | 	call	#__system__stat
25524     3C 4E 05 F1 | 	add	fp, #60
25528     A7 FA 61 FC | 	wrlong	result1, fp
2552c     3C 4E 85 F1 | 	sub	fp, #60
25530     00 FA 0D F2 | 	cmp	result1, #0 wz
25534     3C 4E 05 51 |  if_ne	add	fp, #60
25538     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2553c     3C 4E 85 51 |  if_ne	sub	fp, #60
25540     BC 00 90 5D |  if_ne	jmp	#LR__3162
25544     10 4E 05 F1 | 	add	fp, #16
25548     A7 12 02 FB | 	rdlong	arg01, fp
2554c     10 4E 85 F1 | 	sub	fp, #16
25550     78 00 00 FF 
25554     00 12 06 F5 | 	and	arg01, ##61440
25558     08 00 00 FF 
2555c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
25560     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
25564     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
25568     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2556c     01 FA 65 56 |  if_ne	neg	result1, #1
25570     8C 00 90 5D |  if_ne	jmp	#LR__3162
25574     04 4E 05 F1 | 	add	fp, #4
25578     A7 16 02 FB | 	rdlong	arg03, fp
2557c     04 4E 85 F1 | 	sub	fp, #4
25580     0B 17 C2 FA | 	rdbyte	arg03, arg03
25584     2F 16 0E F2 | 	cmp	arg03, #47 wz
25588     24 00 90 5D |  if_ne	jmp	#LR__3160
2558c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
25590     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25594     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
25598     04 4E 05 F1 | 	add	fp, #4
2559c     A7 14 02 FB | 	rdlong	arg02, fp
255a0     04 4E 85 F1 | 	sub	fp, #4
255a4     00 17 06 F6 | 	mov	arg03, #256
255a8     3C 4E B0 FD | 	call	#__system__strncpy
255ac     4C 00 90 FD | 	jmp	#LR__3161
255b0                 | LR__3160
255b0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
255b4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
255b8     38 4E 05 F1 | 	add	fp, #56
255bc     A7 12 62 FC | 	wrlong	arg01, fp
255c0     38 4E 85 F1 | 	sub	fp, #56
255c4     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
255c8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
255cc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
255d0     00 17 06 F6 | 	mov	arg03, #256
255d4     10 4E B0 FD | 	call	#__system__strncpy
255d8     38 4E 05 F1 | 	add	fp, #56
255dc     A7 12 02 FB | 	rdlong	arg01, fp
255e0     34 4E 85 F1 | 	sub	fp, #52
255e4     A7 14 02 FB | 	rdlong	arg02, fp
255e8     04 4E 85 F1 | 	sub	fp, #4
255ec     84 E6 05 F1 | 	add	ptr___system__dat__, #132
255f0     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
255f4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
255f8     10 00 B0 FD | 	call	#__system____getvfsforfile
255fc                 | LR__3161
255fc     00 FA 05 F6 | 	mov	result1, #0
25600                 | LR__3162
25600     A7 F0 03 F6 | 	mov	ptra, fp
25604     B2 00 A0 FD | 	call	#popregs_
25608                 | __system___chdir_ret
25608     2D 00 64 FD | 	ret
2560c                 | 
2560c                 | __system____getvfsforfile
2560c     0E 4A 05 F6 | 	mov	COUNT_, #14
25610     A8 00 A0 FD | 	call	#pushregs_
25614     09 27 02 F6 | 	mov	local01, arg01
25618     0A 29 02 F6 | 	mov	local02, arg02
2561c     0B 2B 02 F6 | 	mov	local03, arg03
25620     97 10 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
25624                 | LR__3170
25624     14 FB C1 FA | 	rdbyte	result1, local02
25628     2F FA 0D F2 | 	cmp	result1, #47 wz
2562c     01 28 06 A1 |  if_e	add	local02, #1
25630     14 2D C2 AA |  if_e	rdbyte	local04, local02
25634     01 28 86 A1 |  if_e	sub	local02, #1
25638     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
2563c     01 28 06 A1 |  if_e	add	local02, #1
25640     E0 FF 9F AD |  if_e	jmp	#LR__3170
25644                 | LR__3171
25644     14 2D C2 FA | 	rdbyte	local04, local02
25648     2F 2C 0E F2 | 	cmp	local04, #47 wz
2564c     14 00 90 5D |  if_ne	jmp	#LR__3172
25650     13 13 02 F6 | 	mov	arg01, local01
25654     14 15 02 F6 | 	mov	arg02, local02
25658     00 17 06 F6 | 	mov	arg03, #256
2565c     88 4D B0 FD | 	call	#__system__strncpy
25660     7C 00 90 FD | 	jmp	#LR__3174
25664                 | LR__3172
25664     84 E6 05 F1 | 	add	ptr___system__dat__, #132
25668     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2566c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
25670     13 13 02 F6 | 	mov	arg01, local01
25674     00 17 06 F6 | 	mov	arg03, #256
25678     6C 4D B0 FD | 	call	#__system__strncpy
2567c     14 2D CA FA | 	rdbyte	local04, local02 wz
25680     5C 00 90 AD |  if_e	jmp	#LR__3173
25684     14 2D C2 FA | 	rdbyte	local04, local02
25688     2E 2C 0E F2 | 	cmp	local04, #46 wz
2568c     01 28 06 A1 |  if_e	add	local02, #1
25690     14 2F C2 AA |  if_e	rdbyte	local05, local02
25694     01 28 86 A1 |  if_e	sub	local02, #1
25698     17 31 02 A6 |  if_e	mov	local06, local05
2569c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
256a0     3C 00 90 AD |  if_e	jmp	#LR__3173
256a4     13 2F C2 FA | 	rdbyte	local05, local01
256a8     2F 2E 0E F2 | 	cmp	local05, #47 wz
256ac     01 26 06 A1 |  if_e	add	local01, #1
256b0     13 2D C2 AA |  if_e	rdbyte	local04, local01
256b4     01 26 86 A1 |  if_e	sub	local01, #1
256b8     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
256bc     A4 01 00 5F 
256c0     80 15 06 56 |  if_ne	mov	arg02, ##@LR__5300
256c4     13 13 02 56 |  if_ne	mov	arg01, local01
256c8     00 17 06 56 |  if_ne	mov	arg03, #256
256cc     64 4D B0 5D |  if_ne	call	#__system__strncat
256d0     13 13 02 F6 | 	mov	arg01, local01
256d4     14 15 02 F6 | 	mov	arg02, local02
256d8     00 17 06 F6 | 	mov	arg03, #256
256dc     54 4D B0 FD | 	call	#__system__strncat
256e0                 | LR__3173
256e0                 | LR__3174
256e0     13 13 02 F6 | 	mov	arg01, local01
256e4     0C 4F B0 FD | 	call	#__system___normalizeName
256e8     13 2D CA FA | 	rdbyte	local04, local01 wz
256ec     1C 00 90 AD |  if_e	jmp	#LR__3175
256f0     13 2D C2 FA | 	rdbyte	local04, local01
256f4     2F 2C 0E F2 | 	cmp	local04, #47 wz
256f8     01 26 06 A1 |  if_e	add	local01, #1
256fc     13 31 C2 AA |  if_e	rdbyte	local06, local01
25700     01 26 86 A1 |  if_e	sub	local01, #1
25704     00 30 4E A2 |  if_e	cmps	local06, #0 wz
25708     18 00 90 5D |  if_ne	jmp	#LR__3176
2570c                 | LR__3175
2570c     01 00 00 FF 
25710     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
25714     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
25718     01 00 00 FF 
2571c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
25720     EC 01 90 FD | 	jmp	#LR__3190
25724                 | LR__3176
25724     00 32 06 F6 | 	mov	local07, #0
25728                 | LR__3177
25728     04 32 56 F2 | 	cmps	local07, #4 wc
2572c     CC 01 90 3D |  if_ae	jmp	#LR__3189
25730     19 31 02 F6 | 	mov	local06, local07
25734     02 30 66 F0 | 	shl	local06, #2
25738     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2573c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
25740     18 31 0A FB | 	rdlong	local06, local06 wz
25744     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25748     A8 01 90 AD |  if_e	jmp	#LR__3188
2574c     19 2D 02 F6 | 	mov	local04, local07
25750     02 2C 66 F0 | 	shl	local04, #2
25754     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25758     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
2575c     16 13 02 FB | 	rdlong	arg01, local04
25760     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25764     09 35 02 F6 | 	mov	local08, arg01
25768     97 06 48 FB | 	callpa	#(@LR__3179-@LR__3178)>>2,fcache_load_ptr_
2576c                 | LR__3178
2576c     1A FB C9 FA | 	rdbyte	result1, local08 wz
25770     01 34 06 51 |  if_ne	add	local08, #1
25774     F4 FF 9F 5D |  if_ne	jmp	#LR__3178
25778                 | LR__3179
25778     09 35 82 F1 | 	sub	local08, arg01
2577c     1A 37 02 F6 | 	mov	local09, local08
25780     1B 2D 02 F6 | 	mov	local04, local09
25784     13 2D 02 F1 | 	add	local04, local01
25788     16 31 C2 FA | 	rdbyte	local06, local04
2578c     2F 30 0E F2 | 	cmp	local06, #47 wz
25790     1B 39 02 56 |  if_ne	mov	local10, local09
25794     13 39 02 51 |  if_ne	add	local10, local01
25798     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
2579c     54 01 90 5D |  if_ne	jmp	#LR__3187
257a0     19 17 02 F6 | 	mov	arg03, local07
257a4     02 16 66 F0 | 	shl	arg03, #2
257a8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
257ac     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
257b0     0B 15 02 FB | 	rdlong	arg02, arg03
257b4     1B 17 02 F6 | 	mov	arg03, local09
257b8     13 13 02 F6 | 	mov	arg01, local01
257bc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
257c0     D0 4C B0 FD | 	call	#__system__strncmp
257c4     00 FA 4D F2 | 	cmps	result1, #0 wz
257c8     28 01 90 5D |  if_ne	jmp	#LR__3187
257cc     19 3B 02 F6 | 	mov	local11, local07
257d0     02 3A 66 F0 | 	shl	local11, #2
257d4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
257d8     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
257dc     1D 3D 02 FB | 	rdlong	local12, local11
257e0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
257e4     97 22 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
257e8                 | LR__3180
257e8     1B 31 02 F6 | 	mov	local06, local09
257ec     01 30 06 F1 | 	add	local06, #1
257f0     13 31 02 F1 | 	add	local06, local01
257f4     18 3B C2 FA | 	rdbyte	local11, local06
257f8     2E 3A 0E F2 | 	cmp	local11, #46 wz
257fc     2C 00 90 5D |  if_ne	jmp	#LR__3182
25800     1B 3B 02 F6 | 	mov	local11, local09
25804     02 3A 06 F1 | 	add	local11, #2
25808     13 3B 02 F1 | 	add	local11, local01
2580c     1D 39 C2 FA | 	rdbyte	local10, local11
25810     2F 38 0E F2 | 	cmp	local10, #47 wz
25814     1B 3F 02 56 |  if_ne	mov	local13, local09
25818     02 3E 06 51 |  if_ne	add	local13, #2
2581c     13 3F 02 51 |  if_ne	add	local13, local01
25820     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
25824     01 36 06 A1 |  if_e	add	local09, #1
25828     BC FF 9F AD |  if_e	jmp	#LR__3180
2582c                 | LR__3181
2582c                 | LR__3182
2582c     00 2A 0E F2 | 	cmp	local03, #0 wz
25830     15 13 02 56 |  if_ne	mov	arg01, local03
25834     13 15 02 56 |  if_ne	mov	arg02, local01
25838     00 17 06 56 |  if_ne	mov	arg03, #256
2583c     A8 4B B0 5D |  if_ne	call	#__system__strncpy
25840     13 15 02 F6 | 	mov	arg02, local01
25844     1B 15 02 F1 | 	add	arg02, local09
25848     01 14 06 F1 | 	add	arg02, #1
2584c     13 13 02 F6 | 	mov	arg01, local01
25850     D4 F5 BF FD | 	call	#__system____builtin_strcpy
25854     13 13 02 F6 | 	mov	arg01, local01
25858     09 35 02 F6 | 	mov	local08, arg01
2585c     97 06 48 FB | 	callpa	#(@LR__3184-@LR__3183)>>2,fcache_load_ptr_
25860                 | LR__3183
25860     1A FB C9 FA | 	rdbyte	result1, local08 wz
25864     01 34 06 51 |  if_ne	add	local08, #1
25868     F4 FF 9F 5D |  if_ne	jmp	#LR__3183
2586c                 | LR__3184
2586c     09 35 82 F1 | 	sub	local08, arg01
25870     1A 37 02 F6 | 	mov	local09, local08
25874                 | LR__3185
25874     01 36 56 F2 | 	cmps	local09, #1 wc
25878     70 00 90 CD |  if_b	jmp	#LR__3186
2587c     1B 2D 02 F6 | 	mov	local04, local09
25880     13 2D 02 F1 | 	add	local04, local01
25884     16 3B C2 FA | 	rdbyte	local11, local04
25888     2F 3A 0E F2 | 	cmp	local11, #47 wz
2588c     1B 3B 02 A6 |  if_e	mov	local11, local09
25890     13 3B 02 A1 |  if_e	add	local11, local01
25894     1D 01 48 AC |  if_e	wrbyte	#0, local11
25898     01 36 86 A1 |  if_e	sub	local09, #1
2589c     D4 FF 9F AD |  if_e	jmp	#LR__3185
258a0     1B 2D 02 F6 | 	mov	local04, local09
258a4     13 2D 02 F1 | 	add	local04, local01
258a8     16 3B C2 FA | 	rdbyte	local11, local04
258ac     2E 3A 0E F2 | 	cmp	local11, #46 wz
258b0     38 00 90 5D |  if_ne	jmp	#LR__3186
258b4     02 36 56 F2 | 	cmps	local09, #2 wc
258b8     30 00 90 CD |  if_b	jmp	#LR__3186
258bc     1B 41 02 F6 | 	mov	local14, local09
258c0     01 40 86 F1 | 	sub	local14, #1
258c4     13 41 02 F1 | 	add	local14, local01
258c8     20 2F C2 FA | 	rdbyte	local05, local14
258cc     2F 2E 0E F2 | 	cmp	local05, #47 wz
258d0     18 00 90 5D |  if_ne	jmp	#LR__3186
258d4     1B 2D 02 F6 | 	mov	local04, local09
258d8     01 2C 86 F1 | 	sub	local04, #1
258dc     13 2D 02 F1 | 	add	local04, local01
258e0     16 01 48 FC | 	wrbyte	#0, local04
258e4     02 36 86 F1 | 	sub	local09, #2
258e8     88 FF 9F FD | 	jmp	#LR__3185
258ec                 | LR__3186
258ec     1E FB 01 F6 | 	mov	result1, local12
258f0     1C 00 90 FD | 	jmp	#LR__3190
258f4                 | LR__3187
258f4                 | LR__3188
258f4     01 32 06 F1 | 	add	local07, #1
258f8     2C FE 9F FD | 	jmp	#LR__3177
258fc                 | LR__3189
258fc     02 00 00 FF 
25900     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25904     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
25908     02 00 00 FF 
2590c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25910                 | LR__3190
25910     A7 F0 03 F6 | 	mov	ptra, fp
25914     B2 00 A0 FD | 	call	#popregs_
25918                 | __system____getvfsforfile_ret
25918     2D 00 64 FD | 	ret
2591c                 | 
2591c                 | __system___basic_open
2591c     05 4A 05 F6 | 	mov	COUNT_, #5
25920     A8 00 A0 FD | 	call	#pushregs_
25924     0A 27 02 F6 | 	mov	local01, arg02
25928     0B 29 02 F6 | 	mov	local02, arg03
2592c     0C 2B 02 F6 | 	mov	local03, arg04
25930     00 2C 06 F6 | 	mov	local04, #0
25934     88 4A B0 FD | 	call	#__system____getftab
25938     FD 2E 0A F6 | 	mov	local05, result1 wz
2593c     18 00 90 5D |  if_ne	jmp	#LR__3200
25940     EE 12 02 F6 | 	mov	arg01, abortchain
25944     0C 14 06 F6 | 	mov	arg02, #12
25948     01 16 06 F6 | 	mov	arg03, #1
2594c     DA 00 A0 FD | 	call	#__longjmp
25950     01 FA 65 F6 | 	neg	result1, #1
25954     14 01 90 FD | 	jmp	#LR__3209
25958                 | LR__3200
25958     08 2E 06 F1 | 	add	local05, #8
2595c     17 FB 09 FB | 	rdlong	result1, local05 wz
25960     08 2E 86 F1 | 	sub	local05, #8
25964     17 13 02 56 |  if_ne	mov	arg01, local05
25968     A8 41 B0 5D |  if_ne	call	#__system___closeraw
2596c     00 26 0E F2 | 	cmp	local01, #0 wz
25970     00 28 0E A2 |  if_e	cmp	local02, #0 wz
25974     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
25978     3C 00 90 AD |  if_e	jmp	#LR__3202
2597c     0C 12 06 F6 | 	mov	arg01, #12
25980     90 36 B0 FD | 	call	#__system___gc_alloc_managed
25984     FD 2C 0A F6 | 	mov	local04, result1 wz
25988     18 00 90 5D |  if_ne	jmp	#LR__3201
2598c     EE 12 02 F6 | 	mov	arg01, abortchain
25990     07 14 06 F6 | 	mov	arg02, #7
25994     01 16 06 F6 | 	mov	arg03, #1
25998     DA 00 A0 FD | 	call	#__longjmp
2599c     01 FA 65 F6 | 	neg	result1, #1
259a0     C8 00 90 FD | 	jmp	#LR__3209
259a4                 | LR__3201
259a4     16 01 68 FC | 	wrlong	#0, local04
259a8     04 2C 06 F1 | 	add	local04, #4
259ac     16 01 68 FC | 	wrlong	#0, local04
259b0     04 2C 86 F1 | 	sub	local04, #4
259b4     17 2D 62 FC | 	wrlong	local04, local05
259b8                 | LR__3202
259b8     00 26 0E F2 | 	cmp	local01, #0 wz
259bc     20 00 90 AD |  if_e	jmp	#LR__3203
259c0     16 27 62 FC | 	wrlong	local01, local04
259c4     16 FB 01 F6 | 	mov	result1, local04
259c8     00 C8 04 FF 
259cc     00 FA 45 F5 | 	or	result1, ##160432128
259d0     1C 2E 06 F1 | 	add	local05, #28
259d4     17 FB 61 FC | 	wrlong	result1, local05
259d8     1C 2E 86 F1 | 	sub	local05, #28
259dc     0C 00 90 FD | 	jmp	#LR__3204
259e0                 | LR__3203
259e0     1C 2E 06 F1 | 	add	local05, #28
259e4     17 01 68 FC | 	wrlong	#0, local05
259e8     1C 2E 86 F1 | 	sub	local05, #28
259ec                 | LR__3204
259ec     00 28 0E F2 | 	cmp	local02, #0 wz
259f0     28 00 90 AD |  if_e	jmp	#LR__3205
259f4     04 2C 06 F1 | 	add	local04, #4
259f8     16 29 62 FC | 	wrlong	local02, local04
259fc     04 2C 86 F1 | 	sub	local04, #4
25a00     16 FB 01 F6 | 	mov	result1, local04
25a04     00 D0 04 FF 
25a08     00 FA 45 F5 | 	or	result1, ##161480704
25a0c     20 2E 06 F1 | 	add	local05, #32
25a10     17 FB 61 FC | 	wrlong	result1, local05
25a14     20 2E 86 F1 | 	sub	local05, #32
25a18     0C 00 90 FD | 	jmp	#LR__3206
25a1c                 | LR__3205
25a1c     20 2E 06 F1 | 	add	local05, #32
25a20     17 01 68 FC | 	wrlong	#0, local05
25a24     20 2E 86 F1 | 	sub	local05, #32
25a28                 | LR__3206
25a28     00 2A 0E F2 | 	cmp	local03, #0 wz
25a2c     24 00 90 AD |  if_e	jmp	#LR__3207
25a30     08 2C 06 F1 | 	add	local04, #8
25a34     16 2B 62 FC | 	wrlong	local03, local04
25a38     08 2C 86 F1 | 	sub	local04, #8
25a3c     00 D8 04 FF 
25a40     00 2C 46 F5 | 	or	local04, ##162529280
25a44     24 2E 06 F1 | 	add	local05, #36
25a48     17 2D 62 FC | 	wrlong	local04, local05
25a4c     24 2E 86 F1 | 	sub	local05, #36
25a50     0C 00 90 FD | 	jmp	#LR__3208
25a54                 | LR__3207
25a54     24 2E 06 F1 | 	add	local05, #36
25a58     17 01 68 FC | 	wrlong	#0, local05
25a5c     24 2E 86 F1 | 	sub	local05, #36
25a60                 | LR__3208
25a60     08 2E 06 F1 | 	add	local05, #8
25a64     17 0F 68 FC | 	wrlong	#7, local05
25a68     00 FA 05 F6 | 	mov	result1, #0
25a6c                 | LR__3209
25a6c     A7 F0 03 F6 | 	mov	ptra, fp
25a70     B2 00 A0 FD | 	call	#popregs_
25a74                 | __system___basic_open_ret
25a74     2D 00 64 FD | 	ret
25a78                 | 
25a78                 | __system___basic_open_string
25a78     04 4A 05 F6 | 	mov	COUNT_, #4
25a7c     A8 00 A0 FD | 	call	#pushregs_
25a80     0A 27 02 F6 | 	mov	local01, arg02
25a84     0B 29 02 F6 | 	mov	local02, arg03
25a88     34 49 B0 FD | 	call	#__system____getftab
25a8c     FD 2A 0A F6 | 	mov	local03, result1 wz
25a90     18 00 90 5D |  if_ne	jmp	#LR__3210
25a94     EE 12 02 F6 | 	mov	arg01, abortchain
25a98     0C 14 06 F6 | 	mov	arg02, #12
25a9c     01 16 06 F6 | 	mov	arg03, #1
25aa0     DA 00 A0 FD | 	call	#__longjmp
25aa4     01 FA 65 F6 | 	neg	result1, #1
25aa8     58 00 90 FD | 	jmp	#LR__3212
25aac                 | LR__3210
25aac     08 2A 06 F1 | 	add	local03, #8
25ab0     15 19 0A FB | 	rdlong	arg04, local03 wz
25ab4     08 2A 86 F1 | 	sub	local03, #8
25ab8     15 13 02 56 |  if_ne	mov	arg01, local03
25abc     54 40 B0 5D |  if_ne	call	#__system___closeraw
25ac0     13 15 02 F6 | 	mov	arg02, local01
25ac4     14 17 02 F6 | 	mov	arg03, local02
25ac8     15 13 02 F6 | 	mov	arg01, local03
25acc     B6 19 06 F6 | 	mov	arg04, #438
25ad0     3C 3D B0 FD | 	call	#__system___openraw
25ad4     FD 2C 02 F6 | 	mov	local04, result1
25ad8     00 2C 56 F2 | 	cmps	local04, #0 wc
25adc     20 00 90 3D |  if_ae	jmp	#LR__3211
25ae0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25ae4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
25ae8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25aec     EE 12 02 F6 | 	mov	arg01, abortchain
25af0     01 16 06 F6 | 	mov	arg03, #1
25af4     DA 00 A0 FD | 	call	#__longjmp
25af8     01 FA 65 F6 | 	neg	result1, #1
25afc     04 00 90 FD | 	jmp	#LR__3212
25b00                 | LR__3211
25b00     16 FB 01 F6 | 	mov	result1, local04
25b04                 | LR__3212
25b04     A7 F0 03 F6 | 	mov	ptra, fp
25b08     B2 00 A0 FD | 	call	#popregs_
25b0c                 | __system___basic_open_string_ret
25b0c     2D 00 64 FD | 	ret
25b10                 | 
25b10                 | __system___basic_print_char
25b10     03 4A 05 F6 | 	mov	COUNT_, #3
25b14     A8 00 A0 FD | 	call	#pushregs_
25b18     0A 27 02 F6 | 	mov	local01, arg02
25b1c     F4 4F B0 FD | 	call	#__system___gettxfunc
25b20     FD 28 0A F6 | 	mov	local02, result1 wz
25b24     00 FA 05 A6 |  if_e	mov	result1, #0
25b28     30 00 90 AD |  if_e	jmp	#LR__3220
25b2c     14 2B 02 F6 | 	mov	local03, local02
25b30     13 28 46 F7 | 	zerox	local02, #19
25b34     14 2A 46 F0 | 	shr	local03, #20
25b38     02 2A 66 F0 | 	shl	local03, #2
25b3c     ED 2A 02 F1 | 	add	local03, __methods__
25b40     15 2B 02 FB | 	rdlong	local03, local03
25b44     13 13 02 F6 | 	mov	arg01, local01
25b48     F2 26 02 F6 | 	mov	local01, objptr
25b4c     14 E5 01 F6 | 	mov	objptr, local02
25b50     2D 2A 62 FD | 	call	local03
25b54     13 E5 01 F6 | 	mov	objptr, local01
25b58     01 FA 05 F6 | 	mov	result1, #1
25b5c                 | LR__3220
25b5c     A7 F0 03 F6 | 	mov	ptra, fp
25b60     B2 00 A0 FD | 	call	#popregs_
25b64                 | __system___basic_print_char_ret
25b64     2D 00 64 FD | 	ret
25b68                 | 
25b68                 | __system___basic_print_string
25b68     03 4A 05 F6 | 	mov	COUNT_, #3
25b6c     A8 00 A0 FD | 	call	#pushregs_
25b70     0A 27 02 F6 | 	mov	local01, arg02
25b74     0B 29 02 F6 | 	mov	local02, arg03
25b78     98 4F B0 FD | 	call	#__system___gettxfunc
25b7c     FD 2A 0A F6 | 	mov	local03, result1 wz
25b80     00 FA 05 A6 |  if_e	mov	result1, #0
25b84     18 00 90 AD |  if_e	jmp	#LR__3230
25b88     00 26 0E F2 | 	cmp	local01, #0 wz
25b8c     00 FA 05 A6 |  if_e	mov	result1, #0
25b90     15 13 02 56 |  if_ne	mov	arg01, local03
25b94     14 15 02 56 |  if_ne	mov	arg02, local02
25b98     13 17 02 56 |  if_ne	mov	arg03, local01
25b9c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
25ba0                 | LR__3230
25ba0     A7 F0 03 F6 | 	mov	ptra, fp
25ba4     B2 00 A0 FD | 	call	#popregs_
25ba8                 | __system___basic_print_string_ret
25ba8     2D 00 64 FD | 	ret
25bac                 | 
25bac                 | __system___basic_print_integer
25bac     04 4A 05 F6 | 	mov	COUNT_, #4
25bb0     A8 00 A0 FD | 	call	#pushregs_
25bb4     0A 27 02 F6 | 	mov	local01, arg02
25bb8     0B 29 02 F6 | 	mov	local02, arg03
25bbc     0C 2B 02 F6 | 	mov	local03, arg04
25bc0     50 4F B0 FD | 	call	#__system___gettxfunc
25bc4     FD 2C 0A F6 | 	mov	local04, result1 wz
25bc8     00 FA 05 A6 |  if_e	mov	result1, #0
25bcc     16 13 02 56 |  if_ne	mov	arg01, local04
25bd0     14 15 02 56 |  if_ne	mov	arg02, local02
25bd4     13 17 02 56 |  if_ne	mov	arg03, local01
25bd8     15 19 02 56 |  if_ne	mov	arg04, local03
25bdc     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
25be0     A7 F0 03 F6 | 	mov	ptra, fp
25be4     B2 00 A0 FD | 	call	#popregs_
25be8                 | __system___basic_print_integer_ret
25be8     2D 00 64 FD | 	ret
25bec                 | 
25bec                 | __system___basic_print_unsigned
25bec     03 4A 05 F6 | 	mov	COUNT_, #3
25bf0     A8 00 A0 FD | 	call	#pushregs_
25bf4     0A 27 02 F6 | 	mov	local01, arg02
25bf8     0B 29 02 F6 | 	mov	local02, arg03
25bfc     0C 2B 02 F6 | 	mov	local03, arg04
25c00     10 4F B0 FD | 	call	#__system___gettxfunc
25c04     FD 12 0A F6 | 	mov	arg01, result1 wz
25c08     00 FA 05 A6 |  if_e	mov	result1, #0
25c0c     3A 28 26 54 |  if_ne	bith	local02, #58
25c10     14 15 02 56 |  if_ne	mov	arg02, local02
25c14     13 17 02 56 |  if_ne	mov	arg03, local01
25c18     15 19 02 56 |  if_ne	mov	arg04, local03
25c1c     74 02 B0 5D |  if_ne	call	#__system___fmtnum
25c20     A7 F0 03 F6 | 	mov	ptra, fp
25c24     B2 00 A0 FD | 	call	#popregs_
25c28                 | __system___basic_print_unsigned_ret
25c28     2D 00 64 FD | 	ret
25c2c                 | 
25c2c                 | __system___basic_get_char
25c2c     03 4A 05 F6 | 	mov	COUNT_, #3
25c30     A8 00 A0 FD | 	call	#pushregs_
25c34     20 4F B0 FD | 	call	#__system___getrxfunc
25c38     FD 26 0A F6 | 	mov	local01, result1 wz
25c3c     01 FA 65 A6 |  if_e	neg	result1, #1
25c40     28 00 90 AD |  if_e	jmp	#LR__3240
25c44     13 29 02 F6 | 	mov	local02, local01
25c48     13 26 46 F7 | 	zerox	local01, #19
25c4c     14 28 46 F0 | 	shr	local02, #20
25c50     02 28 66 F0 | 	shl	local02, #2
25c54     ED 28 02 F1 | 	add	local02, __methods__
25c58     14 29 02 FB | 	rdlong	local02, local02
25c5c     F2 2A 02 F6 | 	mov	local03, objptr
25c60     13 E5 01 F6 | 	mov	objptr, local01
25c64     2D 28 62 FD | 	call	local02
25c68     15 E5 01 F6 | 	mov	objptr, local03
25c6c                 | LR__3240
25c6c     A7 F0 03 F6 | 	mov	ptra, fp
25c70     B2 00 A0 FD | 	call	#popregs_
25c74                 | __system___basic_get_char_ret
25c74     2D 00 64 FD | 	ret
25c78                 | 
25c78                 | __system___basic_put
25c78     04 4A 05 F6 | 	mov	COUNT_, #4
25c7c     A8 00 A0 FD | 	call	#pushregs_
25c80     0D 27 02 F6 | 	mov	local01, arg05
25c84     13 19 02 FD | 	qmul	arg04, local01
25c88     09 29 02 F6 | 	mov	local02, arg01
25c8c     0B 2B 02 F6 | 	mov	local03, arg03
25c90     00 14 0E F2 | 	cmp	arg02, #0 wz
25c94     01 14 86 51 |  if_ne	sub	arg02, #1
25c98     14 13 02 56 |  if_ne	mov	arg01, local02
25c9c     00 16 06 56 |  if_ne	mov	arg03, #0
25ca0     18 2C 62 FD | 	getqx	local04
25ca4     60 45 B0 5D |  if_ne	call	#__system__lseek
25ca8     15 15 02 F6 | 	mov	arg02, local03
25cac     16 17 02 F6 | 	mov	arg03, local04
25cb0     14 13 02 F6 | 	mov	arg01, local02
25cb4     9C 44 B0 FD | 	call	#__system__write
25cb8     FD 2C 02 F6 | 	mov	local04, result1
25cbc     01 2C 56 F2 | 	cmps	local04, #1 wc
25cc0     10 00 90 CD |  if_b	jmp	#LR__3250
25cc4     16 89 02 F6 | 	mov	muldiva_, local04
25cc8     13 8B 02 F6 | 	mov	muldivb_, local01
25ccc     BA 00 A0 FD | 	call	#divide_
25cd0     45 2D 02 F6 | 	mov	local04, muldivb_
25cd4                 | LR__3250
25cd4     16 FB 01 F6 | 	mov	result1, local04
25cd8     A7 F0 03 F6 | 	mov	ptra, fp
25cdc     B2 00 A0 FD | 	call	#popregs_
25ce0                 | __system___basic_put_ret
25ce0     2D 00 64 FD | 	ret
25ce4                 | 
25ce4                 | __system___basic_get
25ce4     04 4A 05 F6 | 	mov	COUNT_, #4
25ce8     A8 00 A0 FD | 	call	#pushregs_
25cec     0D 27 02 F6 | 	mov	local01, arg05
25cf0     13 19 02 FD | 	qmul	arg04, local01
25cf4     09 29 02 F6 | 	mov	local02, arg01
25cf8     0B 2B 02 F6 | 	mov	local03, arg03
25cfc     00 14 0E F2 | 	cmp	arg02, #0 wz
25d00     01 14 86 51 |  if_ne	sub	arg02, #1
25d04     14 13 02 56 |  if_ne	mov	arg01, local02
25d08     00 16 06 56 |  if_ne	mov	arg03, #0
25d0c     18 2C 62 FD | 	getqx	local04
25d10     F4 44 B0 5D |  if_ne	call	#__system__lseek
25d14     15 15 02 F6 | 	mov	arg02, local03
25d18     16 17 02 F6 | 	mov	arg03, local04
25d1c     14 13 02 F6 | 	mov	arg01, local02
25d20     6C 44 B0 FD | 	call	#__system__read
25d24     FD 2C 02 F6 | 	mov	local04, result1
25d28     01 2C 56 F2 | 	cmps	local04, #1 wc
25d2c     10 00 90 CD |  if_b	jmp	#LR__3260
25d30     16 89 02 F6 | 	mov	muldiva_, local04
25d34     13 8B 02 F6 | 	mov	muldivb_, local01
25d38     BA 00 A0 FD | 	call	#divide_
25d3c     45 2D 02 F6 | 	mov	local04, muldivb_
25d40                 | LR__3260
25d40     16 FB 01 F6 | 	mov	result1, local04
25d44     A7 F0 03 F6 | 	mov	ptra, fp
25d48     B2 00 A0 FD | 	call	#popregs_
25d4c                 | __system___basic_get_ret
25d4c     2D 00 64 FD | 	ret
25d50                 | 
25d50                 | __system___fmtchar
25d50     00 4A 05 F6 | 	mov	COUNT_, #0
25d54     A8 00 A0 FD | 	call	#pushregs_
25d58     10 F0 07 F1 | 	add	ptra, #16
25d5c     04 4E 05 F1 | 	add	fp, #4
25d60     A7 12 62 FC | 	wrlong	arg01, fp
25d64     04 4E 05 F1 | 	add	fp, #4
25d68     A7 14 62 FC | 	wrlong	arg02, fp
25d6c     04 4E 05 F1 | 	add	fp, #4
25d70     A7 16 62 FC | 	wrlong	arg03, fp
25d74     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
25d78     A7 16 62 FC | 	wrlong	arg03, fp
25d7c     08 4E 85 F1 | 	sub	fp, #8
25d80     A7 12 02 FB | 	rdlong	arg01, fp
25d84     04 4E 05 F1 | 	add	fp, #4
25d88     A7 14 02 FB | 	rdlong	arg02, fp
25d8c     04 4E 05 F1 | 	add	fp, #4
25d90     A7 16 02 F6 | 	mov	arg03, fp
25d94     0C 4E 85 F1 | 	sub	fp, #12
25d98     0C 00 B0 FD | 	call	#__system___fmtstr
25d9c     A7 F0 03 F6 | 	mov	ptra, fp
25da0     B2 00 A0 FD | 	call	#popregs_
25da4                 | __system___fmtchar_ret
25da4     2D 00 64 FD | 	ret
25da8                 | 
25da8                 | __system___fmtstr
25da8     09 4A 05 F6 | 	mov	COUNT_, #9
25dac     A8 00 A0 FD | 	call	#pushregs_
25db0     09 27 02 F6 | 	mov	local01, arg01
25db4     0A 29 02 F6 | 	mov	local02, arg02
25db8     0B 2B 02 F6 | 	mov	local03, arg03
25dbc     14 19 E2 F8 | 	getbyte	arg04, local02, #0
25dc0     15 13 02 F6 | 	mov	arg01, local03
25dc4     09 2D 02 F6 | 	mov	local04, arg01
25dc8     97 06 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
25dcc                 | LR__3270
25dcc     16 FB C9 FA | 	rdbyte	result1, local04 wz
25dd0     01 2C 06 51 |  if_ne	add	local04, #1
25dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__3270
25dd8                 | LR__3271
25dd8     09 2D 82 F1 | 	sub	local04, arg01
25ddc     00 18 0E F2 | 	cmp	arg04, #0 wz
25de0     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
25de4     14 15 02 F6 | 	mov	arg02, local02
25de8     16 17 02 F6 | 	mov	arg03, local04
25dec     13 13 02 F6 | 	mov	arg01, local01
25df0     02 18 06 F6 | 	mov	arg04, #2
25df4     BC 49 B0 FD | 	call	#__system___fmtpad
25df8     FD 2E 02 F6 | 	mov	local05, result1
25dfc     00 2E 56 F2 | 	cmps	local05, #0 wc
25e00     17 FB 01 C6 |  if_b	mov	result1, local05
25e04     80 00 90 CD |  if_b	jmp	#LR__3274
25e08     01 2C 56 F2 | 	cmps	local04, #1 wc
25e0c     50 00 90 CD |  if_b	jmp	#LR__3273
25e10     16 31 02 F6 | 	mov	local06, local04
25e14                 | LR__3272
25e14     13 33 02 F6 | 	mov	local07, local01
25e18     13 35 02 F6 | 	mov	local08, local01
25e1c     13 32 46 F7 | 	zerox	local07, #19
25e20     14 34 46 F0 | 	shr	local08, #20
25e24     02 34 66 F0 | 	shl	local08, #2
25e28     ED 34 02 F1 | 	add	local08, __methods__
25e2c     1A 35 02 FB | 	rdlong	local08, local08
25e30     15 13 C2 FA | 	rdbyte	arg01, local03
25e34     F2 36 02 F6 | 	mov	local09, objptr
25e38     19 E5 01 F6 | 	mov	objptr, local07
25e3c     01 2A 06 F1 | 	add	local03, #1
25e40     2D 34 62 FD | 	call	local08
25e44     1B E5 01 F6 | 	mov	objptr, local09
25e48     FD 36 02 F6 | 	mov	local09, result1
25e4c     00 36 56 F2 | 	cmps	local09, #0 wc
25e50     1B FB 01 C6 |  if_b	mov	result1, local09
25e54     30 00 90 CD |  if_b	jmp	#LR__3274
25e58     1B 2F 02 F1 | 	add	local05, local09
25e5c     ED 31 6E FB | 	djnz	local06, #LR__3272
25e60                 | LR__3273
25e60     14 15 02 F6 | 	mov	arg02, local02
25e64     16 17 02 F6 | 	mov	arg03, local04
25e68     13 13 02 F6 | 	mov	arg01, local01
25e6c     01 18 06 F6 | 	mov	arg04, #1
25e70     40 49 B0 FD | 	call	#__system___fmtpad
25e74     FD 36 02 F6 | 	mov	local09, result1
25e78     00 36 56 F2 | 	cmps	local09, #0 wc
25e7c     1B FB 01 C6 |  if_b	mov	result1, local09
25e80     1B 2F 02 31 |  if_ae	add	local05, local09
25e84     17 FB 01 36 |  if_ae	mov	result1, local05
25e88                 | LR__3274
25e88     A7 F0 03 F6 | 	mov	ptra, fp
25e8c     B2 00 A0 FD | 	call	#popregs_
25e90                 | __system___fmtstr_ret
25e90     2D 00 64 FD | 	ret
25e94                 | 
25e94                 | __system___fmtnum
25e94     0B 4A 05 F6 | 	mov	COUNT_, #11
25e98     A8 00 A0 FD | 	call	#pushregs_
25e9c     09 27 02 F6 | 	mov	local01, arg01
25ea0     0A 29 02 F6 | 	mov	local02, arg02
25ea4     0B 2B 02 F6 | 	mov	local03, arg03
25ea8     0C 2D 02 F6 | 	mov	local04, arg04
25eac     F8 2F 02 F6 | 	mov	local05, ptra
25eb0     17 31 02 F6 | 	mov	local06, local05
25eb4     00 32 06 F6 | 	mov	local07, #0
25eb8     14 35 02 F6 | 	mov	local08, local02
25ebc     10 34 46 F0 | 	shr	local08, #16
25ec0     3F 34 06 F5 | 	and	local08, #63
25ec4     14 37 E2 F8 | 	getbyte	local09, local02, #0
25ec8     14 39 02 F6 | 	mov	local10, local02
25ecc     1A 38 46 F0 | 	shr	local10, #26
25ed0     03 38 06 F5 | 	and	local10, #3
25ed4     1C 3B 02 F6 | 	mov	local11, local10
25ed8     01 34 56 F2 | 	cmps	local08, #1 wc
25edc     44 F0 07 F1 | 	add	ptra, #68
25ee0     01 34 86 31 |  if_ae	sub	local08, #1
25ee4     41 36 56 F2 | 	cmps	local09, #65 wc
25ee8     00 36 0E C2 |  if_b	cmp	local09, #0 wz
25eec     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
25ef0     03 3A 0E F2 | 	cmp	local11, #3 wz
25ef4     00 3A 06 A6 |  if_e	mov	local11, #0
25ef8     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
25efc     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
25f00     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
25f04     00 3A 0E F2 | 	cmp	local11, #0 wz
25f08     4C 00 90 AD |  if_e	jmp	#LR__3283
25f0c     01 32 06 F6 | 	mov	local07, #1
25f10     1B 35 0A F2 | 	cmp	local08, local09 wz
25f14     18 00 90 5D |  if_ne	jmp	#LR__3281
25f18     05 34 6E FB | 	djnz	local08, #LR__3280
25f1c     13 13 02 F6 | 	mov	arg01, local01
25f20     14 15 02 F6 | 	mov	arg02, local02
25f24     23 16 06 F6 | 	mov	arg03, #35
25f28     24 FE BF FD | 	call	#__system___fmtchar
25f2c     88 00 90 FD | 	jmp	#LR__3287
25f30                 | LR__3280
25f30                 | LR__3281
25f30     02 3A 0E F2 | 	cmp	local11, #2 wz
25f34     18 39 02 A6 |  if_e	mov	local10, local06
25f38     01 30 06 A1 |  if_e	add	local06, #1
25f3c     1C 41 48 AC |  if_e	wrbyte	#32, local10
25f40     14 00 90 AD |  if_e	jmp	#LR__3282
25f44     04 3A 0E F2 | 	cmp	local11, #4 wz
25f48     18 5B 48 AC |  if_e	wrbyte	#45, local06
25f4c     01 30 06 A1 |  if_e	add	local06, #1
25f50     18 57 48 5C |  if_ne	wrbyte	#43, local06
25f54     01 30 06 51 |  if_ne	add	local06, #1
25f58                 | LR__3282
25f58                 | LR__3283
25f58     18 13 02 F6 | 	mov	arg01, local06
25f5c     15 15 02 F6 | 	mov	arg02, local03
25f60     16 17 02 F6 | 	mov	arg03, local04
25f64     1A 19 02 F6 | 	mov	arg04, local08
25f68     00 1A 06 F6 | 	mov	arg05, #0
25f6c     1D 28 2E F4 | 	testbn	local02, #29 wz
25f70     01 1A 06 56 |  if_ne	mov	arg05, #1
25f74     04 49 B0 FD | 	call	#__system___uitoa
25f78     FD 32 02 F1 | 	add	local07, result1
25f7c     1B 33 5A F2 | 	cmps	local07, local09 wcz
25f80     24 00 90 ED |  if_be	jmp	#LR__3286
25f84     97 0E 48 FB | 	callpa	#(@LR__3285-@LR__3284)>>2,fcache_load_ptr_
25f88                 | LR__3284
25f88     1B 39 02 F6 | 	mov	local10, local09
25f8c     01 38 56 F2 | 	cmps	local10, #1 wc
25f90     01 36 86 F1 | 	sub	local09, #1
25f94     18 39 02 36 |  if_ae	mov	local10, local06
25f98     01 30 06 31 |  if_ae	add	local06, #1
25f9c     1C 47 48 3C |  if_ae	wrbyte	#35, local10
25fa0     E4 FF 9F 3D |  if_ae	jmp	#LR__3284
25fa4                 | LR__3285
25fa4     18 01 48 FC | 	wrbyte	#0, local06
25fa8                 | LR__3286
25fa8     13 13 02 F6 | 	mov	arg01, local01
25fac     14 15 02 F6 | 	mov	arg02, local02
25fb0     17 17 02 F6 | 	mov	arg03, local05
25fb4     F0 FD BF FD | 	call	#__system___fmtstr
25fb8                 | LR__3287
25fb8     A7 F0 03 F6 | 	mov	ptra, fp
25fbc     B2 00 A0 FD | 	call	#popregs_
25fc0                 | __system___fmtnum_ret
25fc0     2D 00 64 FD | 	ret
25fc4                 | 
25fc4                 | __system___fmtfloat
25fc4     10 4A 05 F6 | 	mov	COUNT_, #16
25fc8     A8 00 A0 FD | 	call	#pushregs_
25fcc     24 F1 07 F1 | 	add	ptra, #292
25fd0     04 4E 05 F1 | 	add	fp, #4
25fd4     A7 12 62 FC | 	wrlong	arg01, fp
25fd8     04 4E 05 F1 | 	add	fp, #4
25fdc     A7 14 62 FC | 	wrlong	arg02, fp
25fe0     04 4E 05 F1 | 	add	fp, #4
25fe4     A7 16 62 FC | 	wrlong	arg03, fp
25fe8     04 4E 05 F1 | 	add	fp, #4
25fec     A7 18 62 FC | 	wrlong	arg04, fp
25ff0     0C 4E 05 F1 | 	add	fp, #12
25ff4     A7 14 68 FC | 	wrlong	#10, fp
25ff8     08 4E 05 F1 | 	add	fp, #8
25ffc     A7 00 68 FC | 	wrlong	#0, fp
26000     08 4E 05 F1 | 	add	fp, #8
26004     A7 00 68 FC | 	wrlong	#0, fp
26008     08 4E 05 F1 | 	add	fp, #8
2600c     A7 00 68 FC | 	wrlong	#0, fp
26010     04 4E 05 F1 | 	add	fp, #4
26014     A7 04 68 FC | 	wrlong	#2, fp
26018     04 4E 05 F1 | 	add	fp, #4
2601c     A7 00 68 FC | 	wrlong	#0, fp
26020     04 4E 05 F1 | 	add	fp, #4
26024     A7 00 68 FC | 	wrlong	#0, fp
26028     04 4E 05 F1 | 	add	fp, #4
2602c     A7 00 68 FC | 	wrlong	#0, fp
26030     04 4E 05 F1 | 	add	fp, #4
26034     A7 00 68 FC | 	wrlong	#0, fp
26038     18 4E 05 F1 | 	add	fp, #24
2603c     A7 00 68 FC | 	wrlong	#0, fp
26040     68 4E 05 F1 | 	add	fp, #104
26044     A7 26 02 F6 | 	mov	local01, fp
26048     08 4E 85 F1 | 	sub	fp, #8
2604c     A7 26 62 FC | 	wrlong	local01, fp
26050     04 4E 05 F1 | 	add	fp, #4
26054     A7 26 62 FC | 	wrlong	local01, fp
26058     BC 4E 85 F1 | 	sub	fp, #188
2605c     A7 26 02 FB | 	rdlong	local01, fp
26060     10 26 46 F0 | 	shr	local01, #16
26064     3F 26 06 F5 | 	and	local01, #63
26068     B0 4E 05 F1 | 	add	fp, #176
2606c     A7 26 62 FC | 	wrlong	local01, fp
26070     B0 4E 85 F1 | 	sub	fp, #176
26074     A7 26 02 FB | 	rdlong	local01, fp
26078     1C 26 46 F0 | 	shr	local01, #28
2607c     01 26 06 F5 | 	and	local01, #1
26080     08 4F 05 F1 | 	add	fp, #264
26084     A7 26 62 FC | 	wrlong	local01, fp
26088     58 4E 85 F1 | 	sub	fp, #88
2608c     A7 26 0A FB | 	rdlong	local01, fp wz
26090     B8 4E 85 F1 | 	sub	fp, #184
26094     3C 00 90 5D |  if_ne	jmp	#LR__3291
26098     10 4E 05 F1 | 	add	fp, #16
2609c     A7 26 02 FB | 	rdlong	local01, fp
260a0     10 4E 85 F1 | 	sub	fp, #16
260a4     61 26 0E F2 | 	cmp	local01, #97 wz
260a8     18 00 90 5D |  if_ne	jmp	#LR__3290
260ac     B8 4E 05 F1 | 	add	fp, #184
260b0     A7 1A 68 FC | 	wrlong	#13, fp
260b4     84 4E 85 F1 | 	sub	fp, #132
260b8     A7 02 68 FC | 	wrlong	#1, fp
260bc     34 4E 85 F1 | 	sub	fp, #52
260c0     24 00 90 FD | 	jmp	#LR__3292
260c4                 | LR__3290
260c4     B8 4E 05 F1 | 	add	fp, #184
260c8     A7 0C 68 FC | 	wrlong	#6, fp
260cc     B8 4E 85 F1 | 	sub	fp, #184
260d0     14 00 90 FD | 	jmp	#LR__3292
260d4                 | LR__3291
260d4     B8 4E 05 F1 | 	add	fp, #184
260d8     A7 26 02 FB | 	rdlong	local01, fp
260dc     01 26 86 F1 | 	sub	local01, #1
260e0     A7 26 62 FC | 	wrlong	local01, fp
260e4     B8 4E 85 F1 | 	sub	fp, #184
260e8                 | LR__3292
260e8     08 4E 05 F1 | 	add	fp, #8
260ec     A7 26 02 FB | 	rdlong	local01, fp
260f0     16 26 46 F0 | 	shr	local01, #22
260f4     03 26 06 F5 | 	and	local01, #3
260f8     04 4F 05 F1 | 	add	fp, #260
260fc     A7 26 62 FC | 	wrlong	local01, fp
26100     04 4F 85 F1 | 	sub	fp, #260
26104     A7 26 02 FB | 	rdlong	local01, fp
26108     1D 26 46 F0 | 	shr	local01, #29
2610c     01 26 06 F5 | 	and	local01, #1
26110     B4 4E 05 F1 | 	add	fp, #180
26114     A7 26 62 FC | 	wrlong	local01, fp
26118     B4 4E 85 F1 | 	sub	fp, #180
2611c     A7 26 02 FB | 	rdlong	local01, fp
26120     13 27 EA F8 | 	getbyte	local01, local01, #1
26124     60 4E 05 F1 | 	add	fp, #96
26128     A7 26 62 FC | 	wrlong	local01, fp
2612c     60 4E 85 F1 | 	sub	fp, #96
26130     A7 26 02 FB | 	rdlong	local01, fp
26134     13 27 E2 F8 | 	getbyte	local01, local01, #0
26138     64 4E 05 F1 | 	add	fp, #100
2613c     A7 26 62 FC | 	wrlong	local01, fp
26140     00 26 06 F6 | 	mov	local01, #0
26144     5C 4E 85 F1 | 	sub	fp, #92
26148     A7 1A 02 FB | 	rdlong	arg05, fp
2614c     65 1A 0E F2 | 	cmp	arg05, #101 wz
26150     01 26 06 A6 |  if_e	mov	local01, #1
26154     14 4E 05 F1 | 	add	fp, #20
26158     A7 26 62 FC | 	wrlong	local01, fp
2615c     98 4E 05 F1 | 	add	fp, #152
26160     A7 28 0A FB | 	rdlong	local02, fp wz
26164     45 26 06 56 |  if_ne	mov	local01, #69
26168     65 26 06 A6 |  if_e	mov	local01, #101
2616c     8C 4E 85 F1 | 	sub	fp, #140
26170     A7 26 62 FC | 	wrlong	local01, fp
26174     20 4E 85 F1 | 	sub	fp, #32
26178     A7 26 02 FB | 	rdlong	local01, fp
2617c     10 4E 85 F1 | 	sub	fp, #16
26180     61 26 0E F2 | 	cmp	local01, #97 wz
26184     4C 00 90 5D |  if_ne	jmp	#LR__3293
26188     24 4E 05 F1 | 	add	fp, #36
2618c     A7 02 68 FC | 	wrlong	#1, fp
26190     98 4E 05 F1 | 	add	fp, #152
26194     A7 28 0A FB | 	rdlong	local02, fp wz
26198     50 26 06 56 |  if_ne	mov	local01, #80
2619c     70 26 06 A6 |  if_e	mov	local01, #112
261a0     8C 4E 85 F1 | 	sub	fp, #140
261a4     A7 26 62 FC | 	wrlong	local01, fp
261a8     14 4E 85 F1 | 	sub	fp, #20
261ac     A7 04 68 FC | 	wrlong	#2, fp
261b0     1C 4E 05 F1 | 	add	fp, #28
261b4     A7 02 68 FC | 	wrlong	#1, fp
261b8     84 4E 05 F1 | 	add	fp, #132
261bc     A7 28 0A FB | 	rdlong	local02, fp wz
261c0     58 26 06 56 |  if_ne	mov	local01, #88
261c4     78 26 06 A6 |  if_e	mov	local01, #120
261c8     7C 4E 85 F1 | 	sub	fp, #124
261cc     A7 26 62 FC | 	wrlong	local01, fp
261d0     40 4E 85 F1 | 	sub	fp, #64
261d4                 | LR__3293
261d4     10 4E 05 F1 | 	add	fp, #16
261d8     A7 26 02 FB | 	rdlong	local01, fp
261dc     10 4E 85 F1 | 	sub	fp, #16
261e0     23 26 0E F2 | 	cmp	local01, #35 wz
261e4     3C 00 90 5D |  if_ne	jmp	#LR__3296
261e8     48 4E 05 F1 | 	add	fp, #72
261ec     A7 02 68 FC | 	wrlong	#1, fp
261f0     C8 4E 05 F1 | 	add	fp, #200
261f4     A7 26 0A FB | 	rdlong	local01, fp wz
261f8     10 4F 85 F1 | 	sub	fp, #272
261fc     18 00 90 AD |  if_e	jmp	#LR__3294
26200     10 4E 05 F1 | 	add	fp, #16
26204     A7 CC 68 FC | 	wrlong	#102, fp
26208     00 4F 05 F1 | 	add	fp, #256
2620c     A7 00 68 FC | 	wrlong	#0, fp
26210     10 4F 85 F1 | 	sub	fp, #272
26214     0C 00 90 FD | 	jmp	#LR__3295
26218                 | LR__3294
26218     10 4F 05 F1 | 	add	fp, #272
2621c     A7 02 68 FC | 	wrlong	#1, fp
26220     10 4F 85 F1 | 	sub	fp, #272
26224                 | LR__3295
26224                 | LR__3296
26224     08 4E 05 F1 | 	add	fp, #8
26228     A7 26 02 FB | 	rdlong	local01, fp
2622c     1A 26 46 F0 | 	shr	local01, #26
26230     03 26 06 F5 | 	and	local01, #3
26234     5C 4E 05 F1 | 	add	fp, #92
26238     A7 26 62 FC | 	wrlong	local01, fp
2623c     58 4E 85 F1 | 	sub	fp, #88
26240     A7 FA 01 FB | 	rdlong	result1, fp
26244     0C 4E 85 F1 | 	sub	fp, #12
26248     1F FA 4D F0 | 	shr	result1, #31 wz
2624c     20 00 90 AD |  if_e	jmp	#LR__3297
26250     2C 4E 05 F1 | 	add	fp, #44
26254     A7 5A 68 FC | 	wrlong	#45, fp
26258     20 4E 85 F1 | 	sub	fp, #32
2625c     A7 FA 01 FB | 	rdlong	result1, fp
26260     1F FA E5 F4 | 	bitnot	result1, #31
26264     A7 FA 61 FC | 	wrlong	result1, fp
26268     0C 4E 85 F1 | 	sub	fp, #12
2626c     3C 00 90 FD | 	jmp	#LR__3299
26270                 | LR__3297
26270     64 4E 05 F1 | 	add	fp, #100
26274     A7 26 02 FB | 	rdlong	local01, fp
26278     64 4E 85 F1 | 	sub	fp, #100
2627c     01 26 0E F2 | 	cmp	local01, #1 wz
26280     2C 4E 05 A1 |  if_e	add	fp, #44
26284     A7 56 68 AC |  if_e	wrlong	#43, fp
26288     2C 4E 85 A1 |  if_e	sub	fp, #44
2628c     1C 00 90 AD |  if_e	jmp	#LR__3298
26290     64 4E 05 F1 | 	add	fp, #100
26294     A7 26 02 FB | 	rdlong	local01, fp
26298     64 4E 85 F1 | 	sub	fp, #100
2629c     02 26 0E F2 | 	cmp	local01, #2 wz
262a0     2C 4E 05 A1 |  if_e	add	fp, #44
262a4     A7 40 68 AC |  if_e	wrlong	#32, fp
262a8     2C 4E 85 A1 |  if_e	sub	fp, #44
262ac                 | LR__3298
262ac                 | LR__3299
262ac     08 4E 05 F1 | 	add	fp, #8
262b0     A7 26 02 FB | 	rdlong	local01, fp
262b4     18 26 46 F0 | 	shr	local01, #24
262b8     03 26 06 F5 | 	and	local01, #3
262bc     3C 4E 05 F1 | 	add	fp, #60
262c0     A7 26 62 FC | 	wrlong	local01, fp
262c4     00 26 06 F6 | 	mov	local01, #0
262c8     18 4E 85 F1 | 	sub	fp, #24
262cc     A7 2A 0A FB | 	rdlong	local03, fp wz
262d0     2C 4E 85 F1 | 	sub	fp, #44
262d4     18 00 90 5D |  if_ne	jmp	#LR__3300
262d8     1C 4E 05 F1 | 	add	fp, #28
262dc     A7 2C 02 FB | 	rdlong	local04, fp
262e0     1C 4E 85 F1 | 	sub	fp, #28
262e4     16 2F 02 F6 | 	mov	local05, local04
262e8     0A 2E 0E F2 | 	cmp	local05, #10 wz
262ec     04 00 90 AD |  if_e	jmp	#LR__3301
262f0                 | LR__3300
262f0     01 26 66 F5 | 	xor	local01, #1
262f4                 | LR__3301
262f4     3C 4E 05 F1 | 	add	fp, #60
262f8     A7 26 62 FC | 	wrlong	local01, fp
262fc     3C 4E 85 F1 | 	sub	fp, #60
26300     00 26 0E F2 | 	cmp	local01, #0 wz
26304     0C 01 90 AD |  if_e	jmp	#LR__3303
26308     44 4E 05 F1 | 	add	fp, #68
2630c     A7 2E 02 FB | 	rdlong	local05, fp
26310     44 4E 85 F1 | 	sub	fp, #68
26314     17 2B 02 F6 | 	mov	local03, local05
26318     02 2A 0E F2 | 	cmp	local03, #2 wz
2631c     F4 00 90 5D |  if_ne	jmp	#LR__3303
26320     0C 4F 05 F1 | 	add	fp, #268
26324     A7 30 02 FB | 	rdlong	local06, fp
26328     0C 4F 85 F1 | 	sub	fp, #268
2632c     18 2D 02 F6 | 	mov	local04, local06
26330     02 2C 0E F2 | 	cmp	local04, #2 wz
26334     DC 00 90 AD |  if_e	jmp	#LR__3303
26338     C0 4E 05 F1 | 	add	fp, #192
2633c     A7 12 02 FB | 	rdlong	arg01, fp
26340     94 4E 85 F1 | 	sub	fp, #148
26344     A7 14 02 FB | 	rdlong	arg02, fp
26348     14 4E 05 F1 | 	add	fp, #20
2634c     A7 16 02 FB | 	rdlong	arg03, fp
26350     40 4E 85 F1 | 	sub	fp, #64
26354     8C 47 B0 FD | 	call	#__system__emitsign_0555
26358     14 4F 05 F1 | 	add	fp, #276
2635c     A7 FA 61 FC | 	wrlong	result1, fp
26360     14 4F 85 F1 | 	sub	fp, #276
26364     00 FA 55 F2 | 	cmps	result1, #0 wc
26368     14 4F 05 C1 |  if_b	add	fp, #276
2636c     A7 FA 01 CB |  if_b	rdlong	result1, fp
26370     14 4F 85 C1 |  if_b	sub	fp, #276
26374     6C 0B 90 CD |  if_b	jmp	#LR__3353
26378     C0 4E 05 F1 | 	add	fp, #192
2637c     A7 26 02 FB | 	rdlong	local01, fp
26380     54 4E 05 F1 | 	add	fp, #84
26384     A7 2E 02 FB | 	rdlong	local05, fp
26388     17 2B 02 F6 | 	mov	local03, local05
2638c     17 27 02 F1 | 	add	local01, local05
26390     54 4E 85 F1 | 	sub	fp, #84
26394     A7 26 62 FC | 	wrlong	local01, fp
26398     58 4E 85 F1 | 	sub	fp, #88
2639c     A7 26 0A FB | 	rdlong	local01, fp wz
263a0     68 4E 85 F1 | 	sub	fp, #104
263a4     60 00 90 AD |  if_e	jmp	#LR__3302
263a8     68 4E 05 F1 | 	add	fp, #104
263ac     A7 26 02 FB | 	rdlong	local01, fp
263b0     AC 4E 05 F1 | 	add	fp, #172
263b4     A7 2A 02 FB | 	rdlong	local03, fp
263b8     15 27 82 F1 | 	sub	local01, local03
263bc     AC 4E 85 F1 | 	sub	fp, #172
263c0     A7 26 62 FC | 	wrlong	local01, fp
263c4     68 4E 85 F1 | 	sub	fp, #104
263c8     00 26 56 F2 | 	cmps	local01, #0 wc
263cc     68 4E 05 C1 |  if_b	add	fp, #104
263d0     A7 00 68 CC |  if_b	wrlong	#0, fp
263d4     68 4E 85 C1 |  if_b	sub	fp, #104
263d8     08 4E 05 F1 | 	add	fp, #8
263dc     A7 26 02 FB | 	rdlong	local01, fp
263e0     E8 26 06 F4 | 	bitl	local01, #232
263e4     A7 26 62 FC | 	wrlong	local01, fp
263e8     60 4E 05 F1 | 	add	fp, #96
263ec     A7 2E 02 FB | 	rdlong	local05, fp
263f0     17 2B 02 F6 | 	mov	local03, local05
263f4     08 2A 66 F0 | 	shl	local03, #8
263f8     15 27 42 F5 | 	or	local01, local03
263fc     60 4E 85 F1 | 	sub	fp, #96
26400     A7 26 62 FC | 	wrlong	local01, fp
26404     08 4E 85 F1 | 	sub	fp, #8
26408                 | LR__3302
26408     3C 4E 05 F1 | 	add	fp, #60
2640c     A7 00 68 FC | 	wrlong	#0, fp
26410     3C 4E 85 F1 | 	sub	fp, #60
26414                 | LR__3303
26414     0C 4E 05 F1 | 	add	fp, #12
26418     A7 12 02 FB | 	rdlong	arg01, fp
2641c     0C 4E 85 F1 | 	sub	fp, #12
26420     EC 21 B0 FD | 	call	#__system____builtin_ilogb
26424     FF FF 3F FF 
26428     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
2642c     50 00 90 5D |  if_ne	jmp	#LR__3305
26430     2C 4E 05 F1 | 	add	fp, #44
26434     A7 26 0A FB | 	rdlong	local01, fp wz
26438     2C 4E 85 F1 | 	sub	fp, #44
2643c     24 00 90 AD |  if_e	jmp	#LR__3304
26440     C0 4E 05 F1 | 	add	fp, #192
26444     A7 28 02 FB | 	rdlong	local02, fp
26448     14 2B 02 F6 | 	mov	local03, local02
2644c     01 2A 06 F1 | 	add	local03, #1
26450     A7 2A 62 FC | 	wrlong	local03, fp
26454     94 4E 85 F1 | 	sub	fp, #148
26458     A7 2C 02 FB | 	rdlong	local04, fp
2645c     2C 4E 85 F1 | 	sub	fp, #44
26460     14 2D 42 FC | 	wrbyte	local04, local02
26464                 | LR__3304
26464     C0 4E 05 F1 | 	add	fp, #192
26468     A7 12 02 FB | 	rdlong	arg01, fp
2646c     C0 4E 85 F1 | 	sub	fp, #192
26470     A4 01 00 FF 
26474     82 15 06 F6 | 	mov	arg02, ##@LR__5301
26478     AC E9 BF FD | 	call	#__system____builtin_strcpy
2647c     A4 08 90 FD | 	jmp	#LR__3341
26480                 | LR__3305
26480     0C 4E 05 F1 | 	add	fp, #12
26484     A7 28 02 FB | 	rdlong	local02, fp
26488     0C 4E 85 F1 | 	sub	fp, #12
2648c     14 13 02 F6 | 	mov	arg01, local02
26490     7C 21 B0 FD | 	call	#__system____builtin_ilogb
26494     00 00 40 FF 
26498     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2649c     50 00 90 5D |  if_ne	jmp	#LR__3307
264a0     2C 4E 05 F1 | 	add	fp, #44
264a4     A7 26 0A FB | 	rdlong	local01, fp wz
264a8     2C 4E 85 F1 | 	sub	fp, #44
264ac     24 00 90 AD |  if_e	jmp	#LR__3306
264b0     C0 4E 05 F1 | 	add	fp, #192
264b4     A7 28 02 FB | 	rdlong	local02, fp
264b8     14 2B 02 F6 | 	mov	local03, local02
264bc     01 2A 06 F1 | 	add	local03, #1
264c0     A7 2A 62 FC | 	wrlong	local03, fp
264c4     94 4E 85 F1 | 	sub	fp, #148
264c8     A7 2C 02 FB | 	rdlong	local04, fp
264cc     2C 4E 85 F1 | 	sub	fp, #44
264d0     14 2D 42 FC | 	wrbyte	local04, local02
264d4                 | LR__3306
264d4     C0 4E 05 F1 | 	add	fp, #192
264d8     A7 12 02 FB | 	rdlong	arg01, fp
264dc     C0 4E 85 F1 | 	sub	fp, #192
264e0     A4 01 00 FF 
264e4     86 15 06 F6 | 	mov	arg02, ##@LR__5302
264e8     3C E9 BF FD | 	call	#__system____builtin_strcpy
264ec     34 08 90 FD | 	jmp	#LR__3341
264f0                 | LR__3307
264f0     10 4E 05 F1 | 	add	fp, #16
264f4     A7 26 02 FB | 	rdlong	local01, fp
264f8     10 4E 85 F1 | 	sub	fp, #16
264fc     67 26 0E F2 | 	cmp	local01, #103 wz
26500     10 4E 05 51 |  if_ne	add	fp, #16
26504     A7 2A 02 5B |  if_ne	rdlong	local03, fp
26508     10 4E 85 51 |  if_ne	sub	fp, #16
2650c     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
26510     94 01 90 5D |  if_ne	jmp	#LR__3312
26514     0C 4E 05 F1 | 	add	fp, #12
26518     A7 12 02 FB | 	rdlong	arg01, fp
2651c     08 4E 05 F1 | 	add	fp, #8
26520     A7 14 02 F6 | 	mov	arg02, fp
26524     0C 4E 05 F1 | 	add	fp, #12
26528     A7 16 02 F6 | 	mov	arg03, fp
2652c     98 4E 05 F1 | 	add	fp, #152
26530     A7 18 02 FB | 	rdlong	arg04, fp
26534     9C 4E 85 F1 | 	sub	fp, #156
26538     A7 1A 02 FB | 	rdlong	arg05, fp
2653c     1C 4E 85 F1 | 	sub	fp, #28
26540     AC 43 B0 FD | 	call	#__system__disassemble_0553
26544     10 4E 05 F1 | 	add	fp, #16
26548     A7 26 02 FB | 	rdlong	local01, fp
2654c     10 4E 85 F1 | 	sub	fp, #16
26550     23 26 0E F2 | 	cmp	local01, #35 wz
26554     A0 00 90 5D |  if_ne	jmp	#LR__3309
26558     20 4E 05 F1 | 	add	fp, #32
2655c     A7 26 02 FB | 	rdlong	local01, fp
26560     98 4E 05 F1 | 	add	fp, #152
26564     A7 2A 02 FB | 	rdlong	local03, fp
26568     B8 4E 85 F1 | 	sub	fp, #184
2656c     15 27 5A F2 | 	cmps	local01, local03 wcz
26570     24 4E 05 11 |  if_a	add	fp, #36
26574     A7 02 68 1C |  if_a	wrlong	#1, fp
26578     24 4E 85 11 |  if_a	sub	fp, #36
2657c     A4 01 90 1D |  if_a	jmp	#LR__3315
26580     20 4E 05 F1 | 	add	fp, #32
26584     A7 26 02 FB | 	rdlong	local01, fp
26588     20 4E 85 F1 | 	sub	fp, #32
2658c     00 26 56 F2 | 	cmps	local01, #0 wc
26590     2C 00 90 3D |  if_ae	jmp	#LR__3308
26594     B8 4E 05 F1 | 	add	fp, #184
26598     A7 26 02 FB | 	rdlong	local01, fp
2659c     13 27 62 F6 | 	neg	local01, local01
265a0     98 4E 85 F1 | 	sub	fp, #152
265a4     A7 2A 02 FB | 	rdlong	local03, fp
265a8     20 4E 85 F1 | 	sub	fp, #32
265ac     13 2B 5A F2 | 	cmps	local03, local01 wcz
265b0     24 4E 05 E1 |  if_be	add	fp, #36
265b4     A7 02 68 EC |  if_be	wrlong	#1, fp
265b8     24 4E 85 E1 |  if_be	sub	fp, #36
265bc     64 01 90 FD | 	jmp	#LR__3315
265c0                 | LR__3308
265c0     20 4E 05 F1 | 	add	fp, #32
265c4     A7 26 02 FB | 	rdlong	local01, fp
265c8     20 4E 85 F1 | 	sub	fp, #32
265cc     01 26 56 F2 | 	cmps	local01, #1 wc
265d0     50 01 90 CD |  if_b	jmp	#LR__3315
265d4     B8 4E 05 F1 | 	add	fp, #184
265d8     A7 26 02 FB | 	rdlong	local01, fp
265dc     98 4E 85 F1 | 	sub	fp, #152
265e0     A7 2A 02 FB | 	rdlong	local03, fp
265e4     15 27 82 F1 | 	sub	local01, local03
265e8     98 4E 05 F1 | 	add	fp, #152
265ec     A7 26 62 FC | 	wrlong	local01, fp
265f0     B8 4E 85 F1 | 	sub	fp, #184
265f4     2C 01 90 FD | 	jmp	#LR__3315
265f8                 | LR__3309
265f8     00 26 06 F6 | 	mov	local01, #0
265fc     08 4E 05 F1 | 	add	fp, #8
26600     A7 28 02 FB | 	rdlong	local02, fp
26604     1C 28 46 F0 | 	shr	local02, #28
26608     01 28 0E F5 | 	and	local02, #1 wz
2660c     01 26 06 A6 |  if_e	mov	local01, #1
26610     2C 4E 05 F1 | 	add	fp, #44
26614     A7 26 62 FC | 	wrlong	local01, fp
26618     14 4E 85 F1 | 	sub	fp, #20
2661c     A7 26 02 FB | 	rdlong	local01, fp
26620     98 4E 05 F1 | 	add	fp, #152
26624     A7 2A 02 FB | 	rdlong	local03, fp
26628     B8 4E 85 F1 | 	sub	fp, #184
2662c     15 27 52 F2 | 	cmps	local01, local03 wc
26630     18 00 90 3D |  if_ae	jmp	#LR__3310
26634     20 4E 05 F1 | 	add	fp, #32
26638     A7 2C 02 FB | 	rdlong	local04, fp
2663c     20 4E 85 F1 | 	sub	fp, #32
26640     FF FF 7F FF 
26644     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
26648     10 00 90 3D |  if_ae	jmp	#LR__3311
2664c                 | LR__3310
2664c     24 4E 05 F1 | 	add	fp, #36
26650     A7 02 68 FC | 	wrlong	#1, fp
26654     24 4E 85 F1 | 	sub	fp, #36
26658     C8 00 90 FD | 	jmp	#LR__3315
2665c                 | LR__3311
2665c     B8 4E 05 F1 | 	add	fp, #184
26660     A7 2C 02 FB | 	rdlong	local04, fp
26664     98 4E 85 F1 | 	sub	fp, #152
26668     A7 2A 02 FB | 	rdlong	local03, fp
2666c     15 2D 82 F1 | 	sub	local04, local03
26670     98 4E 05 F1 | 	add	fp, #152
26674     A7 2C 62 FC | 	wrlong	local04, fp
26678     AC 4E 85 F1 | 	sub	fp, #172
2667c     A7 12 02 FB | 	rdlong	arg01, fp
26680     08 4E 05 F1 | 	add	fp, #8
26684     A7 14 02 F6 | 	mov	arg02, fp
26688     0C 4E 05 F1 | 	add	fp, #12
2668c     A7 16 02 F6 | 	mov	arg03, fp
26690     16 19 62 F6 | 	neg	arg04, local04
26694     04 4E 85 F1 | 	sub	fp, #4
26698     A7 1A 02 FB | 	rdlong	arg05, fp
2669c     1C 4E 85 F1 | 	sub	fp, #28
266a0     4C 42 B0 FD | 	call	#__system__disassemble_0553
266a4     7C 00 90 FD | 	jmp	#LR__3315
266a8                 | LR__3312
266a8     24 4E 05 F1 | 	add	fp, #36
266ac     A7 26 0A FB | 	rdlong	local01, fp wz
266b0     24 4E 85 F1 | 	sub	fp, #36
266b4     34 00 90 AD |  if_e	jmp	#LR__3313
266b8     0C 4E 05 F1 | 	add	fp, #12
266bc     A7 12 02 FB | 	rdlong	arg01, fp
266c0     08 4E 05 F1 | 	add	fp, #8
266c4     A7 14 02 F6 | 	mov	arg02, fp
266c8     0C 4E 05 F1 | 	add	fp, #12
266cc     A7 16 02 F6 | 	mov	arg03, fp
266d0     98 4E 05 F1 | 	add	fp, #152
266d4     A7 18 02 FB | 	rdlong	arg04, fp
266d8     9C 4E 85 F1 | 	sub	fp, #156
266dc     A7 1A 02 FB | 	rdlong	arg05, fp
266e0     1C 4E 85 F1 | 	sub	fp, #28
266e4     08 42 B0 FD | 	call	#__system__disassemble_0553
266e8     38 00 90 FD | 	jmp	#LR__3314
266ec                 | LR__3313
266ec     0C 4E 05 F1 | 	add	fp, #12
266f0     A7 12 02 FB | 	rdlong	arg01, fp
266f4     08 4E 05 F1 | 	add	fp, #8
266f8     A7 14 02 F6 | 	mov	arg02, fp
266fc     0C 4E 05 F1 | 	add	fp, #12
26700     A7 16 02 F6 | 	mov	arg03, fp
26704     98 4E 05 F1 | 	add	fp, #152
26708     A7 2C 02 FB | 	rdlong	local04, fp
2670c     01 2C 06 F1 | 	add	local04, #1
26710     16 19 62 F6 | 	neg	arg04, local04
26714     9C 4E 85 F1 | 	sub	fp, #156
26718     A7 1A 02 FB | 	rdlong	arg05, fp
2671c     1C 4E 85 F1 | 	sub	fp, #28
26720     CC 41 B0 FD | 	call	#__system__disassemble_0553
26724                 | LR__3314
26724                 | LR__3315
26724     1C 4E 05 F1 | 	add	fp, #28
26728     A7 26 02 FB | 	rdlong	local01, fp
2672c     1C 4E 85 F1 | 	sub	fp, #28
26730     02 26 0E F2 | 	cmp	local01, #2 wz
26734     4C 00 90 5D |  if_ne	jmp	#LR__3318
26738     1C 4E 05 F1 | 	add	fp, #28
2673c     A7 20 68 FC | 	wrlong	#16, fp
26740     1C 4E 85 F1 | 	sub	fp, #28
26744                 | LR__3316
26744     14 4E 05 F1 | 	add	fp, #20
26748     A7 26 0A FB | 	rdlong	local01, fp wz
2674c     14 4E 85 F1 | 	sub	fp, #20
26750     30 00 90 AD |  if_e	jmp	#LR__3317
26754     14 4E 05 F1 | 	add	fp, #20
26758     A7 2A 02 FB | 	rdlong	local03, fp
2675c     14 4E 85 F1 | 	sub	fp, #20
26760     00 80 00 FF 
26764     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
26768     18 00 90 3D |  if_ae	jmp	#LR__3317
2676c     14 4E 05 F1 | 	add	fp, #20
26770     A7 26 02 FB | 	rdlong	local01, fp
26774     01 26 66 F0 | 	shl	local01, #1
26778     A7 26 62 FC | 	wrlong	local01, fp
2677c     14 4E 85 F1 | 	sub	fp, #20
26780     C0 FF 9F FD | 	jmp	#LR__3316
26784                 | LR__3317
26784                 | LR__3318
26784     70 4E 05 F1 | 	add	fp, #112
26788     A7 12 02 F6 | 	mov	arg01, fp
2678c     5C 4E 85 F1 | 	sub	fp, #92
26790     A7 14 02 FB | 	rdlong	arg02, fp
26794     08 4E 05 F1 | 	add	fp, #8
26798     A7 16 02 FB | 	rdlong	arg03, fp
2679c     A0 4E 05 F1 | 	add	fp, #160
267a0     A7 1A 02 FB | 	rdlong	arg05, fp
267a4     BC 4E 85 F1 | 	sub	fp, #188
267a8     01 18 06 F6 | 	mov	arg04, #1
267ac     CC 40 B0 FD | 	call	#__system___uitoa
267b0     58 4E 05 F1 | 	add	fp, #88
267b4     A7 FA 61 FC | 	wrlong	result1, fp
267b8     38 4E 85 F1 | 	sub	fp, #56
267bc     A7 26 02 FB | 	rdlong	local01, fp
267c0     20 4E 85 F1 | 	sub	fp, #32
267c4     00 26 56 F2 | 	cmps	local01, #0 wc
267c8     50 00 90 3D |  if_ae	jmp	#LR__3319
267cc     60 4E 05 F1 | 	add	fp, #96
267d0     A7 5A 68 FC | 	wrlong	#45, fp
267d4     50 4E 05 F1 | 	add	fp, #80
267d8     A7 12 02 F6 | 	mov	arg01, fp
267dc     90 4E 85 F1 | 	sub	fp, #144
267e0     A7 2A 02 FB | 	rdlong	local03, fp
267e4     15 15 62 F6 | 	neg	arg02, local03
267e8     18 4E 05 F1 | 	add	fp, #24
267ec     A7 18 02 FB | 	rdlong	arg04, fp
267f0     84 4E 05 F1 | 	add	fp, #132
267f4     A7 30 02 FB | 	rdlong	local06, fp
267f8     BC 4E 85 F1 | 	sub	fp, #188
267fc     18 2D 02 F6 | 	mov	local04, local06
26800     0A 16 06 F6 | 	mov	arg03, #10
26804     16 1B 02 F6 | 	mov	arg05, local04
26808     70 40 B0 FD | 	call	#__system___uitoa
2680c     5C 4E 05 F1 | 	add	fp, #92
26810     A7 FA 61 FC | 	wrlong	result1, fp
26814     5C 4E 85 F1 | 	sub	fp, #92
26818     48 00 90 FD | 	jmp	#LR__3320
2681c                 | LR__3319
2681c     60 4E 05 F1 | 	add	fp, #96
26820     A7 56 68 FC | 	wrlong	#43, fp
26824     50 4E 05 F1 | 	add	fp, #80
26828     A7 12 02 F6 | 	mov	arg01, fp
2682c     90 4E 85 F1 | 	sub	fp, #144
26830     A7 14 02 FB | 	rdlong	arg02, fp
26834     18 4E 05 F1 | 	add	fp, #24
26838     A7 18 02 FB | 	rdlong	arg04, fp
2683c     84 4E 05 F1 | 	add	fp, #132
26840     A7 30 02 FB | 	rdlong	local06, fp
26844     BC 4E 85 F1 | 	sub	fp, #188
26848     18 2D 02 F6 | 	mov	local04, local06
2684c     0A 16 06 F6 | 	mov	arg03, #10
26850     16 1B 02 F6 | 	mov	arg05, local04
26854     24 40 B0 FD | 	call	#__system___uitoa
26858     5C 4E 05 F1 | 	add	fp, #92
2685c     A7 FA 61 FC | 	wrlong	result1, fp
26860     5C 4E 85 F1 | 	sub	fp, #92
26864                 | LR__3320
26864     24 4E 05 F1 | 	add	fp, #36
26868     A7 26 0A FB | 	rdlong	local01, fp wz
2686c     24 4E 85 F1 | 	sub	fp, #36
26870     2C 00 90 AD |  if_e	jmp	#LR__3321
26874     50 4E 05 F1 | 	add	fp, #80
26878     A7 00 68 FC | 	wrlong	#0, fp
2687c     04 4E 85 F1 | 	sub	fp, #4
26880     A7 00 68 FC | 	wrlong	#0, fp
26884     6C 4E 05 F1 | 	add	fp, #108
26888     A7 26 02 FB | 	rdlong	local01, fp
2688c     01 26 06 F1 | 	add	local01, #1
26890     64 4E 85 F1 | 	sub	fp, #100
26894     A7 26 62 FC | 	wrlong	local01, fp
26898     54 4E 85 F1 | 	sub	fp, #84
2689c     88 00 90 FD | 	jmp	#LR__3324
268a0                 | LR__3321
268a0     20 4E 05 F1 | 	add	fp, #32
268a4     A7 26 02 FB | 	rdlong	local01, fp
268a8     20 4E 85 F1 | 	sub	fp, #32
268ac     00 26 56 F2 | 	cmps	local01, #0 wc
268b0     40 00 90 3D |  if_ae	jmp	#LR__3322
268b4     20 4E 05 F1 | 	add	fp, #32
268b8     A7 28 02 FB | 	rdlong	local02, fp
268bc     30 4E 05 F1 | 	add	fp, #48
268c0     A7 28 62 FC | 	wrlong	local02, fp
268c4     04 4E 85 F1 | 	sub	fp, #4
268c8     A7 28 62 FC | 	wrlong	local02, fp
268cc     2C 4E 85 F1 | 	sub	fp, #44
268d0     A7 26 02 FB | 	rdlong	local01, fp
268d4     98 4E 05 F1 | 	add	fp, #152
268d8     A7 2A 02 FB | 	rdlong	local03, fp
268dc     15 27 02 F1 | 	add	local01, local03
268e0     01 26 06 F1 | 	add	local01, #1
268e4     64 4E 85 F1 | 	sub	fp, #100
268e8     A7 26 62 FC | 	wrlong	local01, fp
268ec     54 4E 85 F1 | 	sub	fp, #84
268f0     34 00 90 FD | 	jmp	#LR__3323
268f4                 | LR__3322
268f4     4C 4E 05 F1 | 	add	fp, #76
268f8     A7 00 68 FC | 	wrlong	#0, fp
268fc     2C 4E 85 F1 | 	sub	fp, #44
26900     A7 26 02 FB | 	rdlong	local01, fp
26904     30 4E 05 F1 | 	add	fp, #48
26908     A7 26 62 FC | 	wrlong	local01, fp
2690c     68 4E 05 F1 | 	add	fp, #104
26910     A7 2A 02 FB | 	rdlong	local03, fp
26914     15 27 02 F1 | 	add	local01, local03
26918     01 26 06 F1 | 	add	local01, #1
2691c     64 4E 85 F1 | 	sub	fp, #100
26920     A7 26 62 FC | 	wrlong	local01, fp
26924     54 4E 85 F1 | 	sub	fp, #84
26928                 | LR__3323
26928                 | LR__3324
26928     54 4E 05 F1 | 	add	fp, #84
2692c     A7 26 02 FB | 	rdlong	local01, fp
26930     08 4E 85 F1 | 	sub	fp, #8
26934     A7 2A 02 FB | 	rdlong	local03, fp
26938     15 27 82 F1 | 	sub	local01, local03
2693c     01 26 06 F1 | 	add	local01, #1
26940     24 4E 85 F1 | 	sub	fp, #36
26944     A7 26 62 FC | 	wrlong	local01, fp
26948     04 4E 05 F1 | 	add	fp, #4
2694c     A7 26 0A FB | 	rdlong	local01, fp wz
26950     2C 4E 85 F1 | 	sub	fp, #44
26954     28 4E 05 51 |  if_ne	add	fp, #40
26958     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2695c     01 2A 06 51 |  if_ne	add	local03, #1
26960     A7 2A 62 5C |  if_ne	wrlong	local03, fp
26964     28 4E 85 51 |  if_ne	sub	fp, #40
26968     1C 4E 05 F1 | 	add	fp, #28
2696c     A7 26 02 FB | 	rdlong	local01, fp
26970     1C 4E 85 F1 | 	sub	fp, #28
26974     10 26 0E F2 | 	cmp	local01, #16 wz
26978     28 4E 05 A1 |  if_e	add	fp, #40
2697c     A7 26 02 AB |  if_e	rdlong	local01, fp
26980     02 26 06 A1 |  if_e	add	local01, #2
26984     A7 26 62 AC |  if_e	wrlong	local01, fp
26988     28 4E 85 A1 |  if_e	sub	fp, #40
2698c     24 4E 05 F1 | 	add	fp, #36
26990     A7 26 0A FB | 	rdlong	local01, fp wz
26994     24 4E 85 F1 | 	sub	fp, #36
26998     28 00 90 AD |  if_e	jmp	#LR__3325
2699c     28 4E 05 F1 | 	add	fp, #40
269a0     A7 26 02 FB | 	rdlong	local01, fp
269a4     02 2A 06 F6 | 	mov	local03, #2
269a8     34 4E 05 F1 | 	add	fp, #52
269ac     A7 2E 02 FB | 	rdlong	local05, fp
269b0     17 2B 02 F1 | 	add	local03, local05
269b4     15 27 02 F1 | 	add	local01, local03
269b8     34 4E 85 F1 | 	sub	fp, #52
269bc     A7 26 62 FC | 	wrlong	local01, fp
269c0     28 4E 85 F1 | 	sub	fp, #40
269c4                 | LR__3325
269c4     28 4E 05 F1 | 	add	fp, #40
269c8     A7 26 02 FB | 	rdlong	local01, fp
269cc     28 4E 85 F1 | 	sub	fp, #40
269d0     41 26 56 F2 | 	cmps	local01, #65 wc
269d4     01 FA 65 36 |  if_ae	neg	result1, #1
269d8     08 05 90 3D |  if_ae	jmp	#LR__3353
269dc     3C 4E 05 F1 | 	add	fp, #60
269e0     A7 26 0A FB | 	rdlong	local01, fp wz
269e4     3C 4E 85 F1 | 	sub	fp, #60
269e8     60 00 90 AD |  if_e	jmp	#LR__3326
269ec     C0 4E 05 F1 | 	add	fp, #192
269f0     A7 12 02 FB | 	rdlong	arg01, fp
269f4     94 4E 85 F1 | 	sub	fp, #148
269f8     A7 14 02 FB | 	rdlong	arg02, fp
269fc     14 4E 05 F1 | 	add	fp, #20
26a00     A7 16 02 FB | 	rdlong	arg03, fp
26a04     40 4E 85 F1 | 	sub	fp, #64
26a08     D8 40 B0 FD | 	call	#__system__emitsign_0555
26a0c     18 4F 05 F1 | 	add	fp, #280
26a10     A7 FA 61 FC | 	wrlong	result1, fp
26a14     18 4F 85 F1 | 	sub	fp, #280
26a18     00 FA 55 F2 | 	cmps	result1, #0 wc
26a1c     18 4F 05 C1 |  if_b	add	fp, #280
26a20     A7 FA 01 CB |  if_b	rdlong	result1, fp
26a24     18 4F 85 C1 |  if_b	sub	fp, #280
26a28     B8 04 90 CD |  if_b	jmp	#LR__3353
26a2c     C0 4E 05 F1 | 	add	fp, #192
26a30     A7 26 02 FB | 	rdlong	local01, fp
26a34     58 4E 05 F1 | 	add	fp, #88
26a38     A7 2A 02 FB | 	rdlong	local03, fp
26a3c     15 27 02 F1 | 	add	local01, local03
26a40     58 4E 85 F1 | 	sub	fp, #88
26a44     A7 26 62 FC | 	wrlong	local01, fp
26a48     C0 4E 85 F1 | 	sub	fp, #192
26a4c                 | LR__3326
26a4c     4C 4E 05 F1 | 	add	fp, #76
26a50     A7 26 02 FB | 	rdlong	local01, fp
26a54     34 4E 85 F1 | 	sub	fp, #52
26a58     A7 26 62 FC | 	wrlong	local01, fp
26a5c     18 4E 85 F1 | 	sub	fp, #24
26a60     97 9E 48 FB | 	callpa	#(@LR__3332-@LR__3327)>>2,fcache_load_ptr_
26a64                 | LR__3327
26a64     18 4E 05 F1 | 	add	fp, #24
26a68     A7 28 02 FB | 	rdlong	local02, fp
26a6c     3C 4E 05 F1 | 	add	fp, #60
26a70     A7 2E 02 FB | 	rdlong	local05, fp
26a74     54 4E 85 F1 | 	sub	fp, #84
26a78     17 29 52 F2 | 	cmps	local02, local05 wc
26a7c     20 01 90 3D |  if_ae	jmp	#LR__3333
26a80     18 4E 05 F1 | 	add	fp, #24
26a84     A7 30 02 FB | 	rdlong	local06, fp
26a88     18 4E 85 F1 | 	sub	fp, #24
26a8c     00 30 56 F2 | 	cmps	local06, #0 wc
26a90     58 00 90 CD |  if_b	jmp	#LR__3328
26a94     18 4E 05 F1 | 	add	fp, #24
26a98     A7 30 02 FB | 	rdlong	local06, fp
26a9c     40 4E 05 F1 | 	add	fp, #64
26aa0     A7 32 02 FB | 	rdlong	local07, fp
26aa4     58 4E 85 F1 | 	sub	fp, #88
26aa8     19 31 52 F2 | 	cmps	local06, local07 wc
26aac     3C 00 90 3D |  if_ae	jmp	#LR__3328
26ab0     C0 4E 05 F1 | 	add	fp, #192
26ab4     A7 34 02 FB | 	rdlong	local08, fp
26ab8     1A 33 02 F6 | 	mov	local07, local08
26abc     01 32 06 F1 | 	add	local07, #1
26ac0     A7 32 62 FC | 	wrlong	local07, fp
26ac4     A8 4E 85 F1 | 	sub	fp, #168
26ac8     A7 32 02 FB | 	rdlong	local07, fp
26acc     19 37 02 F6 | 	mov	local09, local07
26ad0     58 4E 05 F1 | 	add	fp, #88
26ad4     A7 38 02 F6 | 	mov	local10, fp
26ad8     A7 36 02 F1 | 	add	local09, fp
26adc     1B 3B C2 FA | 	rdbyte	local11, local09
26ae0     1A 3B 42 FC | 	wrbyte	local11, local08
26ae4     70 4E 85 F1 | 	sub	fp, #112
26ae8     20 00 90 FD | 	jmp	#LR__3329
26aec                 | LR__3328
26aec     C0 4E 05 F1 | 	add	fp, #192
26af0     A7 34 02 FB | 	rdlong	local08, fp
26af4     1A 37 02 F6 | 	mov	local09, local08
26af8     01 36 06 F1 | 	add	local09, #1
26afc     A7 36 62 FC | 	wrlong	local09, fp
26b00     C0 4E 85 F1 | 	sub	fp, #192
26b04     30 36 06 F6 | 	mov	local09, #48
26b08     1A 61 48 FC | 	wrbyte	#48, local08
26b0c                 | LR__3329
26b0c     18 4E 05 F1 | 	add	fp, #24
26b10     A7 30 02 FB | 	rdlong	local06, fp
26b14     38 4E 05 F1 | 	add	fp, #56
26b18     A7 3C 02 FB | 	rdlong	local12, fp
26b1c     50 4E 85 F1 | 	sub	fp, #80
26b20     1E 31 0A F2 | 	cmp	local06, local12 wz
26b24     5C 00 90 5D |  if_ne	jmp	#LR__3331
26b28     10 4F 05 F1 | 	add	fp, #272
26b2c     A7 32 02 FB | 	rdlong	local07, fp
26b30     10 4F 85 F1 | 	sub	fp, #272
26b34     19 37 0A F6 | 	mov	local09, local07 wz
26b38     28 00 90 5D |  if_ne	jmp	#LR__3330
26b3c     54 4E 05 F1 | 	add	fp, #84
26b40     A7 3A 02 FB | 	rdlong	local11, fp
26b44     1D 39 02 F6 | 	mov	local10, local11
26b48     01 38 86 F1 | 	sub	local10, #1
26b4c     3C 4E 85 F1 | 	sub	fp, #60
26b50     A7 3E 02 FB | 	rdlong	local13, fp
26b54     18 4E 85 F1 | 	sub	fp, #24
26b58     1F 41 02 F6 | 	mov	local14, local13
26b5c     1C 41 52 F2 | 	cmps	local14, local10 wc
26b60     20 00 90 3D |  if_ae	jmp	#LR__3331
26b64                 | LR__3330
26b64     C0 4E 05 F1 | 	add	fp, #192
26b68     A7 34 02 FB | 	rdlong	local08, fp
26b6c     1A 3D 02 F6 | 	mov	local12, local08
26b70     01 3C 06 F1 | 	add	local12, #1
26b74     A7 3C 62 FC | 	wrlong	local12, fp
26b78     C0 4E 85 F1 | 	sub	fp, #192
26b7c     2E 36 06 F6 | 	mov	local09, #46
26b80     1A 5D 48 FC | 	wrbyte	#46, local08
26b84                 | LR__3331
26b84     18 4E 05 F1 | 	add	fp, #24
26b88     A7 42 02 FB | 	rdlong	local15, fp
26b8c     21 3D 02 F6 | 	mov	local12, local15
26b90     01 3C 06 F1 | 	add	local12, #1
26b94     A7 3C 62 FC | 	wrlong	local12, fp
26b98     18 4E 85 F1 | 	sub	fp, #24
26b9c     C4 FE 9F FD | 	jmp	#LR__3327
26ba0                 | LR__3332
26ba0                 | LR__3333
26ba0     34 4E 05 F1 | 	add	fp, #52
26ba4     A7 26 0A FB | 	rdlong	local01, fp wz
26ba8     34 4E 85 F1 | 	sub	fp, #52
26bac     A0 00 90 AD |  if_e	jmp	#LR__3337
26bb0     C0 4E 05 F1 | 	add	fp, #192
26bb4     A7 26 02 FB | 	rdlong	local01, fp
26bb8     01 26 86 F1 | 	sub	local01, #1
26bbc     A7 26 62 FC | 	wrlong	local01, fp
26bc0     C0 4E 85 F1 | 	sub	fp, #192
26bc4     97 26 48 FB | 	callpa	#(@LR__3335-@LR__3334)>>2,fcache_load_ptr_
26bc8                 | LR__3334
26bc8     C0 4E 05 F1 | 	add	fp, #192
26bcc     A7 26 02 FB | 	rdlong	local01, fp
26bd0     04 4E 05 F1 | 	add	fp, #4
26bd4     A7 2A 02 FB | 	rdlong	local03, fp
26bd8     C4 4E 85 F1 | 	sub	fp, #196
26bdc     15 27 5A F2 | 	cmps	local01, local03 wcz
26be0     30 00 90 ED |  if_be	jmp	#LR__3336
26be4     C0 4E 05 F1 | 	add	fp, #192
26be8     A7 30 02 FB | 	rdlong	local06, fp
26bec     C0 4E 85 F1 | 	sub	fp, #192
26bf0     18 2D C2 FA | 	rdbyte	local04, local06
26bf4     30 2C 0E F2 | 	cmp	local04, #48 wz
26bf8     18 00 90 5D |  if_ne	jmp	#LR__3336
26bfc     C0 4E 05 F1 | 	add	fp, #192
26c00     A7 26 02 FB | 	rdlong	local01, fp
26c04     01 26 86 F1 | 	sub	local01, #1
26c08     A7 26 62 FC | 	wrlong	local01, fp
26c0c     C0 4E 85 F1 | 	sub	fp, #192
26c10     B4 FF 9F FD | 	jmp	#LR__3334
26c14                 | LR__3335
26c14                 | LR__3336
26c14     C0 4E 05 F1 | 	add	fp, #192
26c18     A7 28 02 FB | 	rdlong	local02, fp
26c1c     C0 4E 85 F1 | 	sub	fp, #192
26c20     14 27 C2 FA | 	rdbyte	local01, local02
26c24     2E 26 0E F2 | 	cmp	local01, #46 wz
26c28     C0 4E 05 A1 |  if_e	add	fp, #192
26c2c     A7 26 02 AB |  if_e	rdlong	local01, fp
26c30     01 26 86 A1 |  if_e	sub	local01, #1
26c34     A7 26 62 AC |  if_e	wrlong	local01, fp
26c38     C0 4E 85 A1 |  if_e	sub	fp, #192
26c3c     C0 4E 05 F1 | 	add	fp, #192
26c40     A7 2A 02 FB | 	rdlong	local03, fp
26c44     01 2A 06 F1 | 	add	local03, #1
26c48     A7 2A 62 FC | 	wrlong	local03, fp
26c4c     C0 4E 85 F1 | 	sub	fp, #192
26c50                 | LR__3337
26c50     24 4E 05 F1 | 	add	fp, #36
26c54     A7 26 0A FB | 	rdlong	local01, fp wz
26c58     24 4E 85 F1 | 	sub	fp, #36
26c5c     B4 00 90 AD |  if_e	jmp	#LR__3340
26c60     C0 4E 05 F1 | 	add	fp, #192
26c64     A7 28 02 FB | 	rdlong	local02, fp
26c68     14 2B 02 F6 | 	mov	local03, local02
26c6c     01 2A 06 F1 | 	add	local03, #1
26c70     A7 2A 62 FC | 	wrlong	local03, fp
26c74     90 4E 85 F1 | 	sub	fp, #144
26c78     A7 2C 02 FB | 	rdlong	local04, fp
26c7c     14 2D 42 FC | 	wrbyte	local04, local02
26c80     90 4E 05 F1 | 	add	fp, #144
26c84     A7 28 02 FB | 	rdlong	local02, fp
26c88     14 2B 02 F6 | 	mov	local03, local02
26c8c     01 2A 06 F1 | 	add	local03, #1
26c90     A7 2A 62 FC | 	wrlong	local03, fp
26c94     60 4E 85 F1 | 	sub	fp, #96
26c98     A7 2C 02 FB | 	rdlong	local04, fp
26c9c     14 2D 42 FC | 	wrbyte	local04, local02
26ca0     48 4E 85 F1 | 	sub	fp, #72
26ca4     A7 00 68 FC | 	wrlong	#0, fp
26ca8     18 4E 85 F1 | 	sub	fp, #24
26cac                 | LR__3338
26cac     18 4E 05 F1 | 	add	fp, #24
26cb0     A7 28 02 FB | 	rdlong	local02, fp
26cb4     44 4E 05 F1 | 	add	fp, #68
26cb8     A7 2E 02 FB | 	rdlong	local05, fp
26cbc     5C 4E 85 F1 | 	sub	fp, #92
26cc0     17 29 52 F2 | 	cmps	local02, local05 wc
26cc4     4C 00 90 3D |  if_ae	jmp	#LR__3339
26cc8     C0 4E 05 F1 | 	add	fp, #192
26ccc     A7 34 02 FB | 	rdlong	local08, fp
26cd0     1A 3D 02 F6 | 	mov	local12, local08
26cd4     01 3C 06 F1 | 	add	local12, #1
26cd8     A7 3C 62 FC | 	wrlong	local12, fp
26cdc     A8 4E 85 F1 | 	sub	fp, #168
26ce0     A7 32 02 FB | 	rdlong	local07, fp
26ce4     19 37 02 F6 | 	mov	local09, local07
26ce8     98 4E 05 F1 | 	add	fp, #152
26cec     A7 38 02 F6 | 	mov	local10, fp
26cf0     A7 36 02 F1 | 	add	local09, fp
26cf4     1B 3B C2 FA | 	rdbyte	local11, local09
26cf8     1A 3B 42 FC | 	wrbyte	local11, local08
26cfc     98 4E 85 F1 | 	sub	fp, #152
26d00     A7 3C 02 FB | 	rdlong	local12, fp
26d04     01 3C 06 F1 | 	add	local12, #1
26d08     A7 3C 62 FC | 	wrlong	local12, fp
26d0c     18 4E 85 F1 | 	sub	fp, #24
26d10     98 FF 9F FD | 	jmp	#LR__3338
26d14                 | LR__3339
26d14                 | LR__3340
26d14     C0 4E 05 F1 | 	add	fp, #192
26d18     A7 26 02 FB | 	rdlong	local01, fp
26d1c     C0 4E 85 F1 | 	sub	fp, #192
26d20     13 01 48 FC | 	wrbyte	#0, local01
26d24                 | LR__3341
26d24     6C 4E 05 F1 | 	add	fp, #108
26d28     A7 26 0A FB | 	rdlong	local01, fp wz
26d2c     6C 4E 85 F1 | 	sub	fp, #108
26d30     90 01 90 AD |  if_e	jmp	#LR__3352
26d34     48 4E 05 F1 | 	add	fp, #72
26d38     A7 2A 0A FB | 	rdlong	local03, fp wz
26d3c     48 4E 85 F1 | 	sub	fp, #72
26d40     80 01 90 AD |  if_e	jmp	#LR__3352
26d44     C4 4E 05 F1 | 	add	fp, #196
26d48     A7 12 02 FB | 	rdlong	arg01, fp
26d4c     C4 4E 85 F1 | 	sub	fp, #196
26d50     09 45 02 F6 | 	mov	local16, arg01
26d54     97 06 48 FB | 	callpa	#(@LR__3343-@LR__3342)>>2,fcache_load_ptr_
26d58                 | LR__3342
26d58     22 FB C9 FA | 	rdbyte	result1, local16 wz
26d5c     01 44 06 51 |  if_ne	add	local16, #1
26d60     F4 FF 9F 5D |  if_ne	jmp	#LR__3342
26d64                 | LR__3343
26d64     09 45 82 F1 | 	sub	local16, arg01
26d68     22 2D 02 F6 | 	mov	local04, local16
26d6c     6C 4E 05 F1 | 	add	fp, #108
26d70     A7 30 02 FB | 	rdlong	local06, fp
26d74     6C 4E 85 F1 | 	sub	fp, #108
26d78     18 2D 5A F2 | 	cmps	local04, local06 wcz
26d7c     44 01 90 ED |  if_be	jmp	#LR__3352
26d80     C4 4E 05 F1 | 	add	fp, #196
26d84     A7 26 02 FB | 	rdlong	local01, fp
26d88     5C 4E 05 F1 | 	add	fp, #92
26d8c     A7 26 62 FC | 	wrlong	local01, fp
26d90     FC 4E 85 F1 | 	sub	fp, #252
26d94     A7 26 0A FB | 	rdlong	local01, fp wz
26d98     24 4E 85 F1 | 	sub	fp, #36
26d9c     20 00 90 AD |  if_e	jmp	#LR__3344
26da0     B8 4E 05 F1 | 	add	fp, #184
26da4     A7 00 68 FC | 	wrlong	#0, fp
26da8     4C 4E 85 F1 | 	sub	fp, #76
26dac     A7 26 02 FB | 	rdlong	local01, fp
26db0     B0 4E 05 F1 | 	add	fp, #176
26db4     A7 26 62 FC | 	wrlong	local01, fp
26db8     1C 4F 85 F1 | 	sub	fp, #284
26dbc     24 00 90 FD | 	jmp	#LR__3345
26dc0                 | LR__3344
26dc0     6C 4E 05 F1 | 	add	fp, #108
26dc4     A7 26 02 FB | 	rdlong	local01, fp
26dc8     01 26 86 F1 | 	sub	local01, #1
26dcc     4C 4E 05 F1 | 	add	fp, #76
26dd0     A7 2A 02 FB | 	rdlong	local03, fp
26dd4     15 27 82 F1 | 	sub	local01, local03
26dd8     64 4E 05 F1 | 	add	fp, #100
26ddc     A7 26 62 FC | 	wrlong	local01, fp
26de0     1C 4F 85 F1 | 	sub	fp, #284
26de4                 | LR__3345
26de4     97 20 48 FB | 	callpa	#(@LR__3347-@LR__3346)>>2,fcache_load_ptr_
26de8                 | LR__3346
26de8     1C 4F 05 F1 | 	add	fp, #284
26dec     A7 26 0A FB | 	rdlong	local01, fp wz
26df0     1C 4F 85 F1 | 	sub	fp, #284
26df4     30 00 90 AD |  if_e	jmp	#LR__3348
26df8     20 4F 05 F1 | 	add	fp, #288
26dfc     A7 28 02 FB | 	rdlong	local02, fp
26e00     14 2B 02 F6 | 	mov	local03, local02
26e04     01 2A 06 F1 | 	add	local03, #1
26e08     A7 2A 62 FC | 	wrlong	local03, fp
26e0c     14 55 48 FC | 	wrbyte	#42, local02
26e10     04 4E 85 F1 | 	sub	fp, #4
26e14     A7 26 02 FB | 	rdlong	local01, fp
26e18     01 26 86 F1 | 	sub	local01, #1
26e1c     A7 26 62 FC | 	wrlong	local01, fp
26e20     1C 4F 85 F1 | 	sub	fp, #284
26e24     C0 FF 9F FD | 	jmp	#LR__3346
26e28                 | LR__3347
26e28                 | LR__3348
26e28     B8 4E 05 F1 | 	add	fp, #184
26e2c     A7 26 0A FB | 	rdlong	local01, fp wz
26e30     B8 4E 85 F1 | 	sub	fp, #184
26e34     70 00 90 AD |  if_e	jmp	#LR__3351
26e38     20 4F 05 F1 | 	add	fp, #288
26e3c     A7 28 02 FB | 	rdlong	local02, fp
26e40     14 2B 02 F6 | 	mov	local03, local02
26e44     01 2A 06 F1 | 	add	local03, #1
26e48     A7 2A 62 FC | 	wrlong	local03, fp
26e4c     14 5D 48 FC | 	wrbyte	#46, local02
26e50     04 4E 85 F1 | 	sub	fp, #4
26e54     A7 00 68 FC | 	wrlong	#0, fp
26e58     1C 4F 85 F1 | 	sub	fp, #284
26e5c                 | LR__3349
26e5c     1C 4F 05 F1 | 	add	fp, #284
26e60     A7 28 02 FB | 	rdlong	local02, fp
26e64     64 4E 85 F1 | 	sub	fp, #100
26e68     A7 2E 02 FB | 	rdlong	local05, fp
26e6c     B8 4E 85 F1 | 	sub	fp, #184
26e70     17 29 52 F2 | 	cmps	local02, local05 wc
26e74     30 00 90 3D |  if_ae	jmp	#LR__3350
26e78     20 4F 05 F1 | 	add	fp, #288
26e7c     A7 34 02 FB | 	rdlong	local08, fp
26e80     1A 3D 02 F6 | 	mov	local12, local08
26e84     01 3C 06 F1 | 	add	local12, #1
26e88     A7 3C 62 FC | 	wrlong	local12, fp
26e8c     1A 55 48 FC | 	wrbyte	#42, local08
26e90     04 4E 85 F1 | 	sub	fp, #4
26e94     A7 3C 02 FB | 	rdlong	local12, fp
26e98     01 3C 06 F1 | 	add	local12, #1
26e9c     A7 3C 62 FC | 	wrlong	local12, fp
26ea0     1C 4F 85 F1 | 	sub	fp, #284
26ea4     B4 FF 9F FD | 	jmp	#LR__3349
26ea8                 | LR__3350
26ea8                 | LR__3351
26ea8     20 4F 05 F1 | 	add	fp, #288
26eac     A7 28 02 FB | 	rdlong	local02, fp
26eb0     14 2B 02 F6 | 	mov	local03, local02
26eb4     01 2A 06 F1 | 	add	local03, #1
26eb8     A7 2A 62 FC | 	wrlong	local03, fp
26ebc     20 4F 85 F1 | 	sub	fp, #288
26ec0     14 01 48 FC | 	wrbyte	#0, local02
26ec4                 | LR__3352
26ec4     04 4E 05 F1 | 	add	fp, #4
26ec8     A7 12 02 FB | 	rdlong	arg01, fp
26ecc     04 4E 05 F1 | 	add	fp, #4
26ed0     A7 14 02 FB | 	rdlong	arg02, fp
26ed4     BC 4E 05 F1 | 	add	fp, #188
26ed8     A7 16 02 FB | 	rdlong	arg03, fp
26edc     C4 4E 85 F1 | 	sub	fp, #196
26ee0     C4 EE BF FD | 	call	#__system___fmtstr
26ee4                 | LR__3353
26ee4     A7 F0 03 F6 | 	mov	ptra, fp
26ee8     B2 00 A0 FD | 	call	#popregs_
26eec                 | __system___fmtfloat_ret
26eec     2D 00 64 FD | 	ret
26ef0                 | 
26ef0                 | __system__Left_S
26ef0     04 4A 05 F6 | 	mov	COUNT_, #4
26ef4     A8 00 A0 FD | 	call	#pushregs_
26ef8     09 27 02 F6 | 	mov	local01, arg01
26efc     0A 29 02 F6 | 	mov	local02, arg02
26f00     01 28 56 F2 | 	cmps	local02, #1 wc
26f04     A4 01 00 CF 
26f08     8A FB 05 C6 |  if_b	mov	result1, ##@LR__5303
26f0c     5C 00 90 CD |  if_b	jmp	#LR__3363
26f10     13 13 02 F6 | 	mov	arg01, local01
26f14     09 2B 02 F6 | 	mov	local03, arg01
26f18     97 06 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
26f1c                 | LR__3360
26f1c     15 FB C9 FA | 	rdbyte	result1, local03 wz
26f20     01 2A 06 51 |  if_ne	add	local03, #1
26f24     F4 FF 9F 5D |  if_ne	jmp	#LR__3360
26f28                 | LR__3361
26f28     09 2B 82 F1 | 	sub	local03, arg01
26f2c     15 FB 01 F6 | 	mov	result1, local03
26f30     14 FB 59 F2 | 	cmps	result1, local02 wcz
26f34     13 FB 01 E6 |  if_be	mov	result1, local01
26f38     30 00 90 ED |  if_be	jmp	#LR__3363
26f3c     14 13 02 F6 | 	mov	arg01, local02
26f40     02 12 06 F1 | 	add	arg01, #2
26f44     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
26f48     FD 2C 0A F6 | 	mov	local04, result1 wz
26f4c     18 00 90 AD |  if_e	jmp	#LR__3362
26f50     16 13 02 F6 | 	mov	arg01, local04
26f54     13 15 02 F6 | 	mov	arg02, local01
26f58     14 17 02 F6 | 	mov	arg03, local02
26f5c     34 DE BF FD | 	call	#__system____builtin_memmove
26f60     16 29 02 F1 | 	add	local02, local04
26f64     14 01 48 FC | 	wrbyte	#0, local02
26f68                 | LR__3362
26f68     16 FB 01 F6 | 	mov	result1, local04
26f6c                 | LR__3363
26f6c     A7 F0 03 F6 | 	mov	ptra, fp
26f70     B2 00 A0 FD | 	call	#popregs_
26f74                 | __system__Left_S_ret
26f74     2D 00 64 FD | 	ret
26f78                 | 
26f78                 | __system__Right_S
26f78     05 4A 05 F6 | 	mov	COUNT_, #5
26f7c     A8 00 A0 FD | 	call	#pushregs_
26f80     09 27 02 F6 | 	mov	local01, arg01
26f84     0A 29 02 F6 | 	mov	local02, arg02
26f88     01 28 56 F2 | 	cmps	local02, #1 wc
26f8c     A4 01 00 CF 
26f90     8B FB 05 C6 |  if_b	mov	result1, ##@LR__5304
26f94     64 00 90 CD |  if_b	jmp	#LR__3373
26f98     13 13 02 F6 | 	mov	arg01, local01
26f9c     09 2B 02 F6 | 	mov	local03, arg01
26fa0     97 06 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
26fa4                 | LR__3370
26fa4     15 FB C9 FA | 	rdbyte	result1, local03 wz
26fa8     01 2A 06 51 |  if_ne	add	local03, #1
26fac     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
26fb0                 | LR__3371
26fb0     09 2B 82 F1 | 	sub	local03, arg01
26fb4     15 FB 01 F6 | 	mov	result1, local03
26fb8     FD 2C 02 F6 | 	mov	local04, result1
26fbc     14 2D 5A F2 | 	cmps	local04, local02 wcz
26fc0     13 FB 01 E6 |  if_be	mov	result1, local01
26fc4     34 00 90 ED |  if_be	jmp	#LR__3373
26fc8     14 13 02 F6 | 	mov	arg01, local02
26fcc     02 12 06 F1 | 	add	arg01, #2
26fd0     40 20 B0 FD | 	call	#__system___gc_alloc_managed
26fd4     FD 2E 0A F6 | 	mov	local05, result1 wz
26fd8     1C 00 90 AD |  if_e	jmp	#LR__3372
26fdc     14 2D 82 F1 | 	sub	local04, local02
26fe0     13 2D 02 F1 | 	add	local04, local01
26fe4     01 28 06 F1 | 	add	local02, #1
26fe8     17 13 02 F6 | 	mov	arg01, local05
26fec     16 15 02 F6 | 	mov	arg02, local04
26ff0     14 17 02 F6 | 	mov	arg03, local02
26ff4     9C DD BF FD | 	call	#__system____builtin_memmove
26ff8                 | LR__3372
26ff8     17 FB 01 F6 | 	mov	result1, local05
26ffc                 | LR__3373
26ffc     A7 F0 03 F6 | 	mov	ptra, fp
27000     B2 00 A0 FD | 	call	#popregs_
27004                 | __system__Right_S_ret
27004     2D 00 64 FD | 	ret
27008                 | 
27008                 | __system__Mid_S
27008     05 4A 05 F6 | 	mov	COUNT_, #5
2700c     A8 00 A0 FD | 	call	#pushregs_
27010     09 27 02 F6 | 	mov	local01, arg01
27014     0A 29 02 F6 | 	mov	local02, arg02
27018     01 16 56 F2 | 	cmps	arg03, #1 wc
2701c     A4 01 00 CF 
27020     8C FB 05 C6 |  if_b	mov	result1, ##@LR__5305
27024     80 00 90 CD |  if_b	jmp	#LR__3383
27028     01 28 86 F1 | 	sub	local02, #1
2702c     00 28 56 F3 | 	fges	local02, #0 wc
27030     13 13 02 F6 | 	mov	arg01, local01
27034     09 2B 02 F6 | 	mov	local03, arg01
27038     97 06 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
2703c                 | LR__3380
2703c     15 FB C9 FA | 	rdbyte	result1, local03 wz
27040     01 2A 06 51 |  if_ne	add	local03, #1
27044     F4 FF 9F 5D |  if_ne	jmp	#LR__3380
27048                 | LR__3381
27048     09 2B 82 F1 | 	sub	local03, arg01
2704c     15 FB 01 F6 | 	mov	result1, local03
27050     FD 14 02 F6 | 	mov	arg02, result1
27054     14 15 52 F2 | 	cmps	arg02, local02 wc
27058     A4 01 00 CF 
2705c     8D FB 05 C6 |  if_b	mov	result1, ##@LR__5306
27060     44 00 90 CD |  if_b	jmp	#LR__3383
27064     0A 2D 02 F6 | 	mov	local04, arg02
27068     14 2D 82 F1 | 	sub	local04, local02
2706c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
27070     0B 2D 02 16 |  if_a	mov	local04, arg03
27074     16 13 02 F6 | 	mov	arg01, local04
27078     02 12 06 F1 | 	add	arg01, #2
2707c     94 1F B0 FD | 	call	#__system___gc_alloc_managed
27080     FD 2E 0A F6 | 	mov	local05, result1 wz
27084     1C 00 90 AD |  if_e	jmp	#LR__3382
27088     13 29 02 F1 | 	add	local02, local01
2708c     17 13 02 F6 | 	mov	arg01, local05
27090     14 15 02 F6 | 	mov	arg02, local02
27094     16 17 02 F6 | 	mov	arg03, local04
27098     F8 DC BF FD | 	call	#__system____builtin_memmove
2709c     17 2D 02 F1 | 	add	local04, local05
270a0     16 01 48 FC | 	wrbyte	#0, local04
270a4                 | LR__3382
270a4     17 FB 01 F6 | 	mov	result1, local05
270a8                 | LR__3383
270a8     A7 F0 03 F6 | 	mov	ptra, fp
270ac     B2 00 A0 FD | 	call	#popregs_
270b0                 | __system__Mid_S_ret
270b0     2D 00 64 FD | 	ret
270b4                 | 
270b4                 | __system__Chr_S
270b4     01 4A 05 F6 | 	mov	COUNT_, #1
270b8     A8 00 A0 FD | 	call	#pushregs_
270bc     09 27 02 F6 | 	mov	local01, arg01
270c0     03 12 06 F6 | 	mov	arg01, #3
270c4     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
270c8     00 FA 4D F2 | 	cmps	result1, #0 wz
270cc     FD 26 42 5C |  if_ne	wrbyte	local01, result1
270d0     01 FA 05 51 |  if_ne	add	result1, #1
270d4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
270d8     01 FA 85 51 |  if_ne	sub	result1, #1
270dc     A7 F0 03 F6 | 	mov	ptra, fp
270e0     B2 00 A0 FD | 	call	#popregs_
270e4                 | __system__Chr_S_ret
270e4     2D 00 64 FD | 	ret
270e8                 | 
270e8                 | __system__str_S
270e8     02 4A 05 F6 | 	mov	COUNT_, #2
270ec     A8 00 A0 FD | 	call	#pushregs_
270f0     09 27 02 F6 | 	mov	local01, arg01
270f4     10 12 06 F6 | 	mov	arg01, #16
270f8     18 1F B0 FD | 	call	#__system___gc_alloc_managed
270fc     FD 28 0A F6 | 	mov	local02, result1 wz
27100     30 00 90 AD |  if_e	jmp	#LR__3390
27104     F8 13 02 F6 | 	mov	arg01, ptra
27108     08 F0 07 F1 | 	add	ptra, #8
2710c     09 29 62 FC | 	wrlong	local02, arg01
27110     04 12 06 F1 | 	add	arg01, #4
27114     09 01 68 FC | 	wrlong	#0, arg01
27118     04 12 86 F1 | 	sub	arg01, #4
2711c     00 F0 04 FF 
27120     00 12 46 F5 | 	or	arg01, ##165675008
27124     00 14 06 F6 | 	mov	arg02, #0
27128     13 17 02 F6 | 	mov	arg03, local01
2712c     67 18 06 F6 | 	mov	arg04, #103
27130     90 EE BF FD | 	call	#__system___fmtfloat
27134                 | LR__3390
27134     14 FB 01 F6 | 	mov	result1, local02
27138     A7 F0 03 F6 | 	mov	ptra, fp
2713c     B2 00 A0 FD | 	call	#popregs_
27140                 | __system__str_S_ret
27140     2D 00 64 FD | 	ret
27144                 | 
27144                 | __system__Number_S
27144     08 4A 05 F6 | 	mov	COUNT_, #8
27148     A8 00 A0 FD | 	call	#pushregs_
2714c     09 27 02 F6 | 	mov	local01, arg01
27150     0A 29 0A F6 | 	mov	local02, arg02 wz
27154     0B 2B 02 F6 | 	mov	local03, arg03
27158     3C 00 90 5D |  if_ne	jmp	#LR__3402
2715c     01 28 06 F6 | 	mov	local02, #1
27160     15 2D 02 F6 | 	mov	local04, local03
27164     01 2E 06 F6 | 	mov	local05, #1
27168     97 16 48 FB | 	callpa	#(@LR__3401-@LR__3400)>>2,fcache_load_ptr_
2716c                 | LR__3400
2716c     00 30 06 F6 | 	mov	local06, #0
27170     13 2D 1A F2 | 	cmp	local04, local01 wcz
27174     01 30 66 E6 |  if_be	neg	local06, #1
27178     16 2F 12 F2 | 	cmp	local05, local04 wc
2717c     19 33 A2 F1 | 	subx	local07, local07
27180     19 31 CA F7 | 	test	local06, local07 wz
27184     15 2D 02 5D |  if_ne	qmul	local04, local03
27188     16 2F 02 56 |  if_ne	mov	local05, local04
2718c     01 28 06 51 |  if_ne	add	local02, #1
27190     18 2C 62 5D |  if_ne	getqx	local04
27194     D4 FF 9F 5D |  if_ne	jmp	#LR__3400
27198                 | LR__3401
27198                 | LR__3402
27198     20 28 36 F3 | 	fle	local02, #32 wc
2719c     14 13 02 F6 | 	mov	arg01, local02
271a0     02 12 06 F1 | 	add	arg01, #2
271a4     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
271a8     FD 30 02 F6 | 	mov	local06, result1
271ac     14 33 02 F6 | 	mov	local07, local02
271b0     18 33 02 F1 | 	add	local07, local06
271b4     19 01 48 FC | 	wrbyte	#0, local07
271b8     97 1A 48 FB | 	callpa	#(@LR__3404-@LR__3403)>>2,fcache_load_ptr_
271bc                 | LR__3403
271bc     01 28 16 F2 | 	cmp	local02, #1 wc
271c0     2C 00 90 CD |  if_b	jmp	#LR__3405
271c4     15 27 12 FD | 	qdiv	local01, local03
271c8     01 28 86 F1 | 	sub	local02, #1
271cc     14 33 02 F6 | 	mov	local07, local02
271d0     18 33 02 F1 | 	add	local07, local06
271d4     19 34 62 FD | 	getqy	local08
271d8     0A 34 16 F2 | 	cmp	local08, #10 wc
271dc     30 34 06 C1 |  if_b	add	local08, #48
271e0     37 34 06 31 |  if_ae	add	local08, #55
271e4     19 35 42 FC | 	wrbyte	local08, local07
271e8     18 26 62 FD | 	getqx	local01
271ec     CC FF 9F FD | 	jmp	#LR__3403
271f0                 | LR__3404
271f0                 | LR__3405
271f0     18 FB 01 F6 | 	mov	result1, local06
271f4     A7 F0 03 F6 | 	mov	ptra, fp
271f8     B2 00 A0 FD | 	call	#popregs_
271fc                 | __system__Number_S_ret
271fc     2D 00 64 FD | 	ret
27200                 | 
27200                 | __system__LCase_S
27200     07 4A 05 F6 | 	mov	COUNT_, #7
27204     A8 00 A0 FD | 	call	#pushregs_
27208     09 27 02 F6 | 	mov	local01, arg01
2720c     09 29 02 F6 | 	mov	local02, arg01
27210     97 06 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
27214                 | LR__3410
27214     14 FB C9 FA | 	rdbyte	result1, local02 wz
27218     01 28 06 51 |  if_ne	add	local02, #1
2721c     F4 FF 9F 5D |  if_ne	jmp	#LR__3410
27220                 | LR__3411
27220     09 29 82 F1 | 	sub	local02, arg01
27224     14 FB 01 F6 | 	mov	result1, local02
27228     FD 28 0A F6 | 	mov	local02, result1 wz
2722c     A4 01 00 AF 
27230     8E FB 05 A6 |  if_e	mov	result1, ##@LR__5307
27234     7C 00 90 AD |  if_e	jmp	#LR__3417
27238     14 13 02 F6 | 	mov	arg01, local02
2723c     02 12 06 F1 | 	add	arg01, #2
27240     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
27244     FD 2A 0A F6 | 	mov	local03, result1 wz
27248     64 00 90 AD |  if_e	jmp	#LR__3416
2724c     01 2C 66 F6 | 	neg	local04, #1
27250     97 26 48 FB | 	callpa	#(@LR__3415-@LR__3412)>>2,fcache_load_ptr_
27254                 | LR__3412
27254     01 2C 06 F1 | 	add	local04, #1
27258     16 2F 02 F6 | 	mov	local05, local04
2725c     13 2F 02 F1 | 	add	local05, local01
27260     17 31 C2 FA | 	rdbyte	local06, local05
27264     41 30 56 F2 | 	cmps	local06, #65 wc
27268     18 00 90 CD |  if_b	jmp	#LR__3413
2726c     5B 30 56 F2 | 	cmps	local06, #91 wc
27270     16 33 02 C6 |  if_b	mov	local07, local04
27274     15 33 02 C1 |  if_b	add	local07, local03
27278     20 30 06 C1 |  if_b	add	local06, #32
2727c     19 31 42 CC |  if_b	wrbyte	local06, local07
27280     0C 00 90 CD |  if_b	jmp	#LR__3414
27284                 | LR__3413
27284     16 33 02 F6 | 	mov	local07, local04
27288     15 33 02 F1 | 	add	local07, local03
2728c     19 31 42 FC | 	wrbyte	local06, local07
27290                 | LR__3414
27290     14 31 02 F6 | 	mov	local06, local02
27294     01 30 86 F1 | 	sub	local06, #1
27298     18 2D 0A F2 | 	cmp	local04, local06 wz
2729c     B4 FF 9F 5D |  if_ne	jmp	#LR__3412
272a0                 | LR__3415
272a0     15 29 02 F1 | 	add	local02, local03
272a4     14 01 48 FC | 	wrbyte	#0, local02
272a8     15 FB 01 F6 | 	mov	result1, local03
272ac     04 00 90 FD | 	jmp	#LR__3417
272b0                 | LR__3416
272b0     15 FB 01 F6 | 	mov	result1, local03
272b4                 | LR__3417
272b4     A7 F0 03 F6 | 	mov	ptra, fp
272b8     B2 00 A0 FD | 	call	#popregs_
272bc                 | __system__LCase_S_ret
272bc     2D 00 64 FD | 	ret
272c0                 | 
272c0                 | __system__LTrim_S
272c0     05 4A 05 F6 | 	mov	COUNT_, #5
272c4     A8 00 A0 FD | 	call	#pushregs_
272c8     09 27 02 F6 | 	mov	local01, arg01
272cc     09 29 02 F6 | 	mov	local02, arg01
272d0     97 06 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
272d4                 | LR__3420
272d4     14 FB C9 FA | 	rdbyte	result1, local02 wz
272d8     01 28 06 51 |  if_ne	add	local02, #1
272dc     F4 FF 9F 5D |  if_ne	jmp	#LR__3420
272e0                 | LR__3421
272e0     09 29 82 F1 | 	sub	local02, arg01
272e4     14 FB 01 F6 | 	mov	result1, local02
272e8     FD 28 0A F6 | 	mov	local02, result1 wz
272ec     A4 01 00 AF 
272f0     8F FB 05 A6 |  if_e	mov	result1, ##@LR__5308
272f4     7C 00 90 AD |  if_e	jmp	#LR__3426
272f8     00 2A 06 F6 | 	mov	local03, #0
272fc     14 2D 02 F6 | 	mov	local04, local02
27300                 | LR__3422
27300     16 2B 52 F2 | 	cmps	local03, local04 wc
27304     68 00 90 3D |  if_ae	jmp	#LR__3425
27308     15 17 02 F6 | 	mov	arg03, local03
2730c     13 17 02 F1 | 	add	arg03, local01
27310     0B 17 C2 FA | 	rdbyte	arg03, arg03
27314     20 16 0E F2 | 	cmp	arg03, #32 wz
27318     4C 00 90 AD |  if_e	jmp	#LR__3424
2731c     14 13 02 F6 | 	mov	arg01, local02
27320     15 13 82 F1 | 	sub	arg01, local03
27324     02 12 06 F1 | 	add	arg01, #2
27328     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
2732c     FD 2E 0A F6 | 	mov	local05, result1 wz
27330     2C 00 90 AD |  if_e	jmp	#LR__3423
27334     15 15 02 F6 | 	mov	arg02, local03
27338     13 15 02 F1 | 	add	arg02, local01
2733c     14 17 02 F6 | 	mov	arg03, local02
27340     15 17 82 F1 | 	sub	arg03, local03
27344     17 13 02 F6 | 	mov	arg01, local05
27348     48 DA BF FD | 	call	#__system____builtin_memmove
2734c     15 29 82 F1 | 	sub	local02, local03
27350     17 29 02 F1 | 	add	local02, local05
27354     14 01 48 FC | 	wrbyte	#0, local02
27358     17 FB 01 F6 | 	mov	result1, local05
2735c     14 00 90 FD | 	jmp	#LR__3426
27360                 | LR__3423
27360     17 FB 01 F6 | 	mov	result1, local05
27364     0C 00 90 FD | 	jmp	#LR__3426
27368                 | LR__3424
27368     01 2A 06 F1 | 	add	local03, #1
2736c     90 FF 9F FD | 	jmp	#LR__3422
27370                 | LR__3425
27370     13 FB 01 F6 | 	mov	result1, local01
27374                 | LR__3426
27374     A7 F0 03 F6 | 	mov	ptra, fp
27378     B2 00 A0 FD | 	call	#popregs_
2737c                 | __system__LTrim_S_ret
2737c     2D 00 64 FD | 	ret
27380                 | 
27380                 | __system__RTrim_S
27380     04 4A 05 F6 | 	mov	COUNT_, #4
27384     A8 00 A0 FD | 	call	#pushregs_
27388     09 27 02 F6 | 	mov	local01, arg01
2738c     09 29 02 F6 | 	mov	local02, arg01
27390     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
27394                 | LR__3430
27394     14 FB C9 FA | 	rdbyte	result1, local02 wz
27398     01 28 06 51 |  if_ne	add	local02, #1
2739c     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
273a0                 | LR__3431
273a0     09 29 82 F1 | 	sub	local02, arg01
273a4     14 FB 01 F6 | 	mov	result1, local02
273a8     FD 28 0A F6 | 	mov	local02, result1 wz
273ac     A4 01 00 AF 
273b0     90 FB 05 A6 |  if_e	mov	result1, ##@LR__5309
273b4     74 00 90 AD |  if_e	jmp	#LR__3435
273b8     14 2B 02 F6 | 	mov	local03, local02
273bc     01 2A 86 F1 | 	sub	local03, #1
273c0                 | LR__3432
273c0     15 15 02 F6 | 	mov	arg02, local03
273c4     13 15 02 F1 | 	add	arg02, local01
273c8     0A 29 C2 FA | 	rdbyte	local02, arg02
273cc     20 28 0E F2 | 	cmp	local02, #32 wz
273d0     44 00 90 AD |  if_e	jmp	#LR__3434
273d4     15 13 02 F6 | 	mov	arg01, local03
273d8     02 12 06 F1 | 	add	arg01, #2
273dc     34 1C B0 FD | 	call	#__system___gc_alloc_managed
273e0     FD 2C 0A F6 | 	mov	local04, result1 wz
273e4     28 00 90 AD |  if_e	jmp	#LR__3433
273e8     15 17 02 F6 | 	mov	arg03, local03
273ec     01 16 06 F1 | 	add	arg03, #1
273f0     16 13 02 F6 | 	mov	arg01, local04
273f4     13 15 02 F6 | 	mov	arg02, local01
273f8     98 D9 BF FD | 	call	#__system____builtin_memmove
273fc     01 2A 06 F1 | 	add	local03, #1
27400     16 2B 02 F1 | 	add	local03, local04
27404     15 01 48 FC | 	wrbyte	#0, local03
27408     16 FB 01 F6 | 	mov	result1, local04
2740c     1C 00 90 FD | 	jmp	#LR__3435
27410                 | LR__3433
27410     16 FB 01 F6 | 	mov	result1, local04
27414     14 00 90 FD | 	jmp	#LR__3435
27418                 | LR__3434
27418     01 2A 86 F1 | 	sub	local03, #1
2741c     00 2A 56 F2 | 	cmps	local03, #0 wc
27420     9C FF 9F 3D |  if_ae	jmp	#LR__3432
27424     A4 01 00 FF 
27428     91 FB 05 F6 | 	mov	result1, ##@LR__5310
2742c                 | LR__3435
2742c     A7 F0 03 F6 | 	mov	ptra, fp
27430     B2 00 A0 FD | 	call	#popregs_
27434                 | __system__RTrim_S_ret
27434     2D 00 64 FD | 	ret
27438                 | 
27438                 | __system__Instr
27438     07 4A 05 F6 | 	mov	COUNT_, #7
2743c     A8 00 A0 FD | 	call	#pushregs_
27440     09 27 02 F6 | 	mov	local01, arg01
27444     0A 29 02 F6 | 	mov	local02, arg02
27448     0B 2B 02 F6 | 	mov	local03, arg03
2744c     15 13 02 F6 | 	mov	arg01, local03
27450     09 2D 02 F6 | 	mov	local04, arg01
27454     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
27458                 | LR__3440
27458     16 FB C9 FA | 	rdbyte	result1, local04 wz
2745c     01 2C 06 51 |  if_ne	add	local04, #1
27460     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
27464                 | LR__3441
27464     09 2D 82 F1 | 	sub	local04, arg01
27468     16 2F 02 F6 | 	mov	local05, local04
2746c     14 13 02 F6 | 	mov	arg01, local02
27470     09 2D 02 F6 | 	mov	local04, arg01
27474     97 06 48 FB | 	callpa	#(@LR__3443-@LR__3442)>>2,fcache_load_ptr_
27478                 | LR__3442
27478     16 FB C9 FA | 	rdbyte	result1, local04 wz
2747c     01 2C 06 51 |  if_ne	add	local04, #1
27480     F4 FF 9F 5D |  if_ne	jmp	#LR__3442
27484                 | LR__3443
27484     09 2D 82 F1 | 	sub	local04, arg01
27488     16 FB 01 F6 | 	mov	result1, local04
2748c     FD 18 0A F6 | 	mov	arg04, result1 wz
27490     00 FA 05 A6 |  if_e	mov	result1, #0
27494     98 00 90 AD |  if_e	jmp	#LR__3447
27498     00 2E 0E F2 | 	cmp	local05, #0 wz
2749c     00 FA 05 A6 |  if_e	mov	result1, #0
274a0     8C 00 90 AD |  if_e	jmp	#LR__3447
274a4     0C 27 5A F2 | 	cmps	local01, arg04 wcz
274a8     00 FA 05 16 |  if_a	mov	result1, #0
274ac     80 00 90 1D |  if_a	jmp	#LR__3447
274b0     01 26 56 F2 | 	cmps	local01, #1 wc
274b4     01 26 06 C6 |  if_b	mov	local01, #1
274b8     15 31 C2 FA | 	rdbyte	local06, local03
274bc     01 2E 0E F2 | 	cmp	local05, #1 wz
274c0     18 00 90 5D |  if_ne	jmp	#LR__3444
274c4     14 13 02 F6 | 	mov	arg01, local02
274c8     18 15 02 F6 | 	mov	arg02, local06
274cc     13 17 02 F6 | 	mov	arg03, local01
274d0     00 18 06 F6 | 	mov	arg04, #0
274d4     14 37 B0 FD | 	call	#__system____ScanForChar
274d8     54 00 90 FD | 	jmp	#LR__3447
274dc                 | LR__3444
274dc     13 33 02 F6 | 	mov	local07, local01
274e0                 | LR__3445
274e0     14 13 02 F6 | 	mov	arg01, local02
274e4     18 15 02 F6 | 	mov	arg02, local06
274e8     19 17 02 F6 | 	mov	arg03, local07
274ec     00 18 06 F6 | 	mov	arg04, #0
274f0     F8 36 B0 FD | 	call	#__system____ScanForChar
274f4     FD 32 0A F6 | 	mov	local07, result1 wz
274f8     30 00 90 AD |  if_e	jmp	#LR__3446
274fc     17 17 02 F6 | 	mov	arg03, local05
27500     14 13 02 F6 | 	mov	arg01, local02
27504     19 15 02 F6 | 	mov	arg02, local07
27508     FC FA BF FD | 	call	#__system__Mid_S
2750c     FD 12 02 F6 | 	mov	arg01, result1
27510     15 15 02 F6 | 	mov	arg02, local03
27514     84 D9 BF FD | 	call	#__system___string_cmp
27518     00 FA 0D F2 | 	cmp	result1, #0 wz
2751c     19 FB 01 A6 |  if_e	mov	result1, local07
27520     0C 00 90 AD |  if_e	jmp	#LR__3447
27524     17 33 02 F1 | 	add	local07, local05
27528     B4 FF 9F FD | 	jmp	#LR__3445
2752c                 | LR__3446
2752c     00 FA 05 F6 | 	mov	result1, #0
27530                 | LR__3447
27530     A7 F0 03 F6 | 	mov	ptra, fp
27534     B2 00 A0 FD | 	call	#popregs_
27538                 | __system__Instr_ret
27538     2D 00 64 FD | 	ret
2753c                 | 
2753c                 | __system__InstrRev
2753c     07 4A 05 F6 | 	mov	COUNT_, #7
27540     A8 00 A0 FD | 	call	#pushregs_
27544     09 27 02 F6 | 	mov	local01, arg01
27548     0A 29 02 F6 | 	mov	local02, arg02
2754c     0B 2B 02 F6 | 	mov	local03, arg03
27550     15 13 02 F6 | 	mov	arg01, local03
27554     09 2D 02 F6 | 	mov	local04, arg01
27558     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
2755c                 | LR__3450
2755c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27560     01 2C 06 51 |  if_ne	add	local04, #1
27564     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
27568                 | LR__3451
27568     09 2D 82 F1 | 	sub	local04, arg01
2756c     16 2F 02 F6 | 	mov	local05, local04
27570     14 13 02 F6 | 	mov	arg01, local02
27574     09 2D 02 F6 | 	mov	local04, arg01
27578     97 06 48 FB | 	callpa	#(@LR__3453-@LR__3452)>>2,fcache_load_ptr_
2757c                 | LR__3452
2757c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27580     01 2C 06 51 |  if_ne	add	local04, #1
27584     F4 FF 9F 5D |  if_ne	jmp	#LR__3452
27588                 | LR__3453
27588     09 2D 82 F1 | 	sub	local04, arg01
2758c     16 FB 01 F6 | 	mov	result1, local04
27590     FD 18 0A F6 | 	mov	arg04, result1 wz
27594     00 FA 05 A6 |  if_e	mov	result1, #0
27598     98 00 90 AD |  if_e	jmp	#LR__3457
2759c     00 2E 0E F2 | 	cmp	local05, #0 wz
275a0     00 FA 05 A6 |  if_e	mov	result1, #0
275a4     8C 00 90 AD |  if_e	jmp	#LR__3457
275a8     0C 27 5A F2 | 	cmps	local01, arg04 wcz
275ac     0C 27 02 16 |  if_a	mov	local01, arg04
275b0     01 26 56 F2 | 	cmps	local01, #1 wc
275b4     01 26 06 C6 |  if_b	mov	local01, #1
275b8     15 31 C2 FA | 	rdbyte	local06, local03
275bc     01 2E 0E F2 | 	cmp	local05, #1 wz
275c0     18 00 90 5D |  if_ne	jmp	#LR__3454
275c4     14 13 02 F6 | 	mov	arg01, local02
275c8     18 15 02 F6 | 	mov	arg02, local06
275cc     13 17 02 F6 | 	mov	arg03, local01
275d0     01 18 06 F6 | 	mov	arg04, #1
275d4     14 36 B0 FD | 	call	#__system____ScanForChar
275d8     58 00 90 FD | 	jmp	#LR__3457
275dc                 | LR__3454
275dc     17 33 02 F6 | 	mov	local07, local05
275e0     01 32 86 F1 | 	sub	local07, #1
275e4                 | LR__3455
275e4     14 13 02 F6 | 	mov	arg01, local02
275e8     18 15 02 F6 | 	mov	arg02, local06
275ec     19 17 02 F6 | 	mov	arg03, local07
275f0     01 18 06 F6 | 	mov	arg04, #1
275f4     F4 35 B0 FD | 	call	#__system____ScanForChar
275f8     FD 32 0A F6 | 	mov	local07, result1 wz
275fc     30 00 90 AD |  if_e	jmp	#LR__3456
27600     17 17 02 F6 | 	mov	arg03, local05
27604     14 13 02 F6 | 	mov	arg01, local02
27608     19 15 02 F6 | 	mov	arg02, local07
2760c     F8 F9 BF FD | 	call	#__system__Mid_S
27610     FD 12 02 F6 | 	mov	arg01, result1
27614     15 15 02 F6 | 	mov	arg02, local03
27618     80 D8 BF FD | 	call	#__system___string_cmp
2761c     00 FA 0D F2 | 	cmp	result1, #0 wz
27620     19 FB 01 A6 |  if_e	mov	result1, local07
27624     0C 00 90 AD |  if_e	jmp	#LR__3457
27628     17 33 82 F1 | 	sub	local07, local05
2762c     B4 FF 9F FD | 	jmp	#LR__3455
27630                 | LR__3456
27630     00 FA 05 F6 | 	mov	result1, #0
27634                 | LR__3457
27634     A7 F0 03 F6 | 	mov	ptra, fp
27638     B2 00 A0 FD | 	call	#popregs_
2763c                 | __system__InstrRev_ret
2763c     2D 00 64 FD | 	ret
27640                 | 
27640                 | __system___remove
27640     06 4A 05 F6 | 	mov	COUNT_, #6
27644     A8 00 A0 FD | 	call	#pushregs_
27648     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2764c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
27650     09 15 02 F6 | 	mov	arg02, arg01
27654     13 13 02 F6 | 	mov	arg01, local01
27658     00 16 06 F6 | 	mov	arg03, #0
2765c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
27660     A8 DF BF FD | 	call	#__system____getvfsforfile
27664     FD 28 0A F6 | 	mov	local02, result1 wz
27668     10 00 90 AD |  if_e	jmp	#LR__3460
2766c     20 28 06 F1 | 	add	local02, #32
27670     14 13 0A FB | 	rdlong	arg01, local02 wz
27674     20 28 86 F1 | 	sub	local02, #32
27678     14 00 90 5D |  if_ne	jmp	#LR__3461
2767c                 | LR__3460
2767c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27680     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
27684     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27688     01 FA 65 F6 | 	neg	result1, #1
2768c     A8 00 90 FD | 	jmp	#LR__3464
27690                 | LR__3461
27690     40 28 06 F1 | 	add	local02, #64
27694     14 2B 02 FB | 	rdlong	local03, local02
27698     15 2D 02 F6 | 	mov	local04, local03
2769c     40 28 86 F1 | 	sub	local02, #64
276a0     13 2C 46 F7 | 	zerox	local04, #19
276a4     14 2A 46 F0 | 	shr	local03, #20
276a8     02 2A 66 F0 | 	shl	local03, #2
276ac     ED 2A 02 F1 | 	add	local03, __methods__
276b0     15 2B 02 FB | 	rdlong	local03, local03
276b4     13 13 02 F6 | 	mov	arg01, local01
276b8     F2 2E 02 F6 | 	mov	local05, objptr
276bc     16 E5 01 F6 | 	mov	objptr, local04
276c0     2D 2A 62 FD | 	call	local03
276c4     17 E5 01 F6 | 	mov	objptr, local05
276c8     FD 30 02 F6 | 	mov	local06, result1
276cc     FF FF 7F FF 
276d0     F2 31 0E F2 | 	cmp	local06, ##-14 wz
276d4     38 00 90 5D |  if_ne	jmp	#LR__3462
276d8     3C 28 06 F1 | 	add	local02, #60
276dc     14 31 02 FB | 	rdlong	local06, local02
276e0     18 2B 02 F6 | 	mov	local03, local06
276e4     13 30 46 F7 | 	zerox	local06, #19
276e8     14 2A 46 F0 | 	shr	local03, #20
276ec     02 2A 66 F0 | 	shl	local03, #2
276f0     ED 2A 02 F1 | 	add	local03, __methods__
276f4     15 2B 02 FB | 	rdlong	local03, local03
276f8     13 13 02 F6 | 	mov	arg01, local01
276fc     F2 2E 02 F6 | 	mov	local05, objptr
27700     18 E5 01 F6 | 	mov	objptr, local06
27704     2D 2A 62 FD | 	call	local03
27708     17 E5 01 F6 | 	mov	objptr, local05
2770c     FD 30 02 F6 | 	mov	local06, result1
27710                 | LR__3462
27710     00 30 0E F2 | 	cmp	local06, #0 wz
27714     1C 00 90 AD |  if_e	jmp	#LR__3463
27718     18 13 6A F6 | 	neg	arg01, local06 wz
2771c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27720     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27724     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27728     01 FA 65 56 |  if_ne	neg	result1, #1
2772c     00 FA 05 A6 |  if_e	mov	result1, #0
27730     04 00 90 FD | 	jmp	#LR__3464
27734                 | LR__3463
27734     00 FA 05 F6 | 	mov	result1, #0
27738                 | LR__3464
27738     A7 F0 03 F6 | 	mov	ptra, fp
2773c     B2 00 A0 FD | 	call	#popregs_
27740                 | __system___remove_ret
27740     2D 00 64 FD | 	ret
27744                 | 
27744                 | __system___mkdir
27744     05 4A 05 F6 | 	mov	COUNT_, #5
27748     A8 00 A0 FD | 	call	#pushregs_
2774c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27750     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
27754     09 15 02 F6 | 	mov	arg02, arg01
27758     13 13 02 F6 | 	mov	arg01, local01
2775c     00 16 06 F6 | 	mov	arg03, #0
27760     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
27764     A4 DE BF FD | 	call	#__system____getvfsforfile
27768     FD 28 0A F6 | 	mov	local02, result1 wz
2776c     10 00 90 AD |  if_e	jmp	#LR__3470
27770     20 28 06 F1 | 	add	local02, #32
27774     14 15 0A FB | 	rdlong	arg02, local02 wz
27778     20 28 86 F1 | 	sub	local02, #32
2777c     14 00 90 5D |  if_ne	jmp	#LR__3471
27780                 | LR__3470
27780     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27784     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
27788     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2778c     01 FA 65 F6 | 	neg	result1, #1
27790     60 00 90 FD | 	jmp	#LR__3473
27794                 | LR__3471
27794     38 28 06 F1 | 	add	local02, #56
27798     14 2B 02 FB | 	rdlong	local03, local02
2779c     15 2D 02 F6 | 	mov	local04, local03
277a0     13 2A 46 F7 | 	zerox	local03, #19
277a4     14 2C 46 F0 | 	shr	local04, #20
277a8     02 2C 66 F0 | 	shl	local04, #2
277ac     ED 2C 02 F1 | 	add	local04, __methods__
277b0     16 2D 02 FB | 	rdlong	local04, local04
277b4     13 13 02 F6 | 	mov	arg01, local01
277b8     FF 15 06 F6 | 	mov	arg02, #511
277bc     F2 2E 02 F6 | 	mov	local05, objptr
277c0     15 E5 01 F6 | 	mov	objptr, local03
277c4     2D 2C 62 FD | 	call	local04
277c8     17 E5 01 F6 | 	mov	objptr, local05
277cc     FD 12 0A F6 | 	mov	arg01, result1 wz
277d0     1C 00 90 AD |  if_e	jmp	#LR__3472
277d4     09 13 6A F6 | 	neg	arg01, arg01 wz
277d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
277dc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
277e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
277e4     01 FA 65 56 |  if_ne	neg	result1, #1
277e8     00 FA 05 A6 |  if_e	mov	result1, #0
277ec     04 00 90 FD | 	jmp	#LR__3473
277f0                 | LR__3472
277f0     00 FA 05 F6 | 	mov	result1, #0
277f4                 | LR__3473
277f4     A7 F0 03 F6 | 	mov	ptra, fp
277f8     B2 00 A0 FD | 	call	#popregs_
277fc                 | __system___mkdir_ret
277fc     2D 00 64 FD | 	ret
27800                 | 
27800                 | __system___strerror
27800     00 12 56 F2 | 	cmps	arg01, #0 wc
27804     08 00 90 CD |  if_b	jmp	#LR__3480
27808     1A 12 56 F2 | 	cmps	arg01, #26 wc
2780c     04 00 90 CD |  if_b	jmp	#LR__3481
27810                 | LR__3480
27810     19 12 06 F6 | 	mov	arg01, #25
27814                 | LR__3481
27814     02 12 66 F0 | 	shl	arg01, #2
27818     01 00 00 FF 
2781c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
27820     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27824     09 FB 01 FB | 	rdlong	result1, arg01
27828     01 00 00 FF 
2782c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
27830                 | __system___strerror_ret
27830     2D 00 64 FD | 	ret
27834                 | 
27834                 | __system___int64_shl
27834     20 16 CE F7 | 	test	arg03, #32 wz
27838     09 15 02 56 |  if_ne	mov	arg02, arg01
2783c     00 12 06 56 |  if_ne	mov	arg01, #0
27840     1F 16 CE F7 | 	test	arg03, #31 wz
27844     18 00 90 AD |  if_e	jmp	#LR__3490
27848     0B 15 62 F0 | 	shl	arg02, arg03
2784c     09 FB 01 F6 | 	mov	result1, arg01
27850     0B FD 61 F6 | 	neg	result2, arg03
27854     FE FA 41 F0 | 	shr	result1, result2
27858     FD 14 42 F5 | 	or	arg02, result1
2785c     0B 13 62 F0 | 	shl	arg01, arg03
27860                 | LR__3490
27860     0A FD 01 F6 | 	mov	result2, arg02
27864     09 FB 01 F6 | 	mov	result1, arg01
27868                 | __system___int64_shl_ret
27868     2D 00 64 FD | 	ret
2786c                 | 
2786c                 | __system___usepins
2786c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
27870     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
27874     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
27878     00 13 CA F7 | 	test	arg01, _var01 wz
2787c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
27880     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
27884     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
27888     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2788c     00 FA 05 56 |  if_ne	mov	result1, #0
27890     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
27894     14 E6 05 F1 | 	add	ptr___system__dat__, #20
27898     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2789c     09 03 42 F5 | 	or	_var02, arg01
278a0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
278a4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
278a8     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
278ac     0A 03 42 F5 | 	or	_var02, arg02
278b0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
278b4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
278b8     01 FA 65 F6 | 	neg	result1, #1
278bc                 | __system___usepins_ret
278bc     2D 00 64 FD | 	ret
278c0                 | 
278c0                 | __system___freepins
278c0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
278c4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
278c8     09 01 22 F5 | 	andn	_var01, arg01
278cc     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
278d0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
278d4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
278d8     0A 01 22 F5 | 	andn	_var01, arg02
278dc     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
278e0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
278e4                 | __system___freepins_ret
278e4     2D 00 64 FD | 	ret
278e8                 | 
278e8                 | __system___float_fromuns
278e8     09 17 0A F6 | 	mov	arg03, arg01 wz
278ec     0B FB 01 A6 |  if_e	mov	result1, arg03
278f0     24 00 90 AD |  if_e	jmp	#LR__3500
278f4     0B 15 92 F7 | 	encod	arg02, arg03 wc
278f8     01 14 06 C1 |  if_b	add	arg02, #1
278fc     01 14 86 F1 | 	sub	arg02, #1
27900     1F 12 06 F6 | 	mov	arg01, #31
27904     0A 13 82 F1 | 	sub	arg01, arg02
27908     09 17 62 F0 | 	shl	arg03, arg01
2790c     02 16 46 F0 | 	shr	arg03, #2
27910     00 12 06 F6 | 	mov	arg01, #0
27914     4C 09 B0 FD | 	call	#__system___float_Pack
27918                 | LR__3500
27918                 | __system___float_fromuns_ret
27918     2D 00 64 FD | 	ret
2791c                 | 
2791c                 | __system___float_add
2791c     0F 4A 05 F6 | 	mov	COUNT_, #15
27920     A8 00 A0 FD | 	call	#pushregs_
27924     09 27 02 F6 | 	mov	local01, arg01
27928     0A 29 02 F6 | 	mov	local02, arg02
2792c     00 2A 06 F6 | 	mov	local03, #0
27930     13 2D 02 F6 | 	mov	local04, local01
27934     16 2F 02 F6 | 	mov	local05, local04
27938     16 2E 46 F7 | 	zerox	local05, #22
2793c     16 31 02 F6 | 	mov	local06, local04
27940     01 30 66 F0 | 	shl	local06, #1
27944     18 30 46 F0 | 	shr	local06, #24
27948     1F 2C 46 F0 | 	shr	local04, #31
2794c     14 13 02 F6 | 	mov	arg01, local02
27950     09 FB 01 F6 | 	mov	result1, arg01
27954     FD 32 02 F6 | 	mov	local07, result1
27958     19 35 02 F6 | 	mov	local08, local07
2795c     16 34 46 F7 | 	zerox	local08, #22
27960     19 37 02 F6 | 	mov	local09, local07
27964     01 36 66 F0 | 	shl	local09, #1
27968     18 36 46 F0 | 	shr	local09, #24
2796c     1B 39 02 F6 | 	mov	local10, local09
27970     1F 32 46 F0 | 	shr	local07, #31
27974     00 3A 06 F6 | 	mov	local11, #0
27978     00 3C 06 F6 | 	mov	local12, #0
2797c     1C 31 12 F2 | 	cmp	local06, local10 wc
27980     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
27984     2C 00 90 1D |  if_a	jmp	#LR__3510
27988     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
2798c     24 00 90 3D |  if_ae	jmp	#LR__3510
27990     17 3F 02 F6 | 	mov	local13, local05
27994     1A 2F 02 F6 | 	mov	local05, local08
27998     1F 35 02 F6 | 	mov	local08, local13
2799c     18 3F 02 F6 | 	mov	local13, local06
279a0     1C 31 02 F6 | 	mov	local06, local10
279a4     1F 39 02 F6 | 	mov	local10, local13
279a8     16 3F 02 F6 | 	mov	local13, local04
279ac     19 2D 02 F6 | 	mov	local04, local07
279b0     1F 33 02 F6 | 	mov	local07, local13
279b4                 | LR__3510
279b4     FF 30 0E F2 | 	cmp	local06, #255 wz
279b8     70 01 90 AD |  if_e	jmp	#LR__3525
279bc     00 30 0E F2 | 	cmp	local06, #0 wz
279c0     AC 01 90 AD |  if_e	jmp	#LR__3527
279c4     17 2E 26 F4 | 	bith	local05, #23
279c8                 | LR__3511
279c8     00 38 0E F2 | 	cmp	local10, #0 wz
279cc     F0 01 90 AD |  if_e	jmp	#LR__3531
279d0     17 34 26 F4 | 	bith	local08, #23
279d4                 | LR__3512
279d4     7F 30 86 F1 | 	sub	local06, #127
279d8     7F 38 86 F1 | 	sub	local10, #127
279dc     18 41 02 F6 | 	mov	local14, local06
279e0     1C 41 82 F1 | 	sub	local14, local10
279e4     97 14 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
279e8                 | LR__3513
279e8     20 40 56 F2 | 	cmps	local14, #32 wc
279ec     20 00 90 CD |  if_b	jmp	#LR__3515
279f0     1A 37 02 F6 | 	mov	local09, local08
279f4     00 3A 0E F2 | 	cmp	local11, #0 wz
279f8     6F 3A 62 FD | 	wrnz	local11
279fc     1D 37 42 F5 | 	or	local09, local11
27a00     1B 3B 02 F6 | 	mov	local11, local09
27a04     00 34 06 F6 | 	mov	local08, #0
27a08     20 40 86 F1 | 	sub	local14, #32
27a0c     D8 FF 9F FD | 	jmp	#LR__3513
27a10                 | LR__3514
27a10                 | LR__3515
27a10     00 40 0E F2 | 	cmp	local14, #0 wz
27a14     38 00 90 AD |  if_e	jmp	#LR__3516
27a18     1A 3F 02 F6 | 	mov	local13, local08
27a1c     20 38 06 F6 | 	mov	local10, #32
27a20     20 39 82 F1 | 	sub	local10, local14
27a24     1C 3F 62 F0 | 	shl	local13, local10
27a28     1D 39 02 F6 | 	mov	local10, local11
27a2c     20 36 06 F6 | 	mov	local09, #32
27a30     20 37 82 F1 | 	sub	local09, local14
27a34     1B 39 6A F0 | 	shl	local10, local09 wz
27a38     20 3B 42 F0 | 	shr	local11, local14
27a3c     20 35 42 F0 | 	shr	local08, local14
27a40     1F 3B 42 F5 | 	or	local11, local13
27a44     00 42 06 F6 | 	mov	local15, #0
27a48     01 42 06 56 |  if_ne	mov	local15, #1
27a4c     21 3B 42 F5 | 	or	local11, local15
27a50                 | LR__3516
27a50     16 43 02 F6 | 	mov	local15, local04
27a54     19 43 62 F5 | 	xor	local15, local07
27a58     01 42 CE F7 | 	test	local15, #1 wz
27a5c     18 00 90 AD |  if_e	jmp	#LR__3517
27a60     1A 35 22 F6 | 	not	local08, local08
27a64     1D 3B 22 F6 | 	not	local11, local11
27a68     01 3A 0E F1 | 	add	local11, #1 wz
27a6c     00 42 06 F6 | 	mov	local15, #0
27a70     01 42 06 A6 |  if_e	mov	local15, #1
27a74     21 35 02 F1 | 	add	local08, local15
27a78                 | LR__3517
27a78     1D 3D 12 F1 | 	add	local12, local11 wc
27a7c     1A 2F 22 F1 | 	addx	local05, local08
27a80     00 2E 56 F2 | 	cmps	local05, #0 wc
27a84     1C 00 90 3D |  if_ae	jmp	#LR__3518
27a88     01 2C 66 F5 | 	xor	local04, #1
27a8c     17 2F 22 F6 | 	not	local05, local05
27a90     1E 3D 22 F6 | 	not	local12, local12
27a94     01 3C 0E F1 | 	add	local12, #1 wz
27a98     00 42 06 F6 | 	mov	local15, #0
27a9c     01 42 06 A6 |  if_e	mov	local15, #1
27aa0     21 2F 02 F1 | 	add	local05, local15
27aa4                 | LR__3518
27aa4     00 80 00 FF 
27aa8     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
27aac     28 00 90 CD |  if_b	jmp	#LR__3519
27ab0     01 30 06 F1 | 	add	local06, #1
27ab4     1E 41 02 F6 | 	mov	local14, local12
27ab8     01 40 06 F5 | 	and	local14, #1
27abc     01 3C 46 F0 | 	shr	local12, #1
27ac0     17 43 02 F6 | 	mov	local15, local05
27ac4     1F 42 66 F0 | 	shl	local15, #31
27ac8     21 3D 42 F5 | 	or	local12, local15
27acc     20 3D 42 F5 | 	or	local12, local14
27ad0     01 2E 46 F0 | 	shr	local05, #1
27ad4     3C 00 90 FD | 	jmp	#LR__3524
27ad8                 | LR__3519
27ad8     00 40 00 FF 
27adc     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
27ae0     30 00 90 3D |  if_ae	jmp	#LR__3523
27ae4     00 2E 0E F2 | 	cmp	local05, #0 wz
27ae8     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
27aec     08 2C 46 A5 |  if_e	or	local04, #8
27af0     01 2C 26 A5 |  if_e	andn	local04, #1
27af4     1C 00 90 AD |  if_e	jmp	#LR__3522
27af8                 | LR__3520
27af8     00 40 00 FF 
27afc     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
27b00     10 00 90 3D |  if_ae	jmp	#LR__3521
27b04     1E 3D 12 F1 | 	add	local12, local12 wc
27b08     17 2F 22 F1 | 	addx	local05, local05
27b0c     01 30 86 F1 | 	sub	local06, #1
27b10     E4 FF 9F FD | 	jmp	#LR__3520
27b14                 | LR__3521
27b14                 | LR__3522
27b14                 | LR__3523
27b14                 | LR__3524
27b14     17 13 02 F6 | 	mov	arg01, local05
27b18     1E 15 02 F6 | 	mov	arg02, local12
27b1c     18 17 02 F6 | 	mov	arg03, local06
27b20     16 19 02 F6 | 	mov	arg04, local04
27b24     08 35 B0 FD | 	call	#__system__pack_0667
27b28     DC 00 90 FD | 	jmp	#LR__3535
27b2c                 | LR__3525
27b2c     FF 38 0E F2 | 	cmp	local10, #255 wz
27b30     10 00 90 5D |  if_ne	jmp	#LR__3526
27b34     16 33 0A F2 | 	cmp	local07, local04 wz
27b38     00 F8 3F 5F 
27b3c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
27b40     C4 00 90 5D |  if_ne	jmp	#LR__3535
27b44                 | LR__3526
27b44     00 2E 0E F2 | 	cmp	local05, #0 wz
27b48     00 F8 3F 5F 
27b4c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
27b50     B4 00 90 5D |  if_ne	jmp	#LR__3535
27b54     1E 15 02 F6 | 	mov	arg02, local12
27b58     18 17 02 F6 | 	mov	arg03, local06
27b5c     16 19 02 F6 | 	mov	arg04, local04
27b60     02 18 46 F5 | 	or	arg04, #2
27b64     17 13 02 F6 | 	mov	arg01, local05
27b68     C4 34 B0 FD | 	call	#__system__pack_0667
27b6c     98 00 90 FD | 	jmp	#LR__3535
27b70                 | LR__3527
27b70     00 2E 0E F2 | 	cmp	local05, #0 wz
27b74     28 00 90 AD |  if_e	jmp	#LR__3530
27b78     01 2E 66 F0 | 	shl	local05, #1
27b7c     97 0E 48 FB | 	callpa	#(@LR__3529-@LR__3528)>>2,fcache_load_ptr_
27b80                 | LR__3528
27b80     00 40 00 FF 
27b84     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
27b88     18 43 02 C6 |  if_b	mov	local15, local06
27b8c     01 42 86 C1 |  if_b	sub	local15, #1
27b90     21 31 02 C6 |  if_b	mov	local06, local15
27b94     01 2E 66 C0 |  if_b	shl	local05, #1
27b98     E4 FF 9F CD |  if_b	jmp	#LR__3528
27b9c                 | LR__3529
27b9c     28 FE 9F FD | 	jmp	#LR__3511
27ba0                 | LR__3530
27ba0     19 2D 02 F5 | 	and	local04, local07
27ba4     16 19 02 F6 | 	mov	arg04, local04
27ba8     08 18 46 F5 | 	or	arg04, #8
27bac     00 12 06 F6 | 	mov	arg01, #0
27bb0     00 14 06 F6 | 	mov	arg02, #0
27bb4     00 16 06 F6 | 	mov	arg03, #0
27bb8     74 34 B0 FD | 	call	#__system__pack_0667
27bbc     48 00 90 FD | 	jmp	#LR__3535
27bc0                 | LR__3531
27bc0     00 34 0E F2 | 	cmp	local08, #0 wz
27bc4     28 00 90 AD |  if_e	jmp	#LR__3534
27bc8     01 34 66 F0 | 	shl	local08, #1
27bcc     97 0E 48 FB | 	callpa	#(@LR__3533-@LR__3532)>>2,fcache_load_ptr_
27bd0                 | LR__3532
27bd0     00 40 00 FF 
27bd4     00 34 16 F2 | 	cmp	local08, ##8388608 wc
27bd8     1C 43 02 C6 |  if_b	mov	local15, local10
27bdc     01 42 86 C1 |  if_b	sub	local15, #1
27be0     21 39 02 C6 |  if_b	mov	local10, local15
27be4     01 34 66 C0 |  if_b	shl	local08, #1
27be8     E4 FF 9F CD |  if_b	jmp	#LR__3532
27bec                 | LR__3533
27bec     E4 FD 9F FD | 	jmp	#LR__3512
27bf0                 | LR__3534
27bf0     7F 30 86 F1 | 	sub	local06, #127
27bf4     17 13 02 F6 | 	mov	arg01, local05
27bf8     1E 15 02 F6 | 	mov	arg02, local12
27bfc     18 17 02 F6 | 	mov	arg03, local06
27c00     16 19 02 F6 | 	mov	arg04, local04
27c04     28 34 B0 FD | 	call	#__system__pack_0667
27c08                 | LR__3535
27c08     A7 F0 03 F6 | 	mov	ptra, fp
27c0c     B2 00 A0 FD | 	call	#popregs_
27c10                 | __system___float_add_ret
27c10     2D 00 64 FD | 	ret
27c14                 | 
27c14                 | __system___float_sqrt
27c14     04 4A 05 F6 | 	mov	COUNT_, #4
27c18     A8 00 A0 FD | 	call	#pushregs_
27c1c     09 27 02 F6 | 	mov	local01, arg01
27c20     09 FB 01 F6 | 	mov	result1, arg01
27c24     FD 28 02 F6 | 	mov	local02, result1
27c28     14 2B 02 F6 | 	mov	local03, local02
27c2c     16 2A 46 F7 | 	zerox	local03, #22
27c30     14 2D 02 F6 | 	mov	local04, local02
27c34     01 2C 66 F0 | 	shl	local04, #1
27c38     18 2C 4E F0 | 	shr	local04, #24 wz
27c3c     1F 28 46 F0 | 	shr	local02, #31
27c40     70 00 90 AD |  if_e	jmp	#LR__3541
27c44     17 2A 26 F4 | 	bith	local03, #23
27c48                 | LR__3540
27c48     00 28 0E F2 | 	cmp	local02, #0 wz
27c4c     00 F8 3F 5F 
27c50     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
27c54     88 00 90 5D |  if_ne	jmp	#LR__3544
27c58     FF 2C 0E F2 | 	cmp	local04, #255 wz
27c5c     13 FB 01 A6 |  if_e	mov	result1, local01
27c60     7C 00 90 AD |  if_e	jmp	#LR__3544
27c64     7F 2C 86 F1 | 	sub	local04, #127
27c68     01 2C CE F7 | 	test	local04, #1 wz
27c6c     01 2A 66 50 |  if_ne	shl	local03, #1
27c70     05 2A 66 F0 | 	shl	local03, #5
27c74     15 01 38 FD | 	qsqrt	#0, local03
27c78     01 2C 86 51 |  if_ne	sub	local04, #1
27c7c     16 2D 52 F6 | 	abs	local04, local04 wc
27c80     01 2C 46 F0 | 	shr	local04, #1
27c84     16 17 82 F6 | 	negc	arg03, local04
27c88     14 19 02 F6 | 	mov	arg04, local02
27c8c     18 12 62 FD | 	getqx	arg01
27c90     09 15 02 F6 | 	mov	arg02, arg01
27c94     19 14 66 F0 | 	shl	arg02, #25
27c98     07 12 46 F0 | 	shr	arg01, #7
27c9c     00 80 00 FF 
27ca0     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
27ca4     01 16 06 31 |  if_ae	add	arg03, #1
27ca8     01 12 46 30 |  if_ae	shr	arg01, #1
27cac     80 33 B0 FD | 	call	#__system__pack_0667
27cb0     2C 00 90 FD | 	jmp	#LR__3544
27cb4                 | LR__3541
27cb4     00 2A 0E F2 | 	cmp	local03, #0 wz
27cb8     13 FB 01 A6 |  if_e	mov	result1, local01
27cbc     20 00 90 AD |  if_e	jmp	#LR__3544
27cc0     01 2A 66 F0 | 	shl	local03, #1
27cc4     97 0A 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
27cc8                 | LR__3542
27cc8     00 40 00 FF 
27ccc     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
27cd0     01 2C 86 C1 |  if_b	sub	local04, #1
27cd4     01 2A 66 C0 |  if_b	shl	local03, #1
27cd8     EC FF 9F CD |  if_b	jmp	#LR__3542
27cdc                 | LR__3543
27cdc     68 FF 9F FD | 	jmp	#LR__3540
27ce0                 | LR__3544
27ce0     A7 F0 03 F6 | 	mov	ptra, fp
27ce4     B2 00 A0 FD | 	call	#popregs_
27ce8                 | __system___float_sqrt_ret
27ce8     2D 00 64 FD | 	ret
27cec                 | 
27cec                 | __system___float_mul
27cec     0B 4A 05 F6 | 	mov	COUNT_, #11
27cf0     A8 00 A0 FD | 	call	#pushregs_
27cf4     09 27 02 F6 | 	mov	local01, arg01
27cf8     0A 29 02 F6 | 	mov	local02, arg02
27cfc     13 2B 02 F6 | 	mov	local03, local01
27d00     15 2D 02 F6 | 	mov	local04, local03
27d04     16 2C 46 F7 | 	zerox	local04, #22
27d08     15 2F 02 F6 | 	mov	local05, local03
27d0c     01 2E 66 F0 | 	shl	local05, #1
27d10     18 2E 46 F0 | 	shr	local05, #24
27d14     1F 2A 46 F0 | 	shr	local03, #31
27d18     14 FB 01 F6 | 	mov	result1, local02
27d1c     FD 30 02 F6 | 	mov	local06, result1
27d20     18 33 02 F6 | 	mov	local07, local06
27d24     16 32 46 F7 | 	zerox	local07, #22
27d28     18 35 02 F6 | 	mov	local08, local06
27d2c     01 34 66 F0 | 	shl	local08, #1
27d30     18 34 46 F0 | 	shr	local08, #24
27d34     1F 30 46 F0 | 	shr	local06, #31
27d38     18 2B 62 F5 | 	xor	local03, local06
27d3c     FF 2E 0E F2 | 	cmp	local05, #255 wz
27d40     90 00 90 AD |  if_e	jmp	#LR__3553
27d44     FF 34 0E F2 | 	cmp	local08, #255 wz
27d48     D8 00 90 AD |  if_e	jmp	#LR__3555
27d4c     00 2E 0E F2 | 	cmp	local05, #0 wz
27d50     0C 01 90 AD |  if_e	jmp	#LR__3556
27d54     17 2C 26 F4 | 	bith	local04, #23
27d58                 | LR__3550
27d58     00 34 0E F2 | 	cmp	local08, #0 wz
27d5c     44 01 90 AD |  if_e	jmp	#LR__3560
27d60     17 32 26 F4 | 	bith	local07, #23
27d64                 | LR__3551
27d64     16 29 02 F6 | 	mov	local02, local04
27d68     04 28 66 F0 | 	shl	local02, #4
27d6c     19 31 02 F6 | 	mov	local06, local07
27d70     05 30 66 F0 | 	shl	local06, #5
27d74     18 29 02 FD | 	qmul	local02, local06
27d78     1A 2F 02 F1 | 	add	local05, local08
27d7c     FE 2E 86 F1 | 	sub	local05, #254
27d80     17 37 02 F6 | 	mov	local09, local05
27d84     04 2C 66 F0 | 	shl	local04, #4
27d88     05 32 66 F0 | 	shl	local07, #5
27d8c     18 38 62 FD | 	getqx	local10
27d90     19 2D 02 FD | 	qmul	local04, local07
27d94     19 3A 62 FD | 	getqy	local11
27d98     00 80 00 FF 
27d9c     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
27da0     18 00 90 CD |  if_b	jmp	#LR__3552
27da4     01 36 06 F1 | 	add	local09, #1
27da8     01 38 46 F0 | 	shr	local10, #1
27dac     1D 35 02 F6 | 	mov	local08, local11
27db0     1F 34 66 F0 | 	shl	local08, #31
27db4     1A 39 42 F5 | 	or	local10, local08
27db8     01 3A 46 F0 | 	shr	local11, #1
27dbc                 | LR__3552
27dbc     1D 13 02 F6 | 	mov	arg01, local11
27dc0     1C 15 02 F6 | 	mov	arg02, local10
27dc4     1B 17 02 F6 | 	mov	arg03, local09
27dc8     15 19 02 F6 | 	mov	arg04, local03
27dcc     60 32 B0 FD | 	call	#__system__pack_0667
27dd0     10 01 90 FD | 	jmp	#LR__3564
27dd4                 | LR__3553
27dd4     00 2C 0E F2 | 	cmp	local04, #0 wz
27dd8     13 FB 01 56 |  if_ne	mov	result1, local01
27ddc     04 01 90 5D |  if_ne	jmp	#LR__3564
27de0     FF 34 56 F2 | 	cmps	local08, #255 wc
27de4     00 34 0E C2 |  if_b	cmp	local08, #0 wz
27de8     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
27dec     18 00 90 4D |  if_c_and_nz	jmp	#LR__3554
27df0     00 F8 3F CF 
27df4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
27df8     E8 00 90 CD |  if_b	jmp	#LR__3564
27dfc     00 32 0E F2 | 	cmp	local07, #0 wz
27e00     14 FB 01 56 |  if_ne	mov	result1, local02
27e04     DC 00 90 5D |  if_ne	jmp	#LR__3564
27e08                 | LR__3554
27e08     02 2A 46 F5 | 	or	local03, #2
27e0c     00 12 06 F6 | 	mov	arg01, #0
27e10     00 14 06 F6 | 	mov	arg02, #0
27e14     17 17 02 F6 | 	mov	arg03, local05
27e18     15 19 02 F6 | 	mov	arg04, local03
27e1c     10 32 B0 FD | 	call	#__system__pack_0667
27e20     C0 00 90 FD | 	jmp	#LR__3564
27e24                 | LR__3555
27e24     00 2E 0E F2 | 	cmp	local05, #0 wz
27e28     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
27e2c     00 F8 3F AF 
27e30     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
27e34     AC 00 90 AD |  if_e	jmp	#LR__3564
27e38     00 32 0E F2 | 	cmp	local07, #0 wz
27e3c     14 FB 01 56 |  if_ne	mov	result1, local02
27e40     A0 00 90 5D |  if_ne	jmp	#LR__3564
27e44     1A 17 02 F6 | 	mov	arg03, local08
27e48     15 19 02 F6 | 	mov	arg04, local03
27e4c     02 18 46 F5 | 	or	arg04, #2
27e50     00 12 06 F6 | 	mov	arg01, #0
27e54     00 14 06 F6 | 	mov	arg02, #0
27e58     D4 31 B0 FD | 	call	#__system__pack_0667
27e5c     84 00 90 FD | 	jmp	#LR__3564
27e60                 | LR__3556
27e60     00 2C 0E F2 | 	cmp	local04, #0 wz
27e64     20 00 90 AD |  if_e	jmp	#LR__3559
27e68     01 2C 66 F0 | 	shl	local04, #1
27e6c     97 0A 48 FB | 	callpa	#(@LR__3558-@LR__3557)>>2,fcache_load_ptr_
27e70                 | LR__3557
27e70     00 40 00 FF 
27e74     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
27e78     01 2E 86 C1 |  if_b	sub	local05, #1
27e7c     01 2C 66 C0 |  if_b	shl	local04, #1
27e80     EC FF 9F CD |  if_b	jmp	#LR__3557
27e84                 | LR__3558
27e84     D0 FE 9F FD | 	jmp	#LR__3550
27e88                 | LR__3559
27e88     08 2A 46 F5 | 	or	local03, #8
27e8c     00 12 06 F6 | 	mov	arg01, #0
27e90     00 14 06 F6 | 	mov	arg02, #0
27e94     00 16 06 F6 | 	mov	arg03, #0
27e98     15 19 02 F6 | 	mov	arg04, local03
27e9c     90 31 B0 FD | 	call	#__system__pack_0667
27ea0     40 00 90 FD | 	jmp	#LR__3564
27ea4                 | LR__3560
27ea4     00 32 0E F2 | 	cmp	local07, #0 wz
27ea8     20 00 90 AD |  if_e	jmp	#LR__3563
27eac     01 32 66 F0 | 	shl	local07, #1
27eb0     97 0A 48 FB | 	callpa	#(@LR__3562-@LR__3561)>>2,fcache_load_ptr_
27eb4                 | LR__3561
27eb4     00 40 00 FF 
27eb8     00 32 16 F2 | 	cmp	local07, ##8388608 wc
27ebc     01 34 86 C1 |  if_b	sub	local08, #1
27ec0     01 32 66 C0 |  if_b	shl	local07, #1
27ec4     EC FF 9F CD |  if_b	jmp	#LR__3561
27ec8                 | LR__3562
27ec8     98 FE 9F FD | 	jmp	#LR__3551
27ecc                 | LR__3563
27ecc     08 2A 46 F5 | 	or	local03, #8
27ed0     00 12 06 F6 | 	mov	arg01, #0
27ed4     00 14 06 F6 | 	mov	arg02, #0
27ed8     00 16 06 F6 | 	mov	arg03, #0
27edc     15 19 02 F6 | 	mov	arg04, local03
27ee0     4C 31 B0 FD | 	call	#__system__pack_0667
27ee4                 | LR__3564
27ee4     A7 F0 03 F6 | 	mov	ptra, fp
27ee8     B2 00 A0 FD | 	call	#popregs_
27eec                 | __system___float_mul_ret
27eec     2D 00 64 FD | 	ret
27ef0                 | 
27ef0                 | __system___float_div
27ef0     0E 4A 05 F6 | 	mov	COUNT_, #14
27ef4     A8 00 A0 FD | 	call	#pushregs_
27ef8     09 2B 02 F6 | 	mov	local03, arg01
27efc     0A 2D 02 F6 | 	mov	local04, arg02
27f00     15 2F 02 F6 | 	mov	local05, local03
27f04     17 31 02 F6 | 	mov	local06, local05
27f08     16 30 46 F7 | 	zerox	local06, #22
27f0c     17 33 02 F6 | 	mov	local07, local05
27f10     01 32 66 F0 | 	shl	local07, #1
27f14     18 32 46 F0 | 	shr	local07, #24
27f18     1F 2E 46 F0 | 	shr	local05, #31
27f1c     16 FB 01 F6 | 	mov	result1, local04
27f20     FD 34 02 F6 | 	mov	local08, result1
27f24     1A 37 02 F6 | 	mov	local09, local08
27f28     16 36 46 F7 | 	zerox	local09, #22
27f2c     1A 39 02 F6 | 	mov	local10, local08
27f30     01 38 66 F0 | 	shl	local10, #1
27f34     18 38 46 F0 | 	shr	local10, #24
27f38     1F 34 46 F0 | 	shr	local08, #31
27f3c     1A 2F 62 F5 | 	xor	local05, local08
27f40     FF 32 0E F2 | 	cmp	local07, #255 wz
27f44     D4 00 90 AD |  if_e	jmp	#LR__3575
27f48     FF 38 0E F2 | 	cmp	local10, #255 wz
27f4c     04 01 90 AD |  if_e	jmp	#LR__3576
27f50     00 32 0E F2 | 	cmp	local07, #0 wz
27f54     24 01 90 AD |  if_e	jmp	#LR__3577
27f58     17 30 26 F4 | 	bith	local06, #23
27f5c                 | LR__3570
27f5c     00 38 0E F2 | 	cmp	local10, #0 wz
27f60     70 01 90 AD |  if_e	jmp	#LR__3581
27f64     17 36 26 F4 | 	bith	local09, #23
27f68                 | LR__3571
27f68     1C 33 82 F1 | 	sub	local07, local10
27f6c     19 3B 02 F6 | 	mov	local11, local07
27f70     18 13 02 F6 | 	mov	arg01, local06
27f74     02 12 46 F0 | 	shr	arg01, #2
27f78     1E 30 66 F0 | 	shl	local06, #30
27f7c     18 15 02 F6 | 	mov	arg02, local06
27f80     1B 17 02 F6 | 	mov	arg03, local09
27f84     28 12 62 FD | 	setq	arg01
27f88     0B 15 12 FD | 	qdiv	arg02, arg03
27f8c     00 3C 06 F6 | 	mov	local12, #0
27f90     18 26 62 FD | 	getqx	local01
27f94     19 FC 61 FD | 	getqy	result2
27f98     FE 28 02 F6 | 	mov	local02, result2
27f9c     13 3F 02 F6 | 	mov	local13, local01
27fa0     00 28 4E F2 | 	cmps	local02, #0 wz
27fa4     1F 41 02 F6 | 	mov	local14, local13
27fa8     19 40 66 F0 | 	shl	local14, #25
27fac     01 3C 06 56 |  if_ne	mov	local12, #1
27fb0     1E 41 42 F5 | 	or	local14, local12
27fb4     07 3E 46 F0 | 	shr	local13, #7
27fb8     00 80 00 FF 
27fbc     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
27fc0     1C 00 90 CD |  if_b	jmp	#LR__3572
27fc4     01 3A 06 F1 | 	add	local11, #1
27fc8     01 40 46 F0 | 	shr	local14, #1
27fcc     1F 3D 02 F6 | 	mov	local12, local13
27fd0     1F 3C 66 F0 | 	shl	local12, #31
27fd4     1E 41 42 F5 | 	or	local14, local12
27fd8     01 3E 46 F0 | 	shr	local13, #1
27fdc     24 00 90 FD | 	jmp	#LR__3574
27fe0                 | LR__3572
27fe0     00 40 00 FF 
27fe4     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
27fe8     18 00 90 3D |  if_ae	jmp	#LR__3573
27fec     01 3A 86 F1 | 	sub	local11, #1
27ff0     01 3E 66 F0 | 	shl	local13, #1
27ff4     20 3D 02 F6 | 	mov	local12, local14
27ff8     1F 3C 46 F0 | 	shr	local12, #31
27ffc     1E 3F 42 F5 | 	or	local13, local12
28000     01 40 66 F0 | 	shl	local14, #1
28004                 | LR__3573
28004                 | LR__3574
28004     1F 13 02 F6 | 	mov	arg01, local13
28008     20 15 02 F6 | 	mov	arg02, local14
2800c     1D 17 02 F6 | 	mov	arg03, local11
28010     17 19 02 F6 | 	mov	arg04, local05
28014     18 30 B0 FD | 	call	#__system__pack_0667
28018     F8 00 90 FD | 	jmp	#LR__3585
2801c                 | LR__3575
2801c     00 30 0E F2 | 	cmp	local06, #0 wz
28020     15 FB 01 56 |  if_ne	mov	result1, local03
28024     EC 00 90 5D |  if_ne	jmp	#LR__3585
28028     FF 38 0E F2 | 	cmp	local10, #255 wz
2802c     00 F8 3F AF 
28030     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28034     DC 00 90 AD |  if_e	jmp	#LR__3585
28038     02 2E 46 F5 | 	or	local05, #2
2803c     00 12 06 F6 | 	mov	arg01, #0
28040     00 14 06 F6 | 	mov	arg02, #0
28044     19 17 02 F6 | 	mov	arg03, local07
28048     17 19 02 F6 | 	mov	arg04, local05
2804c     E0 2F B0 FD | 	call	#__system__pack_0667
28050     C0 00 90 FD | 	jmp	#LR__3585
28054                 | LR__3576
28054     00 36 0E F2 | 	cmp	local09, #0 wz
28058     16 FB 01 56 |  if_ne	mov	result1, local04
2805c     B4 00 90 5D |  if_ne	jmp	#LR__3585
28060     17 19 02 F6 | 	mov	arg04, local05
28064     08 18 46 F5 | 	or	arg04, #8
28068     00 12 06 F6 | 	mov	arg01, #0
2806c     00 14 06 F6 | 	mov	arg02, #0
28070     00 16 06 F6 | 	mov	arg03, #0
28074     B8 2F B0 FD | 	call	#__system__pack_0667
28078     98 00 90 FD | 	jmp	#LR__3585
2807c                 | LR__3577
2807c     00 30 0E F2 | 	cmp	local06, #0 wz
28080     20 00 90 AD |  if_e	jmp	#LR__3580
28084     01 30 66 F0 | 	shl	local06, #1
28088     97 0A 48 FB | 	callpa	#(@LR__3579-@LR__3578)>>2,fcache_load_ptr_
2808c                 | LR__3578
2808c     00 40 00 FF 
28090     00 30 16 F2 | 	cmp	local06, ##8388608 wc
28094     01 32 86 C1 |  if_b	sub	local07, #1
28098     01 30 66 C0 |  if_b	shl	local06, #1
2809c     EC FF 9F CD |  if_b	jmp	#LR__3578
280a0                 | LR__3579
280a0     B8 FE 9F FD | 	jmp	#LR__3570
280a4                 | LR__3580
280a4     00 38 0E F2 | 	cmp	local10, #0 wz
280a8     00 36 0E A2 |  if_e	cmp	local09, #0 wz
280ac     00 F8 3F AF 
280b0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
280b4     5C 00 90 AD |  if_e	jmp	#LR__3585
280b8     17 19 02 F6 | 	mov	arg04, local05
280bc     08 18 46 F5 | 	or	arg04, #8
280c0     00 12 06 F6 | 	mov	arg01, #0
280c4     00 14 06 F6 | 	mov	arg02, #0
280c8     00 16 06 F6 | 	mov	arg03, #0
280cc     60 2F B0 FD | 	call	#__system__pack_0667
280d0     40 00 90 FD | 	jmp	#LR__3585
280d4                 | LR__3581
280d4     00 36 0E F2 | 	cmp	local09, #0 wz
280d8     20 00 90 AD |  if_e	jmp	#LR__3584
280dc     01 36 66 F0 | 	shl	local09, #1
280e0     97 0A 48 FB | 	callpa	#(@LR__3583-@LR__3582)>>2,fcache_load_ptr_
280e4                 | LR__3582
280e4     00 40 00 FF 
280e8     00 36 16 F2 | 	cmp	local09, ##8388608 wc
280ec     01 38 86 C1 |  if_b	sub	local10, #1
280f0     01 36 66 C0 |  if_b	shl	local09, #1
280f4     EC FF 9F CD |  if_b	jmp	#LR__3582
280f8                 | LR__3583
280f8     6C FE 9F FD | 	jmp	#LR__3571
280fc                 | LR__3584
280fc     02 2E 46 F5 | 	or	local05, #2
28100     00 12 06 F6 | 	mov	arg01, #0
28104     00 14 06 F6 | 	mov	arg02, #0
28108     00 16 06 F6 | 	mov	arg03, #0
2810c     17 19 02 F6 | 	mov	arg04, local05
28110     1C 2F B0 FD | 	call	#__system__pack_0667
28114                 | LR__3585
28114     A7 F0 03 F6 | 	mov	ptra, fp
28118     B2 00 A0 FD | 	call	#popregs_
2811c                 | __system___float_div_ret
2811c     2D 00 64 FD | 	ret
28120                 | 
28120                 | __system___float_cmp
28120     00 C0 3F FF 
28124     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
28128     00 C0 3F CF 
2812c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
28130     0B FB 01 36 |  if_ae	mov	result1, arg03
28134     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
28138     00 C0 7F FF 
2813c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
28140     00 C0 7F CF 
28144     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
28148     0B FB 01 36 |  if_ae	mov	result1, arg03
2814c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
28150     00 12 56 F2 | 	cmps	arg01, #0 wc
28154     2C 00 90 3D |  if_ae	jmp	#LR__3590
28158     00 14 56 F2 | 	cmps	arg02, #0 wc
2815c     0A FB 01 C6 |  if_b	mov	result1, arg02
28160     09 FB 81 C1 |  if_b	sub	result1, arg01
28164     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
28168     00 14 0E F2 | 	cmp	arg02, #0 wz
2816c     00 00 40 AF 
28170     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
28174     00 FA 05 A6 |  if_e	mov	result1, #0
28178     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2817c     01 FA 65 F6 | 	neg	result1, #1
28180     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
28184                 | LR__3590
28184     00 14 56 F2 | 	cmps	arg02, #0 wc
28188     1C 00 90 3D |  if_ae	jmp	#LR__3591
2818c     00 12 0E F2 | 	cmp	arg01, #0 wz
28190     00 00 40 AF 
28194     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
28198     00 FA 05 A6 |  if_e	mov	result1, #0
2819c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
281a0     01 FA 05 F6 | 	mov	result1, #1
281a4     08 00 90 FD | 	jmp	#__system___float_cmp_ret
281a8                 | LR__3591
281a8     0A 13 82 F1 | 	sub	arg01, arg02
281ac     09 FB 01 F6 | 	mov	result1, arg01
281b0                 | __system___float_cmp_ret
281b0     2D 00 64 FD | 	ret
281b4                 | 
281b4                 | __system___float_tointeger
281b4     02 4A 05 F6 | 	mov	COUNT_, #2
281b8     A8 00 A0 FD | 	call	#pushregs_
281bc     50 00 B0 FD | 	call	#__system___float_Unpack
281c0     FF FF 7F FF 
281c4     FF FD 55 F2 | 	cmps	result2, ##-1 wc
281c8     34 00 90 CD |  if_b	jmp	#LR__3600
281cc     1F FC 55 F2 | 	cmps	result2, #31 wc
281d0     2C 00 90 3D |  if_ae	jmp	#LR__3600
281d4     02 FE 65 F0 | 	shl	result3, #2
281d8     1E 26 06 F6 | 	mov	local01, #30
281dc     FE 26 82 F1 | 	sub	local01, result2
281e0     13 FF 41 F0 | 	shr	result3, local01
281e4     FF 28 02 F6 | 	mov	local02, result3
281e8     0A 29 02 F1 | 	add	local02, arg02
281ec     01 28 46 F0 | 	shr	local02, #1
281f0     00 FA 0D F2 | 	cmp	result1, #0 wz
281f4     14 29 62 56 |  if_ne	neg	local02, local02
281f8     14 FB 01 F6 | 	mov	result1, local02
281fc     04 00 90 FD | 	jmp	#LR__3601
28200                 | LR__3600
28200     00 FA 05 F6 | 	mov	result1, #0
28204                 | LR__3601
28204     A7 F0 03 F6 | 	mov	ptra, fp
28208     B2 00 A0 FD | 	call	#popregs_
2820c                 | __system___float_tointeger_ret
2820c     2D 00 64 FD | 	ret
28210                 | 
28210                 | __system___float_Unpack
28210     09 01 02 F6 | 	mov	_var01, arg01
28214     1F 00 46 F0 | 	shr	_var01, #31
28218     09 03 02 F6 | 	mov	_var02, arg01
2821c     01 02 66 F0 | 	shl	_var02, #1
28220     18 02 4E F0 | 	shr	_var02, #24 wz
28224     17 13 06 F4 | 	bitl	arg01, #279
28228     06 12 66 50 |  if_ne	shl	arg01, #6
2822c     1D 12 26 54 |  if_ne	bith	arg01, #29
28230     1C 00 90 5D |  if_ne	jmp	#LR__3610
28234     09 05 92 F7 | 	encod	_var03, arg01 wc
28238     01 04 06 C1 |  if_b	add	_var03, #1
2823c     17 04 86 F1 | 	sub	_var03, #23
28240     02 03 02 F6 | 	mov	_var02, _var03
28244     07 FC 05 F6 | 	mov	result2, #7
28248     02 FD 81 F1 | 	sub	result2, _var03
2824c     FE 12 62 F0 | 	shl	arg01, result2
28250                 | LR__3610
28250     7F 02 86 F1 | 	sub	_var02, #127
28254     09 FF 01 F6 | 	mov	result3, arg01
28258     00 FB 01 F6 | 	mov	result1, _var01
2825c     01 FD 01 F6 | 	mov	result2, _var02
28260                 | __system___float_Unpack_ret
28260     2D 00 64 FD | 	ret
28264                 | 
28264                 | __system___float_Pack
28264     00 00 06 F6 | 	mov	_var01, #0
28268     00 16 0E F2 | 	cmp	arg03, #0 wz
2826c     8C 00 90 AD |  if_e	jmp	#LR__3621
28270     0B 03 92 F7 | 	encod	_var02, arg03 wc
28274     01 02 06 C1 |  if_b	add	_var02, #1
28278     21 00 06 F6 | 	mov	_var01, #33
2827c     01 01 82 F1 | 	sub	_var01, _var02
28280     00 17 62 F0 | 	shl	arg03, _var01
28284     03 02 06 F6 | 	mov	_var02, #3
28288     00 03 82 F1 | 	sub	_var02, _var01
2828c     01 15 02 F1 | 	add	arg02, _var02
28290     0A 05 02 F6 | 	mov	_var03, arg02
28294     00 17 06 F1 | 	add	arg03, #256
28298     0B 03 02 F6 | 	mov	_var02, arg03
2829c     FF 02 2E F5 | 	andn	_var02, #255 wz
282a0     01 04 06 A1 |  if_e	add	_var03, #1
282a4     7F 04 06 F1 | 	add	_var03, #127
282a8     FF FF 7F FF 
282ac     E9 05 46 F3 | 	fges	_var03, ##-23
282b0     FF 04 66 F3 | 	fles	_var03, #255
282b4     01 04 56 F2 | 	cmps	_var03, #1 wc
282b8     1C 00 90 3D |  if_ae	jmp	#LR__3620
282bc     01 16 46 F0 | 	shr	arg03, #1
282c0     1F 02 C6 F9 | 	decod	_var02, #31
282c4     0B 03 02 F1 | 	add	_var02, arg03
282c8     02 05 62 F6 | 	neg	_var03, _var03
282cc     02 03 42 F0 | 	shr	_var02, _var03
282d0     01 17 02 F6 | 	mov	arg03, _var02
282d4     00 04 06 F6 | 	mov	_var03, #0
282d8                 | LR__3620
282d8     09 FB 01 F6 | 	mov	result1, arg01
282dc     1F FA 65 F0 | 	shl	result1, #31
282e0     02 03 02 F6 | 	mov	_var02, _var03
282e4     17 02 66 F0 | 	shl	_var02, #23
282e8     01 FB 41 F5 | 	or	result1, _var02
282ec     0B 07 02 F6 | 	mov	_var04, arg03
282f0     09 06 46 F0 | 	shr	_var04, #9
282f4     03 FB 41 F5 | 	or	result1, _var04
282f8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
282fc                 | LR__3621
282fc     00 FB 01 F6 | 	mov	result1, _var01
28300                 | __system___float_Pack_ret
28300     2D 00 64 FD | 	ret
28304                 | 
28304                 | __system___basic_print_float
28304     05 4A 05 F6 | 	mov	COUNT_, #5
28308     A8 00 A0 FD | 	call	#pushregs_
2830c     09 27 02 F6 | 	mov	local01, arg01
28310     0A 29 02 F6 | 	mov	local02, arg02
28314     0B 2B 0A F6 | 	mov	local03, arg03 wz
28318     0C 2D 02 F6 | 	mov	local04, arg04
2831c     14 00 90 5D |  if_ne	jmp	#LR__3630
28320     23 2C 0E F2 | 	cmp	local04, #35 wz
28324     80 02 10 AF 
28328     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2832c     1D 2E C6 59 |  if_ne	decod	local05, #29
28330     17 2B 02 F6 | 	mov	local03, local05
28334                 | LR__3630
28334     13 13 02 F6 | 	mov	arg01, local01
28338     D8 27 B0 FD | 	call	#__system___gettxfunc
2833c     FD 2E 0A F6 | 	mov	local05, result1 wz
28340     00 FA 05 A6 |  if_e	mov	result1, #0
28344     17 13 02 56 |  if_ne	mov	arg01, local05
28348     15 15 02 56 |  if_ne	mov	arg02, local03
2834c     14 17 02 56 |  if_ne	mov	arg03, local02
28350     16 19 02 56 |  if_ne	mov	arg04, local04
28354     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
28358     A7 F0 03 F6 | 	mov	ptra, fp
2835c     B2 00 A0 FD | 	call	#popregs_
28360                 | __system___basic_print_float_ret
28360     2D 00 64 FD | 	ret
28364                 | 
28364                 | __system____builtin_atoi
28364     07 4A 05 F6 | 	mov	COUNT_, #7
28368     A8 00 A0 FD | 	call	#pushregs_
2836c                 | __system____builtin_atoi_enter
2836c     09 27 02 F6 | 	mov	local01, arg01
28370     0A 29 02 F6 | 	mov	local02, arg02
28374     00 2A 06 F6 | 	mov	local03, #0
28378     00 2C 06 F6 | 	mov	local04, #0
2837c     00 2E 06 F6 | 	mov	local05, #0
28380     97 1C 48 FB | 	callpa	#(@LR__3642-@LR__3640)>>2,fcache_load_ptr_
28384                 | LR__3640
28384     13 31 C2 FA | 	rdbyte	local06, local01
28388     20 30 0E F2 | 	cmp	local06, #32 wz
2838c     01 26 06 A1 |  if_e	add	local01, #1
28390     F0 FF 9F AD |  if_e	jmp	#LR__3640
28394     13 33 C2 FA | 	rdbyte	local07, local01
28398                 | LR__3641
28398     2D 32 0E F2 | 	cmp	local07, #45 wz
2839c     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
283a0     18 00 90 5D |  if_ne	jmp	#LR__3643
283a4     01 26 06 F1 | 	add	local01, #1
283a8     2D 32 0E F2 | 	cmp	local07, #45 wz
283ac     01 30 06 A6 |  if_e	mov	local06, #1
283b0     18 2F C2 A2 |  if_e	subr	local05, local06
283b4     13 33 C2 FA | 	rdbyte	local07, local01
283b8     DC FF 9F FD | 	jmp	#LR__3641
283bc                 | LR__3642
283bc                 | LR__3643
283bc     00 28 0E F2 | 	cmp	local02, #0 wz
283c0     1C 00 90 5D |  if_ne	jmp	#LR__3645
283c4     24 32 0E F2 | 	cmp	local07, #36 wz
283c8     10 28 06 A6 |  if_e	mov	local02, #16
283cc     01 26 06 A1 |  if_e	add	local01, #1
283d0     0C 00 90 AD |  if_e	jmp	#LR__3644
283d4     25 32 0E F2 | 	cmp	local07, #37 wz
283d8     02 28 06 A6 |  if_e	mov	local02, #2
283dc     01 26 06 A1 |  if_e	add	local01, #1
283e0                 | LR__3644
283e0                 | LR__3645
283e0     97 48 48 FB | 	callpa	#(@LR__3653-@LR__3646)>>2,fcache_load_ptr_
283e4                 | LR__3646
283e4                 | LR__3647
283e4     13 33 C2 FA | 	rdbyte	local07, local01
283e8     5F 32 0E F2 | 	cmp	local07, #95 wz
283ec     01 26 06 F1 | 	add	local01, #1
283f0     F0 FF 9F AD |  if_e	jmp	#LR__3647
283f4     30 32 0E F2 | 	cmp	local07, #48 wz
283f8     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
283fc     00 2C 06 A6 |  if_e	mov	local04, #0
28400     60 00 90 AD |  if_e	jmp	#LR__3652
28404     31 32 56 F2 | 	cmps	local07, #49 wc
28408     18 00 90 CD |  if_b	jmp	#LR__3648
2840c     3A 32 56 F2 | 	cmps	local07, #58 wc
28410     19 2D 02 C6 |  if_b	mov	local04, local07
28414     30 2C 86 C1 |  if_b	sub	local04, #48
28418     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2841c     0A 28 06 86 |  if_c_and_z	mov	local02, #10
28420     40 00 90 CD |  if_b	jmp	#LR__3651
28424                 | LR__3648
28424     0B 28 56 F2 | 	cmps	local02, #11 wc
28428     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2842c     14 00 90 CD |  if_b	jmp	#LR__3649
28430     67 32 56 F2 | 	cmps	local07, #103 wc
28434     61 32 86 C1 |  if_b	sub	local07, #97
28438     0A 2C 06 C6 |  if_b	mov	local04, #10
2843c     19 2D 02 C1 |  if_b	add	local04, local07
28440     20 00 90 CD |  if_b	jmp	#LR__3650
28444                 | LR__3649
28444     0B 28 56 F2 | 	cmps	local02, #11 wc
28448     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2844c     24 00 90 CD |  if_b	jmp	#LR__3654
28450     47 32 56 F2 | 	cmps	local07, #71 wc
28454     41 32 86 C1 |  if_b	sub	local07, #65
28458     0A 2C 06 C6 |  if_b	mov	local04, #10
2845c     19 2D 02 C1 |  if_b	add	local04, local07
28460     10 00 90 3D |  if_ae	jmp	#LR__3654
28464                 | LR__3650
28464                 | LR__3651
28464                 | LR__3652
28464     15 29 02 FD | 	qmul	local02, local03
28468     18 2A 62 FD | 	getqx	local03
2846c     16 2B 02 F1 | 	add	local03, local04
28470     70 FF 9F FD | 	jmp	#LR__3646
28474                 | LR__3653
28474                 | LR__3654
28474     00 28 0E F2 | 	cmp	local02, #0 wz
28478     64 00 90 5D |  if_ne	jmp	#LR__3660
2847c     78 32 0E F2 | 	cmp	local07, #120 wz
28480     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
28484     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
28488     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2848c     14 00 90 5D |  if_ne	jmp	#LR__3655
28490     13 13 02 F6 | 	mov	arg01, local01
28494     10 14 06 F6 | 	mov	arg02, #16
28498     C8 FE BF FD | 	call	#__system____builtin_atoi
2849c     FD 2A 02 F6 | 	mov	local03, result1
284a0     3C 00 90 FD | 	jmp	#LR__3659
284a4                 | LR__3655
284a4     62 32 0E F2 | 	cmp	local07, #98 wz
284a8     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
284ac     14 00 90 5D |  if_ne	jmp	#LR__3656
284b0     13 13 02 F6 | 	mov	arg01, local01
284b4     02 14 06 F6 | 	mov	arg02, #2
284b8     A8 FE BF FD | 	call	#__system____builtin_atoi
284bc     FD 2A 02 F6 | 	mov	local03, result1
284c0     1C 00 90 FD | 	jmp	#LR__3658
284c4                 | LR__3656
284c4     6F 32 0E F2 | 	cmp	local07, #111 wz
284c8     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
284cc     10 00 90 5D |  if_ne	jmp	#LR__3657
284d0     13 13 02 F6 | 	mov	arg01, local01
284d4     08 14 06 F6 | 	mov	arg02, #8
284d8     88 FE BF FD | 	call	#__system____builtin_atoi
284dc     FD 2A 02 F6 | 	mov	local03, result1
284e0                 | LR__3657
284e0                 | LR__3658
284e0                 | LR__3659
284e0                 | LR__3660
284e0     00 2E 0E F2 | 	cmp	local05, #0 wz
284e4     15 2B 62 56 |  if_ne	neg	local03, local03
284e8     15 FB 01 F6 | 	mov	result1, local03
284ec     A7 F0 03 F6 | 	mov	ptra, fp
284f0     B2 00 A0 FD | 	call	#popregs_
284f4                 | __system____builtin_atoi_ret
284f4     2D 00 64 FD | 	ret
284f8                 | 
284f8                 | __system____builtin_atof
284f8     07 4A 05 F6 | 	mov	COUNT_, #7
284fc     A8 00 A0 FD | 	call	#pushregs_
28500     09 27 02 F6 | 	mov	local01, arg01
28504     00 28 06 F6 | 	mov	local02, #0
28508     00 2A 06 F6 | 	mov	local03, #0
2850c     00 2C 06 F6 | 	mov	local04, #0
28510     00 2E 06 F6 | 	mov	local05, #0
28514     97 08 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
28518                 | LR__3670
28518     13 17 C2 FA | 	rdbyte	arg03, local01
2851c     20 16 0E F2 | 	cmp	arg03, #32 wz
28520     01 26 06 A1 |  if_e	add	local01, #1
28524     F0 FF 9F AD |  if_e	jmp	#LR__3670
28528                 | LR__3671
28528     13 31 C2 FA | 	rdbyte	local06, local01
2852c                 | LR__3672
2852c     2B 30 0E F2 | 	cmp	local06, #43 wz
28530     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
28534     14 00 90 5D |  if_ne	jmp	#LR__3673
28538     2D 30 0E F2 | 	cmp	local06, #45 wz
2853c     1F 2C E6 A4 |  if_e	bitnot	local04, #31
28540     01 26 06 F1 | 	add	local01, #1
28544     13 31 C2 FA | 	rdbyte	local06, local01
28548     E0 FF 9F FD | 	jmp	#LR__3672
2854c                 | LR__3673
2854c                 | LR__3674
2854c     97 08 48 FB | 	callpa	#(@LR__3676-@LR__3675)>>2,fcache_load_ptr_
28550                 | LR__3675
28550     13 31 C2 FA | 	rdbyte	local06, local01
28554     5F 30 0E F2 | 	cmp	local06, #95 wz
28558     01 26 06 F1 | 	add	local01, #1
2855c     F0 FF 9F AD |  if_e	jmp	#LR__3675
28560                 | LR__3676
28560     00 30 0E F2 | 	cmp	local06, #0 wz
28564     5C 00 90 AD |  if_e	jmp	#LR__3678
28568     30 30 56 F2 | 	cmps	local06, #48 wc
2856c     44 00 90 CD |  if_b	jmp	#LR__3677
28570     3A 30 56 F2 | 	cmps	local06, #58 wc
28574     3C 00 90 3D |  if_ae	jmp	#LR__3677
28578     14 13 02 F6 | 	mov	arg01, local02
2857c     00 90 20 FF 
28580     00 14 06 F6 | 	mov	arg02, ##1092616192
28584     64 F7 BF FD | 	call	#__system___float_mul
28588     FD 28 02 F6 | 	mov	local02, result1
2858c     30 30 86 F1 | 	sub	local06, #48
28590     18 13 02 F6 | 	mov	arg01, local06
28594     50 F3 BF FD | 	call	#__system___float_fromuns
28598     FD 14 02 F6 | 	mov	arg02, result1
2859c     14 13 02 F6 | 	mov	arg01, local02
285a0     78 F3 BF FD | 	call	#__system___float_add
285a4     FD 28 02 F6 | 	mov	local02, result1
285a8     00 2E 0E F2 | 	cmp	local05, #0 wz
285ac     01 2A 86 51 |  if_ne	sub	local03, #1
285b0     98 FF 9F FD | 	jmp	#LR__3674
285b4                 | LR__3677
285b4     2E 30 0E F2 | 	cmp	local06, #46 wz
285b8     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
285bc     01 2E 06 A6 |  if_e	mov	local05, #1
285c0     88 FF 9F AD |  if_e	jmp	#LR__3674
285c4                 | LR__3678
285c4     45 30 0E F2 | 	cmp	local06, #69 wz
285c8     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
285cc     18 00 90 5D |  if_ne	jmp	#LR__3679
285d0     13 13 02 F6 | 	mov	arg01, local01
285d4     00 14 06 F6 | 	mov	arg02, #0
285d8     88 FD BF FD | 	call	#__system____builtin_atoi
285dc     15 FB 01 F1 | 	add	result1, local03
285e0     FD 32 02 F6 | 	mov	local07, result1
285e4     04 00 90 FD | 	jmp	#LR__3680
285e8                 | LR__3679
285e8     15 33 02 F6 | 	mov	local07, local03
285ec                 | LR__3680
285ec     19 17 02 F6 | 	mov	arg03, local07
285f0     14 13 02 F6 | 	mov	arg01, local02
285f4     00 90 20 FF 
285f8     00 14 06 F6 | 	mov	arg02, ##1092616192
285fc     F4 06 B0 FD | 	call	#__system___float_pow_n
28600     16 FB 61 F5 | 	xor	result1, local04
28604     A7 F0 03 F6 | 	mov	ptra, fp
28608     B2 00 A0 FD | 	call	#popregs_
2860c                 | __system____builtin_atof_ret
2860c     2D 00 64 FD | 	ret
28610                 | 
28610                 | __system____builtin_ilogb
28610     FC FB BF FD | 	call	#__system___float_Unpack
28614     00 FE 0D F2 | 	cmp	result3, #0 wz
28618     00 00 40 AF 
2861c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
28620     24 00 90 AD |  if_e	jmp	#LR__3691
28624     80 FC 0D F2 | 	cmp	result2, #128 wz
28628     18 00 90 5D |  if_ne	jmp	#LR__3690
2862c     00 00 10 FF 
28630     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
28634     1E FA CD A9 |  if_e	bmask	result1, #30
28638     0C 00 90 AD |  if_e	jmp	#LR__3691
2863c     1F FA C5 F9 | 	decod	result1, #31
28640     04 00 90 FD | 	jmp	#LR__3691
28644                 | LR__3690
28644     FE FA 01 F6 | 	mov	result1, result2
28648                 | LR__3691
28648                 | __system____builtin_ilogb_ret
28648     2D 00 64 FD | 	ret
2864c                 | 
2864c                 | __system____builtin_sinf
2864c     03 4A 05 F6 | 	mov	COUNT_, #3
28650     A8 00 A0 FD | 	call	#pushregs_
28654     09 27 02 F6 | 	mov	local01, arg01
28658     87 64 20 FF 
2865c     DB 15 06 F6 | 	mov	arg02, ##1086918619
28660     8C F8 BF FD | 	call	#__system___float_div
28664     FD 12 02 F6 | 	mov	arg01, result1
28668     00 14 06 F6 | 	mov	arg02, #0
2866c     44 FB BF FD | 	call	#__system___float_tointeger
28670     FD 16 0A F6 | 	mov	arg03, result1 wz
28674     44 00 90 AD |  if_e	jmp	#LR__3700
28678     0B 13 52 F6 | 	abs	arg01, arg03 wc
2867c     1F 28 C6 C9 |  if_b	decod	local02, #31
28680     00 28 06 36 |  if_ae	mov	local02, #0
28684     60 F2 BF FD | 	call	#__system___float_fromuns
28688     14 FB 61 F5 | 	xor	result1, local02
2868c     FD 12 02 F6 | 	mov	arg01, result1
28690     1E 14 C6 F9 | 	decod	arg02, #30
28694     54 F6 BF FD | 	call	#__system___float_mul
28698     FD 12 02 F6 | 	mov	arg01, result1
2869c     87 24 20 FF 
286a0     DB 15 06 F6 | 	mov	arg02, ##1078530011
286a4     44 F6 BF FD | 	call	#__system___float_mul
286a8     FD 14 02 F6 | 	mov	arg02, result1
286ac     13 13 02 F6 | 	mov	arg01, local01
286b0     1F 14 E6 F4 | 	bitnot	arg02, #31
286b4     64 F2 BF FD | 	call	#__system___float_add
286b8     FD 26 02 F6 | 	mov	local01, result1
286bc                 | LR__3700
286bc     13 13 02 F6 | 	mov	arg01, local01
286c0     66 E6 1E FF 
286c4     CD 14 06 F6 | 	mov	arg02, ##1036831949
286c8     01 16 06 F6 | 	mov	arg03, #1
286cc     50 FA BF FD | 	call	#__system___float_cmp
286d0     00 FA 55 F2 | 	cmps	result1, #0 wc
286d4     5C 00 90 3D |  if_ae	jmp	#LR__3701
286d8     13 13 02 F6 | 	mov	arg01, local01
286dc     66 E6 5E FF 
286e0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
286e4     01 16 66 F6 | 	neg	arg03, #1
286e8     34 FA BF FD | 	call	#__system___float_cmp
286ec     01 FA 55 F2 | 	cmps	result1, #1 wc
286f0     40 00 90 CD |  if_b	jmp	#LR__3701
286f4     13 13 02 F6 | 	mov	arg01, local01
286f8     13 15 02 F6 | 	mov	arg02, local01
286fc     EC F5 BF FD | 	call	#__system___float_mul
28700     FD 12 02 F6 | 	mov	arg01, result1
28704     13 15 02 F6 | 	mov	arg02, local01
28708     E0 F5 BF FD | 	call	#__system___float_mul
2870c     FD 12 02 F6 | 	mov	arg01, result1
28710     00 60 20 FF 
28714     00 14 06 F6 | 	mov	arg02, ##1086324736
28718     D4 F7 BF FD | 	call	#__system___float_div
2871c     FD 14 02 F6 | 	mov	arg02, result1
28720     13 13 02 F6 | 	mov	arg01, local01
28724     1F 14 E6 F4 | 	bitnot	arg02, #31
28728     F0 F1 BF FD | 	call	#__system___float_add
2872c     FD 2A 02 F6 | 	mov	local03, result1
28730     54 00 90 FD | 	jmp	#LR__3702
28734                 | LR__3701
28734     13 13 02 F6 | 	mov	arg01, local01
28738     7C 91 26 FF 
2873c     83 15 06 F6 | 	mov	arg02, ##1294137731
28740     A8 F5 BF FD | 	call	#__system___float_mul
28744     FD 12 02 F6 | 	mov	arg01, result1
28748     00 14 06 F6 | 	mov	arg02, #0
2874c     64 FA BF FD | 	call	#__system___float_tointeger
28750     02 FA 65 F0 | 	shl	result1, #2
28754     00 00 A0 FF 
28758     FD 00 48 FD | 	qrotate	##1073741824, result1
2875c     19 12 62 FD | 	getqy	arg01
28760     09 13 52 F6 | 	abs	arg01, arg01 wc
28764     1F 28 C6 C9 |  if_b	decod	local02, #31
28768     00 28 06 36 |  if_ae	mov	local02, #0
2876c     78 F1 BF FD | 	call	#__system___float_fromuns
28770     14 FB 61 F5 | 	xor	result1, local02
28774     FD 12 02 F6 | 	mov	arg01, result1
28778     00 40 27 FF 
2877c     00 14 06 F6 | 	mov	arg02, ##1317011456
28780     6C F7 BF FD | 	call	#__system___float_div
28784     FD 2A 02 F6 | 	mov	local03, result1
28788                 | LR__3702
28788     15 FB 01 F6 | 	mov	result1, local03
2878c     A7 F0 03 F6 | 	mov	ptra, fp
28790     B2 00 A0 FD | 	call	#popregs_
28794                 | __system____builtin_sinf_ret
28794     2D 00 64 FD | 	ret
28798                 | 
28798                 | __system____builtin_tanf
28798     02 4A 05 F6 | 	mov	COUNT_, #2
2879c     A8 00 A0 FD | 	call	#pushregs_
287a0     09 27 02 F6 | 	mov	local01, arg01
287a4     A4 FE BF FD | 	call	#__system____builtin_sinf
287a8     FD 28 02 F6 | 	mov	local02, result1
287ac     13 15 02 F6 | 	mov	arg02, local01
287b0     87 E4 1F FF 
287b4     DB 13 06 F6 | 	mov	arg01, ##1070141403
287b8     1F 14 E6 F4 | 	bitnot	arg02, #31
287bc     5C F1 BF FD | 	call	#__system___float_add
287c0     FD 12 02 F6 | 	mov	arg01, result1
287c4     84 FE BF FD | 	call	#__system____builtin_sinf
287c8     FD 14 02 F6 | 	mov	arg02, result1
287cc     14 13 02 F6 | 	mov	arg01, local02
287d0     1C F7 BF FD | 	call	#__system___float_div
287d4     A7 F0 03 F6 | 	mov	ptra, fp
287d8     B2 00 A0 FD | 	call	#popregs_
287dc                 | __system____builtin_tanf_ret
287dc     2D 00 64 FD | 	ret
287e0                 | 
287e0                 | __system____builtin_asinf
287e0     01 4A 05 F6 | 	mov	COUNT_, #1
287e4     A8 00 A0 FD | 	call	#pushregs_
287e8     09 27 02 F6 | 	mov	local01, arg01
287ec     13 15 02 F6 | 	mov	arg02, local01
287f0     13 13 02 F6 | 	mov	arg01, local01
287f4     F4 F4 BF FD | 	call	#__system___float_mul
287f8     FD 14 02 F6 | 	mov	arg02, result1
287fc     00 C0 1F FF 
28800     00 12 06 F6 | 	mov	arg01, ##1065353216
28804     1F 14 E6 F4 | 	bitnot	arg02, #31
28808     10 F1 BF FD | 	call	#__system___float_add
2880c     FD 12 02 F6 | 	mov	arg01, result1
28810     00 F4 BF FD | 	call	#__system___float_sqrt
28814     FD 14 02 F6 | 	mov	arg02, result1
28818     13 13 02 F6 | 	mov	arg01, local01
2881c     58 00 B0 FD | 	call	#__system____builtin_atan2f
28820     A7 F0 03 F6 | 	mov	ptra, fp
28824     B2 00 A0 FD | 	call	#popregs_
28828                 | __system____builtin_asinf_ret
28828     2D 00 64 FD | 	ret
2882c                 | 
2882c                 | __system____builtin_acosf
2882c     01 4A 05 F6 | 	mov	COUNT_, #1
28830     A8 00 A0 FD | 	call	#pushregs_
28834     09 27 02 F6 | 	mov	local01, arg01
28838     13 15 02 F6 | 	mov	arg02, local01
2883c     13 13 02 F6 | 	mov	arg01, local01
28840     A8 F4 BF FD | 	call	#__system___float_mul
28844     FD 14 02 F6 | 	mov	arg02, result1
28848     00 C0 1F FF 
2884c     00 12 06 F6 | 	mov	arg01, ##1065353216
28850     1F 14 E6 F4 | 	bitnot	arg02, #31
28854     C4 F0 BF FD | 	call	#__system___float_add
28858     FD 12 02 F6 | 	mov	arg01, result1
2885c     B4 F3 BF FD | 	call	#__system___float_sqrt
28860     FD 12 02 F6 | 	mov	arg01, result1
28864     13 15 02 F6 | 	mov	arg02, local01
28868     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2886c     A7 F0 03 F6 | 	mov	ptra, fp
28870     B2 00 A0 FD | 	call	#popregs_
28874                 | __system____builtin_acosf_ret
28874     2D 00 64 FD | 	ret
28878                 | 
28878                 | __system____builtin_atan2f
28878     04 4A 05 F6 | 	mov	COUNT_, #4
2887c     A8 00 A0 FD | 	call	#pushregs_
28880     09 27 02 F6 | 	mov	local01, arg01
28884     0A 29 02 F6 | 	mov	local02, arg02
28888     13 13 02 F6 | 	mov	arg01, local01
2888c     00 14 06 F6 | 	mov	arg02, #0
28890     01 16 06 F6 | 	mov	arg03, #1
28894     88 F8 BF FD | 	call	#__system___float_cmp
28898     00 FA 0D F2 | 	cmp	result1, #0 wz
2889c     28 00 90 5D |  if_ne	jmp	#LR__3710
288a0     14 13 02 F6 | 	mov	arg01, local02
288a4     00 14 06 F6 | 	mov	arg02, #0
288a8     01 16 06 F6 | 	mov	arg03, #1
288ac     70 F8 BF FD | 	call	#__system___float_cmp
288b0     00 FA 55 F2 | 	cmps	result1, #0 wc
288b4     87 24 60 CF 
288b8     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
288bc     DC 00 90 CD |  if_b	jmp	#LR__3711
288c0     00 FA 05 F6 | 	mov	result1, #0
288c4     D4 00 90 FD | 	jmp	#LR__3711
288c8                 | LR__3710
288c8     14 13 02 F6 | 	mov	arg01, local02
288cc     14 15 02 F6 | 	mov	arg02, local02
288d0     18 F4 BF FD | 	call	#__system___float_mul
288d4     FD 2A 02 F6 | 	mov	local03, result1
288d8     13 13 02 F6 | 	mov	arg01, local01
288dc     13 15 02 F6 | 	mov	arg02, local01
288e0     08 F4 BF FD | 	call	#__system___float_mul
288e4     FD 14 02 F6 | 	mov	arg02, result1
288e8     15 13 02 F6 | 	mov	arg01, local03
288ec     2C F0 BF FD | 	call	#__system___float_add
288f0     FD 12 02 F6 | 	mov	arg01, result1
288f4     1C F3 BF FD | 	call	#__system___float_sqrt
288f8     FD 2A 02 F6 | 	mov	local03, result1
288fc     14 13 02 F6 | 	mov	arg01, local02
28900     15 15 02 F6 | 	mov	arg02, local03
28904     E8 F5 BF FD | 	call	#__system___float_div
28908     FD 28 02 F6 | 	mov	local02, result1
2890c     13 13 02 F6 | 	mov	arg01, local01
28910     15 15 02 F6 | 	mov	arg02, local03
28914     D8 F5 BF FD | 	call	#__system___float_div
28918     FD 26 02 F6 | 	mov	local01, result1
2891c     00 40 27 FF 
28920     00 12 06 F6 | 	mov	arg01, ##1317011456
28924     14 15 02 F6 | 	mov	arg02, local02
28928     C0 F3 BF FD | 	call	#__system___float_mul
2892c     FD 12 02 F6 | 	mov	arg01, result1
28930     00 14 06 F6 | 	mov	arg02, #0
28934     7C F8 BF FD | 	call	#__system___float_tointeger
28938     FD 2A 02 F6 | 	mov	local03, result1
2893c     00 40 27 FF 
28940     00 12 06 F6 | 	mov	arg01, ##1317011456
28944     13 15 02 F6 | 	mov	arg02, local01
28948     A0 F3 BF FD | 	call	#__system___float_mul
2894c     FD 12 02 F6 | 	mov	arg01, result1
28950     00 14 06 F6 | 	mov	arg02, #0
28954     5C F8 BF FD | 	call	#__system___float_tointeger
28958     FD 2A 52 FD | 	qvector	local03, result1
2895c     87 24 20 FF 
28960     DB 2B 06 F6 | 	mov	local03, ##1078530011
28964     19 12 62 FD | 	getqy	arg01
28968     01 12 C6 F0 | 	sar	arg01, #1
2896c     09 13 52 F6 | 	abs	arg01, arg01 wc
28970     1F 2C C6 C9 |  if_b	decod	local04, #31
28974     00 2C 06 36 |  if_ae	mov	local04, #0
28978     6C EF BF FD | 	call	#__system___float_fromuns
2897c     16 FB 61 F5 | 	xor	result1, local04
28980     FD 12 02 F6 | 	mov	arg01, result1
28984     00 40 27 FF 
28988     00 14 06 F6 | 	mov	arg02, ##1317011456
2898c     60 F5 BF FD | 	call	#__system___float_div
28990     FD 14 02 F6 | 	mov	arg02, result1
28994     15 13 02 F6 | 	mov	arg01, local03
28998     50 F3 BF FD | 	call	#__system___float_mul
2899c                 | LR__3711
2899c     A7 F0 03 F6 | 	mov	ptra, fp
289a0     B2 00 A0 FD | 	call	#popregs_
289a4                 | __system____builtin_atan2f_ret
289a4     2D 00 64 FD | 	ret
289a8                 | 
289a8                 | __system____builtin_exp2f
289a8     04 4A 05 F6 | 	mov	COUNT_, #4
289ac     A8 00 A0 FD | 	call	#pushregs_
289b0     09 27 02 F6 | 	mov	local01, arg01
289b4     00 7F 21 FF 
289b8     00 14 06 F6 | 	mov	arg02, ##1123942400
289bc     01 16 66 F6 | 	neg	arg03, #1
289c0     5C F7 BF FD | 	call	#__system___float_cmp
289c4     00 FA 55 F2 | 	cmps	result1, #0 wc
289c8     00 C0 3F 3F 
289cc     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
289d0     DC 00 90 3D |  if_ae	jmp	#LR__3721
289d4     13 13 02 F6 | 	mov	arg01, local01
289d8     00 7F 61 FF 
289dc     00 14 06 F6 | 	mov	arg02, ##-1023541248
289e0     01 16 06 F6 | 	mov	arg03, #1
289e4     38 F7 BF FD | 	call	#__system___float_cmp
289e8     00 FA 55 F2 | 	cmps	result1, #0 wc
289ec     00 FA 05 C6 |  if_b	mov	result1, #0
289f0     BC 00 90 CD |  if_b	jmp	#LR__3721
289f4     13 13 02 F6 | 	mov	arg01, local01
289f8     00 14 06 F6 | 	mov	arg02, #0
289fc     B4 F7 BF FD | 	call	#__system___float_tointeger
28a00     FD 28 02 F6 | 	mov	local02, result1
28a04     14 13 52 F6 | 	abs	arg01, local02 wc
28a08     1F 2A C6 C9 |  if_b	decod	local03, #31
28a0c     00 2A 06 36 |  if_ae	mov	local03, #0
28a10     D4 EE BF FD | 	call	#__system___float_fromuns
28a14     15 FB 61 F5 | 	xor	result1, local03
28a18     FD 14 02 F6 | 	mov	arg02, result1
28a1c     13 13 02 F6 | 	mov	arg01, local01
28a20     1F 14 E6 F4 | 	bitnot	arg02, #31
28a24     F4 EE BF FD | 	call	#__system___float_add
28a28     FD 2C 02 F6 | 	mov	local04, result1
28a2c     16 13 02 F6 | 	mov	arg01, local04
28a30     00 14 06 F6 | 	mov	arg02, #0
28a34     01 16 06 F6 | 	mov	arg03, #1
28a38     E4 F6 BF FD | 	call	#__system___float_cmp
28a3c     00 FA 55 F2 | 	cmps	result1, #0 wc
28a40     18 00 90 3D |  if_ae	jmp	#LR__3720
28a44     16 13 02 F6 | 	mov	arg01, local04
28a48     00 C0 1F FF 
28a4c     00 14 06 F6 | 	mov	arg02, ##1065353216
28a50     C8 EE BF FD | 	call	#__system___float_add
28a54     FD 2C 02 F6 | 	mov	local04, result1
28a58     01 28 86 F1 | 	sub	local02, #1
28a5c                 | LR__3720
28a5c     7F 28 06 F1 | 	add	local02, #127
28a60     17 28 66 F0 | 	shl	local02, #23
28a64     16 13 02 F6 | 	mov	arg01, local04
28a68     00 80 26 FF 
28a6c     00 14 06 F6 | 	mov	arg02, ##1291845632
28a70     78 F2 BF FD | 	call	#__system___float_mul
28a74     FD 12 02 F6 | 	mov	arg01, result1
28a78     00 14 06 F6 | 	mov	arg02, #0
28a7c     34 F7 BF FD | 	call	#__system___float_tointeger
28a80     FD 2C 0A F6 | 	mov	local04, result1 wz
28a84     14 FB 01 A6 |  if_e	mov	result1, local02
28a88     24 00 90 AD |  if_e	jmp	#LR__3721
28a8c     3E 2C 26 F4 | 	bith	local04, #62
28a90     0F 2C 62 FD | 	qexp	local04
28a94     14 13 02 F6 | 	mov	arg01, local02
28a98     18 14 62 FD | 	getqx	arg02
28a9c     01 14 06 F1 | 	add	arg02, #1
28aa0     01 14 46 F0 | 	shr	arg02, #1
28aa4     00 80 1F FF 
28aa8     00 14 06 F1 | 	add	arg02, ##1056964608
28aac     3C F2 BF FD | 	call	#__system___float_mul
28ab0                 | LR__3721
28ab0     A7 F0 03 F6 | 	mov	ptra, fp
28ab4     B2 00 A0 FD | 	call	#popregs_
28ab8                 | __system____builtin_exp2f_ret
28ab8     2D 00 64 FD | 	ret
28abc                 | 
28abc                 | __system____builtin_log2f
28abc     06 4A 05 F6 | 	mov	COUNT_, #6
28ac0     A8 00 A0 FD | 	call	#pushregs_
28ac4     09 27 02 F6 | 	mov	local01, arg01
28ac8     09 29 0A F6 | 	mov	local02, arg01 wz
28acc     00 00 40 5F 
28ad0     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
28ad4     00 40 00 AF 
28ad8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
28adc     08 01 90 AD |  if_e	jmp	#LR__3734
28ae0     00 28 56 F2 | 	cmps	local02, #0 wc
28ae4     00 E0 3F CF 
28ae8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
28aec     F8 00 90 CD |  if_b	jmp	#LR__3734
28af0     13 13 02 F6 | 	mov	arg01, local01
28af4     00 90 20 FF 
28af8     00 14 06 F6 | 	mov	arg02, ##1092616192
28afc     01 16 06 F6 | 	mov	arg03, #1
28b00     1C F6 BF FD | 	call	#__system___float_cmp
28b04     00 FA 0D F2 | 	cmp	result1, #0 wz
28b08     4D 2A 20 AF 
28b0c     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
28b10     D4 00 90 AD |  if_e	jmp	#LR__3734
28b14     13 13 02 F6 | 	mov	arg01, local01
28b18     FC 16 20 FF 
28b1c     54 14 06 F6 | 	mov	arg02, ##1076754516
28b20     01 16 06 F6 | 	mov	arg03, #1
28b24     F8 F5 BF FD | 	call	#__system___float_cmp
28b28     00 FA 0D F2 | 	cmp	result1, #0 wz
28b2c     55 DC 1F AF 
28b30     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
28b34     B0 00 90 AD |  if_e	jmp	#LR__3734
28b38     14 2B 02 F6 | 	mov	local03, local02
28b3c     17 2A 46 F0 | 	shr	local03, #23
28b40     15 2B E2 F8 | 	getbyte	local03, local03, #0
28b44     17 29 06 F4 | 	bitl	local02, #279
28b48     14 2D 02 F6 | 	mov	local04, local02
28b4c     FF 2A 0E F2 | 	cmp	local03, #255 wz
28b50     1C 00 90 5D |  if_ne	jmp	#LR__3730
28b54     00 2C 0E F2 | 	cmp	local04, #0 wz
28b58     00 C0 3F 5F 
28b5c     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
28b60     00 E0 3F AF 
28b64     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
28b68     17 FB 01 F6 | 	mov	result1, local05
28b6c     78 00 90 FD | 	jmp	#LR__3734
28b70                 | LR__3730
28b70     00 2A 0E F2 | 	cmp	local03, #0 wz
28b74     17 2C 26 54 |  if_ne	bith	local04, #23
28b78     7F 2A 86 51 |  if_ne	sub	local03, #127
28b7c     28 00 90 5D |  if_ne	jmp	#LR__3733
28b80     00 2C 0E F2 | 	cmp	local04, #0 wz
28b84     00 40 00 AF 
28b88     00 FA 65 A6 |  if_e	neg	result1, ##8388608
28b8c     58 00 90 AD |  if_e	jmp	#LR__3734
28b90     7E 2A 66 F6 | 	neg	local03, #126
28b94     97 08 48 FB | 	callpa	#(@LR__3732-@LR__3731)>>2,fcache_load_ptr_
28b98                 | LR__3731
28b98     17 2C 2E F4 | 	testbn	local04, #23 wz
28b9c     01 2C 66 A0 |  if_e	shl	local04, #1
28ba0     01 2A 06 A1 |  if_e	add	local03, #1
28ba4     F0 FF 9F AD |  if_e	jmp	#LR__3731
28ba8                 | LR__3732
28ba8                 | LR__3733
28ba8     0E 2C 62 FD | 	qlog	local04
28bac     01 2A 86 F1 | 	sub	local03, #1
28bb0     15 13 52 F6 | 	abs	arg01, local03 wc
28bb4     1F 30 C6 C9 |  if_b	decod	local06, #31
28bb8     00 30 06 36 |  if_ae	mov	local06, #0
28bbc     18 2E 62 FD | 	getqx	local05
28bc0     9B 2E 06 F4 | 	bitl	local05, #155
28bc4     08 2E 06 F1 | 	add	local05, #8
28bc8     04 2E 46 F0 | 	shr	local05, #4
28bcc     00 C0 1F FF 
28bd0     00 2E 06 F1 | 	add	local05, ##1065353216
28bd4     10 ED BF FD | 	call	#__system___float_fromuns
28bd8     18 FB 61 F5 | 	xor	result1, local06
28bdc     FD 14 02 F6 | 	mov	arg02, result1
28be0     17 13 02 F6 | 	mov	arg01, local05
28be4     34 ED BF FD | 	call	#__system___float_add
28be8                 | LR__3734
28be8     A7 F0 03 F6 | 	mov	ptra, fp
28bec     B2 00 A0 FD | 	call	#popregs_
28bf0                 | __system____builtin_log2f_ret
28bf0     2D 00 64 FD | 	ret
28bf4                 | 
28bf4                 | __system____builtin_powf
28bf4     04 4A 05 F6 | 	mov	COUNT_, #4
28bf8     A8 00 A0 FD | 	call	#pushregs_
28bfc     09 27 02 F6 | 	mov	local01, arg01
28c00     0A 29 02 F6 | 	mov	local02, arg02
28c04     14 13 02 F6 | 	mov	arg01, local02
28c08     00 14 06 F6 | 	mov	arg02, #0
28c0c     A4 F5 BF FD | 	call	#__system___float_tointeger
28c10     FD 2A 02 F6 | 	mov	local03, result1
28c14     15 13 52 F6 | 	abs	arg01, local03 wc
28c18     1F 2C C6 C9 |  if_b	decod	local04, #31
28c1c     00 2C 06 36 |  if_ae	mov	local04, #0
28c20     C4 EC BF FD | 	call	#__system___float_fromuns
28c24     16 FB 61 F5 | 	xor	result1, local04
28c28     FD 12 02 F6 | 	mov	arg01, result1
28c2c     14 15 02 F6 | 	mov	arg02, local02
28c30     01 16 06 F6 | 	mov	arg03, #1
28c34     E8 F4 BF FD | 	call	#__system___float_cmp
28c38     00 FA 0D F2 | 	cmp	result1, #0 wz
28c3c     18 00 90 5D |  if_ne	jmp	#LR__3740
28c40     00 C0 1F FF 
28c44     00 12 06 F6 | 	mov	arg01, ##1065353216
28c48     13 15 02 F6 | 	mov	arg02, local01
28c4c     15 17 02 F6 | 	mov	arg03, local03
28c50     A0 00 B0 FD | 	call	#__system___float_pow_n
28c54     58 00 90 FD | 	jmp	#LR__3741
28c58                 | LR__3740
28c58     13 13 02 F6 | 	mov	arg01, local01
28c5c     00 14 06 F6 | 	mov	arg02, #0
28c60     01 16 06 F6 | 	mov	arg03, #1
28c64     B8 F4 BF FD | 	call	#__system___float_cmp
28c68     00 FA 55 F2 | 	cmps	result1, #0 wc
28c6c     00 E0 3F CF 
28c70     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
28c74     38 00 90 CD |  if_b	jmp	#LR__3741
28c78     13 13 02 F6 | 	mov	arg01, local01
28c7c     00 14 06 F6 | 	mov	arg02, #0
28c80     01 16 06 F6 | 	mov	arg03, #1
28c84     98 F4 BF FD | 	call	#__system___float_cmp
28c88     00 FA 0D F2 | 	cmp	result1, #0 wz
28c8c     00 FA 05 A6 |  if_e	mov	result1, #0
28c90     1C 00 90 AD |  if_e	jmp	#LR__3741
28c94     13 13 02 F6 | 	mov	arg01, local01
28c98     20 FE BF FD | 	call	#__system____builtin_log2f
28c9c     FD 12 02 F6 | 	mov	arg01, result1
28ca0     14 15 02 F6 | 	mov	arg02, local02
28ca4     44 F0 BF FD | 	call	#__system___float_mul
28ca8     FD 12 02 F6 | 	mov	arg01, result1
28cac     F8 FC BF FD | 	call	#__system____builtin_exp2f
28cb0                 | LR__3741
28cb0     A7 F0 03 F6 | 	mov	ptra, fp
28cb4     B2 00 A0 FD | 	call	#popregs_
28cb8                 | __system____builtin_powf_ret
28cb8     2D 00 64 FD | 	ret
28cbc                 | 
28cbc                 | __system____builtin_logbase
28cbc     02 4A 05 F6 | 	mov	COUNT_, #2
28cc0     A8 00 A0 FD | 	call	#pushregs_
28cc4     09 27 02 F6 | 	mov	local01, arg01
28cc8     0A 13 02 F6 | 	mov	arg01, arg02
28ccc     EC FD BF FD | 	call	#__system____builtin_log2f
28cd0     FD 28 02 F6 | 	mov	local02, result1
28cd4     13 13 02 F6 | 	mov	arg01, local01
28cd8     E0 FD BF FD | 	call	#__system____builtin_log2f
28cdc     FD 14 02 F6 | 	mov	arg02, result1
28ce0     14 13 02 F6 | 	mov	arg01, local02
28ce4     08 F2 BF FD | 	call	#__system___float_div
28ce8     A7 F0 03 F6 | 	mov	ptra, fp
28cec     B2 00 A0 FD | 	call	#popregs_
28cf0                 | __system____builtin_logbase_ret
28cf0     2D 00 64 FD | 	ret
28cf4                 | 
28cf4                 | __system___float_pow_n
28cf4     05 4A 05 F6 | 	mov	COUNT_, #5
28cf8     A8 00 A0 FD | 	call	#pushregs_
28cfc     09 27 02 F6 | 	mov	local01, arg01
28d00     0A 29 02 F6 | 	mov	local02, arg02
28d04     0B 2B 02 F6 | 	mov	local03, arg03
28d08     00 2A 56 F2 | 	cmps	local03, #0 wc
28d0c     18 00 90 3D |  if_ae	jmp	#LR__3750
28d10     01 2C 06 F6 | 	mov	local04, #1
28d14     15 2B 62 F6 | 	neg	local03, local03
28d18     00 2A 56 F2 | 	cmps	local03, #0 wc
28d1c     00 FA 05 C6 |  if_b	mov	result1, #0
28d20     94 00 90 CD |  if_b	jmp	#LR__3758
28d24     04 00 90 FD | 	jmp	#LR__3751
28d28                 | LR__3750
28d28     00 2C 06 F6 | 	mov	local04, #0
28d2c                 | LR__3751
28d2c     00 C0 1F FF 
28d30     00 2E 06 F6 | 	mov	local05, ##1065353216
28d34                 | LR__3752
28d34     01 2A 56 F2 | 	cmps	local03, #1 wc
28d38     30 00 90 CD |  if_b	jmp	#LR__3754
28d3c     01 2A CE F7 | 	test	local03, #1 wz
28d40     10 00 90 AD |  if_e	jmp	#LR__3753
28d44     17 13 02 F6 | 	mov	arg01, local05
28d48     14 15 02 F6 | 	mov	arg02, local02
28d4c     9C EF BF FD | 	call	#__system___float_mul
28d50     FD 2E 02 F6 | 	mov	local05, result1
28d54                 | LR__3753
28d54     01 2A C6 F0 | 	sar	local03, #1
28d58     14 13 02 F6 | 	mov	arg01, local02
28d5c     14 15 02 F6 | 	mov	arg02, local02
28d60     88 EF BF FD | 	call	#__system___float_mul
28d64     FD 28 02 F6 | 	mov	local02, result1
28d68     C8 FF 9F FD | 	jmp	#LR__3752
28d6c                 | LR__3754
28d6c     00 2C 0E F2 | 	cmp	local04, #0 wz
28d70     14 00 90 AD |  if_e	jmp	#LR__3755
28d74     13 13 02 F6 | 	mov	arg01, local01
28d78     17 15 02 F6 | 	mov	arg02, local05
28d7c     70 F1 BF FD | 	call	#__system___float_div
28d80     FD 2E 02 F6 | 	mov	local05, result1
28d84     2C 00 90 FD | 	jmp	#LR__3757
28d88                 | LR__3755
28d88     13 13 02 F6 | 	mov	arg01, local01
28d8c     00 C0 1F FF 
28d90     00 14 06 F6 | 	mov	arg02, ##1065353216
28d94     01 16 06 F6 | 	mov	arg03, #1
28d98     84 F3 BF FD | 	call	#__system___float_cmp
28d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
28da0     10 00 90 AD |  if_e	jmp	#LR__3756
28da4     13 13 02 F6 | 	mov	arg01, local01
28da8     17 15 02 F6 | 	mov	arg02, local05
28dac     3C EF BF FD | 	call	#__system___float_mul
28db0     FD 2E 02 F6 | 	mov	local05, result1
28db4                 | LR__3756
28db4                 | LR__3757
28db4     17 FB 01 F6 | 	mov	result1, local05
28db8                 | LR__3758
28db8     A7 F0 03 F6 | 	mov	ptra, fp
28dbc     B2 00 A0 FD | 	call	#popregs_
28dc0                 | __system___float_pow_n_ret
28dc0     2D 00 64 FD | 	ret
28dc4                 | 
28dc4                 | __system___gc_ptrs
28dc4     EC 00 02 F6 | 	mov	_var01, __heap_ptr
28dc8     00 03 02 F6 | 	mov	_var02, _var01
28dcc     BB 00 00 FF 
28dd0     F8 02 06 F1 | 	add	_var02, ##95992
28dd4     00 FD 09 FB | 	rdlong	result2, _var01 wz
28dd8     74 00 90 5D |  if_ne	jmp	#LR__3760
28ddc     01 FD 01 F6 | 	mov	result2, _var02
28de0     00 FD 81 F1 | 	sub	result2, _var01
28de4     00 03 58 FC | 	wrword	#1, _var01
28de8     00 FB 01 F6 | 	mov	result1, _var01
28dec     02 FA 05 F1 | 	add	result1, #2
28df0     36 00 80 FF 
28df4     FD 20 59 FC | 	wrword	##27792, result1
28df8     00 FB 01 F6 | 	mov	result1, _var01
28dfc     04 FA 05 F1 | 	add	result1, #4
28e00     FD 00 58 FC | 	wrword	#0, result1
28e04     00 FB 01 F6 | 	mov	result1, _var01
28e08     06 FA 05 F1 | 	add	result1, #6
28e0c     FD 02 58 FC | 	wrword	#1, result1
28e10     10 00 06 F1 | 	add	_var01, #16
28e14     FE FC 51 F6 | 	abs	result2, result2 wc
28e18     04 FC 45 F0 | 	shr	result2, #4
28e1c     FE FC 81 F6 | 	negc	result2, result2
28e20     00 FD 51 FC | 	wrword	result2, _var01
28e24     00 FD 01 F6 | 	mov	result2, _var01
28e28     02 FC 05 F1 | 	add	result2, #2
28e2c     36 00 80 FF 
28e30     FE 1E 59 FC | 	wrword	##27791, result2
28e34     00 FD 01 F6 | 	mov	result2, _var01
28e38     04 FC 05 F1 | 	add	result2, #4
28e3c     FE 00 58 FC | 	wrword	#0, result2
28e40     00 FD 01 F6 | 	mov	result2, _var01
28e44     06 FC 05 F1 | 	add	result2, #6
28e48     FE 00 58 FC | 	wrword	#0, result2
28e4c     10 00 86 F1 | 	sub	_var01, #16
28e50                 | LR__3760
28e50     00 FB 01 F6 | 	mov	result1, _var01
28e54     01 FD 01 F6 | 	mov	result2, _var02
28e58                 | __system___gc_ptrs_ret
28e58     2D 00 64 FD | 	ret
28e5c                 | 
28e5c                 | __system___gc_tryalloc
28e5c     0B 4A 05 F6 | 	mov	COUNT_, #11
28e60     A8 00 A0 FD | 	call	#pushregs_
28e64     09 27 02 F6 | 	mov	local01, arg01
28e68     0A 29 02 F6 | 	mov	local02, arg02
28e6c     54 FF BF FD | 	call	#__system___gc_ptrs
28e70     FD 2A 02 F6 | 	mov	local03, result1
28e74     FE 2C 02 F6 | 	mov	local04, result2
28e78     15 2F 02 F6 | 	mov	local05, local03
28e7c     00 30 06 F6 | 	mov	local06, #0
28e80     97 1E 48 FB | 	callpa	#(@LR__3771-@LR__3770)>>2,fcache_load_ptr_
28e84                 | LR__3770
28e84     17 33 02 F6 | 	mov	local07, local05
28e88     06 2E 06 F1 | 	add	local05, #6
28e8c     17 15 EA FA | 	rdword	arg02, local05 wz
28e90     15 13 02 F6 | 	mov	arg01, local03
28e94     00 FA 05 A6 |  if_e	mov	result1, #0
28e98     04 14 66 50 |  if_ne	shl	arg02, #4
28e9c     0A 13 02 51 |  if_ne	add	arg01, arg02
28ea0     09 FB 01 56 |  if_ne	mov	result1, arg01
28ea4     FD 2E 0A F6 | 	mov	local05, result1 wz
28ea8     17 31 E2 5A |  if_ne	rdword	local06, local05
28eac     00 2E 0E F2 | 	cmp	local05, #0 wz
28eb0     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
28eb4     08 00 90 1D |  if_a	jmp	#LR__3772
28eb8     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
28ebc     C4 FF 9F 1D |  if_a	jmp	#LR__3770
28ec0                 | LR__3771
28ec0                 | LR__3772
28ec0     00 2E 0E F2 | 	cmp	local05, #0 wz
28ec4     17 FB 01 A6 |  if_e	mov	result1, local05
28ec8     3C 01 90 AD |  if_e	jmp	#LR__3775
28ecc     17 FD 01 F6 | 	mov	result2, local05
28ed0     06 FC 05 F1 | 	add	result2, #6
28ed4     FE 34 E2 FA | 	rdword	local08, result2
28ed8     18 27 52 F2 | 	cmps	local01, local06 wc
28edc     C0 00 90 3D |  if_ae	jmp	#LR__3774
28ee0     17 27 52 FC | 	wrword	local01, local05
28ee4     17 13 02 F6 | 	mov	arg01, local05
28ee8     13 35 02 F6 | 	mov	local08, local01
28eec     04 34 66 F0 | 	shl	local08, #4
28ef0     1A 13 02 F1 | 	add	arg01, local08
28ef4     13 31 82 F1 | 	sub	local06, local01
28ef8     09 31 52 FC | 	wrword	local06, arg01
28efc     09 35 02 F6 | 	mov	local08, arg01
28f00     02 34 06 F1 | 	add	local08, #2
28f04     36 00 80 FF 
28f08     1A 1F 59 FC | 	wrword	##27791, local08
28f0c     17 15 0A F6 | 	mov	arg02, local05 wz
28f10     00 FA 05 A6 |  if_e	mov	result1, #0
28f14     15 15 82 51 |  if_ne	sub	arg02, local03
28f18     04 14 46 50 |  if_ne	shr	arg02, #4
28f1c     0A FB 01 56 |  if_ne	mov	result1, arg02
28f20     09 35 02 F6 | 	mov	local08, arg01
28f24     04 34 06 F1 | 	add	local08, #4
28f28     1A FB 51 FC | 	wrword	result1, local08
28f2c     17 35 02 F6 | 	mov	local08, local05
28f30     06 34 06 F1 | 	add	local08, #6
28f34     09 15 02 F6 | 	mov	arg02, arg01
28f38     1A 35 E2 FA | 	rdword	local08, local08
28f3c     06 14 06 F1 | 	add	arg02, #6
28f40     0A 35 52 FC | 	wrword	local08, arg02
28f44     09 37 02 F6 | 	mov	local09, arg01
28f48     1B 15 0A F6 | 	mov	arg02, local09 wz
28f4c     00 FA 05 A6 |  if_e	mov	result1, #0
28f50     15 15 82 51 |  if_ne	sub	arg02, local03
28f54     04 14 46 50 |  if_ne	shr	arg02, #4
28f58     0A FB 01 56 |  if_ne	mov	result1, arg02
28f5c     FD 34 02 F6 | 	mov	local08, result1
28f60     09 39 EA FA | 	rdword	local10, arg01 wz
28f64     00 FA 05 A6 |  if_e	mov	result1, #0
28f68     04 38 66 50 |  if_ne	shl	local10, #4
28f6c     1C 13 02 51 |  if_ne	add	arg01, local10
28f70     09 FB 01 56 |  if_ne	mov	result1, arg01
28f74     FD 3A 0A F6 | 	mov	local11, result1 wz
28f78     24 00 90 AD |  if_e	jmp	#LR__3773
28f7c     16 3B 52 F2 | 	cmps	local11, local04 wc
28f80     1C 00 90 3D |  if_ae	jmp	#LR__3773
28f84     1B 15 0A F6 | 	mov	arg02, local09 wz
28f88     00 FA 05 A6 |  if_e	mov	result1, #0
28f8c     15 15 82 51 |  if_ne	sub	arg02, local03
28f90     04 14 46 50 |  if_ne	shr	arg02, #4
28f94     0A FB 01 56 |  if_ne	mov	result1, arg02
28f98     04 3A 06 F1 | 	add	local11, #4
28f9c     1D FB 51 FC | 	wrword	result1, local11
28fa0                 | LR__3773
28fa0                 | LR__3774
28fa0     06 32 06 F1 | 	add	local07, #6
28fa4     19 35 52 FC | 	wrword	local08, local07
28fa8     36 00 00 FF 
28fac     80 36 06 F6 | 	mov	local09, ##27776
28fb0     14 37 42 F5 | 	or	local09, local02
28fb4     00 FA 05 F6 | 	mov	result1, #0
28fb8     01 FA 61 FD | 	cogid	result1
28fbc     FD 36 42 F5 | 	or	local09, result1
28fc0     17 3B 02 F6 | 	mov	local11, local05
28fc4     02 3A 06 F1 | 	add	local11, #2
28fc8     1D 37 52 FC | 	wrword	local09, local11
28fcc     15 37 02 F6 | 	mov	local09, local03
28fd0     08 36 06 F1 | 	add	local09, #8
28fd4     17 3B 02 F6 | 	mov	local11, local05
28fd8     1B 37 E2 FA | 	rdword	local09, local09
28fdc     06 3A 06 F1 | 	add	local11, #6
28fe0     1D 37 52 FC | 	wrword	local09, local11
28fe4     17 15 0A F6 | 	mov	arg02, local05 wz
28fe8     00 FA 05 A6 |  if_e	mov	result1, #0
28fec     15 15 82 51 |  if_ne	sub	arg02, local03
28ff0     04 14 46 50 |  if_ne	shr	arg02, #4
28ff4     0A FB 01 56 |  if_ne	mov	result1, arg02
28ff8     08 2A 06 F1 | 	add	local03, #8
28ffc     15 FB 51 FC | 	wrword	result1, local03
29000     08 2E 06 F1 | 	add	local05, #8
29004     17 FB 01 F6 | 	mov	result1, local05
29008                 | LR__3775
29008     A7 F0 03 F6 | 	mov	ptra, fp
2900c     B2 00 A0 FD | 	call	#popregs_
29010                 | __system___gc_tryalloc_ret
29010     2D 00 64 FD | 	ret
29014                 | 
29014                 | __system___gc_alloc_managed
29014     01 4A 05 F6 | 	mov	COUNT_, #1
29018     A8 00 A0 FD | 	call	#pushregs_
2901c     09 27 02 F6 | 	mov	local01, arg01
29020     00 14 06 F6 | 	mov	arg02, #0
29024     1C 00 B0 FD | 	call	#__system___gc_doalloc
29028     FD 14 0A F6 | 	mov	arg02, result1 wz
2902c     01 26 56 A2 |  if_e	cmps	local01, #1 wc
29030     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
29034     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
29038     A7 F0 03 F6 | 	mov	ptra, fp
2903c     B2 00 A0 FD | 	call	#popregs_
29040                 | __system___gc_alloc_managed_ret
29040     2D 00 64 FD | 	ret
29044                 | 
29044                 | __system___gc_doalloc
29044     06 4A 05 F6 | 	mov	COUNT_, #6
29048     A8 00 A0 FD | 	call	#pushregs_
2904c     09 27 0A F6 | 	mov	local01, arg01 wz
29050     0A 29 02 F6 | 	mov	local02, arg02
29054     00 FA 05 A6 |  if_e	mov	result1, #0
29058     8C 00 90 AD |  if_e	jmp	#LR__3787
2905c     17 26 06 F1 | 	add	local01, #23
29060     0F 26 26 F5 | 	andn	local01, #15
29064     04 26 46 F0 | 	shr	local01, #4
29068     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2906c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29070     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29074     FC BD BF FD | 	call	#__system___lockmem
29078     13 13 02 F6 | 	mov	arg01, local01
2907c     14 15 02 F6 | 	mov	arg02, local02
29080     D8 FD BF FD | 	call	#__system___gc_tryalloc
29084     FD 2A 0A F6 | 	mov	local03, result1 wz
29088     14 00 90 5D |  if_ne	jmp	#LR__3780
2908c     70 03 B0 FD | 	call	#__system___gc_docollect
29090     13 13 02 F6 | 	mov	arg01, local01
29094     14 15 02 F6 | 	mov	arg02, local02
29098     C0 FD BF FD | 	call	#__system___gc_tryalloc
2909c     FD 2A 02 F6 | 	mov	local03, result1
290a0                 | LR__3780
290a0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
290a4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
290a8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
290ac     09 01 68 FC | 	wrlong	#0, arg01
290b0     00 2A 0E F2 | 	cmp	local03, #0 wz
290b4     2C 00 90 AD |  if_e	jmp	#LR__3786
290b8     04 26 66 F0 | 	shl	local01, #4
290bc     08 26 86 F1 | 	sub	local01, #8
290c0     13 2D 52 F6 | 	abs	local04, local01 wc
290c4     02 2C 46 F0 | 	shr	local04, #2
290c8     16 2F 8A F6 | 	negc	local05, local04 wz
290cc     15 31 02 F6 | 	mov	local06, local03
290d0     10 00 90 AD |  if_e	jmp	#LR__3785
290d4     97 06 48 FB | 	callpa	#(@LR__3783-@LR__3781)>>2,fcache_load_ptr_
290d8                 | LR__3781
290d8     17 05 D8 FC | 	rep	@LR__3784, local05
290dc                 | LR__3782
290dc     18 01 68 FC | 	wrlong	#0, local06
290e0     04 30 06 F1 | 	add	local06, #4
290e4                 | LR__3783
290e4                 | LR__3784
290e4                 | LR__3785
290e4                 | LR__3786
290e4     15 FB 01 F6 | 	mov	result1, local03
290e8                 | LR__3787
290e8     A7 F0 03 F6 | 	mov	ptra, fp
290ec     B2 00 A0 FD | 	call	#popregs_
290f0                 | __system___gc_doalloc_ret
290f0     2D 00 64 FD | 	ret
290f4                 | 
290f4                 | __system___gc_isvalidptr
290f4     F8 16 06 F4 | 	bitl	arg03, #248
290f8     08 16 86 F1 | 	sub	arg03, #8
290fc     09 17 52 F2 | 	cmps	arg03, arg01 wc
29100     08 00 90 CD |  if_b	jmp	#LR__3790
29104     0A 17 52 F2 | 	cmps	arg03, arg02 wc
29108     08 00 90 CD |  if_b	jmp	#LR__3791
2910c                 | LR__3790
2910c     00 FA 05 F6 | 	mov	result1, #0
29110     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
29114                 | LR__3791
29114     0B 01 02 F6 | 	mov	_var01, arg03
29118     09 01 62 F5 | 	xor	_var01, arg01
2911c     0F 00 CE F7 | 	test	_var01, #15 wz
29120     00 FA 05 56 |  if_ne	mov	result1, #0
29124     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
29128     0B 01 02 F6 | 	mov	_var01, arg03
2912c     02 00 06 F1 | 	add	_var01, #2
29130     00 01 E2 FA | 	rdword	_var01, _var01
29134     7F 00 00 FF 
29138     C0 01 06 F5 | 	and	_var01, ##65472
2913c     36 00 00 FF 
29140     80 00 0E F2 | 	cmp	_var01, ##27776 wz
29144     00 FA 05 56 |  if_ne	mov	result1, #0
29148     0B FB 01 A6 |  if_e	mov	result1, arg03
2914c                 | __system___gc_isvalidptr_ret
2914c     2D 00 64 FD | 	ret
29150                 | 
29150                 | __system___gc_free
29150     09 17 02 F6 | 	mov	arg03, arg01
29154     6C FC BF FD | 	call	#__system___gc_ptrs
29158     FD 12 02 F6 | 	mov	arg01, result1
2915c     FE 14 02 F6 | 	mov	arg02, result2
29160     90 FF BF FD | 	call	#__system___gc_isvalidptr
29164     FD 14 0A F6 | 	mov	arg02, result1 wz
29168     28 00 90 AD |  if_e	jmp	#LR__3800
2916c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29170     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
29174     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29178     F8 BC BF FD | 	call	#__system___lockmem
2917c     0A 13 02 F6 | 	mov	arg01, arg02
29180     14 00 B0 FD | 	call	#__system___gc_dofree
29184     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29188     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2918c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29190     09 01 68 FC | 	wrlong	#0, arg01
29194                 | LR__3800
29194                 | __system___gc_free_ret
29194     2D 00 64 FD | 	ret
29198                 | 
29198                 | __system___gc_dofree
29198     06 4A 05 F6 | 	mov	COUNT_, #6
2919c     A8 00 A0 FD | 	call	#pushregs_
291a0     09 27 02 F6 | 	mov	local01, arg01
291a4     1C FC BF FD | 	call	#__system___gc_ptrs
291a8     FD 28 02 F6 | 	mov	local02, result1
291ac     FE 2A 02 F6 | 	mov	local03, result2
291b0     13 15 02 F6 | 	mov	arg02, local01
291b4     02 14 06 F1 | 	add	arg02, #2
291b8     36 00 80 FF 
291bc     0A 1F 59 FC | 	wrword	##27791, arg02
291c0     13 2D 02 F6 | 	mov	local04, local01
291c4     13 13 02 F6 | 	mov	arg01, local01
291c8     09 2F EA FA | 	rdword	local05, arg01 wz
291cc     00 FA 05 A6 |  if_e	mov	result1, #0
291d0     04 2E 66 50 |  if_ne	shl	local05, #4
291d4     17 13 02 51 |  if_ne	add	arg01, local05
291d8     09 FB 01 56 |  if_ne	mov	result1, arg01
291dc     FD 30 02 F6 | 	mov	local06, result1
291e0     97 24 48 FB | 	callpa	#(@LR__3811-@LR__3810)>>2,fcache_load_ptr_
291e4                 | LR__3810
291e4     04 2C 06 F1 | 	add	local04, #4
291e8     16 15 EA FA | 	rdword	arg02, local04 wz
291ec     14 13 02 F6 | 	mov	arg01, local02
291f0     00 FA 05 A6 |  if_e	mov	result1, #0
291f4     04 14 66 50 |  if_ne	shl	arg02, #4
291f8     0A 13 02 51 |  if_ne	add	arg01, arg02
291fc     09 FB 01 56 |  if_ne	mov	result1, arg01
29200     FD 2C 0A F6 | 	mov	local04, result1 wz
29204     24 00 90 AD |  if_e	jmp	#LR__3812
29208     16 13 02 F6 | 	mov	arg01, local04
2920c     00 FA 05 F6 | 	mov	result1, #0
29210     02 12 06 F1 | 	add	arg01, #2
29214     09 13 E2 FA | 	rdword	arg01, arg01
29218     36 00 00 FF 
2921c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29220     01 FA 65 A6 |  if_e	neg	result1, #1
29224     00 FA 0D F2 | 	cmp	result1, #0 wz
29228     B8 FF 9F AD |  if_e	jmp	#LR__3810
2922c                 | LR__3811
2922c                 | LR__3812
2922c     00 2C 0E F2 | 	cmp	local04, #0 wz
29230     14 2D 02 A6 |  if_e	mov	local04, local02
29234     16 15 02 F6 | 	mov	arg02, local04
29238     06 14 06 F1 | 	add	arg02, #6
2923c     13 13 02 F6 | 	mov	arg01, local01
29240     0A 15 E2 FA | 	rdword	arg02, arg02
29244     06 12 06 F1 | 	add	arg01, #6
29248     09 15 52 FC | 	wrword	arg02, arg01
2924c     13 15 0A F6 | 	mov	arg02, local01 wz
29250     00 FA 05 A6 |  if_e	mov	result1, #0
29254     14 15 82 51 |  if_ne	sub	arg02, local02
29258     04 14 46 50 |  if_ne	shr	arg02, #4
2925c     0A FB 01 56 |  if_ne	mov	result1, arg02
29260     16 15 02 F6 | 	mov	arg02, local04
29264     06 14 06 F1 | 	add	arg02, #6
29268     0A FB 51 FC | 	wrword	result1, arg02
2926c     14 2D 0A F2 | 	cmp	local04, local02 wz
29270     A4 00 90 AD |  if_e	jmp	#LR__3815
29274     16 13 02 F6 | 	mov	arg01, local04
29278     09 2F EA FA | 	rdword	local05, arg01 wz
2927c     00 FA 05 A6 |  if_e	mov	result1, #0
29280     04 2E 66 50 |  if_ne	shl	local05, #4
29284     17 13 02 51 |  if_ne	add	arg01, local05
29288     09 FB 01 56 |  if_ne	mov	result1, arg01
2928c     13 FB 09 F2 | 	cmp	result1, local01 wz
29290     84 00 90 5D |  if_ne	jmp	#LR__3814
29294     16 31 E2 FA | 	rdword	local06, local04
29298     13 15 E2 FA | 	rdword	arg02, local01
2929c     0A 31 02 F1 | 	add	local06, arg02
292a0     16 31 52 FC | 	wrword	local06, local04
292a4     13 31 02 F6 | 	mov	local06, local01
292a8     02 30 06 F1 | 	add	local06, #2
292ac     18 01 58 FC | 	wrword	#0, local06
292b0     13 13 02 F6 | 	mov	arg01, local01
292b4     09 2F EA FA | 	rdword	local05, arg01 wz
292b8     00 FA 05 A6 |  if_e	mov	result1, #0
292bc     04 2E 66 50 |  if_ne	shl	local05, #4
292c0     17 13 02 51 |  if_ne	add	arg01, local05
292c4     09 FB 01 56 |  if_ne	mov	result1, arg01
292c8     FD 30 02 F6 | 	mov	local06, result1
292cc     15 31 52 F2 | 	cmps	local06, local03 wc
292d0     20 00 90 3D |  if_ae	jmp	#LR__3813
292d4     16 15 0A F6 | 	mov	arg02, local04 wz
292d8     00 FA 05 A6 |  if_e	mov	result1, #0
292dc     14 15 82 51 |  if_ne	sub	arg02, local02
292e0     04 14 46 50 |  if_ne	shr	arg02, #4
292e4     0A FB 01 56 |  if_ne	mov	result1, arg02
292e8     18 15 02 F6 | 	mov	arg02, local06
292ec     04 14 06 F1 | 	add	arg02, #4
292f0     0A FB 51 FC | 	wrword	result1, arg02
292f4                 | LR__3813
292f4     13 15 02 F6 | 	mov	arg02, local01
292f8     06 14 06 F1 | 	add	arg02, #6
292fc     16 FD 01 F6 | 	mov	result2, local04
29300     0A 15 E2 FA | 	rdword	arg02, arg02
29304     06 FC 05 F1 | 	add	result2, #6
29308     FE 14 52 FC | 	wrword	arg02, result2
2930c     06 26 06 F1 | 	add	local01, #6
29310     13 01 58 FC | 	wrword	#0, local01
29314     16 27 02 F6 | 	mov	local01, local04
29318                 | LR__3814
29318                 | LR__3815
29318     13 13 02 F6 | 	mov	arg01, local01
2931c     09 2F EA FA | 	rdword	local05, arg01 wz
29320     00 FA 05 A6 |  if_e	mov	result1, #0
29324     04 2E 66 50 |  if_ne	shl	local05, #4
29328     17 13 02 51 |  if_ne	add	arg01, local05
2932c     09 FB 01 56 |  if_ne	mov	result1, arg01
29330     FD 14 0A F6 | 	mov	arg02, result1 wz
29334     B8 00 90 AD |  if_e	jmp	#LR__3817
29338     15 15 52 F2 | 	cmps	arg02, local03 wc
2933c     B0 00 90 3D |  if_ae	jmp	#LR__3817
29340     0A 13 02 F6 | 	mov	arg01, arg02
29344     00 FA 05 F6 | 	mov	result1, #0
29348     02 12 06 F1 | 	add	arg01, #2
2934c     09 13 E2 FA | 	rdword	arg01, arg01
29350     36 00 00 FF 
29354     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29358     01 FA 65 A6 |  if_e	neg	result1, #1
2935c     00 FA 0D F2 | 	cmp	result1, #0 wz
29360     8C 00 90 AD |  if_e	jmp	#LR__3817
29364     13 2D 02 F6 | 	mov	local04, local01
29368     16 31 E2 FA | 	rdword	local06, local04
2936c     0A 13 02 F6 | 	mov	arg01, arg02
29370     09 27 E2 FA | 	rdword	local01, arg01
29374     13 31 02 F1 | 	add	local06, local01
29378     16 31 52 FC | 	wrword	local06, local04
2937c     09 31 02 F6 | 	mov	local06, arg01
29380     06 30 06 F1 | 	add	local06, #6
29384     16 27 02 F6 | 	mov	local01, local04
29388     18 31 E2 FA | 	rdword	local06, local06
2938c     06 26 06 F1 | 	add	local01, #6
29390     13 31 52 FC | 	wrword	local06, local01
29394     09 31 02 F6 | 	mov	local06, arg01
29398     02 30 06 F1 | 	add	local06, #2
2939c     18 55 59 FC | 	wrword	#170, local06
293a0     09 31 02 F6 | 	mov	local06, arg01
293a4     06 30 06 F1 | 	add	local06, #6
293a8     18 01 58 FC | 	wrword	#0, local06
293ac     09 2F EA FA | 	rdword	local05, arg01 wz
293b0     00 FA 05 A6 |  if_e	mov	result1, #0
293b4     04 2E 66 50 |  if_ne	shl	local05, #4
293b8     17 13 02 51 |  if_ne	add	arg01, local05
293bc     09 FB 01 56 |  if_ne	mov	result1, arg01
293c0     FD 30 0A F6 | 	mov	local06, result1 wz
293c4     28 00 90 AD |  if_e	jmp	#LR__3816
293c8     15 31 52 F2 | 	cmps	local06, local03 wc
293cc     20 00 90 3D |  if_ae	jmp	#LR__3816
293d0     16 15 0A F6 | 	mov	arg02, local04 wz
293d4     00 FA 05 A6 |  if_e	mov	result1, #0
293d8     14 15 82 51 |  if_ne	sub	arg02, local02
293dc     04 14 46 50 |  if_ne	shr	arg02, #4
293e0     0A FB 01 56 |  if_ne	mov	result1, arg02
293e4     18 2D 02 F6 | 	mov	local04, local06
293e8     04 2C 06 F1 | 	add	local04, #4
293ec     16 FB 51 FC | 	wrword	result1, local04
293f0                 | LR__3816
293f0                 | LR__3817
293f0     18 FB 01 F6 | 	mov	result1, local06
293f4     A7 F0 03 F6 | 	mov	ptra, fp
293f8     B2 00 A0 FD | 	call	#popregs_
293fc                 | __system___gc_dofree_ret
293fc     2D 00 64 FD | 	ret
29400                 | 
29400                 | __system___gc_docollect
29400     05 4A 05 F6 | 	mov	COUNT_, #5
29404     A8 00 A0 FD | 	call	#pushregs_
29408     B8 F9 BF FD | 	call	#__system___gc_ptrs
2940c     FE 26 02 F6 | 	mov	local01, result2
29410     FD 28 02 F6 | 	mov	local02, result1
29414     14 13 02 F6 | 	mov	arg01, local02
29418     09 2B EA FA | 	rdword	local03, arg01 wz
2941c     00 FA 05 A6 |  if_e	mov	result1, #0
29420     04 2A 66 50 |  if_ne	shl	local03, #4
29424     15 13 02 51 |  if_ne	add	arg01, local03
29428     09 FB 01 56 |  if_ne	mov	result1, arg01
2942c     FD 2C 0A F6 | 	mov	local04, result1 wz
29430     00 FA 05 F6 | 	mov	result1, #0
29434     01 FA 61 FD | 	cogid	result1
29438     FD 2E 02 F6 | 	mov	local05, result1
2943c     48 00 90 AD |  if_e	jmp	#LR__3822
29440     97 22 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
29444                 | LR__3820
29444     13 2D 52 F2 | 	cmps	local04, local01 wc
29448     3C 00 90 3D |  if_ae	jmp	#LR__3822
2944c     16 15 02 F6 | 	mov	arg02, local04
29450     02 14 06 F1 | 	add	arg02, #2
29454     0A 15 E2 FA | 	rdword	arg02, arg02
29458     20 14 26 F5 | 	andn	arg02, #32
2945c     16 13 02 F6 | 	mov	arg01, local04
29460     02 12 06 F1 | 	add	arg01, #2
29464     09 15 52 FC | 	wrword	arg02, arg01
29468     16 13 02 F6 | 	mov	arg01, local04
2946c     09 2B EA FA | 	rdword	local03, arg01 wz
29470     00 FA 05 A6 |  if_e	mov	result1, #0
29474     04 2A 66 50 |  if_ne	shl	local03, #4
29478     15 13 02 51 |  if_ne	add	arg01, local03
2947c     09 FB 01 56 |  if_ne	mov	result1, arg01
29480     FD 2C 0A F6 | 	mov	local04, result1 wz
29484     BC FF 9F 5D |  if_ne	jmp	#LR__3820
29488                 | LR__3821
29488                 | LR__3822
29488     00 2A 06 F6 | 	mov	local03, #0
2948c     00 12 06 F6 | 	mov	arg01, #0
29490     B8 B9 BF FD | 	call	#__system____topofstack
29494     FD 14 02 F6 | 	mov	arg02, result1
29498     15 13 02 F6 | 	mov	arg01, local03
2949c     90 00 B0 FD | 	call	#__system___gc_markhub
294a0     1C 01 B0 FD | 	call	#__system___gc_markcog
294a4     14 13 02 F6 | 	mov	arg01, local02
294a8     09 2B EA FA | 	rdword	local03, arg01 wz
294ac     00 FA 05 A6 |  if_e	mov	result1, #0
294b0     04 2A 66 50 |  if_ne	shl	local03, #4
294b4     15 13 02 51 |  if_ne	add	arg01, local03
294b8     09 FB 01 56 |  if_ne	mov	result1, arg01
294bc     FD 28 0A F6 | 	mov	local02, result1 wz
294c0     60 00 90 AD |  if_e	jmp	#LR__3826
294c4                 | LR__3823
294c4     14 2D 02 F6 | 	mov	local04, local02
294c8     16 13 02 F6 | 	mov	arg01, local04
294cc     09 2B EA FA | 	rdword	local03, arg01 wz
294d0     00 FA 05 A6 |  if_e	mov	result1, #0
294d4     04 2A 66 50 |  if_ne	shl	local03, #4
294d8     15 13 02 51 |  if_ne	add	arg01, local03
294dc     09 FB 01 56 |  if_ne	mov	result1, arg01
294e0     FD 28 02 F6 | 	mov	local02, result1
294e4     16 15 02 F6 | 	mov	arg02, local04
294e8     02 14 06 F1 | 	add	arg02, #2
294ec     0A 15 E2 FA | 	rdword	arg02, arg02
294f0     20 14 CE F7 | 	test	arg02, #32 wz
294f4     10 14 CE A7 |  if_e	test	arg02, #16 wz
294f8     1C 00 90 5D |  if_ne	jmp	#LR__3825
294fc     0A 15 42 F8 | 	getnib	arg02, arg02, #0
29500     17 15 0A F2 | 	cmp	arg02, local05 wz
29504     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
29508     0C 00 90 5D |  if_ne	jmp	#LR__3824
2950c     16 13 02 F6 | 	mov	arg01, local04
29510     84 FC BF FD | 	call	#__system___gc_dofree
29514     FD 28 02 F6 | 	mov	local02, result1
29518                 | LR__3824
29518                 | LR__3825
29518     00 28 0E F2 | 	cmp	local02, #0 wz
2951c     13 29 52 52 |  if_ne	cmps	local02, local01 wc
29520     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3823
29524                 | LR__3826
29524     A7 F0 03 F6 | 	mov	ptra, fp
29528     B2 00 A0 FD | 	call	#popregs_
2952c                 | __system___gc_docollect_ret
2952c     2D 00 64 FD | 	ret
29530                 | 
29530                 | __system___gc_markhub
29530     04 4A 05 F6 | 	mov	COUNT_, #4
29534     A8 00 A0 FD | 	call	#pushregs_
29538     09 27 02 F6 | 	mov	local01, arg01
2953c     0A 29 02 F6 | 	mov	local02, arg02
29540     80 F8 BF FD | 	call	#__system___gc_ptrs
29544     FD 2A 02 F6 | 	mov	local03, result1
29548     FE 2C 02 F6 | 	mov	local04, result2
2954c                 | LR__3830
2954c     14 27 52 F2 | 	cmps	local01, local02 wc
29550     60 00 90 3D |  if_ae	jmp	#LR__3831
29554     13 17 02 FB | 	rdlong	arg03, local01
29558     04 26 06 F1 | 	add	local01, #4
2955c     16 15 02 F6 | 	mov	arg02, local04
29560     15 13 02 F6 | 	mov	arg01, local03
29564     8C FB BF FD | 	call	#__system___gc_isvalidptr
29568     FD 16 0A F6 | 	mov	arg03, result1 wz
2956c     DC FF 9F AD |  if_e	jmp	#LR__3830
29570     0B 13 02 F6 | 	mov	arg01, arg03
29574     00 FA 05 F6 | 	mov	result1, #0
29578     02 12 06 F1 | 	add	arg01, #2
2957c     09 13 E2 FA | 	rdword	arg01, arg01
29580     36 00 00 FF 
29584     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29588     01 FA 65 A6 |  if_e	neg	result1, #1
2958c     00 FA 0D F2 | 	cmp	result1, #0 wz
29590     B8 FF 9F 5D |  if_ne	jmp	#LR__3830
29594     0B FD 01 F6 | 	mov	result2, arg03
29598     02 FC 05 F1 | 	add	result2, #2
2959c     FE FC E1 FA | 	rdword	result2, result2
295a0     0F FC 25 F5 | 	andn	result2, #15
295a4     2E FC 45 F5 | 	or	result2, #46
295a8     02 16 06 F1 | 	add	arg03, #2
295ac     0B FD 51 FC | 	wrword	result2, arg03
295b0     98 FF 9F FD | 	jmp	#LR__3830
295b4                 | LR__3831
295b4     A7 F0 03 F6 | 	mov	ptra, fp
295b8     B2 00 A0 FD | 	call	#popregs_
295bc                 | __system___gc_markhub_ret
295bc     2D 00 64 FD | 	ret
295c0                 | 
295c0                 | __system___gc_markcog
295c0     04 4A 05 F6 | 	mov	COUNT_, #4
295c4     A8 00 A0 FD | 	call	#pushregs_
295c8     F8 F7 BF FD | 	call	#__system___gc_ptrs
295cc     FD 26 02 F6 | 	mov	local01, result1
295d0     FE 28 02 F6 | 	mov	local02, result2
295d4     EF 2B 06 F6 | 	mov	local03, #495
295d8                 | LR__3840
295d8                 | 	'.live	local03
295d8     00 2A 96 F9 | 	alts	local03, #0
295dc     15 2D 02 F6 | 	mov	local04, local03
295e0     13 13 02 F6 | 	mov	arg01, local01
295e4     14 15 02 F6 | 	mov	arg02, local02
295e8     16 17 02 F6 | 	mov	arg03, local04
295ec     04 FB BF FD | 	call	#__system___gc_isvalidptr
295f0     00 FA 0D F2 | 	cmp	result1, #0 wz
295f4     18 00 90 AD |  if_e	jmp	#LR__3841
295f8     FD 2C 02 F6 | 	mov	local04, result1
295fc     02 2C 06 F1 | 	add	local04, #2
29600     16 2D E2 FA | 	rdword	local04, local04
29604     20 2C 46 F5 | 	or	local04, #32
29608     02 FA 05 F1 | 	add	result1, #2
2960c     FD 2C 52 FC | 	wrword	local04, result1
29610                 | LR__3841
29610     01 2A 86 F1 | 	sub	local03, #1
29614     00 2A 56 F2 | 	cmps	local03, #0 wc
29618     BC FF 9F 3D |  if_ae	jmp	#LR__3840
2961c     A7 F0 03 F6 | 	mov	ptra, fp
29620     B2 00 A0 FD | 	call	#popregs_
29624                 | __system___gc_markcog_ret
29624     2D 00 64 FD | 	ret
29628                 | 
29628                 | __system__opendir
29628     06 4A 05 F6 | 	mov	COUNT_, #6
2962c     A8 00 A0 FD | 	call	#pushregs_
29630     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29634     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29638     09 15 02 F6 | 	mov	arg02, arg01
2963c     13 13 02 F6 | 	mov	arg01, local01
29640     00 16 06 F6 | 	mov	arg03, #0
29644     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29648     C0 BF BF FD | 	call	#__system____getvfsforfile
2964c     FD 28 0A F6 | 	mov	local02, result1 wz
29650     10 00 90 AD |  if_e	jmp	#LR__3850
29654     28 28 06 F1 | 	add	local02, #40
29658     14 17 0A FB | 	rdlong	arg03, local02 wz
2965c     28 28 86 F1 | 	sub	local02, #40
29660     14 00 90 5D |  if_ne	jmp	#LR__3851
29664                 | LR__3850
29664     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29668     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2966c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29670     00 FA 05 F6 | 	mov	result1, #0
29674     90 00 90 FD | 	jmp	#LR__3853
29678                 | LR__3851
29678     5C 12 06 F6 | 	mov	arg01, #92
2967c     10 14 06 F6 | 	mov	arg02, #16
29680     C0 F9 BF FD | 	call	#__system___gc_doalloc
29684     FD 2A 0A F6 | 	mov	local03, result1 wz
29688     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2968c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
29690     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29694     00 FA 05 A6 |  if_e	mov	result1, #0
29698     6C 00 90 AD |  if_e	jmp	#LR__3853
2969c     28 28 06 F1 | 	add	local02, #40
296a0     14 2D 02 FB | 	rdlong	local04, local02
296a4     16 2F 02 F6 | 	mov	local05, local04
296a8     28 28 86 F1 | 	sub	local02, #40
296ac     13 2E 46 F7 | 	zerox	local05, #19
296b0     14 2C 46 F0 | 	shr	local04, #20
296b4     02 2C 66 F0 | 	shl	local04, #2
296b8     ED 2C 02 F1 | 	add	local04, __methods__
296bc     16 2D 02 FB | 	rdlong	local04, local04
296c0     15 13 02 F6 | 	mov	arg01, local03
296c4     13 15 02 F6 | 	mov	arg02, local01
296c8     F2 30 02 F6 | 	mov	local06, objptr
296cc     17 E5 01 F6 | 	mov	objptr, local05
296d0     2D 2C 62 FD | 	call	local04
296d4     18 E5 01 F6 | 	mov	objptr, local06
296d8     FD 16 0A F6 | 	mov	arg03, result1 wz
296dc     20 00 90 AD |  if_e	jmp	#LR__3852
296e0     00 16 4E F2 | 	cmps	arg03, #0 wz
296e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
296e8     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
296ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
296f0     15 13 02 F6 | 	mov	arg01, local03
296f4     58 FA BF FD | 	call	#__system___gc_free
296f8     00 FA 05 F6 | 	mov	result1, #0
296fc     08 00 90 FD | 	jmp	#LR__3853
29700                 | LR__3852
29700     15 29 62 FC | 	wrlong	local02, local03
29704     15 FB 01 F6 | 	mov	result1, local03
29708                 | LR__3853
29708     A7 F0 03 F6 | 	mov	ptra, fp
2970c     B2 00 A0 FD | 	call	#popregs_
29710                 | __system__opendir_ret
29710     2D 00 64 FD | 	ret
29714                 | 
29714                 | __system__closedir
29714     04 4A 05 F6 | 	mov	COUNT_, #4
29718     A8 00 A0 FD | 	call	#pushregs_
2971c     09 27 02 F6 | 	mov	local01, arg01
29720     13 13 02 FB | 	rdlong	arg01, local01
29724     2C 12 06 F1 | 	add	arg01, #44
29728     09 29 02 FB | 	rdlong	local02, arg01
2972c     14 2B 02 F6 | 	mov	local03, local02
29730     13 2A 46 F7 | 	zerox	local03, #19
29734     14 28 46 F0 | 	shr	local02, #20
29738     02 28 66 F0 | 	shl	local02, #2
2973c     ED 28 02 F1 | 	add	local02, __methods__
29740     14 29 02 FB | 	rdlong	local02, local02
29744     13 13 02 F6 | 	mov	arg01, local01
29748     F2 2C 02 F6 | 	mov	local04, objptr
2974c     15 E5 01 F6 | 	mov	objptr, local03
29750     2D 28 62 FD | 	call	local02
29754     16 E5 01 F6 | 	mov	objptr, local04
29758     FD 2C 02 F6 | 	mov	local04, result1
2975c     13 13 02 F6 | 	mov	arg01, local01
29760     EC F9 BF FD | 	call	#__system___gc_free
29764     00 2C 4E F2 | 	cmps	local04, #0 wz
29768     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2976c     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
29770     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29774     01 FA 65 56 |  if_ne	neg	result1, #1
29778     00 FA 05 A6 |  if_e	mov	result1, #0
2977c     A7 F0 03 F6 | 	mov	ptra, fp
29780     B2 00 A0 FD | 	call	#popregs_
29784                 | __system__closedir_ret
29784     2D 00 64 FD | 	ret
29788                 | 
29788                 | __system__readdir
29788     04 4A 05 F6 | 	mov	COUNT_, #4
2978c     A8 00 A0 FD | 	call	#pushregs_
29790     09 15 0A FB | 	rdlong	arg02, arg01 wz
29794     08 12 06 F1 | 	add	arg01, #8
29798     09 27 02 F6 | 	mov	local01, arg01
2979c     08 12 86 F1 | 	sub	arg01, #8
297a0     00 FA 05 A6 |  if_e	mov	result1, #0
297a4     5C 00 90 AD |  if_e	jmp	#LR__3861
297a8     30 14 06 F1 | 	add	arg02, #48
297ac     0A 29 02 FB | 	rdlong	local02, arg02
297b0     14 2B 02 F6 | 	mov	local03, local02
297b4     13 2A 46 F7 | 	zerox	local03, #19
297b8     14 28 46 F0 | 	shr	local02, #20
297bc     02 28 66 F0 | 	shl	local02, #2
297c0     ED 28 02 F1 | 	add	local02, __methods__
297c4     14 29 02 FB | 	rdlong	local02, local02
297c8     13 15 02 F6 | 	mov	arg02, local01
297cc     F2 2C 02 F6 | 	mov	local04, objptr
297d0     15 E5 01 F6 | 	mov	objptr, local03
297d4     2D 28 62 FD | 	call	local02
297d8     16 E5 01 F6 | 	mov	objptr, local04
297dc     00 FA 4D F2 | 	cmps	result1, #0 wz
297e0     1C 00 90 AD |  if_e	jmp	#LR__3860
297e4     01 FA 55 F2 | 	cmps	result1, #1 wc
297e8     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
297ec     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
297f0     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
297f4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
297f8     00 FA 05 F6 | 	mov	result1, #0
297fc     04 00 90 FD | 	jmp	#LR__3861
29800                 | LR__3860
29800     13 FB 01 F6 | 	mov	result1, local01
29804                 | LR__3861
29804     A7 F0 03 F6 | 	mov	ptra, fp
29808     B2 00 A0 FD | 	call	#popregs_
2980c                 | __system__readdir_ret
2980c     2D 00 64 FD | 	ret
29810                 | 
29810                 | __system___openraw
29810     15 4A 05 F6 | 	mov	COUNT_, #21
29814     A8 00 A0 FD | 	call	#pushregs_
29818     09 27 02 F6 | 	mov	local01, arg01
2981c     0A 29 02 F6 | 	mov	local02, arg02
29820     0B 2B 02 F6 | 	mov	local03, arg03
29824     0C 2D 02 F6 | 	mov	local04, arg04
29828     04 2E 06 F6 | 	mov	local05, #4
2982c     13 31 02 F6 | 	mov	local06, local01
29830     00 32 06 F6 | 	mov	local07, #0
29834     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29838     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2983c     1A 13 02 F6 | 	mov	arg01, local08
29840     14 15 02 F6 | 	mov	arg02, local02
29844     00 16 06 F6 | 	mov	arg03, #0
29848     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2984c     BC BD BF FD | 	call	#__system____getvfsforfile
29850     FD 36 0A F6 | 	mov	local09, result1 wz
29854     10 00 90 AD |  if_e	jmp	#LR__3870
29858     20 36 06 F1 | 	add	local09, #32
2985c     1B FB 09 FB | 	rdlong	result1, local09 wz
29860     20 36 86 F1 | 	sub	local09, #32
29864     14 00 90 5D |  if_ne	jmp	#LR__3871
29868                 | LR__3870
29868     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2986c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29870     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29874     01 FA 65 F6 | 	neg	result1, #1
29878     8C 02 90 FD | 	jmp	#LR__3884
2987c                 | LR__3871
2987c     18 13 02 F6 | 	mov	arg01, local06
29880     00 14 06 F6 | 	mov	arg02, #0
29884     34 16 06 F6 | 	mov	arg03, #52
29888     09 39 02 F6 | 	mov	local10, arg01
2988c     98 00 A0 FD | 	call	#\builtin_bytefill_
29890     20 36 06 F1 | 	add	local09, #32
29894     1B 3B 02 FB | 	rdlong	local11, local09
29898     1D 3D 02 F6 | 	mov	local12, local11
2989c     1D 3F 02 F6 | 	mov	local13, local11
298a0     20 36 86 F1 | 	sub	local09, #32
298a4     1F 41 02 F6 | 	mov	local14, local13
298a8     13 3C 46 F7 | 	zerox	local12, #19
298ac     14 40 46 F0 | 	shr	local14, #20
298b0     02 40 66 F0 | 	shl	local14, #2
298b4     ED 40 02 F1 | 	add	local14, __methods__
298b8     20 41 02 FB | 	rdlong	local14, local14
298bc     18 43 02 F6 | 	mov	local15, local06
298c0     1A 45 02 F6 | 	mov	local16, local08
298c4     15 47 02 F6 | 	mov	local17, local03
298c8     21 13 02 F6 | 	mov	arg01, local15
298cc     22 15 02 F6 | 	mov	arg02, local16
298d0     23 17 02 F6 | 	mov	arg03, local17
298d4     F2 48 02 F6 | 	mov	local18, objptr
298d8     1E E5 01 F6 | 	mov	objptr, local12
298dc     2D 40 62 FD | 	call	local14
298e0     24 E5 01 F6 | 	mov	objptr, local18
298e4     FD 4A 0A F6 | 	mov	local19, result1 wz
298e8     04 2A CE 57 |  if_ne	test	local03, #4 wz
298ec     58 00 90 AD |  if_e	jmp	#LR__3872
298f0     24 36 06 F1 | 	add	local09, #36
298f4     1B 3B 02 FB | 	rdlong	local11, local09
298f8     1D 3D 02 F6 | 	mov	local12, local11
298fc     1D 3F 02 F6 | 	mov	local13, local11
29900     24 36 86 F1 | 	sub	local09, #36
29904     1F 41 02 F6 | 	mov	local14, local13
29908     13 3C 46 F7 | 	zerox	local12, #19
2990c     14 40 46 F0 | 	shr	local14, #20
29910     02 40 66 F0 | 	shl	local14, #2
29914     ED 40 02 F1 | 	add	local14, __methods__
29918     20 41 02 FB | 	rdlong	local14, local14
2991c     18 43 02 F6 | 	mov	local15, local06
29920     1A 45 02 F6 | 	mov	local16, local08
29924     16 47 02 F6 | 	mov	local17, local04
29928     21 13 02 F6 | 	mov	arg01, local15
2992c     22 15 02 F6 | 	mov	arg02, local16
29930     23 17 02 F6 | 	mov	arg03, local17
29934     F2 48 02 F6 | 	mov	local18, objptr
29938     1E E5 01 F6 | 	mov	objptr, local12
2993c     2D 40 62 FD | 	call	local14
29940     24 E5 01 F6 | 	mov	objptr, local18
29944     FD 4A 02 F6 | 	mov	local19, result1
29948                 | LR__3872
29948     00 4A 0E F2 | 	cmp	local19, #0 wz
2994c     8C 01 90 5D |  if_ne	jmp	#LR__3882
29950     15 4D 02 F6 | 	mov	local20, local03
29954     03 4C 0E F5 | 	and	local20, #3 wz
29958     02 2E 46 55 |  if_ne	or	local05, #2
2995c     01 4C 0E F2 | 	cmp	local20, #1 wz
29960     01 2E 46 55 |  if_ne	or	local05, #1
29964     20 2A CE F7 | 	test	local03, #32 wz
29968     C0 2E 46 55 |  if_ne	or	local05, #192
2996c     08 30 06 F1 | 	add	local06, #8
29970     18 2F 62 FC | 	wrlong	local05, local06
29974     0C 30 06 F1 | 	add	local06, #12
29978     18 4F 0A FB | 	rdlong	local21, local06 wz
2997c     14 30 86 F1 | 	sub	local06, #20
29980     18 00 90 5D |  if_ne	jmp	#LR__3873
29984     04 36 06 F1 | 	add	local09, #4
29988     1B 4F 02 FB | 	rdlong	local21, local09
2998c     04 36 86 F1 | 	sub	local09, #4
29990     14 30 06 F1 | 	add	local06, #20
29994     18 4F 62 FC | 	wrlong	local21, local06
29998     14 30 86 F1 | 	sub	local06, #20
2999c                 | LR__3873
2999c     18 30 06 F1 | 	add	local06, #24
299a0     18 4F 0A FB | 	rdlong	local21, local06 wz
299a4     18 30 86 F1 | 	sub	local06, #24
299a8     18 00 90 5D |  if_ne	jmp	#LR__3874
299ac     08 36 06 F1 | 	add	local09, #8
299b0     1B 4F 02 FB | 	rdlong	local21, local09
299b4     08 36 86 F1 | 	sub	local09, #8
299b8     18 30 06 F1 | 	add	local06, #24
299bc     18 4F 62 FC | 	wrlong	local21, local06
299c0     18 30 86 F1 | 	sub	local06, #24
299c4                 | LR__3874
299c4     24 30 06 F1 | 	add	local06, #36
299c8     18 4F 0A FB | 	rdlong	local21, local06 wz
299cc     24 30 86 F1 | 	sub	local06, #36
299d0     1B 4F 02 AB |  if_e	rdlong	local21, local09
299d4     24 30 06 A1 |  if_e	add	local06, #36
299d8     18 4F 62 AC |  if_e	wrlong	local21, local06
299dc     24 30 86 A1 |  if_e	sub	local06, #36
299e0     28 30 06 F1 | 	add	local06, #40
299e4     18 4F 0A FB | 	rdlong	local21, local06 wz
299e8     28 30 86 F1 | 	sub	local06, #40
299ec     18 00 90 5D |  if_ne	jmp	#LR__3875
299f0     10 36 06 F1 | 	add	local09, #16
299f4     1B 4F 02 FB | 	rdlong	local21, local09
299f8     10 36 86 F1 | 	sub	local09, #16
299fc     28 30 06 F1 | 	add	local06, #40
29a00     18 4F 62 FC | 	wrlong	local21, local06
29a04     28 30 86 F1 | 	sub	local06, #40
29a08                 | LR__3875
29a08     30 30 06 F1 | 	add	local06, #48
29a0c     18 4F 0A FB | 	rdlong	local21, local06 wz
29a10     30 30 86 F1 | 	sub	local06, #48
29a14     18 00 90 5D |  if_ne	jmp	#LR__3876
29a18     0C 36 06 F1 | 	add	local09, #12
29a1c     1B 4F 02 FB | 	rdlong	local21, local09
29a20     0C 36 86 F1 | 	sub	local09, #12
29a24     30 30 06 F1 | 	add	local06, #48
29a28     18 4F 62 FC | 	wrlong	local21, local06
29a2c     30 30 86 F1 | 	sub	local06, #48
29a30                 | LR__3876
29a30     1C 30 06 F1 | 	add	local06, #28
29a34     18 4F 0A FB | 	rdlong	local21, local06 wz
29a38     1C 30 86 F1 | 	sub	local06, #28
29a3c     1C 00 90 5D |  if_ne	jmp	#LR__3877
29a40     01 32 06 F6 | 	mov	local07, #1
29a44     F2 12 02 F6 | 	mov	arg01, objptr
29a48     00 18 05 FF 
29a4c     00 12 46 F5 | 	or	arg01, ##170917888
29a50     1C 30 06 F1 | 	add	local06, #28
29a54     18 13 62 FC | 	wrlong	arg01, local06
29a58     1C 30 86 F1 | 	sub	local06, #28
29a5c                 | LR__3877
29a5c     20 30 06 F1 | 	add	local06, #32
29a60     18 4F 0A FB | 	rdlong	local21, local06 wz
29a64     20 30 86 F1 | 	sub	local06, #32
29a68     1C 00 90 5D |  if_ne	jmp	#LR__3878
29a6c     01 32 06 F6 | 	mov	local07, #1
29a70     F2 12 02 F6 | 	mov	arg01, objptr
29a74     00 20 05 FF 
29a78     00 12 46 F5 | 	or	arg01, ##171966464
29a7c     20 30 06 F1 | 	add	local06, #32
29a80     18 13 62 FC | 	wrlong	arg01, local06
29a84     20 30 86 F1 | 	sub	local06, #32
29a88                 | LR__3878
29a88     2C 30 06 F1 | 	add	local06, #44
29a8c     18 4F 0A FB | 	rdlong	local21, local06 wz
29a90     2C 30 86 F1 | 	sub	local06, #44
29a94     44 00 90 5D |  if_ne	jmp	#LR__3881
29a98     14 36 06 F1 | 	add	local09, #20
29a9c     1B 4F 0A FB | 	rdlong	local21, local09 wz
29aa0     14 36 86 F1 | 	sub	local09, #20
29aa4     18 00 90 AD |  if_e	jmp	#LR__3879
29aa8     14 36 06 F1 | 	add	local09, #20
29aac     1B 4F 02 FB | 	rdlong	local21, local09
29ab0     2C 30 06 F1 | 	add	local06, #44
29ab4     18 4F 62 FC | 	wrlong	local21, local06
29ab8     2C 30 86 F1 | 	sub	local06, #44
29abc     1C 00 90 FD | 	jmp	#LR__3880
29ac0                 | LR__3879
29ac0     01 32 06 F6 | 	mov	local07, #1
29ac4     F2 12 02 F6 | 	mov	arg01, objptr
29ac8     00 28 05 FF 
29acc     00 12 46 F5 | 	or	arg01, ##173015040
29ad0     2C 30 06 F1 | 	add	local06, #44
29ad4     18 13 62 FC | 	wrlong	arg01, local06
29ad8     2C 30 86 F1 | 	sub	local06, #44
29adc                 | LR__3880
29adc                 | LR__3881
29adc                 | LR__3882
29adc     00 32 0E F2 | 	cmp	local07, #0 wz
29ae0     18 13 02 56 |  if_ne	mov	arg01, local06
29ae4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
29ae8     00 4A 0E F2 | 	cmp	local19, #0 wz
29aec     00 12 06 A6 |  if_e	mov	arg01, #0
29af0     10 00 90 5D |  if_ne	jmp	#LR__3883
29af4     00 12 4E F2 | 	cmps	arg01, #0 wz
29af8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29afc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29b00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29b04                 | LR__3883
29b04     25 FB 01 F6 | 	mov	result1, local19
29b08                 | LR__3884
29b08     A7 F0 03 F6 | 	mov	ptra, fp
29b0c     B2 00 A0 FD | 	call	#popregs_
29b10                 | __system___openraw_ret
29b10     2D 00 64 FD | 	ret
29b14                 | 
29b14                 | __system___closeraw
29b14     05 4A 05 F6 | 	mov	COUNT_, #5
29b18     A8 00 A0 FD | 	call	#pushregs_
29b1c     09 27 02 F6 | 	mov	local01, arg01
29b20     00 28 06 F6 | 	mov	local02, #0
29b24     08 26 06 F1 | 	add	local01, #8
29b28     13 FB 09 FB | 	rdlong	result1, local01 wz
29b2c     08 26 86 F1 | 	sub	local01, #8
29b30     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29b34     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29b38     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29b3c     01 FA 65 A6 |  if_e	neg	result1, #1
29b40     A8 00 90 AD |  if_e	jmp	#LR__3892
29b44     2C 26 06 F1 | 	add	local01, #44
29b48     13 FB 09 FB | 	rdlong	result1, local01 wz
29b4c     2C 26 86 F1 | 	sub	local01, #44
29b50     38 00 90 AD |  if_e	jmp	#LR__3890
29b54     2C 26 06 F1 | 	add	local01, #44
29b58     13 2B 02 FB | 	rdlong	local03, local01
29b5c     15 2D 02 F6 | 	mov	local04, local03
29b60     2C 26 86 F1 | 	sub	local01, #44
29b64     13 2C 46 F7 | 	zerox	local04, #19
29b68     14 2A 46 F0 | 	shr	local03, #20
29b6c     02 2A 66 F0 | 	shl	local03, #2
29b70     ED 2A 02 F1 | 	add	local03, __methods__
29b74     15 2B 02 FB | 	rdlong	local03, local03
29b78     13 13 02 F6 | 	mov	arg01, local01
29b7c     F2 2E 02 F6 | 	mov	local05, objptr
29b80     16 E5 01 F6 | 	mov	objptr, local04
29b84     2D 2A 62 FD | 	call	local03
29b88     17 E5 01 F6 | 	mov	objptr, local05
29b8c                 | LR__3890
29b8c     24 26 06 F1 | 	add	local01, #36
29b90     13 2F 0A FB | 	rdlong	local05, local01 wz
29b94     24 26 86 F1 | 	sub	local01, #36
29b98     3C 00 90 AD |  if_e	jmp	#LR__3891
29b9c     24 26 06 F1 | 	add	local01, #36
29ba0     13 2B 02 FB | 	rdlong	local03, local01
29ba4     15 2D 02 F6 | 	mov	local04, local03
29ba8     24 26 86 F1 | 	sub	local01, #36
29bac     13 2C 46 F7 | 	zerox	local04, #19
29bb0     14 2A 46 F0 | 	shr	local03, #20
29bb4     02 2A 66 F0 | 	shl	local03, #2
29bb8     ED 2A 02 F1 | 	add	local03, __methods__
29bbc     15 2B 02 FB | 	rdlong	local03, local03
29bc0     13 13 02 F6 | 	mov	arg01, local01
29bc4     F2 2E 02 F6 | 	mov	local05, objptr
29bc8     16 E5 01 F6 | 	mov	objptr, local04
29bcc     2D 2A 62 FD | 	call	local03
29bd0     17 E5 01 F6 | 	mov	objptr, local05
29bd4     FD 28 02 F6 | 	mov	local02, result1
29bd8                 | LR__3891
29bd8     13 13 02 F6 | 	mov	arg01, local01
29bdc     00 14 06 F6 | 	mov	arg02, #0
29be0     34 16 06 F6 | 	mov	arg03, #52
29be4     98 00 A0 FD | 	call	#\builtin_bytefill_
29be8     14 FB 01 F6 | 	mov	result1, local02
29bec                 | LR__3892
29bec     A7 F0 03 F6 | 	mov	ptra, fp
29bf0     B2 00 A0 FD | 	call	#popregs_
29bf4                 | __system___closeraw_ret
29bf4     2D 00 64 FD | 	ret
29bf8                 | 
29bf8                 | __system___vfs_open_sdcardx
29bf8     0B 4A 05 F6 | 	mov	COUNT_, #11
29bfc     A8 00 A0 FD | 	call	#pushregs_
29c00     09 2B 02 F6 | 	mov	local03, arg01
29c04     0A 2D 02 F6 | 	mov	local04, arg02
29c08     0B 2F 02 F6 | 	mov	local05, arg03
29c0c     0C 31 02 F6 | 	mov	local06, arg04
29c10     01 00 00 FF 
29c14     24 12 06 F6 | 	mov	arg01, ##548
29c18     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
29c1c     FD 32 02 F6 | 	mov	local07, result1
29c20     01 00 00 FF 
29c24     34 12 06 F6 | 	mov	arg01, ##564
29c28     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
29c2c     FD 34 02 F6 | 	mov	local08, result1
29c30     15 19 02 F6 | 	mov	arg04, local03
29c34     1F 18 C6 F0 | 	sar	arg04, #31
29c38     15 17 02 F6 | 	mov	arg03, local03
29c3c     01 12 06 F6 | 	mov	arg01, #1
29c40     00 14 06 F6 | 	mov	arg02, #0
29c44     EC DB BF FD | 	call	#__system___int64_shl
29c48     FD 26 02 F6 | 	mov	local01, result1
29c4c     FE 36 02 F6 | 	mov	local09, result2
29c50     16 19 02 F6 | 	mov	arg04, local04
29c54     1F 18 C6 F0 | 	sar	arg04, #31
29c58     16 17 02 F6 | 	mov	arg03, local04
29c5c     01 12 06 F6 | 	mov	arg01, #1
29c60     00 14 06 F6 | 	mov	arg02, #0
29c64     CC DB BF FD | 	call	#__system___int64_shl
29c68     FD 26 42 F5 | 	or	local01, result1
29c6c     FE 36 42 F5 | 	or	local09, result2
29c70     17 19 02 F6 | 	mov	arg04, local05
29c74     1F 18 C6 F0 | 	sar	arg04, #31
29c78     17 17 02 F6 | 	mov	arg03, local05
29c7c     01 12 06 F6 | 	mov	arg01, #1
29c80     00 14 06 F6 | 	mov	arg02, #0
29c84     AC DB BF FD | 	call	#__system___int64_shl
29c88     FD 26 42 F5 | 	or	local01, result1
29c8c     FE 36 42 F5 | 	or	local09, result2
29c90     18 19 02 F6 | 	mov	arg04, local06
29c94     1F 18 C6 F0 | 	sar	arg04, #31
29c98     18 17 02 F6 | 	mov	arg03, local06
29c9c     01 12 06 F6 | 	mov	arg01, #1
29ca0     00 14 06 F6 | 	mov	arg02, #0
29ca4     8C DB BF FD | 	call	#__system___int64_shl
29ca8     1B 15 02 F6 | 	mov	arg02, local09
29cac     FD 26 42 F5 | 	or	local01, result1
29cb0     0A FD 41 F5 | 	or	result2, arg02
29cb4     FE 28 02 F6 | 	mov	local02, result2
29cb8     13 13 02 F6 | 	mov	arg01, local01
29cbc     14 15 02 F6 | 	mov	arg02, local02
29cc0     A8 DB BF FD | 	call	#__system___usepins
29cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
29cc8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29ccc     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
29cd0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29cd4     00 FA 05 A6 |  if_e	mov	result1, #0
29cd8     B4 00 90 AD |  if_e	jmp	#LR__3902
29cdc     13 39 02 F6 | 	mov	local10, local01
29ce0     14 37 02 F6 | 	mov	local09, local02
29ce4     01 00 00 FF 
29ce8     08 32 06 F1 | 	add	local07, ##520
29cec     19 39 62 FC | 	wrlong	local10, local07
29cf0     04 32 06 F1 | 	add	local07, #4
29cf4     19 37 62 FC | 	wrlong	local09, local07
29cf8     01 00 00 FF 
29cfc     0C 32 86 F1 | 	sub	local07, ##524
29d00     18 1B 02 F6 | 	mov	arg05, local06
29d04     00 12 06 F6 | 	mov	arg01, #0
29d08     15 15 02 F6 | 	mov	arg02, local03
29d0c     16 17 02 F6 | 	mov	arg03, local04
29d10     17 19 02 F6 | 	mov	arg04, local05
29d14     F2 38 02 F6 | 	mov	local10, objptr
29d18     19 E5 01 F6 | 	mov	objptr, local07
29d1c     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
29d20     1C E5 01 F6 | 	mov	objptr, local10
29d24     FD 3A 0A F6 | 	mov	local11, result1 wz
29d28     24 00 90 5D |  if_ne	jmp	#LR__3900
29d2c     A4 01 00 FF 
29d30     EA 15 06 F6 | 	mov	arg02, ##@LR__5317
29d34     1A 13 02 F6 | 	mov	arg01, local08
29d38     00 16 06 F6 | 	mov	arg03, #0
29d3c     F2 3A 02 F6 | 	mov	local11, objptr
29d40     19 E5 01 F6 | 	mov	objptr, local07
29d44     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
29d48     1D E5 01 F6 | 	mov	objptr, local11
29d4c     FD 3A 02 F6 | 	mov	local11, result1
29d50                 | LR__3900
29d50     00 3A 0E F2 | 	cmp	local11, #0 wz
29d54     24 00 90 AD |  if_e	jmp	#LR__3901
29d58     13 13 02 F6 | 	mov	arg01, local01
29d5c     14 15 02 F6 | 	mov	arg02, local02
29d60     5C DB BF FD | 	call	#__system___freepins
29d64     1D 13 6A F6 | 	neg	arg01, local11 wz
29d68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29d6c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29d70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29d74     00 FA 05 F6 | 	mov	result1, #0
29d78     14 00 90 FD | 	jmp	#LR__3902
29d7c                 | LR__3901
29d7c     19 13 02 F6 | 	mov	arg01, local07
29d80     F2 3A 02 F6 | 	mov	local11, objptr
29d84     19 E5 01 F6 | 	mov	objptr, local07
29d88     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
29d8c     1D E5 01 F6 | 	mov	objptr, local11
29d90                 | LR__3902
29d90     A7 F0 03 F6 | 	mov	ptra, fp
29d94     B2 00 A0 FD | 	call	#popregs_
29d98                 | __system___vfs_open_sdcardx_ret
29d98     2D 00 64 FD | 	ret
29d9c                 | 
29d9c                 | __system____default_getc
29d9c     03 4A 05 F6 | 	mov	COUNT_, #3
29da0     A8 00 A0 FD | 	call	#pushregs_
29da4     09 27 02 F6 | 	mov	local01, arg01
29da8     13 29 02 FB | 	rdlong	local02, local01
29dac     08 28 06 F1 | 	add	local02, #8
29db0     14 2B 02 FB | 	rdlong	local03, local02
29db4     02 2A CE F7 | 	test	local03, #2 wz
29db8     13 13 02 56 |  if_ne	mov	arg01, local01
29dbc     00 01 B0 5D |  if_ne	call	#__system____default_flush
29dc0     14 2B 02 FB | 	rdlong	local03, local02
29dc4     01 2A 46 F5 | 	or	local03, #1
29dc8     14 2B 62 FC | 	wrlong	local03, local02
29dcc     08 28 86 F1 | 	sub	local02, #8
29dd0     14 2B 0A FB | 	rdlong	local03, local02 wz
29dd4     0C 00 90 5D |  if_ne	jmp	#LR__3910
29dd8     13 13 02 F6 | 	mov	arg01, local01
29ddc     68 18 B0 FD | 	call	#__system____default_filbuf
29de0     FD 2A 02 F6 | 	mov	local03, result1
29de4                 | LR__3910
29de4     01 2A 56 F2 | 	cmps	local03, #1 wc
29de8     01 FA 65 C6 |  if_b	neg	result1, #1
29dec     1C 00 90 CD |  if_b	jmp	#LR__3911
29df0     01 2A 86 F1 | 	sub	local03, #1
29df4     14 2B 62 FC | 	wrlong	local03, local02
29df8     04 28 06 F1 | 	add	local02, #4
29dfc     14 2B 02 FB | 	rdlong	local03, local02
29e00     15 FB C1 FA | 	rdbyte	result1, local03
29e04     01 2A 06 F1 | 	add	local03, #1
29e08     14 2B 62 FC | 	wrlong	local03, local02
29e0c                 | LR__3911
29e0c     A7 F0 03 F6 | 	mov	ptra, fp
29e10     B2 00 A0 FD | 	call	#popregs_
29e14                 | __system____default_getc_ret
29e14     2D 00 64 FD | 	ret
29e18                 | 
29e18                 | __system____default_putc
29e18     06 4A 05 F6 | 	mov	COUNT_, #6
29e1c     A8 00 A0 FD | 	call	#pushregs_
29e20     09 27 02 F6 | 	mov	local01, arg01
29e24     0A 29 02 F6 | 	mov	local02, arg02
29e28     14 2B 02 FB | 	rdlong	local03, local02
29e2c     08 2A 06 F1 | 	add	local03, #8
29e30     15 FB 01 FB | 	rdlong	result1, local03
29e34     01 FA CD F7 | 	test	result1, #1 wz
29e38     14 13 02 56 |  if_ne	mov	arg01, local02
29e3c     80 00 B0 5D |  if_ne	call	#__system____default_flush
29e40     15 2D 02 FB | 	rdlong	local04, local03
29e44     02 2C 46 F5 | 	or	local04, #2
29e48     15 2D 62 FC | 	wrlong	local04, local03
29e4c     08 2A 86 F1 | 	sub	local03, #8
29e50     15 2F 02 FB | 	rdlong	local05, local03
29e54     10 2A 06 F1 | 	add	local03, #16
29e58     15 15 02 FB | 	rdlong	arg02, local03
29e5c     10 2A 86 F1 | 	sub	local03, #16
29e60     17 FB 01 F6 | 	mov	result1, local05
29e64     0A FB 01 F1 | 	add	result1, arg02
29e68     FD 26 42 FC | 	wrbyte	local01, result1
29e6c     13 27 E2 F8 | 	getbyte	local01, local01, #0
29e70     01 2E 06 F1 | 	add	local05, #1
29e74     15 2F 62 FC | 	wrlong	local05, local03
29e78     06 28 06 F1 | 	add	local02, #6
29e7c     14 31 EA FA | 	rdword	local06, local02 wz
29e80     06 28 86 F1 | 	sub	local02, #6
29e84     0C 2A 06 51 |  if_ne	add	local03, #12
29e88     15 2D 02 5B |  if_ne	rdlong	local04, local03
29e8c     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
29e90     0C 00 90 AD |  if_e	jmp	#LR__3920
29e94     0A 26 0E F2 | 	cmp	local01, #10 wz
29e98     01 30 0E A2 |  if_e	cmp	local06, #1 wz
29e9c     10 00 90 5D |  if_ne	jmp	#LR__3921
29ea0                 | LR__3920
29ea0     14 13 02 F6 | 	mov	arg01, local02
29ea4     18 00 B0 FD | 	call	#__system____default_flush
29ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
29eac     01 26 66 56 |  if_ne	neg	local01, #1
29eb0                 | LR__3921
29eb0     13 FB 01 F6 | 	mov	result1, local01
29eb4     A7 F0 03 F6 | 	mov	ptra, fp
29eb8     B2 00 A0 FD | 	call	#popregs_
29ebc                 | __system____default_putc_ret
29ebc     2D 00 64 FD | 	ret
29ec0                 | 
29ec0                 | __system____default_flush
29ec0     06 4A 05 F6 | 	mov	COUNT_, #6
29ec4     A8 00 A0 FD | 	call	#pushregs_
29ec8     09 27 02 F6 | 	mov	local01, arg01
29ecc     13 29 02 FB | 	rdlong	local02, local01
29ed0     14 2B 02 FB | 	rdlong	local03, local02
29ed4     08 28 06 F1 | 	add	local02, #8
29ed8     14 FB 01 FB | 	rdlong	result1, local02
29edc     08 28 86 F1 | 	sub	local02, #8
29ee0     02 FA CD F7 | 	test	result1, #2 wz
29ee4     D0 00 90 AD |  if_e	jmp	#LR__3932
29ee8     01 2A 56 F2 | 	cmps	local03, #1 wc
29eec     20 01 90 CD |  if_b	jmp	#LR__3934
29ef0     08 26 06 F1 | 	add	local01, #8
29ef4     13 FB 01 FB | 	rdlong	result1, local01
29ef8     08 26 86 F1 | 	sub	local01, #8
29efc     40 FA CD F7 | 	test	result1, #64 wz
29f00     68 00 90 AD |  if_e	jmp	#LR__3931
29f04     08 26 06 F1 | 	add	local01, #8
29f08     13 17 02 FB | 	rdlong	arg03, local01
29f0c     08 26 86 F1 | 	sub	local01, #8
29f10     80 16 CE F7 | 	test	arg03, #128 wz
29f14     54 00 90 AD |  if_e	jmp	#LR__3930
29f18     30 26 06 F1 | 	add	local01, #48
29f1c     13 2D 02 FB | 	rdlong	local04, local01
29f20     16 2F 02 F6 | 	mov	local05, local04
29f24     30 26 86 F1 | 	sub	local01, #48
29f28     13 2E 46 F7 | 	zerox	local05, #19
29f2c     14 2C 46 F0 | 	shr	local04, #20
29f30     02 2C 66 F0 | 	shl	local04, #2
29f34     ED 2C 02 F1 | 	add	local04, __methods__
29f38     16 2D 02 FB | 	rdlong	local04, local04
29f3c     13 13 02 F6 | 	mov	arg01, local01
29f40     00 14 06 F6 | 	mov	arg02, #0
29f44     02 16 06 F6 | 	mov	arg03, #2
29f48     F2 30 02 F6 | 	mov	local06, objptr
29f4c     17 E5 01 F6 | 	mov	objptr, local05
29f50     2D 2C 62 FD | 	call	local04
29f54     18 E5 01 F6 | 	mov	objptr, local06
29f58     08 26 06 F1 | 	add	local01, #8
29f5c     13 31 02 FB | 	rdlong	local06, local01
29f60     80 30 26 F5 | 	andn	local06, #128
29f64     13 31 62 FC | 	wrlong	local06, local01
29f68     08 26 86 F1 | 	sub	local01, #8
29f6c                 | LR__3930
29f6c                 | LR__3931
29f6c     18 26 06 F1 | 	add	local01, #24
29f70     13 2D 02 FB | 	rdlong	local04, local01
29f74     16 2F 02 F6 | 	mov	local05, local04
29f78     18 26 86 F1 | 	sub	local01, #24
29f7c     13 2E 46 F7 | 	zerox	local05, #19
29f80     14 2C 46 F0 | 	shr	local04, #20
29f84     02 2C 66 F0 | 	shl	local04, #2
29f88     ED 2C 02 F1 | 	add	local04, __methods__
29f8c     16 2D 02 FB | 	rdlong	local04, local04
29f90     10 28 06 F1 | 	add	local02, #16
29f94     14 15 02 FB | 	rdlong	arg02, local02
29f98     10 28 86 F1 | 	sub	local02, #16
29f9c     13 13 02 F6 | 	mov	arg01, local01
29fa0     15 17 02 F6 | 	mov	arg03, local03
29fa4     F2 30 02 F6 | 	mov	local06, objptr
29fa8     17 E5 01 F6 | 	mov	objptr, local05
29fac     2D 2C 62 FD | 	call	local04
29fb0     18 E5 01 F6 | 	mov	objptr, local06
29fb4     58 00 90 FD | 	jmp	#LR__3934
29fb8                 | LR__3932
29fb8     08 28 06 F1 | 	add	local02, #8
29fbc     14 31 02 FB | 	rdlong	local06, local02
29fc0     08 28 86 F1 | 	sub	local02, #8
29fc4     01 30 CE F7 | 	test	local06, #1 wz
29fc8     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
29fcc     40 00 90 AD |  if_e	jmp	#LR__3933
29fd0     30 26 06 F1 | 	add	local01, #48
29fd4     13 2D 02 FB | 	rdlong	local04, local01
29fd8     16 2F 02 F6 | 	mov	local05, local04
29fdc     30 26 86 F1 | 	sub	local01, #48
29fe0     13 2E 46 F7 | 	zerox	local05, #19
29fe4     14 2C 46 F0 | 	shr	local04, #20
29fe8     02 2C 66 F0 | 	shl	local04, #2
29fec     ED 2C 02 F1 | 	add	local04, __methods__
29ff0     16 2D 02 FB | 	rdlong	local04, local04
29ff4     13 13 02 F6 | 	mov	arg01, local01
29ff8     15 15 62 F6 | 	neg	arg02, local03
29ffc     01 16 06 F6 | 	mov	arg03, #1
2a000     F2 30 02 F6 | 	mov	local06, objptr
2a004     17 E5 01 F6 | 	mov	objptr, local05
2a008     2D 2C 62 FD | 	call	local04
2a00c     18 E5 01 F6 | 	mov	objptr, local06
2a010                 | LR__3933
2a010                 | LR__3934
2a010     14 01 68 FC | 	wrlong	#0, local02
2a014     04 28 06 F1 | 	add	local02, #4
2a018     14 01 68 FC | 	wrlong	#0, local02
2a01c     04 28 06 F1 | 	add	local02, #4
2a020     14 01 68 FC | 	wrlong	#0, local02
2a024     00 FA 05 F6 | 	mov	result1, #0
2a028     A7 F0 03 F6 | 	mov	ptra, fp
2a02c     B2 00 A0 FD | 	call	#popregs_
2a030                 | __system____default_flush_ret
2a030     2D 00 64 FD | 	ret
2a034                 | 
2a034                 | __system____default_buffer_init
2a034     02 4A 05 F6 | 	mov	COUNT_, #2
2a038     A8 00 A0 FD | 	call	#pushregs_
2a03c     09 27 02 F6 | 	mov	local01, arg01
2a040     13 29 02 FB | 	rdlong	local02, local01
2a044     13 13 02 F6 | 	mov	arg01, local01
2a048     34 03 B0 FD | 	call	#__system___isatty
2a04c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a050     06 26 06 51 |  if_ne	add	local01, #6
2a054     13 0B 58 5C |  if_ne	wrword	#5, local01
2a058     06 26 06 A1 |  if_e	add	local01, #6
2a05c     13 0D 58 AC |  if_e	wrword	#6, local01
2a060     14 28 06 F1 | 	add	local02, #20
2a064     14 27 02 F6 | 	mov	local01, local02
2a068     04 28 86 F1 | 	sub	local02, #4
2a06c     14 27 62 FC | 	wrlong	local01, local02
2a070     04 28 86 F1 | 	sub	local02, #4
2a074     02 00 80 FF 
2a078     14 01 68 FC | 	wrlong	##1024, local02
2a07c     00 FA 05 F6 | 	mov	result1, #0
2a080     A7 F0 03 F6 | 	mov	ptra, fp
2a084     B2 00 A0 FD | 	call	#popregs_
2a088                 | __system____default_buffer_init_ret
2a088     2D 00 64 FD | 	ret
2a08c                 | 
2a08c                 | __system__stat
2a08c     04 4A 05 F6 | 	mov	COUNT_, #4
2a090     A8 00 A0 FD | 	call	#pushregs_
2a094     0A 27 02 F6 | 	mov	local01, arg02
2a098     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a09c     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2a0a0     09 15 02 F6 | 	mov	arg02, arg01
2a0a4     14 13 02 F6 | 	mov	arg01, local02
2a0a8     00 16 06 F6 | 	mov	arg03, #0
2a0ac     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a0b0     58 B5 BF FD | 	call	#__system____getvfsforfile
2a0b4     FD 2A 0A F6 | 	mov	local03, result1 wz
2a0b8     10 00 90 AD |  if_e	jmp	#LR__3940
2a0bc     34 2A 06 F1 | 	add	local03, #52
2a0c0     15 17 0A FB | 	rdlong	arg03, local03 wz
2a0c4     34 2A 86 F1 | 	sub	local03, #52
2a0c8     14 00 90 5D |  if_ne	jmp	#LR__3941
2a0cc                 | LR__3940
2a0cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a0d0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a0d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a0d8     01 FA 65 F6 | 	neg	result1, #1
2a0dc     68 00 90 FD | 	jmp	#LR__3942
2a0e0                 | LR__3941
2a0e0     13 13 02 F6 | 	mov	arg01, local01
2a0e4     00 14 06 F6 | 	mov	arg02, #0
2a0e8     30 16 06 F6 | 	mov	arg03, #48
2a0ec     09 2D 02 F6 | 	mov	local04, arg01
2a0f0     98 00 A0 FD | 	call	#\builtin_bytefill_
2a0f4     16 FB 01 F6 | 	mov	result1, local04
2a0f8     14 13 CA FA | 	rdbyte	arg01, local02 wz
2a0fc     08 26 06 A1 |  if_e	add	local01, #8
2a100     08 00 80 AF 
2a104     13 FF 6B AC |  if_e	wrlong	##4607, local01
2a108     00 FA 05 A6 |  if_e	mov	result1, #0
2a10c     38 00 90 AD |  if_e	jmp	#LR__3942
2a110     34 2A 06 F1 | 	add	local03, #52
2a114     15 2B 02 FB | 	rdlong	local03, local03
2a118     15 2D 02 F6 | 	mov	local04, local03
2a11c     13 2A 46 F7 | 	zerox	local03, #19
2a120     14 2C 46 F0 | 	shr	local04, #20
2a124     02 2C 66 F0 | 	shl	local04, #2
2a128     ED 2C 02 F1 | 	add	local04, __methods__
2a12c     16 2D 02 FB | 	rdlong	local04, local04
2a130     14 13 02 F6 | 	mov	arg01, local02
2a134     13 15 02 F6 | 	mov	arg02, local01
2a138     F2 28 02 F6 | 	mov	local02, objptr
2a13c     15 E5 01 F6 | 	mov	objptr, local03
2a140     2D 2C 62 FD | 	call	local04
2a144     14 E5 01 F6 | 	mov	objptr, local02
2a148                 | LR__3942
2a148     A7 F0 03 F6 | 	mov	ptra, fp
2a14c     B2 00 A0 FD | 	call	#popregs_
2a150                 | __system__stat_ret
2a150     2D 00 64 FD | 	ret
2a154                 | 
2a154                 | __system__write
2a154     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a158     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a15c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a160     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a164     01 FA 65 36 |  if_ae	neg	result1, #1
2a168     20 00 90 3D |  if_ae	jmp	#LR__3950
2a16c     34 12 06 FD | 	qmul	arg01, #52
2a170     02 00 00 FF 
2a174     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a178     18 12 62 FD | 	getqx	arg01
2a17c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2a180     02 00 00 FF 
2a184     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a188     0C 10 B0 FD | 	call	#__system___vfswrite
2a18c                 | LR__3950
2a18c                 | __system__write_ret
2a18c     2D 00 64 FD | 	ret
2a190                 | 
2a190                 | __system__read
2a190     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a194     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a198     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a19c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a1a0     01 FA 65 36 |  if_ae	neg	result1, #1
2a1a4     20 00 90 3D |  if_ae	jmp	#LR__3960
2a1a8     34 12 06 FD | 	qmul	arg01, #52
2a1ac     02 00 00 FF 
2a1b0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a1b4     18 12 62 FD | 	getqx	arg01
2a1b8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2a1bc     02 00 00 FF 
2a1c0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a1c4     98 11 B0 FD | 	call	#__system___vfsread
2a1c8                 | LR__3960
2a1c8                 | __system__read_ret
2a1c8     2D 00 64 FD | 	ret
2a1cc                 | 
2a1cc                 | __system__close
2a1cc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a1d0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a1d4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a1d8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a1dc     01 FA 65 36 |  if_ae	neg	result1, #1
2a1e0     20 00 90 3D |  if_ae	jmp	#LR__3970
2a1e4     34 12 06 FD | 	qmul	arg01, #52
2a1e8     02 00 00 FF 
2a1ec     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a1f0     18 12 62 FD | 	getqx	arg01
2a1f4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2a1f8     02 00 00 FF 
2a1fc     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a200     10 F9 BF FD | 	call	#__system___closeraw
2a204                 | LR__3970
2a204                 | __system__close_ret
2a204     2D 00 64 FD | 	ret
2a208                 | 
2a208                 | __system__lseek
2a208     06 4A 05 F6 | 	mov	COUNT_, #6
2a20c     A8 00 A0 FD | 	call	#pushregs_
2a210     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a214     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a218     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a21c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a220     01 FA 65 36 |  if_ae	neg	result1, #1
2a224     C4 00 90 3D |  if_ae	jmp	#LR__3981
2a228     34 12 06 FD | 	qmul	arg01, #52
2a22c     02 00 00 FF 
2a230     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a234     18 26 62 FD | 	getqx	local01
2a238     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2a23c     30 26 06 F1 | 	add	local01, #48
2a240     13 13 0A FB | 	rdlong	arg01, local01 wz
2a244     30 26 86 F1 | 	sub	local01, #48
2a248     02 00 00 FF 
2a24c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a250     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a254     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2a258     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a25c     01 FA 65 A6 |  if_e	neg	result1, #1
2a260     88 00 90 AD |  if_e	jmp	#LR__3981
2a264     08 26 06 F1 | 	add	local01, #8
2a268     13 29 02 FB | 	rdlong	local02, local01
2a26c     08 26 86 F1 | 	sub	local01, #8
2a270     40 28 CE F7 | 	test	local02, #64 wz
2a274     08 26 06 51 |  if_ne	add	local01, #8
2a278     13 29 02 5B |  if_ne	rdlong	local02, local01
2a27c     80 28 46 55 |  if_ne	or	local02, #128
2a280     13 29 62 5C |  if_ne	wrlong	local02, local01
2a284     08 26 86 51 |  if_ne	sub	local01, #8
2a288     30 26 06 F1 | 	add	local01, #48
2a28c     13 2B 02 FB | 	rdlong	local03, local01
2a290     15 2D 02 F6 | 	mov	local04, local03
2a294     30 26 86 F1 | 	sub	local01, #48
2a298     13 2C 46 F7 | 	zerox	local04, #19
2a29c     14 2A 46 F0 | 	shr	local03, #20
2a2a0     02 2A 66 F0 | 	shl	local03, #2
2a2a4     ED 2A 02 F1 | 	add	local03, __methods__
2a2a8     15 2B 02 FB | 	rdlong	local03, local03
2a2ac     13 13 02 F6 | 	mov	arg01, local01
2a2b0     F2 2E 02 F6 | 	mov	local05, objptr
2a2b4     16 E5 01 F6 | 	mov	objptr, local04
2a2b8     2D 2A 62 FD | 	call	local03
2a2bc     17 E5 01 F6 | 	mov	objptr, local05
2a2c0     FD 30 02 F6 | 	mov	local06, result1
2a2c4     00 30 56 F2 | 	cmps	local06, #0 wc
2a2c8     1C 00 90 3D |  if_ae	jmp	#LR__3980
2a2cc     18 13 6A F6 | 	neg	arg01, local06 wz
2a2d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a2d4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a2d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a2dc     01 FA 65 56 |  if_ne	neg	result1, #1
2a2e0     00 FA 05 A6 |  if_e	mov	result1, #0
2a2e4     04 00 90 FD | 	jmp	#LR__3981
2a2e8                 | LR__3980
2a2e8     18 FB 01 F6 | 	mov	result1, local06
2a2ec                 | LR__3981
2a2ec     A7 F0 03 F6 | 	mov	ptra, fp
2a2f0     B2 00 A0 FD | 	call	#popregs_
2a2f4                 | __system__lseek_ret
2a2f4     2D 00 64 FD | 	ret
2a2f8                 | 
2a2f8                 | __system___ioctl
2a2f8     03 4A 05 F6 | 	mov	COUNT_, #3
2a2fc     A8 00 A0 FD | 	call	#pushregs_
2a300     00 12 4E F2 | 	cmps	arg01, #0 wz
2a304     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a308     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a30c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a310     01 FA 65 A6 |  if_e	neg	result1, #1
2a314     5C 00 90 AD |  if_e	jmp	#LR__3991
2a318     28 12 06 F1 | 	add	arg01, #40
2a31c     09 27 02 FB | 	rdlong	local01, arg01
2a320     13 29 02 F6 | 	mov	local02, local01
2a324     28 12 86 F1 | 	sub	arg01, #40
2a328     13 28 46 F7 | 	zerox	local02, #19
2a32c     14 26 46 F0 | 	shr	local01, #20
2a330     02 26 66 F0 | 	shl	local01, #2
2a334     ED 26 02 F1 | 	add	local01, __methods__
2a338     13 27 02 FB | 	rdlong	local01, local01
2a33c     F2 2A 02 F6 | 	mov	local03, objptr
2a340     14 E5 01 F6 | 	mov	objptr, local02
2a344     2D 26 62 FD | 	call	local01
2a348     15 E5 01 F6 | 	mov	objptr, local03
2a34c     FD 12 0A F6 | 	mov	arg01, result1 wz
2a350     1C 00 90 AD |  if_e	jmp	#LR__3990
2a354     00 12 4E F2 | 	cmps	arg01, #0 wz
2a358     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a35c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a360     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a364     01 FA 65 56 |  if_ne	neg	result1, #1
2a368     00 FA 05 A6 |  if_e	mov	result1, #0
2a36c     04 00 90 FD | 	jmp	#LR__3991
2a370                 | LR__3990
2a370     00 FA 05 F6 | 	mov	result1, #0
2a374                 | LR__3991
2a374     A7 F0 03 F6 | 	mov	ptra, fp
2a378     B2 00 A0 FD | 	call	#popregs_
2a37c                 | __system___ioctl_ret
2a37c     2D 00 64 FD | 	ret
2a380                 | 
2a380                 | __system___isatty
2a380     00 4A 05 F6 | 	mov	COUNT_, #0
2a384     A8 00 A0 FD | 	call	#pushregs_
2a388     0C F0 07 F1 | 	add	ptra, #12
2a38c     04 4E 05 F1 | 	add	fp, #4
2a390     A7 12 62 FC | 	wrlong	arg01, fp
2a394     04 4E 05 F1 | 	add	fp, #4
2a398     A7 16 02 F6 | 	mov	arg03, fp
2a39c     08 4E 85 F1 | 	sub	fp, #8
2a3a0     00 15 06 F6 | 	mov	arg02, #256
2a3a4     50 FF BF FD | 	call	#__system___ioctl
2a3a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3ac     01 FA 05 A6 |  if_e	mov	result1, #1
2a3b0     00 FA 05 56 |  if_ne	mov	result1, #0
2a3b4     A7 F0 03 F6 | 	mov	ptra, fp
2a3b8     B2 00 A0 FD | 	call	#popregs_
2a3bc                 | __system___isatty_ret
2a3bc     2D 00 64 FD | 	ret
2a3c0                 | 
2a3c0                 | __system____getftab
2a3c0     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a3c4     34 12 06 CD |  if_b	qmul	arg01, #52
2a3c8     00 FA 05 36 |  if_ae	mov	result1, #0
2a3cc     02 00 00 CF 
2a3d0     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2a3d4     18 FA 61 CD |  if_b	getqx	result1
2a3d8     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2a3dc     02 00 00 CF 
2a3e0     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2a3e4                 | __system____getftab_ret
2a3e4     2D 00 64 FD | 	ret
2a3e8                 | 
2a3e8                 | __system__strncpy
2a3e8     09 01 02 F6 | 	mov	_var01, arg01
2a3ec                 | LR__4000
2a3ec     01 16 86 F1 | 	sub	arg03, #1
2a3f0     00 16 56 F2 | 	cmps	arg03, #0 wc
2a3f4     18 00 90 CD |  if_b	jmp	#LR__4001
2a3f8     0A FB C1 FA | 	rdbyte	result1, arg02
2a3fc     00 FB 41 FC | 	wrbyte	result1, _var01
2a400     01 14 06 F1 | 	add	arg02, #1
2a404     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2a408     01 00 06 F1 | 	add	_var01, #1
2a40c     DC FF 9F 5D |  if_ne	jmp	#LR__4000
2a410                 | LR__4001
2a410     97 0C 48 FB | 	callpa	#(@LR__4003-@LR__4002)>>2,fcache_load_ptr_
2a414                 | LR__4002
2a414     01 16 86 F1 | 	sub	arg03, #1
2a418     00 16 56 F2 | 	cmps	arg03, #0 wc
2a41c     00 03 02 36 |  if_ae	mov	_var02, _var01
2a420     01 00 06 31 |  if_ae	add	_var01, #1
2a424     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2a428     E8 FF 9F 3D |  if_ae	jmp	#LR__4002
2a42c                 | LR__4003
2a42c     09 FB 01 F6 | 	mov	result1, arg01
2a430                 | __system__strncpy_ret
2a430     2D 00 64 FD | 	ret
2a434                 | 
2a434                 | __system__strncat
2a434     00 14 4E F2 | 	cmps	arg02, #0 wz
2a438     50 00 90 AD |  if_e	jmp	#LR__4014
2a43c     01 16 16 F2 | 	cmp	arg03, #1 wc
2a440     48 00 90 CD |  if_b	jmp	#LR__4014
2a444     09 01 02 F6 | 	mov	_var01, arg01
2a448     97 1E 48 FB | 	callpa	#(@LR__4012-@LR__4010)>>2,fcache_load_ptr_
2a44c                 | LR__4010
2a44c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2a450     01 00 06 51 |  if_ne	add	_var01, #1
2a454     F4 FF 9F 5D |  if_ne	jmp	#LR__4010
2a458     0B 03 02 F6 | 	mov	_var02, arg03
2a45c                 | LR__4011
2a45c     0A 05 C2 FA | 	rdbyte	_var03, arg02
2a460     02 07 02 F6 | 	mov	_var04, _var03
2a464     07 06 4E F7 | 	zerox	_var04, #7 wz
2a468     01 14 06 F1 | 	add	arg02, #1
2a46c     18 00 90 AD |  if_e	jmp	#LR__4013
2a470     01 02 86 F1 | 	sub	_var02, #1
2a474     00 02 56 F2 | 	cmps	_var02, #0 wc
2a478     00 07 02 36 |  if_ae	mov	_var04, _var01
2a47c     01 00 06 31 |  if_ae	add	_var01, #1
2a480     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2a484     D4 FF 9F 3D |  if_ae	jmp	#LR__4011
2a488                 | LR__4012
2a488                 | LR__4013
2a488     00 01 48 FC | 	wrbyte	#0, _var01
2a48c                 | LR__4014
2a48c     09 FB 01 F6 | 	mov	result1, arg01
2a490                 | __system__strncat_ret
2a490     2D 00 64 FD | 	ret
2a494                 | 
2a494                 | __system__strncmp
2a494     09 01 0A F6 | 	mov	_var01, arg01 wz
2a498     14 00 90 5D |  if_ne	jmp	#LR__4020
2a49c     00 14 0E F2 | 	cmp	arg02, #0 wz
2a4a0     01 02 66 56 |  if_ne	neg	_var02, #1
2a4a4     00 02 06 A6 |  if_e	mov	_var02, #0
2a4a8     01 FB 01 F6 | 	mov	result1, _var02
2a4ac     74 00 90 FD | 	jmp	#__system__strncmp_ret
2a4b0                 | LR__4020
2a4b0     00 14 0E F2 | 	cmp	arg02, #0 wz
2a4b4     01 FA 05 A6 |  if_e	mov	result1, #1
2a4b8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2a4bc     0B 05 02 F6 | 	mov	_var03, arg03
2a4c0     97 16 48 FB | 	callpa	#(@LR__4022-@LR__4021)>>2,fcache_load_ptr_
2a4c4                 | LR__4021
2a4c4     00 07 C2 FA | 	rdbyte	_var04, _var01
2a4c8     0A 09 02 F6 | 	mov	_var05, arg02
2a4cc     04 0B C2 FA | 	rdbyte	_var06, _var05
2a4d0     01 04 86 F1 | 	sub	_var03, #1
2a4d4     00 04 56 F2 | 	cmps	_var03, #0 wc
2a4d8     01 00 06 F1 | 	add	_var01, #1
2a4dc     01 14 06 F1 | 	add	arg02, #1
2a4e0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2a4e4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4023
2a4e8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2a4ec     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4021
2a4f0                 | LR__4022
2a4f0                 | LR__4023
2a4f0     00 04 56 F2 | 	cmps	_var03, #0 wc
2a4f4     00 FA 05 C6 |  if_b	mov	result1, #0
2a4f8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2a4fc     05 07 0A F2 | 	cmp	_var04, _var06 wz
2a500     00 FA 05 A6 |  if_e	mov	result1, #0
2a504     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2a508     00 06 0E F2 | 	cmp	_var04, #0 wz
2a50c     01 FA 65 A6 |  if_e	neg	result1, #1
2a510     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2a514     00 0A 0E F2 | 	cmp	_var06, #0 wz
2a518     01 FA 05 A6 |  if_e	mov	result1, #1
2a51c     03 FB 01 56 |  if_ne	mov	result1, _var04
2a520     05 FB 81 51 |  if_ne	sub	result1, _var06
2a524                 | __system__strncmp_ret
2a524     2D 00 64 FD | 	ret
2a528                 | 
2a528                 | __system____root_opendir
2a528     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2a52c     04 12 06 F1 | 	add	arg01, #4
2a530     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2a534     00 FA 05 F6 | 	mov	result1, #0
2a538     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2a53c                 | __system____root_opendir_ret
2a53c     2D 00 64 FD | 	ret
2a540                 | 
2a540                 | __system____root_readdir
2a540     03 4A 05 F6 | 	mov	COUNT_, #3
2a544     A8 00 A0 FD | 	call	#pushregs_
2a548     09 27 02 F6 | 	mov	local01, arg01
2a54c     0A 29 02 F6 | 	mov	local02, arg02
2a550     04 26 06 F1 | 	add	local01, #4
2a554     13 2B 02 FB | 	rdlong	local03, local01
2a558     04 26 86 F1 | 	sub	local01, #4
2a55c                 | LR__4030
2a55c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2a560     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2a564     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2a568     01 FA 65 A6 |  if_e	neg	result1, #1
2a56c     48 00 90 AD |  if_e	jmp	#LR__4031
2a570     15 17 0A FB | 	rdlong	arg03, local03 wz
2a574     04 2A 06 A1 |  if_e	add	local03, #4
2a578     E0 FF 9F AD |  if_e	jmp	#LR__4030
2a57c     15 15 02 FB | 	rdlong	arg02, local03
2a580     01 14 06 F1 | 	add	arg02, #1
2a584     14 13 02 F6 | 	mov	arg01, local02
2a588     40 16 06 F6 | 	mov	arg03, #64
2a58c     58 FE BF FD | 	call	#__system__strncpy
2a590     50 28 06 F1 | 	add	local02, #80
2a594     14 03 48 FC | 	wrbyte	#1, local02
2a598     08 28 86 F1 | 	sub	local02, #8
2a59c     14 01 68 FC | 	wrlong	#0, local02
2a5a0     04 28 06 F1 | 	add	local02, #4
2a5a4     14 01 68 FC | 	wrlong	#0, local02
2a5a8     04 2A 06 F1 | 	add	local03, #4
2a5ac     04 26 06 F1 | 	add	local01, #4
2a5b0     13 2B 62 FC | 	wrlong	local03, local01
2a5b4     00 FA 05 F6 | 	mov	result1, #0
2a5b8                 | LR__4031
2a5b8     A7 F0 03 F6 | 	mov	ptra, fp
2a5bc     B2 00 A0 FD | 	call	#popregs_
2a5c0                 | __system____root_readdir_ret
2a5c0     2D 00 64 FD | 	ret
2a5c4                 | 
2a5c4                 | __system____root_closedir
2a5c4     00 FA 05 F6 | 	mov	result1, #0
2a5c8                 | __system____root_closedir_ret
2a5c8     2D 00 64 FD | 	ret
2a5cc                 | 
2a5cc                 | __system____root_stat
2a5cc     0A 01 02 F6 | 	mov	_var01, arg02
2a5d0     00 13 02 F6 | 	mov	arg01, _var01
2a5d4     00 14 06 F6 | 	mov	arg02, #0
2a5d8     30 16 06 F6 | 	mov	arg03, #48
2a5dc     98 00 A0 FD | 	call	#\builtin_bytefill_
2a5e0     08 00 06 F1 | 	add	_var01, #8
2a5e4     08 00 80 FF 
2a5e8     00 FF 6B FC | 	wrlong	##4607, _var01
2a5ec     00 FA 05 F6 | 	mov	result1, #0
2a5f0                 | __system____root_stat_ret
2a5f0     2D 00 64 FD | 	ret
2a5f4                 | 
2a5f4                 | __system___normalizeName
2a5f4     00 00 06 F6 | 	mov	_var01, #0
2a5f8     09 03 02 F6 | 	mov	_var02, arg01
2a5fc     01 05 02 F6 | 	mov	_var03, _var02
2a600                 | LR__4040
2a600     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2a604     5C 01 90 AD |  if_e	jmp	#LR__4059
2a608     00 00 0E F2 | 	cmp	_var01, #0 wz
2a60c     02 07 02 56 |  if_ne	mov	_var04, _var03
2a610     01 04 06 51 |  if_ne	add	_var03, #1
2a614     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2a618     00 00 06 56 |  if_ne	mov	_var01, #0
2a61c     01 07 C2 FA | 	rdbyte	_var04, _var02
2a620     2E 06 0E F2 | 	cmp	_var04, #46 wz
2a624     D8 00 90 5D |  if_ne	jmp	#LR__4052
2a628     01 02 06 F1 | 	add	_var02, #1
2a62c     01 07 C2 FA | 	rdbyte	_var04, _var02
2a630     01 02 86 F1 | 	sub	_var02, #1
2a634     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a638     18 00 90 AD |  if_e	jmp	#LR__4041
2a63c     01 02 06 F1 | 	add	_var02, #1
2a640     01 09 C2 FA | 	rdbyte	_var05, _var02
2a644     01 02 86 F1 | 	sub	_var02, #1
2a648     04 0B 02 F6 | 	mov	_var06, _var05
2a64c     07 0A 4E F7 | 	zerox	_var06, #7 wz
2a650     10 00 90 5D |  if_ne	jmp	#LR__4042
2a654                 | LR__4041
2a654     01 0D 02 F6 | 	mov	_var07, _var02
2a658     01 0C 06 F1 | 	add	_var07, #1
2a65c     06 03 02 F6 | 	mov	_var02, _var07
2a660     E0 00 90 FD | 	jmp	#LR__4056
2a664                 | LR__4042
2a664     01 02 06 F1 | 	add	_var02, #1
2a668     01 0D C2 FA | 	rdbyte	_var07, _var02
2a66c     01 02 86 F1 | 	sub	_var02, #1
2a670     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2a674     2E 06 0E F2 | 	cmp	_var04, #46 wz
2a678     84 00 90 5D |  if_ne	jmp	#LR__4051
2a67c     02 02 06 F1 | 	add	_var02, #2
2a680     01 0D C2 FA | 	rdbyte	_var07, _var02
2a684     02 02 86 F1 | 	sub	_var02, #2
2a688     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2a68c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a690     18 00 90 AD |  if_e	jmp	#LR__4043
2a694     02 02 06 F1 | 	add	_var02, #2
2a698     01 09 C2 FA | 	rdbyte	_var05, _var02
2a69c     02 02 86 F1 | 	sub	_var02, #2
2a6a0     04 0B 02 F6 | 	mov	_var06, _var05
2a6a4     07 0A 4E F7 | 	zerox	_var06, #7 wz
2a6a8     54 00 90 5D |  if_ne	jmp	#LR__4050
2a6ac                 | LR__4043
2a6ac     02 02 06 F1 | 	add	_var02, #2
2a6b0     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2a6b4     40 00 90 ED |  if_be	jmp	#LR__4049
2a6b8     02 0F 02 F6 | 	mov	_var08, _var03
2a6bc     01 0E 86 F1 | 	sub	_var08, #1
2a6c0                 | LR__4044
2a6c0     07 07 C2 FA | 	rdbyte	_var04, _var08
2a6c4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a6c8     0C 00 90 5D |  if_ne	jmp	#LR__4045
2a6cc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2a6d0     01 0E 86 11 |  if_a	sub	_var08, #1
2a6d4     E8 FF 9F 1D |  if_a	jmp	#LR__4044
2a6d8                 | LR__4045
2a6d8     97 0C 48 FB | 	callpa	#(@LR__4047-@LR__4046)>>2,fcache_load_ptr_
2a6dc                 | LR__4046
2a6dc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2a6e0     10 00 90 ED |  if_be	jmp	#LR__4048
2a6e4     07 07 C2 FA | 	rdbyte	_var04, _var08
2a6e8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a6ec     01 0E 86 51 |  if_ne	sub	_var08, #1
2a6f0     E8 FF 9F 5D |  if_ne	jmp	#LR__4046
2a6f4                 | LR__4047
2a6f4                 | LR__4048
2a6f4     07 05 02 F6 | 	mov	_var03, _var08
2a6f8                 | LR__4049
2a6f8     01 00 06 F6 | 	mov	_var01, #1
2a6fc     44 00 90 FD | 	jmp	#LR__4056
2a700                 | LR__4050
2a700                 | LR__4051
2a700                 | LR__4052
2a700     97 18 48 FB | 	callpa	#(@LR__4054-@LR__4053)>>2,fcache_load_ptr_
2a704                 | LR__4053
2a704     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2a708     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2a70c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2a710     20 00 90 AD |  if_e	jmp	#LR__4055
2a714     01 0B 02 F6 | 	mov	_var06, _var02
2a718     01 09 02 F6 | 	mov	_var05, _var02
2a71c     01 08 06 F1 | 	add	_var05, #1
2a720     05 11 C2 FA | 	rdbyte	_var09, _var06
2a724     04 03 02 F6 | 	mov	_var02, _var05
2a728     02 11 42 FC | 	wrbyte	_var09, _var03
2a72c     01 04 06 F1 | 	add	_var03, #1
2a730     D0 FF 9F FD | 	jmp	#LR__4053
2a734                 | LR__4054
2a734                 | LR__4055
2a734     01 07 C2 FA | 	rdbyte	_var04, _var02
2a738     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a73c     C0 FE 9F 5D |  if_ne	jmp	#LR__4040
2a740     01 00 06 F6 | 	mov	_var01, #1
2a744                 | LR__4056
2a744     97 0C 48 FB | 	callpa	#(@LR__4058-@LR__4057)>>2,fcache_load_ptr_
2a748                 | LR__4057
2a748     01 07 C2 FA | 	rdbyte	_var04, _var02
2a74c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a750     01 0D 02 A6 |  if_e	mov	_var07, _var02
2a754     01 0C 06 A1 |  if_e	add	_var07, #1
2a758     06 03 02 A6 |  if_e	mov	_var02, _var07
2a75c     E8 FF 9F AD |  if_e	jmp	#LR__4057
2a760                 | LR__4058
2a760     9C FE 9F FD | 	jmp	#LR__4040
2a764                 | LR__4059
2a764     02 01 48 FC | 	wrbyte	#0, _var03
2a768                 | __system___normalizeName_ret
2a768     2D 00 64 FD | 	ret
2a76c                 | 
2a76c                 | __system___strrev
2a76c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2a770     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2a774     09 03 02 F6 | 	mov	_var02, arg01
2a778     97 1A 48 FB | 	callpa	#(@LR__4062-@LR__4060)>>2,fcache_load_ptr_
2a77c                 | LR__4060
2a77c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2a780     01 02 06 51 |  if_ne	add	_var02, #1
2a784     F4 FF 9F 5D |  if_ne	jmp	#LR__4060
2a788     01 02 86 F1 | 	sub	_var02, #1
2a78c                 | LR__4061
2a78c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2a790     1C 00 90 ED |  if_be	jmp	#LR__4063
2a794     09 01 C2 FA | 	rdbyte	_var01, arg01
2a798     01 05 C2 FA | 	rdbyte	_var03, _var02
2a79c     09 05 42 FC | 	wrbyte	_var03, arg01
2a7a0     01 01 42 FC | 	wrbyte	_var01, _var02
2a7a4     01 12 06 F1 | 	add	arg01, #1
2a7a8     01 02 86 F1 | 	sub	_var02, #1
2a7ac     DC FF 9F FD | 	jmp	#LR__4061
2a7b0                 | LR__4062
2a7b0                 | LR__4063
2a7b0                 | __system___strrev_ret
2a7b0     2D 00 64 FD | 	ret
2a7b4                 | 
2a7b4                 | __system___fmtpad
2a7b4     06 4A 05 F6 | 	mov	COUNT_, #6
2a7b8     A8 00 A0 FD | 	call	#pushregs_
2a7bc     09 27 02 F6 | 	mov	local01, arg01
2a7c0     0A 29 02 F6 | 	mov	local02, arg02
2a7c4     0B 2B 02 F6 | 	mov	local03, arg03
2a7c8     14 13 EA F8 | 	getbyte	arg01, local02, #1
2a7cc     16 28 46 F0 | 	shr	local02, #22
2a7d0     03 28 0E F5 | 	and	local02, #3 wz
2a7d4     00 2C 06 F6 | 	mov	local04, #0
2a7d8     01 28 06 A6 |  if_e	mov	local02, #1
2a7dc     0C 29 CA F7 | 	test	local02, arg04 wz
2a7e0     00 FA 05 A6 |  if_e	mov	result1, #0
2a7e4     88 00 90 AD |  if_e	jmp	#LR__4073
2a7e8     09 2B C2 F2 | 	subr	local03, arg01
2a7ec     01 2A 56 F2 | 	cmps	local03, #1 wc
2a7f0     00 FA 05 C6 |  if_b	mov	result1, #0
2a7f4     78 00 90 CD |  if_b	jmp	#LR__4073
2a7f8     03 28 0E F2 | 	cmp	local02, #3 wz
2a7fc     18 00 90 5D |  if_ne	jmp	#LR__4070
2a800     01 18 0E F2 | 	cmp	arg04, #1 wz
2a804     6E 28 62 FD | 	wrz	local02
2a808     14 2B 02 F1 | 	add	local03, local02
2a80c     15 2B 52 F6 | 	abs	local03, local03 wc
2a810     01 2A 46 F0 | 	shr	local03, #1
2a814     15 2B 82 F6 | 	negc	local03, local03
2a818                 | LR__4070
2a818     01 2A 56 F2 | 	cmps	local03, #1 wc
2a81c     4C 00 90 CD |  if_b	jmp	#LR__4072
2a820     15 2F 02 F6 | 	mov	local05, local03
2a824                 | LR__4071
2a824     13 29 02 F6 | 	mov	local02, local01
2a828     13 31 02 F6 | 	mov	local06, local01
2a82c     13 28 46 F7 | 	zerox	local02, #19
2a830     14 30 46 F0 | 	shr	local06, #20
2a834     02 30 66 F0 | 	shl	local06, #2
2a838     ED 30 02 F1 | 	add	local06, __methods__
2a83c     18 31 02 FB | 	rdlong	local06, local06
2a840     20 12 06 F6 | 	mov	arg01, #32
2a844     F2 2A 02 F6 | 	mov	local03, objptr
2a848     14 E5 01 F6 | 	mov	objptr, local02
2a84c     2D 30 62 FD | 	call	local06
2a850     15 E5 01 F6 | 	mov	objptr, local03
2a854     FD 30 02 F6 | 	mov	local06, result1
2a858     00 30 56 F2 | 	cmps	local06, #0 wc
2a85c     18 FB 01 C6 |  if_b	mov	result1, local06
2a860     0C 00 90 CD |  if_b	jmp	#LR__4073
2a864     18 2D 02 F1 | 	add	local04, local06
2a868     EE 2F 6E FB | 	djnz	local05, #LR__4071
2a86c                 | LR__4072
2a86c     16 FB 01 F6 | 	mov	result1, local04
2a870                 | LR__4073
2a870     A7 F0 03 F6 | 	mov	ptra, fp
2a874     B2 00 A0 FD | 	call	#popregs_
2a878                 | __system___fmtpad_ret
2a878     2D 00 64 FD | 	ret
2a87c                 | 
2a87c                 | __system___uitoa
2a87c     04 4A 05 F6 | 	mov	COUNT_, #4
2a880     A8 00 A0 FD | 	call	#pushregs_
2a884     09 27 02 F6 | 	mov	local01, arg01
2a888     00 1A 4E F2 | 	cmps	arg05, #0 wz
2a88c     13 1B 02 F6 | 	mov	arg05, local01
2a890     00 28 06 F6 | 	mov	local02, #0
2a894     37 2A 06 56 |  if_ne	mov	local03, #55
2a898     57 2A 06 A6 |  if_e	mov	local03, #87
2a89c                 | LR__4080
2a89c     0B 15 12 FD | 	qdiv	arg02, arg03
2a8a0     19 2C 62 FD | 	getqy	local04
2a8a4     0B 15 12 FD | 	qdiv	arg02, arg03
2a8a8     0A 2C 16 F2 | 	cmp	local04, #10 wc
2a8ac     30 2C 06 C1 |  if_b	add	local04, #48
2a8b0     15 2D 02 31 |  if_ae	add	local04, local03
2a8b4     0D 2D 42 FC | 	wrbyte	local04, arg05
2a8b8     01 1A 06 F1 | 	add	arg05, #1
2a8bc     01 28 06 F1 | 	add	local02, #1
2a8c0     18 14 62 FD | 	getqx	arg02
2a8c4     00 14 0E F2 | 	cmp	arg02, #0 wz
2a8c8     D0 FF 9F 5D |  if_ne	jmp	#LR__4080
2a8cc     0C 29 12 F2 | 	cmp	local02, arg04 wc
2a8d0     C8 FF 9F CD |  if_b	jmp	#LR__4080
2a8d4     0D 01 48 FC | 	wrbyte	#0, arg05
2a8d8     13 13 02 F6 | 	mov	arg01, local01
2a8dc     8C FE BF FD | 	call	#__system___strrev
2a8e0     14 FB 01 F6 | 	mov	result1, local02
2a8e4     A7 F0 03 F6 | 	mov	ptra, fp
2a8e8     B2 00 A0 FD | 	call	#popregs_
2a8ec                 | __system___uitoa_ret
2a8ec     2D 00 64 FD | 	ret
2a8f0                 | 
2a8f0                 | __system__disassemble_0553
2a8f0     10 4A 05 F6 | 	mov	COUNT_, #16
2a8f4     A8 00 A0 FD | 	call	#pushregs_
2a8f8     09 27 02 F6 | 	mov	local01, arg01
2a8fc     0A 29 02 F6 | 	mov	local02, arg02
2a900     0B 2B 02 F6 | 	mov	local03, arg03
2a904     0C 2D 02 F6 | 	mov	local04, arg04
2a908     0D 2F 02 F6 | 	mov	local05, arg05
2a90c     17 13 52 F6 | 	abs	arg01, local05 wc
2a910     1F 30 C6 C9 |  if_b	decod	local06, #31
2a914     00 30 06 36 |  if_ae	mov	local06, #0
2a918     CC CF BF FD | 	call	#__system___float_fromuns
2a91c     18 FB 61 F5 | 	xor	result1, local06
2a920     FD 32 02 F6 | 	mov	local07, result1
2a924     00 34 06 F6 | 	mov	local08, #0
2a928     13 13 02 F6 | 	mov	arg01, local01
2a92c     00 14 06 F6 | 	mov	arg02, #0
2a930     01 16 06 F6 | 	mov	arg03, #1
2a934     E8 D7 BF FD | 	call	#__system___float_cmp
2a938     00 FA 0D F2 | 	cmp	result1, #0 wz
2a93c     00 36 06 A6 |  if_e	mov	local09, #0
2a940     14 01 68 AC |  if_e	wrlong	#0, local02
2a944     15 37 62 AC |  if_e	wrlong	local09, local03
2a948     8C 01 90 AD |  if_e	jmp	#LR__4102
2a94c     13 13 02 F6 | 	mov	arg01, local01
2a950     BC DC BF FD | 	call	#__system____builtin_ilogb
2a954     FD 38 02 F6 | 	mov	local10, result1
2a958     0A 2E 0E F2 | 	cmp	local05, #10 wz
2a95c     24 00 90 5D |  if_ne	jmp	#LR__4090
2a960     1C 37 02 F6 | 	mov	local09, local10
2a964     01 36 66 F0 | 	shl	local09, #1
2a968     1C 37 02 F1 | 	add	local09, local10
2a96c     1B 39 52 F6 | 	abs	local10, local09 wc
2a970     0A 38 16 FD | 	qdiv	local10, #10
2a974     09 3A 06 F6 | 	mov	local11, #9
2a978     18 38 62 FD | 	getqx	local10
2a97c     1C 39 82 F6 | 	negc	local10, local10
2a980     04 00 90 FD | 	jmp	#LR__4091
2a984                 | LR__4090
2a984     18 3A 06 F6 | 	mov	local11, #24
2a988                 | LR__4091
2a988                 | LR__4092
2a988     08 34 56 F2 | 	cmps	local08, #8 wc
2a98c     01 34 06 F1 | 	add	local08, #1
2a990     60 00 90 3D |  if_ae	jmp	#LR__4093
2a994     00 C0 1F FF 
2a998     00 12 06 F6 | 	mov	arg01, ##1065353216
2a99c     19 15 02 F6 | 	mov	arg02, local07
2a9a0     1C 17 02 F6 | 	mov	arg03, local10
2a9a4     4C E3 BF FD | 	call	#__system___float_pow_n
2a9a8     FD 14 02 F6 | 	mov	arg02, result1
2a9ac     13 13 02 F6 | 	mov	arg01, local01
2a9b0     3C D5 BF FD | 	call	#__system___float_div
2a9b4     FD 3C 02 F6 | 	mov	local12, result1
2a9b8     1E 13 02 F6 | 	mov	arg01, local12
2a9bc     00 C0 1F FF 
2a9c0     00 14 06 F6 | 	mov	arg02, ##1065353216
2a9c4     01 16 06 F6 | 	mov	arg03, #1
2a9c8     54 D7 BF FD | 	call	#__system___float_cmp
2a9cc     00 FA 55 F2 | 	cmps	result1, #0 wc
2a9d0     01 38 86 C1 |  if_b	sub	local10, #1
2a9d4     B0 FF 9F CD |  if_b	jmp	#LR__4092
2a9d8     19 15 02 F6 | 	mov	arg02, local07
2a9dc     1E 13 02 F6 | 	mov	arg01, local12
2a9e0     01 16 66 F6 | 	neg	arg03, #1
2a9e4     38 D7 BF FD | 	call	#__system___float_cmp
2a9e8     00 FA 55 F2 | 	cmps	result1, #0 wc
2a9ec     01 38 06 31 |  if_ae	add	local10, #1
2a9f0     94 FF 9F 3D |  if_ae	jmp	#LR__4092
2a9f4                 | LR__4093
2a9f4     1E 13 02 F6 | 	mov	arg01, local12
2a9f8     14 DC BF FD | 	call	#__system____builtin_ilogb
2a9fc     FD 3E 02 F6 | 	mov	local13, result1
2aa00     1E 41 02 F6 | 	mov	local14, local12
2aa04     17 41 06 F4 | 	bitl	local14, #279
2aa08     17 40 26 F4 | 	bith	local14, #23
2aa0c     1F 41 62 F0 | 	shl	local14, local13
2aa10     02 2E 0E F2 | 	cmp	local05, #2 wz
2aa14     02 2C 66 A0 |  if_e	shl	local04, #2
2aa18     00 42 06 F6 | 	mov	local15, #0
2aa1c     00 2C 56 F2 | 	cmps	local04, #0 wc
2aa20     10 00 90 3D |  if_ae	jmp	#LR__4094
2aa24     1C 2D C2 F2 | 	subr	local04, local10
2aa28     00 2C 56 F2 | 	cmps	local04, #0 wc
2aa2c     A0 00 90 CD |  if_b	jmp	#LR__4101
2aa30     04 00 90 FD | 	jmp	#LR__4095
2aa34                 | LR__4094
2aa34     01 2C 06 F1 | 	add	local04, #1
2aa38                 | LR__4095
2aa38     1D 2D 7A F3 | 	fles	local04, local11 wcz
2aa3c     01 44 06 F6 | 	mov	local16, #1
2aa40     97 22 48 FB | 	callpa	#(@LR__4097-@LR__4096)>>2,fcache_load_ptr_
2aa44                 | LR__4096
2aa44     00 40 00 FF 
2aa48     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2aa4c     38 00 90 3D |  if_ae	jmp	#LR__4098
2aa50     01 2C 56 F2 | 	cmps	local04, #1 wc
2aa54     01 2C 86 F1 | 	sub	local04, #1
2aa58     2C 00 90 CD |  if_b	jmp	#LR__4098
2aa5c     17 43 02 FD | 	qmul	local15, local05
2aa60     20 3F 02 F6 | 	mov	local13, local14
2aa64     17 3E 46 F0 | 	shr	local13, #23
2aa68     17 41 06 F4 | 	bitl	local14, #279
2aa6c     18 42 62 FD | 	getqx	local15
2aa70     17 45 02 FD | 	qmul	local16, local05
2aa74     18 44 62 FD | 	getqx	local16
2aa78     17 41 02 FD | 	qmul	local14, local05
2aa7c     1F 43 02 F1 | 	add	local15, local13
2aa80     18 40 62 FD | 	getqx	local14
2aa84     BC FF 9F FD | 	jmp	#LR__4096
2aa88                 | LR__4097
2aa88                 | LR__4098
2aa88     17 37 02 F6 | 	mov	local09, local05
2aa8c     17 36 66 F0 | 	shl	local09, #23
2aa90     1B 3F 52 F6 | 	abs	local13, local09 wc
2aa94     01 3E 46 F0 | 	shr	local13, #1
2aa98     1F 3F 82 F6 | 	negc	local13, local13
2aa9c     1F 41 1A F2 | 	cmp	local14, local13 wcz
2aaa0     20 00 90 1D |  if_a	jmp	#LR__4099
2aaa4     17 2E 66 F0 | 	shl	local05, #23
2aaa8     17 3F 52 F6 | 	abs	local13, local05 wc
2aaac     01 3E 46 F0 | 	shr	local13, #1
2aab0     1F 3F 82 F6 | 	negc	local13, local13
2aab4     1F 41 0A F2 | 	cmp	local14, local13 wz
2aab8     14 00 90 5D |  if_ne	jmp	#LR__4100
2aabc     01 42 CE F7 | 	test	local15, #1 wz
2aac0     0C 00 90 AD |  if_e	jmp	#LR__4100
2aac4                 | LR__4099
2aac4     01 42 06 F1 | 	add	local15, #1
2aac8     22 43 0A F2 | 	cmp	local15, local16 wz
2aacc     01 38 06 A1 |  if_e	add	local10, #1
2aad0                 | LR__4100
2aad0                 | LR__4101
2aad0     14 43 62 FC | 	wrlong	local15, local02
2aad4     15 39 62 FC | 	wrlong	local10, local03
2aad8                 | LR__4102
2aad8     A7 F0 03 F6 | 	mov	ptra, fp
2aadc     B2 00 A0 FD | 	call	#popregs_
2aae0                 | __system__disassemble_0553_ret
2aae0     2D 00 64 FD | 	ret
2aae4                 | 
2aae4                 | __system__emitsign_0555
2aae4     00 FA 05 F6 | 	mov	result1, #0
2aae8     00 14 0E F2 | 	cmp	arg02, #0 wz
2aaec     09 01 02 56 |  if_ne	mov	_var01, arg01
2aaf0     01 12 06 51 |  if_ne	add	arg01, #1
2aaf4     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2aaf8     01 FA 05 56 |  if_ne	mov	result1, #1
2aafc     00 16 0E F2 | 	cmp	arg03, #0 wz
2ab00     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2ab04     01 12 06 51 |  if_ne	add	arg01, #1
2ab08     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2ab0c     02 FA 05 51 |  if_ne	add	result1, #2
2ab10                 | __system__emitsign_0555_ret
2ab10     2D 00 64 FD | 	ret
2ab14                 | 
2ab14                 | __system___gettxfunc
2ab14     01 4A 05 F6 | 	mov	COUNT_, #1
2ab18     A8 00 A0 FD | 	call	#pushregs_
2ab1c     A0 F8 BF FD | 	call	#__system____getftab
2ab20     FD 26 0A F6 | 	mov	local01, result1 wz
2ab24     10 00 90 AD |  if_e	jmp	#LR__4110
2ab28     08 26 06 F1 | 	add	local01, #8
2ab2c     13 15 0A FB | 	rdlong	arg02, local01 wz
2ab30     08 26 86 F1 | 	sub	local01, #8
2ab34     08 00 90 5D |  if_ne	jmp	#LR__4111
2ab38                 | LR__4110
2ab38     00 FA 05 F6 | 	mov	result1, #0
2ab3c     0C 00 90 FD | 	jmp	#LR__4112
2ab40                 | LR__4111
2ab40     00 E0 04 FF 
2ab44     00 26 46 F5 | 	or	local01, ##163577856
2ab48     13 FB 01 F6 | 	mov	result1, local01
2ab4c                 | LR__4112
2ab4c     A7 F0 03 F6 | 	mov	ptra, fp
2ab50     B2 00 A0 FD | 	call	#popregs_
2ab54                 | __system___gettxfunc_ret
2ab54     2D 00 64 FD | 	ret
2ab58                 | 
2ab58                 | __system___getrxfunc
2ab58     01 4A 05 F6 | 	mov	COUNT_, #1
2ab5c     A8 00 A0 FD | 	call	#pushregs_
2ab60     5C F8 BF FD | 	call	#__system____getftab
2ab64     FD 26 0A F6 | 	mov	local01, result1 wz
2ab68     10 00 90 AD |  if_e	jmp	#LR__4120
2ab6c     08 26 06 F1 | 	add	local01, #8
2ab70     13 15 0A FB | 	rdlong	arg02, local01 wz
2ab74     08 26 86 F1 | 	sub	local01, #8
2ab78     08 00 90 5D |  if_ne	jmp	#LR__4121
2ab7c                 | LR__4120
2ab7c     00 FA 05 F6 | 	mov	result1, #0
2ab80     0C 00 90 FD | 	jmp	#LR__4122
2ab84                 | LR__4121
2ab84     00 E8 04 FF 
2ab88     00 26 46 F5 | 	or	local01, ##164626432
2ab8c     13 FB 01 F6 | 	mov	result1, local01
2ab90                 | LR__4122
2ab90     A7 F0 03 F6 | 	mov	ptra, fp
2ab94     B2 00 A0 FD | 	call	#popregs_
2ab98                 | __system___getrxfunc_ret
2ab98     2D 00 64 FD | 	ret
2ab9c                 | 
2ab9c                 | __system___getiolock_0595
2ab9c     01 4A 05 F6 | 	mov	COUNT_, #1
2aba0     A8 00 A0 FD | 	call	#pushregs_
2aba4     18 F8 BF FD | 	call	#__system____getftab
2aba8     FD 26 0A F6 | 	mov	local01, result1 wz
2abac     10 00 90 AD |  if_e	jmp	#LR__4130
2abb0     08 26 06 F1 | 	add	local01, #8
2abb4     13 FB 09 FB | 	rdlong	result1, local01 wz
2abb8     08 26 86 F1 | 	sub	local01, #8
2abbc     18 00 90 5D |  if_ne	jmp	#LR__4131
2abc0                 | LR__4130
2abc0     01 00 00 FF 
2abc4     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2abc8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2abcc     01 00 00 FF 
2abd0     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2abd4     08 00 90 FD | 	jmp	#LR__4132
2abd8                 | LR__4131
2abd8     0C 26 06 F1 | 	add	local01, #12
2abdc     13 FB 01 F6 | 	mov	result1, local01
2abe0                 | LR__4132
2abe0     A7 F0 03 F6 | 	mov	ptra, fp
2abe4     B2 00 A0 FD | 	call	#popregs_
2abe8                 | __system___getiolock_0595_ret
2abe8     2D 00 64 FD | 	ret
2abec                 | 
2abec                 | __system____ScanForChar
2abec     09 01 02 F6 | 	mov	_var01, arg01
2abf0     09 03 02 F6 | 	mov	_var02, arg01
2abf4     97 06 48 FB | 	callpa	#(@LR__4141-@LR__4140)>>2,fcache_load_ptr_
2abf8                 | LR__4140
2abf8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2abfc     01 02 06 51 |  if_ne	add	_var02, #1
2ac00     F4 FF 9F 5D |  if_ne	jmp	#LR__4140
2ac04                 | LR__4141
2ac04     09 03 82 F1 | 	sub	_var02, arg01
2ac08     01 FB 01 F6 | 	mov	result1, _var02
2ac0c     FD 12 0A F6 | 	mov	arg01, result1 wz
2ac10     00 FA 05 A6 |  if_e	mov	result1, #0
2ac14     B8 00 90 AD |  if_e	jmp	#LR__4148
2ac18     0A 05 02 F6 | 	mov	_var03, arg02
2ac1c     07 04 4E F7 | 	zerox	_var03, #7 wz
2ac20     00 FA 05 A6 |  if_e	mov	result1, #0
2ac24     A8 00 90 AD |  if_e	jmp	#LR__4148
2ac28     01 16 16 F2 | 	cmp	arg03, #1 wc
2ac2c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2ac30     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2ac34     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2ac38     94 00 90 4D |  if_c_and_nz	jmp	#LR__4148
2ac3c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2ac40     10 00 90 ED |  if_be	jmp	#LR__4142
2ac44     00 18 0E F2 | 	cmp	arg04, #0 wz
2ac48     00 FA 05 A6 |  if_e	mov	result1, #0
2ac4c     80 00 90 AD |  if_e	jmp	#LR__4148
2ac50     09 17 02 F6 | 	mov	arg03, arg01
2ac54                 | LR__4142
2ac54     01 16 86 F1 | 	sub	arg03, #1
2ac58     00 18 0E F2 | 	cmp	arg04, #0 wz
2ac5c     38 00 90 5D |  if_ne	jmp	#LR__4144
2ac60     0B 07 02 F6 | 	mov	_var04, arg03
2ac64     09 09 02 F6 | 	mov	_var05, arg01
2ac68                 | LR__4143
2ac68     04 07 12 F2 | 	cmp	_var04, _var05 wc
2ac6c     5C 00 90 3D |  if_ae	jmp	#LR__4147
2ac70     03 05 02 F6 | 	mov	_var03, _var04
2ac74     00 05 02 F1 | 	add	_var03, _var01
2ac78     02 05 C2 FA | 	rdbyte	_var03, _var03
2ac7c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2ac80     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2ac84     01 06 06 A1 |  if_e	add	_var04, #1
2ac88     03 FB 01 A6 |  if_e	mov	result1, _var04
2ac8c     40 00 90 AD |  if_e	jmp	#LR__4148
2ac90     01 06 06 F1 | 	add	_var04, #1
2ac94     D0 FF 9F FD | 	jmp	#LR__4143
2ac98                 | LR__4144
2ac98     0B 07 02 F6 | 	mov	_var04, arg03
2ac9c                 | LR__4145
2ac9c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2aca0     28 00 90 1D |  if_a	jmp	#LR__4146
2aca4     03 09 02 F6 | 	mov	_var05, _var04
2aca8     00 09 02 F1 | 	add	_var05, _var01
2acac     04 05 C2 FA | 	rdbyte	_var03, _var05
2acb0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2acb4     04 05 0A F2 | 	cmp	_var03, _var05 wz
2acb8     01 06 06 A1 |  if_e	add	_var04, #1
2acbc     03 FB 01 A6 |  if_e	mov	result1, _var04
2acc0     0C 00 90 AD |  if_e	jmp	#LR__4148
2acc4     01 06 86 F1 | 	sub	_var04, #1
2acc8     D0 FF 9F FD | 	jmp	#LR__4145
2accc                 | LR__4146
2accc                 | LR__4147
2accc     00 FA 05 F6 | 	mov	result1, #0
2acd0                 | LR__4148
2acd0                 | __system____ScanForChar_ret
2acd0     2D 00 64 FD | 	ret
2acd4                 | 
2acd4                 | __system___basic_dir
2acd4     05 4A 05 F6 | 	mov	COUNT_, #5
2acd8     A8 00 A0 FD | 	call	#pushregs_
2acdc     4C F0 07 F1 | 	add	ptra, #76
2ace0     04 4E 05 F1 | 	add	fp, #4
2ace4     A7 12 62 FC | 	wrlong	arg01, fp
2ace8     04 4E 05 F1 | 	add	fp, #4
2acec     A7 14 62 FC | 	wrlong	arg02, fp
2acf0     04 4E 85 F1 | 	sub	fp, #4
2acf4     A7 14 0A FB | 	rdlong	arg02, fp wz
2acf8     04 4E 85 F1 | 	sub	fp, #4
2acfc     04 4E 05 51 |  if_ne	add	fp, #4
2ad00     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ad04     04 4E 85 51 |  if_ne	sub	fp, #4
2ad08     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2ad0c     70 00 90 AD |  if_e	jmp	#LR__4150
2ad10     03 00 00 FF 
2ad14     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ad18     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ad1c     03 00 00 FF 
2ad20     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ad24     03 00 00 5F 
2ad28     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2ad2c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2ad30     03 00 00 5F 
2ad34     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2ad38     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2ad3c     A4 01 00 FF 
2ad40     EC 13 06 F6 | 	mov	arg01, ##@LR__5318
2ad44     E0 E8 BF FD | 	call	#__system__opendir
2ad48     03 00 00 FF 
2ad4c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ad50     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2ad54     08 4E 05 F1 | 	add	fp, #8
2ad58     A7 28 02 FB | 	rdlong	local02, fp
2ad5c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ad60     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2ad64     04 4E 85 F1 | 	sub	fp, #4
2ad68     A7 28 02 FB | 	rdlong	local02, fp
2ad6c     04 4E 85 F1 | 	sub	fp, #4
2ad70     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ad74     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2ad78     03 00 00 FF 
2ad7c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2ad80                 | LR__4150
2ad80     03 00 00 FF 
2ad84     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ad88     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ad8c     03 00 00 FF 
2ad90     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ad94     A4 01 00 AF 
2ad98     EE FB 05 A6 |  if_e	mov	result1, ##@LR__5319
2ad9c     84 02 90 AD |  if_e	jmp	#LR__4163
2ada0                 | LR__4151
2ada0     03 00 00 FF 
2ada4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ada8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2adac     03 00 00 FF 
2adb0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2adb4     D0 E9 BF FD | 	call	#__system__readdir
2adb8     0C 4E 05 F1 | 	add	fp, #12
2adbc     A7 FA 61 FC | 	wrlong	result1, fp
2adc0     0C 4E 85 F1 | 	sub	fp, #12
2adc4     00 FA 0D F2 | 	cmp	result1, #0 wz
2adc8     38 00 90 5D |  if_ne	jmp	#LR__4152
2adcc     03 00 00 FF 
2add0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2add4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2add8     03 00 00 FF 
2addc     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ade0     30 E9 BF FD | 	call	#__system__closedir
2ade4     03 00 00 FF 
2ade8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2adec     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2adf0     03 00 00 FF 
2adf4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2adf8     A4 01 00 FF 
2adfc     F0 FB 05 F6 | 	mov	result1, ##@LR__5320
2ae00     20 02 90 FD | 	jmp	#LR__4163
2ae04                 | LR__4152
2ae04     0C 4E 05 F1 | 	add	fp, #12
2ae08     A7 12 02 FB | 	rdlong	arg01, fp
2ae0c     0C 4E 85 F1 | 	sub	fp, #12
2ae10     03 00 00 FF 
2ae14     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2ae18     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2ae1c     03 00 00 FF 
2ae20     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2ae24     10 09 B0 FD | 	call	#__system___pat_match
2ae28     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae2c     70 FF 9F AD |  if_e	jmp	#LR__4151
2ae30     03 00 00 FF 
2ae34     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2ae38     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ae3c     03 00 00 FF 
2ae40     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2ae44     78 01 90 AD |  if_e	jmp	#LR__4159
2ae48     0C 4E 05 F1 | 	add	fp, #12
2ae4c     A7 12 02 FB | 	rdlong	arg01, fp
2ae50     04 4E 05 F1 | 	add	fp, #4
2ae54     A7 14 02 F6 | 	mov	arg02, fp
2ae58     10 4E 85 F1 | 	sub	fp, #16
2ae5c     2C F2 BF FD | 	call	#__system__stat
2ae60     40 4E 05 F1 | 	add	fp, #64
2ae64     A7 FA 61 FC | 	wrlong	result1, fp
2ae68     40 4E 85 F1 | 	sub	fp, #64
2ae6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae70     A4 01 00 5F 
2ae74     F2 FB 05 56 |  if_ne	mov	result1, ##@LR__5321
2ae78     A8 01 90 5D |  if_ne	jmp	#LR__4163
2ae7c     18 4E 05 F1 | 	add	fp, #24
2ae80     A7 28 02 FB | 	rdlong	local02, fp
2ae84     78 00 00 FF 
2ae88     00 28 06 F5 | 	and	local02, ##61440
2ae8c     2C 4E 05 F1 | 	add	fp, #44
2ae90     A7 28 62 FC | 	wrlong	local02, fp
2ae94     38 4E 85 F1 | 	sub	fp, #56
2ae98     A7 28 02 FB | 	rdlong	local02, fp
2ae9c     0C 4E 85 F1 | 	sub	fp, #12
2aea0     14 29 C2 FA | 	rdbyte	local02, local02
2aea4     2E 28 0E F2 | 	cmp	local02, #46 wz
2aea8     08 4E 05 A1 |  if_e	add	fp, #8
2aeac     A7 04 68 AC |  if_e	wrlong	#2, fp
2aeb0     08 4E C5 F3 | 	sumz	fp, #8
2aeb4     A7 00 68 5C |  if_ne	wrlong	#0, fp
2aeb8     08 4E 85 51 |  if_ne	sub	fp, #8
2aebc     44 4E 05 F1 | 	add	fp, #68
2aec0     A7 28 02 FB | 	rdlong	local02, fp
2aec4     44 4E 85 F1 | 	sub	fp, #68
2aec8     08 00 00 FF 
2aecc     00 28 0E F2 | 	cmp	local02, ##4096 wz
2aed0     18 00 90 5D |  if_ne	jmp	#LR__4153
2aed4     08 4E 05 F1 | 	add	fp, #8
2aed8     A7 28 02 FB | 	rdlong	local02, fp
2aedc     10 28 46 F5 | 	or	local02, #16
2aee0     A7 28 62 FC | 	wrlong	local02, fp
2aee4     08 4E 85 F1 | 	sub	fp, #8
2aee8     AC 00 90 FD | 	jmp	#LR__4158
2aeec                 | LR__4153
2aeec     44 4E 05 F1 | 	add	fp, #68
2aef0     A7 28 02 FB | 	rdlong	local02, fp
2aef4     44 4E 85 F1 | 	sub	fp, #68
2aef8     10 00 00 FF 
2aefc     00 28 0E F2 | 	cmp	local02, ##8192 wz
2af00     44 4E 05 51 |  if_ne	add	fp, #68
2af04     A7 26 02 5B |  if_ne	rdlong	local01, fp
2af08     44 4E 85 51 |  if_ne	sub	fp, #68
2af0c     18 00 00 5F 
2af10     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2af14     44 4E 05 51 |  if_ne	add	fp, #68
2af18     13 2B 02 56 |  if_ne	mov	local03, local01
2af1c     44 4E 85 51 |  if_ne	sub	fp, #68
2af20     20 00 00 5F 
2af24     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2af28     18 00 90 5D |  if_ne	jmp	#LR__4154
2af2c     08 4E 05 F1 | 	add	fp, #8
2af30     A7 28 02 FB | 	rdlong	local02, fp
2af34     04 28 46 F5 | 	or	local02, #4
2af38     A7 28 62 FC | 	wrlong	local02, fp
2af3c     08 4E 85 F1 | 	sub	fp, #8
2af40     54 00 90 FD | 	jmp	#LR__4157
2af44                 | LR__4154
2af44     18 4E 05 F1 | 	add	fp, #24
2af48     A7 28 02 FB | 	rdlong	local02, fp
2af4c     18 4E 85 F1 | 	sub	fp, #24
2af50     92 28 CE F7 | 	test	local02, #146 wz
2af54     18 00 90 5D |  if_ne	jmp	#LR__4155
2af58     08 4E 05 F1 | 	add	fp, #8
2af5c     A7 28 02 FB | 	rdlong	local02, fp
2af60     01 28 46 F5 | 	or	local02, #1
2af64     A7 28 62 FC | 	wrlong	local02, fp
2af68     08 4E 85 F1 | 	sub	fp, #8
2af6c     28 00 90 FD | 	jmp	#LR__4156
2af70                 | LR__4155
2af70     44 4E 05 F1 | 	add	fp, #68
2af74     A7 2C 02 FB | 	rdlong	local04, fp
2af78     44 4E 85 F1 | 	sub	fp, #68
2af7c     08 00 00 FF 
2af80     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2af84     08 4E 05 51 |  if_ne	add	fp, #8
2af88     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2af8c     20 2C 46 55 |  if_ne	or	local04, #32
2af90     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2af94     08 4E 85 51 |  if_ne	sub	fp, #8
2af98                 | LR__4156
2af98                 | LR__4157
2af98                 | LR__4158
2af98     08 4E 05 F1 | 	add	fp, #8
2af9c     A7 2C 02 FB | 	rdlong	local04, fp
2afa0     08 4E 85 F1 | 	sub	fp, #8
2afa4     03 00 00 FF 
2afa8     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2afac     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2afb0     03 00 00 FF 
2afb4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2afb8     13 2D CA F7 | 	test	local04, local01 wz
2afbc     E0 FD 9F AD |  if_e	jmp	#LR__4151
2afc0                 | LR__4159
2afc0     0C 4E 05 F1 | 	add	fp, #12
2afc4     A7 12 02 FB | 	rdlong	arg01, fp
2afc8     0C 4E 85 F1 | 	sub	fp, #12
2afcc     09 2F 02 F6 | 	mov	local05, arg01
2afd0     97 06 48 FB | 	callpa	#(@LR__4161-@LR__4160)>>2,fcache_load_ptr_
2afd4                 | LR__4160
2afd4     17 FB C9 FA | 	rdbyte	result1, local05 wz
2afd8     01 2E 06 51 |  if_ne	add	local05, #1
2afdc     F4 FF 9F 5D |  if_ne	jmp	#LR__4160
2afe0                 | LR__4161
2afe0     17 13 C2 F2 | 	subr	arg01, local05
2afe4     01 12 06 F1 | 	add	arg01, #1
2afe8     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2afec     48 4E 05 F1 | 	add	fp, #72
2aff0     A7 FA 61 FC | 	wrlong	result1, fp
2aff4     48 4E 85 F1 | 	sub	fp, #72
2aff8     00 FA 0D F2 | 	cmp	result1, #0 wz
2affc     18 00 90 AD |  if_e	jmp	#LR__4162
2b000     48 4E 05 F1 | 	add	fp, #72
2b004     A7 12 02 FB | 	rdlong	arg01, fp
2b008     3C 4E 85 F1 | 	sub	fp, #60
2b00c     A7 14 02 FB | 	rdlong	arg02, fp
2b010     0C 4E 85 F1 | 	sub	fp, #12
2b014     10 9E BF FD | 	call	#__system____builtin_strcpy
2b018                 | LR__4162
2b018     48 4E 05 F1 | 	add	fp, #72
2b01c     A7 FA 01 FB | 	rdlong	result1, fp
2b020     48 4E 85 F1 | 	sub	fp, #72
2b024                 | LR__4163
2b024     A7 F0 03 F6 | 	mov	ptra, fp
2b028     B2 00 A0 FD | 	call	#popregs_
2b02c                 | __system___basic_dir_ret
2b02c     2D 00 64 FD | 	ret
2b030                 | 
2b030                 | __system__pack_0667
2b030     09 01 02 F6 | 	mov	_var01, arg01
2b034     7F 16 06 F1 | 	add	arg03, #127
2b038     04 18 CE F7 | 	test	arg04, #4 wz
2b03c     10 00 90 AD |  if_e	jmp	#LR__4170
2b040     00 00 0E F2 | 	cmp	_var01, #0 wz
2b044     16 00 C6 A9 |  if_e	decod	_var01, #22
2b048     F7 00 26 F4 | 	bith	_var01, #247
2b04c     B4 00 90 FD | 	jmp	#LR__4179
2b050                 | LR__4170
2b050     02 18 CE F7 | 	test	arg04, #2 wz
2b054     00 C0 3F 5F 
2b058     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2b05c     00 14 06 56 |  if_ne	mov	arg02, #0
2b060     A0 00 90 5D |  if_ne	jmp	#LR__4178
2b064     08 18 CE F7 | 	test	arg04, #8 wz
2b068     00 00 06 56 |  if_ne	mov	_var01, #0
2b06c     94 00 90 5D |  if_ne	jmp	#LR__4177
2b070     FF 16 56 F2 | 	cmps	arg03, #255 wc
2b074     00 C0 3F 3F 
2b078     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2b07c     00 14 06 36 |  if_ae	mov	arg02, #0
2b080     80 00 90 3D |  if_ae	jmp	#LR__4176
2b084     01 16 56 F2 | 	cmps	arg03, #1 wc
2b088     6C 00 90 3D |  if_ae	jmp	#LR__4174
2b08c     01 14 46 F0 | 	shr	arg02, #1
2b090     00 03 02 F6 | 	mov	_var02, _var01
2b094     01 02 06 F5 | 	and	_var02, #1
2b098     1F 02 66 F0 | 	shl	_var02, #31
2b09c     01 15 42 F5 | 	or	arg02, _var02
2b0a0     01 00 46 F0 | 	shr	_var01, #1
2b0a4     97 1E 48 FB | 	callpa	#(@LR__4172-@LR__4171)>>2,fcache_load_ptr_
2b0a8                 | LR__4171
2b0a8     00 16 56 F2 | 	cmps	arg03, #0 wc
2b0ac     34 00 90 3D |  if_ae	jmp	#LR__4173
2b0b0     00 00 0E F2 | 	cmp	_var01, #0 wz
2b0b4     2C 00 90 AD |  if_e	jmp	#LR__4173
2b0b8     0A 13 02 F6 | 	mov	arg01, arg02
2b0bc     01 12 06 F5 | 	and	arg01, #1
2b0c0     01 16 06 F1 | 	add	arg03, #1
2b0c4     01 14 46 F0 | 	shr	arg02, #1
2b0c8     00 03 02 F6 | 	mov	_var02, _var01
2b0cc     01 02 06 F5 | 	and	_var02, #1
2b0d0     1F 02 66 F0 | 	shl	_var02, #31
2b0d4     01 15 42 F5 | 	or	arg02, _var02
2b0d8     09 15 42 F5 | 	or	arg02, arg01
2b0dc     01 00 46 F0 | 	shr	_var01, #1
2b0e0     C4 FF 9F FD | 	jmp	#LR__4171
2b0e4                 | LR__4172
2b0e4                 | LR__4173
2b0e4     00 16 56 F2 | 	cmps	arg03, #0 wc
2b0e8     18 00 90 3D |  if_ae	jmp	#LR__4175
2b0ec     00 14 0E F2 | 	cmp	arg02, #0 wz
2b0f0     6F 14 62 FD | 	wrnz	arg02
2b0f4     0C 00 90 FD | 	jmp	#LR__4175
2b0f8                 | LR__4174
2b0f8     17 01 06 F4 | 	bitl	_var01, #279
2b0fc     17 16 66 F0 | 	shl	arg03, #23
2b100     0B 01 42 F5 | 	or	_var01, arg03
2b104                 | LR__4175
2b104                 | LR__4176
2b104                 | LR__4177
2b104                 | LR__4178
2b104                 | LR__4179
2b104     01 00 CE F7 | 	test	_var01, #1 wz
2b108     01 14 46 55 |  if_ne	or	arg02, #1
2b10c     0A 17 02 F6 | 	mov	arg03, arg02
2b110     00 02 06 F6 | 	mov	_var02, #0
2b114     FF FF 3F FF 
2b118     FF 15 06 F1 | 	add	arg02, ##2147483647
2b11c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2b120     01 02 06 C6 |  if_b	mov	_var02, #1
2b124     01 01 02 F1 | 	add	_var01, _var02
2b128     01 18 CE F7 | 	test	arg04, #1 wz
2b12c     1F 00 26 54 |  if_ne	bith	_var01, #31
2b130     00 FB 01 F6 | 	mov	result1, _var01
2b134                 | __system__pack_0667_ret
2b134     2D 00 64 FD | 	ret
2b138                 | 
2b138                 | __system___rxtxioctl_0757
2b138     00 15 0E F2 | 	cmp	arg02, #256 wz
2b13c     0C 00 90 AD |  if_e	jmp	#LR__4180
2b140     01 15 0E F2 | 	cmp	arg02, #257 wz
2b144     1C 00 90 AD |  if_e	jmp	#LR__4181
2b148     30 00 90 FD | 	jmp	#LR__4182
2b14c                 | LR__4180
2b14c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2b150     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2b154     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2b158     0B FB 61 FC | 	wrlong	result1, arg03
2b15c     00 FA 05 F6 | 	mov	result1, #0
2b160     28 00 90 FD | 	jmp	#LR__4183
2b164                 | LR__4181
2b164     0B 13 02 FB | 	rdlong	arg01, arg03
2b168     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2b16c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b170     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2b174     00 FA 05 F6 | 	mov	result1, #0
2b178     10 00 90 FD | 	jmp	#LR__4183
2b17c                 | LR__4182
2b17c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b180     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2b184     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b188     01 FA 65 F6 | 	neg	result1, #1
2b18c                 | LR__4183
2b18c                 | __system___rxtxioctl_0757_ret
2b18c     2D 00 64 FD | 	ret
2b190                 | 
2b190                 | __system____dummy_flush_0758
2b190     00 FA 05 F6 | 	mov	result1, #0
2b194                 | __system____dummy_flush_0758_ret
2b194     2D 00 64 FD | 	ret
2b198                 | 
2b198                 | __system___vfswrite
2b198     09 4A 05 F6 | 	mov	COUNT_, #9
2b19c     A8 00 A0 FD | 	call	#pushregs_
2b1a0     09 27 02 F6 | 	mov	local01, arg01
2b1a4     0A 29 02 F6 | 	mov	local02, arg02
2b1a8     0B 2B 02 F6 | 	mov	local03, arg03
2b1ac     14 2D 02 F6 | 	mov	local04, local02
2b1b0     08 26 06 F1 | 	add	local01, #8
2b1b4     13 13 02 FB | 	rdlong	arg01, local01
2b1b8     08 26 86 F1 | 	sub	local01, #8
2b1bc     02 12 CE F7 | 	test	arg01, #2 wz
2b1c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b1c4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b1c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b1cc     01 FA 65 A6 |  if_e	neg	result1, #1
2b1d0     80 01 90 AD |  if_e	jmp	#LR__4196
2b1d4     08 26 06 F1 | 	add	local01, #8
2b1d8     13 FB 01 FB | 	rdlong	result1, local01
2b1dc     08 26 86 F1 | 	sub	local01, #8
2b1e0     40 FA CD F7 | 	test	result1, #64 wz
2b1e4     68 00 90 AD |  if_e	jmp	#LR__4191
2b1e8     08 26 06 F1 | 	add	local01, #8
2b1ec     13 15 02 FB | 	rdlong	arg02, local01
2b1f0     08 26 86 F1 | 	sub	local01, #8
2b1f4     80 14 CE F7 | 	test	arg02, #128 wz
2b1f8     54 00 90 AD |  if_e	jmp	#LR__4190
2b1fc     30 26 06 F1 | 	add	local01, #48
2b200     13 2F 02 FB | 	rdlong	local05, local01
2b204     17 31 02 F6 | 	mov	local06, local05
2b208     30 26 86 F1 | 	sub	local01, #48
2b20c     13 30 46 F7 | 	zerox	local06, #19
2b210     14 2E 46 F0 | 	shr	local05, #20
2b214     02 2E 66 F0 | 	shl	local05, #2
2b218     ED 2E 02 F1 | 	add	local05, __methods__
2b21c     17 2F 02 FB | 	rdlong	local05, local05
2b220     13 13 02 F6 | 	mov	arg01, local01
2b224     00 14 06 F6 | 	mov	arg02, #0
2b228     02 16 06 F6 | 	mov	arg03, #2
2b22c     F2 32 02 F6 | 	mov	local07, objptr
2b230     18 E5 01 F6 | 	mov	objptr, local06
2b234     2D 2E 62 FD | 	call	local05
2b238     19 E5 01 F6 | 	mov	objptr, local07
2b23c     08 26 06 F1 | 	add	local01, #8
2b240     13 33 02 FB | 	rdlong	local07, local01
2b244     80 32 26 F5 | 	andn	local07, #128
2b248     13 33 62 FC | 	wrlong	local07, local01
2b24c     08 26 86 F1 | 	sub	local01, #8
2b250                 | LR__4190
2b250                 | LR__4191
2b250     18 26 06 F1 | 	add	local01, #24
2b254     13 33 0A FB | 	rdlong	local07, local01 wz
2b258     18 26 86 F1 | 	sub	local01, #24
2b25c     80 00 90 AD |  if_e	jmp	#LR__4193
2b260     18 26 06 F1 | 	add	local01, #24
2b264     13 2F 02 FB | 	rdlong	local05, local01
2b268     17 31 02 F6 | 	mov	local06, local05
2b26c     18 26 86 F1 | 	sub	local01, #24
2b270     13 30 46 F7 | 	zerox	local06, #19
2b274     14 2E 46 F0 | 	shr	local05, #20
2b278     02 2E 66 F0 | 	shl	local05, #2
2b27c     ED 2E 02 F1 | 	add	local05, __methods__
2b280     17 2F 02 FB | 	rdlong	local05, local05
2b284     14 15 02 F6 | 	mov	arg02, local02
2b288     15 17 02 F6 | 	mov	arg03, local03
2b28c     13 13 02 F6 | 	mov	arg01, local01
2b290     F2 32 02 F6 | 	mov	local07, objptr
2b294     18 E5 01 F6 | 	mov	objptr, local06
2b298     2D 2E 62 FD | 	call	local05
2b29c     19 E5 01 F6 | 	mov	objptr, local07
2b2a0     FD 34 02 F6 | 	mov	local08, result1
2b2a4     00 34 56 F2 | 	cmps	local08, #0 wc
2b2a8     2C 00 90 3D |  if_ae	jmp	#LR__4192
2b2ac     08 26 06 F1 | 	add	local01, #8
2b2b0     13 33 02 FB | 	rdlong	local07, local01
2b2b4     20 32 46 F5 | 	or	local07, #32
2b2b8     13 33 62 FC | 	wrlong	local07, local01
2b2bc     00 34 4E F2 | 	cmps	local08, #0 wz
2b2c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b2c4     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2b2c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b2cc     01 FA 65 56 |  if_ne	neg	result1, #1
2b2d0     00 FA 05 A6 |  if_e	mov	result1, #0
2b2d4     7C 00 90 FD | 	jmp	#LR__4196
2b2d8                 | LR__4192
2b2d8     1A FB 01 F6 | 	mov	result1, local08
2b2dc     74 00 90 FD | 	jmp	#LR__4196
2b2e0                 | LR__4193
2b2e0     1C 26 06 F1 | 	add	local01, #28
2b2e4     13 37 0A FB | 	rdlong	local09, local01 wz
2b2e8     1C 26 86 F1 | 	sub	local01, #28
2b2ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b2f0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b2f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b2f8     01 FA 65 A6 |  if_e	neg	result1, #1
2b2fc     54 00 90 AD |  if_e	jmp	#LR__4196
2b300     00 34 06 F6 | 	mov	local08, #0
2b304                 | LR__4194
2b304     01 2A 16 F2 | 	cmp	local03, #1 wc
2b308     44 00 90 CD |  if_b	jmp	#LR__4195
2b30c     1B 31 02 F6 | 	mov	local06, local09
2b310     1B 2F 02 F6 | 	mov	local05, local09
2b314     13 30 46 F7 | 	zerox	local06, #19
2b318     14 2E 46 F0 | 	shr	local05, #20
2b31c     02 2E 66 F0 | 	shl	local05, #2
2b320     ED 2E 02 F1 | 	add	local05, __methods__
2b324     17 2F 02 FB | 	rdlong	local05, local05
2b328     16 13 C2 FA | 	rdbyte	arg01, local04
2b32c     13 15 02 F6 | 	mov	arg02, local01
2b330     F2 32 02 F6 | 	mov	local07, objptr
2b334     18 E5 01 F6 | 	mov	objptr, local06
2b338     01 2C 06 F1 | 	add	local04, #1
2b33c     2D 2E 62 FD | 	call	local05
2b340     19 E5 01 F6 | 	mov	objptr, local07
2b344     FD 34 02 F1 | 	add	local08, result1
2b348     01 2A 86 F1 | 	sub	local03, #1
2b34c     B4 FF 9F FD | 	jmp	#LR__4194
2b350                 | LR__4195
2b350     1A FB 01 F6 | 	mov	result1, local08
2b354                 | LR__4196
2b354     A7 F0 03 F6 | 	mov	ptra, fp
2b358     B2 00 A0 FD | 	call	#popregs_
2b35c                 | __system___vfswrite_ret
2b35c     2D 00 64 FD | 	ret
2b360                 | 
2b360                 | __system___vfsread
2b360     03 4A 05 F6 | 	mov	COUNT_, #3
2b364     A8 00 A0 FD | 	call	#pushregs_
2b368     28 F0 07 F1 | 	add	ptra, #40
2b36c     04 4E 05 F1 | 	add	fp, #4
2b370     A7 12 62 FC | 	wrlong	arg01, fp
2b374     04 4E 05 F1 | 	add	fp, #4
2b378     A7 14 62 FC | 	wrlong	arg02, fp
2b37c     04 4E 05 F1 | 	add	fp, #4
2b380     A7 16 62 FC | 	wrlong	arg03, fp
2b384     04 4E 85 F1 | 	sub	fp, #4
2b388     A7 FA 01 FB | 	rdlong	result1, fp
2b38c     14 4E 05 F1 | 	add	fp, #20
2b390     A7 FA 61 FC | 	wrlong	result1, fp
2b394     04 4E 05 F1 | 	add	fp, #4
2b398     A7 00 68 FC | 	wrlong	#0, fp
2b39c     1C 4E 85 F1 | 	sub	fp, #28
2b3a0     A7 12 02 FB | 	rdlong	arg01, fp
2b3a4     04 4E 85 F1 | 	sub	fp, #4
2b3a8     08 12 06 F1 | 	add	arg01, #8
2b3ac     09 FB 01 FB | 	rdlong	result1, arg01
2b3b0     01 FA CD F7 | 	test	result1, #1 wz
2b3b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b3b8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b3bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b3c0     01 FA 65 A6 |  if_e	neg	result1, #1
2b3c4     74 02 90 AD |  if_e	jmp	#LR__4206
2b3c8     04 4E 05 F1 | 	add	fp, #4
2b3cc     A7 12 02 FB | 	rdlong	arg01, fp
2b3d0     04 4E 85 F1 | 	sub	fp, #4
2b3d4     14 12 06 F1 | 	add	arg01, #20
2b3d8     09 FB 09 FB | 	rdlong	result1, arg01 wz
2b3dc     B8 00 90 AD |  if_e	jmp	#LR__4201
2b3e0     04 4E 05 F1 | 	add	fp, #4
2b3e4     A7 12 02 FB | 	rdlong	arg01, fp
2b3e8     09 17 02 F6 | 	mov	arg03, arg01
2b3ec     14 16 06 F1 | 	add	arg03, #20
2b3f0     0B 27 02 FB | 	rdlong	local01, arg03
2b3f4     13 29 02 F6 | 	mov	local02, local01
2b3f8     13 26 46 F7 | 	zerox	local01, #19
2b3fc     14 28 46 F0 | 	shr	local02, #20
2b400     02 28 66 F0 | 	shl	local02, #2
2b404     ED 28 02 F1 | 	add	local02, __methods__
2b408     14 29 02 FB | 	rdlong	local02, local02
2b40c     04 4E 05 F1 | 	add	fp, #4
2b410     A7 14 02 FB | 	rdlong	arg02, fp
2b414     04 4E 05 F1 | 	add	fp, #4
2b418     A7 16 02 FB | 	rdlong	arg03, fp
2b41c     0C 4E 85 F1 | 	sub	fp, #12
2b420     F2 2A 02 F6 | 	mov	local03, objptr
2b424     13 E5 01 F6 | 	mov	objptr, local01
2b428     2D 28 62 FD | 	call	local02
2b42c     15 E5 01 F6 | 	mov	objptr, local03
2b430     10 4E 05 F1 | 	add	fp, #16
2b434     A7 FA 61 FC | 	wrlong	result1, fp
2b438     10 4E 85 F1 | 	sub	fp, #16
2b43c     00 FA 55 F2 | 	cmps	result1, #0 wc
2b440     44 00 90 3D |  if_ae	jmp	#LR__4200
2b444     04 4E 05 F1 | 	add	fp, #4
2b448     A7 2A 02 FB | 	rdlong	local03, fp
2b44c     15 27 02 F6 | 	mov	local01, local03
2b450     08 2A 06 F1 | 	add	local03, #8
2b454     15 29 02 FB | 	rdlong	local02, local03
2b458     20 28 46 F5 | 	or	local02, #32
2b45c     08 26 06 F1 | 	add	local01, #8
2b460     13 29 62 FC | 	wrlong	local02, local01
2b464     0C 4E 05 F1 | 	add	fp, #12
2b468     A7 12 0A FB | 	rdlong	arg01, fp wz
2b46c     10 4E 85 F1 | 	sub	fp, #16
2b470     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b474     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b478     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b47c     01 FA 65 56 |  if_ne	neg	result1, #1
2b480     00 FA 05 A6 |  if_e	mov	result1, #0
2b484     B4 01 90 FD | 	jmp	#LR__4206
2b488                 | LR__4200
2b488     10 4E 05 F1 | 	add	fp, #16
2b48c     A7 FA 01 FB | 	rdlong	result1, fp
2b490     10 4E 85 F1 | 	sub	fp, #16
2b494     A4 01 90 FD | 	jmp	#LR__4206
2b498                 | LR__4201
2b498     04 4E 05 F1 | 	add	fp, #4
2b49c     A7 12 02 FB | 	rdlong	arg01, fp
2b4a0     20 12 06 F1 | 	add	arg01, #32
2b4a4     09 13 0A FB | 	rdlong	arg01, arg01 wz
2b4a8     14 4E 05 F1 | 	add	fp, #20
2b4ac     A7 12 62 FC | 	wrlong	arg01, fp
2b4b0     18 4E 85 F1 | 	sub	fp, #24
2b4b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b4b8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b4bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b4c0     01 FA 65 A6 |  if_e	neg	result1, #1
2b4c4     74 01 90 AD |  if_e	jmp	#LR__4206
2b4c8     04 4E 05 F1 | 	add	fp, #4
2b4cc     A7 2A 02 FB | 	rdlong	local03, fp
2b4d0     04 4E 85 F1 | 	sub	fp, #4
2b4d4     28 2A 06 F1 | 	add	local03, #40
2b4d8     15 29 0A FB | 	rdlong	local02, local03 wz
2b4dc     7C 00 90 AD |  if_e	jmp	#LR__4203
2b4e0     04 4E 05 F1 | 	add	fp, #4
2b4e4     A7 12 02 FB | 	rdlong	arg01, fp
2b4e8     09 2B 02 F6 | 	mov	local03, arg01
2b4ec     28 2A 06 F1 | 	add	local03, #40
2b4f0     15 27 02 FB | 	rdlong	local01, local03
2b4f4     13 29 02 F6 | 	mov	local02, local01
2b4f8     13 26 46 F7 | 	zerox	local01, #19
2b4fc     14 28 46 F0 | 	shr	local02, #20
2b500     02 28 66 F0 | 	shl	local02, #2
2b504     ED 28 02 F1 | 	add	local02, __methods__
2b508     14 29 02 FB | 	rdlong	local02, local02
2b50c     20 4E 05 F1 | 	add	fp, #32
2b510     A7 16 02 F6 | 	mov	arg03, fp
2b514     24 4E 85 F1 | 	sub	fp, #36
2b518     00 15 06 F6 | 	mov	arg02, #256
2b51c     F2 2A 02 F6 | 	mov	local03, objptr
2b520     13 E5 01 F6 | 	mov	objptr, local01
2b524     2D 28 62 FD | 	call	local02
2b528     15 E5 01 F6 | 	mov	objptr, local03
2b52c     10 4E 05 F1 | 	add	fp, #16
2b530     A7 FA 61 FC | 	wrlong	result1, fp
2b534     00 FA 4D F2 | 	cmps	result1, #0 wz
2b538     10 4E 85 F1 | 	sub	fp, #16
2b53c     1C 00 90 5D |  if_ne	jmp	#LR__4202
2b540     24 4E 05 F1 | 	add	fp, #36
2b544     A7 28 02 FB | 	rdlong	local02, fp
2b548     24 4E 85 F1 | 	sub	fp, #36
2b54c     02 28 CE F7 | 	test	local02, #2 wz
2b550     20 4E 05 51 |  if_ne	add	fp, #32
2b554     A7 02 68 5C |  if_ne	wrlong	#1, fp
2b558     20 4E 85 51 |  if_ne	sub	fp, #32
2b55c                 | LR__4202
2b55c                 | LR__4203
2b55c     10 4E 05 F1 | 	add	fp, #16
2b560     A7 00 68 FC | 	wrlong	#0, fp
2b564     10 4E 85 F1 | 	sub	fp, #16
2b568                 | LR__4204
2b568     0C 4E 05 F1 | 	add	fp, #12
2b56c     A7 2A 02 FB | 	rdlong	local03, fp
2b570     0C 4E 85 F1 | 	sub	fp, #12
2b574     01 2A 16 F2 | 	cmp	local03, #1 wc
2b578     B4 00 90 CD |  if_b	jmp	#LR__4205
2b57c     18 4E 05 F1 | 	add	fp, #24
2b580     A7 28 02 FB | 	rdlong	local02, fp
2b584     14 2B 02 F6 | 	mov	local03, local02
2b588     13 2A 46 F7 | 	zerox	local03, #19
2b58c     14 28 46 F0 | 	shr	local02, #20
2b590     02 28 66 F0 | 	shl	local02, #2
2b594     ED 28 02 F1 | 	add	local02, __methods__
2b598     14 29 02 FB | 	rdlong	local02, local02
2b59c     14 4E 85 F1 | 	sub	fp, #20
2b5a0     A7 12 02 FB | 	rdlong	arg01, fp
2b5a4     04 4E 85 F1 | 	sub	fp, #4
2b5a8     F2 26 02 F6 | 	mov	local01, objptr
2b5ac     15 E5 01 F6 | 	mov	objptr, local03
2b5b0     2D 28 62 FD | 	call	local02
2b5b4     13 E5 01 F6 | 	mov	objptr, local01
2b5b8     14 4E 05 F1 | 	add	fp, #20
2b5bc     A7 FA 61 FC | 	wrlong	result1, fp
2b5c0     14 4E 85 F1 | 	sub	fp, #20
2b5c4     00 FA 55 F2 | 	cmps	result1, #0 wc
2b5c8     64 00 90 CD |  if_b	jmp	#LR__4205
2b5cc     1C 4E 05 F1 | 	add	fp, #28
2b5d0     A7 2A 02 FB | 	rdlong	local03, fp
2b5d4     15 29 02 F6 | 	mov	local02, local03
2b5d8     01 28 06 F1 | 	add	local02, #1
2b5dc     A7 28 62 FC | 	wrlong	local02, fp
2b5e0     08 4E 85 F1 | 	sub	fp, #8
2b5e4     A7 28 02 FB | 	rdlong	local02, fp
2b5e8     15 29 42 FC | 	wrbyte	local02, local03
2b5ec     04 4E 85 F1 | 	sub	fp, #4
2b5f0     A7 2A 02 FB | 	rdlong	local03, fp
2b5f4     01 2A 06 F1 | 	add	local03, #1
2b5f8     A7 2A 62 FC | 	wrlong	local03, fp
2b5fc     04 4E 85 F1 | 	sub	fp, #4
2b600     A7 2A 02 FB | 	rdlong	local03, fp
2b604     01 2A 86 F1 | 	sub	local03, #1
2b608     A7 2A 62 FC | 	wrlong	local03, fp
2b60c     14 4E 05 F1 | 	add	fp, #20
2b610     A7 2A 0A FB | 	rdlong	local03, fp wz
2b614     20 4E 85 F1 | 	sub	fp, #32
2b618     4C FF 9F AD |  if_e	jmp	#LR__4204
2b61c     14 4E 05 F1 | 	add	fp, #20
2b620     A7 28 02 FB | 	rdlong	local02, fp
2b624     14 4E 85 F1 | 	sub	fp, #20
2b628     0A 28 0E F2 | 	cmp	local02, #10 wz
2b62c     38 FF 9F 5D |  if_ne	jmp	#LR__4204
2b630                 | LR__4205
2b630     10 4E 05 F1 | 	add	fp, #16
2b634     A7 FA 01 FB | 	rdlong	result1, fp
2b638     10 4E 85 F1 | 	sub	fp, #16
2b63c                 | LR__4206
2b63c     A7 F0 03 F6 | 	mov	ptra, fp
2b640     B2 00 A0 FD | 	call	#popregs_
2b644                 | __system___vfsread_ret
2b644     2D 00 64 FD | 	ret
2b648                 | 
2b648                 | __system____default_filbuf
2b648     04 4A 05 F6 | 	mov	COUNT_, #4
2b64c     A8 00 A0 FD | 	call	#pushregs_
2b650     09 27 02 F6 | 	mov	local01, arg01
2b654     13 29 02 FB | 	rdlong	local02, local01
2b658     0C 28 06 F1 | 	add	local02, #12
2b65c     14 FB 09 FB | 	rdlong	result1, local02 wz
2b660     0C 28 86 F1 | 	sub	local02, #12
2b664     20 00 90 5D |  if_ne	jmp	#LR__4210
2b668     14 28 06 F1 | 	add	local02, #20
2b66c     14 FB 01 F6 | 	mov	result1, local02
2b670     04 28 86 F1 | 	sub	local02, #4
2b674     14 FB 61 FC | 	wrlong	result1, local02
2b678     04 28 86 F1 | 	sub	local02, #4
2b67c     02 00 80 FF 
2b680     14 01 68 FC | 	wrlong	##1024, local02
2b684     0C 28 86 F1 | 	sub	local02, #12
2b688                 | LR__4210
2b688     14 26 06 F1 | 	add	local01, #20
2b68c     13 2B 02 FB | 	rdlong	local03, local01
2b690     15 2D 02 F6 | 	mov	local04, local03
2b694     14 26 86 F1 | 	sub	local01, #20
2b698     13 2C 46 F7 | 	zerox	local04, #19
2b69c     14 2A 46 F0 | 	shr	local03, #20
2b6a0     02 2A 66 F0 | 	shl	local03, #2
2b6a4     ED 2A 02 F1 | 	add	local03, __methods__
2b6a8     15 2B 02 FB | 	rdlong	local03, local03
2b6ac     10 28 06 F1 | 	add	local02, #16
2b6b0     14 15 02 FB | 	rdlong	arg02, local02
2b6b4     04 28 86 F1 | 	sub	local02, #4
2b6b8     14 17 02 FB | 	rdlong	arg03, local02
2b6bc     0C 28 86 F1 | 	sub	local02, #12
2b6c0     13 13 02 F6 | 	mov	arg01, local01
2b6c4     F2 26 02 F6 | 	mov	local01, objptr
2b6c8     16 E5 01 F6 | 	mov	objptr, local04
2b6cc     2D 2A 62 FD | 	call	local03
2b6d0     13 E5 01 F6 | 	mov	objptr, local01
2b6d4     FD 2C 02 F6 | 	mov	local04, result1
2b6d8     00 2C 56 F2 | 	cmps	local04, #0 wc
2b6dc     01 FA 65 C6 |  if_b	neg	result1, #1
2b6e0     28 00 90 CD |  if_b	jmp	#LR__4211
2b6e4     14 2D 62 FC | 	wrlong	local04, local02
2b6e8     10 28 06 F1 | 	add	local02, #16
2b6ec     14 2B 02 FB | 	rdlong	local03, local02
2b6f0     0C 28 86 F1 | 	sub	local02, #12
2b6f4     14 2B 62 FC | 	wrlong	local03, local02
2b6f8     04 28 06 F1 | 	add	local02, #4
2b6fc     14 2B 02 FB | 	rdlong	local03, local02
2b700     01 2A 46 F5 | 	or	local03, #1
2b704     14 2B 62 FC | 	wrlong	local03, local02
2b708     16 FB 01 F6 | 	mov	result1, local04
2b70c                 | LR__4211
2b70c     A7 F0 03 F6 | 	mov	ptra, fp
2b710     B2 00 A0 FD | 	call	#popregs_
2b714                 | __system____default_filbuf_ret
2b714     2D 00 64 FD | 	ret
2b718                 | 
2b718                 | __system__getlower_1147
2b718     41 12 56 F2 | 	cmps	arg01, #65 wc
2b71c     10 00 90 CD |  if_b	jmp	#LR__4220
2b720     5B 12 56 F2 | 	cmps	arg01, #91 wc
2b724     09 FB 01 C6 |  if_b	mov	result1, arg01
2b728     20 FA 05 C1 |  if_b	add	result1, #32
2b72c     04 00 90 CD |  if_b	jmp	#__system__getlower_1147_ret
2b730                 | LR__4220
2b730     09 FB 01 F6 | 	mov	result1, arg01
2b734                 | __system__getlower_1147_ret
2b734     2D 00 64 FD | 	ret
2b738                 | 
2b738                 | __system___pat_match
2b738     08 4A 05 F6 | 	mov	COUNT_, #8
2b73c     A8 00 A0 FD | 	call	#pushregs_
2b740     09 27 02 F6 | 	mov	local01, arg01
2b744                 | LR__4230
2b744     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2b748     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2b74c     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2b750     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2b754     2C 00 90 AD |  if_e	jmp	#LR__4231
2b758     0A 13 C2 FA | 	rdbyte	arg01, arg02
2b75c     B8 FF BF FD | 	call	#__system__getlower_1147
2b760     FD 2A 02 F6 | 	mov	local03, result1
2b764     13 13 C2 FA | 	rdbyte	arg01, local01
2b768     AC FF BF FD | 	call	#__system__getlower_1147
2b76c     15 FB 09 F2 | 	cmp	result1, local03 wz
2b770     00 FA 05 56 |  if_ne	mov	result1, #0
2b774     FC 00 90 5D |  if_ne	jmp	#LR__4239
2b778     01 26 06 F1 | 	add	local01, #1
2b77c     01 14 06 F1 | 	add	arg02, #1
2b780     C0 FF 9F FD | 	jmp	#LR__4230
2b784                 | LR__4231
2b784     0A 2B C2 FA | 	rdbyte	local03, arg02
2b788     2A 2A 0E F2 | 	cmp	local03, #42 wz
2b78c     D4 00 90 5D |  if_ne	jmp	#LR__4238
2b790     01 14 06 F1 | 	add	arg02, #1
2b794     0A 29 C2 FA | 	rdbyte	local02, arg02
2b798     01 14 86 F1 | 	sub	arg02, #1
2b79c     2E 28 0E F2 | 	cmp	local02, #46 wz
2b7a0     28 00 90 5D |  if_ne	jmp	#LR__4232
2b7a4     02 14 06 F1 | 	add	arg02, #2
2b7a8     0A 29 C2 FA | 	rdbyte	local02, arg02
2b7ac     02 14 86 F1 | 	sub	arg02, #2
2b7b0     2A 28 0E F2 | 	cmp	local02, #42 wz
2b7b4     03 14 06 A1 |  if_e	add	arg02, #3
2b7b8     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2b7bc     03 14 86 A1 |  if_e	sub	arg02, #3
2b7c0     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2b7c4     01 FA 05 A6 |  if_e	mov	result1, #1
2b7c8     A8 00 90 AD |  if_e	jmp	#LR__4239
2b7cc                 | LR__4232
2b7cc     01 14 06 F1 | 	add	arg02, #1
2b7d0     00 30 06 F6 | 	mov	local06, #0
2b7d4     97 1E 48 FB | 	callpa	#(@LR__4235-@LR__4233)>>2,fcache_load_ptr_
2b7d8                 | LR__4233
2b7d8     18 33 02 F6 | 	mov	local07, local06
2b7dc     0A 33 02 F1 | 	add	local07, arg02
2b7e0     19 33 CA FA | 	rdbyte	local07, local07 wz
2b7e4     18 2F 02 56 |  if_ne	mov	local05, local06
2b7e8     01 2E 06 51 |  if_ne	add	local05, #1
2b7ec     17 31 02 56 |  if_ne	mov	local06, local05
2b7f0     E4 FF 9F 5D |  if_ne	jmp	#LR__4233
2b7f4     00 34 06 F6 | 	mov	local08, #0
2b7f8                 | LR__4234
2b7f8     1A 33 02 F6 | 	mov	local07, local08
2b7fc     13 33 02 F1 | 	add	local07, local01
2b800     19 33 CA FA | 	rdbyte	local07, local07 wz
2b804     1A 2F 02 56 |  if_ne	mov	local05, local08
2b808     01 2E 06 51 |  if_ne	add	local05, #1
2b80c     17 35 02 56 |  if_ne	mov	local08, local05
2b810     E4 FF 9F 5D |  if_ne	jmp	#LR__4234
2b814                 | LR__4235
2b814     18 35 52 F2 | 	cmps	local08, local06 wc
2b818     00 FA 05 C6 |  if_b	mov	result1, #0
2b81c     54 00 90 CD |  if_b	jmp	#LR__4239
2b820     1A 29 02 F6 | 	mov	local02, local08
2b824     18 29 82 F1 | 	sub	local02, local06
2b828     14 27 02 F1 | 	add	local01, local02
2b82c                 | LR__4236
2b82c     01 30 56 F2 | 	cmps	local06, #1 wc
2b830     30 00 90 CD |  if_b	jmp	#LR__4237
2b834     13 13 C2 FA | 	rdbyte	arg01, local01
2b838     DC FE BF FD | 	call	#__system__getlower_1147
2b83c     FD 34 02 F6 | 	mov	local08, result1
2b840     0A 13 C2 FA | 	rdbyte	arg01, arg02
2b844     D0 FE BF FD | 	call	#__system__getlower_1147
2b848     FD 34 0A F2 | 	cmp	local08, result1 wz
2b84c     00 FA 05 56 |  if_ne	mov	result1, #0
2b850     20 00 90 5D |  if_ne	jmp	#LR__4239
2b854     01 26 06 F1 | 	add	local01, #1
2b858     01 14 06 F1 | 	add	arg02, #1
2b85c     01 30 86 F1 | 	sub	local06, #1
2b860     C8 FF 9F FD | 	jmp	#LR__4236
2b864                 | LR__4237
2b864                 | LR__4238
2b864     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2b868     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2b86c     01 FA 05 A6 |  if_e	mov	result1, #1
2b870     00 FA 05 56 |  if_ne	mov	result1, #0
2b874                 | LR__4239
2b874     A7 F0 03 F6 | 	mov	ptra, fp
2b878     B2 00 A0 FD | 	call	#popregs_
2b87c                 | __system___pat_match_ret
2b87c     2D 00 64 FD | 	ret
2b880                 | 
2b880                 | _fatfs_cc_ff_uni2oem
2b880     00 00 06 F6 | 	mov	_var01, #0
2b884     80 12 16 F2 | 	cmp	arg01, #128 wc
2b888     09 01 02 C6 |  if_b	mov	_var01, arg01
2b88c     58 00 90 CD |  if_b	jmp	#LR__4244
2b890     80 00 00 FF 
2b894     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2b898     4C 00 90 3D |  if_ae	jmp	#LR__4243
2b89c     0A FB 31 F9 | 	getword	result1, arg02, #0
2b8a0     01 00 00 FF 
2b8a4     52 FB 0D F2 | 	cmp	result1, ##850 wz
2b8a8     3C 00 90 5D |  if_ne	jmp	#LR__4243
2b8ac                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2b8ac     00 00 06 F6 | 	mov	_var01, #0
2b8b0     97 14 48 FB | 	callpa	#(@LR__4241-@LR__4240)>>2,fcache_load_ptr_
2b8b4                 | LR__4240
2b8b4     00 FB 31 F9 | 	getword	result1, _var01, #0
2b8b8     80 FA 15 F2 | 	cmp	result1, #128 wc
2b8bc     1C 00 90 3D |  if_ae	jmp	#LR__4242
2b8c0     00 FB 31 F9 | 	getword	result1, _var01, #0
2b8c4     01 FA 65 F0 | 	shl	result1, #1
2b8c8     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2b8cc     FD FA E1 FA | 	rdword	result1, result1
2b8d0     FD 12 0A F2 | 	cmp	arg01, result1 wz
2b8d4     01 00 06 51 |  if_ne	add	_var01, #1
2b8d8     D8 FF 9F 5D |  if_ne	jmp	#LR__4240
2b8dc                 | LR__4241
2b8dc                 | LR__4242
2b8dc     00 01 32 F9 | 	getword	_var01, _var01, #0
2b8e0     80 00 06 F1 | 	add	_var01, #128
2b8e4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2b8e8                 | LR__4243
2b8e8                 | LR__4244
2b8e8                 | ' 			c = (c + 0x80) & 0xFF;
2b8e8                 | ' 		}
2b8e8                 | ' 	}
2b8e8                 | ' 
2b8e8                 | ' 	return c;
2b8e8     00 FB 01 F6 | 	mov	result1, _var01
2b8ec                 | _fatfs_cc_ff_uni2oem_ret
2b8ec     2D 00 64 FD | 	ret
2b8f0                 | 
2b8f0                 | _fatfs_cc_ff_oem2uni
2b8f0     00 00 06 F6 | 	mov	_var01, #0
2b8f4     09 FB 31 F9 | 	getword	result1, arg01, #0
2b8f8     80 FA 15 F2 | 	cmp	result1, #128 wc
2b8fc     09 01 02 C6 |  if_b	mov	_var01, arg01
2b900     2C 00 90 CD |  if_b	jmp	#LR__4251
2b904     0A 15 32 F9 | 	getword	arg02, arg02, #0
2b908     01 00 00 FF 
2b90c     52 15 0E F2 | 	cmp	arg02, ##850 wz
2b910     1C 00 90 5D |  if_ne	jmp	#LR__4250
2b914     09 FB 31 F9 | 	getword	result1, arg01, #0
2b918     00 FB 15 F2 | 	cmp	result1, #256 wc
2b91c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2b920     80 12 86 C1 |  if_b	sub	arg01, #128
2b924     01 12 66 C0 |  if_b	shl	arg01, #1
2b928     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2b92c     09 01 E2 CA |  if_b	rdword	_var01, arg01
2b930                 | LR__4250
2b930                 | LR__4251
2b930                 | ' 		}
2b930                 | ' 	}
2b930                 | ' 
2b930                 | ' 	return c;
2b930     00 FB 01 F6 | 	mov	result1, _var01
2b934                 | _fatfs_cc_ff_oem2uni_ret
2b934     2D 00 64 FD | 	ret
2b938                 | 
2b938                 | _fatfs_cc_ff_wtoupper
2b938     09 01 02 F6 | 	mov	_var01, arg01
2b93c     80 00 00 FF 
2b940     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2b944     60 01 90 3D |  if_ae	jmp	#LR__4273
2b948     00 03 02 F6 | 	mov	_var02, _var01
2b94c     01 01 32 F9 | 	getword	_var01, _var02, #0
2b950     08 00 00 FF 
2b954     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2b958     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2b95c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2b960     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2b964     01 00 00 3F 
2b968     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2b96c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2b970     01 00 00 3F 
2b974     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2b978     02 07 02 F6 | 	mov	_var04, _var03
2b97c                 | ' 		uc = (WORD)uni;
2b97c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2b97c                 | ' 		for (;;) {
2b97c                 | LR__4260
2b97c     03 09 E2 FA | 	rdword	_var05, _var04
2b980     04 05 02 F6 | 	mov	_var03, _var05
2b984     0F 04 4E F7 | 	zerox	_var03, #15 wz
2b988     02 06 06 F1 | 	add	_var04, #2
2b98c     14 01 90 AD |  if_e	jmp	#LR__4272
2b990     01 05 32 F9 | 	getword	_var03, _var02, #0
2b994     04 01 32 F9 | 	getword	_var01, _var05, #0
2b998     00 05 12 F2 | 	cmp	_var03, _var01 wc
2b99c     04 01 90 CD |  if_b	jmp	#LR__4272
2b9a0     03 0B E2 FA | 	rdword	_var06, _var04
2b9a4     05 0D 32 F9 | 	getword	_var07, _var06, #0
2b9a8     08 0C 46 F0 | 	shr	_var07, #8
2b9ac     05 0B 32 F9 | 	getword	_var06, _var06, #0
2b9b0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2b9b4     01 05 32 F9 | 	getword	_var03, _var02, #0
2b9b8     04 0F 32 F9 | 	getword	_var08, _var05, #0
2b9bc     05 01 32 F9 | 	getword	_var01, _var06, #0
2b9c0     00 0F 02 F1 | 	add	_var08, _var01
2b9c4     07 05 52 F2 | 	cmps	_var03, _var08 wc
2b9c8     02 06 06 F1 | 	add	_var04, #2
2b9cc     C4 00 90 3D |  if_ae	jmp	#LR__4271
2b9d0                 | ' 				switch (cmd) {
2b9d0     06 11 32 F9 | 	getword	_var09, _var07, #0
2b9d4     09 10 26 F3 | 	fle	_var09, #9
2b9d8     30 10 62 FD | 	jmprel	_var09
2b9dc                 | LR__4261
2b9dc     24 00 90 FD | 	jmp	#LR__4262
2b9e0     3C 00 90 FD | 	jmp	#LR__4263
2b9e4     54 00 90 FD | 	jmp	#LR__4264
2b9e8     5C 00 90 FD | 	jmp	#LR__4265
2b9ec     64 00 90 FD | 	jmp	#LR__4266
2b9f0     6C 00 90 FD | 	jmp	#LR__4267
2b9f4     74 00 90 FD | 	jmp	#LR__4268
2b9f8     7C 00 90 FD | 	jmp	#LR__4269
2b9fc     84 00 90 FD | 	jmp	#LR__4270
2ba00     A0 00 90 FD | 	jmp	#LR__4272
2ba04                 | LR__4262
2ba04     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba08     04 09 32 F9 | 	getword	_var05, _var05, #0
2ba0c     04 03 82 F1 | 	sub	_var02, _var05
2ba10     01 02 66 F0 | 	shl	_var02, #1
2ba14     03 03 02 F1 | 	add	_var02, _var04
2ba18     01 03 E2 FA | 	rdword	_var02, _var02
2ba1c     84 00 90 FD | 	jmp	#LR__4272
2ba20                 | LR__4263
2ba20     01 05 32 F9 | 	getword	_var03, _var02, #0
2ba24     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba28     04 09 32 F9 | 	getword	_var05, _var05, #0
2ba2c     04 03 82 F1 | 	sub	_var02, _var05
2ba30     01 02 06 F5 | 	and	_var02, #1
2ba34     02 03 C2 F2 | 	subr	_var02, _var03
2ba38     68 00 90 FD | 	jmp	#LR__4272
2ba3c                 | LR__4264
2ba3c     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba40     10 02 86 F1 | 	sub	_var02, #16
2ba44     5C 00 90 FD | 	jmp	#LR__4272
2ba48                 | LR__4265
2ba48     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba4c     20 02 86 F1 | 	sub	_var02, #32
2ba50     50 00 90 FD | 	jmp	#LR__4272
2ba54                 | LR__4266
2ba54     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba58     30 02 86 F1 | 	sub	_var02, #48
2ba5c     44 00 90 FD | 	jmp	#LR__4272
2ba60                 | LR__4267
2ba60     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba64     1A 02 86 F1 | 	sub	_var02, #26
2ba68     38 00 90 FD | 	jmp	#LR__4272
2ba6c                 | LR__4268
2ba6c     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba70     08 02 06 F1 | 	add	_var02, #8
2ba74     2C 00 90 FD | 	jmp	#LR__4272
2ba78                 | LR__4269
2ba78     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba7c     50 02 86 F1 | 	sub	_var02, #80
2ba80     20 00 90 FD | 	jmp	#LR__4272
2ba84                 | LR__4270
2ba84     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba88     0E 00 00 FF 
2ba8c     60 02 86 F1 | 	sub	_var02, ##7264
2ba90                 | ' 				}
2ba90                 | ' 				break;
2ba90     10 00 90 FD | 	jmp	#LR__4272
2ba94                 | LR__4271
2ba94     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2ba98     02 0A 06 AA |  if_e	mul	_var06, #2
2ba9c     05 07 02 A1 |  if_e	add	_var04, _var06
2baa0     D8 FE 9F FD | 	jmp	#LR__4260
2baa4                 | LR__4272
2baa4     01 01 32 F9 | 	getword	_var01, _var02, #0
2baa8                 | LR__4273
2baa8                 | ' 		}
2baa8                 | ' 		uni = uc;
2baa8                 | ' 	}
2baa8                 | ' 
2baa8                 | ' 	return uni;
2baa8     00 FB 01 F6 | 	mov	result1, _var01
2baac                 | _fatfs_cc_ff_wtoupper_ret
2baac     2D 00 64 FD | 	ret
2bab0                 | 
2bab0                 | _fatfs_cc_strncpy
2bab0     09 01 02 F6 | 	mov	_var01, arg01
2bab4     97 12 48 FB | 	callpa	#(@LR__4281-@LR__4280)>>2,fcache_load_ptr_
2bab8                 | ' 
2bab8                 | ' 	dscan = dst;
2bab8                 | ' 	sscan = src;
2bab8                 | ' 	count = n;
2bab8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2bab8                 | LR__4280
2bab8     01 16 86 F1 | 	sub	arg03, #1
2babc     00 16 56 F2 | 	cmps	arg03, #0 wc
2bac0     18 00 90 CD |  if_b	jmp	#LR__4282
2bac4     0A FB C1 FA | 	rdbyte	result1, arg02
2bac8     00 FB 41 FC | 	wrbyte	result1, _var01
2bacc     01 14 06 F1 | 	add	arg02, #1
2bad0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bad4                 | ' 		continue;
2bad4     01 00 06 F1 | 	add	_var01, #1
2bad8     DC FF 9F 5D |  if_ne	jmp	#LR__4280
2badc                 | LR__4281
2badc                 | LR__4282
2badc     97 0C 48 FB | 	callpa	#(@LR__4284-@LR__4283)>>2,fcache_load_ptr_
2bae0                 | ' 	while (--count >= 0)
2bae0                 | LR__4283
2bae0     01 16 86 F1 | 	sub	arg03, #1
2bae4     00 16 56 F2 | 	cmps	arg03, #0 wc
2bae8     00 03 02 36 |  if_ae	mov	_var02, _var01
2baec     01 00 06 31 |  if_ae	add	_var01, #1
2baf0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2baf4     E8 FF 9F 3D |  if_ae	jmp	#LR__4283
2baf8                 | LR__4284
2baf8                 | ' 		*dscan++ = '\0';
2baf8                 | ' 	return(dst);
2baf8     09 FB 01 F6 | 	mov	result1, arg01
2bafc                 | _fatfs_cc_strncpy_ret
2bafc     2D 00 64 FD | 	ret
2bb00                 | 
2bb00                 | _fatfs_cc_memcmp
2bb00                 | ' 	for (n = size; n > 0; n--)
2bb00     00 16 0E F2 | 	cmp	arg03, #0 wz
2bb04     28 00 90 AD |  if_e	jmp	#LR__4291
2bb08                 | LR__4290
2bb08     09 01 C2 FA | 	rdbyte	_var01, arg01
2bb0c     0A 03 C2 FA | 	rdbyte	_var02, arg02
2bb10     01 01 0A F2 | 	cmp	_var01, _var02 wz
2bb14     01 12 06 A1 |  if_e	add	arg01, #1
2bb18     01 14 06 A1 |  if_e	add	arg02, #1
2bb1c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2bb1c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2bb20     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2bb24     01 FB 81 51 |  if_ne	sub	result1, _var02
2bb28     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2bb2c     F6 17 6E FB | 	djnz	arg03, #LR__4290
2bb30                 | LR__4291
2bb30                 | ' 
2bb30                 | ' 	return(0);
2bb30     00 FA 05 F6 | 	mov	result1, #0
2bb34                 | _fatfs_cc_memcmp_ret
2bb34     2D 00 64 FD | 	ret
2bb38                 | 
2bb38                 | _fatfs_cc_strncmp
2bb38     09 01 0A F6 | 	mov	_var01, arg01 wz
2bb3c     14 00 90 5D |  if_ne	jmp	#LR__4300
2bb40                 | ' 		return scan2 ? -1 : 0;
2bb40     00 14 0E F2 | 	cmp	arg02, #0 wz
2bb44     01 02 66 56 |  if_ne	neg	_var02, #1
2bb48     00 02 06 A6 |  if_e	mov	_var02, #0
2bb4c     01 FB 01 F6 | 	mov	result1, _var02
2bb50     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2bb54                 | LR__4300
2bb54     00 14 0E F2 | 	cmp	arg02, #0 wz
2bb58     01 FA 05 A6 |  if_e	mov	result1, #1
2bb5c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bb60     0B 05 02 F6 | 	mov	_var03, arg03
2bb64     97 16 48 FB | 	callpa	#(@LR__4302-@LR__4301)>>2,fcache_load_ptr_
2bb68                 | ' 	count = n;
2bb68                 | ' 	do {
2bb68                 | LR__4301
2bb68     00 07 C2 FA | 	rdbyte	_var04, _var01
2bb6c     0A 09 02 F6 | 	mov	_var05, arg02
2bb70     04 0B C2 FA | 	rdbyte	_var06, _var05
2bb74     01 04 86 F1 | 	sub	_var03, #1
2bb78     00 04 56 F2 | 	cmps	_var03, #0 wc
2bb7c     01 00 06 F1 | 	add	_var01, #1
2bb80     01 14 06 F1 | 	add	arg02, #1
2bb84     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2bb88     08 00 90 2D |  if_nc_and_z	jmp	#LR__4303
2bb8c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bb90     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4301
2bb94                 | LR__4302
2bb94                 | LR__4303
2bb94     00 04 56 F2 | 	cmps	_var03, #0 wc
2bb98                 | ' 		return(0);
2bb98     00 FA 05 C6 |  if_b	mov	result1, #0
2bb9c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2bba0     05 07 0A F2 | 	cmp	_var04, _var06 wz
2bba4                 | ' 		return(0);
2bba4     00 FA 05 A6 |  if_e	mov	result1, #0
2bba8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bbac     00 06 0E F2 | 	cmp	_var04, #0 wz
2bbb0                 | ' 		return(-1);
2bbb0     01 FA 65 A6 |  if_e	neg	result1, #1
2bbb4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bbb8     00 0A 0E F2 | 	cmp	_var06, #0 wz
2bbbc                 | ' 		return(1);
2bbbc     01 FA 05 A6 |  if_e	mov	result1, #1
2bbc0                 | ' 		return(c1 - c2);
2bbc0     03 FB 01 56 |  if_ne	mov	result1, _var04
2bbc4     05 FB 81 51 |  if_ne	sub	result1, _var06
2bbc8                 | _fatfs_cc_strncmp_ret
2bbc8     2D 00 64 FD | 	ret
2bbcc                 | 
2bbcc                 | _fatfs_cc_strchr
2bbcc                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2bbcc                 | ' 	while ((c = *s++) != (char) charwanted)
2bbcc                 | LR__4310
2bbcc     09 01 02 F6 | 	mov	_var01, arg01
2bbd0     00 03 C2 FA | 	rdbyte	_var02, _var01
2bbd4     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2bbd8     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2bbdc     03 05 0A F2 | 	cmp	_var03, _var04 wz
2bbe0     01 12 06 F1 | 	add	arg01, #1
2bbe4     14 00 90 AD |  if_e	jmp	#LR__4311
2bbe8     01 05 02 F6 | 	mov	_var03, _var02
2bbec     07 04 4E F7 | 	zerox	_var03, #7 wz
2bbf0     00 FA 05 A6 |  if_e	mov	result1, #0
2bbf4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2bbf8     D0 FF 9F FD | 	jmp	#LR__4310
2bbfc                 | LR__4311
2bbfc                 | ' 	return((char *)--s);
2bbfc     01 12 86 F1 | 	sub	arg01, #1
2bc00     09 FB 01 F6 | 	mov	result1, arg01
2bc04                 | _fatfs_cc_strchr_ret
2bc04     2D 00 64 FD | 	ret
2bc08                 | 
2bc08                 | _fatfs_cc_disk_initialize
2bc08     04 4A 05 F6 | 	mov	COUNT_, #4
2bc0c     A8 00 A0 FD | 	call	#pushregs_
2bc10     40 F0 07 F1 | 	add	ptra, #64
2bc14     04 4E 05 F1 | 	add	fp, #4
2bc18     A7 12 42 FC | 	wrbyte	arg01, fp
2bc1c     01 00 00 FF 
2bc20     14 E4 05 F1 | 	add	objptr, ##532
2bc24     F2 18 02 FB | 	rdlong	arg04, objptr
2bc28     2C 4E 05 F1 | 	add	fp, #44
2bc2c     A7 18 62 FC | 	wrlong	arg04, fp
2bc30     04 E4 85 F1 | 	sub	objptr, #4
2bc34     F2 18 02 FB | 	rdlong	arg04, objptr
2bc38     04 4E 05 F1 | 	add	fp, #4
2bc3c     A7 18 62 FC | 	wrlong	arg04, fp
2bc40     08 E4 05 F1 | 	add	objptr, #8
2bc44     F2 18 02 FB | 	rdlong	arg04, objptr
2bc48     04 4E 05 F1 | 	add	fp, #4
2bc4c     A7 18 62 FC | 	wrlong	arg04, fp
2bc50     04 E4 05 F1 | 	add	objptr, #4
2bc54     F2 18 02 FB | 	rdlong	arg04, objptr
2bc58     04 4E 05 F1 | 	add	fp, #4
2bc5c     A7 18 62 FC | 	wrlong	arg04, fp
2bc60     04 E4 05 F1 | 	add	objptr, #4
2bc64     F2 02 48 FC | 	wrbyte	#1, objptr
2bc68     01 00 00 FF 
2bc6c     20 E4 85 F1 | 	sub	objptr, ##544
2bc70     38 4E 85 F1 | 	sub	fp, #56
2bc74     A7 18 CA FA | 	rdbyte	arg04, fp wz
2bc78     04 4E 85 F1 | 	sub	fp, #4
2bc7c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2bc7c                 | '             return RES_NOTRDY;
2bc7c     03 FA 05 56 |  if_ne	mov	result1, #3
2bc80     D8 05 90 5D |  if_ne	jmp	#LR__4338
2bc84     13 00 00 FF 
2bc88     10 13 06 F6 | 	mov	arg01, ##10000
2bc8c     44 95 BF FD | 	call	#__system___waitus
2bc90     30 4E 05 F1 | 	add	fp, #48
2bc94     A7 12 02 FB | 	rdlong	arg01, fp
2bc98     09 01 08 FC | 	wrpin	#0, arg01
2bc9c     04 4E 05 F1 | 	add	fp, #4
2bca0     A7 12 02 FB | 	rdlong	arg01, fp
2bca4     09 01 08 FC | 	wrpin	#0, arg01
2bca8     04 4E 05 F1 | 	add	fp, #4
2bcac     A7 12 02 FB | 	rdlong	arg01, fp
2bcb0     09 01 08 FC | 	wrpin	#0, arg01
2bcb4     04 4E 05 F1 | 	add	fp, #4
2bcb8     A7 12 02 FB | 	rdlong	arg01, fp
2bcbc     09 00 80 FF 
2bcc0     09 01 08 FC | 	wrpin	##4608, arg01
2bcc4     0C 4E 85 F1 | 	sub	fp, #12
2bcc8     A7 12 02 FB | 	rdlong	arg01, fp
2bccc     59 12 62 FD | 	drvh	arg01
2bcd0     04 4E 05 F1 | 	add	fp, #4
2bcd4     A7 12 02 FB | 	rdlong	arg01, fp
2bcd8     59 12 62 FD | 	drvh	arg01
2bcdc     04 4E 05 F1 | 	add	fp, #4
2bce0     A7 12 02 FB | 	rdlong	arg01, fp
2bce4     59 12 62 FD | 	drvh	arg01
2bce8     04 4E 05 F1 | 	add	fp, #4
2bcec     A7 12 02 FB | 	rdlong	arg01, fp
2bcf0     59 12 62 FD | 	drvh	arg01
2bcf4     20 4E 85 F1 | 	sub	fp, #32
2bcf8     00 04 80 FF 
2bcfc     A7 20 68 FC | 	wrlong	##524304, fp
2bd00     04 4E 05 F1 | 	add	fp, #4
2bd04     20 03 80 FF 
2bd08     A7 90 68 FC | 	wrlong	##409672, fp
2bd0c     14 4E 05 F1 | 	add	fp, #20
2bd10     A7 26 02 FB | 	rdlong	local01, fp
2bd14     18 4E 85 F1 | 	sub	fp, #24
2bd18     A7 16 02 FB | 	rdlong	arg03, fp
2bd1c     40 26 62 FD | 	dirl	local01
2bd20     A0 03 80 FF 
2bd24     13 91 08 FC | 	wrpin	##475208, local01
2bd28     13 17 12 FC | 	wxpin	arg03, local01
2bd2c     13 01 28 FC | 	wypin	#0, local01
2bd30     41 26 62 FD | 	dirh	local01
2bd34     1C 4E 05 F1 | 	add	fp, #28
2bd38     A7 28 02 FB | 	rdlong	local02, fp
2bd3c     14 27 82 F1 | 	sub	local01, local02
2bd40     07 26 06 F5 | 	and	local01, #7
2bd44     18 26 66 F0 | 	shl	local01, #24
2bd48     78 14 06 F6 | 	mov	arg02, #120
2bd4c     13 15 42 F5 | 	or	arg02, local01
2bd50     14 4E 85 F1 | 	sub	fp, #20
2bd54     A7 14 62 FC | 	wrlong	arg02, fp
2bd58     14 4E 05 F1 | 	add	fp, #20
2bd5c     A7 12 02 FB | 	rdlong	arg01, fp
2bd60     10 14 26 F4 | 	bith	arg02, #16
2bd64     40 12 62 FD | 	dirl	arg01
2bd68     09 15 02 FC | 	wrpin	arg02, arg01
2bd6c     09 3F 18 FC | 	wxpin	#31, arg01
2bd70     FF FF FF FF 
2bd74     09 FF 2B FC | 	wypin	##-1, arg01
2bd78     41 12 62 FD | 	dirh	arg01
2bd7c     04 4E 85 F1 | 	sub	fp, #4
2bd80     A7 14 02 FB | 	rdlong	arg02, fp
2bd84     08 4E 05 F1 | 	add	fp, #8
2bd88     A7 2A 02 FB | 	rdlong	local03, fp
2bd8c     15 15 82 F1 | 	sub	arg02, local03
2bd90     07 14 06 F5 | 	and	arg02, #7
2bd94     18 14 66 F0 | 	shl	arg02, #24
2bd98     14 4E 85 F1 | 	sub	fp, #20
2bd9c     A7 14 62 FC | 	wrlong	arg02, fp
2bda0     29 00 00 FF 
2bda4     7A 14 46 F5 | 	or	arg02, ##21114
2bda8     A7 14 62 FC | 	wrlong	arg02, fp
2bdac     14 4E 05 F1 | 	add	fp, #20
2bdb0     A7 12 02 FB | 	rdlong	arg01, fp
2bdb4     40 12 62 FD | 	dirl	arg01
2bdb8     09 15 02 FC | 	wrpin	arg02, arg01
2bdbc     09 4F 18 FC | 	wxpin	#39, arg01
2bdc0     09 01 28 FC | 	wypin	#0, arg01
2bdc4     41 12 62 FD | 	dirh	arg01
2bdc8     28 4E 85 F1 | 	sub	fp, #40
2bdcc     A7 12 02 F6 | 	mov	arg01, fp
2bdd0     14 4E 85 F1 | 	sub	fp, #20
2bdd4     0A 14 06 F6 | 	mov	arg02, #10
2bdd8     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1181
2bddc     00 12 06 F6 | 	mov	arg01, #0
2bde0     00 14 06 F6 | 	mov	arg02, #0
2bde4     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2bde8     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1191
2bdec     64 12 06 F6 | 	mov	arg01, #100
2bdf0     E0 93 BF FD | 	call	#__system___waitus
2bdf4     14 4E 05 F1 | 	add	fp, #20
2bdf8     A7 12 02 F6 | 	mov	arg01, fp
2bdfc     14 4E 85 F1 | 	sub	fp, #20
2be00     0A 14 06 F6 | 	mov	arg02, #10
2be04     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1181
2be08     0C 4E 05 F1 | 	add	fp, #12
2be0c     A7 00 48 FC | 	wrbyte	#0, fp
2be10     0C 4E 85 F1 | 	sub	fp, #12
2be14     00 12 06 F6 | 	mov	arg01, #0
2be18     00 14 06 F6 | 	mov	arg02, #0
2be1c     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2be20     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2be24     01 18 0E F2 | 	cmp	arg04, #1 wz
2be28     B8 03 90 5D |  if_ne	jmp	#LR__4337
2be2c     08 12 06 F6 | 	mov	arg01, #8
2be30     AA 15 06 F6 | 	mov	arg02, #426
2be34     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2be38     FD FA E1 F8 | 	getbyte	result1, result1, #0
2be3c     01 FA 0D F2 | 	cmp	result1, #1 wz
2be40     98 01 90 5D |  if_ne	jmp	#LR__4323
2be44     14 4E 05 F1 | 	add	fp, #20
2be48     A7 12 02 F6 | 	mov	arg01, fp
2be4c     14 4E 85 F1 | 	sub	fp, #20
2be50     04 14 06 F6 | 	mov	arg02, #4
2be54     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1181
2be58     16 4E 05 F1 | 	add	fp, #22
2be5c     A7 2C C2 FA | 	rdbyte	local04, fp
2be60     16 4E 85 F1 | 	sub	fp, #22
2be64     01 2C 0E F2 | 	cmp	local04, #1 wz
2be68     17 4E 05 A1 |  if_e	add	fp, #23
2be6c     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2be70     17 4E 85 A1 |  if_e	sub	fp, #23
2be74     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2be78     68 03 90 5D |  if_ne	jmp	#LR__4336
2be7c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2be7c     18 4E 05 F1 | 	add	fp, #24
2be80     01 00 80 FF 
2be84     A7 D0 6B FC | 	wrlong	##1000, fp
2be88     18 4E 85 F1 | 	sub	fp, #24
2be8c                 | LR__4320
2be8c     18 4E 05 F1 | 	add	fp, #24
2be90     A7 26 0A FB | 	rdlong	local01, fp wz
2be94     18 4E 85 F1 | 	sub	fp, #24
2be98     3C 00 90 AD |  if_e	jmp	#LR__4321
2be9c     A9 12 06 F6 | 	mov	arg01, #169
2bea0     1E 14 C6 F9 | 	decod	arg02, #30
2bea4     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2bea8     FD 2C 02 F6 | 	mov	local04, result1
2beac     07 2C 4E F7 | 	zerox	local04, #7 wz
2beb0     24 00 90 AD |  if_e	jmp	#LR__4321
2beb4     01 00 00 FF 
2beb8     E8 13 06 F6 | 	mov	arg01, ##1000
2bebc     14 93 BF FD | 	call	#__system___waitus
2bec0     18 4E 05 F1 | 	add	fp, #24
2bec4     A7 2C 02 FB | 	rdlong	local04, fp
2bec8     01 2C 86 F1 | 	sub	local04, #1
2becc     A7 2C 62 FC | 	wrlong	local04, fp
2bed0     18 4E 85 F1 | 	sub	fp, #24
2bed4     B4 FF 9F FD | 	jmp	#LR__4320
2bed8                 | LR__4321
2bed8     18 4E 05 F1 | 	add	fp, #24
2bedc     A7 2C 0A FB | 	rdlong	local04, fp wz
2bee0     18 4E 85 F1 | 	sub	fp, #24
2bee4     4C 00 90 AD |  if_e	jmp	#LR__4322
2bee8     3A 12 06 F6 | 	mov	arg01, #58
2beec     00 14 06 F6 | 	mov	arg02, #0
2bef0     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2bef4     FD 2A 02 F6 | 	mov	local03, result1
2bef8     07 2A 4E F7 | 	zerox	local03, #7 wz
2befc     34 00 90 5D |  if_ne	jmp	#LR__4322
2bf00     14 4E 05 F1 | 	add	fp, #20
2bf04     A7 12 02 F6 | 	mov	arg01, fp
2bf08     14 4E 85 F1 | 	sub	fp, #20
2bf0c     04 14 06 F6 | 	mov	arg02, #4
2bf10     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1181
2bf14     14 4E 05 F1 | 	add	fp, #20
2bf18     A7 26 C2 FA | 	rdbyte	local01, fp
2bf1c     40 26 CE F7 | 	test	local01, #64 wz
2bf20     0C 2C 06 56 |  if_ne	mov	local04, #12
2bf24     04 2C 06 A6 |  if_e	mov	local04, #4
2bf28     08 4E 85 F1 | 	sub	fp, #8
2bf2c     A7 2C 42 FC | 	wrbyte	local04, fp
2bf30     0C 4E 85 F1 | 	sub	fp, #12
2bf34                 | LR__4322
2bf34     14 2C 06 FB | 	rdlong	local04, #20
2bf38     18 4E 05 F1 | 	add	fp, #24
2bf3c     A7 2C 62 FC | 	wrlong	local04, fp
2bf40     0C 4E 05 F1 | 	add	fp, #12
2bf44     A7 2C 02 FB | 	rdlong	local04, fp
2bf48     1B 2C 26 F4 | 	bith	local04, #27
2bf4c     A7 2C 62 FC | 	wrlong	local04, fp
2bf50     0C 4E 85 F1 | 	sub	fp, #12
2bf54     A7 2C 02 FB | 	rdlong	local04, fp
2bf58     18 4E 85 F1 | 	sub	fp, #24
2bf5c     68 78 04 FF 
2bf60     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2bf64     1C 4E 05 C1 |  if_b	add	fp, #28
2bf68     00 01 80 CF 
2bf6c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2bf70     1C 4E 85 C1 |  if_b	sub	fp, #28
2bf74     6C 02 90 CD |  if_b	jmp	#LR__4336
2bf78     18 4E 05 F1 | 	add	fp, #24
2bf7c     A7 2C 02 FB | 	rdlong	local04, fp
2bf80     18 4E 85 F1 | 	sub	fp, #24
2bf84     E1 F5 05 FF 
2bf88     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2bf8c     1C 4E 05 C1 |  if_b	add	fp, #28
2bf90     00 01 80 CF 
2bf94     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2bf98     1C 4E 85 C1 |  if_b	sub	fp, #28
2bf9c     44 02 90 CD |  if_b	jmp	#LR__4336
2bfa0     18 4E 05 F1 | 	add	fp, #24
2bfa4     A7 2C 02 FB | 	rdlong	local04, fp
2bfa8     18 4E 85 F1 | 	sub	fp, #24
2bfac     3B 58 08 FF 
2bfb0     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2bfb4     1C 4E 05 C1 |  if_b	add	fp, #28
2bfb8     00 01 80 CF 
2bfbc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2bfc0     1C 4E 85 C1 |  if_b	sub	fp, #28
2bfc4     1C 02 90 CD |  if_b	jmp	#LR__4336
2bfc8     1C 4E 05 F1 | 	add	fp, #28
2bfcc     80 01 80 FF 
2bfd0     A7 10 68 FC | 	wrlong	##196616, fp
2bfd4     1C 4E 85 F1 | 	sub	fp, #28
2bfd8     08 02 90 FD | 	jmp	#LR__4336
2bfdc                 | LR__4323
2bfdc     A9 12 06 F6 | 	mov	arg01, #169
2bfe0     00 14 06 F6 | 	mov	arg02, #0
2bfe4     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2bfe8     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2bfec     02 2C 16 F2 | 	cmp	local04, #2 wc
2bff0     18 00 90 3D |  if_ae	jmp	#LR__4324
2bff4     0C 4E 05 F1 | 	add	fp, #12
2bff8     A7 04 48 FC | 	wrbyte	#2, fp
2bffc     04 4E 05 F1 | 	add	fp, #4
2c000     A7 52 49 FC | 	wrbyte	#169, fp
2c004     10 4E 85 F1 | 	sub	fp, #16
2c008     14 00 90 FD | 	jmp	#LR__4325
2c00c                 | LR__4324
2c00c     0C 4E 05 F1 | 	add	fp, #12
2c010     A7 02 48 FC | 	wrbyte	#1, fp
2c014     04 4E 05 F1 | 	add	fp, #4
2c018     A7 02 48 FC | 	wrbyte	#1, fp
2c01c     10 4E 85 F1 | 	sub	fp, #16
2c020                 | LR__4325
2c020                 | ' 				ty =  0x01 ; cmd =  (1) ;
2c020                 | ' 			}
2c020                 | ' 			for (tmr = 1000; tmr; tmr--) {
2c020     18 4E 05 F1 | 	add	fp, #24
2c024     01 00 80 FF 
2c028     A7 D0 6B FC | 	wrlong	##1000, fp
2c02c     18 4E 85 F1 | 	sub	fp, #24
2c030                 | LR__4326
2c030     18 4E 05 F1 | 	add	fp, #24
2c034     A7 2A 0A FB | 	rdlong	local03, fp wz
2c038     18 4E 85 F1 | 	sub	fp, #24
2c03c     44 00 90 AD |  if_e	jmp	#LR__4327
2c040     10 4E 05 F1 | 	add	fp, #16
2c044     A7 12 C2 FA | 	rdbyte	arg01, fp
2c048     10 4E 85 F1 | 	sub	fp, #16
2c04c     00 14 06 F6 | 	mov	arg02, #0
2c050     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2c054     FD 2C 02 F6 | 	mov	local04, result1
2c058     07 2C 4E F7 | 	zerox	local04, #7 wz
2c05c     24 00 90 AD |  if_e	jmp	#LR__4327
2c060     01 00 00 FF 
2c064     E8 13 06 F6 | 	mov	arg01, ##1000
2c068     68 91 BF FD | 	call	#__system___waitus
2c06c     18 4E 05 F1 | 	add	fp, #24
2c070     A7 2C 02 FB | 	rdlong	local04, fp
2c074     01 2C 86 F1 | 	sub	local04, #1
2c078     A7 2C 62 FC | 	wrlong	local04, fp
2c07c     18 4E 85 F1 | 	sub	fp, #24
2c080     AC FF 9F FD | 	jmp	#LR__4326
2c084                 | LR__4327
2c084     18 4E 05 F1 | 	add	fp, #24
2c088     A7 2C 0A FB | 	rdlong	local04, fp wz
2c08c     18 4E 85 F1 | 	sub	fp, #24
2c090     14 00 90 AD |  if_e	jmp	#LR__4328
2c094     10 12 06 F6 | 	mov	arg01, #16
2c098     09 14 C6 F9 | 	decod	arg02, #9
2c09c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2c0a0     07 FA 4D F7 | 	zerox	result1, #7 wz
2c0a4     0C 00 90 AD |  if_e	jmp	#LR__4329
2c0a8                 | LR__4328
2c0a8     0C 4E 05 F1 | 	add	fp, #12
2c0ac     A7 00 48 FC | 	wrbyte	#0, fp
2c0b0     0C 4E 85 F1 | 	sub	fp, #12
2c0b4                 | LR__4329
2c0b4     14 2C 06 FB | 	rdlong	local04, #20
2c0b8     18 4E 05 F1 | 	add	fp, #24
2c0bc     A7 2C 62 FC | 	wrlong	local04, fp
2c0c0     18 4E 85 F1 | 	sub	fp, #24
2c0c4     F0 FA 02 FF 
2c0c8     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2c0cc     18 00 90 3D |  if_ae	jmp	#LR__4330
2c0d0     24 4E 05 F1 | 	add	fp, #36
2c0d4     A7 2C 02 FB | 	rdlong	local04, fp
2c0d8     1B 2C 26 F4 | 	bith	local04, #27
2c0dc     A7 2C 62 FC | 	wrlong	local04, fp
2c0e0     24 4E 85 F1 | 	sub	fp, #36
2c0e4     2C 00 90 FD | 	jmp	#LR__4331
2c0e8                 | LR__4330
2c0e8     18 4E 05 F1 | 	add	fp, #24
2c0ec     A7 2C 02 FB | 	rdlong	local04, fp
2c0f0     18 4E 85 F1 | 	sub	fp, #24
2c0f4     E1 F5 05 FF 
2c0f8     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2c0fc     24 4E 05 C1 |  if_b	add	fp, #36
2c100     A7 2C 02 CB |  if_b	rdlong	local04, fp
2c104     80 00 04 CF 
2c108     00 2C 46 C5 |  if_b	or	local04, ##134283264
2c10c     A7 2C 62 CC |  if_b	wrlong	local04, fp
2c110     24 4E 85 C1 |  if_b	sub	fp, #36
2c114                 | LR__4331
2c114     18 4E 05 F1 | 	add	fp, #24
2c118     A7 2C 02 FB | 	rdlong	local04, fp
2c11c     18 4E 85 F1 | 	sub	fp, #24
2c120     F0 FA 02 FF 
2c124     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2c128     1C 4E 05 C1 |  if_b	add	fp, #28
2c12c     00 01 80 CF 
2c130     A7 08 68 CC |  if_b	wrlong	##131076, fp
2c134     1C 4E 85 C1 |  if_b	sub	fp, #28
2c138     A8 00 90 CD |  if_b	jmp	#LR__4335
2c13c     18 4E 05 F1 | 	add	fp, #24
2c140     A7 2C 02 FB | 	rdlong	local04, fp
2c144     18 4E 85 F1 | 	sub	fp, #24
2c148     68 78 04 FF 
2c14c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2c150     1C 4E 05 C1 |  if_b	add	fp, #28
2c154     80 01 80 CF 
2c158     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2c15c     1C 4E 85 C1 |  if_b	sub	fp, #28
2c160     80 00 90 CD |  if_b	jmp	#LR__4334
2c164     18 4E 05 F1 | 	add	fp, #24
2c168     A7 2C 02 FB | 	rdlong	local04, fp
2c16c     18 4E 85 F1 | 	sub	fp, #24
2c170     E1 F5 05 FF 
2c174     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2c178     1C 4E 05 C1 |  if_b	add	fp, #28
2c17c     00 02 80 CF 
2c180     A7 10 68 CC |  if_b	wrlong	##262152, fp
2c184     1C 4E 85 C1 |  if_b	sub	fp, #28
2c188     58 00 90 CD |  if_b	jmp	#LR__4333
2c18c     18 4E 05 F1 | 	add	fp, #24
2c190     A7 2C 02 FB | 	rdlong	local04, fp
2c194     18 4E 85 F1 | 	sub	fp, #24
2c198     59 73 07 FF 
2c19c     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2c1a0     1C 4E 05 C1 |  if_b	add	fp, #28
2c1a4     80 02 80 CF 
2c1a8     A7 14 68 CC |  if_b	wrlong	##327690, fp
2c1ac     1C 4E 85 C1 |  if_b	sub	fp, #28
2c1b0     30 00 90 CD |  if_b	jmp	#LR__4332
2c1b4     18 4E 05 F1 | 	add	fp, #24
2c1b8     A7 2C 02 FB | 	rdlong	local04, fp
2c1bc     18 4E 85 F1 | 	sub	fp, #24
2c1c0     D1 F0 08 FF 
2c1c4     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2c1c8     1C 4E 05 C1 |  if_b	add	fp, #28
2c1cc     00 03 80 CF 
2c1d0     A7 18 68 CC |  if_b	wrlong	##393228, fp
2c1d4     1C 4E 85 F3 | 	sumc	fp, #28
2c1d8     80 03 80 3F 
2c1dc     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2c1e0     1C 4E 85 31 |  if_ae	sub	fp, #28
2c1e4                 | LR__4332
2c1e4                 | LR__4333
2c1e4                 | LR__4334
2c1e4                 | LR__4335
2c1e4                 | LR__4336
2c1e4                 | LR__4337
2c1e4     0C 4E 05 F1 | 	add	fp, #12
2c1e8     A7 2C C2 FA | 	rdbyte	local04, fp
2c1ec     01 00 00 FF 
2c1f0     21 E4 05 F1 | 	add	objptr, ##545
2c1f4     F2 2C 42 FC | 	wrbyte	local04, objptr
2c1f8     A7 26 CA FA | 	rdbyte	local01, fp wz
2c1fc     00 2C 06 56 |  if_ne	mov	local04, #0
2c200     01 2C 06 A6 |  if_e	mov	local04, #1
2c204     20 4E 05 F1 | 	add	fp, #32
2c208     A7 2C 42 FC | 	wrbyte	local04, fp
2c20c     A7 2C C2 FA | 	rdbyte	local04, fp
2c210     2C 4E 85 F1 | 	sub	fp, #44
2c214     01 E4 85 F1 | 	sub	objptr, #1
2c218     F2 2C 42 FC | 	wrbyte	local04, objptr
2c21c     01 00 00 FF 
2c220     20 E4 85 F1 | 	sub	objptr, ##544
2c224     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1191
2c228     34 4E 05 F1 | 	add	fp, #52
2c22c     A7 12 02 FB | 	rdlong	arg01, fp
2c230     18 4E 85 F1 | 	sub	fp, #24
2c234     A7 14 02 FB | 	rdlong	arg02, fp
2c238     09 15 12 FC | 	wxpin	arg02, arg01
2c23c     1C 4E 05 F1 | 	add	fp, #28
2c240     A7 12 02 FB | 	rdlong	arg01, fp
2c244     14 4E 85 F1 | 	sub	fp, #20
2c248     A7 14 02 FB | 	rdlong	arg02, fp
2c24c     09 15 02 FC | 	wrpin	arg02, arg01
2c250                 | ' 
2c250                 | ' 		}
2c250                 | ' 	}
2c250                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c250                 | ' 	CardType = ty;
2c250                 | ' 	s = ty ? 0 :  0x01 ;
2c250                 | ' 	Stat = s;
2c250                 | ' 
2c250                 | ' 	deselect();
2c250                 | ' 
2c250                 | ' 
2c250                 | ' 	_wxpin( PIN_CLK, ck_div );
2c250                 | ' 	_wrpin( PIN_DI, spm_tx );
2c250                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c250                 | ' 	return s;
2c250     08 4E 05 F1 | 	add	fp, #8
2c254     A7 FA C1 FA | 	rdbyte	result1, fp
2c258     2C 4E 85 F1 | 	sub	fp, #44
2c25c                 | LR__4338
2c25c     A7 F0 03 F6 | 	mov	ptra, fp
2c260     B2 00 A0 FD | 	call	#popregs_
2c264                 | _fatfs_cc_disk_initialize_ret
2c264     2D 00 64 FD | 	ret
2c268                 | 
2c268                 | _fatfs_cc_disk_read
2c268     05 4A 05 F6 | 	mov	COUNT_, #5
2c26c     A8 00 A0 FD | 	call	#pushregs_
2c270     0A 27 02 F6 | 	mov	local01, arg02
2c274     0B 29 02 F6 | 	mov	local02, arg03
2c278     0C 2B 02 F6 | 	mov	local03, arg04
2c27c     00 12 0E F2 | 	cmp	arg01, #0 wz
2c280     01 FA 05 56 |  if_ne	mov	result1, #1
2c284                 | ' 
2c284                 | ' 	return Stat;
2c284     01 00 00 AF 
2c288     20 E4 05 A1 |  if_e	add	objptr, ##544
2c28c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c290     01 00 00 AF 
2c294     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c298     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c29c     01 FA CD F7 | 	test	result1, #1 wz
2c2a0     03 FA 05 56 |  if_ne	mov	result1, #3
2c2a4     84 00 90 5D |  if_ne	jmp	#LR__4342
2c2a8     01 00 00 FF 
2c2ac     21 E4 05 F1 | 	add	objptr, ##545
2c2b0     F2 2C C2 FA | 	rdbyte	local04, objptr
2c2b4     01 00 00 FF 
2c2b8     21 E4 85 F1 | 	sub	objptr, ##545
2c2bc     08 2C CE F7 | 	test	local04, #8 wz
2c2c0     09 28 66 A0 |  if_e	shl	local02, #9
2c2c4     02 2A 16 F2 | 	cmp	local03, #2 wc
2c2c8     12 2C 06 36 |  if_ae	mov	local04, #18
2c2cc     11 2C 06 C6 |  if_b	mov	local04, #17
2c2d0     14 15 02 F6 | 	mov	arg02, local02
2c2d4     16 13 02 F6 | 	mov	arg01, local04
2c2d8     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2c2dc     FD 2E 02 F6 | 	mov	local05, result1
2c2e0     07 2E 4E F7 | 	zerox	local05, #7 wz
2c2e4     30 00 90 5D |  if_ne	jmp	#LR__4341
2c2e8                 | ' 		do {
2c2e8                 | LR__4340
2c2e8     13 13 02 F6 | 	mov	arg01, local01
2c2ec     09 14 C6 F9 | 	decod	arg02, #9
2c2f0     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1199
2c2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2f8     01 00 00 5F 
2c2fc     00 26 06 51 |  if_ne	add	local01, ##512
2c300     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4340
2c304     16 2D E2 F8 | 	getbyte	local04, local04, #0
2c308     12 2C 0E F2 | 	cmp	local04, #18 wz
2c30c     0C 12 06 A6 |  if_e	mov	arg01, #12
2c310     00 14 06 A6 |  if_e	mov	arg02, #0
2c314     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1205
2c318                 | LR__4341
2c318     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1191
2c31c                 | ' 	}
2c31c                 | ' 	deselect();
2c31c                 | ' 
2c31c                 | ' 	return count ? RES_ERROR : RES_OK;
2c31c     00 2A 0E F2 | 	cmp	local03, #0 wz
2c320     01 2E 06 56 |  if_ne	mov	local05, #1
2c324     00 2E 06 A6 |  if_e	mov	local05, #0
2c328     17 FB 01 F6 | 	mov	result1, local05
2c32c                 | LR__4342
2c32c     A7 F0 03 F6 | 	mov	ptra, fp
2c330     B2 00 A0 FD | 	call	#popregs_
2c334                 | _fatfs_cc_disk_read_ret
2c334     2D 00 64 FD | 	ret
2c338                 | 
2c338                 | _fatfs_cc_disk_write
2c338     04 4A 05 F6 | 	mov	COUNT_, #4
2c33c     A8 00 A0 FD | 	call	#pushregs_
2c340     0A 27 02 F6 | 	mov	local01, arg02
2c344     0C 29 02 F6 | 	mov	local02, arg04
2c348     0B 2B 02 F6 | 	mov	local03, arg03
2c34c     00 12 0E F2 | 	cmp	arg01, #0 wz
2c350     01 FA 05 56 |  if_ne	mov	result1, #1
2c354                 | ' 
2c354                 | ' 	return Stat;
2c354     01 00 00 AF 
2c358     20 E4 05 A1 |  if_e	add	objptr, ##544
2c35c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c360     01 00 00 AF 
2c364     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c368     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c36c     01 FA CD F7 | 	test	result1, #1 wz
2c370     03 FA 05 56 |  if_ne	mov	result1, #3
2c374     D4 00 90 5D |  if_ne	jmp	#LR__4354
2c378     01 00 00 FF 
2c37c     21 E4 05 F1 | 	add	objptr, ##545
2c380     F2 16 C2 FA | 	rdbyte	arg03, objptr
2c384     01 00 00 FF 
2c388     21 E4 85 F1 | 	sub	objptr, ##545
2c38c     08 16 CE F7 | 	test	arg03, #8 wz
2c390     09 2A 66 A0 |  if_e	shl	local03, #9
2c394     01 28 0E F2 | 	cmp	local02, #1 wz
2c398     30 00 90 5D |  if_ne	jmp	#LR__4350
2c39c     18 12 06 F6 | 	mov	arg01, #24
2c3a0     15 15 02 F6 | 	mov	arg02, local03
2c3a4     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2c3a8     FD 2C 02 F6 | 	mov	local04, result1
2c3ac     07 2C 4E F7 | 	zerox	local04, #7 wz
2c3b0     84 00 90 5D |  if_ne	jmp	#LR__4353
2c3b4     13 13 02 F6 | 	mov	arg01, local01
2c3b8     FE 14 06 F6 | 	mov	arg02, #254
2c3bc     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1201
2c3c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3c4     00 28 06 56 |  if_ne	mov	local02, #0
2c3c8     6C 00 90 FD | 	jmp	#LR__4353
2c3cc                 | LR__4350
2c3cc     01 00 00 FF 
2c3d0     21 E4 05 F1 | 	add	objptr, ##545
2c3d4     F2 2C C2 FA | 	rdbyte	local04, objptr
2c3d8     01 00 00 FF 
2c3dc     21 E4 85 F1 | 	sub	objptr, ##545
2c3e0     06 2C CE F7 | 	test	local04, #6 wz
2c3e4     97 12 06 56 |  if_ne	mov	arg01, #151
2c3e8     14 15 02 56 |  if_ne	mov	arg02, local02
2c3ec     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1205
2c3f0     15 15 02 F6 | 	mov	arg02, local03
2c3f4     19 12 06 F6 | 	mov	arg01, #25
2c3f8     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2c3fc     FD 2C 02 F6 | 	mov	local04, result1
2c400     07 2C 4E F7 | 	zerox	local04, #7 wz
2c404     30 00 90 5D |  if_ne	jmp	#LR__4352
2c408                 | ' 			do {
2c408                 | LR__4351
2c408     13 13 02 F6 | 	mov	arg01, local01
2c40c     FC 14 06 F6 | 	mov	arg02, #252
2c410     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1201
2c414     00 FA 0D F2 | 	cmp	result1, #0 wz
2c418     01 00 00 5F 
2c41c     00 26 06 51 |  if_ne	add	local01, ##512
2c420     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4351
2c424     00 12 06 F6 | 	mov	arg01, #0
2c428     FD 14 06 F6 | 	mov	arg02, #253
2c42c     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1201
2c430     00 FA 0D F2 | 	cmp	result1, #0 wz
2c434     01 28 06 A6 |  if_e	mov	local02, #1
2c438                 | LR__4352
2c438                 | LR__4353
2c438     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1191
2c43c                 | ' 				count = 1;
2c43c                 | ' 		}
2c43c                 | ' 	}
2c43c                 | ' 	deselect();
2c43c                 | ' 
2c43c                 | ' 	return count ? RES_ERROR : RES_OK;
2c43c     00 28 0E F2 | 	cmp	local02, #0 wz
2c440     01 2C 06 56 |  if_ne	mov	local04, #1
2c444     00 2C 06 A6 |  if_e	mov	local04, #0
2c448     16 FB 01 F6 | 	mov	result1, local04
2c44c                 | LR__4354
2c44c     A7 F0 03 F6 | 	mov	ptra, fp
2c450     B2 00 A0 FD | 	call	#popregs_
2c454                 | _fatfs_cc_disk_write_ret
2c454     2D 00 64 FD | 	ret
2c458                 | 
2c458                 | _fatfs_cc_disk_ioctl
2c458     01 4A 05 F6 | 	mov	COUNT_, #1
2c45c     A8 00 A0 FD | 	call	#pushregs_
2c460     30 F0 07 F1 | 	add	ptra, #48
2c464     04 4E 05 F1 | 	add	fp, #4
2c468     A7 12 42 FC | 	wrbyte	arg01, fp
2c46c     04 4E 05 F1 | 	add	fp, #4
2c470     A7 14 42 FC | 	wrbyte	arg02, fp
2c474     04 4E 05 F1 | 	add	fp, #4
2c478     A7 16 62 FC | 	wrlong	arg03, fp
2c47c     08 4E 85 F1 | 	sub	fp, #8
2c480     A7 12 CA FA | 	rdbyte	arg01, fp wz
2c484     04 4E 85 F1 | 	sub	fp, #4
2c488     01 FA 05 56 |  if_ne	mov	result1, #1
2c48c                 | ' 
2c48c                 | ' 	return Stat;
2c48c     01 00 00 AF 
2c490     20 E4 05 A1 |  if_e	add	objptr, ##544
2c494     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c498     01 00 00 AF 
2c49c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c4a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c4a4     01 FA CD F7 | 	test	result1, #1 wz
2c4a8     03 FA 05 56 |  if_ne	mov	result1, #3
2c4ac     E4 01 90 5D |  if_ne	jmp	#LR__4368
2c4b0     10 4E 05 F1 | 	add	fp, #16
2c4b4     A7 02 68 FC | 	wrlong	#1, fp
2c4b8                 | ' 
2c4b8                 | ' 	res = RES_ERROR;
2c4b8                 | ' 	switch (ctrl) {
2c4b8     08 4E 85 F1 | 	sub	fp, #8
2c4bc     A7 26 C2 FA | 	rdbyte	local01, fp
2c4c0     08 4E 85 F1 | 	sub	fp, #8
2c4c4     04 26 26 F3 | 	fle	local01, #4
2c4c8     30 26 62 FD | 	jmprel	local01
2c4cc                 | LR__4360
2c4cc     10 00 90 FD | 	jmp	#LR__4361
2c4d0     24 00 90 FD | 	jmp	#LR__4362
2c4d4     A0 01 90 FD | 	jmp	#LR__4366
2c4d8     80 01 90 FD | 	jmp	#LR__4365
2c4dc     98 01 90 FD | 	jmp	#LR__4366
2c4e0                 | LR__4361
2c4e0     B4 79 B0 FD | 	call	#_fatfs_cc_select_1195
2c4e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4e8     10 4E 05 51 |  if_ne	add	fp, #16
2c4ec     A7 00 68 5C |  if_ne	wrlong	#0, fp
2c4f0     10 4E 85 51 |  if_ne	sub	fp, #16
2c4f4                 | ' 			break;
2c4f4     8C 01 90 FD | 	jmp	#LR__4367
2c4f8                 | LR__4362
2c4f8     09 12 06 F6 | 	mov	arg01, #9
2c4fc     00 14 06 F6 | 	mov	arg02, #0
2c500     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1205
2c504     FD 26 02 F6 | 	mov	local01, result1
2c508     07 26 4E F7 | 	zerox	local01, #7 wz
2c50c     74 01 90 5D |  if_ne	jmp	#LR__4367
2c510     18 4E 05 F1 | 	add	fp, #24
2c514     A7 12 02 F6 | 	mov	arg01, fp
2c518     18 4E 85 F1 | 	sub	fp, #24
2c51c     10 14 06 F6 | 	mov	arg02, #16
2c520     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1199
2c524     00 FA 0D F2 | 	cmp	result1, #0 wz
2c528     58 01 90 AD |  if_e	jmp	#LR__4367
2c52c     18 4E 05 F1 | 	add	fp, #24
2c530     A7 26 C2 FA | 	rdbyte	local01, fp
2c534     18 4E 85 F1 | 	sub	fp, #24
2c538     06 26 46 F0 | 	shr	local01, #6
2c53c     01 26 0E F2 | 	cmp	local01, #1 wz
2c540     5C 00 90 5D |  if_ne	jmp	#LR__4363
2c544     21 4E 05 F1 | 	add	fp, #33
2c548     A7 26 C2 FA | 	rdbyte	local01, fp
2c54c     01 4E 85 F1 | 	sub	fp, #1
2c550     A7 FA C1 FA | 	rdbyte	result1, fp
2c554     FD FA 31 F9 | 	getword	result1, result1, #0
2c558     08 FA 65 F0 | 	shl	result1, #8
2c55c     FD 26 02 F1 | 	add	local01, result1
2c560     01 4E 85 F1 | 	sub	fp, #1
2c564     A7 FA C1 FA | 	rdbyte	result1, fp
2c568     3F FA 05 F5 | 	and	result1, #63
2c56c     10 FA 65 F0 | 	shl	result1, #16
2c570     FD 26 02 F1 | 	add	local01, result1
2c574     01 26 06 F1 | 	add	local01, #1
2c578     09 4E 05 F1 | 	add	fp, #9
2c57c     A7 26 62 FC | 	wrlong	local01, fp
2c580     1C 4E 85 F1 | 	sub	fp, #28
2c584     A7 26 02 FB | 	rdlong	local01, fp
2c588     1C 4E 05 F1 | 	add	fp, #28
2c58c     A7 FA 01 FB | 	rdlong	result1, fp
2c590     28 4E 85 F1 | 	sub	fp, #40
2c594     0A FA 65 F0 | 	shl	result1, #10
2c598     13 FB 61 FC | 	wrlong	result1, local01
2c59c     AC 00 90 FD | 	jmp	#LR__4364
2c5a0                 | LR__4363
2c5a0     1D 4E 05 F1 | 	add	fp, #29
2c5a4     A7 26 C2 FA | 	rdbyte	local01, fp
2c5a8     13 27 42 F8 | 	getnib	local01, local01, #0
2c5ac     05 4E 05 F1 | 	add	fp, #5
2c5b0     A7 FA C1 FA | 	rdbyte	result1, fp
2c5b4     80 FA 05 F5 | 	and	result1, #128
2c5b8     07 FA C5 F0 | 	sar	result1, #7
2c5bc     FD 26 02 F1 | 	add	local01, result1
2c5c0     01 4E 85 F1 | 	sub	fp, #1
2c5c4     A7 FA C1 FA | 	rdbyte	result1, fp
2c5c8     03 FA 05 F5 | 	and	result1, #3
2c5cc     01 FA 65 F0 | 	shl	result1, #1
2c5d0     FD 26 02 F1 | 	add	local01, result1
2c5d4     02 26 06 F1 | 	add	local01, #2
2c5d8     0D 4E 85 F1 | 	sub	fp, #13
2c5dc     A7 26 42 FC | 	wrbyte	local01, fp
2c5e0     0C 4E 05 F1 | 	add	fp, #12
2c5e4     A7 26 C2 FA | 	rdbyte	local01, fp
2c5e8     06 26 46 F0 | 	shr	local01, #6
2c5ec     01 4E 85 F1 | 	sub	fp, #1
2c5f0     A7 FA C1 FA | 	rdbyte	result1, fp
2c5f4     FD FA 31 F9 | 	getword	result1, result1, #0
2c5f8     02 FA 65 F0 | 	shl	result1, #2
2c5fc     FD 26 02 F1 | 	add	local01, result1
2c600     01 4E 85 F1 | 	sub	fp, #1
2c604     A7 FA C1 FA | 	rdbyte	result1, fp
2c608     03 FA 05 F5 | 	and	result1, #3
2c60c     FD FA 31 F9 | 	getword	result1, result1, #0
2c610     0A FA 65 F0 | 	shl	result1, #10
2c614     FD 26 02 F1 | 	add	local01, result1
2c618     01 26 06 F1 | 	add	local01, #1
2c61c     0A 4E 05 F1 | 	add	fp, #10
2c620     A7 26 62 FC | 	wrlong	local01, fp
2c624     1C 4E 85 F1 | 	sub	fp, #28
2c628     A7 26 02 FB | 	rdlong	local01, fp
2c62c     1C 4E 05 F1 | 	add	fp, #28
2c630     A7 FA 01 FB | 	rdlong	result1, fp
2c634     14 4E 85 F1 | 	sub	fp, #20
2c638     A7 16 C2 FA | 	rdbyte	arg03, fp
2c63c     14 4E 85 F1 | 	sub	fp, #20
2c640     09 16 86 F1 | 	sub	arg03, #9
2c644     0B FB 61 F0 | 	shl	result1, arg03
2c648     13 FB 61 FC | 	wrlong	result1, local01
2c64c                 | LR__4364
2c64c     10 4E 05 F1 | 	add	fp, #16
2c650     A7 00 68 FC | 	wrlong	#0, fp
2c654     10 4E 85 F1 | 	sub	fp, #16
2c658                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2c658                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2c658                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2c658                 | ' 				}
2c658                 | ' 				res = RES_OK;
2c658                 | ' 			}
2c658                 | ' 			break;
2c658     28 00 90 FD | 	jmp	#LR__4367
2c65c                 | LR__4365
2c65c     0C 4E 05 F1 | 	add	fp, #12
2c660     A7 26 02 FB | 	rdlong	local01, fp
2c664     13 01 69 FC | 	wrlong	#128, local01
2c668     04 4E 05 F1 | 	add	fp, #4
2c66c     A7 00 68 FC | 	wrlong	#0, fp
2c670     10 4E 85 F1 | 	sub	fp, #16
2c674                 | ' 			*(DWORD*)buff = 128;
2c674                 | ' 			res = RES_OK;
2c674                 | ' 			break;
2c674     0C 00 90 FD | 	jmp	#LR__4367
2c678                 | LR__4366
2c678     10 4E 05 F1 | 	add	fp, #16
2c67c     A7 08 68 FC | 	wrlong	#4, fp
2c680     10 4E 85 F1 | 	sub	fp, #16
2c684                 | LR__4367
2c684     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1191
2c688                 | ' 			res = RES_PARERR;
2c688                 | ' 	}
2c688                 | ' 
2c688                 | ' 	deselect();
2c688                 | ' 
2c688                 | ' 	return res;
2c688     10 4E 05 F1 | 	add	fp, #16
2c68c     A7 FA 01 FB | 	rdlong	result1, fp
2c690     10 4E 85 F1 | 	sub	fp, #16
2c694                 | LR__4368
2c694     A7 F0 03 F6 | 	mov	ptra, fp
2c698     B2 00 A0 FD | 	call	#popregs_
2c69c                 | _fatfs_cc_disk_ioctl_ret
2c69c     2D 00 64 FD | 	ret
2c6a0                 | 
2c6a0                 | _fatfs_cc_disk_setpins
2c6a0     00 12 0E F2 | 	cmp	arg01, #0 wz
2c6a4     01 FA 65 56 |  if_ne	neg	result1, #1
2c6a8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2c6ac     01 00 00 FF 
2c6b0     10 E4 05 F1 | 	add	objptr, ##528
2c6b4     F2 14 62 FC | 	wrlong	arg02, objptr
2c6b8     04 E4 05 F1 | 	add	objptr, #4
2c6bc     F2 16 62 FC | 	wrlong	arg03, objptr
2c6c0     04 E4 05 F1 | 	add	objptr, #4
2c6c4     F2 18 62 FC | 	wrlong	arg04, objptr
2c6c8     04 E4 05 F1 | 	add	objptr, #4
2c6cc     F2 1A 62 FC | 	wrlong	arg05, objptr
2c6d0     01 00 00 FF 
2c6d4     1C E4 85 F1 | 	sub	objptr, ##540
2c6d8     00 FA 05 F6 | 	mov	result1, #0
2c6dc                 | _fatfs_cc_disk_setpins_ret
2c6dc     2D 00 64 FD | 	ret
2c6e0                 | 
2c6e0                 | _fatfs_cc_tchar2uni
2c6e0     09 01 02 FB | 	rdlong	_var01, arg01
2c6e4     00 03 02 F6 | 	mov	_var02, _var01
2c6e8     01 00 06 F1 | 	add	_var01, #1
2c6ec     00 05 02 F6 | 	mov	_var03, _var01
2c6f0     01 07 C2 FA | 	rdbyte	_var04, _var02
2c6f4     80 06 CE F7 | 	test	_var04, #128 wz
2c6f8     E8 00 90 AD |  if_e	jmp	#LR__4377
2c6fc     03 09 02 F6 | 	mov	_var05, _var04
2c700     E0 08 06 F5 | 	and	_var05, #224
2c704     C0 08 0E F2 | 	cmp	_var05, #192 wz
2c708     1F 06 06 A5 |  if_e	and	_var04, #31
2c70c     01 0A 06 A6 |  if_e	mov	_var06, #1
2c710     34 00 90 AD |  if_e	jmp	#LR__4371
2c714     03 09 02 F6 | 	mov	_var05, _var04
2c718     F0 08 06 F5 | 	and	_var05, #240
2c71c     E0 08 0E F2 | 	cmp	_var05, #224 wz
2c720     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2c724     02 0A 06 A6 |  if_e	mov	_var06, #2
2c728     1C 00 90 AD |  if_e	jmp	#LR__4370
2c72c     03 09 02 F6 | 	mov	_var05, _var04
2c730     F8 08 06 F5 | 	and	_var05, #248
2c734     F0 08 0E F2 | 	cmp	_var05, #240 wz
2c738     07 06 06 A5 |  if_e	and	_var04, #7
2c73c     03 0A 06 A6 |  if_e	mov	_var06, #3
2c740                 | ' 			return 0xFFFFFFFF;
2c740     01 FA 65 56 |  if_ne	neg	result1, #1
2c744     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c748                 | LR__4370
2c748                 | LR__4371
2c748                 | ' 		}
2c748                 | ' 		do {
2c748                 | LR__4372
2c748     02 0D C2 FA | 	rdbyte	_var07, _var03
2c74c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2c750     C0 08 06 F5 | 	and	_var05, #192
2c754     80 08 0E F2 | 	cmp	_var05, #128 wz
2c758     01 04 06 F1 | 	add	_var03, #1
2c75c     01 FA 65 56 |  if_ne	neg	result1, #1
2c760     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c764     06 06 66 F0 | 	shl	_var04, #6
2c768     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2c76c     3F 02 06 F5 | 	and	_var02, #63
2c770     01 07 42 F5 | 	or	_var04, _var02
2c774     F4 0B 6E FB | 	djnz	_var06, #LR__4372
2c778     80 06 16 F2 | 	cmp	_var04, #128 wc
2c77c     24 00 90 CD |  if_b	jmp	#LR__4374
2c780     6C 00 00 FF 
2c784     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2c788     0C 00 90 CD |  if_b	jmp	#LR__4373
2c78c     70 00 00 FF 
2c790     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2c794     0C 00 90 CD |  if_b	jmp	#LR__4374
2c798                 | LR__4373
2c798     80 08 00 FF 
2c79c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2c7a0     08 00 90 CD |  if_b	jmp	#LR__4375
2c7a4                 | LR__4374
2c7a4     01 FA 65 F6 | 	neg	result1, #1
2c7a8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c7ac                 | LR__4375
2c7ac     80 00 00 FF 
2c7b0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2c7b4     2C 00 90 CD |  if_b	jmp	#LR__4376
2c7b8     03 03 02 F6 | 	mov	_var02, _var04
2c7bc     80 00 00 FF 
2c7c0     00 02 86 F1 | 	sub	_var02, ##65536
2c7c4     06 02 66 F0 | 	shl	_var02, #6
2c7c8     80 FF 01 FF 
2c7cc     00 02 06 F5 | 	and	_var02, ##67043328
2c7d0     6E 00 6C FF 
2c7d4     00 08 06 F6 | 	mov	_var05, ##-671032320
2c7d8     01 09 42 F5 | 	or	_var05, _var02
2c7dc     09 06 46 F7 | 	zerox	_var04, #9
2c7e0     04 07 42 F5 | 	or	_var04, _var05
2c7e4                 | LR__4376
2c7e4                 | LR__4377
2c7e4     09 05 62 FC | 	wrlong	_var03, arg01
2c7e8                 | ' 	}
2c7e8                 | ' #line 811 "ff.c"
2c7e8                 | ' 	*str = p;
2c7e8                 | ' 	return uc;
2c7e8     03 FB 01 F6 | 	mov	result1, _var04
2c7ec                 | _fatfs_cc_tchar2uni_ret
2c7ec     2D 00 64 FD | 	ret
2c7f0                 | 
2c7f0                 | _fatfs_cc_put_utf
2c7f0     80 12 16 F2 | 	cmp	arg01, #128 wc
2c7f4     18 00 90 3D |  if_ae	jmp	#LR__4380
2c7f8     01 16 16 F2 | 	cmp	arg03, #1 wc
2c7fc     00 FA 05 C6 |  if_b	mov	result1, #0
2c800     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c804     0A 13 42 FC | 	wrbyte	arg01, arg02
2c808                 | ' 		*buf = (TCHAR)chr;
2c808                 | ' 		return 1;
2c808     01 FA 05 F6 | 	mov	result1, #1
2c80c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c810                 | LR__4380
2c810     04 00 00 FF 
2c814     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2c818     40 00 90 3D |  if_ae	jmp	#LR__4381
2c81c     02 16 16 F2 | 	cmp	arg03, #2 wc
2c820     00 FA 05 C6 |  if_b	mov	result1, #0
2c824     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c828     09 FB 01 F6 | 	mov	result1, arg01
2c82c     06 FA 45 F0 | 	shr	result1, #6
2c830     1F FA 05 F5 | 	and	result1, #31
2c834     C0 16 06 F6 | 	mov	arg03, #192
2c838     FD 16 42 F5 | 	or	arg03, result1
2c83c     0A 17 42 FC | 	wrbyte	arg03, arg02
2c840     01 14 06 F1 | 	add	arg02, #1
2c844     3F 12 06 F5 | 	and	arg01, #63
2c848     80 FA 05 F6 | 	mov	result1, #128
2c84c     09 FB 41 F5 | 	or	result1, arg01
2c850     0A FB 41 FC | 	wrbyte	result1, arg02
2c854                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c854                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c854                 | ' 		return 2;
2c854     02 FA 05 F6 | 	mov	result1, #2
2c858     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c85c                 | LR__4381
2c85c     80 00 00 FF 
2c860     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2c864     70 00 90 3D |  if_ae	jmp	#LR__4384
2c868     03 16 16 F2 | 	cmp	arg03, #3 wc
2c86c     18 00 90 CD |  if_b	jmp	#LR__4382
2c870     6C 00 00 FF 
2c874     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2c878     14 00 90 CD |  if_b	jmp	#LR__4383
2c87c     70 00 00 FF 
2c880     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2c884     08 00 90 3D |  if_ae	jmp	#LR__4383
2c888                 | LR__4382
2c888     00 FA 05 F6 | 	mov	result1, #0
2c88c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c890                 | LR__4383
2c890     09 FB 59 F8 | 	getnib	result1, arg01, #3
2c894     E0 16 06 F6 | 	mov	arg03, #224
2c898     FD 16 42 F5 | 	or	arg03, result1
2c89c     0A 17 42 FC | 	wrbyte	arg03, arg02
2c8a0     01 14 06 F1 | 	add	arg02, #1
2c8a4     09 FB 01 F6 | 	mov	result1, arg01
2c8a8     06 FA 45 F0 | 	shr	result1, #6
2c8ac     3F FA 05 F5 | 	and	result1, #63
2c8b0     80 16 06 F6 | 	mov	arg03, #128
2c8b4     FD 16 42 F5 | 	or	arg03, result1
2c8b8     0A 17 42 FC | 	wrbyte	arg03, arg02
2c8bc     01 14 06 F1 | 	add	arg02, #1
2c8c0     3F 12 06 F5 | 	and	arg01, #63
2c8c4     80 FA 05 F6 | 	mov	result1, #128
2c8c8     09 FB 41 F5 | 	or	result1, arg01
2c8cc     0A FB 41 FC | 	wrbyte	result1, arg02
2c8d0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c8d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c8d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c8d0                 | ' 		return 3;
2c8d0     03 FA 05 F6 | 	mov	result1, #3
2c8d4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c8d8                 | LR__4384
2c8d8     04 16 16 F2 | 	cmp	arg03, #4 wc
2c8dc     00 FA 05 C6 |  if_b	mov	result1, #0
2c8e0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c8e4     09 01 02 F6 | 	mov	_var01, arg01
2c8e8     E0 01 06 F4 | 	bitl	_var01, #480
2c8ec     00 00 6C FF 
2c8f0     00 00 86 F1 | 	sub	_var01, ##-671088640
2c8f4     06 00 46 F0 | 	shr	_var01, #6
2c8f8     09 13 32 F9 | 	getword	arg01, arg01, #0
2c8fc     6E 00 00 FF 
2c900     00 12 86 F1 | 	sub	arg01, ##56320
2c904     00 08 00 FF 
2c908     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2c90c     02 00 00 CF 
2c910     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c914     00 FA 05 36 |  if_ae	mov	result1, #0
2c918     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c91c     09 01 42 F5 | 	or	_var01, arg01
2c920     80 00 00 FF 
2c924     00 00 06 F1 | 	add	_var01, ##65536
2c928     00 FB 01 F6 | 	mov	result1, _var01
2c92c     12 FA 45 F0 | 	shr	result1, #18
2c930     07 FA 05 F5 | 	and	result1, #7
2c934     F0 16 06 F6 | 	mov	arg03, #240
2c938     FD 16 42 F5 | 	or	arg03, result1
2c93c     0A 17 42 FC | 	wrbyte	arg03, arg02
2c940     01 14 06 F1 | 	add	arg02, #1
2c944     00 FB 01 F6 | 	mov	result1, _var01
2c948     0C FA 45 F0 | 	shr	result1, #12
2c94c     3F FA 05 F5 | 	and	result1, #63
2c950     80 16 06 F6 | 	mov	arg03, #128
2c954     FD 16 42 F5 | 	or	arg03, result1
2c958     0A 17 42 FC | 	wrbyte	arg03, arg02
2c95c     01 14 06 F1 | 	add	arg02, #1
2c960     00 FB 01 F6 | 	mov	result1, _var01
2c964     06 FA 45 F0 | 	shr	result1, #6
2c968     3F FA 05 F5 | 	and	result1, #63
2c96c     80 16 06 F6 | 	mov	arg03, #128
2c970     FD 16 42 F5 | 	or	arg03, result1
2c974     0A 17 42 FC | 	wrbyte	arg03, arg02
2c978     01 14 06 F1 | 	add	arg02, #1
2c97c     3F 00 06 F5 | 	and	_var01, #63
2c980     80 FA 05 F6 | 	mov	result1, #128
2c984     00 FB 41 F5 | 	or	result1, _var01
2c988     0A FB 41 FC | 	wrbyte	result1, arg02
2c98c                 | ' 	chr = (hc | chr) + 0x10000;
2c98c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c98c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c98c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c98c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c98c                 | ' 	return 4;
2c98c     04 FA 05 F6 | 	mov	result1, #4
2c990                 | _fatfs_cc_put_utf_ret
2c990     2D 00 64 FD | 	ret
2c994                 | 
2c994                 | _fatfs_cc_sync_window
2c994     02 4A 05 F6 | 	mov	COUNT_, #2
2c998     A8 00 A0 FD | 	call	#pushregs_
2c99c     09 27 02 F6 | 	mov	local01, arg01
2c9a0     00 28 06 F6 | 	mov	local02, #0
2c9a4     03 26 06 F1 | 	add	local01, #3
2c9a8     13 FB C9 FA | 	rdbyte	result1, local01 wz
2c9ac     03 26 86 F1 | 	sub	local01, #3
2c9b0     A4 00 90 AD |  if_e	jmp	#LR__4392
2c9b4     01 26 06 F1 | 	add	local01, #1
2c9b8     13 13 C2 FA | 	rdbyte	arg01, local01
2c9bc     33 26 06 F1 | 	add	local01, #51
2c9c0     13 15 02 F6 | 	mov	arg02, local01
2c9c4     04 26 86 F1 | 	sub	local01, #4
2c9c8     13 17 02 FB | 	rdlong	arg03, local01
2c9cc     30 26 86 F1 | 	sub	local01, #48
2c9d0     01 18 06 F6 | 	mov	arg04, #1
2c9d4     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2c9d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9dc     74 00 90 5D |  if_ne	jmp	#LR__4390
2c9e0     03 26 06 F1 | 	add	local01, #3
2c9e4     13 01 48 FC | 	wrbyte	#0, local01
2c9e8     2D 26 06 F1 | 	add	local01, #45
2c9ec     13 FB 01 FB | 	rdlong	result1, local01
2c9f0     0C 26 86 F1 | 	sub	local01, #12
2c9f4     13 19 02 FB | 	rdlong	arg04, local01
2c9f8     0C FB 81 F1 | 	sub	result1, arg04
2c9fc     08 26 86 F1 | 	sub	local01, #8
2ca00     13 19 02 FB | 	rdlong	arg04, local01
2ca04     1C 26 86 F1 | 	sub	local01, #28
2ca08     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ca0c     48 00 90 3D |  if_ae	jmp	#LR__4391
2ca10     02 26 06 F1 | 	add	local01, #2
2ca14     13 19 C2 FA | 	rdbyte	arg04, local01
2ca18     02 26 86 F1 | 	sub	local01, #2
2ca1c     02 18 0E F2 | 	cmp	arg04, #2 wz
2ca20     34 00 90 5D |  if_ne	jmp	#LR__4391
2ca24     01 26 06 F1 | 	add	local01, #1
2ca28     13 13 C2 FA | 	rdbyte	arg01, local01
2ca2c     33 26 06 F1 | 	add	local01, #51
2ca30     13 15 02 F6 | 	mov	arg02, local01
2ca34     04 26 86 F1 | 	sub	local01, #4
2ca38     13 17 02 FB | 	rdlong	arg03, local01
2ca3c     14 26 86 F1 | 	sub	local01, #20
2ca40     13 27 02 FB | 	rdlong	local01, local01
2ca44     13 17 02 F1 | 	add	arg03, local01
2ca48     01 18 06 F6 | 	mov	arg04, #1
2ca4c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2ca50     04 00 90 FD | 	jmp	#LR__4391
2ca54                 | LR__4390
2ca54     01 28 06 F6 | 	mov	local02, #1
2ca58                 | LR__4391
2ca58                 | LR__4392
2ca58                 | ' 			res = FR_DISK_ERR;
2ca58                 | ' 		}
2ca58                 | ' 	}
2ca58                 | ' 	return res;
2ca58     14 FB 01 F6 | 	mov	result1, local02
2ca5c     A7 F0 03 F6 | 	mov	ptra, fp
2ca60     B2 00 A0 FD | 	call	#popregs_
2ca64                 | _fatfs_cc_sync_window_ret
2ca64     2D 00 64 FD | 	ret
2ca68                 | 
2ca68                 | _fatfs_cc_move_window
2ca68     03 4A 05 F6 | 	mov	COUNT_, #3
2ca6c     A8 00 A0 FD | 	call	#pushregs_
2ca70     09 27 02 F6 | 	mov	local01, arg01
2ca74     0A 29 02 F6 | 	mov	local02, arg02
2ca78     00 2A 06 F6 | 	mov	local03, #0
2ca7c     30 26 06 F1 | 	add	local01, #48
2ca80     13 19 02 FB | 	rdlong	arg04, local01
2ca84     30 26 86 F1 | 	sub	local01, #48
2ca88     0C 29 0A F2 | 	cmp	local02, arg04 wz
2ca8c     40 00 90 AD |  if_e	jmp	#LR__4401
2ca90     13 13 02 F6 | 	mov	arg01, local01
2ca94     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2ca98     FD 2A 0A F6 | 	mov	local03, result1 wz
2ca9c     30 00 90 5D |  if_ne	jmp	#LR__4400
2caa0     01 26 06 F1 | 	add	local01, #1
2caa4     13 13 C2 FA | 	rdbyte	arg01, local01
2caa8     33 26 06 F1 | 	add	local01, #51
2caac     13 15 02 F6 | 	mov	arg02, local01
2cab0     14 17 02 F6 | 	mov	arg03, local02
2cab4     01 18 06 F6 | 	mov	arg04, #1
2cab8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2cabc     00 FA 0D F2 | 	cmp	result1, #0 wz
2cac0     01 28 66 56 |  if_ne	neg	local02, #1
2cac4     01 2A 06 56 |  if_ne	mov	local03, #1
2cac8     04 26 86 F1 | 	sub	local01, #4
2cacc     13 29 62 FC | 	wrlong	local02, local01
2cad0                 | LR__4400
2cad0                 | LR__4401
2cad0                 | ' 				sect = (LBA_t)0 - 1;
2cad0                 | ' 				res = FR_DISK_ERR;
2cad0                 | ' 			}
2cad0                 | ' 			fs->winsect = sect;
2cad0                 | ' 		}
2cad0                 | ' 	}
2cad0                 | ' 	return res;
2cad0     15 FB 01 F6 | 	mov	result1, local03
2cad4     A7 F0 03 F6 | 	mov	ptra, fp
2cad8     B2 00 A0 FD | 	call	#popregs_
2cadc                 | _fatfs_cc_move_window_ret
2cadc     2D 00 64 FD | 	ret
2cae0                 | 
2cae0                 | _fatfs_cc_sync_fs
2cae0     02 4A 05 F6 | 	mov	COUNT_, #2
2cae4     A8 00 A0 FD | 	call	#pushregs_
2cae8     09 27 02 F6 | 	mov	local01, arg01
2caec     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2caf0     FD 28 0A F6 | 	mov	local02, result1 wz
2caf4     D8 00 90 5D |  if_ne	jmp	#LR__4411
2caf8     13 19 C2 FA | 	rdbyte	arg04, local01
2cafc     03 18 0E F2 | 	cmp	arg04, #3 wz
2cb00     04 26 06 A1 |  if_e	add	local01, #4
2cb04     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2cb08     04 26 86 A1 |  if_e	sub	local01, #4
2cb0c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2cb10     A0 00 90 5D |  if_ne	jmp	#LR__4410
2cb14     34 26 06 F1 | 	add	local01, #52
2cb18     13 13 02 F6 | 	mov	arg01, local01
2cb1c     00 14 06 F6 | 	mov	arg02, #0
2cb20     09 16 C6 F9 | 	decod	arg03, #9
2cb24     98 00 A0 FD | 	call	#\builtin_bytefill_
2cb28     13 13 02 F6 | 	mov	arg01, local01
2cb2c     FE 13 06 F1 | 	add	arg01, #510
2cb30     55 00 80 FF 
2cb34     09 AB 58 FC | 	wrword	##43605, arg01
2cb38     A9 B0 A0 FF 
2cb3c     13 A5 68 FC | 	wrlong	##1096897106, local01
2cb40     13 13 02 F6 | 	mov	arg01, local01
2cb44     E4 13 06 F1 | 	add	arg01, #484
2cb48     B9 A0 B0 FF 
2cb4c     09 E5 68 FC | 	wrlong	##1631679090, arg01
2cb50     13 13 02 F6 | 	mov	arg01, local01
2cb54     E8 13 06 F1 | 	add	arg01, #488
2cb58     20 26 86 F1 | 	sub	local01, #32
2cb5c     13 15 02 FB | 	rdlong	arg02, local01
2cb60     09 15 62 FC | 	wrlong	arg02, arg01
2cb64     20 26 06 F1 | 	add	local01, #32
2cb68     13 13 02 F6 | 	mov	arg01, local01
2cb6c     EC 13 06 F1 | 	add	arg01, #492
2cb70     24 26 86 F1 | 	sub	local01, #36
2cb74     13 15 02 FB | 	rdlong	arg02, local01
2cb78     09 15 62 FC | 	wrlong	arg02, arg01
2cb7c     10 26 06 F1 | 	add	local01, #16
2cb80     13 17 02 FB | 	rdlong	arg03, local01
2cb84     01 16 06 F1 | 	add	arg03, #1
2cb88     10 26 06 F1 | 	add	local01, #16
2cb8c     13 17 62 FC | 	wrlong	arg03, local01
2cb90     2F 26 86 F1 | 	sub	local01, #47
2cb94     13 13 C2 FA | 	rdbyte	arg01, local01
2cb98     33 26 06 F1 | 	add	local01, #51
2cb9c     13 15 02 F6 | 	mov	arg02, local01
2cba0     01 18 06 F6 | 	mov	arg04, #1
2cba4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2cba8     30 26 86 F1 | 	sub	local01, #48
2cbac     13 01 48 FC | 	wrbyte	#0, local01
2cbb0     04 26 86 F1 | 	sub	local01, #4
2cbb4                 | LR__4410
2cbb4     01 26 06 F1 | 	add	local01, #1
2cbb8     13 13 C2 FA | 	rdbyte	arg01, local01
2cbbc     00 14 06 F6 | 	mov	arg02, #0
2cbc0     00 16 06 F6 | 	mov	arg03, #0
2cbc4     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2cbc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbcc     01 28 06 56 |  if_ne	mov	local02, #1
2cbd0                 | LR__4411
2cbd0                 | ' 	}
2cbd0                 | ' 
2cbd0                 | ' 	return res;
2cbd0     14 FB 01 F6 | 	mov	result1, local02
2cbd4     A7 F0 03 F6 | 	mov	ptra, fp
2cbd8     B2 00 A0 FD | 	call	#popregs_
2cbdc                 | _fatfs_cc_sync_fs_ret
2cbdc     2D 00 64 FD | 	ret
2cbe0                 | 
2cbe0                 | _fatfs_cc_clst2sect
2cbe0     02 14 86 F1 | 	sub	arg02, #2
2cbe4     18 12 06 F1 | 	add	arg01, #24
2cbe8     09 01 02 FB | 	rdlong	_var01, arg01
2cbec     18 12 86 F1 | 	sub	arg01, #24
2cbf0     02 00 86 F1 | 	sub	_var01, #2
2cbf4     00 15 12 F2 | 	cmp	arg02, _var01 wc
2cbf8     00 FA 05 36 |  if_ae	mov	result1, #0
2cbfc     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2cc00     0A 12 06 F1 | 	add	arg01, #10
2cc04     09 01 E2 FA | 	rdword	_var01, arg01
2cc08     0A 01 02 FD | 	qmul	_var01, arg02
2cc0c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2cc0c     22 12 06 F1 | 	add	arg01, #34
2cc10     09 FB 01 FB | 	rdlong	result1, arg01
2cc14     18 00 62 FD | 	getqx	_var01
2cc18     00 FB 01 F1 | 	add	result1, _var01
2cc1c                 | _fatfs_cc_clst2sect_ret
2cc1c     2D 00 64 FD | 	ret
2cc20                 | 
2cc20                 | _fatfs_cc_get_fat
2cc20     07 4A 05 F6 | 	mov	COUNT_, #7
2cc24     A8 00 A0 FD | 	call	#pushregs_
2cc28     0A 27 02 F6 | 	mov	local01, arg02
2cc2c     09 29 02 FB | 	rdlong	local02, arg01
2cc30     02 26 16 F2 | 	cmp	local01, #2 wc
2cc34     14 00 90 CD |  if_b	jmp	#LR__4420
2cc38     18 28 06 F1 | 	add	local02, #24
2cc3c     14 2B 02 FB | 	rdlong	local03, local02
2cc40     18 28 86 F1 | 	sub	local02, #24
2cc44     15 27 12 F2 | 	cmp	local01, local03 wc
2cc48     08 00 90 CD |  if_b	jmp	#LR__4421
2cc4c                 | LR__4420
2cc4c     01 2C 06 F6 | 	mov	local04, #1
2cc50     60 01 90 FD | 	jmp	#LR__4428
2cc54                 | LR__4421
2cc54     01 2C 66 F6 | 	neg	local04, #1
2cc58                 | ' 		val = 0xFFFFFFFF;
2cc58                 | ' 
2cc58                 | ' 		switch (fs->fs_type) {
2cc58     14 2F C2 FA | 	rdbyte	local05, local02
2cc5c     01 2E 86 F1 | 	sub	local05, #1
2cc60     03 2E 26 F3 | 	fle	local05, #3
2cc64     30 2E 62 FD | 	jmprel	local05
2cc68                 | LR__4422
2cc68     0C 00 90 FD | 	jmp	#LR__4423
2cc6c     B8 00 90 FD | 	jmp	#LR__4424
2cc70     F8 00 90 FD | 	jmp	#LR__4425
2cc74     38 01 90 FD | 	jmp	#LR__4426
2cc78                 | LR__4423
2cc78     13 2F 02 F6 | 	mov	local05, local01
2cc7c     13 13 02 F6 | 	mov	arg01, local01
2cc80     01 12 46 F0 | 	shr	arg01, #1
2cc84     09 2F 02 F1 | 	add	local05, arg01
2cc88     14 13 02 F6 | 	mov	arg01, local02
2cc8c     17 31 02 F6 | 	mov	local06, local05
2cc90     09 30 46 F0 | 	shr	local06, #9
2cc94     24 28 06 F1 | 	add	local02, #36
2cc98     14 15 02 FB | 	rdlong	arg02, local02
2cc9c     24 28 86 F1 | 	sub	local02, #36
2cca0     18 15 02 F1 | 	add	arg02, local06
2cca4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cca8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ccac     04 01 90 5D |  if_ne	jmp	#LR__4427
2ccb0     17 31 02 F6 | 	mov	local06, local05
2ccb4     FF 31 06 F5 | 	and	local06, #511
2ccb8     34 28 06 F1 | 	add	local02, #52
2ccbc     14 31 02 F1 | 	add	local06, local02
2ccc0     18 33 C2 FA | 	rdbyte	local07, local06
2ccc4     34 28 86 F1 | 	sub	local02, #52
2ccc8     14 13 02 F6 | 	mov	arg01, local02
2cccc     01 2E 06 F1 | 	add	local05, #1
2ccd0     17 31 02 F6 | 	mov	local06, local05
2ccd4     09 30 46 F0 | 	shr	local06, #9
2ccd8     24 28 06 F1 | 	add	local02, #36
2ccdc     14 15 02 FB | 	rdlong	arg02, local02
2cce0     24 28 86 F1 | 	sub	local02, #36
2cce4     18 15 02 F1 | 	add	arg02, local06
2cce8     7C FD BF FD | 	call	#_fatfs_cc_move_window
2ccec     00 FA 0D F2 | 	cmp	result1, #0 wz
2ccf0     C0 00 90 5D |  if_ne	jmp	#LR__4427
2ccf4     FF 2F 06 F5 | 	and	local05, #511
2ccf8     34 28 06 F1 | 	add	local02, #52
2ccfc     14 2F 02 F1 | 	add	local05, local02
2cd00     17 31 C2 FA | 	rdbyte	local06, local05
2cd04     08 30 66 F0 | 	shl	local06, #8
2cd08     18 33 42 F5 | 	or	local07, local06
2cd0c     01 26 CE F7 | 	test	local01, #1 wz
2cd10     04 32 46 50 |  if_ne	shr	local07, #4
2cd14     19 2B 02 56 |  if_ne	mov	local03, local07
2cd18     0B 32 46 A7 |  if_e	zerox	local07, #11
2cd1c     19 2B 02 A6 |  if_e	mov	local03, local07
2cd20     15 2D 02 F6 | 	mov	local04, local03
2cd24                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2cd24                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2cd24                 | ' 			break;
2cd24     8C 00 90 FD | 	jmp	#LR__4427
2cd28                 | LR__4424
2cd28     14 13 02 F6 | 	mov	arg01, local02
2cd2c     13 31 02 F6 | 	mov	local06, local01
2cd30     08 30 46 F0 | 	shr	local06, #8
2cd34     24 28 06 F1 | 	add	local02, #36
2cd38     14 15 02 FB | 	rdlong	arg02, local02
2cd3c     24 28 86 F1 | 	sub	local02, #36
2cd40     18 15 02 F1 | 	add	arg02, local06
2cd44     20 FD BF FD | 	call	#_fatfs_cc_move_window
2cd48     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd4c     64 00 90 5D |  if_ne	jmp	#LR__4427
2cd50     34 28 06 F1 | 	add	local02, #52
2cd54     01 26 66 F0 | 	shl	local01, #1
2cd58     FF 27 06 F5 | 	and	local01, #511
2cd5c     13 29 02 F1 | 	add	local02, local01
2cd60                 | ' {
2cd60                 | ' 
2cd60                 | ' 	return *((WORD*)ptr);
2cd60     14 FB E1 FA | 	rdword	result1, local02
2cd64     FD 2C 32 F9 | 	getword	local04, result1, #0
2cd68                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2cd68                 | ' 			break;
2cd68     48 00 90 FD | 	jmp	#LR__4427
2cd6c                 | LR__4425
2cd6c     14 13 02 F6 | 	mov	arg01, local02
2cd70     13 31 02 F6 | 	mov	local06, local01
2cd74     07 30 46 F0 | 	shr	local06, #7
2cd78     24 28 06 F1 | 	add	local02, #36
2cd7c     14 15 02 FB | 	rdlong	arg02, local02
2cd80     24 28 86 F1 | 	sub	local02, #36
2cd84     18 15 02 F1 | 	add	arg02, local06
2cd88     DC FC BF FD | 	call	#_fatfs_cc_move_window
2cd8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd90     20 00 90 5D |  if_ne	jmp	#LR__4427
2cd94     34 28 06 F1 | 	add	local02, #52
2cd98     02 26 66 F0 | 	shl	local01, #2
2cd9c     FF 27 06 F5 | 	and	local01, #511
2cda0     13 29 02 F1 | 	add	local02, local01
2cda4                 | ' {
2cda4                 | ' 
2cda4                 | ' 	return *((DWORD*)ptr);
2cda4     14 2D 02 FB | 	rdlong	local04, local02
2cda8     7C 2C 06 F4 | 	bitl	local04, #124
2cdac                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2cdac                 | ' 			break;
2cdac     04 00 90 FD | 	jmp	#LR__4427
2cdb0                 | LR__4426
2cdb0     01 2C 06 F6 | 	mov	local04, #1
2cdb4                 | LR__4427
2cdb4                 | LR__4428
2cdb4                 | ' 			val = 1;
2cdb4                 | ' 		}
2cdb4                 | ' 	}
2cdb4                 | ' 
2cdb4                 | ' 	return val;
2cdb4     16 FB 01 F6 | 	mov	result1, local04
2cdb8     A7 F0 03 F6 | 	mov	ptra, fp
2cdbc     B2 00 A0 FD | 	call	#popregs_
2cdc0                 | _fatfs_cc_get_fat_ret
2cdc0     2D 00 64 FD | 	ret
2cdc4                 | 
2cdc4                 | _fatfs_cc_put_fat
2cdc4     08 4A 05 F6 | 	mov	COUNT_, #8
2cdc8     A8 00 A0 FD | 	call	#pushregs_
2cdcc     09 27 02 F6 | 	mov	local01, arg01
2cdd0     0A 29 02 F6 | 	mov	local02, arg02
2cdd4     0B 2B 02 F6 | 	mov	local03, arg03
2cdd8     02 2C 06 F6 | 	mov	local04, #2
2cddc     02 28 16 F2 | 	cmp	local02, #2 wc
2cde0     E0 01 90 CD |  if_b	jmp	#LR__4437
2cde4     18 26 06 F1 | 	add	local01, #24
2cde8     13 2F 02 FB | 	rdlong	local05, local01
2cdec     18 26 86 F1 | 	sub	local01, #24
2cdf0     17 29 12 F2 | 	cmp	local02, local05 wc
2cdf4     CC 01 90 3D |  if_ae	jmp	#LR__4437
2cdf8                 | ' 		switch (fs->fs_type) {
2cdf8     13 31 C2 FA | 	rdbyte	local06, local01
2cdfc     01 30 86 F1 | 	sub	local06, #1
2ce00     03 30 26 F3 | 	fle	local06, #3
2ce04     30 30 62 FD | 	jmprel	local06
2ce08                 | LR__4430
2ce08     0C 00 90 FD | 	jmp	#LR__4431
2ce0c     F8 00 90 FD | 	jmp	#LR__4434
2ce10     40 01 90 FD | 	jmp	#LR__4435
2ce14     AC 01 90 FD | 	jmp	#LR__4436
2ce18                 | LR__4431
2ce18     14 33 02 F6 | 	mov	local07, local02
2ce1c     14 2F 02 F6 | 	mov	local05, local02
2ce20     01 2E 46 F0 | 	shr	local05, #1
2ce24     17 33 02 F1 | 	add	local07, local05
2ce28     13 13 02 F6 | 	mov	arg01, local01
2ce2c     19 31 02 F6 | 	mov	local06, local07
2ce30     09 30 46 F0 | 	shr	local06, #9
2ce34     24 26 06 F1 | 	add	local01, #36
2ce38     13 15 02 FB | 	rdlong	arg02, local01
2ce3c     24 26 86 F1 | 	sub	local01, #36
2ce40     18 15 02 F1 | 	add	arg02, local06
2ce44     20 FC BF FD | 	call	#_fatfs_cc_move_window
2ce48     FD 2C 0A F6 | 	mov	local04, result1 wz
2ce4c     74 01 90 5D |  if_ne	jmp	#LR__4436
2ce50     34 26 06 F1 | 	add	local01, #52
2ce54     13 35 02 F6 | 	mov	local08, local01
2ce58     19 2F 02 F6 | 	mov	local05, local07
2ce5c     FF 2F 06 F5 | 	and	local05, #511
2ce60     17 35 02 F1 | 	add	local08, local05
2ce64     01 28 CE F7 | 	test	local02, #1 wz
2ce68     34 26 86 F1 | 	sub	local01, #52
2ce6c     01 32 06 F1 | 	add	local07, #1
2ce70     18 00 90 AD |  if_e	jmp	#LR__4432
2ce74     1A 2F C2 FA | 	rdbyte	local05, local08
2ce78     17 2F 42 F8 | 	getnib	local05, local05, #0
2ce7c     15 31 E2 F8 | 	getbyte	local06, local03, #0
2ce80     04 30 66 F0 | 	shl	local06, #4
2ce84     18 2F 42 F5 | 	or	local05, local06
2ce88     04 00 90 FD | 	jmp	#LR__4433
2ce8c                 | LR__4432
2ce8c     15 2F 02 F6 | 	mov	local05, local03
2ce90                 | LR__4433
2ce90     1A 2F 42 FC | 	wrbyte	local05, local08
2ce94     03 26 06 F1 | 	add	local01, #3
2ce98     13 03 48 FC | 	wrbyte	#1, local01
2ce9c     03 26 86 F1 | 	sub	local01, #3
2cea0     13 13 02 F6 | 	mov	arg01, local01
2cea4     19 35 02 F6 | 	mov	local08, local07
2cea8     09 34 46 F0 | 	shr	local08, #9
2ceac     24 26 06 F1 | 	add	local01, #36
2ceb0     13 15 02 FB | 	rdlong	arg02, local01
2ceb4     24 26 86 F1 | 	sub	local01, #36
2ceb8     1A 15 02 F1 | 	add	arg02, local08
2cebc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2cec0     FD 2C 0A F6 | 	mov	local04, result1 wz
2cec4     FC 00 90 5D |  if_ne	jmp	#LR__4436
2cec8     34 26 06 F1 | 	add	local01, #52
2cecc     13 35 02 F6 | 	mov	local08, local01
2ced0     FF 33 06 F5 | 	and	local07, #511
2ced4     19 35 02 F1 | 	add	local08, local07
2ced8     01 28 CE F7 | 	test	local02, #1 wz
2cedc     04 2A 46 50 |  if_ne	shr	local03, #4
2cee0     15 2F 02 56 |  if_ne	mov	local05, local03
2cee4     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2cee8     F0 2E 06 A5 |  if_e	and	local05, #240
2ceec     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2cef0     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2cef4     15 2F 42 A5 |  if_e	or	local05, local03
2cef8     1A 2F 42 FC | 	wrbyte	local05, local08
2cefc     31 26 86 F1 | 	sub	local01, #49
2cf00     13 03 48 FC | 	wrbyte	#1, local01
2cf04                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2cf04                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2cf04                 | ' 			fs->wflag = 1;
2cf04                 | ' 			break;
2cf04     BC 00 90 FD | 	jmp	#LR__4436
2cf08                 | LR__4434
2cf08     13 13 02 F6 | 	mov	arg01, local01
2cf0c     14 35 02 F6 | 	mov	local08, local02
2cf10     08 34 46 F0 | 	shr	local08, #8
2cf14     24 26 06 F1 | 	add	local01, #36
2cf18     13 15 02 FB | 	rdlong	arg02, local01
2cf1c     24 26 86 F1 | 	sub	local01, #36
2cf20     1A 15 02 F1 | 	add	arg02, local08
2cf24     40 FB BF FD | 	call	#_fatfs_cc_move_window
2cf28     FD 2C 0A F6 | 	mov	local04, result1 wz
2cf2c     94 00 90 5D |  if_ne	jmp	#LR__4436
2cf30     34 26 06 F1 | 	add	local01, #52
2cf34     13 13 02 F6 | 	mov	arg01, local01
2cf38     01 28 66 F0 | 	shl	local02, #1
2cf3c     FF 29 06 F5 | 	and	local02, #511
2cf40     14 13 02 F1 | 	add	arg01, local02
2cf44     09 2B 52 FC | 	wrword	local03, arg01
2cf48     31 26 86 F1 | 	sub	local01, #49
2cf4c     13 03 48 FC | 	wrbyte	#1, local01
2cf50                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2cf50                 | ' 			fs->wflag = 1;
2cf50                 | ' 			break;
2cf50     70 00 90 FD | 	jmp	#LR__4436
2cf54                 | LR__4435
2cf54     13 13 02 F6 | 	mov	arg01, local01
2cf58     14 35 02 F6 | 	mov	local08, local02
2cf5c     07 34 46 F0 | 	shr	local08, #7
2cf60     24 26 06 F1 | 	add	local01, #36
2cf64     13 15 02 FB | 	rdlong	arg02, local01
2cf68     24 26 86 F1 | 	sub	local01, #36
2cf6c     1A 15 02 F1 | 	add	arg02, local08
2cf70     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2cf74     FD 2C 0A F6 | 	mov	local04, result1 wz
2cf78     48 00 90 5D |  if_ne	jmp	#LR__4436
2cf7c     7C 2A 06 F4 | 	bitl	local03, #124
2cf80     34 26 06 F1 | 	add	local01, #52
2cf84     14 35 02 F6 | 	mov	local08, local02
2cf88     02 34 66 F0 | 	shl	local08, #2
2cf8c     FF 35 06 F5 | 	and	local08, #511
2cf90     13 13 02 F6 | 	mov	arg01, local01
2cf94     1A 13 02 F1 | 	add	arg01, local08
2cf98                 | ' {
2cf98                 | ' 
2cf98                 | ' 	return *((DWORD*)ptr);
2cf98     09 35 02 FB | 	rdlong	local08, arg01
2cf9c     00 00 78 FF 
2cfa0     00 34 06 F5 | 	and	local08, ##-268435456
2cfa4     1A 2B 42 F5 | 	or	local03, local08
2cfa8     13 13 02 F6 | 	mov	arg01, local01
2cfac     02 28 66 F0 | 	shl	local02, #2
2cfb0     FF 29 06 F5 | 	and	local02, #511
2cfb4     14 13 02 F1 | 	add	arg01, local02
2cfb8     09 2B 62 FC | 	wrlong	local03, arg01
2cfbc     31 26 86 F1 | 	sub	local01, #49
2cfc0     13 03 48 FC | 	wrbyte	#1, local01
2cfc4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2cfc4                 | ' 			}
2cfc4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2cfc4                 | ' 			fs->wflag = 1;
2cfc4                 | ' 			break;
2cfc4                 | LR__4436
2cfc4                 | LR__4437
2cfc4                 | ' 		}
2cfc4                 | ' 	}
2cfc4                 | ' 	return res;
2cfc4     16 FB 01 F6 | 	mov	result1, local04
2cfc8     A7 F0 03 F6 | 	mov	ptra, fp
2cfcc     B2 00 A0 FD | 	call	#popregs_
2cfd0                 | _fatfs_cc_put_fat_ret
2cfd0     2D 00 64 FD | 	ret
2cfd4                 | 
2cfd4                 | _fatfs_cc_remove_chain
2cfd4     05 4A 05 F6 | 	mov	COUNT_, #5
2cfd8     A8 00 A0 FD | 	call	#pushregs_
2cfdc     09 27 02 F6 | 	mov	local01, arg01
2cfe0     0A 29 02 F6 | 	mov	local02, arg02
2cfe4     0B 2B 02 F6 | 	mov	local03, arg03
2cfe8     13 2D 02 FB | 	rdlong	local04, local01
2cfec     02 28 16 F2 | 	cmp	local02, #2 wc
2cff0     14 00 90 CD |  if_b	jmp	#LR__4440
2cff4     18 2C 06 F1 | 	add	local04, #24
2cff8     16 FB 01 FB | 	rdlong	result1, local04
2cffc     18 2C 86 F1 | 	sub	local04, #24
2d000     FD 28 12 F2 | 	cmp	local02, result1 wc
2d004     08 00 90 CD |  if_b	jmp	#LR__4441
2d008                 | LR__4440
2d008     02 FA 05 F6 | 	mov	result1, #2
2d00c     CC 00 90 FD | 	jmp	#LR__4446
2d010                 | LR__4441
2d010     00 2A 0E F2 | 	cmp	local03, #0 wz
2d014     18 00 90 AD |  if_e	jmp	#LR__4442
2d018     15 15 02 F6 | 	mov	arg02, local03
2d01c     16 13 02 F6 | 	mov	arg01, local04
2d020     01 16 66 F6 | 	neg	arg03, #1
2d024     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2d028     00 FA 0D F2 | 	cmp	result1, #0 wz
2d02c     AC 00 90 5D |  if_ne	jmp	#LR__4446
2d030                 | LR__4442
2d030                 | ' 	}
2d030                 | ' 
2d030                 | ' 
2d030                 | ' 	do {
2d030                 | LR__4443
2d030     14 15 02 F6 | 	mov	arg02, local02
2d034     13 13 02 F6 | 	mov	arg01, local01
2d038     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2d03c     FD 2E 0A F6 | 	mov	local05, result1 wz
2d040     94 00 90 AD |  if_e	jmp	#LR__4445
2d044     01 2E 0E F2 | 	cmp	local05, #1 wz
2d048     02 FA 05 A6 |  if_e	mov	result1, #2
2d04c     8C 00 90 AD |  if_e	jmp	#LR__4446
2d050     FF FF 7F FF 
2d054     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2d058     01 FA 05 A6 |  if_e	mov	result1, #1
2d05c     7C 00 90 AD |  if_e	jmp	#LR__4446
2d060     14 15 02 F6 | 	mov	arg02, local02
2d064     16 13 02 F6 | 	mov	arg01, local04
2d068     00 16 06 F6 | 	mov	arg03, #0
2d06c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2d070     FD 2A 0A F6 | 	mov	local03, result1 wz
2d074     15 FB 01 56 |  if_ne	mov	result1, local03
2d078     60 00 90 5D |  if_ne	jmp	#LR__4446
2d07c     18 2C 06 F1 | 	add	local04, #24
2d080     16 2B 02 FB | 	rdlong	local03, local04
2d084     02 2A 86 F1 | 	sub	local03, #2
2d088     04 2C 86 F1 | 	sub	local04, #4
2d08c     16 29 02 FB | 	rdlong	local02, local04
2d090     14 2C 86 F1 | 	sub	local04, #20
2d094     15 29 12 F2 | 	cmp	local02, local03 wc
2d098     24 00 90 3D |  if_ae	jmp	#LR__4444
2d09c     14 2C 06 F1 | 	add	local04, #20
2d0a0     16 2B 02 FB | 	rdlong	local03, local04
2d0a4     01 2A 06 F1 | 	add	local03, #1
2d0a8     16 2B 62 FC | 	wrlong	local03, local04
2d0ac     10 2C 86 F1 | 	sub	local04, #16
2d0b0     16 2B C2 FA | 	rdbyte	local03, local04
2d0b4     01 2A 46 F5 | 	or	local03, #1
2d0b8     16 2B 42 FC | 	wrbyte	local03, local04
2d0bc     04 2C 86 F1 | 	sub	local04, #4
2d0c0                 | LR__4444
2d0c0     17 29 02 F6 | 	mov	local02, local05
2d0c4     18 2C 06 F1 | 	add	local04, #24
2d0c8     16 2F 02 FB | 	rdlong	local05, local04
2d0cc     18 2C 86 F1 | 	sub	local04, #24
2d0d0     17 29 12 F2 | 	cmp	local02, local05 wc
2d0d4     58 FF 9F CD |  if_b	jmp	#LR__4443
2d0d8                 | LR__4445
2d0d8                 | ' #line 1500 "ff.c"
2d0d8                 | ' 	return FR_OK;
2d0d8     00 FA 05 F6 | 	mov	result1, #0
2d0dc                 | LR__4446
2d0dc     A7 F0 03 F6 | 	mov	ptra, fp
2d0e0     B2 00 A0 FD | 	call	#popregs_
2d0e4                 | _fatfs_cc_remove_chain_ret
2d0e4     2D 00 64 FD | 	ret
2d0e8                 | 
2d0e8                 | _fatfs_cc_create_chain
2d0e8     09 4A 05 F6 | 	mov	COUNT_, #9
2d0ec     A8 00 A0 FD | 	call	#pushregs_
2d0f0     09 27 02 F6 | 	mov	local01, arg01
2d0f4     0A 29 0A F6 | 	mov	local02, arg02 wz
2d0f8     13 2B 02 FB | 	rdlong	local03, local01
2d0fc     28 00 90 5D |  if_ne	jmp	#LR__4450
2d100     10 2A 06 F1 | 	add	local03, #16
2d104     15 2D 0A FB | 	rdlong	local04, local03 wz
2d108     10 2A 86 F1 | 	sub	local03, #16
2d10c     18 2A 06 51 |  if_ne	add	local03, #24
2d110     15 2F 02 5B |  if_ne	rdlong	local05, local03
2d114     18 2A 86 51 |  if_ne	sub	local03, #24
2d118     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2d11c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4451
2d120     01 2C 06 F6 | 	mov	local04, #1
2d124     48 00 90 FD | 	jmp	#LR__4451
2d128                 | LR__4450
2d128     14 15 02 F6 | 	mov	arg02, local02
2d12c     13 13 02 F6 | 	mov	arg01, local01
2d130     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d134     FD 2C 02 F6 | 	mov	local04, result1
2d138     02 2C 16 F2 | 	cmp	local04, #2 wc
2d13c     01 FA 05 C6 |  if_b	mov	result1, #1
2d140     BC 01 90 CD |  if_b	jmp	#LR__4461
2d144     FF FF 7F FF 
2d148     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2d14c     16 FB 01 A6 |  if_e	mov	result1, local04
2d150     AC 01 90 AD |  if_e	jmp	#LR__4461
2d154     18 2A 06 F1 | 	add	local03, #24
2d158     15 2F 02 FB | 	rdlong	local05, local03
2d15c     18 2A 86 F1 | 	sub	local03, #24
2d160     17 2D 12 F2 | 	cmp	local04, local05 wc
2d164     16 FB 01 C6 |  if_b	mov	result1, local04
2d168     94 01 90 CD |  if_b	jmp	#LR__4461
2d16c     14 2D 02 F6 | 	mov	local04, local02
2d170                 | LR__4451
2d170     14 2A 06 F1 | 	add	local03, #20
2d174     15 2F 0A FB | 	rdlong	local05, local03 wz
2d178     14 2A 86 F1 | 	sub	local03, #20
2d17c     00 FA 05 A6 |  if_e	mov	result1, #0
2d180     7C 01 90 AD |  if_e	jmp	#LR__4461
2d184     00 30 06 F6 | 	mov	local06, #0
2d188     14 2D 0A F2 | 	cmp	local04, local02 wz
2d18c     74 00 90 5D |  if_ne	jmp	#LR__4454
2d190     16 31 02 F6 | 	mov	local06, local04
2d194     01 30 06 F1 | 	add	local06, #1
2d198     18 2A 06 F1 | 	add	local03, #24
2d19c     15 2F 02 FB | 	rdlong	local05, local03
2d1a0     18 2A 86 F1 | 	sub	local03, #24
2d1a4     17 31 12 F2 | 	cmp	local06, local05 wc
2d1a8     02 30 06 36 |  if_ae	mov	local06, #2
2d1ac     18 15 02 F6 | 	mov	arg02, local06
2d1b0     13 13 02 F6 | 	mov	arg01, local01
2d1b4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d1b8     FD 2E 02 F6 | 	mov	local05, result1
2d1bc     01 2E 0E F2 | 	cmp	local05, #1 wz
2d1c0     FF FF 7F 5F 
2d1c4     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d1c8     17 FB 01 A6 |  if_e	mov	result1, local05
2d1cc     30 01 90 AD |  if_e	jmp	#LR__4461
2d1d0     00 2E 0E F2 | 	cmp	local05, #0 wz
2d1d4     2C 00 90 AD |  if_e	jmp	#LR__4453
2d1d8     10 2A 06 F1 | 	add	local03, #16
2d1dc     15 33 02 FB | 	rdlong	local07, local03
2d1e0     10 2A 86 F1 | 	sub	local03, #16
2d1e4     02 32 16 F2 | 	cmp	local07, #2 wc
2d1e8     14 00 90 CD |  if_b	jmp	#LR__4452
2d1ec     18 2A 06 F1 | 	add	local03, #24
2d1f0     15 2F 02 FB | 	rdlong	local05, local03
2d1f4     18 2A 86 F1 | 	sub	local03, #24
2d1f8     17 33 12 F2 | 	cmp	local07, local05 wc
2d1fc     19 2D 02 C6 |  if_b	mov	local04, local07
2d200                 | LR__4452
2d200     00 30 06 F6 | 	mov	local06, #0
2d204                 | LR__4453
2d204                 | LR__4454
2d204     00 30 0E F2 | 	cmp	local06, #0 wz
2d208     60 00 90 5D |  if_ne	jmp	#LR__4457
2d20c     16 31 02 F6 | 	mov	local06, local04
2d210                 | ' 			ncl = scl;
2d210                 | ' 			for (;;) {
2d210                 | LR__4455
2d210     01 30 06 F1 | 	add	local06, #1
2d214     18 2A 06 F1 | 	add	local03, #24
2d218     15 2F 02 FB | 	rdlong	local05, local03
2d21c     18 2A 86 F1 | 	sub	local03, #24
2d220     17 31 12 F2 | 	cmp	local06, local05 wc
2d224     02 30 06 36 |  if_ae	mov	local06, #2
2d228     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2d22c     00 FA 05 16 |  if_a	mov	result1, #0
2d230     CC 00 90 1D |  if_a	jmp	#LR__4461
2d234     18 15 02 F6 | 	mov	arg02, local06
2d238     13 13 02 F6 | 	mov	arg01, local01
2d23c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d240     FD 32 0A F6 | 	mov	local07, result1 wz
2d244     24 00 90 AD |  if_e	jmp	#LR__4456
2d248     01 32 0E F2 | 	cmp	local07, #1 wz
2d24c     FF FF 7F 5F 
2d250     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d254     19 FB 01 A6 |  if_e	mov	result1, local07
2d258     A4 00 90 AD |  if_e	jmp	#LR__4461
2d25c     16 31 0A F2 | 	cmp	local06, local04 wz
2d260     00 FA 05 A6 |  if_e	mov	result1, #0
2d264     98 00 90 AD |  if_e	jmp	#LR__4461
2d268     A4 FF 9F FD | 	jmp	#LR__4455
2d26c                 | LR__4456
2d26c                 | LR__4457
2d26c     15 13 02 F6 | 	mov	arg01, local03
2d270     18 15 02 F6 | 	mov	arg02, local06
2d274     01 16 66 F6 | 	neg	arg03, #1
2d278     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d27c     FD 34 0A F6 | 	mov	local08, result1 wz
2d280     1C 00 90 5D |  if_ne	jmp	#LR__4458
2d284     00 28 0E F2 | 	cmp	local02, #0 wz
2d288     14 00 90 AD |  if_e	jmp	#LR__4458
2d28c     15 13 02 F6 | 	mov	arg01, local03
2d290     14 15 02 F6 | 	mov	arg02, local02
2d294     18 17 02 F6 | 	mov	arg03, local06
2d298     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d29c     FD 34 02 F6 | 	mov	local08, result1
2d2a0                 | LR__4458
2d2a0     00 34 0E F2 | 	cmp	local08, #0 wz
2d2a4     4C 00 90 5D |  if_ne	jmp	#LR__4459
2d2a8     10 2A 06 F1 | 	add	local03, #16
2d2ac     15 31 62 FC | 	wrlong	local06, local03
2d2b0     08 2A 06 F1 | 	add	local03, #8
2d2b4     15 2F 02 FB | 	rdlong	local05, local03
2d2b8     02 2E 86 F1 | 	sub	local05, #2
2d2bc     04 2A 86 F1 | 	sub	local03, #4
2d2c0     15 37 02 FB | 	rdlong	local09, local03
2d2c4     14 2A 86 F1 | 	sub	local03, #20
2d2c8     17 37 1A F2 | 	cmp	local09, local05 wcz
2d2cc     14 2A 06 E1 |  if_be	add	local03, #20
2d2d0     15 37 02 EB |  if_be	rdlong	local09, local03
2d2d4     01 36 86 E1 |  if_be	sub	local09, #1
2d2d8     15 37 62 EC |  if_be	wrlong	local09, local03
2d2dc     14 2A 86 E1 |  if_be	sub	local03, #20
2d2e0     04 2A 06 F1 | 	add	local03, #4
2d2e4     15 2F C2 FA | 	rdbyte	local05, local03
2d2e8     01 2E 46 F5 | 	or	local05, #1
2d2ec     15 2F 42 FC | 	wrbyte	local05, local03
2d2f0     08 00 90 FD | 	jmp	#LR__4460
2d2f4                 | LR__4459
2d2f4     01 34 0E F2 | 	cmp	local08, #1 wz
2d2f8     01 30 C6 F6 | 	negz	local06, #1
2d2fc                 | LR__4460
2d2fc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d2fc                 | ' 	}
2d2fc                 | ' 
2d2fc                 | ' 	return ncl;
2d2fc     18 FB 01 F6 | 	mov	result1, local06
2d300                 | LR__4461
2d300     A7 F0 03 F6 | 	mov	ptra, fp
2d304     B2 00 A0 FD | 	call	#popregs_
2d308                 | _fatfs_cc_create_chain_ret
2d308     2D 00 64 FD | 	ret
2d30c                 | 
2d30c                 | _fatfs_cc_dir_clear
2d30c     06 4A 05 F6 | 	mov	COUNT_, #6
2d310     A8 00 A0 FD | 	call	#pushregs_
2d314     09 27 02 F6 | 	mov	local01, arg01
2d318     0A 29 02 F6 | 	mov	local02, arg02
2d31c     13 13 02 F6 | 	mov	arg01, local01
2d320     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d324     00 FA 0D F2 | 	cmp	result1, #0 wz
2d328     01 FA 05 56 |  if_ne	mov	result1, #1
2d32c     90 00 90 5D |  if_ne	jmp	#LR__4472
2d330     13 13 02 F6 | 	mov	arg01, local01
2d334     14 15 02 F6 | 	mov	arg02, local02
2d338     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d33c     FD 2A 02 F6 | 	mov	local03, result1
2d340     30 26 06 F1 | 	add	local01, #48
2d344     13 2B 62 FC | 	wrlong	local03, local01
2d348     04 26 06 F1 | 	add	local01, #4
2d34c     13 13 02 F6 | 	mov	arg01, local01
2d350     00 14 06 F6 | 	mov	arg02, #0
2d354     09 16 C6 F9 | 	decod	arg03, #9
2d358     98 00 A0 FD | 	call	#\builtin_bytefill_
2d35c     13 2D 02 F6 | 	mov	local04, local01
2d360                 | ' #line 1667 "ff.c"
2d360                 | ' 	{
2d360                 | ' 		ibuf = fs->win; szb = 1;
2d360                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d360     00 2E 06 F6 | 	mov	local05, #0
2d364     34 26 86 F1 | 	sub	local01, #52
2d368                 | LR__4470
2d368     0A 26 06 F1 | 	add	local01, #10
2d36c     13 31 E2 FA | 	rdword	local06, local01
2d370     0A 26 86 F1 | 	sub	local01, #10
2d374     18 2F 12 F2 | 	cmp	local05, local06 wc
2d378     2C 00 90 3D |  if_ae	jmp	#LR__4471
2d37c     01 26 06 F1 | 	add	local01, #1
2d380     13 13 C2 FA | 	rdbyte	arg01, local01
2d384     01 26 86 F1 | 	sub	local01, #1
2d388     16 15 02 F6 | 	mov	arg02, local04
2d38c     15 17 02 F6 | 	mov	arg03, local03
2d390     17 17 02 F1 | 	add	arg03, local05
2d394     01 18 06 F6 | 	mov	arg04, #1
2d398     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2d39c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d3a0     01 2E 06 A1 |  if_e	add	local05, #1
2d3a4     C0 FF 9F AD |  if_e	jmp	#LR__4470
2d3a8                 | LR__4471
2d3a8                 | ' 	}
2d3a8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d3a8     0A 26 06 F1 | 	add	local01, #10
2d3ac     13 2D E2 FA | 	rdword	local04, local01
2d3b0     16 2F 0A F2 | 	cmp	local05, local04 wz
2d3b4     00 30 06 A6 |  if_e	mov	local06, #0
2d3b8     01 30 06 56 |  if_ne	mov	local06, #1
2d3bc     18 FB 01 F6 | 	mov	result1, local06
2d3c0                 | LR__4472
2d3c0     A7 F0 03 F6 | 	mov	ptra, fp
2d3c4     B2 00 A0 FD | 	call	#popregs_
2d3c8                 | _fatfs_cc_dir_clear_ret
2d3c8     2D 00 64 FD | 	ret
2d3cc                 | 
2d3cc                 | _fatfs_cc_dir_sdi
2d3cc     06 4A 05 F6 | 	mov	COUNT_, #6
2d3d0     A8 00 A0 FD | 	call	#pushregs_
2d3d4     09 27 02 F6 | 	mov	local01, arg01
2d3d8     0A 29 02 F6 | 	mov	local02, arg02
2d3dc     13 2B 02 FB | 	rdlong	local03, local01
2d3e0     00 10 00 FF 
2d3e4     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2d3e8     1F 28 CE C7 |  if_b	test	local02, #31 wz
2d3ec                 | ' 		return FR_INT_ERR;
2d3ec     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2d3f0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4486
2d3f4     10 26 06 F1 | 	add	local01, #16
2d3f8     13 29 62 FC | 	wrlong	local02, local01
2d3fc     08 26 86 F1 | 	sub	local01, #8
2d400     13 2D 0A FB | 	rdlong	local04, local01 wz
2d404     08 26 86 F1 | 	sub	local01, #8
2d408     15 2F C2 AA |  if_e	rdbyte	local05, local03
2d40c     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2d410     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2d414     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2d418     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2d41c     00 2C 0E F2 | 	cmp	local04, #0 wz
2d420     3C 00 90 5D |  if_ne	jmp	#LR__4480
2d424     14 2F 02 F6 | 	mov	local05, local02
2d428     05 2E 46 F0 | 	shr	local05, #5
2d42c     08 2A 06 F1 | 	add	local03, #8
2d430     15 15 E2 FA | 	rdword	arg02, local03
2d434     08 2A 86 F1 | 	sub	local03, #8
2d438     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2d43c     02 FA 05 36 |  if_ae	mov	result1, #2
2d440     E4 00 90 3D |  if_ae	jmp	#LR__4486
2d444     28 2A 06 F1 | 	add	local03, #40
2d448     15 2F 02 FB | 	rdlong	local05, local03
2d44c     28 2A 86 F1 | 	sub	local03, #40
2d450     18 26 06 F1 | 	add	local01, #24
2d454     13 2F 62 FC | 	wrlong	local05, local01
2d458     18 26 86 F1 | 	sub	local01, #24
2d45c     7C 00 90 FD | 	jmp	#LR__4485
2d460                 | LR__4480
2d460     0A 2A 06 F1 | 	add	local03, #10
2d464     15 31 E2 FA | 	rdword	local06, local03
2d468     0A 2A 86 F1 | 	sub	local03, #10
2d46c     09 30 66 F0 | 	shl	local06, #9
2d470                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d470                 | ' 		while (ofs >= csz) {
2d470                 | LR__4481
2d470     18 29 12 F2 | 	cmp	local02, local06 wc
2d474     4C 00 90 CD |  if_b	jmp	#LR__4484
2d478     13 13 02 F6 | 	mov	arg01, local01
2d47c     16 15 02 F6 | 	mov	arg02, local04
2d480     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d484     FD 2C 02 F6 | 	mov	local04, result1
2d488     FF FF 7F FF 
2d48c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2d490     01 FA 05 A6 |  if_e	mov	result1, #1
2d494     90 00 90 AD |  if_e	jmp	#LR__4486
2d498     02 2C 16 F2 | 	cmp	local04, #2 wc
2d49c     14 00 90 CD |  if_b	jmp	#LR__4482
2d4a0     18 2A 06 F1 | 	add	local03, #24
2d4a4     15 2F 02 FB | 	rdlong	local05, local03
2d4a8     18 2A 86 F1 | 	sub	local03, #24
2d4ac     17 2D 12 F2 | 	cmp	local04, local05 wc
2d4b0     08 00 90 CD |  if_b	jmp	#LR__4483
2d4b4                 | LR__4482
2d4b4     02 FA 05 F6 | 	mov	result1, #2
2d4b8     6C 00 90 FD | 	jmp	#LR__4486
2d4bc                 | LR__4483
2d4bc     18 29 82 F1 | 	sub	local02, local06
2d4c0     AC FF 9F FD | 	jmp	#LR__4481
2d4c4                 | LR__4484
2d4c4     15 13 02 F6 | 	mov	arg01, local03
2d4c8     16 15 02 F6 | 	mov	arg02, local04
2d4cc     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d4d0     18 26 06 F1 | 	add	local01, #24
2d4d4     13 FB 61 FC | 	wrlong	result1, local01
2d4d8     18 26 86 F1 | 	sub	local01, #24
2d4dc                 | LR__4485
2d4dc     14 26 06 F1 | 	add	local01, #20
2d4e0     13 2D 62 FC | 	wrlong	local04, local01
2d4e4     04 26 06 F1 | 	add	local01, #4
2d4e8     13 2F 0A FB | 	rdlong	local05, local01 wz
2d4ec     18 26 86 F1 | 	sub	local01, #24
2d4f0     02 FA 05 A6 |  if_e	mov	result1, #2
2d4f4     30 00 90 AD |  if_e	jmp	#LR__4486
2d4f8     14 31 02 F6 | 	mov	local06, local02
2d4fc     09 30 46 F0 | 	shr	local06, #9
2d500     18 26 06 F1 | 	add	local01, #24
2d504     13 2F 02 FB | 	rdlong	local05, local01
2d508     18 2F 02 F1 | 	add	local05, local06
2d50c     13 2F 62 FC | 	wrlong	local05, local01
2d510     34 2A 06 F1 | 	add	local03, #52
2d514     FF 29 06 F5 | 	and	local02, #511
2d518     14 2B 02 F1 | 	add	local03, local02
2d51c     04 26 06 F1 | 	add	local01, #4
2d520     13 2B 62 FC | 	wrlong	local03, local01
2d524                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d524                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d524                 | ' 
2d524                 | ' 	return FR_OK;
2d524     00 FA 05 F6 | 	mov	result1, #0
2d528                 | LR__4486
2d528     A7 F0 03 F6 | 	mov	ptra, fp
2d52c     B2 00 A0 FD | 	call	#popregs_
2d530                 | _fatfs_cc_dir_sdi_ret
2d530     2D 00 64 FD | 	ret
2d534                 | 
2d534                 | _fatfs_cc_dir_next
2d534     05 4A 05 F6 | 	mov	COUNT_, #5
2d538     A8 00 A0 FD | 	call	#pushregs_
2d53c     09 27 02 F6 | 	mov	local01, arg01
2d540     0A 29 02 F6 | 	mov	local02, arg02
2d544     13 2B 02 FB | 	rdlong	local03, local01
2d548     10 26 06 F1 | 	add	local01, #16
2d54c     13 2D 02 FB | 	rdlong	local04, local01
2d550     10 26 86 F1 | 	sub	local01, #16
2d554     20 2C 06 F1 | 	add	local04, #32
2d558     00 10 00 FF 
2d55c     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2d560     18 26 06 31 |  if_ae	add	local01, #24
2d564     13 01 68 3C |  if_ae	wrlong	#0, local01
2d568     18 26 86 31 |  if_ae	sub	local01, #24
2d56c     18 26 06 F1 | 	add	local01, #24
2d570     13 15 0A FB | 	rdlong	arg02, local01 wz
2d574     18 26 86 F1 | 	sub	local01, #24
2d578     04 FA 05 A6 |  if_e	mov	result1, #4
2d57c     64 01 90 AD |  if_e	jmp	#LR__4495
2d580     FF 2D CE F7 | 	test	local04, #511 wz
2d584     3C 01 90 5D |  if_ne	jmp	#LR__4494
2d588     18 26 06 F1 | 	add	local01, #24
2d58c     13 15 02 FB | 	rdlong	arg02, local01
2d590     01 14 06 F1 | 	add	arg02, #1
2d594     13 15 62 FC | 	wrlong	arg02, local01
2d598     04 26 86 F1 | 	sub	local01, #4
2d59c     13 15 0A FB | 	rdlong	arg02, local01 wz
2d5a0     14 26 86 F1 | 	sub	local01, #20
2d5a4     2C 00 90 5D |  if_ne	jmp	#LR__4490
2d5a8     16 15 02 F6 | 	mov	arg02, local04
2d5ac     05 14 46 F0 | 	shr	arg02, #5
2d5b0     08 2A 06 F1 | 	add	local03, #8
2d5b4     15 29 E2 FA | 	rdword	local02, local03
2d5b8     08 2A 86 F1 | 	sub	local03, #8
2d5bc     14 15 12 F2 | 	cmp	arg02, local02 wc
2d5c0     18 26 06 31 |  if_ae	add	local01, #24
2d5c4     13 01 68 3C |  if_ae	wrlong	#0, local01
2d5c8                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d5c8     04 FA 05 36 |  if_ae	mov	result1, #4
2d5cc     14 01 90 3D |  if_ae	jmp	#LR__4495
2d5d0     F0 00 90 FD | 	jmp	#LR__4493
2d5d4                 | LR__4490
2d5d4     16 13 02 F6 | 	mov	arg01, local04
2d5d8     09 12 46 F0 | 	shr	arg01, #9
2d5dc     0A 2A 06 F1 | 	add	local03, #10
2d5e0     15 15 E2 FA | 	rdword	arg02, local03
2d5e4     0A 2A 86 F1 | 	sub	local03, #10
2d5e8     01 14 86 F1 | 	sub	arg02, #1
2d5ec     0A 13 CA F7 | 	test	arg01, arg02 wz
2d5f0     D0 00 90 5D |  if_ne	jmp	#LR__4492
2d5f4     13 13 02 F6 | 	mov	arg01, local01
2d5f8     14 26 06 F1 | 	add	local01, #20
2d5fc     13 15 02 FB | 	rdlong	arg02, local01
2d600     14 26 86 F1 | 	sub	local01, #20
2d604     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d608     FD 2E 02 F6 | 	mov	local05, result1
2d60c     02 2E 16 F2 | 	cmp	local05, #2 wc
2d610     02 FA 05 C6 |  if_b	mov	result1, #2
2d614     CC 00 90 CD |  if_b	jmp	#LR__4495
2d618     FF FF 7F FF 
2d61c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2d620     01 FA 05 A6 |  if_e	mov	result1, #1
2d624     BC 00 90 AD |  if_e	jmp	#LR__4495
2d628     18 2A 06 F1 | 	add	local03, #24
2d62c     15 15 02 FB | 	rdlong	arg02, local03
2d630     18 2A 86 F1 | 	sub	local03, #24
2d634     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2d638     68 00 90 CD |  if_b	jmp	#LR__4491
2d63c     00 28 0E F2 | 	cmp	local02, #0 wz
2d640     18 26 06 A1 |  if_e	add	local01, #24
2d644     13 01 68 AC |  if_e	wrlong	#0, local01
2d648                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d648     04 FA 05 A6 |  if_e	mov	result1, #4
2d64c     94 00 90 AD |  if_e	jmp	#LR__4495
2d650     13 13 02 F6 | 	mov	arg01, local01
2d654     14 26 06 F1 | 	add	local01, #20
2d658     13 15 02 FB | 	rdlong	arg02, local01
2d65c     14 26 86 F1 | 	sub	local01, #20
2d660     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d664     FD 2E 0A F6 | 	mov	local05, result1 wz
2d668     07 FA 05 A6 |  if_e	mov	result1, #7
2d66c     74 00 90 AD |  if_e	jmp	#LR__4495
2d670     01 2E 0E F2 | 	cmp	local05, #1 wz
2d674     02 FA 05 A6 |  if_e	mov	result1, #2
2d678     68 00 90 AD |  if_e	jmp	#LR__4495
2d67c     FF FF 7F FF 
2d680     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2d684     01 FA 05 A6 |  if_e	mov	result1, #1
2d688     58 00 90 AD |  if_e	jmp	#LR__4495
2d68c     17 15 02 F6 | 	mov	arg02, local05
2d690     15 13 02 F6 | 	mov	arg01, local03
2d694     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d698     00 FA 0D F2 | 	cmp	result1, #0 wz
2d69c     01 FA 05 56 |  if_ne	mov	result1, #1
2d6a0     40 00 90 5D |  if_ne	jmp	#LR__4495
2d6a4                 | LR__4491
2d6a4     14 26 06 F1 | 	add	local01, #20
2d6a8     13 2F 62 FC | 	wrlong	local05, local01
2d6ac     15 13 02 F6 | 	mov	arg01, local03
2d6b0     17 15 02 F6 | 	mov	arg02, local05
2d6b4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d6b8     04 26 06 F1 | 	add	local01, #4
2d6bc     13 FB 61 FC | 	wrlong	result1, local01
2d6c0     18 26 86 F1 | 	sub	local01, #24
2d6c4                 | LR__4492
2d6c4                 | LR__4493
2d6c4                 | LR__4494
2d6c4     10 26 06 F1 | 	add	local01, #16
2d6c8     13 2D 62 FC | 	wrlong	local04, local01
2d6cc     34 2A 06 F1 | 	add	local03, #52
2d6d0     FF 2D 06 F5 | 	and	local04, #511
2d6d4     16 2B 02 F1 | 	add	local03, local04
2d6d8     0C 26 06 F1 | 	add	local01, #12
2d6dc     13 2B 62 FC | 	wrlong	local03, local01
2d6e0                 | ' #line 1771 "ff.c"
2d6e0                 | ' 				}
2d6e0                 | ' 				dp->clust = clst;
2d6e0                 | ' 				dp->sect = clst2sect(fs, clst);
2d6e0                 | ' 			}
2d6e0                 | ' 		}
2d6e0                 | ' 	}
2d6e0                 | ' 	dp->dptr = ofs;
2d6e0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d6e0                 | ' 
2d6e0                 | ' 	return FR_OK;
2d6e0     00 FA 05 F6 | 	mov	result1, #0
2d6e4                 | LR__4495
2d6e4     A7 F0 03 F6 | 	mov	ptra, fp
2d6e8     B2 00 A0 FD | 	call	#popregs_
2d6ec                 | _fatfs_cc_dir_next_ret
2d6ec     2D 00 64 FD | 	ret
2d6f0                 | 
2d6f0                 | _fatfs_cc_dir_alloc
2d6f0     08 4A 05 F6 | 	mov	COUNT_, #8
2d6f4     A8 00 A0 FD | 	call	#pushregs_
2d6f8     09 27 02 F6 | 	mov	local01, arg01
2d6fc     0A 29 02 F6 | 	mov	local02, arg02
2d700     13 2B 02 FB | 	rdlong	local03, local01
2d704     13 13 02 F6 | 	mov	arg01, local01
2d708     00 14 06 F6 | 	mov	arg02, #0
2d70c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d710     FD 2C 0A F6 | 	mov	local04, result1 wz
2d714     70 00 90 5D |  if_ne	jmp	#LR__4504
2d718     00 2E 06 F6 | 	mov	local05, #0
2d71c                 | ' 		n = 0;
2d71c                 | ' 		do {
2d71c                 | LR__4500
2d71c     18 26 06 F1 | 	add	local01, #24
2d720     13 15 02 FB | 	rdlong	arg02, local01
2d724     18 26 86 F1 | 	sub	local01, #24
2d728     15 13 02 F6 | 	mov	arg01, local03
2d72c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d730     FD 2C 0A F6 | 	mov	local04, result1 wz
2d734     50 00 90 5D |  if_ne	jmp	#LR__4503
2d738     1C 26 06 F1 | 	add	local01, #28
2d73c     13 31 02 FB | 	rdlong	local06, local01
2d740     1C 26 86 F1 | 	sub	local01, #28
2d744     18 31 C2 FA | 	rdbyte	local06, local06
2d748     E5 30 0E F2 | 	cmp	local06, #229 wz
2d74c     1C 26 06 51 |  if_ne	add	local01, #28
2d750     13 33 02 5B |  if_ne	rdlong	local07, local01
2d754     1C 26 86 51 |  if_ne	sub	local01, #28
2d758     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d75c     10 00 90 5D |  if_ne	jmp	#LR__4501
2d760     01 2E 06 F1 | 	add	local05, #1
2d764     14 2F 0A F2 | 	cmp	local05, local02 wz
2d768     1C 00 90 AD |  if_e	jmp	#LR__4503
2d76c     04 00 90 FD | 	jmp	#LR__4502
2d770                 | LR__4501
2d770     00 2E 06 F6 | 	mov	local05, #0
2d774                 | LR__4502
2d774     13 13 02 F6 | 	mov	arg01, local01
2d778     01 14 06 F6 | 	mov	arg02, #1
2d77c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d780     FD 2C 0A F6 | 	mov	local04, result1 wz
2d784     94 FF 9F AD |  if_e	jmp	#LR__4500
2d788                 | LR__4503
2d788                 | LR__4504
2d788     04 2C 0E F2 | 	cmp	local04, #4 wz
2d78c     07 2C 06 A6 |  if_e	mov	local04, #7
2d790                 | ' 	return res;
2d790     16 FB 01 F6 | 	mov	result1, local04
2d794     A7 F0 03 F6 | 	mov	ptra, fp
2d798     B2 00 A0 FD | 	call	#popregs_
2d79c                 | _fatfs_cc_dir_alloc_ret
2d79c     2D 00 64 FD | 	ret
2d7a0                 | 
2d7a0                 | _fatfs_cc_ld_clust
2d7a0     09 01 02 F6 | 	mov	_var01, arg01
2d7a4     0A 13 02 F6 | 	mov	arg01, arg02
2d7a8     1A 12 06 F1 | 	add	arg01, #26
2d7ac                 | ' {
2d7ac                 | ' 
2d7ac                 | ' 	return *((WORD*)ptr);
2d7ac     09 FB E1 FA | 	rdword	result1, arg01
2d7b0     FD 12 32 F9 | 	getword	arg01, result1, #0
2d7b4     00 01 C2 FA | 	rdbyte	_var01, _var01
2d7b8     03 00 0E F2 | 	cmp	_var01, #3 wz
2d7bc     14 14 06 A1 |  if_e	add	arg02, #20
2d7c0                 | ' {
2d7c0                 | ' 
2d7c0                 | ' 	return *((WORD*)ptr);
2d7c0     0A FB E1 AA |  if_e	rdword	result1, arg02
2d7c4     10 FA 65 A0 |  if_e	shl	result1, #16
2d7c8     FD 12 42 A5 |  if_e	or	arg01, result1
2d7cc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d7cc                 | ' 	}
2d7cc                 | ' 
2d7cc                 | ' 	return cl;
2d7cc     09 FB 01 F6 | 	mov	result1, arg01
2d7d0                 | _fatfs_cc_ld_clust_ret
2d7d0     2D 00 64 FD | 	ret
2d7d4                 | 
2d7d4                 | _fatfs_cc_st_clust
2d7d4     09 01 02 F6 | 	mov	_var01, arg01
2d7d8     0A 13 02 F6 | 	mov	arg01, arg02
2d7dc     1A 12 06 F1 | 	add	arg01, #26
2d7e0     09 17 52 FC | 	wrword	arg03, arg01
2d7e4     00 01 C2 FA | 	rdbyte	_var01, _var01
2d7e8     03 00 0E F2 | 	cmp	_var01, #3 wz
2d7ec     14 14 06 A1 |  if_e	add	arg02, #20
2d7f0     10 16 46 A0 |  if_e	shr	arg03, #16
2d7f4     0A 17 52 AC |  if_e	wrword	arg03, arg02
2d7f8                 | _fatfs_cc_st_clust_ret
2d7f8     2D 00 64 FD | 	ret
2d7fc                 | 
2d7fc                 | _fatfs_cc_cmp_lfn
2d7fc     07 4A 05 F6 | 	mov	COUNT_, #7
2d800     A8 00 A0 FD | 	call	#pushregs_
2d804     09 27 02 F6 | 	mov	local01, arg01
2d808     0A 13 02 F6 | 	mov	arg01, arg02
2d80c     1A 12 06 F1 | 	add	arg01, #26
2d810                 | ' {
2d810                 | ' 
2d810                 | ' 	return *((WORD*)ptr);
2d810     09 FB E9 FA | 	rdword	result1, arg01 wz
2d814     00 FA 05 56 |  if_ne	mov	result1, #0
2d818     E0 00 90 5D |  if_ne	jmp	#LR__4516
2d81c     0A 29 C2 FA | 	rdbyte	local02, arg02
2d820     3F 28 06 F5 | 	and	local02, #63
2d824     01 28 86 F1 | 	sub	local02, #1
2d828     0D 28 06 FD | 	qmul	local02, #13
2d82c                 | ' 
2d82c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d82c                 | ' 
2d82c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d82c     01 2A 06 F6 | 	mov	local03, #1
2d830     00 2C 06 F6 | 	mov	local04, #0
2d834     18 2E 62 FD | 	getqx	local05
2d838                 | LR__4510
2d838     0D 2C 16 F2 | 	cmp	local04, #13 wc
2d83c     9C 00 90 3D |  if_ae	jmp	#LR__4515
2d840     0A 13 02 F6 | 	mov	arg01, arg02
2d844     16 29 02 F6 | 	mov	local02, local04
2d848     01 00 00 FF 
2d84c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2d850     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2d854     14 29 C2 FA | 	rdbyte	local02, local02
2d858     01 28 06 FA | 	mul	local02, #1
2d85c     14 13 02 F1 | 	add	arg01, local02
2d860     01 00 00 FF 
2d864     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2d868                 | ' {
2d868                 | ' 
2d868                 | ' 	return *((WORD*)ptr);
2d868     09 FB E1 FA | 	rdword	result1, arg01
2d86c     FD 30 02 F6 | 	mov	local06, result1
2d870     15 29 02 F6 | 	mov	local02, local03
2d874     0F 28 4E F7 | 	zerox	local02, #15 wz
2d878     44 00 90 AD |  if_e	jmp	#LR__4513
2d87c     00 2F 16 F2 | 	cmp	local05, #256 wc
2d880     2C 00 90 3D |  if_ae	jmp	#LR__4511
2d884     18 13 32 F9 | 	getword	arg01, local06, #0
2d888     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d88c     FD 28 02 F6 | 	mov	local02, result1
2d890     17 2B 02 F6 | 	mov	local03, local05
2d894     01 2A 66 F0 | 	shl	local03, #1
2d898     13 2B 02 F1 | 	add	local03, local01
2d89c     15 13 E2 FA | 	rdword	arg01, local03
2d8a0     01 2E 06 F1 | 	add	local05, #1
2d8a4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d8a8     FD 28 0A F2 | 	cmp	local02, result1 wz
2d8ac     08 00 90 AD |  if_e	jmp	#LR__4512
2d8b0                 | LR__4511
2d8b0                 | ' 				return 0;
2d8b0     00 FA 05 F6 | 	mov	result1, #0
2d8b4     44 00 90 FD | 	jmp	#LR__4516
2d8b8                 | LR__4512
2d8b8     18 2B 02 F6 | 	mov	local03, local06
2d8bc     14 00 90 FD | 	jmp	#LR__4514
2d8c0                 | LR__4513
2d8c0     18 31 32 F9 | 	getword	local06, local06, #0
2d8c4     7F 00 00 FF 
2d8c8     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2d8cc     00 FA 05 56 |  if_ne	mov	result1, #0
2d8d0     28 00 90 5D |  if_ne	jmp	#LR__4516
2d8d4                 | LR__4514
2d8d4     01 2C 06 F1 | 	add	local04, #1
2d8d8     5C FF 9F FD | 	jmp	#LR__4510
2d8dc                 | LR__4515
2d8dc     0A 29 C2 FA | 	rdbyte	local02, arg02
2d8e0     40 28 CE F7 | 	test	local02, #64 wz
2d8e4     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2d8e8     01 2E 66 50 |  if_ne	shl	local05, #1
2d8ec     13 2F 02 51 |  if_ne	add	local05, local01
2d8f0     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2d8f4     00 FA 05 56 |  if_ne	mov	result1, #0
2d8f8                 | ' 
2d8f8                 | ' 	return 1;
2d8f8     01 FA 05 A6 |  if_e	mov	result1, #1
2d8fc                 | LR__4516
2d8fc     A7 F0 03 F6 | 	mov	ptra, fp
2d900     B2 00 A0 FD | 	call	#popregs_
2d904                 | _fatfs_cc_cmp_lfn_ret
2d904     2D 00 64 FD | 	ret
2d908                 | 
2d908                 | _fatfs_cc_pick_lfn
2d908     09 01 02 F6 | 	mov	_var01, arg01
2d90c     0A 13 02 F6 | 	mov	arg01, arg02
2d910     1A 12 06 F1 | 	add	arg01, #26
2d914                 | ' {
2d914                 | ' 
2d914                 | ' 	return *((WORD*)ptr);
2d914     09 FB E9 FA | 	rdword	result1, arg01 wz
2d918     00 FA 05 56 |  if_ne	mov	result1, #0
2d91c     D4 00 90 5D |  if_ne	jmp	#LR__4525
2d920     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d924     40 02 26 F5 | 	andn	_var02, #64
2d928     01 02 86 F1 | 	sub	_var02, #1
2d92c     0D 02 06 FD | 	qmul	_var02, #13
2d930                 | ' 
2d930                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d930                 | ' 
2d930                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d930     01 04 06 F6 | 	mov	_var03, #1
2d934     00 06 06 F6 | 	mov	_var04, #0
2d938     18 08 62 FD | 	getqx	_var05
2d93c                 | LR__4520
2d93c     0D 06 16 F2 | 	cmp	_var04, #13 wc
2d940     80 00 90 3D |  if_ae	jmp	#LR__4523
2d944     0A 13 02 F6 | 	mov	arg01, arg02
2d948     03 03 02 F6 | 	mov	_var02, _var04
2d94c     01 00 00 FF 
2d950     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2d954     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2d958     01 03 C2 FA | 	rdbyte	_var02, _var02
2d95c     01 02 06 FA | 	mul	_var02, #1
2d960     01 13 02 F1 | 	add	arg01, _var02
2d964     01 00 00 FF 
2d968     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2d96c                 | ' {
2d96c                 | ' 
2d96c                 | ' 	return *((WORD*)ptr);
2d96c     09 FB E1 FA | 	rdword	result1, arg01
2d970     FD 0A 02 F6 | 	mov	_var06, result1
2d974     02 03 02 F6 | 	mov	_var02, _var03
2d978     0F 02 4E F7 | 	zerox	_var02, #15 wz
2d97c     28 00 90 AD |  if_e	jmp	#LR__4521
2d980     00 09 16 F2 | 	cmp	_var05, #256 wc
2d984     00 FA 05 36 |  if_ae	mov	result1, #0
2d988     68 00 90 3D |  if_ae	jmp	#LR__4525
2d98c     04 03 02 F6 | 	mov	_var02, _var05
2d990     01 02 66 F0 | 	shl	_var02, #1
2d994     00 03 02 F1 | 	add	_var02, _var01
2d998     05 05 02 F6 | 	mov	_var03, _var06
2d99c     01 05 52 FC | 	wrword	_var03, _var02
2d9a0     01 08 06 F1 | 	add	_var05, #1
2d9a4     14 00 90 FD | 	jmp	#LR__4522
2d9a8                 | LR__4521
2d9a8     05 0B 32 F9 | 	getword	_var06, _var06, #0
2d9ac     7F 00 00 FF 
2d9b0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2d9b4     00 FA 05 56 |  if_ne	mov	result1, #0
2d9b8     38 00 90 5D |  if_ne	jmp	#LR__4525
2d9bc                 | LR__4522
2d9bc     01 06 06 F1 | 	add	_var04, #1
2d9c0     78 FF 9F FD | 	jmp	#LR__4520
2d9c4                 | LR__4523
2d9c4     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d9c8     40 02 CE F7 | 	test	_var02, #64 wz
2d9cc     02 0D 02 56 |  if_ne	mov	_var07, _var03
2d9d0     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2d9d4     18 00 90 AD |  if_e	jmp	#LR__4524
2d9d8     00 09 16 F2 | 	cmp	_var05, #256 wc
2d9dc     00 FA 05 36 |  if_ae	mov	result1, #0
2d9e0     10 00 90 3D |  if_ae	jmp	#LR__4525
2d9e4     01 08 66 F0 | 	shl	_var05, #1
2d9e8     00 09 02 F1 | 	add	_var05, _var01
2d9ec     04 01 58 FC | 	wrword	#0, _var05
2d9f0                 | LR__4524
2d9f0                 | ' 		lfnbuf[i] = 0;
2d9f0                 | ' 	}
2d9f0                 | ' 
2d9f0                 | ' 	return 1;
2d9f0     01 FA 05 F6 | 	mov	result1, #1
2d9f4                 | LR__4525
2d9f4                 | _fatfs_cc_pick_lfn_ret
2d9f4     2D 00 64 FD | 	ret
2d9f8                 | 
2d9f8                 | _fatfs_cc_put_lfn
2d9f8     0D 14 06 F1 | 	add	arg02, #13
2d9fc     0A 19 42 FC | 	wrbyte	arg04, arg02
2da00     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2da04     01 18 86 F1 | 	sub	arg04, #1
2da08     0D 18 06 FD | 	qmul	arg04, #13
2da0c     09 01 02 F6 | 	mov	_var01, arg01
2da10     02 14 86 F1 | 	sub	arg02, #2
2da14     0A 1F 48 FC | 	wrbyte	#15, arg02
2da18     01 14 06 F1 | 	add	arg02, #1
2da1c     0A 01 48 FC | 	wrbyte	#0, arg02
2da20     0C 14 86 F1 | 	sub	arg02, #12
2da24     0A 13 02 F6 | 	mov	arg01, arg02
2da28     1A 12 06 F1 | 	add	arg01, #26
2da2c     09 01 58 FC | 	wrword	#0, arg01
2da30     00 02 06 F6 | 	mov	_var02, #0
2da34     00 04 06 F6 | 	mov	_var03, #0
2da38                 | ' 	BYTE* dir,
2da38                 | ' 	BYTE ord,
2da38                 | ' 	BYTE sum
2da38                 | ' )
2da38                 | ' {
2da38                 | ' 	UINT i, s;
2da38                 | ' 	WCHAR wc;
2da38                 | ' 
2da38                 | ' 
2da38                 | ' 	dir[ 13 ] = sum;
2da38                 | ' 	dir[ 11 ] =  0x0F ;
2da38                 | ' 	dir[ 12 ] = 0;
2da38                 | ' 	st_word(dir +  26 , 0);
2da38                 | ' 
2da38                 | ' 	i = (ord - 1) * 13;
2da38                 | ' 	s = wc = 0;
2da38                 | ' 	do {
2da38     01 00 00 FF 
2da3c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2da40     18 06 62 FD | 	getqx	_var04
2da44     97 2A 48 FB | 	callpa	#(@LR__4531-@LR__4530)>>2,fcache_load_ptr_
2da48                 | LR__4530
2da48     01 19 32 F9 | 	getword	arg04, _var02, #0
2da4c     7F 00 00 FF 
2da50     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2da54     03 13 02 56 |  if_ne	mov	arg01, _var04
2da58     01 06 06 51 |  if_ne	add	_var04, #1
2da5c     01 12 66 50 |  if_ne	shl	arg01, #1
2da60     00 13 02 51 |  if_ne	add	arg01, _var01
2da64     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2da68     0A 13 02 F6 | 	mov	arg01, arg02
2da6c     02 19 02 F6 | 	mov	arg04, _var03
2da70     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2da74     0C 19 C2 FA | 	rdbyte	arg04, arg04
2da78     01 18 06 FA | 	mul	arg04, #1
2da7c     0C 13 02 F1 | 	add	arg01, arg04
2da80     09 03 52 FC | 	wrword	_var02, arg01
2da84     01 19 02 F6 | 	mov	arg04, _var02
2da88     0F 18 4E F7 | 	zerox	arg04, #15 wz
2da8c     0F 02 CE A9 |  if_e	bmask	_var02, #15
2da90     01 04 06 F1 | 	add	_var03, #1
2da94     0D 04 16 F2 | 	cmp	_var03, #13 wc
2da98     AC FF 9F CD |  if_b	jmp	#LR__4530
2da9c                 | LR__4531
2da9c     01 00 00 FF 
2daa0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2daa4     01 03 32 F9 | 	getword	_var02, _var02, #0
2daa8     7F 00 00 FF 
2daac     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2dab0     01 06 66 50 |  if_ne	shl	_var04, #1
2dab4     00 07 02 51 |  if_ne	add	_var04, _var01
2dab8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2dabc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2dac0     40 16 46 A5 |  if_e	or	arg03, #64
2dac4     0A 17 42 FC | 	wrbyte	arg03, arg02
2dac8                 | _fatfs_cc_put_lfn_ret
2dac8     2D 00 64 FD | 	ret
2dacc                 | 
2dacc                 | _fatfs_cc_gen_numname
2dacc     08 4A 05 F6 | 	mov	COUNT_, #8
2dad0     A8 00 A0 FD | 	call	#pushregs_
2dad4     2C F0 07 F1 | 	add	ptra, #44
2dad8     09 27 02 F6 | 	mov	local01, arg01
2dadc     0A 29 02 F6 | 	mov	local02, arg02
2dae0     0B 2B 02 F6 | 	mov	local03, arg03
2dae4     0C 2D 02 F6 | 	mov	local04, arg04
2dae8     13 13 02 F6 | 	mov	arg01, local01
2daec     14 15 02 F6 | 	mov	arg02, local02
2daf0     0B 16 06 F6 | 	mov	arg03, #11
2daf4     9C 72 BF FD | 	call	#__system____builtin_memmove
2daf8     06 2C 16 F2 | 	cmp	local04, #6 wc
2dafc     48 00 90 CD |  if_b	jmp	#LR__4545
2db00     16 2F 02 F6 | 	mov	local05, local04
2db04     97 1E 48 FB | 	callpa	#(@LR__4543-@LR__4540)>>2,fcache_load_ptr_
2db08                 | ' 		sreg = seq;
2db08                 | ' 		while (*lfn) {
2db08                 | LR__4540
2db08     15 31 EA FA | 	rdword	local06, local03 wz
2db0c     34 00 90 AD |  if_e	jmp	#LR__4544
2db10     15 33 E2 FA | 	rdword	local07, local03
2db14                 | ' 			wc = *lfn++;
2db14                 | ' 			for (i = 0; i < 16; i++) {
2db14     02 2A 06 F1 | 	add	local03, #2
2db18     10 12 DC FC | 	rep	@LR__4542, #16
2db1c                 | LR__4541
2db1c     01 2E 66 F0 | 	shl	local05, #1
2db20     19 31 32 F9 | 	getword	local06, local07, #0
2db24     01 30 06 F5 | 	and	local06, #1
2db28     18 2F 02 F1 | 	add	local05, local06
2db2c     19 33 32 F9 | 	getword	local07, local07, #0
2db30     01 32 46 F0 | 	shr	local07, #1
2db34     10 2E 2E F4 | 	testbn	local05, #16 wz
2db38     88 00 00 5F 
2db3c     21 2E 66 55 |  if_ne	xor	local05, ##69665
2db40                 | LR__4542
2db40     C4 FF 9F FD | 	jmp	#LR__4540
2db44                 | LR__4543
2db44                 | LR__4544
2db44     17 2D 02 F6 | 	mov	local04, local05
2db48                 | LR__4545
2db48     07 32 06 F6 | 	mov	local07, #7
2db4c                 | ' 			}
2db4c                 | ' 		}
2db4c                 | ' 		seq = (UINT)sreg;
2db4c                 | ' 	}
2db4c                 | ' 
2db4c                 | ' 
2db4c                 | ' 	i = 7;
2db4c                 | ' 	do {
2db4c     10 4E 05 F1 | 	add	fp, #16
2db50     97 1A 48 FB | 	callpa	#(@LR__4547-@LR__4546)>>2,fcache_load_ptr_
2db54                 | LR__4546
2db54     16 2F 42 F8 | 	getnib	local05, local04, #0
2db58     30 2E 06 F1 | 	add	local05, #48
2db5c     04 2C 46 F0 | 	shr	local04, #4
2db60     17 31 E2 F8 | 	getbyte	local06, local05, #0
2db64     3A 30 16 F2 | 	cmp	local06, #58 wc
2db68     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2db6c     07 2E 06 31 |  if_ae	add	local05, #7
2db70     19 31 02 F6 | 	mov	local06, local07
2db74     01 32 8E F1 | 	sub	local07, #1 wz
2db78     A7 30 02 F1 | 	add	local06, fp
2db7c     18 2F 42 FC | 	wrbyte	local05, local06
2db80     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2db84     CC FF 9F 5D |  if_ne	jmp	#LR__4546
2db88                 | LR__4547
2db88     19 31 02 F6 | 	mov	local06, local07
2db8c     A7 30 02 F1 | 	add	local06, fp
2db90     18 FD 48 FC | 	wrbyte	#126, local06
2db94                 | ' 	ns[i] = '~';
2db94                 | ' 
2db94                 | ' 
2db94                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2db94     00 2E 06 F6 | 	mov	local05, #0
2db98     10 4E 85 F1 | 	sub	fp, #16
2db9c     97 2A 48 FB | 	callpa	#(@LR__4550-@LR__4548)>>2,fcache_load_ptr_
2dba0                 | LR__4548
2dba0     19 2F 12 F2 | 	cmp	local05, local07 wc
2dba4     4C 00 90 3D |  if_ae	jmp	#LR__4551
2dba8     17 31 02 F6 | 	mov	local06, local05
2dbac     13 31 02 F1 | 	add	local06, local01
2dbb0     18 31 C2 FA | 	rdbyte	local06, local06
2dbb4     20 30 0E F2 | 	cmp	local06, #32 wz
2dbb8     38 00 90 AD |  if_e	jmp	#LR__4551
2dbbc     17 13 02 F6 | 	mov	arg01, local05
2dbc0     13 13 02 F1 | 	add	arg01, local01
2dbc4     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2dbc8     00 FA 05 56 |  if_ne	mov	result1, #0
2dbcc                 | ' 
2dbcc                 | ' 	return 0;
2dbcc     00 FA 05 A6 |  if_e	mov	result1, #0
2dbd0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbd4     14 00 90 AD |  if_e	jmp	#LR__4549
2dbd8     19 31 02 F6 | 	mov	local06, local07
2dbdc     01 30 86 F1 | 	sub	local06, #1
2dbe0     18 2F 0A F2 | 	cmp	local05, local06 wz
2dbe4     0C 00 90 AD |  if_e	jmp	#LR__4551
2dbe8     01 2E 06 F1 | 	add	local05, #1
2dbec                 | LR__4549
2dbec     01 2E 06 F1 | 	add	local05, #1
2dbf0     AC FF 9F FD | 	jmp	#LR__4548
2dbf4                 | LR__4550
2dbf4                 | LR__4551
2dbf4     97 20 48 FB | 	callpa	#(@LR__4555-@LR__4552)>>2,fcache_load_ptr_
2dbf8                 | ' 			j++;
2dbf8                 | ' 		}
2dbf8                 | ' 	}
2dbf8                 | ' 	do {
2dbf8                 | LR__4552
2dbf8     17 31 02 F6 | 	mov	local06, local05
2dbfc     13 31 02 F1 | 	add	local06, local01
2dc00     08 32 16 F2 | 	cmp	local07, #8 wc
2dc04     01 2E 06 F1 | 	add	local05, #1
2dc08     1C 00 90 3D |  if_ae	jmp	#LR__4553
2dc0c     19 2D 02 F6 | 	mov	local04, local07
2dc10     10 4E 05 F1 | 	add	fp, #16
2dc14     A7 2C 02 F1 | 	add	local04, fp
2dc18     16 35 C2 FA | 	rdbyte	local08, local04
2dc1c     01 32 06 F1 | 	add	local07, #1
2dc20     10 4E 85 F1 | 	sub	fp, #16
2dc24     04 00 90 FD | 	jmp	#LR__4554
2dc28                 | LR__4553
2dc28     20 34 06 F6 | 	mov	local08, #32
2dc2c                 | LR__4554
2dc2c     18 35 42 FC | 	wrbyte	local08, local06
2dc30     08 2E 16 F2 | 	cmp	local05, #8 wc
2dc34     C0 FF 9F CD |  if_b	jmp	#LR__4552
2dc38                 | LR__4555
2dc38     A7 F0 03 F6 | 	mov	ptra, fp
2dc3c     B2 00 A0 FD | 	call	#popregs_
2dc40                 | _fatfs_cc_gen_numname_ret
2dc40     2D 00 64 FD | 	ret
2dc44                 | 
2dc44                 | _fatfs_cc_sum_sfn
2dc44     00 00 06 F6 | 	mov	_var01, #0
2dc48                 | ' )
2dc48                 | ' {
2dc48                 | ' 	BYTE sum = 0;
2dc48                 | ' 	UINT n = 11;
2dc48                 | ' 
2dc48                 | ' 	do {
2dc48     97 12 48 FB | 	callpa	#(@LR__4562-@LR__4560)>>2,fcache_load_ptr_
2dc4c                 | LR__4560
2dc4c     0B 10 DC FC | 	rep	@LR__4563, #11
2dc50                 | LR__4561
2dc50     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2dc54     01 FA 45 F0 | 	shr	result1, #1
2dc58     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2dc5c     07 00 66 F0 | 	shl	_var01, #7
2dc60     00 FB 01 F1 | 	add	result1, _var01
2dc64     09 01 C2 FA | 	rdbyte	_var01, arg01
2dc68     FD 00 02 F1 | 	add	_var01, result1
2dc6c     01 12 06 F1 | 	add	arg01, #1
2dc70                 | LR__4562
2dc70                 | LR__4563
2dc70                 | ' 	return sum;
2dc70     00 FB 01 F6 | 	mov	result1, _var01
2dc74                 | _fatfs_cc_sum_sfn_ret
2dc74     2D 00 64 FD | 	ret
2dc78                 | 
2dc78                 | _fatfs_cc_dir_read
2dc78     0C 4A 05 F6 | 	mov	COUNT_, #12
2dc7c     A8 00 A0 FD | 	call	#pushregs_
2dc80     09 27 02 F6 | 	mov	local01, arg01
2dc84     0A 29 02 F6 | 	mov	local02, arg02
2dc88     04 2A 06 F6 | 	mov	local03, #4
2dc8c     13 2D 02 FB | 	rdlong	local04, local01
2dc90     FF 2E 06 F6 | 	mov	local05, #255
2dc94     FF 30 06 F6 | 	mov	local06, #255
2dc98                 | ' )
2dc98                 | ' {
2dc98                 | ' 	FRESULT res = FR_NO_FILE;
2dc98                 | ' 	FATFS *fs = dp->obj.fs;
2dc98                 | ' 	BYTE attr, b;
2dc98                 | ' 
2dc98                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2dc98                 | ' 
2dc98                 | ' 
2dc98                 | ' 	while (dp->sect) {
2dc98                 | LR__4570
2dc98     18 26 06 F1 | 	add	local01, #24
2dc9c     13 FB 09 FB | 	rdlong	result1, local01 wz
2dca0     18 26 86 F1 | 	sub	local01, #24
2dca4     AC 01 90 AD |  if_e	jmp	#LR__4580
2dca8     18 26 06 F1 | 	add	local01, #24
2dcac     13 15 02 FB | 	rdlong	arg02, local01
2dcb0     18 26 86 F1 | 	sub	local01, #24
2dcb4     16 13 02 F6 | 	mov	arg01, local04
2dcb8     AC ED BF FD | 	call	#_fatfs_cc_move_window
2dcbc     FD 2A 0A F6 | 	mov	local03, result1 wz
2dcc0     90 01 90 5D |  if_ne	jmp	#LR__4580
2dcc4     1C 26 06 F1 | 	add	local01, #28
2dcc8     13 FB 01 FB | 	rdlong	result1, local01
2dccc     1C 26 86 F1 | 	sub	local01, #28
2dcd0     FD 32 C2 FA | 	rdbyte	local07, result1
2dcd4     19 FB 01 F6 | 	mov	result1, local07
2dcd8     07 FA 4D F7 | 	zerox	result1, #7 wz
2dcdc     04 2A 06 A6 |  if_e	mov	local03, #4
2dce0                 | ' 			res = FR_NO_FILE; break;
2dce0     70 01 90 AD |  if_e	jmp	#LR__4580
2dce4     1C 26 06 F1 | 	add	local01, #28
2dce8     13 35 02 FB | 	rdlong	local08, local01
2dcec     0B 34 06 F1 | 	add	local08, #11
2dcf0     1A 37 C2 FA | 	rdbyte	local09, local08
2dcf4     3F 36 06 F5 | 	and	local09, #63
2dcf8     16 26 86 F1 | 	sub	local01, #22
2dcfc     13 37 42 FC | 	wrbyte	local09, local01
2dd00     06 26 86 F1 | 	sub	local01, #6
2dd04     19 FB E1 F8 | 	getbyte	result1, local07, #0
2dd08     E5 FA 0D F2 | 	cmp	result1, #229 wz
2dd0c     19 35 02 56 |  if_ne	mov	local08, local07
2dd10     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2dd14     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2dd18     1C 00 90 AD |  if_e	jmp	#LR__4571
2dd1c     00 38 06 F6 | 	mov	local10, #0
2dd20     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2dd24     20 34 26 F5 | 	andn	local08, #32
2dd28     08 34 0E F2 | 	cmp	local08, #8 wz
2dd2c     01 38 06 A6 |  if_e	mov	local10, #1
2dd30     14 39 0A F2 | 	cmp	local10, local02 wz
2dd34     08 00 90 AD |  if_e	jmp	#LR__4572
2dd38                 | LR__4571
2dd38     FF 2E 06 F6 | 	mov	local05, #255
2dd3c     00 01 90 FD | 	jmp	#LR__4579
2dd40                 | LR__4572
2dd40     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2dd44     0F 36 0E F2 | 	cmp	local09, #15 wz
2dd48     B4 00 90 5D |  if_ne	jmp	#LR__4576
2dd4c     19 3B E2 F8 | 	getbyte	local11, local07, #0
2dd50     40 3A CE F7 | 	test	local11, #64 wz
2dd54     30 00 90 AD |  if_e	jmp	#LR__4573
2dd58     1C 26 06 F1 | 	add	local01, #28
2dd5c     13 3B 02 FB | 	rdlong	local11, local01
2dd60     0D 3A 06 F1 | 	add	local11, #13
2dd64     1D 31 C2 FA | 	rdbyte	local06, local11
2dd68     19 33 E2 F8 | 	getbyte	local07, local07, #0
2dd6c     BF 32 06 F5 | 	and	local07, #191
2dd70     19 2F 02 F6 | 	mov	local05, local07
2dd74     0C 26 86 F1 | 	sub	local01, #12
2dd78     13 3B 02 FB | 	rdlong	local11, local01
2dd7c     1C 26 06 F1 | 	add	local01, #28
2dd80     13 3B 62 FC | 	wrlong	local11, local01
2dd84     2C 26 86 F1 | 	sub	local01, #44
2dd88                 | LR__4573
2dd88     19 35 E2 F8 | 	getbyte	local08, local07, #0
2dd8c     17 39 E2 F8 | 	getbyte	local10, local05, #0
2dd90     1C 35 0A F2 | 	cmp	local08, local10 wz
2dd94     5C 00 90 5D |  if_ne	jmp	#LR__4574
2dd98     18 39 E2 F8 | 	getbyte	local10, local06, #0
2dd9c     1C 26 06 F1 | 	add	local01, #28
2dda0     13 37 02 FB | 	rdlong	local09, local01
2dda4     1C 26 86 F1 | 	sub	local01, #28
2dda8     0D 36 06 F1 | 	add	local09, #13
2ddac     1B 35 C2 FA | 	rdbyte	local08, local09
2ddb0     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ddb4     1B 39 0A F2 | 	cmp	local10, local09 wz
2ddb8     38 00 90 5D |  if_ne	jmp	#LR__4574
2ddbc     0C 2C 06 F1 | 	add	local04, #12
2ddc0     16 13 02 FB | 	rdlong	arg01, local04
2ddc4     0C 2C 86 F1 | 	sub	local04, #12
2ddc8     1C 26 06 F1 | 	add	local01, #28
2ddcc     13 3D 02 FB | 	rdlong	local12, local01
2ddd0     1C 26 86 F1 | 	sub	local01, #28
2ddd4     1E 15 02 F6 | 	mov	arg02, local12
2ddd8     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2dddc     00 FA 4D F2 | 	cmps	result1, #0 wz
2dde0     17 3D 02 56 |  if_ne	mov	local12, local05
2dde4     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2dde8     01 3C 86 51 |  if_ne	sub	local12, #1
2ddec     1E 3B 02 56 |  if_ne	mov	local11, local12
2ddf0     04 00 90 5D |  if_ne	jmp	#LR__4575
2ddf4                 | LR__4574
2ddf4     FF 3A 06 F6 | 	mov	local11, #255
2ddf8                 | LR__4575
2ddf8     1D 2F 02 F6 | 	mov	local05, local11
2ddfc     40 00 90 FD | 	jmp	#LR__4578
2de00                 | LR__4576
2de00     17 3B 02 F6 | 	mov	local11, local05
2de04     07 3A 4E F7 | 	zerox	local11, #7 wz
2de08     20 00 90 5D |  if_ne	jmp	#LR__4577
2de0c     18 31 E2 F8 | 	getbyte	local06, local06, #0
2de10     1C 26 06 F1 | 	add	local01, #28
2de14     13 13 02 FB | 	rdlong	arg01, local01
2de18     1C 26 86 F1 | 	sub	local01, #28
2de1c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2de20     FD FA E1 F8 | 	getbyte	result1, result1, #0
2de24     FD 30 0A F2 | 	cmp	local06, result1 wz
2de28     28 00 90 AD |  if_e	jmp	#LR__4580
2de2c                 | LR__4577
2de2c     2C 26 06 F1 | 	add	local01, #44
2de30     FF FF FF FF 
2de34     13 FF 6B FC | 	wrlong	##-1, local01
2de38     2C 26 86 F1 | 	sub	local01, #44
2de3c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2de3c                 | ' 					}
2de3c                 | ' 					break;
2de3c     14 00 90 FD | 	jmp	#LR__4580
2de40                 | LR__4578
2de40                 | LR__4579
2de40     13 13 02 F6 | 	mov	arg01, local01
2de44     00 14 06 F6 | 	mov	arg02, #0
2de48     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2de4c     FD 2A 0A F6 | 	mov	local03, result1 wz
2de50     44 FE 9F AD |  if_e	jmp	#LR__4570
2de54                 | LR__4580
2de54     00 2A 0E F2 | 	cmp	local03, #0 wz
2de58     18 26 06 51 |  if_ne	add	local01, #24
2de5c     13 01 68 5C |  if_ne	wrlong	#0, local01
2de60                 | ' 	return res;
2de60     15 FB 01 F6 | 	mov	result1, local03
2de64     A7 F0 03 F6 | 	mov	ptra, fp
2de68     B2 00 A0 FD | 	call	#popregs_
2de6c                 | _fatfs_cc_dir_read_ret
2de6c     2D 00 64 FD | 	ret
2de70                 | 
2de70                 | _fatfs_cc_dir_find
2de70     0B 4A 05 F6 | 	mov	COUNT_, #11
2de74     A8 00 A0 FD | 	call	#pushregs_
2de78     09 27 02 F6 | 	mov	local01, arg01
2de7c     13 29 02 FB | 	rdlong	local02, local01
2de80     13 13 02 F6 | 	mov	arg01, local01
2de84     00 14 06 F6 | 	mov	arg02, #0
2de88     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2de8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2de90     18 02 90 5D |  if_ne	jmp	#LR__4602
2de94     FF 2A 06 F6 | 	mov	local03, #255
2de98     FF 2C 06 F6 | 	mov	local04, #255
2de9c     2C 26 06 F1 | 	add	local01, #44
2dea0     FF FF FF FF 
2dea4     13 FF 6B FC | 	wrlong	##-1, local01
2dea8     2C 26 86 F1 | 	sub	local01, #44
2deac                 | ' #line 2404 "ff.c"
2deac                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2deac                 | ' 
2deac                 | ' 	do {
2deac                 | LR__4590
2deac     18 26 06 F1 | 	add	local01, #24
2deb0     13 15 02 FB | 	rdlong	arg02, local01
2deb4     18 26 86 F1 | 	sub	local01, #24
2deb8     14 13 02 F6 | 	mov	arg01, local02
2debc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2dec0     FD 2E 0A F6 | 	mov	local05, result1 wz
2dec4     E0 01 90 5D |  if_ne	jmp	#LR__4601
2dec8     1C 26 06 F1 | 	add	local01, #28
2decc     13 17 02 FB | 	rdlong	arg03, local01
2ded0     1C 26 86 F1 | 	sub	local01, #28
2ded4     0B 31 C2 FA | 	rdbyte	local06, arg03
2ded8     18 17 02 F6 | 	mov	arg03, local06
2dedc     07 16 4E F7 | 	zerox	arg03, #7 wz
2dee0     04 2E 06 A6 |  if_e	mov	local05, #4
2dee4     C0 01 90 AD |  if_e	jmp	#LR__4601
2dee8     1C 26 06 F1 | 	add	local01, #28
2deec     13 33 02 FB | 	rdlong	local07, local01
2def0     19 17 02 F6 | 	mov	arg03, local07
2def4     0B 16 06 F1 | 	add	arg03, #11
2def8     0B 35 C2 FA | 	rdbyte	local08, arg03
2defc     3F 34 06 F5 | 	and	local08, #63
2df00     16 26 86 F1 | 	sub	local01, #22
2df04     13 35 42 FC | 	wrbyte	local08, local01
2df08     06 26 86 F1 | 	sub	local01, #6
2df0c     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2df10     E5 16 0E F2 | 	cmp	arg03, #229 wz
2df14     18 00 90 AD |  if_e	jmp	#LR__4591
2df18     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2df1c     08 16 CE F7 | 	test	arg03, #8 wz
2df20     1A 33 02 56 |  if_ne	mov	local07, local08
2df24     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2df28     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2df2c     18 00 90 AD |  if_e	jmp	#LR__4592
2df30                 | LR__4591
2df30     FF 2C 06 F6 | 	mov	local04, #255
2df34     2C 26 06 F1 | 	add	local01, #44
2df38     FF FF FF FF 
2df3c     13 FF 6B FC | 	wrlong	##-1, local01
2df40     2C 26 86 F1 | 	sub	local01, #44
2df44     4C 01 90 FD | 	jmp	#LR__4600
2df48                 | LR__4592
2df48     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2df4c     0F 34 0E F2 | 	cmp	local08, #15 wz
2df50     C8 00 90 5D |  if_ne	jmp	#LR__4596
2df54     2B 26 06 F1 | 	add	local01, #43
2df58     13 35 C2 FA | 	rdbyte	local08, local01
2df5c     2B 26 86 F1 | 	sub	local01, #43
2df60     40 34 CE F7 | 	test	local08, #64 wz
2df64     2C 01 90 5D |  if_ne	jmp	#LR__4599
2df68     18 37 E2 F8 | 	getbyte	local09, local06, #0
2df6c     40 36 CE F7 | 	test	local09, #64 wz
2df70     30 00 90 AD |  if_e	jmp	#LR__4593
2df74     1C 26 06 F1 | 	add	local01, #28
2df78     13 37 02 FB | 	rdlong	local09, local01
2df7c     0D 36 06 F1 | 	add	local09, #13
2df80     1B 2B C2 FA | 	rdbyte	local03, local09
2df84     18 31 E2 F8 | 	getbyte	local06, local06, #0
2df88     BF 30 06 F5 | 	and	local06, #191
2df8c     18 2D 02 F6 | 	mov	local04, local06
2df90     0C 26 86 F1 | 	sub	local01, #12
2df94     13 37 02 FB | 	rdlong	local09, local01
2df98     1C 26 06 F1 | 	add	local01, #28
2df9c     13 37 62 FC | 	wrlong	local09, local01
2dfa0     2C 26 86 F1 | 	sub	local01, #44
2dfa4                 | LR__4593
2dfa4     18 39 E2 F8 | 	getbyte	local10, local06, #0
2dfa8     16 33 E2 F8 | 	getbyte	local07, local04, #0
2dfac     19 39 0A F2 | 	cmp	local10, local07 wz
2dfb0     5C 00 90 5D |  if_ne	jmp	#LR__4594
2dfb4     15 35 E2 F8 | 	getbyte	local08, local03, #0
2dfb8     1C 26 06 F1 | 	add	local01, #28
2dfbc     13 33 02 FB | 	rdlong	local07, local01
2dfc0     1C 26 86 F1 | 	sub	local01, #28
2dfc4     0D 32 06 F1 | 	add	local07, #13
2dfc8     19 31 C2 FA | 	rdbyte	local06, local07
2dfcc     18 33 E2 F8 | 	getbyte	local07, local06, #0
2dfd0     19 35 0A F2 | 	cmp	local08, local07 wz
2dfd4     38 00 90 5D |  if_ne	jmp	#LR__4594
2dfd8     0C 28 06 F1 | 	add	local02, #12
2dfdc     14 13 02 FB | 	rdlong	arg01, local02
2dfe0     0C 28 86 F1 | 	sub	local02, #12
2dfe4     1C 26 06 F1 | 	add	local01, #28
2dfe8     13 3B 02 FB | 	rdlong	local11, local01
2dfec     1C 26 86 F1 | 	sub	local01, #28
2dff0     1D 15 02 F6 | 	mov	arg02, local11
2dff4     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2dff8     00 FA 4D F2 | 	cmps	result1, #0 wz
2dffc     16 3B 02 56 |  if_ne	mov	local11, local04
2e000     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2e004     01 3A 86 51 |  if_ne	sub	local11, #1
2e008     1D 37 02 56 |  if_ne	mov	local09, local11
2e00c     04 00 90 5D |  if_ne	jmp	#LR__4595
2e010                 | LR__4594
2e010     FF 36 06 F6 | 	mov	local09, #255
2e014                 | LR__4595
2e014     1B 2D 02 F6 | 	mov	local04, local09
2e018     78 00 90 FD | 	jmp	#LR__4599
2e01c                 | LR__4596
2e01c     16 37 02 F6 | 	mov	local09, local04
2e020     07 36 4E F7 | 	zerox	local09, #7 wz
2e024     20 00 90 5D |  if_ne	jmp	#LR__4597
2e028     15 39 E2 F8 | 	getbyte	local10, local03, #0
2e02c     1C 26 06 F1 | 	add	local01, #28
2e030     13 13 02 FB | 	rdlong	arg01, local01
2e034     1C 26 86 F1 | 	sub	local01, #28
2e038     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2e03c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e040     FD 38 0A F2 | 	cmp	local10, result1 wz
2e044     60 00 90 AD |  if_e	jmp	#LR__4601
2e048                 | LR__4597
2e048     2B 26 06 F1 | 	add	local01, #43
2e04c     13 37 C2 FA | 	rdbyte	local09, local01
2e050     2B 26 86 F1 | 	sub	local01, #43
2e054     01 36 CE F7 | 	test	local09, #1 wz
2e058     24 00 90 5D |  if_ne	jmp	#LR__4598
2e05c     1C 26 06 F1 | 	add	local01, #28
2e060     13 13 02 FB | 	rdlong	arg01, local01
2e064     04 26 06 F1 | 	add	local01, #4
2e068     13 15 02 F6 | 	mov	arg02, local01
2e06c     20 26 86 F1 | 	sub	local01, #32
2e070     0B 16 06 F6 | 	mov	arg03, #11
2e074     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2e078     00 FA 0D F2 | 	cmp	result1, #0 wz
2e07c     28 00 90 AD |  if_e	jmp	#LR__4601
2e080                 | LR__4598
2e080     FF 2C 06 F6 | 	mov	local04, #255
2e084     2C 26 06 F1 | 	add	local01, #44
2e088     FF FF FF FF 
2e08c     13 FF 6B FC | 	wrlong	##-1, local01
2e090     2C 26 86 F1 | 	sub	local01, #44
2e094                 | LR__4599
2e094                 | LR__4600
2e094     13 13 02 F6 | 	mov	arg01, local01
2e098     00 14 06 F6 | 	mov	arg02, #0
2e09c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2e0a0     FD 2E 0A F6 | 	mov	local05, result1 wz
2e0a4     04 FE 9F AD |  if_e	jmp	#LR__4590
2e0a8                 | LR__4601
2e0a8                 | ' 
2e0a8                 | ' 	return res;
2e0a8     17 FB 01 F6 | 	mov	result1, local05
2e0ac                 | LR__4602
2e0ac     A7 F0 03 F6 | 	mov	ptra, fp
2e0b0     B2 00 A0 FD | 	call	#popregs_
2e0b4                 | _fatfs_cc_dir_find_ret
2e0b4     2D 00 64 FD | 	ret
2e0b8                 | 
2e0b8                 | _fatfs_cc_dir_register
2e0b8     0A 4A 05 F6 | 	mov	COUNT_, #10
2e0bc     A8 00 A0 FD | 	call	#pushregs_
2e0c0     2C F0 07 F1 | 	add	ptra, #44
2e0c4     04 4E 05 F1 | 	add	fp, #4
2e0c8     A7 12 62 FC | 	wrlong	arg01, fp
2e0cc     09 27 02 FB | 	rdlong	local01, arg01
2e0d0     08 4E 05 F1 | 	add	fp, #8
2e0d4     A7 26 62 FC | 	wrlong	local01, fp
2e0d8     08 4E 85 F1 | 	sub	fp, #8
2e0dc     A7 28 02 FB | 	rdlong	local02, fp
2e0e0     04 4E 85 F1 | 	sub	fp, #4
2e0e4     2B 28 06 F1 | 	add	local02, #43
2e0e8     14 29 C2 FA | 	rdbyte	local02, local02
2e0ec     A0 28 CE F7 | 	test	local02, #160 wz
2e0f0     06 FA 05 56 |  if_ne	mov	result1, #6
2e0f4     F8 03 90 5D |  if_ne	jmp	#LR__4625
2e0f8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2e0f8     14 4E 05 F1 | 	add	fp, #20
2e0fc     A7 00 68 FC | 	wrlong	#0, fp
2e100     14 4E 85 F1 | 	sub	fp, #20
2e104     97 28 48 FB | 	callpa	#(@LR__4611-@LR__4610)>>2,fcache_load_ptr_
2e108                 | LR__4610
2e108     0C 4E 05 F1 | 	add	fp, #12
2e10c     A7 28 02 FB | 	rdlong	local02, fp
2e110     0C 28 06 F1 | 	add	local02, #12
2e114     14 2B 02 FB | 	rdlong	local03, local02
2e118     08 4E 05 F1 | 	add	fp, #8
2e11c     A7 2C 02 FB | 	rdlong	local04, fp
2e120     14 4E 85 F1 | 	sub	fp, #20
2e124     01 2C 66 F0 | 	shl	local04, #1
2e128     15 2D 02 F1 | 	add	local04, local03
2e12c     16 29 EA FA | 	rdword	local02, local04 wz
2e130     24 00 90 AD |  if_e	jmp	#LR__4612
2e134     14 4E 05 F1 | 	add	fp, #20
2e138     A7 2E 02 FB | 	rdlong	local05, fp
2e13c     17 31 02 F6 | 	mov	local06, local05
2e140     17 33 02 F6 | 	mov	local07, local05
2e144     19 35 02 F6 | 	mov	local08, local07
2e148     01 34 06 F1 | 	add	local08, #1
2e14c     A7 34 62 FC | 	wrlong	local08, fp
2e150     14 4E 85 F1 | 	sub	fp, #20
2e154     B0 FF 9F FD | 	jmp	#LR__4610
2e158                 | LR__4611
2e158                 | LR__4612
2e158     1C 4E 05 F1 | 	add	fp, #28
2e15c     A7 12 02 F6 | 	mov	arg01, fp
2e160     18 4E 85 F1 | 	sub	fp, #24
2e164     A7 14 02 FB | 	rdlong	arg02, fp
2e168     04 4E 85 F1 | 	sub	fp, #4
2e16c     20 14 06 F1 | 	add	arg02, #32
2e170     0C 16 06 F6 | 	mov	arg03, #12
2e174     1C 6C BF FD | 	call	#__system____builtin_memmove
2e178     27 4E 05 F1 | 	add	fp, #39
2e17c     A7 36 C2 FA | 	rdbyte	local09, fp
2e180     27 4E 85 F1 | 	sub	fp, #39
2e184     01 36 CE F7 | 	test	local09, #1 wz
2e188     F4 00 90 AD |  if_e	jmp	#LR__4615
2e18c     04 4E 05 F1 | 	add	fp, #4
2e190     A7 38 02 FB | 	rdlong	local10, fp
2e194     2B 38 06 F1 | 	add	local10, #43
2e198     1C 81 48 FC | 	wrbyte	#64, local10
2e19c                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e19c                 | ' 		for (n = 1; n < 100; n++) {
2e19c     0C 4E 05 F1 | 	add	fp, #12
2e1a0     A7 02 68 FC | 	wrlong	#1, fp
2e1a4     10 4E 85 F1 | 	sub	fp, #16
2e1a8                 | LR__4613
2e1a8     10 4E 05 F1 | 	add	fp, #16
2e1ac     A7 28 02 FB | 	rdlong	local02, fp
2e1b0     10 4E 85 F1 | 	sub	fp, #16
2e1b4     64 28 16 F2 | 	cmp	local02, #100 wc
2e1b8     70 00 90 3D |  if_ae	jmp	#LR__4614
2e1bc     04 4E 05 F1 | 	add	fp, #4
2e1c0     A7 12 02 FB | 	rdlong	arg01, fp
2e1c4     20 12 06 F1 | 	add	arg01, #32
2e1c8     18 4E 05 F1 | 	add	fp, #24
2e1cc     A7 14 02 F6 | 	mov	arg02, fp
2e1d0     10 4E 85 F1 | 	sub	fp, #16
2e1d4     A7 38 02 FB | 	rdlong	local10, fp
2e1d8     0C 38 06 F1 | 	add	local10, #12
2e1dc     1C 17 02 FB | 	rdlong	arg03, local10
2e1e0     04 4E 05 F1 | 	add	fp, #4
2e1e4     A7 18 02 FB | 	rdlong	arg04, fp
2e1e8     10 4E 85 F1 | 	sub	fp, #16
2e1ec     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2e1f0     04 4E 05 F1 | 	add	fp, #4
2e1f4     A7 12 02 FB | 	rdlong	arg01, fp
2e1f8     04 4E 85 F1 | 	sub	fp, #4
2e1fc     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2e200     08 4E 05 F1 | 	add	fp, #8
2e204     A7 FA 61 FC | 	wrlong	result1, fp
2e208     00 FA 4D F2 | 	cmps	result1, #0 wz
2e20c     08 4E 85 F1 | 	sub	fp, #8
2e210     18 00 90 5D |  if_ne	jmp	#LR__4614
2e214     10 4E 05 F1 | 	add	fp, #16
2e218     A7 38 02 FB | 	rdlong	local10, fp
2e21c     01 38 06 F1 | 	add	local10, #1
2e220     A7 38 62 FC | 	wrlong	local10, fp
2e224     10 4E 85 F1 | 	sub	fp, #16
2e228     7C FF 9F FD | 	jmp	#LR__4613
2e22c                 | LR__4614
2e22c     10 4E 05 F1 | 	add	fp, #16
2e230     A7 38 02 FB | 	rdlong	local10, fp
2e234     10 4E 85 F1 | 	sub	fp, #16
2e238     64 38 0E F2 | 	cmp	local10, #100 wz
2e23c     07 FA 05 A6 |  if_e	mov	result1, #7
2e240     AC 02 90 AD |  if_e	jmp	#LR__4625
2e244     08 4E 05 F1 | 	add	fp, #8
2e248     A7 38 02 FB | 	rdlong	local10, fp
2e24c     08 4E 85 F1 | 	sub	fp, #8
2e250     04 38 0E F2 | 	cmp	local10, #4 wz
2e254     08 4E 05 51 |  if_ne	add	fp, #8
2e258     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2e25c     08 4E 85 51 |  if_ne	sub	fp, #8
2e260     8C 02 90 5D |  if_ne	jmp	#LR__4625
2e264     04 4E 05 F1 | 	add	fp, #4
2e268     A7 38 02 FB | 	rdlong	local10, fp
2e26c     23 4E 05 F1 | 	add	fp, #35
2e270     A7 26 C2 FA | 	rdbyte	local01, fp
2e274     27 4E 85 F1 | 	sub	fp, #39
2e278     2B 38 06 F1 | 	add	local10, #43
2e27c     1C 27 42 FC | 	wrbyte	local01, local10
2e280                 | LR__4615
2e280     27 4E 05 F1 | 	add	fp, #39
2e284     A7 28 C2 FA | 	rdbyte	local02, fp
2e288     27 4E 85 F1 | 	sub	fp, #39
2e28c     02 28 CE F7 | 	test	local02, #2 wz
2e290     20 00 90 AD |  if_e	jmp	#LR__4616
2e294     14 4E 05 F1 | 	add	fp, #20
2e298     A7 38 02 FB | 	rdlong	local10, fp
2e29c     0C 38 06 F1 | 	add	local10, #12
2e2a0     0D 38 16 FD | 	qdiv	local10, #13
2e2a4     14 4E 85 F1 | 	sub	fp, #20
2e2a8     18 38 62 FD | 	getqx	local10
2e2ac     01 38 06 F1 | 	add	local10, #1
2e2b0     04 00 90 FD | 	jmp	#LR__4617
2e2b4                 | LR__4616
2e2b4     01 38 06 F6 | 	mov	local10, #1
2e2b8                 | LR__4617
2e2b8     18 4E 05 F1 | 	add	fp, #24
2e2bc     A7 38 62 FC | 	wrlong	local10, fp
2e2c0     14 4E 85 F1 | 	sub	fp, #20
2e2c4     A7 12 02 FB | 	rdlong	arg01, fp
2e2c8     1C 15 02 F6 | 	mov	arg02, local10
2e2cc     04 4E 85 F1 | 	sub	fp, #4
2e2d0     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2e2d4     08 4E 05 F1 | 	add	fp, #8
2e2d8     A7 FA 61 FC | 	wrlong	result1, fp
2e2dc     08 4E 85 F1 | 	sub	fp, #8
2e2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2e4     38 01 90 5D |  if_ne	jmp	#LR__4622
2e2e8     18 4E 05 F1 | 	add	fp, #24
2e2ec     A7 38 02 FB | 	rdlong	local10, fp
2e2f0     01 38 8E F1 | 	sub	local10, #1 wz
2e2f4     A7 38 62 FC | 	wrlong	local10, fp
2e2f8     18 4E 85 F1 | 	sub	fp, #24
2e2fc     20 01 90 AD |  if_e	jmp	#LR__4622
2e300     04 4E 05 F1 | 	add	fp, #4
2e304     A7 38 02 FB | 	rdlong	local10, fp
2e308     1C 13 02 F6 | 	mov	arg01, local10
2e30c     14 4E 05 F1 | 	add	fp, #20
2e310     A7 18 02 FB | 	rdlong	arg04, fp
2e314     18 4E 85 F1 | 	sub	fp, #24
2e318     05 18 66 F0 | 	shl	arg04, #5
2e31c     10 38 06 F1 | 	add	local10, #16
2e320     1C 15 02 FB | 	rdlong	arg02, local10
2e324     0C 15 82 F1 | 	sub	arg02, arg04
2e328     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e32c     08 4E 05 F1 | 	add	fp, #8
2e330     A7 FA 61 FC | 	wrlong	result1, fp
2e334     08 4E 85 F1 | 	sub	fp, #8
2e338     00 FA 0D F2 | 	cmp	result1, #0 wz
2e33c     E0 00 90 5D |  if_ne	jmp	#LR__4621
2e340     04 4E 05 F1 | 	add	fp, #4
2e344     A7 12 02 FB | 	rdlong	arg01, fp
2e348     04 4E 85 F1 | 	sub	fp, #4
2e34c     20 12 06 F1 | 	add	arg01, #32
2e350     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2e354     FD 38 02 F6 | 	mov	local10, result1
2e358     28 4E 05 F1 | 	add	fp, #40
2e35c     A7 38 42 FC | 	wrbyte	local10, fp
2e360     28 4E 85 F1 | 	sub	fp, #40
2e364                 | ' 			sum = sum_sfn(dp->fn);
2e364                 | ' 			do {
2e364                 | LR__4618
2e364     0C 4E 05 F1 | 	add	fp, #12
2e368     A7 12 02 FB | 	rdlong	arg01, fp
2e36c     08 4E 85 F1 | 	sub	fp, #8
2e370     A7 26 02 FB | 	rdlong	local01, fp
2e374     04 4E 85 F1 | 	sub	fp, #4
2e378     18 26 06 F1 | 	add	local01, #24
2e37c     13 15 02 FB | 	rdlong	arg02, local01
2e380     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2e384     08 4E 05 F1 | 	add	fp, #8
2e388     A7 FA 61 FC | 	wrlong	result1, fp
2e38c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e390     08 4E 85 F1 | 	sub	fp, #8
2e394     88 00 90 5D |  if_ne	jmp	#LR__4620
2e398     0C 4E 05 F1 | 	add	fp, #12
2e39c     A7 28 02 FB | 	rdlong	local02, fp
2e3a0     0C 28 06 F1 | 	add	local02, #12
2e3a4     14 13 02 FB | 	rdlong	arg01, local02
2e3a8     08 4E 85 F1 | 	sub	fp, #8
2e3ac     A7 26 02 FB | 	rdlong	local01, fp
2e3b0     1C 26 06 F1 | 	add	local01, #28
2e3b4     13 15 02 FB | 	rdlong	arg02, local01
2e3b8     14 4E 05 F1 | 	add	fp, #20
2e3bc     A7 16 02 FB | 	rdlong	arg03, fp
2e3c0     10 4E 05 F1 | 	add	fp, #16
2e3c4     A7 18 C2 FA | 	rdbyte	arg04, fp
2e3c8     28 4E 85 F1 | 	sub	fp, #40
2e3cc     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2e3d0     0C 4E 05 F1 | 	add	fp, #12
2e3d4     A7 38 02 FB | 	rdlong	local10, fp
2e3d8     03 38 06 F1 | 	add	local10, #3
2e3dc     1C 03 48 FC | 	wrbyte	#1, local10
2e3e0     08 4E 85 F1 | 	sub	fp, #8
2e3e4     A7 12 02 FB | 	rdlong	arg01, fp
2e3e8     04 4E 85 F1 | 	sub	fp, #4
2e3ec     00 14 06 F6 | 	mov	arg02, #0
2e3f0     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2e3f4     08 4E 05 F1 | 	add	fp, #8
2e3f8     A7 FA 61 FC | 	wrlong	result1, fp
2e3fc     00 FA 4D F2 | 	cmps	result1, #0 wz
2e400     08 4E 85 F1 | 	sub	fp, #8
2e404     18 00 90 5D |  if_ne	jmp	#LR__4619
2e408     18 4E 05 F1 | 	add	fp, #24
2e40c     A7 38 02 FB | 	rdlong	local10, fp
2e410     01 38 8E F1 | 	sub	local10, #1 wz
2e414     A7 38 62 FC | 	wrlong	local10, fp
2e418     18 4E 85 F1 | 	sub	fp, #24
2e41c     44 FF 9F 5D |  if_ne	jmp	#LR__4618
2e420                 | LR__4619
2e420                 | LR__4620
2e420                 | LR__4621
2e420                 | LR__4622
2e420     08 4E 05 F1 | 	add	fp, #8
2e424     A7 38 0A FB | 	rdlong	local10, fp wz
2e428     08 4E 85 F1 | 	sub	fp, #8
2e42c     B4 00 90 5D |  if_ne	jmp	#LR__4624
2e430     0C 4E 05 F1 | 	add	fp, #12
2e434     A7 12 02 FB | 	rdlong	arg01, fp
2e438     08 4E 85 F1 | 	sub	fp, #8
2e43c     A7 26 02 FB | 	rdlong	local01, fp
2e440     04 4E 85 F1 | 	sub	fp, #4
2e444     18 26 06 F1 | 	add	local01, #24
2e448     13 15 02 FB | 	rdlong	arg02, local01
2e44c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2e450     08 4E 05 F1 | 	add	fp, #8
2e454     A7 FA 61 FC | 	wrlong	result1, fp
2e458     08 4E 85 F1 | 	sub	fp, #8
2e45c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e460     80 00 90 5D |  if_ne	jmp	#LR__4623
2e464     04 4E 05 F1 | 	add	fp, #4
2e468     A7 28 02 FB | 	rdlong	local02, fp
2e46c     04 4E 85 F1 | 	sub	fp, #4
2e470     1C 28 06 F1 | 	add	local02, #28
2e474     14 13 02 FB | 	rdlong	arg01, local02
2e478     00 14 06 F6 | 	mov	arg02, #0
2e47c     20 16 06 F6 | 	mov	arg03, #32
2e480     98 00 A0 FD | 	call	#\builtin_bytefill_
2e484     04 4E 05 F1 | 	add	fp, #4
2e488     A7 14 02 FB | 	rdlong	arg02, fp
2e48c     0A 27 02 F6 | 	mov	local01, arg02
2e490     1C 26 06 F1 | 	add	local01, #28
2e494     13 13 02 FB | 	rdlong	arg01, local01
2e498     04 4E 85 F1 | 	sub	fp, #4
2e49c     20 14 06 F1 | 	add	arg02, #32
2e4a0     0B 16 06 F6 | 	mov	arg03, #11
2e4a4     EC 68 BF FD | 	call	#__system____builtin_memmove
2e4a8     04 4E 05 F1 | 	add	fp, #4
2e4ac     A7 36 02 FB | 	rdlong	local09, fp
2e4b0     1B 39 02 F6 | 	mov	local10, local09
2e4b4     1C 38 06 F1 | 	add	local10, #28
2e4b8     1C 27 02 FB | 	rdlong	local01, local10
2e4bc     2B 36 06 F1 | 	add	local09, #43
2e4c0     1B 39 C2 FA | 	rdbyte	local10, local09
2e4c4     18 38 06 F5 | 	and	local10, #24
2e4c8     0C 26 06 F1 | 	add	local01, #12
2e4cc     13 39 42 FC | 	wrbyte	local10, local01
2e4d0     08 4E 05 F1 | 	add	fp, #8
2e4d4     A7 38 02 FB | 	rdlong	local10, fp
2e4d8     0C 4E 85 F1 | 	sub	fp, #12
2e4dc     03 38 06 F1 | 	add	local10, #3
2e4e0     1C 03 48 FC | 	wrbyte	#1, local10
2e4e4                 | LR__4623
2e4e4                 | LR__4624
2e4e4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e4e4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e4e4                 | ' 
2e4e4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e4e4                 | ' 
2e4e4                 | ' 			fs->wflag = 1;
2e4e4                 | ' 		}
2e4e4                 | ' 	}
2e4e4                 | ' 
2e4e4                 | ' 	return res;
2e4e4     08 4E 05 F1 | 	add	fp, #8
2e4e8     A7 FA 01 FB | 	rdlong	result1, fp
2e4ec     08 4E 85 F1 | 	sub	fp, #8
2e4f0                 | LR__4625
2e4f0     A7 F0 03 F6 | 	mov	ptra, fp
2e4f4     B2 00 A0 FD | 	call	#popregs_
2e4f8                 | _fatfs_cc_dir_register_ret
2e4f8     2D 00 64 FD | 	ret
2e4fc                 | 
2e4fc                 | _fatfs_cc_dir_remove
2e4fc     05 4A 05 F6 | 	mov	COUNT_, #5
2e500     A8 00 A0 FD | 	call	#pushregs_
2e504     09 27 02 F6 | 	mov	local01, arg01
2e508     13 29 02 FB | 	rdlong	local02, local01
2e50c     10 26 06 F1 | 	add	local01, #16
2e510     13 2B 02 FB | 	rdlong	local03, local01
2e514     1C 26 06 F1 | 	add	local01, #28
2e518     13 15 02 FB | 	rdlong	arg02, local01
2e51c     2C 26 86 F1 | 	sub	local01, #44
2e520     FF FF 7F FF 
2e524     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2e528     00 2C 06 A6 |  if_e	mov	local04, #0
2e52c     18 00 90 AD |  if_e	jmp	#LR__4630
2e530     13 13 02 F6 | 	mov	arg01, local01
2e534     2C 26 06 F1 | 	add	local01, #44
2e538     13 15 02 FB | 	rdlong	arg02, local01
2e53c     2C 26 86 F1 | 	sub	local01, #44
2e540     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2e544     FD 2C 02 F6 | 	mov	local04, result1
2e548                 | LR__4630
2e548     16 2F 0A F6 | 	mov	local05, local04 wz
2e54c     64 00 90 5D |  if_ne	jmp	#LR__4633
2e550                 | ' 		do {
2e550                 | LR__4631
2e550     18 26 06 F1 | 	add	local01, #24
2e554     13 15 02 FB | 	rdlong	arg02, local01
2e558     18 26 86 F1 | 	sub	local01, #24
2e55c     14 13 02 F6 | 	mov	arg01, local02
2e560     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2e564     FD 2E 0A F6 | 	mov	local05, result1 wz
2e568     40 00 90 5D |  if_ne	jmp	#LR__4632
2e56c     1C 26 06 F1 | 	add	local01, #28
2e570     13 2D 02 FB | 	rdlong	local04, local01
2e574     16 CB 49 FC | 	wrbyte	#229, local04
2e578     03 28 06 F1 | 	add	local02, #3
2e57c     14 03 48 FC | 	wrbyte	#1, local02
2e580     03 28 86 F1 | 	sub	local02, #3
2e584     0C 26 86 F1 | 	sub	local01, #12
2e588     13 2D 02 FB | 	rdlong	local04, local01
2e58c     10 26 86 F1 | 	sub	local01, #16
2e590     15 2D 12 F2 | 	cmp	local04, local03 wc
2e594     14 00 90 3D |  if_ae	jmp	#LR__4632
2e598     13 13 02 F6 | 	mov	arg01, local01
2e59c     00 14 06 F6 | 	mov	arg02, #0
2e5a0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2e5a4     FD 2E 0A F6 | 	mov	local05, result1 wz
2e5a8     A4 FF 9F AD |  if_e	jmp	#LR__4631
2e5ac                 | LR__4632
2e5ac     04 2E 0E F2 | 	cmp	local05, #4 wz
2e5b0     02 2E 06 A6 |  if_e	mov	local05, #2
2e5b4                 | LR__4633
2e5b4                 | ' 	}
2e5b4                 | ' #line 2590 "ff.c"
2e5b4                 | ' 	return res;
2e5b4     17 FB 01 F6 | 	mov	result1, local05
2e5b8     A7 F0 03 F6 | 	mov	ptra, fp
2e5bc     B2 00 A0 FD | 	call	#popregs_
2e5c0                 | _fatfs_cc_dir_remove_ret
2e5c0     2D 00 64 FD | 	ret
2e5c4                 | 
2e5c4                 | _fatfs_cc_get_fileinfo
2e5c4     0F 4A 05 F6 | 	mov	COUNT_, #15
2e5c8     A8 00 A0 FD | 	call	#pushregs_
2e5cc     09 27 02 F6 | 	mov	local01, arg01
2e5d0     0A 29 02 F6 | 	mov	local02, arg02
2e5d4     13 2B 02 FB | 	rdlong	local03, local01
2e5d8     1C 28 06 F1 | 	add	local02, #28
2e5dc     14 01 48 FC | 	wrbyte	#0, local02
2e5e0     1C 28 86 F1 | 	sub	local02, #28
2e5e4     18 26 06 F1 | 	add	local01, #24
2e5e8     13 2D 0A FB | 	rdlong	local04, local01 wz
2e5ec     18 26 86 F1 | 	sub	local01, #24
2e5f0     90 03 90 AD |  if_e	jmp	#LR__4654
2e5f4     2C 26 06 F1 | 	add	local01, #44
2e5f8     13 2D 02 FB | 	rdlong	local04, local01
2e5fc     2C 26 86 F1 | 	sub	local01, #44
2e600     FF FF 7F FF 
2e604     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2e608     D8 00 90 AD |  if_e	jmp	#LR__4643
2e60c     00 2E 06 F6 | 	mov	local05, #0
2e610     00 30 06 F6 | 	mov	local06, #0
2e614     00 32 06 F6 | 	mov	local07, #0
2e618                 | ' 			si = di = 0;
2e618                 | ' 			hs = 0;
2e618                 | ' 			while (fs->lfnbuf[si] != 0) {
2e618                 | LR__4640
2e618     0C 2A 06 F1 | 	add	local03, #12
2e61c     15 2D 02 FB | 	rdlong	local04, local03
2e620     0C 2A 86 F1 | 	sub	local03, #12
2e624     18 35 02 F6 | 	mov	local08, local06
2e628     01 34 66 F0 | 	shl	local08, #1
2e62c     16 35 02 F1 | 	add	local08, local04
2e630     1A 2D EA FA | 	rdword	local04, local08 wz
2e634     90 00 90 AD |  if_e	jmp	#LR__4642
2e638     0C 2A 06 F1 | 	add	local03, #12
2e63c     15 37 02 FB | 	rdlong	local09, local03
2e640     0C 2A 86 F1 | 	sub	local03, #12
2e644     18 39 02 F6 | 	mov	local10, local06
2e648     01 38 66 F0 | 	shl	local10, #1
2e64c     1B 39 02 F1 | 	add	local10, local09
2e650     1C 3B E2 FA | 	rdword	local11, local10
2e654     19 2D 02 F6 | 	mov	local04, local07
2e658     0F 2C 4E F7 | 	zerox	local04, #15 wz
2e65c     01 30 06 F1 | 	add	local06, #1
2e660     24 00 90 5D |  if_ne	jmp	#LR__4641
2e664     1D 3D 32 F9 | 	getword	local12, local11, #0
2e668     6C 00 00 FF 
2e66c     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2e670     14 00 90 CD |  if_b	jmp	#LR__4641
2e674     1D 3F 32 F9 | 	getword	local13, local11, #0
2e678     70 00 00 FF 
2e67c     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2e680     1D 33 02 C6 |  if_b	mov	local07, local11
2e684                 | ' 					hs = wc; continue;
2e684     90 FF 9F CD |  if_b	jmp	#LR__4640
2e688                 | LR__4641
2e688     19 13 32 F9 | 	getword	arg01, local07, #0
2e68c     10 12 66 F0 | 	shl	arg01, #16
2e690     1D 3B 32 F9 | 	getword	local11, local11, #0
2e694     1D 13 42 F5 | 	or	arg01, local11
2e698     17 15 02 F6 | 	mov	arg02, local05
2e69c     1C 28 06 F1 | 	add	local02, #28
2e6a0     14 15 02 F1 | 	add	arg02, local02
2e6a4     FF 16 06 F6 | 	mov	arg03, #255
2e6a8     17 17 82 F1 | 	sub	arg03, local05
2e6ac     1C 28 86 F1 | 	sub	local02, #28
2e6b0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2e6b4     FD 40 0A F6 | 	mov	local14, result1 wz
2e6b8     00 2E 06 A6 |  if_e	mov	local05, #0
2e6bc     20 2F 02 51 |  if_ne	add	local05, local14
2e6c0     00 32 06 56 |  if_ne	mov	local07, #0
2e6c4     50 FF 9F 5D |  if_ne	jmp	#LR__4640
2e6c8                 | LR__4642
2e6c8     19 2D 02 F6 | 	mov	local04, local07
2e6cc     0F 2C 4E F7 | 	zerox	local04, #15 wz
2e6d0     00 2E 06 56 |  if_ne	mov	local05, #0
2e6d4     1C 28 06 F1 | 	add	local02, #28
2e6d8     14 2F 02 F1 | 	add	local05, local02
2e6dc     17 01 48 FC | 	wrbyte	#0, local05
2e6e0     1C 28 86 F1 | 	sub	local02, #28
2e6e4                 | LR__4643
2e6e4     00 2E 06 F6 | 	mov	local05, #0
2e6e8     00 30 06 F6 | 	mov	local06, #0
2e6ec                 | ' 			fno->fname[di] = 0;
2e6ec                 | ' 		}
2e6ec                 | ' 	}
2e6ec                 | ' 
2e6ec                 | ' 	si = di = 0;
2e6ec                 | ' 	while (si < 11) {
2e6ec                 | LR__4644
2e6ec     0B 30 16 F2 | 	cmp	local06, #11 wc
2e6f0     20 01 90 3D |  if_ae	jmp	#LR__4647
2e6f4     1C 26 06 F1 | 	add	local01, #28
2e6f8     13 37 02 FB | 	rdlong	local09, local01
2e6fc     1C 26 86 F1 | 	sub	local01, #28
2e700     18 39 02 F6 | 	mov	local10, local06
2e704     1B 39 02 F1 | 	add	local10, local09
2e708     1C 3B C2 FA | 	rdbyte	local11, local10
2e70c     1D 2D 32 F9 | 	getword	local04, local11, #0
2e710     20 2C 0E F2 | 	cmp	local04, #32 wz
2e714     01 30 06 F1 | 	add	local06, #1
2e718     D0 FF 9F AD |  if_e	jmp	#LR__4644
2e71c     1D 2D 32 F9 | 	getword	local04, local11, #0
2e720     05 2C 0E F2 | 	cmp	local04, #5 wz
2e724     E5 3A 06 A6 |  if_e	mov	local11, #229
2e728     09 30 0E F2 | 	cmp	local06, #9 wz
2e72c     20 00 90 5D |  if_ne	jmp	#LR__4645
2e730     0C 2E 16 F2 | 	cmp	local05, #12 wc
2e734     18 00 90 3D |  if_ae	jmp	#LR__4645
2e738     17 3F 02 F6 | 	mov	local13, local05
2e73c     0C 28 06 F1 | 	add	local02, #12
2e740     14 3F 02 F1 | 	add	local13, local02
2e744     1F 5D 48 FC | 	wrbyte	#46, local13
2e748     01 2E 06 F1 | 	add	local05, #1
2e74c     0C 28 86 F1 | 	sub	local02, #12
2e750                 | LR__4645
2e750     1D 13 32 F9 | 	getword	arg01, local11, #0
2e754     07 12 4E F7 | 	zerox	arg01, #7 wz
2e758     00 FA 05 56 |  if_ne	mov	result1, #0
2e75c                 | ' 
2e75c                 | ' 	return 0;
2e75c     00 FA 05 A6 |  if_e	mov	result1, #0
2e760     00 FA 0D F2 | 	cmp	result1, #0 wz
2e764     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2e768     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2e76c     50 00 90 AD |  if_e	jmp	#LR__4646
2e770     1C 26 06 F1 | 	add	local01, #28
2e774     13 39 02 FB | 	rdlong	local10, local01
2e778     1C 26 86 F1 | 	sub	local01, #28
2e77c     18 35 02 F6 | 	mov	local08, local06
2e780     1C 35 02 F1 | 	add	local08, local10
2e784     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2e788     00 FA 05 56 |  if_ne	mov	result1, #0
2e78c                 | ' 
2e78c                 | ' 	return 0;
2e78c     00 FA 05 A6 |  if_e	mov	result1, #0
2e790     00 FA 0D F2 | 	cmp	result1, #0 wz
2e794     28 00 90 AD |  if_e	jmp	#LR__4646
2e798     1D 3B 32 F9 | 	getword	local11, local11, #0
2e79c     08 3A 66 F0 | 	shl	local11, #8
2e7a0     1C 26 06 F1 | 	add	local01, #28
2e7a4     13 41 02 FB | 	rdlong	local14, local01
2e7a8     1C 26 86 F1 | 	sub	local01, #28
2e7ac     18 37 02 F6 | 	mov	local09, local06
2e7b0     20 37 02 F1 | 	add	local09, local14
2e7b4     1B 3D C2 FA | 	rdbyte	local12, local09
2e7b8     1E 3B 42 F5 | 	or	local11, local12
2e7bc     01 30 06 F1 | 	add	local06, #1
2e7c0                 | LR__4646
2e7c0     1D 13 02 F6 | 	mov	arg01, local11
2e7c4     01 00 00 FF 
2e7c8     52 15 06 F6 | 	mov	arg02, ##850
2e7cc     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e7d0     FD 3A 02 F6 | 	mov	local11, result1
2e7d4     1D 2D 02 F6 | 	mov	local04, local11
2e7d8     0F 2C 4E F7 | 	zerox	local04, #15 wz
2e7dc     00 2E 06 A6 |  if_e	mov	local05, #0
2e7e0     30 00 90 AD |  if_e	jmp	#LR__4647
2e7e4     1D 13 32 F9 | 	getword	arg01, local11, #0
2e7e8     17 15 02 F6 | 	mov	arg02, local05
2e7ec     0C 28 06 F1 | 	add	local02, #12
2e7f0     14 15 02 F1 | 	add	arg02, local02
2e7f4     0C 16 06 F6 | 	mov	arg03, #12
2e7f8     17 17 82 F1 | 	sub	arg03, local05
2e7fc     0C 28 86 F1 | 	sub	local02, #12
2e800     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2e804     FD 40 0A F6 | 	mov	local14, result1 wz
2e808     00 2E 06 A6 |  if_e	mov	local05, #0
2e80c     20 2F 02 51 |  if_ne	add	local05, local14
2e810     D8 FE 9F 5D |  if_ne	jmp	#LR__4644
2e814                 | LR__4647
2e814     17 2D 02 F6 | 	mov	local04, local05
2e818     0C 28 06 F1 | 	add	local02, #12
2e81c     14 2D 02 F1 | 	add	local04, local02
2e820     16 01 48 FC | 	wrbyte	#0, local04
2e824     10 28 06 F1 | 	add	local02, #16
2e828     14 2D CA FA | 	rdbyte	local04, local02 wz
2e82c     1C 28 86 F1 | 	sub	local02, #28
2e830     F8 00 90 5D |  if_ne	jmp	#LR__4653
2e834     00 2E 0E F2 | 	cmp	local05, #0 wz
2e838     1C 00 90 5D |  if_ne	jmp	#LR__4648
2e83c     17 3F 02 F6 | 	mov	local13, local05
2e840     1C 28 06 F1 | 	add	local02, #28
2e844     14 3F 02 F1 | 	add	local13, local02
2e848     1F 7F 48 FC | 	wrbyte	#63, local13
2e84c     01 2E 06 F1 | 	add	local05, #1
2e850     1C 28 86 F1 | 	sub	local02, #28
2e854     A4 00 90 FD | 	jmp	#LR__4652
2e858                 | LR__4648
2e858                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e858     00 2E 06 F6 | 	mov	local05, #0
2e85c     00 30 06 F6 | 	mov	local06, #0
2e860     08 42 06 F6 | 	mov	local15, #8
2e864                 | LR__4649
2e864     18 2D 02 F6 | 	mov	local04, local06
2e868     0C 28 06 F1 | 	add	local02, #12
2e86c     14 2D 02 F1 | 	add	local04, local02
2e870     16 3F CA FA | 	rdbyte	local13, local04 wz
2e874     0C 28 86 F1 | 	sub	local02, #12
2e878     80 00 90 AD |  if_e	jmp	#LR__4651
2e87c     18 35 02 F6 | 	mov	local08, local06
2e880     0C 28 06 F1 | 	add	local02, #12
2e884     14 35 02 F1 | 	add	local08, local02
2e888     1A 3B C2 FA | 	rdbyte	local11, local08
2e88c     1D 41 32 F9 | 	getword	local14, local11, #0
2e890     2E 40 0E F2 | 	cmp	local14, #46 wz
2e894     0C 28 86 F1 | 	sub	local02, #12
2e898     10 42 06 A6 |  if_e	mov	local15, #16
2e89c     1D 41 32 F9 | 	getword	local14, local11, #0
2e8a0     41 40 16 F2 | 	cmp	local14, #65 wc
2e8a4     30 00 90 CD |  if_b	jmp	#LR__4650
2e8a8     1D 35 32 F9 | 	getword	local08, local11, #0
2e8ac     5B 34 16 F2 | 	cmp	local08, #91 wc
2e8b0     24 00 90 3D |  if_ae	jmp	#LR__4650
2e8b4     1C 26 06 F1 | 	add	local01, #28
2e8b8     13 37 02 FB | 	rdlong	local09, local01
2e8bc     1C 26 86 F1 | 	sub	local01, #28
2e8c0     0C 36 06 F1 | 	add	local09, #12
2e8c4     1B 39 C2 FA | 	rdbyte	local10, local09
2e8c8     21 41 E2 F8 | 	getbyte	local14, local15, #0
2e8cc     20 39 CA F7 | 	test	local10, local14 wz
2e8d0     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2e8d4     20 3A 06 51 |  if_ne	add	local11, #32
2e8d8                 | LR__4650
2e8d8     17 41 02 F6 | 	mov	local14, local05
2e8dc     1C 28 06 F1 | 	add	local02, #28
2e8e0     14 41 02 F1 | 	add	local14, local02
2e8e4     1D 3B 32 F9 | 	getword	local11, local11, #0
2e8e8     20 3B 42 FC | 	wrbyte	local11, local14
2e8ec     01 30 06 F1 | 	add	local06, #1
2e8f0     01 2E 06 F1 | 	add	local05, #1
2e8f4     1C 28 86 F1 | 	sub	local02, #28
2e8f8     68 FF 9F FD | 	jmp	#LR__4649
2e8fc                 | LR__4651
2e8fc                 | LR__4652
2e8fc     1C 28 06 F1 | 	add	local02, #28
2e900     14 2F 02 F1 | 	add	local05, local02
2e904     17 01 48 FC | 	wrbyte	#0, local05
2e908     1C 26 06 F1 | 	add	local01, #28
2e90c     13 2D 02 FB | 	rdlong	local04, local01
2e910     1C 26 86 F1 | 	sub	local01, #28
2e914     0C 2C 06 F1 | 	add	local04, #12
2e918     16 3F CA FA | 	rdbyte	local13, local04 wz
2e91c     1C 28 86 F1 | 	sub	local02, #28
2e920     0C 28 06 A1 |  if_e	add	local02, #12
2e924     14 01 48 AC |  if_e	wrbyte	#0, local02
2e928     0C 28 86 A1 |  if_e	sub	local02, #12
2e92c                 | LR__4653
2e92c     1C 26 06 F1 | 	add	local01, #28
2e930     13 3D 02 FB | 	rdlong	local12, local01
2e934     0B 3C 06 F1 | 	add	local12, #11
2e938     1E 2D C2 FA | 	rdbyte	local04, local12
2e93c     3F 2C 06 F5 | 	and	local04, #63
2e940     08 28 06 F1 | 	add	local02, #8
2e944     14 2D 42 FC | 	wrbyte	local04, local02
2e948     08 28 86 F1 | 	sub	local02, #8
2e94c     13 13 02 FB | 	rdlong	arg01, local01
2e950     1C 12 06 F1 | 	add	arg01, #28
2e954                 | ' {
2e954                 | ' 
2e954                 | ' 	return *((DWORD*)ptr);
2e954     09 FB 01 FB | 	rdlong	result1, arg01
2e958     14 FB 61 FC | 	wrlong	result1, local02
2e95c     13 13 02 FB | 	rdlong	arg01, local01
2e960     16 12 06 F1 | 	add	arg01, #22
2e964                 | ' {
2e964                 | ' 
2e964                 | ' 	return *((WORD*)ptr);
2e964     09 FB E1 FA | 	rdword	result1, arg01
2e968     06 28 06 F1 | 	add	local02, #6
2e96c     14 FB 51 FC | 	wrword	result1, local02
2e970     13 13 02 FB | 	rdlong	arg01, local01
2e974     18 12 06 F1 | 	add	arg01, #24
2e978                 | ' {
2e978                 | ' 
2e978                 | ' 	return *((WORD*)ptr);
2e978     09 FB E1 FA | 	rdword	result1, arg01
2e97c     02 28 86 F1 | 	sub	local02, #2
2e980     14 FB 51 FC | 	wrword	result1, local02
2e984                 | LR__4654
2e984     A7 F0 03 F6 | 	mov	ptra, fp
2e988     B2 00 A0 FD | 	call	#popregs_
2e98c                 | _fatfs_cc_get_fileinfo_ret
2e98c     2D 00 64 FD | 	ret
2e990                 | 
2e990                 | _fatfs_cc_create_name
2e990     0D 4A 05 F6 | 	mov	COUNT_, #13
2e994     A8 00 A0 FD | 	call	#pushregs_
2e998     34 F0 07 F1 | 	add	ptra, #52
2e99c     04 4E 05 F1 | 	add	fp, #4
2e9a0     A7 12 62 FC | 	wrlong	arg01, fp
2e9a4     04 4E 05 F1 | 	add	fp, #4
2e9a8     A7 14 62 FC | 	wrlong	arg02, fp
2e9ac     0A FB 01 FB | 	rdlong	result1, arg02
2e9b0     28 4E 05 F1 | 	add	fp, #40
2e9b4     A7 FA 61 FC | 	wrlong	result1, fp
2e9b8     2C 4E 85 F1 | 	sub	fp, #44
2e9bc     A7 FA 01 FB | 	rdlong	result1, fp
2e9c0     FD 26 02 FB | 	rdlong	local01, result1
2e9c4     0C 26 06 F1 | 	add	local01, #12
2e9c8     13 29 02 FB | 	rdlong	local02, local01
2e9cc     14 4E 05 F1 | 	add	fp, #20
2e9d0     A7 28 62 FC | 	wrlong	local02, fp
2e9d4     14 4E 05 F1 | 	add	fp, #20
2e9d8     A7 00 68 FC | 	wrlong	#0, fp
2e9dc     2C 4E 85 F1 | 	sub	fp, #44
2e9e0                 | ' 
2e9e0                 | ' 
2e9e0                 | ' 
2e9e0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2e9e0                 | ' 	for (;;) {
2e9e0                 | LR__4660
2e9e0     30 4E 05 F1 | 	add	fp, #48
2e9e4     A7 12 02 F6 | 	mov	arg01, fp
2e9e8     30 4E 85 F1 | 	sub	fp, #48
2e9ec     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2e9f0     1C 4E 05 F1 | 	add	fp, #28
2e9f4     A7 FA 61 FC | 	wrlong	result1, fp
2e9f8     1C 4E 85 F1 | 	sub	fp, #28
2e9fc     FF FF 7F FF 
2ea00     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2ea04     06 FA 05 A6 |  if_e	mov	result1, #6
2ea08     74 08 90 AD |  if_e	jmp	#LR__4700
2ea0c     1C 4E 05 F1 | 	add	fp, #28
2ea10     A7 26 02 FB | 	rdlong	local01, fp
2ea14     1C 4E 85 F1 | 	sub	fp, #28
2ea18     80 00 00 FF 
2ea1c     00 26 16 F2 | 	cmp	local01, ##65536 wc
2ea20     3C 00 90 CD |  if_b	jmp	#LR__4661
2ea24     18 4E 05 F1 | 	add	fp, #24
2ea28     A7 2A 02 FB | 	rdlong	local03, fp
2ea2c     14 4E 05 F1 | 	add	fp, #20
2ea30     A7 26 02 FB | 	rdlong	local01, fp
2ea34     13 2D 02 F6 | 	mov	local04, local01
2ea38     01 2C 06 F1 | 	add	local04, #1
2ea3c     A7 2C 62 FC | 	wrlong	local04, fp
2ea40     01 26 66 F0 | 	shl	local01, #1
2ea44     15 27 02 F1 | 	add	local01, local03
2ea48     10 4E 85 F1 | 	sub	fp, #16
2ea4c     A7 2E 02 FB | 	rdlong	local05, fp
2ea50     1C 4E 85 F1 | 	sub	fp, #28
2ea54     17 31 02 F6 | 	mov	local06, local05
2ea58     10 30 46 F0 | 	shr	local06, #16
2ea5c     13 31 52 FC | 	wrword	local06, local01
2ea60                 | LR__4661
2ea60     1C 4E 05 F1 | 	add	fp, #28
2ea64     A7 26 02 FB | 	rdlong	local01, fp
2ea68     08 4E 85 F1 | 	sub	fp, #8
2ea6c     A7 26 52 FC | 	wrword	local01, fp
2ea70     A7 26 E2 FA | 	rdword	local01, fp
2ea74     14 4E 85 F1 | 	sub	fp, #20
2ea78     20 26 16 F2 | 	cmp	local01, #32 wc
2ea7c     B0 00 90 CD |  if_b	jmp	#LR__4663
2ea80     14 4E 05 F1 | 	add	fp, #20
2ea84     A7 26 E2 FA | 	rdword	local01, fp
2ea88     14 4E 85 F1 | 	sub	fp, #20
2ea8c     2F 26 0E F2 | 	cmp	local01, #47 wz
2ea90     14 4E 05 51 |  if_ne	add	fp, #20
2ea94     A7 2C E2 5A |  if_ne	rdword	local04, fp
2ea98     14 4E 85 51 |  if_ne	sub	fp, #20
2ea9c     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2eaa0     8C 00 90 AD |  if_e	jmp	#LR__4663
2eaa4     14 4E 05 F1 | 	add	fp, #20
2eaa8     A7 12 E2 FA | 	rdword	arg01, fp
2eaac     14 4E 85 F1 | 	sub	fp, #20
2eab0     80 12 16 F2 | 	cmp	arg01, #128 wc
2eab4     24 00 90 3D |  if_ae	jmp	#LR__4662
2eab8     A4 01 00 FF 
2eabc     F4 13 06 F6 | 	mov	arg01, ##@LR__5322
2eac0     14 4E 05 F1 | 	add	fp, #20
2eac4     A7 14 E2 FA | 	rdword	arg02, fp
2eac8     14 4E 85 F1 | 	sub	fp, #20
2eacc     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2ead0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ead4     06 FA 05 56 |  if_ne	mov	result1, #6
2ead8     A4 07 90 5D |  if_ne	jmp	#LR__4700
2eadc                 | LR__4662
2eadc     2C 4E 05 F1 | 	add	fp, #44
2eae0     A7 30 02 FB | 	rdlong	local06, fp
2eae4     2C 4E 85 F1 | 	sub	fp, #44
2eae8     FF 30 16 F2 | 	cmp	local06, #255 wc
2eaec     06 FA 05 36 |  if_ae	mov	result1, #6
2eaf0     8C 07 90 3D |  if_ae	jmp	#LR__4700
2eaf4     18 4E 05 F1 | 	add	fp, #24
2eaf8     A7 2A 02 FB | 	rdlong	local03, fp
2eafc     14 4E 05 F1 | 	add	fp, #20
2eb00     A7 28 02 FB | 	rdlong	local02, fp
2eb04     14 2D 02 F6 | 	mov	local04, local02
2eb08     01 2C 06 F1 | 	add	local04, #1
2eb0c     A7 2C 62 FC | 	wrlong	local04, fp
2eb10     14 27 02 F6 | 	mov	local01, local02
2eb14     01 26 66 F0 | 	shl	local01, #1
2eb18     15 27 02 F1 | 	add	local01, local03
2eb1c     18 4E 85 F1 | 	sub	fp, #24
2eb20     A7 30 E2 FA | 	rdword	local06, fp
2eb24     14 4E 85 F1 | 	sub	fp, #20
2eb28     13 31 52 FC | 	wrword	local06, local01
2eb2c     B0 FE 9F FD | 	jmp	#LR__4660
2eb30                 | LR__4663
2eb30     14 4E 05 F1 | 	add	fp, #20
2eb34     A7 32 E2 FA | 	rdword	local07, fp
2eb38     14 4E 85 F1 | 	sub	fp, #20
2eb3c     20 32 16 F2 | 	cmp	local07, #32 wc
2eb40     10 4E 05 C1 |  if_b	add	fp, #16
2eb44     A7 08 48 CC |  if_b	wrbyte	#4, fp
2eb48     10 4E 85 C1 |  if_b	sub	fp, #16
2eb4c     74 00 90 CD |  if_b	jmp	#LR__4668
2eb50     97 24 48 FB | 	callpa	#(@LR__4666-@LR__4664)>>2,fcache_load_ptr_
2eb54                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2eb54                 | LR__4664
2eb54     30 4E 05 F1 | 	add	fp, #48
2eb58     A7 2C 02 FB | 	rdlong	local04, fp
2eb5c     30 4E 85 F1 | 	sub	fp, #48
2eb60     16 33 C2 FA | 	rdbyte	local07, local04
2eb64     2F 32 0E F2 | 	cmp	local07, #47 wz
2eb68     18 00 90 AD |  if_e	jmp	#LR__4665
2eb6c     30 4E 05 F1 | 	add	fp, #48
2eb70     A7 2C 02 FB | 	rdlong	local04, fp
2eb74     30 4E 85 F1 | 	sub	fp, #48
2eb78     16 29 C2 FA | 	rdbyte	local02, local04
2eb7c     5C 28 0E F2 | 	cmp	local02, #92 wz
2eb80     18 00 90 5D |  if_ne	jmp	#LR__4667
2eb84                 | LR__4665
2eb84     30 4E 05 F1 | 	add	fp, #48
2eb88     A7 26 02 FB | 	rdlong	local01, fp
2eb8c     01 26 06 F1 | 	add	local01, #1
2eb90     A7 26 62 FC | 	wrlong	local01, fp
2eb94     30 4E 85 F1 | 	sub	fp, #48
2eb98     B8 FF 9F FD | 	jmp	#LR__4664
2eb9c                 | LR__4666
2eb9c                 | LR__4667
2eb9c     10 4E 05 F1 | 	add	fp, #16
2eba0     A7 00 48 FC | 	wrbyte	#0, fp
2eba4     20 4E 05 F1 | 	add	fp, #32
2eba8     A7 30 02 FB | 	rdlong	local06, fp
2ebac     30 4E 85 F1 | 	sub	fp, #48
2ebb0     18 33 C2 FA | 	rdbyte	local07, local06
2ebb4     20 32 16 F2 | 	cmp	local07, #32 wc
2ebb8     10 4E 05 C1 |  if_b	add	fp, #16
2ebbc     A7 08 48 CC |  if_b	wrbyte	#4, fp
2ebc0     10 4E 85 C1 |  if_b	sub	fp, #16
2ebc4                 | LR__4668
2ebc4     08 4E 05 F1 | 	add	fp, #8
2ebc8     A7 32 02 FB | 	rdlong	local07, fp
2ebcc     28 4E 05 F1 | 	add	fp, #40
2ebd0     A7 26 02 FB | 	rdlong	local01, fp
2ebd4     30 4E 85 F1 | 	sub	fp, #48
2ebd8     19 27 62 FC | 	wrlong	local01, local07
2ebdc     97 38 48 FB | 	callpa	#(@LR__4670-@LR__4669)>>2,fcache_load_ptr_
2ebe0                 | ' 	}
2ebe0                 | ' 	*path = p;
2ebe0                 | ' #line 2862 "ff.c"
2ebe0                 | ' 	while (di) {
2ebe0                 | LR__4669
2ebe0     2C 4E 05 F1 | 	add	fp, #44
2ebe4     A7 32 0A FB | 	rdlong	local07, fp wz
2ebe8     2C 4E 85 F1 | 	sub	fp, #44
2ebec     60 00 90 AD |  if_e	jmp	#LR__4671
2ebf0     18 4E 05 F1 | 	add	fp, #24
2ebf4     A7 30 02 FB | 	rdlong	local06, fp
2ebf8     14 4E 05 F1 | 	add	fp, #20
2ebfc     A7 2C 02 FB | 	rdlong	local04, fp
2ec00     01 2C 86 F1 | 	sub	local04, #1
2ec04     01 2C 66 F0 | 	shl	local04, #1
2ec08     18 2D 02 F1 | 	add	local04, local06
2ec0c     16 31 E2 FA | 	rdword	local06, local04
2ec10     18 4E 85 F1 | 	sub	fp, #24
2ec14     A7 30 52 FC | 	wrword	local06, fp
2ec18     A7 32 E2 FA | 	rdword	local07, fp
2ec1c     14 4E 85 F1 | 	sub	fp, #20
2ec20     20 32 0E F2 | 	cmp	local07, #32 wz
2ec24     14 4E 05 51 |  if_ne	add	fp, #20
2ec28     A7 26 E2 5A |  if_ne	rdword	local01, fp
2ec2c     14 4E 85 51 |  if_ne	sub	fp, #20
2ec30     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2ec34     18 00 90 5D |  if_ne	jmp	#LR__4671
2ec38     2C 4E 05 F1 | 	add	fp, #44
2ec3c     A7 26 02 FB | 	rdlong	local01, fp
2ec40     01 26 86 F1 | 	sub	local01, #1
2ec44     A7 26 62 FC | 	wrlong	local01, fp
2ec48     2C 4E 85 F1 | 	sub	fp, #44
2ec4c     90 FF 9F FD | 	jmp	#LR__4669
2ec50                 | LR__4670
2ec50                 | LR__4671
2ec50     18 4E 05 F1 | 	add	fp, #24
2ec54     A7 34 02 FB | 	rdlong	local08, fp
2ec58     14 4E 05 F1 | 	add	fp, #20
2ec5c     A7 2C 02 FB | 	rdlong	local04, fp
2ec60     01 2C 66 F0 | 	shl	local04, #1
2ec64     1A 2D 02 F1 | 	add	local04, local08
2ec68     16 01 58 FC | 	wrword	#0, local04
2ec6c     A7 32 0A FB | 	rdlong	local07, fp wz
2ec70     2C 4E 85 F1 | 	sub	fp, #44
2ec74     06 FA 05 A6 |  if_e	mov	result1, #6
2ec78     04 06 90 AD |  if_e	jmp	#LR__4700
2ec7c                 | ' 
2ec7c                 | ' 
2ec7c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2ec7c     28 4E 05 F1 | 	add	fp, #40
2ec80     A7 00 68 FC | 	wrlong	#0, fp
2ec84     28 4E 85 F1 | 	sub	fp, #40
2ec88     97 22 48 FB | 	callpa	#(@LR__4673-@LR__4672)>>2,fcache_load_ptr_
2ec8c                 | LR__4672
2ec8c     18 4E 05 F1 | 	add	fp, #24
2ec90     A7 36 02 FB | 	rdlong	local09, fp
2ec94     10 4E 05 F1 | 	add	fp, #16
2ec98     A7 38 02 FB | 	rdlong	local10, fp
2ec9c     28 4E 85 F1 | 	sub	fp, #40
2eca0     01 38 66 F0 | 	shl	local10, #1
2eca4     1B 39 02 F1 | 	add	local10, local09
2eca8     1C 3B E2 FA | 	rdword	local11, local10
2ecac     20 3A 0E F2 | 	cmp	local11, #32 wz
2ecb0     1C 00 90 5D |  if_ne	jmp	#LR__4674
2ecb4     28 4E 05 F1 | 	add	fp, #40
2ecb8     A7 3C 02 FB | 	rdlong	local12, fp
2ecbc     1E 2F 02 F6 | 	mov	local05, local12
2ecc0     01 2E 06 F1 | 	add	local05, #1
2ecc4     A7 2E 62 FC | 	wrlong	local05, fp
2ecc8     28 4E 85 F1 | 	sub	fp, #40
2eccc     BC FF 9F FD | 	jmp	#LR__4672
2ecd0                 | LR__4673
2ecd0                 | LR__4674
2ecd0     28 4E 05 F1 | 	add	fp, #40
2ecd4     A7 32 02 FB | 	rdlong	local07, fp
2ecd8     28 4E 85 F1 | 	sub	fp, #40
2ecdc     01 32 16 F2 | 	cmp	local07, #1 wc
2ece0     28 00 90 3D |  if_ae	jmp	#LR__4675
2ece4     18 4E 05 F1 | 	add	fp, #24
2ece8     A7 2A 02 FB | 	rdlong	local03, fp
2ecec     10 4E 05 F1 | 	add	fp, #16
2ecf0     A7 36 02 FB | 	rdlong	local09, fp
2ecf4     28 4E 85 F1 | 	sub	fp, #40
2ecf8     01 36 66 F0 | 	shl	local09, #1
2ecfc     15 37 02 F1 | 	add	local09, local03
2ed00     1B 27 E2 FA | 	rdword	local01, local09
2ed04     2E 26 0E F2 | 	cmp	local01, #46 wz
2ed08     14 00 90 5D |  if_ne	jmp	#LR__4676
2ed0c                 | LR__4675
2ed0c     10 4E 05 F1 | 	add	fp, #16
2ed10     A7 32 C2 FA | 	rdbyte	local07, fp
2ed14     03 32 46 F5 | 	or	local07, #3
2ed18     A7 32 42 FC | 	wrbyte	local07, fp
2ed1c     10 4E 85 F1 | 	sub	fp, #16
2ed20                 | LR__4676
2ed20     97 2C 48 FB | 	callpa	#(@LR__4678-@LR__4677)>>2,fcache_load_ptr_
2ed24                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2ed24                 | LR__4677
2ed24     2C 4E 05 F1 | 	add	fp, #44
2ed28     A7 32 02 FB | 	rdlong	local07, fp
2ed2c     2C 4E 85 F1 | 	sub	fp, #44
2ed30     01 32 16 F2 | 	cmp	local07, #1 wc
2ed34     44 00 90 CD |  if_b	jmp	#LR__4679
2ed38     18 4E 05 F1 | 	add	fp, #24
2ed3c     A7 30 02 FB | 	rdlong	local06, fp
2ed40     14 4E 05 F1 | 	add	fp, #20
2ed44     A7 2A 02 FB | 	rdlong	local03, fp
2ed48     2C 4E 85 F1 | 	sub	fp, #44
2ed4c     01 2A 86 F1 | 	sub	local03, #1
2ed50     01 2A 66 F0 | 	shl	local03, #1
2ed54     18 2B 02 F1 | 	add	local03, local06
2ed58     15 27 E2 FA | 	rdword	local01, local03
2ed5c     2E 26 0E F2 | 	cmp	local01, #46 wz
2ed60     18 00 90 AD |  if_e	jmp	#LR__4679
2ed64     2C 4E 05 F1 | 	add	fp, #44
2ed68     A7 26 02 FB | 	rdlong	local01, fp
2ed6c     01 26 86 F1 | 	sub	local01, #1
2ed70     A7 26 62 FC | 	wrlong	local01, fp
2ed74     2C 4E 85 F1 | 	sub	fp, #44
2ed78     A8 FF 9F FD | 	jmp	#LR__4677
2ed7c                 | LR__4678
2ed7c                 | LR__4679
2ed7c     04 4E 05 F1 | 	add	fp, #4
2ed80     A7 12 02 FB | 	rdlong	arg01, fp
2ed84     04 4E 85 F1 | 	sub	fp, #4
2ed88     20 12 06 F1 | 	add	arg01, #32
2ed8c     20 14 06 F6 | 	mov	arg02, #32
2ed90     0B 16 06 F6 | 	mov	arg03, #11
2ed94     09 3F 02 F6 | 	mov	local13, arg01
2ed98     98 00 A0 FD | 	call	#\builtin_bytefill_
2ed9c     1F FB 01 F6 | 	mov	result1, local13
2eda0     0C 4E 05 F1 | 	add	fp, #12
2eda4     A7 00 48 FC | 	wrbyte	#0, fp
2eda8     A7 32 C2 FA | 	rdbyte	local07, fp
2edac     14 4E 05 F1 | 	add	fp, #20
2edb0     A7 32 62 FC | 	wrlong	local07, fp
2edb4     04 4E 05 F1 | 	add	fp, #4
2edb8     A7 10 68 FC | 	wrlong	#8, fp
2edbc     24 4E 85 F1 | 	sub	fp, #36
2edc0                 | ' 
2edc0                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2edc0                 | ' 	i = b = 0; ni = 8;
2edc0                 | ' 	for (;;) {
2edc0                 | LR__4680
2edc0     18 4E 05 F1 | 	add	fp, #24
2edc4     A7 2A 02 FB | 	rdlong	local03, fp
2edc8     10 4E 05 F1 | 	add	fp, #16
2edcc     A7 36 02 FB | 	rdlong	local09, fp
2edd0     1B 2D 02 F6 | 	mov	local04, local09
2edd4     01 2C 06 F1 | 	add	local04, #1
2edd8     A7 2C 62 FC | 	wrlong	local04, fp
2eddc     01 36 66 F0 | 	shl	local09, #1
2ede0     15 37 02 F1 | 	add	local09, local03
2ede4     1B 31 E2 FA | 	rdword	local06, local09
2ede8     14 4E 85 F1 | 	sub	fp, #20
2edec     A7 30 52 FC | 	wrword	local06, fp
2edf0     A7 32 EA FA | 	rdword	local07, fp wz
2edf4     14 4E 85 F1 | 	sub	fp, #20
2edf8     74 03 90 AD |  if_e	jmp	#LR__4696
2edfc     14 4E 05 F1 | 	add	fp, #20
2ee00     A7 32 E2 FA | 	rdword	local07, fp
2ee04     14 4E 85 F1 | 	sub	fp, #20
2ee08     20 32 0E F2 | 	cmp	local07, #32 wz
2ee0c     30 00 90 AD |  if_e	jmp	#LR__4681
2ee10     14 4E 05 F1 | 	add	fp, #20
2ee14     A7 26 E2 FA | 	rdword	local01, fp
2ee18     14 4E 85 F1 | 	sub	fp, #20
2ee1c     2E 26 0E F2 | 	cmp	local01, #46 wz
2ee20     34 00 90 5D |  if_ne	jmp	#LR__4682
2ee24     28 4E 05 F1 | 	add	fp, #40
2ee28     A7 2C 02 FB | 	rdlong	local04, fp
2ee2c     04 4E 05 F1 | 	add	fp, #4
2ee30     A7 38 02 FB | 	rdlong	local10, fp
2ee34     2C 4E 85 F1 | 	sub	fp, #44
2ee38     1C 2D 0A F2 | 	cmp	local04, local10 wz
2ee3c     18 00 90 AD |  if_e	jmp	#LR__4682
2ee40                 | LR__4681
2ee40     10 4E 05 F1 | 	add	fp, #16
2ee44     A7 32 C2 FA | 	rdbyte	local07, fp
2ee48     03 32 46 F5 | 	or	local07, #3
2ee4c     A7 32 42 FC | 	wrbyte	local07, fp
2ee50     10 4E 85 F1 | 	sub	fp, #16
2ee54                 | ' 			cf |=  0x01  |  0x02 ;
2ee54                 | ' 			continue;
2ee54     68 FF 9F FD | 	jmp	#LR__4680
2ee58                 | LR__4682
2ee58     20 4E 05 F1 | 	add	fp, #32
2ee5c     A7 32 02 FB | 	rdlong	local07, fp
2ee60     04 4E 05 F1 | 	add	fp, #4
2ee64     A7 26 02 FB | 	rdlong	local01, fp
2ee68     24 4E 85 F1 | 	sub	fp, #36
2ee6c     13 33 12 F2 | 	cmp	local07, local01 wc
2ee70     1C 00 90 3D |  if_ae	jmp	#LR__4683
2ee74     28 4E 05 F1 | 	add	fp, #40
2ee78     A7 34 02 FB | 	rdlong	local08, fp
2ee7c     04 4E 05 F1 | 	add	fp, #4
2ee80     A7 38 02 FB | 	rdlong	local10, fp
2ee84     2C 4E 85 F1 | 	sub	fp, #44
2ee88     1C 35 0A F2 | 	cmp	local08, local10 wz
2ee8c     B0 00 90 5D |  if_ne	jmp	#LR__4685
2ee90                 | LR__4683
2ee90     24 4E 05 F1 | 	add	fp, #36
2ee94     A7 32 02 FB | 	rdlong	local07, fp
2ee98     24 4E 85 F1 | 	sub	fp, #36
2ee9c     0B 32 0E F2 | 	cmp	local07, #11 wz
2eea0     18 00 90 5D |  if_ne	jmp	#LR__4684
2eea4     10 4E 05 F1 | 	add	fp, #16
2eea8     A7 32 C2 FA | 	rdbyte	local07, fp
2eeac     03 32 46 F5 | 	or	local07, #3
2eeb0     A7 32 42 FC | 	wrbyte	local07, fp
2eeb4     10 4E 85 F1 | 	sub	fp, #16
2eeb8                 | ' 				cf |=  0x01  |  0x02 ;
2eeb8                 | ' 				break;
2eeb8     B4 02 90 FD | 	jmp	#LR__4696
2eebc                 | LR__4684
2eebc     28 4E 05 F1 | 	add	fp, #40
2eec0     A7 32 02 FB | 	rdlong	local07, fp
2eec4     04 4E 05 F1 | 	add	fp, #4
2eec8     A7 26 02 FB | 	rdlong	local01, fp
2eecc     2C 4E 85 F1 | 	sub	fp, #44
2eed0     13 33 0A F2 | 	cmp	local07, local01 wz
2eed4     10 4E 05 51 |  if_ne	add	fp, #16
2eed8     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2eedc     03 32 46 55 |  if_ne	or	local07, #3
2eee0     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2eee4     10 4E 85 51 |  if_ne	sub	fp, #16
2eee8     28 4E 05 F1 | 	add	fp, #40
2eeec     A7 32 02 FB | 	rdlong	local07, fp
2eef0     04 4E 05 F1 | 	add	fp, #4
2eef4     A7 28 02 FB | 	rdlong	local02, fp
2eef8     2C 4E 85 F1 | 	sub	fp, #44
2eefc     14 33 1A F2 | 	cmp	local07, local02 wcz
2ef00     6C 02 90 1D |  if_a	jmp	#LR__4696
2ef04     2C 4E 05 F1 | 	add	fp, #44
2ef08     A7 32 02 FB | 	rdlong	local07, fp
2ef0c     04 4E 85 F1 | 	sub	fp, #4
2ef10     A7 32 62 FC | 	wrlong	local07, fp
2ef14     08 4E 85 F1 | 	sub	fp, #8
2ef18     A7 10 68 FC | 	wrlong	#8, fp
2ef1c     04 4E 05 F1 | 	add	fp, #4
2ef20     A7 16 68 FC | 	wrlong	#11, fp
2ef24     18 4E 85 F1 | 	sub	fp, #24
2ef28     A7 3A C2 FA | 	rdbyte	local11, fp
2ef2c     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2ef30     02 32 66 F0 | 	shl	local07, #2
2ef34     A7 32 42 FC | 	wrbyte	local07, fp
2ef38     0C 4E 85 F1 | 	sub	fp, #12
2ef3c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2ef3c                 | ' 			continue;
2ef3c     80 FE 9F FD | 	jmp	#LR__4680
2ef40                 | LR__4685
2ef40     14 4E 05 F1 | 	add	fp, #20
2ef44     A7 32 E2 FA | 	rdword	local07, fp
2ef48     14 4E 85 F1 | 	sub	fp, #20
2ef4c     80 32 16 F2 | 	cmp	local07, #128 wc
2ef50     6C 00 90 CD |  if_b	jmp	#LR__4687
2ef54     10 4E 05 F1 | 	add	fp, #16
2ef58     A7 32 C2 FA | 	rdbyte	local07, fp
2ef5c     02 32 46 F5 | 	or	local07, #2
2ef60     A7 32 42 FC | 	wrbyte	local07, fp
2ef64     04 4E 05 F1 | 	add	fp, #4
2ef68     A7 12 E2 FA | 	rdword	arg01, fp
2ef6c     14 4E 85 F1 | 	sub	fp, #20
2ef70     01 00 00 FF 
2ef74     52 15 06 F6 | 	mov	arg02, ##850
2ef78     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2ef7c     14 4E 05 F1 | 	add	fp, #20
2ef80     A7 FA 51 FC | 	wrword	result1, fp
2ef84     A7 32 E2 FA | 	rdword	local07, fp
2ef88     14 4E 85 F1 | 	sub	fp, #20
2ef8c     80 32 CE F7 | 	test	local07, #128 wz
2ef90     2C 00 90 AD |  if_e	jmp	#LR__4686
2ef94     14 4E 05 F1 | 	add	fp, #20
2ef98     A7 28 E2 FA | 	rdword	local02, fp
2ef9c     7F 28 06 F5 | 	and	local02, #127
2efa0     01 00 00 FF 
2efa4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2efa8     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2efac     14 33 C2 FA | 	rdbyte	local07, local02
2efb0     A7 32 52 FC | 	wrword	local07, fp
2efb4     14 4E 85 F1 | 	sub	fp, #20
2efb8     01 00 00 FF 
2efbc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2efc0                 | LR__4686
2efc0                 | LR__4687
2efc0     14 4E 05 F1 | 	add	fp, #20
2efc4     A7 32 E2 FA | 	rdword	local07, fp
2efc8     14 4E 85 F1 | 	sub	fp, #20
2efcc     00 33 16 F2 | 	cmp	local07, #256 wc
2efd0     88 00 90 CD |  if_b	jmp	#LR__4689
2efd4     24 4E 05 F1 | 	add	fp, #36
2efd8     A7 32 02 FB | 	rdlong	local07, fp
2efdc     01 32 86 F1 | 	sub	local07, #1
2efe0     04 4E 85 F1 | 	sub	fp, #4
2efe4     A7 28 02 FB | 	rdlong	local02, fp
2efe8     20 4E 85 F1 | 	sub	fp, #32
2efec     19 29 12 F2 | 	cmp	local02, local07 wc
2eff0     2C 00 90 CD |  if_b	jmp	#LR__4688
2eff4     10 4E 05 F1 | 	add	fp, #16
2eff8     A7 3A C2 FA | 	rdbyte	local11, fp
2effc     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2f000     03 32 46 F5 | 	or	local07, #3
2f004     A7 32 42 FC | 	wrbyte	local07, fp
2f008     14 4E 05 F1 | 	add	fp, #20
2f00c     A7 32 02 FB | 	rdlong	local07, fp
2f010     04 4E 85 F1 | 	sub	fp, #4
2f014     A7 32 62 FC | 	wrlong	local07, fp
2f018     20 4E 85 F1 | 	sub	fp, #32
2f01c                 | ' 				cf |=  0x01  |  0x02 ;
2f01c                 | ' 				i = ni; continue;
2f01c     A0 FD 9F FD | 	jmp	#LR__4680
2f020                 | LR__4688
2f020     04 4E 05 F1 | 	add	fp, #4
2f024     A7 36 02 FB | 	rdlong	local09, fp
2f028     1C 4E 05 F1 | 	add	fp, #28
2f02c     A7 38 02 FB | 	rdlong	local10, fp
2f030     1C 2D 02 F6 | 	mov	local04, local10
2f034     01 2C 06 F1 | 	add	local04, #1
2f038     A7 2C 62 FC | 	wrlong	local04, fp
2f03c     20 36 06 F1 | 	add	local09, #32
2f040     1B 39 02 F1 | 	add	local10, local09
2f044     0C 4E 85 F1 | 	sub	fp, #12
2f048     A7 2A E2 FA | 	rdword	local03, fp
2f04c     14 4E 85 F1 | 	sub	fp, #20
2f050     08 2A 46 F0 | 	shr	local03, #8
2f054     1C 2B 42 FC | 	wrbyte	local03, local10
2f058     D4 00 90 FD | 	jmp	#LR__4695
2f05c                 | LR__4689
2f05c     14 4E 05 F1 | 	add	fp, #20
2f060     A7 32 EA FA | 	rdword	local07, fp wz
2f064     14 4E 85 F1 | 	sub	fp, #20
2f068     20 00 90 AD |  if_e	jmp	#LR__4690
2f06c     A4 01 00 FF 
2f070     FD 13 06 F6 | 	mov	arg01, ##@LR__5323
2f074     14 4E 05 F1 | 	add	fp, #20
2f078     A7 14 E2 FA | 	rdword	arg02, fp
2f07c     14 4E 85 F1 | 	sub	fp, #20
2f080     48 CB BF FD | 	call	#_fatfs_cc_strchr
2f084     00 FA 0D F2 | 	cmp	result1, #0 wz
2f088     20 00 90 AD |  if_e	jmp	#LR__4691
2f08c                 | LR__4690
2f08c     14 4E 05 F1 | 	add	fp, #20
2f090     A7 BE 58 FC | 	wrword	#95, fp
2f094     04 4E 85 F1 | 	sub	fp, #4
2f098     A7 32 C2 FA | 	rdbyte	local07, fp
2f09c     03 32 46 F5 | 	or	local07, #3
2f0a0     A7 32 42 FC | 	wrbyte	local07, fp
2f0a4     10 4E 85 F1 | 	sub	fp, #16
2f0a8     84 00 90 FD | 	jmp	#LR__4694
2f0ac                 | LR__4691
2f0ac     14 4E 05 F1 | 	add	fp, #20
2f0b0     A7 32 E2 FA | 	rdword	local07, fp
2f0b4     14 4E 85 F1 | 	sub	fp, #20
2f0b8     41 32 16 F2 | 	cmp	local07, #65 wc
2f0bc     24 00 90 CD |  if_b	jmp	#LR__4692
2f0c0     14 4E 05 F1 | 	add	fp, #20
2f0c4     A7 26 E2 FA | 	rdword	local01, fp
2f0c8     14 4E 85 F1 | 	sub	fp, #20
2f0cc     5B 26 16 F2 | 	cmp	local01, #91 wc
2f0d0     0C 4E 05 C1 |  if_b	add	fp, #12
2f0d4     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2f0d8     02 32 46 C5 |  if_b	or	local07, #2
2f0dc     A7 32 42 CC |  if_b	wrbyte	local07, fp
2f0e0     0C 4E 85 C1 |  if_b	sub	fp, #12
2f0e4                 | LR__4692
2f0e4     14 4E 05 F1 | 	add	fp, #20
2f0e8     A7 32 E2 FA | 	rdword	local07, fp
2f0ec     14 4E 85 F1 | 	sub	fp, #20
2f0f0     61 32 16 F2 | 	cmp	local07, #97 wc
2f0f4     38 00 90 CD |  if_b	jmp	#LR__4693
2f0f8     14 4E 05 F1 | 	add	fp, #20
2f0fc     A7 26 E2 FA | 	rdword	local01, fp
2f100     14 4E 85 F1 | 	sub	fp, #20
2f104     7B 26 16 F2 | 	cmp	local01, #123 wc
2f108     24 00 90 3D |  if_ae	jmp	#LR__4693
2f10c     0C 4E 05 F1 | 	add	fp, #12
2f110     A7 32 C2 FA | 	rdbyte	local07, fp
2f114     01 32 46 F5 | 	or	local07, #1
2f118     A7 32 42 FC | 	wrbyte	local07, fp
2f11c     08 4E 05 F1 | 	add	fp, #8
2f120     A7 32 E2 FA | 	rdword	local07, fp
2f124     20 32 86 F1 | 	sub	local07, #32
2f128     A7 32 52 FC | 	wrword	local07, fp
2f12c     14 4E 85 F1 | 	sub	fp, #20
2f130                 | LR__4693
2f130                 | LR__4694
2f130                 | LR__4695
2f130     04 4E 05 F1 | 	add	fp, #4
2f134     A7 3A 02 FB | 	rdlong	local11, fp
2f138     1D 37 02 F6 | 	mov	local09, local11
2f13c     1C 4E 05 F1 | 	add	fp, #28
2f140     A7 28 02 FB | 	rdlong	local02, fp
2f144     14 2D 02 F6 | 	mov	local04, local02
2f148     01 2C 06 F1 | 	add	local04, #1
2f14c     A7 2C 62 FC | 	wrlong	local04, fp
2f150     14 39 02 F6 | 	mov	local10, local02
2f154     20 36 06 F1 | 	add	local09, #32
2f158     1B 39 02 F1 | 	add	local10, local09
2f15c     0C 4E 85 F1 | 	sub	fp, #12
2f160     A7 2A E2 FA | 	rdword	local03, fp
2f164     14 4E 85 F1 | 	sub	fp, #20
2f168     1C 2B 42 FC | 	wrbyte	local03, local10
2f16c     50 FC 9F FD | 	jmp	#LR__4680
2f170                 | LR__4696
2f170     04 4E 05 F1 | 	add	fp, #4
2f174     A7 3A 02 FB | 	rdlong	local11, fp
2f178     04 4E 85 F1 | 	sub	fp, #4
2f17c     20 3A 06 F1 | 	add	local11, #32
2f180     1D 33 C2 FA | 	rdbyte	local07, local11
2f184     E5 32 0E F2 | 	cmp	local07, #229 wz
2f188     04 4E 05 A1 |  if_e	add	fp, #4
2f18c     A7 32 02 AB |  if_e	rdlong	local07, fp
2f190     04 4E 85 A1 |  if_e	sub	fp, #4
2f194     20 32 06 A1 |  if_e	add	local07, #32
2f198     19 0B 48 AC |  if_e	wrbyte	#5, local07
2f19c     24 4E 05 F1 | 	add	fp, #36
2f1a0     A7 32 02 FB | 	rdlong	local07, fp
2f1a4     24 4E 85 F1 | 	sub	fp, #36
2f1a8     08 32 0E F2 | 	cmp	local07, #8 wz
2f1ac     0C 4E 05 A1 |  if_e	add	fp, #12
2f1b0     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2f1b4     02 32 66 A0 |  if_e	shl	local07, #2
2f1b8     A7 32 42 AC |  if_e	wrbyte	local07, fp
2f1bc     0C 4E 85 A1 |  if_e	sub	fp, #12
2f1c0     0C 4E 05 F1 | 	add	fp, #12
2f1c4     A7 32 C2 FA | 	rdbyte	local07, fp
2f1c8     0C 4E 85 F1 | 	sub	fp, #12
2f1cc     0C 32 06 F5 | 	and	local07, #12
2f1d0     0C 32 0E F2 | 	cmp	local07, #12 wz
2f1d4     18 00 90 AD |  if_e	jmp	#LR__4697
2f1d8     0C 4E 05 F1 | 	add	fp, #12
2f1dc     A7 26 C2 FA | 	rdbyte	local01, fp
2f1e0     0C 4E 85 F1 | 	sub	fp, #12
2f1e4     03 26 06 F5 | 	and	local01, #3
2f1e8     03 26 0E F2 | 	cmp	local01, #3 wz
2f1ec     14 00 90 5D |  if_ne	jmp	#LR__4698
2f1f0                 | LR__4697
2f1f0     10 4E 05 F1 | 	add	fp, #16
2f1f4     A7 32 C2 FA | 	rdbyte	local07, fp
2f1f8     02 32 46 F5 | 	or	local07, #2
2f1fc     A7 32 42 FC | 	wrbyte	local07, fp
2f200     10 4E 85 F1 | 	sub	fp, #16
2f204                 | LR__4698
2f204     10 4E 05 F1 | 	add	fp, #16
2f208     A7 32 C2 FA | 	rdbyte	local07, fp
2f20c     10 4E 85 F1 | 	sub	fp, #16
2f210     02 32 CE F7 | 	test	local07, #2 wz
2f214     48 00 90 5D |  if_ne	jmp	#LR__4699
2f218     0C 4E 05 F1 | 	add	fp, #12
2f21c     A7 32 C2 FA | 	rdbyte	local07, fp
2f220     0C 4E 85 F1 | 	sub	fp, #12
2f224     01 32 CE F7 | 	test	local07, #1 wz
2f228     10 4E 05 51 |  if_ne	add	fp, #16
2f22c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2f230     10 32 46 55 |  if_ne	or	local07, #16
2f234     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2f238     10 4E 85 51 |  if_ne	sub	fp, #16
2f23c     0C 4E 05 F1 | 	add	fp, #12
2f240     A7 32 C2 FA | 	rdbyte	local07, fp
2f244     0C 4E 85 F1 | 	sub	fp, #12
2f248     04 32 CE F7 | 	test	local07, #4 wz
2f24c     10 4E 05 51 |  if_ne	add	fp, #16
2f250     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2f254     08 32 46 55 |  if_ne	or	local07, #8
2f258     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2f25c     10 4E 85 51 |  if_ne	sub	fp, #16
2f260                 | LR__4699
2f260     04 4E 05 F1 | 	add	fp, #4
2f264     A7 32 02 FB | 	rdlong	local07, fp
2f268     0C 4E 05 F1 | 	add	fp, #12
2f26c     A7 26 C2 FA | 	rdbyte	local01, fp
2f270     10 4E 85 F1 | 	sub	fp, #16
2f274     2B 32 06 F1 | 	add	local07, #43
2f278     19 27 42 FC | 	wrbyte	local01, local07
2f27c                 | ' 	}
2f27c                 | ' 
2f27c                 | ' 	dp->fn[ 11 ] = cf;
2f27c                 | ' 
2f27c                 | ' 	return FR_OK;
2f27c     00 FA 05 F6 | 	mov	result1, #0
2f280                 | LR__4700
2f280     A7 F0 03 F6 | 	mov	ptra, fp
2f284     B2 00 A0 FD | 	call	#popregs_
2f288                 | _fatfs_cc_create_name_ret
2f288     2D 00 64 FD | 	ret
2f28c                 | 
2f28c                 | _fatfs_cc_follow_path
2f28c     02 4A 05 F6 | 	mov	COUNT_, #2
2f290     A8 00 A0 FD | 	call	#pushregs_
2f294     18 F0 07 F1 | 	add	ptra, #24
2f298     04 4E 05 F1 | 	add	fp, #4
2f29c     A7 12 62 FC | 	wrlong	arg01, fp
2f2a0     04 4E 05 F1 | 	add	fp, #4
2f2a4     A7 14 62 FC | 	wrlong	arg02, fp
2f2a8     04 4E 85 F1 | 	sub	fp, #4
2f2ac     A7 FA 01 FB | 	rdlong	result1, fp
2f2b0     FD 26 02 FB | 	rdlong	local01, result1
2f2b4     10 4E 05 F1 | 	add	fp, #16
2f2b8     A7 26 62 FC | 	wrlong	local01, fp
2f2bc     14 4E 85 F1 | 	sub	fp, #20
2f2c0     97 24 48 FB | 	callpa	#(@LR__4712-@LR__4710)>>2,fcache_load_ptr_
2f2c4                 | ' )
2f2c4                 | ' {
2f2c4                 | ' 	FRESULT res;
2f2c4                 | ' 	BYTE ns;
2f2c4                 | ' 	FATFS *fs = dp->obj.fs;
2f2c4                 | ' #line 3034 "ff.c"
2f2c4                 | ' 	{
2f2c4                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2f2c4                 | LR__4710
2f2c4     08 4E 05 F1 | 	add	fp, #8
2f2c8     A7 26 02 FB | 	rdlong	local01, fp
2f2cc     08 4E 85 F1 | 	sub	fp, #8
2f2d0     13 27 C2 FA | 	rdbyte	local01, local01
2f2d4     2F 26 0E F2 | 	cmp	local01, #47 wz
2f2d8     18 00 90 AD |  if_e	jmp	#LR__4711
2f2dc     08 4E 05 F1 | 	add	fp, #8
2f2e0     A7 26 02 FB | 	rdlong	local01, fp
2f2e4     08 4E 85 F1 | 	sub	fp, #8
2f2e8     13 27 C2 FA | 	rdbyte	local01, local01
2f2ec     5C 26 0E F2 | 	cmp	local01, #92 wz
2f2f0     18 00 90 5D |  if_ne	jmp	#LR__4713
2f2f4                 | LR__4711
2f2f4     08 4E 05 F1 | 	add	fp, #8
2f2f8     A7 26 02 FB | 	rdlong	local01, fp
2f2fc     01 26 06 F1 | 	add	local01, #1
2f300     A7 26 62 FC | 	wrlong	local01, fp
2f304     08 4E 85 F1 | 	sub	fp, #8
2f308     B8 FF 9F FD | 	jmp	#LR__4710
2f30c                 | LR__4712
2f30c                 | LR__4713
2f30c     04 4E 05 F1 | 	add	fp, #4
2f310     A7 26 02 FB | 	rdlong	local01, fp
2f314     08 26 06 F1 | 	add	local01, #8
2f318     13 01 68 FC | 	wrlong	#0, local01
2f31c     04 4E 05 F1 | 	add	fp, #4
2f320     A7 26 02 FB | 	rdlong	local01, fp
2f324     08 4E 85 F1 | 	sub	fp, #8
2f328     13 27 C2 FA | 	rdbyte	local01, local01
2f32c     20 26 16 F2 | 	cmp	local01, #32 wc
2f330     30 00 90 3D |  if_ae	jmp	#LR__4714
2f334     04 4E 05 F1 | 	add	fp, #4
2f338     A7 26 02 FB | 	rdlong	local01, fp
2f33c     2B 26 06 F1 | 	add	local01, #43
2f340     13 01 49 FC | 	wrbyte	#128, local01
2f344     A7 12 02 FB | 	rdlong	arg01, fp
2f348     04 4E 85 F1 | 	sub	fp, #4
2f34c     00 14 06 F6 | 	mov	arg02, #0
2f350     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2f354     0C 4E 05 F1 | 	add	fp, #12
2f358     A7 FA 61 FC | 	wrlong	result1, fp
2f35c     0C 4E 85 F1 | 	sub	fp, #12
2f360     1C 01 90 FD | 	jmp	#LR__4718
2f364                 | LR__4714
2f364                 | ' 		for (;;) {
2f364                 | LR__4715
2f364     04 4E 05 F1 | 	add	fp, #4
2f368     A7 12 02 FB | 	rdlong	arg01, fp
2f36c     04 4E 05 F1 | 	add	fp, #4
2f370     A7 14 02 F6 | 	mov	arg02, fp
2f374     08 4E 85 F1 | 	sub	fp, #8
2f378     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2f37c     0C 4E 05 F1 | 	add	fp, #12
2f380     A7 FA 61 FC | 	wrlong	result1, fp
2f384     00 FA 4D F2 | 	cmps	result1, #0 wz
2f388     0C 4E 85 F1 | 	sub	fp, #12
2f38c     F0 00 90 5D |  if_ne	jmp	#LR__4717
2f390     04 4E 05 F1 | 	add	fp, #4
2f394     A7 12 02 FB | 	rdlong	arg01, fp
2f398     04 4E 85 F1 | 	sub	fp, #4
2f39c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2f3a0     0C 4E 05 F1 | 	add	fp, #12
2f3a4     A7 FA 61 FC | 	wrlong	result1, fp
2f3a8     08 4E 85 F1 | 	sub	fp, #8
2f3ac     A7 26 02 FB | 	rdlong	local01, fp
2f3b0     2B 26 06 F1 | 	add	local01, #43
2f3b4     13 27 C2 FA | 	rdbyte	local01, local01
2f3b8     0C 4E 05 F1 | 	add	fp, #12
2f3bc     A7 26 42 FC | 	wrbyte	local01, fp
2f3c0     04 4E 85 F1 | 	sub	fp, #4
2f3c4     A7 26 0A FB | 	rdlong	local01, fp wz
2f3c8     0C 4E 85 F1 | 	sub	fp, #12
2f3cc     34 00 90 AD |  if_e	jmp	#LR__4716
2f3d0     0C 4E 05 F1 | 	add	fp, #12
2f3d4     A7 26 02 FB | 	rdlong	local01, fp
2f3d8     0C 4E 85 F1 | 	sub	fp, #12
2f3dc     04 26 0E F2 | 	cmp	local01, #4 wz
2f3e0     9C 00 90 5D |  if_ne	jmp	#LR__4717
2f3e4     10 4E 05 F1 | 	add	fp, #16
2f3e8     A7 26 C2 FA | 	rdbyte	local01, fp
2f3ec     10 4E 85 F1 | 	sub	fp, #16
2f3f0     04 26 CE F7 | 	test	local01, #4 wz
2f3f4     0C 4E 05 A1 |  if_e	add	fp, #12
2f3f8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2f3fc     0C 4E 85 A1 |  if_e	sub	fp, #12
2f400                 | ' 					}
2f400                 | ' 				}
2f400                 | ' 				break;
2f400     7C 00 90 FD | 	jmp	#LR__4717
2f404                 | LR__4716
2f404     10 4E 05 F1 | 	add	fp, #16
2f408     A7 26 C2 FA | 	rdbyte	local01, fp
2f40c     10 4E 85 F1 | 	sub	fp, #16
2f410     04 26 CE F7 | 	test	local01, #4 wz
2f414     68 00 90 5D |  if_ne	jmp	#LR__4717
2f418     04 4E 05 F1 | 	add	fp, #4
2f41c     A7 26 02 FB | 	rdlong	local01, fp
2f420     04 4E 85 F1 | 	sub	fp, #4
2f424     06 26 06 F1 | 	add	local01, #6
2f428     13 27 C2 FA | 	rdbyte	local01, local01
2f42c     10 26 CE F7 | 	test	local01, #16 wz
2f430     0C 4E 05 A1 |  if_e	add	fp, #12
2f434     A7 0A 68 AC |  if_e	wrlong	#5, fp
2f438     0C 4E 85 A1 |  if_e	sub	fp, #12
2f43c                 | ' 				res = FR_NO_PATH; break;
2f43c     40 00 90 AD |  if_e	jmp	#LR__4717
2f440     04 4E 05 F1 | 	add	fp, #4
2f444     A7 28 02 FB | 	rdlong	local02, fp
2f448     14 27 02 F6 | 	mov	local01, local02
2f44c     10 4E 05 F1 | 	add	fp, #16
2f450     A7 14 02 FB | 	rdlong	arg02, fp
2f454     0A 13 02 F6 | 	mov	arg01, arg02
2f458     34 14 06 F1 | 	add	arg02, #52
2f45c     14 4E 85 F1 | 	sub	fp, #20
2f460     10 28 06 F1 | 	add	local02, #16
2f464     14 29 02 FB | 	rdlong	local02, local02
2f468     FF 29 06 F5 | 	and	local02, #511
2f46c     14 15 02 F1 | 	add	arg02, local02
2f470     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2f474     08 26 06 F1 | 	add	local01, #8
2f478     13 FB 61 FC | 	wrlong	result1, local01
2f47c     E4 FE 9F FD | 	jmp	#LR__4715
2f480                 | LR__4717
2f480                 | LR__4718
2f480                 | ' 			}
2f480                 | ' #line 3090 "ff.c"
2f480                 | ' 			{
2f480                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2f480                 | ' 			}
2f480                 | ' 		}
2f480                 | ' 	}
2f480                 | ' 
2f480                 | ' 	return res;
2f480     0C 4E 05 F1 | 	add	fp, #12
2f484     A7 FA 01 FB | 	rdlong	result1, fp
2f488     0C 4E 85 F1 | 	sub	fp, #12
2f48c     A7 F0 03 F6 | 	mov	ptra, fp
2f490     B2 00 A0 FD | 	call	#popregs_
2f494                 | _fatfs_cc_follow_path_ret
2f494     2D 00 64 FD | 	ret
2f498                 | 
2f498                 | _fatfs_cc_get_ldnumber
2f498     01 00 66 F6 | 	neg	_var01, #1
2f49c     09 03 0A FB | 	rdlong	_var02, arg01 wz
2f4a0     01 05 02 F6 | 	mov	_var03, _var02
2f4a4     01 FA 65 A6 |  if_e	neg	result1, #1
2f4a8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2f4ac     97 10 48 FB | 	callpa	#(@LR__4721-@LR__4720)>>2,fcache_load_ptr_
2f4b0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2f4b0                 | LR__4720
2f4b0     02 07 C2 FA | 	rdbyte	_var04, _var03
2f4b4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2f4b8     20 FA 15 F2 | 	cmp	result1, #32 wc
2f4bc     01 04 06 F1 | 	add	_var03, #1
2f4c0     03 09 02 36 |  if_ae	mov	_var05, _var04
2f4c4     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2f4c8     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2f4cc     E0 FF 9F 1D |  if_a	jmp	#LR__4720
2f4d0                 | LR__4721
2f4d0     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2f4d4     3A 06 0E F2 | 	cmp	_var04, #58 wz
2f4d8     40 00 90 5D |  if_ne	jmp	#LR__4723
2f4dc     01 0A 06 F6 | 	mov	_var06, #1
2f4e0     01 09 C2 FA | 	rdbyte	_var05, _var02
2f4e4     30 08 16 F2 | 	cmp	_var05, #48 wc
2f4e8     1C 00 90 CD |  if_b	jmp	#LR__4722
2f4ec     01 09 C2 FA | 	rdbyte	_var05, _var02
2f4f0     3A 08 16 F2 | 	cmp	_var05, #58 wc
2f4f4     01 0D 02 C6 |  if_b	mov	_var07, _var02
2f4f8     02 0C 06 C1 |  if_b	add	_var07, #2
2f4fc     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2f500     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2f504     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2f508                 | LR__4722
2f508     01 0A 56 F2 | 	cmps	_var06, #1 wc
2f50c     05 01 02 C6 |  if_b	mov	_var01, _var06
2f510     09 05 62 CC |  if_b	wrlong	_var03, arg01
2f514                 | ' 			vol = i;
2f514                 | ' 			*path = tt;
2f514                 | ' 		}
2f514                 | ' 		return vol;
2f514     00 FB 01 F6 | 	mov	result1, _var01
2f518     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2f51c                 | LR__4723
2f51c                 | ' 	}
2f51c                 | ' #line 3170 "ff.c"
2f51c                 | ' 	vol = 0;
2f51c                 | ' 
2f51c                 | ' 	return vol;
2f51c     00 FA 05 F6 | 	mov	result1, #0
2f520                 | _fatfs_cc_get_ldnumber_ret
2f520     2D 00 64 FD | 	ret
2f524                 | 
2f524                 | _fatfs_cc_check_fs
2f524     04 4A 05 F6 | 	mov	COUNT_, #4
2f528     A8 00 A0 FD | 	call	#pushregs_
2f52c     09 27 02 F6 | 	mov	local01, arg01
2f530     03 26 06 F1 | 	add	local01, #3
2f534     13 01 48 FC | 	wrbyte	#0, local01
2f538     2D 26 06 F1 | 	add	local01, #45
2f53c     FF FF FF FF 
2f540     13 FF 6B FC | 	wrlong	##-1, local01
2f544     30 26 86 F1 | 	sub	local01, #48
2f548     13 13 02 F6 | 	mov	arg01, local01
2f54c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2f550     00 FA 0D F2 | 	cmp	result1, #0 wz
2f554     04 FA 05 56 |  if_ne	mov	result1, #4
2f558     94 01 90 5D |  if_ne	jmp	#LR__4734
2f55c     34 26 06 F1 | 	add	local01, #52
2f560     13 13 02 F6 | 	mov	arg01, local01
2f564     FE 13 06 F1 | 	add	arg01, #510
2f568                 | ' {
2f568                 | ' 
2f568                 | ' 	return *((WORD*)ptr);
2f568     09 29 E2 FA | 	rdword	local02, arg01
2f56c     13 2B C2 FA | 	rdbyte	local03, local01
2f570     34 26 86 F1 | 	sub	local01, #52
2f574     15 2D E2 F8 | 	getbyte	local04, local03, #0
2f578     EB 2C 0E F2 | 	cmp	local04, #235 wz
2f57c     15 17 02 56 |  if_ne	mov	arg03, local03
2f580     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2f584     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2f588     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2f58c     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2f590     44 01 90 5D |  if_ne	jmp	#LR__4733
2f594     14 2D 32 F9 | 	getword	local04, local02, #0
2f598     55 00 00 FF 
2f59c     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2f5a0     2C 00 90 5D |  if_ne	jmp	#LR__4730
2f5a4     34 26 06 F1 | 	add	local01, #52
2f5a8     13 13 02 F6 | 	mov	arg01, local01
2f5ac     34 26 86 F1 | 	sub	local01, #52
2f5b0     52 12 06 F1 | 	add	arg01, #82
2f5b4     A5 01 00 FF 
2f5b8     04 14 06 F6 | 	mov	arg02, ##@LR__5324
2f5bc     08 16 06 F6 | 	mov	arg03, #8
2f5c0     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2f5c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5c8                 | ' 			return 0;
2f5c8     00 FA 05 A6 |  if_e	mov	result1, #0
2f5cc     20 01 90 AD |  if_e	jmp	#LR__4734
2f5d0                 | LR__4730
2f5d0     34 26 06 F1 | 	add	local01, #52
2f5d4     13 13 02 F6 | 	mov	arg01, local01
2f5d8     0B 12 06 F1 | 	add	arg01, #11
2f5dc                 | ' {
2f5dc                 | ' 
2f5dc                 | ' 	return *((WORD*)ptr);
2f5dc     09 FB E1 FA | 	rdword	result1, arg01
2f5e0     0D 26 06 F1 | 	add	local01, #13
2f5e4     13 2B C2 FA | 	rdbyte	local03, local01
2f5e8     41 26 86 F1 | 	sub	local01, #65
2f5ec     FD 2C 32 F9 | 	getword	local04, result1, #0
2f5f0     FD 14 32 F9 | 	getword	arg02, result1, #0
2f5f4     01 14 86 F1 | 	sub	arg02, #1
2f5f8     0A 2D CA F7 | 	test	local04, arg02 wz
2f5fc     D8 00 90 5D |  if_ne	jmp	#LR__4732
2f600     FD 14 32 F9 | 	getword	arg02, result1, #0
2f604     01 00 00 FF 
2f608     00 14 16 F2 | 	cmp	arg02, ##512 wc
2f60c     C8 00 90 CD |  if_b	jmp	#LR__4732
2f610     FD 14 32 F9 | 	getword	arg02, result1, #0
2f614     01 00 00 FF 
2f618     01 14 16 F2 | 	cmp	arg02, ##513 wc
2f61c     B8 00 90 3D |  if_ae	jmp	#LR__4732
2f620     15 13 02 F6 | 	mov	arg01, local03
2f624     07 12 4E F7 | 	zerox	arg01, #7 wz
2f628     AC 00 90 AD |  if_e	jmp	#LR__4732
2f62c     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2f630     15 2B E2 F8 | 	getbyte	local03, local03, #0
2f634     01 2A 86 F1 | 	sub	local03, #1
2f638     15 13 CA F7 | 	test	arg01, local03 wz
2f63c     98 00 90 5D |  if_ne	jmp	#LR__4732
2f640     34 26 06 F1 | 	add	local01, #52
2f644     13 13 02 F6 | 	mov	arg01, local01
2f648     34 26 86 F1 | 	sub	local01, #52
2f64c     0E 12 06 F1 | 	add	arg01, #14
2f650                 | ' {
2f650                 | ' 
2f650                 | ' 	return *((WORD*)ptr);
2f650     09 FB E9 FA | 	rdword	result1, arg01 wz
2f654     80 00 90 AD |  if_e	jmp	#LR__4732
2f658     44 26 06 F1 | 	add	local01, #68
2f65c     13 13 C2 FA | 	rdbyte	arg01, local01
2f660     44 26 86 F1 | 	sub	local01, #68
2f664     01 12 86 F1 | 	sub	arg01, #1
2f668     02 12 16 F2 | 	cmp	arg01, #2 wc
2f66c     68 00 90 3D |  if_ae	jmp	#LR__4732
2f670     34 26 06 F1 | 	add	local01, #52
2f674     13 13 02 F6 | 	mov	arg01, local01
2f678     34 26 86 F1 | 	sub	local01, #52
2f67c     11 12 06 F1 | 	add	arg01, #17
2f680                 | ' {
2f680                 | ' 
2f680                 | ' 	return *((WORD*)ptr);
2f680     09 FB E9 FA | 	rdword	result1, arg01 wz
2f684     50 00 90 AD |  if_e	jmp	#LR__4732
2f688     34 26 06 F1 | 	add	local01, #52
2f68c     13 13 02 F6 | 	mov	arg01, local01
2f690     34 26 86 F1 | 	sub	local01, #52
2f694     13 12 06 F1 | 	add	arg01, #19
2f698                 | ' {
2f698                 | ' 
2f698                 | ' 	return *((WORD*)ptr);
2f698     09 FB E1 FA | 	rdword	result1, arg01
2f69c     FD 2A 32 F9 | 	getword	local03, result1, #0
2f6a0     80 2A 16 F2 | 	cmp	local03, #128 wc
2f6a4     20 00 90 3D |  if_ae	jmp	#LR__4731
2f6a8     34 26 06 F1 | 	add	local01, #52
2f6ac     13 13 02 F6 | 	mov	arg01, local01
2f6b0     34 26 86 F1 | 	sub	local01, #52
2f6b4     20 12 06 F1 | 	add	arg01, #32
2f6b8                 | ' {
2f6b8                 | ' 
2f6b8                 | ' 	return *((DWORD*)ptr);
2f6b8     09 FB 01 FB | 	rdlong	result1, arg01
2f6bc     80 00 00 FF 
2f6c0     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2f6c4     10 00 90 CD |  if_b	jmp	#LR__4732
2f6c8                 | LR__4731
2f6c8     4A 26 06 F1 | 	add	local01, #74
2f6cc                 | ' {
2f6cc                 | ' 
2f6cc                 | ' 	return *((WORD*)ptr);
2f6cc     13 FB E9 FA | 	rdword	result1, local01 wz
2f6d0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2f6d0                 | ' 			&& ld_word(fs->win +  14 ) != 0
2f6d0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2f6d0                 | ' 			&& ld_word(fs->win +  17 ) != 0
2f6d0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2f6d0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2f6d0                 | ' 				return 0;
2f6d0     00 FA 05 56 |  if_ne	mov	result1, #0
2f6d4     18 00 90 5D |  if_ne	jmp	#LR__4734
2f6d8                 | LR__4732
2f6d8                 | LR__4733
2f6d8                 | ' 		}
2f6d8                 | ' 	}
2f6d8                 | ' 	return sign == 0xAA55 ? 2 : 3;
2f6d8     14 2B 32 F9 | 	getword	local03, local02, #0
2f6dc     55 00 00 FF 
2f6e0     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2f6e4     02 2C 06 A6 |  if_e	mov	local04, #2
2f6e8     03 2C 06 56 |  if_ne	mov	local04, #3
2f6ec     16 FB 01 F6 | 	mov	result1, local04
2f6f0                 | LR__4734
2f6f0     A7 F0 03 F6 | 	mov	ptra, fp
2f6f4     B2 00 A0 FD | 	call	#popregs_
2f6f8                 | _fatfs_cc_check_fs_ret
2f6f8     2D 00 64 FD | 	ret
2f6fc                 | 
2f6fc                 | _fatfs_cc_find_volume
2f6fc     05 4A 05 F6 | 	mov	COUNT_, #5
2f700     A8 00 A0 FD | 	call	#pushregs_
2f704     24 F0 07 F1 | 	add	ptra, #36
2f708     09 27 02 F6 | 	mov	local01, arg01
2f70c     0A 29 02 F6 | 	mov	local02, arg02
2f710     13 13 02 F6 | 	mov	arg01, local01
2f714     00 14 06 F6 | 	mov	arg02, #0
2f718     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2f71c     02 FA 0D F2 | 	cmp	result1, #2 wz
2f720     0C 00 90 AD |  if_e	jmp	#LR__4740
2f724     03 FA 15 F2 | 	cmp	result1, #3 wc
2f728     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2f72c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4748
2f730                 | LR__4740
2f730                 | ' 	for (i = 0; i < 4; i++) {
2f730     00 2A 06 F6 | 	mov	local03, #0
2f734     97 26 48 FB | 	callpa	#(@LR__4742-@LR__4741)>>2,fcache_load_ptr_
2f738                 | LR__4741
2f738     04 2A 16 F2 | 	cmp	local03, #4 wc
2f73c     44 00 90 3D |  if_ae	jmp	#LR__4743
2f740     15 2D 02 F6 | 	mov	local04, local03
2f744     02 2C 66 F0 | 	shl	local04, #2
2f748     14 4E 05 F1 | 	add	fp, #20
2f74c     A7 2C 02 F1 | 	add	local04, fp
2f750     34 26 06 F1 | 	add	local01, #52
2f754     13 13 02 F6 | 	mov	arg01, local01
2f758     34 26 86 F1 | 	sub	local01, #52
2f75c     BE 13 06 F1 | 	add	arg01, #446
2f760     15 15 02 F6 | 	mov	arg02, local03
2f764     04 14 66 F0 | 	shl	arg02, #4
2f768     0A 13 02 F1 | 	add	arg01, arg02
2f76c     08 12 06 F1 | 	add	arg01, #8
2f770                 | ' {
2f770                 | ' 
2f770                 | ' 	return *((DWORD*)ptr);
2f770     09 FB 01 FB | 	rdlong	result1, arg01
2f774     14 4E 85 F1 | 	sub	fp, #20
2f778     16 FB 61 FC | 	wrlong	result1, local04
2f77c     01 2A 06 F1 | 	add	local03, #1
2f780     B4 FF 9F FD | 	jmp	#LR__4741
2f784                 | LR__4742
2f784                 | LR__4743
2f784     00 28 0E F2 | 	cmp	local02, #0 wz
2f788     14 2D 02 56 |  if_ne	mov	local04, local02
2f78c     01 2C 86 51 |  if_ne	sub	local04, #1
2f790     00 2C 06 A6 |  if_e	mov	local04, #0
2f794     16 2B 02 F6 | 	mov	local03, local04
2f798                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2f798                 | ' 	}
2f798                 | ' 	i = part ? part - 1 : 0;
2f798                 | ' 	do {
2f798                 | LR__4744
2f798     15 2D 02 F6 | 	mov	local04, local03
2f79c     02 2C 66 F0 | 	shl	local04, #2
2f7a0     14 4E 05 F1 | 	add	fp, #20
2f7a4     A7 2C 02 F1 | 	add	local04, fp
2f7a8     16 2D 0A FB | 	rdlong	local04, local04 wz
2f7ac     14 4E 85 F1 | 	sub	fp, #20
2f7b0     28 00 90 AD |  if_e	jmp	#LR__4745
2f7b4     15 2D 02 F6 | 	mov	local04, local03
2f7b8     02 2C 66 F0 | 	shl	local04, #2
2f7bc     14 4E 05 F1 | 	add	fp, #20
2f7c0     A7 2C 02 F1 | 	add	local04, fp
2f7c4     16 15 02 FB | 	rdlong	arg02, local04
2f7c8     13 13 02 F6 | 	mov	arg01, local01
2f7cc     14 4E 85 F1 | 	sub	fp, #20
2f7d0     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2f7d4     FD 2C 02 F6 | 	mov	local04, result1
2f7d8     04 00 90 FD | 	jmp	#LR__4746
2f7dc                 | LR__4745
2f7dc     03 2C 06 F6 | 	mov	local04, #3
2f7e0                 | LR__4746
2f7e0     16 2F 02 F6 | 	mov	local05, local04
2f7e4     00 28 0E F2 | 	cmp	local02, #0 wz
2f7e8     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2f7ec     0C 00 90 8D |  if_c_and_z	jmp	#LR__4747
2f7f0     01 2A 06 A1 |  if_e	add	local03, #1
2f7f4     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2f7f8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4744
2f7fc                 | LR__4747
2f7fc                 | ' 	return fmt;
2f7fc     17 FB 01 F6 | 	mov	result1, local05
2f800                 | LR__4748
2f800     A7 F0 03 F6 | 	mov	ptra, fp
2f804     B2 00 A0 FD | 	call	#popregs_
2f808                 | _fatfs_cc_find_volume_ret
2f808     2D 00 64 FD | 	ret
2f80c                 | 
2f80c                 | _fatfs_cc_mount_volume
2f80c     0B 4A 05 F6 | 	mov	COUNT_, #11
2f810     A8 00 A0 FD | 	call	#pushregs_
2f814     0A 27 02 F6 | 	mov	local01, arg02
2f818     0B 29 02 F6 | 	mov	local02, arg03
2f81c     13 01 68 FC | 	wrlong	#0, local01
2f820     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f824     FD 2A 02 F6 | 	mov	local03, result1
2f828     00 2A 56 F2 | 	cmps	local03, #0 wc
2f82c     0B FA 05 C6 |  if_b	mov	result1, #11
2f830     3C 05 90 CD |  if_b	jmp	#LR__4760
2f834     15 17 02 F6 | 	mov	arg03, local03
2f838     02 16 66 F0 | 	shl	arg03, #2
2f83c     F2 16 02 F1 | 	add	arg03, objptr
2f840     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2f844     0C FA 05 A6 |  if_e	mov	result1, #12
2f848     24 05 90 AD |  if_e	jmp	#LR__4760
2f84c     13 2D 62 FC | 	wrlong	local04, local01
2f850     14 29 E2 F8 | 	getbyte	local02, local02, #0
2f854     FE 28 06 F5 | 	and	local02, #254
2f858     16 17 CA FA | 	rdbyte	arg03, local04 wz
2f85c     4C 00 90 AD |  if_e	jmp	#LR__4751
2f860     01 2C 06 F1 | 	add	local04, #1
2f864     16 13 CA FA | 	rdbyte	arg01, local04 wz
2f868     01 2C 86 F1 | 	sub	local04, #1
2f86c     01 FA 05 56 |  if_ne	mov	result1, #1
2f870                 | ' 
2f870                 | ' 	return Stat;
2f870     01 00 00 AF 
2f874     20 E4 05 A1 |  if_e	add	objptr, ##544
2f878     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f87c     01 00 00 AF 
2f880     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f884     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2f888     01 16 CE F7 | 	test	arg03, #1 wz
2f88c     1C 00 90 5D |  if_ne	jmp	#LR__4750
2f890     00 28 0E F2 | 	cmp	local02, #0 wz
2f894     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2f898     04 FA CD 57 |  if_ne	test	result1, #4 wz
2f89c                 | ' 				return FR_WRITE_PROTECTED;
2f89c     0A FA 05 56 |  if_ne	mov	result1, #10
2f8a0     CC 04 90 5D |  if_ne	jmp	#LR__4760
2f8a4                 | ' 			}
2f8a4                 | ' 			return FR_OK;
2f8a4     00 FA 05 F6 | 	mov	result1, #0
2f8a8     C4 04 90 FD | 	jmp	#LR__4760
2f8ac                 | LR__4750
2f8ac                 | LR__4751
2f8ac     16 01 48 FC | 	wrbyte	#0, local04
2f8b0     01 2C 06 F1 | 	add	local04, #1
2f8b4     16 2B 42 FC | 	wrbyte	local03, local04
2f8b8     16 13 C2 FA | 	rdbyte	arg01, local04
2f8bc     01 2C 86 F1 | 	sub	local04, #1
2f8c0     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2f8c4     FD 16 02 F6 | 	mov	arg03, result1
2f8c8     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2f8cc     01 2E CE F7 | 	test	local05, #1 wz
2f8d0                 | ' 		return FR_NOT_READY;
2f8d0     03 FA 05 56 |  if_ne	mov	result1, #3
2f8d4     98 04 90 5D |  if_ne	jmp	#LR__4760
2f8d8     00 28 0E F2 | 	cmp	local02, #0 wz
2f8dc     0B 2F 02 56 |  if_ne	mov	local05, arg03
2f8e0     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2f8e4     04 2E CE 57 |  if_ne	test	local05, #4 wz
2f8e8                 | ' 		return FR_WRITE_PROTECTED;
2f8e8     0A FA 05 56 |  if_ne	mov	result1, #10
2f8ec     80 04 90 5D |  if_ne	jmp	#LR__4760
2f8f0     16 13 02 F6 | 	mov	arg01, local04
2f8f4     00 14 06 F6 | 	mov	arg02, #0
2f8f8     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f8fc     FD 12 02 F6 | 	mov	arg01, result1
2f900     04 12 0E F2 | 	cmp	arg01, #4 wz
2f904     01 FA 05 A6 |  if_e	mov	result1, #1
2f908     64 04 90 AD |  if_e	jmp	#LR__4760
2f90c     02 12 16 F2 | 	cmp	arg01, #2 wc
2f910     0D FA 05 36 |  if_ae	mov	result1, #13
2f914     58 04 90 3D |  if_ae	jmp	#LR__4760
2f918     30 2C 06 F1 | 	add	local04, #48
2f91c     16 31 02 FB | 	rdlong	local06, local04
2f920     04 2C 06 F1 | 	add	local04, #4
2f924     16 13 02 F6 | 	mov	arg01, local04
2f928     34 2C 86 F1 | 	sub	local04, #52
2f92c     0B 12 06 F1 | 	add	arg01, #11
2f930                 | ' {
2f930                 | ' 
2f930                 | ' 	return *((WORD*)ptr);
2f930     09 FB E1 FA | 	rdword	result1, arg01
2f934     01 00 00 FF 
2f938     00 FA 0D F2 | 	cmp	result1, ##512 wz
2f93c     0D FA 05 56 |  if_ne	mov	result1, #13
2f940     2C 04 90 5D |  if_ne	jmp	#LR__4760
2f944     34 2C 06 F1 | 	add	local04, #52
2f948     16 13 02 F6 | 	mov	arg01, local04
2f94c     34 2C 86 F1 | 	sub	local04, #52
2f950     16 12 06 F1 | 	add	arg01, #22
2f954                 | ' {
2f954                 | ' 
2f954                 | ' 	return *((WORD*)ptr);
2f954     09 FB E1 FA | 	rdword	result1, arg01
2f958     FD 32 0A F6 | 	mov	local07, result1 wz
2f95c     18 00 90 5D |  if_ne	jmp	#LR__4752
2f960     34 2C 06 F1 | 	add	local04, #52
2f964     16 13 02 F6 | 	mov	arg01, local04
2f968     34 2C 86 F1 | 	sub	local04, #52
2f96c     24 12 06 F1 | 	add	arg01, #36
2f970                 | ' {
2f970                 | ' 
2f970                 | ' 	return *((DWORD*)ptr);
2f970     09 FB 01 FB | 	rdlong	result1, arg01
2f974     FD 32 02 F6 | 	mov	local07, result1
2f978                 | LR__4752
2f978     1C 2C 06 F1 | 	add	local04, #28
2f97c     16 33 62 FC | 	wrlong	local07, local04
2f980     28 2C 06 F1 | 	add	local04, #40
2f984     16 2F C2 FA | 	rdbyte	local05, local04
2f988     42 2C 86 F1 | 	sub	local04, #66
2f98c     16 2F 42 FC | 	wrbyte	local05, local04
2f990     16 2F C2 FA | 	rdbyte	local05, local04
2f994     02 2C 86 F1 | 	sub	local04, #2
2f998     01 2E 0E F2 | 	cmp	local05, #1 wz
2f99c     02 2C 06 51 |  if_ne	add	local04, #2
2f9a0     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2f9a4     02 2C 86 51 |  if_ne	sub	local04, #2
2f9a8     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2f9ac     0D FA 05 56 |  if_ne	mov	result1, #13
2f9b0     BC 03 90 5D |  if_ne	jmp	#LR__4760
2f9b4     02 2C 06 F1 | 	add	local04, #2
2f9b8     16 2F C2 FA | 	rdbyte	local05, local04
2f9bc     17 33 02 FD | 	qmul	local07, local05
2f9c0     3F 2C 06 F1 | 	add	local04, #63
2f9c4     16 2F C2 FA | 	rdbyte	local05, local04
2f9c8     37 2C 86 F1 | 	sub	local04, #55
2f9cc     16 2F 52 FC | 	wrword	local05, local04
2f9d0     16 2F EA FA | 	rdword	local05, local04 wz
2f9d4     0A 2C 86 F1 | 	sub	local04, #10
2f9d8     18 32 62 FD | 	getqx	local07
2f9dc     20 00 90 AD |  if_e	jmp	#LR__4753
2f9e0     0A 2C 06 F1 | 	add	local04, #10
2f9e4     16 2F E2 FA | 	rdword	local05, local04
2f9e8     17 2B 32 F9 | 	getword	local03, local05, #0
2f9ec     0A 2C 86 F1 | 	sub	local04, #10
2f9f0     17 2F 32 F9 | 	getword	local05, local05, #0
2f9f4     01 2E 86 F1 | 	sub	local05, #1
2f9f8     17 2B CA F7 | 	test	local03, local05 wz
2f9fc     08 00 90 AD |  if_e	jmp	#LR__4754
2fa00                 | LR__4753
2fa00     0D FA 05 F6 | 	mov	result1, #13
2fa04     68 03 90 FD | 	jmp	#LR__4760
2fa08                 | LR__4754
2fa08     34 2C 06 F1 | 	add	local04, #52
2fa0c     16 13 02 F6 | 	mov	arg01, local04
2fa10     11 12 06 F1 | 	add	arg01, #17
2fa14                 | ' {
2fa14                 | ' 
2fa14                 | ' 	return *((WORD*)ptr);
2fa14     09 FB E1 FA | 	rdword	result1, arg01
2fa18     2C 2C 86 F1 | 	sub	local04, #44
2fa1c     16 FB 51 FC | 	wrword	result1, local04
2fa20     16 2F E2 FA | 	rdword	local05, local04
2fa24     08 2C 86 F1 | 	sub	local04, #8
2fa28     17 13 52 F6 | 	abs	arg01, local05 wc
2fa2c     09 13 42 F8 | 	getnib	arg01, arg01, #0
2fa30     09 13 8A F6 | 	negc	arg01, arg01 wz
2fa34     0D FA 05 56 |  if_ne	mov	result1, #13
2fa38     34 03 90 5D |  if_ne	jmp	#LR__4760
2fa3c     34 2C 06 F1 | 	add	local04, #52
2fa40     16 13 02 F6 | 	mov	arg01, local04
2fa44     34 2C 86 F1 | 	sub	local04, #52
2fa48     13 12 06 F1 | 	add	arg01, #19
2fa4c                 | ' {
2fa4c                 | ' 
2fa4c                 | ' 	return *((WORD*)ptr);
2fa4c     09 FB E1 FA | 	rdword	result1, arg01
2fa50     FD 34 0A F6 | 	mov	local08, result1 wz
2fa54     34 2C 06 A1 |  if_e	add	local04, #52
2fa58     16 13 02 A6 |  if_e	mov	arg01, local04
2fa5c     34 2C 86 A1 |  if_e	sub	local04, #52
2fa60     20 12 06 A1 |  if_e	add	arg01, #32
2fa64                 | ' {
2fa64                 | ' 
2fa64                 | ' 	return *((DWORD*)ptr);
2fa64     09 35 02 AB |  if_e	rdlong	local08, arg01
2fa68     34 2C 06 F1 | 	add	local04, #52
2fa6c     16 13 02 F6 | 	mov	arg01, local04
2fa70     34 2C 86 F1 | 	sub	local04, #52
2fa74     0E 12 06 F1 | 	add	arg01, #14
2fa78                 | ' {
2fa78                 | ' 
2fa78                 | ' 	return *((WORD*)ptr);
2fa78     09 FB E1 FA | 	rdword	result1, arg01
2fa7c     FD 12 02 F6 | 	mov	arg01, result1
2fa80     09 2F 02 F6 | 	mov	local05, arg01
2fa84     0F 2E 4E F7 | 	zerox	local05, #15 wz
2fa88     0D FA 05 A6 |  if_e	mov	result1, #13
2fa8c     E0 02 90 AD |  if_e	jmp	#LR__4760
2fa90     09 37 32 F9 | 	getword	local09, arg01, #0
2fa94     19 37 02 F1 | 	add	local09, local07
2fa98     08 2C 06 F1 | 	add	local04, #8
2fa9c     16 2F E2 FA | 	rdword	local05, local04
2faa0     08 2C 86 F1 | 	sub	local04, #8
2faa4     17 2F 52 F6 | 	abs	local05, local05 wc
2faa8     04 2E 46 F0 | 	shr	local05, #4
2faac     17 37 82 F3 | 	sumc	local09, local05
2fab0     1B 35 12 F2 | 	cmp	local08, local09 wc
2fab4     0D FA 05 C6 |  if_b	mov	result1, #13
2fab8     B4 02 90 CD |  if_b	jmp	#LR__4760
2fabc     1B 35 82 F1 | 	sub	local08, local09
2fac0     0A 2C 06 F1 | 	add	local04, #10
2fac4     16 2F E2 FA | 	rdword	local05, local04
2fac8     17 35 12 FD | 	qdiv	local08, local05
2facc     0A 2C 86 F1 | 	sub	local04, #10
2fad0     18 2E 62 FD | 	getqx	local05
2fad4     00 2E 0E F2 | 	cmp	local05, #0 wz
2fad8     0D FA 05 A6 |  if_e	mov	result1, #13
2fadc     90 02 90 AD |  if_e	jmp	#LR__4760
2fae0     00 38 06 F6 | 	mov	local10, #0
2fae4     FF FF 07 FF 
2fae8     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2faec     03 38 06 C6 |  if_b	mov	local10, #3
2faf0     7F 00 00 FF 
2faf4     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2faf8     02 38 06 C6 |  if_b	mov	local10, #2
2fafc     07 00 00 FF 
2fb00     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2fb04     01 38 06 C6 |  if_b	mov	local10, #1
2fb08     00 38 0E F2 | 	cmp	local10, #0 wz
2fb0c     0D FA 05 A6 |  if_e	mov	result1, #13
2fb10     5C 02 90 AD |  if_e	jmp	#LR__4760
2fb14     02 2E 06 F1 | 	add	local05, #2
2fb18     18 2C 06 F1 | 	add	local04, #24
2fb1c     16 2F 62 FC | 	wrlong	local05, local04
2fb20     08 2C 06 F1 | 	add	local04, #8
2fb24     16 31 62 FC | 	wrlong	local06, local04
2fb28     18 2F 02 F6 | 	mov	local05, local06
2fb2c     09 13 32 F9 | 	getword	arg01, arg01, #0
2fb30     09 2F 02 F1 | 	add	local05, arg01
2fb34     04 2C 06 F1 | 	add	local04, #4
2fb38     16 2F 62 FC | 	wrlong	local05, local04
2fb3c     18 2F 02 F6 | 	mov	local05, local06
2fb40     1B 2F 02 F1 | 	add	local05, local09
2fb44     08 2C 06 F1 | 	add	local04, #8
2fb48     16 2F 62 FC | 	wrlong	local05, local04
2fb4c     2C 2C 86 F1 | 	sub	local04, #44
2fb50     03 38 0E F2 | 	cmp	local10, #3 wz
2fb54     5C 00 90 5D |  if_ne	jmp	#LR__4755
2fb58     34 2C 06 F1 | 	add	local04, #52
2fb5c     16 13 02 F6 | 	mov	arg01, local04
2fb60     34 2C 86 F1 | 	sub	local04, #52
2fb64     2A 12 06 F1 | 	add	arg01, #42
2fb68                 | ' {
2fb68                 | ' 
2fb68                 | ' 	return *((WORD*)ptr);
2fb68     09 FB E9 FA | 	rdword	result1, arg01 wz
2fb6c     0D FA 05 56 |  if_ne	mov	result1, #13
2fb70     FC 01 90 5D |  if_ne	jmp	#LR__4760
2fb74     08 2C 06 F1 | 	add	local04, #8
2fb78     16 2F EA FA | 	rdword	local05, local04 wz
2fb7c     08 2C 86 F1 | 	sub	local04, #8
2fb80     0D FA 05 56 |  if_ne	mov	result1, #13
2fb84     E8 01 90 5D |  if_ne	jmp	#LR__4760
2fb88     34 2C 06 F1 | 	add	local04, #52
2fb8c     16 13 02 F6 | 	mov	arg01, local04
2fb90     2C 12 06 F1 | 	add	arg01, #44
2fb94                 | ' {
2fb94                 | ' 
2fb94                 | ' 	return *((DWORD*)ptr);
2fb94     09 FB 01 FB | 	rdlong	result1, arg01
2fb98     0C 2C 86 F1 | 	sub	local04, #12
2fb9c     16 FB 61 FC | 	wrlong	result1, local04
2fba0     10 2C 86 F1 | 	sub	local04, #16
2fba4     16 3B 02 FB | 	rdlong	local11, local04
2fba8     18 2C 86 F1 | 	sub	local04, #24
2fbac     02 3A 66 F0 | 	shl	local11, #2
2fbb0     6C 00 90 FD | 	jmp	#LR__4757
2fbb4                 | LR__4755
2fbb4     08 2C 06 F1 | 	add	local04, #8
2fbb8     16 2F EA FA | 	rdword	local05, local04 wz
2fbbc     08 2C 86 F1 | 	sub	local04, #8
2fbc0     0D FA 05 A6 |  if_e	mov	result1, #13
2fbc4     A8 01 90 AD |  if_e	jmp	#LR__4760
2fbc8     24 2C 06 F1 | 	add	local04, #36
2fbcc     16 2F 02 FB | 	rdlong	local05, local04
2fbd0     19 2F 02 F1 | 	add	local05, local07
2fbd4     04 2C 06 F1 | 	add	local04, #4
2fbd8     16 2F 62 FC | 	wrlong	local05, local04
2fbdc     28 2C 86 F1 | 	sub	local04, #40
2fbe0     02 38 0E F2 | 	cmp	local10, #2 wz
2fbe4     18 2C 06 A1 |  if_e	add	local04, #24
2fbe8     16 2F 02 AB |  if_e	rdlong	local05, local04
2fbec     18 2C 86 A1 |  if_e	sub	local04, #24
2fbf0     01 2E 66 A0 |  if_e	shl	local05, #1
2fbf4     24 00 90 AD |  if_e	jmp	#LR__4756
2fbf8     18 2C 06 F1 | 	add	local04, #24
2fbfc     16 3B 02 FB | 	rdlong	local11, local04
2fc00     1D 2F 02 F6 | 	mov	local05, local11
2fc04     01 2E 66 F0 | 	shl	local05, #1
2fc08     1D 2F 02 F1 | 	add	local05, local11
2fc0c     01 2E 46 F0 | 	shr	local05, #1
2fc10     18 2C 86 F1 | 	sub	local04, #24
2fc14     01 3A 06 F5 | 	and	local11, #1
2fc18     1D 2F 02 F1 | 	add	local05, local11
2fc1c                 | LR__4756
2fc1c     17 3B 02 F6 | 	mov	local11, local05
2fc20                 | LR__4757
2fc20     FF 3B 06 F1 | 	add	local11, #511
2fc24     09 3A 46 F0 | 	shr	local11, #9
2fc28     1C 2C 06 F1 | 	add	local04, #28
2fc2c     16 17 02 FB | 	rdlong	arg03, local04
2fc30     1C 2C 86 F1 | 	sub	local04, #28
2fc34     1D 17 12 F2 | 	cmp	arg03, local11 wc
2fc38     0D FA 05 C6 |  if_b	mov	result1, #13
2fc3c     30 01 90 CD |  if_b	jmp	#LR__4760
2fc40     14 2C 06 F1 | 	add	local04, #20
2fc44     FF FF FF FF 
2fc48     16 FF 6B FC | 	wrlong	##-1, local04
2fc4c     04 2C 86 F1 | 	sub	local04, #4
2fc50     FF FF FF FF 
2fc54     16 FF 6B FC | 	wrlong	##-1, local04
2fc58     0C 2C 86 F1 | 	sub	local04, #12
2fc5c     16 01 49 FC | 	wrbyte	#128, local04
2fc60     04 2C 86 F1 | 	sub	local04, #4
2fc64     03 38 0E F2 | 	cmp	local10, #3 wz
2fc68     D0 00 90 5D |  if_ne	jmp	#LR__4759
2fc6c     34 2C 06 F1 | 	add	local04, #52
2fc70     16 13 02 F6 | 	mov	arg01, local04
2fc74     34 2C 86 F1 | 	sub	local04, #52
2fc78     30 12 06 F1 | 	add	arg01, #48
2fc7c                 | ' {
2fc7c                 | ' 
2fc7c                 | ' 	return *((WORD*)ptr);
2fc7c     09 FB E1 FA | 	rdword	result1, arg01
2fc80     FD 2E 32 F9 | 	getword	local05, result1, #0
2fc84     01 2E 0E F2 | 	cmp	local05, #1 wz
2fc88     B0 00 90 5D |  if_ne	jmp	#LR__4759
2fc8c     01 30 06 F1 | 	add	local06, #1
2fc90     16 13 02 F6 | 	mov	arg01, local04
2fc94     18 15 02 F6 | 	mov	arg02, local06
2fc98     CC CD BF FD | 	call	#_fatfs_cc_move_window
2fc9c     00 FA 0D F2 | 	cmp	result1, #0 wz
2fca0     98 00 90 5D |  if_ne	jmp	#LR__4759
2fca4     04 2C 06 F1 | 	add	local04, #4
2fca8     16 01 48 FC | 	wrbyte	#0, local04
2fcac     30 2C 06 F1 | 	add	local04, #48
2fcb0     16 13 02 F6 | 	mov	arg01, local04
2fcb4     34 2C 86 F1 | 	sub	local04, #52
2fcb8     FE 13 06 F1 | 	add	arg01, #510
2fcbc                 | ' {
2fcbc                 | ' 
2fcbc                 | ' 	return *((WORD*)ptr);
2fcbc     09 FB E1 FA | 	rdword	result1, arg01
2fcc0     FD 2E 32 F9 | 	getword	local05, result1, #0
2fcc4     55 00 00 FF 
2fcc8     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2fccc     34 2C 06 A1 |  if_e	add	local04, #52
2fcd0     16 13 02 A6 |  if_e	mov	arg01, local04
2fcd4     34 2C 86 A1 |  if_e	sub	local04, #52
2fcd8                 | ' {
2fcd8                 | ' 
2fcd8                 | ' 	return *((DWORD*)ptr);
2fcd8     09 FB 01 AB |  if_e	rdlong	result1, arg01
2fcdc     A9 B0 20 AF 
2fce0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2fce4     54 00 90 5D |  if_ne	jmp	#LR__4758
2fce8     34 2C 06 F1 | 	add	local04, #52
2fcec     16 13 02 F6 | 	mov	arg01, local04
2fcf0     34 2C 86 F1 | 	sub	local04, #52
2fcf4     E4 13 06 F1 | 	add	arg01, #484
2fcf8                 | ' {
2fcf8                 | ' 
2fcf8                 | ' 	return *((DWORD*)ptr);
2fcf8     09 FB 01 FB | 	rdlong	result1, arg01
2fcfc     B9 A0 30 FF 
2fd00     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2fd04     34 00 90 5D |  if_ne	jmp	#LR__4758
2fd08     34 2C 06 F1 | 	add	local04, #52
2fd0c     16 13 02 F6 | 	mov	arg01, local04
2fd10     E8 13 06 F1 | 	add	arg01, #488
2fd14                 | ' {
2fd14                 | ' 
2fd14                 | ' 	return *((DWORD*)ptr);
2fd14     09 FB 01 FB | 	rdlong	result1, arg01
2fd18     20 2C 86 F1 | 	sub	local04, #32
2fd1c     16 FB 61 FC | 	wrlong	result1, local04
2fd20     20 2C 06 F1 | 	add	local04, #32
2fd24     16 13 02 F6 | 	mov	arg01, local04
2fd28     EC 13 06 F1 | 	add	arg01, #492
2fd2c                 | ' {
2fd2c                 | ' 
2fd2c                 | ' 	return *((DWORD*)ptr);
2fd2c     09 FB 01 FB | 	rdlong	result1, arg01
2fd30     24 2C 86 F1 | 	sub	local04, #36
2fd34     16 FB 61 FC | 	wrlong	result1, local04
2fd38     10 2C 86 F1 | 	sub	local04, #16
2fd3c                 | LR__4758
2fd3c                 | LR__4759
2fd3c     16 39 42 FC | 	wrbyte	local10, local04
2fd40     04 E4 05 F1 | 	add	objptr, #4
2fd44     F2 2E E2 FA | 	rdword	local05, objptr
2fd48     01 2E 06 F1 | 	add	local05, #1
2fd4c     F2 2E 52 FC | 	wrword	local05, objptr
2fd50     F2 3A E2 FA | 	rdword	local11, objptr
2fd54     06 2C 06 F1 | 	add	local04, #6
2fd58     16 3B 52 FC | 	wrword	local11, local04
2fd5c     04 E4 05 F1 | 	add	objptr, #4
2fd60     06 2C 06 F1 | 	add	local04, #6
2fd64     16 E5 61 FC | 	wrlong	objptr, local04
2fd68                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2fd68                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2fd68                 | ' 			{
2fd68                 | ' 
2fd68                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2fd68                 | ' 
2fd68                 | ' 
2fd68                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2fd68                 | ' 
2fd68                 | ' 			}
2fd68                 | ' 		}
2fd68                 | ' 
2fd68                 | ' 
2fd68                 | ' 	}
2fd68                 | ' 
2fd68                 | ' 	fs->fs_type = (BYTE)fmt;
2fd68                 | ' 	fs->id = ++Fsid;
2fd68                 | ' 
2fd68                 | ' 	fs->lfnbuf = LfnBuf;
2fd68                 | ' #line 3567 "ff.c"
2fd68                 | ' 	return FR_OK;
2fd68     00 FA 05 F6 | 	mov	result1, #0
2fd6c     08 E4 85 F1 | 	sub	objptr, #8
2fd70                 | LR__4760
2fd70     A7 F0 03 F6 | 	mov	ptra, fp
2fd74     B2 00 A0 FD | 	call	#popregs_
2fd78                 | _fatfs_cc_mount_volume_ret
2fd78     2D 00 64 FD | 	ret
2fd7c                 | 
2fd7c                 | _fatfs_cc_validate
2fd7c     09 01 0A F6 | 	mov	_var01, arg01 wz
2fd80     09 02 06 F6 | 	mov	_var02, #9
2fd84     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2fd88     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2fd8c     50 00 90 AD |  if_e	jmp	#LR__4770
2fd90     04 00 06 F1 | 	add	_var01, #4
2fd94     00 07 E2 FA | 	rdword	_var04, _var01
2fd98     04 00 86 F1 | 	sub	_var01, #4
2fd9c     00 13 02 FB | 	rdlong	arg01, _var01
2fda0     06 12 06 F1 | 	add	arg01, #6
2fda4     09 FB E1 FA | 	rdword	result1, arg01
2fda8     FD 06 0A F2 | 	cmp	_var04, result1 wz
2fdac     30 00 90 5D |  if_ne	jmp	#LR__4770
2fdb0     00 07 02 FB | 	rdlong	_var04, _var01
2fdb4     01 06 06 F1 | 	add	_var04, #1
2fdb8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2fdbc     01 FA 05 56 |  if_ne	mov	result1, #1
2fdc0                 | ' 
2fdc0                 | ' 	return Stat;
2fdc0     01 00 00 AF 
2fdc4     20 E4 05 A1 |  if_e	add	objptr, ##544
2fdc8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2fdcc     01 00 00 AF 
2fdd0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2fdd4     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2fdd8     01 04 CE F7 | 	test	_var03, #1 wz
2fddc     00 02 06 A6 |  if_e	mov	_var02, #0
2fde0                 | LR__4770
2fde0     00 02 0E F2 | 	cmp	_var02, #0 wz
2fde4     00 05 02 AB |  if_e	rdlong	_var03, _var01
2fde8     00 04 06 56 |  if_ne	mov	_var03, #0
2fdec     0A 05 62 FC | 	wrlong	_var03, arg02
2fdf0                 | ' 			res = FR_OK;
2fdf0                 | ' 		}
2fdf0                 | ' 
2fdf0                 | ' 	}
2fdf0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2fdf0                 | ' 	return res;
2fdf0     01 FB 01 F6 | 	mov	result1, _var02
2fdf4                 | _fatfs_cc_validate_ret
2fdf4     2D 00 64 FD | 	ret
2fdf8                 | 
2fdf8                 | _fatfs_cc_f_mount
2fdf8     01 4A 05 F6 | 	mov	COUNT_, #1
2fdfc     A8 00 A0 FD | 	call	#pushregs_
2fe00     20 F0 07 F1 | 	add	ptra, #32
2fe04     04 4E 05 F1 | 	add	fp, #4
2fe08     A7 12 62 FC | 	wrlong	arg01, fp
2fe0c     04 4E 05 F1 | 	add	fp, #4
2fe10     A7 14 62 FC | 	wrlong	arg02, fp
2fe14     04 4E 05 F1 | 	add	fp, #4
2fe18     A7 16 42 FC | 	wrbyte	arg03, fp
2fe1c     04 4E 85 F1 | 	sub	fp, #4
2fe20     A7 16 02 FB | 	rdlong	arg03, fp
2fe24     14 4E 05 F1 | 	add	fp, #20
2fe28     A7 16 62 FC | 	wrlong	arg03, fp
2fe2c     A7 12 02 F6 | 	mov	arg01, fp
2fe30     1C 4E 85 F1 | 	sub	fp, #28
2fe34     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2fe38     14 4E 05 F1 | 	add	fp, #20
2fe3c     A7 FA 61 FC | 	wrlong	result1, fp
2fe40     14 4E 85 F1 | 	sub	fp, #20
2fe44     00 FA 55 F2 | 	cmps	result1, #0 wc
2fe48     0B FA 05 C6 |  if_b	mov	result1, #11
2fe4c     C0 00 90 CD |  if_b	jmp	#LR__4781
2fe50     14 4E 05 F1 | 	add	fp, #20
2fe54     A7 16 02 FB | 	rdlong	arg03, fp
2fe58     02 16 66 F0 | 	shl	arg03, #2
2fe5c     F2 16 02 F1 | 	add	arg03, objptr
2fe60     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2fe64     04 4E 85 F1 | 	sub	fp, #4
2fe68     A7 16 62 FC | 	wrlong	arg03, fp
2fe6c     10 4E 85 F1 | 	sub	fp, #16
2fe70     28 00 90 AD |  if_e	jmp	#LR__4780
2fe74     10 4E 05 F1 | 	add	fp, #16
2fe78     A7 16 02 FB | 	rdlong	arg03, fp
2fe7c     10 4E 85 F1 | 	sub	fp, #16
2fe80     01 16 06 F1 | 	add	arg03, #1
2fe84     0B 13 C2 FA | 	rdbyte	arg01, arg03
2fe88     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2fe8c     10 4E 05 F1 | 	add	fp, #16
2fe90     A7 16 02 FB | 	rdlong	arg03, fp
2fe94     10 4E 85 F1 | 	sub	fp, #16
2fe98     0B 01 48 FC | 	wrbyte	#0, arg03
2fe9c                 | LR__4780
2fe9c     04 4E 05 F1 | 	add	fp, #4
2fea0     A7 26 0A FB | 	rdlong	local01, fp wz
2fea4     04 4E 85 F1 | 	sub	fp, #4
2fea8     04 4E 05 51 |  if_ne	add	fp, #4
2feac     A7 26 02 5B |  if_ne	rdlong	local01, fp
2feb0     04 4E 85 51 |  if_ne	sub	fp, #4
2feb4     13 01 48 5C |  if_ne	wrbyte	#0, local01
2feb8     14 4E 05 F1 | 	add	fp, #20
2febc     A7 26 02 FB | 	rdlong	local01, fp
2fec0     02 26 66 F0 | 	shl	local01, #2
2fec4     F2 26 02 F1 | 	add	local01, objptr
2fec8     10 4E 85 F1 | 	sub	fp, #16
2fecc     A7 16 02 FB | 	rdlong	arg03, fp
2fed0     13 17 62 FC | 	wrlong	arg03, local01
2fed4     08 4E 05 F1 | 	add	fp, #8
2fed8     A7 26 CA FA | 	rdbyte	local01, fp wz
2fedc     0C 4E 85 F1 | 	sub	fp, #12
2fee0     00 FA 05 A6 |  if_e	mov	result1, #0
2fee4     28 00 90 AD |  if_e	jmp	#LR__4781
2fee8     08 4E 05 F1 | 	add	fp, #8
2feec     A7 12 02 F6 | 	mov	arg01, fp
2fef0     04 4E 85 F1 | 	sub	fp, #4
2fef4     A7 14 02 F6 | 	mov	arg02, fp
2fef8     04 4E 85 F1 | 	sub	fp, #4
2fefc     00 16 06 F6 | 	mov	arg03, #0
2ff00     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2ff04     18 4E 05 F1 | 	add	fp, #24
2ff08     A7 FA 61 FC | 	wrlong	result1, fp
2ff0c                 | ' 
2ff0c                 | ' 	res = mount_volume(&path, &fs, 0);
2ff0c                 | ' 	return res ;
2ff0c     18 4E 85 F1 | 	sub	fp, #24
2ff10                 | LR__4781
2ff10     A7 F0 03 F6 | 	mov	ptra, fp
2ff14     B2 00 A0 FD | 	call	#popregs_
2ff18                 | _fatfs_cc_f_mount_ret
2ff18     2D 00 64 FD | 	ret
2ff1c                 | 
2ff1c                 | _fatfs_cc_f_open
2ff1c     02 4A 05 F6 | 	mov	COUNT_, #2
2ff20     A8 00 A0 FD | 	call	#pushregs_
2ff24     60 F0 07 F1 | 	add	ptra, #96
2ff28     04 4E 05 F1 | 	add	fp, #4
2ff2c     A7 12 62 FC | 	wrlong	arg01, fp
2ff30     04 4E 05 F1 | 	add	fp, #4
2ff34     A7 14 62 FC | 	wrlong	arg02, fp
2ff38     04 4E 05 F1 | 	add	fp, #4
2ff3c     A7 16 42 FC | 	wrbyte	arg03, fp
2ff40     08 4E 85 F1 | 	sub	fp, #8
2ff44     A7 18 0A FB | 	rdlong	arg04, fp wz
2ff48     04 4E 85 F1 | 	sub	fp, #4
2ff4c     09 FA 05 A6 |  if_e	mov	result1, #9
2ff50     98 06 90 AD |  if_e	jmp	#LR__4807
2ff54     0C 4E 05 F1 | 	add	fp, #12
2ff58     A7 18 C2 FA | 	rdbyte	arg04, fp
2ff5c     3F 18 06 F5 | 	and	arg04, #63
2ff60     A7 18 42 FC | 	wrbyte	arg04, fp
2ff64     04 4E 85 F1 | 	sub	fp, #4
2ff68     A7 12 02 F6 | 	mov	arg01, fp
2ff6c     3C 4E 05 F1 | 	add	fp, #60
2ff70     A7 14 02 F6 | 	mov	arg02, fp
2ff74     38 4E 85 F1 | 	sub	fp, #56
2ff78     A7 16 C2 FA | 	rdbyte	arg03, fp
2ff7c     0C 4E 85 F1 | 	sub	fp, #12
2ff80     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2ff84     10 4E 05 F1 | 	add	fp, #16
2ff88     A7 FA 61 FC | 	wrlong	result1, fp
2ff8c     10 4E 85 F1 | 	sub	fp, #16
2ff90     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff94     2C 06 90 5D |  if_ne	jmp	#LR__4806
2ff98     44 4E 05 F1 | 	add	fp, #68
2ff9c     A7 18 02 FB | 	rdlong	arg04, fp
2ffa0     30 4E 85 F1 | 	sub	fp, #48
2ffa4     A7 18 62 FC | 	wrlong	arg04, fp
2ffa8     A7 12 02 F6 | 	mov	arg01, fp
2ffac     0C 4E 85 F1 | 	sub	fp, #12
2ffb0     A7 26 02 FB | 	rdlong	local01, fp
2ffb4     08 4E 85 F1 | 	sub	fp, #8
2ffb8     13 15 02 F6 | 	mov	arg02, local01
2ffbc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2ffc0     10 4E 05 F1 | 	add	fp, #16
2ffc4     A7 FA 61 FC | 	wrlong	result1, fp
2ffc8     10 4E 85 F1 | 	sub	fp, #16
2ffcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ffd0     1C 00 90 5D |  if_ne	jmp	#LR__4790
2ffd4     3F 4E 05 F1 | 	add	fp, #63
2ffd8     A7 18 C2 FA | 	rdbyte	arg04, fp
2ffdc     3F 4E 85 F1 | 	sub	fp, #63
2ffe0     80 18 CE F7 | 	test	arg04, #128 wz
2ffe4     10 4E 05 51 |  if_ne	add	fp, #16
2ffe8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ffec     10 4E 85 51 |  if_ne	sub	fp, #16
2fff0                 | LR__4790
2fff0     0C 4E 05 F1 | 	add	fp, #12
2fff4     A7 18 C2 FA | 	rdbyte	arg04, fp
2fff8     0C 4E 85 F1 | 	sub	fp, #12
2fffc     1C 18 CE F7 | 	test	arg04, #28 wz
30000     F0 01 90 AD |  if_e	jmp	#LR__4795
30004     10 4E 05 F1 | 	add	fp, #16
30008     A7 26 0A FB | 	rdlong	local01, fp wz
3000c     10 4E 85 F1 | 	sub	fp, #16
30010     48 00 90 AD |  if_e	jmp	#LR__4792
30014     10 4E 05 F1 | 	add	fp, #16
30018     A7 18 02 FB | 	rdlong	arg04, fp
3001c     10 4E 85 F1 | 	sub	fp, #16
30020     04 18 0E F2 | 	cmp	arg04, #4 wz
30024     1C 00 90 5D |  if_ne	jmp	#LR__4791
30028     14 4E 05 F1 | 	add	fp, #20
3002c     A7 12 02 F6 | 	mov	arg01, fp
30030     14 4E 85 F1 | 	sub	fp, #20
30034     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
30038     10 4E 05 F1 | 	add	fp, #16
3003c     A7 FA 61 FC | 	wrlong	result1, fp
30040     10 4E 85 F1 | 	sub	fp, #16
30044                 | LR__4791
30044     0C 4E 05 F1 | 	add	fp, #12
30048     A7 26 C2 FA | 	rdbyte	local01, fp
3004c     08 26 46 F5 | 	or	local01, #8
30050     A7 26 42 FC | 	wrbyte	local01, fp
30054     0C 4E 85 F1 | 	sub	fp, #12
30058     3C 00 90 FD | 	jmp	#LR__4794
3005c                 | LR__4792
3005c     1A 4E 05 F1 | 	add	fp, #26
30060     A7 26 C2 FA | 	rdbyte	local01, fp
30064     1A 4E 85 F1 | 	sub	fp, #26
30068     11 26 CE F7 | 	test	local01, #17 wz
3006c     10 4E 05 51 |  if_ne	add	fp, #16
30070     A7 0E 68 5C |  if_ne	wrlong	#7, fp
30074     10 4E 85 51 |  if_ne	sub	fp, #16
30078     1C 00 90 5D |  if_ne	jmp	#LR__4793
3007c     0C 4E 05 F1 | 	add	fp, #12
30080     A7 26 C2 FA | 	rdbyte	local01, fp
30084     0C 4E 85 F1 | 	sub	fp, #12
30088     04 26 CE F7 | 	test	local01, #4 wz
3008c     10 4E 05 51 |  if_ne	add	fp, #16
30090     A7 10 68 5C |  if_ne	wrlong	#8, fp
30094     10 4E 85 51 |  if_ne	sub	fp, #16
30098                 | LR__4793
30098                 | LR__4794
30098     10 4E 05 F1 | 	add	fp, #16
3009c     A7 26 0A FB | 	rdlong	local01, fp wz
300a0     10 4E 85 F1 | 	sub	fp, #16
300a4     A8 01 90 5D |  if_ne	jmp	#LR__4798
300a8     0C 4E 05 F1 | 	add	fp, #12
300ac     A7 26 C2 FA | 	rdbyte	local01, fp
300b0     0C 4E 85 F1 | 	sub	fp, #12
300b4     08 26 CE F7 | 	test	local01, #8 wz
300b8     94 01 90 AD |  if_e	jmp	#LR__4798
300bc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
300c0     54 4E 05 F1 | 	add	fp, #84
300c4     A7 FA 61 FC | 	wrlong	result1, fp
300c8     24 4E 85 F1 | 	sub	fp, #36
300cc     A7 12 02 FB | 	rdlong	arg01, fp
300d0     0E 12 06 F1 | 	add	arg01, #14
300d4     09 FB 61 FC | 	wrlong	result1, arg01
300d8     A7 12 02 FB | 	rdlong	arg01, fp
300dc     16 12 06 F1 | 	add	arg01, #22
300e0     24 4E 05 F1 | 	add	fp, #36
300e4     A7 14 02 FB | 	rdlong	arg02, fp
300e8     09 15 62 FC | 	wrlong	arg02, arg01
300ec     10 4E 85 F1 | 	sub	fp, #16
300f0     A7 12 02 FB | 	rdlong	arg01, fp
300f4     14 4E 85 F1 | 	sub	fp, #20
300f8     A7 14 02 FB | 	rdlong	arg02, fp
300fc     30 4E 85 F1 | 	sub	fp, #48
30100     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
30104     48 4E 05 F1 | 	add	fp, #72
30108     A7 FA 61 FC | 	wrlong	result1, fp
3010c     18 4E 85 F1 | 	sub	fp, #24
30110     A7 26 02 FB | 	rdlong	local01, fp
30114     0B 26 06 F1 | 	add	local01, #11
30118     13 41 48 FC | 	wrbyte	#32, local01
3011c     14 4E 05 F1 | 	add	fp, #20
30120     A7 12 02 FB | 	rdlong	arg01, fp
30124     14 4E 85 F1 | 	sub	fp, #20
30128     A7 14 02 FB | 	rdlong	arg02, fp
3012c     30 4E 85 F1 | 	sub	fp, #48
30130     00 16 06 F6 | 	mov	arg03, #0
30134     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
30138     30 4E 05 F1 | 	add	fp, #48
3013c     A7 12 02 FB | 	rdlong	arg01, fp
30140     1C 12 06 F1 | 	add	arg01, #28
30144     09 01 68 FC | 	wrlong	#0, arg01
30148     14 4E 05 F1 | 	add	fp, #20
3014c     A7 26 02 FB | 	rdlong	local01, fp
30150     03 26 06 F1 | 	add	local01, #3
30154     13 03 48 FC | 	wrbyte	#1, local01
30158     04 4E 05 F1 | 	add	fp, #4
3015c     A7 26 0A FB | 	rdlong	local01, fp wz
30160     48 4E 85 F1 | 	sub	fp, #72
30164     E8 00 90 AD |  if_e	jmp	#LR__4798
30168     44 4E 05 F1 | 	add	fp, #68
3016c     A7 26 02 FB | 	rdlong	local01, fp
30170     30 26 06 F1 | 	add	local01, #48
30174     13 27 02 FB | 	rdlong	local01, local01
30178     14 4E 05 F1 | 	add	fp, #20
3017c     A7 26 62 FC | 	wrlong	local01, fp
30180     44 4E 85 F1 | 	sub	fp, #68
30184     A7 12 02 F6 | 	mov	arg01, fp
30188     34 4E 05 F1 | 	add	fp, #52
3018c     A7 14 02 FB | 	rdlong	arg02, fp
30190     48 4E 85 F1 | 	sub	fp, #72
30194     00 16 06 F6 | 	mov	arg03, #0
30198     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
3019c     10 4E 05 F1 | 	add	fp, #16
301a0     A7 FA 61 FC | 	wrlong	result1, fp
301a4     10 4E 85 F1 | 	sub	fp, #16
301a8     00 FA 0D F2 | 	cmp	result1, #0 wz
301ac     A0 00 90 5D |  if_ne	jmp	#LR__4798
301b0     44 4E 05 F1 | 	add	fp, #68
301b4     A7 12 02 FB | 	rdlong	arg01, fp
301b8     14 4E 05 F1 | 	add	fp, #20
301bc     A7 14 02 FB | 	rdlong	arg02, fp
301c0     58 4E 85 F1 | 	sub	fp, #88
301c4     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
301c8     10 4E 05 F1 | 	add	fp, #16
301cc     A7 FA 61 FC | 	wrlong	result1, fp
301d0     34 4E 05 F1 | 	add	fp, #52
301d4     A7 18 02 FB | 	rdlong	arg04, fp
301d8     04 4E 05 F1 | 	add	fp, #4
301dc     A7 26 02 FB | 	rdlong	local01, fp
301e0     48 4E 85 F1 | 	sub	fp, #72
301e4     01 26 86 F1 | 	sub	local01, #1
301e8     10 18 06 F1 | 	add	arg04, #16
301ec     0C 27 62 FC | 	wrlong	local01, arg04
301f0     5C 00 90 FD | 	jmp	#LR__4798
301f4                 | LR__4795
301f4     10 4E 05 F1 | 	add	fp, #16
301f8     A7 18 0A FB | 	rdlong	arg04, fp wz
301fc     10 4E 85 F1 | 	sub	fp, #16
30200     4C 00 90 5D |  if_ne	jmp	#LR__4797
30204     1A 4E 05 F1 | 	add	fp, #26
30208     A7 18 C2 FA | 	rdbyte	arg04, fp
3020c     1A 4E 85 F1 | 	sub	fp, #26
30210     10 18 CE F7 | 	test	arg04, #16 wz
30214     10 4E 05 51 |  if_ne	add	fp, #16
30218     A7 08 68 5C |  if_ne	wrlong	#4, fp
3021c     10 4E 85 51 |  if_ne	sub	fp, #16
30220     2C 00 90 5D |  if_ne	jmp	#LR__4796
30224     0C 4E 05 F1 | 	add	fp, #12
30228     A7 18 C2 FA | 	rdbyte	arg04, fp
3022c     0C 4E 85 F1 | 	sub	fp, #12
30230     02 18 CE F7 | 	test	arg04, #2 wz
30234     1A 4E 05 51 |  if_ne	add	fp, #26
30238     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
3023c     1A 4E 85 51 |  if_ne	sub	fp, #26
30240     01 26 CE 57 |  if_ne	test	local01, #1 wz
30244     10 4E 05 51 |  if_ne	add	fp, #16
30248     A7 0E 68 5C |  if_ne	wrlong	#7, fp
3024c     10 4E 85 51 |  if_ne	sub	fp, #16
30250                 | LR__4796
30250                 | LR__4797
30250                 | LR__4798
30250     10 4E 05 F1 | 	add	fp, #16
30254     A7 26 0A FB | 	rdlong	local01, fp wz
30258     10 4E 85 F1 | 	sub	fp, #16
3025c     60 00 90 5D |  if_ne	jmp	#LR__4799
30260     0C 4E 05 F1 | 	add	fp, #12
30264     A7 28 C2 FA | 	rdbyte	local02, fp
30268     0C 4E 85 F1 | 	sub	fp, #12
3026c     08 28 CE F7 | 	test	local02, #8 wz
30270     0C 4E 05 51 |  if_ne	add	fp, #12
30274     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
30278     40 28 46 55 |  if_ne	or	local02, #64
3027c     A7 28 42 5C |  if_ne	wrbyte	local02, fp
30280     0C 4E 85 51 |  if_ne	sub	fp, #12
30284     04 4E 05 F1 | 	add	fp, #4
30288     A7 28 02 FB | 	rdlong	local02, fp
3028c     40 4E 05 F1 | 	add	fp, #64
30290     A7 26 02 FB | 	rdlong	local01, fp
30294     30 26 06 F1 | 	add	local01, #48
30298     13 27 02 FB | 	rdlong	local01, local01
3029c     20 28 06 F1 | 	add	local02, #32
302a0     14 27 62 FC | 	wrlong	local01, local02
302a4     40 4E 85 F1 | 	sub	fp, #64
302a8     A7 28 02 FB | 	rdlong	local02, fp
302ac     2C 4E 05 F1 | 	add	fp, #44
302b0     A7 26 02 FB | 	rdlong	local01, fp
302b4     30 4E 85 F1 | 	sub	fp, #48
302b8     24 28 06 F1 | 	add	local02, #36
302bc     14 27 62 FC | 	wrlong	local01, local02
302c0                 | LR__4799
302c0     10 4E 05 F1 | 	add	fp, #16
302c4     A7 28 0A FB | 	rdlong	local02, fp wz
302c8     10 4E 85 F1 | 	sub	fp, #16
302cc     F4 02 90 5D |  if_ne	jmp	#LR__4805
302d0     04 4E 05 F1 | 	add	fp, #4
302d4     A7 28 02 FB | 	rdlong	local02, fp
302d8     40 4E 05 F1 | 	add	fp, #64
302dc     A7 12 02 FB | 	rdlong	arg01, fp
302e0     14 4E 85 F1 | 	sub	fp, #20
302e4     A7 14 02 FB | 	rdlong	arg02, fp
302e8     30 4E 85 F1 | 	sub	fp, #48
302ec     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
302f0     08 28 06 F1 | 	add	local02, #8
302f4     14 FB 61 FC | 	wrlong	result1, local02
302f8     04 4E 05 F1 | 	add	fp, #4
302fc     A7 28 02 FB | 	rdlong	local02, fp
30300     2C 4E 05 F1 | 	add	fp, #44
30304     A7 12 02 FB | 	rdlong	arg01, fp
30308     1C 12 06 F1 | 	add	arg01, #28
3030c                 | ' {
3030c                 | ' 
3030c                 | ' 	return *((DWORD*)ptr);
3030c     09 FB 01 FB | 	rdlong	result1, arg01
30310     0C 28 06 F1 | 	add	local02, #12
30314     14 FB 61 FC | 	wrlong	result1, local02
30318     2C 4E 85 F1 | 	sub	fp, #44
3031c     A7 28 02 FB | 	rdlong	local02, fp
30320     40 4E 05 F1 | 	add	fp, #64
30324     A7 26 02 FB | 	rdlong	local01, fp
30328     14 27 62 FC | 	wrlong	local01, local02
3032c     40 4E 85 F1 | 	sub	fp, #64
30330     A7 28 02 FB | 	rdlong	local02, fp
30334     40 4E 05 F1 | 	add	fp, #64
30338     A7 26 02 FB | 	rdlong	local01, fp
3033c     06 26 06 F1 | 	add	local01, #6
30340     13 27 E2 FA | 	rdword	local01, local01
30344     04 28 06 F1 | 	add	local02, #4
30348     14 27 52 FC | 	wrword	local01, local02
3034c     40 4E 85 F1 | 	sub	fp, #64
30350     A7 28 02 FB | 	rdlong	local02, fp
30354     08 4E 05 F1 | 	add	fp, #8
30358     A7 26 C2 FA | 	rdbyte	local01, fp
3035c     10 28 06 F1 | 	add	local02, #16
30360     14 27 42 FC | 	wrbyte	local01, local02
30364     08 4E 85 F1 | 	sub	fp, #8
30368     A7 28 02 FB | 	rdlong	local02, fp
3036c     11 28 06 F1 | 	add	local02, #17
30370     14 01 48 FC | 	wrbyte	#0, local02
30374     A7 28 02 FB | 	rdlong	local02, fp
30378     1C 28 06 F1 | 	add	local02, #28
3037c     14 01 68 FC | 	wrlong	#0, local02
30380     A7 28 02 FB | 	rdlong	local02, fp
30384     14 28 06 F1 | 	add	local02, #20
30388     14 01 68 FC | 	wrlong	#0, local02
3038c     A7 12 02 FB | 	rdlong	arg01, fp
30390     04 4E 85 F1 | 	sub	fp, #4
30394     28 12 06 F1 | 	add	arg01, #40
30398     00 14 06 F6 | 	mov	arg02, #0
3039c     09 16 C6 F9 | 	decod	arg03, #9
303a0     98 00 A0 FD | 	call	#\builtin_bytefill_
303a4     0C 4E 05 F1 | 	add	fp, #12
303a8     A7 28 C2 FA | 	rdbyte	local02, fp
303ac     0C 4E 85 F1 | 	sub	fp, #12
303b0     20 28 CE F7 | 	test	local02, #32 wz
303b4     0C 02 90 AD |  if_e	jmp	#LR__4804
303b8     04 4E 05 F1 | 	add	fp, #4
303bc     A7 26 02 FB | 	rdlong	local01, fp
303c0     04 4E 85 F1 | 	sub	fp, #4
303c4     0C 26 06 F1 | 	add	local01, #12
303c8     13 29 02 FB | 	rdlong	local02, local01
303cc     01 28 16 F2 | 	cmp	local02, #1 wc
303d0     F0 01 90 CD |  if_b	jmp	#LR__4804
303d4     04 4E 05 F1 | 	add	fp, #4
303d8     A7 26 02 FB | 	rdlong	local01, fp
303dc     13 29 02 F6 | 	mov	local02, local01
303e0     0C 26 06 F1 | 	add	local01, #12
303e4     13 27 02 FB | 	rdlong	local01, local01
303e8     14 28 06 F1 | 	add	local02, #20
303ec     14 27 62 FC | 	wrlong	local01, local02
303f0     40 4E 05 F1 | 	add	fp, #64
303f4     A7 28 02 FB | 	rdlong	local02, fp
303f8     0A 28 06 F1 | 	add	local02, #10
303fc     14 29 E2 FA | 	rdword	local02, local02
30400     09 28 66 F0 | 	shl	local02, #9
30404     08 4E 05 F1 | 	add	fp, #8
30408     A7 28 62 FC | 	wrlong	local02, fp
3040c     48 4E 85 F1 | 	sub	fp, #72
30410     A7 28 02 FB | 	rdlong	local02, fp
30414     08 28 06 F1 | 	add	local02, #8
30418     14 27 02 FB | 	rdlong	local01, local02
3041c     4C 4E 05 F1 | 	add	fp, #76
30420     A7 26 62 FC | 	wrlong	local01, fp
30424                 | ' 				fp->fptr = fp->obj.objsize;
30424                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
30424                 | ' 				clst = fp->obj.sclust;
30424                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
30424     4C 4E 85 F1 | 	sub	fp, #76
30428     A7 28 02 FB | 	rdlong	local02, fp
3042c     0C 28 06 F1 | 	add	local02, #12
30430     14 27 02 FB | 	rdlong	local01, local02
30434     58 4E 05 F1 | 	add	fp, #88
30438     A7 26 62 FC | 	wrlong	local01, fp
3043c     5C 4E 85 F1 | 	sub	fp, #92
30440                 | LR__4800
30440     10 4E 05 F1 | 	add	fp, #16
30444     A7 28 0A FB | 	rdlong	local02, fp wz
30448     10 4E 85 F1 | 	sub	fp, #16
3044c     94 00 90 5D |  if_ne	jmp	#LR__4801
30450     5C 4E 05 F1 | 	add	fp, #92
30454     A7 28 02 FB | 	rdlong	local02, fp
30458     10 4E 85 F1 | 	sub	fp, #16
3045c     A7 26 02 FB | 	rdlong	local01, fp
30460     4C 4E 85 F1 | 	sub	fp, #76
30464     13 29 1A F2 | 	cmp	local02, local01 wcz
30468     78 00 90 ED |  if_be	jmp	#LR__4801
3046c     04 4E 05 F1 | 	add	fp, #4
30470     A7 12 02 FB | 	rdlong	arg01, fp
30474     4C 4E 05 F1 | 	add	fp, #76
30478     A7 14 02 FB | 	rdlong	arg02, fp
3047c     50 4E 85 F1 | 	sub	fp, #80
30480     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
30484     50 4E 05 F1 | 	add	fp, #80
30488     A7 FA 61 FC | 	wrlong	result1, fp
3048c     50 4E 85 F1 | 	sub	fp, #80
30490     02 FA 15 F2 | 	cmp	result1, #2 wc
30494     10 4E 05 C1 |  if_b	add	fp, #16
30498     A7 04 68 CC |  if_b	wrlong	#2, fp
3049c     10 4E 85 C1 |  if_b	sub	fp, #16
304a0     50 4E 05 F1 | 	add	fp, #80
304a4     A7 28 02 FB | 	rdlong	local02, fp
304a8     50 4E 85 F1 | 	sub	fp, #80
304ac     FF FF 7F FF 
304b0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
304b4     10 4E 05 A1 |  if_e	add	fp, #16
304b8     A7 02 68 AC |  if_e	wrlong	#1, fp
304bc     10 4E 85 A1 |  if_e	sub	fp, #16
304c0     5C 4E 05 F1 | 	add	fp, #92
304c4     A7 28 02 FB | 	rdlong	local02, fp
304c8     10 4E 85 F1 | 	sub	fp, #16
304cc     A7 26 02 FB | 	rdlong	local01, fp
304d0     13 29 82 F1 | 	sub	local02, local01
304d4     10 4E 05 F1 | 	add	fp, #16
304d8     A7 28 62 FC | 	wrlong	local02, fp
304dc     5C 4E 85 F1 | 	sub	fp, #92
304e0     5C FF 9F FD | 	jmp	#LR__4800
304e4                 | LR__4801
304e4     04 4E 05 F1 | 	add	fp, #4
304e8     A7 28 02 FB | 	rdlong	local02, fp
304ec     4C 4E 05 F1 | 	add	fp, #76
304f0     A7 26 02 FB | 	rdlong	local01, fp
304f4     18 28 06 F1 | 	add	local02, #24
304f8     14 27 62 FC | 	wrlong	local01, local02
304fc     40 4E 85 F1 | 	sub	fp, #64
30500     A7 28 0A FB | 	rdlong	local02, fp wz
30504     10 4E 85 F1 | 	sub	fp, #16
30508     B8 00 90 5D |  if_ne	jmp	#LR__4803
3050c     5C 4E 05 F1 | 	add	fp, #92
30510     A7 26 02 FB | 	rdlong	local01, fp
30514     5C 4E 85 F1 | 	sub	fp, #92
30518     FF 27 CE F7 | 	test	local01, #511 wz
3051c     A4 00 90 AD |  if_e	jmp	#LR__4803
30520     44 4E 05 F1 | 	add	fp, #68
30524     A7 12 02 FB | 	rdlong	arg01, fp
30528     0C 4E 05 F1 | 	add	fp, #12
3052c     A7 14 02 FB | 	rdlong	arg02, fp
30530     50 4E 85 F1 | 	sub	fp, #80
30534     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
30538     58 4E 05 F1 | 	add	fp, #88
3053c     A7 FA 61 FC | 	wrlong	result1, fp
30540     00 FA 4D F2 | 	cmps	result1, #0 wz
30544     58 4E 85 F1 | 	sub	fp, #88
30548     10 4E 05 A1 |  if_e	add	fp, #16
3054c     A7 04 68 AC |  if_e	wrlong	#2, fp
30550     10 4E 85 A1 |  if_e	sub	fp, #16
30554     6C 00 90 AD |  if_e	jmp	#LR__4802
30558     04 4E 05 F1 | 	add	fp, #4
3055c     A7 28 02 FB | 	rdlong	local02, fp
30560     54 4E 05 F1 | 	add	fp, #84
30564     A7 26 02 FB | 	rdlong	local01, fp
30568     04 4E 05 F1 | 	add	fp, #4
3056c     A7 18 02 FB | 	rdlong	arg04, fp
30570     09 18 46 F0 | 	shr	arg04, #9
30574     0C 27 02 F1 | 	add	local01, arg04
30578     1C 28 06 F1 | 	add	local02, #28
3057c     14 27 62 FC | 	wrlong	local01, local02
30580     18 4E 85 F1 | 	sub	fp, #24
30584     A7 28 02 FB | 	rdlong	local02, fp
30588     01 28 06 F1 | 	add	local02, #1
3058c     14 13 C2 FA | 	rdbyte	arg01, local02
30590     40 4E 85 F1 | 	sub	fp, #64
30594     A7 28 02 FB | 	rdlong	local02, fp
30598     14 15 02 F6 | 	mov	arg02, local02
3059c     28 14 06 F1 | 	add	arg02, #40
305a0     04 4E 85 F1 | 	sub	fp, #4
305a4     1C 28 06 F1 | 	add	local02, #28
305a8     14 17 02 FB | 	rdlong	arg03, local02
305ac     01 18 06 F6 | 	mov	arg04, #1
305b0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
305b4     00 FA 0D F2 | 	cmp	result1, #0 wz
305b8     10 4E 05 51 |  if_ne	add	fp, #16
305bc     A7 02 68 5C |  if_ne	wrlong	#1, fp
305c0     10 4E 85 51 |  if_ne	sub	fp, #16
305c4                 | LR__4802
305c4                 | LR__4803
305c4                 | LR__4804
305c4                 | LR__4805
305c4                 | LR__4806
305c4     10 4E 05 F1 | 	add	fp, #16
305c8     A7 28 0A FB | 	rdlong	local02, fp wz
305cc     10 4E 85 F1 | 	sub	fp, #16
305d0     04 4E 05 51 |  if_ne	add	fp, #4
305d4     A7 28 02 5B |  if_ne	rdlong	local02, fp
305d8     04 4E 85 51 |  if_ne	sub	fp, #4
305dc     14 01 68 5C |  if_ne	wrlong	#0, local02
305e0                 | ' 
305e0                 | ' 	return res ;
305e0     10 4E 05 F1 | 	add	fp, #16
305e4     A7 FA 01 FB | 	rdlong	result1, fp
305e8     10 4E 85 F1 | 	sub	fp, #16
305ec                 | LR__4807
305ec     A7 F0 03 F6 | 	mov	ptra, fp
305f0     B2 00 A0 FD | 	call	#popregs_
305f4                 | _fatfs_cc_f_open_ret
305f4     2D 00 64 FD | 	ret
305f8                 | 
305f8                 | _fatfs_cc_f_read
305f8     0E 4A 05 F6 | 	mov	COUNT_, #14
305fc     A8 00 A0 FD | 	call	#pushregs_
30600     38 F0 07 F1 | 	add	ptra, #56
30604     04 4E 05 F1 | 	add	fp, #4
30608     A7 12 62 FC | 	wrlong	arg01, fp
3060c     04 4E 05 F1 | 	add	fp, #4
30610     A7 14 62 FC | 	wrlong	arg02, fp
30614     04 4E 05 F1 | 	add	fp, #4
30618     A7 16 62 FC | 	wrlong	arg03, fp
3061c     04 4E 05 F1 | 	add	fp, #4
30620     A7 18 62 FC | 	wrlong	arg04, fp
30624     08 4E 85 F1 | 	sub	fp, #8
30628     A7 FA 01 FB | 	rdlong	result1, fp
3062c     2C 4E 05 F1 | 	add	fp, #44
30630     A7 FA 61 FC | 	wrlong	result1, fp
30634     24 4E 85 F1 | 	sub	fp, #36
30638     A7 FA 01 FB | 	rdlong	result1, fp
3063c     FD 00 68 FC | 	wrlong	#0, result1
30640     0C 4E 85 F1 | 	sub	fp, #12
30644     A7 12 02 FB | 	rdlong	arg01, fp
30648     14 4E 05 F1 | 	add	fp, #20
3064c     A7 14 02 F6 | 	mov	arg02, fp
30650     18 4E 85 F1 | 	sub	fp, #24
30654     24 F7 BF FD | 	call	#_fatfs_cc_validate
30658     14 4E 05 F1 | 	add	fp, #20
3065c     A7 FA 61 FC | 	wrlong	result1, fp
30660     00 FA 4D F2 | 	cmps	result1, #0 wz
30664     14 4E 85 F1 | 	sub	fp, #20
30668     20 00 90 5D |  if_ne	jmp	#LR__4810
3066c     04 4E 05 F1 | 	add	fp, #4
30670     A7 14 02 FB | 	rdlong	arg02, fp
30674     11 14 06 F1 | 	add	arg02, #17
30678     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
3067c     10 4E 05 F1 | 	add	fp, #16
30680     A7 14 62 FC | 	wrlong	arg02, fp
30684     14 4E 85 F1 | 	sub	fp, #20
30688     10 00 90 AD |  if_e	jmp	#LR__4811
3068c                 | LR__4810
3068c     14 4E 05 F1 | 	add	fp, #20
30690     A7 FA 01 FB | 	rdlong	result1, fp
30694     14 4E 85 F1 | 	sub	fp, #20
30698     EC 05 90 FD | 	jmp	#LR__4830
3069c                 | LR__4811
3069c     04 4E 05 F1 | 	add	fp, #4
306a0     A7 18 02 FB | 	rdlong	arg04, fp
306a4     04 4E 85 F1 | 	sub	fp, #4
306a8     10 18 06 F1 | 	add	arg04, #16
306ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
306b0     01 18 CE F7 | 	test	arg04, #1 wz
306b4     07 FA 05 A6 |  if_e	mov	result1, #7
306b8     CC 05 90 AD |  if_e	jmp	#LR__4830
306bc     04 4E 05 F1 | 	add	fp, #4
306c0     A7 26 02 FB | 	rdlong	local01, fp
306c4     13 29 02 F6 | 	mov	local02, local01
306c8     0C 28 06 F1 | 	add	local02, #12
306cc     14 2B 02 FB | 	rdlong	local03, local02
306d0     14 26 06 F1 | 	add	local01, #20
306d4     13 27 02 FB | 	rdlong	local01, local01
306d8     13 2B 82 F1 | 	sub	local03, local01
306dc     20 4E 05 F1 | 	add	fp, #32
306e0     A7 2A 62 FC | 	wrlong	local03, fp
306e4     18 4E 85 F1 | 	sub	fp, #24
306e8     A7 2C 02 FB | 	rdlong	local04, fp
306ec     0C 4E 85 F1 | 	sub	fp, #12
306f0     15 2D 1A F2 | 	cmp	local04, local03 wcz
306f4     24 4E 05 11 |  if_a	add	fp, #36
306f8     A7 2C 02 1B |  if_a	rdlong	local04, fp
306fc     18 4E 85 11 |  if_a	sub	fp, #24
30700     A7 2C 62 1C |  if_a	wrlong	local04, fp
30704     0C 4E 85 11 |  if_a	sub	fp, #12
30708                 | ' 
30708                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
30708                 | LR__4812
30708     0C 4E 05 F1 | 	add	fp, #12
3070c     A7 28 02 FB | 	rdlong	local02, fp
30710     0C 4E 85 F1 | 	sub	fp, #12
30714     14 2D 02 F6 | 	mov	local04, local02
30718     01 2C 16 F2 | 	cmp	local04, #1 wc
3071c     64 05 90 CD |  if_b	jmp	#LR__4829
30720     04 4E 05 F1 | 	add	fp, #4
30724     A7 2A 02 FB | 	rdlong	local03, fp
30728     04 4E 85 F1 | 	sub	fp, #4
3072c     14 2A 06 F1 | 	add	local03, #20
30730     15 2B 02 FB | 	rdlong	local03, local03
30734     FF 2B CE F7 | 	test	local03, #511 wz
30738     3C 04 90 5D |  if_ne	jmp	#LR__4827
3073c     04 4E 05 F1 | 	add	fp, #4
30740     A7 26 02 FB | 	rdlong	local01, fp
30744     14 26 06 F1 | 	add	local01, #20
30748     13 2B 02 FB | 	rdlong	local03, local01
3074c     09 2A 46 F0 | 	shr	local03, #9
30750     14 4E 05 F1 | 	add	fp, #20
30754     A7 2E 02 FB | 	rdlong	local05, fp
30758     17 31 02 F6 | 	mov	local06, local05
3075c     0A 30 06 F1 | 	add	local06, #10
30760     18 33 E2 FA | 	rdword	local07, local06
30764     0A 30 86 F1 | 	sub	local06, #10
30768     19 35 32 F9 | 	getword	local08, local07, #0
3076c     01 34 86 F1 | 	sub	local08, #1
30770     1A 2B 0A F5 | 	and	local03, local08 wz
30774     18 4E 05 F1 | 	add	fp, #24
30778     A7 2A 62 FC | 	wrlong	local03, fp
3077c     30 4E 85 F1 | 	sub	fp, #48
30780     E0 00 90 5D |  if_ne	jmp	#LR__4817
30784     04 4E 05 F1 | 	add	fp, #4
30788     A7 2A 02 FB | 	rdlong	local03, fp
3078c     04 4E 85 F1 | 	sub	fp, #4
30790     14 2A 06 F1 | 	add	local03, #20
30794     15 2B 0A FB | 	rdlong	local03, local03 wz
30798     20 00 90 5D |  if_ne	jmp	#LR__4813
3079c     04 4E 05 F1 | 	add	fp, #4
307a0     A7 2A 02 FB | 	rdlong	local03, fp
307a4     08 2A 06 F1 | 	add	local03, #8
307a8     15 2B 02 FB | 	rdlong	local03, local03
307ac     18 4E 05 F1 | 	add	fp, #24
307b0     A7 2A 62 FC | 	wrlong	local03, fp
307b4     1C 4E 85 F1 | 	sub	fp, #28
307b8     28 00 90 FD | 	jmp	#LR__4814
307bc                 | LR__4813
307bc     04 4E 05 F1 | 	add	fp, #4
307c0     A7 34 02 FB | 	rdlong	local08, fp
307c4     1A 13 02 F6 | 	mov	arg01, local08
307c8     04 4E 85 F1 | 	sub	fp, #4
307cc     18 34 06 F1 | 	add	local08, #24
307d0     1A 15 02 FB | 	rdlong	arg02, local08
307d4     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
307d8     1C 4E 05 F1 | 	add	fp, #28
307dc     A7 FA 61 FC | 	wrlong	result1, fp
307e0     1C 4E 85 F1 | 	sub	fp, #28
307e4                 | LR__4814
307e4     1C 4E 05 F1 | 	add	fp, #28
307e8     A7 2A 02 FB | 	rdlong	local03, fp
307ec     1C 4E 85 F1 | 	sub	fp, #28
307f0     02 2A 16 F2 | 	cmp	local03, #2 wc
307f4     1C 00 90 3D |  if_ae	jmp	#LR__4815
307f8     04 4E 05 F1 | 	add	fp, #4
307fc     A7 2A 02 FB | 	rdlong	local03, fp
30800     04 4E 85 F1 | 	sub	fp, #4
30804     11 2A 06 F1 | 	add	local03, #17
30808     15 05 48 FC | 	wrbyte	#2, local03
3080c     02 FA 05 F6 | 	mov	result1, #2
30810     74 04 90 FD | 	jmp	#LR__4830
30814                 | LR__4815
30814     1C 4E 05 F1 | 	add	fp, #28
30818     A7 2A 02 FB | 	rdlong	local03, fp
3081c     1C 4E 85 F1 | 	sub	fp, #28
30820     FF FF 7F FF 
30824     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
30828     1C 00 90 5D |  if_ne	jmp	#LR__4816
3082c     04 4E 05 F1 | 	add	fp, #4
30830     A7 2A 02 FB | 	rdlong	local03, fp
30834     04 4E 85 F1 | 	sub	fp, #4
30838     11 2A 06 F1 | 	add	local03, #17
3083c     15 03 48 FC | 	wrbyte	#1, local03
30840     01 FA 05 F6 | 	mov	result1, #1
30844     40 04 90 FD | 	jmp	#LR__4830
30848                 | LR__4816
30848     04 4E 05 F1 | 	add	fp, #4
3084c     A7 2A 02 FB | 	rdlong	local03, fp
30850     18 4E 05 F1 | 	add	fp, #24
30854     A7 34 02 FB | 	rdlong	local08, fp
30858     1C 4E 85 F1 | 	sub	fp, #28
3085c     18 2A 06 F1 | 	add	local03, #24
30860     15 35 62 FC | 	wrlong	local08, local03
30864                 | LR__4817
30864     18 4E 05 F1 | 	add	fp, #24
30868     A7 12 02 FB | 	rdlong	arg01, fp
3086c     14 4E 85 F1 | 	sub	fp, #20
30870     A7 2A 02 FB | 	rdlong	local03, fp
30874     04 4E 85 F1 | 	sub	fp, #4
30878     18 2A 06 F1 | 	add	local03, #24
3087c     15 15 02 FB | 	rdlong	arg02, local03
30880     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
30884     20 4E 05 F1 | 	add	fp, #32
30888     A7 FA 61 FC | 	wrlong	result1, fp
3088c     20 4E 85 F1 | 	sub	fp, #32
30890     00 FA 0D F2 | 	cmp	result1, #0 wz
30894     1C 00 90 5D |  if_ne	jmp	#LR__4818
30898     04 4E 05 F1 | 	add	fp, #4
3089c     A7 2A 02 FB | 	rdlong	local03, fp
308a0     04 4E 85 F1 | 	sub	fp, #4
308a4     11 2A 06 F1 | 	add	local03, #17
308a8     15 05 48 FC | 	wrbyte	#2, local03
308ac     02 FA 05 F6 | 	mov	result1, #2
308b0     D4 03 90 FD | 	jmp	#LR__4830
308b4                 | LR__4818
308b4     20 4E 05 F1 | 	add	fp, #32
308b8     A7 2A 02 FB | 	rdlong	local03, fp
308bc     10 4E 05 F1 | 	add	fp, #16
308c0     A7 34 02 FB | 	rdlong	local08, fp
308c4     1A 2B 02 F1 | 	add	local03, local08
308c8     10 4E 85 F1 | 	sub	fp, #16
308cc     A7 2A 62 FC | 	wrlong	local03, fp
308d0     14 4E 85 F1 | 	sub	fp, #20
308d4     A7 2A 02 FB | 	rdlong	local03, fp
308d8     09 2A 46 F0 | 	shr	local03, #9
308dc     20 4E 05 F1 | 	add	fp, #32
308e0     A7 2A 62 FC | 	wrlong	local03, fp
308e4     2C 4E 85 F1 | 	sub	fp, #44
308e8     01 2A 16 F2 | 	cmp	local03, #1 wc
308ec     5C 01 90 CD |  if_b	jmp	#LR__4822
308f0     30 4E 05 F1 | 	add	fp, #48
308f4     A7 2A 02 FB | 	rdlong	local03, fp
308f8     04 4E 85 F1 | 	sub	fp, #4
308fc     A7 34 02 FB | 	rdlong	local08, fp
30900     1A 2B 02 F1 | 	add	local03, local08
30904     14 4E 85 F1 | 	sub	fp, #20
30908     A7 34 02 FB | 	rdlong	local08, fp
3090c     18 4E 85 F1 | 	sub	fp, #24
30910     0A 34 06 F1 | 	add	local08, #10
30914     1A 35 E2 FA | 	rdword	local08, local08
30918     1A 2B 1A F2 | 	cmp	local03, local08 wcz
3091c     28 00 90 ED |  if_be	jmp	#LR__4819
30920     18 4E 05 F1 | 	add	fp, #24
30924     A7 26 02 FB | 	rdlong	local01, fp
30928     0A 26 06 F1 | 	add	local01, #10
3092c     13 2B E2 FA | 	rdword	local03, local01
30930     18 4E 05 F1 | 	add	fp, #24
30934     A7 34 02 FB | 	rdlong	local08, fp
30938     1A 2B 82 F1 | 	sub	local03, local08
3093c     04 4E 85 F1 | 	sub	fp, #4
30940     A7 2A 62 FC | 	wrlong	local03, fp
30944     2C 4E 85 F1 | 	sub	fp, #44
30948                 | LR__4819
30948     18 4E 05 F1 | 	add	fp, #24
3094c     A7 26 02 FB | 	rdlong	local01, fp
30950     01 26 06 F1 | 	add	local01, #1
30954     13 13 C2 FA | 	rdbyte	arg01, local01
30958     1C 4E 05 F1 | 	add	fp, #28
3095c     A7 14 02 FB | 	rdlong	arg02, fp
30960     14 4E 85 F1 | 	sub	fp, #20
30964     A7 16 02 FB | 	rdlong	arg03, fp
30968     0C 4E 05 F1 | 	add	fp, #12
3096c     A7 18 02 FB | 	rdlong	arg04, fp
30970     2C 4E 85 F1 | 	sub	fp, #44
30974     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
30978     00 FA 0D F2 | 	cmp	result1, #0 wz
3097c     1C 00 90 AD |  if_e	jmp	#LR__4820
30980     04 4E 05 F1 | 	add	fp, #4
30984     A7 2A 02 FB | 	rdlong	local03, fp
30988     04 4E 85 F1 | 	sub	fp, #4
3098c     11 2A 06 F1 | 	add	local03, #17
30990     15 03 48 FC | 	wrbyte	#1, local03
30994     01 FA 05 F6 | 	mov	result1, #1
30998     EC 02 90 FD | 	jmp	#LR__4830
3099c                 | LR__4820
3099c     04 4E 05 F1 | 	add	fp, #4
309a0     A7 26 02 FB | 	rdlong	local01, fp
309a4     04 4E 85 F1 | 	sub	fp, #4
309a8     10 26 06 F1 | 	add	local01, #16
309ac     13 2B C2 FA | 	rdbyte	local03, local01
309b0     80 2A CE F7 | 	test	local03, #128 wz
309b4     78 00 90 AD |  if_e	jmp	#LR__4821
309b8     04 4E 05 F1 | 	add	fp, #4
309bc     A7 34 02 FB | 	rdlong	local08, fp
309c0     1C 34 06 F1 | 	add	local08, #28
309c4     1A 35 02 FB | 	rdlong	local08, local08
309c8     1C 4E 05 F1 | 	add	fp, #28
309cc     A7 36 02 FB | 	rdlong	local09, fp
309d0     1B 35 82 F1 | 	sub	local08, local09
309d4     0C 4E 05 F1 | 	add	fp, #12
309d8     A7 38 02 FB | 	rdlong	local10, fp
309dc     2C 4E 85 F1 | 	sub	fp, #44
309e0     1C 3B 02 F6 | 	mov	local11, local10
309e4     1D 35 12 F2 | 	cmp	local08, local11 wc
309e8     44 00 90 3D |  if_ae	jmp	#LR__4821
309ec     34 4E 05 F1 | 	add	fp, #52
309f0     A7 12 02 FB | 	rdlong	arg01, fp
309f4     30 4E 85 F1 | 	sub	fp, #48
309f8     A7 14 02 FB | 	rdlong	arg02, fp
309fc     0A 3B 02 F6 | 	mov	local11, arg02
30a00     1C 3A 06 F1 | 	add	local11, #28
30a04     1D 37 02 FB | 	rdlong	local09, local11
30a08     1C 4E 05 F1 | 	add	fp, #28
30a0c     A7 2E 02 FB | 	rdlong	local05, fp
30a10     17 37 82 F1 | 	sub	local09, local05
30a14     09 36 66 F0 | 	shl	local09, #9
30a18     1B 3B 02 F6 | 	mov	local11, local09
30a1c     1B 13 02 F1 | 	add	arg01, local09
30a20     20 4E 85 F1 | 	sub	fp, #32
30a24     28 14 06 F1 | 	add	arg02, #40
30a28     09 16 C6 F9 | 	decod	arg03, #9
30a2c     64 43 BF FD | 	call	#__system____builtin_memmove
30a30                 | LR__4821
30a30     2C 4E 05 F1 | 	add	fp, #44
30a34     A7 2A 02 FB | 	rdlong	local03, fp
30a38     09 2A 66 F0 | 	shl	local03, #9
30a3c     04 4E 85 F1 | 	sub	fp, #4
30a40     A7 2A 62 FC | 	wrlong	local03, fp
30a44     28 4E 85 F1 | 	sub	fp, #40
30a48                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
30a48                 | ' 				}
30a48                 | ' 
30a48                 | ' 
30a48                 | ' 				rcnt =  ((UINT) 512 )  * cc;
30a48                 | ' 				continue;
30a48     B4 01 90 FD | 	jmp	#LR__4828
30a4c                 | LR__4822
30a4c     04 4E 05 F1 | 	add	fp, #4
30a50     A7 2A 02 FB | 	rdlong	local03, fp
30a54     1C 2A 06 F1 | 	add	local03, #28
30a58     15 2B 02 FB | 	rdlong	local03, local03
30a5c     1C 4E 05 F1 | 	add	fp, #28
30a60     A7 26 02 FB | 	rdlong	local01, fp
30a64     20 4E 85 F1 | 	sub	fp, #32
30a68     13 2B 0A F2 | 	cmp	local03, local01 wz
30a6c     EC 00 90 AD |  if_e	jmp	#LR__4826
30a70     04 4E 05 F1 | 	add	fp, #4
30a74     A7 26 02 FB | 	rdlong	local01, fp
30a78     04 4E 85 F1 | 	sub	fp, #4
30a7c     10 26 06 F1 | 	add	local01, #16
30a80     13 2B C2 FA | 	rdbyte	local03, local01
30a84     80 2A CE F7 | 	test	local03, #128 wz
30a88     7C 00 90 AD |  if_e	jmp	#LR__4824
30a8c     18 4E 05 F1 | 	add	fp, #24
30a90     A7 26 02 FB | 	rdlong	local01, fp
30a94     01 26 06 F1 | 	add	local01, #1
30a98     13 13 C2 FA | 	rdbyte	arg01, local01
30a9c     14 4E 85 F1 | 	sub	fp, #20
30aa0     A7 2A 02 FB | 	rdlong	local03, fp
30aa4     15 15 02 F6 | 	mov	arg02, local03
30aa8     28 14 06 F1 | 	add	arg02, #40
30aac     04 4E 85 F1 | 	sub	fp, #4
30ab0     1C 2A 06 F1 | 	add	local03, #28
30ab4     15 17 02 FB | 	rdlong	arg03, local03
30ab8     01 18 06 F6 | 	mov	arg04, #1
30abc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
30ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
30ac4     1C 00 90 AD |  if_e	jmp	#LR__4823
30ac8     04 4E 05 F1 | 	add	fp, #4
30acc     A7 2A 02 FB | 	rdlong	local03, fp
30ad0     04 4E 85 F1 | 	sub	fp, #4
30ad4     11 2A 06 F1 | 	add	local03, #17
30ad8     15 03 48 FC | 	wrbyte	#1, local03
30adc     01 FA 05 F6 | 	mov	result1, #1
30ae0     A4 01 90 FD | 	jmp	#LR__4830
30ae4                 | LR__4823
30ae4     04 4E 05 F1 | 	add	fp, #4
30ae8     A7 3A 02 FB | 	rdlong	local11, fp
30aec     1D 2B 02 F6 | 	mov	local03, local11
30af0     04 4E 85 F1 | 	sub	fp, #4
30af4     10 3A 06 F1 | 	add	local11, #16
30af8     1D 3B C2 FA | 	rdbyte	local11, local11
30afc     7F 3A 06 F5 | 	and	local11, #127
30b00     10 2A 06 F1 | 	add	local03, #16
30b04     15 3B 42 FC | 	wrbyte	local11, local03
30b08                 | LR__4824
30b08     18 4E 05 F1 | 	add	fp, #24
30b0c     A7 26 02 FB | 	rdlong	local01, fp
30b10     01 26 06 F1 | 	add	local01, #1
30b14     13 13 C2 FA | 	rdbyte	arg01, local01
30b18     14 4E 85 F1 | 	sub	fp, #20
30b1c     A7 14 02 FB | 	rdlong	arg02, fp
30b20     28 14 06 F1 | 	add	arg02, #40
30b24     1C 4E 05 F1 | 	add	fp, #28
30b28     A7 16 02 FB | 	rdlong	arg03, fp
30b2c     20 4E 85 F1 | 	sub	fp, #32
30b30     01 18 06 F6 | 	mov	arg04, #1
30b34     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
30b38     00 FA 0D F2 | 	cmp	result1, #0 wz
30b3c     1C 00 90 AD |  if_e	jmp	#LR__4825
30b40     04 4E 05 F1 | 	add	fp, #4
30b44     A7 2A 02 FB | 	rdlong	local03, fp
30b48     04 4E 85 F1 | 	sub	fp, #4
30b4c     11 2A 06 F1 | 	add	local03, #17
30b50     15 03 48 FC | 	wrbyte	#1, local03
30b54     01 FA 05 F6 | 	mov	result1, #1
30b58     2C 01 90 FD | 	jmp	#LR__4830
30b5c                 | LR__4825
30b5c                 | LR__4826
30b5c     04 4E 05 F1 | 	add	fp, #4
30b60     A7 2A 02 FB | 	rdlong	local03, fp
30b64     1C 4E 05 F1 | 	add	fp, #28
30b68     A7 3A 02 FB | 	rdlong	local11, fp
30b6c     20 4E 85 F1 | 	sub	fp, #32
30b70     1C 2A 06 F1 | 	add	local03, #28
30b74     15 3B 62 FC | 	wrlong	local11, local03
30b78                 | LR__4827
30b78     04 4E 05 F1 | 	add	fp, #4
30b7c     A7 26 02 FB | 	rdlong	local01, fp
30b80     14 26 06 F1 | 	add	local01, #20
30b84     13 3B 02 FB | 	rdlong	local11, local01
30b88     FF 3B 06 F5 | 	and	local11, #511
30b8c     09 2A C6 F9 | 	decod	local03, #9
30b90     1D 2B 82 F1 | 	sub	local03, local11
30b94     24 4E 05 F1 | 	add	fp, #36
30b98     A7 2A 62 FC | 	wrlong	local03, fp
30b9c     1C 4E 85 F1 | 	sub	fp, #28
30ba0     A7 3A 02 FB | 	rdlong	local11, fp
30ba4     0C 4E 85 F1 | 	sub	fp, #12
30ba8     1D 2B 1A F2 | 	cmp	local03, local11 wcz
30bac     0C 4E 05 11 |  if_a	add	fp, #12
30bb0     A7 2A 02 1B |  if_a	rdlong	local03, fp
30bb4     1C 4E 05 11 |  if_a	add	fp, #28
30bb8     A7 2A 62 1C |  if_a	wrlong	local03, fp
30bbc     28 4E 85 11 |  if_a	sub	fp, #40
30bc0     34 4E 05 F1 | 	add	fp, #52
30bc4     A7 12 02 FB | 	rdlong	arg01, fp
30bc8     30 4E 85 F1 | 	sub	fp, #48
30bcc     A7 30 02 FB | 	rdlong	local06, fp
30bd0     18 15 02 F6 | 	mov	arg02, local06
30bd4     28 14 06 F1 | 	add	arg02, #40
30bd8     14 30 06 F1 | 	add	local06, #20
30bdc     18 3B 02 FB | 	rdlong	local11, local06
30be0     1D 37 02 F6 | 	mov	local09, local11
30be4     1B 39 02 F6 | 	mov	local10, local09
30be8     FF 39 06 F5 | 	and	local10, #511
30bec     1C 15 02 F1 | 	add	arg02, local10
30bf0     24 4E 05 F1 | 	add	fp, #36
30bf4     A7 16 02 FB | 	rdlong	arg03, fp
30bf8     28 4E 85 F1 | 	sub	fp, #40
30bfc     94 41 BF FD | 	call	#__system____builtin_memmove
30c00                 | LR__4828
30c00     0C 4E 05 F1 | 	add	fp, #12
30c04     A7 2A 02 FB | 	rdlong	local03, fp
30c08     1C 4E 05 F1 | 	add	fp, #28
30c0c     A7 34 02 FB | 	rdlong	local08, fp
30c10     1A 2B 82 F1 | 	sub	local03, local08
30c14     1C 4E 85 F1 | 	sub	fp, #28
30c18     A7 2A 62 FC | 	wrlong	local03, fp
30c1c     04 4E 05 F1 | 	add	fp, #4
30c20     A7 26 02 FB | 	rdlong	local01, fp
30c24     13 33 02 FB | 	rdlong	local07, local01
30c28     18 4E 05 F1 | 	add	fp, #24
30c2c     A7 34 02 FB | 	rdlong	local08, fp
30c30     1A 33 02 F1 | 	add	local07, local08
30c34     13 33 62 FC | 	wrlong	local07, local01
30c38     0C 4E 05 F1 | 	add	fp, #12
30c3c     A7 2A 02 FB | 	rdlong	local03, fp
30c40     0C 4E 85 F1 | 	sub	fp, #12
30c44     A7 3C 02 FB | 	rdlong	local12, fp
30c48     1E 2B 02 F1 | 	add	local03, local12
30c4c     0C 4E 05 F1 | 	add	fp, #12
30c50     A7 2A 62 FC | 	wrlong	local03, fp
30c54     30 4E 85 F1 | 	sub	fp, #48
30c58     A7 3E 02 FB | 	rdlong	local13, fp
30c5c     1F 2B 02 F6 | 	mov	local03, local13
30c60     14 3E 06 F1 | 	add	local13, #20
30c64     1F 41 02 FB | 	rdlong	local14, local13
30c68     24 4E 05 F1 | 	add	fp, #36
30c6c     A7 30 02 FB | 	rdlong	local06, fp
30c70     28 4E 85 F1 | 	sub	fp, #40
30c74     18 41 02 F1 | 	add	local14, local06
30c78     14 2A 06 F1 | 	add	local03, #20
30c7c     15 41 62 FC | 	wrlong	local14, local03
30c80     84 FA 9F FD | 	jmp	#LR__4812
30c84                 | LR__4829
30c84                 | ' 
30c84                 | ' 
30c84                 | ' 
30c84                 | ' 
30c84                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
30c84                 | ' 
30c84                 | ' 	}
30c84                 | ' 
30c84                 | ' 	return FR_OK ;
30c84     00 FA 05 F6 | 	mov	result1, #0
30c88                 | LR__4830
30c88     A7 F0 03 F6 | 	mov	ptra, fp
30c8c     B2 00 A0 FD | 	call	#popregs_
30c90                 | _fatfs_cc_f_read_ret
30c90     2D 00 64 FD | 	ret
30c94                 | 
30c94                 | _fatfs_cc_f_write
30c94     15 4A 05 F6 | 	mov	COUNT_, #21
30c98     A8 00 A0 FD | 	call	#pushregs_
30c9c     34 F0 07 F1 | 	add	ptra, #52
30ca0     04 4E 05 F1 | 	add	fp, #4
30ca4     A7 12 62 FC | 	wrlong	arg01, fp
30ca8     04 4E 05 F1 | 	add	fp, #4
30cac     A7 14 62 FC | 	wrlong	arg02, fp
30cb0     04 4E 05 F1 | 	add	fp, #4
30cb4     A7 16 62 FC | 	wrlong	arg03, fp
30cb8     04 4E 05 F1 | 	add	fp, #4
30cbc     A7 18 62 FC | 	wrlong	arg04, fp
30cc0     08 4E 85 F1 | 	sub	fp, #8
30cc4     A7 FA 01 FB | 	rdlong	result1, fp
30cc8     28 4E 05 F1 | 	add	fp, #40
30ccc     A7 FA 61 FC | 	wrlong	result1, fp
30cd0     20 4E 85 F1 | 	sub	fp, #32
30cd4     A7 FA 01 FB | 	rdlong	result1, fp
30cd8     FD 00 68 FC | 	wrlong	#0, result1
30cdc     0C 4E 85 F1 | 	sub	fp, #12
30ce0     A7 12 02 FB | 	rdlong	arg01, fp
30ce4     14 4E 05 F1 | 	add	fp, #20
30ce8     A7 14 02 F6 | 	mov	arg02, fp
30cec     18 4E 85 F1 | 	sub	fp, #24
30cf0     88 F0 BF FD | 	call	#_fatfs_cc_validate
30cf4     14 4E 05 F1 | 	add	fp, #20
30cf8     A7 FA 61 FC | 	wrlong	result1, fp
30cfc     00 FA 4D F2 | 	cmps	result1, #0 wz
30d00     14 4E 85 F1 | 	sub	fp, #20
30d04     20 00 90 5D |  if_ne	jmp	#LR__4840
30d08     04 4E 05 F1 | 	add	fp, #4
30d0c     A7 14 02 FB | 	rdlong	arg02, fp
30d10     11 14 06 F1 | 	add	arg02, #17
30d14     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
30d18     10 4E 05 F1 | 	add	fp, #16
30d1c     A7 14 62 FC | 	wrlong	arg02, fp
30d20     14 4E 85 F1 | 	sub	fp, #20
30d24     10 00 90 AD |  if_e	jmp	#LR__4841
30d28                 | LR__4840
30d28     14 4E 05 F1 | 	add	fp, #20
30d2c     A7 FA 01 FB | 	rdlong	result1, fp
30d30     14 4E 85 F1 | 	sub	fp, #20
30d34     44 07 90 FD | 	jmp	#LR__4863
30d38                 | LR__4841
30d38     04 4E 05 F1 | 	add	fp, #4
30d3c     A7 14 02 FB | 	rdlong	arg02, fp
30d40     04 4E 85 F1 | 	sub	fp, #4
30d44     10 14 06 F1 | 	add	arg02, #16
30d48     0A 15 C2 FA | 	rdbyte	arg02, arg02
30d4c     02 14 CE F7 | 	test	arg02, #2 wz
30d50     07 FA 05 A6 |  if_e	mov	result1, #7
30d54     24 07 90 AD |  if_e	jmp	#LR__4863
30d58     04 4E 05 F1 | 	add	fp, #4
30d5c     A7 14 02 FB | 	rdlong	arg02, fp
30d60     0A 13 02 F6 | 	mov	arg01, arg02
30d64     14 12 06 F1 | 	add	arg01, #20
30d68     09 13 02 FB | 	rdlong	arg01, arg01
30d6c     08 4E 05 F1 | 	add	fp, #8
30d70     A7 FA 01 FB | 	rdlong	result1, fp
30d74     FD 12 02 F1 | 	add	arg01, result1
30d78     0C 4E 85 F1 | 	sub	fp, #12
30d7c     14 14 06 F1 | 	add	arg02, #20
30d80     0A FB 01 FB | 	rdlong	result1, arg02
30d84     FD 12 12 F2 | 	cmp	arg01, result1 wc
30d88     24 00 90 3D |  if_ae	jmp	#LR__4842
30d8c     04 4E 05 F1 | 	add	fp, #4
30d90     A7 14 02 FB | 	rdlong	arg02, fp
30d94     01 FA 65 F6 | 	neg	result1, #1
30d98     14 14 06 F1 | 	add	arg02, #20
30d9c     0A 15 02 FB | 	rdlong	arg02, arg02
30da0     0A FB 81 F1 | 	sub	result1, arg02
30da4     08 4E 05 F1 | 	add	fp, #8
30da8     A7 FA 61 FC | 	wrlong	result1, fp
30dac     0C 4E 85 F1 | 	sub	fp, #12
30db0                 | LR__4842
30db0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
30db0                 | ' 	}
30db0                 | ' 
30db0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
30db0                 | LR__4843
30db0     0C 4E 05 F1 | 	add	fp, #12
30db4     A7 FA 01 FB | 	rdlong	result1, fp
30db8     0C 4E 85 F1 | 	sub	fp, #12
30dbc     01 FA 15 F2 | 	cmp	result1, #1 wc
30dc0     90 06 90 CD |  if_b	jmp	#LR__4862
30dc4     04 4E 05 F1 | 	add	fp, #4
30dc8     A7 FA 01 FB | 	rdlong	result1, fp
30dcc     04 4E 85 F1 | 	sub	fp, #4
30dd0     14 FA 05 F1 | 	add	result1, #20
30dd4     FD FA 01 FB | 	rdlong	result1, result1
30dd8     FF FB CD F7 | 	test	result1, #511 wz
30ddc     D8 04 90 5D |  if_ne	jmp	#LR__4858
30de0     04 4E 05 F1 | 	add	fp, #4
30de4     A7 FA 01 FB | 	rdlong	result1, fp
30de8     14 FA 05 F1 | 	add	result1, #20
30dec     FD FA 01 FB | 	rdlong	result1, result1
30df0     09 FA 45 F0 | 	shr	result1, #9
30df4     14 4E 05 F1 | 	add	fp, #20
30df8     A7 14 02 FB | 	rdlong	arg02, fp
30dfc     0A 14 06 F1 | 	add	arg02, #10
30e00     0A 19 E2 FA | 	rdword	arg04, arg02
30e04     0C 15 32 F9 | 	getword	arg02, arg04, #0
30e08     01 14 86 F1 | 	sub	arg02, #1
30e0c     0A FB 09 F5 | 	and	result1, arg02 wz
30e10     14 4E 05 F1 | 	add	fp, #20
30e14     A7 FA 61 FC | 	wrlong	result1, fp
30e18     2C 4E 85 F1 | 	sub	fp, #44
30e1c     44 01 90 5D |  if_ne	jmp	#LR__4849
30e20     04 4E 05 F1 | 	add	fp, #4
30e24     A7 FA 01 FB | 	rdlong	result1, fp
30e28     04 4E 85 F1 | 	sub	fp, #4
30e2c     14 FA 05 F1 | 	add	result1, #20
30e30     FD 14 0A FB | 	rdlong	arg02, result1 wz
30e34     44 00 90 5D |  if_ne	jmp	#LR__4844
30e38     04 4E 05 F1 | 	add	fp, #4
30e3c     A7 14 02 FB | 	rdlong	arg02, fp
30e40     08 14 06 F1 | 	add	arg02, #8
30e44     0A 15 0A FB | 	rdlong	arg02, arg02 wz
30e48     18 4E 05 F1 | 	add	fp, #24
30e4c     A7 14 62 FC | 	wrlong	arg02, fp
30e50     1C 4E 85 F1 | 	sub	fp, #28
30e54     4C 00 90 5D |  if_ne	jmp	#LR__4845
30e58     04 4E 05 F1 | 	add	fp, #4
30e5c     A7 12 02 FB | 	rdlong	arg01, fp
30e60     04 4E 85 F1 | 	sub	fp, #4
30e64     00 14 06 F6 | 	mov	arg02, #0
30e68     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
30e6c     1C 4E 05 F1 | 	add	fp, #28
30e70     A7 FA 61 FC | 	wrlong	result1, fp
30e74     1C 4E 85 F1 | 	sub	fp, #28
30e78     28 00 90 FD | 	jmp	#LR__4845
30e7c                 | LR__4844
30e7c     04 4E 05 F1 | 	add	fp, #4
30e80     A7 18 02 FB | 	rdlong	arg04, fp
30e84     0C 13 02 F6 | 	mov	arg01, arg04
30e88     04 4E 85 F1 | 	sub	fp, #4
30e8c     18 18 06 F1 | 	add	arg04, #24
30e90     0C 15 02 FB | 	rdlong	arg02, arg04
30e94     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
30e98     1C 4E 05 F1 | 	add	fp, #28
30e9c     A7 FA 61 FC | 	wrlong	result1, fp
30ea0     1C 4E 85 F1 | 	sub	fp, #28
30ea4                 | LR__4845
30ea4     1C 4E 05 F1 | 	add	fp, #28
30ea8     A7 FA 09 FB | 	rdlong	result1, fp wz
30eac     1C 4E 85 F1 | 	sub	fp, #28
30eb0     A0 05 90 AD |  if_e	jmp	#LR__4862
30eb4     1C 4E 05 F1 | 	add	fp, #28
30eb8     A7 FA 01 FB | 	rdlong	result1, fp
30ebc     1C 4E 85 F1 | 	sub	fp, #28
30ec0     01 FA 0D F2 | 	cmp	result1, #1 wz
30ec4     1C 00 90 5D |  if_ne	jmp	#LR__4846
30ec8     04 4E 05 F1 | 	add	fp, #4
30ecc     A7 FA 01 FB | 	rdlong	result1, fp
30ed0     04 4E 85 F1 | 	sub	fp, #4
30ed4     11 FA 05 F1 | 	add	result1, #17
30ed8     FD 04 48 FC | 	wrbyte	#2, result1
30edc     02 FA 05 F6 | 	mov	result1, #2
30ee0     98 05 90 FD | 	jmp	#LR__4863
30ee4                 | LR__4846
30ee4     1C 4E 05 F1 | 	add	fp, #28
30ee8     A7 FA 01 FB | 	rdlong	result1, fp
30eec     1C 4E 85 F1 | 	sub	fp, #28
30ef0     FF FF 7F FF 
30ef4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30ef8     1C 00 90 5D |  if_ne	jmp	#LR__4847
30efc     04 4E 05 F1 | 	add	fp, #4
30f00     A7 FA 01 FB | 	rdlong	result1, fp
30f04     04 4E 85 F1 | 	sub	fp, #4
30f08     11 FA 05 F1 | 	add	result1, #17
30f0c     FD 02 48 FC | 	wrbyte	#1, result1
30f10     01 FA 05 F6 | 	mov	result1, #1
30f14     64 05 90 FD | 	jmp	#LR__4863
30f18                 | LR__4847
30f18     04 4E 05 F1 | 	add	fp, #4
30f1c     A7 FA 01 FB | 	rdlong	result1, fp
30f20     18 4E 05 F1 | 	add	fp, #24
30f24     A7 18 02 FB | 	rdlong	arg04, fp
30f28     18 FA 05 F1 | 	add	result1, #24
30f2c     FD 18 62 FC | 	wrlong	arg04, result1
30f30     18 4E 85 F1 | 	sub	fp, #24
30f34     A7 FA 01 FB | 	rdlong	result1, fp
30f38     04 4E 85 F1 | 	sub	fp, #4
30f3c     08 FA 05 F1 | 	add	result1, #8
30f40     FD FA 09 FB | 	rdlong	result1, result1 wz
30f44     1C 00 90 5D |  if_ne	jmp	#LR__4848
30f48     04 4E 05 F1 | 	add	fp, #4
30f4c     A7 18 02 FB | 	rdlong	arg04, fp
30f50     18 4E 05 F1 | 	add	fp, #24
30f54     A7 FA 01 FB | 	rdlong	result1, fp
30f58     1C 4E 85 F1 | 	sub	fp, #28
30f5c     08 18 06 F1 | 	add	arg04, #8
30f60     0C FB 61 FC | 	wrlong	result1, arg04
30f64                 | LR__4848
30f64                 | LR__4849
30f64     04 4E 05 F1 | 	add	fp, #4
30f68     A7 18 02 FB | 	rdlong	arg04, fp
30f6c     04 4E 85 F1 | 	sub	fp, #4
30f70     10 18 06 F1 | 	add	arg04, #16
30f74     0C 19 C2 FA | 	rdbyte	arg04, arg04
30f78     80 18 CE F7 | 	test	arg04, #128 wz
30f7c     7C 00 90 AD |  if_e	jmp	#LR__4851
30f80     18 4E 05 F1 | 	add	fp, #24
30f84     A7 18 02 FB | 	rdlong	arg04, fp
30f88     01 18 06 F1 | 	add	arg04, #1
30f8c     0C 13 C2 FA | 	rdbyte	arg01, arg04
30f90     14 4E 85 F1 | 	sub	fp, #20
30f94     A7 18 02 FB | 	rdlong	arg04, fp
30f98     0C 15 02 F6 | 	mov	arg02, arg04
30f9c     28 14 06 F1 | 	add	arg02, #40
30fa0     04 4E 85 F1 | 	sub	fp, #4
30fa4     1C 18 06 F1 | 	add	arg04, #28
30fa8     0C 17 02 FB | 	rdlong	arg03, arg04
30fac     01 18 06 F6 | 	mov	arg04, #1
30fb0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
30fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
30fb8     1C 00 90 AD |  if_e	jmp	#LR__4850
30fbc     04 4E 05 F1 | 	add	fp, #4
30fc0     A7 FA 01 FB | 	rdlong	result1, fp
30fc4     04 4E 85 F1 | 	sub	fp, #4
30fc8     11 FA 05 F1 | 	add	result1, #17
30fcc     FD 02 48 FC | 	wrbyte	#1, result1
30fd0     01 FA 05 F6 | 	mov	result1, #1
30fd4     A4 04 90 FD | 	jmp	#LR__4863
30fd8                 | LR__4850
30fd8     04 4E 05 F1 | 	add	fp, #4
30fdc     A7 18 02 FB | 	rdlong	arg04, fp
30fe0     0C FB 01 F6 | 	mov	result1, arg04
30fe4     04 4E 85 F1 | 	sub	fp, #4
30fe8     10 18 06 F1 | 	add	arg04, #16
30fec     0C 19 C2 FA | 	rdbyte	arg04, arg04
30ff0     7F 18 06 F5 | 	and	arg04, #127
30ff4     10 FA 05 F1 | 	add	result1, #16
30ff8     FD 18 42 FC | 	wrbyte	arg04, result1
30ffc                 | LR__4851
30ffc     18 4E 05 F1 | 	add	fp, #24
31000     A7 12 02 FB | 	rdlong	arg01, fp
31004     14 4E 85 F1 | 	sub	fp, #20
31008     A7 14 02 FB | 	rdlong	arg02, fp
3100c     04 4E 85 F1 | 	sub	fp, #4
31010     18 14 06 F1 | 	add	arg02, #24
31014     0A 15 02 FB | 	rdlong	arg02, arg02
31018     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
3101c     20 4E 05 F1 | 	add	fp, #32
31020     A7 FA 61 FC | 	wrlong	result1, fp
31024     20 4E 85 F1 | 	sub	fp, #32
31028     00 FA 0D F2 | 	cmp	result1, #0 wz
3102c     1C 00 90 5D |  if_ne	jmp	#LR__4852
31030     04 4E 05 F1 | 	add	fp, #4
31034     A7 FA 01 FB | 	rdlong	result1, fp
31038     04 4E 85 F1 | 	sub	fp, #4
3103c     11 FA 05 F1 | 	add	result1, #17
31040     FD 04 48 FC | 	wrbyte	#2, result1
31044     02 FA 05 F6 | 	mov	result1, #2
31048     30 04 90 FD | 	jmp	#LR__4863
3104c                 | LR__4852
3104c     20 4E 05 F1 | 	add	fp, #32
31050     A7 FA 01 FB | 	rdlong	result1, fp
31054     0C 4E 05 F1 | 	add	fp, #12
31058     A7 26 02 FB | 	rdlong	local01, fp
3105c     13 FB 01 F1 | 	add	result1, local01
31060     0C 4E 85 F1 | 	sub	fp, #12
31064     A7 FA 61 FC | 	wrlong	result1, fp
31068     14 4E 85 F1 | 	sub	fp, #20
3106c     A7 FA 01 FB | 	rdlong	result1, fp
31070     09 FA 45 F0 | 	shr	result1, #9
31074     1C 4E 05 F1 | 	add	fp, #28
31078     A7 FA 61 FC | 	wrlong	result1, fp
3107c     28 4E 85 F1 | 	sub	fp, #40
31080     01 FA 15 F2 | 	cmp	result1, #1 wc
31084     60 01 90 CD |  if_b	jmp	#LR__4856
31088     2C 4E 05 F1 | 	add	fp, #44
3108c     A7 FA 01 FB | 	rdlong	result1, fp
31090     04 4E 85 F1 | 	sub	fp, #4
31094     A7 18 02 FB | 	rdlong	arg04, fp
31098     0C FB 01 F1 | 	add	result1, arg04
3109c     10 4E 85 F1 | 	sub	fp, #16
310a0     A7 18 02 FB | 	rdlong	arg04, fp
310a4     18 4E 85 F1 | 	sub	fp, #24
310a8     0A 18 06 F1 | 	add	arg04, #10
310ac     0C 19 E2 FA | 	rdword	arg04, arg04
310b0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
310b4     28 00 90 ED |  if_be	jmp	#LR__4853
310b8     18 4E 05 F1 | 	add	fp, #24
310bc     A7 FA 01 FB | 	rdlong	result1, fp
310c0     0A FA 05 F1 | 	add	result1, #10
310c4     FD FA E1 FA | 	rdword	result1, result1
310c8     14 4E 05 F1 | 	add	fp, #20
310cc     A7 18 02 FB | 	rdlong	arg04, fp
310d0     0C FB 81 F1 | 	sub	result1, arg04
310d4     04 4E 85 F1 | 	sub	fp, #4
310d8     A7 FA 61 FC | 	wrlong	result1, fp
310dc     28 4E 85 F1 | 	sub	fp, #40
310e0                 | LR__4853
310e0     18 4E 05 F1 | 	add	fp, #24
310e4     A7 18 02 FB | 	rdlong	arg04, fp
310e8     01 18 06 F1 | 	add	arg04, #1
310ec     0C 13 C2 FA | 	rdbyte	arg01, arg04
310f0     18 4E 05 F1 | 	add	fp, #24
310f4     A7 14 02 FB | 	rdlong	arg02, fp
310f8     10 4E 85 F1 | 	sub	fp, #16
310fc     A7 16 02 FB | 	rdlong	arg03, fp
31100     08 4E 05 F1 | 	add	fp, #8
31104     A7 18 02 FB | 	rdlong	arg04, fp
31108     28 4E 85 F1 | 	sub	fp, #40
3110c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
31110     00 FA 0D F2 | 	cmp	result1, #0 wz
31114     1C 00 90 AD |  if_e	jmp	#LR__4854
31118     04 4E 05 F1 | 	add	fp, #4
3111c     A7 26 02 FB | 	rdlong	local01, fp
31120     04 4E 85 F1 | 	sub	fp, #4
31124     11 26 06 F1 | 	add	local01, #17
31128     13 03 48 FC | 	wrbyte	#1, local01
3112c     01 FA 05 F6 | 	mov	result1, #1
31130     48 03 90 FD | 	jmp	#LR__4863
31134                 | LR__4854
31134     04 4E 05 F1 | 	add	fp, #4
31138     A7 FA 01 FB | 	rdlong	result1, fp
3113c     1C FA 05 F1 | 	add	result1, #28
31140     FD FA 01 FB | 	rdlong	result1, result1
31144     1C 4E 05 F1 | 	add	fp, #28
31148     A7 28 02 FB | 	rdlong	local02, fp
3114c     14 FB 81 F1 | 	sub	result1, local02
31150     08 4E 05 F1 | 	add	fp, #8
31154     A7 18 02 FB | 	rdlong	arg04, fp
31158     28 4E 85 F1 | 	sub	fp, #40
3115c     0C FB 11 F2 | 	cmp	result1, arg04 wc
31160     68 00 90 3D |  if_ae	jmp	#LR__4855
31164     04 4E 05 F1 | 	add	fp, #4
31168     A7 12 02 FB | 	rdlong	arg01, fp
3116c     28 12 06 F1 | 	add	arg01, #40
31170     2C 4E 05 F1 | 	add	fp, #44
31174     A7 14 02 FB | 	rdlong	arg02, fp
31178     2C 4E 85 F1 | 	sub	fp, #44
3117c     A7 FA 01 FB | 	rdlong	result1, fp
31180     1C FA 05 F1 | 	add	result1, #28
31184     FD 2A 02 FB | 	rdlong	local03, result1
31188     1C 4E 05 F1 | 	add	fp, #28
3118c     A7 18 02 FB | 	rdlong	arg04, fp
31190     20 4E 85 F1 | 	sub	fp, #32
31194     0C 2B 82 F1 | 	sub	local03, arg04
31198     09 2A 66 F0 | 	shl	local03, #9
3119c     15 15 02 F1 | 	add	arg02, local03
311a0     09 16 C6 F9 | 	decod	arg03, #9
311a4     EC 3B BF FD | 	call	#__system____builtin_memmove
311a8     04 4E 05 F1 | 	add	fp, #4
311ac     A7 18 02 FB | 	rdlong	arg04, fp
311b0     0C FB 01 F6 | 	mov	result1, arg04
311b4     04 4E 85 F1 | 	sub	fp, #4
311b8     10 18 06 F1 | 	add	arg04, #16
311bc     0C 19 C2 FA | 	rdbyte	arg04, arg04
311c0     7F 18 06 F5 | 	and	arg04, #127
311c4     10 FA 05 F1 | 	add	result1, #16
311c8     FD 18 42 FC | 	wrbyte	arg04, result1
311cc                 | LR__4855
311cc     28 4E 05 F1 | 	add	fp, #40
311d0     A7 FA 01 FB | 	rdlong	result1, fp
311d4     09 FA 65 F0 | 	shl	result1, #9
311d8     04 4E 85 F1 | 	sub	fp, #4
311dc     A7 FA 61 FC | 	wrlong	result1, fp
311e0     24 4E 85 F1 | 	sub	fp, #36
311e4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
311e4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
311e4                 | ' 				}
311e4                 | ' 
311e4                 | ' 
311e4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
311e4                 | ' 				continue;
311e4     74 01 90 FD | 	jmp	#LR__4859
311e8                 | LR__4856
311e8     04 4E 05 F1 | 	add	fp, #4
311ec     A7 28 02 FB | 	rdlong	local02, fp
311f0     1C 28 06 F1 | 	add	local02, #28
311f4     14 FB 01 FB | 	rdlong	result1, local02
311f8     1C 4E 05 F1 | 	add	fp, #28
311fc     A7 28 02 FB | 	rdlong	local02, fp
31200     20 4E 85 F1 | 	sub	fp, #32
31204     14 FB 09 F2 | 	cmp	result1, local02 wz
31208     90 00 90 AD |  if_e	jmp	#LR__4857
3120c     04 4E 05 F1 | 	add	fp, #4
31210     A7 FA 01 FB | 	rdlong	result1, fp
31214     FD 2A 02 F6 | 	mov	local03, result1
31218     04 4E 85 F1 | 	sub	fp, #4
3121c     14 2A 06 F1 | 	add	local03, #20
31220     15 2B 02 FB | 	rdlong	local03, local03
31224     0C FA 05 F1 | 	add	result1, #12
31228     FD 2C 02 FB | 	rdlong	local04, result1
3122c     16 2F 02 F6 | 	mov	local05, local04
31230     17 2B 12 F2 | 	cmp	local03, local05 wc
31234     64 00 90 3D |  if_ae	jmp	#LR__4857
31238     18 4E 05 F1 | 	add	fp, #24
3123c     A7 18 02 FB | 	rdlong	arg04, fp
31240     01 18 06 F1 | 	add	arg04, #1
31244     0C 13 C2 FA | 	rdbyte	arg01, arg04
31248     14 4E 85 F1 | 	sub	fp, #20
3124c     A7 30 02 FB | 	rdlong	local06, fp
31250     28 30 06 F1 | 	add	local06, #40
31254     18 33 02 F6 | 	mov	local07, local06
31258     1C 4E 05 F1 | 	add	fp, #28
3125c     A7 34 02 FB | 	rdlong	local08, fp
31260     20 4E 85 F1 | 	sub	fp, #32
31264     01 36 06 F6 | 	mov	local09, #1
31268     19 15 02 F6 | 	mov	arg02, local07
3126c     1A 17 02 F6 | 	mov	arg03, local08
31270     01 18 06 F6 | 	mov	arg04, #1
31274     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
31278     FD 38 0A F6 | 	mov	local10, result1 wz
3127c     1C 00 90 AD |  if_e	jmp	#LR__4857
31280     04 4E 05 F1 | 	add	fp, #4
31284     A7 38 02 FB | 	rdlong	local10, fp
31288     04 4E 85 F1 | 	sub	fp, #4
3128c     11 38 06 F1 | 	add	local10, #17
31290     1C 03 48 FC | 	wrbyte	#1, local10
31294                 | ' 				fp->fptr < fp->obj.objsize &&
31294                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
31294                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
31294     01 FA 05 F6 | 	mov	result1, #1
31298     E0 01 90 FD | 	jmp	#LR__4863
3129c                 | LR__4857
3129c     04 4E 05 F1 | 	add	fp, #4
312a0     A7 18 02 FB | 	rdlong	arg04, fp
312a4     1C 4E 05 F1 | 	add	fp, #28
312a8     A7 FA 01 FB | 	rdlong	result1, fp
312ac     20 4E 85 F1 | 	sub	fp, #32
312b0     1C 18 06 F1 | 	add	arg04, #28
312b4     0C FB 61 FC | 	wrlong	result1, arg04
312b8                 | LR__4858
312b8     04 4E 05 F1 | 	add	fp, #4
312bc     A7 FA 01 FB | 	rdlong	result1, fp
312c0     14 FA 05 F1 | 	add	result1, #20
312c4     FD FA 01 FB | 	rdlong	result1, result1
312c8     FF FB 05 F5 | 	and	result1, #511
312cc     09 3A C6 F9 | 	decod	local11, #9
312d0     FD 3A 82 F1 | 	sub	local11, result1
312d4     20 4E 05 F1 | 	add	fp, #32
312d8     A7 3A 62 FC | 	wrlong	local11, fp
312dc     18 4E 85 F1 | 	sub	fp, #24
312e0     A7 FA 01 FB | 	rdlong	result1, fp
312e4     0C 4E 85 F1 | 	sub	fp, #12
312e8     FD 3A 1A F2 | 	cmp	local11, result1 wcz
312ec     0C 4E 05 11 |  if_a	add	fp, #12
312f0     A7 3A 02 1B |  if_a	rdlong	local11, fp
312f4     18 4E 05 11 |  if_a	add	fp, #24
312f8     A7 3A 62 1C |  if_a	wrlong	local11, fp
312fc     24 4E 85 11 |  if_a	sub	fp, #36
31300     04 4E 05 F1 | 	add	fp, #4
31304     A7 3A 02 FB | 	rdlong	local11, fp
31308     1D 13 02 F6 | 	mov	arg01, local11
3130c     28 12 06 F1 | 	add	arg01, #40
31310     14 3A 06 F1 | 	add	local11, #20
31314     1D 3B 02 FB | 	rdlong	local11, local11
31318     FF 3B 06 F5 | 	and	local11, #511
3131c     1D 13 02 F1 | 	add	arg01, local11
31320     2C 4E 05 F1 | 	add	fp, #44
31324     A7 14 02 FB | 	rdlong	arg02, fp
31328     0C 4E 85 F1 | 	sub	fp, #12
3132c     A7 16 02 FB | 	rdlong	arg03, fp
31330     24 4E 85 F1 | 	sub	fp, #36
31334     5C 3A BF FD | 	call	#__system____builtin_memmove
31338     04 4E 05 F1 | 	add	fp, #4
3133c     A7 FA 01 FB | 	rdlong	result1, fp
31340     FD 3A 02 F6 | 	mov	local11, result1
31344     04 4E 85 F1 | 	sub	fp, #4
31348     10 FA 05 F1 | 	add	result1, #16
3134c     FD FA C1 FA | 	rdbyte	result1, result1
31350     80 FA 45 F5 | 	or	result1, #128
31354     10 3A 06 F1 | 	add	local11, #16
31358     1D FB 41 FC | 	wrbyte	result1, local11
3135c                 | LR__4859
3135c     0C 4E 05 F1 | 	add	fp, #12
31360     A7 3A 02 FB | 	rdlong	local11, fp
31364     18 4E 05 F1 | 	add	fp, #24
31368     A7 FA 01 FB | 	rdlong	result1, fp
3136c     FD 3A 82 F1 | 	sub	local11, result1
31370     18 4E 85 F1 | 	sub	fp, #24
31374     A7 3A 62 FC | 	wrlong	local11, fp
31378     04 4E 05 F1 | 	add	fp, #4
3137c     A7 3C 02 FB | 	rdlong	local12, fp
31380     1E 3B 02 FB | 	rdlong	local11, local12
31384     14 4E 05 F1 | 	add	fp, #20
31388     A7 3E 02 FB | 	rdlong	local13, fp
3138c     1F 3B 02 F1 | 	add	local11, local13
31390     1E 3B 62 FC | 	wrlong	local11, local12
31394     0C 4E 05 F1 | 	add	fp, #12
31398     A7 3A 02 FB | 	rdlong	local11, fp
3139c     0C 4E 85 F1 | 	sub	fp, #12
313a0     A7 40 02 FB | 	rdlong	local14, fp
313a4     20 3B 02 F1 | 	add	local11, local14
313a8     0C 4E 05 F1 | 	add	fp, #12
313ac     A7 3A 62 FC | 	wrlong	local11, fp
313b0     2C 4E 85 F1 | 	sub	fp, #44
313b4     A7 42 02 FB | 	rdlong	local15, fp
313b8     21 3B 02 F6 | 	mov	local11, local15
313bc     14 42 06 F1 | 	add	local15, #20
313c0     21 43 02 FB | 	rdlong	local15, local15
313c4     20 4E 05 F1 | 	add	fp, #32
313c8     A7 44 02 FB | 	rdlong	local16, fp
313cc     22 43 02 F1 | 	add	local15, local16
313d0     14 3A 06 F1 | 	add	local11, #20
313d4     1D 43 62 FC | 	wrlong	local15, local11
313d8     20 4E 85 F1 | 	sub	fp, #32
313dc     A7 46 02 FB | 	rdlong	local17, fp
313e0     23 3B 02 F6 | 	mov	local11, local17
313e4     23 49 02 F6 | 	mov	local18, local17
313e8     04 4E 85 F1 | 	sub	fp, #4
313ec     14 46 06 F1 | 	add	local17, #20
313f0     23 4B 02 FB | 	rdlong	local19, local17
313f4     0C 48 06 F1 | 	add	local18, #12
313f8     24 4D 02 FB | 	rdlong	local20, local18
313fc     26 4B 1A F2 | 	cmp	local19, local20 wcz
31400     24 00 90 ED |  if_be	jmp	#LR__4860
31404     04 4E 05 F1 | 	add	fp, #4
31408     A7 2E 02 FB | 	rdlong	local05, fp
3140c     04 4E 85 F1 | 	sub	fp, #4
31410     17 2B 02 F6 | 	mov	local03, local05
31414     14 2A 06 F1 | 	add	local03, #20
31418     15 2D 02 FB | 	rdlong	local04, local03
3141c     14 2A 86 F1 | 	sub	local03, #20
31420     16 4F 02 F6 | 	mov	local21, local04
31424     20 00 90 FD | 	jmp	#LR__4861
31428                 | LR__4860
31428     04 4E 05 F1 | 	add	fp, #4
3142c     A7 32 02 FB | 	rdlong	local07, fp
31430     04 4E 85 F1 | 	sub	fp, #4
31434     19 39 02 F6 | 	mov	local10, local07
31438     0C 38 06 F1 | 	add	local10, #12
3143c     1C 35 02 FB | 	rdlong	local08, local10
31440     0C 38 86 F1 | 	sub	local10, #12
31444     1A 4F 02 F6 | 	mov	local21, local08
31448                 | LR__4861
31448     0C 3A 06 F1 | 	add	local11, #12
3144c     1D 4F 62 FC | 	wrlong	local21, local11
31450     5C F9 9F FD | 	jmp	#LR__4843
31454                 | LR__4862
31454     04 4E 05 F1 | 	add	fp, #4
31458     A7 3C 02 FB | 	rdlong	local12, fp
3145c     1E 27 02 F6 | 	mov	local01, local12
31460     04 4E 85 F1 | 	sub	fp, #4
31464     10 3C 06 F1 | 	add	local12, #16
31468     1E 3B C2 FA | 	rdbyte	local11, local12
3146c     40 3A 46 F5 | 	or	local11, #64
31470     10 26 06 F1 | 	add	local01, #16
31474     13 3B 42 FC | 	wrbyte	local11, local01
31478                 | ' 
31478                 | ' 
31478                 | ' 
31478                 | ' 
31478                 | ' 
31478                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
31478                 | ' 		fp->flag |=  0x80 ;
31478                 | ' 
31478                 | ' 	}
31478                 | ' 
31478                 | ' 	fp->flag |=  0x40 ;
31478                 | ' 
31478                 | ' 	return FR_OK ;
31478     00 FA 05 F6 | 	mov	result1, #0
3147c                 | LR__4863
3147c     A7 F0 03 F6 | 	mov	ptra, fp
31480     B2 00 A0 FD | 	call	#popregs_
31484                 | _fatfs_cc_f_write_ret
31484     2D 00 64 FD | 	ret
31488                 | 
31488                 | _fatfs_cc_f_sync
31488     00 4A 05 F6 | 	mov	COUNT_, #0
3148c     A8 00 A0 FD | 	call	#pushregs_
31490     18 F0 07 F1 | 	add	ptra, #24
31494     04 4E 05 F1 | 	add	fp, #4
31498     A7 12 62 FC | 	wrlong	arg01, fp
3149c     08 4E 05 F1 | 	add	fp, #8
314a0     A7 14 02 F6 | 	mov	arg02, fp
314a4     0C 4E 85 F1 | 	sub	fp, #12
314a8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
314ac     08 4E 05 F1 | 	add	fp, #8
314b0     A7 FA 61 FC | 	wrlong	result1, fp
314b4     08 4E 85 F1 | 	sub	fp, #8
314b8     00 FA 0D F2 | 	cmp	result1, #0 wz
314bc     C0 01 90 5D |  if_ne	jmp	#LR__4873
314c0     04 4E 05 F1 | 	add	fp, #4
314c4     A7 18 02 FB | 	rdlong	arg04, fp
314c8     04 4E 85 F1 | 	sub	fp, #4
314cc     10 18 06 F1 | 	add	arg04, #16
314d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
314d4     40 18 CE F7 | 	test	arg04, #64 wz
314d8     A4 01 90 AD |  if_e	jmp	#LR__4872
314dc     04 4E 05 F1 | 	add	fp, #4
314e0     A7 18 02 FB | 	rdlong	arg04, fp
314e4     04 4E 85 F1 | 	sub	fp, #4
314e8     10 18 06 F1 | 	add	arg04, #16
314ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
314f0     80 18 CE F7 | 	test	arg04, #128 wz
314f4     64 00 90 AD |  if_e	jmp	#LR__4870
314f8     0C 4E 05 F1 | 	add	fp, #12
314fc     A7 18 02 FB | 	rdlong	arg04, fp
31500     01 18 06 F1 | 	add	arg04, #1
31504     0C 13 C2 FA | 	rdbyte	arg01, arg04
31508     08 4E 85 F1 | 	sub	fp, #8
3150c     A7 18 02 FB | 	rdlong	arg04, fp
31510     0C 15 02 F6 | 	mov	arg02, arg04
31514     28 14 06 F1 | 	add	arg02, #40
31518     04 4E 85 F1 | 	sub	fp, #4
3151c     1C 18 06 F1 | 	add	arg04, #28
31520     0C 17 02 FB | 	rdlong	arg03, arg04
31524     01 18 06 F6 | 	mov	arg04, #1
31528     0C AE BF FD | 	call	#_fatfs_cc_disk_write
3152c     00 FA 0D F2 | 	cmp	result1, #0 wz
31530     01 FA 05 56 |  if_ne	mov	result1, #1
31534     54 01 90 5D |  if_ne	jmp	#LR__4874
31538     04 4E 05 F1 | 	add	fp, #4
3153c     A7 18 02 FB | 	rdlong	arg04, fp
31540     0C 17 02 F6 | 	mov	arg03, arg04
31544     04 4E 85 F1 | 	sub	fp, #4
31548     10 18 06 F1 | 	add	arg04, #16
3154c     0C 19 C2 FA | 	rdbyte	arg04, arg04
31550     7F 18 06 F5 | 	and	arg04, #127
31554     10 16 06 F1 | 	add	arg03, #16
31558     0B 19 42 FC | 	wrbyte	arg04, arg03
3155c                 | LR__4870
3155c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
31560     10 4E 05 F1 | 	add	fp, #16
31564     A7 FA 61 FC | 	wrlong	result1, fp
31568     04 4E 85 F1 | 	sub	fp, #4
3156c     A7 12 02 FB | 	rdlong	arg01, fp
31570     08 4E 85 F1 | 	sub	fp, #8
31574     A7 18 02 FB | 	rdlong	arg04, fp
31578     04 4E 85 F1 | 	sub	fp, #4
3157c     20 18 06 F1 | 	add	arg04, #32
31580     0C 15 02 FB | 	rdlong	arg02, arg04
31584     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
31588     08 4E 05 F1 | 	add	fp, #8
3158c     A7 FA 61 FC | 	wrlong	result1, fp
31590     08 4E 85 F1 | 	sub	fp, #8
31594     00 FA 0D F2 | 	cmp	result1, #0 wz
31598     E4 00 90 5D |  if_ne	jmp	#LR__4871
3159c     04 4E 05 F1 | 	add	fp, #4
315a0     A7 18 02 FB | 	rdlong	arg04, fp
315a4     24 18 06 F1 | 	add	arg04, #36
315a8     0C 19 02 FB | 	rdlong	arg04, arg04
315ac     10 4E 05 F1 | 	add	fp, #16
315b0     A7 18 62 FC | 	wrlong	arg04, fp
315b4     0C 17 02 F6 | 	mov	arg03, arg04
315b8     0B 16 06 F1 | 	add	arg03, #11
315bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
315c0     20 16 46 F5 | 	or	arg03, #32
315c4     0B 18 06 F1 | 	add	arg04, #11
315c8     0C 17 42 FC | 	wrbyte	arg03, arg04
315cc     10 4E 85 F1 | 	sub	fp, #16
315d0     A7 18 02 FB | 	rdlong	arg04, fp
315d4     0C 13 02 FB | 	rdlong	arg01, arg04
315d8     10 4E 05 F1 | 	add	fp, #16
315dc     A7 14 02 FB | 	rdlong	arg02, fp
315e0     14 4E 85 F1 | 	sub	fp, #20
315e4     08 18 06 F1 | 	add	arg04, #8
315e8     0C 17 02 FB | 	rdlong	arg03, arg04
315ec     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
315f0     14 4E 05 F1 | 	add	fp, #20
315f4     A7 12 02 FB | 	rdlong	arg01, fp
315f8     1C 12 06 F1 | 	add	arg01, #28
315fc     10 4E 85 F1 | 	sub	fp, #16
31600     A7 18 02 FB | 	rdlong	arg04, fp
31604     0C 18 06 F1 | 	add	arg04, #12
31608     0C 15 02 FB | 	rdlong	arg02, arg04
3160c     09 15 62 FC | 	wrlong	arg02, arg01
31610     10 4E 05 F1 | 	add	fp, #16
31614     A7 12 02 FB | 	rdlong	arg01, fp
31618     16 12 06 F1 | 	add	arg01, #22
3161c     04 4E 85 F1 | 	sub	fp, #4
31620     A7 14 02 FB | 	rdlong	arg02, fp
31624     09 15 62 FC | 	wrlong	arg02, arg01
31628     04 4E 05 F1 | 	add	fp, #4
3162c     A7 12 02 FB | 	rdlong	arg01, fp
31630     12 12 06 F1 | 	add	arg01, #18
31634     09 01 58 FC | 	wrword	#0, arg01
31638     08 4E 85 F1 | 	sub	fp, #8
3163c     A7 18 02 FB | 	rdlong	arg04, fp
31640     03 18 06 F1 | 	add	arg04, #3
31644     0C 03 48 FC | 	wrbyte	#1, arg04
31648     A7 12 02 FB | 	rdlong	arg01, fp
3164c     0C 4E 85 F1 | 	sub	fp, #12
31650     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
31654     08 4E 05 F1 | 	add	fp, #8
31658     A7 FA 61 FC | 	wrlong	result1, fp
3165c     04 4E 85 F1 | 	sub	fp, #4
31660     A7 18 02 FB | 	rdlong	arg04, fp
31664     0C 17 02 F6 | 	mov	arg03, arg04
31668     04 4E 85 F1 | 	sub	fp, #4
3166c     10 18 06 F1 | 	add	arg04, #16
31670     0C 19 C2 FA | 	rdbyte	arg04, arg04
31674     BF 18 06 F5 | 	and	arg04, #191
31678     10 16 06 F1 | 	add	arg03, #16
3167c     0B 19 42 FC | 	wrbyte	arg04, arg03
31680                 | LR__4871
31680                 | LR__4872
31680                 | LR__4873
31680                 | ' 					dir = fp->dir_ptr;
31680                 | ' 					dir[ 11 ] |=  0x20 ;
31680                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
31680                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
31680                 | ' 					st_dword(dir +  22 , tm);
31680                 | ' 					st_word(dir +  18 , 0);
31680                 | ' 					fs->wflag = 1;
31680                 | ' 					res = sync_fs(fs);
31680                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
31680                 | ' 				}
31680                 | ' 			}
31680                 | ' 		}
31680                 | ' 	}
31680                 | ' 
31680                 | ' 	return res ;
31680     08 4E 05 F1 | 	add	fp, #8
31684     A7 FA 01 FB | 	rdlong	result1, fp
31688     08 4E 85 F1 | 	sub	fp, #8
3168c                 | LR__4874
3168c     A7 F0 03 F6 | 	mov	ptra, fp
31690     B2 00 A0 FD | 	call	#popregs_
31694                 | _fatfs_cc_f_sync_ret
31694     2D 00 64 FD | 	ret
31698                 | 
31698                 | _fatfs_cc_f_close
31698     01 4A 05 F6 | 	mov	COUNT_, #1
3169c     A8 00 A0 FD | 	call	#pushregs_
316a0     10 F0 07 F1 | 	add	ptra, #16
316a4     04 4E 05 F1 | 	add	fp, #4
316a8     A7 12 62 FC | 	wrlong	arg01, fp
316ac     04 4E 85 F1 | 	sub	fp, #4
316b0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
316b4     08 4E 05 F1 | 	add	fp, #8
316b8     A7 FA 61 FC | 	wrlong	result1, fp
316bc     08 4E 85 F1 | 	sub	fp, #8
316c0     00 FA 0D F2 | 	cmp	result1, #0 wz
316c4     38 00 90 5D |  if_ne	jmp	#LR__4880
316c8     04 4E 05 F1 | 	add	fp, #4
316cc     A7 12 02 FB | 	rdlong	arg01, fp
316d0     08 4E 05 F1 | 	add	fp, #8
316d4     A7 14 02 F6 | 	mov	arg02, fp
316d8     0C 4E 85 F1 | 	sub	fp, #12
316dc     9C E6 BF FD | 	call	#_fatfs_cc_validate
316e0     08 4E 05 F1 | 	add	fp, #8
316e4     A7 FA 61 FC | 	wrlong	result1, fp
316e8     08 4E 85 F1 | 	sub	fp, #8
316ec     00 FA 0D F2 | 	cmp	result1, #0 wz
316f0     04 4E 05 A1 |  if_e	add	fp, #4
316f4     A7 26 02 AB |  if_e	rdlong	local01, fp
316f8     04 4E 85 A1 |  if_e	sub	fp, #4
316fc     13 01 68 AC |  if_e	wrlong	#0, local01
31700                 | LR__4880
31700                 | ' 
31700                 | ' 
31700                 | ' 
31700                 | ' 
31700                 | ' 			fp->obj.fs = 0;
31700                 | ' #line 4192 "ff.c"
31700                 | ' 		}
31700                 | ' 	}
31700                 | ' 	return res;
31700     08 4E 05 F1 | 	add	fp, #8
31704     A7 FA 01 FB | 	rdlong	result1, fp
31708     08 4E 85 F1 | 	sub	fp, #8
3170c     A7 F0 03 F6 | 	mov	ptra, fp
31710     B2 00 A0 FD | 	call	#popregs_
31714                 | _fatfs_cc_f_close_ret
31714     2D 00 64 FD | 	ret
31718                 | 
31718                 | _fatfs_cc_f_lseek
31718     00 4A 05 F6 | 	mov	COUNT_, #0
3171c     A8 00 A0 FD | 	call	#pushregs_
31720     24 F0 07 F1 | 	add	ptra, #36
31724     04 4E 05 F1 | 	add	fp, #4
31728     A7 12 62 FC | 	wrlong	arg01, fp
3172c     04 4E 05 F1 | 	add	fp, #4
31730     A7 14 62 FC | 	wrlong	arg02, fp
31734     04 4E 85 F1 | 	sub	fp, #4
31738     A7 12 02 FB | 	rdlong	arg01, fp
3173c     0C 4E 05 F1 | 	add	fp, #12
31740     A7 14 02 F6 | 	mov	arg02, fp
31744     10 4E 85 F1 | 	sub	fp, #16
31748     30 E6 BF FD | 	call	#_fatfs_cc_validate
3174c     0C 4E 05 F1 | 	add	fp, #12
31750     A7 FA 61 FC | 	wrlong	result1, fp
31754     0C 4E 85 F1 | 	sub	fp, #12
31758     00 FA 0D F2 | 	cmp	result1, #0 wz
3175c     1C 00 90 5D |  if_ne	jmp	#LR__4890
31760     04 4E 05 F1 | 	add	fp, #4
31764     A7 18 02 FB | 	rdlong	arg04, fp
31768     11 18 06 F1 | 	add	arg04, #17
3176c     0C 19 C2 FA | 	rdbyte	arg04, arg04
31770     08 4E 05 F1 | 	add	fp, #8
31774     A7 18 62 FC | 	wrlong	arg04, fp
31778     0C 4E 85 F1 | 	sub	fp, #12
3177c                 | LR__4890
3177c     0C 4E 05 F1 | 	add	fp, #12
31780     A7 18 0A FB | 	rdlong	arg04, fp wz
31784     0C 4E 85 F1 | 	sub	fp, #12
31788     0C 4E 05 51 |  if_ne	add	fp, #12
3178c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
31790     0C 4E 85 51 |  if_ne	sub	fp, #12
31794     40 06 90 5D |  if_ne	jmp	#LR__4913
31798     04 4E 05 F1 | 	add	fp, #4
3179c     A7 18 02 FB | 	rdlong	arg04, fp
317a0     04 4E 05 F1 | 	add	fp, #4
317a4     A7 16 02 FB | 	rdlong	arg03, fp
317a8     08 4E 85 F1 | 	sub	fp, #8
317ac     0C 18 06 F1 | 	add	arg04, #12
317b0     0C 19 02 FB | 	rdlong	arg04, arg04
317b4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
317b8     3C 00 90 ED |  if_be	jmp	#LR__4891
317bc     04 4E 05 F1 | 	add	fp, #4
317c0     A7 16 02 FB | 	rdlong	arg03, fp
317c4     04 4E 85 F1 | 	sub	fp, #4
317c8     10 16 06 F1 | 	add	arg03, #16
317cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
317d0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
317d4     02 16 CE F7 | 	test	arg03, #2 wz
317d8     1C 00 90 5D |  if_ne	jmp	#LR__4891
317dc     04 4E 05 F1 | 	add	fp, #4
317e0     A7 16 02 FB | 	rdlong	arg03, fp
317e4     0C 16 06 F1 | 	add	arg03, #12
317e8     0B 17 02 FB | 	rdlong	arg03, arg03
317ec     04 4E 05 F1 | 	add	fp, #4
317f0     A7 16 62 FC | 	wrlong	arg03, fp
317f4     08 4E 85 F1 | 	sub	fp, #8
317f8                 | LR__4891
317f8     04 4E 05 F1 | 	add	fp, #4
317fc     A7 16 02 FB | 	rdlong	arg03, fp
31800     14 16 06 F1 | 	add	arg03, #20
31804     0B 17 02 FB | 	rdlong	arg03, arg03
31808     1C 4E 05 F1 | 	add	fp, #28
3180c     A7 16 62 FC | 	wrlong	arg03, fp
31810     1C 4E 85 F1 | 	sub	fp, #28
31814     A7 16 02 FB | 	rdlong	arg03, fp
31818     18 4E 05 F1 | 	add	fp, #24
3181c     A7 00 68 FC | 	wrlong	#0, fp
31820     14 16 06 F1 | 	add	arg03, #20
31824     0B 01 68 FC | 	wrlong	#0, arg03
31828     14 4E 85 F1 | 	sub	fp, #20
3182c     A7 16 02 FB | 	rdlong	arg03, fp
31830     08 4E 85 F1 | 	sub	fp, #8
31834     01 16 16 F2 | 	cmp	arg03, #1 wc
31838     E4 03 90 CD |  if_b	jmp	#LR__4907
3183c     10 4E 05 F1 | 	add	fp, #16
31840     A7 16 02 FB | 	rdlong	arg03, fp
31844     0A 16 06 F1 | 	add	arg03, #10
31848     0B 19 E2 FA | 	rdword	arg04, arg03
3184c     09 18 66 F0 | 	shl	arg04, #9
31850     08 4E 05 F1 | 	add	fp, #8
31854     A7 18 62 FC | 	wrlong	arg04, fp
31858     08 4E 05 F1 | 	add	fp, #8
3185c     A7 18 02 FB | 	rdlong	arg04, fp
31860     20 4E 85 F1 | 	sub	fp, #32
31864     01 18 16 F2 | 	cmp	arg04, #1 wc
31868     AC 00 90 CD |  if_b	jmp	#LR__4892
3186c     08 4E 05 F1 | 	add	fp, #8
31870     A7 18 02 FB | 	rdlong	arg04, fp
31874     01 18 86 F1 | 	sub	arg04, #1
31878     10 4E 05 F1 | 	add	fp, #16
3187c     A7 16 02 FB | 	rdlong	arg03, fp
31880     0B 19 12 FD | 	qdiv	arg04, arg03
31884     08 4E 05 F1 | 	add	fp, #8
31888     A7 FA 01 FB | 	rdlong	result1, fp
3188c     01 FA 85 F1 | 	sub	result1, #1
31890     18 18 62 FD | 	getqx	arg04
31894     0B FB 11 FD | 	qdiv	result1, arg03
31898     20 4E 85 F1 | 	sub	fp, #32
3189c     18 16 62 FD | 	getqx	arg03
318a0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
318a4     70 00 90 CD |  if_b	jmp	#LR__4892
318a8     04 4E 05 F1 | 	add	fp, #4
318ac     A7 16 02 FB | 	rdlong	arg03, fp
318b0     1C 4E 05 F1 | 	add	fp, #28
318b4     A7 FA 01 FB | 	rdlong	result1, fp
318b8     01 FA 85 F1 | 	sub	result1, #1
318bc     08 4E 85 F1 | 	sub	fp, #8
318c0     A7 18 02 FB | 	rdlong	arg04, fp
318c4     01 18 86 F1 | 	sub	arg04, #1
318c8     0C FB 21 F5 | 	andn	result1, arg04
318cc     14 16 06 F1 | 	add	arg03, #20
318d0     0B FB 61 FC | 	wrlong	result1, arg03
318d4     10 4E 85 F1 | 	sub	fp, #16
318d8     A7 16 02 FB | 	rdlong	arg03, fp
318dc     04 4E 85 F1 | 	sub	fp, #4
318e0     A7 18 02 FB | 	rdlong	arg04, fp
318e4     14 18 06 F1 | 	add	arg04, #20
318e8     0C 19 02 FB | 	rdlong	arg04, arg04
318ec     0C 17 82 F1 | 	sub	arg03, arg04
318f0     04 4E 05 F1 | 	add	fp, #4
318f4     A7 16 62 FC | 	wrlong	arg03, fp
318f8     04 4E 85 F1 | 	sub	fp, #4
318fc     A7 16 02 FB | 	rdlong	arg03, fp
31900     18 16 06 F1 | 	add	arg03, #24
31904     0B 17 02 FB | 	rdlong	arg03, arg03
31908     10 4E 05 F1 | 	add	fp, #16
3190c     A7 16 62 FC | 	wrlong	arg03, fp
31910     14 4E 85 F1 | 	sub	fp, #20
31914     D0 00 90 FD | 	jmp	#LR__4896
31918                 | LR__4892
31918     04 4E 05 F1 | 	add	fp, #4
3191c     A7 16 02 FB | 	rdlong	arg03, fp
31920     08 16 06 F1 | 	add	arg03, #8
31924     0B 17 0A FB | 	rdlong	arg03, arg03 wz
31928     10 4E 05 F1 | 	add	fp, #16
3192c     A7 16 62 FC | 	wrlong	arg03, fp
31930     14 4E 85 F1 | 	sub	fp, #20
31934     94 00 90 5D |  if_ne	jmp	#LR__4895
31938     04 4E 05 F1 | 	add	fp, #4
3193c     A7 12 02 FB | 	rdlong	arg01, fp
31940     04 4E 85 F1 | 	sub	fp, #4
31944     00 14 06 F6 | 	mov	arg02, #0
31948     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
3194c     14 4E 05 F1 | 	add	fp, #20
31950     A7 FA 61 FC | 	wrlong	result1, fp
31954     14 4E 85 F1 | 	sub	fp, #20
31958     01 FA 0D F2 | 	cmp	result1, #1 wz
3195c     1C 00 90 5D |  if_ne	jmp	#LR__4893
31960     04 4E 05 F1 | 	add	fp, #4
31964     A7 16 02 FB | 	rdlong	arg03, fp
31968     04 4E 85 F1 | 	sub	fp, #4
3196c     11 16 06 F1 | 	add	arg03, #17
31970     0B 05 48 FC | 	wrbyte	#2, arg03
31974     02 FA 05 F6 | 	mov	result1, #2
31978     5C 04 90 FD | 	jmp	#LR__4913
3197c                 | LR__4893
3197c     14 4E 05 F1 | 	add	fp, #20
31980     A7 FA 01 FB | 	rdlong	result1, fp
31984     14 4E 85 F1 | 	sub	fp, #20
31988     FF FF 7F FF 
3198c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
31990     1C 00 90 5D |  if_ne	jmp	#LR__4894
31994     04 4E 05 F1 | 	add	fp, #4
31998     A7 16 02 FB | 	rdlong	arg03, fp
3199c     04 4E 85 F1 | 	sub	fp, #4
319a0     11 16 06 F1 | 	add	arg03, #17
319a4     0B 03 48 FC | 	wrbyte	#1, arg03
319a8     01 FA 05 F6 | 	mov	result1, #1
319ac     28 04 90 FD | 	jmp	#LR__4913
319b0                 | LR__4894
319b0     04 4E 05 F1 | 	add	fp, #4
319b4     A7 16 02 FB | 	rdlong	arg03, fp
319b8     10 4E 05 F1 | 	add	fp, #16
319bc     A7 18 02 FB | 	rdlong	arg04, fp
319c0     14 4E 85 F1 | 	sub	fp, #20
319c4     08 16 06 F1 | 	add	arg03, #8
319c8     0B 19 62 FC | 	wrlong	arg04, arg03
319cc                 | LR__4895
319cc     04 4E 05 F1 | 	add	fp, #4
319d0     A7 16 02 FB | 	rdlong	arg03, fp
319d4     10 4E 05 F1 | 	add	fp, #16
319d8     A7 18 02 FB | 	rdlong	arg04, fp
319dc     14 4E 85 F1 | 	sub	fp, #20
319e0     18 16 06 F1 | 	add	arg03, #24
319e4     0B 19 62 FC | 	wrlong	arg04, arg03
319e8                 | LR__4896
319e8     14 4E 05 F1 | 	add	fp, #20
319ec     A7 16 0A FB | 	rdlong	arg03, fp wz
319f0     14 4E 85 F1 | 	sub	fp, #20
319f4     28 02 90 AD |  if_e	jmp	#LR__4906
319f8                 | ' 				while (ofs > bcs) {
319f8                 | LR__4897
319f8     08 4E 05 F1 | 	add	fp, #8
319fc     A7 18 02 FB | 	rdlong	arg04, fp
31a00     10 4E 05 F1 | 	add	fp, #16
31a04     A7 16 02 FB | 	rdlong	arg03, fp
31a08     18 4E 85 F1 | 	sub	fp, #24
31a0c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
31a10     68 01 90 ED |  if_be	jmp	#LR__4903
31a14     08 4E 05 F1 | 	add	fp, #8
31a18     A7 18 02 FB | 	rdlong	arg04, fp
31a1c     10 4E 05 F1 | 	add	fp, #16
31a20     A7 16 02 FB | 	rdlong	arg03, fp
31a24     0B 19 82 F1 | 	sub	arg04, arg03
31a28     10 4E 85 F1 | 	sub	fp, #16
31a2c     A7 18 62 FC | 	wrlong	arg04, fp
31a30     04 4E 85 F1 | 	sub	fp, #4
31a34     A7 18 02 FB | 	rdlong	arg04, fp
31a38     0C FB 01 F6 | 	mov	result1, arg04
31a3c     14 18 06 F1 | 	add	arg04, #20
31a40     0C 19 02 FB | 	rdlong	arg04, arg04
31a44     14 4E 05 F1 | 	add	fp, #20
31a48     A7 16 02 FB | 	rdlong	arg03, fp
31a4c     0B 19 02 F1 | 	add	arg04, arg03
31a50     14 FA 05 F1 | 	add	result1, #20
31a54     FD 18 62 FC | 	wrlong	arg04, result1
31a58     14 4E 85 F1 | 	sub	fp, #20
31a5c     A7 16 02 FB | 	rdlong	arg03, fp
31a60     04 4E 85 F1 | 	sub	fp, #4
31a64     10 16 06 F1 | 	add	arg03, #16
31a68     0B 17 C2 FA | 	rdbyte	arg03, arg03
31a6c     02 16 CE F7 | 	test	arg03, #2 wz
31a70     3C 00 90 AD |  if_e	jmp	#LR__4898
31a74     04 4E 05 F1 | 	add	fp, #4
31a78     A7 12 02 FB | 	rdlong	arg01, fp
31a7c     10 4E 05 F1 | 	add	fp, #16
31a80     A7 14 02 FB | 	rdlong	arg02, fp
31a84     14 4E 85 F1 | 	sub	fp, #20
31a88     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
31a8c     14 4E 05 F1 | 	add	fp, #20
31a90     A7 FA 61 FC | 	wrlong	result1, fp
31a94     00 FA 4D F2 | 	cmps	result1, #0 wz
31a98     14 4E 85 F1 | 	sub	fp, #20
31a9c     08 4E 05 A1 |  if_e	add	fp, #8
31aa0     A7 00 68 AC |  if_e	wrlong	#0, fp
31aa4     08 4E 85 A1 |  if_e	sub	fp, #8
31aa8                 | ' 							ofs = 0; break;
31aa8     D0 00 90 AD |  if_e	jmp	#LR__4903
31aac     24 00 90 FD | 	jmp	#LR__4899
31ab0                 | LR__4898
31ab0     04 4E 05 F1 | 	add	fp, #4
31ab4     A7 12 02 FB | 	rdlong	arg01, fp
31ab8     10 4E 05 F1 | 	add	fp, #16
31abc     A7 14 02 FB | 	rdlong	arg02, fp
31ac0     14 4E 85 F1 | 	sub	fp, #20
31ac4     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
31ac8     14 4E 05 F1 | 	add	fp, #20
31acc     A7 FA 61 FC | 	wrlong	result1, fp
31ad0     14 4E 85 F1 | 	sub	fp, #20
31ad4                 | LR__4899
31ad4     14 4E 05 F1 | 	add	fp, #20
31ad8     A7 16 02 FB | 	rdlong	arg03, fp
31adc     14 4E 85 F1 | 	sub	fp, #20
31ae0     FF FF 7F FF 
31ae4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
31ae8     1C 00 90 5D |  if_ne	jmp	#LR__4900
31aec     04 4E 05 F1 | 	add	fp, #4
31af0     A7 16 02 FB | 	rdlong	arg03, fp
31af4     04 4E 85 F1 | 	sub	fp, #4
31af8     11 16 06 F1 | 	add	arg03, #17
31afc     0B 03 48 FC | 	wrbyte	#1, arg03
31b00     01 FA 05 F6 | 	mov	result1, #1
31b04     D0 02 90 FD | 	jmp	#LR__4913
31b08                 | LR__4900
31b08     14 4E 05 F1 | 	add	fp, #20
31b0c     A7 16 02 FB | 	rdlong	arg03, fp
31b10     14 4E 85 F1 | 	sub	fp, #20
31b14     02 16 16 F2 | 	cmp	arg03, #2 wc
31b18     24 00 90 CD |  if_b	jmp	#LR__4901
31b1c     10 4E 05 F1 | 	add	fp, #16
31b20     A7 18 02 FB | 	rdlong	arg04, fp
31b24     04 4E 05 F1 | 	add	fp, #4
31b28     A7 16 02 FB | 	rdlong	arg03, fp
31b2c     14 4E 85 F1 | 	sub	fp, #20
31b30     18 18 06 F1 | 	add	arg04, #24
31b34     0C 19 02 FB | 	rdlong	arg04, arg04
31b38     0C 17 12 F2 | 	cmp	arg03, arg04 wc
31b3c     1C 00 90 CD |  if_b	jmp	#LR__4902
31b40                 | LR__4901
31b40     04 4E 05 F1 | 	add	fp, #4
31b44     A7 16 02 FB | 	rdlong	arg03, fp
31b48     04 4E 85 F1 | 	sub	fp, #4
31b4c     11 16 06 F1 | 	add	arg03, #17
31b50     0B 05 48 FC | 	wrbyte	#2, arg03
31b54     02 FA 05 F6 | 	mov	result1, #2
31b58     7C 02 90 FD | 	jmp	#LR__4913
31b5c                 | LR__4902
31b5c     04 4E 05 F1 | 	add	fp, #4
31b60     A7 18 02 FB | 	rdlong	arg04, fp
31b64     10 4E 05 F1 | 	add	fp, #16
31b68     A7 16 02 FB | 	rdlong	arg03, fp
31b6c     14 4E 85 F1 | 	sub	fp, #20
31b70     18 18 06 F1 | 	add	arg04, #24
31b74     0C 17 62 FC | 	wrlong	arg03, arg04
31b78     7C FE 9F FD | 	jmp	#LR__4897
31b7c                 | LR__4903
31b7c     04 4E 05 F1 | 	add	fp, #4
31b80     A7 16 02 FB | 	rdlong	arg03, fp
31b84     0B 13 02 F6 | 	mov	arg01, arg03
31b88     14 16 06 F1 | 	add	arg03, #20
31b8c     0B 15 02 FB | 	rdlong	arg02, arg03
31b90     04 4E 05 F1 | 	add	fp, #4
31b94     A7 16 02 FB | 	rdlong	arg03, fp
31b98     0B 15 02 F1 | 	add	arg02, arg03
31b9c     14 12 06 F1 | 	add	arg01, #20
31ba0     09 15 62 FC | 	wrlong	arg02, arg01
31ba4     A7 16 02 FB | 	rdlong	arg03, fp
31ba8     08 4E 85 F1 | 	sub	fp, #8
31bac     FF 17 CE F7 | 	test	arg03, #511 wz
31bb0     6C 00 90 AD |  if_e	jmp	#LR__4905
31bb4     10 4E 05 F1 | 	add	fp, #16
31bb8     A7 12 02 FB | 	rdlong	arg01, fp
31bbc     04 4E 05 F1 | 	add	fp, #4
31bc0     A7 14 02 FB | 	rdlong	arg02, fp
31bc4     14 4E 85 F1 | 	sub	fp, #20
31bc8     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
31bcc     1C 4E 05 F1 | 	add	fp, #28
31bd0     A7 FA 61 FC | 	wrlong	result1, fp
31bd4     1C 4E 85 F1 | 	sub	fp, #28
31bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
31bdc     1C 00 90 5D |  if_ne	jmp	#LR__4904
31be0     04 4E 05 F1 | 	add	fp, #4
31be4     A7 16 02 FB | 	rdlong	arg03, fp
31be8     04 4E 85 F1 | 	sub	fp, #4
31bec     11 16 06 F1 | 	add	arg03, #17
31bf0     0B 05 48 FC | 	wrbyte	#2, arg03
31bf4     02 FA 05 F6 | 	mov	result1, #2
31bf8     DC 01 90 FD | 	jmp	#LR__4913
31bfc                 | LR__4904
31bfc     1C 4E 05 F1 | 	add	fp, #28
31c00     A7 18 02 FB | 	rdlong	arg04, fp
31c04     14 4E 85 F1 | 	sub	fp, #20
31c08     A7 16 02 FB | 	rdlong	arg03, fp
31c0c     09 16 46 F0 | 	shr	arg03, #9
31c10     0B 19 02 F1 | 	add	arg04, arg03
31c14     14 4E 05 F1 | 	add	fp, #20
31c18     A7 18 62 FC | 	wrlong	arg04, fp
31c1c     1C 4E 85 F1 | 	sub	fp, #28
31c20                 | LR__4905
31c20                 | LR__4906
31c20                 | LR__4907
31c20     04 4E 05 F1 | 	add	fp, #4
31c24     A7 18 02 FB | 	rdlong	arg04, fp
31c28     0C 17 02 F6 | 	mov	arg03, arg04
31c2c     04 4E 85 F1 | 	sub	fp, #4
31c30     14 16 06 F1 | 	add	arg03, #20
31c34     0B 17 02 FB | 	rdlong	arg03, arg03
31c38     0C 18 06 F1 | 	add	arg04, #12
31c3c     0C 19 02 FB | 	rdlong	arg04, arg04
31c40     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
31c44     3C 00 90 ED |  if_be	jmp	#LR__4908
31c48     04 4E 05 F1 | 	add	fp, #4
31c4c     A7 18 02 FB | 	rdlong	arg04, fp
31c50     0C 17 02 F6 | 	mov	arg03, arg04
31c54     14 18 06 F1 | 	add	arg04, #20
31c58     0C 19 02 FB | 	rdlong	arg04, arg04
31c5c     0C 16 06 F1 | 	add	arg03, #12
31c60     0B 19 62 FC | 	wrlong	arg04, arg03
31c64     A7 18 02 FB | 	rdlong	arg04, fp
31c68     0C 17 02 F6 | 	mov	arg03, arg04
31c6c     04 4E 85 F1 | 	sub	fp, #4
31c70     10 18 06 F1 | 	add	arg04, #16
31c74     0C 19 C2 FA | 	rdbyte	arg04, arg04
31c78     40 18 46 F5 | 	or	arg04, #64
31c7c     10 16 06 F1 | 	add	arg03, #16
31c80     0B 19 42 FC | 	wrbyte	arg04, arg03
31c84                 | LR__4908
31c84     04 4E 05 F1 | 	add	fp, #4
31c88     A7 16 02 FB | 	rdlong	arg03, fp
31c8c     04 4E 85 F1 | 	sub	fp, #4
31c90     14 16 06 F1 | 	add	arg03, #20
31c94     0B 17 02 FB | 	rdlong	arg03, arg03
31c98     FF 17 CE F7 | 	test	arg03, #511 wz
31c9c     2C 01 90 AD |  if_e	jmp	#LR__4912
31ca0     04 4E 05 F1 | 	add	fp, #4
31ca4     A7 18 02 FB | 	rdlong	arg04, fp
31ca8     18 4E 05 F1 | 	add	fp, #24
31cac     A7 16 02 FB | 	rdlong	arg03, fp
31cb0     1C 4E 85 F1 | 	sub	fp, #28
31cb4     1C 18 06 F1 | 	add	arg04, #28
31cb8     0C 19 02 FB | 	rdlong	arg04, arg04
31cbc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
31cc0     08 01 90 AD |  if_e	jmp	#LR__4912
31cc4     04 4E 05 F1 | 	add	fp, #4
31cc8     A7 16 02 FB | 	rdlong	arg03, fp
31ccc     04 4E 85 F1 | 	sub	fp, #4
31cd0     10 16 06 F1 | 	add	arg03, #16
31cd4     0B 17 C2 FA | 	rdbyte	arg03, arg03
31cd8     80 16 CE F7 | 	test	arg03, #128 wz
31cdc     7C 00 90 AD |  if_e	jmp	#LR__4910
31ce0     10 4E 05 F1 | 	add	fp, #16
31ce4     A7 16 02 FB | 	rdlong	arg03, fp
31ce8     01 16 06 F1 | 	add	arg03, #1
31cec     0B 13 C2 FA | 	rdbyte	arg01, arg03
31cf0     0C 4E 85 F1 | 	sub	fp, #12
31cf4     A7 16 02 FB | 	rdlong	arg03, fp
31cf8     0B 15 02 F6 | 	mov	arg02, arg03
31cfc     28 14 06 F1 | 	add	arg02, #40
31d00     04 4E 85 F1 | 	sub	fp, #4
31d04     1C 16 06 F1 | 	add	arg03, #28
31d08     0B 17 02 FB | 	rdlong	arg03, arg03
31d0c     01 18 06 F6 | 	mov	arg04, #1
31d10     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
31d14     00 FA 0D F2 | 	cmp	result1, #0 wz
31d18     1C 00 90 AD |  if_e	jmp	#LR__4909
31d1c     04 4E 05 F1 | 	add	fp, #4
31d20     A7 16 02 FB | 	rdlong	arg03, fp
31d24     04 4E 85 F1 | 	sub	fp, #4
31d28     11 16 06 F1 | 	add	arg03, #17
31d2c     0B 03 48 FC | 	wrbyte	#1, arg03
31d30     01 FA 05 F6 | 	mov	result1, #1
31d34     A0 00 90 FD | 	jmp	#LR__4913
31d38                 | LR__4909
31d38     04 4E 05 F1 | 	add	fp, #4
31d3c     A7 18 02 FB | 	rdlong	arg04, fp
31d40     0C 17 02 F6 | 	mov	arg03, arg04
31d44     04 4E 85 F1 | 	sub	fp, #4
31d48     10 18 06 F1 | 	add	arg04, #16
31d4c     0C 19 C2 FA | 	rdbyte	arg04, arg04
31d50     7F 18 06 F5 | 	and	arg04, #127
31d54     10 16 06 F1 | 	add	arg03, #16
31d58     0B 19 42 FC | 	wrbyte	arg04, arg03
31d5c                 | LR__4910
31d5c     10 4E 05 F1 | 	add	fp, #16
31d60     A7 16 02 FB | 	rdlong	arg03, fp
31d64     01 16 06 F1 | 	add	arg03, #1
31d68     0B 13 C2 FA | 	rdbyte	arg01, arg03
31d6c     0C 4E 85 F1 | 	sub	fp, #12
31d70     A7 14 02 FB | 	rdlong	arg02, fp
31d74     28 14 06 F1 | 	add	arg02, #40
31d78     18 4E 05 F1 | 	add	fp, #24
31d7c     A7 16 02 FB | 	rdlong	arg03, fp
31d80     1C 4E 85 F1 | 	sub	fp, #28
31d84     01 18 06 F6 | 	mov	arg04, #1
31d88     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
31d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
31d90     1C 00 90 AD |  if_e	jmp	#LR__4911
31d94     04 4E 05 F1 | 	add	fp, #4
31d98     A7 16 02 FB | 	rdlong	arg03, fp
31d9c     04 4E 85 F1 | 	sub	fp, #4
31da0     11 16 06 F1 | 	add	arg03, #17
31da4     0B 03 48 FC | 	wrbyte	#1, arg03
31da8     01 FA 05 F6 | 	mov	result1, #1
31dac     28 00 90 FD | 	jmp	#LR__4913
31db0                 | LR__4911
31db0     04 4E 05 F1 | 	add	fp, #4
31db4     A7 18 02 FB | 	rdlong	arg04, fp
31db8     18 4E 05 F1 | 	add	fp, #24
31dbc     A7 16 02 FB | 	rdlong	arg03, fp
31dc0     1C 4E 85 F1 | 	sub	fp, #28
31dc4     1C 18 06 F1 | 	add	arg04, #28
31dc8     0C 17 62 FC | 	wrlong	arg03, arg04
31dcc                 | LR__4912
31dcc                 | ' 
31dcc                 | ' 			fp->sect = nsect;
31dcc                 | ' 		}
31dcc                 | ' 	}
31dcc                 | ' 
31dcc                 | ' 	return res ;
31dcc     0C 4E 05 F1 | 	add	fp, #12
31dd0     A7 FA 01 FB | 	rdlong	result1, fp
31dd4     0C 4E 85 F1 | 	sub	fp, #12
31dd8                 | LR__4913
31dd8     A7 F0 03 F6 | 	mov	ptra, fp
31ddc     B2 00 A0 FD | 	call	#popregs_
31de0                 | _fatfs_cc_f_lseek_ret
31de0     2D 00 64 FD | 	ret
31de4                 | 
31de4                 | _fatfs_cc_f_opendir
31de4     01 4A 05 F6 | 	mov	COUNT_, #1
31de8     A8 00 A0 FD | 	call	#pushregs_
31dec     14 F0 07 F1 | 	add	ptra, #20
31df0     04 4E 05 F1 | 	add	fp, #4
31df4     A7 12 62 FC | 	wrlong	arg01, fp
31df8     04 4E 05 F1 | 	add	fp, #4
31dfc     A7 14 62 FC | 	wrlong	arg02, fp
31e00     04 4E 85 F1 | 	sub	fp, #4
31e04     A7 16 0A FB | 	rdlong	arg03, fp wz
31e08     04 4E 85 F1 | 	sub	fp, #4
31e0c     09 FA 05 A6 |  if_e	mov	result1, #9
31e10     78 01 90 AD |  if_e	jmp	#LR__4926
31e14     08 4E 05 F1 | 	add	fp, #8
31e18     A7 12 02 F6 | 	mov	arg01, fp
31e1c     08 4E 05 F1 | 	add	fp, #8
31e20     A7 14 02 F6 | 	mov	arg02, fp
31e24     10 4E 85 F1 | 	sub	fp, #16
31e28     00 16 06 F6 | 	mov	arg03, #0
31e2c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
31e30     0C 4E 05 F1 | 	add	fp, #12
31e34     A7 FA 61 FC | 	wrlong	result1, fp
31e38     0C 4E 85 F1 | 	sub	fp, #12
31e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
31e40     20 01 90 5D |  if_ne	jmp	#LR__4925
31e44     04 4E 05 F1 | 	add	fp, #4
31e48     A7 16 02 FB | 	rdlong	arg03, fp
31e4c     0C 4E 05 F1 | 	add	fp, #12
31e50     A7 FA 01 FB | 	rdlong	result1, fp
31e54     0B FB 61 FC | 	wrlong	result1, arg03
31e58     0C 4E 85 F1 | 	sub	fp, #12
31e5c     A7 12 02 FB | 	rdlong	arg01, fp
31e60     04 4E 05 F1 | 	add	fp, #4
31e64     A7 14 02 FB | 	rdlong	arg02, fp
31e68     08 4E 85 F1 | 	sub	fp, #8
31e6c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
31e70     0C 4E 05 F1 | 	add	fp, #12
31e74     A7 FA 61 FC | 	wrlong	result1, fp
31e78     0C 4E 85 F1 | 	sub	fp, #12
31e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
31e80     C4 00 90 5D |  if_ne	jmp	#LR__4924
31e84     04 4E 05 F1 | 	add	fp, #4
31e88     A7 16 02 FB | 	rdlong	arg03, fp
31e8c     04 4E 85 F1 | 	sub	fp, #4
31e90     2B 16 06 F1 | 	add	arg03, #43
31e94     0B 17 C2 FA | 	rdbyte	arg03, arg03
31e98     80 16 CE F7 | 	test	arg03, #128 wz
31e9c     58 00 90 5D |  if_ne	jmp	#LR__4922
31ea0     04 4E 05 F1 | 	add	fp, #4
31ea4     A7 16 02 FB | 	rdlong	arg03, fp
31ea8     04 4E 85 F1 | 	sub	fp, #4
31eac     06 16 06 F1 | 	add	arg03, #6
31eb0     0B 17 C2 FA | 	rdbyte	arg03, arg03
31eb4     10 16 CE F7 | 	test	arg03, #16 wz
31eb8     30 00 90 AD |  if_e	jmp	#LR__4920
31ebc     04 4E 05 F1 | 	add	fp, #4
31ec0     A7 16 02 FB | 	rdlong	arg03, fp
31ec4     0B 27 02 F6 | 	mov	local01, arg03
31ec8     0C 4E 05 F1 | 	add	fp, #12
31ecc     A7 12 02 FB | 	rdlong	arg01, fp
31ed0     10 4E 85 F1 | 	sub	fp, #16
31ed4     1C 16 06 F1 | 	add	arg03, #28
31ed8     0B 15 02 FB | 	rdlong	arg02, arg03
31edc     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
31ee0     08 26 06 F1 | 	add	local01, #8
31ee4     13 FB 61 FC | 	wrlong	result1, local01
31ee8     0C 00 90 FD | 	jmp	#LR__4921
31eec                 | LR__4920
31eec     0C 4E 05 F1 | 	add	fp, #12
31ef0     A7 0A 68 FC | 	wrlong	#5, fp
31ef4     0C 4E 85 F1 | 	sub	fp, #12
31ef8                 | LR__4921
31ef8                 | LR__4922
31ef8     0C 4E 05 F1 | 	add	fp, #12
31efc     A7 26 0A FB | 	rdlong	local01, fp wz
31f00     0C 4E 85 F1 | 	sub	fp, #12
31f04     40 00 90 5D |  if_ne	jmp	#LR__4923
31f08     04 4E 05 F1 | 	add	fp, #4
31f0c     A7 26 02 FB | 	rdlong	local01, fp
31f10     0C 4E 05 F1 | 	add	fp, #12
31f14     A7 16 02 FB | 	rdlong	arg03, fp
31f18     06 16 06 F1 | 	add	arg03, #6
31f1c     0B 17 E2 FA | 	rdword	arg03, arg03
31f20     04 26 06 F1 | 	add	local01, #4
31f24     13 17 52 FC | 	wrword	arg03, local01
31f28     0C 4E 85 F1 | 	sub	fp, #12
31f2c     A7 12 02 FB | 	rdlong	arg01, fp
31f30     04 4E 85 F1 | 	sub	fp, #4
31f34     00 14 06 F6 | 	mov	arg02, #0
31f38     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
31f3c     0C 4E 05 F1 | 	add	fp, #12
31f40     A7 FA 61 FC | 	wrlong	result1, fp
31f44     0C 4E 85 F1 | 	sub	fp, #12
31f48                 | LR__4923
31f48                 | LR__4924
31f48     0C 4E 05 F1 | 	add	fp, #12
31f4c     A7 26 02 FB | 	rdlong	local01, fp
31f50     0C 4E 85 F1 | 	sub	fp, #12
31f54     04 26 0E F2 | 	cmp	local01, #4 wz
31f58     0C 4E 05 A1 |  if_e	add	fp, #12
31f5c     A7 0A 68 AC |  if_e	wrlong	#5, fp
31f60     0C 4E 85 A1 |  if_e	sub	fp, #12
31f64                 | LR__4925
31f64     0C 4E 05 F1 | 	add	fp, #12
31f68     A7 26 0A FB | 	rdlong	local01, fp wz
31f6c     0C 4E 85 F1 | 	sub	fp, #12
31f70     04 4E 05 51 |  if_ne	add	fp, #4
31f74     A7 26 02 5B |  if_ne	rdlong	local01, fp
31f78     04 4E 85 51 |  if_ne	sub	fp, #4
31f7c     13 01 68 5C |  if_ne	wrlong	#0, local01
31f80                 | ' 
31f80                 | ' 	return res ;
31f80     0C 4E 05 F1 | 	add	fp, #12
31f84     A7 FA 01 FB | 	rdlong	result1, fp
31f88     0C 4E 85 F1 | 	sub	fp, #12
31f8c                 | LR__4926
31f8c     A7 F0 03 F6 | 	mov	ptra, fp
31f90     B2 00 A0 FD | 	call	#popregs_
31f94                 | _fatfs_cc_f_opendir_ret
31f94     2D 00 64 FD | 	ret
31f98                 | 
31f98                 | _fatfs_cc_f_closedir
31f98     00 4A 05 F6 | 	mov	COUNT_, #0
31f9c     A8 00 A0 FD | 	call	#pushregs_
31fa0     10 F0 07 F1 | 	add	ptra, #16
31fa4     04 4E 05 F1 | 	add	fp, #4
31fa8     A7 12 62 FC | 	wrlong	arg01, fp
31fac     08 4E 05 F1 | 	add	fp, #8
31fb0     A7 14 02 F6 | 	mov	arg02, fp
31fb4     0C 4E 85 F1 | 	sub	fp, #12
31fb8     C0 DD BF FD | 	call	#_fatfs_cc_validate
31fbc     08 4E 05 F1 | 	add	fp, #8
31fc0     A7 FA 61 FC | 	wrlong	result1, fp
31fc4     08 4E 85 F1 | 	sub	fp, #8
31fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
31fcc     04 4E 05 A1 |  if_e	add	fp, #4
31fd0     A7 FA 01 AB |  if_e	rdlong	result1, fp
31fd4     04 4E 85 A1 |  if_e	sub	fp, #4
31fd8     FD 00 68 AC |  if_e	wrlong	#0, result1
31fdc                 | ' 
31fdc                 | ' 
31fdc                 | ' 
31fdc                 | ' 
31fdc                 | ' 		dp->obj.fs = 0;
31fdc                 | ' #line 4633 "ff.c"
31fdc                 | ' 	}
31fdc                 | ' 	return res;
31fdc     08 4E 05 F1 | 	add	fp, #8
31fe0     A7 FA 01 FB | 	rdlong	result1, fp
31fe4     08 4E 85 F1 | 	sub	fp, #8
31fe8     A7 F0 03 F6 | 	mov	ptra, fp
31fec     B2 00 A0 FD | 	call	#popregs_
31ff0                 | _fatfs_cc_f_closedir_ret
31ff0     2D 00 64 FD | 	ret
31ff4                 | 
31ff4                 | _fatfs_cc_f_readdir
31ff4     00 4A 05 F6 | 	mov	COUNT_, #0
31ff8     A8 00 A0 FD | 	call	#pushregs_
31ffc     14 F0 07 F1 | 	add	ptra, #20
32000     04 4E 05 F1 | 	add	fp, #4
32004     A7 12 62 FC | 	wrlong	arg01, fp
32008     04 4E 05 F1 | 	add	fp, #4
3200c     A7 14 62 FC | 	wrlong	arg02, fp
32010     04 4E 85 F1 | 	sub	fp, #4
32014     A7 12 02 FB | 	rdlong	arg01, fp
32018     0C 4E 05 F1 | 	add	fp, #12
3201c     A7 14 02 F6 | 	mov	arg02, fp
32020     10 4E 85 F1 | 	sub	fp, #16
32024     54 DD BF FD | 	call	#_fatfs_cc_validate
32028     0C 4E 05 F1 | 	add	fp, #12
3202c     A7 FA 61 FC | 	wrlong	result1, fp
32030     0C 4E 85 F1 | 	sub	fp, #12
32034     00 FA 0D F2 | 	cmp	result1, #0 wz
32038     BC 00 90 5D |  if_ne	jmp	#LR__4933
3203c     08 4E 05 F1 | 	add	fp, #8
32040     A7 FA 09 FB | 	rdlong	result1, fp wz
32044     08 4E 85 F1 | 	sub	fp, #8
32048     24 00 90 5D |  if_ne	jmp	#LR__4930
3204c     04 4E 05 F1 | 	add	fp, #4
32050     A7 12 02 FB | 	rdlong	arg01, fp
32054     04 4E 85 F1 | 	sub	fp, #4
32058     00 14 06 F6 | 	mov	arg02, #0
3205c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
32060     0C 4E 05 F1 | 	add	fp, #12
32064     A7 FA 61 FC | 	wrlong	result1, fp
32068     0C 4E 85 F1 | 	sub	fp, #12
3206c     88 00 90 FD | 	jmp	#LR__4932
32070                 | LR__4930
32070     04 4E 05 F1 | 	add	fp, #4
32074     A7 12 02 FB | 	rdlong	arg01, fp
32078     04 4E 85 F1 | 	sub	fp, #4
3207c     00 14 06 F6 | 	mov	arg02, #0
32080     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
32084     0C 4E 05 F1 | 	add	fp, #12
32088     A7 FA 61 FC | 	wrlong	result1, fp
3208c     0C 4E 85 F1 | 	sub	fp, #12
32090     04 FA 0D F2 | 	cmp	result1, #4 wz
32094     0C 4E 05 A1 |  if_e	add	fp, #12
32098     A7 00 68 AC |  if_e	wrlong	#0, fp
3209c     0C 4E 85 A1 |  if_e	sub	fp, #12
320a0     0C 4E 05 F1 | 	add	fp, #12
320a4     A7 FA 09 FB | 	rdlong	result1, fp wz
320a8     0C 4E 85 F1 | 	sub	fp, #12
320ac     48 00 90 5D |  if_ne	jmp	#LR__4931
320b0     04 4E 05 F1 | 	add	fp, #4
320b4     A7 12 02 FB | 	rdlong	arg01, fp
320b8     04 4E 05 F1 | 	add	fp, #4
320bc     A7 14 02 FB | 	rdlong	arg02, fp
320c0     08 4E 85 F1 | 	sub	fp, #8
320c4     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
320c8     04 4E 05 F1 | 	add	fp, #4
320cc     A7 12 02 FB | 	rdlong	arg01, fp
320d0     04 4E 85 F1 | 	sub	fp, #4
320d4     00 14 06 F6 | 	mov	arg02, #0
320d8     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
320dc     0C 4E 05 F1 | 	add	fp, #12
320e0     A7 FA 61 FC | 	wrlong	result1, fp
320e4     0C 4E 85 F1 | 	sub	fp, #12
320e8     04 FA 0D F2 | 	cmp	result1, #4 wz
320ec     0C 4E 05 A1 |  if_e	add	fp, #12
320f0     A7 00 68 AC |  if_e	wrlong	#0, fp
320f4     0C 4E 85 A1 |  if_e	sub	fp, #12
320f8                 | LR__4931
320f8                 | LR__4932
320f8                 | LR__4933
320f8                 | ' 			}
320f8                 | ' 			;
320f8                 | ' 		}
320f8                 | ' 	}
320f8                 | ' 	return res ;
320f8     0C 4E 05 F1 | 	add	fp, #12
320fc     A7 FA 01 FB | 	rdlong	result1, fp
32100     0C 4E 85 F1 | 	sub	fp, #12
32104     A7 F0 03 F6 | 	mov	ptra, fp
32108     B2 00 A0 FD | 	call	#popregs_
3210c                 | _fatfs_cc_f_readdir_ret
3210c     2D 00 64 FD | 	ret
32110                 | 
32110                 | _fatfs_cc_f_stat
32110     00 4A 05 F6 | 	mov	COUNT_, #0
32114     A8 00 A0 FD | 	call	#pushregs_
32118     40 F0 07 F1 | 	add	ptra, #64
3211c     04 4E 05 F1 | 	add	fp, #4
32120     A7 12 62 FC | 	wrlong	arg01, fp
32124     04 4E 05 F1 | 	add	fp, #4
32128     A7 14 62 FC | 	wrlong	arg02, fp
3212c     04 4E 85 F1 | 	sub	fp, #4
32130     A7 12 02 F6 | 	mov	arg01, fp
32134     0C 4E 05 F1 | 	add	fp, #12
32138     A7 14 02 F6 | 	mov	arg02, fp
3213c     10 4E 85 F1 | 	sub	fp, #16
32140     00 16 06 F6 | 	mov	arg03, #0
32144     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
32148     0C 4E 05 F1 | 	add	fp, #12
3214c     A7 FA 61 FC | 	wrlong	result1, fp
32150     0C 4E 85 F1 | 	sub	fp, #12
32154     00 FA 0D F2 | 	cmp	result1, #0 wz
32158     74 00 90 5D |  if_ne	jmp	#LR__4943
3215c     10 4E 05 F1 | 	add	fp, #16
32160     A7 12 02 F6 | 	mov	arg01, fp
32164     0C 4E 85 F1 | 	sub	fp, #12
32168     A7 14 02 FB | 	rdlong	arg02, fp
3216c     04 4E 85 F1 | 	sub	fp, #4
32170     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
32174     0C 4E 05 F1 | 	add	fp, #12
32178     A7 FA 61 FC | 	wrlong	result1, fp
3217c     0C 4E 85 F1 | 	sub	fp, #12
32180     00 FA 0D F2 | 	cmp	result1, #0 wz
32184     48 00 90 5D |  if_ne	jmp	#LR__4942
32188     3B 4E 05 F1 | 	add	fp, #59
3218c     A7 FA C1 FA | 	rdbyte	result1, fp
32190     3B 4E 85 F1 | 	sub	fp, #59
32194     80 FA CD F7 | 	test	result1, #128 wz
32198     0C 4E 05 51 |  if_ne	add	fp, #12
3219c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
321a0     0C 4E 85 51 |  if_ne	sub	fp, #12
321a4     28 00 90 5D |  if_ne	jmp	#LR__4941
321a8     08 4E 05 F1 | 	add	fp, #8
321ac     A7 FA 09 FB | 	rdlong	result1, fp wz
321b0     08 4E 85 F1 | 	sub	fp, #8
321b4     18 00 90 AD |  if_e	jmp	#LR__4940
321b8     10 4E 05 F1 | 	add	fp, #16
321bc     A7 12 02 F6 | 	mov	arg01, fp
321c0     08 4E 85 F1 | 	sub	fp, #8
321c4     A7 14 02 FB | 	rdlong	arg02, fp
321c8     08 4E 85 F1 | 	sub	fp, #8
321cc     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
321d0                 | LR__4940
321d0                 | LR__4941
321d0                 | LR__4942
321d0                 | LR__4943
321d0                 | ' 			}
321d0                 | ' 		}
321d0                 | ' 		;
321d0                 | ' 	}
321d0                 | ' 
321d0                 | ' 	return res ;
321d0     0C 4E 05 F1 | 	add	fp, #12
321d4     A7 FA 01 FB | 	rdlong	result1, fp
321d8     0C 4E 85 F1 | 	sub	fp, #12
321dc     A7 F0 03 F6 | 	mov	ptra, fp
321e0     B2 00 A0 FD | 	call	#popregs_
321e4                 | _fatfs_cc_f_stat_ret
321e4     2D 00 64 FD | 	ret
321e8                 | 
321e8                 | _fatfs_cc_f_unlink
321e8     00 4A 05 F6 | 	mov	COUNT_, #0
321ec     A8 00 A0 FD | 	call	#pushregs_
321f0     74 F0 07 F1 | 	add	ptra, #116
321f4     04 4E 05 F1 | 	add	fp, #4
321f8     A7 12 62 FC | 	wrlong	arg01, fp
321fc     68 4E 05 F1 | 	add	fp, #104
32200     A7 00 68 FC | 	wrlong	#0, fp
32204     68 4E 85 F1 | 	sub	fp, #104
32208     A7 12 02 F6 | 	mov	arg01, fp
3220c     6C 4E 05 F1 | 	add	fp, #108
32210     A7 14 02 F6 | 	mov	arg02, fp
32214     70 4E 85 F1 | 	sub	fp, #112
32218     02 16 06 F6 | 	mov	arg03, #2
3221c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
32220     08 4E 05 F1 | 	add	fp, #8
32224     A7 FA 61 FC | 	wrlong	result1, fp
32228     08 4E 85 F1 | 	sub	fp, #8
3222c     00 FA 0D F2 | 	cmp	result1, #0 wz
32230     E4 01 90 5D |  if_ne	jmp	#LR__4958
32234     70 4E 05 F1 | 	add	fp, #112
32238     A7 16 02 FB | 	rdlong	arg03, fp
3223c     64 4E 85 F1 | 	sub	fp, #100
32240     A7 16 62 FC | 	wrlong	arg03, fp
32244     A7 12 02 F6 | 	mov	arg01, fp
32248     08 4E 85 F1 | 	sub	fp, #8
3224c     A7 14 02 FB | 	rdlong	arg02, fp
32250     04 4E 85 F1 | 	sub	fp, #4
32254     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
32258     08 4E 05 F1 | 	add	fp, #8
3225c     A7 FA 61 FC | 	wrlong	result1, fp
32260     00 FA 4D F2 | 	cmps	result1, #0 wz
32264     08 4E 85 F1 | 	sub	fp, #8
32268     AC 01 90 5D |  if_ne	jmp	#LR__4957
3226c     37 4E 05 F1 | 	add	fp, #55
32270     A7 FA C1 FA | 	rdbyte	result1, fp
32274     37 4E 85 F1 | 	sub	fp, #55
32278     80 FA CD F7 | 	test	result1, #128 wz
3227c     08 4E 05 51 |  if_ne	add	fp, #8
32280     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32284     08 4E 85 51 |  if_ne	sub	fp, #8
32288     1C 00 90 5D |  if_ne	jmp	#LR__4950
3228c     12 4E 05 F1 | 	add	fp, #18
32290     A7 FA C1 FA | 	rdbyte	result1, fp
32294     12 4E 85 F1 | 	sub	fp, #18
32298     01 FA CD F7 | 	test	result1, #1 wz
3229c     08 4E 05 51 |  if_ne	add	fp, #8
322a0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
322a4     08 4E 85 51 |  if_ne	sub	fp, #8
322a8                 | LR__4950
322a8     08 4E 05 F1 | 	add	fp, #8
322ac     A7 FA 09 FB | 	rdlong	result1, fp wz
322b0     08 4E 85 F1 | 	sub	fp, #8
322b4     C8 00 90 5D |  if_ne	jmp	#LR__4953
322b8     70 4E 05 F1 | 	add	fp, #112
322bc     A7 12 02 FB | 	rdlong	arg01, fp
322c0     48 4E 85 F1 | 	sub	fp, #72
322c4     A7 14 02 FB | 	rdlong	arg02, fp
322c8     28 4E 85 F1 | 	sub	fp, #40
322cc     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
322d0     6C 4E 05 F1 | 	add	fp, #108
322d4     A7 FA 61 FC | 	wrlong	result1, fp
322d8     5A 4E 85 F1 | 	sub	fp, #90
322dc     A7 FA C1 FA | 	rdbyte	result1, fp
322e0     12 4E 85 F1 | 	sub	fp, #18
322e4     10 FA CD F7 | 	test	result1, #16 wz
322e8     94 00 90 AD |  if_e	jmp	#LR__4952
322ec     70 4E 05 F1 | 	add	fp, #112
322f0     A7 FA 01 FB | 	rdlong	result1, fp
322f4     34 4E 85 F1 | 	sub	fp, #52
322f8     A7 FA 61 FC | 	wrlong	result1, fp
322fc     30 4E 05 F1 | 	add	fp, #48
32300     A7 16 02 FB | 	rdlong	arg03, fp
32304     28 4E 85 F1 | 	sub	fp, #40
32308     A7 16 62 FC | 	wrlong	arg03, fp
3230c     08 4E 85 F1 | 	sub	fp, #8
32310     A7 12 02 F6 | 	mov	arg01, fp
32314     3C 4E 85 F1 | 	sub	fp, #60
32318     00 14 06 F6 | 	mov	arg02, #0
3231c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
32320     08 4E 05 F1 | 	add	fp, #8
32324     A7 FA 61 FC | 	wrlong	result1, fp
32328     08 4E 85 F1 | 	sub	fp, #8
3232c     00 FA 0D F2 | 	cmp	result1, #0 wz
32330     4C 00 90 5D |  if_ne	jmp	#LR__4951
32334     3C 4E 05 F1 | 	add	fp, #60
32338     A7 12 02 F6 | 	mov	arg01, fp
3233c     3C 4E 85 F1 | 	sub	fp, #60
32340     00 14 06 F6 | 	mov	arg02, #0
32344     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
32348     08 4E 05 F1 | 	add	fp, #8
3234c     A7 FA 61 FC | 	wrlong	result1, fp
32350     00 FA 4D F2 | 	cmps	result1, #0 wz
32354     08 4E 85 F1 | 	sub	fp, #8
32358     08 4E 05 A1 |  if_e	add	fp, #8
3235c     A7 0E 68 AC |  if_e	wrlong	#7, fp
32360     08 4E 85 A1 |  if_e	sub	fp, #8
32364     08 4E 05 F1 | 	add	fp, #8
32368     A7 FA 01 FB | 	rdlong	result1, fp
3236c     08 4E 85 F1 | 	sub	fp, #8
32370     04 FA 0D F2 | 	cmp	result1, #4 wz
32374     08 4E 05 A1 |  if_e	add	fp, #8
32378     A7 00 68 AC |  if_e	wrlong	#0, fp
3237c     08 4E 85 A1 |  if_e	sub	fp, #8
32380                 | LR__4951
32380                 | LR__4952
32380                 | LR__4953
32380     08 4E 05 F1 | 	add	fp, #8
32384     A7 FA 09 FB | 	rdlong	result1, fp wz
32388     08 4E 85 F1 | 	sub	fp, #8
3238c     88 00 90 5D |  if_ne	jmp	#LR__4956
32390     0C 4E 05 F1 | 	add	fp, #12
32394     A7 12 02 F6 | 	mov	arg01, fp
32398     0C 4E 85 F1 | 	sub	fp, #12
3239c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
323a0     08 4E 05 F1 | 	add	fp, #8
323a4     A7 FA 61 FC | 	wrlong	result1, fp
323a8     08 4E 85 F1 | 	sub	fp, #8
323ac     00 FA 0D F2 | 	cmp	result1, #0 wz
323b0     38 00 90 5D |  if_ne	jmp	#LR__4954
323b4     6C 4E 05 F1 | 	add	fp, #108
323b8     A7 FA 09 FB | 	rdlong	result1, fp wz
323bc     6C 4E 85 F1 | 	sub	fp, #108
323c0     28 00 90 AD |  if_e	jmp	#LR__4954
323c4     0C 4E 05 F1 | 	add	fp, #12
323c8     A7 12 02 F6 | 	mov	arg01, fp
323cc     60 4E 05 F1 | 	add	fp, #96
323d0     A7 14 02 FB | 	rdlong	arg02, fp
323d4     6C 4E 85 F1 | 	sub	fp, #108
323d8     00 16 06 F6 | 	mov	arg03, #0
323dc     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
323e0     08 4E 05 F1 | 	add	fp, #8
323e4     A7 FA 61 FC | 	wrlong	result1, fp
323e8     08 4E 85 F1 | 	sub	fp, #8
323ec                 | LR__4954
323ec     08 4E 05 F1 | 	add	fp, #8
323f0     A7 FA 09 FB | 	rdlong	result1, fp wz
323f4     08 4E 85 F1 | 	sub	fp, #8
323f8     1C 00 90 5D |  if_ne	jmp	#LR__4955
323fc     70 4E 05 F1 | 	add	fp, #112
32400     A7 12 02 FB | 	rdlong	arg01, fp
32404     70 4E 85 F1 | 	sub	fp, #112
32408     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
3240c     08 4E 05 F1 | 	add	fp, #8
32410     A7 FA 61 FC | 	wrlong	result1, fp
32414     08 4E 85 F1 | 	sub	fp, #8
32418                 | LR__4955
32418                 | LR__4956
32418                 | LR__4957
32418                 | LR__4958
32418                 | ' 			}
32418                 | ' 		}
32418                 | ' 		;
32418                 | ' 	}
32418                 | ' 
32418                 | ' 	return res ;
32418     08 4E 05 F1 | 	add	fp, #8
3241c     A7 FA 01 FB | 	rdlong	result1, fp
32420     08 4E 85 F1 | 	sub	fp, #8
32424     A7 F0 03 F6 | 	mov	ptra, fp
32428     B2 00 A0 FD | 	call	#popregs_
3242c                 | _fatfs_cc_f_unlink_ret
3242c     2D 00 64 FD | 	ret
32430                 | 
32430                 | _fatfs_cc_f_mkdir
32430     00 4A 05 F6 | 	mov	COUNT_, #0
32434     A8 00 A0 FD | 	call	#pushregs_
32438     5C F0 07 F1 | 	add	ptra, #92
3243c     04 4E 05 F1 | 	add	fp, #4
32440     A7 12 62 FC | 	wrlong	arg01, fp
32444     A7 12 02 F6 | 	mov	arg01, fp
32448     48 4E 05 F1 | 	add	fp, #72
3244c     A7 14 02 F6 | 	mov	arg02, fp
32450     4C 4E 85 F1 | 	sub	fp, #76
32454     02 16 06 F6 | 	mov	arg03, #2
32458     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
3245c     08 4E 05 F1 | 	add	fp, #8
32460     A7 FA 61 FC | 	wrlong	result1, fp
32464     08 4E 85 F1 | 	sub	fp, #8
32468     00 FA 0D F2 | 	cmp	result1, #0 wz
3246c     C4 02 90 5D |  if_ne	jmp	#LR__4965
32470     4C 4E 05 F1 | 	add	fp, #76
32474     A7 16 02 FB | 	rdlong	arg03, fp
32478     40 4E 85 F1 | 	sub	fp, #64
3247c     A7 16 62 FC | 	wrlong	arg03, fp
32480     A7 12 02 F6 | 	mov	arg01, fp
32484     08 4E 85 F1 | 	sub	fp, #8
32488     A7 14 02 FB | 	rdlong	arg02, fp
3248c     04 4E 85 F1 | 	sub	fp, #4
32490     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
32494     08 4E 05 F1 | 	add	fp, #8
32498     A7 FA 61 FC | 	wrlong	result1, fp
3249c     00 FA 4D F2 | 	cmps	result1, #0 wz
324a0     08 4E 85 F1 | 	sub	fp, #8
324a4     08 4E 05 A1 |  if_e	add	fp, #8
324a8     A7 10 68 AC |  if_e	wrlong	#8, fp
324ac     08 4E 85 A1 |  if_e	sub	fp, #8
324b0     08 4E 05 F1 | 	add	fp, #8
324b4     A7 FA 01 FB | 	rdlong	result1, fp
324b8     08 4E 85 F1 | 	sub	fp, #8
324bc     04 FA 0D F2 | 	cmp	result1, #4 wz
324c0     70 02 90 5D |  if_ne	jmp	#LR__4964
324c4     4C 4E 05 F1 | 	add	fp, #76
324c8     A7 16 02 FB | 	rdlong	arg03, fp
324cc     10 4E 85 F1 | 	sub	fp, #16
324d0     A7 16 62 FC | 	wrlong	arg03, fp
324d4     A7 12 02 F6 | 	mov	arg01, fp
324d8     3C 4E 85 F1 | 	sub	fp, #60
324dc     00 14 06 F6 | 	mov	arg02, #0
324e0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
324e4     50 4E 05 F1 | 	add	fp, #80
324e8     A7 FA 61 FC | 	wrlong	result1, fp
324ec     48 4E 85 F1 | 	sub	fp, #72
324f0     A7 00 68 FC | 	wrlong	#0, fp
324f4     48 4E 05 F1 | 	add	fp, #72
324f8     A7 FA 09 FB | 	rdlong	result1, fp wz
324fc     50 4E 85 F1 | 	sub	fp, #80
32500     08 4E 05 A1 |  if_e	add	fp, #8
32504     A7 0E 68 AC |  if_e	wrlong	#7, fp
32508     08 4E 85 A1 |  if_e	sub	fp, #8
3250c     50 4E 05 F1 | 	add	fp, #80
32510     A7 FA 01 FB | 	rdlong	result1, fp
32514     50 4E 85 F1 | 	sub	fp, #80
32518     01 FA 0D F2 | 	cmp	result1, #1 wz
3251c     08 4E 05 A1 |  if_e	add	fp, #8
32520     A7 04 68 AC |  if_e	wrlong	#2, fp
32524     08 4E 85 A1 |  if_e	sub	fp, #8
32528     50 4E 05 F1 | 	add	fp, #80
3252c     A7 16 02 FB | 	rdlong	arg03, fp
32530     50 4E 85 F1 | 	sub	fp, #80
32534     FF FF 7F FF 
32538     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
3253c     08 4E 05 A1 |  if_e	add	fp, #8
32540     A7 02 68 AC |  if_e	wrlong	#1, fp
32544     08 4E 85 A1 |  if_e	sub	fp, #8
32548     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
3254c     58 4E 05 F1 | 	add	fp, #88
32550     A7 FA 61 FC | 	wrlong	result1, fp
32554     50 4E 85 F1 | 	sub	fp, #80
32558     A7 FA 09 FB | 	rdlong	result1, fp wz
3255c     08 4E 85 F1 | 	sub	fp, #8
32560     1C 01 90 5D |  if_ne	jmp	#LR__4961
32564     4C 4E 05 F1 | 	add	fp, #76
32568     A7 12 02 FB | 	rdlong	arg01, fp
3256c     04 4E 05 F1 | 	add	fp, #4
32570     A7 14 02 FB | 	rdlong	arg02, fp
32574     50 4E 85 F1 | 	sub	fp, #80
32578     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
3257c     08 4E 05 F1 | 	add	fp, #8
32580     A7 FA 61 FC | 	wrlong	result1, fp
32584     00 FA 4D F2 | 	cmps	result1, #0 wz
32588     08 4E 85 F1 | 	sub	fp, #8
3258c     F0 00 90 5D |  if_ne	jmp	#LR__4960
32590     4C 4E 05 F1 | 	add	fp, #76
32594     A7 12 02 FB | 	rdlong	arg01, fp
32598     4C 4E 85 F1 | 	sub	fp, #76
3259c     34 12 06 F1 | 	add	arg01, #52
325a0     20 14 06 F6 | 	mov	arg02, #32
325a4     0B 16 06 F6 | 	mov	arg03, #11
325a8     98 00 A0 FD | 	call	#\builtin_bytefill_
325ac     4C 4E 05 F1 | 	add	fp, #76
325b0     A7 FA 01 FB | 	rdlong	result1, fp
325b4     34 FA 05 F1 | 	add	result1, #52
325b8     FD 5C 48 FC | 	wrbyte	#46, result1
325bc     A7 16 02 FB | 	rdlong	arg03, fp
325c0     3F 16 06 F1 | 	add	arg03, #63
325c4     0B 21 48 FC | 	wrbyte	#16, arg03
325c8     A7 12 02 FB | 	rdlong	arg01, fp
325cc     4A 12 06 F1 | 	add	arg01, #74
325d0     0C 4E 05 F1 | 	add	fp, #12
325d4     A7 14 02 FB | 	rdlong	arg02, fp
325d8     09 15 62 FC | 	wrlong	arg02, arg01
325dc     0C 4E 85 F1 | 	sub	fp, #12
325e0     A7 14 02 FB | 	rdlong	arg02, fp
325e4     0A 13 02 F6 | 	mov	arg01, arg02
325e8     34 14 06 F1 | 	add	arg02, #52
325ec     04 4E 05 F1 | 	add	fp, #4
325f0     A7 16 02 FB | 	rdlong	arg03, fp
325f4     50 4E 85 F1 | 	sub	fp, #80
325f8     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
325fc     4C 4E 05 F1 | 	add	fp, #76
32600     A7 14 02 FB | 	rdlong	arg02, fp
32604     0A 13 02 F6 | 	mov	arg01, arg02
32608     54 12 06 F1 | 	add	arg01, #84
3260c     4C 4E 85 F1 | 	sub	fp, #76
32610     34 14 06 F1 | 	add	arg02, #52
32614     20 16 06 F6 | 	mov	arg03, #32
32618     78 27 BF FD | 	call	#__system____builtin_memmove
3261c     4C 4E 05 F1 | 	add	fp, #76
32620     A7 16 02 FB | 	rdlong	arg03, fp
32624     55 16 06 F1 | 	add	arg03, #85
32628     0B 5D 48 FC | 	wrbyte	#46, arg03
3262c     38 4E 85 F1 | 	sub	fp, #56
32630     A7 16 02 FB | 	rdlong	arg03, fp
32634     40 4E 05 F1 | 	add	fp, #64
32638     A7 16 62 FC | 	wrlong	arg03, fp
3263c     08 4E 85 F1 | 	sub	fp, #8
32640     A7 14 02 FB | 	rdlong	arg02, fp
32644     0A 13 02 F6 | 	mov	arg01, arg02
32648     54 14 06 F1 | 	add	arg02, #84
3264c     4C 4E 85 F1 | 	sub	fp, #76
32650     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
32654     4C 4E 05 F1 | 	add	fp, #76
32658     A7 16 02 FB | 	rdlong	arg03, fp
3265c     03 16 06 F1 | 	add	arg03, #3
32660     0B 03 48 FC | 	wrbyte	#1, arg03
32664     40 4E 85 F1 | 	sub	fp, #64
32668     A7 12 02 F6 | 	mov	arg01, fp
3266c     0C 4E 85 F1 | 	sub	fp, #12
32670     44 BA BF FD | 	call	#_fatfs_cc_dir_register
32674     08 4E 05 F1 | 	add	fp, #8
32678     A7 FA 61 FC | 	wrlong	result1, fp
3267c     08 4E 85 F1 | 	sub	fp, #8
32680                 | LR__4960
32680                 | LR__4961
32680     08 4E 05 F1 | 	add	fp, #8
32684     A7 FA 09 FB | 	rdlong	result1, fp wz
32688     08 4E 85 F1 | 	sub	fp, #8
3268c     88 00 90 5D |  if_ne	jmp	#LR__4962
32690     28 4E 05 F1 | 	add	fp, #40
32694     A7 12 02 FB | 	rdlong	arg01, fp
32698     16 12 06 F1 | 	add	arg01, #22
3269c     30 4E 05 F1 | 	add	fp, #48
326a0     A7 14 02 FB | 	rdlong	arg02, fp
326a4     09 15 62 FC | 	wrlong	arg02, arg01
326a8     0C 4E 85 F1 | 	sub	fp, #12
326ac     A7 12 02 FB | 	rdlong	arg01, fp
326b0     24 4E 85 F1 | 	sub	fp, #36
326b4     A7 14 02 FB | 	rdlong	arg02, fp
326b8     28 4E 05 F1 | 	add	fp, #40
326bc     A7 16 02 FB | 	rdlong	arg03, fp
326c0     50 4E 85 F1 | 	sub	fp, #80
326c4     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
326c8     28 4E 05 F1 | 	add	fp, #40
326cc     A7 FA 01 FB | 	rdlong	result1, fp
326d0     0B FA 05 F1 | 	add	result1, #11
326d4     FD 20 48 FC | 	wrbyte	#16, result1
326d8     24 4E 05 F1 | 	add	fp, #36
326dc     A7 FA 01 FB | 	rdlong	result1, fp
326e0     03 FA 05 F1 | 	add	result1, #3
326e4     FD 02 48 FC | 	wrbyte	#1, result1
326e8     44 4E 85 F1 | 	sub	fp, #68
326ec     A7 FA 09 FB | 	rdlong	result1, fp wz
326f0     08 4E 85 F1 | 	sub	fp, #8
326f4     3C 00 90 5D |  if_ne	jmp	#LR__4963
326f8     4C 4E 05 F1 | 	add	fp, #76
326fc     A7 12 02 FB | 	rdlong	arg01, fp
32700     4C 4E 85 F1 | 	sub	fp, #76
32704     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
32708     08 4E 05 F1 | 	add	fp, #8
3270c     A7 FA 61 FC | 	wrlong	result1, fp
32710     08 4E 85 F1 | 	sub	fp, #8
32714     1C 00 90 FD | 	jmp	#LR__4963
32718                 | LR__4962
32718     3C 4E 05 F1 | 	add	fp, #60
3271c     A7 12 02 F6 | 	mov	arg01, fp
32720     14 4E 05 F1 | 	add	fp, #20
32724     A7 14 02 FB | 	rdlong	arg02, fp
32728     50 4E 85 F1 | 	sub	fp, #80
3272c     00 16 06 F6 | 	mov	arg03, #0
32730     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
32734                 | LR__4963
32734                 | LR__4964
32734                 | LR__4965
32734                 | ' 				remove_chain(&sobj, dcl, 0);
32734                 | ' 			}
32734                 | ' 		}
32734                 | ' 		;
32734                 | ' 	}
32734                 | ' 
32734                 | ' 	return res ;
32734     08 4E 05 F1 | 	add	fp, #8
32738     A7 FA 01 FB | 	rdlong	result1, fp
3273c     08 4E 85 F1 | 	sub	fp, #8
32740     A7 F0 03 F6 | 	mov	ptra, fp
32744     B2 00 A0 FD | 	call	#popregs_
32748                 | _fatfs_cc_f_mkdir_ret
32748     2D 00 64 FD | 	ret
3274c                 | 
3274c                 | _fatfs_cc_f_rename
3274c     01 4A 05 F6 | 	mov	COUNT_, #1
32750     A8 00 A0 FD | 	call	#pushregs_
32754     9C F0 07 F1 | 	add	ptra, #156
32758     04 4E 05 F1 | 	add	fp, #4
3275c     A7 12 62 FC | 	wrlong	arg01, fp
32760     04 4E 05 F1 | 	add	fp, #4
32764     A7 14 62 FC | 	wrlong	arg02, fp
32768     A7 12 02 F6 | 	mov	arg01, fp
3276c     08 4E 85 F1 | 	sub	fp, #8
32770     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
32774     04 4E 05 F1 | 	add	fp, #4
32778     A7 12 02 F6 | 	mov	arg01, fp
3277c     6C 4E 05 F1 | 	add	fp, #108
32780     A7 14 02 F6 | 	mov	arg02, fp
32784     70 4E 85 F1 | 	sub	fp, #112
32788     02 16 06 F6 | 	mov	arg03, #2
3278c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
32790     0C 4E 05 F1 | 	add	fp, #12
32794     A7 FA 61 FC | 	wrlong	result1, fp
32798     0C 4E 85 F1 | 	sub	fp, #12
3279c     00 FA 0D F2 | 	cmp	result1, #0 wz
327a0     44 03 90 5D |  if_ne	jmp	#LR__4983
327a4     70 4E 05 F1 | 	add	fp, #112
327a8     A7 16 02 FB | 	rdlong	arg03, fp
327ac     60 4E 85 F1 | 	sub	fp, #96
327b0     A7 16 62 FC | 	wrlong	arg03, fp
327b4     A7 12 02 F6 | 	mov	arg01, fp
327b8     0C 4E 85 F1 | 	sub	fp, #12
327bc     A7 14 02 FB | 	rdlong	arg02, fp
327c0     04 4E 85 F1 | 	sub	fp, #4
327c4     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
327c8     0C 4E 05 F1 | 	add	fp, #12
327cc     A7 FA 61 FC | 	wrlong	result1, fp
327d0     00 FA 4D F2 | 	cmps	result1, #0 wz
327d4     0C 4E 85 F1 | 	sub	fp, #12
327d8     1C 00 90 5D |  if_ne	jmp	#LR__4970
327dc     3B 4E 05 F1 | 	add	fp, #59
327e0     A7 FA C1 FA | 	rdbyte	result1, fp
327e4     3B 4E 85 F1 | 	sub	fp, #59
327e8     A0 FA CD F7 | 	test	result1, #160 wz
327ec     0C 4E 05 51 |  if_ne	add	fp, #12
327f0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
327f4     0C 4E 85 51 |  if_ne	sub	fp, #12
327f8                 | LR__4970
327f8     0C 4E 05 F1 | 	add	fp, #12
327fc     A7 26 0A FB | 	rdlong	local01, fp wz
32800     0C 4E 85 F1 | 	sub	fp, #12
32804     E0 02 90 5D |  if_ne	jmp	#LR__4982
32808     74 4E 05 F1 | 	add	fp, #116
3280c     A7 12 02 F6 | 	mov	arg01, fp
32810     48 4E 85 F1 | 	sub	fp, #72
32814     A7 14 02 FB | 	rdlong	arg02, fp
32818     2C 4E 85 F1 | 	sub	fp, #44
3281c     20 16 06 F6 | 	mov	arg03, #32
32820     70 25 BF FD | 	call	#__system____builtin_memmove
32824     40 4E 05 F1 | 	add	fp, #64
32828     A7 12 02 F6 | 	mov	arg01, fp
3282c     30 4E 85 F1 | 	sub	fp, #48
32830     A7 14 02 F6 | 	mov	arg02, fp
32834     10 4E 85 F1 | 	sub	fp, #16
32838     30 16 06 F6 | 	mov	arg03, #48
3283c     54 25 BF FD | 	call	#__system____builtin_memmove
32840     40 4E 05 F1 | 	add	fp, #64
32844     A7 12 02 F6 | 	mov	arg01, fp
32848     38 4E 85 F1 | 	sub	fp, #56
3284c     A7 14 02 FB | 	rdlong	arg02, fp
32850     08 4E 85 F1 | 	sub	fp, #8
32854     34 CA BF FD | 	call	#_fatfs_cc_follow_path
32858     0C 4E 05 F1 | 	add	fp, #12
3285c     A7 FA 61 FC | 	wrlong	result1, fp
32860     0C 4E 85 F1 | 	sub	fp, #12
32864     00 FA 0D F2 | 	cmp	result1, #0 wz
32868     4C 00 90 5D |  if_ne	jmp	#LR__4973
3286c     48 4E 05 F1 | 	add	fp, #72
32870     A7 FA 01 FB | 	rdlong	result1, fp
32874     30 4E 85 F1 | 	sub	fp, #48
32878     A7 16 02 FB | 	rdlong	arg03, fp
3287c     18 4E 85 F1 | 	sub	fp, #24
32880     0B FB 09 F2 | 	cmp	result1, arg03 wz
32884     20 00 90 5D |  if_ne	jmp	#LR__4971
32888     50 4E 05 F1 | 	add	fp, #80
3288c     A7 FA 01 FB | 	rdlong	result1, fp
32890     30 4E 85 F1 | 	sub	fp, #48
32894     A7 16 02 FB | 	rdlong	arg03, fp
32898     20 4E 85 F1 | 	sub	fp, #32
3289c     0B FB 09 F2 | 	cmp	result1, arg03 wz
328a0     04 26 06 A6 |  if_e	mov	local01, #4
328a4     04 00 90 AD |  if_e	jmp	#LR__4972
328a8                 | LR__4971
328a8     08 26 06 F6 | 	mov	local01, #8
328ac                 | LR__4972
328ac     0C 4E 05 F1 | 	add	fp, #12
328b0     A7 26 62 FC | 	wrlong	local01, fp
328b4     0C 4E 85 F1 | 	sub	fp, #12
328b8                 | LR__4973
328b8     0C 4E 05 F1 | 	add	fp, #12
328bc     A7 26 02 FB | 	rdlong	local01, fp
328c0     0C 4E 85 F1 | 	sub	fp, #12
328c4     04 26 0E F2 | 	cmp	local01, #4 wz
328c8     CC 01 90 5D |  if_ne	jmp	#LR__4979
328cc     40 4E 05 F1 | 	add	fp, #64
328d0     A7 12 02 F6 | 	mov	arg01, fp
328d4     40 4E 85 F1 | 	sub	fp, #64
328d8     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
328dc     0C 4E 05 F1 | 	add	fp, #12
328e0     A7 FA 61 FC | 	wrlong	result1, fp
328e4     0C 4E 85 F1 | 	sub	fp, #12
328e8     00 FA 0D F2 | 	cmp	result1, #0 wz
328ec     A8 01 90 5D |  if_ne	jmp	#LR__4978
328f0     5C 4E 05 F1 | 	add	fp, #92
328f4     A7 12 02 FB | 	rdlong	arg01, fp
328f8     38 4E 05 F1 | 	add	fp, #56
328fc     A7 12 62 FC | 	wrlong	arg01, fp
32900     0D 12 06 F1 | 	add	arg01, #13
32904     20 4E 85 F1 | 	sub	fp, #32
32908     A7 14 02 F6 | 	mov	arg02, fp
3290c     74 4E 85 F1 | 	sub	fp, #116
32910     0D 14 06 F1 | 	add	arg02, #13
32914     13 16 06 F6 | 	mov	arg03, #19
32918     78 24 BF FD | 	call	#__system____builtin_memmove
3291c     94 4E 05 F1 | 	add	fp, #148
32920     A7 26 02 FB | 	rdlong	local01, fp
32924     15 4E 85 F1 | 	sub	fp, #21
32928     A7 FA C1 FA | 	rdbyte	result1, fp
3292c     0B 26 06 F1 | 	add	local01, #11
32930     13 FB 41 FC | 	wrbyte	result1, local01
32934     15 4E 05 F1 | 	add	fp, #21
32938     A7 26 02 FB | 	rdlong	local01, fp
3293c     94 4E 85 F1 | 	sub	fp, #148
32940     0B 26 06 F1 | 	add	local01, #11
32944     13 27 C2 FA | 	rdbyte	local01, local01
32948     10 26 CE F7 | 	test	local01, #16 wz
3294c     24 00 90 5D |  if_ne	jmp	#LR__4974
32950     94 4E 05 F1 | 	add	fp, #148
32954     A7 FA 01 FB | 	rdlong	result1, fp
32958     FD 26 02 F6 | 	mov	local01, result1
3295c     94 4E 85 F1 | 	sub	fp, #148
32960     0B FA 05 F1 | 	add	result1, #11
32964     FD FA C1 FA | 	rdbyte	result1, result1
32968     20 FA 45 F5 | 	or	result1, #32
3296c     0B 26 06 F1 | 	add	local01, #11
32970     13 FB 41 FC | 	wrbyte	result1, local01
32974                 | LR__4974
32974     70 4E 05 F1 | 	add	fp, #112
32978     A7 26 02 FB | 	rdlong	local01, fp
3297c     03 26 06 F1 | 	add	local01, #3
32980     13 03 48 FC | 	wrbyte	#1, local01
32984     24 4E 05 F1 | 	add	fp, #36
32988     A7 26 02 FB | 	rdlong	local01, fp
3298c     94 4E 85 F1 | 	sub	fp, #148
32990     0B 26 06 F1 | 	add	local01, #11
32994     13 27 C2 FA | 	rdbyte	local01, local01
32998     10 26 CE F7 | 	test	local01, #16 wz
3299c     F8 00 90 AD |  if_e	jmp	#LR__4977
329a0     18 4E 05 F1 | 	add	fp, #24
329a4     A7 16 02 FB | 	rdlong	arg03, fp
329a8     30 4E 05 F1 | 	add	fp, #48
329ac     A7 26 02 FB | 	rdlong	local01, fp
329b0     48 4E 85 F1 | 	sub	fp, #72
329b4     13 17 0A F2 | 	cmp	arg03, local01 wz
329b8     DC 00 90 AD |  if_e	jmp	#LR__4977
329bc     70 4E 05 F1 | 	add	fp, #112
329c0     A7 12 02 FB | 	rdlong	arg01, fp
329c4     09 27 02 F6 | 	mov	local01, arg01
329c8     24 4E 05 F1 | 	add	fp, #36
329cc     A7 14 02 FB | 	rdlong	arg02, fp
329d0     94 4E 85 F1 | 	sub	fp, #148
329d4     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
329d8     FD 14 02 F6 | 	mov	arg02, result1
329dc     13 13 02 F6 | 	mov	arg01, local01
329e0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
329e4     98 4E 05 F1 | 	add	fp, #152
329e8     A7 FA 61 FC | 	wrlong	result1, fp
329ec     00 FA 4D F2 | 	cmps	result1, #0 wz
329f0     98 4E 85 F1 | 	sub	fp, #152
329f4     0C 4E 05 A1 |  if_e	add	fp, #12
329f8     A7 04 68 AC |  if_e	wrlong	#2, fp
329fc     0C 4E 85 A1 |  if_e	sub	fp, #12
32a00     94 00 90 AD |  if_e	jmp	#LR__4976
32a04     70 4E 05 F1 | 	add	fp, #112
32a08     A7 12 02 FB | 	rdlong	arg01, fp
32a0c     28 4E 05 F1 | 	add	fp, #40
32a10     A7 14 02 FB | 	rdlong	arg02, fp
32a14     98 4E 85 F1 | 	sub	fp, #152
32a18     4C A0 BF FD | 	call	#_fatfs_cc_move_window
32a1c     0C 4E 05 F1 | 	add	fp, #12
32a20     A7 FA 61 FC | 	wrlong	result1, fp
32a24     64 4E 05 F1 | 	add	fp, #100
32a28     A7 26 02 FB | 	rdlong	local01, fp
32a2c     54 26 06 F1 | 	add	local01, #84
32a30     24 4E 05 F1 | 	add	fp, #36
32a34     A7 26 62 FC | 	wrlong	local01, fp
32a38     88 4E 85 F1 | 	sub	fp, #136
32a3c     A7 26 0A FB | 	rdlong	local01, fp wz
32a40     0C 4E 85 F1 | 	sub	fp, #12
32a44     50 00 90 5D |  if_ne	jmp	#LR__4975
32a48     94 4E 05 F1 | 	add	fp, #148
32a4c     A7 26 02 FB | 	rdlong	local01, fp
32a50     94 4E 85 F1 | 	sub	fp, #148
32a54     01 26 06 F1 | 	add	local01, #1
32a58     13 27 C2 FA | 	rdbyte	local01, local01
32a5c     2E 26 0E F2 | 	cmp	local01, #46 wz
32a60     34 00 90 5D |  if_ne	jmp	#LR__4975
32a64     70 4E 05 F1 | 	add	fp, #112
32a68     A7 12 02 FB | 	rdlong	arg01, fp
32a6c     24 4E 05 F1 | 	add	fp, #36
32a70     A7 14 02 FB | 	rdlong	arg02, fp
32a74     4C 4E 85 F1 | 	sub	fp, #76
32a78     A7 16 02 FB | 	rdlong	arg03, fp
32a7c     48 4E 85 F1 | 	sub	fp, #72
32a80     50 AD BF FD | 	call	#_fatfs_cc_st_clust
32a84     70 4E 05 F1 | 	add	fp, #112
32a88     A7 26 02 FB | 	rdlong	local01, fp
32a8c     70 4E 85 F1 | 	sub	fp, #112
32a90     03 26 06 F1 | 	add	local01, #3
32a94     13 03 48 FC | 	wrbyte	#1, local01
32a98                 | LR__4975
32a98                 | LR__4976
32a98                 | LR__4977
32a98                 | LR__4978
32a98                 | LR__4979
32a98     0C 4E 05 F1 | 	add	fp, #12
32a9c     A7 26 0A FB | 	rdlong	local01, fp wz
32aa0     0C 4E 85 F1 | 	sub	fp, #12
32aa4     40 00 90 5D |  if_ne	jmp	#LR__4981
32aa8     10 4E 05 F1 | 	add	fp, #16
32aac     A7 12 02 F6 | 	mov	arg01, fp
32ab0     10 4E 85 F1 | 	sub	fp, #16
32ab4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
32ab8     0C 4E 05 F1 | 	add	fp, #12
32abc     A7 FA 61 FC | 	wrlong	result1, fp
32ac0     0C 4E 85 F1 | 	sub	fp, #12
32ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
32ac8     1C 00 90 5D |  if_ne	jmp	#LR__4980
32acc     70 4E 05 F1 | 	add	fp, #112
32ad0     A7 12 02 FB | 	rdlong	arg01, fp
32ad4     70 4E 85 F1 | 	sub	fp, #112
32ad8     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
32adc     0C 4E 05 F1 | 	add	fp, #12
32ae0     A7 FA 61 FC | 	wrlong	result1, fp
32ae4     0C 4E 85 F1 | 	sub	fp, #12
32ae8                 | LR__4980
32ae8                 | LR__4981
32ae8                 | LR__4982
32ae8                 | LR__4983
32ae8                 | ' 					res = sync_fs(fs);
32ae8                 | ' 				}
32ae8                 | ' 			}
32ae8                 | ' 
32ae8                 | ' 		}
32ae8                 | ' 		;
32ae8                 | ' 	}
32ae8                 | ' 
32ae8                 | ' 	return res ;
32ae8     0C 4E 05 F1 | 	add	fp, #12
32aec     A7 FA 01 FB | 	rdlong	result1, fp
32af0     0C 4E 85 F1 | 	sub	fp, #12
32af4     A7 F0 03 F6 | 	mov	ptra, fp
32af8     B2 00 A0 FD | 	call	#popregs_
32afc                 | _fatfs_cc_f_rename_ret
32afc     2D 00 64 FD | 	ret
32b00                 | 
32b00                 | _fatfs_cc_time
32b00     00 4A 05 F6 | 	mov	COUNT_, #0
32b04     A8 00 A0 FD | 	call	#pushregs_
32b08     14 F0 07 F1 | 	add	ptra, #20
32b0c     04 4E 05 F1 | 	add	fp, #4
32b10     A7 12 62 FC | 	wrlong	arg01, fp
32b14     04 4E 05 F1 | 	add	fp, #4
32b18     A7 12 02 F6 | 	mov	arg01, fp
32b1c     08 4E 85 F1 | 	sub	fp, #8
32b20     00 14 06 F6 | 	mov	arg02, #0
32b24     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
32b28     08 4E 05 F1 | 	add	fp, #8
32b2c     A7 FA 01 FB | 	rdlong	result1, fp
32b30     08 4E 05 F1 | 	add	fp, #8
32b34     A7 FA 61 FC | 	wrlong	result1, fp
32b38     0C 4E 85 F1 | 	sub	fp, #12
32b3c     A7 FA 09 FB | 	rdlong	result1, fp wz
32b40     04 4E 85 F1 | 	sub	fp, #4
32b44     18 00 90 AD |  if_e	jmp	#LR__4990
32b48     04 4E 05 F1 | 	add	fp, #4
32b4c     A7 FA 01 FB | 	rdlong	result1, fp
32b50     0C 4E 05 F1 | 	add	fp, #12
32b54     A7 14 02 FB | 	rdlong	arg02, fp
32b58     10 4E 85 F1 | 	sub	fp, #16
32b5c     FD 14 62 FC | 	wrlong	arg02, result1
32b60                 | LR__4990
32b60                 | '         *tp = now;
32b60                 | '     return now;
32b60     10 4E 05 F1 | 	add	fp, #16
32b64     A7 FA 01 FB | 	rdlong	result1, fp
32b68     10 4E 85 F1 | 	sub	fp, #16
32b6c     A7 F0 03 F6 | 	mov	ptra, fp
32b70     B2 00 A0 FD | 	call	#popregs_
32b74                 | _fatfs_cc_time_ret
32b74     2D 00 64 FD | 	ret
32b78                 | 
32b78                 | _fatfs_cc_mktime
32b78     06 4A 05 F6 | 	mov	COUNT_, #6
32b7c     A8 00 A0 FD | 	call	#pushregs_
32b80     09 27 02 F6 | 	mov	local01, arg01
32b84     14 26 06 F1 | 	add	local01, #20
32b88     13 13 02 FB | 	rdlong	arg01, local01
32b8c     14 26 86 F1 | 	sub	local01, #20
32b90     46 12 56 F2 | 	cmps	arg01, #70 wc
32b94                 | '                 return (time_t) -1;
32b94     01 FA 65 C6 |  if_b	neg	result1, #1
32b98     7C 01 90 CD |  if_b	jmp	#LR__5004
32b9c     03 00 00 FF 
32ba0     6C 29 06 F6 | 	mov	local02, ##1900
32ba4     14 26 06 F1 | 	add	local01, #20
32ba8     13 FB 01 FB | 	rdlong	result1, local01
32bac     FD 28 02 F1 | 	add	local02, result1
32bb0     08 26 86 F1 | 	sub	local01, #8
32bb4     13 2B 02 FB | 	rdlong	local03, local01
32bb8     01 2A 86 F1 | 	sub	local03, #1
32bbc     04 26 06 F1 | 	add	local01, #4
32bc0     13 13 02 FB | 	rdlong	arg01, local01
32bc4     10 26 86 F1 | 	sub	local01, #16
32bc8     02 12 66 F0 | 	shl	arg01, #2
32bcc     02 00 00 FF 
32bd0     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
32bd4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
32bd8     09 FB 01 FB | 	rdlong	result1, arg01
32bdc     FD 2A 02 F1 | 	add	local03, result1
32be0     14 13 02 F6 | 	mov	arg01, local02
32be4     02 00 00 FF 
32be8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
32bec     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
32bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
32bf4     1C 00 90 AD |  if_e	jmp	#LR__5000
32bf8     00 2C 06 F6 | 	mov	local04, #0
32bfc     10 26 06 F1 | 	add	local01, #16
32c00     13 FB 01 FB | 	rdlong	result1, local01
32c04     10 26 86 F1 | 	sub	local01, #16
32c08     02 FA 55 F2 | 	cmps	result1, #2 wc
32c0c     01 2C 06 36 |  if_ae	mov	local04, #1
32c10     04 00 90 FD | 	jmp	#LR__5001
32c14                 | LR__5000
32c14     00 2C 06 F6 | 	mov	local04, #0
32c18                 | LR__5001
32c18     04 26 06 F1 | 	add	local01, #4
32c1c     13 FB 01 FB | 	rdlong	result1, local01
32c20     04 26 86 F1 | 	sub	local01, #4
32c24     13 2F 02 FB | 	rdlong	local05, local01
32c28     08 26 06 F1 | 	add	local01, #8
32c2c     13 13 02 FB | 	rdlong	arg01, local01
32c30     07 00 00 FF 
32c34     10 12 06 FD | 	qmul	arg01, ##3600
32c38     16 2B 02 F1 | 	add	local03, local04
32c3c     FD 2C 02 F6 | 	mov	local04, result1
32c40     04 2C 66 F0 | 	shl	local04, #4
32c44     FD 2C 82 F1 | 	sub	local04, result1
32c48     02 2C 66 F0 | 	shl	local04, #2
32c4c     16 2F 02 F1 | 	add	local05, local04
32c50     08 26 86 F1 | 	sub	local01, #8
32c54     18 2C 62 FD | 	getqx	local04
32c58     A8 00 00 FF 
32c5c     80 2B 06 FD | 	qmul	local03, ##86400
32c60     16 2F 02 F1 | 	add	local05, local04
32c64     14 2B 02 F6 | 	mov	local03, local02
32c68     03 00 00 FF 
32c6c     B2 2B 86 F1 | 	sub	local03, ##1970
32c70     18 2C 62 FD | 	getqx	local04
32c74     99 F0 00 FF 
32c78     80 2B 06 FD | 	qmul	local03, ##31536000
32c7c     16 2F 02 F1 | 	add	local05, local04
32c80     14 2B 02 F6 | 	mov	local03, local02
32c84     03 00 00 FF 
32c88     B1 2B 86 F1 | 	sub	local03, ##1969
32c8c     15 31 52 F6 | 	abs	local06, local03 wc
32c90     02 30 46 F0 | 	shr	local06, #2
32c94     18 31 82 F6 | 	negc	local06, local06
32c98     03 00 00 FF 
32c9c     D1 29 56 F2 | 	cmps	local02, ##2001 wc
32ca0     18 2C 62 FD | 	getqx	local04
32ca4     16 2F 02 F1 | 	add	local05, local04
32ca8     18 00 90 CD |  if_b	jmp	#LR__5002
32cac     03 00 00 FF 
32cb0     D0 29 86 F1 | 	sub	local02, ##2000
32cb4     14 2D 52 F6 | 	abs	local04, local02 wc
32cb8     64 2C 16 FD | 	qdiv	local04, #100
32cbc     18 2C 62 FD | 	getqx	local04
32cc0     16 31 A2 F3 | 	sumnc	local06, local04
32cc4                 | LR__5002
32cc4     A8 00 00 FF 
32cc8     80 31 06 FD | 	qmul	local06, ##86400
32ccc     18 30 62 FD | 	getqx	local06
32cd0     18 2F 02 F1 | 	add	local05, local06
32cd4     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
32cd8     02 00 00 FF 
32cdc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
32ce0     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
32ce4     18 2F 02 F1 | 	add	local05, local06
32ce8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
32cec     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
32cf0     02 00 00 FF 
32cf4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
32cf8     01 2A 0E F2 | 	cmp	local03, #1 wz
32cfc     14 00 90 5D |  if_ne	jmp	#LR__5003
32d00     13 13 02 F6 | 	mov	arg01, local01
32d04     DC 19 B0 FD | 	call	#_fatfs_cc___indst
32d08     00 FA 0D F2 | 	cmp	result1, #0 wz
32d0c     07 00 00 5F 
32d10     10 2E 86 51 |  if_ne	sub	local05, ##3600
32d14                 | LR__5003
32d14                 | '                 s -=  (3600L) ;
32d14                 | ' 
32d14                 | '         return s;
32d14     17 FB 01 F6 | 	mov	result1, local05
32d18                 | LR__5004
32d18     A7 F0 03 F6 | 	mov	ptra, fp
32d1c     B2 00 A0 FD | 	call	#popregs_
32d20                 | _fatfs_cc_mktime_ret
32d20     2D 00 64 FD | 	ret
32d24                 | 
32d24                 | _fatfs_cc__gmtime_r
32d24     03 4A 05 F6 | 	mov	COUNT_, #3
32d28     A8 00 A0 FD | 	call	#pushregs_
32d2c     09 27 02 FB | 	rdlong	local01, arg01
32d30     A8 00 00 FF 
32d34     80 27 16 FD | 	qdiv	local01, ##86400
32d38     18 FA 61 FD | 	getqx	result1
32d3c     04 FA 05 F1 | 	add	result1, #4
32d40     07 FA 15 FD | 	qdiv	result1, #7
32d44     18 14 06 F1 | 	add	arg02, #24
32d48     D1 7F 27 FF 
32d4c     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
32d50     D1 7F 27 3F 
32d54     00 26 86 31 |  if_ae	sub	local01, ##1325376000
32d58     03 00 00 3F 
32d5c     DC 29 06 36 |  if_ae	mov	local02, ##2012
32d60     03 00 00 CF 
32d64     B2 29 06 C6 |  if_b	mov	local02, ##1970
32d68                 | ' 	  year = 1970;
32d68                 | ' 	}
32d68                 | ' 
32d68                 | ' 	for(;;) {
32d68     19 FA 61 FD | 	getqy	result1
32d6c     0A FB 61 FC | 	wrlong	result1, arg02
32d70     18 14 86 F1 | 	sub	arg02, #24
32d74                 | LR__5010
32d74     14 13 02 F6 | 	mov	arg01, local02
32d78     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
32d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
32d80     42 F1 00 5F 
32d84     00 2B 06 56 |  if_ne	mov	local03, ##31622400
32d88     99 F0 00 AF 
32d8c     80 2B 06 A6 |  if_e	mov	local03, ##31536000
32d90     15 27 12 F2 | 	cmp	local01, local03 wc
32d94                 | ' 	    break;
32d94     01 28 06 31 |  if_ae	add	local02, #1
32d98     15 27 82 31 |  if_ae	sub	local01, local03
32d9c     D4 FF 9F 3D |  if_ae	jmp	#LR__5010
32da0     A8 00 00 FF 
32da4     80 27 16 FD | 	qdiv	local01, ##86400
32da8     14 2B 02 F6 | 	mov	local03, local02
32dac     03 00 00 FF 
32db0     6C 2B 86 F1 | 	sub	local03, ##1900
32db4     14 14 06 F1 | 	add	arg02, #20
32db8     0A 2B 62 FC | 	wrlong	local03, arg02
32dbc     08 14 06 F1 | 	add	arg02, #8
32dc0     14 13 02 F6 | 	mov	arg01, local02
32dc4     18 28 62 FD | 	getqx	local02
32dc8     0A 29 62 FC | 	wrlong	local02, arg02
32dcc     1C 14 86 F1 | 	sub	arg02, #28
32dd0     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
32dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
32dd8     1D 2A 06 56 |  if_ne	mov	local03, #29
32ddc     1C 2A 06 A6 |  if_e	mov	local03, #28
32de0     02 00 00 FF 
32de4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
32de8     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
32dec     02 00 00 FF 
32df0     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
32df4                 | ' 
32df4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
32df4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
32df4     00 12 06 F6 | 	mov	arg01, #0
32df8     97 2A 48 FB | 	callpa	#(@LR__5012-@LR__5011)>>2,fcache_load_ptr_
32dfc                 | LR__5011
32dfc     09 2B 02 F6 | 	mov	local03, arg01
32e00     02 2A 66 F0 | 	shl	local03, #2
32e04     02 00 00 FF 
32e08     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
32e0c     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
32e10     15 2B 02 FB | 	rdlong	local03, local03
32e14     15 29 52 F2 | 	cmps	local02, local03 wc
32e18     02 00 00 FF 
32e1c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
32e20     2C 00 90 CD |  if_b	jmp	#LR__5013
32e24     09 2B 02 F6 | 	mov	local03, arg01
32e28     02 2A 66 F0 | 	shl	local03, #2
32e2c     02 00 00 FF 
32e30     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
32e34     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
32e38     15 2B 02 FB | 	rdlong	local03, local03
32e3c     15 29 82 F1 | 	sub	local02, local03
32e40     01 12 06 F1 | 	add	arg01, #1
32e44     02 00 00 FF 
32e48     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
32e4c     AC FF 9F FD | 	jmp	#LR__5011
32e50                 | LR__5012
32e50                 | LR__5013
32e50     A8 00 00 FF 
32e54     80 27 16 FD | 	qdiv	local01, ##86400
32e58     10 14 06 F1 | 	add	arg02, #16
32e5c     0A 13 62 FC | 	wrlong	arg01, arg02
32e60     01 28 06 F1 | 	add	local02, #1
32e64     04 14 86 F1 | 	sub	arg02, #4
32e68     0A 29 62 FC | 	wrlong	local02, arg02
32e6c     19 26 62 FD | 	getqy	local01
32e70     07 00 00 FF 
32e74     10 26 16 FD | 	qdiv	local01, ##3600
32e78     18 2A 62 FD | 	getqx	local03
32e7c     07 00 00 FF 
32e80     10 26 16 FD | 	qdiv	local01, ##3600
32e84     04 14 86 F1 | 	sub	arg02, #4
32e88     0A 2B 62 FC | 	wrlong	local03, arg02
32e8c     19 26 62 FD | 	getqy	local01
32e90     3C 26 16 FD | 	qdiv	local01, #60
32e94     18 2A 62 FD | 	getqx	local03
32e98     3C 26 16 FD | 	qdiv	local01, #60
32e9c     04 14 86 F1 | 	sub	arg02, #4
32ea0     0A 2B 62 FC | 	wrlong	local03, arg02
32ea4     04 14 86 F1 | 	sub	arg02, #4
32ea8                 | '         stm->tm_isdst = 0;
32ea8                 | ' 
32ea8                 | ' ;
32ea8                 | '         return stm;
32ea8     0A FB 01 F6 | 	mov	result1, arg02
32eac     19 2A 62 FD | 	getqy	local03
32eb0     0A 2B 62 FC | 	wrlong	local03, arg02
32eb4     20 14 06 F1 | 	add	arg02, #32
32eb8     0A 01 68 FC | 	wrlong	#0, arg02
32ebc     A7 F0 03 F6 | 	mov	ptra, fp
32ec0     B2 00 A0 FD | 	call	#popregs_
32ec4                 | _fatfs_cc__gmtime_r_ret
32ec4     2D 00 64 FD | 	ret
32ec8                 | 
32ec8                 | _fatfs_cc__tzset
32ec8     A5 01 00 FF 
32ecc     0D 12 06 F6 | 	mov	arg01, ##@LR__5325
32ed0     34 00 B0 FD | 	call	#_fatfs_cc_getenv
32ed4     FD 12 02 F6 | 	mov	arg01, result1
32ed8     02 00 00 FF 
32edc     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
32ee0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
32ee4     02 00 00 FF 
32ee8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
32eec     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
32ef0     02 00 00 FF 
32ef4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
32ef8     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
32efc     02 00 00 FF 
32f00     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
32f04                 | _fatfs_cc__tzset_ret
32f04     2D 00 64 FD | 	ret
32f08                 | 
32f08                 | _fatfs_cc_getenv
32f08     06 4A 05 F6 | 	mov	COUNT_, #6
32f0c     A8 00 A0 FD | 	call	#pushregs_
32f10     09 27 02 F6 | 	mov	local01, arg01
32f14     09 29 02 F6 | 	mov	local02, arg01
32f18     97 06 48 FB | 	callpa	#(@LR__5021-@LR__5020)>>2,fcache_load_ptr_
32f1c                 | LR__5020
32f1c     14 FB C9 FA | 	rdbyte	result1, local02 wz
32f20     01 28 06 51 |  if_ne	add	local02, #1
32f24     F4 FF 9F 5D |  if_ne	jmp	#LR__5020
32f28                 | LR__5021
32f28     09 29 82 F1 | 	sub	local02, arg01
32f2c     14 FB 01 F6 | 	mov	result1, local02
32f30     02 00 00 FF 
32f34     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
32f38     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
32f3c     02 00 00 FF 
32f40     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
32f44                 | '             return 0;
32f44     00 FA 05 A6 |  if_e	mov	result1, #0
32f48     5C 00 90 AD |  if_e	jmp	#LR__5024
32f4c                 | ' 
32f4c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
32f4c     02 00 00 FF 
32f50     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
32f54     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
32f58     02 00 00 FF 
32f5c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
32f60                 | LR__5022
32f60     15 2D 0A FB | 	rdlong	local04, local03 wz
32f64     3C 00 90 AD |  if_e	jmp	#LR__5023
32f68     16 13 02 F6 | 	mov	arg01, local04
32f6c     13 15 02 F6 | 	mov	arg02, local01
32f70     14 17 02 F6 | 	mov	arg03, local02
32f74     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
32f78     00 FA 0D F2 | 	cmp	result1, #0 wz
32f7c     14 2F 02 A6 |  if_e	mov	local05, local02
32f80     16 2F 02 A1 |  if_e	add	local05, local04
32f84     17 31 C2 AA |  if_e	rdbyte	local06, local05
32f88     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
32f8c                 | ' 			return name+len+1;
32f8c     14 2D 02 A1 |  if_e	add	local04, local02
32f90     01 2C 06 A1 |  if_e	add	local04, #1
32f94     16 FB 01 A6 |  if_e	mov	result1, local04
32f98     0C 00 90 AD |  if_e	jmp	#LR__5024
32f9c     04 2A 06 F1 | 	add	local03, #4
32fa0     BC FF 9F FD | 	jmp	#LR__5022
32fa4                 | LR__5023
32fa4                 | ' 	}
32fa4                 | ' 	return 0;
32fa4     00 FA 05 F6 | 	mov	result1, #0
32fa8                 | LR__5024
32fa8     A7 F0 03 F6 | 	mov	ptra, fp
32fac     B2 00 A0 FD | 	call	#popregs_
32fb0                 | _fatfs_cc_getenv_ret
32fb0     2D 00 64 FD | 	ret
32fb4                 | 
32fb4                 | _fatfs_cc__get_fattime
32fb4     00 4A 05 F6 | 	mov	COUNT_, #0
32fb8     A8 00 A0 FD | 	call	#pushregs_
32fbc     34 F0 07 F1 | 	add	ptra, #52
32fc0     00 12 06 F6 | 	mov	arg01, #0
32fc4     38 FB BF FD | 	call	#_fatfs_cc_time
32fc8     04 4E 05 F1 | 	add	fp, #4
32fcc     A7 FA 61 FC | 	wrlong	result1, fp
32fd0     A7 12 02 F6 | 	mov	arg01, fp
32fd4     0C 4E 05 F1 | 	add	fp, #12
32fd8     A7 14 02 F6 | 	mov	arg02, fp
32fdc     10 4E 85 F1 | 	sub	fp, #16
32fe0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
32fe4     24 4E 05 F1 | 	add	fp, #36
32fe8     A7 14 02 FB | 	rdlong	arg02, fp
32fec     50 14 86 F1 | 	sub	arg02, #80
32ff0     09 14 66 F0 | 	shl	arg02, #9
32ff4     04 4E 85 F1 | 	sub	fp, #4
32ff8     A7 FA 01 FB | 	rdlong	result1, fp
32ffc     01 FA 05 F1 | 	add	result1, #1
33000     05 FA 65 F0 | 	shl	result1, #5
33004     FD 14 42 F5 | 	or	arg02, result1
33008     04 4E 85 F1 | 	sub	fp, #4
3300c     A7 FA 01 FB | 	rdlong	result1, fp
33010     FD 14 42 F5 | 	or	arg02, result1
33014     14 4E 85 F1 | 	sub	fp, #20
33018     A7 14 62 FC | 	wrlong	arg02, fp
3301c     10 4E 05 F1 | 	add	fp, #16
33020     A7 14 02 FB | 	rdlong	arg02, fp
33024     0B 14 66 F0 | 	shl	arg02, #11
33028     04 4E 85 F1 | 	sub	fp, #4
3302c     A7 FA 01 FB | 	rdlong	result1, fp
33030     05 FA 65 F0 | 	shl	result1, #5
33034     FD 14 42 F5 | 	or	arg02, result1
33038     04 4E 85 F1 | 	sub	fp, #4
3303c     A7 FA 01 FB | 	rdlong	result1, fp
33040     FD 14 42 F5 | 	or	arg02, result1
33044     04 4E 85 F1 | 	sub	fp, #4
33048     A7 14 62 FC | 	wrlong	arg02, fp
3304c                 | ' 
3304c                 | '     now = time(0);
3304c                 | '     _gmtime_r (&now, &date);
3304c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
3304c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
3304c                 | '     return (ffdate << 16) | fftime;
3304c     04 4E 85 F1 | 	sub	fp, #4
33050     A7 FA 01 FB | 	rdlong	result1, fp
33054     10 FA 65 F0 | 	shl	result1, #16
33058     08 4E 85 F1 | 	sub	fp, #8
3305c     0A FB 41 F5 | 	or	result1, arg02
33060     A7 F0 03 F6 | 	mov	ptra, fp
33064     B2 00 A0 FD | 	call	#popregs_
33068                 | _fatfs_cc__get_fattime_ret
33068     2D 00 64 FD | 	ret
3306c                 | 
3306c                 | _fatfs_cc_unixtime_1021
3306c     00 4A 05 F6 | 	mov	COUNT_, #0
33070     A8 00 A0 FD | 	call	#pushregs_
33074     34 F0 07 F1 | 	add	ptra, #52
33078     04 4E 05 F1 | 	add	fp, #4
3307c     A7 12 62 FC | 	wrlong	arg01, fp
33080     04 4E 05 F1 | 	add	fp, #4
33084     A7 14 62 FC | 	wrlong	arg02, fp
33088     04 4E 85 F1 | 	sub	fp, #4
3308c     A7 14 02 FB | 	rdlong	arg02, fp
33090     09 14 46 F0 | 	shr	arg02, #9
33094     7F 14 06 F5 | 	and	arg02, #127
33098     50 FA 05 F6 | 	mov	result1, #80
3309c     0A FB 01 F1 | 	add	result1, arg02
330a0     20 4E 05 F1 | 	add	fp, #32
330a4     A7 FA 61 FC | 	wrlong	result1, fp
330a8     20 4E 85 F1 | 	sub	fp, #32
330ac     A7 FA 01 FB | 	rdlong	result1, fp
330b0     05 FA 45 F0 | 	shr	result1, #5
330b4     FD FA 41 F8 | 	getnib	result1, result1, #0
330b8     01 FA 85 F1 | 	sub	result1, #1
330bc     1C 4E 05 F1 | 	add	fp, #28
330c0     A7 FA 61 FC | 	wrlong	result1, fp
330c4     1C 4E 85 F1 | 	sub	fp, #28
330c8     A7 FA 01 FB | 	rdlong	result1, fp
330cc     1F FA 05 F5 | 	and	result1, #31
330d0     18 4E 05 F1 | 	add	fp, #24
330d4     A7 FA 61 FC | 	wrlong	result1, fp
330d8     14 4E 85 F1 | 	sub	fp, #20
330dc     A7 FA 01 FB | 	rdlong	result1, fp
330e0     0B FA 45 F0 | 	shr	result1, #11
330e4     1F FA 05 F5 | 	and	result1, #31
330e8     10 4E 05 F1 | 	add	fp, #16
330ec     A7 FA 61 FC | 	wrlong	result1, fp
330f0     10 4E 85 F1 | 	sub	fp, #16
330f4     A7 FA 01 FB | 	rdlong	result1, fp
330f8     05 FA 45 F0 | 	shr	result1, #5
330fc     3F FA 05 F5 | 	and	result1, #63
33100     0C 4E 05 F1 | 	add	fp, #12
33104     A7 FA 61 FC | 	wrlong	result1, fp
33108     0C 4E 85 F1 | 	sub	fp, #12
3310c     A7 14 02 FB | 	rdlong	arg02, fp
33110     1F 14 06 F5 | 	and	arg02, #31
33114     01 14 66 F0 | 	shl	arg02, #1
33118     08 4E 05 F1 | 	add	fp, #8
3311c     A7 14 62 FC | 	wrlong	arg02, fp
33120     A7 12 02 F6 | 	mov	arg01, fp
33124     10 4E 85 F1 | 	sub	fp, #16
33128     4C FA BF FD | 	call	#_fatfs_cc_mktime
3312c     0C 4E 05 F1 | 	add	fp, #12
33130     A7 FA 61 FC | 	wrlong	result1, fp
33134                 | ' 
33134                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
33134                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
33134                 | '     date.tm_mday = (dosdate & 0x1f);
33134                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
33134                 | '     date.tm_min = (dostime >> 5) & 0x3f;
33134                 | '     date.tm_sec = (dostime & 0x1f) << 1;
33134                 | ' 
33134                 | '     t = mktime(&date);
33134                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33134                 | '     return t;
33134     0C 4E 85 F1 | 	sub	fp, #12
33138     A7 F0 03 F6 | 	mov	ptra, fp
3313c     B2 00 A0 FD | 	call	#popregs_
33140                 | _fatfs_cc_unixtime_1021_ret
33140     2D 00 64 FD | 	ret
33144                 | 
33144                 | _fatfs_cc__set_dos_error_1023
33144     09 01 02 F6 | 	mov	_var01, arg01
33148                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33148                 | '     switch (derr) {
33148     14 00 26 F3 | 	fle	_var01, #20
3314c     30 00 62 FD | 	jmprel	_var01
33150                 | LR__5030
33150     50 00 90 FD | 	jmp	#LR__5031
33154     84 00 90 FD | 	jmp	#LR__5045
33158     80 00 90 FD | 	jmp	#LR__5046
3315c     7C 00 90 FD | 	jmp	#LR__5047
33160     48 00 90 FD | 	jmp	#LR__5032
33164     44 00 90 FD | 	jmp	#LR__5033
33168     40 00 90 FD | 	jmp	#LR__5034
3316c     44 00 90 FD | 	jmp	#LR__5035
33170     48 00 90 FD | 	jmp	#LR__5037
33174     54 00 90 FD | 	jmp	#LR__5040
33178     38 00 90 FD | 	jmp	#LR__5036
3317c     4C 00 90 FD | 	jmp	#LR__5041
33180     48 00 90 FD | 	jmp	#LR__5042
33184     44 00 90 FD | 	jmp	#LR__5043
33188     50 00 90 FD | 	jmp	#LR__5048
3318c     4C 00 90 FD | 	jmp	#LR__5048
33190     48 00 90 FD | 	jmp	#LR__5048
33194     2C 00 90 FD | 	jmp	#LR__5038
33198     38 00 90 FD | 	jmp	#LR__5044
3319c     2C 00 90 FD | 	jmp	#LR__5039
331a0     38 00 90 FD | 	jmp	#LR__5048
331a4                 | LR__5031
331a4     00 02 06 F6 | 	mov	_var02, #0
331a8                 | '         r = 0;
331a8                 | '         break;
331a8     34 00 90 FD | 	jmp	#LR__5049
331ac                 | LR__5032
331ac                 | LR__5033
331ac                 | LR__5034
331ac     04 02 06 F6 | 	mov	_var02, #4
331b0                 | '         r =  4 ;
331b0                 | '         break;
331b0     2C 00 90 FD | 	jmp	#LR__5049
331b4                 | LR__5035
331b4                 | LR__5036
331b4     06 02 06 F6 | 	mov	_var02, #6
331b8                 | '         r =  6 ;
331b8                 | '         break;
331b8     24 00 90 FD | 	jmp	#LR__5049
331bc                 | LR__5037
331bc     09 02 06 F6 | 	mov	_var02, #9
331c0                 | '         r =  9 ;
331c0                 | '         break;
331c0     1C 00 90 FD | 	jmp	#LR__5049
331c4                 | LR__5038
331c4     07 02 06 F6 | 	mov	_var02, #7
331c8                 | '         r =  7 ;
331c8                 | '         break;
331c8     14 00 90 FD | 	jmp	#LR__5049
331cc                 | LR__5039
331cc                 | LR__5040
331cc                 | LR__5041
331cc                 | LR__5042
331cc                 | LR__5043
331cc     0A 02 06 F6 | 	mov	_var02, #10
331d0                 | '         r =  10 ;
331d0                 | '         break;
331d0     0C 00 90 FD | 	jmp	#LR__5049
331d4                 | LR__5044
331d4     0B 02 06 F6 | 	mov	_var02, #11
331d8                 | '         r =  11 ;
331d8                 | '         break;
331d8     04 00 90 FD | 	jmp	#LR__5049
331dc                 | LR__5045
331dc                 | LR__5046
331dc                 | LR__5047
331dc                 | LR__5048
331dc     0C 02 06 F6 | 	mov	_var02, #12
331e0                 | '         r =  12 ;
331e0                 | '         break;
331e0                 | LR__5049
331e0                 | '     }
331e0                 | '     return _seterror(r);
331e0     00 02 4E F2 | 	cmps	_var02, #0 wz
331e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
331e8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
331ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
331f0     01 FA 65 56 |  if_ne	neg	result1, #1
331f4     00 FA 05 A6 |  if_e	mov	result1, #0
331f8                 | _fatfs_cc__set_dos_error_1023_ret
331f8     2D 00 64 FD | 	ret
331fc                 | 
331fc                 | _fatfs_cc_v_creat
331fc     04 4A 05 F6 | 	mov	COUNT_, #4
33200     A8 00 A0 FD | 	call	#pushregs_
33204     09 27 02 F6 | 	mov	local01, arg01
33208     0A 29 02 F6 | 	mov	local02, arg02
3320c     03 00 00 FF 
33210     3C 12 06 F6 | 	mov	arg01, ##1596
33214                 | '     return _gc_alloc(size);
33214     10 14 06 F6 | 	mov	arg02, #16
33218     28 5E BF FD | 	call	#__system___gc_doalloc
3321c     FD 2A 0A F6 | 	mov	local03, result1 wz
33220                 | '       return _seterror( 7 );
33220     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33224     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33228     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3322c     01 FA 65 A6 |  if_e	neg	result1, #1
33230     58 00 90 AD |  if_e	jmp	#LR__5051
33234     15 13 02 F6 | 	mov	arg01, local03
33238     00 14 06 F6 | 	mov	arg02, #0
3323c     03 00 00 FF 
33240     3C 16 06 F6 | 	mov	arg03, ##1596
33244     98 00 A0 FD | 	call	#\builtin_bytefill_
33248     02 00 00 FF 
3324c     14 2A 06 F1 | 	add	local03, ##1044
33250     15 13 02 F6 | 	mov	arg01, local03
33254     02 00 00 FF 
33258     14 2A 86 F1 | 	sub	local03, ##1044
3325c     14 15 02 F6 | 	mov	arg02, local02
33260     07 16 06 F6 | 	mov	arg03, #7
33264     B4 CC BF FD | 	call	#_fatfs_cc_f_open
33268     FD 2C 0A F6 | 	mov	local04, result1 wz
3326c     14 00 90 AD |  if_e	jmp	#LR__5050
33270     15 13 02 F6 | 	mov	arg01, local03
33274                 | '     return _gc_free(ptr);
33274     D8 5E BF FD | 	call	#__system___gc_free
33278                 | '     free(f);
33278                 | '     return _set_dos_error(r);
33278     16 13 02 F6 | 	mov	arg01, local04
3327c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33280     08 00 90 FD | 	jmp	#LR__5051
33284                 | LR__5050
33284     13 2B 62 FC | 	wrlong	local03, local01
33288                 | '   }
33288                 | '   fil->vfsdata = f;
33288                 | '   return 0;
33288     00 FA 05 F6 | 	mov	result1, #0
3328c                 | LR__5051
3328c     A7 F0 03 F6 | 	mov	ptra, fp
33290     B2 00 A0 FD | 	call	#popregs_
33294                 | _fatfs_cc_v_creat_ret
33294     2D 00 64 FD | 	ret
33298                 | 
33298                 | _fatfs_cc_v_close
33298     02 4A 05 F6 | 	mov	COUNT_, #2
3329c     A8 00 A0 FD | 	call	#pushregs_
332a0     09 27 02 FB | 	rdlong	local01, arg01
332a4     02 00 00 FF 
332a8     14 26 06 F1 | 	add	local01, ##1044
332ac     13 13 02 F6 | 	mov	arg01, local01
332b0     02 00 00 FF 
332b4     14 26 86 F1 | 	sub	local01, ##1044
332b8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
332bc     FD 28 02 F6 | 	mov	local02, result1
332c0     13 13 02 F6 | 	mov	arg01, local01
332c4                 | '     return _gc_free(ptr);
332c4     88 5E BF FD | 	call	#__system___gc_free
332c8                 | '     FAT_FIL *f = fil->vfsdata;
332c8                 | '     r=f_close(&f->fil);
332c8                 | '     free(f);
332c8                 | '     return _set_dos_error(r);
332c8     14 13 02 F6 | 	mov	arg01, local02
332cc     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1023
332d0     A7 F0 03 F6 | 	mov	ptra, fp
332d4     B2 00 A0 FD | 	call	#popregs_
332d8                 | _fatfs_cc_v_close_ret
332d8     2D 00 64 FD | 	ret
332dc                 | 
332dc                 | _fatfs_cc_v_opendir
332dc     04 4A 05 F6 | 	mov	COUNT_, #4
332e0     A8 00 A0 FD | 	call	#pushregs_
332e4     09 27 02 F6 | 	mov	local01, arg01
332e8     0A 29 02 F6 | 	mov	local02, arg02
332ec     30 12 06 F6 | 	mov	arg01, #48
332f0                 | '     return _gc_alloc(size);
332f0     10 14 06 F6 | 	mov	arg02, #16
332f4     4C 5D BF FD | 	call	#__system___gc_doalloc
332f8     FD 2A 0A F6 | 	mov	local03, result1 wz
332fc                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
332fc                 | '       return _seterror( 7 );
332fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33300     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33304     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33308     01 FA 65 A6 |  if_e	neg	result1, #1
3330c     34 00 90 AD |  if_e	jmp	#LR__5061
33310     14 15 02 F6 | 	mov	arg02, local02
33314     15 13 02 F6 | 	mov	arg01, local03
33318     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
3331c     FD 2C 0A F6 | 	mov	local04, result1 wz
33320     14 00 90 AD |  if_e	jmp	#LR__5060
33324     15 13 02 F6 | 	mov	arg01, local03
33328                 | '     return _gc_free(ptr);
33328     24 5E BF FD | 	call	#__system___gc_free
3332c                 | '         free(f);
3332c                 | '         return _set_dos_error(r);
3332c     16 13 02 F6 | 	mov	arg01, local04
33330     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33334     0C 00 90 FD | 	jmp	#LR__5061
33338                 | LR__5060
33338     04 26 06 F1 | 	add	local01, #4
3333c     13 2B 62 FC | 	wrlong	local03, local01
33340                 | '     }
33340                 | '     dir->vfsdata = f;
33340                 | '     return 0;
33340     00 FA 05 F6 | 	mov	result1, #0
33344                 | LR__5061
33344     A7 F0 03 F6 | 	mov	ptra, fp
33348     B2 00 A0 FD | 	call	#popregs_
3334c                 | _fatfs_cc_v_opendir_ret
3334c     2D 00 64 FD | 	ret
33350                 | 
33350                 | _fatfs_cc_v_closedir
33350     02 4A 05 F6 | 	mov	COUNT_, #2
33354     A8 00 A0 FD | 	call	#pushregs_
33358     04 12 06 F1 | 	add	arg01, #4
3335c     09 27 02 FB | 	rdlong	local01, arg01
33360     13 13 02 F6 | 	mov	arg01, local01
33364     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
33368     FD 28 02 F6 | 	mov	local02, result1
3336c     13 13 02 F6 | 	mov	arg01, local01
33370                 | '     return _gc_free(ptr);
33370     DC 5D BF FD | 	call	#__system___gc_free
33374     00 28 0E F2 | 	cmp	local02, #0 wz
33378     14 13 02 56 |  if_ne	mov	arg01, local02
3337c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1023
33380                 | '     return r;
33380     14 FB 01 F6 | 	mov	result1, local02
33384     A7 F0 03 F6 | 	mov	ptra, fp
33388     B2 00 A0 FD | 	call	#popregs_
3338c                 | _fatfs_cc_v_closedir_ret
3338c     2D 00 64 FD | 	ret
33390                 | 
33390                 | _fatfs_cc_v_readdir
33390     01 4A 05 F6 | 	mov	COUNT_, #1
33394     A8 00 A0 FD | 	call	#pushregs_
33398     2C F1 07 F1 | 	add	ptra, #300
3339c     04 4E 05 F1 | 	add	fp, #4
333a0     A7 12 62 FC | 	wrlong	arg01, fp
333a4     04 4E 05 F1 | 	add	fp, #4
333a8     A7 14 62 FC | 	wrlong	arg02, fp
333ac     04 4E 85 F1 | 	sub	fp, #4
333b0     A7 16 02 FB | 	rdlong	arg03, fp
333b4     04 16 06 F1 | 	add	arg03, #4
333b8     0B 13 02 FB | 	rdlong	arg01, arg03
333bc     08 4E 05 F1 | 	add	fp, #8
333c0     A7 14 02 F6 | 	mov	arg02, fp
333c4     0C 4E 85 F1 | 	sub	fp, #12
333c8     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
333cc     28 4F 05 F1 | 	add	fp, #296
333d0     A7 FA 61 FC | 	wrlong	result1, fp
333d4     28 4F 85 F1 | 	sub	fp, #296
333d8     00 FA 0D F2 | 	cmp	result1, #0 wz
333dc     14 00 90 AD |  if_e	jmp	#LR__5070
333e0                 | '         return _set_dos_error(r);
333e0     28 4F 05 F1 | 	add	fp, #296
333e4     A7 12 02 FB | 	rdlong	arg01, fp
333e8     28 4F 85 F1 | 	sub	fp, #296
333ec     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1023
333f0     C4 00 90 FD | 	jmp	#LR__5073
333f4                 | LR__5070
333f4     28 4E 05 F1 | 	add	fp, #40
333f8     A7 16 CA FA | 	rdbyte	arg03, fp wz
333fc     28 4E 85 F1 | 	sub	fp, #40
33400                 | '         return -1;
33400     01 FA 65 A6 |  if_e	neg	result1, #1
33404     B0 00 90 AD |  if_e	jmp	#LR__5073
33408     08 4E 05 F1 | 	add	fp, #8
3340c     A7 12 02 FB | 	rdlong	arg01, fp
33410     20 4E 05 F1 | 	add	fp, #32
33414     A7 14 02 F6 | 	mov	arg02, fp
33418     28 4E 85 F1 | 	sub	fp, #40
3341c     3F 16 06 F6 | 	mov	arg03, #63
33420     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
33424     08 4E 05 F1 | 	add	fp, #8
33428     A7 16 02 FB | 	rdlong	arg03, fp
3342c     3F 16 06 F1 | 	add	arg03, #63
33430     0B 01 48 FC | 	wrbyte	#0, arg03
33434     0C 4E 05 F1 | 	add	fp, #12
33438     A7 16 C2 FA | 	rdbyte	arg03, fp
3343c     14 4E 85 F1 | 	sub	fp, #20
33440     10 16 CE F7 | 	test	arg03, #16 wz
33444     18 00 90 AD |  if_e	jmp	#LR__5071
33448     08 4E 05 F1 | 	add	fp, #8
3344c     A7 16 02 FB | 	rdlong	arg03, fp
33450     08 4E 85 F1 | 	sub	fp, #8
33454     50 16 06 F1 | 	add	arg03, #80
33458     0B 03 48 FC | 	wrbyte	#1, arg03
3345c     14 00 90 FD | 	jmp	#LR__5072
33460                 | LR__5071
33460     08 4E 05 F1 | 	add	fp, #8
33464     A7 16 02 FB | 	rdlong	arg03, fp
33468     08 4E 85 F1 | 	sub	fp, #8
3346c     50 16 06 F1 | 	add	arg03, #80
33470     0B 01 48 FC | 	wrbyte	#0, arg03
33474                 | LR__5072
33474     08 4E 05 F1 | 	add	fp, #8
33478     A7 16 02 FB | 	rdlong	arg03, fp
3347c     04 4E 05 F1 | 	add	fp, #4
33480     A7 14 02 FB | 	rdlong	arg02, fp
33484     48 16 06 F1 | 	add	arg03, #72
33488     0B 15 62 FC | 	wrlong	arg02, arg03
3348c     04 4E 85 F1 | 	sub	fp, #4
33490     A7 26 02 FB | 	rdlong	local01, fp
33494     08 4E 05 F1 | 	add	fp, #8
33498     A7 12 E2 FA | 	rdword	arg01, fp
3349c     02 4E 05 F1 | 	add	fp, #2
334a0     A7 14 E2 FA | 	rdword	arg02, fp
334a4     12 4E 85 F1 | 	sub	fp, #18
334a8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1021
334ac     4C 26 06 F1 | 	add	local01, #76
334b0     13 FB 61 FC | 	wrlong	result1, local01
334b4                 | '         ent->d_type =  (0) ;
334b4                 | '     }
334b4                 | '     ent->d_size = finfo.fsize;
334b4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
334b4                 | '     return 0;
334b4     00 FA 05 F6 | 	mov	result1, #0
334b8                 | LR__5073
334b8     A7 F0 03 F6 | 	mov	ptra, fp
334bc     B2 00 A0 FD | 	call	#popregs_
334c0                 | _fatfs_cc_v_readdir_ret
334c0     2D 00 64 FD | 	ret
334c4                 | 
334c4                 | _fatfs_cc_v_stat
334c4     03 4A 05 F6 | 	mov	COUNT_, #3
334c8     A8 00 A0 FD | 	call	#pushregs_
334cc     30 F1 07 F1 | 	add	ptra, #304
334d0     04 4E 05 F1 | 	add	fp, #4
334d4     A7 12 62 FC | 	wrlong	arg01, fp
334d8     04 4E 05 F1 | 	add	fp, #4
334dc     A7 14 62 FC | 	wrlong	arg02, fp
334e0     08 4E 85 F1 | 	sub	fp, #8
334e4     0A 13 02 F6 | 	mov	arg01, arg02
334e8     00 14 06 F6 | 	mov	arg02, #0
334ec     30 16 06 F6 | 	mov	arg03, #48
334f0     98 00 A0 FD | 	call	#\builtin_bytefill_
334f4     04 4E 05 F1 | 	add	fp, #4
334f8     A7 FA 01 FB | 	rdlong	result1, fp
334fc     04 4E 85 F1 | 	sub	fp, #4
33500     FD FA C9 FA | 	rdbyte	result1, result1 wz
33504     2C 00 90 AD |  if_e	jmp	#LR__5080
33508     04 4E 05 F1 | 	add	fp, #4
3350c     A7 FA 01 FB | 	rdlong	result1, fp
33510     04 4E 85 F1 | 	sub	fp, #4
33514     FD FA C1 FA | 	rdbyte	result1, result1
33518     2E FA 0D F2 | 	cmp	result1, #46 wz
3351c     04 4E 05 A1 |  if_e	add	fp, #4
33520     A7 26 02 AB |  if_e	rdlong	local01, fp
33524     04 4E 85 A1 |  if_e	sub	fp, #4
33528     01 26 06 A1 |  if_e	add	local01, #1
3352c     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
33530     18 00 90 5D |  if_ne	jmp	#LR__5081
33534                 | LR__5080
33534     18 4E 05 F1 | 	add	fp, #24
33538     A7 20 48 FC | 	wrbyte	#16, fp
3353c     0C 4E 85 F1 | 	sub	fp, #12
33540     A7 00 68 FC | 	wrlong	#0, fp
33544     0C 4E 85 F1 | 	sub	fp, #12
33548     24 00 90 FD | 	jmp	#LR__5082
3354c                 | LR__5081
3354c     04 4E 05 F1 | 	add	fp, #4
33550     A7 12 02 FB | 	rdlong	arg01, fp
33554     0C 4E 05 F1 | 	add	fp, #12
33558     A7 14 02 F6 | 	mov	arg02, fp
3355c     10 4E 85 F1 | 	sub	fp, #16
33560     AC EB BF FD | 	call	#_fatfs_cc_f_stat
33564     0C 4E 05 F1 | 	add	fp, #12
33568     A7 FA 61 FC | 	wrlong	result1, fp
3356c     0C 4E 85 F1 | 	sub	fp, #12
33570                 | LR__5082
33570     0C 4E 05 F1 | 	add	fp, #12
33574     A7 28 0A FB | 	rdlong	local02, fp wz
33578     0C 4E 85 F1 | 	sub	fp, #12
3357c     14 00 90 AD |  if_e	jmp	#LR__5083
33580                 | '         return _set_dos_error(r);
33580     0C 4E 05 F1 | 	add	fp, #12
33584     A7 12 02 FB | 	rdlong	arg01, fp
33588     0C 4E 85 F1 | 	sub	fp, #12
3358c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33590     14 01 90 FD | 	jmp	#LR__5084
33594                 | LR__5083
33594     2C 4F 05 F1 | 	add	fp, #300
33598     A7 48 6A FC | 	wrlong	#292, fp
3359c     14 4F 85 F1 | 	sub	fp, #276
335a0     A7 2A C2 FA | 	rdbyte	local03, fp
335a4     18 4E 85 F1 | 	sub	fp, #24
335a8     01 2A CE F7 | 	test	local03, #1 wz
335ac     2C 4F 05 A1 |  if_e	add	fp, #300
335b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
335b4     92 2A 46 A5 |  if_e	or	local03, #146
335b8     A7 2A 62 AC |  if_e	wrlong	local03, fp
335bc     2C 4F 85 A1 |  if_e	sub	fp, #300
335c0     18 4E 05 F1 | 	add	fp, #24
335c4     A7 2A C2 FA | 	rdbyte	local03, fp
335c8     18 4E 85 F1 | 	sub	fp, #24
335cc     10 2A CE F7 | 	test	local03, #16 wz
335d0     2C 4F 05 51 |  if_ne	add	fp, #300
335d4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
335d8     08 00 00 5F 
335dc     49 2A 46 55 |  if_ne	or	local03, ##4169
335e0     A7 2A 62 5C |  if_ne	wrlong	local03, fp
335e4     2C 4F 85 51 |  if_ne	sub	fp, #300
335e8     08 4E 05 F1 | 	add	fp, #8
335ec     A7 2A 02 FB | 	rdlong	local03, fp
335f0     24 4F 05 F1 | 	add	fp, #292
335f4     A7 28 02 FB | 	rdlong	local02, fp
335f8     08 2A 06 F1 | 	add	local03, #8
335fc     15 29 62 FC | 	wrlong	local02, local03
33600     24 4F 85 F1 | 	sub	fp, #292
33604     A7 2A 02 FB | 	rdlong	local03, fp
33608     0C 2A 06 F1 | 	add	local03, #12
3360c     15 03 68 FC | 	wrlong	#1, local03
33610     A7 2A 02 FB | 	rdlong	local03, fp
33614     08 4E 05 F1 | 	add	fp, #8
33618     A7 28 02 FB | 	rdlong	local02, fp
3361c     18 2A 06 F1 | 	add	local03, #24
33620     15 29 62 FC | 	wrlong	local02, local03
33624     08 4E 85 F1 | 	sub	fp, #8
33628     A7 2A 02 FB | 	rdlong	local03, fp
3362c     1C 2A 06 F1 | 	add	local03, #28
33630     01 00 80 FF 
33634     15 01 68 FC | 	wrlong	##512, local03
33638     A7 28 02 FB | 	rdlong	local02, fp
3363c     14 2B 02 F6 | 	mov	local03, local02
33640     18 28 06 F1 | 	add	local02, #24
33644     14 29 02 FB | 	rdlong	local02, local02
33648     FF 29 06 F1 | 	add	local02, #511
3364c     14 29 52 F6 | 	abs	local02, local02 wc
33650     09 28 46 F0 | 	shr	local02, #9
33654     14 29 82 F6 | 	negc	local02, local02
33658     20 2A 06 F1 | 	add	local03, #32
3365c     15 29 62 FC | 	wrlong	local02, local03
33660     A7 28 02 FB | 	rdlong	local02, fp
33664     14 2B 02 F6 | 	mov	local03, local02
33668     14 27 02 F6 | 	mov	local01, local02
3366c     0C 4E 05 F1 | 	add	fp, #12
33670     A7 12 E2 FA | 	rdword	arg01, fp
33674     02 4E 05 F1 | 	add	fp, #2
33678     A7 14 E2 FA | 	rdword	arg02, fp
3367c     16 4E 85 F1 | 	sub	fp, #22
33680     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1021
33684     2C 26 06 F1 | 	add	local01, #44
33688     13 FB 61 FC | 	wrlong	result1, local01
3368c     28 28 06 F1 | 	add	local02, #40
33690     14 FB 61 FC | 	wrlong	result1, local02
33694     24 2A 06 F1 | 	add	local03, #36
33698     15 FB 61 FC | 	wrlong	result1, local03
3369c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
3369c                 | '     }
3369c                 | '     buf->st_mode = mode;
3369c                 | '     buf->st_nlink = 1;
3369c                 | '     buf->st_size = finfo.fsize;
3369c                 | '     buf->st_blksize = 512;
3369c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
3369c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
3369c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3369c                 | '     return r;
3369c     0C 4E 05 F1 | 	add	fp, #12
336a0     A7 FA 01 FB | 	rdlong	result1, fp
336a4     0C 4E 85 F1 | 	sub	fp, #12
336a8                 | LR__5084
336a8     A7 F0 03 F6 | 	mov	ptra, fp
336ac     B2 00 A0 FD | 	call	#popregs_
336b0                 | _fatfs_cc_v_stat_ret
336b0     2D 00 64 FD | 	ret
336b4                 | 
336b4                 | _fatfs_cc_v_read
336b4     00 4A 05 F6 | 	mov	COUNT_, #0
336b8     A8 00 A0 FD | 	call	#pushregs_
336bc     1C F0 07 F1 | 	add	ptra, #28
336c0     04 4E 05 F1 | 	add	fp, #4
336c4     A7 12 62 FC | 	wrlong	arg01, fp
336c8     04 4E 05 F1 | 	add	fp, #4
336cc     A7 14 62 FC | 	wrlong	arg02, fp
336d0     04 4E 05 F1 | 	add	fp, #4
336d4     A7 16 62 FC | 	wrlong	arg03, fp
336d8     08 4E 85 F1 | 	sub	fp, #8
336dc     A7 12 02 FB | 	rdlong	arg01, fp
336e0     09 13 0A FB | 	rdlong	arg01, arg01 wz
336e4     0C 4E 05 F1 | 	add	fp, #12
336e8     A7 12 62 FC | 	wrlong	arg01, fp
336ec     10 4E 85 F1 | 	sub	fp, #16
336f0                 | '         return _seterror( 5 );
336f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
336f4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
336f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
336fc     01 FA 65 A6 |  if_e	neg	result1, #1
33700     B8 00 90 AD |  if_e	jmp	#LR__5092
33704     10 4E 05 F1 | 	add	fp, #16
33708     A7 12 02 FB | 	rdlong	arg01, fp
3370c     02 00 00 FF 
33710     14 12 06 F1 | 	add	arg01, ##1044
33714     08 4E 85 F1 | 	sub	fp, #8
33718     A7 14 02 FB | 	rdlong	arg02, fp
3371c     04 4E 05 F1 | 	add	fp, #4
33720     A7 16 02 FB | 	rdlong	arg03, fp
33724     0C 4E 05 F1 | 	add	fp, #12
33728     A7 18 02 F6 | 	mov	arg04, fp
3372c     18 4E 85 F1 | 	sub	fp, #24
33730     C4 CE BF FD | 	call	#_fatfs_cc_f_read
33734     14 4E 05 F1 | 	add	fp, #20
33738     A7 FA 61 FC | 	wrlong	result1, fp
3373c     14 4E 85 F1 | 	sub	fp, #20
33740     00 FA 0D F2 | 	cmp	result1, #0 wz
33744     34 00 90 AD |  if_e	jmp	#LR__5090
33748     04 4E 05 F1 | 	add	fp, #4
3374c     A7 18 02 FB | 	rdlong	arg04, fp
33750     0C 17 02 F6 | 	mov	arg03, arg04
33754     08 18 06 F1 | 	add	arg04, #8
33758     0C 19 02 FB | 	rdlong	arg04, arg04
3375c     20 18 46 F5 | 	or	arg04, #32
33760     08 16 06 F1 | 	add	arg03, #8
33764     0B 19 62 FC | 	wrlong	arg04, arg03
33768                 | '         fil->state |=  (0x20) ;
33768                 | '         return _set_dos_error(r);
33768     10 4E 05 F1 | 	add	fp, #16
3376c     A7 12 02 FB | 	rdlong	arg01, fp
33770     14 4E 85 F1 | 	sub	fp, #20
33774     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33778     40 00 90 FD | 	jmp	#LR__5092
3377c                 | LR__5090
3377c     18 4E 05 F1 | 	add	fp, #24
33780     A7 FA 09 FB | 	rdlong	result1, fp wz
33784     18 4E 85 F1 | 	sub	fp, #24
33788     24 00 90 5D |  if_ne	jmp	#LR__5091
3378c     04 4E 05 F1 | 	add	fp, #4
33790     A7 FA 01 FB | 	rdlong	result1, fp
33794     FD 18 02 F6 | 	mov	arg04, result1
33798     04 4E 85 F1 | 	sub	fp, #4
3379c     08 FA 05 F1 | 	add	result1, #8
337a0     FD FA 01 FB | 	rdlong	result1, result1
337a4     10 FA 45 F5 | 	or	result1, #16
337a8     08 18 06 F1 | 	add	arg04, #8
337ac     0C FB 61 FC | 	wrlong	result1, arg04
337b0                 | LR__5091
337b0                 | '         fil->state |=  (0x10) ;
337b0                 | '     }
337b0                 | '     return x;
337b0     18 4E 05 F1 | 	add	fp, #24
337b4     A7 FA 01 FB | 	rdlong	result1, fp
337b8     18 4E 85 F1 | 	sub	fp, #24
337bc                 | LR__5092
337bc     A7 F0 03 F6 | 	mov	ptra, fp
337c0     B2 00 A0 FD | 	call	#popregs_
337c4                 | _fatfs_cc_v_read_ret
337c4     2D 00 64 FD | 	ret
337c8                 | 
337c8                 | _fatfs_cc_v_write
337c8     00 4A 05 F6 | 	mov	COUNT_, #0
337cc     A8 00 A0 FD | 	call	#pushregs_
337d0     1C F0 07 F1 | 	add	ptra, #28
337d4     04 4E 05 F1 | 	add	fp, #4
337d8     A7 12 62 FC | 	wrlong	arg01, fp
337dc     04 4E 05 F1 | 	add	fp, #4
337e0     A7 14 62 FC | 	wrlong	arg02, fp
337e4     04 4E 05 F1 | 	add	fp, #4
337e8     A7 16 62 FC | 	wrlong	arg03, fp
337ec     08 4E 85 F1 | 	sub	fp, #8
337f0     A7 12 02 FB | 	rdlong	arg01, fp
337f4     09 13 0A FB | 	rdlong	arg01, arg01 wz
337f8     0C 4E 05 F1 | 	add	fp, #12
337fc     A7 12 62 FC | 	wrlong	arg01, fp
33800     10 4E 85 F1 | 	sub	fp, #16
33804                 | '         return _seterror( 5 );
33804     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33808     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3380c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33810     01 FA 65 A6 |  if_e	neg	result1, #1
33814     84 00 90 AD |  if_e	jmp	#LR__5101
33818     10 4E 05 F1 | 	add	fp, #16
3381c     A7 12 02 FB | 	rdlong	arg01, fp
33820     02 00 00 FF 
33824     14 12 06 F1 | 	add	arg01, ##1044
33828     08 4E 85 F1 | 	sub	fp, #8
3382c     A7 14 02 FB | 	rdlong	arg02, fp
33830     04 4E 05 F1 | 	add	fp, #4
33834     A7 16 02 FB | 	rdlong	arg03, fp
33838     0C 4E 05 F1 | 	add	fp, #12
3383c     A7 18 02 F6 | 	mov	arg04, fp
33840     18 4E 85 F1 | 	sub	fp, #24
33844     4C D4 BF FD | 	call	#_fatfs_cc_f_write
33848     14 4E 05 F1 | 	add	fp, #20
3384c     A7 FA 61 FC | 	wrlong	result1, fp
33850     14 4E 85 F1 | 	sub	fp, #20
33854     00 FA 0D F2 | 	cmp	result1, #0 wz
33858     34 00 90 AD |  if_e	jmp	#LR__5100
3385c     04 4E 05 F1 | 	add	fp, #4
33860     A7 18 02 FB | 	rdlong	arg04, fp
33864     0C 17 02 F6 | 	mov	arg03, arg04
33868     08 18 06 F1 | 	add	arg04, #8
3386c     0C 19 02 FB | 	rdlong	arg04, arg04
33870     20 18 46 F5 | 	or	arg04, #32
33874     08 16 06 F1 | 	add	arg03, #8
33878     0B 19 62 FC | 	wrlong	arg04, arg03
3387c                 | '         fil->state |=  (0x20) ;
3387c                 | '         return _set_dos_error(r);
3387c     10 4E 05 F1 | 	add	fp, #16
33880     A7 12 02 FB | 	rdlong	arg01, fp
33884     14 4E 85 F1 | 	sub	fp, #20
33888     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
3388c     0C 00 90 FD | 	jmp	#LR__5101
33890                 | LR__5100
33890                 | '     }
33890                 | '     return x;
33890     18 4E 05 F1 | 	add	fp, #24
33894     A7 FA 01 FB | 	rdlong	result1, fp
33898     18 4E 85 F1 | 	sub	fp, #24
3389c                 | LR__5101
3389c     A7 F0 03 F6 | 	mov	ptra, fp
338a0     B2 00 A0 FD | 	call	#popregs_
338a4                 | _fatfs_cc_v_write_ret
338a4     2D 00 64 FD | 	ret
338a8                 | 
338a8                 | _fatfs_cc_v_lseek
338a8     04 4A 05 F6 | 	mov	COUNT_, #4
338ac     A8 00 A0 FD | 	call	#pushregs_
338b0     0A 27 02 F6 | 	mov	local01, arg02
338b4     0B 29 02 F6 | 	mov	local02, arg03
338b8     09 2B 02 FB | 	rdlong	local03, arg01
338bc     02 00 00 FF 
338c0     14 2A 0E F1 | 	add	local03, ##1044 wz
338c4                 | '         return _seterror( 5 );
338c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
338c8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
338cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
338d0     01 FA 65 A6 |  if_e	neg	result1, #1
338d4     4C 00 90 AD |  if_e	jmp	#LR__5112
338d8     00 28 0E F2 | 	cmp	local02, #0 wz
338dc     24 00 90 AD |  if_e	jmp	#LR__5110
338e0     01 28 0E F2 | 	cmp	local02, #1 wz
338e4     14 2A 06 A1 |  if_e	add	local03, #20
338e8     15 2D 02 AB |  if_e	rdlong	local04, local03
338ec     14 2A 86 A1 |  if_e	sub	local03, #20
338f0     16 27 02 A1 |  if_e	add	local01, local04
338f4     0C 2A 06 51 |  if_ne	add	local03, #12
338f8     15 2D 02 5B |  if_ne	rdlong	local04, local03
338fc     0C 2A 86 51 |  if_ne	sub	local03, #12
33900     16 27 02 51 |  if_ne	add	local01, local04
33904                 | LR__5110
33904     13 15 02 F6 | 	mov	arg02, local01
33908     15 13 02 F6 | 	mov	arg01, local03
3390c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
33910     FD 12 0A F6 | 	mov	arg01, result1 wz
33914     08 00 90 AD |  if_e	jmp	#LR__5111
33918                 | '         return _set_dos_error(result);
33918     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
3391c     04 00 90 FD | 	jmp	#LR__5112
33920                 | LR__5111
33920                 | '     }
33920                 | '     return offset;
33920     13 FB 01 F6 | 	mov	result1, local01
33924                 | LR__5112
33924     A7 F0 03 F6 | 	mov	ptra, fp
33928     B2 00 A0 FD | 	call	#popregs_
3392c                 | _fatfs_cc_v_lseek_ret
3392c     2D 00 64 FD | 	ret
33930                 | 
33930                 | _fatfs_cc_v_ioctl
33930                 | ' {
33930                 | '     return _seterror( 10 );
33930     20 E6 05 F1 | 	add	ptr___system__dat__, #32
33934     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
33938     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
3393c     01 FA 65 F6 | 	neg	result1, #1
33940                 | _fatfs_cc_v_ioctl_ret
33940     2D 00 64 FD | 	ret
33944                 | 
33944                 | _fatfs_cc_v_mkdir
33944     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
33948     FD 12 02 F6 | 	mov	arg01, result1
3394c                 | ' 
3394c                 | '     r = f_mkdir(name);
3394c                 | '     return _set_dos_error(r);
3394c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33950                 | _fatfs_cc_v_mkdir_ret
33950     2D 00 64 FD | 	ret
33954                 | 
33954                 | _fatfs_cc_v_remove
33954     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
33958     FD 12 02 F6 | 	mov	arg01, result1
3395c                 | ' 
3395c                 | '     r = f_unlink(name);
3395c                 | '     return _set_dos_error(r);
3395c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33960                 | _fatfs_cc_v_remove_ret
33960     2D 00 64 FD | 	ret
33964                 | 
33964                 | _fatfs_cc_v_rmdir
33964     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
33968     FD 12 02 F6 | 	mov	arg01, result1
3396c                 | ' 
3396c                 | '     r = f_unlink(name);
3396c                 | '     return _set_dos_error(r);
3396c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33970                 | _fatfs_cc_v_rmdir_ret
33970     2D 00 64 FD | 	ret
33974                 | 
33974                 | _fatfs_cc_v_rename
33974     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
33978     FD 12 02 F6 | 	mov	arg01, result1
3397c                 | '     return _set_dos_error(r);
3397c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33980                 | _fatfs_cc_v_rename_ret
33980     2D 00 64 FD | 	ret
33984                 | 
33984                 | _fatfs_cc_v_open
33984     07 4A 05 F6 | 	mov	COUNT_, #7
33988     A8 00 A0 FD | 	call	#pushregs_
3398c     09 27 02 F6 | 	mov	local01, arg01
33990     0A 29 02 F6 | 	mov	local02, arg02
33994     0B 2B 02 F6 | 	mov	local03, arg03
33998     03 00 00 FF 
3399c     3C 12 06 F6 | 	mov	arg01, ##1596
339a0                 | '     return _gc_alloc(size);
339a0     10 14 06 F6 | 	mov	arg02, #16
339a4     9C 56 BF FD | 	call	#__system___gc_doalloc
339a8     FD 2C 0A F6 | 	mov	local04, result1 wz
339ac                 | '       return _seterror( 7 );
339ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
339b0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
339b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
339b8     01 FA 65 A6 |  if_e	neg	result1, #1
339bc     98 00 90 AD |  if_e	jmp	#LR__5126
339c0     16 13 02 F6 | 	mov	arg01, local04
339c4     00 14 06 F6 | 	mov	arg02, #0
339c8     03 00 00 FF 
339cc     3C 16 06 F6 | 	mov	arg03, ##1596
339d0     98 00 A0 FD | 	call	#\builtin_bytefill_
339d4                 | '   switch (flags & 3) {
339d4     15 2F 02 F6 | 	mov	local05, local03
339d8     03 2E 0E F5 | 	and	local05, #3 wz
339dc     0C 00 90 AD |  if_e	jmp	#LR__5120
339e0     01 2E 0E F2 | 	cmp	local05, #1 wz
339e4     0C 00 90 AD |  if_e	jmp	#LR__5121
339e8     10 00 90 FD | 	jmp	#LR__5122
339ec                 | LR__5120
339ec     01 30 06 F6 | 	mov	local06, #1
339f0                 | '       fs_flags =  0x01 ;
339f0                 | '       break;
339f0     0C 00 90 FD | 	jmp	#LR__5123
339f4                 | LR__5121
339f4     02 30 06 F6 | 	mov	local06, #2
339f8                 | '       fs_flags =  0x02 ;
339f8                 | '       break;
339f8     04 00 90 FD | 	jmp	#LR__5123
339fc                 | LR__5122
339fc     03 30 06 F6 | 	mov	local06, #3
33a00                 | '       fs_flags =  0x01  |  0x02 ;
33a00                 | '       break;
33a00                 | LR__5123
33a00     08 2A CE F7 | 	test	local03, #8 wz
33a04     18 30 46 55 |  if_ne	or	local06, #24
33a08     08 00 90 5D |  if_ne	jmp	#LR__5124
33a0c     20 2A CE F7 | 	test	local03, #32 wz
33a10     30 30 46 55 |  if_ne	or	local06, #48
33a14                 | LR__5124
33a14     02 00 00 FF 
33a18     14 2C 06 F1 | 	add	local04, ##1044
33a1c     16 13 02 F6 | 	mov	arg01, local04
33a20     02 00 00 FF 
33a24     14 2C 86 F1 | 	sub	local04, ##1044
33a28     14 15 02 F6 | 	mov	arg02, local02
33a2c     18 17 02 F6 | 	mov	arg03, local06
33a30     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
33a34     FD 32 0A F6 | 	mov	local07, result1 wz
33a38     14 00 90 AD |  if_e	jmp	#LR__5125
33a3c     16 13 02 F6 | 	mov	arg01, local04
33a40                 | '     return _gc_free(ptr);
33a40     0C 57 BF FD | 	call	#__system___gc_free
33a44                 | '     free(f);
33a44                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33a44                 | '     return _set_dos_error(r);
33a44     19 13 02 F6 | 	mov	arg01, local07
33a48     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33a4c     08 00 90 FD | 	jmp	#LR__5126
33a50                 | LR__5125
33a50     13 2D 62 FC | 	wrlong	local04, local01
33a54                 | '   }
33a54                 | '   fil->vfsdata = f;
33a54                 | '   return 0;
33a54     00 FA 05 F6 | 	mov	result1, #0
33a58                 | LR__5126
33a58     A7 F0 03 F6 | 	mov	ptra, fp
33a5c     B2 00 A0 FD | 	call	#popregs_
33a60                 | _fatfs_cc_v_open_ret
33a60     2D 00 64 FD | 	ret
33a64                 | 
33a64                 | _fatfs_cc_v_flush
33a64     09 13 02 FB | 	rdlong	arg01, arg01
33a68     02 00 00 FF 
33a6c     14 12 0E F1 | 	add	arg01, ##1044 wz
33a70                 | '         return _seterror( 5 );
33a70     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33a74     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
33a78     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33a7c     01 FA 65 A6 |  if_e	neg	result1, #1
33a80     0C 00 90 AD |  if_e	jmp	#LR__5130
33a84     00 DA BF FD | 	call	#_fatfs_cc_f_sync
33a88     FD 12 02 F6 | 	mov	arg01, result1
33a8c                 | '     }
33a8c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33a8c                 | '     result = f_sync(f);
33a8c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33a8c                 | '     return _set_dos_error(result);
33a8c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1023
33a90                 | LR__5130
33a90                 | _fatfs_cc_v_flush_ret
33a90     2D 00 64 FD | 	ret
33a94                 | 
33a94                 | _fatfs_cc_v_init
33a94                 | ' {
33a94                 | '     return 0;
33a94     00 FA 05 F6 | 	mov	result1, #0
33a98                 | _fatfs_cc_v_init_ret
33a98     2D 00 64 FD | 	ret
33a9c                 | 
33a9c                 | _fatfs_cc_v_deinit
33a9c     A5 01 00 FF 
33aa0     10 14 06 F6 | 	mov	arg02, ##@LR__5326
33aa4     00 12 06 F6 | 	mov	arg01, #0
33aa8     00 16 06 F6 | 	mov	arg03, #0
33aac     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
33ab0     01 00 00 FF 
33ab4     08 E4 05 F1 | 	add	objptr, ##520
33ab8     F2 12 02 FB | 	rdlong	arg01, objptr
33abc     04 E4 05 F1 | 	add	objptr, #4
33ac0     F2 14 02 FB | 	rdlong	arg02, objptr
33ac4     01 00 00 FF 
33ac8     0C E4 85 F1 | 	sub	objptr, ##524
33acc     F0 3D BF FD | 	call	#__system___freepins
33ad0                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33ad0                 | '     _freepins(f_pinmask);
33ad0                 | '     return 0;
33ad0     00 FA 05 F6 | 	mov	result1, #0
33ad4                 | _fatfs_cc_v_deinit_ret
33ad4     2D 00 64 FD | 	ret
33ad8                 | 
33ad8                 | _fatfs_cc_get_vfs
33ad8     01 4A 05 F6 | 	mov	COUNT_, #1
33adc     A8 00 A0 FD | 	call	#pushregs_
33ae0     09 27 02 F6 | 	mov	local01, arg01
33ae4     50 12 06 F6 | 	mov	arg01, #80
33ae8     28 55 BF FD | 	call	#__system___gc_alloc_managed
33aec     FD 12 02 F6 | 	mov	arg01, result1
33af0     F2 FA 01 F6 | 	mov	result1, objptr
33af4     00 30 05 FF 
33af8     00 FA 45 F5 | 	or	result1, ##174063616
33afc     09 FB 61 FC | 	wrlong	result1, arg01
33b00     F2 FA 01 F6 | 	mov	result1, objptr
33b04     00 38 05 FF 
33b08     00 FA 45 F5 | 	or	result1, ##175112192
33b0c     04 12 06 F1 | 	add	arg01, #4
33b10     09 FB 61 FC | 	wrlong	result1, arg01
33b14     F2 FA 01 F6 | 	mov	result1, objptr
33b18     00 40 05 FF 
33b1c     00 FA 45 F5 | 	or	result1, ##176160768
33b20     04 12 06 F1 | 	add	arg01, #4
33b24     09 FB 61 FC | 	wrlong	result1, arg01
33b28     F2 FA 01 F6 | 	mov	result1, objptr
33b2c     00 48 05 FF 
33b30     00 FA 45 F5 | 	or	result1, ##177209344
33b34     04 12 06 F1 | 	add	arg01, #4
33b38     09 FB 61 FC | 	wrlong	result1, arg01
33b3c     F2 FA 01 F6 | 	mov	result1, objptr
33b40     00 50 05 FF 
33b44     00 FA 45 F5 | 	or	result1, ##178257920
33b48     04 12 06 F1 | 	add	arg01, #4
33b4c     09 FB 61 FC | 	wrlong	result1, arg01
33b50     04 12 06 F1 | 	add	arg01, #4
33b54     09 01 68 FC | 	wrlong	#0, arg01
33b58     04 12 06 F1 | 	add	arg01, #4
33b5c     09 27 62 FC | 	wrlong	local01, arg01
33b60     04 12 06 F1 | 	add	arg01, #4
33b64     09 01 68 FC | 	wrlong	#0, arg01
33b68     F2 FA 01 F6 | 	mov	result1, objptr
33b6c     00 58 05 FF 
33b70     00 FA 45 F5 | 	or	result1, ##179306496
33b74     04 12 06 F1 | 	add	arg01, #4
33b78     09 FB 61 FC | 	wrlong	result1, arg01
33b7c     F2 FA 01 F6 | 	mov	result1, objptr
33b80     00 60 05 FF 
33b84     00 FA 45 F5 | 	or	result1, ##180355072
33b88     04 12 06 F1 | 	add	arg01, #4
33b8c     09 FB 61 FC | 	wrlong	result1, arg01
33b90     F2 FA 01 F6 | 	mov	result1, objptr
33b94     00 68 05 FF 
33b98     00 FA 45 F5 | 	or	result1, ##181403648
33b9c     04 12 06 F1 | 	add	arg01, #4
33ba0     09 FB 61 FC | 	wrlong	result1, arg01
33ba4     F2 FA 01 F6 | 	mov	result1, objptr
33ba8     00 70 05 FF 
33bac     00 FA 45 F5 | 	or	result1, ##182452224
33bb0     04 12 06 F1 | 	add	arg01, #4
33bb4     09 FB 61 FC | 	wrlong	result1, arg01
33bb8     F2 FA 01 F6 | 	mov	result1, objptr
33bbc     00 78 05 FF 
33bc0     00 FA 45 F5 | 	or	result1, ##183500800
33bc4     04 12 06 F1 | 	add	arg01, #4
33bc8     09 FB 61 FC | 	wrlong	result1, arg01
33bcc     F2 FA 01 F6 | 	mov	result1, objptr
33bd0     00 80 05 FF 
33bd4     00 FA 45 F5 | 	or	result1, ##184549376
33bd8     04 12 06 F1 | 	add	arg01, #4
33bdc     09 FB 61 FC | 	wrlong	result1, arg01
33be0     F2 FA 01 F6 | 	mov	result1, objptr
33be4     00 88 05 FF 
33be8     00 FA 45 F5 | 	or	result1, ##185597952
33bec     04 12 06 F1 | 	add	arg01, #4
33bf0     09 FB 61 FC | 	wrlong	result1, arg01
33bf4     F2 FA 01 F6 | 	mov	result1, objptr
33bf8     00 90 05 FF 
33bfc     00 FA 45 F5 | 	or	result1, ##186646528
33c00     04 12 06 F1 | 	add	arg01, #4
33c04     09 FB 61 FC | 	wrlong	result1, arg01
33c08     F2 FA 01 F6 | 	mov	result1, objptr
33c0c     00 98 05 FF 
33c10     00 FA 45 F5 | 	or	result1, ##187695104
33c14     04 12 06 F1 | 	add	arg01, #4
33c18     09 FB 61 FC | 	wrlong	result1, arg01
33c1c     F2 FA 01 F6 | 	mov	result1, objptr
33c20     00 A0 05 FF 
33c24     00 FA 45 F5 | 	or	result1, ##188743680
33c28     04 12 06 F1 | 	add	arg01, #4
33c2c     09 FB 61 FC | 	wrlong	result1, arg01
33c30     F2 FA 01 F6 | 	mov	result1, objptr
33c34     00 A8 05 FF 
33c38     00 FA 45 F5 | 	or	result1, ##189792256
33c3c     04 12 06 F1 | 	add	arg01, #4
33c40     09 FB 61 FC | 	wrlong	result1, arg01
33c44     F2 FA 01 F6 | 	mov	result1, objptr
33c48     00 B0 05 FF 
33c4c     00 FA 45 F5 | 	or	result1, ##190840832
33c50     04 12 06 F1 | 	add	arg01, #4
33c54     09 FB 61 FC | 	wrlong	result1, arg01
33c58     4C 12 86 F1 | 	sub	arg01, #76
33c5c                 | ' 
33c5c                 | '     v->close = &v_close;
33c5c                 | '     v->read = &v_read;
33c5c                 | '     v->write = &v_write;
33c5c                 | '     v->lseek = &v_lseek;
33c5c                 | '     v->ioctl = &v_ioctl;
33c5c                 | '     v->flush = 0;
33c5c                 | '     v->vfs_data = ptr;
33c5c                 | '     v->reserved = 0;
33c5c                 | ' 
33c5c                 | '     v->open = &v_open;
33c5c                 | '     v->creat = &v_creat;
33c5c                 | '     v->opendir = &v_opendir;
33c5c                 | '     v->closedir = &v_closedir;
33c5c                 | '     v->readdir = &v_readdir;
33c5c                 | '     v->stat = &v_stat;
33c5c                 | ' 
33c5c                 | '     v->mkdir = &v_mkdir;
33c5c                 | '     v->rmdir = &v_rmdir;
33c5c                 | ' 
33c5c                 | '     v->remove = &v_remove;
33c5c                 | '     v->rename = &v_rename;
33c5c                 | ' 
33c5c                 | '     v->init = &v_init;
33c5c                 | '     v->deinit = &v_deinit;
33c5c                 | ' 
33c5c                 | '     return v;
33c5c     09 FB 01 F6 | 	mov	result1, arg01
33c60     A7 F0 03 F6 | 	mov	ptra, fp
33c64     B2 00 A0 FD | 	call	#popregs_
33c68                 | _fatfs_cc_get_vfs_ret
33c68     2D 00 64 FD | 	ret
33c6c                 | 
33c6c                 | _fatfs_cc_xmit_mmc_1174
33c6c     01 00 00 FF 
33c70     10 E4 05 F1 | 	add	objptr, ##528
33c74     F2 00 02 FB | 	rdlong	_var01, objptr
33c78     08 E4 05 F1 | 	add	objptr, #8
33c7c     F2 02 02 FB | 	rdlong	_var02, objptr
33c80     01 00 00 FF 
33c84     18 E4 85 F1 | 	sub	objptr, ##536
33c88     40 02 62 FD | 	dirl	_var02
33c8c     28 02 64 FD | 	setq	#1
33c90     09 05 02 FB | 	rdlong	_var03, arg01
33c94     69 04 62 FD | 	rev	_var03
33c98     1B 04 FE F9 | 	movbyts	_var03, #27
33c9c     01 05 22 FC | 	wypin	_var03, _var02
33ca0     0A 05 02 F6 | 	mov	_var03, arg02
33ca4     02 14 4E F0 | 	shr	arg02, #2 wz
33ca8     03 04 66 F0 | 	shl	_var03, #3
33cac     00 05 22 FC | 	wypin	_var03, _var01
33cb0     41 02 62 FD | 	dirh	_var02
33cb4     08 12 06 F1 | 	add	arg01, #8
33cb8     69 06 62 FD | 	rev	_var04
33cbc     1B 06 FE F9 | 	movbyts	_var04, #27
33cc0                 | LR__5140
33cc0     01 07 22 5C |  if_ne	wypin	_var04, _var02
33cc4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
33cc8     04 12 06 51 |  if_ne	add	arg01, #4
33ccc     69 06 62 5D |  if_ne	rev	_var04
33cd0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
33cd4                 | LR__5141
33cd4     40 02 72 5D |  if_ne	testp	_var02 wc
33cd8     F8 FF 9F 1D |  if_a	jmp	#LR__5141
33cdc     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5140
33ce0                 | LR__5142
33ce0     40 00 72 FD | 	testp	_var01 wc
33ce4     F8 FF 9F 3D |  if_ae	jmp	#LR__5142
33ce8     40 02 62 FD | 	dirl	_var02
33cec     FF FF FF FF 
33cf0     01 FF 2B FC | 	wypin	##-1, _var02
33cf4     41 02 62 FD | 	dirh	_var02
33cf8                 | _fatfs_cc_xmit_mmc_1174_ret
33cf8     2D 00 64 FD | 	ret
33cfc                 | 
33cfc                 | _fatfs_cc_rcvr_mmc_1181
33cfc     01 00 00 FF 
33d00     10 E4 05 F1 | 	add	objptr, ##528
33d04     F2 00 02 FB | 	rdlong	_var01, objptr
33d08     0C E4 05 F1 | 	add	objptr, #12
33d0c     F2 02 02 FB | 	rdlong	_var02, objptr
33d10     01 00 00 FF 
33d14     1C E4 85 F1 | 	sub	objptr, ##540
33d18     01 03 08 FC | 	akpin	_var02
33d1c     0A 05 0A F6 | 	mov	_var03, arg02 wz
33d20     02 04 4E F0 | 	shr	_var03, #2 wz
33d24     30 00 90 AD |  if_e	jmp	#LR__5152
33d28     02 07 02 F6 | 	mov	_var04, _var03
33d2c     05 06 66 F0 | 	shl	_var04, #5
33d30     00 07 22 FC | 	wypin	_var04, _var01
33d34     01 7F 18 FC | 	wxpin	#63, _var02
33d38                 | LR__5150
33d38                 | LR__5151
33d38     40 02 72 FD | 	testp	_var02 wc
33d3c     F8 FF 9F 3D |  if_ae	jmp	#LR__5151
33d40     01 07 8A FA | 	rdpin	_var04, _var02
33d44     69 06 62 FD | 	rev	_var04
33d48     1B 06 FE F9 | 	movbyts	_var04, #27
33d4c     09 07 62 FC | 	wrlong	_var04, arg01
33d50     04 12 06 F1 | 	add	arg01, #4
33d54     F8 05 6E FB | 	djnz	_var03, #LR__5150
33d58                 | LR__5152
33d58     03 14 0E F5 | 	and	arg02, #3 wz
33d5c     24 00 90 AD |  if_e	jmp	#LR__5155
33d60     01 4F 18 FC | 	wxpin	#39, _var02
33d64                 | LR__5153
33d64     00 11 28 FC | 	wypin	#8, _var01
33d68                 | LR__5154
33d68     40 02 72 FD | 	testp	_var02 wc
33d6c     F8 FF 9F 3D |  if_ae	jmp	#LR__5154
33d70     01 07 8A FA | 	rdpin	_var04, _var02
33d74     69 06 62 FD | 	rev	_var04
33d78     09 07 42 FC | 	wrbyte	_var04, arg01
33d7c     01 12 06 F1 | 	add	arg01, #1
33d80     F8 15 6E FB | 	djnz	arg02, #LR__5153
33d84                 | LR__5155
33d84                 | _fatfs_cc_rcvr_mmc_1181_ret
33d84     2D 00 64 FD | 	ret
33d88                 | 
33d88                 | _fatfs_cc_wait_ready_1185
33d88     01 4A 05 F6 | 	mov	COUNT_, #1
33d8c     A8 00 A0 FD | 	call	#pushregs_
33d90     10 F0 07 F1 | 	add	ptra, #16
33d94     1A FA 61 FD | 	getct	result1
33d98     08 4E 05 F1 | 	add	fp, #8
33d9c     A7 FA 61 FC | 	wrlong	result1, fp
33da0     14 26 06 FB | 	rdlong	local01, #20
33da4     01 26 46 F0 | 	shr	local01, #1
33da8     04 4E 05 F1 | 	add	fp, #4
33dac     A7 26 62 FC | 	wrlong	local01, fp
33db0     0C 4E 85 F1 | 	sub	fp, #12
33db4                 | ' {
33db4                 | ' 	BYTE d;
33db4                 | ' 	UINT tmr, tmout;
33db4                 | ' 
33db4                 | ' 	tmr = _cnt();
33db4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
33db4                 | ' 	for(;;) {
33db4                 | LR__5160
33db4     04 4E 05 F1 | 	add	fp, #4
33db8     A7 12 02 F6 | 	mov	arg01, fp
33dbc     04 4E 85 F1 | 	sub	fp, #4
33dc0     01 14 06 F6 | 	mov	arg02, #1
33dc4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
33dc8     04 4E 05 F1 | 	add	fp, #4
33dcc     A7 26 C2 FA | 	rdbyte	local01, fp
33dd0     04 4E 85 F1 | 	sub	fp, #4
33dd4     FF 26 0E F2 | 	cmp	local01, #255 wz
33dd8     01 FA 05 A6 |  if_e	mov	result1, #1
33ddc     28 00 90 AD |  if_e	jmp	#LR__5161
33de0     1A FA 61 FD | 	getct	result1
33de4     08 4E 05 F1 | 	add	fp, #8
33de8     A7 26 02 FB | 	rdlong	local01, fp
33dec     13 FB 81 F1 | 	sub	result1, local01
33df0     04 4E 05 F1 | 	add	fp, #4
33df4     A7 26 02 FB | 	rdlong	local01, fp
33df8     0C 4E 85 F1 | 	sub	fp, #12
33dfc     13 FB 11 F2 | 	cmp	result1, local01 wc
33e00     00 FA 05 36 |  if_ae	mov	result1, #0
33e04     AC FF 9F CD |  if_b	jmp	#LR__5160
33e08                 | LR__5161
33e08     A7 F0 03 F6 | 	mov	ptra, fp
33e0c     B2 00 A0 FD | 	call	#popregs_
33e10                 | _fatfs_cc_wait_ready_1185_ret
33e10     2D 00 64 FD | 	ret
33e14                 | 
33e14                 | _fatfs_cc_deselect_1191
33e14     00 4A 05 F6 | 	mov	COUNT_, #0
33e18     A8 00 A0 FD | 	call	#pushregs_
33e1c     14 F0 07 F1 | 	add	ptra, #20
33e20     01 00 00 FF 
33e24     14 E4 05 F1 | 	add	objptr, ##532
33e28     F2 14 02 FB | 	rdlong	arg02, objptr
33e2c     04 4E 05 F1 | 	add	fp, #4
33e30     A7 14 62 FC | 	wrlong	arg02, fp
33e34     04 E4 85 F1 | 	sub	objptr, #4
33e38     F2 14 02 FB | 	rdlong	arg02, objptr
33e3c     04 4E 05 F1 | 	add	fp, #4
33e40     A7 14 62 FC | 	wrlong	arg02, fp
33e44     08 E4 05 F1 | 	add	objptr, #8
33e48     F2 14 02 FB | 	rdlong	arg02, objptr
33e4c     04 4E 05 F1 | 	add	fp, #4
33e50     A7 14 62 FC | 	wrlong	arg02, fp
33e54     04 E4 05 F1 | 	add	objptr, #4
33e58     F2 14 02 FB | 	rdlong	arg02, objptr
33e5c     01 00 00 FF 
33e60     1C E4 85 F1 | 	sub	objptr, ##540
33e64     04 4E 05 F1 | 	add	fp, #4
33e68     A7 14 62 FC | 	wrlong	arg02, fp
33e6c     0C 4E 85 F1 | 	sub	fp, #12
33e70     A7 12 02 FB | 	rdlong	arg01, fp
33e74     04 4E 85 F1 | 	sub	fp, #4
33e78     59 12 62 FD | 	drvh	arg01
33e7c     1F 20 64 FD | 	waitx	#16
33e80     A7 12 02 F6 | 	mov	arg01, fp
33e84     01 14 06 F6 | 	mov	arg02, #1
33e88     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
33e8c     A7 F0 03 F6 | 	mov	ptra, fp
33e90     B2 00 A0 FD | 	call	#popregs_
33e94                 | _fatfs_cc_deselect_1191_ret
33e94     2D 00 64 FD | 	ret
33e98                 | 
33e98                 | _fatfs_cc_select_1195
33e98     00 4A 05 F6 | 	mov	COUNT_, #0
33e9c     A8 00 A0 FD | 	call	#pushregs_
33ea0     10 F0 07 F1 | 	add	ptra, #16
33ea4     01 00 00 FF 
33ea8     14 E4 05 F1 | 	add	objptr, ##532
33eac     F2 14 02 FB | 	rdlong	arg02, objptr
33eb0     08 4E 05 F1 | 	add	fp, #8
33eb4     A7 14 62 FC | 	wrlong	arg02, fp
33eb8     08 E4 05 F1 | 	add	objptr, #8
33ebc     F2 12 02 FB | 	rdlong	arg01, objptr
33ec0     01 00 00 FF 
33ec4     1C E4 85 F1 | 	sub	objptr, ##540
33ec8     04 4E 05 F1 | 	add	fp, #4
33ecc     A7 12 62 FC | 	wrlong	arg01, fp
33ed0     50 12 62 FD | 	fltl	arg01
33ed4     04 4E 85 F1 | 	sub	fp, #4
33ed8     A7 12 02 FB | 	rdlong	arg01, fp
33edc     58 12 62 FD | 	drvl	arg01
33ee0     1F 20 64 FD | 	waitx	#16
33ee4     04 4E 05 F1 | 	add	fp, #4
33ee8     A7 12 02 FB | 	rdlong	arg01, fp
33eec     41 12 62 FD | 	dirh	arg01
33ef0     08 4E 85 F1 | 	sub	fp, #8
33ef4     A7 12 02 F6 | 	mov	arg01, fp
33ef8     04 4E 85 F1 | 	sub	fp, #4
33efc     01 14 06 F6 | 	mov	arg02, #1
33f00     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
33f04     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1185
33f08     00 FA 0D F2 | 	cmp	result1, #0 wz
33f0c     01 FA 05 56 |  if_ne	mov	result1, #1
33f10     08 00 90 5D |  if_ne	jmp	#LR__5170
33f14     FC FE BF FD | 	call	#_fatfs_cc_deselect_1191
33f18                 | ' 
33f18                 | ' 	deselect();
33f18                 | ' 	return 0;
33f18     00 FA 05 F6 | 	mov	result1, #0
33f1c                 | LR__5170
33f1c     A7 F0 03 F6 | 	mov	ptra, fp
33f20     B2 00 A0 FD | 	call	#popregs_
33f24                 | _fatfs_cc_select_1195_ret
33f24     2D 00 64 FD | 	ret
33f28                 | 
33f28                 | _fatfs_cc_rcvr_datablock_1199
33f28     01 4A 05 F6 | 	mov	COUNT_, #1
33f2c     A8 00 A0 FD | 	call	#pushregs_
33f30     18 F0 07 F1 | 	add	ptra, #24
33f34     04 4E 05 F1 | 	add	fp, #4
33f38     A7 12 62 FC | 	wrlong	arg01, fp
33f3c     04 4E 05 F1 | 	add	fp, #4
33f40     A7 14 62 FC | 	wrlong	arg02, fp
33f44     1A FA 61 FD | 	getct	result1
33f48     08 4E 05 F1 | 	add	fp, #8
33f4c     A7 FA 61 FC | 	wrlong	result1, fp
33f50     14 26 06 FB | 	rdlong	local01, #20
33f54     03 26 46 F0 | 	shr	local01, #3
33f58     04 4E 05 F1 | 	add	fp, #4
33f5c     A7 26 62 FC | 	wrlong	local01, fp
33f60     14 4E 85 F1 | 	sub	fp, #20
33f64                 | ' 	BYTE *buff,
33f64                 | ' 	UINT btr
33f64                 | ' )
33f64                 | ' {
33f64                 | ' 	BYTE d[2];
33f64                 | ' 	UINT tmr, tmout;
33f64                 | ' 
33f64                 | ' 	tmr = _cnt();
33f64                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
33f64                 | ' 	for(;;) {
33f64                 | LR__5180
33f64     0C 4E 05 F1 | 	add	fp, #12
33f68     A7 12 02 F6 | 	mov	arg01, fp
33f6c     0C 4E 85 F1 | 	sub	fp, #12
33f70     01 14 06 F6 | 	mov	arg02, #1
33f74     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
33f78     0C 4E 05 F1 | 	add	fp, #12
33f7c     A7 26 C2 FA | 	rdbyte	local01, fp
33f80     0C 4E 85 F1 | 	sub	fp, #12
33f84     FF 26 0E F2 | 	cmp	local01, #255 wz
33f88     28 00 90 5D |  if_ne	jmp	#LR__5181
33f8c     1A FA 61 FD | 	getct	result1
33f90     FD 26 02 F6 | 	mov	local01, result1
33f94     10 4E 05 F1 | 	add	fp, #16
33f98     A7 14 02 FB | 	rdlong	arg02, fp
33f9c     0A 27 82 F1 | 	sub	local01, arg02
33fa0     04 4E 05 F1 | 	add	fp, #4
33fa4     A7 14 02 FB | 	rdlong	arg02, fp
33fa8     14 4E 85 F1 | 	sub	fp, #20
33fac     0A 27 12 F2 | 	cmp	local01, arg02 wc
33fb0     B0 FF 9F CD |  if_b	jmp	#LR__5180
33fb4                 | LR__5181
33fb4     0C 4E 05 F1 | 	add	fp, #12
33fb8     A7 26 C2 FA | 	rdbyte	local01, fp
33fbc     0C 4E 85 F1 | 	sub	fp, #12
33fc0     FE 26 0E F2 | 	cmp	local01, #254 wz
33fc4     00 FA 05 56 |  if_ne	mov	result1, #0
33fc8     30 00 90 5D |  if_ne	jmp	#LR__5182
33fcc     04 4E 05 F1 | 	add	fp, #4
33fd0     A7 12 02 FB | 	rdlong	arg01, fp
33fd4     04 4E 05 F1 | 	add	fp, #4
33fd8     A7 14 02 FB | 	rdlong	arg02, fp
33fdc     08 4E 85 F1 | 	sub	fp, #8
33fe0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
33fe4     0C 4E 05 F1 | 	add	fp, #12
33fe8     A7 12 02 F6 | 	mov	arg01, fp
33fec     0C 4E 85 F1 | 	sub	fp, #12
33ff0     02 14 06 F6 | 	mov	arg02, #2
33ff4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
33ff8                 | ' 
33ff8                 | ' 	rcvr_mmc(buff, btr);
33ff8                 | ' 	rcvr_mmc(d, 2);
33ff8                 | ' 
33ff8                 | ' 	return 1;
33ff8     01 FA 05 F6 | 	mov	result1, #1
33ffc                 | LR__5182
33ffc     A7 F0 03 F6 | 	mov	ptra, fp
34000     B2 00 A0 FD | 	call	#popregs_
34004                 | _fatfs_cc_rcvr_datablock_1199_ret
34004     2D 00 64 FD | 	ret
34008                 | 
34008                 | _fatfs_cc_xmit_datablock_1201
34008     00 4A 05 F6 | 	mov	COUNT_, #0
3400c     A8 00 A0 FD | 	call	#pushregs_
34010     10 F0 07 F1 | 	add	ptra, #16
34014     04 4E 05 F1 | 	add	fp, #4
34018     A7 12 62 FC | 	wrlong	arg01, fp
3401c     04 4E 05 F1 | 	add	fp, #4
34020     A7 14 42 FC | 	wrbyte	arg02, fp
34024     08 4E 85 F1 | 	sub	fp, #8
34028     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1185
3402c     00 FA 0D F2 | 	cmp	result1, #0 wz
34030     00 FA 05 A6 |  if_e	mov	result1, #0
34034     90 00 90 AD |  if_e	jmp	#LR__5191
34038     08 4E 05 F1 | 	add	fp, #8
3403c     A7 14 C2 FA | 	rdbyte	arg02, fp
34040     04 4E 05 F1 | 	add	fp, #4
34044     A7 14 42 FC | 	wrbyte	arg02, fp
34048     A7 12 02 F6 | 	mov	arg01, fp
3404c     0C 4E 85 F1 | 	sub	fp, #12
34050     01 14 06 F6 | 	mov	arg02, #1
34054     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1174
34058     08 4E 05 F1 | 	add	fp, #8
3405c     A7 14 C2 FA | 	rdbyte	arg02, fp
34060     08 4E 85 F1 | 	sub	fp, #8
34064     FD 14 0E F2 | 	cmp	arg02, #253 wz
34068     58 00 90 AD |  if_e	jmp	#LR__5190
3406c     04 4E 05 F1 | 	add	fp, #4
34070     A7 12 02 FB | 	rdlong	arg01, fp
34074     04 4E 85 F1 | 	sub	fp, #4
34078     09 14 C6 F9 | 	decod	arg02, #9
3407c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1174
34080     0C 4E 05 F1 | 	add	fp, #12
34084     A7 12 02 F6 | 	mov	arg01, fp
34088     0C 4E 85 F1 | 	sub	fp, #12
3408c     02 14 06 F6 | 	mov	arg02, #2
34090     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
34094     0C 4E 05 F1 | 	add	fp, #12
34098     A7 12 02 F6 | 	mov	arg01, fp
3409c     0C 4E 85 F1 | 	sub	fp, #12
340a0     01 14 06 F6 | 	mov	arg02, #1
340a4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
340a8     0C 4E 05 F1 | 	add	fp, #12
340ac     A7 14 C2 FA | 	rdbyte	arg02, fp
340b0     0C 4E 85 F1 | 	sub	fp, #12
340b4     1F 14 06 F5 | 	and	arg02, #31
340b8     05 14 0E F2 | 	cmp	arg02, #5 wz
340bc                 | ' 			return 0;
340bc     00 FA 05 56 |  if_ne	mov	result1, #0
340c0     04 00 90 5D |  if_ne	jmp	#LR__5191
340c4                 | LR__5190
340c4                 | ' 	}
340c4                 | ' 
340c4                 | ' 	return 1;
340c4     01 FA 05 F6 | 	mov	result1, #1
340c8                 | LR__5191
340c8     A7 F0 03 F6 | 	mov	ptra, fp
340cc     B2 00 A0 FD | 	call	#popregs_
340d0                 | _fatfs_cc_xmit_datablock_1201_ret
340d0     2D 00 64 FD | 	ret
340d4                 | 
340d4                 | _fatfs_cc_send_cmd_1205
340d4     01 4A 05 F6 | 	mov	COUNT_, #1
340d8     A8 00 A0 FD | 	call	#pushregs_
340dc     1C F0 07 F1 | 	add	ptra, #28
340e0                 | _fatfs_cc_send_cmd_1205_enter
340e0     04 4E 05 F1 | 	add	fp, #4
340e4     A7 12 42 FC | 	wrbyte	arg01, fp
340e8     04 4E 05 F1 | 	add	fp, #4
340ec     A7 14 62 FC | 	wrlong	arg02, fp
340f0     04 4E 85 F1 | 	sub	fp, #4
340f4     A7 FA C1 FA | 	rdbyte	result1, fp
340f8     04 4E 85 F1 | 	sub	fp, #4
340fc     80 FA CD F7 | 	test	result1, #128 wz
34100     44 00 90 AD |  if_e	jmp	#LR__5200
34104     04 4E 05 F1 | 	add	fp, #4
34108     A7 14 C2 FA | 	rdbyte	arg02, fp
3410c     7F 14 06 F5 | 	and	arg02, #127
34110     A7 14 42 FC | 	wrbyte	arg02, fp
34114     04 4E 85 F1 | 	sub	fp, #4
34118     37 12 06 F6 | 	mov	arg01, #55
3411c     00 14 06 F6 | 	mov	arg02, #0
34120     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1205
34124     0C 4E 05 F1 | 	add	fp, #12
34128     A7 FA 41 FC | 	wrbyte	result1, fp
3412c     A7 14 C2 FA | 	rdbyte	arg02, fp
34130     0C 4E 85 F1 | 	sub	fp, #12
34134     02 14 16 F2 | 	cmp	arg02, #2 wc
34138     0C 4E 05 31 |  if_ae	add	fp, #12
3413c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
34140     0C 4E 85 31 |  if_ae	sub	fp, #12
34144     6C 01 90 3D |  if_ae	jmp	#LR__5204
34148                 | LR__5200
34148     04 4E 05 F1 | 	add	fp, #4
3414c     A7 14 C2 FA | 	rdbyte	arg02, fp
34150     04 4E 85 F1 | 	sub	fp, #4
34154     0C 14 0E F2 | 	cmp	arg02, #12 wz
34158     14 00 90 AD |  if_e	jmp	#LR__5201
3415c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1191
34160     34 FD BF FD | 	call	#_fatfs_cc_select_1195
34164     00 FA 0D F2 | 	cmp	result1, #0 wz
34168     FF FA 05 A6 |  if_e	mov	result1, #255
3416c     44 01 90 AD |  if_e	jmp	#LR__5204
34170                 | LR__5201
34170     04 4E 05 F1 | 	add	fp, #4
34174     A7 14 C2 FA | 	rdbyte	arg02, fp
34178     40 FA 05 F6 | 	mov	result1, #64
3417c     0A FB 41 F5 | 	or	result1, arg02
34180     10 4E 05 F1 | 	add	fp, #16
34184     A7 FA 41 FC | 	wrbyte	result1, fp
34188     0C 4E 85 F1 | 	sub	fp, #12
3418c     A7 FA 01 FB | 	rdlong	result1, fp
34190     18 FA 45 F0 | 	shr	result1, #24
34194     0D 4E 05 F1 | 	add	fp, #13
34198     A7 FA 41 FC | 	wrbyte	result1, fp
3419c     0D 4E 85 F1 | 	sub	fp, #13
341a0     A7 FA 01 FB | 	rdlong	result1, fp
341a4     10 FA 45 F0 | 	shr	result1, #16
341a8     0E 4E 05 F1 | 	add	fp, #14
341ac     A7 FA 41 FC | 	wrbyte	result1, fp
341b0     0E 4E 85 F1 | 	sub	fp, #14
341b4     A7 FA 01 FB | 	rdlong	result1, fp
341b8     08 FA 45 F0 | 	shr	result1, #8
341bc     0F 4E 05 F1 | 	add	fp, #15
341c0     A7 FA 41 FC | 	wrbyte	result1, fp
341c4     0F 4E 85 F1 | 	sub	fp, #15
341c8     A7 FA 01 FB | 	rdlong	result1, fp
341cc     10 4E 05 F1 | 	add	fp, #16
341d0     A7 FA 41 FC | 	wrbyte	result1, fp
341d4     0C 4E 85 F1 | 	sub	fp, #12
341d8     A7 02 48 FC | 	wrbyte	#1, fp
341dc     08 4E 85 F1 | 	sub	fp, #8
341e0     A7 FA C9 FA | 	rdbyte	result1, fp wz
341e4     04 4E 85 F1 | 	sub	fp, #4
341e8     0C 4E 05 A1 |  if_e	add	fp, #12
341ec     A7 2A 49 AC |  if_e	wrbyte	#149, fp
341f0     0C 4E 85 A1 |  if_e	sub	fp, #12
341f4     04 4E 05 F1 | 	add	fp, #4
341f8     A7 FA C1 FA | 	rdbyte	result1, fp
341fc     04 4E 85 F1 | 	sub	fp, #4
34200     08 FA 0D F2 | 	cmp	result1, #8 wz
34204     0C 4E 05 A1 |  if_e	add	fp, #12
34208     A7 0E 49 AC |  if_e	wrbyte	#135, fp
3420c     0C 4E 85 A1 |  if_e	sub	fp, #12
34210     0C 4E 05 F1 | 	add	fp, #12
34214     A7 14 C2 FA | 	rdbyte	arg02, fp
34218     0D 4E 05 F1 | 	add	fp, #13
3421c     A7 14 42 FC | 	wrbyte	arg02, fp
34220     05 4E 85 F1 | 	sub	fp, #5
34224     A7 12 02 F6 | 	mov	arg01, fp
34228     14 4E 85 F1 | 	sub	fp, #20
3422c     06 14 06 F6 | 	mov	arg02, #6
34230     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1174
34234     04 4E 05 F1 | 	add	fp, #4
34238     A7 26 C2 FA | 	rdbyte	local01, fp
3423c     04 4E 85 F1 | 	sub	fp, #4
34240     0C 26 0E F2 | 	cmp	local01, #12 wz
34244     10 4E 05 A1 |  if_e	add	fp, #16
34248     A7 12 02 A6 |  if_e	mov	arg01, fp
3424c     10 4E 85 A1 |  if_e	sub	fp, #16
34250     01 14 06 A6 |  if_e	mov	arg02, #1
34254     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1181
34258     0C 4E 05 F1 | 	add	fp, #12
3425c     A7 14 48 FC | 	wrbyte	#10, fp
34260     0C 4E 85 F1 | 	sub	fp, #12
34264                 | ' 	n = 10;
34264                 | ' 	do
34264                 | LR__5202
34264     10 4E 05 F1 | 	add	fp, #16
34268     A7 12 02 F6 | 	mov	arg01, fp
3426c     10 4E 85 F1 | 	sub	fp, #16
34270     01 14 06 F6 | 	mov	arg02, #1
34274     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1181
34278     10 4E 05 F1 | 	add	fp, #16
3427c     A7 26 C2 FA | 	rdbyte	local01, fp
34280     10 4E 85 F1 | 	sub	fp, #16
34284     80 26 CE F7 | 	test	local01, #128 wz
34288     1C 00 90 AD |  if_e	jmp	#LR__5203
3428c     0C 4E 05 F1 | 	add	fp, #12
34290     A7 26 C2 FA | 	rdbyte	local01, fp
34294     01 26 86 F1 | 	sub	local01, #1
34298     A7 26 42 FC | 	wrbyte	local01, fp
3429c     A7 26 CA FA | 	rdbyte	local01, fp wz
342a0     0C 4E 85 F1 | 	sub	fp, #12
342a4     BC FF 9F 5D |  if_ne	jmp	#LR__5202
342a8                 | LR__5203
342a8                 | ' 
342a8                 | ' 	return d;
342a8     10 4E 05 F1 | 	add	fp, #16
342ac     A7 FA C1 FA | 	rdbyte	result1, fp
342b0     10 4E 85 F1 | 	sub	fp, #16
342b4                 | LR__5204
342b4     A7 F0 03 F6 | 	mov	ptra, fp
342b8     B2 00 A0 FD | 	call	#popregs_
342bc                 | _fatfs_cc_send_cmd_1205_ret
342bc     2D 00 64 FD | 	ret
342c0                 | 
342c0                 | _fatfs_cc_disk_deinitialize
342c0     03 4A 05 F6 | 	mov	COUNT_, #3
342c4     A8 00 A0 FD | 	call	#pushregs_
342c8     00 12 4E F2 | 	cmps	arg01, #0 wz
342cc     01 00 00 FF 
342d0     14 E4 05 F1 | 	add	objptr, ##532
342d4     F2 12 02 FB | 	rdlong	arg01, objptr
342d8     04 E4 85 F1 | 	sub	objptr, #4
342dc     F2 26 02 FB | 	rdlong	local01, objptr
342e0     08 E4 05 F1 | 	add	objptr, #8
342e4     F2 28 02 FB | 	rdlong	local02, objptr
342e8     04 E4 05 F1 | 	add	objptr, #4
342ec     F2 2A 02 FB | 	rdlong	local03, objptr
342f0     01 00 00 FF 
342f4     1C E4 85 F1 | 	sub	objptr, ##540
342f8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
342f8                 | '         return RES_NOTRDY;
342f8     03 FA 05 56 |  if_ne	mov	result1, #3
342fc     2C 00 90 5D |  if_ne	jmp	#LR__5210
34300     50 12 62 FD | 	fltl	arg01
34304     09 01 08 FC | 	wrpin	#0, arg01
34308     50 26 62 FD | 	fltl	local01
3430c     13 01 08 FC | 	wrpin	#0, local01
34310     50 28 62 FD | 	fltl	local02
34314     14 01 08 FC | 	wrpin	#0, local02
34318     50 2A 62 FD | 	fltl	local03
3431c     15 01 08 FC | 	wrpin	#0, local03
34320     0A 12 06 F6 | 	mov	arg01, #10
34324     40 0E BF FD | 	call	#__system___waitms
34328                 | '     }
34328                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
34328                 | '     _pinclear(PIN_SS);
34328                 | '     _pinclear(PIN_CLK);
34328                 | '     _pinclear(PIN_DI);
34328                 | '     _pinclear(PIN_DO);
34328                 | ' 
34328                 | '     _waitms(10);
34328                 | ' 
34328                 | '     return 0;
34328     00 FA 05 F6 | 	mov	result1, #0
3432c                 | LR__5210
3432c     A7 F0 03 F6 | 	mov	ptra, fp
34330     B2 00 A0 FD | 	call	#popregs_
34334                 | _fatfs_cc_disk_deinitialize_ret
34334     2D 00 64 FD | 	ret
34338                 | 
34338                 | _fatfs_cc_gettimeofday
34338     04 4A 05 F6 | 	mov	COUNT_, #4
3433c     A8 00 A0 FD | 	call	#pushregs_
34340     09 27 02 F6 | 	mov	local01, arg01
34344     FC 09 BF FD | 	call	#__system___getus
34348     FD 12 02 F6 | 	mov	arg01, result1
3434c     02 00 00 FF 
34350     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
34354     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
34358     09 FB 01 F6 | 	mov	result1, arg01
3435c     14 FB 81 F1 | 	sub	result1, local02
34360     A1 07 00 FF 
34364     40 FA 15 FD | 	qdiv	result1, ##1000000
34368     02 00 00 FF 
3436c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
34370     18 28 62 FD | 	getqx	local02
34374     A1 07 00 FF 
34378     40 FA 15 FD | 	qdiv	result1, ##1000000
3437c     00 28 0E F2 | 	cmp	local02, #0 wz
34380     19 2A 62 FD | 	getqy	local03
34384     28 00 90 AD |  if_e	jmp	#LR__5220
34388     02 00 00 FF 
3438c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
34390     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
34394     14 2D 02 F1 | 	add	local04, local02
34398     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
3439c     15 13 82 F1 | 	sub	arg01, local03
343a0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
343a4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
343a8     02 00 00 FF 
343ac     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
343b0                 | LR__5220
343b0     02 00 00 FF 
343b4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
343b8     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
343bc     02 00 00 FF 
343c0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
343c4     13 2D 62 FC | 	wrlong	local04, local01
343c8     04 26 06 F1 | 	add	local01, #4
343cc     13 2B 62 FC | 	wrlong	local03, local01
343d0                 | '         lastsec += secs;
343d0                 | '         lastus = now - leftover;
343d0                 | '     }
343d0                 | '     tv->tv_sec = lastsec;
343d0                 | '     tv->tv_usec = leftover;
343d0                 | '     return 0;
343d0     00 FA 05 F6 | 	mov	result1, #0
343d4     A7 F0 03 F6 | 	mov	ptra, fp
343d8     B2 00 A0 FD | 	call	#popregs_
343dc                 | _fatfs_cc_gettimeofday_ret
343dc     2D 00 64 FD | 	ret
343e0                 | 
343e0                 | _fatfs_cc__is_leap_year
343e0     09 FB 51 F6 | 	abs	result1, arg01 wc
343e4     03 FA 05 F5 | 	and	result1, #3
343e8     FD FA 89 F6 | 	negc	result1, result1 wz
343ec     38 00 90 5D |  if_ne	jmp	#LR__5231
343f0     09 FB 51 F6 | 	abs	result1, arg01 wc
343f4     64 FA 15 FD | 	qdiv	result1, #100
343f8     19 FA 61 FD | 	getqy	result1
343fc     FD FA 89 F6 | 	negc	result1, result1 wz
34400     1C 00 90 5D |  if_ne	jmp	#LR__5230
34404     09 FB 51 F6 | 	abs	result1, arg01 wc
34408     90 FB 15 FD | 	qdiv	result1, #400
3440c                 | '       return (0 == y % 400);
3440c     00 FA 05 F6 | 	mov	result1, #0
34410     19 00 62 FD | 	getqy	_var01
34414     00 01 8A F6 | 	negc	_var01, _var01 wz
34418     01 FA 05 A6 |  if_e	mov	result1, #1
3441c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
34420                 | LR__5230
34420                 | '     return 1;
34420     01 FA 05 F6 | 	mov	result1, #1
34424     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
34428                 | LR__5231
34428                 | '   }
34428                 | '   return 0;
34428     00 FA 05 F6 | 	mov	result1, #0
3442c                 | _fatfs_cc__is_leap_year_ret
3442c     2D 00 64 FD | 	ret
34430                 | 
34430                 | _fatfs_cc___tzoffset
34430     09 01 0A F6 | 	mov	_var01, arg01 wz
34434     FF FF FF FF 
34438     0A FF 6B FC | 	wrlong	##-1, arg02
3443c     01 02 06 F6 | 	mov	_var02, #1
34440     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
34444                 | '                 return 0;
34444     00 FA 05 A6 |  if_e	mov	result1, #0
34448     94 02 90 AD |  if_e	jmp	#LR__5257
3444c     0A 01 68 FC | 	wrlong	#0, arg02
34450     02 00 00 FF 
34454     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
34458     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3445c                 | ' 
3445c                 | '        *hasdst = 0;
3445c                 | ' 
3445c                 | ' 	n = stdname;
3445c                 | '         while (*s && isalpha(*s)) {
3445c     02 00 00 FF 
34460     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
34464     97 28 48 FB | 	callpa	#(@LR__5241-@LR__5240)>>2,fcache_load_ptr_
34468                 | LR__5240
34468     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3446c     48 00 90 AD |  if_e	jmp	#LR__5242
34470     00 13 C2 FA | 	rdbyte	arg01, _var01
34474                 | ' {
34474                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
34474     80 12 36 F3 | 	fle	arg01, #128 wc
34478                 | '     return __ctype[c];
34478     02 00 00 FF 
3447c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
34480     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34484     09 FB C1 FA | 	rdbyte	result1, arg01
34488     02 00 00 FF 
3448c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34490     0C FA CD F7 | 	test	result1, #12 wz
34494     20 00 90 AD |  if_e	jmp	#LR__5242
34498     00 09 02 F6 | 	mov	_var05, _var01
3449c     00 0B 02 F6 | 	mov	_var06, _var01
344a0     01 0A 06 F1 | 	add	_var06, #1
344a4     04 0D C2 FA | 	rdbyte	_var07, _var05
344a8     05 01 02 F6 | 	mov	_var01, _var06
344ac     03 0D 42 FC | 	wrbyte	_var07, _var04
344b0     01 06 06 F1 | 	add	_var04, #1
344b4     B0 FF 9F FD | 	jmp	#LR__5240
344b8                 | LR__5241
344b8                 | LR__5242
344b8     03 01 48 FC | 	wrbyte	#0, _var04
344bc     00 0E 06 F6 | 	mov	_var08, #0
344c0     00 05 C2 FA | 	rdbyte	_var03, _var01
344c4     2D 04 0E F2 | 	cmp	_var03, #45 wz
344c8     01 02 66 A6 |  if_e	neg	_var02, #1
344cc     01 00 06 A1 |  if_e	add	_var01, #1
344d0     97 28 48 FB | 	callpa	#(@LR__5244-@LR__5243)>>2,fcache_load_ptr_
344d4                 | '                 sgn = -1;
344d4                 | '                 s++;
344d4                 | '         }
344d4                 | '         while (isdigit(*s)) {
344d4                 | LR__5243
344d4     00 13 C2 FA | 	rdbyte	arg01, _var01
344d8                 | ' {
344d8                 | '   return  (__ctype_get(c) & 0x02 ) ;
344d8     80 12 36 F3 | 	fle	arg01, #128 wc
344dc                 | '     return __ctype[c];
344dc     02 00 00 FF 
344e0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
344e4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
344e8     09 FB C1 FA | 	rdbyte	result1, arg01
344ec     02 00 00 FF 
344f0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
344f4     02 FA CD F7 | 	test	result1, #2 wz
344f8     28 00 90 AD |  if_e	jmp	#LR__5245
344fc     07 05 02 F6 | 	mov	_var03, _var08
34500     02 04 66 F0 | 	shl	_var03, #2
34504     07 05 02 F1 | 	add	_var03, _var08
34508     01 04 66 F0 | 	shl	_var03, #1
3450c     00 09 C2 FA | 	rdbyte	_var05, _var01
34510     30 08 86 F1 | 	sub	_var05, #48
34514     04 05 02 F1 | 	add	_var03, _var05
34518     02 0F 02 F6 | 	mov	_var08, _var03
3451c     01 00 06 F1 | 	add	_var01, #1
34520     B0 FF 9F FD | 	jmp	#LR__5243
34524                 | LR__5244
34524                 | LR__5245
34524     07 00 00 FF 
34528     10 0E 06 FD | 	qmul	_var08, ##3600
3452c     00 05 C2 FA | 	rdbyte	_var03, _var01
34530     3A 04 0E F2 | 	cmp	_var03, #58 wz
34534     18 10 62 FD | 	getqx	_var09
34538     70 00 90 5D |  if_ne	jmp	#LR__5249
3453c     00 0E 06 F6 | 	mov	_var08, #0
34540     01 00 06 F1 | 	add	_var01, #1
34544     97 28 48 FB | 	callpa	#(@LR__5247-@LR__5246)>>2,fcache_load_ptr_
34548                 | '                 x = 0;
34548                 | '                 s++;
34548                 | '                 while (isdigit(*s)) {
34548                 | LR__5246
34548     00 13 C2 FA | 	rdbyte	arg01, _var01
3454c                 | ' {
3454c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3454c     80 12 36 F3 | 	fle	arg01, #128 wc
34550                 | '     return __ctype[c];
34550     02 00 00 FF 
34554     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
34558     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3455c     09 FB C1 FA | 	rdbyte	result1, arg01
34560     02 00 00 FF 
34564     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34568     02 FA CD F7 | 	test	result1, #2 wz
3456c     28 00 90 AD |  if_e	jmp	#LR__5248
34570     07 05 02 F6 | 	mov	_var03, _var08
34574     02 04 66 F0 | 	shl	_var03, #2
34578     07 05 02 F1 | 	add	_var03, _var08
3457c     01 04 66 F0 | 	shl	_var03, #1
34580     00 09 C2 FA | 	rdbyte	_var05, _var01
34584     30 08 86 F1 | 	sub	_var05, #48
34588     04 05 02 F1 | 	add	_var03, _var05
3458c     02 0F 02 F6 | 	mov	_var08, _var03
34590     01 00 06 F1 | 	add	_var01, #1
34594     B0 FF 9F FD | 	jmp	#LR__5246
34598                 | LR__5247
34598                 | LR__5248
34598     07 0D 02 F6 | 	mov	_var07, _var08
3459c     04 0C 66 F0 | 	shl	_var07, #4
345a0     07 0D 82 F1 | 	sub	_var07, _var08
345a4     02 0C 66 F0 | 	shl	_var07, #2
345a8     06 11 02 F1 | 	add	_var09, _var07
345ac                 | LR__5249
345ac     02 00 00 FF 
345b0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
345b4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
345b8     00 13 C2 FA | 	rdbyte	arg01, _var01
345bc                 | ' {
345bc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
345bc     80 12 36 F3 | 	fle	arg01, #128 wc
345c0                 | '     return __ctype[c];
345c0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
345c4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
345c8     09 FB C1 FA | 	rdbyte	result1, arg01
345cc     02 00 00 FF 
345d0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
345d4     0C FA CD F7 | 	test	result1, #12 wz
345d8     50 00 90 AD |  if_e	jmp	#LR__5252
345dc     0A 03 68 FC | 	wrlong	#1, arg02
345e0                 | '                 *hasdst = 1;
345e0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
345e0                 | LR__5250
345e0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
345e4     44 00 90 AD |  if_e	jmp	#LR__5251
345e8     00 13 C2 FA | 	rdbyte	arg01, _var01
345ec                 | ' {
345ec                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
345ec     80 12 36 F3 | 	fle	arg01, #128 wc
345f0                 | '     return __ctype[c];
345f0     02 00 00 FF 
345f4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
345f8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
345fc     09 FB C1 FA | 	rdbyte	result1, arg01
34600     02 00 00 FF 
34604     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34608     0C FA CD F7 | 	test	result1, #12 wz
3460c     1C 00 90 AD |  if_e	jmp	#LR__5251
34610     00 0B 02 F6 | 	mov	_var06, _var01
34614     01 0A 06 F1 | 	add	_var06, #1
34618     00 0D C2 FA | 	rdbyte	_var07, _var01
3461c     05 01 02 F6 | 	mov	_var01, _var06
34620     03 0D 42 FC | 	wrbyte	_var07, _var04
34624     01 06 06 F1 | 	add	_var04, #1
34628     B4 FF 9F FD | 	jmp	#LR__5250
3462c                 | LR__5251
3462c                 | LR__5252
3462c     03 01 48 FC | 	wrbyte	#0, _var04
34630     02 00 00 FF 
34634     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
34638     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
3463c     02 00 00 FF 
34640     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
34644     20 00 90 AD |  if_e	jmp	#LR__5253
34648     02 00 00 FF 
3464c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
34650     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
34654     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
34658     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3465c     02 00 00 FF 
34660     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
34664     1C 00 90 FD | 	jmp	#LR__5254
34668                 | LR__5253
34668     02 00 00 FF 
3466c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
34670     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
34674     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
34678     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3467c     02 00 00 FF 
34680     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
34684                 | LR__5254
34684     02 00 00 FF 
34688     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3468c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
34690     02 00 00 FF 
34694     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
34698     20 00 90 AD |  if_e	jmp	#LR__5255
3469c     02 00 00 FF 
346a0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
346a4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
346a8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
346ac     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
346b0     02 00 00 FF 
346b4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
346b8     1C 00 90 FD | 	jmp	#LR__5256
346bc                 | LR__5255
346bc     02 00 00 FF 
346c0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
346c4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
346c8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
346cc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
346d0     02 00 00 FF 
346d4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
346d8                 | LR__5256
346d8     08 03 02 FD | 	qmul	_var02, _var09
346dc                 | ' 		_tzname[1] = stdname;
346dc                 | ' 
346dc                 | '         return sgn * off;
346dc     18 FA 61 FD | 	getqx	result1
346e0                 | LR__5257
346e0                 | _fatfs_cc___tzoffset_ret
346e0     2D 00 64 FD | 	ret
346e4                 | 
346e4                 | _fatfs_cc___indst
346e4     10 12 06 F1 | 	add	arg01, #16
346e8     09 01 02 FB | 	rdlong	_var01, arg01
346ec     10 12 86 F1 | 	sub	arg01, #16
346f0     02 00 0E F2 | 	cmp	_var01, #2 wz
346f4     30 00 90 5D |  if_ne	jmp	#LR__5260
346f8     07 00 06 F6 | 	mov	_var01, #7
346fc     18 12 06 F1 | 	add	arg01, #24
34700     09 03 02 FB | 	rdlong	_var02, arg01
34704     01 01 02 F1 | 	add	_var01, _var02
34708     0C 12 86 F1 | 	sub	arg01, #12
3470c     09 05 02 FB | 	rdlong	_var03, arg01
34710     02 01 82 F1 | 	sub	_var01, _var03
34714     00 00 56 F2 | 	cmps	_var01, #0 wc
34718                 | '                         return 1;
34718     01 FA 05 C6 |  if_b	mov	result1, #1
3471c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
34720                 | '                 return 0;
34720     00 FA 05 F6 | 	mov	result1, #0
34724     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
34728                 | LR__5260
34728     10 12 06 F1 | 	add	arg01, #16
3472c     09 01 02 FB | 	rdlong	_var01, arg01
34730     10 12 86 F1 | 	sub	arg01, #16
34734     0A 00 0E F2 | 	cmp	_var01, #10 wz
34738     28 00 90 5D |  if_ne	jmp	#LR__5261
3473c     18 12 06 F1 | 	add	arg01, #24
34740     09 01 02 FB | 	rdlong	_var01, arg01
34744     0C 12 86 F1 | 	sub	arg01, #12
34748     09 07 02 FB | 	rdlong	_var04, arg01
3474c     03 01 82 F1 | 	sub	_var01, _var04
34750     00 00 56 F2 | 	cmps	_var01, #0 wc
34754                 | '                         return 0;
34754     00 FA 05 C6 |  if_b	mov	result1, #0
34758     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
3475c                 | '                 return 1;
3475c     01 FA 05 F6 | 	mov	result1, #1
34760     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
34764                 | LR__5261
34764                 | '         }
34764                 | ' 
34764                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
34764     00 00 06 F6 | 	mov	_var01, #0
34768     10 12 06 F1 | 	add	arg01, #16
3476c     09 03 02 FB | 	rdlong	_var02, arg01
34770     10 12 86 F1 | 	sub	arg01, #16
34774     03 02 56 F2 | 	cmps	_var02, #3 wc
34778     10 00 90 CD |  if_b	jmp	#LR__5262
3477c     10 12 06 F1 | 	add	arg01, #16
34780     09 05 02 FB | 	rdlong	_var03, arg01
34784     0A 04 56 F2 | 	cmps	_var03, #10 wc
34788     01 00 06 C6 |  if_b	mov	_var01, #1
3478c                 | LR__5262
3478c     00 FB 01 F6 | 	mov	result1, _var01
34790                 | _fatfs_cc___indst_ret
34790     2D 00 64 FD | 	ret
34794                 | 
34794                 | ' 	
34794                 | ' 	FUNCTION pfunc(c as integer) as integer
34794                 | ___strs_cl_pfunc
34794                 | ' 		if (i < 16) then
34794     04 E4 05 F1 | 	add	objptr, #4
34798     F2 FA 01 FB | 	rdlong	result1, objptr
3479c     04 E4 85 F1 | 	sub	objptr, #4
347a0     10 FA 55 F2 | 	cmps	result1, #16 wc
347a4     2C 00 90 3D |  if_ae	jmp	#LR__5270
347a8     F2 FA 01 FB | 	rdlong	result1, objptr
347ac     04 E4 05 F1 | 	add	objptr, #4
347b0     F2 00 02 FB | 	rdlong	_var01, objptr
347b4     FD 00 02 F1 | 	add	_var01, result1
347b8     00 13 42 FC | 	wrbyte	arg01, _var01
347bc     F2 FA 01 FB | 	rdlong	result1, objptr
347c0     01 FA 05 F1 | 	add	result1, #1
347c4     F2 FA 61 FC | 	wrlong	result1, objptr
347c8     04 E4 85 F1 | 	sub	objptr, #4
347cc                 | ' 			p(i) = c
347cc                 | ' 			i = i+1
347cc                 | ' 			return 1
347cc     01 FA 05 F6 | 	mov	result1, #1
347d0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
347d4                 | LR__5270
347d4                 | ' 			return -1
347d4     01 FA 65 F6 | 	neg	result1, #1
347d8                 | ___strs_cl_pfunc_ret
347d8     2D 00 64 FD | 	ret
347dc                 | 
347dc                 | __struct__s_vfs_file_t_putchar
347dc     04 4A 05 F6 | 	mov	COUNT_, #4
347e0     A8 00 A0 FD | 	call	#pushregs_
347e4     1C E4 05 F1 | 	add	objptr, #28
347e8     F2 26 0A FB | 	rdlong	local01, objptr wz
347ec     1C E4 85 F1 | 	sub	objptr, #28
347f0     00 FA 05 A6 |  if_e	mov	result1, #0
347f4     48 00 90 AD |  if_e	jmp	#LR__5280
347f8     1C E4 05 F1 | 	add	objptr, #28
347fc     F2 28 02 FB | 	rdlong	local02, objptr
34800     14 2B 02 F6 | 	mov	local03, local02
34804     1C E4 85 F1 | 	sub	objptr, #28
34808     13 2A 46 F7 | 	zerox	local03, #19
3480c     14 28 46 F0 | 	shr	local02, #20
34810     02 28 66 F0 | 	shl	local02, #2
34814     ED 28 02 F1 | 	add	local02, __methods__
34818     14 29 02 FB | 	rdlong	local02, local02
3481c     F2 14 02 F6 | 	mov	arg02, objptr
34820     F2 2C 02 F6 | 	mov	local04, objptr
34824     15 E5 01 F6 | 	mov	objptr, local03
34828     2D 28 62 FD | 	call	local02
3482c     16 E5 01 F6 | 	mov	objptr, local04
34830                 | '     return (i < 0) ? 0 : 1;
34830     00 FA 55 F2 | 	cmps	result1, #0 wc
34834     00 26 06 C6 |  if_b	mov	local01, #0
34838     01 26 06 36 |  if_ae	mov	local01, #1
3483c     13 FB 01 F6 | 	mov	result1, local01
34840                 | LR__5280
34840     A7 F0 03 F6 | 	mov	ptra, fp
34844     B2 00 A0 FD | 	call	#popregs_
34848                 | __struct__s_vfs_file_t_putchar_ret
34848     2D 00 64 FD | 	ret
3484c                 | 
3484c                 | __struct__s_vfs_file_t_getchar
3484c     03 4A 05 F6 | 	mov	COUNT_, #3
34850     A8 00 A0 FD | 	call	#pushregs_
34854     20 E4 05 F1 | 	add	objptr, #32
34858     F2 12 0A FB | 	rdlong	arg01, objptr wz
3485c     20 E4 85 F1 | 	sub	objptr, #32
34860     01 FA 65 A6 |  if_e	neg	result1, #1
34864     38 00 90 AD |  if_e	jmp	#LR__5290
34868                 | '     return getcf(__this);
34868     20 E4 05 F1 | 	add	objptr, #32
3486c     F2 26 02 FB | 	rdlong	local01, objptr
34870     13 29 02 F6 | 	mov	local02, local01
34874     20 E4 85 F1 | 	sub	objptr, #32
34878     13 28 46 F7 | 	zerox	local02, #19
3487c     14 26 46 F0 | 	shr	local01, #20
34880     02 26 66 F0 | 	shl	local01, #2
34884     ED 26 02 F1 | 	add	local01, __methods__
34888     13 27 02 FB | 	rdlong	local01, local01
3488c     F2 12 02 F6 | 	mov	arg01, objptr
34890     F2 2A 02 F6 | 	mov	local03, objptr
34894     14 E5 01 F6 | 	mov	objptr, local02
34898     2D 26 62 FD | 	call	local01
3489c     15 E5 01 F6 | 	mov	objptr, local03
348a0                 | LR__5290
348a0     A7 F0 03 F6 | 	mov	ptra, fp
348a4     B2 00 A0 FD | 	call	#popregs_
348a8                 | __struct__s_vfs_file_t_getchar_ret
348a8     2D 00 64 FD | 	ret
348ac                 | 
348ac                 | __struct___bas_wrap_sender_tx
348ac     03 4A 05 F6 | 	mov	COUNT_, #3
348b0     A8 00 A0 FD | 	call	#pushregs_
348b4     F2 26 02 FB | 	rdlong	local01, objptr
348b8     13 29 02 F6 | 	mov	local02, local01
348bc     13 26 46 F7 | 	zerox	local01, #19
348c0     14 28 46 F0 | 	shr	local02, #20
348c4     02 28 66 F0 | 	shl	local02, #2
348c8     ED 28 02 F1 | 	add	local02, __methods__
348cc     14 29 02 FB | 	rdlong	local02, local02
348d0     F2 2A 02 F6 | 	mov	local03, objptr
348d4     13 E5 01 F6 | 	mov	objptr, local01
348d8     2D 28 62 FD | 	call	local02
348dc     15 E5 01 F6 | 	mov	objptr, local03
348e0     01 FA 05 F6 | 	mov	result1, #1
348e4     A7 F0 03 F6 | 	mov	ptra, fp
348e8     B2 00 A0 FD | 	call	#popregs_
348ec                 | __struct___bas_wrap_sender_tx_ret
348ec     2D 00 64 FD | 	ret
348f0                 | 
348f0                 | __struct___bas_wrap_sender_rx
348f0     03 4A 05 F6 | 	mov	COUNT_, #3
348f4     A8 00 A0 FD | 	call	#pushregs_
348f8     04 E4 05 F1 | 	add	objptr, #4
348fc     F2 26 02 FB | 	rdlong	local01, objptr
34900     13 29 02 F6 | 	mov	local02, local01
34904     04 E4 85 F1 | 	sub	objptr, #4
34908     13 28 46 F7 | 	zerox	local02, #19
3490c     14 26 46 F0 | 	shr	local01, #20
34910     02 26 66 F0 | 	shl	local01, #2
34914     ED 26 02 F1 | 	add	local01, __methods__
34918     13 27 02 FB | 	rdlong	local01, local01
3491c     F2 2A 02 F6 | 	mov	local03, objptr
34920     14 E5 01 F6 | 	mov	objptr, local02
34924     2D 26 62 FD | 	call	local01
34928     15 E5 01 F6 | 	mov	objptr, local03
3492c     A7 F0 03 F6 | 	mov	ptra, fp
34930     B2 00 A0 FD | 	call	#popregs_
34934                 | __struct___bas_wrap_sender_rx_ret
34934     2D 00 64 FD | 	ret
34938                 | 
34938                 | __struct___bas_wrap_sender_close
34938     03 4A 05 F6 | 	mov	COUNT_, #3
3493c     A8 00 A0 FD | 	call	#pushregs_
34940     08 E4 05 F1 | 	add	objptr, #8
34944     F2 26 02 FB | 	rdlong	local01, objptr
34948     13 29 02 F6 | 	mov	local02, local01
3494c     08 E4 85 F1 | 	sub	objptr, #8
34950     13 28 46 F7 | 	zerox	local02, #19
34954     14 26 46 F0 | 	shr	local01, #20
34958     02 26 66 F0 | 	shl	local01, #2
3495c     ED 26 02 F1 | 	add	local01, __methods__
34960     13 27 02 FB | 	rdlong	local01, local01
34964     F2 2A 02 F6 | 	mov	local03, objptr
34968     14 E5 01 F6 | 	mov	objptr, local02
3496c     2D 26 62 FD | 	call	local01
34970     15 E5 01 F6 | 	mov	objptr, local03
34974     A7 F0 03 F6 | 	mov	ptra, fp
34978     B2 00 A0 FD | 	call	#popregs_
3497c                 | __struct___bas_wrap_sender_close_ret
3497c     2D 00 64 FD | 	ret
34980                 | 
34980                 | LR__5300
34980     2F          | 	byte	"/"
34981     00          | 	byte	0
34982                 | LR__5301
34982     69 6E 66    | 	byte	"inf"
34985     00          | 	byte	0
34986                 | LR__5302
34986     6E 61 6E    | 	byte	"nan"
34989     00          | 	byte	0
3498a                 | LR__5303
3498a                 | 	byte	
3498a     00          | 	byte	0
3498b                 | LR__5304
3498b                 | 	byte	
3498b     00          | 	byte	0
3498c                 | LR__5305
3498c                 | 	byte	
3498c     00          | 	byte	0
3498d                 | LR__5306
3498d                 | 	byte	
3498d     00          | 	byte	0
3498e                 | LR__5307
3498e                 | 	byte	
3498e     00          | 	byte	0
3498f                 | LR__5308
3498f                 | 	byte	
3498f     00          | 	byte	0
34990                 | LR__5309
34990                 | 	byte	
34990     00          | 	byte	0
34991                 | LR__5310
34991                 | 	byte	
34991     00          | 	byte	0
34992                 | LR__5311
34992     00          | 	byte	0
34993     00          | 	byte	0
34994                 | LR__5312
34994     00          | 	byte	0
34995     00          | 	byte	0
34996                 | LR__5313
34996     00          | 	byte	0
34997     00          | 	byte	0
34998                 | LR__5314
34998     20 21 21 21 
3499c     20 63 6F 72 
349a0     72 75 70 74 
349a4     65 64 20 68 
349a8     65 61 70 3F 
349ac     3F 3F 20 21 
349b0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
349b3     00          | 	byte	0
349b4                 | LR__5315
349b4     20 21 21 21 
349b8     20 6F 75 74 
349bc     20 6F 66 20 
349c0     68 65 61 70 
349c4     20 6D 65 6D 
349c8     6F 72 79 20 
349cc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
349d0     00          | 	byte	0
349d1                 | LR__5316
349d1     20 21 21 21 
349d5     20 63 6F 72 
349d9     72 75 70 74 
349dd     65 64 20 68 
349e1     65 61 70 20 
349e5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
349e9     00          | 	byte	0
349ea                 | LR__5317
349ea     00          | 	byte	0
349eb     00          | 	byte	0
349ec                 | LR__5318
349ec     2E          | 	byte	"."
349ed     00          | 	byte	0
349ee                 | LR__5319
349ee     00          | 	byte	0
349ef     00          | 	byte	0
349f0                 | LR__5320
349f0     00          | 	byte	0
349f1     00          | 	byte	0
349f2                 | LR__5321
349f2     00          | 	byte	0
349f3     00          | 	byte	0
349f4                 | LR__5322
349f4     2A 3A 3C 3E 
349f8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
349fc     00          | 	byte	0
349fd                 | LR__5323
349fd     2B 2C 3B 3D 
34a01     5B 5D       | 	byte	"+,;=[]"
34a03     00          | 	byte	0
34a04                 | LR__5324
34a04     46 41 54 33 
34a08     32 20 20 20 | 	byte	"FAT32   "
34a0c     00          | 	byte	0
34a0d                 | LR__5325
34a0d     54 5A       | 	byte	"TZ"
34a0f     00          | 	byte	0
34a10                 | LR__5326
34a10     00          | 	byte	0
34a11     00          | 	byte	0
34a12                 | LR__5327
34a12                 | 	byte	
34a12     00          | 	byte	0
34a13                 | LR__5328
34a13                 | 	byte	
34a13     00          | 	byte	0
34a14                 | LR__5329
34a14                 | 	byte	
34a14     00          | 	byte	0
34a15                 | LR__5330
34a15                 | 	byte	
34a15     00          | 	byte	0
34a16                 | LR__5331
34a16     22          | 	byte	34
34a17     00          | 	byte	0
34a18                 | LR__5332
34a18     22          | 	byte	34
34a19     00          | 	byte	0
34a1a                 | LR__5333
34a1a     3A          | 	byte	":"
34a1b     00          | 	byte	0
34a1c                 | LR__5334
34a1c                 | 	byte	
34a1c     00          | 	byte	0
34a1d                 | LR__5335
34a1d                 | 	byte	
34a1d     00          | 	byte	0
34a1e                 | LR__5336
34a1e                 | 	byte	
34a1e     00          | 	byte	0
34a1f                 | LR__5337
34a1f                 | 	byte	
34a1f     00          | 	byte	0
34a20                 | LR__5338
34a20                 | 	byte	
34a20     00          | 	byte	0
34a21                 | LR__5339
34a21                 | 	byte	
34a21     00          | 	byte	0
34a22                 | LR__5340
34a22                 | 	byte	
34a22     00          | 	byte	0
34a23                 | LR__5341
34a23     30          | 	byte	"0"
34a24     00          | 	byte	0
34a25                 | LR__5342
34a25     22          | 	byte	34
34a26     00          | 	byte	0
34a27                 | LR__5343
34a27     22          | 	byte	34
34a28     00          | 	byte	0
34a29                 | LR__5344
34a29     22          | 	byte	34
34a2a     00          | 	byte	0
34a2b                 | LR__5345
34a2b     22          | 	byte	34
34a2c     00          | 	byte	0
34a2d                 | LR__5346
34a2d     22          | 	byte	34
34a2e     00          | 	byte	0
34a2f                 | LR__5347
34a2f     3E          | 	byte	">"
34a30     00          | 	byte	0
34a31                 | LR__5348
34a31     3C          | 	byte	"<"
34a32     00          | 	byte	0
34a33                 | LR__5349
34a33     2B          | 	byte	"+"
34a34     00          | 	byte	0
34a35                 | LR__5350
34a35     2D          | 	byte	"-"
34a36     00          | 	byte	0
34a37                 | LR__5351
34a37     2A          | 	byte	"*"
34a38     00          | 	byte	0
34a39                 | LR__5352
34a39     2F          | 	byte	"/"
34a3a     00          | 	byte	0
34a3b                 | LR__5353
34a3b     5E          | 	byte	"^"
34a3c     00          | 	byte	0
34a3d                 | LR__5354
34a3d     3D          | 	byte	"="
34a3e     00          | 	byte	0
34a3f                 | LR__5355
34a3f     2B          | 	byte	"+"
34a40     00          | 	byte	0
34a41                 | LR__5356
34a41     2B          | 	byte	"+"
34a42     00          | 	byte	0
34a43                 | LR__5357
34a43     2D          | 	byte	"-"
34a44     00          | 	byte	0
34a45                 | LR__5358
34a45     2D          | 	byte	"-"
34a46     00          | 	byte	0
34a47                 | LR__5359
34a47     3C          | 	byte	"<"
34a48     00          | 	byte	0
34a49                 | LR__5360
34a49     3E          | 	byte	">"
34a4a     00          | 	byte	0
34a4b                 | LR__5361
34a4b     22          | 	byte	34
34a4c     00          | 	byte	0
34a4d                 | LR__5362
34a4d     22          | 	byte	34
34a4e     00          | 	byte	0
34a4f                 | LR__5363
34a4f     65 6C 73 65 | 	byte	"else"
34a53     00          | 	byte	0
34a54                 | LR__5364
34a54     74 68 65 6E | 	byte	"then"
34a58     00          | 	byte	0
34a59                 | LR__5365
34a59     2E          | 	byte	"."
34a5a     00          | 	byte	0
34a5b                 | LR__5366
34a5b     3F          | 	byte	"?"
34a5c     00          | 	byte	0
34a5d                 | LR__5367
34a5d     3F          | 	byte	"?"
34a5e     00          | 	byte	0
34a5f                 | LR__5368
34a5f     6D 6F 75 73 
34a63     65          | 	byte	"mouse"
34a64     00          | 	byte	0
34a65                 | LR__5369
34a65     63 75 72 73 
34a69     6F 72       | 	byte	"cursor"
34a6b     00          | 	byte	0
34a6c                 | LR__5370
34a6c     63 6C 69 63 
34a70     6B          | 	byte	"click"
34a71     00          | 	byte	0
34a72                 | LR__5371
34a72     6F 6E       | 	byte	"on"
34a74     00          | 	byte	0
34a75                 | LR__5372
34a75     31          | 	byte	"1"
34a76     00          | 	byte	0
34a77                 | LR__5373
34a77     6F 66 66    | 	byte	"off"
34a7a     00          | 	byte	0
34a7b                 | LR__5374
34a7b     30          | 	byte	"0"
34a7c     00          | 	byte	0
34a7d                 | LR__5375
34a7d     6D 6F 64 65 | 	byte	"mode"
34a81     00          | 	byte	0
34a82                 | LR__5376
34a82     6D 2E       | 	byte	"m."
34a84     00          | 	byte	0
34a85                 | LR__5377
34a85     61 74 61 72 
34a89     69          | 	byte	"atari"
34a8a     00          | 	byte	0
34a8b                 | LR__5378
34a8b     30          | 	byte	"0"
34a8c     00          | 	byte	0
34a8d                 | LR__5379
34a8d     70 63 5F 61 
34a91     6D 62 65 72 | 	byte	"pc_amber"
34a95     00          | 	byte	0
34a96                 | LR__5380
34a96     31          | 	byte	"1"
34a97     00          | 	byte	0
34a98                 | LR__5381
34a98     70 63 5F 67 
34a9c     72 65 65 6E | 	byte	"pc_green"
34aa0     00          | 	byte	0
34aa1                 | LR__5382
34aa1     32          | 	byte	"2"
34aa2     00          | 	byte	0
34aa3                 | LR__5383
34aa3     70 63 5F 77 
34aa7     68 69 74 65 | 	byte	"pc_white"
34aab     00          | 	byte	0
34aac                 | LR__5384
34aac     33          | 	byte	"3"
34aad     00          | 	byte	0
34aae                 | LR__5385
34aae     73 74       | 	byte	"st"
34ab0     00          | 	byte	0
34ab1                 | LR__5386
34ab1     34          | 	byte	"4"
34ab2     00          | 	byte	0
34ab3                 | LR__5387
34ab3                 | 	byte	
34ab3     00          | 	byte	0
34ab4                 | LR__5388
34ab4     6C 6F 61 64 | 	byte	"load"
34ab8     00          | 	byte	0
34ab9                 | LR__5389
34ab9     73 61 76 65 | 	byte	"save"
34abd     00          | 	byte	0
34abe                 | LR__5390
34abe     62 72 75 6E | 	byte	"brun"
34ac2     00          | 	byte	0
34ac3                 | LR__5391
34ac3     72 75 6E    | 	byte	"run"
34ac6     00          | 	byte	0
34ac7                 | LR__5392
34ac7     6C 6F 2E    | 	byte	"lo."
34aca     00          | 	byte	0
34acb                 | LR__5393
34acb     73 2E       | 	byte	"s."
34acd     00          | 	byte	0
34ace                 | LR__5394
34ace     62 72 2E    | 	byte	"br."
34ad1     00          | 	byte	0
34ad2                 | LR__5395
34ad2     65 6E 74 65 
34ad6     72          | 	byte	"enter"
34ad7     00          | 	byte	0
34ad8                 | LR__5396
34ad8     65 2E       | 	byte	"e."
34ada     00          | 	byte	0
34adb                 | LR__5397
34adb     64 65 6C 65 
34adf     74 65       | 	byte	"delete"
34ae1     00          | 	byte	0
34ae2                 | LR__5398
34ae2     6D 6B 64 69 
34ae6     72          | 	byte	"mkdir"
34ae7     00          | 	byte	0
34ae8                 | LR__5399
34ae8     63 64       | 	byte	"cd"
34aea     00          | 	byte	0
34aeb                 | LR__5400
34aeb     63 64 2E    | 	byte	"cd."
34aee     00          | 	byte	0
34aef                 | LR__5401
34aef     2E          | 	byte	"."
34af0     00          | 	byte	0
34af1                 | LR__5402
34af1     2E 2E       | 	byte	".."
34af3     00          | 	byte	0
34af4                 | LR__5403
34af4     63 64       | 	byte	"cd"
34af6     00          | 	byte	0
34af7                 | LR__5404
34af7     2F          | 	byte	"/"
34af8     00          | 	byte	0
34af9                 | LR__5405
34af9                 | 	byte	
34af9     00          | 	byte	0
34afa                 | LR__5406
34afa                 | 	byte	
34afa     00          | 	byte	0
34afb                 | LR__5407
34afb                 | 	byte	
34afb     00          | 	byte	0
34afc                 | LR__5408
34afc                 | 	byte	
34afc     00          | 	byte	0
34afd                 | LR__5409
34afd                 | 	byte	
34afd     00          | 	byte	0
34afe                 | LR__5410
34afe     52 65 61 64 
34b02     79          | 	byte	"Ready"
34b03     00          | 	byte	0
34b04                 | LR__5411
34b04     2B          | 	byte	"+"
34b05     00          | 	byte	0
34b06                 | LR__5412
34b06     2D          | 	byte	"-"
34b07     00          | 	byte	0
34b08                 | LR__5413
34b08     6F 72       | 	byte	"or"
34b0a     00          | 	byte	0
34b0b                 | LR__5414
34b0b     78 6F 72    | 	byte	"xor"
34b0e     00          | 	byte	0
34b0f                 | LR__5415
34b0f     2A          | 	byte	"*"
34b10     00          | 	byte	0
34b11                 | LR__5416
34b11     2F          | 	byte	"/"
34b12     00          | 	byte	0
34b13                 | LR__5417
34b13     61 6E 64    | 	byte	"and"
34b16     00          | 	byte	0
34b17                 | LR__5418
34b17     64 69 76    | 	byte	"div"
34b1a     00          | 	byte	0
34b1b                 | LR__5419
34b1b     6D 6F 64    | 	byte	"mod"
34b1e     00          | 	byte	0
34b1f                 | LR__5420
34b1f     73 68 6C    | 	byte	"shl"
34b22     00          | 	byte	0
34b23                 | LR__5421
34b23     73 68 72    | 	byte	"shr"
34b26     00          | 	byte	0
34b27                 | LR__5422
34b27     5E          | 	byte	"^"
34b28     00          | 	byte	0
34b29                 | LR__5423
34b29     6E 6F 74    | 	byte	"not"
34b2c     00          | 	byte	0
34b2d                 | LR__5424
34b2d     40          | 	byte	"@"
34b2e     00          | 	byte	0
34b2f                 | LR__5425
34b2f     3D          | 	byte	"="
34b30     00          | 	byte	0
34b31                 | LR__5426
34b31     3E 3D       | 	byte	">="
34b33     00          | 	byte	0
34b34                 | LR__5427
34b34     3C 3D       | 	byte	"<="
34b36     00          | 	byte	0
34b37                 | LR__5428
34b37     3C          | 	byte	"<"
34b38     00          | 	byte	0
34b39                 | LR__5429
34b39     3E          | 	byte	">"
34b3a     00          | 	byte	0
34b3b                 | LR__5430
34b3b     3C 3E       | 	byte	"<>"
34b3d     00          | 	byte	0
34b3e                 | LR__5431
34b3e     2B 2B       | 	byte	"++"
34b40     00          | 	byte	0
34b41                 | LR__5432
34b41     2D 2D       | 	byte	"--"
34b43     00          | 	byte	0
34b44                 | LR__5433
34b44     23          | 	byte	"#"
34b45     00          | 	byte	0
34b46                 | LR__5434
34b46     30          | 	byte	"0"
34b47     00          | 	byte	0
34b48                 | LR__5435
34b48     39          | 	byte	"9"
34b49     00          | 	byte	0
34b4a                 | LR__5436
34b4a     23 72 65 61 
34b4e     64          | 	byte	"#read"
34b4f     00          | 	byte	0
34b50                 | LR__5437
34b50     23 77 72 69 
34b54     74 65       | 	byte	"#write"
34b56     00          | 	byte	0
34b57                 | LR__5438
34b57     23 61 70 70 
34b5b     65 6E 64    | 	byte	"#append"
34b5e     00          | 	byte	0
34b5f                 | LR__5439
34b5f     23          | 	byte	"#"
34b60     00          | 	byte	0
34b61                 | LR__5440
34b61     23          | 	byte	"#"
34b62     00          | 	byte	0
34b63                 | LR__5441
34b63     2D          | 	byte	"-"
34b64     00          | 	byte	0
34b65                 | LR__5442
34b65     30          | 	byte	"0"
34b66     00          | 	byte	0
34b67                 | LR__5443
34b67     63          | 	byte	"c"
34b68     00          | 	byte	0
34b69                 | LR__5444
34b69     63 23       | 	byte	"c#"
34b6b     00          | 	byte	0
34b6c                 | LR__5445
34b6c     64          | 	byte	"d"
34b6d     00          | 	byte	0
34b6e                 | LR__5446
34b6e     64 23       | 	byte	"d#"
34b70     00          | 	byte	0
34b71                 | LR__5447
34b71     65          | 	byte	"e"
34b72     00          | 	byte	0
34b73                 | LR__5448
34b73     66          | 	byte	"f"
34b74     00          | 	byte	0
34b75                 | LR__5449
34b75     66 23       | 	byte	"f#"
34b77     00          | 	byte	0
34b78                 | LR__5450
34b78     67          | 	byte	"g"
34b79     00          | 	byte	0
34b7a                 | LR__5451
34b7a     67 23       | 	byte	"g#"
34b7c     00          | 	byte	0
34b7d                 | LR__5452
34b7d     61          | 	byte	"a"
34b7e     00          | 	byte	0
34b7f                 | LR__5453
34b7f     61 23       | 	byte	"a#"
34b81     00          | 	byte	0
34b82                 | LR__5454
34b82     68          | 	byte	"h"
34b83     00          | 	byte	0
34b84                 | LR__5455
34b84     62          | 	byte	"b"
34b85     00          | 	byte	0
34b86                 | LR__5456
34b86     2B          | 	byte	"+"
34b87     00          | 	byte	0
34b88                 | LR__5457
34b88     2D          | 	byte	"-"
34b89     00          | 	byte	0
34b8a                 | LR__5458
34b8a     3D          | 	byte	"="
34b8b     00          | 	byte	0
34b8c                 | LR__5459
34b8c     2C          | 	byte	","
34b8d     00          | 	byte	0
34b8e                 | LR__5460
34b8e     2A          | 	byte	"*"
34b8f     00          | 	byte	0
34b90                 | LR__5461
34b90     2F          | 	byte	"/"
34b91     00          | 	byte	0
34b92                 | LR__5462
34b92     3B          | 	byte	";"
34b93     00          | 	byte	0
34b94                 | LR__5463
34b94     22          | 	byte	34
34b95     00          | 	byte	0
34b96                 | LR__5464
34b96     5E          | 	byte	"^"
34b97     00          | 	byte	0
34b98                 | LR__5465
34b98     29          | 	byte	")"
34b99     00          | 	byte	0
34b9a                 | LR__5466
34b9a     28          | 	byte	"("
34b9b     00          | 	byte	0
34b9c                 | LR__5467
34b9c     3A          | 	byte	":"
34b9d     00          | 	byte	0
34b9e                 | LR__5468
34b9e     20          | 	byte	" "
34b9f     00          | 	byte	0
34ba0                 | LR__5469
34ba0     3E          | 	byte	">"
34ba1     00          | 	byte	0
34ba2                 | LR__5470
34ba2     3C          | 	byte	"<"
34ba3     00          | 	byte	0
34ba4                 | LR__5471
34ba4     3D          | 	byte	"="
34ba5     00          | 	byte	0
34ba6                 | LR__5472
34ba6     62 65 65 70 | 	byte	"beep"
34baa     00          | 	byte	0
34bab                 | LR__5473
34bab     62 2E       | 	byte	"b."
34bad     00          | 	byte	0
34bae                 | LR__5474
34bae     62 6C 69 74 | 	byte	"blit"
34bb2     00          | 	byte	0
34bb3                 | LR__5475
34bb3     62 6F 78    | 	byte	"box"
34bb6     00          | 	byte	0
34bb7                 | LR__5476
34bb7     62 72 75 6E | 	byte	"brun"
34bbb     00          | 	byte	0
34bbc                 | LR__5477
34bbc     62 72 2E    | 	byte	"br."
34bbf     00          | 	byte	0
34bc0                 | LR__5478
34bc0     63 64       | 	byte	"cd"
34bc2     00          | 	byte	0
34bc3                 | LR__5479
34bc3     63 68 61 6E 
34bc7     67 65 66 72 
34bcb     65 71       | 	byte	"changefreq"
34bcd     00          | 	byte	0
34bce                 | LR__5480
34bce     63 66 2E    | 	byte	"cf."
34bd1     00          | 	byte	0
34bd2                 | LR__5481
34bd2     63 68 61 6E 
34bd6     67 65 70 61 
34bda     6E          | 	byte	"changepan"
34bdb     00          | 	byte	0
34bdc                 | LR__5482
34bdc     63 70 2E    | 	byte	"cp."
34bdf     00          | 	byte	0
34be0                 | LR__5483
34be0     63 68 61 6E 
34be4     67 65 76 6F 
34be8     6C          | 	byte	"changevol"
34be9     00          | 	byte	0
34bea                 | LR__5484
34bea     63 76 2E    | 	byte	"cv."
34bed     00          | 	byte	0
34bee                 | LR__5485
34bee     63 68 61 6E 
34bf2     67 65 77 61 
34bf6     76 65       | 	byte	"changewave"
34bf8     00          | 	byte	0
34bf9                 | LR__5486
34bf9     63 77 2E    | 	byte	"cw."
34bfc     00          | 	byte	0
34bfd                 | LR__5487
34bfd     63 69 72 63 
34c01     6C 65       | 	byte	"circle"
34c03     00          | 	byte	0
34c04                 | LR__5488
34c04     63 69 2E    | 	byte	"ci."
34c07     00          | 	byte	0
34c08                 | LR__5489
34c08     63 6C 69 63 
34c0c     6B          | 	byte	"click"
34c0d     00          | 	byte	0
34c0e                 | LR__5490
34c0e     63 6C 6F 73 
34c12     65          | 	byte	"close"
34c13     00          | 	byte	0
34c14                 | LR__5491
34c14     63 6C 73    | 	byte	"cls"
34c17     00          | 	byte	0
34c18                 | LR__5492
34c18     63 6F 6C 6F 
34c1c     72          | 	byte	"color"
34c1d     00          | 	byte	0
34c1e                 | LR__5493
34c1e     63 2E       | 	byte	"c."
34c20     00          | 	byte	0
34c21                 | LR__5494
34c21     63 73 61 76 
34c25     65          | 	byte	"csave"
34c26     00          | 	byte	0
34c27                 | LR__5495
34c27     63 73 2E    | 	byte	"cs."
34c2a     00          | 	byte	0
34c2b                 | LR__5496
34c2b     63 75 72 73 
34c2f     6F 72       | 	byte	"cursor"
34c31     00          | 	byte	0
34c32                 | LR__5497
34c32     64 61 74 61 | 	byte	"data"
34c36     00          | 	byte	0
34c37                 | LR__5498
34c37     64 65 66 73 
34c3b     6E 64       | 	byte	"defsnd"
34c3d     00          | 	byte	0
34c3e                 | LR__5499
34c3e     64 65 66 65 
34c42     6E 76       | 	byte	"defenv"
34c44     00          | 	byte	0
34c45                 | LR__5500
34c45     64 65 66 73 
34c49     70 72 69 74 
34c4d     65          | 	byte	"defsprite"
34c4e     00          | 	byte	0
34c4f                 | LR__5501
34c4f     64 73 2E    | 	byte	"ds."
34c52     00          | 	byte	0
34c53                 | LR__5502
34c53     64 65 67    | 	byte	"deg"
34c56     00          | 	byte	0
34c57                 | LR__5503
34c57     64 65 6C 65 
34c5b     74 65       | 	byte	"delete"
34c5d     00          | 	byte	0
34c5e                 | LR__5504
34c5e     64 69 6D    | 	byte	"dim"
34c61     00          | 	byte	0
34c62                 | LR__5505
34c62     64 69 72    | 	byte	"dir"
34c65     00          | 	byte	0
34c66                 | LR__5506
34c66     64 70 6F 6B 
34c6a     65          | 	byte	"dpoke"
34c6b     00          | 	byte	0
34c6c                 | LR__5507
34c6c     64 72 61 77 | 	byte	"draw"
34c70     00          | 	byte	0
34c71                 | LR__5508
34c71     64 72 61 77 
34c75     74 6F       | 	byte	"drawto"
34c77     00          | 	byte	0
34c78                 | LR__5509
34c78     64 72 2E    | 	byte	"dr."
34c7b     00          | 	byte	0
34c7c                 | LR__5510
34c7c     65 6C 73 65 | 	byte	"else"
34c80     00          | 	byte	0
34c81                 | LR__5511
34c81     65 6E 64    | 	byte	"end"
34c84     00          | 	byte	0
34c85                 | LR__5512
34c85     65 6E 74 65 
34c89     72          | 	byte	"enter"
34c8a     00          | 	byte	0
34c8b                 | LR__5513
34c8b     65 2E       | 	byte	"e."
34c8d     00          | 	byte	0
34c8e                 | LR__5514
34c8e     66 63 69 72 
34c92     63 6C 65    | 	byte	"fcircle"
34c95     00          | 	byte	0
34c96                 | LR__5515
34c96     66 63 2E    | 	byte	"fc."
34c99     00          | 	byte	0
34c9a                 | LR__5516
34c9a     66 69 6C 6C | 	byte	"fill"
34c9e     00          | 	byte	0
34c9f                 | LR__5517
34c9f     66 69 2E    | 	byte	"fi."
34ca2     00          | 	byte	0
34ca3                 | LR__5518
34ca3     66 6F 6E 74 | 	byte	"font"
34ca7     00          | 	byte	0
34ca8                 | LR__5519
34ca8     66 6F 72    | 	byte	"for"
34cab     00          | 	byte	0
34cac                 | LR__5520
34cac     66 2E       | 	byte	"f."
34cae     00          | 	byte	0
34caf                 | LR__5521
34caf     66 72 61 6D 
34cb3     65          | 	byte	"frame"
34cb4     00          | 	byte	0
34cb5                 | LR__5522
34cb5     66 72 2E    | 	byte	"fr."
34cb8     00          | 	byte	0
34cb9                 | LR__5523
34cb9     67 65 74    | 	byte	"get"
34cbc     00          | 	byte	0
34cbd                 | LR__5524
34cbd     67 6F 73 75 
34cc1     62          | 	byte	"gosub"
34cc2     00          | 	byte	0
34cc3                 | LR__5525
34cc3     67 6F 74 6F | 	byte	"goto"
34cc7     00          | 	byte	0
34cc8                 | LR__5526
34cc8     67 2E       | 	byte	"g."
34cca     00          | 	byte	0
34ccb                 | LR__5527
34ccb     69 66       | 	byte	"if"
34ccd     00          | 	byte	0
34cce                 | LR__5528
34cce     69 6E 6B    | 	byte	"ink"
34cd1     00          | 	byte	0
34cd2                 | LR__5529
34cd2     69 2E       | 	byte	"i."
34cd4     00          | 	byte	0
34cd5                 | LR__5530
34cd5     69 6E 70 75 
34cd9     74          | 	byte	"input"
34cda     00          | 	byte	0
34cdb                 | LR__5531
34cdb     6C 69 73 74 | 	byte	"list"
34cdf     00          | 	byte	0
34ce0                 | LR__5532
34ce0     6C 2E       | 	byte	"l."
34ce2     00          | 	byte	0
34ce3                 | LR__5533
34ce3     6C 6F 61 64 | 	byte	"load"
34ce7     00          | 	byte	0
34ce8                 | LR__5534
34ce8     6C 6F 2E    | 	byte	"lo."
34ceb     00          | 	byte	0
34cec                 | LR__5535
34cec     6C 70 6F 6B 
34cf0     65          | 	byte	"lpoke"
34cf1     00          | 	byte	0
34cf2                 | LR__5536
34cf2     6D 6B 64 69 
34cf6     72          | 	byte	"mkdir"
34cf7     00          | 	byte	0
34cf8                 | LR__5537
34cf8     6D 6F 64 65 | 	byte	"mode"
34cfc     00          | 	byte	0
34cfd                 | LR__5538
34cfd     6D 2E       | 	byte	"m."
34cff     00          | 	byte	0
34d00                 | LR__5539
34d00     6D 6F 75 73 
34d04     65          | 	byte	"mouse"
34d05     00          | 	byte	0
34d06                 | LR__5540
34d06     6E 65 77    | 	byte	"new"
34d09     00          | 	byte	0
34d0a                 | LR__5541
34d0a     6E 65 78 74 | 	byte	"next"
34d0e     00          | 	byte	0
34d0f                 | LR__5542
34d0f     6E 2E       | 	byte	"n."
34d11     00          | 	byte	0
34d12                 | LR__5543
34d12     6F 6E       | 	byte	"on"
34d14     00          | 	byte	0
34d15                 | LR__5544
34d15     6F 70 65 6E | 	byte	"open"
34d19     00          | 	byte	0
34d1a                 | LR__5545
34d1a     70 61 70 65 
34d1e     72          | 	byte	"paper"
34d1f     00          | 	byte	0
34d20                 | LR__5546
34d20     70 61 2E    | 	byte	"pa."
34d23     00          | 	byte	0
34d24                 | LR__5547
34d24     70 69 6E 66 
34d28     6C 6F 61 74 | 	byte	"pinfloat"
34d2c     00          | 	byte	0
34d2d                 | LR__5548
34d2d     70 69 6E 68 
34d31     69          | 	byte	"pinhi"
34d32     00          | 	byte	0
34d33                 | LR__5549
34d33     70 69 6E 6C 
34d37     6F          | 	byte	"pinlo"
34d38     00          | 	byte	0
34d39                 | LR__5550
34d39     70 69 6E 73 
34d3d     74 61 72 74 | 	byte	"pinstart"
34d41     00          | 	byte	0
34d42                 | LR__5551
34d42     70 69 6E 74 
34d46     6F 67 67 6C 
34d4a     65          | 	byte	"pintoggle"
34d4b     00          | 	byte	0
34d4c                 | LR__5552
34d4c     70 69 6E 77 
34d50     72 69 74 65 | 	byte	"pinwrite"
34d54     00          | 	byte	0
34d55                 | LR__5553
34d55     70 6C 61 79 | 	byte	"play"
34d59     00          | 	byte	0
34d5a                 | LR__5554
34d5a     70 2E       | 	byte	"p."
34d5c     00          | 	byte	0
34d5d                 | LR__5555
34d5d     70 6C 6F 74 | 	byte	"plot"
34d61     00          | 	byte	0
34d62                 | LR__5556
34d62     70 6C 2E    | 	byte	"pl."
34d65     00          | 	byte	0
34d66                 | LR__5557
34d66     70 6F 6B 65 | 	byte	"poke"
34d6a     00          | 	byte	0
34d6b                 | LR__5558
34d6b     70 6F 70    | 	byte	"pop"
34d6e     00          | 	byte	0
34d6f                 | LR__5559
34d6f     70 6F 73 69 
34d73     74 69 6F 6E | 	byte	"position"
34d77     00          | 	byte	0
34d78                 | LR__5560
34d78     70 6F 73 2E | 	byte	"pos."
34d7c     00          | 	byte	0
34d7d                 | LR__5561
34d7d     70 72 69 6E 
34d81     74          | 	byte	"print"
34d82     00          | 	byte	0
34d83                 | LR__5562
34d83     3F          | 	byte	"?"
34d84     00          | 	byte	0
34d85                 | LR__5563
34d85     70 75 74    | 	byte	"put"
34d88     00          | 	byte	0
34d89                 | LR__5564
34d89     72 61 64    | 	byte	"rad"
34d8c     00          | 	byte	0
34d8d                 | LR__5565
34d8d     72 65 61 64 | 	byte	"read"
34d91     00          | 	byte	0
34d92                 | LR__5566
34d92     72 65 6C 65 
34d96     61 73 65    | 	byte	"release"
34d99     00          | 	byte	0
34d9a                 | LR__5567
34d9a     72 65 6D    | 	byte	"rem"
34d9d     00          | 	byte	0
34d9e                 | LR__5568
34d9e     27          | 	byte	"'"
34d9f     00          | 	byte	0
34da0                 | LR__5569
34da0     72 65 73 74 
34da4     6F 72 65    | 	byte	"restore"
34da7     00          | 	byte	0
34da8                 | LR__5570
34da8     72 65 74 75 
34dac     72 6E       | 	byte	"return"
34dae     00          | 	byte	0
34daf                 | LR__5571
34daf     72 75 6E    | 	byte	"run"
34db2     00          | 	byte	0
34db3                 | LR__5572
34db3     73 61 76 65 | 	byte	"save"
34db7     00          | 	byte	0
34db8                 | LR__5573
34db8     73 2E       | 	byte	"s."
34dba     00          | 	byte	0
34dbb                 | LR__5574
34dbb     73 65 74 64 
34dbf     65 6C 61 79 | 	byte	"setdelay"
34dc3     00          | 	byte	0
34dc4                 | LR__5575
34dc4     73 64 2E    | 	byte	"sd."
34dc7     00          | 	byte	0
34dc8                 | LR__5576
34dc8     73 65 74 65 
34dcc     6E 76       | 	byte	"setenv"
34dce     00          | 	byte	0
34dcf                 | LR__5577
34dcf     73 65 2E    | 	byte	"se."
34dd2     00          | 	byte	0
34dd3                 | LR__5578
34dd3     73 65 74 6C 
34dd7     65 6E       | 	byte	"setlen"
34dd9     00          | 	byte	0
34dda                 | LR__5579
34dda     73 6C 2E    | 	byte	"sl."
34ddd     00          | 	byte	0
34dde                 | LR__5580
34dde     73 65 74 70 
34de2     61 6E       | 	byte	"setpan"
34de4     00          | 	byte	0
34de5                 | LR__5581
34de5     73 70 2E    | 	byte	"sp."
34de8     00          | 	byte	0
34de9                 | LR__5582
34de9     73 65 74 73 
34ded     75 73 74 61 
34df1     69 6E       | 	byte	"setsustain"
34df3     00          | 	byte	0
34df4                 | LR__5583
34df4     73 73 2E    | 	byte	"ss."
34df7     00          | 	byte	0
34df8                 | LR__5584
34df8     73 65 74 76 
34dfc     6F 6C       | 	byte	"setvol"
34dfe     00          | 	byte	0
34dff                 | LR__5585
34dff     73 76 2E    | 	byte	"sv."
34e02     00          | 	byte	0
34e03                 | LR__5586
34e03     73 65 74 77 
34e07     61 76 65    | 	byte	"setwave"
34e0a     00          | 	byte	0
34e0b                 | LR__5587
34e0b     73 77 2E    | 	byte	"sw."
34e0e     00          | 	byte	0
34e0f                 | LR__5588
34e0f     73 65 74 77 
34e13     61 76       | 	byte	"setwav"
34e15     00          | 	byte	0
34e16                 | LR__5589
34e16     73 68 75 74 
34e1a     75 70       | 	byte	"shutup"
34e1c     00          | 	byte	0
34e1d                 | LR__5590
34e1d     73 68 2E    | 	byte	"sh."
34e20     00          | 	byte	0
34e21                 | LR__5591
34e21     73 6F 75 6E 
34e25     64          | 	byte	"sound"
34e26     00          | 	byte	0
34e27                 | LR__5592
34e27     73 6F 2E    | 	byte	"so."
34e2a     00          | 	byte	0
34e2b                 | LR__5593
34e2b     73 70 72 69 
34e2f     74 65       | 	byte	"sprite"
34e31     00          | 	byte	0
34e32                 | LR__5594
34e32     73 70 72 2E | 	byte	"spr."
34e36     00          | 	byte	0
34e37                 | LR__5595
34e37     74 68 65 6E | 	byte	"then"
34e3b     00          | 	byte	0
34e3c                 | LR__5596
34e3c     77 61 69 74 
34e40     6D 73       | 	byte	"waitms"
34e42     00          | 	byte	0
34e43                 | LR__5597
34e43     77 2E       | 	byte	"w."
34e45     00          | 	byte	0
34e46                 | LR__5598
34e46     77 61 69 74 
34e4a     63 6C 6F 63 
34e4e     6B          | 	byte	"waitclock"
34e4f     00          | 	byte	0
34e50                 | LR__5599
34e50     77 63 2E    | 	byte	"wc."
34e53     00          | 	byte	0
34e54                 | LR__5600
34e54     77 61 69 74 
34e58     76 62 6C    | 	byte	"waitvbl"
34e5b     00          | 	byte	0
34e5c                 | LR__5601
34e5c     77 76 2E    | 	byte	"wv."
34e5f     00          | 	byte	0
34e60                 | LR__5602
34e60     77 72 70 69 
34e64     6E          | 	byte	"wrpin"
34e65     00          | 	byte	0
34e66                 | LR__5603
34e66     77 78 70 69 
34e6a     6E          | 	byte	"wxpin"
34e6b     00          | 	byte	0
34e6c                 | LR__5604
34e6c     77 79 70 69 
34e70     6E          | 	byte	"wypin"
34e71     00          | 	byte	0
34e72                 | LR__5605
34e72     61 62 73    | 	byte	"abs"
34e75     00          | 	byte	0
34e76                 | LR__5606
34e76     61 63 6F 73 | 	byte	"acos"
34e7a     00          | 	byte	0
34e7b                 | LR__5607
34e7b     61 64 72    | 	byte	"adr"
34e7e     00          | 	byte	0
34e7f                 | LR__5608
34e7f     61 64 64 72 | 	byte	"addr"
34e83     00          | 	byte	0
34e84                 | LR__5609
34e84     61 73 63    | 	byte	"asc"
34e87     00          | 	byte	0
34e88                 | LR__5610
34e88     61 73 69 6E | 	byte	"asin"
34e8c     00          | 	byte	0
34e8d                 | LR__5611
34e8d     61 74 6E    | 	byte	"atn"
34e90     00          | 	byte	0
34e91                 | LR__5612
34e91     62 69 6E 24 | 	byte	"bin$"
34e95     00          | 	byte	0
34e96                 | LR__5613
34e96     63 68 72 24 | 	byte	"chr$"
34e9a     00          | 	byte	0
34e9b                 | LR__5614
34e9b     63 6F 73    | 	byte	"cos"
34e9e     00          | 	byte	0
34e9f                 | LR__5615
34e9f     64 70 65 65 
34ea3     6B          | 	byte	"dpeek"
34ea4     00          | 	byte	0
34ea5                 | LR__5616
34ea5     66 72 61 6D 
34ea9     65 62 75 66 | 	byte	"framebuf"
34ead     00          | 	byte	0
34eae                 | LR__5617
34eae     66 62 2E    | 	byte	"fb."
34eb1     00          | 	byte	0
34eb2                 | LR__5618
34eb2     66 72 65    | 	byte	"fre"
34eb5     00          | 	byte	0
34eb6                 | LR__5619
34eb6     67 65 74 70 
34eba     69 78 65 6C | 	byte	"getpixel"
34ebe     00          | 	byte	0
34ebf                 | LR__5620
34ebf     67 65 2E    | 	byte	"ge."
34ec2     00          | 	byte	0
34ec3                 | LR__5621
34ec3     67 65 74 65 
34ec7     6E 76 73 75 
34ecb     73 74 61 69 
34ecf     6E          | 	byte	"getenvsustain"
34ed0     00          | 	byte	0
34ed1                 | LR__5622
34ed1     67 65 74 6E 
34ed5     6F 74 65 76 
34ed9     61 6C 75 65 | 	byte	"getnotevalue"
34edd     00          | 	byte	0
34ede                 | LR__5623
34ede     67 65 74 74 
34ee2     69 6D 65    | 	byte	"gettime"
34ee5     00          | 	byte	0
34ee6                 | LR__5624
34ee6     68 65 78 24 | 	byte	"hex$"
34eea     00          | 	byte	0
34eeb                 | LR__5625
34eeb     69 6E 6B 65 
34eef     79 24       | 	byte	"inkey$"
34ef1     00          | 	byte	0
34ef2                 | LR__5626
34ef2     69 6E 74    | 	byte	"int"
34ef5     00          | 	byte	0
34ef6                 | LR__5627
34ef6     6C 65 66 74 
34efa     24          | 	byte	"left$"
34efb     00          | 	byte	0
34efc                 | LR__5628
34efc     6C 65 6E    | 	byte	"len"
34eff     00          | 	byte	0
34f00                 | LR__5629
34f00     6C 6F 67    | 	byte	"log"
34f03     00          | 	byte	0
34f04                 | LR__5630
34f04     6C 70 65 65 
34f08     6B          | 	byte	"lpeek"
34f09     00          | 	byte	0
34f0a                 | LR__5631
34f0a     6D 69 64 24 | 	byte	"mid$"
34f0e     00          | 	byte	0
34f0f                 | LR__5632
34f0f     6D 6F 75 73 
34f13     65 6B       | 	byte	"mousek"
34f15     00          | 	byte	0
34f16                 | LR__5633
34f16     6D 6F 75 73 
34f1a     65 77       | 	byte	"mousew"
34f1c     00          | 	byte	0
34f1d                 | LR__5634
34f1d     6D 6F 75 73 
34f21     65 78       | 	byte	"mousex"
34f23     00          | 	byte	0
34f24                 | LR__5635
34f24     6D 6F 75 73 
34f28     65 79       | 	byte	"mousey"
34f2a     00          | 	byte	0
34f2b                 | LR__5636
34f2b     70 65 65 6B | 	byte	"peek"
34f2f     00          | 	byte	0
34f30                 | LR__5637
34f30     70 69 6E 72 
34f34     65 61 64    | 	byte	"pinread"
34f37     00          | 	byte	0
34f38                 | LR__5638
34f38     72 64 70 69 
34f3c     6E          | 	byte	"rdpin"
34f3d     00          | 	byte	0
34f3e                 | LR__5639
34f3e     72 69 67 68 
34f42     74 24       | 	byte	"right$"
34f44     00          | 	byte	0
34f45                 | LR__5640
34f45     72 71 70 69 
34f49     6E          | 	byte	"rqpin"
34f4a     00          | 	byte	0
34f4b                 | LR__5641
34f4b     72 6F 75 6E 
34f4f     64          | 	byte	"round"
34f50     00          | 	byte	0
34f51                 | LR__5642
34f51     72 6E 64    | 	byte	"rnd"
34f54     00          | 	byte	0
34f55                 | LR__5643
34f55     73 69 6E    | 	byte	"sin"
34f58     00          | 	byte	0
34f59                 | LR__5644
34f59     73 71 72    | 	byte	"sqr"
34f5c     00          | 	byte	0
34f5d                 | LR__5645
34f5d     73 74 69 63 
34f61     6B          | 	byte	"stick"
34f62     00          | 	byte	0
34f63                 | LR__5646
34f63     73 74 72 69 
34f67     67          | 	byte	"strig"
34f68     00          | 	byte	0
34f69                 | LR__5647
34f69     73 74 72 24 | 	byte	"str$"
34f6d     00          | 	byte	0
34f6e                 | LR__5648
34f6e     74 61 6E    | 	byte	"tan"
34f71     00          | 	byte	0
34f72                 | LR__5649
34f72     76 61 6C    | 	byte	"val"
34f75     00          | 	byte	0
34f76                 | LR__5650
34f76     76 61 72 70 
34f7a     74 72       | 	byte	"varptr"
34f7c     00          | 	byte	0
34f7d                 | LR__5651
34f7d     61          | 	byte	"a"
34f7e     00          | 	byte	0
34f7f                 | LR__5652
34f7f     7A          | 	byte	"z"
34f80     00          | 	byte	0
34f81                 | LR__5653
34f81     5F          | 	byte	"_"
34f82     00          | 	byte	0
34f83                 | LR__5654
34f83     61          | 	byte	"a"
34f84     00          | 	byte	0
34f85                 | LR__5655
34f85     7A          | 	byte	"z"
34f86     00          | 	byte	0
34f87                 | LR__5656
34f87     30          | 	byte	"0"
34f88     00          | 	byte	0
34f89                 | LR__5657
34f89     39          | 	byte	"9"
34f8a     00          | 	byte	0
34f8b                 | LR__5658
34f8b     5F          | 	byte	"_"
34f8c     00          | 	byte	0
34f8d                 | LR__5659
34f8d     2E          | 	byte	"."
34f8e     00          | 	byte	0
34f8f                 | LR__5660
34f8f     61          | 	byte	"a"
34f90     00          | 	byte	0
34f91                 | LR__5661
34f91     7A          | 	byte	"z"
34f92     00          | 	byte	0
34f93                 | LR__5662
34f93     30          | 	byte	"0"
34f94     00          | 	byte	0
34f95                 | LR__5663
34f95     39          | 	byte	"9"
34f96     00          | 	byte	0
34f97                 | LR__5664
34f97     5F          | 	byte	"_"
34f98     00          | 	byte	0
34f99                 | LR__5665
34f99     24          | 	byte	"$"
34f9a     00          | 	byte	0
34f9b                 | LR__5666
34f9b     25          | 	byte	"%"
34f9c     00          | 	byte	0
34f9d                 | LR__5667
34f9d     21          | 	byte	"!"
34f9e     00          | 	byte	0
34f9f                 | LR__5668
34f9f     30          | 	byte	"0"
34fa0     00          | 	byte	0
34fa1                 | LR__5669
34fa1     39          | 	byte	"9"
34fa2     00          | 	byte	0
34fa3                 | LR__5670
34fa3     2E          | 	byte	"."
34fa4     00          | 	byte	0
34fa5                 | LR__5671
34fa5     24          | 	byte	"$"
34fa6     00          | 	byte	0
34fa7                 | LR__5672
34fa7     25          | 	byte	"%"
34fa8     00          | 	byte	0
34fa9                 | LR__5673
34fa9     2D          | 	byte	"-"
34faa     00          | 	byte	0
34fab                 | LR__5674
34fab     2E          | 	byte	"."
34fac     00          | 	byte	0
34fad                 | LR__5675
34fad     24          | 	byte	"$"
34fae     00          | 	byte	0
34faf                 | LR__5676
34faf     25          | 	byte	"%"
34fb0     00          | 	byte	0
34fb1                 | LR__5677
34fb1     30          | 	byte	"0"
34fb2     00          | 	byte	0
34fb3                 | LR__5678
34fb3     39          | 	byte	"9"
34fb4     00          | 	byte	0
34fb5                 | LR__5679
34fb5     5F          | 	byte	"_"
34fb6     00          | 	byte	0
34fb7                 | LR__5680
34fb7     2E          | 	byte	"."
34fb8     00          | 	byte	0
34fb9                 | LR__5681
34fb9     45          | 	byte	"E"
34fba     00          | 	byte	0
34fbb                 | LR__5682
34fbb     65          | 	byte	"e"
34fbc     00          | 	byte	0
34fbd                 | LR__5683
34fbd     2D          | 	byte	"-"
34fbe     00          | 	byte	0
34fbf                 | LR__5684
34fbf     61          | 	byte	"a"
34fc0     00          | 	byte	0
34fc1                 | LR__5685
34fc1     66          | 	byte	"f"
34fc2     00          | 	byte	0
34fc3                 | LR__5686
34fc3     30          | 	byte	"0"
34fc4     00          | 	byte	0
34fc5                 | LR__5687
34fc5     31          | 	byte	"1"
34fc6     00          | 	byte	0
34fc7                 | LR__5688
34fc7     5F          | 	byte	"_"
34fc8     00          | 	byte	0
34fc9                 | LR__5689
34fc9     2D          | 	byte	"-"
34fca     00          | 	byte	0
34fcb                 | LR__5690
34fcb     65          | 	byte	"e"
34fcc     00          | 	byte	0
34fcd                 | LR__5691
34fcd     2E          | 	byte	"."
34fce     00          | 	byte	0
34fcf                 | LR__5692
34fcf     45          | 	byte	"E"
34fd0     00          | 	byte	0
34fd1                 | LR__5693
34fd1     65          | 	byte	"e"
34fd2     00          | 	byte	0
34fd3                 | LR__5694
34fd3     30          | 	byte	"0"
34fd4     00          | 	byte	0
34fd5                 | LR__5695
34fd5     39          | 	byte	"9"
34fd6     00          | 	byte	0
34fd7                 | LR__5696
34fd7     24          | 	byte	"$"
34fd8     00          | 	byte	0
34fd9                 | LR__5697
34fd9     25          | 	byte	"%"
34fda     00          | 	byte	0
34fdb                 | LR__5698
34fdb     2D          | 	byte	"-"
34fdc     00          | 	byte	0
34fdd                 | LR__5699
34fdd     24          | 	byte	"$"
34fde     00          | 	byte	0
34fdf                 | LR__5700
34fdf     25          | 	byte	"%"
34fe0     00          | 	byte	0
34fe1                 | LR__5701
34fe1     30          | 	byte	"0"
34fe2     00          | 	byte	0
34fe3                 | LR__5702
34fe3     39          | 	byte	"9"
34fe4     00          | 	byte	0
34fe5                 | LR__5703
34fe5     5F          | 	byte	"_"
34fe6     00          | 	byte	0
34fe7                 | LR__5704
34fe7     30          | 	byte	"0"
34fe8     00          | 	byte	0
34fe9                 | LR__5705
34fe9     39          | 	byte	"9"
34fea     00          | 	byte	0
34feb                 | LR__5706
34feb     61          | 	byte	"a"
34fec     00          | 	byte	0
34fed                 | LR__5707
34fed     66          | 	byte	"f"
34fee     00          | 	byte	0
34fef                 | LR__5708
34fef     5F          | 	byte	"_"
34ff0     00          | 	byte	0
34ff1                 | LR__5709
34ff1     30          | 	byte	"0"
34ff2     00          | 	byte	0
34ff3                 | LR__5710
34ff3     31          | 	byte	"1"
34ff4     00          | 	byte	0
34ff5                 | LR__5711
34ff5     5F          | 	byte	"_"
34ff6     00          | 	byte	0
34ff7                 | LR__5712
34ff7     30          | 	byte	"0"
34ff8     00          | 	byte	0
34ff9                 | LR__5713
34ff9     39          | 	byte	"9"
34ffa     00          | 	byte	0
34ffb                 | LR__5714
34ffb     5F          | 	byte	"_"
34ffc     00          | 	byte	0
34ffd                 | LR__5715
34ffd     22          | 	byte	34
34ffe     00          | 	byte	0
34fff                 | LR__5716
34fff     22          | 	byte	34
35000     00          | 	byte	0
35001                 | LR__5717
35001     44 69 6D 3A 
35005     20 61 74 20 
35009     6C 69 6E 65 
3500d     20          | 	byte	"Dim: at line "
3500e     00          | 	byte	0
3500f                 | LR__5718
3500f     3A 20 77 61 
35013     72 6E 69 6E 
35017     67 3A 20 74 
3501b     68 65 20 76 
3501f     61 72 69 61 
35023     62 6C 65 20 
35027     65 78 69 73 
3502b     74 65 64 2E | 	byte	": warning: the variable existed."
3502f     00          | 	byte	0
35030                 | LR__5719
35030     28          | 	byte	"("
35031     00          | 	byte	0
35032                 | LR__5720
35032     61 73       | 	byte	"as"
35034     00          | 	byte	0
35035                 | LR__5721
35035     61 73       | 	byte	"as"
35037     00          | 	byte	0
35038                 | LR__5722
35038     2C          | 	byte	","
35039     00          | 	byte	0
3503a                 | LR__5723
3503a     29          | 	byte	")"
3503b     00          | 	byte	0
3503c                 | LR__5724
3503c     29          | 	byte	")"
3503d     00          | 	byte	0
3503e                 | LR__5725
3503e     61 73       | 	byte	"as"
35040     00          | 	byte	0
35041                 | LR__5726
35041     62 79 74 65 | 	byte	"byte"
35045     00          | 	byte	0
35046                 | LR__5727
35046     75 62 79 74 
3504a     65          | 	byte	"ubyte"
3504b     00          | 	byte	0
3504c                 | LR__5728
3504c     73 68 6F 72 
35050     74          | 	byte	"short"
35051     00          | 	byte	0
35052                 | LR__5729
35052     75 73 68 6F 
35056     72 74       | 	byte	"ushort"
35058     00          | 	byte	0
35059                 | LR__5730
35059     6C 6F 6E 67 | 	byte	"long"
3505d     00          | 	byte	0
3505e                 | LR__5731
3505e     69 6E 74 65 
35062     67 65 72    | 	byte	"integer"
35065     00          | 	byte	0
35066                 | LR__5732
35066     75 6C 6F 6E 
3506a     67          | 	byte	"ulong"
3506b     00          | 	byte	0
3506c                 | LR__5733
3506c     69 6E 74 36 
35070     34          | 	byte	"int64"
35071     00          | 	byte	0
35072                 | LR__5734
35072     75 69 6E 74 
35076     36 34       | 	byte	"uint64"
35078     00          | 	byte	0
35079                 | LR__5735
35079     73 69 6E 67 
3507d     6C 65       | 	byte	"single"
3507f     00          | 	byte	0
35080                 | LR__5736
35080     64 6F 75 62 
35084     6C 65       | 	byte	"double"
35086     00          | 	byte	0
35087                 | LR__5737
35087     73 74 72 69 
3508b     6E 67       | 	byte	"string"
3508d     00          | 	byte	0
3508e                 | LR__5738
3508e     74 6F       | 	byte	"to"
35090     00          | 	byte	0
35091                 | LR__5739
35091     73 74 65 70 | 	byte	"step"
35095     00          | 	byte	0
35096                 | LR__5740
35096     73 2E       | 	byte	"s."
35098     00          | 	byte	0
35099                 | LR__5741
35099     67 6F 74 6F | 	byte	"goto"
3509d     00          | 	byte	0
3509e                 | LR__5742
3509e     67 6F 73 75 
350a2     62          | 	byte	"gosub"
350a3     00          | 	byte	0
350a4                 | LR__5743
350a4     24          | 	byte	"$"
350a5     00          | 	byte	0
350a6                 | LR__5744
350a6     26 68       | 	byte	"&h"
350a8     00          | 	byte	0
350a9                 | LR__5745
350a9     25          | 	byte	"%"
350aa     00          | 	byte	0
350ab                 | LR__5746
350ab     26 62       | 	byte	"&b"
350ad     00          | 	byte	0
350ae                 | LR__5747
350ae                 | 	byte	
350ae     00          | 	byte	0
350af                 | LR__5748
350af     61 63 6F 73 
350b3     3A 20       | 	byte	"acos: "
350b5     00          | 	byte	0
350b6                 | LR__5749
350b6     61 73 63 3A 
350ba     20          | 	byte	"asc: "
350bb     00          | 	byte	0
350bc                 | LR__5750
350bc     61 73 63 3A 
350c0     20          | 	byte	"asc: "
350c1     00          | 	byte	0
350c2                 | LR__5751
350c2     61 73 69 6E 
350c6     3A 20       | 	byte	"asin: "
350c8     00          | 	byte	0
350c9                 | LR__5752
350c9     61 74 6E 3A 
350cd     20          | 	byte	"atn: "
350ce     00          | 	byte	0
350cf                 | LR__5753
350cf     62 6C 69 74 
350d3     3A 20       | 	byte	"blit: "
350d5     00          | 	byte	0
350d6                 | LR__5754
350d6     62 69 6E 24 
350da     3A 20       | 	byte	"bin$: "
350dc     00          | 	byte	0
350dd                 | LR__5755
350dd     2F          | 	byte	"/"
350de     00          | 	byte	0
350df                 | LR__5756
350df     2F 73 64 2F 
350e3     62 69 6E 2F | 	byte	"/sd/bin/"
350e7     00          | 	byte	0
350e8                 | LR__5757
350e8     53 79 73 74 
350ec     65 6D 20 65 
350f0     72 72 6F 72 
350f4     20          | 	byte	"System error "
350f5     00          | 	byte	0
350f6                 | LR__5758
350f6     3A 20       | 	byte	": "
350f8     00          | 	byte	0
350f9                 | LR__5759
350f9     2A          | 	byte	"*"
350fa     00          | 	byte	0
350fb                 | LR__5760
350fb     2E 2E       | 	byte	".."
350fd     00          | 	byte	0
350fe                 | LR__5761
350fe     2F          | 	byte	"/"
350ff     00          | 	byte	0
35100                 | LR__5762
35100     2F          | 	byte	"/"
35101     00          | 	byte	0
35102                 | LR__5763
35102     53 79 73 74 
35106     65 6D 20 65 
3510a     72 72 6F 72 
3510e     20          | 	byte	"System error "
3510f     00          | 	byte	0
35110                 | LR__5764
35110     3A 20       | 	byte	": "
35112     00          | 	byte	0
35113                 | LR__5765
35113     43 75 72 72 
35117     65 6E 74 20 
3511b     64 69 72 65 
3511f     63 74 6F 72 
35123     79 3A 20    | 	byte	"Current directory: "
35126     00          | 	byte	0
35127                 | LR__5766
35127     2F          | 	byte	"/"
35128     00          | 	byte	0
35129                 | LR__5767
35129     53 79 73 74 
3512d     65 6D 20 65 
35131     72 72 6F 72 
35135     20          | 	byte	"System error "
35136     00          | 	byte	0
35137                 | LR__5768
35137     3A 20       | 	byte	": "
35139     00          | 	byte	0
3513a                 | LR__5769
3513a     43 75 72 72 
3513e     65 6E 74 20 
35142     64 69 72 65 
35146     63 74 6F 72 
3514a     79 3A 20    | 	byte	"Current directory: "
3514d     00          | 	byte	0
3514e                 | LR__5770
3514e     2F          | 	byte	"/"
3514f     00          | 	byte	0
35150                 | LR__5771
35150     2F          | 	byte	"/"
35151     00          | 	byte	0
35152                 | LR__5772
35152     2F          | 	byte	"/"
35153     00          | 	byte	0
35154                 | LR__5773
35154     53 79 73 74 
35158     65 6D 20 65 
3515c     72 72 6F 72 
35160     20          | 	byte	"System error "
35161     00          | 	byte	0
35162                 | LR__5774
35162     3A 20       | 	byte	": "
35164     00          | 	byte	0
35165                 | LR__5775
35165     43 75 72 72 
35169     65 6E 74 20 
3516d     64 69 72 65 
35171     63 74 6F 72 
35175     79 3A 20    | 	byte	"Current directory: "
35178     00          | 	byte	0
35179                 | LR__5776
35179     63 68 72 24 
3517d     3A 20       | 	byte	"chr$: "
3517f     00          | 	byte	0
35180                 | LR__5777
35180     63 68 61 6E 
35184     6E 65 6C 23 
35188     20 65 78 70 
3518c     65 63 74 65 
35190     64          | 	byte	"channel# expected"
35191     00          | 	byte	0
35192                 | LR__5778
35192     63 6F 73 3A 
35196     20          | 	byte	"cos: "
35197     00          | 	byte	0
35198                 | LR__5779
35198                 | 	byte	
35198     00          | 	byte	0
35199                 | LR__5780
35199                 | 	byte	
35199     00          | 	byte	0
3519a                 | LR__5781
3519a     2F 73 64 2F 
3519e     6D 65 64 69 
351a2     61 2F 68 2F | 	byte	"/sd/media/h/"
351a6     00          | 	byte	0
351a7                 | LR__5782
351a7     53 79 73 74 
351ab     65 6D 20 65 
351af     72 72 6F 72 
351b3     20          | 	byte	"System error "
351b4     00          | 	byte	0
351b5                 | LR__5783
351b5     3A 20       | 	byte	": "
351b7     00          | 	byte	0
351b8                 | LR__5784
351b8                 | 	byte	
351b8     00          | 	byte	0
351b9                 | LR__5785
351b9                 | 	byte	
351b9     00          | 	byte	0
351ba                 | LR__5786
351ba     2F 73 64 2F 
351be     6D 65 64 69 
351c2     61 2F 73 2F | 	byte	"/sd/media/s/"
351c6     00          | 	byte	0
351c7                 | LR__5787
351c7     53 79 73 74 
351cb     65 6D 20 65 
351cf     72 72 6F 72 
351d3     20          | 	byte	"System error "
351d4     00          | 	byte	0
351d5                 | LR__5788
351d5     3A 20       | 	byte	": "
351d7     00          | 	byte	0
351d8                 | LR__5789
351d8     2F          | 	byte	"/"
351d9     00          | 	byte	0
351da                 | LR__5790
351da     2F          | 	byte	"/"
351db     00          | 	byte	0
351dc                 | LR__5791
351dc     2F          | 	byte	"/"
351dd     00          | 	byte	0
351de                 | LR__5792
351de     43 61 6E 6E 
351e2     6F 74 20 64 
351e6     65 6C 65 74 
351ea     65 20 66 69 
351ee     6C 65 20 6F 
351f2     72 20 66 69 
351f6     6C 65 20 64 
351fa     6F 65 73 6E 
351fe     27 74 20 65 
35202     78 69 73 74 
35206     3A 20 73 79 
3520a     73 74 65 6D 
3520e     20 65 72 72 
35212     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
35215     00          | 	byte	0
35216                 | LR__5793
35216     43 75 72 72 
3521a     65 6E 74 20 
3521e     64 69 72 65 
35222     63 74 6F 72 
35226     79 3A 20    | 	byte	"Current directory: "
35229     00          | 	byte	0
3522a                 | LR__5794
3522a                 | 	byte	
3522a     00          | 	byte	0
3522b                 | LR__5795
3522b     2A          | 	byte	"*"
3522c     00          | 	byte	0
3522d                 | LR__5796
3522d                 | 	byte	
3522d     00          | 	byte	0
3522e                 | LR__5797
3522e     5B 64 69 72 
35232     5D 20       | 	byte	"[dir] "
35234     00          | 	byte	0
35235                 | LR__5798
35235     4D 6F 72 65 
35239     20 74 68 61 
3523d     6E 20 31 32 
35241     38 20 65 6E 
35245     74 72 69 65 
35249     73 20 66 6F 
3524d     75 6E 64 3A 
35251     20 63 6C 65 
35255     61 6E 20 79 
35259     6F 75 72 20 
3525d     64 69 72 65 
35261     63 74 6F 72 
35265     79          | 	byte	"More than 128 entries found: clean your directory"
35266     00          | 	byte	0
35267                 | LR__5799
35267     2A          | 	byte	"*"
35268     00          | 	byte	0
35269                 | LR__5800
35269                 | 	byte	
35269     00          | 	byte	0
3526a                 | LR__5801
3526a     4D 6F 72 65 
3526e     20 74 68 61 
35272     6E 20 31 32 
35276     38 20 65 6E 
3527a     74 72 69 65 
3527e     73 20 66 6F 
35282     75 6E 64 3A 
35286     20 63 6C 65 
3528a     61 6E 20 79 
3528e     6F 75 72 20 
35292     64 69 72 65 
35296     63 74 6F 72 
3529a     79          | 	byte	"More than 128 entries found: clean your directory"
3529b     00          | 	byte	0
3529c                 | LR__5802
3529c     45 72 72 6F 
352a0     72 20       | 	byte	"Error "
352a2     00          | 	byte	0
352a3                 | LR__5803
352a3     3A 20       | 	byte	": "
352a5     00          | 	byte	0
352a6                 | LR__5804
352a6     67 65 74 65 
352aa     6E 76 73 75 
352ae     73 74 61 69 
352b2     6E 3A 20    | 	byte	"getenvsustain: "
352b5     00          | 	byte	0
352b6                 | LR__5805
352b6     67 65 74 70 
352ba     69 78 65 6C 
352be     3A 20       | 	byte	"getpixel: "
352c0     00          | 	byte	0
352c1                 | LR__5806
352c1     68 65 78 24 
352c5     3A 20       | 	byte	"hex$: "
352c7     00          | 	byte	0
352c8                 | LR__5807
352c8                 | 	byte	
352c8     00          | 	byte	0
352c9                 | LR__5808
352c9     49 6E 20 69 
352cd     6E 70 75 74 
352d1     3A 20       | 	byte	"In input: "
352d3     00          | 	byte	0
352d4                 | LR__5809
352d4     2C          | 	byte	","
352d5     00          | 	byte	0
352d6                 | LR__5810
352d6                 | 	byte	
352d6     00          | 	byte	0
352d7                 | LR__5811
352d7                 | 	byte	
352d7     00          | 	byte	0
352d8                 | LR__5812
352d8     6C 65 66 74 
352dc     24 3A 20    | 	byte	"left$: "
352df     00          | 	byte	0
352e0                 | LR__5813
352e0     6C 65 66 74 
352e4     24 3A 20    | 	byte	"left$: "
352e7     00          | 	byte	0
352e8                 | LR__5814
352e8     6C 65 6E 3A 
352ec     20          | 	byte	"len: "
352ed     00          | 	byte	0
352ee                 | LR__5815
352ee     6C 65 6E 3A 
352f2     20          | 	byte	"len: "
352f3     00          | 	byte	0
352f4                 | LR__5816
352f4                 | 	byte	
352f4     00          | 	byte	0
352f5                 | LR__5817
352f5     2F          | 	byte	"/"
352f6     00          | 	byte	0
352f7                 | LR__5818
352f7     2F          | 	byte	"/"
352f8     00          | 	byte	0
352f9                 | LR__5819
352f9     2E 62 61 73 | 	byte	".bas"
352fd     00          | 	byte	0
352fe                 | LR__5820
352fe     53 79 73 74 
35302     65 6D 20 65 
35306     72 72 6F 72 
3530a     20          | 	byte	"System error "
3530b     00          | 	byte	0
3530c                 | LR__5821
3530c     3A 20       | 	byte	": "
3530e     00          | 	byte	0
3530f                 | LR__5822
3530f     2E 62 61 73 | 	byte	".bas"
35313     00          | 	byte	0
35314                 | LR__5823
35314     2F          | 	byte	"/"
35315     00          | 	byte	0
35316                 | LR__5824
35316                 | 	byte	
35316     00          | 	byte	0
35317                 | LR__5825
35317     4C 6F 61 64 
3531b     65 64 20    | 	byte	"Loaded "
3531e     00          | 	byte	0
3531f                 | LR__5826
3531f     2F          | 	byte	"/"
35320     00          | 	byte	0
35321                 | LR__5827
35321     6C 6F 67 3A 
35325     20          | 	byte	"log: "
35326     00          | 	byte	0
35327                 | LR__5828
35327     6D 69 64 24 
3532b     3A 20       | 	byte	"mid$: "
3532d     00          | 	byte	0
3532e                 | LR__5829
3532e     6D 69 64 24 
35332     3A 20       | 	byte	"mid$: "
35334     00          | 	byte	0
35335                 | LR__5830
35335     43 61 6E 6E 
35339     6F 74 20 63 
3533d     72 65 61 74 
35341     65 20 61 20 
35345     64 69 72 65 
35349     63 74 6F 72 
3534d     79 3A 20 73 
35351     79 73 74 65 
35355     6D 20 65 72 
35359     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
3535d     00          | 	byte	0
3535e                 | LR__5831
3535e     20 42 41 53 
35362     49 43 20 62 
35366     79 74 65 73 
3536a     20 66 72 65 
3536e     65          | 	byte	" BASIC bytes free"
3536f     00          | 	byte	0
35370                 | LR__5832
35370                 | 	byte	
35370     00          | 	byte	0
35371                 | LR__5833
35371                 | 	byte	
35371     00          | 	byte	0
35372                 | LR__5834
35372                 | 	byte	
35372     00          | 	byte	0
35373                 | LR__5835
35373     6E 6F 6E 61 
35377     6D 65 2E 62 
3537b     61 73       | 	byte	"noname.bas"
3537d     00          | 	byte	0
3537e                 | LR__5836
3537e     66 69 6C 65 
35382     6E 61 6D 65 
35386     20 65 78 70 
3538a     65 63 74 65 
3538e     64          | 	byte	"filename expected"
3538f     00          | 	byte	0
35390                 | LR__5837
35390     72 65 61 64 | 	byte	"read"
35394     00          | 	byte	0
35395                 | LR__5838
35395     77 72 69 74 
35399     65          | 	byte	"write"
3539a     00          | 	byte	0
3539b                 | LR__5839
3539b     61 70 70 65 
3539f     6E 64       | 	byte	"append"
353a1     00          | 	byte	0
353a2                 | LR__5840
353a2     63 68 61 6E 
353a6     6E 65 6C 23 
353aa     20 65 78 70 
353ae     65 63 74 65 
353b2     64          | 	byte	"channel# expected"
353b3     00          | 	byte	0
353b4                 | LR__5841
353b4     4F 70 65 6E 
353b8     3A 20 69 6E 
353bc     76 61 6C 69 
353c0     64 20 6D 6F 
353c4     64 65       | 	byte	"Open: invalid mode"
353c6     00          | 	byte	0
353c7                 | LR__5842
353c7     50 72 69 6E 
353cb     74 20 74 6F 
353cf     20 63 68 61 
353d3     6E 6E 65 6C 
353d7     20 28 6E 6F 
353db     74 20 79 65 
353df     74 20 69 6D 
353e3     70 6C 65 6D 
353e7     65 6E 74 65 
353eb     64 29       | 	byte	"Print to channel (not yet implemented)"
353ed     00          | 	byte	0
353ee                 | LR__5843
353ee                 | 	byte	
353ee     00          | 	byte	0
353ef                 | LR__5844
353ef     64 61 74 61 | 	byte	"data"
353f3     00          | 	byte	0
353f4                 | LR__5845
353f4                 | 	byte	
353f4     00          | 	byte	0
353f5                 | LR__5846
353f5     49 6E 20 72 
353f9     65 61 64 3A 
353fd     20          | 	byte	"In read: "
353fe     00          | 	byte	0
353ff                 | LR__5847
353ff                 | 	byte	
353ff     00          | 	byte	0
35400                 | LR__5848
35400                 | 	byte	
35400     00          | 	byte	0
35401                 | LR__5849
35401     4E 6F 20 6D 
35405     6F 72 65 20 
35409     64 61 74 61 | 	byte	"No more data"
3540d     00          | 	byte	0
3540e                 | LR__5850
3540e     2C          | 	byte	","
3540f     00          | 	byte	0
35410                 | LR__5851
35410                 | 	byte	
35410     00          | 	byte	0
35411                 | LR__5852
35411                 | 	byte	
35411     00          | 	byte	0
35412                 | LR__5853
35412                 | 	byte	
35412     00          | 	byte	0
35413                 | LR__5854
35413                 | 	byte	
35413     00          | 	byte	0
35414                 | LR__5855
35414     72 69 67 68 
35418     74 24 3A 20 | 	byte	"right$: "
3541c     00          | 	byte	0
3541d                 | LR__5856
3541d     72 69 67 68 
35421     74 24 3A 20 | 	byte	"right$: "
35425     00          | 	byte	0
35426                 | LR__5857
35426     72 6E 64 3A 
3542a     20          | 	byte	"rnd: "
3542b     00          | 	byte	0
3542c                 | LR__5858
3542c     72 6E 64 3A 
35430     20          | 	byte	"rnd: "
35431     00          | 	byte	0
35432                 | LR__5859
35432                 | 	byte	
35432     00          | 	byte	0
35433                 | LR__5860
35433     53 74 6F 70 
35437     70 65 64 20 
3543b     61 74 20 6C 
3543f     69 6E 65 20 | 	byte	"Stopped at line "
35443     00          | 	byte	0
35444                 | LR__5861
35444                 | 	byte	
35444     00          | 	byte	0
35445                 | LR__5862
35445     2F          | 	byte	"/"
35446     00          | 	byte	0
35447                 | LR__5863
35447                 | 	byte	
35447     00          | 	byte	0
35448                 | LR__5864
35448     53 61 76 65 
3544c     64 20 61 73 
35450     20          | 	byte	"Saved as "
35451     00          | 	byte	0
35452                 | LR__5865
35452     2F          | 	byte	"/"
35453     00          | 	byte	0
35454                 | LR__5866
35454     73 69 6E 3A 
35458     20          | 	byte	"sin: "
35459     00          | 	byte	0
3545a                 | LR__5867
3545a     73 71 72 3A 
3545e     20          | 	byte	"sqr: "
3545f     00          | 	byte	0
35460                 | LR__5868
35460     73 74 69 63 
35464     6B 3A 20    | 	byte	"stick: "
35467     00          | 	byte	0
35468                 | LR__5869
35468     73 74 72 69 
3546c     67 3A 20    | 	byte	"strig: "
3546f     00          | 	byte	0
35470                 | LR__5870
35470     74 61 6E 3A 
35474     20          | 	byte	"tan: "
35475     00          | 	byte	0
35476                 | LR__5871
35476     76 61 6C 3A 
3547a     20          | 	byte	"val: "
3547b     00          | 	byte	0
3547c                 | LR__5872
3547c     76 61 6C 3A 
35480     20          | 	byte	"val: "
35481     00          | 	byte	0
35482                 | LR__5873
35482     24          | 	byte	"$"
35483     00          | 	byte	0
35484                 | LR__5874
35484     26 68       | 	byte	"&h"
35486     00          | 	byte	0
35487                 | LR__5875
35487     25          | 	byte	"%"
35488     00          | 	byte	0
35489                 | LR__5876
35489     26 62       | 	byte	"&b"
3548b     00          | 	byte	0
3548c                 | LR__5877
3548c                 | 	byte	
3548c     00          | 	byte	0
3548d                 | LR__5878
3548d     45 78 70 65 
35491     63 74 65 64 
35495     20 6E 75 6D 
35499     62 65 72 2C 
3549d     20 67 6F 74 
354a1     20 73 6F 6D 
354a5     65 74 68 69 
354a9     6E 67 20 65 
354ad     6C 73 65    | 	byte	"Expected number, got something else"
354b0     00          | 	byte	0
354b1                 | LR__5879
354b1     43 61 6E 6E 
354b5     6F 74 20 61 
354b9     64 64 20 61 
354bd     20 6E 75 6D 
354c1     62 65 72 20 
354c5     74 6F 20 61 
354c9     20 73 74 72 
354cd     69 6E 67    | 	byte	"Cannot add a number to a string"
354d0     00          | 	byte	0
354d1                 | LR__5880
354d1     43 61 6E 6E 
354d5     6F 74 20 73 
354d9     75 62 73 74 
354dd     72 61 63 74 
354e1     20 73 74 72 
354e5     69 6E 67 73 | 	byte	"Cannot substract strings"
354e9     00          | 	byte	0
354ea                 | LR__5881
354ea     55 6E 6B 6E 
354ee     6F 77 6E 20 
354f2     65 72 72 6F 
354f6     72 20 77 68 
354fa     69 6C 65 20 
354fe     61 64 64 69 
35502     6E 67       | 	byte	"Unknown error while adding"
35504     00          | 	byte	0
35505                 | LR__5882
35505     55 6E 6B 6E 
35509     6F 77 6E 20 
3550d     65 72 72 6F 
35511     72 20 77 68 
35515     69 6C 65 20 
35519     73 75 62 73 
3551d     74 72 61 63 
35521     74 69 6E 67 | 	byte	"Unknown error while substracting"
35525     00          | 	byte	0
35526                 | LR__5883
35526     43 61 6E 6E 
3552a     6F 74 20 64 
3552e     6F 20 6C 6F 
35532     67 69 63 20 
35536     6F 70 65 72 
3553a     61 74 69 6F 
3553e     6E 20 6F 6E 
35542     20 73 74 72 
35546     69 6E 67 20 
3554a     6F 72 20 66 
3554e     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
35552     00          | 	byte	0
35553                 | LR__5884
35553     55 6E 6B 6E 
35557     6F 77 6E 20 
3555b     65 72 72 6F 
3555f     72 20 77 68 
35563     69 6C 65 20 
35567     64 6F 69 6E 
3556b     67 20 6C 6F 
3556f     67 69 63 20 
35573     6F 70 65 72 
35577     61 74 69 6F 
3557b     6E          | 	byte	"Unknown error while doing logic operation"
3557c     00          | 	byte	0
3557d                 | LR__5885
3557d     43 61 6E 6E 
35581     6F 74 20 6D 
35585     75 6C 74 69 
35589     70 6C 79 20 
3558d     73 74 72 69 
35591     6E 67 73    | 	byte	"Cannot multiply strings"
35594     00          | 	byte	0
35595                 | LR__5886
35595     55 6E 6B 6E 
35599     6F 77 6E 20 
3559d     65 72 72 6F 
355a1     72 20 77 68 
355a5     69 6C 65 20 
355a9     6D 75 6C 74 
355ad     69 70 6C 79 
355b1     69 6E 67    | 	byte	"Unknown error while multiplying"
355b4     00          | 	byte	0
355b5                 | LR__5887
355b5     43 61 6E 6E 
355b9     6F 74 20 64 
355bd     69 76 69 64 
355c1     65 20 73 74 
355c5     72 69 6E 67 
355c9     73          | 	byte	"Cannot divide strings"
355ca     00          | 	byte	0
355cb                 | LR__5888
355cb     55 6E 6B 6E 
355cf     6F 77 6E 20 
355d3     65 72 72 6F 
355d7     72 20 77 68 
355db     69 6C 65 20 
355df     64 69 76 69 
355e3     64 69 6E 67 | 	byte	"Unknown error while dividing"
355e7     00          | 	byte	0
355e8                 | LR__5889
355e8     43 61 6E 6E 
355ec     6F 74 20 63 
355f0     6F 6D 70 75 
355f4     74 65 20 61 
355f8     20 70 6F 77 
355fc     65 72 20 6F 
35600     66 20 61 20 
35604     73 74 72 69 
35608     6E 67       | 	byte	"Cannot compute a power of a string"
3560a     00          | 	byte	0
3560b                 | LR__5890
3560b     55 6E 6B 6E 
3560f     6F 77 6E 20 
35613     65 72 72 6F 
35617     72 20 77 68 
3561b     69 6C 65 20 
3561f     63 6F 6D 70 
35623     75 74 69 6E 
35627     67 20 61 20 
3562b     70 6F 77 65 
3562f     72          | 	byte	"Unknown error while computing a power"
35630     00          | 	byte	0
35631                 | LR__5891
35631     52 69 67 68 
35635     74 20 70 61 
35639     72 65 6E 74 
3563d     68 65 73 69 
35641     73 20 65 78 
35645     70 65 63 74 
35649     65 64       | 	byte	"Right parenthesis expected"
3564b     00          | 	byte	0
3564c                 | LR__5892
3564c     45 78 70 65 
35650     63 74 65 64 
35654     20 73 74 72 
35658     69 6E 67    | 	byte	"Expected string"
3565b     00          | 	byte	0
3565c                 | LR__5893
3565c     45 78 70 65 
35660     63 74 65 64 
35664     20 66 6C 6F 
35668     61 74       | 	byte	"Expected float"
3566a     00          | 	byte	0
3566b                 | LR__5894
3566b     45 78 70 65 
3566f     63 74 65 64 
35673     20 75 6E 73 
35677     69 67 6E 65 
3567b     64 20 69 6E 
3567f     74 65 67 65 
35683     72          | 	byte	"Expected unsigned integer"
35684     00          | 	byte	0
35685                 | LR__5895
35685     45 78 70 65 
35689     63 74 65 64 
3568d     20 69 6E 74 
35691     65 67 65 72 | 	byte	"Expected integer"
35695     00          | 	byte	0
35696                 | LR__5896
35696     4E 6F 20 6D 
3569a     6F 72 65 20 
3569e     76 61 72 69 
356a2     61 62 6C 65 
356a6     20 73 6C 6F 
356aa     74 73       | 	byte	"No more variable slots"
356ac     00          | 	byte	0
356ad                 | LR__5897
356ad     56 61 72 69 
356b1     61 62 6C 65 
356b5     20 6E 6F 74 
356b9     20 66 6F 75 
356bd     6E 64       | 	byte	"Variable not found"
356bf     00          | 	byte	0
356c0                 | LR__5898
356c0     43 6F 6D 6D 
356c4     61 20 65 78 
356c8     70 65 63 74 
356cc     65 64       | 	byte	"Comma expected"
356ce     00          | 	byte	0
356cf                 | LR__5899
356cf     43 6F 6D 6D 
356d3     61 20 6F 72 
356d7     20 73 65 6D 
356db     69 63 6F 6C 
356df     6F 6E 20 65 
356e3     78 70 65 63 
356e7     74 65 64    | 	byte	"Comma or semicolon expected"
356ea     00          | 	byte	0
356eb                 | LR__5900
356eb     55 6E 6B 6E 
356ef     6F 77 6E 20 
356f3     63 6F 6D 6D 
356f7     61 6E 64    | 	byte	"Unknown command"
356fa     00          | 	byte	0
356fb                 | LR__5901
356fb     53 74 61 63 
356ff     6B 20 75 6E 
35703     64 65 72 66 
35707     6C 6F 77    | 	byte	"Stack underflow"
3570a     00          | 	byte	0
3570b                 | LR__5902
3570b     43 61 6E 6E 
3570f     6F 74 20 65 
35713     78 65 63 75 
35717     74 65 20 67 
3571b     6F 74 6F 20 
3571f     6F 72 20 67 
35723     6F 73 75 62 
35727     20 69 6E 20 
3572b     74 68 65 20 
3572f     69 6D 6D 65 
35733     64 69 61 74 
35737     65 20 6D 6F 
3573b     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
3573d     00          | 	byte	0
3573e                 | LR__5903
3573e     43 61 6E 6E 
35742     6F 74 20 6C 
35746     6F 61 64 20 
3574a     66 72 6F 6D 
3574e     20 74 68 69 
35752     73 20 66 69 
35756     6C 65       | 	byte	"Cannot load from this file"
35758     00          | 	byte	0
35759                 | LR__5904
35759     54 68 65 20 
3575d     70 72 6F 67 
35761     72 61 6D 20 
35765     69 73 20 65 
35769     6D 70 74 79 | 	byte	"The program is empty"
3576d     00          | 	byte	0
3576e                 | LR__5905
3576e     49 66 20 61 
35772     66 74 65 72 
35776     20 69 66    | 	byte	"If after if"
35779     00          | 	byte	0
3577a                 | LR__5906
3577a     45 6D 70 74 
3577e     79 20 65 78 
35782     70 72 65 73 
35786     73 69 6F 6E | 	byte	"Empty expression"
3578a     00          | 	byte	0
3578b                 | LR__5907
3578b     53 74 72 69 
3578f     6E 67 20 65 
35793     78 70 65 63 
35797     74 65 64    | 	byte	"String expected"
3579a     00          | 	byte	0
3579b                 | LR__5908
3579b     49 6E 74 65 
3579f     72 70 72 65 
357a3     74 65 72 20 
357a7     69 6E 74 65 
357ab     72 6E 61 6C 
357af     20 65 72 72 
357b3     6F 72       | 	byte	"Interpreter internal error"
357b5     00          | 	byte	0
357b6                 | LR__5909
357b6     45 78 70 65 
357ba     63 74 65 64 
357be     20 61 73 73 
357c2     69 67 6E    | 	byte	"Expected assign"
357c5     00          | 	byte	0
357c6                 | LR__5910
357c6     45 78 70 65 
357ca     63 74 65 64 
357ce     20 27 74 6F 
357d2     27          | 	byte	"Expected 'to'"
357d3     00          | 	byte	0
357d4                 | LR__5911
357d4     45 78 70 65 
357d8     63 74 65 64 
357dc     20 69 6E 74 
357e0     65 67 65 72 
357e4     20 76 61 72 
357e8     69 61 62 6C 
357ec     65          | 	byte	"Expected integer variable"
357ed     00          | 	byte	0
357ee                 | LR__5912
357ee     55 6E 69 6E 
357f2     69 74 69 61 
357f6     6C 69 7A 65 
357fa     64 20 76 61 
357fe     72 69 61 62 
35802     6C 65 20 69 
35806     6E 20 27 6E 
3580a     65 78 74 27 
3580e     2C 20 75 73 
35812     65 20 27 66 
35816     6F 72 27 20 
3581a     62 65 66 6F 
3581e     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
35820     00          | 	byte	0
35821                 | LR__5913
35821     4E 6F 20 6D 
35825     6F 72 65 20 
35829     73 6C 6F 74 
3582d     73 20 66 6F 
35831     72 20 27 66 
35835     6F 72 27    | 	byte	"No more slots for 'for'"
35838     00          | 	byte	0
35839                 | LR__5914
35839     27 4E 65 78 
3583d     74 27 20 64 
35841     6F 65 73 6E 
35845     27 74 20 6D 
35849     61 74 63 68 
3584d     20 27 66 6F 
35851     72 27       | 	byte	"'Next' doesn't match 'for'"
35853     00          | 	byte	0
35854                 | LR__5915
35854     27 47 6F 74 
35858     6F 27 20 74 
3585c     61 72 67 65 
35860     74 20 6C 69 
35864     6E 65 20 6E 
35868     6F 74 20 66 
3586c     6F 75 6E 64 | 	byte	"'Goto' target line not found"
35870     00          | 	byte	0
35871                 | LR__5916
35871     42 61 64 20 
35875     6E 75 6D 62 
35879     65 72 20 6F 
3587d     66 20 70 61 
35881     72 61 6D 65 
35885     74 65 72 73 | 	byte	"Bad number of parameters"
35889     00          | 	byte	0
3588a                 | LR__5917
3588a     46 75 6E 63 
3588e     74 69 6F 6E 
35892     20 75 6E 64 
35896     65 66 69 6E 
3589a     65 64 20 66 
3589e     6F 72 20 73 
358a2     74 72 69 6E 
358a6     67 73       | 	byte	"Function undefined for strings"
358a8     00          | 	byte	0
358a9                 | LR__5918
358a9     42 61 64 20 
358ad     70 61 72 61 
358b1     6D 65 74 65 
358b5     72          | 	byte	"Bad parameter"
358b6     00          | 	byte	0
358b7                 | LR__5919
358b7     43 61 6E 6E 
358bb     6F 74 20 64 
358bf     65 63 6C 61 
358c3     72 65 20 61 
358c7     6E 20 61 72 
358cb     72 61 79 3A 
358cf     20 74 68 65 
358d3     20 76 61 72 
358d7     69 61 62 6C 
358db     65 20 65 78 
358df     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
358e3     00          | 	byte	0
358e4                 | LR__5920
358e4     45 78 70 65 
358e8     63 74 65 64 
358ec     20 27 28 27 | 	byte	"Expected '('"
358f0     00          | 	byte	0
358f1                 | LR__5921
358f1     45 78 70 65 
358f5     63 74 65 64 
358f9     20 27 29 27 
358fd     20 6F 72 20 
35901     27 2C 27    | 	byte	"Expected ')' or ','"
35904     00          | 	byte	0
35905                 | LR__5922
35905     4E 6F 20 6D 
35909     6F 72 65 20 
3590d     74 68 61 6E 
35911     20 33 20 64 
35915     69 6D 65 6E 
35919     73 69 6F 6E 
3591d     73 20 73 75 
35921     70 70 6F 72 
35925     74 65 64    | 	byte	"No more than 3 dimensions supported"
35928     00          | 	byte	0
35929                 | LR__5923
35929     56 61 72 69 
3592d     61 62 6C 65 
35931     20 6E 61 6D 
35935     65 20 65 78 
35939     70 65 63 74 
3593d     65 64       | 	byte	"Variable name expected"
3593f     00          | 	byte	0
35940                 | LR__5924
35940     54 79 70 65 
35944     20 6E 61 6D 
35948     65 20 65 78 
3594c     70 65 63 74 
35950     65 64       | 	byte	"Type name expected"
35952     00          | 	byte	0
35953                 | LR__5925
35953     54 79 70 65 
35957     20 6E 6F 74 
3595b     20 73 75 70 
3595f     70 6F 72 74 
35963     65 64 20 79 
35967     65 74       | 	byte	"Type not supported yet"
35969     00          | 	byte	0
3596a                 | LR__5926
3596a     41 72 72 61 
3596e     79 20 69 6E 
35972     64 65 78 20 
35976     6F 75 74 20 
3597a     6F 66 20 72 
3597e     61 6E 67 65 | 	byte	"Array index out of range"
35982     00          | 	byte	0
35983                 | LR__5927
35983     42 61 64 20 
35987     74 79 70 65 
3598b     20 77 68 69 
3598f     6C 65 20 61 
35993     73 73 69 67 
35997     6E 69 6E 67 
3599b     20 74 6F 20 
3599f     61 72 72 61 
359a3     79          | 	byte	"Bad type while assigning to array"
359a4     00          | 	byte	0
359a5                 | LR__5928
359a5     54 6F 6F 20 
359a9     6D 61 6E 79 
359ad     20 76 61 72 
359b1     69 61 62 6C 
359b5     65 73       | 	byte	"Too many variables"
359b7     00          | 	byte	0
359b8                 | LR__5929
359b8     27 54 68 65 
359bc     6E 27 20 65 
359c0     78 70 65 63 
359c4     74 65 64    | 	byte	"'Then' expected"
359c7     00          | 	byte	0
359c8                 | LR__5930
359c8     44 69 72 65 
359cc     63 74 6F 72 
359d0     79 20 64 6F 
359d4     65 73 6E 27 
359d8     74 20 65 78 
359dc     69 73 74    | 	byte	"Directory doesn't exist"
359df     00          | 	byte	0
359e0                 | LR__5931
359e0     55 6E 65 78 
359e4     70 65 63 74 
359e8     65 64 20 65 
359ec     6E 64 20 6F 
359f0     66 20 6C 69 
359f4     6E 65       | 	byte	"Unexpected end of line"
359f6     00          | 	byte	0
359f7                 | LR__5932
359f7     45 72 72 6F 
359fb     72 20       | 	byte	"Error "
359fd     00          | 	byte	0
359fe                 | LR__5933
359fe     20 2D 20    | 	byte	" - "
35a01     00          | 	byte	0
35a02                 | LR__5934
35a02     20 69 6E 20 
35a06     6C 69 6E 65 
35a0a     20          | 	byte	" in line "
35a0b     00          | 	byte	0
35a0c                 | LR__5935
35a0c                 | 	byte	
35a0c     00          | 	byte	0
35a0d                 | LR__5936
35a0d     2F 73 64    | 	byte	"/sd"
35a10     00          | 	byte	0
35a11                 | LR__5937
35a11     2F 73 64 2F 
35a15     62 61 73    | 	byte	"/sd/bas"
35a18     00          | 	byte	0
35a19                 | LR__5938
35a19     2F 73 64 2F 
35a1d     62 61 73    | 	byte	"/sd/bas"
35a20     00          | 	byte	0
35a21                 | LR__5939
35a21     20 42 41 53 
35a25     49 43 20 62 
35a29     79 74 65 73 
35a2d     20 66 72 65 
35a31     65          | 	byte	" BASIC bytes free"
35a32     00          | 	byte	0
35a33                 | LR__5940
35a33     52 65 61 64 
35a37     79          | 	byte	"Ready"
35a38     00          | 	byte	0
35a39                 | LR__5941
35a39     6E 6F 6E 61 
35a3d     6D 65 2E 62 
35a41     61 73       | 	byte	"noname.bas"
35a43     00          | 	byte	0
35a44                 | LR__5942
35a44     2F 73 64 2F 
35a48     62 61 73 2F 
35a4c     61 75 74 6F 
35a50     72 75 6E 2E 
35a54     62 61 73    | 	byte	"/sd/bas/autorun.bas"
35a57     00          | 	byte	0
35a58                 | LR__5943
35a58     72 75 6E 20 
35a5c     61 75 74 6F 
35a60     72 75 6E 2E 
35a64     62 61 73    | 	byte	"run autorun.bas"
35a67     00          | 	byte	0
35a68                 | LR__5944
35a68                 | 	byte	
35a68     00          | 	byte	0
35a69     00 00 00    | 	alignl
35a6c                 | _dat_
35a6c     00 00 00 00 
35a70     00 00 00 00 
35a74     00 00 00 00 
35a78     00 00 00 00 | 	byte	$00[16]
35a7c     61 41 17 0E 
35a80     62 42 00 00 
35a84     63 43 19 10 
35a88     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
35a8c     65 45 18 0F 
35a90     66 46 00 00 
35a94     67 47 00 00 
35a98     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
35a9c     69 49 00 00 
35aa0     6A 4A 00 00 
35aa4     6B 4B 00 00 
35aa8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
35aac     6D 4D 00 00 
35ab0     6E 4E 1A 11 
35ab4     6F 4F 1E 15 
35ab8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
35abc     71 51 00 00 
35ac0     72 52 00 00 
35ac4     73 53 1B 12 
35ac8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
35acc     75 55 00 00 
35ad0     76 56 00 00 
35ad4     77 57 00 00 
35ad8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
35adc     79 59 00 00 
35ae0     7A 5A 1D 14 
35ae4     31 21 04 00 
35ae8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
35aec     33 23 06 00 
35af0     34 24 07 00 
35af4     35 25 08 00 
35af8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
35afc     37 26 0A 00 
35b00     38 2A 0B 00 
35b04     39 28 0C 00 
35b08     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
35b0c     8D 8D 00 00 
35b10     9B 9B 00 00 
35b14     88 88 00 00 
35b18     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
35b1c     20 20 00 00 
35b20     2D 5F 00 00 
35b24     3D 2B 00 00 
35b28     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
35b2c     5D 7D 00 00 
35b30     5C 7C 00 00 
35b34     23 7E 00 00 
35b38     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
35b3c     27 22 00 00 
35b40     60 7E 03 00 
35b44     2C 3C 00 00 
35b48     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
35b4c     2F 3F 00 00 
35b50     B9 B9 00 00 
35b54     BA 00 00 00 
35b58     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
35b5c     BC 00 00 00 
35b60     BD 00 00 00 
35b64     BE 00 00 00 
35b68     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
35b6c     C0 00 00 00 
35b70     C1 00 00 00 
35b74     C2 00 00 00 
35b78     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
35b7c     C4 00 00 00 
35b80     C5 00 00 00 
35b84     C6 00 00 00 
35b88     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
35b8c     C8 00 00 00 
35b90     C9 00 00 00 
35b94     CA 00 00 00 
35b98     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
35b9c     7F 7F 00 00 
35ba0     CC 00 00 00 
35ba4     CD 00 00 00 
35ba8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
35bac     CF 00 00 00 
35bb0     D0 00 00 00 
35bb4     D1 00 00 00 
35bb8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
35bbc     2F 2F 00 00 
35bc0     2A 2A 00 00 
35bc4     2D 2D 00 00 
35bc8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
35bcc     8D 8D 00 00 
35bd0     31 31 00 00 
35bd4     32 32 00 00 
35bd8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
35bdc     34 34 00 00 
35be0     35 35 00 00 
35be4     36 36 00 00 
35be8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
35bec     38 38 00 00 
35bf0     39 39 00 00 
35bf4     30 30 00 00 
35bf8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
35bfc     5C 7C 00 00 
35c00     00 00 00 00 
35c04     00 00 00 00 
35c08     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
35c0c     00 00 00 00 
      ...             
35c64     00 00 00 00 
35c68     00 00 00 00 | 	byte	$00[96]
35c6c     2B 00 A6 F2 
35c70     24 A7 09 80 
35c74     5B 88 4D 89 
35c78     80 88 A5 88 | atari_spl file "atari.spl"
35c7c     6D 88 B8 88 
35c80     80 88 CB 88 
35c84     92 88 A5 88 
35c88     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
35c8c     A5 88 CA 88 
35c90     A6 88 DD 88 
35c94     B8 88 AB 89 
35c98     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
35c9c     C8 AD C6 F1 
35ca0     91 06 B6 FF 
35ca4     13 00 4A 00 
35ca8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
35cac     5D 00 5E 00 
35cb0     5D 00 5E 00 
35cb4     5E 00 5D 00 
35cb8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
35cbc     38 00 83 00 
35cc0     25 00 83 00 
35cc4     C3 FE D1 04 
35cc8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
35ccc     48 88 38 85 
35cd0     41 8A CB 88 
35cd4     28 89 B8 88 
35cd8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
35cdc     15 89 03 89 
35ce0     02 89 15 89 
35ce4     16 89 15 89 
35ce8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
35cec     15 89 3A 89 
35cf0     72 89 E3 89 
35cf4     52 83 AD 97 
35cf8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
35cfc     0C 02 B6 FF 
35d00     E1 00 A8 00 
35d04     F3 00 A8 00 
35d08     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
35d0c     CE 00 CD 00 
35d10     CD 00 BA 00 
35d14     E1 00 BB 00 
35d18     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
35d1c     DF 00 C9 FF 
35d20     E6 01 B6 06 
35d24     EE DD 8D 98 
35d28     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
35d2c     97 89 73 89 
35d30     3B 89 60 89 
35d34     60 89 60 89 
35d38     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
35d3c     73 89 72 89 
35d40     85 89 73 89 
35d44     AA 89 60 89 
35d48     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
35d4c     E8 8A 18 86 
35d50     92 88 A5 C2 
35d54     E0 00 C3 05 
35d58     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
35d5c     F2 00 64 01 
35d60     06 01 3E 01 
35d64     2B 01 2B 01 
35d68     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
35d6c     2B 01 2A 01 
35d70     2B 01 2B 01 
35d74     2B 01 18 01 
35d78     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
35d7c     39 07 61 F3 
35d80     C0 AF 37 85 
35d84     0F 88 8B 8A 
35d88     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
35d8c     AB 89 D0 89 
35d90     AB 89 D0 89 
35d94     D0 89 CF 89 
35d98     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
35d9c     D0 89 F5 89 
35da0     BD 89 08 8A 
35da4     CF 89 E8 8A 
35da8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
35dac     53 B3 0D F8 
35db0     F4 07 38 00 
35db4     63 01 63 01 
35db8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
35dbc     88 01 88 01 
35dc0     76 01 88 01 
35dc4     88 01 89 01 
35dc8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
35dcc     75 01 AE 01 
35dd0     76 01 88 01 
35dd4     4A 00 46 06 
35dd8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
35ddc     08 8A 9A 86 
35de0     33 8B 08 8A 
35de4     2D 8A F5 89 
35de8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
35dec     2D 8A 2D 8A 
35df0     2E 8A 1B 8A 
35df4     40 8A 2D 8A 
35df8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
35dfc     2E 8A 79 8A 
35e00     66 8A C8 8B 
35e04     72 82 2B 97 
35e08     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
35e0c     1D 02 05 01 
35e10     F8 01 C0 01 
35e14     0B 02 C0 01 
35e18     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
35e1c     F9 01 D3 01 
35e20     F8 01 D3 01 
35e24     F8 01 D2 01 
35e28     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
35e2c     E6 01 2B 01 
35e30     8E 02 5F 07 
35e34     F7 E2 ED 9C 
35e38     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
35e3c     E8 8A 78 8A 
35e40     78 8A 65 8A 
35e44     8B 8A 78 8A 
35e48     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
35e4c     8B 8A 9D 8A 
35e50     9D 8A 8B 8A 
35e54     C2 8A 78 8A 
35e58     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
35e5c     70 8C 18 86 
35e60     8B 8A 23 C9 
35e64     CB 03 C4 05 
35e68     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
35e6c     0B 02 7B 02 
35e70     1E 02 55 02 
35e74     30 02 43 02 
35e78     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
35e7c     43 02 44 02 
35e80     43 02 30 02 
35e84     68 02 31 02 
35e88     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
35e8c     07 08 3F F7 
35e90     73 B2 13 85 
35e94     15 89 ED 8B 
35e98     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
35e9c     B0 8A FB 8A 
35ea0     D5 8A FA 8A 
35ea4     E8 8A FB 8A 
35ea8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
35eac     E8 8A 21 8B 
35eb0     E7 8A 33 8B 
35eb4     E8 8A 26 8C 
35eb8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
35ebc     8D B0 27 F6 
35ec0     9C 08 AD 01 
35ec4     7B 02 8D 02 
35ec8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
35ecc     A1 02 A0 02 
35ed0     A1 02 A0 02 
35ed4     A0 02 A0 02 
35ed8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
35edc     7B 02 D8 02 
35ee0     7B 02 C6 02 
35ee4     3E 01 C3 05 
35ee8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
35eec     00 8C 2A 86 
35ef0     E0 8C FA 8A 
35ef4     6A 8B FB 8A 
35ef8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
35efc     45 8B 45 8B 
35f00     45 8B 6B 8B 
35f04     46 8B 59 8B 
35f08     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
35f0c     6B 8B 6B 8B 
35f10     6B 8B 6B 8B 
35f14     7D 8B 7D 8B 
35f18     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
35f1c     90 8B 91 8B 
35f20     90 8B 90 8B 
35f24     A3 8B A3 8B 
35f28     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
35f2c     B5 8B B6 8B 
35f30     B5 8B B5 8B 
35f34     B6 8B C8 8B 
35f38     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
35f3c     C8 8B DA 8B 
35f40     DB 8B DB 8B 
35f44     DB 8B DC 8B 
35f48     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
35f4c     EE 8B EE 8B 
35f50     00 8C 01 8C 
35f54     00 8C 01 8C 
35f58     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
35f5c     12 8C 13 8C 
35f60     13 8C 26 8C 
35f64     26 8C 26 8C 
35f68     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
35f6c     38 8C 38 8C 
35f70     38 8C 38 8C 
35f74     4B 8C 4B 8C 
35f78     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
35f7c     5E 8C 5E 8C 
35f80     5E 8C 5E 8C 
35f84     70 8C 70 8C 
35f88     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
35f8c     70 8C 83 8C 
35f90     83 8C 83 8C 
35f94     83 8C 96 8C 
35f98     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
35f9c     95 8C A9 8C 
35fa0     A9 8C A8 8C 
35fa4     A8 8C A8 8C 
35fa8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
35fac     BB 8C BB 8C 
35fb0     BB 8C CE 8C 
35fb4     CE 8C CE 8C 
35fb8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
35fbc     E0 8C E1 8C 
35fc0     E1 8C E0 8C 
35fc4     F4 8C F2 8C 
35fc8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
35fcc     05 8D 05 8D 
35fd0     06 8D 06 8D 
35fd4     19 8D 19 8D 
35fd8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
35fdc     18 8D 2B 8D 
35fe0     2B 8D 2B 8D 
35fe4     2A 8D 3E 8D 
35fe8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
35fec     3E 8D 51 8D 
35ff0     50 8D 50 8D 
35ff4     50 8D 51 8D 
35ff8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
35ffc     63 8D 64 8D 
36000     76 8D 75 8D 
36004     75 8D 76 8D 
36008     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3600c     88 8D 88 8D 
36010     89 8D 9B 8D 
36014     9A 8D 9B 8D 
36018     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3601c     AD 8D AE 8D 
36020     AD 8D AE 8D 
36024     C1 8D C1 8D 
36028     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3602c     D3 8D D3 8D 
36030     D3 8D D3 8D 
36034     D3 8D E6 8D 
36038     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3603c     E6 8D E6 8D 
36040     F9 8D F9 8D 
36044     F9 8D F8 8D 
36048     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
3604c     0B 8E 0B 8E 
36050     1D 8E 1D 8E 
36054     1E 8E 1E 8E 
36058     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
3605c     31 8E 31 8E 
36060     31 8E 42 8E 
36064     43 8E 43 8E 
36068     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
3606c     56 8E 56 8E 
36070     55 8E 56 8E 
36074     68 8E 69 8E 
36078     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
3607c     69 8E 7B 8E 
36080     7C 8E 7B 8E 
36084     7B 8E 8D 8E 
36088     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
3608c     8D 8E A1 8E 
36090     A0 8E A1 8E 
36094     A1 8E A0 8E 
36098     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
3609c     B3 8E B3 8E 
360a0     C6 8E C5 8E 
360a4     C6 8E C6 8E 
360a8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
360ac     D8 8E D9 8E 
360b0     D8 8E EC 8E 
360b4     EB 8E EC 8E 
360b8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
360bc     FE 8E FE 8E 
360c0     FE 8E FE 8E 
360c4     10 8F 10 8F 
360c8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
360cc     11 8F 23 8F 
360d0     24 8F 23 8F 
360d4     24 8F 37 8F 
360d8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
360dc     36 8F 36 8F 
360e0     48 8F 49 8F 
360e4     49 8F 49 8F 
360e8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
360ec     5B 8F 5C 8F 
360f0     5B 8F 6E 8F 
360f4     6E 8F 6E 8F 
360f8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
360fc     81 8F 81 8F 
36100     81 8F 81 8F 
36104     93 8F 93 8F 
36108     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3610c     93 8F A6 8F 
36110     A6 8F A6 8F 
36114     A6 8F B9 8F 
36118     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3611c     B9 8F B9 8F 
36120     CC 8F CB 8F 
36124     CB 8F CC 8F 
36128     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3612c     DF 8F DE 8F 
36130     DE 8F F1 8F 
36134     F1 8F F1 8F 
36138     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3613c     03 90 04 90 
36140     04 90 04 90 
36144     16 90 17 90 
36148     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
3614c     29 90 28 90 
36150     29 90 28 90 
36154     29 90 3C 90 
36158     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
3615c     3C 90 4F 90 
36160     4E 90 4E 90 
36164     4E 90 4E 90 
36168     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
3616c     61 90 61 90 
36170     73 90 74 90 
36174     74 90 74 90 
36178     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
3617c     87 90 86 90 
36180     87 90 86 90 
36184     99 90 99 90 
36188     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3618c     AB 90 AB 90 
36190     AC 90 AB 90 
36194     AB 90 BF 90 
36198     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3619c     BE 90 D1 90 
361a0     D0 90 D1 90 
361a4     D1 90 D1 90 
361a8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
361ac     E3 90 E4 90 
361b0     F6 90 F6 90 
361b4     F6 90 F6 90 
361b8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
361bc     09 91 0A 91 
361c0     0A 91 1C 91 
361c4     1C 91 1C 91 
361c8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
361cc     2F 91 2E 91 
361d0     2F 91 2F 91 
361d4     2E 91 41 91 
361d8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
361dc     41 91 53 91 
361e0     54 91 54 91 
361e4     53 91 54 91 
361e8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
361ec     67 91 67 91 
361f0     79 91 7A 91 
361f4     79 91 78 91 
361f8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
361fc     8C 91 8B 91 
36200     8C 91 8C 91 
36204     9E 91 9E 91 
36208     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3620c     B1 91 B1 91 
36210     B2 91 B1 91 
36214     B1 91 C4 91 
36218     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3621c     C4 91 D6 91 
36220     D7 91 D7 91 
36224     D7 91 D6 91 
36228     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3622c     EA 91 EA 91 
36230     EA 91 FC 91 
36234     FC 91 FB 91 
36238     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3623c     0E 92 0F 92 
36240     0F 92 0E 92 
36244     21 92 21 92 
36248     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3624c     21 92 34 92 
36250     33 92 34 92 
36254     34 92 47 92 
36258     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3625c     46 92 47 92 
36260     59 92 59 92 
36264     59 92 59 92 
36268     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3626c     6C 92 6C 92 
36270     6B 92 7E 92 
36274     7E 92 7E 92 
36278     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
3627c     92 92 91 92 
36280     91 92 90 92 
36284     91 92 A4 92 
36288     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3628c     A3 92 B6 92 
36290     B6 92 B7 92 
36294     B7 92 B6 92 
36298     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3629c     CA 92 C9 92 
362a0     CA 92 DC 92 
362a4     DC 92 DC 92 
362a8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
362ac     EF 92 EF 92 
362b0     EF 92 EF 92 
362b4     01 93 01 93 
362b8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
362bc     15 93 14 93 
362c0     14 93 14 93 
362c4     14 93 27 93 
362c8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
362cc     27 93 39 93 
362d0     3A 93 39 93 
362d4     39 93 39 93 
362d8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
362dc     4B 93 4C 93 
362e0     5F 93 5F 93 
362e4     5F 93 5E 93 
362e8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
362ec     5F 93 84 93 
362f0     4C 93 96 93 
362f4     5F 93 AE 94 
362f8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
362fc     7B C1 00 00 
36300     00 00 00 00 
36304     00 00 00 00 
36308     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3630c     00 00 00 00 | 	byte	$00, $00, $00, $00
36310     7A D7 00 80 
36314     87 8A 48 8F 
36318     EC 8C 76 8D 
3631c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
36320     3C 8D 82 8D 
36324     42 8D 88 8D 
36328     8C 8D 8E 8D 
3632c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
36330     97 8D DE 8D 
36334     E1 8D F1 8E 
36338     D8 8C A3 83 
3633c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
36340     65 71 C9 65 
36344     FC 64 C4 65 
36348     C1 65 BF 65 
3634c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
36350     B6 65 B4 65 
36354     B2 65 AE 65 
36358     AC 65 ED 65 
3635c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
36360     5E 65 25 66 
36364     FA 62 23 6B 
36368     B5 6C 61 0A 
3636c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
36370     5D 90 BE 8D 
36374     47 8E C3 8D 
36378     09 8E C9 8D 
3637c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
36380     15 8E 19 8E 
36384     1B 8E 62 8E 
36388     64 8E 68 8E 
3638c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
36390     B5 8E 4C 90 
36394     FA 84 3C 9D 
36398     98 13 79 6D 
3639c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
363a0     D9 66 50 66 
363a4     D4 66 4B 66 
363a8     8C 66 46 66 
363ac     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
363b0     81 66 3A 66 
363b4     7C 66 36 66 
363b8     76 66 30 66 
363bc     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
363c0     6B 66 88 72 
363c4     BF 37 E7 B7 
363c8     75 83 8B 8E 
363cc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
363d0     94 8E 96 8E 
363d4     DD 8E 9C 8E 
363d8     E2 8E A2 8E 
363dc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
363e0     EE 8E AE 8E 
363e4     38 8F B5 8E 
363e8     3F 8F FD 8E 
363ec     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
363f0     A5 87 1E E3 
363f4     6D 5D FA 71 
363f8     41 64 25 67 
363fc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
36400     D9 66 1A 67 
36404     18 67 15 67 
36408     12 67 0F 67 
3640c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
36410     07 67 C0 66 
36414     01 67 BC 66 
36418     B8 66 DE 64 
3641c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
36420     43 E5 1F 8B 
36424     14 8A F1 90 
36428     1C 8F 63 8F 
3642c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
36430     29 8F 6E 8F 
36434     72 8F 75 8F 
36438     34 8F BE 8F 
3643c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
36440     84 8F 87 8F 
36444     CC 8F 56 90 
36448     67 91 49 80 
3644c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
36450     46 77 A6 66 
36454     E8 66 B0 67 
36458     AD 67 ED 67 
3645c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
36460     A2 67 E3 67 
36464     9D 67 9A 67 
36468     98 67 94 67 
3646c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
36470     49 67 CD 67 
36474     28 65 5F 6E 
36478     82 67 3A 01 
3647c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
36480     C2 91 A9 8F 
36484     EF 8F AE 8F 
36488     F4 8F B5 8F 
3648c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
36490     01 90 03 90 
36494     07 90 09 90 
36498     0C 90 53 90 
3649c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
364a0     18 90 44 93 
364a4     85 84 D6 9D 
364a8     87 1F 2F 75 
364ac     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
364b0     C4 68 F6 67 
364b4     BE 68 F1 67 
364b8     76 68 2E 68 
364bc     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
364c0     27 68 24 68 
364c4     64 68 1E 68 
364c8     5F 68 19 68 
364cc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
364d0     DC 68 56 72 
364d4     7E 36 C2 B8 
364d8     D7 84 73 90 
364dc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
364e0     7B 90 7F 90 
364e4     82 90 84 90 
364e8     CB 90 8B 90 
364ec     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
364f0     D7 90 96 90 
364f4     20 91 59 90 
364f8     25 91 A2 90 
364fc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
36500     D0 89 40 EE 
36504     12 64 C4 71 
36508     29 66 0C 69 
3650c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
36510     C0 68 02 69 
36514     FE 68 FB 68 
36518     F9 68 F6 68 
3651c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
36520     EE 68 A8 68 
36524     2C 69 5F 68 
36528     E2 68 81 66 
3652c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
36530     1E EB A6 8A 
36534     73 8B 5E 93 
36538     7B 90 48 91 
3653c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
36540     0D 91 11 91 
36544     14 91 16 91 
36548     5C 91 1C 91 
3654c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
36550     68 91 AF 91 
36554     2A 91 B5 91 
36558     75 91 1A 94 
3655c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
36560     70 0E CB 6C 
36564     5D 6E C4 67 
36568     99 69 54 69 
3656c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
36570     D2 69 49 69 
36574     89 69 86 69 
36578     40 69 C4 69 
3657c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
36580     35 69 76 69 
36584     58 67 EB 6D 
36588     E9 6D 89 0F 
3658c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
36590     33 94 94 91 
36594     D9 91 56 91 
36598     E0 91 9F 91 
3659c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
365a0     EC 91 EE 91 
365a4     F1 91 F4 91 
365a8     F7 91 3D 92 
365ac     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
365b0     46 92 21 94 
365b4     11 89 A4 9D 
365b8     FD 0E 8F 6C 
365bc     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
365c0     28 6A E1 69 
365c4     65 6A 1F 6A 
365c8     5F 6A 1A 6A 
365cc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
365d0     54 6A 0F 6A 
365d4     4F 6A 09 6A 
365d8     06 6A 03 6A 
365dc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
365e0     23 68 69 77 
365e4     3A 4D 38 CA 
365e8     38 86 4E 91 
365ec     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
365f0     64 92 24 92 
365f4     6A 92 2A 92 
365f8     70 92 30 92 
365fc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
36600     7B 92 7E 92 
36604     C5 92 84 92 
36608     CB 92 8A 92 
3660c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
36610     4D 8D F9 E2 
36614     97 59 FE 74 
36618     DB 68 6D 6A 
3661c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
36620     A8 6A A5 6A 
36624     A3 6A 9F 6A 
36628     9D 6A 9B 6A 
3662c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
36630     D6 6A 8F 6A 
36634     CF 6A 46 6A 
36638     CA 6A E1 67 
3663c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
36640     D3 F7 15 92 
36644     90 8C BF 94 
36648     A6 92 EB 92 
3664c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
36650     B1 92 F7 92 
36654     FA 92 FD 92 
36658     00 93 02 93 
3665c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
36660     4F 93 52 93 
36664     54 93 22 94 
36668     5A 93 8F 88 
3666c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
36670     1C 77 07 6C 
36674     E8 69 7A 6B 
36678     34 6B 75 6B 
3667c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
36680     29 6B 26 6B 
36684     24 6B 21 6B 
36688     1D 6B 5E 6B 
3668c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
36690     12 6B 52 6B 
36694     34 69 34 6E 
36698     BA 73 A4 24 
3669c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
366a0     7A 94 B3 93 
366a4     72 93 31 93 
366a8     78 93 7A 93 
366ac     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
366b0     83 93 86 93 
366b4     89 93 D0 93 
366b8     D2 93 D5 93 
366bc     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
366c0     DD 93 40 96 
366c4     30 8B 99 9C 
366c8     52 10 94 71 
366cc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
366d0     46 6C 79 6B 
366d4     40 6C B7 6B 
366d8     F7 6B B1 6B 
366dc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
366e0     EC 6B A5 6B 
366e4     A2 6B 9F 6B 
366e8     9D 6B 9A 6B 
366ec     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
366f0     C8 6A E4 76 
366f4     20 4B F9 CE 
366f8     2E 8A 1A 92 
366fc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
36700     FB 93 BA 93 
36704     01 94 03 94 
36708     4A 94 09 94 
3670c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
36710     55 94 14 94 
36714     9E 94 1A 94 
36718     61 94 20 94 
3671c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
36720     3E 87 E5 CD 
36724     5F 50 6C 78 
36728     B5 6A 04 6C 
3672c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
36730     83 6C 7F 6C 
36734     7C 6C 36 6C 
36738     76 6C 74 6C 
3673c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
36740     6B 6C 25 6C 
36744     66 6C 1F 6C 
36748     1D 6C 41 6A 
3674c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
36750     BA FA FC 94 
36754     5B 8D 97 96 
36758     3B 94 C5 94 
3675c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
36760     89 94 8C 94 
36764     8F 94 92 94 
36768     94 94 DB 94 
3676c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
36770     E4 94 E7 94 
36774     2D 95 74 95 
36778     C8 96 15 89 
3677c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
36780     CB 75 31 6F 
36784     7E 6B 10 6D 
36788     C9 6C 0A 6D 
3678c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
36790     BD 6C FF 6C 
36794     FB 6C F9 6C 
36798     B2 6C F3 6C 
3679c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
367a0     A7 6C E8 6C 
367a4     0D 6B 85 6F 
367a8     C7 74 10 28 
367ac     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
367b0     96 96 47 95 
367b4     06 95 0A 95 
367b8     0C 95 0F 95 
367bc     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
367c0     17 95 5E 95 
367c4     61 95 63 95 
367c8     22 95 AC 95 
367cc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
367d0     72 95 17 98 
367d4     59 8E 01 96 
367d8     CF FC 5A 68 
367dc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
367e0     96 6D 50 6D 
367e4     D5 6D 4A 6D 
367e8     8C 6D 89 6D 
367ec     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
367f0     80 6D 3A 6D 
367f4     7A 6D 77 6D 
367f8     75 6D 71 6D 
367fc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
36800     18 6C BC 78 
36804     9A 4F 7E CF 
36808     1F 89 F1 93 
3680c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
36810     D2 95 4E 95 
36814     D7 95 53 95 
36818     DD 95 E0 95 
3681c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
36820     A5 95 EB 95 
36824     EE 95 F0 95 
36828     37 96 B3 95 
3682c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
36830     1A 98 D5 8D 
36834     C5 9F CD 0F 
36838     0F 71 F3 73 
3683c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
36840     D9 6D 5E 6E 
36844     D3 6D 58 6E 
36848     12 6E 0F 6E 
3684c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
36850     49 6E BF 6D 
36854     87 6E 76 6D 
36858     81 6E 11 6B 
3685c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
36860     3F 09 44 95 
36864     E5 8D 3F 99 
36868     D4 95 A2 96 
3686c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
36870     23 96 69 96 
36874     6B 96 6E 96 
36878     71 96 74 96 
3687c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
36880     BF 96 3C 96 
36884     C6 96 C8 96 
36888     A3 98 51 8D 
3688c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
36890     CF 75 29 73 
36894     90 6C EC 6E 
36898     62 6E E7 6E 
3689c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
368a0     9A 6E 98 6E 
368a4     95 6E 91 6E 
368a8     8E 6E CF 6E 
368ac     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
368b0     40 6E C3 6E 
368b4     E8 6C 45 6F 
368b8     A5 7B C9 35 
368bc     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
368c0     2D 98 23 97 
368c4     E1 96 A0 96 
368c8     A4 96 EA 96 
368cc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
368d0     AF 96 F4 96 
368d4     F8 96 3E 97 
368d8     FD 96 43 97 
368dc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
368e0     08 97 6B 99 
368e4     D6 92 88 91 
368e8     D8 EE 84 66 
368ec     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
368f0     2E 6F E7 6E 
368f4     6C 6F 24 6F 
368f8     21 6F 1F 6F 
368fc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
36900     17 6F 13 6F 
36904     54 6F 0E 6F 
36908     0B 6F 4B 6F 
3690c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
36910     27 6D 1C 7B 
36914     19 59 9F DB 
36918     66 8E BC 94 
3691c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
36920     67 97 26 97 
36924     6D 97 2B 97 
36928     72 97 32 97 
3692c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
36930     C1 97 7F 97 
36934     C6 97 85 97 
36938     CB 97 CE 97 
3693c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
36940     EC 8A C4 C6 
36944     68 4C F4 7D 
36948     63 6E E8 6E 
3694c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
36950     ED 6F A7 6F 
36954     E7 6F A0 6F 
36958     E1 6F 9B 6F 
3695c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
36960     D5 6F 8F 6F 
36964     CE 6F 45 6F 
36968     86 6F 68 6D 
3696c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
36970     C0 13 AD A2 
36974     A7 8E 79 99 
36978     E6 97 E8 97 
3697c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
36980     F1 97 F3 97 
36984     F6 97 F9 97 
36988     FB 97 FE 97 
3698c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
36990     4A 98 0A 98 
36994     93 98 0F 98 
36998     7F 9B BF 8C 
3699c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
369a0     91 7B 62 73 
369a4     1A 6E B9 70 
369a8     EB 6F B3 70 
369ac     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
369b0     25 70 20 70 
369b4     1E 70 1B 70 
369b8     18 70 15 70 
369bc     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
369c0     0D 70 09 70 
369c4     07 70 03 70 
369c8     01 70 FD 6F 
369cc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
369d0     F6 6F F2 6F 
369d4     EF 6F EC 6F 
369d8     2C 70 E6 6F 
369dc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
369e0     DD 6F 97 6F 
369e4     D7 6F 84 6E 
369e8     8F 6F 3F 7D 
369ec     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
369ee     FF FF FF FF 
369f2     FF FF       | atarist_spl file "atarist.spl" '512
369f4     00 00 00 00 
369f8     00 00 00 00 
369fc     00 00       | 	byte	$00[10]
369fe     17 7F F2 7F 
36a02     B2 7F 72 7F 
36a06     33 7F F4 7E 
36a0a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
36a0e     36 7E F5 7D 
36a12     E9 51 F2 0D 
36a16     8E 00 F3 FD 
36a1a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
36a1e     57 FD 58 FD 
36a22     5B FD 5C FD 
36a26     5C FD 60 7D 
36a2a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
36a2e     D6 7C 98 7C 
36a32     59 7C 1A 7C 
36a36     DC 7B 9E 7B 
36a3a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
36a3e     F3 05 00 FD 
36a42     41 FB EA FA 
36a46     D9 FA DB FA 
36a4a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
36a4e     E4 FA 9B 36 
36a52     F8 7A C0 7A 
36a56     84 7A 45 7A 
36a5a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
36a5e     8E 79 51 79 
36a62     15 79 D7 78 
36a66     3C 1F EB FF 
36a6a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
36a6e     6D F8 65 F8 
36a72     68 F8 6D F8 
36a76     70 F8 74 F8 
36a7a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
36a7e     AB 60 79 60 
36a82     4B 60 1A 60 
36a86     E9 5F B9 5F 
36a8a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
36a8e     FB 59 B2 0B 
36a92     92 FA 3A F7 
36a96     96 F6 79 F6 
36a9a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
36a9e     82 F6 86 F6 
36aa2     8C F6 DB 5D 
36aa6     F1 5E C1 5E 
36aaa     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
36aae     34 5E 04 5E 
36ab2     D6 5D A6 5D 
36ab6     78 5D D4 3E 
36aba     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
36abe     27 F5 BA F4 
36ac2     AB F4 AD F4 
36ac6     B2 F4 B8 F4 
36aca     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
36ace     26 5D 2B 5D 
36ad2     FC 5C CD 5C 
36ad6     9F 5C 70 5C 
36ada     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
36ade     E5 5B B8 5B 
36ae2     DB 24 A7 FC 
36ae6     D1 F4 4D F3 
36aea     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
36aee     04 F3 0B F3 
36af2     11 F3 16 F3 
36af6     DE 18 98 5B 
36afa     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
36afe     4E 4A 29 48 
36b02     A0 47 6A 47 
36b06     43 47 20 47 
36b0a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
36b0e     E2 F6 98 F2 
36b12     C5 F1 A3 F1 
36b16     A3 F1 A8 F1 
36b1a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
36b1e     BF F1 00 3D 
36b22     EF 46 CD 46 
36b26     AA 46 86 46 
36b2a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
36b2e     1C 46 F9 45 
36b32     D7 45 EE 43 
36b36     DE 02 E8 F3 
36b3a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
36b3e     61 F0 65 F0 
36b42     6D F0 74 F0 
36b46     7C F0 84 F0 
36b4a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
36b4e     8E 45 6D 45 
36b52     49 45 27 45 
36b56     05 45 E1 44 
36b5a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
36b5e     F1 2F A9 FB 
36b62     8B F1 9B EF 
36b66     40 EF 36 EF 
36b6a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
36b6e     4D EF 56 EF 
36b72     5E EF 7B 44 
36b76     8C 44 69 44 
36b7a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
36b7e     03 44 E1 43 
36b82     C0 43 F5 37 
36b86     69 33 0F 11 
36b8a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
36b8e     66 EE 37 EE 
36b92     38 EE 40 EE 
36b96     48 EE 51 EE 
36b9a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
36b9e     7D 32 6A 32 
36ba2     51 32 37 32 
36ba6     1F 32 05 32 
36baa     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
36bae     B9 31 A1 31 
36bb2     F1 04 F4 F1 
36bb6     50 EE A0 ED 
36bba     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
36bbe     93 ED 9A ED 
36bc2     A4 ED AD ED 
36bc6     F4 27 C1 31 
36bca     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
36bce     78 31 5F 31 
36bd2     46 31 2E 31 
36bd6     15 31 FC 30 
36bda     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
36bde     C4 EF 4A ED 
36be2     DC EC CB EC 
36be6     D2 EC DA EC 
36bea     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
36bee     F9 EC 64 2F 
36bf2     0A 31 F1 30 
36bf6     D9 30 C0 30 
36bfa     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
36bfe     78 30 5F 30 
36c02     46 30 38 23 
36c06     A6 F6 19 EE 
36c0a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
36c0e     20 EC 28 EC 
36c12     32 EC 3C EC 
36c16     47 EC 51 EC 
36c1a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
36c1e     A3 22 93 22 
36c22     7F 22 6E 22 
36c26     5D 22 4C 22 
36c2a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
36c2e     77 09 76 F1 
36c32     CC EC F0 EB 
36c36     CD EB CE EB 
36c3a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
36c3e     ED EB F5 EB 
36c42     3E F6 6B 22 
36c46     5F 22 4E 22 
36c4a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
36c4e     1B 22 0B 22 
36c52     FA 21 E9 21 
36c56     D8 21 4D FF 
36c5a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
36c5e     92 EB 7B EB 
36c62     82 EB 8C EB 
36c66     97 EB A1 EB 
36c6a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
36c6e     15 22 04 22 
36c72     F3 21 E3 21 
36c76     D2 21 C0 21 
36c7a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
36c7e     8E 21 7D 21 
36c82     9A F8 A4 ED 
36c86     8E EB 2F EB 
36c8a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
36c8e     37 EB 42 EB 
36c92     4C EB 57 EB 
36c96     B2 17 22 19 
36c9a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
36c9e     FD 18 EF 18 
36ca2     E3 18 D6 18 
36ca6     CA 18 BD 18 
36caa     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
36cae     60 EC 35 EB 
36cb2     01 EB 01 EB 
36cb6     0C EB 16 EB 
36cba     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
36cbe     34 EB D0 18 
36cc2     00 19 F4 18 
36cc6     E8 18 DA 18 
36cca     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
36cce     B6 18 A9 18 
36cd2     9D 18 91 05 
36cd6     F0 EF CA EB 
36cda     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
36cde     E8 EA F2 EA 
36ce2     FE EA 07 EB 
36ce6     12 EB C2 EF 
36cea     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
36cee     D9 18 CD 18 
36cf2     C0 18 B3 18 
36cf6     A7 18 9B 18 
36cfa     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
36cfe     B8 FC 30 EE 
36d02     61 EB DC EA 
36d06     CD EA D2 EA 
36d0a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
36d0e     F3 EA FE EA 
36d12     D2 09 D1 18 
36d16     C3 18 17 18 
36d1a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
36d1e     66 11 52 11 
36d22     49 11 41 11 
36d26     38 11 E0 F4 
36d2a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
36d2e     C9 EA C5 EA 
36d32     CF EA DB EA 
36d36     E6 EA EF EA 
36d3a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
36d3e     89 11 80 11 
36d42     78 11 6E 11 
36d46     67 11 5D 11 
36d4a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
36d4e     43 11 32 0D 
36d52     9C F1 07 EC 
36d56     F8 EA CD EA 
36d5a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
36d5e     E4 EA ED EA 
36d62     F8 EA 02 EB 
36d66     55 11 91 11 
36d6a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
36d6e     75 11 6E 11 
36d72     64 11 5E 11 
36d76     54 11 4A 11 
36d7a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
36d7e     A8 EB F1 EA 
36d82     D9 EA DC EA 
36d86     E8 EA F1 EA 
36d8a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
36d8e     A6 EB 9E 11 
36d92     A0 11 96 11 
36d96     8D 11 85 11 
36d9a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
36d9e     6A 11 CA 0D 
36da2     36 0B 57 F8 
36da6     6C ED 57 EB 
36daa     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
36dae     F4 EA FF EA 
36db2     09 EB 15 EB 
36db6     1E EB 1A FD 
36dba     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
36dbe     ED 0A E8 0A 
36dc2     E2 0A DC 0A 
36dc6     D6 0A D1 0A 
36dca     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
36dce     F8 F3 BC EC 
36dd2     57 EB 1E EB 
36dd6     18 EB 24 EB 
36dda     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
36dde     42 EB 4D EB 
36de2     08 09 20 0B 
36de6     1A 0B 14 0B 
36dea     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
36dee     04 0B FE 0A 
36df2     F9 0A F2 0A 
36df6     84 08 3A F1 
36dfa     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
36dfe     42 EB 42 EB 
36e02     4E EB 57 EB 
36e06     62 EB 6B EB 
36e0a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
36e0e     48 0B 43 0B 
36e12     3C 0B 36 0B 
36e16     31 0B 2C 0B 
36e1a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
36e1e     1B 0B 5C 00 
36e22     6A EF 1B EC 
36e26     81 EB 6A EB 
36e2a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
36e2e     85 EB 8E EB 
36e32     99 EB A3 EB 
36e36     DD 05 E5 05 
36e3a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
36e3e     DB 05 D8 05 
36e42     D5 05 D1 05 
36e46     D0 05 CB 05 
36e4a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
36e4e     0C EC BB EB 
36e52     B3 EB BB EB 
36e56     C5 EB D0 EB 
36e5a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
36e5e     E4 F7 2C 06 
36e62     28 06 24 06 
36e66     22 06 1F 06 
36e6a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
36e6e     16 06 14 06 
36e72     0F 06 D0 F3 
36e76     65 ED 2D EC 
36e7a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
36e7e     01 EC 0A EC 
36e82     14 EC 1E EC 
36e86     29 EC FB 03 
36e8a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
36e8e     63 06 60 06 
36e92     5E 06 59 06 
36e96     58 06 54 06 
36e9a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
36e9e     69 F1 21 ED 
36ea2     55 EC 33 EC 
36ea6     36 EC 40 EC 
36eaa     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
36eae     5C EC 68 EC 
36eb2     92 02 D9 02 
36eb6     D7 02 D7 02 
36eba     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
36ebe     D1 02 D1 02 
36ec2     CE 02 CD 02 
36ec6     5D FC 80 EF 
36eca     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
36ece     83 EC 8A EC 
36ed2     93 EC 9C EC 
36ed6     A5 EC B1 EC 
36eda     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
36ede     2B 03 2A 03 
36ee2     29 03 26 03 
36ee6     25 03 24 03 
36eea     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
36eee     1F 03 70 F7 
36ef2     D0 EE 27 ED 
36ef6     DB EC D4 EC 
36efa     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
36efe     F0 EC FA EC 
36f02     02 ED F9 F4 
36f06     7B 03 7C 03 
36f0a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
36f0e     75 03 73 03 
36f12     72 03 70 03 
36f16     6D 03 6C 03 
36f1a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
36f1e     54 ED 22 ED 
36f22     22 ED 2C ED 
36f26     35 ED 3F ED 
36f2a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
36f2e     14 01 C3 03 
36f32     C1 03 C0 03 
36f36     5F 01 A5 00 
36f3a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
36f3e     7B 00 7C 00 
36f42     20 00 85 F1 
36f46     2A EE 89 ED 
36f4a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
36f4e     80 ED 87 ED 
36f52     90 ED 9A ED 
36f56     A3 ED 73 00 
36f5a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
36f5e     D0 00 D0 00 
36f62     D0 00 D0 00 
36f66     D0 00 CF 00 
36f6a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
36f6e     80 F0 3D EE 
36f72     D5 ED C7 ED 
36f76     CD ED D6 ED 
36f7a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
36f7e     F2 ED FA ED 
36f82     1D 01 29 01 
36f86     27 01 27 01 
36f8a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
36f8e     25 01 26 01 
36f92     26 01 23 01 
36f96     D0 F7 EC EF 
36f9a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
36f9e     1C EE 24 EE 
36fa2     2D EE 37 EE 
36fa6     40 EE 47 EE 
36faa     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
36fae     7D 01 7B 01 
36fb2     7A 01 7A 01 
36fb6     79 01 78 01 
36fba     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
36fbe     84 FE DE F3 
36fc2     6C EF 93 EE 
36fc6     72 EE 72 EE 
36fca     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
36fce     8B EE 95 EE 
36fd2     9E EE 15 FC 
36fd6     67 FE 67 FE 
36fda     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
36fde     6B FE 6B FE 
36fe2     6D FE 6D FE 
36fe6     6D FE 6F FE 
36fea     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
36fee     DF EE CC EE 
36ff2     CF EE D9 EE 
36ff6     E1 EE EA EE 
36ffa     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
36ffe     5A FE C4 FE 
37002     C3 FE C5 FE 
37006     C6 FE C6 FE 
3700a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3700e     C8 FE C7 FE 
37012     DA FB 85 F1 
37016     8D EF 31 EF 
3701a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3701e     34 EF 3E EF 
37022     46 EF 4F EF 
37026     57 EF 0D FF 
3702a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3702e     1F FF 1F FF 
37032     21 FF 21 FF 
37036     21 FF 21 FF 
3703a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3703e     15 F1 BE EF 
37042     84 EF 7E EF 
37046     88 EF 8F EF 
3704a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3704e     A9 EF 06 F2 
37052     A6 FC AB FC 
37056     AD FC AE FC 
3705a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3705e     B2 FC B4 FC 
37062     B6 FC B7 FC 
37066     8B F4 BD F0 
3706a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3706e     E4 EF EE EF 
37072     F6 EF FD EF 
37076     04 F0 0E F0 
3707a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3707e     0B FD 0D FD 
37082     0F FD 11 FD 
37086     11 FD 13 FD 
3708a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3708e     17 FD 64 F3 
37092     CD F0 52 F0 
37096     41 F0 45 F0 
3709a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3709e     5B F0 64 F0 
370a2     6D F0 FB FC 
370a6     65 FD 68 FD 
370aa     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
370ae     6C FD 6D FD 
370b2     6F FD 70 FD 
370b6     72 FD B3 FB 
370ba     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
370be     A4 F0 99 F0 
370c2     A0 F0 A8 F0 
370c6     AE F0 B9 F0 
370ca     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
370ce     CB FB DD FB 
370d2     DE FB E0 FB 
370d6     E3 FB E3 FB 
370da     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
370de     E9 FB EC FB 
370e2     62 F7 27 F2 
370e6     2A F1 FF F0 
370ea     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
370ee     0C F1 13 F1 
370f2     1B F1 23 F1 
370f6     33 F2 3C FC 
370fa     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
370fe     42 FC 45 FC 
37102     47 FC 48 FC 
37106     4A FC 4C FC 
3710a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3710e     20 F2 77 F1 
37112     5C F1 5F F1 
37116     64 F1 6C F1 
3711a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3711e     83 F1 DC F8 
37122     9A FC 9A FC 
37126     9B FC 9E FC 
3712a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3712e     A3 FC A4 FC 
37132     A6 FC A9 FC 
37136     90 F4 33 F2 
3713a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3713e     BA F1 BF F1 
37142     C7 F1 CE F1 
37146     D6 F1 DC F1 
3714a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3714e     F3 FC F5 FC 
37152     FE FB 79 FB 
37156     62 FB 5F FB 
3715a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3715e     6F FA AF F3 
37162     53 F2 12 F2 
37166     0F F2 15 F2 
3716a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3716e     2A F2 32 F2 
37172     38 F2 9A FB 
37176     AF FB B1 FB 
3717a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3717e     B7 FB B8 FB 
37182     BA FB BC FB 
37186     C1 FB 3B F8 
3718a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3718e     6E F2 6C F2 
37192     74 F2 7A F2 
37196     81 F2 87 F2 
3719a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3719e     06 FC 09 FC 
371a2     0C FC 0E FC 
371a6     0F FC 12 FC 
371aa     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
371ae     17 FC 1A FC 
371b2     B2 F6 7B F3 
371b6     DD F2 C5 F2 
371ba     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
371be     D4 F2 DB F2 
371c2     E0 F2 E8 F2 
371c6     28 F8 60 FC 
371ca     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
371ce     64 FC 66 FC 
371d2     68 FC 6A FC 
371d6     6D FC 52 FC 
371da     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
371de     78 F3 24 F3 
371e2     1A F3 1E F3 
371e6     24 F3 2A F3 
371ea     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
371ee     3D F3 80 FA 
371f2     0C FB 0F FB 
371f6     10 FB 14 FB 
371fa     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
371fe     1B FB 1D FB 
37202     1F FB 92 FA 
37206     DE F4 AE F3 
3720a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3720e     79 F3 7E F3 
37212     84 F3 8C F3 
37216     92 F3 97 F3 
3721a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3721e     67 FB 69 FB 
37222     6B FB 6F FB 
37226     71 FB 72 FB 
3722a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3722e     E3 F8 BA F4 
37232     EE F3 CC F3 
37236     CA F3 CF F3 
3723a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3723e     E2 F3 E8 F3 
37242     ED F3 B7 FB 
37246     BC FB BE FB 
3724a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3724e     C4 FB C6 FB 
37252     C8 FB C9 FB 
37256     CC FB 8F F7 
3725a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3725e     1E F4 1E F4 
37262     24 F4 2A F4 
37266     30 F4 38 F4 
3726a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3726e     AD FA B1 FA 
37272     B4 FA B6 FA 
37276     BA FA BB FA 
3727a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3727e     C2 FA C6 FA 
37282     55 F6 C6 F4 
37286     7D F4 72 F4 
3728a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3728e     83 F4 89 F4 
37292     8F F4 94 F4 
37296     66 FA 03 FB 
3729a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3729e     0A FB 0E FB 
372a2     10 FB 11 FB 
372a6     16 FB 18 FB 
372aa     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
372ae     F9 F4 CA F4 
372b2     C5 F4 CB F4 
372b6     D1 F4 D7 F4 
372ba     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
372be     E8 F4 3F FB 
372c2     56 FB 58 FB 
372c6     5A FB 5E FB 
372ca     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
372ce     64 FB 64 FB 
372d2     69 FB 99 F9 
372d6     E9 F5 33 F5 
372da     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
372de     1D F5 22 F5 
372e2     27 F5 2E F5 
372e6     32 F5 37 F5 
372ea     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
372ee     BC FA BC FA 
372f2     C1 FA C2 FA 
372f6     C4 FA C8 FA 
372fa     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
372fe     F9 F7 DB F5 
37302     78 F5 69 F5 
37306     6A F5 70 F5 
3730a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3730e     7F F5 85 F5 
37312     6E F7 06 FB 
37316     0A FB 0B FB 
3731a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3731e     14 FB 15 FB 
37322     18 FB 1B FB 
37326     1D FB 70 F7 
3732a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3732e     B6 F5 BB F5 
37332     C0 F5 C6 F5 
37336     CA F5 CF F5 
3733a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3733e     54 FB 56 FB 
37342     5A FB 5B FB 
37346     5E FB 5F FB 
3734a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3734e     67 FB 52 FB 
37352     29 F7 33 F6 
37356     06 F6 02 F6 
3735a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3735e     10 F6 16 F6 
37362     1A F6 1F F6 
37366     81 FB 9F FB 
3736a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3736e     51 FB F2 FA 
37372     E3 FA E3 FA 
37376     E5 FA E9 FA 
3737a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3737e     64 F6 4D F6 
37382     4D F6 53 F6 
37386     57 F6 5C F6 
3738a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3738e     6A F6 19 FB 
37392     1E FB 22 FB 
37396     23 FB 24 FB 
3739a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3739e     2C FB 2E FB 
373a2     32 FB F0 F8 
373a6     01 F7 A5 F6 
373aa     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
373ae     9F F6 A3 F6 
373b2     A6 F6 AC F6 
373b6     B0 F6 EB F7 
373ba     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
373be     68 FB 6C FB 
373c2     6E FB 71 FB 
373c6     72 FB 74 FB 
373ca     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
373ce     71 F8 21 F7 
373d2     E5 F6 DD F6 
373d6     E1 F6 E6 F6 
373da     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
373de     F5 F6 F7 F6 
373e2     F7 FA AB FB 
373e6     AD FB AF FB 
373ea     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
373ee     B6 FB B9 FB 
373f2     BB FB BC FB 
373f6     21 FB 07 F8 
373fa     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
373fe     22 F7 26 F7 
37402     2B F7 2E F7 
37406     34 F7 38 F7 
3740a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3740e     13 FB 16 FB 
37412     17 FB 1B FB 
37416     1E FB 20 FB 
3741a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3741e     26 FB 77 FA 
37422     F3 F7 7C F7 
37426     67 F7 6A F7 
3742a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3742e     74 F7 7A F7 
37432     7E F7 82 F7 
37436     53 FB 5A FB 
3743a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3743e     5F FB 63 FB 
37442     65 FB 67 FB 
37446     69 FB 6A FB 
3744a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3744e     B5 F7 A9 F7 
37452     AD F7 B0 F7 
37456     B5 F7 B8 F7 
3745a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3745e     6E F8 99 FB 
37462     9C FB 9D FB 
37466     9F FB A4 FB 
3746a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3746e     A9 FB AB FB 
37472     AD FB 46 F9 
37476     26 F8 F0 F7 
3747a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3747e     F4 F7 F8 F7 
37482     FB F7 FF F7 
37486     03 F8 65 FA 
3748a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3748e     2B FB 2F FB 
37492     30 FB 32 FB 
37496     34 FB 38 FB 
3749a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3749e     E9 F8 4A F8 
374a2     2E F8 2C F8 
374a6     2F F8 36 F8 
374aa     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
374ae     41 F8 44 F8 
374b2     4A FB 67 FB 
374b6     68 FB 6B FB 
374ba     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
374be     73 FB 74 FB 
374c2     78 FB 7A FB 
374c6     14 FB E7 F8 
374ca     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
374ce     6D F8 70 F8 
374d2     73 F8 78 F8 
374d6     7C F8 80 F8 
374da     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
374de     A6 FB A7 FB 
374e2     A9 FB AC FB 
374e6     AF FB B1 FB 
374ea     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
374ee     B7 FB 73 FA 
374f2     F8 F8 B4 F8 
374f6     A9 F8 AB F8 
374fa     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
374fe     B4 F8 B8 F8 
37502     BB F8 FA F8 
37506     64 FB 65 FB 
3750a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3750e     6D FB 6F FB 
37512     70 FB 74 FB 
37516     77 FB 77 FB 
3751a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3751e     E9 F8 E4 F8 
37522     E8 F8 EB F8 
37526     EE F8 F2 F8 
3752a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3752e     B5 FA 9F FB 
37532     A1 FB A4 FB 
37536     A5 FB A9 FB 
3753a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3753e     AE FB B1 FB 
37542     B2 FB C7 F9 
37546     39 F9 22 F9 
3754a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3754e     26 F9 2A F9 
37552     2E F9 32 F9 
37556     33 F9 BA FB 
3755a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3755e     DE FB E1 FB 
37562     E2 FB E4 FB 
37566     E5 FB E7 FB 
3756a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3756e     C5 F9 67 F9 
37572     57 F9 56 F9 
37576     5B F9 5F F9 
3757a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3757e     68 F9 6C F9 
37582     0B FC 11 FC 
37586     14 FC 15 FC 
3758a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3758e     B5 FB B5 FB 
37592     B6 FB B8 FB 
37596     E9 FA C8 F9 
3759a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3759e     90 F9 94 F9 
375a2     95 F9 99 F9 
375a6     9D F9 9F F9 
375aa     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
375ae     DE FB DF FB 
375b2     E2 FB E4 FB 
375b6     E6 FB E8 FB 
375ba     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
375be     EF FB AC FA 
375c2     E9 F9 C7 F9 
375c6     C3 F9 C8 F9 
375ca     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
375ce     D0 F9 D4 F9 
375d2     D6 F9 0E FB 
375d6     11 FC 13 FC 
375da     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
375de     19 FC 1B FC 
375e2     1D FC 1E FC 
375e6     21 FC 22 FC 
375ea     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
375ee     F7 F9 F7 F9 
375f2     FB F9 FE F9 
375f6     00 FA 03 FA 
375fa     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
375fe     1B FC 45 FC 
37602     46 FC 48 FC 
37606     4A FC 4B FC 
3760a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3760e     52 FC 54 FC 
37612     F3 FB 82 FA 
37616     35 FA 28 FA 
3761a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3761e     31 FA 32 FA 
37622     37 FA 37 FA 
37626     3C FA 00 FC 
3762a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3762e     09 FC 0B FC 
37632     0F FC 12 FC 
37636     12 FC 15 FC 
3763a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3763e     8D FA 60 FA 
37642     5B FA 5C FA 
37646     60 FA 61 FA 
3764a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3764e     6C FA 6D FA 
37652     37 FC 3A FC 
37656     3B FC 3D FC 
3765a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3765e     43 FC 44 FC 
37662     45 FC 47 FC 
37666     51 FB AB FA 
3766a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3766e     8E FA 91 FA 
37672     93 FA 95 FA 
37676     98 FA 9B FA 
3767a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3767e     68 FC 6A FC 
37682     6C FC 6E FC 
37686     70 FC 72 FC 
3768a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3768e     76 FC 3B FB 
37692     D0 FA BB FA 
37696     B9 FA BD FA 
3769a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3769e     C4 FA C6 FA 
376a2     CA FA 13 FC 
376a6     3A FC 3A FC 
376aa     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
376ae     41 FC 43 FC 
376b2     44 FC 47 FC 
376b6     48 FC 3C FC 
376ba     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
376be     E6 FA E8 FA 
376c2     EB FA EE FA 
376c6     F0 FA F2 FA 
376ca     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
376ce     61 FC 66 FC 
376d2     68 FC 6B FC 
376d6     6C FC 6E FC 
376da     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
376de     73 FC 75 FC 
376e2     13 FC 3F FB 
376e6     17 FB 12 FB 
376ea     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
376ee     1A FB 1D FB 
376f2     1F FB 20 FB 
376f6     23 FB 92 FC 
376fa     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
376fe     96 FC 97 FC 
37702     9A FC 9C FC 
37706     9E FC 9F FC 
3770a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3770e     5A FB 41 FB 
37712     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
37716     73 32 00 04 
3771a     00 00 10 00 
3771e     00 00 00 00 
37722     00 00 00 00 | atari2 file "atari2.s2"
37726     43 87 43 87 
3772a     43 87 44 87 
3772e     43 87 44 87 
37732     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
37736     43 87 43 87 
3773a     43 87 44 87 
3773e     43 87 43 87 
37742     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
37746     44 87 43 87 
3774a     44 87 43 87 
3774e     43 87 43 87 
37752     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
37756     43 87 43 87 
3775a     44 87 43 87 
3775e     44 87 44 87 
37762     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
37766     43 87 43 87 
3776a     44 87 43 87 
3776e     43 87 42 87 
37772     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
37776     43 87 43 87 
3777a     43 87 43 87 
3777e     44 87 43 87 
37782     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
37786     44 87 44 87 
3778a     43 87 44 87 
3778e     43 87 44 87 
37792     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
37796     44 87 43 87 
3779a     44 87 44 87 
3779e     43 87 43 87 
377a2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
377a6     43 87 44 87 
377aa     44 87 43 87 
377ae     43 87 44 87 
377b2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
377b6     43 87 43 87 
377ba     43 87 43 87 
377be     43 87 43 87 
377c2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
377c6     42 87 43 87 
377ca     44 87 42 87 
377ce     43 87 43 87 
377d2     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
377d6     43 87 44 87 
377da     44 87 43 87 
377de     43 87 43 87 
377e2     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
377e6     43 87 5C 87 
377ea     EE 86 AC 87 
377ee     4C 7C A3 78 
377f2     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
377f6     BC 78 BB 78 
377fa     BD 78 BC 78 
377fe     BB 78 BD 78 
37802     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
37806     BB 78 BB 78 
3780a     BC 78 BC 78 
3780e     BC 78 BB 78 
37812     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37816     BC 78 BC 78 
3781a     BC 78 BC 78 
3781e     BC 78 BC 78 
37822     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37826     BB 78 BC 78 
3782a     A0 78 4C 7C 
3782e     11 7A 29 89 
37832     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
37836     44 87 43 87 
3783a     44 87 43 87 
3783e     43 87 42 87 
37842     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
37846     43 87 43 87 
3784a     44 87 ED 85 
3784e     71 85 52 79 
37852     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
37856     BC 78 BC 78 
3785a     BC 78 BC 78 
3785e     BC 78 BC 78 
37862     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37866     BC 78 BC 78 
3786a     BC 78 A0 78 
3786e     CF 7A B9 81 
37872     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
37876     44 87 43 87 
3787a     43 87 44 87 
3787e     43 87 44 87 
37882     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
37886     43 87 43 87 
3788a     43 87 43 87 
3788e     44 87 43 87 
37892     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
37896     43 87 43 87 
3789a     44 87 43 87 
3789e     44 87 43 87 
378a2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
378a6     44 87 43 87 
378aa     43 87 43 87 
378ae     5A 87 39 81 
378b2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
378b6     A5 78 BC 78 
378ba     BB 78 BC 78 
378be     BB 78 BC 78 
378c2     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
378c6     BC 78 BC 78 
378ca     BC 78 BC 78 
378ce     BC 78 8F 79 
378d2     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
378d6     09 85 47 87 
378da     43 87 43 87 
378de     42 87 42 87 
378e2     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
378e6     43 87 43 87 
378ea     43 87 43 87 
378ee     43 87 44 87 
378f2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
378f6     43 87 43 87 
378fa     44 87 43 87 
378fe     42 87 43 87 
37902     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
37906     44 87 43 87 
3790a     43 87 43 87 
3790e     44 87 44 87 
37912     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
37916     94 78 55 7A 
3791a     B9 78 BC 78 
3791e     BC 78 BC 78 
37922     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37926     BC 78 BB 78 
3792a     BC 78 BC 78 
3792e     BC 78 BC 78 
37932     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37936     BB 78 BC 78 
3793a     BC 78 BC 78 
3793e     BB 78 BC 78 
37942     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37946     BC 78 BC 78 
3794a     BD 78 BC 78 
3794e     BC 78 BB 78 
37952     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
37956     94 78 B3 84 
3795a     36 84 4A 87 
3795e     43 87 43 87 
37962     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
37966     43 87 44 87 
3796a     43 87 43 87 
3796e     43 87 43 87 
37972     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
37976     43 87 44 87 
3797a     43 87 44 87 
3797e     43 87 43 87 
37982     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
37986     43 87 43 87 
3798a     43 87 45 87 
3798e     43 87 43 87 
37992     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
37996     43 87 44 87 
3799a     44 87 44 87 
3799e     43 87 43 87 
379a2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
379a6     43 87 42 87 
379aa     43 87 43 87 
379ae     44 87 43 87 
379b2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
379b6     54 87 3C 82 
379ba     36 83 52 79 
379be     C6 78 BC 78 
379c2     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
379c6     BB 78 BB 78 
379ca     BC 78 BC 78 
379ce     BC 78 BC 78 
379d2     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
379d6     BD 78 ED 78 
379da     1B 79 F4 83 
379de     4D 83 4E 87 
379e2     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
379e6     44 87 43 87 
379ea     42 87 44 87 
379ee     43 87 42 87 
379f2     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
379f6     43 87 54 87 
379fa     26 82 B3 84 
379fe     D6 77 BB 78 
37a02     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
37a06     BC 78 BB 78 
37a0a     BB 78 BB 78 
37a0e     BB 78 BB 78 
37a12     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
37a16     BC 78 BC 78 
37a1a     26 79 18 75 
37a1e     36 83 1F 84 
37a22     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
37a26     43 87 43 87 
37a2a     43 87 43 87 
37a2e     43 87 44 87 
37a32     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
37a36     43 87 44 87 
37a3a     44 87 43 87 
37a3e     43 87 43 87 
37a42     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
37a46     43 87 43 87 
37a4a     43 87 43 87 
37a4e     44 87 44 87 
37a52     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
37a56     44 87 43 87 
37a5a     43 87 43 87 
37a5e     43 87 44 87 
37a62     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
37a66     44 87 44 87 
37a6a     44 87 43 87 
37a6e     44 87 43 87 
37a72     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
37a76     43 87 43 87 
37a7a     43 87 44 87 
37a7e     44 87 43 87 
37a82     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
37a86     43 87 43 87 
37a8a     43 87 43 87 
37a8e     43 87 44 87 
37a92     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
37a96     43 87 44 87 
37a9a     43 87 44 87 
37a9e     19 87 7D 86 
37aa2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
37aa6     B1 78 BC 78 
37aaa     BC 78 BC 78 
37aae     BC 78 BC 78 
37ab2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37ab6     BC 78 BC 78 
37aba     BD 78 BC 78 
37abe     B7 78 3B 7B 
37ac2     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
37ac6     96 86 44 87 
37aca     43 87 43 87 
37ace     43 87 43 87 
37ad2     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
37ad6     44 87 44 87 
37ada     43 87 44 87 
37ade     43 87 44 87 
37ae2     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
37ae6     43 87 44 87 
37aea     43 87 44 87 
37aee     43 87 44 87 
37af2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
37af6     43 87 44 87 
37afa     43 87 43 87 
37afe     44 87 43 87 
37b02     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
37b06     44 87 44 87 
37b0a     43 87 43 87 
37b0e     43 87 44 87 
37b12     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
37b16     43 87 43 87 
37b1a     43 87 43 87 
37b1e     44 87 44 87 
37b22     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
37b26     36 83 CF 7A 
37b2a     AB 78 BB 78 
37b2e     BC 78 BC 78 
37b32     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
37b36     BB 78 BC 78 
37b3a     BC 78 BC 78 
37b3e     BC 78 BC 78 
37b42     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37b46     BC 78 BC 78 
37b4a     BC 78 BB 78 
37b4e     BC 78 BC 78 
37b52     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37b56     BB 78 BC 78 
37b5a     BB 78 BC 78 
37b5e     BC 78 BD 78 
37b62     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
37b66     BC 78 BC 78 
37b6a     BC 78 BC 78 
37b6e     BC 78 BD 78 
37b72     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
37b76     BC 78 BB 78 
37b7a     BC 78 BB 78 
37b7e     BB 78 BC 78 
37b82     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
37b86     BC 78 BC 78 
37b8a     BC 78 BC 78 
37b8e     BC 78 BB 78 
37b92     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
37b96     BC 78 BC 78 
37b9a     BC 78 BD 78 
37b9e     BB 78 BC 78 
37ba2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
37ba6     BC 78 BC 78 
37baa     BC 78 BB 78 
37bae     BC 78 BB 78 
37bb2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
37bb6     BB 78 BC 78 
37bba     BC 78 BC 78 
37bbe     BC 78 BB 78 
37bc2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37bc6     BC 78 BC 78 
37bca     BC 78 BB 78 
37bce     BC 78 BB 78 
37bd2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37bd6     BC 78 BC 78 
37bda     BC 78 BC 78 
37bde     BB 78 BC 78 
37be2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
37be6     BC 78 9F 78 
37bea     52 79 B3 84 
37bee     2F 86 60 87 
37bf2     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
37bf6     44 87 43 87 
37bfa     43 87 43 87 
37bfe     43 87 43 87 
37c02     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
37c06     43 87 43 87 
37c0a     43 87 44 87 
37c0e     43 87 43 87 
37c12     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
37c16     43 87 43 87 
37c1a     43 87 43 87 
37c1e     43 87 44 87 
37c22     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
37c26     44 87 44 87 
37c2a     5E 87 BC 80 
37c2e     FB 80 94 78 
37c32     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
37c36     BD 78 BC 78 
37c3a     BB 78 BC 78 
37c3e     BB 78 BB 78 
37c42     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
37c46     BC 78 BB 78 
37c4a     BB 78 6B 79 
37c4e     D6 77 AC 87 
37c52     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
37c56     43 87 44 87 
37c5a     43 87 43 87 
37c5e     44 87 43 87 
37c62     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
37c66     43 87 44 87 
37c6a     43 87 5C 87 
37c6e     E7 80 00 80 
37c72     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
37c76     BC 78 BD 78 
37c7a     BC 78 BC 78 
37c7e     BC 78 BB 78 
37c82     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37c86     BC 78 BC 78 
37c8a     BB 78 BC 78 
37c8e     BB 78 BC 78 
37c92     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37c96     BB 78 BC 78 
37c9a     BC 78 BC 78 
37c9e     BC 78 BC 78 
37ca2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
37ca6     BC 78 BC 78 
37caa     BC 78 BC 78 
37cae     A0 78 8D 7B 
37cb2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
37cb6     60 87 43 87 
37cba     44 87 44 87 
37cbe     43 87 43 87 
37cc2     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
37cc6     44 87 43 87 
37cca     43 87 43 87 
37cce     44 87 73 86 
37cd2     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
37cd6     51 7B B6 78 
37cda     BC 78 BD 78 
37cde     BC 78 BC 78 
37ce2     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
37ce6     BB 78 BC 78 
37cea     BD 78 BB 78 
37cee     BC 78 BB 78 
37cf2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
37cf6     BC 78 BC 78 
37cfa     BC 78 BC 78 
37cfe     BB 78 BC 78 
37d02     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37d06     BC 78 BB 78 
37d0a     BB 78 BC 78 
37d0e     BC 78 BB 78 
37d12     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
37d16     22 8C AF 84 
37d1a     48 87 43 87 
37d1e     44 87 43 87 
37d22     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
37d26     43 87 42 87 
37d2a     43 87 43 87 
37d2e     44 87 43 87 
37d32     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
37d36     43 87 43 87 
37d3a     44 87 44 87 
37d3e     43 87 43 87 
37d42     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
37d46     43 87 43 87 
37d4a     43 87 43 87 
37d4e     44 87 43 87 
37d52     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
37d56     9F 8B D6 77 
37d5a     16 7C B3 78 
37d5e     BC 78 BB 78 
37d62     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
37d66     BB 78 BC 78 
37d6a     BB 78 BC 78 
37d6e     BC 78 BC 78 
37d72     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37d76     BC 78 BB 78 
37d7a     BB 78 BC 78 
37d7e     BB 78 BC 78 
37d82     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
37d86     BB 78 BB 78 
37d8a     BC 78 BC 78 
37d8e     BC 78 BB 78 
37d92     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
37d96     BC 78 BC 78 
37d9a     BC 78 BD 78 
37d9e     BB 78 BC 78 
37da2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
37da6     BC 78 BC 78 
37daa     BC 78 BB 78 
37dae     BC 78 BC 78 
37db2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37db6     A8 78 54 7E 
37dba     F4 83 17 82 
37dbe     50 87 43 87 
37dc2     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
37dc6     44 87 43 87 
37dca     44 87 43 87 
37dce     43 87 44 87 
37dd2     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
37dd6     43 87 28 87 
37dda     20 85 CF 7A 
37dde     70 7D AD 78 
37de2     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
37de6     BB 78 BC 78 
37dea     BC 78 BC 78 
37dee     BB 78 BB 78 
37df2     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
37df6     BB 78 B2 78 
37dfa     9A 7C CF 7A 
37dfe     4A 87 0D 87 
37e02     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
37e06     43 87 44 87 
37e0a     43 87 44 87 
37e0e     43 87 43 87 
37e12     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
37e16     44 87 43 87 
37e1a     28 87 51 85 
37e1e     11 7A 1E 7D 
37e22     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
37e26     BC 78 BB 78 
37e2a     BC 78 BC 78 
37e2e     BC 78 BC 78 
37e32     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37e36     BB 78 BC 78 
37e3a     BB 78 BC 78 
37e3e     BC 78 BC 78 
37e42     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
37e46     BB 78 BC 78 
37e4a     BC 78 BC 78 
37e4e     BD 78 BB 78 
37e52     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
37e56     BC 78 BB 78 
37e5a     BC 78 BC 78 
37e5e     BC 78 BB 78 
37e62     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37e66     BC 78 BC 78 
37e6a     BC 78 BC 78 
37e6e     BB 78 BC 78 
37e72     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37e76     BC 78 BD 78 
37e7a     BC 78 BC 78 
37e7e     BC 78 BB 78 
37e82     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37e86     BC 78 BB 78 
37e8a     BB 78 BC 78 
37e8e     BC 78 BB 78 
37e92     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37e96     BB 78 BB 78 
37e9a     BB 78 BC 78 
37e9e     B6 78 48 7D 
37ea2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
37ea6     56 87 43 87 
37eaa     42 87 44 87 
37eae     44 87 43 87 
37eb2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
37eb6     43 87 44 87 
37eba     43 87 44 87 
37ebe     4C 87 7E 83 
37ec2     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
37ec6     F7 78 BC 78 
37eca     BC 78 BB 78 
37ece     BB 78 BC 78 
37ed2     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37ed6     BC 78 BB 78 
37eda     BC 78 BC 78 
37ede     BB 78 BC 78 
37ee2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
37ee6     BB 78 BC 78 
37eea     BC 78 BC 78 
37eee     BC 78 BB 78 
37ef2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37ef6     BC 78 BC 78 
37efa     BC 78 BC 78 
37efe     BC 78 BB 78 
37f02     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37f06     BC 78 BB 78 
37f0a     BB 78 BC 78 
37f0e     BC 78 BB 78 
37f12     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37f16     BC 78 BC 78 
37f1a     BB 78 BC 78 
37f1e     BC 78 BC 78 
37f22     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
37f26     73 32 00 04 
37f2a     00 00 10 00 
37f2e     00 00 00 00 
37f32     00 00 00 00 | atari12 file "atari12.s2"
37f36     00 6D 00 6D 
37f3a     00 6D 00 6D 
37f3e     00 6D 00 6D 
37f42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37f46     00 6D 00 6D 
37f4a     00 6D 00 6D 
37f4e     00 6D 00 6D 
37f52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37f56     00 6D 00 6D 
37f5a     00 6D 00 6D 
37f5e     00 6D 00 6D 
37f62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37f66     00 6D 00 6D 
37f6a     00 6D 00 6D 
37f6e     00 6D 00 6D 
37f72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37f76     00 6D 00 6D 
37f7a     00 6D 00 6D 
37f7e     00 6D 00 6D 
37f82     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
37f86     00 6C 00 6C 
37f8a     00 6C 00 6C 
37f8e     00 6C 00 6C 
37f92     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37f96     00 6C 00 6C 
37f9a     00 6C 00 6C 
37f9e     00 6C 00 6C 
37fa2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37fa6     00 6C 00 6C 
37faa     00 6C 00 6C 
37fae     00 6C 00 6C 
37fb2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37fb6     00 6C 00 6C 
37fba     00 6C 00 6C 
37fbe     00 6C 00 6C 
37fc2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37fc6     00 6C 00 6C 
37fca     00 6C 00 6C 
37fce     00 6C 00 6C 
37fd2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37fd6     00 6C 00 6C 
37fda     00 6C 00 6C 
37fde     00 6C 00 6C 
37fe2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37fe6     00 6C 00 6C 
37fea     00 6C 00 6C 
37fee     00 6C 00 6C 
37ff2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37ff6     00 6C 00 6C 
37ffa     00 6C 00 6C 
37ffe     00 6C 00 6C 
38002     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38006     00 6C 00 6C 
3800a     00 6C 00 6C 
3800e     00 6C 00 6C 
38012     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38016     00 6C 00 6C 
3801a     00 6C 00 6C 
3801e     00 6C 00 6C 
38022     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38026     00 6C 00 6C 
3802a     00 6C 00 6C 
3802e     00 6C 00 6C 
38032     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38036     00 6C 00 6B 
3803a     00 6B 00 6B 
3803e     00 6B 00 6B 
38042     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38046     00 6B 00 6B 
3804a     00 6B 00 6B 
3804e     00 6B 00 6B 
38052     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38056     00 6B 00 6B 
3805a     00 6B 00 6B 
3805e     00 6B 00 6B 
38062     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38066     00 6B 00 6B 
3806a     00 6B 00 6B 
3806e     00 6B 00 6B 
38072     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38076     00 6B 00 6B 
3807a     00 6B 00 6B 
3807e     00 6B 00 6B 
38082     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38086     00 6B 00 6B 
3808a     00 6B 00 6B 
3808e     00 6B 00 6B 
38092     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
38096     00 6B 00 6B 
3809a     00 6B 00 6B 
3809e     00 6B 00 6B 
380a2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380a6     00 6B 00 6B 
380aa     00 6B 00 6B 
380ae     00 6B 00 6B 
380b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380b6     00 6B 00 6B 
380ba     00 6B 00 6B 
380be     00 6B 00 6B 
380c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380c6     00 6B 00 6B 
380ca     00 6B 00 6B 
380ce     00 6A 00 9D 
380d2     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
380d6     00 9E 00 9E 
380da     00 9E 00 9E 
380de     00 9E 00 9E 
380e2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
380e6     00 9E 00 9E 
380ea     00 9E 00 9E 
380ee     00 9E 00 9E 
380f2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
380f6     00 9E 00 9E 
380fa     00 9E 00 9E 
380fe     00 9E 00 9E 
38102     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38106     00 9E 00 9E 
3810a     00 9E 00 9E 
3810e     00 9E 00 9E 
38112     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38116     00 9E 00 9E 
3811a     00 9E 00 9E 
3811e     00 9E 00 9E 
38122     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38126     00 9E 00 9E 
3812a     00 9E 00 9E 
3812e     00 9E 00 9E 
38132     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38136     00 9E 00 9E 
3813a     00 9E 00 9E 
3813e     00 9E 00 9E 
38142     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38146     00 9E 00 9E 
3814a     00 9E 00 9E 
3814e     00 9E 00 9E 
38152     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
38156     00 9E 00 9E 
3815a     00 9E 00 9E 
3815e     00 9E 00 9E 
38162     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
38166     00 9F 00 9F 
3816a     00 9F 00 9F 
3816e     00 9F 00 9F 
38172     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38176     00 9F 00 9F 
3817a     00 9F 00 9F 
3817e     00 9F 00 9F 
38182     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38186     00 9F 00 9F 
3818a     00 9F 00 9F 
3818e     00 9F 00 9F 
38192     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38196     00 9F 00 9F 
3819a     00 9F 00 9F 
3819e     00 9F 00 9F 
381a2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381a6     00 9F 00 9F 
381aa     00 9F 00 9F 
381ae     00 9F 00 9F 
381b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381b6     00 9F 00 9F 
381ba     00 9F 00 9F 
381be     00 9F 00 9F 
381c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381c6     00 9F 00 9F 
381ca     00 9F 00 9F 
381ce     00 9F 00 9F 
381d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381d6     00 9F 00 9F 
381da     00 9F 00 9F 
381de     00 9F 00 9F 
381e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381e6     00 9F 00 9F 
381ea     00 9F 00 9F 
381ee     00 9F 00 9F 
381f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381f6     00 9F 00 9F 
381fa     00 9F 00 9F 
381fe     00 9F 00 9F 
38202     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38206     00 9F 00 9F 
3820a     00 9F 00 9F 
3820e     00 9F 00 9F 
38212     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38216     00 9F 00 9F 
3821a     00 9F 00 9F 
3821e     00 9F 00 9F 
38222     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
38226     00 9F 00 9F 
3822a     00 9F 00 A0 
3822e     00 A0 00 A0 
38232     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38236     00 A0 00 A0 
3823a     00 A0 00 A0 
3823e     00 A0 00 A0 
38242     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38246     00 A0 00 A0 
3824a     00 A0 00 A0 
3824e     00 A0 00 A0 
38252     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38256     00 A0 00 A0 
3825a     00 A0 00 A0 
3825e     00 A0 00 A0 
38262     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38266     00 A0 00 A0 
3826a     00 A0 00 A0 
3826e     00 A0 00 A0 
38272     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38276     00 A0 00 A0 
3827a     00 A0 00 A0 
3827e     00 A0 00 A0 
38282     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38286     00 A0 00 A0 
3828a     00 A0 00 A0 
3828e     00 A0 00 A0 
38292     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38296     00 A0 00 A0 
3829a     00 A0 00 A0 
3829e     00 A0 00 A0 
382a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382a6     00 A0 00 A0 
382aa     00 A0 00 A0 
382ae     00 A0 00 A0 
382b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382b6     00 A0 00 A0 
382ba     00 A0 00 A0 
382be     00 A0 00 A0 
382c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382c6     00 A0 00 A0 
382ca     00 A0 00 A0 
382ce     00 A0 00 A0 
382d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382d6     00 A0 00 A0 
382da     00 A0 00 A0 
382de     00 A0 00 A0 
382e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382e6     00 A0 00 A0 
382ea     00 A0 00 A0 
382ee     00 A0 00 A0 
382f2     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
382f6     00 6D 00 6D 
382fa     00 6D 00 6D 
382fe     00 6D 00 6D 
38302     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38306     00 6D 00 6D 
3830a     00 6D 00 6D 
3830e     00 6D 00 6D 
38312     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38316     00 6D 00 6D 
3831a     00 6D 00 6D 
3831e     00 6D 00 6D 
38322     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38326     00 6D 00 6D 
3832a     00 6D 00 6D 
3832e     00 6D 00 6D 
38332     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38336     00 6D 00 6D 
3833a     00 6D 00 6D 
3833e     00 6D 00 6D 
38342     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38346     00 6D 00 6D 
3834a     00 6D 00 6D 
3834e     00 6D 00 6D 
38352     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38356     00 6D 00 6D 
3835a     00 6D 00 6D 
3835e     00 6D 00 6D 
38362     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38366     00 6D 00 6D 
3836a     00 6D 00 6D 
3836e     00 6D 00 6D 
38372     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38376     00 6D 00 6D 
3837a     00 A0 00 A0 
3837e     00 A0 00 A0 
38382     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38386     00 A0 00 A0 
3838a     00 A0 00 A0 
3838e     00 A0 00 A0 
38392     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38396     00 A0 00 A0 
3839a     00 A0 00 A0 
3839e     00 A0 00 A0 
383a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383a6     00 A0 00 A0 
383aa     00 A0 00 A0 
383ae     00 A0 00 A0 
383b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383b6     00 A0 00 A0 
383ba     00 A0 00 A0 
383be     00 A0 00 A0 
383c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383c6     00 A0 00 A0 
383ca     00 A0 00 A0 
383ce     00 A0 00 A0 
383d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383d6     00 A0 00 A0 
383da     00 A0 00 A0 
383de     00 A0 00 A0 
383e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383e6     00 A0 00 A0 
383ea     00 A0 00 A0 
383ee     00 A0 00 A0 
383f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383f6     00 A0 00 A0 
383fa     00 A0 00 A0 
383fe     00 A0 00 A0 
38402     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
38406     00 6D 00 6D 
3840a     00 6D 00 6D 
3840e     00 6D 00 6D 
38412     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38416     00 6D 00 6D 
3841a     00 6D 00 6D 
3841e     00 6D 00 6D 
38422     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38426     00 6D 00 6D 
3842a     00 6D 00 6D 
3842e     00 6D 00 6D 
38432     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38436     00 6D 00 6D 
3843a     00 6D 00 6D 
3843e     00 6D 00 6D 
38442     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38446     00 6D 00 6D 
3844a     00 6D 00 6D 
3844e     00 6D 00 6D 
38452     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38456     00 6D 00 6D 
3845a     00 6D 00 6D 
3845e     00 6D 00 6D 
38462     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38466     00 6D 00 6D 
3846a     00 6D 00 6D 
3846e     00 6D 00 6D 
38472     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38476     00 6D 00 6D 
3847a     00 6D 00 6D 
3847e     00 6D 00 6D 
38482     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38486     00 6D 00 6D 
3848a     00 6C 00 A0 
3848e     00 9F 00 A0 
38492     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
38496     00 A0 00 A0 
3849a     00 A0 00 A0 
3849e     00 A0 00 A0 
384a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
384a6     00 A0 00 A0 
384aa     00 A0 00 A0 
384ae     00 A0 00 A0 
384b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
384b6     00 A0 00 A0 
384ba     00 A0 00 A0 
384be     00 A0 00 A0 
384c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
384c6     00 A0 00 A0 
384ca     00 A0 00 A0 
384ce     00 A0 00 A0 
384d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
384d6     00 A0 00 A0 
384da     00 A0 00 A0 
384de     00 A0 00 A0 
384e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
384e6     00 A0 00 A0 
384ea     00 A0 00 A0 
384ee     00 A0 00 A0 
384f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
384f6     00 A0 00 A0 
384fa     00 A0 00 A0 
384fe     00 A0 00 A0 
38502     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38506     00 A0 00 A0 
3850a     00 A0 00 A0 
3850e     00 A0 00 A0 
38512     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38516     00 A0 00 A0 
3851a     00 A0 00 A0 
3851e     00 A0 00 A0 
38522     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38526     00 A0 00 A0 
3852a     00 A0 00 A0 
3852e     00 A0 00 A0 
38532     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38536     00 A0 00 A0 
3853a     00 A0 00 A0 
3853e     00 A0 00 A0 
38542     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
38546     00 A1 00 A1 
3854a     00 A1 00 A1 
3854e     00 A1 00 A1 
38552     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
38556     00 A1 00 A1 
3855a     00 A1 00 A1 
3855e     00 A1 00 A1 
38562     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
38566     00 A1 00 A1 
3856a     00 A1 00 A1 
3856e     00 A1 00 A1 
38572     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
38576     00 A1 00 A1 
3857a     00 A1 00 A1 
3857e     00 A1 00 A1 
38582     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
38586     00 A1 00 A1 
3858a     00 A1 00 A1 
3858e     00 A1 00 A1 
38592     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
38596     00 A1 00 A1 
3859a     00 A1 00 A1 
3859e     00 6E 00 6E 
385a2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
385a6     00 6E 00 6E 
385aa     00 6E 00 6E 
385ae     00 6E 00 6E 
385b2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
385b6     00 6E 00 6E 
385ba     00 6E 00 6E 
385be     00 6E 00 6E 
385c2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
385c6     00 6E 00 6E 
385ca     00 6E 00 6E 
385ce     00 6E 00 6E 
385d2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
385d6     00 6E 00 6D 
385da     00 6D 00 6D 
385de     00 6D 00 6D 
385e2     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
385e6     00 6D 00 6D 
385ea     00 6D 00 6D 
385ee     00 6D 00 6D 
385f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
385f6     00 6D 00 6D 
385fa     00 6D 00 6D 
385fe     00 6D 00 6D 
38602     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38606     00 6D 00 6D 
3860a     00 6D 00 6D 
3860e     00 6D 00 6D 
38612     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38616     00 6D 00 6D 
3861a     00 6D 00 6D 
3861e     00 6D 00 6D 
38622     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38626     00 6D 00 6D 
3862a     00 6D 00 6D 
3862e     00 6D 00 6D 
38632     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38636     00 6D 00 6D 
3863a     00 6D 00 6D 
3863e     00 6D 00 6D 
38642     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38646     00 6D 00 6D 
3864a     00 6D 00 6D 
3864e     00 6D 00 6D 
38652     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38656     00 6D 00 6D 
3865a     00 6D 00 6D 
3865e     00 6D 00 6D 
38662     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38666     00 6D 00 6D 
3866a     00 6D 00 6D 
3866e     00 6D 00 6D 
38672     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38676     00 6D 00 6D 
3867a     00 6D 00 6D 
3867e     00 6D 00 6D 
38682     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
38686     00 6D 00 6D 
3868a     00 6C 00 6C 
3868e     00 6C 00 6C 
38692     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
38696     00 6C 00 6C 
3869a     00 6C 00 6C 
3869e     00 6C 00 6C 
386a2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
386a6     00 6C 00 6C 
386aa     00 6C 00 6C 
386ae     00 9D 00 9F 
386b2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
386b6     00 9F 00 9F 
386ba     00 9F 00 9F 
386be     00 A0 00 A0 
386c2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
386c6     00 A0 00 A0 
386ca     00 A0 00 A0 
386ce     00 A0 00 A0 
386d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
386d6     00 A0 00 A0 
386da     00 A0 00 A0 
386de     00 A0 00 A0 
386e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
386e6     00 A0 00 A0 
386ea     00 A0 00 A0 
386ee     00 A0 00 A0 
386f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
386f6     00 A0 00 A0 
386fa     00 A0 00 A0 
386fe     00 A0 00 A0 
38702     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38706     00 A0 00 A0 
3870a     00 A0 00 A0 
3870e     00 A0 00 A0 
38712     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38716     00 A0 00 A0 
3871a     00 A0 00 A0 
3871e     00 A0 00 A0 
38722     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38726     00 A0 00 A0 
3872a     00 A0 00 A0 
3872e     00 A0 00 A0 
38732     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
38736     01 00 00 00 
3873a     00 00 00 00 
3873e     00 00 00 00 
38742     00 00 00 00 | mouse  file "mouse2.def"
38746     00 00 00 00 
3874a     00 00 00 00 
3874e     00 00 00 00 
38752     00 00 00 00 | 	byte	$00[16]
38756     01 01 00 00 
3875a     00 00 00 00 
3875e     00 00 00 00 
38762     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38766     00 00 00 00 
3876a     00 00 00 00 
3876e     00 00 00 00 
38772     00 00 00 00 | 	byte	$00[16]
38776     01 0D 01 00 
3877a     00 00 00 00 
3877e     00 00 00 00 
38782     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38786     00 00 00 00 
3878a     00 00 00 00 
3878e     00 00 00 00 
38792     00 00 00 00 | 	byte	$00[16]
38796     01 0D 0D 01 
3879a     00 00 00 00 
3879e     00 00 00 00 
387a2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
387a6     00 00 00 00 
387aa     00 00 00 00 
387ae     00 00 00 00 
387b2     00 00 00 00 | 	byte	$00[16]
387b6     01 0D 0D 0D 
387ba     01 00 00 00 
387be     00 00 00 00 
387c2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
387c6     00 00 00 00 
387ca     00 00 00 00 
387ce     00 00 00 00 
387d2     00 00 00 00 | 	byte	$00[16]
387d6     01 0D 0D 0D 
387da     0D 01 00 00 
387de     00 00 00 00 
387e2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
387e6     00 00 00 00 
387ea     00 00 00 00 
387ee     00 00 00 00 
387f2     00 00 00 00 | 	byte	$00[16]
387f6     01 0D 0D 0D 
387fa     0D 0D 01 00 
387fe     00 00 00 00 
38802     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
38806     00 00 00 00 
3880a     00 00 00 00 
3880e     00 00 00 00 
38812     00 00 00 00 | 	byte	$00[16]
38816     01 0D 0D 0D 
3881a     0D 0D 0D 01 
3881e     00 00 00 00 
38822     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
38826     00 00 00 00 
3882a     00 00 00 00 
3882e     00 00 00 00 
38832     00 00 00 00 | 	byte	$00[16]
38836     01 0D 0D 0D 
3883a     0D 0D 0D 0C 
3883e     01 00 00 00 
38842     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
38846     00 00 00 00 
3884a     00 00 00 00 
3884e     00 00 00 00 
38852     00 00 00 00 | 	byte	$00[16]
38856     01 0D 0D 0D 
3885a     0D 0D 0D 0D 
3885e     0C 01 00 00 
38862     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
38866     00 00 00 00 
3886a     00 00 00 00 
3886e     00 00 00 00 
38872     00 00 00 00 | 	byte	$00[16]
38876     01 0D 0D 0D 
3887a     0D 0D 0D 0D 
3887e     0D 0C 01 00 
38882     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
38886     00 00 00 00 
3888a     00 00 00 00 
3888e     00 00 00 00 
38892     00 00 00 00 | 	byte	$00[16]
38896     01 0D 0D 0D 
3889a     0D 0D 0D 0D 
3889e     0D 0D 0B 01 
388a2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
388a6     00 00 00 00 
388aa     00 00 00 00 
388ae     00 00 00 00 
388b2     00 00 00 00 | 	byte	$00[16]
388b6     01 0D 0D 0D 
388ba     0C 0D 0D 03 
388be     01 01 01 01 
388c2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
388c6     00 00 00 00 
388ca     00 00 00 00 
388ce     00 00 00 00 
388d2     00 00 00 00 | 	byte	$00[16]
388d6     01 0D 0D 0C 
388da     01 09 0D 03 
388de     00 00 00 00 
388e2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
388e6     00 00 00 00 
388ea     00 00 00 00 
388ee     00 00 00 00 
388f2     00 00 00 00 | 	byte	$00[16]
388f6     01 0D 0C 01 
388fa     00 01 0D 0B 
388fe     01 00 00 00 
38902     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
38906     00 00 00 00 
3890a     00 00 00 00 
3890e     00 00 00 00 
38912     00 00 00 00 | 	byte	$00[16]
38916     01 0C 01 00 
3891a     00 01 0A 0D 
3891e     01 00 00 00 
38922     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
38926     00 00 00 00 
3892a     00 00 00 00 
3892e     00 00 00 00 
38932     00 00 00 00 | 	byte	$00[16]
38936     01 01 00 00 
3893a     00 00 01 0D 
3893e     0B 01 00 00 
38942     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
38946     00 00 00 00 
3894a     00 00 00 00 
3894e     00 00 00 00 
38952     00 00 00 00 
38956     00 00 00 00 
3895a     00 00       | 	byte	$00[22]
3895c     01 0B 0D 01 
38960     00 00 00 00 
38964     00 00 00 00 
38968     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3896c     00 00 00 00 
38970     00 00 00 00 
38974     00 00 00 00 
38978     00 00 00 00 
3897c     00          | 	byte	$00[17]
3897d     01 01 00 00 
38981     00 00 00 00 
38985     00 00 00 00 
38989     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3898d     00 00 00 00 
      ...             
38b31     00 00 00 00 
38b35     00          | 	byte	$00[425]
38b36                 | 
38b36     00 00       |              	org
38b38 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
38b3c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
38b40 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
38b44 003             | 
38b44 003 00 30 04 F6 |                 mov     psramaddr,#0
38b48 004             | 
38b48 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
38b4c 005 20 00 00 FF 
38b50 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
38b54 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
38b58 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
38b5c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
38b60 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
38b64 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
38b68 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
38b6c 00d             | 
38b6c 00d 20 00 00 FF 
38b70 00e 00 30 04 F1 |                 add 	psramaddr,##16384
38b74 00f E0 03 00 FF 
38b78 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
38b7c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
38b80 012             | 
38b80 012             |                 
38b80 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
38b84 013             |     
38b84 013 01 2C 60 FD |                 cogid 	t11				' get id
38b88 014 00 00 EC FC |                 coginit #0,#0				' start the new program
38b8c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
38b90 016             | 
38b90 016 00 00 00 00 | t11 		long 	0
38b94 017 00 FF 07 00 | mailbox 	long 	$7FF00
38b98 018 00 00 00 00 | psramaddr 	long 	0
38b9c 019 00 00 00 00 | pslockval	long 	0
38ba0 01a 00 00 00 00 | cmd             long    0
38ba4 01b 00 00 00 00 | buf1            long    0
38ba8 01c 00 40 00 00 | buf2            long    16384
38bac 01d B0 8B 03 00 | 	long	@@@_dat_ + 12612
38bb0 01e 50 32 20 52 
38bb4 01f 65 74 72 6F 
38bb8 020 6D 61 63 68 
38bbc 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
38bc0 022 42 41 53 49 
38bc4 023 43 20 76 65 
38bc8 024 72 73 69 6F 
38bcc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
38bd0 026 33 32 00 00 | 	byte	$33, $32, $00, $00
38bd4 027             | 	alignl
38bd4 027             | _hg010b_spin2_dat_
38bd4 027             | 
38bd4 027 00 00 00 00 
38bd8 028 00 00 00 00 
38bdc 029 00 00 00 00 
38be0 02a 00 00 00 00 
38be4 02b 00 00 00    | vga_font       file "vgafont.def"
38be7 02b 7E 81 A5 81 
38beb 02c 81 BD 99 81 
38bef 02d 81 7E 00 00 
38bf3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
38bf7 02f 7E FF DB FF 
38bfb 030 FF C3 E7 FF 
38bff 031 FF 7E 00 00 
38c03 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
38c07 033 00 36 7F 7F 
38c0b 034 7F 7F 3E 1C 
38c0f 035 08 00 00 00 
38c13 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
38c17 037 00 08 1C 3E 
38c1b 038 7F 3E 1C 08 
38c1f 039 00 00 00 00 
38c23 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
38c27 03b 18 3C 3C E7 
38c2b 03c E7 E7 18 18 
38c2f 03d 3C 00 00 00 
38c33 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
38c37 03f 18 3C 7E FF 
38c3b 040 FF 7E 18 18 
38c3f 041 3C 00 00 00 
38c43 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
38c47 043 00 00 00 18 
38c4b 044 3C 3C 18 00 
38c4f 045 00 00 00 00 
38c53 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
38c57 047 FF FF FF E7 
38c5b 048 C3 C3 E7 FF 
38c5f 049 FF FF FF FF 
38c63 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
38c67 04b 00 00 3C 66 
38c6b 04c 42 42 66 3C 
38c6f 04d 00 00 00 00 
38c73 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
38c77 04f FF FF C3 99 
38c7b 050 BD BD 99 C3 
38c7f 051 FF FF FF FF 
38c83 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
38c87 053 78 70 58 4C 
38c8b 054 1E 33 33 33 
38c8f 055 33 1E 00 00 
38c93 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
38c97 057 3C 66 66 66 
38c9b 058 66 3C 18 7E 
38c9f 059 18 18 00 00 
38ca3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
38ca7 05b FC CC FC 0C 
38cab 05c 0C 0C 0C 0E 
38caf 05d 0F 07 00 00 
38cb3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
38cb7 05f FE C6 FE C6 
38cbb 060 C6 C6 C6 E6 
38cbf 061 E7 67 03 00 
38cc3 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
38cc7 063 18 18 DB 3C 
38ccb 064 E7 3C DB 18 
38ccf 065 18 00 00 00 
38cd3 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
38cd7 067 03 07 0F 1F 
38cdb 068 7F 1F 0F 07 
38cdf 069 03 01 00 00 
38ce3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
38ce7 06b 60 70 78 7C 
38ceb 06c 7F 7C 78 70 
38cef 06d 60 40 00 00 
38cf3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
38cf7 06f 18 3C 7E 18 
38cfb 070 18 18 7E 3C 
38cff 071 18 00 00 00 
38d03 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
38d07 073 66 66 66 66 
38d0b 074 66 66 66    | 	byte	$66[7]
38d0e 075 00 66 66 00 
38d12 076 00 00 00 00 
38d16 077 00 FE DB DB 
38d1a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
38d1e 079 D8 D8 D8 00 
38d22 07a 00 00 00 3E 
38d26 07b 63 06 1C 36 
38d2a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
38d2e 07d 30 63 3E 00 
38d32 07e 00 00 00 00 
38d36 07f 00 00 00 00 
38d3a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
38d3e 081 7F 7F 7F 00 
38d42 082 00 00 00 00 
38d46 083 00 18 3C 7E 
38d4a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
38d4e 085 3C 18 7E 00 
38d52 086 00 00 00 00 
38d56 087 00 18 3C 7E 
38d5a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
38d5e 089 18 18 18 00 
38d62 08a 00 00 00 00 
38d66 08b 00 18 18 18 
38d6a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38d6e 08d 7E 3C 18 00 
38d72 08e 00 00 00 00 
38d76 08f 00 00 00 18 
38d7a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
38d7e 091 00 00 00 00 
38d82 092 00 00 00 00 
38d86 093 00 00 00    | 	byte	$00[11]
38d89 094 0C 06 7F 06 
38d8d 095 0C 00 00 00 
38d91 096 00 00 00 00 
38d95 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38d99 098 00 03 03 03 
38d9d 099 7F 00 00 00 
38da1 09a 00 00 00 00 
38da5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38da9 09c 14 36 7F 36 
38dad 09d 14 00 00 00 
38db1 09e 00 00 00 00 
38db5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
38db9 0a0 1C 1C 3E 3E 
38dbd 0a1 7F 7F 00 00 
38dc1 0a2 00 00 00 00 
38dc5 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
38dc9 0a4 7F 3E 3E 1C 
38dcd 0a5 1C 08 00 00 
38dd1 0a6 00 00 00 00 
38dd5 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38dd9 0a8 00 00 00 00 
38ddd 0a9 00 00 00 00 
38de1 0aa 00 00 00 00 
38de5 0ab 00 00       | 	byte	$00[14]
38de7 0ab 18 3C 3C 3C 
38deb 0ac 18 18 18 00 
38def 0ad 18 18 00 00 
38df3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
38df7 0af 66 24 00 00 
38dfb 0b0 00 00 00 00 
38dff 0b1 00 00 00 00 
38e03 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e07 0b3 00 36 36 7F 
38e0b 0b4 36 36 36 7F 
38e0f 0b5 36 36 00 00 
38e13 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
38e17 0b7 3E 63 43 03 
38e1b 0b8 3E 60 60 61 
38e1f 0b9 63 3E 18 18 
38e23 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
38e27 0bb 00 00 43 63 
38e2b 0bc 30 18 0C 06 
38e2f 0bd 63 61 00 00 
38e33 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
38e37 0bf 1C 36 36 1C 
38e3b 0c0 6E 3B 33 33 
38e3f 0c1 33 6E 00 00 
38e43 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
38e47 0c3 0C 0C 0C 06 
38e4b 0c4 00 00 00 00 
38e4f 0c5 00 00 00 00 
38e53 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e57 0c7 30 18 0C 0C 
38e5b 0c8 0C 0C 0C 0C 
38e5f 0c9 18 30 00 00 
38e63 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
38e67 0cb 0C 18 30 30 
38e6b 0cc 30 30 30 30 
38e6f 0cd 18 0C 00 00 
38e73 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
38e77 0cf 00 00 00 66 
38e7b 0d0 3C FF 3C 66 
38e7f 0d1 00 00 00 00 
38e83 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
38e87 0d3 00 00 00 18 
38e8b 0d4 18 7E 18 18 
38e8f 0d5 00 00 00 00 
38e93 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38e97 0d7 00 00 00 00 
38e9b 0d8 00 00 00 00 | 	byte	$00[8]
38e9f 0d9 18 18 18 0C 
38ea3 0da 00 00 00 00 
38ea7 0db 00 00 00 00 
38eab 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
38eaf 0dd 00 00 00 00 
38eb3 0de 00 00 00 00 
38eb7 0df 00 00 00 00 
38ebb 0e0 00 00 00 00 | 	byte	$00[16]
38ebf 0e1 18 18 00 00 
38ec3 0e2 00 00 00 00 
38ec7 0e3 00 00 40 60 
38ecb 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
38ecf 0e5 03 01 00 00 
38ed3 0e6 00 00 00 00 
38ed7 0e7 1C 36 63 63 
38edb 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
38edf 0e9 36 1C 00 00 
38ee3 0ea 00 00 00 00 
38ee7 0eb 18 1C 1E 18 
38eeb 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
38eef 0ed 18 7E 00 00 
38ef3 0ee 00 00 00 00 
38ef7 0ef 3E 63 60 30 
38efb 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
38eff 0f1 63 7F 00 00 
38f03 0f2 00 00 00 00 
38f07 0f3 3E 63 60 60 
38f0b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
38f0f 0f5 63 3E 00 00 
38f13 0f6 00 00 00 00 
38f17 0f7 30 38 3C 36 
38f1b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
38f1f 0f9 30 78 00 00 
38f23 0fa 00 00 00 00 
38f27 0fb 7F 03 03 03 
38f2b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
38f2f 0fd 63 3E 00 00 
38f33 0fe 00 00 00 00 
38f37 0ff 1C 06 03 03 
38f3b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
38f3f 101 63 3E 00 00 
38f43 102 00 00 00 00 
38f47 103 7F 63 60 60 
38f4b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
38f4f 105 0C 0C 00 00 
38f53 106 00 00 00 00 
38f57 107 3E 63 63 63 
38f5b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
38f5f 109 63 3E 00 00 
38f63 10a 00 00 00 00 
38f67 10b 3E 63 63 63 
38f6b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
38f6f 10d 30 1E 00 00 
38f73 10e 00 00 00 00 
38f77 10f 00 00 00 18 
38f7b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38f7f 111 18 18 00 00 
38f83 112 00 00 00 00 
38f87 113 00 00 00 18 
38f8b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38f8f 115 18 18 0C 00 
38f93 116 00 00 00 00 
38f97 117 00 60 30 18 
38f9b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
38f9f 119 30 60 00 00 
38fa3 11a 00 00 00 00 
38fa7 11b 00 00 00 7E 
38fab 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
38faf 11d 00 00 00 00 
38fb3 11e 00 00 00 00 
38fb7 11f 00          | 	byte	$00[9]
38fb8 120 06 0C 18 30 
38fbc 121 60 30 18 0C 
38fc0 122 06 00 00 00 
38fc4 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
38fc8 124 63 63 30 18 
38fcc 125 18 18 00 18 
38fd0 126 18 00 00 00 
38fd4 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
38fd8 128 3E 63 63 7B 
38fdc 129 7B 7B 3B 03 
38fe0 12a 3E 00 00 00 
38fe4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
38fe8 12c 1C 36 63 63 
38fec 12d 7F 63 63 63 
38ff0 12e 63 00 00 00 
38ff4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
38ff8 130 66 66 66 3E 
38ffc 131 66 66 66 66 
39000 132 3F 00 00 00 
39004 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
39008 134 66 43 03 03 
3900c 135 03 03 43 66 
39010 136 3C 00 00 00 
39014 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
39018 138 36 66 66 66 
3901c 139 66 66 66 36 
39020 13a 1F 00 00 00 
39024 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
39028 13c 66 46 16 1E 
3902c 13d 16 06 46 66 
39030 13e 7F 00 00 00 
39034 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
39038 140 66 46 16 1E 
3903c 141 16 06 06 06 
39040 142 0F 00 00 00 
39044 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
39048 144 66 43 03 03 
3904c 145 7B 63 63 66 
39050 146 5C 00 00 00 
39054 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
39058 148 63 63 63 7F 
3905c 149 63 63 63 63 
39060 14a 63 00 00 00 
39064 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
39068 14c 18 18 18 18 
3906c 14d 18 18 18 18 | 	byte	$18[8]
39070 14e 3C 00 00 00 
39074 14f 00 00 00 78 
39078 150 30 30 30 30 
3907c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
39080 152 1E 00 00 00 
39084 153 00 00 00 67 
39088 154 66 66 36 1E 
3908c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
39090 156 67 00 00 00 
39094 157 00 00 00 0F 
39098 158 06 06 06 06 
3909c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
390a0 15a 7F 00 00 00 
390a4 15b 00 00 00 63 
390a8 15c 77 7F 7F 6B 
390ac 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
390b0 15e 63 00 00 00 
390b4 15f 00 00 00 63 
390b8 160 67 6F 7F 7B 
390bc 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
390c0 162 63 00 00 00 
390c4 163 00 00 00 3E 
390c8 164 63 63 63 63 
390cc 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
390d0 166 3E 00 00 00 
390d4 167 00 00 00 3F 
390d8 168 66 66 66 3E 
390dc 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
390e0 16a 0F 00 00 00 
390e4 16b 00 00 00 3E 
390e8 16c 63 63 63 63 
390ec 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
390f0 16e 3E 30 70 00 
390f4 16f 00 00 00 3F 
390f8 170 66 66 66 3E 
390fc 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
39100 172 67 00 00 00 
39104 173 00 00 00 3E 
39108 174 63 63 06 1C 
3910c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
39110 176 3E 00 00 00 
39114 177 00 00 00 7E 
39118 178 7E 5A 18 18 
3911c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
39120 17a 3C 00 00 00 
39124 17b 00 00 00 63 
39128 17c 63 63 63 63 
3912c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
39130 17e 3E 00 00 00 
39134 17f 00 00 00 63 
39138 180 63 63 63 63 
3913c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
39140 182 08 00 00 00 
39144 183 00 00 00 63 
39148 184 63 63 63 6B 
3914c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
39150 186 36 00 00 00 
39154 187 00 00 00 63 
39158 188 63 36 3E 1C 
3915c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
39160 18a 63 00 00 00 
39164 18b 00 00 00 66 
39168 18c 66 66 66 3C 
3916c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
39170 18e 3C 00 00 00 
39174 18f 00 00 00 7F 
39178 190 63 61 30 18 
3917c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
39180 192 7F 00 00 00 
39184 193 00 00 00 3C 
39188 194 0C 0C 0C 0C 
3918c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
39190 196 3C 00 00 00 
39194 197 00 00 00 00 
39198 198 01 03 07 0E 
3919c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
391a0 19a 40 00 00 00 
391a4 19b 00 00 00 3C 
391a8 19c 30 30 30 30 
391ac 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
391b0 19e 3C 00 00 00 
391b4 19f 1C 36 00 00 
391b8 1a0 00 00 00 00 
391bc 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391c0 1a2 00 00 00 00 
391c4 1a3 00 00 00 00 
391c8 1a4 00 00 00 00 
391cc 1a5 00 00 00 00 
391d0 1a6 00          | 	byte	$00[17]
391d1 1a6 FF 00 00 0C 
391d5 1a7 18 00 00 00 
391d9 1a8 00 00 00 00 
391dd 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391e1 1aa 00 00 00 00 
391e5 1ab 00 00 00 00 
391e9 1ac 00          | 	byte	$00[9]
391ea 1ac 1E 30 3E 33 
391ee 1ad 33 33 6E 00 
391f2 1ae 00 00 00 00 
391f6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
391fa 1b0 1E 36 66 66 
391fe 1b1 66 66 3E 00 
39202 1b2 00 00 00 00 
39206 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3920a 1b4 3E 63 03 03 
3920e 1b5 03 63 3E 00 
39212 1b6 00 00 00 00 
39216 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3921a 1b8 3C 36 33 33 
3921e 1b9 33 33 6E 00 
39222 1ba 00 00 00 00 
39226 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3922a 1bc 3E 63 7F 03 
3922e 1bd 03 63 3E 00 
39232 1be 00 00 00 00 
39236 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3923a 1c0 0C 1E 0C 0C 
3923e 1c1 0C 0C 1E 00 
39242 1c2 00 00 00 00 
39246 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3924a 1c4 6E 33 33 33 
3924e 1c5 33 33 3E 30 
39252 1c6 33 1E 00 00 
39256 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3925a 1c8 36 6E 66 66 
3925e 1c9 66 66 67 00 
39262 1ca 00 00 00 00 
39266 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3926a 1cc 1C 18 18 18 
3926e 1cd 18 18 3C 00 
39272 1ce 00 00 00 00 
39276 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3927a 1d0 70 60 60 60 
3927e 1d1 60 60 60 66 
39282 1d2 66 3C 00 00 
39286 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3928a 1d4 66 36 1E 1E 
3928e 1d5 36 66 67 00 
39292 1d6 00 00 00 00 
39296 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3929a 1d8 18 18 18 18 
3929e 1d9 18 18       | 	byte	$18[6]
392a0 1da 3C 00 00 00 
392a4 1db 00 00 00 00 
392a8 1dc 00 00 37 7F 
392ac 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
392b0 1de 63 00 00 00 
392b4 1df 00 00 00 00 
392b8 1e0 00 00 3B 66 
392bc 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
392c0 1e2 66 00 00 00 
392c4 1e3 00 00 00 00 
392c8 1e4 00 00 3E 63 
392cc 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
392d0 1e6 3E 00 00 00 
392d4 1e7 00 00 00 00 
392d8 1e8 00 00 3B 66 
392dc 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
392e0 1ea 3E 06 06 0F 
392e4 1eb 00 00 00 00 
392e8 1ec 00 00 6E 33 
392ec 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
392f0 1ee 3E 30 30 78 
392f4 1ef 00 00 00 00 
392f8 1f0 00 00 3B 6E 
392fc 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
39300 1f2 0F 00 00 00 
39304 1f3 00 00 00 00 
39308 1f4 00 00 3E 63 
3930c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
39310 1f6 3E 00 00 00 
39314 1f7 00 00 00 08 
39318 1f8 0C 0C 3F 0C 
3931c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
39320 1fa 38 00 00 00 
39324 1fb 00 00 00 00 
39328 1fc 00 00 33 33 
3932c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
39330 1fe 6E 00 00 00 
39334 1ff 00 00 00 00 
39338 200 00 00 63 63 
3933c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
39340 202 1C 00 00 00 
39344 203 00 00 00 00 
39348 204 00 00 63 63 
3934c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
39350 206 36 00 00 00 
39354 207 00 00 00 00 
39358 208 00 00 63 36 
3935c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
39360 20a 63 00 00 00 
39364 20b 00 00 00 00 
39368 20c 00 00 63 63 
3936c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
39370 20e 7E 60 30 1F 
39374 20f 00 00 00 00 
39378 210 00 00 7F 33 
3937c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
39380 212 7F 00 00 00 
39384 213 00 00 00 70 
39388 214 18 18 18 0E 
3938c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
39390 216 70 00 00 00 
39394 217 00 00 00 18 
39398 218 18 18 18 18 
3939c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
393a0 21a 18 00 00 00 
393a4 21b 00 00 00 0E 
393a8 21c 18 18 18 70 
393ac 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
393b0 21e 0E 00 00 00 
393b4 21f 6E 3B 00 00 
393b8 220 00 00 00 00 
393bc 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
393c0 222 00 00 00 00 
393c4 223 00 00 00 00 
393c8 224 00 00       | 	byte	$00[10]
393ca 224 08 1C 36 63 
393ce 225 63 63 7F 00 
393d2 226 00 00 00 00 
393d6 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
393da 228 03 03 03 03 
393de 229 43 66 3C 18 
393e2 22a 30 1E 00 00 
393e6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
393ea 22c 33 33 33 33 
393ee 22d 33 33       | 	byte	$33[6]
393f0 22e 6E 00 00 00 
393f4 22f 00 00 60 30 
393f8 230 18 00 3E 63 
393fc 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
39400 232 3E 00 00 00 
39404 233 00 00 08 1C 
39408 234 36 00 1E 30 
3940c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
39410 236 6E 00 00 00 
39414 237 00 00 00 00 
39418 238 33 00 1E 30 
3941c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
39420 23a 6E 00 00 00 
39424 23b 00 00 1C 36 
39428 23c 1C 00 33 33 
3942c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
39430 23e 6E 00 00 00 
39434 23f 00 00 60 30 
39438 240 18 00 3E 63 
3943c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
39440 242 3E 00 00 00 
39444 243 00 00 00 00 
39448 244 00 00 3E 63 
3944c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
39450 246 3E 18 30 1E 
39454 247 00 00 00 1C 
39458 248 58 78 38 18 
3945c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
39460 24a 3C 00 00 00 
39464 24b 00 00 00 00 
39468 24c 63 00 3E 63 
3946c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
39470 24e 3E 00 00 00 
39474 24f 66 33 00 3E 
39478 250 63 63 63 63 
3947c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
39480 252 3E 00 00 00 
39484 253 00 00 CC 66 
39488 254 33 00 3E 63 
3948c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
39490 256 3E 00 00 00 
39494 257 00 00 18 3C 
39498 258 66 00 1C 18 
3949c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
394a0 25a 3C 00 00 00 
394a4 25b 30 18 00 7F 
394a8 25c 63 61 30 18 
394ac 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
394b0 25e 7F 00 00 00 
394b4 25f 00 63 00 08 
394b8 260 1C 36 63 63 
394bc 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
394c0 262 63 00 00 00 
394c4 263 30 18 00 3C 
394c8 264 66 43 03 03 
394cc 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
394d0 266 3C 00 00 00 
394d4 267 30 18 00 7F 
394d8 268 66 46 16 1E 
394dc 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
394e0 26a 7F 00 00 00 
394e4 26b 0C 06 00 0F 
394e8 26c 06 06 06 06 
394ec 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
394f0 26e 7F 00 00 00 
394f4 26f 30 18 00 1C 
394f8 270 18 18 18 18 
394fc 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
39500 272 3C 00 00 00 
39504 273 00 00 08 1C 
39508 274 36 00 3E 63 
3950c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
39510 276 3E 00 00 00 
39514 277 00 00 00 00 
39518 278 63 00 3E 63 
3951c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
39520 27a 3E 00 00 00 
39524 27b 00 00 00 6F 
39528 27c 46 26 06 06 
3952c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
39530 27e 7F 00 00 00 
39534 27f 00 00 00 6E 
39538 280 4C 2C 0C 0C 
3953c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
39540 282 1E 00 00 00 
39544 283 30 18 00 3E 
39548 284 63 63 06 1C 
3954c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
39550 286 3E 00 00 00 
39554 287 00 00 60 30 
39558 288 18 00 3E 63 
3955c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
39560 28a 3E 00 00 00 
39564 28b 00 63 00 3E 
39568 28c 63 63 63 63 
3956c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
39570 28e 3E 00 00 00 
39574 28f 00 63 00 63 
39578 290 63 63 63 63 
3957c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
39580 292 3E 00 00 00 
39584 293 6C 38 00 7E 
39588 294 7E 5A 18 18 
3958c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
39590 296 3C 00 00 00 
39594 297 00 00 60 48 
39598 298 2C 0C 3F 0C 
3959c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
395a0 29a 38 00 00 00 
395a4 29b 00 00 00 0F 
395a8 29c 26 36 1E 0E 
395ac 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
395b0 29e 7F 00 00 00 
395b4 29f 00 00 00 00 
395b8 2a0 00 63 36 1C 
395bc 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
395c0 2a2 00 00 00 00 
395c4 2a3 00 00       | 	byte	$00[6]
395c6 2a3 36 1C 08 00 
395ca 2a4 3E 63 03 03 
395ce 2a5 03 63 3E 00 
395d2 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
395d6 2a7 30 18 0C 00 
395da 2a8 1E 30 3E 33 
395de 2a9 33 33 6E 00 
395e2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
395e6 2ab 60 30 18 00 
395ea 2ac 1C 18 18 18 
395ee 2ad 18 18 3C 00 
395f2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
395f6 2af 60 30 18 00 
395fa 2b0 3E 63 63 63 
395fe 2b1 63 63 3E 00 
39602 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
39606 2b3 30 18 0C 00 
3960a 2b4 33 33 33 33 
3960e 2b5 33 33 6E 00 
39612 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
39616 2b7 00 08 1C 36 
3961a 2b8 63 63 7F 63 
3961e 2b9 63 63 63 18 
39622 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
39626 2bb 00 00 00 00 
3962a 2bc 1E 30 3E 33 
3962e 2bd 33 33 6E 18 
39632 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
39636 2bf 00 7F 63 61 
3963a 2c0 30 18 0C 06 
3963e 2c1 43 63 7F 00 
39642 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
39646 2c3 36 1C 08 00 
3964a 2c4 7F 33 18 0C 
3964e 2c5 06 63 7F 00 
39652 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
39656 2c7 00 7F 66 46 
3965a 2c8 16 1E 16 06 
3965e 2c9 46 66 7F 18 
39662 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
39666 2cb 00 00 00 00 
3966a 2cc 3E 63 7F 03 
3966e 2cd 03 63 3E 18 
39672 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
39676 2cf 00 3C 66 03 
3967a 2d0 1F 03 0F 03 
3967e 2d1 03 66 3C 00 
39682 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
39686 2d3 60 30 18 00 
3968a 2d4 7F 33 18 0C 
3968e 2d5 06 63 7F 00 
39692 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
39696 2d7 00 3C 66 43 
3969a 2d8 03 03 03 03 
3969e 2d9 43 66 3C 00 
396a2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
396a6 2db 00 00 00 00 
396aa 2dc 3E 63 06 1C 
396ae 2dd 30 63 3E 18 
396b2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
396b6 2df 00 00 00 00 
396ba 2e0 00 00       | 	byte	$00[6]
396bc 2e1 6C 36 1B 36 
396c0 2e2 6C 00 00 00 
396c4 2e3 00 00 00 00 
396c8 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
396cc 2e5 1B 36 6C 36 
396d0 2e6 1B 00 00 00 
396d4 2e7 88 22 88 22 
396d8 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
396dc 2e9 88 22 88 22 
396e0 2ea 88 22 88 22 
396e4 2eb AA 55 AA 55 
396e8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
396ec 2ed AA 55 AA 55 
396f0 2ee AA 55 AA 55 
396f4 2ef BB EE BB EE 
396f8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
396fc 2f1 BB EE BB EE 
39700 2f2 BB EE BB EE 
39704 2f3 18 18 18 18 
39708 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3970c 2f5 18 18 18 18 
39710 2f6 18 18 18 18 
39714 2f7 18 18 18 18 
39718 2f8 18 18 18    | 	byte	$18[15]
3971b 2f8 1F 18 18 18 
3971f 2f9 18 18 18 18 
39723 2fa 18 30 18 00 
39727 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3972b 2fc 63 7F 63 63 
3972f 2fd 63 63 00 00 
39733 2fe 00 1C 36 00 
39737 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3973b 300 63 7F 63 63 
3973f 301 63 63 00 00 
39743 302 00 36 1C 00 
39747 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3974b 304 1E 16 06 46 
3974f 305 66 7F 00 00 
39753 306 00 00 00 00 
39757 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3975b 308 1C 30 60 63 
3975f 309 63 3E 18 30 
39763 30a 1E 6C 6C 6C 
39767 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3976b 30c 6F 6C 6C 6C 
3976f 30d 6C 6C 6C 6C 
39773 30e 6C 6C 6C 6C 
39777 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3977b 310 6C 6C 6C 6C 
3977f 311 6C 6C 6C 6C 
39783 312 6C          | 	byte	$6c[9]
39784 313 00 00 00 00 
39788 314 00          | 	byte	$00[5]
39789 314 7F 60 6F 6C 
3978d 315 6C 6C 6C 6C 
39791 316 6C 6C 6C 6C 
39795 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
39799 318 6F 60 7F 00 
3979d 319 00 00 00 00 
397a1 31a 00 00 00 18 
397a5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
397a9 31c 61 30 18 0C 
397ad 31d 06 43 63 7F 
397b1 31e 00 00 00 00 
397b5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
397b9 320 00 7F 33 18 
397bd 321 0C 06 63 7F 
397c1 322 00 00 00 00 
397c5 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
397c9 324 00 00 1F 18 
397cd 325 18 18 18 18 
397d1 326 18 18 18 18 
397d5 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
397d9 328 18 18 F8 00 
397dd 329 00 00 00 00 
397e1 32a 00 00 00 18 
397e5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
397e9 32c 18 18 FF 00 
397ed 32d 00 00 00 00 
397f1 32e 00 00 00 00 
397f5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
397f9 330 00 00 FF 18 
397fd 331 18 18 18 18 
39801 332 18 18 18 18 
39805 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39809 334 18 18 F8 18 
3980d 335 18 18 18 18 
39811 336 18 18 18 00 
39815 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
39819 338 00 00 FF 00 
3981d 339 00 00 00 00 
39821 33a 00 00 00 18 
39825 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
39829 33c 18 18 FF 18 
3982d 33d 18 18 18 18 
39831 33e 18 18 18 63 
39835 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
39839 340 36 63 63 7F 
3983d 341 63 63 63 63 
39841 342 00 00 00 00 
39845 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
39849 344 00 1E 30 3E 
3984d 345 33 33 33 6E 
39851 346 00 00 00 6C 
39855 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
39859 348 EC 0C FC 00 
3985d 349 00 00 00 00 
39861 34a 00 00 00 00 
39865 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39869 34c FC 0C EC 6C 
3986d 34d 6C 6C 6C 6C 
39871 34e 6C 6C 6C 6C 
39875 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
39879 350 EF 00 FF 00 
3987d 351 00 00 00 00 
39881 352 00 00 00 00 
39885 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39889 354 FF 00 EF 6C 
3988d 355 6C 6C 6C 6C 
39891 356 6C 6C 6C 6C 
39895 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
39899 358 EC 0C EC 6C 
3989d 359 6C 6C 6C 6C 
398a1 35a 6C 6C 6C 00 
398a5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
398a9 35c FF 00 FF 00 
398ad 35d 00 00 00 00 
398b1 35e 00 00 00 6C 
398b5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
398b9 360 EF 00 EF 6C 
398bd 361 6C 6C 6C 6C 
398c1 362 6C 6C 6C 00 
398c5 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
398c9 364 63 3E 63 63 
398cd 365 63 63 3E 63 
398d1 366 00 00 00 00 
398d5 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
398d9 368 30 3C 36 33 
398dd 369 33 33 33 6E 
398e1 36a 00 00 00 00 
398e5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
398e9 36c 66 66 6F 66 
398ed 36d 66 66 36 1F 
398f1 36e 00 00 00 36 
398f5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
398f9 370 66 66 66 66 
398fd 371 66 66       | 	byte	$66[6]
398ff 371 36 1F 00 00 
39903 372 00 00 63 00 
39907 373 7F 66 46 16 
3990b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3990f 375 66 7F 00 00 
39913 376 00 6C 38 00 
39917 377 38 30 30 3C 
3991b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3991f 379 33 6E 00 00 
39923 37a 00 36 1C 00 
39927 37b 63 67 6F 7F 
3992b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3992f 37d 63 63 00 00 
39933 37e 00 30 18 00 
39937 37f 3C 18 18 18 
3993b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3993f 381 18 3C 00 00 
39943 382 00 3C 66 00 
39947 383 3C 18 18 18 
3994b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3994f 385 18 3C 00 00 
39953 386 00 00 00 36 
39957 387 1C 08 00 3E 
3995b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3995f 389 63 3E 00 00 
39963 38a 00 18 18 18 
39967 38b 18 18 18 18 
3996b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3996f 38d 00 00 00 00 
39973 38e 00 00 00 00 
39977 38f 00 00 00 00 | 	byte	$00[12]
3997b 390 F8 18 18 18 
3997f 391 18 18 18 18 
39983 392 18 FF FF FF 
39987 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3998b 394 FF FF FF FF 
3998f 395 FF FF FF FF 
39993 396 FF          | 	byte	$ff[9]
39994 397 00 00 00 00 
39998 398 00 00 00    | 	byte	$00[7]
3999b 398 FF FF FF FF 
3999f 399 FF FF FF FF 
399a3 39a FF          | 	byte	$ff[9]
399a4 39b 00 00 00 7E 
399a8 39c 7E 5A 18 18 
399ac 39d 18 18 18 18 
399b0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
399b4 39f 1C 36 1C 63 
399b8 3a0 63 63 63 63 
399bc 3a1 63 63 63 63 
399c0 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
399c4 3a3 FF FF FF FF 
399c8 3a4 FF FF FF    | 	byte	$ff[7]
399cb 3a4 00 00 00 00 
399cf 3a5 00 00 00 00 
399d3 3a6 00          | 	byte	$00[9]
399d4 3a7 30 18 00 3E 
399d8 3a8 63 63 63 63 
399dc 3a9 63 63 63 63 
399e0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
399e4 3ab 00 00 00 1E 
399e8 3ac 33 33 33 1B 
399ec 3ad 33 63 63 63 
399f0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
399f4 3af 1C 36 00 3E 
399f8 3b0 63 63 63 63 
399fc 3b1 63 63 63 63 
39a00 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39a04 3b3 30 18 00 63 
39a08 3b4 67 6F 7F 7B 
39a0c 3b5 73 63 63 63 
39a10 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
39a14 3b7 00 00 60 30 
39a18 3b8 18 00 3B 66 
39a1c 3b9 66 66 66 66 
39a20 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
39a24 3bb 00 00 36 1C 
39a28 3bc 08 00 3B 66 
39a2c 3bd 66 66 66 66 
39a30 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
39a34 3bf 36 1C 00 3E 
39a38 3c0 63 63 06 1C 
39a3c 3c1 30 60 63 63 
39a40 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
39a44 3c3 00 00 36 1C 
39a48 3c4 08 00 3E 63 
39a4c 3c5 06 1C 30 63 
39a50 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
39a54 3c7 30 18 00 3F 
39a58 3c8 66 66 66 3E 
39a5c 3c9 36 66 66 66 
39a60 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
39a64 3cb 30 18 00 63 
39a68 3cc 63 63 63 63 
39a6c 3cd 63 63 63 63 
39a70 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39a74 3cf 00 00 60 30 
39a78 3d0 18 00 3B 6E 
39a7c 3d1 66 06 06 06 
39a80 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
39a84 3d3 66 33 00 63 
39a88 3d4 63 63 63 63 
39a8c 3d5 63 63 63 63 
39a90 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39a94 3d7 00 00 60 30 
39a98 3d8 18 00 63 63 
39a9c 3d9 63 63 63 63 
39aa0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
39aa4 3db 30 18 00 66 
39aa8 3dc 66 66 66 3C 
39aac 3dd 18 18 18 18 
39ab0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
39ab4 3df 00 00 00 08 
39ab8 3e0 0C 0C 3F 0C 
39abc 3e1 0C 0C 0C 6C 
39ac0 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
39ac4 3e3 30 18 00 00 
39ac8 3e4 00 00 00 00 
39acc 3e5 00 00 00 00 
39ad0 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ad4 3e7 00 00 00 00 
39ad8 3e8 00 00 00 00 | 	byte	$00[8]
39adc 3e9 7F 00 00 00 
39ae0 3ea 00 00 00 00 
39ae4 3eb 66 33 00 00 
39ae8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
39aec 3ed 00 00 00 00 
39af0 3ee 00 00 00 00 
39af4 3ef 00 00 00 00 
39af8 3f0 00 00 00 00 
39afc 3f1 00 00 00 00 
39b00 3f2 00          | 	byte	$00[21]
39b01 3f2 0C 06 3C 36 
39b05 3f3 1C 00 00 00 
39b09 3f4 00 00 00 00 
39b0d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b11 3f6 00 00 00 63 
39b15 3f7 3E 00 00 00 
39b19 3f8 00 00 00 00 
39b1d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b21 3fa 00 00 00 00 
39b25 3fb 3E 63 06 1C 
39b29 3fc 36 63 63 36 
39b2d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
39b31 3fe 00 00 00 00 
39b35 3ff 00 00 00 00 | 	byte	$00[8]
39b39 400 18 00 7E 00 
39b3d 401 18 00 00 00 
39b41 402 00 00 00 00 
39b45 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b49 404 00 00 00 00 
39b4d 405 00 00 00 00 | 	byte	$00[8]
39b51 406 18 30 1E 00 
39b55 407 00 00 1C 36 
39b59 408 36 1C 00 00 
39b5d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
39b61 40a 00 00 00 00 
39b65 40b 63 00 00 00 
39b69 40c 00 00 00 00 
39b6d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b71 40e 00 00 00 18 
39b75 40f 18 00 00 00 
39b79 410 00 00 00 00 
39b7d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b81 412 00 00 00 00 
39b85 413 00          | 	byte	$00[5]
39b86 413 CC 66 33 00 
39b8a 414 33 33 33 33 
39b8e 415 33 33 6E 00 
39b92 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
39b96 417 00 3F 66 66 
39b9a 418 66 3E 36 66 
39b9e 419 66 66 6F 00 
39ba2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
39ba6 41b 36 1C 08 00 
39baa 41c 3B 6E 66 06 
39bae 41d 06 06 0F 00 
39bb2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
39bb6 41f 00 00 00 7E 
39bba 420 7E 7E 7E 7E 
39bbe 421 7E 7E 00 00 
39bc2 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
39bc6 423 00 00 00 00 
39bca 424 00 00 00 00 
39bce 425 00 00 00 00 
39bd2 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39bd4 427             | 'vga_font       file "vgafont.def"
39bd4 427 00 00 00 00 
      ...             
39c04 433 00 00 00 00 
39c08 434 00 00 00    | st_font        file "st4font.def"
39c0b 434 FF FF 00 00 
39c0f 435 00 00 00 00 
39c13 436 00 18 18 18 
39c17 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39c1b 438 18 18 18 18 
39c1f 439 18 18 18 18 
39c23 43a 18          | 	byte	$18[9]
39c24 43b 00 00 00 00 
39c28 43c 00 00 00    | 	byte	$00[7]
39c2b 43c FF FF 18 18 
39c2f 43d 18 18 18 18 
39c33 43e 18 18 18 18 
39c37 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39c3b 440 FF FF 00 00 
39c3f 441 00 00 00 00 
39c43 442 00 18 18 18 
39c47 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39c4b 444 1F 1F 18 18 
39c4f 445 18 18 18 18 
39c53 446 18 18 18 18 
39c57 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39c5b 448 F8 F8 18 18 
39c5f 449 18 18 18 18 
39c63 44a 18 00 00 00 
39c67 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39c6b 44c 1F 1F 18 18 
39c6f 44d 18 18 18 18 
39c73 44e 18 00 00 00 
39c77 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39c7b 450 F8 F8 18 18 
39c7f 451 18 18 18 18 
39c83 452 18 18 18 18 
39c87 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39c8b 454 1F 1F 00 00 
39c8f 455 00 00 00 00 
39c93 456 00 18 18 18 
39c97 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39c9b 458 F8 F8 00 00 
39c9f 459 00 00 00 00 
39ca3 45a 00 18 18 18 
39ca7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39cab 45c FF FF 18 18 
39caf 45d 18 18 18 18 
39cb3 45e 18 00 00 18 
39cb7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
39cbb 460 66 7E 7E 66 
39cbf 461 66 66 66 30 
39cc3 462 18 00 00 7E 
39cc7 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
39ccb 464 3E 06 06 06 
39ccf 465 06 7E 7E 18 
39cd3 466 0C 30 18 3C 
39cd7 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
39cdb 468 06 06 06 66 
39cdf 469 66 7E 3C 00 
39ce3 46a 00 30 18 66 
39ce7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
39ceb 46c 7E 7E 76 76 
39cef 46d 66 66 66 00 
39cf3 46e 00 30 18 7C 
39cf7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
39cfb 470 1C 38 70 60 
39cff 471 60 7E 3E 00 
39d03 472 00 30 18 7E 
39d07 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
39d0b 474 18 0C 0C 06 
39d0f 475 06 7E 7E 00 
39d13 476 00 18 18 00 
39d17 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
39d1b 478 18 18 0C 0C 
39d1f 479 06 7E 7E 00 
39d23 47a 00 30 18 3C 
39d27 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
39d2b 47c 66 66 66 66 
39d2f 47d 66          | 	byte	$66[5]
39d30 47e 7E 3C 00 00 
39d34 47f 00 00 06 06 
39d38 480 06 06 16 1E 
39d3c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
39d40 482 7E 7E 00 00 
39d44 483 00 00 00 00 
39d48 484 00 3C 7C 60 
39d4c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
39d50 486 7E 7C 30 18 
39d54 487 00 00 00 00 
39d58 488 00 3C 7E 66 
39d5c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
39d60 48a 7E 7C 18 0C 
39d64 48b 00 00 30 18 
39d68 48c 00 3C 3E 06 
39d6c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
39d70 48e 7E 7C 00 00 
39d74 48f 00 00 30 18 
39d78 490 00 3E 7E 66 
39d7c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
39d80 492 66 66 00 00 
39d84 493 00 00 30 18 
39d88 494 00 7C 7E 06 
39d8c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
39d90 496 7E 3E 00 00 
39d94 497 00 00 30 18 
39d98 498 00 7E 7E 30 
39d9c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
39da0 49a 7E 7E 00 00 
39da4 49b 00 00 18 18 
39da8 49c 00 7E 7E 30 
39dac 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
39db0 49e 7E 7E 00 00 
39db4 49f 00 00 30 18 
39db8 4a0 00 3C 7E 66 
39dbc 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
39dc0 4a2 7E 3C 00 00 
39dc4 4a3 00 00 1C 1C 
39dc8 4a4 18 18 38 3C 
39dcc 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
39dd0 4a6 3C 3C 00 00 
39dd4 4a7 00 00 00 00 
39dd8 4a8 00 00 00 00 
39ddc 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39de0 4aa 00 00 00 00 
39de4 4ab 00 00       | 	byte	$00[6]
39de6 4ab 18 18 18 18 
39dea 4ac 18 18 18 18 | 	byte	$18[8]
39dee 4ad 00 00 18 18 
39df2 4ae 00 00 00 00 
39df6 4af 66 66 66 66 
39dfa 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
39dfe 4b1 00 00 00 00 
39e02 4b2 00 00 00 00 
39e06 4b3 00          | 	byte	$00[9]
39e07 4b3 66 66 FF FF 
39e0b 4b4 66 66 FF FF 
39e0f 4b5 66 66 00 00 
39e13 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
39e17 4b7 7C 7E 06 06 
39e1b 4b8 3E 7C 60 60 
39e1f 4b9 7E 3E 18 18 
39e23 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
39e27 4bb 66 30 30 18 
39e2b 4bc 18 0C 0C 66 
39e2f 4bd 66 00 00 00 
39e33 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
39e37 4bf 66 66 3C 1C 
39e3b 4c0 1C FC FE 66 
39e3f 4c1 66 FE FC 00 
39e43 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
39e47 4c3 18 18 18 18 
39e4b 4c4 00 00 00 00 
39e4f 4c5 00 00 00 00 
39e53 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
39e57 4c7 18 1C 0C 0C 
39e5b 4c8 0C 0C 0C 0C 
39e5f 4c9 1C 18 30 00 
39e63 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
39e67 4cb 18 38 30 30 
39e6b 4cc 30 30 30 30 
39e6f 4cd 38 18 0C 00 
39e73 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
39e77 4cf 66 66 3C 3C 
39e7b 4d0 FF FF 3C 3C 
39e7f 4d1 66 66 00 00 
39e83 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
39e87 4d3 00 18 18 18 
39e8b 4d4 7E 7E 18 18 
39e8f 4d5 18 00 00 00 
39e93 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39e97 4d7 00 00 00 00 
39e9b 4d8 00 00       | 	byte	$00[6]
39e9d 4d9 18 18 18 18 
39ea1 4da 18          | 	byte	$18[5]
39ea2 4da 0C 04 00 00 
39ea6 4db 00 00 00 00 
39eaa 4dc 7E 7E 00 00 
39eae 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
39eb2 4de 00 00 00 00 
39eb6 4df 00 00 00 00 
39eba 4e0 00 00 00 00 
39ebe 4e1 00          | 	byte	$00[13]
39ebf 4e1 18 18 18 00 
39ec3 4e2 00 00 00 60 
39ec7 4e3 60 60 30 30 
39ecb 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
39ecf 4e5 06 06 06 00 
39ed3 4e6 00 00 00 3C 
39ed7 4e7 7E 66 66 66 
39edb 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
39edf 4e9 66 7E 3C 00 
39ee3 4ea 00 00 00 18 
39ee7 4eb 18 1C 1C 18 
39eeb 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
39eef 4ed 18 7E 7E 00 
39ef3 4ee 00 00 00 3C 
39ef7 4ef 7E 66 66 30 
39efb 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
39eff 4f1 0C 7E 7E 00 
39f03 4f2 00 00 00 7E 
39f07 4f3 7E 30 30 18 
39f0b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
39f0f 4f5 66 7E 3C 00 
39f13 4f6 00 00 00 30 
39f17 4f7 30 38 38 3C 
39f1b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
39f1f 4f9 7E 30 30 00 
39f23 4fa 00 00 00 7E 
39f27 4fb 7E 06 06 3E 
39f2b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
39f2f 4fd 66 7E 3C 00 
39f33 4fe 00 00 00 38 
39f37 4ff 3C 0E 06 06 
39f3b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
39f3f 501 66 7E 3C 00 
39f43 502 00 00 00 7E 
39f47 503 7E 60 60 30 
39f4b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
39f4f 505 0C 0C 0C 00 
39f53 506 00 00 00 3C 
39f57 507 7E 66 66 3C 
39f5b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
39f5f 509 66 7E 3C 00 
39f63 50a 00 00 00 3C 
39f67 50b 7E 66 66 7E 
39f6b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
39f6f 50d 70 3C 1C 00 
39f73 50e 00 00 00 00 
39f77 50f 00 00 18 18 
39f7b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
39f7f 511 18 18 18 00 
39f83 512 00 00 00 00 
39f87 513 00 00 18 18 
39f8b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
39f8f 515 18 18 18 0C 
39f93 516 04 00 00 00 
39f97 517 70 38 1C 0E 
39f9b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
39f9f 519 70 00 00 00 
39fa3 51a 00 00 00 00 
39fa7 51b 00 00 7E 7E 
39fab 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
39faf 51d 00 00 00 00 
39fb3 51e 00 00 00 00 | 	byte	$00[8]
39fb7 51f 0E 1C 38 70 
39fbb 520 E0 70 38 1C 
39fbf 521 0E 00 00 00 
39fc3 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
39fc7 523 7E 66 66 30 
39fcb 524 30 18 18 18 
39fcf 525 00 18 18 00 
39fd3 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
39fd7 527 7E 66 66 66 
39fdb 528 66 36 06 66 
39fdf 529 66 7E 3C 00 
39fe3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
39fe7 52b 3C 7E 66 66 
39feb 52c 66 7E 7E 66 
39fef 52d 66 66 66 00 
39ff3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
39ff7 52f 7E 66 66 7E 
39ffb 530 3E 66 66 66 
39fff 531 66 7E 3E 00 
3a003 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3a007 533 7E 66 66 06 
3a00b 534 06 06 06 66 
3a00f 535 66 7E 3C 00 
3a013 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3a017 537 7E 66 66 66 
3a01b 538 66 66 66 66 
3a01f 539 66 7E 3E 00 
3a023 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3a027 53b 7E 06 06 3E 
3a02b 53c 3E 06 06 06 
3a02f 53d 06 7E 7E 00 
3a033 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3a037 53f 7E 06 06 3E 
3a03b 540 3E 06 06 06 
3a03f 541 06 06 06 00 
3a043 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3a047 543 7E 06 06 76 
3a04b 544 76 66 66 66 
3a04f 545 66 7E 3C 00 
3a053 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3a057 547 66 66 66 7E 
3a05b 548 7E 66 66 66 
3a05f 549 66 66 66 00 
3a063 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3a067 54b 7E 18 18 18 
3a06b 54c 18 18 18 18 
3a06f 54d 18 7E 7E 00 
3a073 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3a077 54f 60 60 60 60 
3a07b 550 60 60 60    | 	byte	$60[7]
3a07e 551 66 66 7E 3C 
3a082 552 00 00 00 00 
3a086 553 66 66 36 36 
3a08a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3a08e 555 66 66 C6 C6 
3a092 556 00 00 00 00 
3a096 557 06 06 06 06 
3a09a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3a09e 559 06 06 7E 7E 
3a0a2 55a 00 00 00 00 
3a0a6 55b C6 C6 EE EE 
3a0aa 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3a0ae 55d C6 C6 C6 C6 
3a0b2 55e 00 00 00 00 
3a0b6 55f 66 66 66 6E 
3a0ba 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3a0be 561 76 66 66 66 
3a0c2 562 00 00 00 00 
3a0c6 563 3C 7E 66 66 
3a0ca 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3a0ce 565 66 66 7E 3C 
3a0d2 566 00 00 00 00 
3a0d6 567 3E 7E 66 66 
3a0da 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3a0de 569 06 06 06 06 
3a0e2 56a 00 00 00 00 
3a0e6 56b 3C 7E 66 66 
3a0ea 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3a0ee 56d 66 56 3E 6C 
3a0f2 56e 00 00 00 00 
3a0f6 56f 3E 7E 66 66 
3a0fa 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3a0fe 571 66 66 C6 C6 
3a102 572 00 00 00 00 
3a106 573 7C 7E 06 06 
3a10a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3a10e 575 60 60 7E 3E 
3a112 576 00 00 00 00 
3a116 577 7E 7E 18 18 
3a11a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3a11e 579 18 18 18 18 
3a122 57a 00 00 00 00 
3a126 57b 66 66 66 66 
3a12a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3a12e 57d 66 66 7E 3C 
3a132 57e 00 00 00 00 
3a136 57f 66 66 66 66 
3a13a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3a13e 581 3C 3C 18 18 
3a142 582 00 00 00 00 
3a146 583 C6 C6 C6 C6 
3a14a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3a14e 585 FE EE C6 82 
3a152 586 00 00 00 00 
3a156 587 66 66 66 3C 
3a15a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3a15e 589 3C 66 66 66 
3a162 58a 00 00 00 00 
3a166 58b 66 66 66 66 
3a16a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3a16e 58d 18 18 18 18 
3a172 58e 00 00 00 00 
3a176 58f 7E 7E 30 30 
3a17a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3a17e 591 06 06 7E 7E 
3a182 592 00 00 00 00 
3a186 593 3C 3C 0C 0C 
3a18a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3a18e 595 0C 0C 3C 3C 
3a192 596 00 00 00 00 
3a196 597 06 06 0C 0C 
3a19a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3a19e 599 60 60 C0 C0 
3a1a2 59a 00 00 00 00 
3a1a6 59b 3C 3C 30 30 
3a1aa 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3a1ae 59d 30 30 3C 3C 
3a1b2 59e 00 00 00 00 
3a1b6 59f 18 18 3C 3C 
3a1ba 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3a1be 5a1 00 00 00 00 
3a1c2 5a2 00 00 00 00 
3a1c6 5a3 00 00 00 00 
3a1ca 5a4 00 00 00 00 
3a1ce 5a5 00 00       | 	byte	$00[18]
3a1d0 5a6 FE FE 00 00 
3a1d4 5a7 00 00 0C 0C 
3a1d8 5a8 18 18 00 00 
3a1dc 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3a1e0 5aa 00 00 00 00 
3a1e4 5ab 00 00 00 00 
3a1e8 5ac 00          | 	byte	$00[9]
3a1e9 5ac 3C 7C 60 7C 
3a1ed 5ad 7E 66 66 7E 
3a1f1 5ae 7C 00 00 00 
3a1f5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3a1f9 5b0 3E 7E 66 66 
3a1fd 5b1 66 66 66 7E 
3a201 5b2 3E 00 00 00 
3a205 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3a209 5b4 3C 3E 06 06 
3a20d 5b5 06 06 06 7E 
3a211 5b6 7C 00 00 00 
3a215 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3a219 5b8 7C 7E 66 66 
3a21d 5b9 66 66 66 7E 
3a221 5ba 7C 00 00 00 
3a225 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3a229 5bc 3C 7E 66 66 
3a22d 5bd 7E 06 06 7E 
3a231 5be 7C 00 00 00 
3a235 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3a239 5c0 18 7E 7E 18 
3a23d 5c1 18 18 18 18 
3a241 5c2 18 00 00 00 
3a245 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a249 5c4 7C 7E 66 66 
3a24d 5c5 66 66 7E 7C 
3a251 5c6 60 7E 3E 00 
3a255 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3a259 5c8 3E 7E 66 66 
3a25d 5c9 66 66 66 66 
3a261 5ca 66 00 00 00 
3a265 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3a269 5cc 1C 1C 18 18 
3a26d 5cd 18 18 18 3C 
3a271 5ce 3C 00 00 00 
3a275 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3a279 5d0 30 30 30 30 
3a27d 5d1 30 30 30 30 
3a281 5d2 30          | 	byte	$30[9]
3a282 5d2 3E 1E 00 00 
3a286 5d3 06 06 06 36 
3a28a 5d4 36 1E 1E 1E 
3a28e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3a292 5d6 00 00 00 00 
3a296 5d7 1C 1C 18 18 
3a29a 5d8 18 18 18 18 
3a29e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3a2a2 5da 00 00 00 00 
3a2a6 5db 00 00 00    | 	byte	$00[7]
3a2a9 5dc 6C FE FE D6 
3a2ad 5dd D6 C6 C6 C6 
3a2b1 5de C6 00 00 00 
3a2b5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3a2b9 5e0 3E 7E 66 66 
3a2bd 5e1 66 66 66 66 
3a2c1 5e2 66 00 00 00 
3a2c5 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3a2c9 5e4 3C 7E 66 66 
3a2cd 5e5 66 66 66 7E 
3a2d1 5e6 3C 00 00 00 
3a2d5 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3a2d9 5e8 3E 7E 66 66 
3a2dd 5e9 66 66 66 7E 
3a2e1 5ea 3E 06 06 00 
3a2e5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3a2e9 5ec 7C 7E 66 66 
3a2ed 5ed 66 66 66 7E 
3a2f1 5ee 7C 60 60 00 
3a2f5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3a2f9 5f0 3E 7E 66 06 
3a2fd 5f1 06 06 06 06 
3a301 5f2 06 00 00 00 
3a305 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3a309 5f4 7C 7E 06 0E 
3a30d 5f5 3C 70 60 7E 
3a311 5f6 3E 00 00 00 
3a315 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3a319 5f8 7E 7E 18 18 
3a31d 5f9 18 18 18 78 
3a321 5fa 70 00 00 00 
3a325 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3a329 5fc 66 66 66 66 
3a32d 5fd 66 66 66    | 	byte	$66[7]
3a330 5fe 7E 7C 00 00 
3a334 5ff 00 00 00 00 
3a338 600 00 66 66 66 
3a33c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3a340 602 18 18 00 00 
3a344 603 00 00 00 00 
3a348 604 00 C6 C6 D6 
3a34c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3a350 606 C6 82 00 00 
3a354 607 00 00 00 00 
3a358 608 00 66 66 3C 
3a35c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3a360 60a 66 66 00 00 
3a364 60b 00 00 00 00 
3a368 60c 00 66 66 66 
3a36c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3a370 60e 7C 60 7E 3E 
3a374 60f 00 00 00 00 
3a378 610 00 7E 7E 30 
3a37c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3a380 612 7E 7E 00 00 
3a384 613 00 00 30 18 
3a388 614 18 18 18 0C 
3a38c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3a390 616 18 30 00 00 
3a394 617 00 00 18 18 
3a398 618 18 18 18 18 
3a39c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a3a0 61a 18 18 00 00 
3a3a4 61b 00 00 0C 18 
3a3a8 61c 18 18 18 30 
3a3ac 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3a3b0 61e 18 0C 00 00 
3a3b4 61f 00 00 6C 7E 
3a3b8 620 36 00 00 00 
3a3bc 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3a3c0 622 00 00 00 00 
3a3c4 623 00 00 00 00 
3a3c8 624 00          | 	byte	$00[9]
3a3c9 624 18 18 18 18 
3a3cd 625 18 18 00 00 
3a3d1 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3a3d4 627             | 'amiga_font     file "amigafont.def"
3a3d4 627 00 6C FE FE 
3a3d8 628 7C 38 10 00 
3a3dc 629 18 18 18 F8 
3a3e0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3a3e4 62b C0 C0 C0 C0 
3a3e8 62c C0 C0 C0 C0 | 	byte	$c0[8]
3a3ec 62d 18 18 18 1F 
3a3f0 62e 1F 00 00 00 
3a3f4 62f 18 18 18 1F 
3a3f8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3a3fc 631 00 00 00 1F 
3a400 632 1F 18 18 18 
3a404 633 C0 E0 70 38 
3a408 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3a40c 635 03 07 0E 1C 
3a410 636 38 70 E0 C0 
3a414 637 80 C0 E0 F0 
3a418 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3a41c 639 00 00 00 00 
3a420 63a F0 F0 F0 F0 
3a424 63b 01 03 07 0F 
3a428 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3a42c 63d F0 F0 F0 F0 
3a430 63e 00 00 00 00 
3a434 63f 0F 0F 0F 0F 
3a438 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3a43c 641 FF FF 00 00 
3a440 642 00 00 00 00 
3a444 643 00 00 00 00 
3a448 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3a44c 645 00 00 00 00 
3a450 646 0F 0F 0F 0F 
3a454 647 00 38 38 EE 
3a458 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3a45c 649 00 00 00 F8 
3a460 64a F8 18 18 18 
3a464 64b 00 00 00 FF 
3a468 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3a46c 64d 18 18 18 FF 
3a470 64e FF 18 18 18 
3a474 64f 00 00 3C 7E 
3a478 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3a47c 651 00 00 00 00 
3a480 652 FF FF FF FF 
3a484 653 03 03 03 03 
3a488 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3a48c 655 00 00 00 FF 
3a490 656 FF 18 18 18 
3a494 657 18 18 18 FF 
3a498 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3a49c 659 0F 0F 0F 0F 
3a4a0 65a 0F 0F 0F 0F | 	byte	$0f[8]
3a4a4 65b 18 18 18 F8 
3a4a8 65c F8 00 00 00 
3a4ac 65d 1E 06 1E 06 
3a4b0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3a4b4 65f 00 18 3C 7E 
3a4b8 660 18 18 18 00 
3a4bc 661 00 18 18 18 
3a4c0 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3a4c4 663 00 18 0C 7E 
3a4c8 664 0C 18 00 00 
3a4cc 665 00 18 30 7E 
3a4d0 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3a4d4 667 00 00 00 00 
3a4d8 668 00 00 00 00 
3a4dc 669 00          | 	byte	$00[9]
3a4dd 669 18 18 18 18 
3a4e1 66a 00 18 00 00 
3a4e5 66b 66 66 66 00 
3a4e9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3a4ed 66d 66 FF 66 66 
3a4f1 66e FF 66 00 18 
3a4f5 66f 7C 06 3C 60 
3a4f9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3a4fd 671 66 36 18 0C 
3a501 672 66 62 00 38 
3a505 673 6C 38 1C F6 
3a509 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3a50d 675 18 18 18 00 
3a511 676 00 00 00 00 
3a515 677 70 38 18 18 
3a519 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3a51d 679 0E 1C 18 18 
3a521 67a 1C 0E 00 00 
3a525 67b 66 3C FF 3C 
3a529 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3a52d 67d 18 18 7E 18 
3a531 67e 18 00 00 00 
3a535 67f 00 00 00 00 
3a539 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3a53d 681 00 00 7E 00 
3a541 682 00 00 00 00 
3a545 683 00 00 00 00 
3a549 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3a54d 685 60 30 18 0C 
3a551 686 06 02 00 00 
3a555 687 3C 66 76 6E 
3a559 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3a55d 689 18 1C 18 18 
3a561 68a 18 7E 00 00 
3a565 68b 3C 66 30 18 
3a569 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3a56d 68d 7E 30 18 30 
3a571 68e 66 3C 00 00 
3a575 68f 30 38 3C 36 
3a579 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3a57d 691 7E 06 3E 60 
3a581 692 66 3C 00 00 
3a585 693 3C 06 3E 66 
3a589 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3a58d 695 7E 60 30 18 
3a591 696 0C 0C 00 00 
3a595 697 3C 66 3C 66 
3a599 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3a59d 699 3C 66 7C 60 
3a5a1 69a 30 1C 00 00 
3a5a5 69b 00 18 18 00 
3a5a9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3a5ad 69d 00 18 18 00 
3a5b1 69e 18 18 0C 60 
3a5b5 69f 30 18 0C 18 
3a5b9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3a5bd 6a1 00 7E 00 00 
3a5c1 6a2 7E 00 00 06 
3a5c5 6a3 0C 18 30 18 
3a5c9 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3a5cd 6a5 3C 66 30 18 
3a5d1 6a6 00 18 00 00 
3a5d5 6a7 3C 66 76 76 
3a5d9 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3a5dd 6a9 18 3C 66 66 
3a5e1 6aa 7E 66 00 00 
3a5e5 6ab 3E 66 3E 66 
3a5e9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3a5ed 6ad 3C 66 06 06 
3a5f1 6ae 66 3C 00 00 
3a5f5 6af 1E 36 66 66 
3a5f9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3a5fd 6b1 7E 06 3E 06 
3a601 6b2 06 7E 00 00 
3a605 6b3 7E 06 3E 06 
3a609 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3a60d 6b5 7C 06 06 76 
3a611 6b6 66 7C 00 00 
3a615 6b7 66 66 7E 66 
3a619 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3a61d 6b9 7E 18 18 18 
3a621 6ba 18 7E 00 00 
3a625 6bb 60 60 60 60 
3a629 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3a62d 6bd 66 36 1E 1E 
3a631 6be 36 66 00 00 
3a635 6bf 06 06 06 06 
3a639 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3a63d 6c1 C6 EE FE D6 
3a641 6c2 C6 C6 00 00 
3a645 6c3 66 6E 7E 7E 
3a649 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3a64d 6c5 3C 66 66 66 
3a651 6c6 66 3C 00 00 
3a655 6c7 3E 66 66 3E 
3a659 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3a65d 6c9 3C 66 66 66 
3a661 6ca 36 6C 00 00 
3a665 6cb 3E 66 66 3E 
3a669 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3a66d 6cd 3C 06 3C 60 
3a671 6ce 60 3C 00 00 
3a675 6cf 7E 18 18 18 
3a679 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3a67d 6d1 66 66 66 66 
3a681 6d2 66          | 	byte	$66[5]
3a682 6d2 7E 00 00 66 
3a686 6d3 66 66 66 3C 
3a68a 6d4 18 00 00 C6 
3a68e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3a692 6d6 C6 00 00 66 
3a696 6d7 66 3C 3C 66 
3a69a 6d8 66 00 00 66 
3a69e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3a6a2 6da 18 00 00 7E 
3a6a6 6db 30 18 0C 06 
3a6aa 6dc 7E 00 00 78 
3a6ae 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3a6b2 6de 78 00 00 02 
3a6b6 6df 06 0C 18 30 
3a6ba 6e0 60 00 00 1E 
3a6be 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3a6c2 6e2 1E 00 00 10 
3a6c6 6e3 38 6C C6 00 
3a6ca 6e4 00 00 00 00 
3a6ce 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a6d2 6e6 FF 00 00 18 
3a6d6 6e7 3C 7E 7E 3C 
3a6da 6e8 18 00 00 00 
3a6de 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3a6e2 6ea 7C 00 00 06 
3a6e6 6eb 06 3E 66 66 
3a6ea 6ec 3E 00 00 00 
3a6ee 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3a6f2 6ee 3C 00 00 60 
3a6f6 6ef 60 7C 66 66 
3a6fa 6f0 7C 00 00 00 
3a6fe 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3a702 6f2 3C 00 00 70 
3a706 6f3 18 7C 18 18 
3a70a 6f4 18 00 00 00 
3a70e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3a712 6f6 60 3E 00 06 
3a716 6f7 06 3E 66 66 
3a71a 6f8 66 00 00 18 
3a71e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3a722 6fa 3C 00 00 60 
3a726 6fb 00 60 60 60 
3a72a 6fc 60 3C 00 06 
3a72e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3a732 6fe 66 00 00 1C 
3a736 6ff 18 18 18 18 
3a73a 700 3C 00 00 00 
3a73e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3a742 702 C6 00 00 00 
3a746 703 3E 66 66 66 
3a74a 704 66 00 00 00 
3a74e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3a752 706 3C 00 00 00 
3a756 707 3E 66 66 3E 
3a75a 708 06 06 00 00 
3a75e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3a762 70a 60 60 00 00 
3a766 70b 3E 66 06 06 
3a76a 70c 06 00 00 00 
3a76e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3a772 70e 3E 00 00 18 
3a776 70f 7E 18 18 18 
3a77a 710 70 00 00 00 
3a77e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3a782 712 7C 00 00 00 
3a786 713 66 66 66 3C 
3a78a 714 18 00 00 00 
3a78e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3a792 716 6C 00 00 00 
3a796 717 66 3C 18 3C 
3a79a 718 66 00 00 00 
3a79e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3a7a2 71a 30 1E 00 00 
3a7a6 71b 7E 30 18 0C 
3a7aa 71c 7E 00 00 18 
3a7ae 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3a7b2 71e 3C 00 18 18 
3a7b6 71f 18 18 18 18 
3a7ba 720 18 18 00 7E 
3a7be 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3a7c2 722 60 00 10 18 
3a7c6 723 1C 1E 1C 18 
3a7ca 724 10 00 08 18 
3a7ce 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3a7d2 726 08 00       | 	byte	$08, $00
3a7d4 727 00 00 00 00 
3a7d8 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3a7d9 728 80 00 00 00 
3a7dd 729 00 80 00 00 
3a7e1 72a 80 80 00 00 
3a7e5 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3a7e9 72c 80 00 80 00 
3a7ed 72d 00 40 80 00 
3a7f1 72e AA AA AA 00 
3a7f5 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3a7f9 730 FF 00 00 00 
3a7fd 731 00 FF 00 00 
3a801 732 FF FF 00 00 
3a805 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3a809 734 FF 00 FF 00 
3a80d 735 00 FF FF 00 
3a811 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3a814 737 00 00 00 00 
3a818 738 00          | ataripalette   file "ataripalettep2.def"
3a819 738 11 11 11 00 
3a81d 739 22 22 22 00 
3a821 73a 33 33 33 00 
3a825 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3a829 73c 55 55 55 00 
3a82d 73d 66 66 66 00 
3a831 73e 77 77 77 00 
3a835 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3a839 740 99 99 99 00 
3a83d 741 AA AA AA 00 
3a841 742 BB BB BB 00 
3a845 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3a849 744 DD DD DD 00 
3a84d 745 EE EE EE 00 
3a851 746 FF FF FF 00 
3a855 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3a859 748 00 14 40 00 
3a85d 749 00 1E 60 00 
3a861 74a 00 28 80 00 
3a865 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3a869 74c 00 3C BF 00 
3a86d 74d 00 46 DF 00 
3a871 74e 00 50 FF 00 
3a875 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3a879 750 39 77 FF 00 
3a87d 751 55 8A FF 00 
3a881 752 71 9E FF 00 
3a885 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3a889 754 AA C5 FF 00 
3a88d 755 C6 D8 FF 00 
3a891 756 E3 EC FF 00 
3a895 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3a899 758 00 00 40 00 
3a89d 759 00 00 60 00 
3a8a1 75a 00 00 80 00 
3a8a5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3a8a9 75c 00 00 BF 00 
3a8ad 75d 00 00 DF 00 
3a8b1 75e 00 00 FF 00 
3a8b5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3a8b9 760 39 39 FF 00 
3a8bd 761 55 55 FF 00 
3a8c1 762 71 71 FF 00 
3a8c5 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3a8c9 764 AA AA FF 00 
3a8cd 765 C6 C6 FF 00 
3a8d1 766 E3 E3 FF 00 
3a8d5 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3a8d9 768 20 00 40 00 
3a8dd 769 30 00 60 00 
3a8e1 76a 40 00 80 00 
3a8e5 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3a8e9 76c 60 00 BF 00 
3a8ed 76d 70 00 DF 00 
3a8f1 76e 80 00 FF 00 
3a8f5 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3a8f9 770 9C 39 FF 00 
3a8fd 771 AA 55 FF 00 
3a901 772 B8 71 FF 00 
3a905 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3a909 774 D5 AA FF 00 
3a90d 775 E3 C6 FF 00 
3a911 776 F1 E3 FF 00 
3a915 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3a919 778 40 00 40 00 
3a91d 779 60 00 60 00 
3a921 77a 80 00 80 00 
3a925 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3a929 77c BF 00 BF 00 
3a92d 77d DF 00 DF 00 
3a931 77e FF 00 FF 00 
3a935 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3a939 780 FF 39 FF 00 
3a93d 781 FF 55 FF 00 
3a941 782 FF 71 FF 00 
3a945 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3a949 784 FF AA FF 00 
3a94d 785 FF C6 FF 00 
3a951 786 FF E3 FF 00 
3a955 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3a959 788 40 00 20 00 
3a95d 789 60 00 30 00 
3a961 78a 80 00 40 00 
3a965 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3a969 78c BF 00 60 00 
3a96d 78d DF 00 70 00 
3a971 78e FF 00 80 00 
3a975 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3a979 790 FF 39 9C 00 
3a97d 791 FF 55 AA 00 
3a981 792 FF 71 B8 00 
3a985 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3a989 794 FF AA D5 00 
3a98d 795 FF C6 E3 00 
3a991 796 FF E3 F1 00 
3a995 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3a999 798 40 00 00 00 
3a99d 799 60 00 00 00 
3a9a1 79a 80 00 00 00 
3a9a5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3a9a9 79c BF 00 00 00 
3a9ad 79d DF 00 00 00 
3a9b1 79e FF 00 00 00 
3a9b5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3a9b9 7a0 FF 39 39 00 
3a9bd 7a1 FF 55 55 00 
3a9c1 7a2 FF 71 71 00 
3a9c5 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3a9c9 7a4 FF AA AA 00 
3a9cd 7a5 FF C6 C6 00 
3a9d1 7a6 FF E3 E3 00 
3a9d5 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3a9d9 7a8 40 10 00 00 
3a9dd 7a9 60 18 00 00 
3a9e1 7aa 80 20 00 00 
3a9e5 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3a9e9 7ac BF 30 00 00 
3a9ed 7ad DF 38 00 00 
3a9f1 7ae FF 40 00 00 
3a9f5 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3a9f9 7b0 FF 6A 39 00 
3a9fd 7b1 FF 80 55 00 
3aa01 7b2 FF 95 71 00 
3aa05 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3aa09 7b4 FF BF AA 00 
3aa0d 7b5 FF D5 C6 00 
3aa11 7b6 FF EA E3 00 
3aa15 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3aa19 7b8 40 20 00 00 
3aa1d 7b9 60 30 00 00 
3aa21 7ba 80 40 00 00 
3aa25 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3aa29 7bc BF 60 00 00 
3aa2d 7bd DF 70 00 00 
3aa31 7be FF 80 00 00 
3aa35 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3aa39 7c0 FF 9C 39 00 
3aa3d 7c1 FF AA 55 00 
3aa41 7c2 FF B8 71 00 
3aa45 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3aa49 7c4 FF D5 AA 00 
3aa4d 7c5 FF E3 C6 00 
3aa51 7c6 FF F1 E3 00 
3aa55 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3aa59 7c8 40 30 00 00 
3aa5d 7c9 60 48 00 00 
3aa61 7ca 80 60 00 00 
3aa65 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3aa69 7cc BF 90 00 00 
3aa6d 7cd DF A8 00 00 
3aa71 7ce FF C0 00 00 
3aa75 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3aa79 7d0 FF CE 39 00 
3aa7d 7d1 FF D5 55 00 
3aa81 7d2 FF DC 71 00 
3aa85 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3aa89 7d4 FF EA AA 00 
3aa8d 7d5 FF F1 C6 00 
3aa91 7d6 FF F8 E3 00 
3aa95 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3aa99 7d8 30 40 00 00 
3aa9d 7d9 48 60 00 00 
3aaa1 7da 60 80 00 00 
3aaa5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3aaa9 7dc 90 BF 00 00 
3aaad 7dd A8 DF 00 00 
3aab1 7de C0 FF 00 00 
3aab5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3aab9 7e0 CE FF 39 00 
3aabd 7e1 D5 FF 55 00 
3aac1 7e2 DC FF 71 00 
3aac5 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3aac9 7e4 EA FF AA 00 
3aacd 7e5 F1 FF C6 00 
3aad1 7e6 F8 FF E3 00 
3aad5 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3aad9 7e8 00 40 00 00 
3aadd 7e9 00 60 00 00 
3aae1 7ea 00 80 00 00 
3aae5 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3aae9 7ec 00 BF 00 00 
3aaed 7ed 00 DF 00 00 
3aaf1 7ee 00 FF 00 00 
3aaf5 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3aaf9 7f0 39 FF 39 00 
3aafd 7f1 55 FF 55 00 
3ab01 7f2 71 FF 71 00 
3ab05 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3ab09 7f4 AA FF AA 00 
3ab0d 7f5 C6 FF C6 00 
3ab11 7f6 E3 FF E3 00 
3ab15 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3ab19 7f8 00 40 14 00 
3ab1d 7f9 00 60 1E 00 
3ab21 7fa 00 80 28 00 
3ab25 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3ab29 7fc 00 BF 3C 00 
3ab2d 7fd 00 DF 46 00 
3ab31 7fe 00 FF 50 00 
3ab35 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3ab39 800 39 FF 77 00 
3ab3d 801 55 FF 8A 00 
3ab41 802 71 FF 9E 00 
3ab45 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3ab49 804 AA FF C5 00 
3ab4d 805 C6 FF D8 00 
3ab51 806 E3 FF EC 00 
3ab55 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3ab59 808 00 40 28 00 
3ab5d 809 00 60 3C 00 
3ab61 80a 00 80 50 00 
3ab65 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3ab69 80c 00 BF 78 00 
3ab6d 80d 00 DF 8C 00 
3ab71 80e 00 FF A0 00 
3ab75 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3ab79 810 39 FF B5 00 
3ab7d 811 55 FF C0 00 
3ab81 812 71 FF CA 00 
3ab85 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3ab89 814 AA FF DF 00 
3ab8d 815 C6 FF EA 00 
3ab91 816 E3 FF F4 00 
3ab95 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3ab99 818 00 40 40 00 
3ab9d 819 00 60 60 00 
3aba1 81a 00 80 80 00 
3aba5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3aba9 81c 00 BF BF 00 
3abad 81d 00 DF DF 00 
3abb1 81e 00 FF FF 00 
3abb5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3abb9 820 39 FF FF 00 
3abbd 821 55 FF FF 00 
3abc1 822 71 FF FF 00 
3abc5 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3abc9 824 AA FF FF 00 
3abcd 825 C6 FF FF 00 
3abd1 826 E3 FF FF 00 
3abd5 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3abd9 828 00 28 40 00 
3abdd 829 00 3C 60 00 
3abe1 82a 00 50 80 00 
3abe5 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3abe9 82c 00 78 BF 00 
3abed 82d 00 8C DF 00 
3abf1 82e 00 A0 FF 00 
3abf5 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3abf9 830 39 B5 FF 00 
3abfd 831 55 C0 FF 00 
3ac01 832 71 CA FF 00 
3ac05 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3ac09 834 AA DF FF 00 
3ac0d 835 C6 EA FF 00 
3ac11 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3ac14 837             | 
3ac14 837             | '**********************************************************************************
3ac14 837             | '
3ac14 837             | '        Timings and colors definitions
3ac14 837             | '
3ac14 837             | '**********************************************************************************
3ac14 837             | 
3ac14 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3ac14 837 08 00 00 00 
3ac18 838 3C 00 00 00 
3ac1c 839 08 00 00 00 
3ac20 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3ac24 83b 07 00 00 00 
3ac28 83c 04 00 00 00 
3ac2c 83d 01 00 00 00 
3ac30 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3ac34 83f 58 02 00 00 
3ac38 840 20 9E 4B 14 
3ac3c 841 FB A8 9E 01 
3ac40 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3ac44 843 00 00 00 00 
3ac48 844 C0 00 00 00 
3ac4c 845 00 00 00 00 
3ac50 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac54 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3ac54 847 00 75 C7 97 
3ac58 848 27 47 F6 0A 
3ac5c 849 05 79 CB 9B 
3ac60 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3ac64 84b             | 
3ac64 84b             | ''--------  Initialization  ----------------------------------------------------------------
3ac64 84b             | 
3ac64 84b 28 0C 64 FD | hdmi            setq    #6
3ac68 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3ac6c 84d 28 10 64 FD |                 setq    #8
3ac70 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3ac74 84f             | 
3ac74 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3ac78 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3ac7c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3ac80 852 D6 C6 01 F1 |                 add     t1,hbase
3ac84 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3ac88 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3ac8c 855 7B 0B 80 5F 
3ac90 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3ac94 857 66 66 86 FF 
3ac98 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3ac9c 859             | '
3ac9c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3aca0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3aca4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3aca8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3acac 85d             | 
3acac 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3acb0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3acb4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3acb8 860             | 
3acb8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3acb8 860             | 
3acb8 860 28 06 64 FD | p101            setq 	#3
3acbc 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3acc0 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3acc4 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3acc8 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3accc 865 00 A0 05 F6 |                 mov     dlinum, #0
3acd0 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3acd4 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3acd8 868             | 
3acd8 868             | 
3acd8 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3acdc 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3ace0 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3ace4 86b             |                 
3ace4 86b             | 
3ace4 86b             | 
3ace4 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3ace4 86b             |   
3ace4 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3ace8 86c 29 FE 65 3D |          if_nc  setq2   #255
3acec 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3acf0 86e             | 
3acf0 86e             | '' -----   up porch (before the picture)
3acf0 86e             | 
3acf0 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3acf4 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3acf8 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3acfc 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3ad00 872             |  
3ad00 872             |    
3ad00 872             |  
3ad00 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ad04 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ad08 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3ad0c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ad10 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3ad14 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3ad18 878             | 
3ad18 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ad1c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ad20 87a 48 00 B0 FD | 		call    #dli
3ad24 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ad28 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3ad2c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3ad30 87e             |                 	
3ad30 87e             |                 
3ad30 87e             | 
3ad30 87e             |  
3ad30 87e             | '' ------- the main screen drawing starts here
3ad30 87e             | 
3ad30 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3ad34 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3ad38 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3ad3c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3ad40 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3ad44 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3ad48 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3ad4c 885             |               
3ad4c 885             | 
3ad4c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3ad50 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3ad54 887             | 
3ad54 887             | ' ---------------- All visible lines displayed now, start vblank  
3ad54 887             | 
3ad54 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3ad58 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3ad5c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3ad60 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3ad64 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3ad68 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3ad6c 88d             | 
3ad6c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3ad6c 88d             | 
3ad6c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3ad6c 88d             | 
3ad6c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3ad70 88e             | 
3ad70 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3ad74 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3ad78 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3ad7c 891             | 
3ad7c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3ad80 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3ad84 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3ad88 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3ad8c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3ad90 896             | 
3ad90 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3ad94 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3ad98 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3ad9c 899 70 00 90 AD |     if_z        jmp     #preload
3ada0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3ada4 89b 94 00 90 AD |     if_z        jmp     #preload2
3ada8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3adac 89d 0C 00 90 AD |     if_z        jmp     #p390
3adb0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3adb4 89f 28 00 90 AD |     if_z        jmp     #p391  
3adb8 8a0             | 
3adb8 8a0 2D 00 64 FD | p308            ret
3adbc 8a1             |    
3adbc 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3adc0 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3adc4 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3adc8 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3adcc 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3add0 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3add4 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3add8 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3addc 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3ade0 8aa             |  
3ade0 8aa             | '' --------  Reload palette. To do 
3ade0 8aa             | 
3ade0 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3ade4 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3ade8 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3adec 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3adf0 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3adf4 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3adf8 8b0 70 FF 9F FD |         	jmp     #dli                
3adfc 8b1             |       
3adfc 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3adfc 8b1             | 
3adfc 8b1             | 
3adfc 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3adfc 8b1             | 
3adfc 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3ae00 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ae04 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ae08 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3ae0c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3ae10 8b6             |         
3ae10 8b6             | '' -------------- Preload a line from PSRAM        
3ae10 8b6             |         
3ae10 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3ae14 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3ae18 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3ae1c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3ae20 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3ae24 8bb             | 
3ae24 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3ae28 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3ae2c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3ae30 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3ae34 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3ae38 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3ae3c 8c1             |  
3ae3c 8c1             |  
3ae3c 8c1             | preload2      '  incmod  dlinum,#3
3ae3c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3ae40 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3ae44 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3ae48 8c4 28 02 64 FD |                 setq	#1
3ae4c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3ae50 8c6             |                 
3ae50 8c6             | 
3ae50 8c6             | '' -------------- Draw sprites
3ae50 8c6             | 
3ae50 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3ae54 8c7 10 5C 0E F5 | 		and t8,#16 wz
3ae58 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3ae5c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3ae60 8ca             | 		
3ae60 8ca             | 
3ae60 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3ae64 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3ae68 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3ae6c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3ae70 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3ae74 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3ae78 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3ae7c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3ae80 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ae84 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3ae88 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3ae8c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ae90 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3ae94 8d7             | 
3ae94 8d7             | 
3ae94 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3ae98 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3ae9c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3aea0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3aea4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3aea8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3aeac 8dd 00 5E 06 F6 |                 mov 	t9,#0
3aeb0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3aeb4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3aeb8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3aebc 8e1             |      
3aebc 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3aec0 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3aec4 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3aec8 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3aecc 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3aed0 8e6             |                 
3aed0 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3aed4 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3aed8 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3aedc 8e9             |   		
3aedc 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3aee0 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3aee4 8eb             | 
3aee4 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3aee8 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3aeec 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3aef0 8ee             |  
3aef0 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3aef4 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3aef8 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3aefc 8f1             | 	
3aefc 8f1             | 	
3aefc 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3af00 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3af04 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3af08 8f4             | 
3af08 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3af0c 8f5             | 
3af0c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3af10 8f6 01 58 86 F1 | 	 	sub     t6,#1
3af14 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3af18 8f8             | 
3af18 8f8 28 58 62 FD |                 setq   	t6
3af1c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3af20 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3af24 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3af28 8fc 24 00 90 AD |         if_z    jmp #p898
3af2c 8fd             |          
3af2c 8fd             |         
3af2c 8fd 70 5F 06 F6 |                 mov  t9,#368
3af30 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3af34 8ff             | 
3af34 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3af38 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3af3c 901 FF FF 7F FF 
3af40 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3af44 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3af48 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3af4c 905 2D 01 00 F5 |                 and 0-0, t7
3af50 906             |                
3af50 906             | 
3af50 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3af54 907 E5 E0 7A FA |                 wmlong 368,t3				
3af58 908             |                 
3af58 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3af5c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3af60 90a 2D 00 64 FD |                 ret
3af64 90b             | 	
3af64 90b             | 	
3af64 90b             |                
3af64 90b             |  
3af64 90b             | '' -------------- Graphics line ------------------------------------------------------------
3af64 90b             |  
3af64 90b             | 
3af64 90b             | '' consts and vars
3af64 90b             | 
3af64 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3af68 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3af6c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3af70 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3af74 90f             | 
3af74 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3af78 910             | 
3af78 910             | '------ these longs will be set by setmode function
3af78 910             | 
3af78 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3af7c 911 00 00 00 00 | m_sn            long    0        'sync
3af80 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3af84 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3af88 914             | 'm_border        long    0        'left/right borders
3af88 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3af8c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3af90 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3af94 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3af98 918 00 00 00 00 | i_totalvis      long    0
3af9c 919             | 
3af9c 919             | '-------------------------------------
3af9c 919             |  
3af9c 919 00 00 00 00 | linenum         long    0
3afa0 91a 00 00 00 00 | frames          long    0
3afa4 91b 00 00 00 00 | dlinum long 0
3afa8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3afac 91d             | 
3afac 91d 00 00 00 00 | vblankptr       long    0
3afb0 91e 00 00 00 00 | modeptr         long    0
3afb4 91f 00 00 00 00 | paletteptr      long    0
3afb8 920 00 00 00 00 | dlptr           long    0
3afbc 921 01 00 00 00 | hbase           long    1
3afc0 922 00 00 00 00 | mailbox         long    0
3afc4 923 00 00 00 00 | spriteptr          long 0
3afc8 924             | 
3afc8 924 00 00 00 00 | cmd             long    0
3afcc 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3afd0 926 00 04 00 00 | buf2            long    1024
3afd4 927 01 00 00 00 | dlptr2          long    1
3afd8 928 01 00 00 00 | dl              long    1
3afdc 929             | 
3afdc 929 00 00 00 00 | buf1c long 0
3afe0 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3afe4 92b 01 00 00 00 | framebuf2       long    1
3afe8 92c 01 00 00 00 | hsync0          long    1
3afec 92d 01 00 00 00 | hsync1          long    1
3aff0 92e             | 
3aff0 92e 01 00 00 00 | t1              long    1
3aff4 92f 00 00 00 00 | t2 long 0
3aff8 930 00 00 00 00 | t3 long 0
3affc 931 00 00 00 00 | t4 long 0
3b000 932             | 
3b000 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3b004 933 00 00 00 00 | rcnt2           long    0
3b008 934 00 00 00 00 | rcnt2a          long    0
3b00c 935 00 00 00 00 | roffset         long    0
3b010 936 00 00 00 00 | rdl             long    0  'dl repeat line
3b014 937 00 00 00 00 | dlc             long    0  'dl command
3b018 938             | 
3b018 938 FF FF FF FF | affffffff       long    $ffffffff
3b01c 939 00 00 00 00 | sprite1pointer long 0
3b020 93a 00 00 00 00 | sprite1xy      long 0
3b024 93b 00 00 00 00 | sprite1wh      long 0
3b028 93c 00 00 00 00 | sprite2pointer long 0
3b02c 93d 00 00 00 00 | sprite2xy      long 0
3b030 93e 00 00 00 00 | sprite2wh      long 0
3b034 93f 00 00 00 00 | sprite3pointer long 0
3b038 940 00 00 00 00 | sprite3xy      long 0
3b03c 941 00 00 00 00 | sprite3wh      long 0
3b040 942 00 00 00 00 | sprite4pointer long 0
3b044 943 00 00 00 00 | sprite4xy      long 0
3b048 944 00 00 00 00 | sprite4wh      long 0
3b04c 945 00 00 00 00 | sprite5pointer long 0
3b050 946 00 00 00 00 | sprite5xy      long 0
3b054 947 00 00 00 00 | sprite5wh      long 0
3b058 948 00 00 00 00 | sprite6pointer long 0
3b05c 949 00 00 00 00 | sprite6xy      long 0
3b060 94a 00 00 00 00 | sprite6wh      long 0
3b064 94b 00 00 00 00 | sprite7pointer long 0
3b068 94c 00 00 00 00 | sprite7xy      long 0
3b06c 94d 00 00 00 00 | sprite7wh      long 0
3b070 94e 00 00 00 00 | sprite8pointer long 0
3b074 94f 00 00 00 00 | sprite8xy      long 0
3b078 950 00 00 00 00 | sprite8wh      long 0
3b07c 951 00 00 00 00 | sprite9pointer long 0
3b080 952 00 00 00 00 | sprite9xy      long 0
3b084 953 00 00 00 00 | sprite9wh      long 0
3b088 954 00 00 00 00 | sprite10pointer long 0
3b08c 955 00 00 00 00 | sprite10xy      long 0
3b090 956 00 00 00 00 | sprite10wh      long 0
3b094 957 00 00 00 00 | sprite11pointer long 0
3b098 958 00 00 00 00 | sprite11xy      long 0
3b09c 959 00 00 00 00 | sprite11wh      long 0
3b0a0 95a 00 00 00 00 | sprite12pointer long 0
3b0a4 95b 00 00 00 00 | sprite12xy      long 0
3b0a8 95c 00 00 00 00 | sprite12wh      long 0
3b0ac 95d 00 00 00 00 | sprite13pointer long 0
3b0b0 95e 00 00 00 00 | sprite13xy      long 0
3b0b4 95f 00 00 00 00 | sprite13wh      long 0
3b0b8 960 00 00 00 00 | sprite14pointer long 0
3b0bc 961 00 00 00 00 | sprite14xy      long 0
3b0c0 962 00 00 00 00 | sprite14wh      long 0
3b0c4 963 00 00 00 00 | sprite15pointer long 0
3b0c8 964 00 00 00 00 | sprite15xy      long 0
3b0cc 965 00 00 00 00 | sprite15wh      long 0
3b0d0 966 00 00 00 00 | sprite16pointer long 0
3b0d4 967 00 00 00 00 | sprite16xy      long 0
3b0d8 968 00 00 00 00 | sprite16wh      long 0
3b0dc 969 00 00 00 00 | sprite17pointer long 0
3b0e0 96a 00 00 00 00 | sprite17xy      long 0
3b0e4 96b 00 00 00 00 | sprite17wh      long 0
3b0e8 96c 00 00 00 00 | sprite18pointer long 0
3b0ec 96d 00 00 00 00 | sprite18xy      long 0
3b0f0 96e 00 00 00 00 | sprite18wh      long 0
3b0f4 96f 00 00 00 00 | spritenum long 0
3b0f8 970             | 
3b0f8 970 00 00 00 00 | spriteline long 0
3b0fc 971 84 03 00 00 | sprite_x long 900
3b100 972 00 00 00 00 | sprite_y long 0
3b104 973 10 00 00 00 | sprite_w long 16
3b108 974 40 00 00 00 | sprite_h long 64
3b10c 975 00 00 00 00 | l2 long 0
3b110 976 00 00 00 00 | t5 long 0
3b114 977 00 00 00 00 | t6 long 0
3b118 978 00 00 00 00 | t7 long 0
3b11c 979 00 00 00 00 | t8 long 0
3b120 97a 00 00 00 00 | t9 long 0
3b124 97b 00 00 00 00 | preloadaddr long 0
3b128 97c 00 00 00 00 | preloadlineaddr long 0
3b12c 97d 00 04 00 00 | a1024 long 1024
3b130 97e             | 
3b130 97e E0 03 00 00 | aa long 992
3b134 97f FF 03 00 00 | a1023 long 1023
3b138 980 00 10 00 00 | a4096 long 4096
3b13c 981             |  fit 368
3b13c 981             | _psram_spin2_dat_
3b13c 981 00 00 00 00 
      ...             
3b234 9bf 00 00 00 00 
3b238 9c0 00 00 00 00 |     listdata long 0[8*8]
3b23c 9c1             |             orgh
3b23c                 | 
3b23c                 | ' driver state
3b23c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3b240     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3b244                 | 
3b244                 | ' delay profile
3b244     07 00 00 00 
3b248     00 CF 7B 05 
3b24c     80 D1 F0 08 
3b250     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3b254     80 C4 60 0F 
3b258     80 39 7A 12 
3b25c     40 2D D9 13 
3b260     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3b264                 | 
3b264                 | ' data to be passed to driver when starting it
3b264                 | startupData
3b264     00 00 00 00 |     long    0           ' current frequency
3b268     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3b26c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3b270     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3b274     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3b278     84 B2 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3b27c     04 B3 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3b280     24 B3 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3b284                 | 
3b284                 | ' data for memory
3b284                 | deviceData
3b284                 |     ' 16 bank parameters follow (16MB per bank)
3b284     00 00 00 00 
      ...             
3b2bc     00 00 00 00 
3b2c0     00 00 00 00 |     long    0[16]                               ' banks 0-15
3b2c4                 |     ' 16 banks of pin parameters follow
3b2c4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3b2c8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3b2cc     FF FF FF FF 
      ...             
3b2fc     FF FF FF FF 
3b300     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3b304                 | 
3b304                 | ' data for COG polling
3b304                 | qosData 
3b304     00 00 FF FF 
3b308     00 00 FF FF 
3b30c     00 00 FF FF 
3b310     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3b314     00 00 FF FF 
3b318     00 00 FF FF 
3b31c     00 00 FF FF 
3b320     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3b324                 |     
3b324                 | ' mailbox storage
3b324                 | 
3b324                 | mailboxes
3b324     00 00 00 00 
      ...             
3b37c     00 00 00 00 
3b380     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3b384                 | 	alignl
3b384                 | _psram16drv_spin2_dat_
3b384                 |                             orgh
3b384     00 00 00 00 
      ...             
3b39c     00 00 00 00 
3b3a0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3b3a4                 | 
3b3a4                 | driver_start
3b3a4                 |                             org
3b3a4 000             | '..................................................................................................
3b3a4 000             | ' Memory layout for COG RAM once operational:
3b3a4 000             | '
3b3a4 000             | '  COG RAM address      Usage
3b3a4 000             | '  ---------------      ----
3b3a4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3b3a4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3b3a4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3b3a4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3b3a4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3b3a4 000             | '  ~$198-$1F3           State and register variables
3b3a4 000             | '
3b3a4 000             | ' Also during driver COG startup:
3b3a4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3b3a4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3b3a4 000             | '..................................................................................................
3b3a4 000             |                             
3b3a4 000             | ' Mailbox storage after vector initialization
3b3a4 000             | 
3b3a4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3b3a8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3b3ac 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3b3b0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3b3b4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3b3b8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3b3bc 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3b3c0 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3b3c4 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3b3c8 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3b3cc 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3b3d0 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3b3d4 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3b3d8 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3b3dc 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3b3e0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3b3e4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3b3e8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3b3ec 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3b3f0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3b3f4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3b3f8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3b3fc 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3b400 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3b404 018             | 
3b404 018             | ' Mailbox parameter addresses per COG once patched
3b404 018             |                             
3b404 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3b408 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3b40c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3b410 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3b414 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3b418 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3b41c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3b420 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3b424 020             | 
3b424 020             | '..................................................................................................
3b424 020             | ' Per COG request and state setup and service branching
3b424 020             |         
3b424 020             | cog0                 
3b424 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3b428 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3b42c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3b430 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3b434 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b438 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b43c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3b440 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3b444 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3b448 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b44c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b450 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3b454 02c             | cog1                        
3b454 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3b458 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3b45c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3b460 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3b464 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b468 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b46c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3b470 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3b474 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3b478 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b47c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b480 037 33 CA 63 FD |                             execf   request-0               'jump to service
3b484 038             | cog2                         
3b484 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3b488 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3b48c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3b490 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3b494 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b498 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b49c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3b4a0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3b4a4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3b4a8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b4ac 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b4b0 043 33 CA 63 FD |                             execf   request-0               'jump to service
3b4b4 044             | cog3                        
3b4b4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3b4b8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3b4bc 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3b4c0 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3b4c4 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b4c8 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b4cc 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3b4d0 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3b4d4 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3b4d8 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b4dc 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b4e0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3b4e4 050             | cog4                        
3b4e4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3b4e8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3b4ec 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3b4f0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3b4f4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b4f8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b4fc 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3b500 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3b504 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3b508 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b50c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b510 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3b514 05c             | cog5                        
3b514 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3b518 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3b51c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3b520 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3b524 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b528 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b52c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3b530 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3b534 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3b538 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b53c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b540 067 33 CA 63 FD |                             execf   request-0               'jump to service
3b544 068             | cog6                        
3b544 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3b548 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3b54c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3b550 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3b554 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b558 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b55c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3b560 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3b564 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3b568 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b56c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b570 073 33 CA 63 FD |                             execf   request-0               'jump to service
3b574 074             | cog7                        
3b574 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3b578 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3b57c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3b580 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3b584 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b588 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b58c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3b590 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3b594 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3b598 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b59c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b5a0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3b5a4 080             |                             fit     128
3b5a4 080             | 
3b5a4 080             |                             fit     128
3b5a4 080             | pad                         long    0[128-$]                'align init code to $80
3b5a4 080             | 
3b5a4 080             | '..................................................................................................
3b5a4 080             | 
3b5a4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3b5a4 080             | 
3b5a4 080             | init                        
3b5a4 080             |                             ' get driver scratch long address in hub
3b5a4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3b5a8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3b5ac 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3b5b0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3b5b4 084             |                     
3b5b4 084             |                             ' read in the additional LUT RAM code
3b5b4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3b5b8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3b5bc 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3b5c0 087             | 
3b5c0 087             |                             ' read the startup parameters
3b5c0 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3b5c4 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3b5c8 089             | 
3b5c8 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3b5c8 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3b5cc 08a             | 
3b5cc 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3b5d0 08b 01 00 00 5F 
3b5d4 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3b5d8 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3b5dc 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3b5e0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3b5e4 090             | 
3b5e4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3b5e4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3b5e8 091 01 00 00 FF 
3b5ec 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3b5f0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3b5f4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3b5f8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3b5fc 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3b600 097 08 DE 47 F5 |                             or      a, #8
3b604 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3b608 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3b60c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3b610 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3b614 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3b618 09d 01 DE 07 F1 |                             add     a, #1
3b61c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3b620 09f             |  
3b620 09f             |                             ' setup device control pin states
3b620 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3b624 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3b628 0a1 01 00 00 FF 
3b62c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3b630 0a3             | 
3b630 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3b634 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3b638 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3b63c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3b640 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3b644 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3b648 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3b64c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3b650 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3b654 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3b658 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3b65c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3b660 0af             | pinloop
3b660 0af             |                             ' generate minimum CE high time before access
3b660 0af A1 07 00 FF 
3b664 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3b668 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3b66c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3b670 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3b674 0b4 1F DE 63 FD |                             waitx   a                       'delay
3b678 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3b67c 0b6             | 
3b67c 0b6             |                             ' setup the COG mailboxes and addresses 
3b67c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3b680 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3b684 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3b688 0b9             | 
3b688 0b9 28 2E 64 FD |                             setq    #24-1
3b68c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3b690 0bb             | 
3b690 0bb             |                             ' setup the polling loop for active COGs 
3b690 0bb 01 C2 63 FD |                             cogid   id
3b694 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3b698 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3b69c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3b6a0 0bf 0A F0 07 F6 |                             mov     ptra, #10
3b6a4 0c0 E1 F1 03 FA |                             mul     ptra, id
3b6a8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3b6ac 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3b6b0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3b6b4 0c4 03 C2 07 FA |                             mul     id, #3
3b6b8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3b6bc 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3b6c0 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3b6c4 0c8 D8 01 B0 FD |                             call    #reloadcogs
3b6c8 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3b6cc 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3b6d0 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3b6d0 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3b6d4 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3b6d8 0cd 08 04 DC FC |                             rep     #2, #8
3b6dc 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3b6e0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3b6e4 0d0             | 
3b6e4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3b6e4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3b6e4 0d0 01 C2 63 FD |                             cogid   id
3b6e8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3b6ec 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3b6f0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3b6f4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3b6f8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3b6fc 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3b700 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3b704 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3b708 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3b70c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3b710 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3b714 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3b718 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3b71c 0de A5 E5 03 F1 |                             add     d, const512
3b720 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3b724 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3b728 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3b72c 0e2             |                             
3b72c 0e2             |                             ' setup register values for control vector loop setup after we return
3b72c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3b730 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3b734 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3b738 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3b73c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3b740 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3b744 0e8 D0 C3 8F F9 |                             altd    id, #id0
3b748 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3b74c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3b750 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3b754 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3b758 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3b75c 0ee             |  
3b75c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3b760 0ef 07 CA 07 F5 |                             and     request, #7
3b764 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3b768 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3b76c 0f2             |                             fit     $100                    'ensure all init code fits this space
3b76c 0f2             | 
3b76c 0f2             |                             fit     $100                    'ensure all init code fits this space
3b76c 0f2             | 
3b76c 0f2 00 00 00 00 
      ...             
3b79c 0fe 00 00 00 00 
3b7a0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3b7a4 100             | 
3b7a4 100             | '..................................................................................................
3b7a4 100             | ' Error result handling and COG notification of request completion
3b7a4 100             | 
3b7a4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3b7a8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3b7ac 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3b7b0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3b7b4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3b7b8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3b7bc 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3b7c0 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3b7c4 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3b7c8 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3b7cc 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3b7d0 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3b7d4 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3b7d8 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3b7dc 10e             | ' Poller re-starts here after a COG is serviced
3b7dc 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3b7e0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3b7e4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3b7e8 111             | ' Main dynamic polling loop repeats until a request arrives
3b7e8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3b7ec 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3b7f0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3b7f4 114             | 
3b7f4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3b7f8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3b7fc 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3b800 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3b804 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3b808 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3b80c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3b810 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3b814 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3b818 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3b81c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3b820 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3b824 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3b828 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3b82c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3b830 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3b834 124             | 
3b834 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3b838 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3b83c 126             |  
3b83c 126             | '..................................................................................................
3b83c 126             | ' List handler                               
3b83c 126             | 
3b83c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3b840 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3b844 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3b848 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3b84c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3b850 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3b854 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3b858 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3b85c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3b860 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3b864 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3b868 131 33 00 60 FD |                             execf   0-0                     'process the request 
3b86c 132             | 
3b86c 132             | '..................................................................................................
3b86c 132             | ' Restoring per COG state and resuming where we left off
3b86c 132             | 
3b86c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3b870 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3b874 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3b878 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3b87c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3b880 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3b884 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3b888 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3b88c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3b890 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3b894 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3b898 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3b89c 13e             |                    
3b89c 13e             | '..................................................................................................
3b89c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3b89c 13e             | 
3b89c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3b8a0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3b8a4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3b8a8 141 D0 DF B7 F9 |                             setd    a, #id0
3b8ac 142 D8 DF BF F9 |                             sets    a, #addr1
3b8b0 143 FE FF FF FF 
3b8b4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3b8b8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3b8bc 146 3F DE A7 F9 |                             alti    a, #%111_111 
3b8c0 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3b8c4 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3b8c8 149 01 E2 63 FD |                             cogid   c
3b8cc 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3b8d0 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3b8d4 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3b8d8 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3b8dc 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3b8e0 14f 00 E0 03 F6 |                             mov     b, 0-0
3b8e4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3b8e8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3b8ec 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3b8f0 153 0C 00 90 AD |             if_z            jmp     #excluded               
3b8f4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3b8f8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3b8fc 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3b900 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3b904 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3b908 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3b90c 15a             | 
3b90c 15a             | 'determine priority cogs and build instructions for the polling sequence
3b90c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3b910 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3b914 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3b918 15d             | 
3b918 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3b91c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3b920 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3b924 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3b928 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3b92c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3b930 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3b934 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3b938 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3b93c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3b940 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3b944 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3b948 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3b94c 16a             | endprioloop
3b94c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3b950 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3b954 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3b958 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3b95c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3b960 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3b964 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3b968 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3b96c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3b970 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3b974 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3b978 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3b97c 176             | 
3b97c 176             | ' populate the round robin COG polling instructions
3b97c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3b980 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3b984 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3b988 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3b98c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3b990 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3b994 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3b998 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3b99c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3b9a0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3b9a4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3b9a8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3b9ac 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3b9b0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3b9b4 184             | '..................................................................................................
3b9b4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3b9b4 184             | 
3b9b4 184             | set_latency                                                 '            (a) set latency
3b9b4 184             | get_latency                                                 '            (b) get latency
3b9b4 184             | set_burst                                                   '            (c) set burst size of bank
3b9b4 184             | get_burst                                                   '            (d) get burst size of bank
3b9b4 184             |                                                             '            (e) dump state
3b9b4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3b9b8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3b9bc 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3b9c0 187             |                                                             ' | | | | e  account for following AUGS
3b9c0 187 04 00 00 FF 
3b9c4 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3b9c8 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3b9cc 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3b9d0 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3b9d4 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3b9d8 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3b9dc 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3b9e0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3b9e4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3b9e8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3b9ec 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3b9f0 193             | 
3b9f0 193             | '..................................................................................................
3b9f0 193             | ' Misc EXECF code
3b9f0 193             | 
3b9f0 193 33 72 63 FD | start_read_exec             execf   newburstr
3b9f4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3b9f8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3b9fc 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3ba00 197             | 
3ba00 197             | '..................................................................................................
3ba00 197             | ' Variables
3ba00 197             | 
3ba00 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3ba04 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3ba08 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3ba0c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3ba10 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3ba14 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3ba18 19d             | 
3ba18 19d 00 00 00 80 | xfreq1          long    $80000000
3ba1c 19e 00 00 00 40 | xfreq2          long    $40000000
3ba20 19f 03 00 00 00 | delay           long    3
3ba24 1a0             | 
3ba24 1a0             | lutcodeaddr                 
3ba24 1a0             | startupparams
3ba24 1a0             | excludedcogs                                    'careful: shared register use!
3ba24 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3ba28 1a1 00 00 00 00 | flags           long    0
3ba2c 1a2             | mask                                            'careful: shared register use!
3ba2c 1a2 00 00 00 00 | resetmaskA      long    0
3ba30 1a3             | limit                                           'careful: shared register use!
3ba30 1a3 00 00 00 00 | resetmaskB      long    0
3ba34 1a4 00 00 00 00 | datapins        long    0
3ba38 1a5             | const512                                        'careful: shared register use!
3ba38 1a5 00 00 00 00 | devicelist      long    0
3ba3c 1a6 00 00 00 00 | coglist         long    0
3ba40 1a7 00 00 00 00 | mbox            long    0 
3ba44 1a8             | 
3ba44 1a8             | clkpin                                          'shared with code patched during init
3ba44 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3ba48 1a9             | cspin                                           'shared with code patched during init
3ba48 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3ba4c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3ba50 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3ba54 1ac 01 00 00 00 | clkdelay        long    1
3ba58 1ad 00 00 00 00 | regdatabus      long    0
3ba5c 1ae             | 
3ba5c 1ae 10 00 00 00 | deviceaddr      long    $10
3ba60 1af             | rrcounter
3ba60 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3ba64 1b0             | 
3ba64 1b0             | ' jump addresses for the per COG handlers
3ba64 1b0 20 00 00 00 | cog0_handler    long    cog0
3ba68 1b1 2C 00 00 00 | cog1_handler    long    cog1
3ba6c 1b2 38 00 00 00 | cog2_handler    long    cog2
3ba70 1b3 44 00 00 00 | cog3_handler    long    cog3
3ba74 1b4 50 00 00 00 | cog4_handler    long    cog4
3ba78 1b5 5C 00 00 00 | cog5_handler    long    cog5
3ba7c 1b6 68 00 00 00 | cog6_handler    long    cog6
3ba80 1b7 74 00 00 00 | cog7_handler    long    cog7
3ba84 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3ba88 1b9             | 
3ba88 1b9             | ' EXECF sequences
3ba88 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3ba8c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3ba90 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3ba94 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3ba98 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3ba9c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3baa0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3baa4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3baa4 1c0             | 
3baa4 1c0             | 
3baa4 1c0             | ' SKIPF sequences
3baa4 1c0             | skiptable
3baa4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3baa8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3baac 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3bab0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3bab4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3bab8 1c5 00 00 00 00 | pattern2        long    0
3babc 1c6 00 00 00 00 | pattern3        long    0
3bac0 1c7 77 02 00 00 | singlelong      long    %1001110111  
3bac4 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3bac8 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3bacc 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3bad0 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3bad4 1cc             | 
3bad4 1cc             | ' LUT RAM address values
3bad4 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3bad8 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3badc 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3bae0 1cf F6 02 00 00 | noread          long    noread_lut
3bae4 1d0             | 
3bae4 1d0 00 00 00 00 | id0             long    0
3bae8 1d1 01 00 00 00 | id1             long    1
3baec 1d2 02 00 00 00 | id2             long    2
3baf0 1d3 03 00 00 00 | id3             long    3
3baf4 1d4 04 00 00 00 | id4             long    4
3baf8 1d5 05 00 00 00 | id5             long    5
3bafc 1d6 06 00 00 00 | id6             long    6
3bb00 1d7 07 00 00 00 | id7             long    7
3bb04 1d8             | 
3bb04 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3bb04 1d8             | 'and COG updates and need to follow immediately after id0-id7
3bb04 1d8 00 00 00 00 | addr1           long    0
3bb08 1d9 00 00 00 00 | hubdata         long    0
3bb0c 1da 00 00 00 00 | count           long    0
3bb10 1db 00 00 00 00 | addr2           long    0
3bb14 1dc 00 00 00 00 | total           long    0
3bb18 1dd 00 00 00 00 | offset1         long    0
3bb1c 1de 00 00 00 00 | offset2         long    0
3bb20 1df 00 00 00 00 | link            long    0
3bb24 1e0             | 
3bb24 1e0             | burstwrite                                      'note shared register use during init
3bb24 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3bb28 1e1 00 00 00 00 | id              long    0
3bb2c 1e2             | 
3bb2c 1e2 00 00 00 00 | header          long    0
3bb30 1e3 00 00 00 00 | trailer         long    0
3bb34 1e4 00 00 00 00 | cmdaddr         long    0
3bb38 1e5 00 00 00 00 | request         long    0
3bb3c 1e6 00 00 00 00 | rrlimit         long    0
3bb40 1e7 00 00 00 00 | pinconfig       long    0
3bb44 1e8 00 00 00 00 | clks            long    0
3bb48 1e9 00 00 00 00 | resume          long    0
3bb4c 1ea 00 00 00 00 | orighubsize     long    0
3bb50 1eb 00 00 00 00 | wrclks          long    0
3bb54 1ec             | 
3bb54 1ec 00 00 00 00 | pattern         long    0
3bb58 1ed 00 00 00 00 | hubscratch      long    0
3bb5c 1ee 00 10 00 00 | val4k           long    4096
3bb60 1ef             | 
3bb60 1ef             | ' temporary general purpose regs
3bb60 1ef 00 00 00 00 | a               long    0
3bb64 1f0 00 00 00 00 | b               long    0
3bb68 1f1 00 00 00 00 | c               long    0
3bb6c 1f2 00 00 00 00 | d               long    0
3bb70 1f3             |                 fit     502
3bb70 1f3             | 
3bb70 1f3             |                 fit     502
3bb70 1f3             | 
3bb70 1f3             | '..................................................................................................
3bb70 1f3             | 
3bb70 1f3             |             orgh
3bb70                 | 
3bb70                 | lut_code
3bb70                 | 'HW init code up to 80 longs
3bb70                 | 
3bb70                 | '..................................................................................................
3bb70                 | ' Memory layout for LUT RAM once operational:
3bb70                 | '
3bb70                 | '  LUT RAM address      Usage
3bb70                 | '  ---------------      ----
3bb70                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3bb70                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3bb70                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3bb70                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3bb70                 | '
3bb70                 | ' Also during driver COG startup:
3bb70                 | ' $230-$24F is used for HW init setup
3bb70                 | ' $250-$26F is used as temporary vector storage 
3bb70                 | '..................................................................................................
3bb70                 | 
3bb70                 |                 org $230    
3bb70 230             | 
3bb70 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3bb70 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3bb74 231 24 16 60 FD |                             pollxfi
3bb78 232 FF AA 2A FF 
3bb7c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3bb80 234 28 00 B0 FD |                             call    #sendqspi
3bb84 235 07 F8 07 FF 
3bb88 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3bb8c 237 28 00 B0 FD |                             call    #sendspi
3bb90 238 F8 07 78 FF 
3bb94 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3bb98 23a 1C 00 B0 FD |                             call    #sendspi
3bb9c 23b 7F 78 78 FF 
3bba0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3bba4 23d 10 00 B0 FD |                             call    #sendspi 
3bba8 23e 2D 00 64 FD |                             ret
3bbac 23f             | 
3bbac 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3bbb0 240 32 0C 64 FD |                             skipf   #%110
3bbb4 241 9C EF 03 F6 |                             mov     pb, xsendimm
3bbb8 242             | 
3bbb8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3bbbc 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3bbc0 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3bbc4 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3bbc8 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3bbcc 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3bbd0 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3bbd4 249 50 48 63 FD |                             fltl    datapins                'float data bus
3bbd8 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3bbdc 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3bbe0 24c             | 
3bbe0 24c 00 00 00 00 
3bbe4 24d 00 00 00 00 
3bbe8 24e 00 00 00 00 
3bbec 24f 00 00 00 00 |                 long    0[$270-32-$]
3bbf0 250             |                 fit     $270-32  ' keep room for 32 vector longs
3bbf0 250             |     
3bbf0 250             |                 fit     $270-32  ' keep room for 32 vector longs
3bbf0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3bbf0 250             | rw_vect ' PSRAM jump vectors
3bbf0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bbf4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bbf8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3bbfc 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3bc00 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3bc04 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3bc08 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3bc0c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3bc10 258             | ro_vect ' R/O PSRAM jump vectors
3bc10 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bc14 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bc18 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3bc1c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3bc20 25c 00 01 00 00 |                 long    unsupported
3bc24 25d 00 01 00 00 |                 long    unsupported
3bc28 25e 00 01 00 00 |                 long    unsupported
3bc2c 25f 00 01 00 00 |                 long    unsupported
3bc30 260             | ctrl_vect ' Control jump vectors
3bc30 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3bc34 261 00 01 00 00 |                 long    unsupported
3bc38 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3bc3c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3bc40 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3bc44 265 00 01 00 00 |                 long    unsupported
3bc48 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3bc4c 267 3E 01 00 00 |                 long    reconfig 
3bc50 268             | no_vect ' Invalid bank jump vectors
3bc50 268 01 01 00 00 |                 long    invalidbank
3bc54 269 01 01 00 00 |                 long    invalidbank
3bc58 26a 01 01 00 00 |                 long    invalidbank
3bc5c 26b 01 01 00 00 |                 long    invalidbank
3bc60 26c 01 01 00 00 |                 long    invalidbank
3bc64 26d 01 01 00 00 |                 long    invalidbank
3bc68 26e 01 01 00 00 |                 long    invalidbank
3bc6c 26f 01 01 00 00 |                 long    invalidbank
3bc70 270             |                 fit     $270
3bc70 270             | 
3bc70 270             |                 fit     $270
3bc70 270             | '..................................................................................................
3bc70 270             | ' PSRAM READS
3bc70 270             |                                                             ' a b c d e f
3bc70 270             |                                                             ' B W L B R L  (a) byte read
3bc70 270             |                                                             ' Y O O U E O  (b) word read
3bc70 270             |                                                             ' T R N R S C  (c) long read
3bc70 270             |                                                             ' E D G S U K  (d) new burst read
3bc70 270             |                                                             '       T M E  (e) resumed sub-burst
3bc70 270             |                                                             '         E D  (f) locked sub-burst
3bc70 270             | 
3bc70 270             | 
3bc70 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3bc74 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3bc78 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3bc7c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3bc80 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3bc84 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3bc88 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3bc8c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3bc90 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3bc94 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3bc98 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3bc9c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3bca0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3bca4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3bca8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3bcac 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3bcb0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3bcb4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3bcb8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3bcbc 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3bcc0 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3bcc4 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3bcc8 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3bccc 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3bcd0 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3bcd4 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3bcd8 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3bcdc 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3bce0 28c             | 
3bce0 28c             |                             ' fall through to read bursts
3bce0 28c             |                         
3bce0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3bce0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3bce4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3bce8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3bcec 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3bcf0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3bcf4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3bcf8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3bcfc 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3bd00 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3bd04 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3bd08 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3bd0c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3bd10 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3bd14 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3bd18 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3bd1c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3bd20 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3bd24 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3bd28 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3bd2c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3bd30 2a0 E8 D1 03 F1 |                             add     clks, clks
3bd34 2a1             | readcommon
3bd34 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3bd38 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3bd3c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3bd40 2a4             | 
3bd40 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3bd44 2a5 69 C8 63 FD |                             rev     cmdaddr
3bd48 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3bd4c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3bd50 2a8             | 
3bd50 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3bd54 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3bd58 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3bd58 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3bd5c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3bd60 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3bd64 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3bd68 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3bd68 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3bd6c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3bd70 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3bd74 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3bd78 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3bd7c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3bd80 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3bd80 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3bd84 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3bd88 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3bd8c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3bd90 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3bd94 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3bd98 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3bd9c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3bda0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3bda4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3bda8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3bdac 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3bdb0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3bdb4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3bdb8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3bdb8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3bdbc 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3bdc0 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3bdc4 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3bdc8 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3bdcc 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3bdd0 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3bdd4 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3bdd8 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3bddc 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3bde0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3bde4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3bde8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3bdec 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3bdf0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3bdf4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3bdf8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3bdfc 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3be00 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3be04 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3be08 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3be0c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3be10 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3be14 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3be18 2da 10 03 90 FD |                             jmp     #writecommon
3be1c 2db             | 
3be1c 2db             | '..................................................................................................
3be1c 2db             | ' Burst continuation testing
3be1c 2db             | 
3be1c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3be20 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3be24 2dd             | continue_read_lut          
3be24 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3be28 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3be2c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3be30 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3be34 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3be38 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3be3c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3be40 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3be44 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3be48 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3be4c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3be50 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3be54 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3be58 2ea             | 
3be58 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3be5c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3be60 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3be64 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3be68 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3be6c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3be70 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3be74 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3be78 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3be7c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3be80 2f4 2A 1C 66 0D |             _ret_           push    #poller
3be84 2f5             | 
3be84 2f5             | 
3be84 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3be88 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3be88 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3be8c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3be90 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3be94 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3be98 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3be9c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3bea0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3bea4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3bea8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3beac 2ff             | '..................................................................................................
3beac 2ff             | ' Completion of requests
3beac 2ff             | 
3beac 2ff             | complete_rw_lut             
3beac 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3beb0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3beb4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3beb8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3bebc 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3bec0 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3bec4 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3bec8 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3becc 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3bed0 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3bed4 309 32 62 64 AD |             if_z            skipf   #%110001
3bed8 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3bedc 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3bee0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3bee4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3bee8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3beec 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3bef0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3bef4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3bef8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3befc 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3bf00 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3bf04 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3bf08 316             |                                                             ' skipcase (a) gfx copy to/from hub
3bf08 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3bf08 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3bf08 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3bf0c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3bf10 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3bf14 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3bf18 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3bf1c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3bf20 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3bf24 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3bf28 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3bf2c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3bf30 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3bf34 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3bf38 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3bf3c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3bf40 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3bf44 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3bf48 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3bf4c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3bf50 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3bf54 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3bf58 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3bf5c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3bf60 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3bf64 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3bf68 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3bf6c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3bf70 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3bf74 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3bf78 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3bf7c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3bf80 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3bf84 335 DF B7 03 A6 |             if_z            mov     addr2, link
3bf88 336 34 FF 9F AD |             if_z            jmp     #checknext
3bf8c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3bf90 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3bf94 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3bf98 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3bf9c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3bfa0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3bfa4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3bfa8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3bfac 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3bfb0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3bfb4 341             | 
3bfb4 341             | '..................................................................................................
3bfb4 341             | ' PSRAM WRITES
3bfb4 341             |                                                             '  a b c d e f g h
3bfb4 341             | 
3bfb4 341             |                                                             '  B W L F B R L L (a) byte write(s)
3bfb4 341             |                                                             '  Y O O I U E O O (b) word write(s)
3bfb4 341             |                                                             '  T R N L R S C C (c) long write(s)
3bfb4 341             |                                                             '  E D G L S U K K (d) resumed fill
3bfb4 341             |                                                             '          T M E E (e) new burst write
3bfb4 341             |                                                             '            E D D (f) resumed burst
3bfb4 341             |                                                             '              F B (g) locked fill
3bfb4 341             |                                                             '              I U (h) locked burst write
3bfb4 341             |                                                             '              L R 
3bfb4 341             |                                                             '              L S 
3bfb4 341             |                                                             '                T 
3bfb4 341             | 
3bfb4 341             | w_single                   
3bfb4 341             | w_fill_cont           
3bfb4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3bfb8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3bfbc 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3bfc0 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3bfc4 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3bfc8 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3bfcc 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3bfd0 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3bfd4 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3bfd8 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3bfdc 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3bfe0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3bfe4 34d             |                ' disable call to r_resume_burst for single longs when z=0
3bfe4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3bfe8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3bfec 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3bff0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3bff4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3bff8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3bffc 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3c000 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3c004 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3c008 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3c00c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3c010 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3c014 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3c018 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3c01c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3c020 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3c024 35d             |         
3c024 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3c024 35d             |             '
3c024 35d             |             '  At least one of these 3 optional components will be sent
3c024 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3c024 35d             |             '     body - N x full longs of data
3c024 35d             |             '     trailer - last partial long of data
3c024 35d             |             '
3c024 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3c024 35d             |             '
3c024 35d             |             'Case    Type                           Sends
3c024 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3c024 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3c024 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3c024 35d             |             ' 4)     Multiple long fill             body only
3c024 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3c024 35d             | 
3c024 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3c024 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3c028 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3c02c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3c030 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3c034 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3c038 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3c03c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3c040 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3c044 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3c048 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3c04c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3c050 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3c054 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3c058 36a             |                             
3c058 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3c05c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3c060 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3c064 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3c068 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3c06c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3c070 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3c074 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3c078 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3c07c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3c080 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3c084 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3c088 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3c08c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3c090 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3c094 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3c098 37a             | 
3c098 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3c09c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3c0a0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3c0a4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3c0a8 37e             |                  
3c0a8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3c0ac 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3c0b0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3c0b4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3c0b8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3c0bc 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3c0c0 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3c0c4 385             | 
3c0c4 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3c0c8 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3c0cc 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3c0d0 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3c0d4 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3c0d8 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3c0dc 38b             | 
3c0dc 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3c0dc 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3c0e0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3c0e4 38d 2A B0 63 FD |                             push    addr1                   'save address
3c0e8 38e             | 
3c0e8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3c0e8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3c0ec 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3c0f0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3c0f4 391             |             
3c0f4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3c0f8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3c0fc 393 2B B0 63 FD |                             pop     addr1                   'restore address
3c100 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3c104 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3c108 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3c10c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3c110 398             | 
3c110 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3c114 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3c118 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3c11c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3c120 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3c124 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3c128 39e             | 
3c128 39e             |                             'trailer is done
3c128 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3c12c 39f             | 
3c12c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3c130 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3c134 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3c138 3a2             | 
3c138 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3c13c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3c140 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3c144 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3c148 3a6             |                             
3c148 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3c14c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3c150 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3c154 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3c158 3aa             |                                                          
3c158 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3c15c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3c160 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3c164 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3c168 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3c16c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3c170 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3c174 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3c178 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3c17c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3c180 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3c184 3b5             |  
3c184 3b5 59 52 63 FD |                             drvh    cspin
3c188 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3c18c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3c190 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3c194 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3c198 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3c19c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3c1a0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3c1a4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3c1a8 3be EA E5 03 F6 |                             mov     d, orighubsize
3c1ac 3bf EF E5 63 F0 |                             shl     d, a
3c1b0 3c0 F2 E3 83 F1 |                             sub     c, d
3c1b4 3c1 DD E3 03 F1 |                             add     c, offset1
3c1b8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3c1bc 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3c1c0 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3c1c4 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3c1c8 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3c1cc 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3c1d0 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3c1d4 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3c1d8 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3c1dc 3cb BB D3 03 F6 |                             mov     resume, restorefill
3c1e0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3c1e4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3c1e8 3ce 6C FC BF CD |             if_c            call    #yield
3c1ec 3cf 2D 00 64 FD |                             ret
3c1f0 3d0             |                            
3c1f0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3c1f0 3d0             |                       '     rczl    pa                      'rotate left into address offset
3c1f0 3d0             |                       '     rczl    c wcz                   'restore count and flags
3c1f0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3c1f4 3d1 02 EC 67 F0 |                             shl     pa, #2
3c1f8 3d2 28 06 64 AD |             if_z            setq    #3
3c1fc 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3c200 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3c204 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3c208 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3c20c 3d7             | 
3c20c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3c210 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3c214 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3c218 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3c21c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3c220 3dc             |                 fit 1024-32
3c220 3dc             |         
3c220 3dc             | 
3c220 3dc             | '..................................................................................................
3c220 3dc             | 
3c220 3dc             |                 fit 1024-32
3c220 3dc 00 00 00 00 
3c224 3dd 00 00 00 00 
3c228 3de 00 00 00 00 
3c22c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3c230 3e0             |                 org 1024-32
3c230 000             | 
3c230 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3c230 000 00 00 00 00 |                 long $0000
3c234 001 11 11 00 00 |                 long $1111
3c238 002 22 22 00 00 |                 long $2222
3c23c 003 33 33 00 00 |                 long $3333
3c240 004 44 44 00 00 |                 long $4444
3c244 005 55 55 00 00 |                 long $5555
3c248 006 66 66 00 00 |                 long $6666
3c24c 007 77 77 00 00 |                 long $7777
3c250 008 88 88 00 00 |                 long $8888
3c254 009 99 99 00 00 |                 long $9999
3c258 00a AA AA 00 00 |                 long $aaaa
3c25c 00b BB BB 00 00 |                 long $bbbb
3c260 00c CC CC 00 00 |                 long $cccc
3c264 00d DD DD 00 00 |                 long $dddd
3c268 00e EE EE 00 00 |                 long $eeee
3c26c 00f FF FF 00 00 |                 long $ffff
3c270 010             | 
3c270 010             | 'masks
3c270 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3c274 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3c278 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3c27c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3c280 014             | 
3c280 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3c284 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3c288 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3c28c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3c290 018             | 
3c290 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3c294 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3c298 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3c29c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3c2a0 01c             | 
3c2a0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3c2a4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3c2a8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3c2ac 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3c2b0 020             |         fit 1024
3c2b0 020             | 
3c2b0 020             |         fit 1024
3c2b0 020             | 
3c2b0 020             | '--------------------------------------------------------------------------------------------------
3c2b0 020             |         orgh
3c2b0                 | 
3c2b0                 | gfxexpansion
3c2b0                 |                             'simple line drawing graphics expansion of memory driver
3c2b0                 |                             'jmp     #donerepeats                'just return for now
3c2b0                 | 
3c2b0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3c2b4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3c2b8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3c2bc     DD E1 03 F6 |                             mov     b, offset1              'get error term
3c2c0     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3c2c4     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3c2c8     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3c2cc     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3c2d0     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3c2d4     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3c2d8     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3c2dc     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3c2e0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3c2e4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3c2e8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3c2ec     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3c2f0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3c2f4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3c2f8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3c2fc     DC E5 33 F9 |                             getword d, total, #0            'get line width
3c300     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3c304     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3c308     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3c30c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3c310     C3 03 80 FD |                             jmp     #readmask               'continue filling
3c314                 | 	alignl
3c314                 | _usbnew_spin2_dat_
3c314                 |                 org     $000
3c314 000             | 
3c314 000             | usb_host_start
3c314 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3c318 001             | 
3c318 001 03 00 00 FF 
3c31c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3c320 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3c324 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3c328 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c32c 006 29 70 63 FD |                 setq2   htmp
3c330 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3c334 008             | 
3c334 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3c338 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c33c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3c340 00b             | 
3c340 00b             | '------------------------------------------------------------------------------
3c340 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3c340 00b             | ' special because the receiving function must not respond with either STALL or
3c340 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3c340 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3c340 00b             | ' corrupt packet, it must ignore the transaction
3c340 00b             | '------------------------------------------------------------------------------
3c340 00b             | ' On entry:
3c340 00b             | '   PTRA - start address of the SETUP data struct.
3c340 00b             | ' On exit:
3c340 00b             | '   retval - PID_ACK on success, otherwise error code.
3c340 00b             | '------------------------------------------------------------------------------
3c340 00b             | txn_setup
3c340 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3c344 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3c348 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3c34c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3c350 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3c354 010             | .setup
3c354 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3c358 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c35c 012 2D 00 64 AD |         if_z    ret
3c360 013 7C 0B B0 FD |                 call    #retry_wait
3c364 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c368 015 2D 00 64 AD |         if_z    ret
3c36c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3c370 017 E0 FF 9F FD |                 jmp     #.setup
3c374 018             | 
3c374 018             | '------------------------------------------------------------------------------
3c374 018             | ' IN/INTERRUPT transaction.
3c374 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3c374 018             | '------------------------------------------------------------------------------
3c374 018             | ' On entry:
3c374 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3c374 018             | '     CRC(b19..23).
3c374 018             | ' On exit:
3c374 018             | '------------------------------------------------------------------------------
3c374 018             | txn_in
3c374 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3c378 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3c37c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3c380 01b             | 
3c380 01b             |                 ' Fall through to urx_packet
3c380 01b             | 
3c380 01b             | '------------------------------------------------------------------------------
3c380 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3c380 01b             | ' received are handshakes and IN DATAx.
3c380 01b             | '------------------------------------------------------------------------------
3c380 01b             | ' On entry:
3c380 01b             | ' On exit:
3c380 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3c380 01b             | '     returned.
3c380 01b             | '------------------------------------------------------------------------------
3c380 01b             | urx_packet
3c380 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3c384 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c388 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3c38c 01e 1A 92 63 FD |                 getct   hct2
3c390 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3c394 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3c398 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3c39c 022             | .wait_sop
3c39c 022 22 A7 8A FA |                 rdpin   urx, dm
3c3a0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c3a4 024 08 00 90 CD |         if_c    jmp     #.get_pid
3c3a8 025 FC 25 CC FB |                 jnct2   #.wait_sop
3c3ac 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3c3b0 027             | .get_pid
3c3b0 027 28 02 B0 FD |                 call    #urx_next
3c3b4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3c3b8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3c3bc 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3c3c0 02b             | .chk_pid
3c3c0 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c3c4 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3c3c8 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3c3cc 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3c3d0 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3c3d4 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3c3d8 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3c3dc 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3c3e0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3c3e4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3c3e8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3c3ec 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3c3f0 037             | .ack_resend
3c3f0 037 22 A7 82 FA |                 rqpin   urx, dm
3c3f4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3c3f8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3c3fc 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3c400 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3c404 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3c408 03d             | .chk_eop
3c408 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c40c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3c410 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3c414 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3c418 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3c41c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3c420 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3c424 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3c428 045 2D 00 64 FD |                 ret
3c42c 046             | .idle
3c42c 046 22 A7 82 FA |                 rqpin   urx, dm
3c430 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3c434 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3c438 049 2D 00 64 FD |                 ret
3c43c 04a             | 
3c43c 04a             | '------------------------------------------------------------------------------
3c43c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3c43c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3c43c 04a             | ' if one is required.
3c43c 04a             | '------------------------------------------------------------------------------
3c43c 04a             | ' On entry:
3c43c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3c43c 04a             | ' On exit:
3c43c 04a             | '------------------------------------------------------------------------------
3c43c 04a             | utx_token
3c43c 04a 22 A7 82 FA |                 rqpin   urx, dm
3c440 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3c444 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3c448 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3c44c 04e 34 0D B0 CD |         if_c    call    #utx_pre
3c450 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3c454 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3c458 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3c45c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3c460 053             | .next_byte
3c460 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3c464 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3c468 055             | .wait
3c468 055 40 46 72 FD |                 testp   dp                      wc
3c46c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3c470 057 23 03 08 FC |                 akpin   dp
3c474 058 22 A5 22 FC |                 wypin   utx, dm
3c478 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3c47c 05a             | 
3c47c 05a             | '------------------------------------------------------------------------------
3c47c 05a             | ' SETUP/OUT/INTERRUPT transaction.
3c47c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3c47c 05a             | '------------------------------------------------------------------------------
3c47c 05a             | ' On entry:
3c47c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3c47c 05a             | '     CRC(b19..23).
3c47c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3c47c 05a             | '   pkt_data - count of DATAx payload bytes to send.
3c47c 05a             | ' On exit:
3c47c 05a             | '------------------------------------------------------------------------------
3c47c 05a             | txn_out
3c47c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3c480 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3c484 05c 00 00 C0 FF 
3c488 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3c48c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3c490 05f             | 
3c490 05f             |                 ' Fall through to utx_data
3c490 05f             | 
3c490 05f             | '------------------------------------------------------------------------------
3c490 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3c490 05f             | ' calculated while the data byte is being shifted out. Since data stage
3c490 05f             | ' success/fail is not determined until the status stage of the transaction,
3c490 05f             | ' this routine is only concerned about the current DATAx packet.
3c490 05f             | '------------------------------------------------------------------------------
3c490 05f             | ' On entry:
3c490 05f             | '   PTRA - hub start address of the data to read.
3c490 05f             | '   pkt_cnt - data payload size.
3c490 05f             | ' On exit:
3c490 05f             | '------------------------------------------------------------------------------
3c490 05f             | utx_data
3c490 05f 22 A7 82 FA |                 rqpin   urx, dm
3c494 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c498 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3c49c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3c4a0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3c4a4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3c4a8 065 D8 0C B0 CD |         if_c    call    #utx_pre
3c4ac 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3c4b0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3c4b4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3c4b8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3c4bc 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3c4c0 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3c4c4 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3c4c8 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3c4cc 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3c4d0 06f             | .read_byte
3c4d0 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3c4d4 070 F0 00 B0 FD |                 call    #utx_byte
3c4d8 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3c4dc 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3c4e0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3c4e4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3c4e8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3c4ec 076             | .send_crc
3c4ec 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3c4f0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3c4f4 078 D0 00 B0 FD |                 call    #utx_byte
3c4f8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3c4fc 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3c500 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3c504 07c             | 
3c504 07c             | '------------------------------------------------------------------------------
3c504 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3c504 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3c504 07c             | ' expects that the packet includes at least the CRC word.
3c504 07c             | '
3c504 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3c504 07c             | ' was requested, which makes it difficult to determine where the data stops
3c504 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3c504 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3c504 07c             | ' USB-16 expected residual value of 0xB001.
3c504 07c             | '
3c504 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3c504 07c             | ' so the caller can verify IN success before writing the data to its final
3c504 07c             | ' destination.
3c504 07c             | '------------------------------------------------------------------------------
3c504 07c             | ' On entry:
3c504 07c             | '   pkt_data - max byte count expected to be in the packet.
3c504 07c             | '   newb_flg - signals new byte ready when toggled.
3c504 07c             | ' On exit:
3c504 07c             | '   pkt_cnt - actual number of bytes read.
3c504 07c             | '------------------------------------------------------------------------------
3c504 07c             | urx_data
3c504 07c F7 75 03 F6 |                 mov     htmp2, pb
3c508 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3c50c 07e 00 00 C0 FF 
3c510 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3c514 080 BA EF 03 F6 |                 mov     pb, htmp2
3c518 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3c51c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3c520 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3c524 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3c528 085             | .wait_byte
3c528 085             | ' In-line rx for max speed
3c528 085 22 A7 82 FA |                 rqpin   urx, dm
3c52c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3c530 087 53 A5 02 F5 |                 and     utx, urx
3c534 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3c538 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3c53c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3c540 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3c544 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3c548 08d DC FF 9F FD |                 jmp     #.wait_byte
3c54c 08e             | .get_byte
3c54c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3c550 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3c554 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3c558 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3c55c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3c560 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3c564 094             | .end_crc
3c564 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3c568 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3c56c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3c570 097 2D 00 64 1D |         if_a    ret
3c574 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3c574 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3c574 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3c574 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3c574 098 22 A7 82 FA |                 rqpin   urx, dm
3c578 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3c57c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3c580 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3c580 09b             | .chk_crc
3c580 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3c584 09c 58 00 00 FF 
3c588 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3c58c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3c590 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3c594 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3c598 0a1 34 09 B0 FD |                 call    #poll_waitx
3c59c 0a2             | 
3c59c 0a2             |                 ' Fall through to utx_handshake
3c59c 0a2             | 
3c59c 0a2             | '------------------------------------------------------------------------------
3c59c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3c59c 0a2             | ' the appropriate IP delay has been inserted.
3c59c 0a2             | '------------------------------------------------------------------------------
3c59c 0a2             | ' On entry:
3c59c 0a2             | '   retval - handshake PID to send.
3c59c 0a2             | ' On exit:
3c59c 0a2             | '   retval unchanged.
3c59c 0a2             | '------------------------------------------------------------------------------
3c59c 0a2             | utx_handshake
3c59c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3c5a0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3c5a4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3c5a8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3c5ac 0a6 5F A5 02 F6 |                 mov     utx, retval
3c5b0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3c5b4 0a8             | .idle
3c5b4 0a8 22 A7 82 FA |                 rqpin   urx, dm
3c5b8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3c5bc 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3c5c0 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3c5c4 0ac 08 09 90 FD |                 jmp     #poll_waitx
3c5c8 0ad             | 
3c5c8 0ad             | '------------------------------------------------------------------------------
3c5c8 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3c5c8 0ad             | '------------------------------------------------------------------------------
3c5c8 0ad             | ' On entry:
3c5c8 0ad             | '   utx - byte to transmit.
3c5c8 0ad             | ' On exit:
3c5c8 0ad             | '------------------------------------------------------------------------------
3c5c8 0ad             | utx_byte
3c5c8 0ad 40 46 72 FD |                 testp   dp                      wc
3c5cc 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3c5d0 0af 23 03 08 FC |                 akpin   dp
3c5d4 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3c5d8 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3c5dc 0b2             | 
3c5dc 0b2             | '------------------------------------------------------------------------------
3c5dc 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3c5dc 0b2             | '------------------------------------------------------------------------------
3c5dc 0b2             | ' On entry:
3c5dc 0b2             | ' On exit:
3c5dc 0b2             | '   retval - the byte read.
3c5dc 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3c5dc 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3c5dc 0b2             | '     received.
3c5dc 0b2             | '------------------------------------------------------------------------------
3c5dc 0b2             | urx_next
3c5dc 0b2 22 A7 8A FA |                 rdpin   urx, dm
3c5e0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3c5e4 0b4 53 A5 02 F5 |                 and     utx, urx
3c5e8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3c5ec 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3c5f0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3c5f4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3c5f8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c5fc 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3c600 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3c604 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3c608 0bd 2D 00 64 FD |                 ret
3c60c 0be             | 
3c60c 0be             | '------------------------------------------------------------------------------
3c60c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3c60c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3c60c 0be             | ' length, and the PID is not included in the CRC calculation:
3c60c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3c60c 0be             | '  CRC5  ENDP ADDRESS PID
3c60c 0be             | ' %00000_1111_1111111_xxxxxxxx
3c60c 0be             | '------------------------------------------------------------------------------
3c60c 0be             | ' On entry:
3c60c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3c60c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3c60c 0be             | ' On exit:
3c60c 0be             | '   ep_addr_pid - CRC value appended to the packet.
3c60c 0be             | '------------------------------------------------------------------------------
3c60c 0be             | calc_crc5
3c60c 0be FF 03 00 FF 
3c610 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3c614 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3c618 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3c61c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3c620 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3c624 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3c628 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3c62c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3c630 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3c634 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3c638 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3c63c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3c640 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3c644 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3c648 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3c64c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3c650 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3c654 0d0             | 
3c654 0d0             | '------------------------------------------------------------------------------
3c654 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3c654 0d0             | '------------------------------------------------------------------------------
3c654 0d0             | isr1_fsframe
3c654 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3c658 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c65c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c660 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c664 0d4             | .wait
3c664 0d4 40 46 72 FD |                 testp   dp                      wc
3c668 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3c66c 0d6 23 03 08 FC |                 akpin   dp
3c670 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3c674 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3c678 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3c67c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3c680 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3c684 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3c688 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3c68c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3c690 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3c694 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3c698 0e1 2C FF BF FD |                 call    #utx_byte
3c69c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3c6a0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3c6a4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3c6a8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3c6ac 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3c6b0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3c6b4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3c6b8 0e9 5B A5 42 F5 |                 or      utx, icrc
3c6bc 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3c6c0 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3c6c4 0ec 20 00 90 FD |                 jmp     #isr1_wait
3c6c8 0ed             | isr1_lsframe
3c6c8 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3c6cc 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c6d0 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c6d4 0f0             | .wait
3c6d4 0f0 40 46 72 FD |                 testp   dp                      wc
3c6d8 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3c6dc 0f2 23 03 08 FC |                 akpin   dp
3c6e0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3c6e4 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3c6e8 0f5             | isr1_wait
3c6e8 0f5 22 A5 82 FA |                 rqpin   utx, dm
3c6ec 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3c6f0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3c6f4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3c6f8 0f9 03 00 00 FF 
3c6fc 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3c700 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3c704 0fc F5 FF 3B FB |                 reti1
3c708 0fd             | 
3c708 0fd             | '------------------------------------------------------------------------------
3c708 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3c708 0fd             | ' transaction will complete before the next frame is triggered.
3c708 0fd             | '------------------------------------------------------------------------------
3c708 0fd             | ' On entry:
3c708 0fd             | ' On exit:
3c708 0fd             | '------------------------------------------------------------------------------
3c708 0fd             | wait_txn_ok
3c708 0fd 1A 74 63 FD |                 getct   htmp2
3c70c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3c710 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c714 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3c718 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3c71c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3c720 103 2D 00 64 FD |                 ret
3c724 104             | 
3c724 104             | '------------------------------------------------------------------------------
3c724 104             | ' A device connection was detected, or a bus reset was requested by the USB
3c724 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3c724 104             | ' and perform a reset sequence prior to device enumeration.
3c724 104             | '------------------------------------------------------------------------------
3c724 104             | dev_reset
3c724 104 22 A7 82 FA |                 rqpin   urx, dm
3c728 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3c72c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3c730 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3c734 108             | reset
3c734 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3c738 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3c73c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3c740 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c744 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3c748 10d 1A 92 62 FD |                 getct   iframe_ct_base
3c74c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c750 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c754 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3c758 111 24 70 07 F1 |                 add     htmp, #36
3c75c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3c760 113             | .framewait
3c760 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3c764 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3c768 115 2D 00 64 FD |                 ret
3c76c 116             | 
3c76c 116             | '------------------------------------------------------------------------------
3c76c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3c76c 116             | '------------------------------------------------------------------------------
3c76c 116             | ' On entry:
3c76c 116             | '   PTRA - source address.
3c76c 116             | '   PB - destination address.
3c76c 116             | '   hr0 - length of copy, in bytes.
3c76c 116             | ' On exit:
3c76c 116             | '------------------------------------------------------------------------------
3c76c 116             | hmemcpy
3c76c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3c770 117 F7 71 43 FC |                 wrbyte  htmp, pb
3c774 118 01 EE 07 F1 |                 add     pb, #1
3c778 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3c77c 11a             | 
3c77c 11a             | '------------------------------------------------------------------------------
3c77c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3c77c 11a             | ' loop until the errant device is disconnected.
3c77c 11a             | '------------------------------------------------------------------------------
3c77c 11a             | ' On entry:
3c77c 11a             | ' On exit:
3c77c 11a             | '------------------------------------------------------------------------------
3c77c 11a             | host_error
3c77c 11a             |           if ERROR_LED >= 0
3c77c 11a             |           end
3c77c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3c780 11b             | 
3c780 11b             | '------------------------------------------------------------------------------
3c780 11b             | ' Get HID descriptor buffer for current port
3c780 11b             | '------------------------------------------------------------------------------
3c780 11b             | ' On entry:
3c780 11b             | ' On exit:
3c780 11b             | '   PB - HID descriptor buffer pointer
3c780 11b             | '------------------------------------------------------------------------------
3c780 11b             | get_hid_descr_buffer
3c780 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3c784 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3c788 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3c78c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3c790 11f             | 
3c790 11f             | 
3c790 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3c794 120             | 
3c794 120             | ' USB commands and error codes
3c794 120 00 00 00 00 | cmd_data        long    0
3c798 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3c79c 122             | 
3c79c 122             | ' Parameters block assigned at cog startup
3c79c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3c7a0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3c7a4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3c7a8 125             | if ACTIVITY_LED >= 0
3c7a8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3c7a8 125             | end
3c7a8 125             | if ERROR_LED >= 0
3c7a8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3c7a8 125             | end
3c7a8 125 00 00 00 00 | hid_descr_p     long    0
3c7ac 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3c7ac 126             | 'hkbd_report_p   long    0
3c7ac 126 00 00 00 00 | hub_descr_p     long    0
3c7b0 127 00 00 00 00 | urx_buff_p      long    0
3c7b4 128 00 00 00 00 | dev_desc_buff_p long    0
3c7b8 129 00 00 00 00 | con_desc_buff_p long    0
3c7bc 12a 00 00 00 00 | cache_start_p   long    0
3c7c0 12b 00 00 00 00 | cache_end_p     long    0
3c7c4 12c             | if EMUPAD_MAX_PLAYER > 0
3c7c4 12c             | emupad_out_ptr  long    0
3c7c4 12c             | end
3c7c4 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3c7c8 12d             | 
3c7c8 12d             | hdev_init_start
3c7c8 12d             | hdev_port       res     1
3c7c8 12d             | hdev_port       res     1
3c7c8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3c7c8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3c7c8 12d             | kbm_next_datax  res     1
3c7c8 12d             | kbm_next_datax  res     1
3c7c8 12d             | hub_intf_num    res     1
3c7c8 12d             | hub_intf_num    res     1
3c7c8 12d             | hub_next_datax  res     1
3c7c8 12d             | hub_next_datax  res     1
3c7c8 12d             | hub_status_chg  res     1
3c7c8 12d             | hub_status_chg  res     1
3c7c8 12d             | hub_port_status res     1
3c7c8 12d             | hub_port_status res     1
3c7c8 12d             | if HAVE_MOUSE
3c7c8 12d             | ms_intf_num     res     1
3c7c8 12d             | ms_intf_num     res     1
3c7c8 12d             | ms_in_max_pkt   res     1
3c7c8 12d             | ms_in_max_pkt   res     1
3c7c8 12d             | end
3c7c8 12d             | kb_intf_num     res     1
3c7c8 12d             | kb_intf_num     res     1
3c7c8 12d             | kb_interval     res     1
3c7c8 12d             | kb_interval     res     1
3c7c8 12d             | kb_in_max_pkt   res     1
3c7c8 12d             | kb_in_max_pkt   res     1
3c7c8 12d             | kb_max_index    res     1
3c7c8 12d             | kb_max_index    res     1
3c7c8 12d             | kb_led_states   res     1
3c7c8 12d             | kb_led_states   res     1
3c7c8 12d             | gp_intf_num     res     1
3c7c8 12d             | gp_intf_num     res     1
3c7c8 12d             | gp_interval     res     1
3c7c8 12d             | gp_interval     res     1
3c7c8 12d             | gp_max_index    res     1
3c7c8 12d             | gp_max_index    res     1
3c7c8 12d             | gp_descr_len    res     1+MAX_DEVICES
3c7c8 12d             | gp_descr_len    res     1+MAX_DEVICES
3c7c8 12d             | hdev_init_end
3c7c8 12d             | 
3c7c8 12d             | ' Initialized at cog startup:
3c7c8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3c7c8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3c7c8 12d             | iframe_ct_new   res     1
3c7c8 12d             | iframe_ct_new   res     1
3c7c8 12d             | iframe_ct_base  res     1
3c7c8 12d             | iframe_ct_base  res     1
3c7c8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3c7c8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3c7c8 12d             | 
3c7c8 12d             | ' This register block is reset to zero when a USB device connects
3c7c8 12d             | hreg_init_start
3c7c8 12d             | hstatus         res     1         ' Host status flags
3c7c8 12d             | hstatus         res     1         ' Host status flags
3c7c8 12d             | hctwait         res     1         ' Poll-based wait clocks
3c7c8 12d             | hctwait         res     1         ' Poll-based wait clocks
3c7c8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3c7c8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3c7c8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3c7c8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3c7c8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3c7c8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3c7c8 12d             | xfer_retry      res     1         ' Control transfer retry count
3c7c8 12d             | xfer_retry      res     1         ' Control transfer retry count
3c7c8 12d             | retry           res     1         ' Transaction retry count
3c7c8 12d             | retry           res     1         ' Transaction retry count
3c7c8 12d             | utx             res     1         ' Byte to transmit on USB
3c7c8 12d             | utx             res     1         ' Byte to transmit on USB
3c7c8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3c7c8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3c7c8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3c7c8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3c7c8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3c7c8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3c7c8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3c7c8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3c7c8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3c7c8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3c7c8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3c7c8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3c7c8 12d             | frame           res     1         ' USB 1ms frame counter value
3c7c8 12d             | frame           res     1         ' USB 1ms frame counter value
3c7c8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3c7c8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3c7c8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3c7c8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3c7c8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3c7c8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3c7c8 12d             | crc             res     1         ' Used for CRC16 calculation
3c7c8 12d             | crc             res     1         ' Used for CRC16 calculation
3c7c8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3c7c8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3c7c8 12d             | retval          res     1         ' Global success/fail return parameter
3c7c8 12d             | retval          res     1         ' Global success/fail return parameter
3c7c8 12d             | context_retval  res     1         ' Operation contextual return parameter
3c7c8 12d             | context_retval  res     1         ' Operation contextual return parameter
3c7c8 12d             | ' Device stuff
3c7c8 12d             | hdev_id         res     1+MAX_DEVICES
3c7c8 12d             | hdev_id         res     1+MAX_DEVICES
3c7c8 12d             | hdev_bcd        res     1
3c7c8 12d             | hdev_bcd        res     1
3c7c8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3c7c8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3c7c8 12d             | ' Keyboard/mouse stuff
3c7c8 12d             | hctrl_ep_addr   res     1
3c7c8 12d             | hctrl_ep_addr   res     1
3c7c8 12d             | hctrl_max_pkt   res     1
3c7c8 12d             | hctrl_max_pkt   res     1
3c7c8 12d             | hconfig_base    res     1
3c7c8 12d             | hconfig_base    res     1
3c7c8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3c7c8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3c7c8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3c7c8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3c7c8 12d             | hdev_class      res     1
3c7c8 12d             | hdev_class      res     1
3c7c8 12d             | hdev_subclass   res     1
3c7c8 12d             | hdev_subclass   res     1
3c7c8 12d             | hdev_protocol   res     1
3c7c8 12d             | hdev_protocol   res     1
3c7c8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3c7c8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3c7c8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3c7c8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3c7c8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3c7c8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3c7c8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3c7c8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3c7c8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3c7c8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3c7c8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3c7c8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3c7c8 12d             | if HAVE_MOUSE
3c7c8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3c7c8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3c7c8 12d             | end
3c7c8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3c7c8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3c7c8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3c7c8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3c7c8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3c7c8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3c7c8 12d             | hdev_out_addr   res     1
3c7c8 12d             | hdev_out_addr   res     1
3c7c8 12d             | 
3c7c8 12d             | if EMUPAD_MAX_PLAYER > 0
3c7c8 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3c7c8 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3c7c8 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3c7c8 12d             | end
3c7c8 12d             | 
3c7c8 12d             | hreg_init_end
3c7c8 12d             | 
3c7c8 12d             | hidr_start
3c7c8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3c7c8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3c7c8 12d             | hidr_flags      res     1
3c7c8 12d             | hidr_flags      res     1
3c7c8 12d             | hidr_axis       res     3
3c7c8 12d             | hidr_axis       res     3
3c7c8 12d             | hidr_buttons    res     1
3c7c8 12d             | hidr_buttons    res     1
3c7c8 12d             | hidr_hats       res     1
3c7c8 12d             | hidr_hats       res     1
3c7c8 12d             | '' Above are actually useful values, 6 longs
3c7c8 12d             | hidr_id         res     1
3c7c8 12d             | hidr_id         res     1
3c7c8 12d             | hidr_state      res     1
3c7c8 12d             | hidr_state      res     1
3c7c8 12d             | hidr_size       res     1
3c7c8 12d             | hidr_size       res     1
3c7c8 12d             | hidr_count      res     1
3c7c8 12d             | hidr_count      res     1
3c7c8 12d             | hidr_offset     res     1
3c7c8 12d             | hidr_offset     res     1
3c7c8 12d             | hidr_usage_idx  res     1
3c7c8 12d             | hidr_usage_idx  res     1
3c7c8 12d             | hidr_lminmax    res     1
3c7c8 12d             | hidr_lminmax    res     1
3c7c8 12d             | hidr_pminmax    res     1
3c7c8 12d             | hidr_pminmax    res     1
3c7c8 12d             | hidr_type       res     1
3c7c8 12d             | hidr_type       res     1
3c7c8 12d             | hidr_end
3c7c8 12d             | 
3c7c8 12d             | ' Variables dependent on the system freqency
3c7c8 12d             | _var_64_lower_  res     1
3c7c8 12d             | _var_64_lower_  res     1
3c7c8 12d             | _var_64_upper_  res     1
3c7c8 12d             | _var_64_upper_  res     1
3c7c8 12d             | _12Mbps_        res     1
3c7c8 12d             | _12Mbps_        res     1
3c7c8 12d             | _1_5Mbps_       res     1
3c7c8 12d             | _1_5Mbps_       res     1
3c7c8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3c7c8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3c7c8 12d             | _1us_           res     1         ' 1us
3c7c8 12d             | _1us_           res     1         ' 1us
3c7c8 12d             | _10us_          res     1         ' 10us
3c7c8 12d             | _10us_          res     1         ' 10us
3c7c8 12d             | _33us_          res     1         ' 33us
3c7c8 12d             | _33us_          res     1         ' 33us
3c7c8 12d             | _txn_err_       res     1         ' 250us
3c7c8 12d             | _txn_err_       res     1         ' 250us
3c7c8 12d             | _500us_         res     1         ' 500us
3c7c8 12d             | _500us_         res     1         ' 500us
3c7c8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3c7c8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3c7c8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3c7c8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3c7c8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3c7c8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3c7c8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3c7c8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3c7c8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3c7c8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3c7c8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3c7c8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3c7c8 12d             | _preamble_wait_ res     1
3c7c8 12d             | _preamble_wait_ res     1
3c7c8 12d             | _1ms_           res     1         ' 1ms
3c7c8 12d             | _1ms_           res     1         ' 1ms
3c7c8 12d             | _2ms_           res     1         ' 2ms
3c7c8 12d             | _2ms_           res     1         ' 2ms
3c7c8 12d             | _suspend_wait_  res     1         ' 3ms
3c7c8 12d             | _suspend_wait_  res     1         ' 3ms
3c7c8 12d             | _4ms_           res     1         ' 4ms
3c7c8 12d             | _4ms_           res     1         ' 4ms
3c7c8 12d             | _xfer_wait_     res     1         ' 5ms
3c7c8 12d             | _xfer_wait_     res     1         ' 5ms
3c7c8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3c7c8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3c7c8 12d             | _reset_hold_    res     1         ' 15ms
3c7c8 12d             | _reset_hold_    res     1         ' 15ms
3c7c8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3c7c8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3c7c8 12d             | _21ms_          res     1         ' 21ms
3c7c8 12d             | _21ms_          res     1         ' 21ms
3c7c8 12d             | _100ms_         res     1         ' 100ms
3c7c8 12d             | _100ms_         res     1         ' 100ms
3c7c8 12d             | _500ms_         res     1         ' 500ms
3c7c8 12d             | _500ms_         res     1         ' 500ms
3c7c8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3c7c8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3c7c8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3c7c8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3c7c8 12d             | '------------------------------------------------------------------------------
3c7c8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3c7c8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3c7c8 12d             | _usb_d_ls_nco_  res     1
3c7c8 12d             | _usb_d_ls_nco_  res     1
3c7c8 12d             | _usb_h_fs_nco_  res     1
3c7c8 12d             | _usb_h_fs_nco_  res     1
3c7c8 12d             | _usb_d_fs_nco_  res     1
3c7c8 12d             | _usb_d_fs_nco_  res     1
3c7c8 12d             | '------------------------------------------------------------------------------
3c7c8 12d             | ' Scratch registers
3c7c8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3c7c8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3c7c8 12d             | htmp1           res     1
3c7c8 12d             | htmp1           res     1
3c7c8 12d             | htmp2           res     1
3c7c8 12d             | htmp2           res     1
3c7c8 12d             | htmp3           res     1
3c7c8 12d             | htmp3           res     1
3c7c8 12d             | hrep            res     1         ' Repeat count
3c7c8 12d             | hrep            res     1         ' Repeat count
3c7c8 12d             | hsave0          res     1         ' Subroutine parameter saves
3c7c8 12d             | hsave0          res     1         ' Subroutine parameter saves
3c7c8 12d             | hsave1          res     1
3c7c8 12d             | hsave1          res     1
3c7c8 12d             | hsave2          res     1
3c7c8 12d             | hsave2          res     1
3c7c8 12d             | isrtmp1         res     1
3c7c8 12d             | isrtmp1         res     1
3c7c8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3c7c8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3c7c8 12d             | hr0             res     1         ' Multi-purpose registers
3c7c8 12d             | hr0             res     1         ' Multi-purpose registers
3c7c8 12d             | hr1             res     1
3c7c8 12d             | hr1             res     1
3c7c8 12d             | hr2             res     1
3c7c8 12d             | hr2             res     1
3c7c8 12d             | hr3             res     1
3c7c8 12d             | hr3             res     1
3c7c8 12d             | hpar1           res     1         ' Routine entry/exit parameters
3c7c8 12d             | hpar1           res     1         ' Routine entry/exit parameters
3c7c8 12d             | hpar2           res     1
3c7c8 12d             | hpar2           res     1
3c7c8 12d             | hpar3           res     1
3c7c8 12d             | hpar3           res     1
3c7c8 12d             | hct2            res     1         ' Function response bus turn-around timer
3c7c8 12d             | hct2            res     1         ' Function response bus turn-around timer
3c7c8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3c7c8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3c7c8 12d             | mod_cnt         res     1         ' Used in idle loops
3c7c8 12d             | mod_cnt         res     1         ' Used in idle loops
3c7c8 12d             |                 fit     $1F0
3c7c8 12d             |                 org     $200
3c7c8 200             | hlut_start
3c7c8 200             | 
3c7c8 200             | '------------------------------------------------------------------------------
3c7c8 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3c7c8 200             | ' settings to startup defaults.
3c7c8 200             | '------------------------------------------------------------------------------
3c7c8 200             | ' On entry:
3c7c8 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3c7c8 200             | '------------------------------------------------------------------------------
3c7c8 200             | set_speed_full
3c7c8 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3c7cc 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c7d0 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3c7d4 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3c7d8 204             | '                ret                             wcz     ' Restore caller flags on exit
3c7d8 204             | 
3c7d8 204             | '------------------------------------------------------------------------------
3c7d8 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3c7d8 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3c7d8 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3c7d8 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3c7d8 204             | ' putting the smart pins into reset.
3c7d8 204             | '------------------------------------------------------------------------------
3c7d8 204             | ' On entry:
3c7d8 204             | ' On exit: CZ flags restored to caller states
3c7d8 204             | '------------------------------------------------------------------------------
3c7d8 204             | set_speed_low
3c7d8 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3c7dc 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3c7e0 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3c7e4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c7e8 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c7ec 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c7f0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3c7f4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3c7f8 20c             | 
3c7f8 20c             | '------------------------------------------------------------------------------
3c7f8 20c             | ' Perform configuration stuff required when a device intitially connects.
3c7f8 20c             | '------------------------------------------------------------------------------
3c7f8 20c             | ' On entry:
3c7f8 20c             | ' On exit:
3c7f8 20c             | '------------------------------------------------------------------------------
3c7f8 20c             | on_connect
3c7f8 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3c7fc 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3c800 20e             | .retry
3c800 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c804 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3c808 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3c80c 211 00 08 00 FF 
3c810 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3c814 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3c818 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c81c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3c820 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3c824 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3c828 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c82c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3c830 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3c834 21b 4C 03 B0 FD |                 call    #poll_waitx
3c838 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3c83c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3c840 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3c844 21f B8 FF 9F FD |                 jmp     #.retry
3c848 220             | .get_dev_desc
3c848 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3c84c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3c850 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3c854 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3c858 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3c85c 225 88 FB BF FD |                 call    #reset
3c860 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3c864 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c868 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3c86c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3c870 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c874 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3c878 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3c87c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3c880 22e 04 00 00 FF 
3c884 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3c888 230 34 FA BF FD |                 call    #calc_crc5
3c88c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3c890 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c894 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3c898 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3c89c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3c8a0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3c8a4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8a8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3c8ac 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3c8b0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3c8b4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3c8b8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3c8bc 23d C4 02 B0 FD |                 call    #poll_waitx
3c8c0 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3c8c4 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c8c8 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3c8cc 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3c8d0 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3c8d4 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8d8 244 2D 00 64 5D |         if_nz   ret
3c8dc 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3c8e0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3c8e4 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3c8e8 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3c8ec 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3c8f0 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3c8f4 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3c8f8 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3c8fc 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3c900 24e 2C FB 9F CD |         if_b    jmp     #host_error
3c904 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3c908 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c90c 251 2D EC 63 FD |                 call    pa
3c910 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3c914 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c918 254 2C EC 63 FD |                 jmp     pa
3c91c 255             | 
3c91c 255             | '------------------------------------------------------------------------------
3c91c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3c91c 255             | ' Status reporting is always in the function-to-host direction.
3c91c 255             | '------------------------------------------------------------------------------
3c91c 255             | ' On entry:
3c91c 255             | '   PTRA - start address of the SETUP data in hub.
3c91c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3c91c 255             | '     stage.
3c91c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3c91c 255             | ' On exit:
3c91c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3c91c 255             | '     contains the count of data stage bytes actually received, which must
3c91c 255             | '     always be <= the count requested.
3c91c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3c91c 255             | '     more specific USB operation error code.
3c91c 255             | '------------------------------------------------------------------------------
3c91c 255             | control_read
3c91c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3c920 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3c924 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3c928 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3c92c 259             | .xfer_start
3c92c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3c930 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3c934 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c938 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3c93c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3c940 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3c944 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3c948 260 61 00 00 FF 
3c94c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3c950 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3c954 263             | .data
3c954 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3c958 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3c95c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3c960 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3c964 267             | .nak_retry
3c964 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3c968 268             | .in_retry
3c968 268 BC F6 BF FD |                 call    #txn_in
3c96c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3c970 26a 28 00 90 AD |         if_z    jmp     #.commit
3c974 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c978 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3c97c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c980 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c984 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3c988 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3c98c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3c990 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c994 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3c998 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3c99c 275             | .commit
3c99c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3c9a0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3c9a4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3c9a8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3c9ac 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3c9b0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c9b4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3c9b8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3c9bc 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3c9c0 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3c9c4 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3c9c8 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3c9cc 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3c9d0 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3c9d4 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3c9d8 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3c9dc 285             | .pre_status
3c9dc 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3c9e0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3c9e4 287 00 B0 06 F6 |                 mov     pkt_data, #0
3c9e8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3c9ec 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c9f0 28a 61 00 00 FF 
3c9f4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3c9f8 28c             | .out_retry
3c9f8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3c9fc 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ca00 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3ca04 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3ca08 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3ca0c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3ca10 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3ca14 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3ca18 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ca1c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3ca20 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3ca24 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3ca24 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3ca24 297             | ' ControlRead() transfer gets things unstuck most of the time...
3ca24 297             | .xfer_retry
3ca24 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3ca28 298 58 01 B0 FD |                 call    #poll_waitx
3ca2c 299 8C F9 BF FD |                 call    #wait_txn_ok
3ca30 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3ca34 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3ca38 29c C8 EF 03 F6 |                 mov     pb, hpar3
3ca3c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3ca40 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3ca44 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3ca48 2a0             | 
3ca48 2a0             | '------------------------------------------------------------------------------
3ca48 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3ca48 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3ca48 2a0             | ' the SETUP data struct is filled with the required values.
3ca48 2a0             | '------------------------------------------------------------------------------
3ca48 2a0             | ' On entry:
3ca48 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3ca48 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3ca48 2a0             | '     stage.
3ca48 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3ca48 2a0             | ' On exit:
3ca48 2a0             | '   retval - used to convey the success/failure of each stage.
3ca48 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3ca48 2a0             | '     more specific USB operation error code.
3ca48 2a0             | '------------------------------------------------------------------------------
3ca48 2a0             | control_write
3ca48 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3ca4c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3ca50 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3ca54 2a3             | 
3ca54 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3ca58 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3ca5c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3ca60 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3ca64 2a7             | .xfer_start
3ca64 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3ca68 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3ca6c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3ca70 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ca74 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3ca78 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3ca7c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3ca80 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3ca84 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3ca88 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3ca8c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3ca90 2b2             | .data
3ca90 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3ca94 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3ca98 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3ca9c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3caa0 2b6             | .out_retry
3caa0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3caa4 2b7 88 F6 BF FD |                 call    #txn_out
3caa8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3caac 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3cab0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3cab4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3cab8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3cabc 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3cac0 2be             | .commit
3cac0 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3cac4 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3cac8 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3cacc 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3cad0 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3cad4 2c3             | pre_status_in
3cad4 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3cad8 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3cadc 2c5             | .status_retry
3cadc 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3cae0 2c6 44 F5 BF FD |                 call    #txn_in
3cae4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3cae8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3caec 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3caf0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3caf4 2cb 2D 00 64 AD |         if_z    ret
3caf8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3cafc 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3cb00 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3cb04 2cf             | '               ret                                     ' Caller must handle transfer retirement
3cb04 2cf             | 
3cb04 2cf             | '------------------------------------------------------------------------------
3cb04 2cf             | ' Execute an IN interrupt transaction.
3cb04 2cf             | '------------------------------------------------------------------------------
3cb04 2cf             | ' On entry:
3cb04 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3cb04 2cf             | '   hpar2 - Address of the IN data buffer
3cb04 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3cb04 2cf             | ' On exit:
3cb04 2cf             | '   retval - the result of the operation.
3cb04 2cf             | '   hpar3 - the count of IN data bytes actually received.
3cb04 2cf             | '------------------------------------------------------------------------------
3cb04 2cf             | do_int_in
3cb04 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3cb08 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3cb0c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3cb10 2d2             | 
3cb10 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3cb14 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3cb18 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3cb1c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3cb20 2d6             | .retry
3cb20 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3cb24 2d7 00 F5 BF FD |                 call    #txn_in
3cb28 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3cb2c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3cb30 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3cb34 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3cb38 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3cb3c 2dd 54 00 B0 FD |                 call    #retry_wait
3cb40 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3cb44 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3cb48 2e0 D4 FF 9F FD |                 jmp     #.retry
3cb4c 2e1             | .commit
3cb4c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3cb50 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3cb54 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3cb58 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3cb5c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3cb60 2e6             | .post_ret
3cb60 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3cb64 2e7             | 
3cb64 2e7             | 
3cb64 2e7             | '------------------------------------------------------------------------------
3cb64 2e7             | ' Resets the downstream hub port to FS
3cb64 2e7             | '------------------------------------------------------------------------------
3cb64 2e7             | dwnstream_reset
3cb64 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3cb68 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3cb6c 2e9             | 
3cb6c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3cb70 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3cb74 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3cb78 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3cb7c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3cb80 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3cb84 2ef             | 
3cb84 2ef             | '------------------------------------------------------------------------------
3cb84 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3cb84 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3cb84 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3cb84 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3cb84 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3cb84 2ef             | '------------------------------------------------------------------------------
3cb84 2ef             | ' On entry:
3cb84 2ef             | '   hctwait - wait interval in sysclocks.
3cb84 2ef             | ' On exit:
3cb84 2ef             | '------------------------------------------------------------------------------
3cb84 2ef             | poll_waitx
3cb84 2ef 1A 92 63 FD |                 getct   hct2
3cb88 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3cb8c 2f1             | .wait
3cb8c 2f1 FF 25 CC FB |                 jnct2   #.wait
3cb90 2f2 2D 00 64 FD |                 ret
3cb94 2f3             | 
3cb94 2f3             | '------------------------------------------------------------------------------
3cb94 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3cb94 2f3             | '------------------------------------------------------------------------------
3cb94 2f3             | ' On entry:
3cb94 2f3             | '   retval - transaction response PID or error code.
3cb94 2f3             | ' On exit:
3cb94 2f3             | '------------------------------------------------------------------------------
3cb94 2f3             | retry_wait
3cb94 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3cb98 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3cb9c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3cba0 2f6 14 00 90 AD |         if_z    jmp     #.nak
3cba4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3cba8 2f8 D8 FF BF FD |                 call    #poll_waitx
3cbac 2f9             | .dec
3cbac 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3cbb0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3cbb4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3cbb8 2fc             | .nak
3cbb8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3cbbc 2fd C4 FF BF FD |                 call    #poll_waitx
3cbc0 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3cbc4 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3cbc8 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3cbcc 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3cbd0 302 2D 00 64 FD |                 ret
3cbd4 303             | 
3cbd4 303             | host_reset
3cbd4 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3cbd8 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3cbdc 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3cbdc 305 BD 01 05 FF 
3cbe0 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3cbe4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3cbe8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3cbec 309             | ' Check to see if the system clock has been changed.
3cbec 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3cbf0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3cbf4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3cbf8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3cbfc 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3cc00 30e 40 46 62 FD |                 dirl    dp
3cc04 30f             | 
3cc04 30f 28 02 64 FD |                 setq    #1
3cc08 310 80 00 80 FF 
3cc0c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3cc10 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3cc14 313             | .enable
3cc14 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3cc18 314 41 46 62 FD |                 dirh    dp
3cc1c 315 1F 36 63 FD |                 waitx   _1us_
3cc20 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3cc24 317             | 
3cc24 317             |                 ' Handle Port protection enable and startup delay
3cc24 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3cc28 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3cc2c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3cc30 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3cc34 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3cc38 31c             | 
3cc38 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3cc3c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3cc40 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3cc44 31f 00 00 04 F6 |                 mov     0-0, #0
3cc48 320             | .regloop
3cc48 320             | 
3cc48 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3cc48 320             | 
3cc48 320             | discon_entry
3cc48 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3cc4c 321             | 
3cc4c 321             |               
3cc4c 321             |         if HAVE_HIDPAD
3cc4c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3cc50 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3cc54 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3cc58 324 F7 01 68 FC |                 wrlong  #0,pb
3cc5c 325             |         end
3cc5c 325             |         if EMUPAD_MAX_PLAYER > 0
3cc5c 325             |         end
3cc5c 325             | 
3cc5c 325             |                 ' Fall through to disconnected loop
3cc5c 325             | 
3cc5c 325             | '-----------------------------------------------------------------------------------------------------------------
3cc5c 325             | ' Device connect handling (Section 7.1.7.3).
3cc5c 325             | '-----------------------------------------------------------------------------------------------------------------
3cc5c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3cc5c 325             | ' device to connect (Section 7.1.7.3).
3cc5c 325             | '-----------------------------------------------------------------------------------------------------------------
3cc5c 325             | disconnected
3cc5c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3cc60 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3cc64 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3cc68 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3cc6c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3cc70 32a             |         if ACTIVITY_LED >= 0
3cc70 32a             |         end
3cc70 32a 22 A7 82 FA |                 rqpin   urx, dm
3cc74 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3cc78 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3cc7c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3cc80 32e             | .se1_test
3cc80 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3cc84 32f FC FE BF FD |                 call    #poll_waitx
3cc88 330 22 A7 82 FA |                 rqpin   urx, dm
3cc8c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3cc90 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3cc94 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3cc98 334             | .se1            'SE1 is a fatal error condition
3cc98 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3cc9c 335 E4 FE BF FD |                 call    #poll_waitx
3cca0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3cca4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3cca8 338             | .connect_test                                           ' Test lines until stable J/K state seen
3cca8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3ccac 339 22 A7 82 FA |                 rqpin   urx, dm
3ccb0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ccb4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3ccb8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3ccbc 33d             | connected
3ccbc 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3ccc0 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3ccc4 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3ccc8 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3cccc 341             | .set_pulse
3cccc 341 1A 64 63 FD |                 getct   _pulse_time_
3ccd0 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3ccd4 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3ccd4 343             | ' of 1ms and make a correction, if necessary.
3ccd4 343             | '                mov     htmp, _1ms_
3ccd4 343             | '                subs    htmp, iframe_delta
3ccd4 343             | '                adds    _frame1ms_clks_, htmp
3ccd4 343             | '                debug(udec(_frame1ms_clks_))
3ccd4 343             | 
3ccd4 343             |                 ' Fall through to idle/processing loop
3ccd4 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3ccd8 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3ccdc 345             | 
3ccdc 345             | hidle
3ccdc 345 22 A7 82 FA |                 rqpin   urx, dm
3cce0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3cce4 347 98 00 90 CD |         if_c    jmp     #.se0_test
3cce8 348 24 06 70 FD |                 pollct3                         wc
3ccec 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3ccf0 34a 1A 94 63 FD |                 getct   hct3
3ccf4 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3ccf8 34c             | 
3ccf8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ccfc 34d 00 70 E3 F8 |                 getbyte htmp
3cd00 34e             | 
3cd00 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3cd04 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3cd08 350 40 00 90 AD |         if_z    jmp     #.poll
3cd0c 351             | 
3cd0c 351             |         if _HAVE_GAMEPAD
3cd0c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3cd10 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3cd14 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3cd18 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3cd1c 355 2C 00 90 AD |         if_z    jmp     #.poll
3cd20 356             |         end
3cd20 356             | 
3cd20 356             |         if HAVE_MOUSE
3cd20 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3cd24 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3cd28 358 20 00 90 AD |         if_z    jmp     #.poll
3cd2c 359             |         end
3cd2c 359             | 
3cd2c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3cd30 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3cd34 35b 14 00 90 AD |         if_z    jmp     #.poll
3cd38 35c             | 
3cd38 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3cd3c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3cd40 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3cd44 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3cd48 360             |         if HAVE_MOUSE
3cd48 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3cd4c 361             |         else
3cd4c 361             |         end
3cd4c 361             | 
3cd4c 361             | .poll
3cd4c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3cd50 362 2D EC 63 FD |                 call    pa
3cd54 363             | .skip_poll
3cd54 363             | 
3cd54 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3cd58 364             | 
3cd58 364             | .nopoll
3cd58 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3cd5c 365 44 00 90 AD |         if_z    jmp     #hsuspend
3cd60 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3cd64 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3cd68 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3cd6c 369 1A 84 63 FD |                 getct   hr0
3cd70 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3cd74 36b             |         if ACTIVITY_LED >= 0
3cd74 36b             |         end
3cd74 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3cd78 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3cd7c 36d 5C FF 9F FD |                 jmp     #hidle
3cd80 36e             | ' Check for extended SE0 state on the bus
3cd80 36e             | .se0_test
3cd80 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3cd84 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3cd88 370 22 A7 82 FA |                 rqpin   urx, dm
3cd8c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3cd90 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3cd94 373 24 F6 BF FD |                 call    #wait_txn_ok
3cd98 374 00 00 80 FF 
3cd9c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3cda0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3cda0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3cda4 377             | 
3cda4 377             | hsuspend
3cda4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3cda8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3cdac 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3cdb0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3cdb4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3cdb8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3cdbc 37d             | 
3cdbc 37d             |                 ' Fall through to resume wait loop
3cdbc 37d             | 
3cdbc 37d             | hwait_resume
3cdbc 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3cdc0 37e 02 86 47 F0 |                 shr     hr1, #2
3cdc4 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3cdc8 380             |         if ACTIVITY_LED >= 0
3cdc8 380             |         end
3cdc8 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3cdcc 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3cdd0 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3cdd4 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3cdd8 384 18 00 90 AD |         if_z    jmp     #.resume
3cddc 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3cde0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3cde4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3cde8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3cdec 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3cdf0 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3cdf4 38b             | .resume
3cdf4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3cdf8 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3cdfc 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3ce00 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3ce04 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3ce08 390 1F 70 63 FD |                 waitx   htmp
3ce0c 391 22 07 28 FC |                 wypin   #OUT_J, dm
3ce10 392 01 70 47 F0 |                 shr     htmp, #1
3ce14 393 1F 70 63 FD |                 waitx   htmp
3ce18 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ce1c 395 1A 92 62 FD |                 getct   iframe_ct_base
3ce20 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3ce24 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3ce28 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3ce2c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3ce30 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3ce34 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3ce38 39c             | 
3ce38 39c             | '------------------------------------------------------------------------------
3ce38 39c             | ' Send preamble to enable low-speed HUB ports
3ce38 39c             | '------------------------------------------------------------------------------
3ce38 39c             | ' On entry:
3ce38 39c             | ' On exit:
3ce38 39c             | '   USB baud rate set to low-speed
3ce38 39c             | '------------------------------------------------------------------------------
3ce38 39c             | utx_pre
3ce38 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ce3c 39d 40 46 62 FD |                 dirl    dp
3ce40 39e 28 02 64 FD |                 setq    #1
3ce44 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3ce48 3a0 58 44 62 FD |                 drvl    dm
3ce4c 3a1 59 46 62 FD |                 drvh    dp
3ce50 3a2             | 
3ce50 3a2 1E 00 00 FF 
3ce54 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3ce58 3a4             | 
3ce58 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3ce5c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3ce60 3a6 28 02 64 3D |         if_nc   setq    #1
3ce64 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3ce68 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3ce6c 3a9             | .l1
3ce6c 3a9             | 
3ce6c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ce70 3aa 40 46 62 FD |                 dirl    dp
3ce74 3ab 28 02 64 FD |                 setq    #1
3ce78 3ac 80 00 80 FF 
3ce7c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3ce80 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3ce84 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ce88 3b0 41 46 62 FD |                 dirh    dp
3ce8c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ce90 3b2             | 
3ce90 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ce94 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ce98 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ce9c 3b5             | 
3ce9c 3b5             | hlut_end
3ce9c 3b5             |                 fit     $400
3ce9c 3b5             |                 orgh
3ce9c                 | if OVERLAP_MEMORY
3ce9c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3ce9c                 | end
3ce9c                 | '------------------------------------------------------------------------------
3ce9c                 | ' Routines called from cog space.
3ce9c                 | '------------------------------------------------------------------------------
3ce9c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3ce9c                 | '------------------------------------------------------------------------------
3ce9c                 | 
3ce9c                 | '------------------------------------------------------------------------------
3ce9c                 | ' USB host cog initialization.
3ce9c                 | '------------------------------------------------------------------------------
3ce9c                 | usb_host_init
3ce9c                 |                 ' Initialize buffer pointers
3ce9c                 |         if OVERLAP_MEMORY
3ce9c                 |         else
3ce9c     40 15 B0 FE |                 loc     pb, #hid_descr
3cea0                 |         end
3cea0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3cea4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3cea4                 |                 {
3cea4                 |                 }
3cea4                 |         
3cea4                 |                 {
3cea4                 |                 }
3cea4                 |                 'loc     pb,#hkbd_report
3cea4                 |                 'mov     hkbd_report_p,pb
3cea4                 | 
3cea4     08 1D B0 FE |                 loc     pb, #hub_descr
3cea8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3ceac     1D 1D B0 FE |                 loc     pb, #urx_buff
3ceb0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3ceb4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3ceb8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3cebc     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3cec0     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3cec4     18 15 B0 FE |                 loc     pb, #usb_cache_start
3cec8     F7 55 02 F6 |                 mov     cache_start_p, pb
3cecc     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3ced0     F7 57 02 F6 |                 mov     cache_end_p, pb
3ced4                 | 
3ced4                 |         if ERROR_LED >= 0
3ced4                 |         end
3ced4                 | 
3ced4                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3ced4                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3ced4                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3ced4                 | ' Configure and enable the Serial Host USB port.
3ced4     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3ced8                 | 
3ced8                 | '------------------------------------------------------------------------------
3ced8                 | ' Timing calculations happen before any interrupt(s) are enabled.
3ced8                 | '------------------------------------------------------------------------------
3ced8                 | ' On entry:
3ced8                 | '   htmp - current CLKFREQ value.
3ced8                 | '------------------------------------------------------------------------------
3ced8                 | hinit_usb_timings
3ced8                 | '                getct   htmp2
3ced8     B8 59 02 F6 |                 mov     save_sysclk, htmp
3cedc     8D 5B 80 FF 
3cee0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3cee4     18 30 63 FD |                 getqx   _12Mbps_
3cee8     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3ceec     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3cef0     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3cef4     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3cef8     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3cefc     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3cf00     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3cf04     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3cf08     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3cf0c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3cf10     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3cf14     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3cf18     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3cf1c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3cf20     80 00 00 FF 
3cf24     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3cf28     18 2C 63 FD |                 getqx   _var_64_lower_
3cf2c     19 2E 63 FD |                 getqy   _var_64_upper_
3cf30     28 2C 63 FD |                 setq    _var_64_lower_
3cf34     65 CD 1D FF 
3cf38     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3cf3c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3cf40     01 00 00 FF 
3cf44     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3cf48     18 2C 63 FD |                 getqx   _var_64_lower_
3cf4c     19 2E 63 FD |                 getqy   _var_64_upper_
3cf50     28 2C 63 FD |                 setq    _var_64_lower_
3cf54     A1 07 00 FF 
3cf58     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3cf5c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3cf60     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3cf64     09 36 57 F0 |                 shr     _1us_, #9               wc
3cf68     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3cf6c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3cf70     18 38 63 FD |                 getqx   _10us_
3cf74     09 38 57 F0 |                 shr     _10us_, #9              wc
3cf78     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3cf7c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3cf80     18 3A 63 FD |                 getqx   _33us_
3cf84     09 3A 57 F0 |                 shr     _33us_, #9              wc
3cf88     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3cf8c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3cf90     18 3C 63 FD |                 getqx   _txn_err_
3cf94     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3cf98     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3cf9c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3cfa0     18 3E 63 FD |                 getqx   _500us_
3cfa4     09 3E 57 F0 |                 shr     _500us_, #9             wc
3cfa8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3cfac     01 00 00 FF 
3cfb0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3cfb4     18 40 63 FD |                 getqx   _txn_ok_ls_
3cfb8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3cfbc     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3cfc0     01 00 00 FF 
3cfc4     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3cfc8     18 42 63 FD |                 getqx   _txn_ok_fs_
3cfcc     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3cfd0     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3cfd4     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3cfd8     05 00 00 FF 
3cfdc     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3cfe0     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3cfe4     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3cfe8     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3cfec     1C 00 00 FF 
3cff0     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3cff4     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3cff8     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3cffc     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3d000     00 00 00 FF 
3d004     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3d008     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3d00c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3d010     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3d014     04 00 00 FF 
3d018     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3d01c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3d020     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3d024     8D 5B 00 FF 
3d028     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3d02c     18 4C 63 FD |                 getqx   _preamble_wait_
3d030     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3d034     01 00 00 FF 
3d038     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3d03c     18 2C 63 FD |                 getqx   _var_64_lower_
3d040     19 2E 63 FD |                 getqy   _var_64_upper_
3d044     28 2C 63 FD |                 setq    _var_64_lower_
3d048     01 00 00 FF 
3d04c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3d050     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3d054     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3d058     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3d05c     FF FF 7F FF 
3d060     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3d064     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3d068     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3d06c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3d070     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3d074     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3d078     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3d07c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3d080     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3d084     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3d088     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3d08c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3d090     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3d094     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3d098     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3d09c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3d0a0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3d0a4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3d0a8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3d0ac     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3d0b0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3d0b4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3d0b8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3d0bc     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3d0c0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3d0c4     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3d0c8     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3d0cc                 | '        _ret_   mov     _1sec_, save_sysclk
3d0cc                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3d0cc                 | '                ret
3d0cc                 | {
3d0cc                 | }
3d0cc                 | 
3d0cc                 | '------------------------------------------------------------------------------
3d0cc                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3d0cc                 | ' one. If it is, start the task progression that will configure the device for
3d0cc                 | ' use.
3d0cc                 | '------------------------------------------------------------------------------
3d0cc                 | ' On entry:
3d0cc                 | '   hconfig_base - start address of the cached config descriptor chain.
3d0cc                 | ' On exit:
3d0cc                 | '------------------------------------------------------------------------------
3d0cc                 | hparse_con_desc
3d0cc     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3d0d0     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3d0d4     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3d0d8     4E 70 FF F9 |                 movbyts htmp,#%%1032
3d0dc     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3d0e0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3d0e0                 | 
3d0e0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3d0e4     6E ED 03 F1 |                 add     pa, hconfig_base
3d0e8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3d0ec                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3d0ec                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3d0ec                 | ' that defines a keyboard and/or mouse.
3d0ec     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3d0f0                 | .next_intf
3d0f0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3d0f4     BC 01 90 3D |         if_ae   jmp     #hset_config
3d0f8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3d0fc     75 F3 03 F1 |                 add     ptrb, hnext_desc
3d100     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3d104     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3d108     0C 00 90 AD |         if_z    jmp     #.intf
3d10c     80 71 C7 FA |                 rdbyte  htmp, ptrb
3d110     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3d114     D8 FF 9F FD |                 jmp     #.next_intf
3d118                 | .intf
3d118     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3d11c     00 90 07 F6 |                 mov     hpar3, #0
3d120     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3d124     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3d128     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3d12c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3d130                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3d130                 | 
3d130                 | .endp
3d130     80 71 C7 FA |                 rdbyte  htmp, ptrb
3d134     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3d138     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3d13c     78 00 90 3D |         if_ae   jmp     #.get_device
3d140     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3d144     75 F3 03 F1 |                 add     ptrb, hnext_desc
3d148     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3d14c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3d150     64 00 90 AD |         if_z    jmp     #.get_device
3d154     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3d158     04 00 90 AD |         if_z    jmp     #.get_ep
3d15c     D0 FF 9F FD |                 jmp     #.endp
3d160                 | .get_ep
3d160     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3d164     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3d168     0F 86 67 F0 |                 shl     hr1, #8 + 7
3d16c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3d170     3F 00 00 FF 
3d174     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3d178     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3d17c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3d180     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3d184     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d188     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3d18c     A0 FF 9F FD |                 jmp     #.endp
3d190                 | .in_ep
3d190     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3d194     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3d198                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3d198     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3d19c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3d1a0     8C FF 9F FD |                 jmp     #.endp
3d1a4                 | .out_ep
3d1a4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3d1a8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3d1ac                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3d1ac     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3d1b0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3d1b4     78 FF 9F FD |                 jmp     #.endp
3d1b8                 | 
3d1b8                 | .get_device
3d1b8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3d1bc     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3d1c0     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3d1c4     68 00 90 AD |         if_z    jmp     #.gamepad
3d1c8     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3d1cc     AC 00 90 AD |         if_z    jmp     #.hub
3d1d0     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3d1d4     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3d1d8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3d1dc     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3d1e0     4C 00 90 AD |         if_z    jmp     #.gamepad
3d1e4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3d1e8     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3d1ec                 | .keyboard
3d1ec     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3d1f0                 |         if HAVE_MOUSE
3d1f0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3d1f4                 |         else
3d1f4                 |         end
3d1f4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3d1f8     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3d1fc     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3d200     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3d204     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3d208     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3d20c                 |                 'debug(udec(kb_intf_num))
3d20c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3d20c     E0 FE 9F FD |                 jmp     #.next_intf
3d210                 | if HAVE_MOUSE
3d210                 | .mouse
3d210     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3d214     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3d218     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3d21c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3d220     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3d224                 |                 'getbyte ms_interval, hr2, #3
3d224     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3d228     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3d22c                 |                 'debug(udec(kb_intf_num))
3d22c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3d22c     C0 FE 9F FD |                 jmp     #.next_intf
3d230                 | end
3d230                 | .gamepad
3d230     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3d234     C7 71 63 F5 |                 xor     htmp, hpar2
3d238     3F 00 00 FF 
3d23c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d240     AC FE 9F AD |         if_z    jmp     #.next_intf
3d244                 |         if HAVE_MOUSE
3d244     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3d248     C7 71 63 F5 |                 xor     htmp, hpar2
3d24c     3F 00 00 FF 
3d250     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d254     98 FE 9F AD |         if_z    jmp     #.next_intf
3d258                 |         end
3d258     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3d25c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3d260     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3d264                 | 
3d264     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3d268     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3d26c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d270     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3d274     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3d278                 |                 'debug(udec(gp_intf_num))
3d278                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3d278     74 FE 9F FD |                 jmp     #.next_intf
3d27c                 | .hub
3d27c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3d280     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3d284     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3d288     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3d28c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3d290     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3d294     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3d298     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3d29c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3d2a0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3d2a4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d2a8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3d2ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3d2b0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3d2b0     3C FE 9F FD |                 jmp     #.next_intf
3d2b4                 | 
3d2b4                 | '------------------------------------------------------------------------------
3d2b4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3d2b4                 | ' it according to its function, or functions. In the case of this boot protocol
3d2b4                 | ' keyboard/mouse class driver:
3d2b4                 | ' - SetConfiguration(config_num)
3d2b4                 | ' - SetProtocol(boot)
3d2b4                 | ' - SetIdle(indefinite)
3d2b4                 | ' - Enter the device interrupt IN polling task stage.
3d2b4                 | '------------------------------------------------------------------------------
3d2b4                 | ' On entry:
3d2b4                 | ' On exit:
3d2b4                 | '------------------------------------------------------------------------------
3d2b4                 | hset_config
3d2b4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3d2b4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3d2b4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3d2b8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d2bc     00 00 0C F2 |                 cmp     0-0, #0                 wz
3d2c0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3d2c4                 |         if HAVE_MOUSE
3d2c4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3d2c8                 |         end
3d2c8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3d2cc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3d2d0                 | .set_config
3d2d0     6C 0E D0 FE |                 loc     ptra, #set_config
3d2d4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3d2d8     6E ED 03 F1 |                 add     pa, hconfig_base
3d2dc     F6 8D C3 FA |                 rdbyte  hpar1, pa
3d2e0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3d2e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3d2e8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3d2ec     A0 02 A0 FD |                 call    #control_write
3d2f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d2f4     2D 00 64 5D |         if_nz   ret
3d2f8                 | .kbd_config
3d2f8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3d2fc     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3d300                 | 
3d300     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3d304     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d308     3F 00 00 FF 
3d30c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d310     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3d314                 | 
3d314     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3d318     34 0E D0 FE |                 loc     ptra, #set_protocol
3d31c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3d320     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d324     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3d328     A0 02 A0 FD |                 call    #control_write
3d32c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d330     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3d334     E4 02 90 5D |         if_nz   jmp     #.notify_client
3d338     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3d33c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3d340     30 03 B0 FD |                 call    #hset_idle
3d344                 |                 'cmp     retval, #PID_ACK        wz
3d344                 |         'if_nz   mov     hkbd_ep_addr, #0
3d344                 |         'if_nz   jmp     #.notify_client
3d344     A8 99 02 F6 |                 mov     hctwait, _2ms_
3d348     EF 02 A0 FD |                 call    #poll_waitx
3d34c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3d350     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3d354     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3d358     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3d35c     2C 03 B0 FD |                 call    #hset_kbdled_report
3d360     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d364     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3d368     B0 02 90 5D |         if_nz   jmp     #.notify_client
3d36c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3d370     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d374     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d378     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3d37c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3d380     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3d384     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3d388     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3d38c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3d390     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3d394     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3d398                 |         if !!HAVE_MOUSE
3d398                 |         end
3d398                 | 
3d398                 | .mouse_config
3d398                 | if HAVE_MOUSE
3d398     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3d39c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3d3a0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3d3a4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d3a8     3F 00 00 FF 
3d3ac     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d3b0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3d3b4                 | 
3d3b4                 |                 debug("mouse passed addr check")
3d3b4                 | 
3d3b4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3d3b8     00 00 80 FF 
3d3bc     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3d3c0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3d3c4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d3c8     55 02 A0 FD |                 call    #control_read
3d3cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3d0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3d3d4     44 02 90 5D |         if_nz   jmp     #.notify_client
3d3d8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3d3dc     56 01 00 F6 |                 mov     0-0, total_data
3d3e0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d3e4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3d3e4                 | 
3d3e4     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3d3e8     64 0D D0 FE |                 loc     ptra, #set_protocol
3d3ec     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3d3f0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d3f4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3d3f8     A0 02 A0 FD |                 call    #control_write
3d3fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d400     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3d404     14 02 90 5D |         if_nz   jmp     #.notify_client
3d408                 |                 debug("mouse passed SetProtocol")
3d408     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3d40c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3d410     60 02 B0 FD |                 call    #hset_idle
3d414                 |                 'cmp     retval, #PID_ACK        wz
3d414                 |         'if_nz   mov     hmouse_ep_addr, #0
3d414                 |         'if_nz   jmp     #.notify_client
3d414                 |                 debug("mouse passed SetIdle")
3d414     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3d418     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d41c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d420     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3d424     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3d428     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3d42c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3d430     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3d434     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3d438     3F 00 00 FF 
3d43c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3d440     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3d444     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3d448     D0 01 90 FD |                 jmp     #.notify_client
3d44c                 | end
3d44c                 | .gamepad_config
3d44c                 | if _HAVE_GAMEPAD
3d44c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d450     00 00 0C F2 |                 cmp     0-0, #0                 wz
3d454     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3d458     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3d45c     00 70 03 F6 |                 mov     htmp, 0-0
3d460     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d464     3F 00 00 FF 
3d468     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d46c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3d470                 | 
3d470     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3d474     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3d478     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d47c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d480     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3d484     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d488     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3d48c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3d490     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3d494     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d498     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d49c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3d4a0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3d4a4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3d4a8                 | 
3d4a8                 |                 if EMUPAD_MAX_PLAYER > 0
3d4a8                 |                 
3d4a8                 | .rule_loop           
3d4a8                 |                 end
3d4a8                 | 
3d4a8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3d4ac     5C 00 90 AD |         if_e    jmp     #.xinput
3d4b0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d4b4     00 70 03 F6 |                 mov     htmp,0-0
3d4b8     01 A6 02 FF 
3d4bc     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3d4c0     7C 00 90 AD |         if_e    jmp     #.ps3
3d4c4                 | 
3d4c4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3d4c8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3d4cc     00 00 80 5F 
3d4d0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3d4d4     03 00 80 AF 
3d4d8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3d4dc     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3d4e0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d4e4     55 02 A0 FD |                 call    #control_read
3d4e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d4ec     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3d4f0     00 00 04 56 |         if_nz   mov     0-0, #0
3d4f4     24 01 90 5D |         if_nz   jmp     #.notify_client
3d4f8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3d4fc     56 01 00 F6 |                 mov     0-0, total_data
3d500     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d504                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3d504                 | 
3d504     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3d508     10 01 90 FD |                 jmp     #.notify_client
3d50c                 | .xinput
3d50c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3d510     2D EF 03 F6 |                 mov     pb,hdev_port
3d514     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3d518     03 EE 27 F3 |                 fle     pb,#3
3d51c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3d520     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3d524                 | 
3d524     03 B0 06 F6 |                 mov     pkt_data, #3
3d528     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3d52c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3d530     5A 00 A0 FD |                 call    #txn_out
3d534     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3d538                 | 
3d538     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3d53c     DC 00 90 FD |                 jmp     #.notify_client
3d540                 | .ps3
3d540     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3d544     2D EF 03 F6 |                 mov     pb,hdev_port
3d548     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3d54c     04 EE 27 F3 |                 fle     pb,#4
3d550     F7 EF C3 F9 |                 decod   pb
3d554     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3d558                 | 
3d558     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3d55c     00 0C D0 FE |                 loc     ptra, #set_report
3d560     01 00 80 FF 
3d564     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3d568     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d56c     03 61 5C FC |                 wrword  #48, ptra[wLength]
3d570     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3d574     A0 02 A0 FD |                 call    #control_write
3d578                 | 
3d578     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3d57c     E0 0B D0 FE |                 loc     ptra, #set_report
3d580     01 00 80 FF 
3d584     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3d588     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d58c     03 09 5C FC |                 wrword  #4, ptra[wLength]
3d590     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3d594     A0 02 A0 FD |                 call    #control_write
3d598     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3d59c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3d5a0     00 00 04 56 |         if_nz   mov     0-0, #0
3d5a4     74 00 90 5D |         if_nz   jmp     #.notify_client
3d5a8                 | 
3d5a8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3d5ac     6C 00 90 FD |                 jmp     #.notify_client
3d5b0                 | end
3d5b0                 | 
3d5b0                 | .hub_config
3d5b0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3d5b4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3d5b8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3d5bc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d5c0     3F 00 00 FF 
3d5c4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d5c8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3d5cc                 | 
3d5cc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3d5d0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3d5d4     26 EF 03 F6 |                 mov     pb, hub_descr_p
3d5d8     55 02 A0 FD |                 call    #control_read
3d5dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d5e0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3d5e4     34 00 90 5D |         if_nz   jmp     #.notify_client
3d5e8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3d5e8                 | 
3d5e8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3d5ec     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3d5f0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3d5f4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3d5f4                 | .pwr_loop
3d5f4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3d5f8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3d5fc     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3d600     A0 02 A0 FD |                 call    #control_write
3d604     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3d608                 | 
3d608     B1 99 02 F6 |                 mov     hctwait, _500ms_
3d60c     B0 99 02 F1 |                 add     hctwait, _100ms_
3d610     EF 02 A0 FD |                 call    #poll_waitx
3d614                 | 
3d614     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3d618     00 00 90 FD |                 jmp     #.notify_client
3d61c                 | 
3d61c                 | .notify_client
3d61c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d620     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3d624                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3d624                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3d624     2D 00 64 FD |                 ret
3d628                 | 
3d628                 | '------------------------------------------------------------------------------
3d628                 | ' Initialize the keyboard/mouse data area to start-up values.
3d628                 | '------------------------------------------------------------------------------
3d628                 | ' On entry:
3d628                 | ' On exit:
3d628                 | '------------------------------------------------------------------------------
3d628                 | init_kbdm_data
3d628     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3d62c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3d630                 | 
3d630     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3d634     2B ED 03 F6 |                 mov     pa, cache_end_p
3d638                 | .loop
3d638     61 01 4C FC |                 wrbyte  #0, ptra++
3d63c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3d640     F4 FF 9F CD |         if_b    jmp     #.loop
3d644                 |         
3d644                 |         if EMUPAD_MAX_PLAYER > 0
3d644                 |         end
3d644                 | 
3d644                 | 
3d644     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3d648                 | .regloop
3d648     00 EC 8F F9 |                 altd    pa
3d64c     00 00 04 F6 |                 mov     0-0, #0
3d650     01 EC 07 F1 |                 add     pa, #1
3d654     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3d658     EC FF 9F 5D |         if_nz   jmp     #.regloop
3d65c                 | 
3d65c     E1 E1 61 FF 
3d660     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3d664     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3d668     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3d66c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3d670                 | 
3d670     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3d674                 | 
3d674                 | '------------------------------------------------------------------------------
3d674                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3d674                 | ' function.
3d674                 | '------------------------------------------------------------------------------
3d674                 | ' On entry:
3d674                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3d674                 | '   hpar2 - index number of the target interface.
3d674                 | ' On exit:
3d674                 | '------------------------------------------------------------------------------
3d674                 | hset_idle
3d674     A8 99 02 F6 |                 mov     hctwait, _2ms_
3d678     EF 02 A0 FD |                 call    #poll_waitx
3d67c     D8 0A D0 FE |                 loc     ptra, #set_idle
3d680     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3d684     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3d688     A0 02 80 FD |                 jmp     #control_write
3d68c                 | 
3d68c                 | '------------------------------------------------------------------------------
3d68c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3d68c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3d68c                 | '------------------------------------------------------------------------------
3d68c                 | ' On entry:
3d68c                 | '   ep_addr_pid - device address and enpoint for the request.
3d68c                 | ' On exit:
3d68c                 | '   retval - transaction result.
3d68c                 | '------------------------------------------------------------------------------
3d68c                 | hset_kbdled_report
3d68c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3d690     CC 0A D0 FE |                 loc     ptra, #set_report
3d694     01 00 80 FF 
3d698     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3d69c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d6a0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3d6a4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d6a8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3d6ac     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3d6b0                 | 
3d6b0                 | '------------------------------------------------------------------------------
3d6b0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3d6b0                 | '------------------------------------------------------------------------------
3d6b0                 | ' On entry:
3d6b0                 | ' On exit:
3d6b0                 | '------------------------------------------------------------------------------
3d6b0                 | hget_kbd_in_report
3d6b0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3d6b4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3d6b8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3d6bc     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3d6c0     CF 02 A0 FD |                 call    #do_int_in
3d6c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d6c8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d6cc                 | 
3d6cc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d6d0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d6d4                 | 
3d6d4     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3d6d8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d6dc     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3d6e0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3d6e4                 | 
3d6e4     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3d6e8     18 00 B0 FD |                 call    #hkbd_compare
3d6ec                 |         if EMUPAD_MAX_PLAYER > 0
3d6ec                 |         end
3d6ec                 | 
3d6ec                 | .led_check
3d6ec     3B 71 03 F6 |                 mov     htmp, kb_led_states
3d6f0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3d6f4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3d6f8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3d6fc     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3d700     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3d704                 | 
3d704                 | '------------------------------------------------------------------------------
3d704                 | ' Compare current and previous keyboard data buffers for keypress changes.
3d704                 | '------------------------------------------------------------------------------
3d704                 | hkbd_compare
3d704     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3d708     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3d70c     61 73 07 FB |                 rdlong  htmp1, ptra++
3d710     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3d714     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3d718     61 73 07 FB |                 rdlong  htmp1, ptra++
3d71c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3d720     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3d724     2D 00 64 AD |         if_z    ret
3d728                 | 
3d728     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3d72c                 | 
3d72c                 |                 ' Handle modifiers
3d72c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3d730     00 87 C7 FA |                 rdbyte  hr1, ptra
3d734     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3d738     63 86 63 FD |                 mergew  hr1
3d73c     08 EC 07 F6 |                 mov     pa,#8
3d740                 | .modloop
3d740     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3d744     E8 8C 07 F6 |                 mov     hpar1,#$E8
3d748     F6 8D 83 F1 |                 sub     hpar1,pa
3d74c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3d750     FB ED 6F FB |                 djnz    pa,#.modloop
3d754                 | 
3d754     6F E0 75 FD | .release        modc    _set    wc
3d758                 |                 'alts    hdev_port, #hid_report_p
3d758                 |                 'mov     ptra, hid_report_p
3d758     02 F0 07 F1 |                 add     ptra, #2
3d75c     06 EC 07 F6 |                 mov     pa, #6
3d760     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3d764     20 00 90 AD |         if_z    jmp     #.rl3
3d768     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3d76c     02 F2 07 F1 |                 add     ptrb, #2
3d770     06 EE 07 F6 |                 mov     pb, #6
3d774     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3d778     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3d77c     08 00 90 AD |         if_z    jmp     #.rl3
3d780     FC EF 6F FB |                 djnz    pb, #.rl2
3d784     68 00 B0 FD |                 call    #hkbd_translate
3d788     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3d78c                 | 
3d78c     00 90 07 F6 |                 mov     hpar3, #0
3d790     1F 90 27 F4 |                 bith    hpar3, #31
3d794                 | 
3d794     6F 00 74 FD | .press          modc    _clr    wc
3d798     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3d79c     02 F0 07 F1 |                 add     ptra, #2
3d7a0     06 EC 07 F6 |                 mov     pa, #6
3d7a4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3d7a8     20 00 90 AD |         if_z    jmp     #.pl3
3d7ac     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3d7b0     02 F2 07 F1 |                 add     ptrb, #2
3d7b4     06 EE 07 F6 |                 mov     pb, #6
3d7b8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3d7bc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3d7c0     08 00 90 AD |         if_z    jmp     #.pl3
3d7c4     FC EF 6F FB |                 djnz    pb, #.pl2
3d7c8     24 00 B0 FD |                 call    #hkbd_translate
3d7cc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3d7d0                 | 
3d7d0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3d7d4     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3d7d8     28 02 64 FD |                 setq #1
3d7dc     61 73 07 FB |                 rdlong  htmp1, ptra++
3d7e0     28 02 64 FD |                 setq #1
3d7e4     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3d7e8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3d7ec                 | 
3d7ec     2D 00 64 FD |                 ret
3d7f0                 | 
3d7f0                 | '------------------------------------------------------------------------------
3d7f0                 | ' Translate keyboard scancode to ASCII
3d7f0                 | '------------------------------------------------------------------------------
3d7f0                 | ' On entry:
3d7f0                 | '   hpar1 - scancode
3d7f0                 | '   hpar2 - key modifiers state
3d7f0                 | '       c - pressed (0) or released (1) flag
3d7f0                 | ' On exit:
3d7f0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3d7f0                 | '               30..17 = unused
3d7f0                 | '                   18 = scroll-lock state 
3d7f0                 | '                   17 = caps-lock state
3d7f0                 | '                   16 = num-lock state 
3d7f0                 | '                15..8 = key modifiers state
3d7f0                 | '                 7..0 = scancode
3d7f0                 | '------------------------------------------------------------------------------
3d7f0                 | hkbd_translate
3d7f0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3d7f4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3d7f8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3d7fc     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3d800     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3d804     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3d808                 | 
3d808                 |         if EMUPAD_MAX_PLAYER > 0
3d808                 | 
3d808                 |         if EMUPAD_BT0_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT1_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT2_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT3_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT4_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT5_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT6_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT7_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT8_BIT >= 0
3d808                 |         end
3d808                 |         if EMUPAD_BT9_BIT >= 0
3d808                 |         end
3d808                 | 
3d808                 |         end
3d808     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3d80c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3d810     1F 8C 47 F4 |                 bitc    hpar1, #31
3d814                 |         if KEYQUEUE_SIZE > 0
3d814     C4 09 B0 FE |                 loc pb,#keyq_head
3d818     F7 71 E3 FA |                 rdword htmp,pb
3d81c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3d820     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3d824     B8 75 03 F6 |                 mov htmp2,htmp
3d828     04 74 07 FA |                 mul htmp2,#4
3d82c     F7 75 03 F1 |                 add htmp2,pb
3d830     02 74 07 F1 |                 add htmp2,#2
3d834     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3d838     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3d83c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3d840     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3d844                 |         end
3d844     2D 00 7C FD |                 ret wcz
3d848                 | 
3d848                 | if HAVE_MOUSE
3d848                 | '------------------------------------------------------------------------------
3d848                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3d848                 | '------------------------------------------------------------------------------
3d848                 | ' On entry:
3d848                 | ' On exit:
3d848                 | '------------------------------------------------------------------------------
3d848                 | hget_mouse_in_report
3d848     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3d84c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3d850     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3d854     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3d858     CF 02 A0 FD |                 call    #do_int_in
3d85c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d860     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d864                 | 
3d864     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d868     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d86c                 | 
3d86c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3d870     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d874     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3d878     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3d87c                 | 
3d87c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3d880     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3d884     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3d888     01 90 87 31 |         if_ae   sub     hpar3, #1
3d88c                 | 
3d88c     40 09 90 FE |                 loc     pa, #mouse_limits
3d890     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3d894                 | 
3d894                 |                 ' load xacc,yacc,zacc
3d894     28 04 64 FD |                 setq    #3-1
3d898     80 87 07 FB |                 rdlong  hr1,ptrb
3d89c                 |                 ' load limits and outptr
3d89c     28 04 64 FD |                 setq    #3-1
3d8a0     F6 73 03 FB |                 rdlong  htmp1,pa
3d8a4                 | 
3d8a4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3d8a8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3d8ac     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3d8b0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3d8b4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3d8b8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3d8bc     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3d8c0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3d8c4                 |               
3d8c4                 | 
3d8c4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3d8c8     07 70 67 F7 |                 signx   htmp, #7
3d8cc     B8 87 03 F1 |                 add     hr1,htmp
3d8d0     00 72 0F F2 |                 cmp     htmp1,#0 wz
3d8d4     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3d8d8     00 86 47 53 |         if_ne   fges    hr1,#0
3d8dc                 | 
3d8dc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3d8e0     07 70 67 F7 |                 signx   htmp, #7
3d8e4     B8 89 03 F1 |                 add     hr2,htmp
3d8e8     00 74 0F F2 |                 cmp     htmp2,#0 wz
3d8ec     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3d8f0     00 88 47 53 |         if_ne   fges    hr2,#0
3d8f4                 |                 
3d8f4                 | 
3d8f4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3d8f8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3d8fc     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3d900     B8 8B 03 A1 |         if_z    add     hr3,htmp
3d904                 | 
3d904     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3d908     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3d90c                 | 
3d90c                 |                 ' write back accumulators
3d90c     28 04 64 FD |                 setq    #3-1
3d910     80 87 67 FC |                 wrlong  hr1,ptrb
3d914                 |                 ' if outptr set, write X/Y words
3d914     00 76 0F F2 |                 cmp htmp3,#0                    wz
3d918     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3d91c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3d920     2D 00 64 FD |                 ret
3d924                 | end
3d924                 | 
3d924                 | '------------------------------------------------------------------------------
3d924                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d924                 | '------------------------------------------------------------------------------
3d924                 | ' On entry:
3d924                 | ' On exit:
3d924                 | '------------------------------------------------------------------------------
3d924                 | if _HAVE_GAMEPAD
3d924                 | hget_gp_in_report
3d924     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3d928     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3d92c                 | 
3d92c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3d930     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3d934     00 90 E3 F8 |                 getbyte hpar3
3d938     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3d93c     CF 02 A0 FD |                 call    #do_int_in
3d940     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d944     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d948                 | 
3d948     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d94c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d950                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3d950                 | 
3d950     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3d954     00 70 E3 F8 |                 getbyte htmp                            ' |
3d958     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d95c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3d960     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3d964     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3d968     B8 01 C0 F8 |                 setbyte htmp                            ' |
3d96c                 | 
3d96c                 | ' Note: the following code compares the current and previous reports
3d96c                 | ' and process the data if there are changes to ease the debug output.
3d96c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3d96c                 | ' gpPreReport buffer.
3d96c                 | 
3d96c                 |                 ' ----- start of block to remove
3d96c                 |                 {
3d96c                 |                 }
3d96c                 |                 ' ----- end of block to remove
3d96c     F4 04 90 FE |                 loc pa,#hpad_translate
3d970     2A EC 63 FD |                 push pa
3d974                 | 
3d974                 |                 ' FALL THROUGH !!!!
3d974                 | 
3d974                 | '------------------------------------------------------------------------------
3d974                 | ' Decode controller report
3d974                 | '------------------------------------------------------------------------------
3d974                 | hid_decode
3d974                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3d974     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3d978     00 04 00 FF 
3d97c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3d980                 | 
3d980     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3d984                 | 
3d984     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d988     00 2A E3 F8 |                 getbyte hidr_type
3d98c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3d990     34 02 90 AD |         if_z    jmp     #hpad_xinput
3d994     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3d998     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3d99c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3d9a0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3d9a4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3d9a8                 |                 
3d9a8                 | 
3d9a8                 | '------------------------------------------------------------------------------
3d9a8                 | ' Handle HID controller (or mouse now
3d9a8                 | ' On entry:
3d9a8                 | '   ptrb - controller report
3d9a8                 | '------------------------------------------------------------------------------
3d9a8                 | hpad_hid
3d9a8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d9ac     F7 F1 03 F6 |                 mov     ptra, pb
3d9b0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3d9b4     00 EC 03 F6 |                 mov     pa, 0-0
3d9b8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3d9b8     19 2A 3B FF 
3d9bc     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3d9c0                 | 
3d9c0                 | .next
3d9c0     00 EC 5F F2 |                 cmps    pa, #0      wcz
3d9c4     2D 00 7C ED |         if_be   ret     wcz
3d9c8                 | 
3d9c8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3d9cc     01 EC 87 F1 |                 sub     pa, #1
3d9d0     00 8E 07 F6 |                 mov     hpar2, #0
3d9d4                 | 
3d9d4     C6 71 03 F6 |                 mov     htmp, hpar1
3d9d8     03 70 07 F5 |                 and     htmp, #$03
3d9dc     01 70 0F F2 |                 cmp     htmp, #1    wz
3d9e0     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3d9e4     07 8E 67 A7 |         if_z    signx   hpar2,#7
3d9e8     01 EC 87 A1 |         if_z    sub     pa, #1
3d9ec     02 70 0F F2 |                 cmp     htmp, #2    wz
3d9f0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3d9f4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3d9f8     02 EC 87 A1 |         if_z    sub     pa, #2
3d9fc     03 70 0F F2 |                 cmp     htmp, #3    wz
3da00     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3da04     04 EC 87 A1 |         if_z    sub     pa, #4
3da08                 | 
3da08     FC 8C 07 F5 |                 and     hpar1, #$FC
3da0c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3da0c                 | 
3da0c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3da10     0C 01 90 AD |         if_z    jmp     #.report_id
3da14     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3da18     24 01 90 AD |         if_z    jmp     #.usage_page
3da1c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3da20     2C 01 90 AD |         if_z    jmp     #.usage
3da24     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3da28     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3da2c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3da30     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3da34     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3da38     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3da3c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3da40     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3da44     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3da48     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3da4c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3da50     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3da54     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3da58     64 FF 9F 5D |         if_nz   jmp     #.next
3da5c                 | 
3da5c     D8 1D A7 FB |                 tjf     hidr_state,#.next
3da60                 | 
3da60     03 8E 07 F5 |                 and     hpar2, #$03
3da64     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3da68     18 00 90 5D |         if_nz   jmp     #.skip
3da6c                 | 
3da6c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3da70     20 00 90 AD |         if_z    jmp     #.axes
3da74     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3da78     5C 00 90 AD |         if_z    jmp     #.hats
3da7c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3da80     70 00 90 AD |         if_z    jmp     #.buttons
3da84                 | .skip
3da84     8F 71 03 F6 |                 mov     htmp, hidr_size
3da88     90 71 03 FA |                 mul     htmp, hidr_count
3da8c     B8 23 03 F1 |                 add     hidr_offset, htmp
3da90     2C FF 9F FD |                 jmp     #.next
3da94                 | .axes
3da94                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3da94     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3da98     90 87 03 F6 |                 mov     hr1, hidr_count
3da9c                 | .l1
3da9c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3daa0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3daa4     04 03 B0 FD |                 call    #hpad_getbits
3daa8     64 03 B0 FD |                 call    #hpad_normalize
3daac     06 84 1F F2 |                 cmp     hr0, #6         wcz
3dab0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3dab4     00 88 43 C8 |         if_b    getnib  hr2
3dab8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3dabc     5F 01 20 C9 |         if_b    setword retval
3dac0     01 84 07 C1 |         if_b    add     hr0, #1
3dac4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3dac8     F4 87 6F FB |                 djnz    hr1, #.l1
3dacc                 | 
3dacc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3dad0     01 1C 07 F6 |                 mov     hidr_state, #1
3dad4     E8 FE 9F FD |                 jmp     #.next
3dad8                 | .hats
3dad8                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3dad8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3dadc     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3dae0     C8 02 B0 FD |                 call    #hpad_getbits
3dae4     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3dae8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3daec     01 1C 07 F6 |                 mov     hidr_state, #1
3daf0     90 FF 9F FD |                 jmp     #.skip
3daf4                 | .buttons
3daf4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3daf4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3daf8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3dafc     90 8F 03 FA |                 mul     hpar2, hidr_count
3db00     A8 02 B0 FD |                 call    #hpad_getbits
3db04     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3db08     B8 BF 62 F0 |                 shl     retval, htmp
3db0c     5F 17 43 F5 |                 or      hidr_buttons, retval
3db10     90 71 03 F1 |                 add     htmp, hidr_count
3db14     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3db18     01 1C 07 F6 |                 mov     hidr_state, #1
3db1c     64 FF 9F FD |                 jmp     #.skip
3db20                 | .report_id
3db20     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3db24     2D 00 7C 5D |         if_nz   ret     wcz
3db28     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3db2c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3db30     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3db34     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3db38     01 F2 87 51 |         if_nz   sub     ptrb,#1
3db3c     80 FE 9F FD |                 jmp     #.next
3db40                 | .usage_page
3db40     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3db44     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3db48     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3db4c     70 FE 9F FD |                 jmp     #.next
3db50                 | .usage
3db50     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3db54     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3db58     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3db5c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3db60     5C FE 9F AD |         if_z    jmp     #.next
3db64     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3db68     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3db6c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3db70     4C FE 9F AD |         if_z    jmp     #.next
3db74     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3db78     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3db7c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3db80     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3db84     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3db88     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3db8c     10 00 90 AD |         if_z    jmp     #.usage_axis
3db90     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3db94     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3db98     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3db9c     20 FE 9F FD |                 jmp     #.next
3dba0                 | .usage_axis
3dba0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3dba4     18 FE 9F CD |         if_b    jmp     #.next
3dba8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3dbac     C7 01 00 F8 |                 setnib  hpar2
3dbb0                 | 
3dbb0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3dbb4     C7 8F C3 F9 |                 decod   hpar2
3dbb8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3dbbc                 | 
3dbbc     01 24 07 F1 |                 add     hidr_usage_idx, #1
3dbc0     02 1C 07 F6 |                 mov     hidr_state, #2
3dbc4     F8 FD 9F FD |                 jmp     #.next
3dbc8                 | 
3dbc8                 | '------------------------------------------------------------------------------
3dbc8                 | ' Handle XInput controller
3dbc8                 | ' On entry:
3dbc8                 | '   ptrb - controller report
3dbc8                 | '------------------------------------------------------------------------------
3dbc8                 | '   Default implementation translates the report to a pseudo-defacto hid
3dbc8                 | '   standard and jumps to hpad_translate for actions.
3dbc8                 | '   Implementors may take specific actions for this kind of controller.
3dbc8                 | '------------------------------------------------------------------------------
3dbc8                 | hpad_xinput
3dbc8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3dbcc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3dbd0     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3dbd4     14 70 0F F2 |                 cmp     htmp, #$14      wz
3dbd8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3dbdc                 | 
3dbdc                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3dbdc                 | 
3dbdc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3dbe0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3dbe4                 | 
3dbe4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3dbe8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3dbec     5F BF 22 F6 |                 not     retval
3dbf0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3dbf4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3dbf8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3dbfc     5F BF 22 F6 |                 not     retval
3dc00     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3dc04                 | 
3dc04     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3dc08     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3dc0c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3dc10     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3dc14     F8 01 B0 FD |                 call    #hpad_normalize
3dc18     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3dc1c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3dc20     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3dc24     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3dc28     E4 01 B0 FD |                 call    #hpad_normalize
3dc2c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3dc30                 | 
3dc30     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3dc34     81 BF E6 FA |                 rdword  retval, ptrb[1]
3dc38     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3dc3c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3dc40     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3dc44     01 16 47 F4 |                 bitc    hidr_buttons, #1
3dc48     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3dc4c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3dc50     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3dc54     03 16 47 F4 |                 bitc    hidr_buttons, #3
3dc58     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3dc5c     04 16 47 F4 |                 bitc    hidr_buttons, #4
3dc60     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3dc64     05 16 47 F4 |                 bitc    hidr_buttons, #5
3dc68     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3dc6c     08 16 47 F4 |                 bitc    hidr_buttons, #8
3dc70     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3dc74     09 16 47 F4 |                 bitc    hidr_buttons, #9
3dc78     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3dc7c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3dc80     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3dc84     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3dc88     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3dc8c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3dc90                 | 
3dc90     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3dc94     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3dc98     7A BB 7A FF 
3dc9c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3dca0     F9 FF 7F FF 
3dca4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3dca8     B9 71 5F F9 |                 altgn   htmp, #htmp1
3dcac     00 70 43 F8 |                 getnib  htmp
3dcb0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3dcb4                 | 
3dcb4     AC 01 90 FD |                 jmp     #hpad_translate
3dcb8                 | 
3dcb8                 | '------------------------------------------------------------------------------
3dcb8                 | ' Handle PS3 controller
3dcb8                 | ' On entry:
3dcb8                 | '   ptrb - controller report
3dcb8                 | '------------------------------------------------------------------------------
3dcb8                 | '   Default implementation translates the report to a pseudo-defacto hid
3dcb8                 | '   standard and jumps to hpad_translate for actions.
3dcb8                 | '   Implementors may take specific actions for this kind of controller.
3dcb8                 | '------------------------------------------------------------------------------
3dcb8                 | hpad_ps3
3dcb8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3dcbc     01 70 0F F2 |                 cmp     htmp, #$01      wz
3dcc0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3dcc4                 | 
3dcc4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3dcc4                 | 
3dcc4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3dcc8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3dccc     40 01 B0 FD |                 call    #hpad_normalize
3dcd0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3dcd4     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3dcd8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3dcdc     30 01 B0 FD |                 call    #hpad_normalize
3dce0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3dce4     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3dce8     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3dcec     20 01 B0 FD |                 call    #hpad_normalize
3dcf0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3dcf4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3dcf8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3dcfc     10 01 B0 FD |                 call    #hpad_normalize
3dd00     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3dd04     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3dd08     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3dd0c                 | 
3dd0c     08 8C 07 F6 |                 mov     hpar1, #8
3dd10     13 8E 07 F6 |                 mov     hpar2, #19
3dd14     94 00 B0 FD |                 call    #hpad_getbits
3dd18                 | 
3dd18     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3dd1c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3dd20     00 16 47 F4 |                 bitc    hidr_buttons, #0
3dd24     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3dd28     01 16 47 F4 |                 bitc    hidr_buttons, #1
3dd2c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3dd30     02 16 47 F4 |                 bitc    hidr_buttons, #2
3dd34     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3dd38     03 16 47 F4 |                 bitc    hidr_buttons, #3
3dd3c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3dd40     04 16 47 F4 |                 bitc    hidr_buttons, #4
3dd44     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3dd48     05 16 47 F4 |                 bitc    hidr_buttons, #5
3dd4c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3dd50     06 16 47 F4 |                 bitc    hidr_buttons, #6
3dd54     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3dd58     07 16 47 F4 |                 bitc    hidr_buttons, #7
3dd5c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3dd60     08 16 47 F4 |                 bitc    hidr_buttons, #8
3dd64     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3dd68     09 16 47 F4 |                 bitc    hidr_buttons, #9
3dd6c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3dd70     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3dd74     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3dd78     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3dd7c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3dd80     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3dd84                 | 
3dd84     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3dd88     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3dd8c     09 FA 79 FF 
3dd90     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3dd94     FF FA 7F FF 
3dd98     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3dd9c     B9 71 5F F9 |                 altgn   htmp, #htmp1
3dda0     00 70 43 F8 |                 getnib  htmp
3dda4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3dda8                 | 
3dda8     B8 00 90 FD |                 jmp     #hpad_translate
3ddac                 | 
3ddac                 | '------------------------------------------------------------------------------
3ddac                 | ' Read bits from report data buffer
3ddac                 | '------------------------------------------------------------------------------
3ddac                 | ' On entry:
3ddac                 | '   PTRB - report buffer
3ddac                 | '   hpar1 - start bit
3ddac                 | '   hpar2 - number of bits
3ddac                 | ' On exit:
3ddac                 | '   retval - bits
3ddac                 | '------------------------------------------------------------------------------
3ddac                 | hpad_getbits
3ddac     C6 71 03 F6 |                 mov     htmp, hpar1
3ddb0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3ddb4     F9 71 03 F1 |                 add     htmp, ptrb
3ddb8     B8 BF 02 FB |                 rdlong  retval, htmp
3ddbc                 | 
3ddbc     C6 73 03 F6 |                 mov     htmp1, hpar1
3ddc0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3ddc4     B9 BF 42 F0 |                 shr     retval, htmp1
3ddc8                 | 
3ddc8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3ddcc     10 00 90 1D |         if_a    jmp     #.l1
3ddd0                 | 
3ddd0     C7 8F C3 F9 |                 decod   hpar2
3ddd4     01 8E 87 F1 |                 sub     hpar2, #1
3ddd8     C7 BF 02 F5 |                 and     retval, hpar2
3dddc     2D 00 64 FD |                 ret
3dde0                 | .l1
3dde0     FF 7F 00 FF 
3dde4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3dde8     03 70 07 F1 |                 add     htmp, #3
3ddec     B8 75 03 FB |                 rdlong  htmp2, htmp
3ddf0     18 8E 87 F1 |                 sub     hpar2, #24
3ddf4     C7 8F C3 F9 |                 decod   hpar2
3ddf8     01 8E 87 F1 |                 sub     hpar2, #1
3ddfc     B9 75 43 F0 |                 shr     htmp2, htmp1
3de00     C7 75 03 F5 |                 and     htmp2, hpar2
3de04     18 74 67 F0 |                 shl     htmp2, #24
3de08     BA BF 42 F5 |                 or      retval, htmp2
3de0c     2D 00 64 FD |                 ret
3de10                 | 
3de10                 | '------------------------------------------------------------------------------
3de10                 | ' Normalize value to signed word (-32768 / 32767)
3de10                 | '------------------------------------------------------------------------------
3de10                 | ' On entry:
3de10                 | '   retval - value to normalize
3de10                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3de10                 | '   - or -
3de10                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3de10                 | '   hidr_size - value bits length
3de10                 | ' On exit:
3de10                 | '   retval - normalized value
3de10                 | '------------------------------------------------------------------------------
3de10                 | hpad_normalize
3de10     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3de14     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3de18     2D 00 64 AD |         if_z    ret
3de1c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3de20     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3de24     0F 72 77 F7 |                 signx   htmp1, #15      wc
3de28     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3de2c     00 BE 66 C7 |         if_c    signx   retval, #0-0
3de30     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3de34     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3de38     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3de3c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3de40     B8 71 53 F6 |                 abs     htmp            wc
3de44     1F BE 0E F4 |                 testb   retval, #31     wz
3de48     5F BF 42 F6 |                 abs     retval
3de4c     B8 BF 12 FD |                 qdiv    retval, htmp
3de50     18 BE 62 FD |                 getqx   retval
3de54     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3de58     C0 FF 7F FF 
3de5c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3de60     2D 00 64 FD |                 ret
3de64                 | 
3de64                 | '------------------------------------------------------------------------------
3de64                 | ' Perform controller actions
3de64                 | ' On entry:
3de64                 | '    hidr_id        report id
3de64                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3de64                 | '                      X = hidr_axis+0, #0
3de64                 | '                      Y = hidr_axis+0, #1
3de64                 | '                      Z = hidr_axis+1, #0
3de64                 | '                     RX = hidr_axis+1, #1
3de64                 | '                     RY = hidr_axis+2, #0
3de64                 | '                     RZ = hidr_axis+2, #1
3de64                 | '    hidr_buttons   buttons state (bits 0 to 31)
3de64                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3de64                 | '
3de64                 | '                     -------3 -------2 -------1 -------0 byte
3de64                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3de64                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3de64                 | '                                zyx||| |||||||| ++++++++ n. buttons
3de64                 | '                                |||||| ||||++++--------- n. axes
3de64                 | '                                |||||| ++++------------- n. hats
3de64                 | '                                ++++++------------------ valid axes
3de64                 | '------------------------------------------------------------------------------
3de64                 | hpad_translate
3de64                 | 
3de64                 | 
3de64                 |         if HAVE_HIDPAD
3de64     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3de68     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3de6c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3de70     01 70 E7 F2 |                 cmpsub  htmp,#1
3de74     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3de78     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3de7c     2D 00 7C 3D |         if_ae   ret     wcz
3de80     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3de84     B8 F3 03 F1 |                 add     ptrb,htmp
3de88     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3de8c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3de90     28 0C 64 FD |                 setq    #7-1
3de94     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3de98                 |         end
3de98                 | 
3de98                 | 
3de98                 |         if EMUPAD_MAX_PLAYER > 0
3de98                 | .emupad_no_hat
3de98                 |         if EMUPAD_BT0_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT1_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT2_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT3_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT4_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT5_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT6_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT7_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT8_BIT >= 0
3de98                 |         end
3de98                 |         if EMUPAD_BT9_BIT >= 0
3de98                 |         end
3de98                 | .emupad_slot_over
3de98                 |         end
3de98                 | 
3de98                 |         if 0
3de98                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3de98                 | 
3de98                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3de98                 | 
3de98                 |         end
3de98     2D 00 64 FD |                 ret
3de9c                 | end
3de9c                 | 
3de9c                 | if EMUPAD_MAX_PLAYER > 0
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | ' Clear EmuPad state
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | emupad_reset
3de9c                 | 
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | ' Get EmuPad Player number for current device (into retval)
3de9c                 | ' Z flag is also set if current device is valid
3de9c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | emupad_getnum
3de9c                 | .loop
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | emupad_discon
3de9c                 | .loop         
3de9c                 |         
3de9c                 |         ' FALL THROUGH!!!
3de9c                 | 
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | ' Update EmuPad reports (all of them...)
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | emupad_write_reports
3de9c                 | .devloop
3de9c                 | 
3de9c                 | end
3de9c                 | 
3de9c                 | 
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | ' On entry:
3de9c                 | ' On exit:
3de9c                 | '------------------------------------------------------------------------------
3de9c                 | hget_hub_status
3de9c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3dea0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3dea4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3dea8     01 90 2F F9 |                 setword hpar3, #1, #1
3deac     CF 02 A0 FD |                 call    #do_int_in
3deb0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3deb4     0C 00 90 AD |         if_z    jmp     #.data
3deb8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3debc     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3dec0     2D 00 64 FD |                 ret
3dec4                 | .data
3dec4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3dec8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3decc                 | 
3decc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3ded0     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3ded4     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3ded8     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3dedc                 |                 debug(ubin_long(hub_status_chg))
3dedc                 | 
3dedc     01 5A 06 F6 |                 mov     hdev_port, #1
3dee0                 | .loop
3dee0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3dee4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3dee8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3deec     F0 FF 9F 3D |         if_nc   jmp     #.loop
3def0     2D 00 64 FD |                 ret
3def4                 | 
3def4                 | hub_port_handler
3def4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3def8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3defc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3df00     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3df04     55 02 A0 FD |                 call    #control_read
3df08     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3df0c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3df0c                 | 
3df0c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3df10     50 01 90 5D |         if_x0   jmp     #.other
3df14     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3df18     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3df1c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3df20     A0 02 A0 FD |                 call    #control_write
3df24     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3df28     7C 01 90 5D |         if_x0   jmp     #.disconnect
3df2c     B0 99 02 F6 |                 mov     hctwait, _100ms_
3df30     EF 02 A0 FD |                 call    #poll_waitx
3df34                 | 
3df34     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3df38     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3df3c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3df40     A0 02 A0 FD |                 call    #control_write
3df44                 | 
3df44     02 76 07 F6 |                 mov     htmp3, #2
3df48                 | .wait_reset
3df48     AC 99 02 F6 |                 mov     hctwait, _8ms_
3df4c     EF 02 A0 FD |                 call    #poll_waitx
3df50     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3df54     27 EF 03 F6 |                 mov     pb, urx_buff_p
3df58     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3df5c     55 02 A0 FD |                 call    #control_read
3df60     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3df64     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3df68     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3df6c                 | 
3df6c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3df70     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3df74     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3df78     A0 02 A0 FD |                 call    #control_write
3df7c                 | 
3df7c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3df80                 | .wait_recover
3df80     A7 99 02 F6 |                 mov     hctwait, _1ms_
3df84     EF 02 A0 FD |                 call    #poll_waitx
3df88     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3df8c                 | 
3df8c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3df90     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3df94     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3df98                 | 
3df98     00 08 00 FF 
3df9c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3dfa0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3dfa4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3dfa8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3dfac     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3dfb0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dfb4     48 01 90 5D |         if_nz   jmp     #.done
3dfb8                 | .get_dev_desc
3dfb8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3dfbc     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3dfc0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3dfc4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3dfc8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3dfcc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3dfd0     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3dfd4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dfd8     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3dfdc     AC 99 02 F6 |                 mov     hctwait, _8ms_
3dfe0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3dfe4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3dfe8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3dfec     BE 00 A0 FD |                 call    #calc_crc5
3dff0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3dff4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3dff8     F7 AD C2 FA |                 rdbyte  total_data, pb
3dffc     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3e000     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3e004     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e008     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3e00c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3e010     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3e014                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3e014     9F 99 02 F6 |                 mov     hctwait, _500us_
3e018     EF 02 A0 FD |                 call    #poll_waitx
3e01c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3e020     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3e024     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3e028     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3e02c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e030     CC 00 90 5D |         if_nz   jmp     #.done
3e034     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3e038     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3e03c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3e040     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3e044     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3e048     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3e04c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3e050     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3e054     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3e058     A4 00 90 CD |         if_b    jmp     #.done
3e05c     6C F0 BF FD |                 call    #hparse_con_desc
3e060     9C 00 90 FD |                 jmp     #.done
3e064                 | 
3e064                 | .other
3e064     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3e068     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3e06c     28 00 90 AD |         if_x1   jmp     #.reset_feature
3e070     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3e074     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3e078     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3e07c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3e080     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3e084     10 00 90 AD |         if_x1   jmp     #.reset_feature
3e088     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3e08c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3e090     04 00 90 AD |         if_x1   jmp     #.reset_feature
3e094     68 00 90 FD |                 jmp     #.done
3e098                 | .reset_feature
3e098     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3e09c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3e0a0     A0 02 A0 FD |                 call    #control_write
3e0a4     58 00 90 FD |                 jmp     #.done
3e0a8                 | .disconnect
3e0a8                 | 
3e0a8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e0ac     00 70 E3 F8 |                 getbyte htmp
3e0b0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3e0b4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3e0b8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3e0bc     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3e0c0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3e0c4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3e0c8                 |         if EMUPAD_MAX_PLAYER > 0
3e0c8                 |         end
3e0c8                 |         if HAVE_MOUSE
3e0c8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3e0cc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3e0d0     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3e0d4                 |         end
3e0d4                 |         if HAVE_HIDPAD
3e0d4     14 0A F0 FE |                 loc ptrb,#hidpad_report
3e0d8     2D 71 03 F6 |                 mov htmp,hdev_port
3e0dc     01 70 E7 F2 |                 cmpsub htmp,#1
3e0e0     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3e0e4     B8 F3 03 F1 |                 add ptrb,htmp
3e0e8     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3e0ec     80 01 6C FC |                 wrlong #0,ptrb
3e0f0                 |         end
3e0f0                 | 
3e0f0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3e0f4     00 00 C4 F8 |                 setbyte #0
3e0f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e0fc     00 00 04 F6 |                 mov     0-0, #0
3e100                 | 
3e100                 | .done
3e100     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3e104     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3e108     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e10c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3e110     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3e114     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3e118                 | 
3e118     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3e11c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3e120     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3e124     55 02 A0 FD |                 call    #control_read
3e128     00 69 06 FB |                 rdlong  hub_port_status, ptra
3e12c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3e12c     2D 00 64 FD |                 ret
3e130                 | 
3e130                 | '------------------------------------------------------------------------------
3e130                 | ' Partially populated SETUP packets
3e130                 | '------------------------------------------------------------------------------
3e130     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3e131     06          |                 byte    REQ_GET_DESC
3e132     00 01       |                 word    TYPE_DEVICE << 8
3e134     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e136     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e138     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3e139     06          |                 byte    REQ_GET_DESC
3e13a     00 02       |                 word    TYPE_CONFIG << 8
3e13c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e13e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e140     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3e141     09          |                 byte    REQ_SET_CONFIG
3e142     00 00       |                 word    0       ' Configuration value
3e144     00 00       |                 word    0       ' Zero
3e146     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3e148     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3e149     05          |                 byte    REQ_SET_ADDR
3e14a     00 00       |                 word    0       ' Zero
3e14c     00 00       |                 word    0       ' Zero
3e14e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3e150                 | '------------------------------------------------------------------------------
3e150                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3e150                 | ' wValue field dictates which protocol should be used.
3e150                 | '
3e150                 | ' When initialized, all devices default to report protocol. However the host
3e150                 | ' should not make any assumptions about the device state and should set the
3e150                 | ' desired protocol whenever initializing a device.
3e150                 | '------------------------------------------------------------------------------
3e150     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3e151     0B          |                 byte    HID_SET_PROTO
3e152     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3e154                 |                                                 ' (HID 1.11 Section 7.2.6).
3e154     00 00       |                 word    0               ' Interface index number.
3e156     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3e158                 | '------------------------------------------------------------------------------
3e158     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3e159     0A          |                 byte    HID_SET_IDLE
3e15a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3e15c                 |                                         ' reporting until a change is detected in the report data
3e15c                 | 
3e15c                 |                                         ' (HID 1.11 Section 7.2.4).
3e15c     00 00       |                 word    0       ' Interface index number.
3e15e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3e160     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3e161     09          |                 byte    HID_SET_REPORT
3e162     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3e164                 |                                         ' (HID 1.11 Section 7.2.2).
3e164     00 00       |                 word    0       ' Interface index number.
3e166     00 00       |                 word    0       ' Size of the report, in bytes.
3e168     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3e169     06          |                 byte    REQ_GET_DESC
3e16a     00 22       |                 word    TYPE_REPORT << 8
3e16c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e16e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e170                 | '------------------------------------------------------------------------------
3e170     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3e171     06          |                 byte    REQ_GET_DESC
3e172     00 29       |                 word    TYPE_HUB << 8
3e174     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e176     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e178     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3e179     03          |                 byte    REQ_SET_FEATURE
3e17a     00 00       |                 word    0       ' port power
3e17c     01 00       |                 word    1       ' Port index number (1+)
3e17e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e180     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3e181     01          |                 byte    REQ_CLEAR_FEATURE
3e182     00 00       |                 word    0       ' port power
3e184     01 00       |                 word    1       ' Port index number (1+)
3e186     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e188     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3e189     00          |                 byte    REQ_GET_STATUS
3e18a     00 00       |                 word    0
3e18c     01 00       |                 word    1       ' Port index number (1+)
3e18e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3e190                 | '------------------------------------------------------------------------------
3e190                 | if _HAVE_GAMEPAD
3e190     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3e194                 | ps3_command_buff
3e194     00 00 00 00 
3e198     00          |                 byte    $00, $00, $00, $00, $00
3e199     00 00 00 00 
3e19d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3e19e     FF 27 10 00 
3e1a2     32          |                 byte    $FF, $27, $10, $00, $32
3e1a3     FF 27 10 00 
3e1a7     32          |                 byte    $FF, $27, $10, $00, $32
3e1a8     FF 27 10 00 
3e1ac     32          |                 byte    $FF, $27, $10, $00, $32
3e1ad     FF 27 10 00 
3e1b1     32          |                 byte    $FF, $27, $10, $00, $32
3e1b2     00 00 00 00 
3e1b6     00          |                 byte    $00, $00, $00, $00, $00
3e1b7     00 00 00 00 
3e1bb     00          |                 byte    $00, $00, $00, $00, $00
3e1bc     00 00 00 00 
3e1c0     00          |                 byte    $00, $00, $00, $00, $00
3e1c1     00 00 00    |                 byte    $00, $00, $00
3e1c4                 | '------------------------------------------------------------------------------
3e1c4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3e1c7                 |                                         ' 0x01 All blinking
3e1c7                 |                                         ' 0x02 1 flashes, then on
3e1c7                 |                                         ' 0x03 2 flashes, then on
3e1c7                 |                                         ' 0x04 3 flashes, then on
3e1c7                 |                                         ' 0x05 4 flashes, then on
3e1c7                 |                                         ' 0x06 1 on
3e1c7                 |                                         ' 0x07 2 on
3e1c7                 |                                         ' 0x08 3 on
3e1c7                 |                                         ' 0x09 4 on
3e1c7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3e1c7                 |                                         ' 0x0B Blinking*
3e1c7                 |                                         ' 0x0C Slow blinking*
3e1c7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3e1c7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3e1ca     00          |                 byte    $00             ' Left rumble
3e1cb     00          |                 byte    $00             ' Right rumble
3e1cc     00 00 00    |                 byte    $00, $00, $00
3e1cf     00          | end
3e1d0                 | alignl
3e1d0                 | 
3e1d0                 | if HAVE_MOUSE
3e1d0     00 00 00 00 
3e1d4     00 00 00 00 | mouse_limits long 0[2]
3e1d8     00 00 00 00 | mouse_outptr long 0
3e1dc                 | end
3e1dc                 | 
3e1dc                 | if KEYQUEUE_SIZE > 0
3e1dc     00          | keyq_head byte 0
3e1dd     00          | keyq_tail byte 0
3e1de     00 00 00 00 
      ...             
3e3da     00 00 00 00 
3e3de     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3e3e0                 | alignl
3e3e0                 | end
3e3e0                 | 
3e3e0                 | if EMUPAD_MAX_PLAYER > 0
3e3e0                 | emupad_rule_buffer
3e3e0                 | if EMUPAD_BUILTIN_RULES
3e3e0                 | file "padmap_builtin.dat"
3e3e0                 | end
3e3e0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3e3e0                 | '' Default rule directly follows!
3e3e0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3e3e0                 | end
3e3e0                 | 
3e3e0                 | '------------------------------------------------------------------------------
3e3e0                 | ' The USB data cache area gets zero-filled at every device disconnect
3e3e0                 | '------------------------------------------------------------------------------
3e3e0                 | usb_cache_start
3e3e0                 | 
3e3e0                 | ' HID descriptor and report buffers
3e3e0                 | if !!OVERLAP_MEMORY
3e3e0     00 00 00 00 
      ...             
3ead8     00 00 00 00 
3eadc     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3eae0                 | end
3eae0     00 00 00 00 
3eae4     00 00 00 00 | hkbd_report     byte    0[8]
3eae8     00 00 00 00 | hkbd_led_rep    byte    0
3eaec                 | alignl
3eaec                 | 
3eaec                 | if HAVE_HIDPAD
3eaec     00 00 00 00 
      ...             
3eba8     00 00 00 00 
3ebac     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3ebb0                 | end
3ebb0                 | 
3ebb0                 | ' HUB descriptor
3ebb0     00          | hub_descr       byte    0   ' bDescLength
3ebb1     00          |                 byte    0   ' bDescriptorType
3ebb2     00          |                 byte    0   ' bNbrPorts
3ebb3     00 00       |                 word    0   ' wHubCharacteristics
3ebb5     00          |                 byte    0   ' bPwrOn2PwrGood
3ebb6     00          |                 byte    0   ' bHubContrCurrent
3ebb7     00          |                 byte    0   ' DeviceRemoveable
3ebb8     00          |                 byte    0   ' PortPwrCtrlMask
3ebb9                 | 
3ebb9                 | usb_cache_end
3ebb9                 | 
3ebb9                 | if HAVE_MOUSE
3ebb9     00 00 00 00 | mouse_xacc      long 0
3ebbd     00 00 00 00 | mouse_yacc      long 0
3ebc1     00 00 00 00 | mouse_zacc      long 0
3ebc5     00          | mouse_bstate    byte 0
3ebc6     00          | mouse_lpending  byte 0
3ebc7     00          | mouse_rpending  byte 0
3ebc8     00          | mouse_mpending  byte 0
3ebc9     00          | mouse_lock      byte 0
3ebca     00 00 00    |                 byte 0[3] ' padding
3ebcd                 | end
3ebcd                 | 
3ebcd     00 00 00 00 
      ...             
3ec45     00 00 00 00 
3ec49     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3ec4d     00 00 00 00 
3ec51     00 00 00 00 
3ec55     00 00 00 00 
3ec59     00 00 00 00 
3ec5d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3ec5f     00 00 00 00 
      ...             
3ed57     00 00 00 00 
3ed5b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3ed5f                 | 
3ed5f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3ed60                 | 	alignl
3ed60                 | _audio096_spin2_dat_
3ed60                 | 
3ed60                 | audio       org     0
3ed60                 | 
3ed60     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3ed64     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3ed68     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3ed6c                 |  
3ed6c     01 EC 63 FD |             cogid   pa                   ' compute cogid
3ed70     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3ed74     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3ed78     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3ed7c                 | 
3ed7c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3ed80     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3ed84     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3ed88     0F 24 06 FC |             wrpin   dac2,#right
3ed8c     0F 00 1E FC |             wxpin   #256,#right    
3ed90     41 9C 64 FD |             dirh    #left addpins 1
3ed94     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3ed98     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3ed9c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3eda0                 |             
3eda0                 | '---------------------------------------------------------------------------------        
3eda0                 | '----------------- The main loop -------------------------------------------------
3eda0                 | '---------------------------------------------------------------------------------
3eda0                 | 
3eda0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3eda4     10 00 90 CD |       if_c  jmp     #loop1
3eda8                 |   
3eda8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3edac     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3edb0     D5 00 80 F1 |             sub     0-0,a40000000
3edb4     FD 01 6E FB |             djnz    cn,#p402
3edb8                 |     
3edb8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3edbc     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3edc0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3edc4     01 00 06 C6 |     if_c    mov     cn,#1
3edc8     DA 02 3A F3 |             fle     ct,time3 wcz
3edcc     02 00 06 C6 |     if_c    mov     cn,#2     
3edd0     DB 02 3A F3 |             fle     ct,time4 wcz
3edd4     03 00 06 C6 |     if_c    mov     cn,#3
3edd8     DC 02 3A F3 |             fle     ct,time5 wcz
3eddc     04 00 06 C6 |     if_c    mov     cn,#4
3ede0     DD 02 3A F3 |             fle     ct,time6 wcz
3ede4     05 00 06 C6 |     if_c    mov     cn,#5
3ede8     DE 02 3A F3 |             fle     ct,time7 wcz
3edec     06 00 06 C6 |     if_c    mov     cn,#6
3edf0     DF 02 3A F3 |             fle     ct,time8 wcz
3edf4     07 00 06 C6 |     if_c    mov     cn,#7
3edf8                 | 
3edf8                 | 
3edf8                 | '----------------------------------------------------------------------------------
3edf8                 | '------------- Compute channel samples --------------------------------------------
3edf8                 | '----------------------------------------------------------------------------------
3edf8                 | 
3edf8                 | 
3edf8     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3edfc     06 C0 65 F0 |             shl     channeladd,#6
3ee00     E0 F0 03 F1 |             add     ptra,channeladd
3ee04                 | 
3ee04     28 16 64 FD |             setq    #11                        	' read parameters
3ee08     00 D7 05 FB |             rdlong  pointer0,ptra
3ee0c                 |     	    
3ee0c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3ee10     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3ee14     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3ee18     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3ee1c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3ee20     00 C4 0D F2 |             cmp     qq,#0 wz                         
3ee24     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3ee28     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3ee2c                 |             
3ee2c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3ee30     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3ee34     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3ee38                 | 
3ee38     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3ee3c     EC 08 3A F9 |             getword oldrs,sample0,#1
3ee40     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3ee44     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3ee48     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3ee4c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3ee50                 | 
3ee50     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3ee54     00 04 02 F6 |             mov     dt0,0-0    
3ee58     D7 04 82 F1 |             sub     dt0,time0
3ee5c                 |             
3ee5c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3ee60     FB 00 00 F1 |             add     0-0,afreq0  	
3ee64                 |             
3ee64                 | '---- envelopes
3ee64                 |             
3ee64     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3ee68     20 00 00 AF 
3ee6c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3ee70     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3ee74                 | 
3ee74     FB 48 02 F6 |             mov     envs1,afreq0
3ee78     F5 48 02 FA |             mul     envs1,envspd0
3ee7c     24 E7 01 F1 |             add     envph0,envs1 
3ee80                 | 
3ee80     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3ee84     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3ee88     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3ee8c     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3ee90     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3ee94     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3ee98     00 46 06 36 |     if_ge   mov     envlo,#0
3ee9c     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3eea0     16 E6 65 30 |     if_ge   shl     envph0,#22
3eea4                 | 
3eea4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3eea8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3eeac     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3eeb0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3eeb4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3eeb8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3eebc     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3eec0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3eec4     23 49 02 FA |             mul     envs1,envlo
3eec8     25 49 02 F1 |             add     envs1,envs2
3eecc     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3eed0                 |             
3eed0     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3eed4     1B C6 61 AD |     if_z    getrnd  spl
3eed8     58 00 90 AD |     if_z    jmp     #p406
3eedc                 |  
3eedc     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3eee0     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3eee4     08 D6 45 F0 |             shr     pointer0,#8
3eee8                 |          
3eee8     1F DA 0D F4 |             testb   sstart0,#31 wz            
3eeec     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3eef0     1C DA 0D F4 |             testb   sstart0,#28 wz            
3eef4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3eef8                 |         
3eef8     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3eefc     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3ef00     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3ef04                 |             
3ef04     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3ef08     ED C4 01 F1 |             add     qq,sstart0            
3ef0c                 | 
3ef0c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3ef10     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3ef14     1C 01 B0 1D |     if_gt   call    #cache_read
3ef18                 |          
3ef18     1F DA 0D F4 |             testb   sstart0,#31 wz 
3ef1c     08 C6 65 50 |     if_nz   shl     spl,#8
3ef20     08 D6 65 50 |     if_nz   shl     pointer0,#8
3ef24     07 D6 65 A0 |     if_z    shl     pointer0,#7
3ef28     1C DA 0D F4 |             testb   sstart0,#28 wz            
3ef2c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3ef30     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3ef34                 | 
3ef34                 | 
3ef34     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3ef38     00 C6 01 F6 |             mov     spl,0-0
3ef3c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3ef40     00 C6 01 F6 |             mov     spl,0-0
3ef44                 | 
3ef44     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3ef48     00 0A 02 F6 |             mov     ls0,0-0
3ef4c     20 00 00 FF 
3ef50     00 C4 05 F6 |             mov     qq,##16384
3ef54     FE C4 81 F1 |             sub     qq,apan0
3ef58     E2 C6 31 FA |             scas    spl,qq
3ef5c     00 0C 02 F6 |             mov     rs0, 0-0
3ef60                 | 
3ef60     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3ef64     06 11 02 F1 |             add     rs,rs0
3ef68     03 0F 82 F1 |             sub     ls,oldls
3ef6c     05 0F 02 F1 |             add     ls,ls0
3ef70                 |    
3ef70     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3ef74     05 D9 21 F9 |             setword sample0,ls0,#0
3ef78                 |             
3ef78     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3ef7c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3ef80     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3ef84                 |   '  if_z    mov     sample0,#0
3ef84     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3ef88     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3ef8c     04 00 00 AF 
3ef90     00 B0 05 A1 |     if_z    add     time1,##2048
3ef94     D8 B2 01 A6 |     if_z    mov     time2,time1
3ef98     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3ef9c                 | 
3ef9c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3efa0     00 D7 65 FC |             wrlong  pointer0,ptra
3efa4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3efa8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3efac                 |                       
3efac     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3efb0     FF C3 25 A7 |     if_z    decmod  front, #511          
3efb4                 |          
3efb4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3efb8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3efbc     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3efc0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3efc4                 | 	    
3efc4                 | 		    
3efc4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3efc8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3efcc     04 15 02 F6 |             mov     newsample, oldrs       
3efd0                 | 
3efd0     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3efd4     02 AF 01 F1 |             add     time0,dt0    
3efd8                 |                                      
3efd8     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3efdc     D8 FD 9F AD |     if_z    jmp     #loop1
3efe0     02 C5 01 F6 |             mov     qq,dt0
3efe4                 | 
3efe4                 |     
3efe4                 |             
3efe4     01 4E 36 F0 | p301        rol     dropper,#1 wc
3efe8     40 00 90 3D |     if_nc   jmp     #p399
3efec     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3eff0     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3eff4     F4 FF 9F AD |     if_e    jmp     #p398   
3eff8                 | 		
3eff8     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3effc     20 00 90 AD |     if_z    jmp     #p302	   
3f000                 |   
3f000     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3f004     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3f008     02 1E 66 C0 |     if_c    shl     scptr2,#2
3f00c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3f010     60 1E 66 FC |             wrlong  scptr2,#$60
3f014     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3f018     01 00 00 CF 
3f01c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3f020                 | 			    
3f020     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3f024     00 00 00 FF 
3f028     FF C3 05 F7 |             incmod  front, ##511
3f02c     ED C5 6D FB | p399        djnz    qq,#p301
3f030                 |             
3f030     6C FD 9F FD |             jmp     #loop            'loop
3f034                 | 
3f034                 | '----------------------------------------------------------------------------------
3f034                 | '------------- This is the end of the main loop -----------------------------------
3f034                 | '----------------------------------------------------------------------------------
3f034                 | 
3f034                 | '----------------------------------------------------------------------------------
3f034                 | '------------- PSRAM cache ----------- --------------------------------------------
3f034                 | '----------------------------------------------------------------------------------
3f034                 | 
3f034                 | ' There are 8 cache pointers for 8 channels
3f034                 | ' if 24 higher bits of address=cache, then get a word from the cache
3f034                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3f034                 | 
3f034                 | 
3f034     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3f038                 |             
3f038     E2 40 02 F6 | 	    mov     addrhi,qq		
3f03c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3f040     14 01 96 F9 | 	    alts    cn,#cache1            
3f044     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3f048     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3f04c                 | 	
3f04c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3f050     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3f054     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3f058     08 38 66 F0 | 	    shl     cmd,#8
3f05c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3f060     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3f064     08 3A 66 F0 |             shl     hubaddr,#8                  '
3f068     13 3B 02 F1 |             add     hubaddr,hubptr 
3f06c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3f070     28 04 64 FD |             setq    #2                          ' write 3 longs
3f074     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3f078     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3f07c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3f080                 |             
3f080                 | 	
3f080     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3f084     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3f088     13 C5 01 F1 | 	    add     qq,hubptr
3f08c     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3f090     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3f094                 |           
3f094                 | 
3f094                 | '--------------------------------------------------------------------------
3f094                 | '------ Interrupt service -------------------------------------------------
3f094                 | '------ Output the sample, get the next one if exists ---------------------
3f094                 | '--------------------------------------------------------------------------
3f094                 | 
3f094     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3f098     0F D0 25 FC |             wypin   rsample,#right       '4
3f09c     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3f0a0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3f0a4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3f0a8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3f0ac     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3f0b0                 |     
3f0b0     F5 FF 3B FB |             reti1                        '17/19 
3f0b4                 |           
3f0b4                 | '---------------------------------------------------------------------------
3f0b4                 | '-------- End of interrupt -------------------------------------------------
3f0b4                 | '---------------------------------------------------------------------------    
3f0b4                 | 
3f0b4                 | 
3f0b4                 | '---------------------------------------------------------------------------
3f0b4                 | '------- Variables ---------------------------------------------------------
3f0b4                 | '---------------------------------------------------------------------------
3f0b4                 | 
3f0b4                 | ' constants
3f0b4                 | 
3f0b4     00 00 00 40 | a40000000   long $40000000
3f0b8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3f0bc                 | 
3f0bc                 | ' Time variables
3f0bc                 | 
3f0bc     00 00 00 00 | time0       long 0    ' Global sample computing time
3f0c0     01 00 00 00 | time1       long 1    ' Local channels time
3f0c4     02 00 00 00 | time2       long 2
3f0c8     03 00 00 00 | time3       long 3
3f0cc     04 00 00 00 | time4       long 4
3f0d0     05 00 00 00 | time5       long 5
3f0d4     06 00 00 00 | time6       long 6
3f0d8     07 00 00 00 | time7       long 7
3f0dc     08 00 00 00 | time8       long 8
3f0e0                 | 
3f0e0     00 00 00 00 | channeladd long 0
3f0e4                 | 
3f0e4     00 00 00 00 | front       long 0
3f0e8                 | 
3f0e8                 | ' temporary variables 
3f0e8     00 00 00 00 | qq          long 0
3f0ec     00 00 00 00 | spl         long 0
3f0f0     00 00 00 00 | zero        long 0
3f0f4     00 00 00 00 | mailbox     long 0
3f0f8     00 00 00 00 | mailbox2 long 0
3f0fc                 | 
3f0fc                 | ' Interrupt ISR variables
3f0fc                 | 
3f0fc     00 00 00 00 | lsample     long 0
3f100     00 00 00 00 | rsample     long 0
3f104     00 00 00 00 | lsnext      long 0
3f108     00 00 00 00 | rsnext      long 0 
3f10c                 | 
3f10c                 | ' channel parameter block
3f10c                 | 
3f10c     00 00 00 00 | pointer0    long 0     
3f110     00 00 00 00 | sample0     long 0
3f114     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3f118     00 00 00 00 | lstart0     long 0
3f11c     00 00 00 00 | lend0       long 0
3f120     00 00 00 00 | volpan0     long 0
3f124     00 00 00 00 | freqskip0   long 0
3f128     00 00 00 00 | command0    long 0
3f12c     00 00 00 00 | envph0	    long 0
3f130     00 00 00 00 | envptr0	    long 0
3f134     00 00 00 00 | envspd0	    long 0
3f138     00 00 00 00 | envlen0	    long 0
3f13c     00 00 00 00 | res5	    long 0
3f140     00 00 00 00 | res6	    long 0
3f144     00 00 00 00 | res7	    long 0
3f148     00 00 00 00 | res8	    long 0
3f14c                 | 
3f14c     00 00 00 00 | afreq0      long 0
3f150     00 00 00 00 | askip0      long 0
3f154     00 00 00 00 | avol0       long 0
3f158     00 00 00 00 | apan0       long 0
3f15c                 | 
3f15c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3f160     00 00 00 00 | cn          long 0
3f164     00 00 00 00 | ct          long 0
3f168     00 00 00 00 | dt0         long 0
3f16c                 | 
3f16c                 | ' Samples
3f16c     00 00 00 00 | oldls       long 0
3f170     00 00 00 00 | oldrs       long 0
3f174                 | 
3f174     00 00 00 00 | ls0         long 0
3f178     00 00 00 00 | rs0         long 0
3f17c                 | 
3f17c     00 00 00 00 | ls          long 0    
3f180     00 00 00 00 | rs          long 0
3f184                 | 
3f184     00 00 00 00 | oldsample   long 0
3f188     00 00 00 00 | newsample   long 0
3f18c                 | 
3f18c     00 00 00 00 | nrsample    long 0
3f190     00 00 00 00 | nlsample    long 0
3f194                 | 
3f194     00 00 00 00 | scbase long 0
3f198     00 00 00 00 | scptr long 0
3f19c     00 00 00 00 | scptr2 long 0
3f1a0     00 00 00 00 | scope long 0
3f1a4                 | 
3f1a4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3f1a8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3f1ac                 | 
3f1ac     00 18 07 00 | hubptr      long $71800
3f1b0     00 00 00 00 | cache1      long 0
3f1b4     00 00 00 00 | cache2      long 0
3f1b8     00 00 00 00 | cache3      long 0
3f1bc     00 00 00 00 | cache4      long 0
3f1c0     00 00 00 00 | cache5      long 0
3f1c4     00 00 00 00 | cache6      long 0
3f1c8     00 00 00 00 | cache7      long 0
3f1cc     00 00 00 00 | cache8      long 0
3f1d0                 | 
3f1d0                 | 
3f1d0     00 00 00 00 | cmd         long 0
3f1d4     00 00 00 00 | hubaddr     long 0
3f1d8     00 01 00 00 | count       long 256
3f1dc     00 00 00 00 | addrlo long 0
3f1e0     00 00 00 00 | addrhi long 0
3f1e4     00 00 00 00 | pointer00 long 0
3f1e8     00 00 00 00 | envhi long 0
3f1ec     00 00 00 00 | envlo long 0
3f1f0     00 00 00 00 | envs1 long 0
3f1f4     00 00 00 00 | envs2 long 0
3f1f8     00 00 00 00 | noise0 long 0
3f1fc     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3f200     00 00 00 00 
3f204     00 00 00 00 | null  			long 	0,0           ' for channel reset
3f208                 | 	alignl
3f208                 | __system__dat_
3f208     00 00 00 00 
3f20c     00 00 00 00 | 	byte	$00[8]
3f210     03 00 00 00 
3f214     00 00 00 00 
3f218     00 00 00 00 
3f21c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f220     00 00 00 00 
      ...             
3f4ac     00 00 00 00 
3f4b0     00 00 00 00 | 	byte	$00[660]
3f4b4     00 00 F0 09 | 	long	(159 {__system____root_opendir})<<20
3f4b8     00 00 00 0A | 	long	(160 {__system____root_closedir})<<20
3f4bc     00 00 10 0A | 	long	(161 {__system____root_readdir})<<20
3f4c0     00 00 20 0A | 	long	(162 {__system____root_stat})<<20
3f4c4     00 00 00 00 
3f4c8     00 00 00 00 
3f4cc     00 00 00 00 
3f4d0     00 00 00 00 
3f4d4     00 00 00 00 
3f4d8     00 00 00 00 
3f4dc     00 00 00 00 | 	byte	$00[28]
3f4e0     48 F5 03 00 | 	long	@@@__system__dat_ + 832
3f4e4     4B F5 03 00 | 	long	@@@__system__dat_ + 835
3f4e8     6C F5 03 00 | 	long	@@@__system__dat_ + 868
3f4ec     85 F5 03 00 | 	long	@@@__system__dat_ + 893
3f4f0     A0 F5 03 00 | 	long	@@@__system__dat_ + 920
3f4f4     BA F5 03 00 | 	long	@@@__system__dat_ + 946
3f4f8     CA F5 03 00 | 	long	@@@__system__dat_ + 962
3f4fc     DC F5 03 00 | 	long	@@@__system__dat_ + 980
3f500     EE F5 03 00 | 	long	@@@__system__dat_ + 998
3f504     00 F6 03 00 | 	long	@@@__system__dat_ + 1016
3f508     0C F6 03 00 | 	long	@@@__system__dat_ + 1028
3f50c     1D F6 03 00 | 	long	@@@__system__dat_ + 1045
3f510     31 F6 03 00 | 	long	@@@__system__dat_ + 1065
3f514     3B F6 03 00 | 	long	@@@__system__dat_ + 1075
3f518     4B F6 03 00 | 	long	@@@__system__dat_ + 1091
3f51c     5A F6 03 00 | 	long	@@@__system__dat_ + 1106
3f520     70 F6 03 00 | 	long	@@@__system__dat_ + 1128
3f524     89 F6 03 00 | 	long	@@@__system__dat_ + 1153
3f528     9D F6 03 00 | 	long	@@@__system__dat_ + 1173
3f52c     AB F6 03 00 | 	long	@@@__system__dat_ + 1187
3f530     BF F6 03 00 | 	long	@@@__system__dat_ + 1207
3f534     CB F6 03 00 | 	long	@@@__system__dat_ + 1219
3f538     DD F6 03 00 | 	long	@@@__system__dat_ + 1237
3f53c     F5 F6 03 00 | 	long	@@@__system__dat_ + 1261
3f540     07 F7 03 00 | 	long	@@@__system__dat_ + 1279
3f544     1A F7 03 00 | 	long	@@@__system__dat_ + 1298
3f548     4F 4B 00 4E 
3f54c     75 6D 65 72 
3f550     69 63 61 6C 
3f554     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3f558     75 6D 65 6E 
3f55c     74 20 6F 75 
3f560     74 20 6F 66 
3f564     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3f568     61 69 6E 00 
3f56c     52 65 73 75 
3f570     6C 74 20 6E 
3f574     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3f578     65 70 72 65 
3f57c     73 65 6E 74 
3f580     61 62 6C 65 
3f584     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3f588     65 67 61 6C 
3f58c     20 6D 75 6C 
3f590     74 69 62 79 
3f594     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3f598     65 71 75 65 
3f59c     6E 63 65 00 
3f5a0     4E 6F 20 73 
3f5a4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3f5a8     66 69 6C 65 
3f5ac     20 6F 72 20 
3f5b0     64 69 72 65 
3f5b4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3f5b8     79 00 42 61 
3f5bc     64 20 66 69 
3f5c0     6C 65 20 6E 
3f5c4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3f5c8     72 00 50 65 
3f5cc     72 6D 69 73 
3f5d0     73 69 6F 6E 
3f5d4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3f5d8     69 65 64 00 
3f5dc     4E 6F 74 20 
3f5e0     65 6E 6F 75 
3f5e4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3f5e8     65 6D 6F 72 
3f5ec     79 00 54 65 
3f5f0     6D 70 6F 72 
3f5f4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3f5f8     66 61 69 6C 
3f5fc     75 72 65 00 
3f600     46 69 6C 65 
3f604     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3f608     73 74 73 00 
3f60c     49 6E 76 61 
3f610     6C 69 64 20 
3f614     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3f618     6D 65 6E 74 
3f61c     00 54 6F 6F 
3f620     20 6D 61 6E 
3f624     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3f628     65 6E 20 66 
3f62c     69 6C 65 73 
3f630     00 49 2F 4F 
3f634     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3f638     6F 72 00 4E 
3f63c     6F 74 20 61 
3f640     20 64 69 72 
3f644     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3f648     72 79 00 49 
3f64c     73 20 61 20 
3f650     64 69 72 65 
3f654     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3f658     79 00 52 65 
3f65c     61 64 20 6F 
3f660     6E 6C 79 20 
3f664     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3f668     20 73 79 73 
3f66c     74 65 6D 00 
3f670     46 75 6E 63 
3f674     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3f678     20 6E 6F 74 
3f67c     20 69 6D 70 
3f680     6C 65 6D 65 
3f684     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3f688     00 44 69 72 
3f68c     65 63 74 6F 
3f690     72 79 20 6E 
3f694     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3f698     6D 70 74 79 
3f69c     00 4E 61 6D 
3f6a0     65 20 74 6F 
3f6a4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3f6a8     6E 67 00 44 
3f6ac     65 76 69 63 
3f6b0     65 20 6E 6F 
3f6b4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3f6b8     65 6B 61 62 
3f6bc     6C 65 00 42 
3f6c0     61 64 20 61 
3f6c4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3f6c8     73 73 00 42 
3f6cc     72 6F 6B 65 
3f6d0     6E 20 63 6F 
3f6d4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3f6d8     74 69 6F 6E 
3f6dc     00 44 65 76 
3f6e0     69 63 65 20 
3f6e4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3f6e8     65 73 6F 75 
3f6ec     72 63 65 20 
3f6f0     62 75 73 79 
3f6f4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3f6f8     73 73 20 64 
3f6fc     65 76 69 63 
3f700     65 20 6C 69 
3f704     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3f708     6F 20 73 70 
3f70c     61 63 65 20 
3f710     6F 6E 20 64 
3f714     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3f718     65 00 55 6E 
3f71c     6B 6E 6F 77 
3f720     6E 20 65 72 
3f724     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3f728     00 00 00 00 
3f72c     00 00 00 00 
3f730     00 00 00 00 | 	byte	$00[12]
3f734     05 00 00 00 
3f738     00 00 00 00 
3f73c     00 00 00 00 
3f740     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f744     00 00 00 00 | 	byte	$00, $00, $00, $00
3f748     00 00 70 0B | 	long	(183 {__system___tx})<<20
3f74c     00 00 80 0B | 	long	(184 {__system___rx})<<20
3f750     00 00 00 00 | 	byte	$00, $00, $00, $00
3f754     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0757})<<20
3f758     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0758})<<20
3f75c     00 00 00 00 
3f760     00 00 00 00 | 	byte	$00[8]
3f764     01 00 00 00 
3f768     06 00 00 00 
3f76c     00 00 00 00 
3f770     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f774     00 00 00 00 
3f778     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3f77c     00 00 70 0B | 	long	(183 {__system___tx})<<20
3f780     00 00 80 0B | 	long	(184 {__system___rx})<<20
3f784     00 00 00 00 | 	byte	$00, $00, $00, $00
3f788     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0757})<<20
3f78c     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0758})<<20
3f790     00 00 00 00 
3f794     00 00 00 00 | 	byte	$00[8]
3f798     01 00 00 00 
3f79c     06 00 00 00 
3f7a0     00 00 00 00 
3f7a4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f7a8     00 00 00 00 
3f7ac     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3f7b0     00 00 70 0B | 	long	(183 {__system___tx})<<20
3f7b4     00 00 80 0B | 	long	(184 {__system___rx})<<20
3f7b8     00 00 00 00 | 	byte	$00, $00, $00, $00
3f7bc     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0757})<<20
3f7c0     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0758})<<20
3f7c4     00 00 00 00 
      ...             
3f934     00 00 00 00 
3f938     00 00 00 00 | 	byte	$00[376]
3f93c     40 F9 03 00 | 	long	@@@__system__dat_ + 1848
3f940     00 00 00 00 
3f944     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3f948                 | 	alignl
3f948                 | _fatfs_cc_dat_
3f948     C7 00 FC 00 
3f94c     E9 00 E2 00 
3f950     E4 00 E0 00 
3f954     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3f958     EA 00 EB 00 
3f95c     E8 00 EF 00 
3f960     EE 00 EC 00 
3f964     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3f968     C9 00 E6 00 
3f96c     C6 00 F4 00 
3f970     F6 00 F2 00 
3f974     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3f978     FF 00 D6 00 
3f97c     DC 00 F8 00 
3f980     A3 00 D8 00 
3f984     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3f988     E1 00 ED 00 
3f98c     F3 00 FA 00 
3f990     F1 00 D1 00 
3f994     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3f998     BF 00 AE 00 
3f99c     AC 00 BD 00 
3f9a0     BC 00 A1 00 
3f9a4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3f9a8     91 25 92 25 
3f9ac     93 25 02 25 
3f9b0     24 25 C1 00 
3f9b4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3f9b8     A9 00 63 25 
3f9bc     51 25 57 25 
3f9c0     5D 25 A2 00 
3f9c4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3f9c8     14 25 34 25 
3f9cc     2C 25 1C 25 
3f9d0     00 25 3C 25 
3f9d4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3f9d8     5A 25 54 25 
3f9dc     69 25 66 25 
3f9e0     60 25 50 25 
3f9e4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3f9e8     F0 00 D0 00 
3f9ec     CA 00 CB 00 
3f9f0     C8 00 31 01 
3f9f4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3f9f8     CF 00 18 25 
3f9fc     0C 25 88 25 
3fa00     84 25 A6 00 
3fa04     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3fa08     D3 00 DF 00 
3fa0c     D4 00 D2 00 
3fa10     F5 00 D5 00 
3fa14     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3fa18     DE 00 DA 00 
3fa1c     DB 00 D9 00 
3fa20     FD 00 DD 00 
3fa24     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3fa28     AD 00 B1 00 
3fa2c     17 20 BE 00 
3fa30     B6 00 A7 00 
3fa34     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3fa38     B0 00 A8 00 
3fa3c     B7 00 B9 00 
3fa40     B3 00 B2 00 
3fa44     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3fa48     61 00 1A 03 
3fa4c     E0 00 17 03 
3fa50     F8 00 07 03 
3fa54     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3fa58     78 01 00 01 
3fa5c     30 01 32 01 
3fa60     06 01 39 01 
3fa64     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3fa68     2E 01 79 01 
3fa6c     06 01 80 01 
3fa70     4D 00 43 02 
3fa74     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3fa78     82 01 84 01 
3fa7c     84 01 86 01 
3fa80     87 01 87 01 
3fa84     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3fa88     8B 01 8B 01 
3fa8c     8D 01 8E 01 
3fa90     8F 01 90 01 
3fa94     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3fa98     93 01 94 01 
3fa9c     F6 01 96 01 
3faa0     97 01 98 01 
3faa4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3faa8     9B 01 9C 01 
3faac     9D 01 20 02 
3fab0     9F 01 A0 01 
3fab4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3fab8     A2 01 A4 01 
3fabc     A4 01 A6 01 
3fac0     A7 01 A7 01 
3fac4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3fac8     AB 01 AC 01 
3facc     AC 01 AE 01 
3fad0     AF 01 AF 01 
3fad4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3fad8     B3 01 B3 01 
3fadc     B5 01 B5 01 
3fae0     B7 01 B8 01 
3fae4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3fae8     BB 01 BC 01 
3faec     BC 01 BE 01 
3faf0     F7 01 C0 01 
3faf4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3faf8     C3 01 C4 01 
3fafc     C5 01 C4 01 
3fb00     C7 01 C8 01 
3fb04     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3fb08     CB 01 CA 01 
3fb0c     CD 01 10 01 
3fb10     DD 01 01 00 
3fb14     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3fb18     12 01 F3 01 
3fb1c     03 00 F1 01 
3fb20     F4 01 F4 01 
3fb24     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3fb28     22 02 12 01 
3fb2c     3A 02 09 00 
3fb30     65 2C 3B 02 
3fb34     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3fb38     66 2C 3F 02 
3fb3c     40 02 41 02 
3fb40     41 02 46 02 
3fb44     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3fb48     40 00 81 01 
3fb4c     86 01 55 02 
3fb50     89 01 8A 01 
3fb54     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3fb58     5A 02 90 01 
3fb5c     5C 02 5D 02 
3fb60     5E 02 5F 02 
3fb64     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3fb68     62 02 94 01 
3fb6c     64 02 65 02 
3fb70     66 02 67 02 
3fb74     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3fb78     6A 02 62 2C 
3fb7c     6C 02 6D 02 
3fb80     6E 02 9C 01 
3fb84     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3fb88     9D 01 73 02 
3fb8c     74 02 9F 01 
3fb90     76 02 77 02 
3fb94     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3fb98     7A 02 7B 02 
3fb9c     7C 02 64 2C 
3fba0     7E 02 7F 02 
3fba4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3fba8     82 02 A9 01 
3fbac     84 02 85 02 
3fbb0     86 02 87 02 
3fbb4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3fbb8     B1 01 B2 01 
3fbbc     45 02 8D 02 
3fbc0     8E 02 8F 02 
3fbc4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3fbc8     B7 01 7B 03 
3fbcc     03 00 FD 03 
3fbd0     FE 03 FF 03 
3fbd4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3fbd8     86 03 88 03 
3fbdc     89 03 8A 03 
3fbe0     B1 03 11 03 
3fbe4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3fbe8     A3 03 A3 03 
3fbec     C4 03 08 03 
3fbf0     CC 03 03 00 
3fbf4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3fbf8     8F 03 D8 03 
3fbfc     18 01 F2 03 
3fc00     0A 00 F9 03 
3fc04     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3fc08     F5 03 F6 03 
3fc0c     F7 03 F7 03 
3fc10     F9 03 FA 03 
3fc14     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3fc18     20 03 50 04 
3fc1c     10 07 60 04 
3fc20     22 01 8A 04 
3fc24     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3fc28     0E 01 CF 04 
3fc2c     01 00 C0 04 
3fc30     D0 04 44 01 
3fc34     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3fc38     00 00 7D 1D 
3fc3c     01 00 63 2C 
3fc40     00 1E 96 01 
3fc44     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3fc48     00 1F 08 06 
3fc4c     10 1F 06 06 
3fc50     20 1F 08 06 
3fc54     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3fc58     40 1F 06 06 
3fc5c     51 1F 07 00 
3fc60     59 1F 52 1F 
3fc64     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3fc68     5D 1F 56 1F 
3fc6c     5F 1F 60 1F 
3fc70     08 06 70 1F 
3fc74     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3fc78     BB 1F C8 1F 
3fc7c     C9 1F CA 1F 
3fc80     CB 1F DA 1F 
3fc84     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3fc88     F9 1F EA 1F 
3fc8c     EB 1F FA 1F 
3fc90     FB 1F 80 1F 
3fc94     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3fc98     08 06 A0 1F 
3fc9c     08 06 B0 1F 
3fca0     04 00 B8 1F 
3fca4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3fca8     BC 1F CC 1F 
3fcac     01 00 C3 1F 
3fcb0     D0 1F 02 06 
3fcb4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3fcb8     E5 1F 01 00 
3fcbc     EC 1F F3 1F 
3fcc0     01 00 FC 1F 
3fcc4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3fcc8     32 21 70 21 
3fccc     10 02 84 21 
3fcd0     01 00 83 21 
3fcd4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3fcd8     30 2C 2F 04 
3fcdc     60 2C 02 01 
3fce0     67 2C 06 01 
3fce4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3fce8     80 2C 64 01 
3fcec     00 2D 26 08 
3fcf0     41 FF 1A 03 
3fcf4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3fcf8     05 07 09 0E 
3fcfc     10 12 14 16 
3fd00     18 1C 1E 43 
3fd04     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3fd08     41 41 43 45 
3fd0c     45 45 49 49 
3fd10     49 41 41 45 
3fd14     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3fd18     4F 55 55 59 
3fd1c     4F 55 4F 9C 
3fd20     4F 9E 9F 41 
3fd24     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3fd28     A5 A6 A7 A8 
3fd2c     A9 AA AB AC 
3fd30     AD AE AF B0 
3fd34     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3fd38     41 41 41 B8 
3fd3c     B9 BA BB BC 
3fd40     BD BE BF C0 
3fd44     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3fd48     C5 41 41 C8 
3fd4c     C9 CA CB CC 
3fd50     CD CE CF D1 
3fd54     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3fd58     49 49 49 49 
3fd5c     D9 DA DB DC 
3fd60     DD 49 DF 4F 
3fd64     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3fd68     4F E6 E8 E8 
3fd6c     55 55 55 59 
3fd70     59 EE EF F0 
3fd74     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3fd78     F5 F6 F7 F8 
3fd7c     F9 FA FB FC 
3fd80     FD FE FF 00 
3fd84     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3fd88     00 00 00 00 | 	byte	$00, $00, $00, $00
3fd8c     00 00 60 0A | 	long	(166 {_fatfs_cc_v_close})<<20
3fd90     00 00 70 0A | 	long	(167 {_fatfs_cc_v_read})<<20
3fd94     00 00 80 0A | 	long	(168 {_fatfs_cc_v_write})<<20
3fd98     00 00 90 0A | 	long	(169 {_fatfs_cc_v_lseek})<<20
3fd9c     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_ioctl})<<20
3fda0     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_flush})<<20
3fda4     00 00 00 00 
3fda8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3fdac     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_open})<<20
3fdb0     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_creat})<<20
3fdb4     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_opendir})<<20
3fdb8     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_closedir})<<20
3fdbc     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_readdir})<<20
3fdc0     00 00 00 0B | 	long	(176 {_fatfs_cc_v_stat})<<20
3fdc4     00 00 10 0B | 	long	(177 {_fatfs_cc_v_mkdir})<<20
3fdc8     00 00 20 0B | 	long	(178 {_fatfs_cc_v_rmdir})<<20
3fdcc     00 00 30 0B | 	long	(179 {_fatfs_cc_v_remove})<<20
3fdd0     00 00 40 0B | 	long	(180 {_fatfs_cc_v_rename})<<20
3fdd4     00 00 50 0B | 	long	(181 {_fatfs_cc_v_init})<<20
3fdd8     00 00 60 0B | 	long	(182 {_fatfs_cc_v_deinit})<<20
3fddc     FF FF FF FF 
3fde0     1F 00 00 00 
3fde4     1C 00 00 00 
3fde8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3fdec     1E 00 00 00 
3fdf0     1F 00 00 00 
3fdf4     1E 00 00 00 
3fdf8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3fdfc     1F 00 00 00 
3fe00     1E 00 00 00 
3fe04     1F 00 00 00 
3fe08     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3fe0c     1F 00 00 00 
3fe10     00 00 00 00 
3fe14     1F 00 00 00 
3fe18     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3fe1c     5A 00 00 00 
3fe20     78 00 00 00 
3fe24     97 00 00 00 
3fe28     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3fe2c     D4 00 00 00 
3fe30     F3 00 00 00 
3fe34     11 01 00 00 
3fe38     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3fe3c     4E 01 00 00 
3fe40     6D 01 00 00 
3fe44     FF FF FF FF 
3fe48     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3fe4c     00 00 00 00 
      ...             
3fe64     00 00 00 00 
3fe68     00 00 00 00 | 	byte	$00[32]
3fe6c     8A FE 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3fe70     8E FE 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3fe74     00 00 00 00 
3fe78     00 00 00 00 
3fe7c     00 00 00 00 
3fe80     00 00 00 00 
3fe84     00 00       | 	byte	$00[18]
3fe86     3F 3F 3F 00 
3fe8a     55 43 54 00 
3fe8e     55 43 54 00 
3fe92     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3fe96     00 00 00 00 
3fe9a     00 00 00    | 	byte	$00[7]
3fe9d     CA 9A 3B 00 
3fea1     00 00 00 01 
3fea5     01 01 01 01 
3fea9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3fead     91 11 11 11 
3feb1     11 01 01 01 
3feb5     01 01 01 01 
3feb9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3febd     01 01 01 01 
3fec1     01 01 01    | 	byte	$01[7]
3fec4     90 20 20 20 
3fec8     20 20 20 20 
3fecc     20 20 20 20 
3fed0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3fed4     42 42 42 42 
3fed8     42 42 42 42 
3fedc     42 42       | 	byte	$42[10]
3fede     20 20 20 20 
3fee2     20 20 20    | 	byte	$20[7]
3fee5     44 44 44 44 
3fee9     44 44       | 	byte	$44[6]
3feeb     04 04 04 04 
3feef     04 04 04 04 
3fef3     04 04 04 04 
3fef7     04 04 04 04 
3fefb     04 04 04 04 | 	byte	$04[20]
3feff     20 20 20 20 
3ff03     20 20       | 	byte	$20[6]
3ff05     48 48 48 48 
3ff09     48 48       | 	byte	$48[6]
3ff0b     08 08 08 08 
3ff0f     08 08 08 08 
3ff13     08 08 08 08 
3ff17     08 08 08 08 
3ff1b     08 08 08 08 | 	byte	$08[20]
3ff1f     20 20 20 20 
3ff23     01 00 00 00 
3ff27     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3ff28                 | __methodtable__
3ff28     78 5B 01 00 | 	long	@_do_no_command
3ff2c     D4 EB 01 00 | 	long	@_do_plus
3ff30     F4 DB 01 00 | 	long	@_do_minus
3ff34     BC EA 01 00 | 	long	@_do_or
3ff38     74 E2 01 00 | 	long	@_do_mul
3ff3c     B8 C6 01 00 | 	long	@_do_fdiv
3ff40     A4 BE 01 00 | 	long	@_do_and
3ff44     BC BF 01 00 | 	long	@_do_div
3ff48     54 E0 01 00 | 	long	@_do_mod
3ff4c     88 F2 01 00 | 	long	@_do_shl
3ff50     A0 F3 01 00 | 	long	@_do_shr
3ff54     C0 F0 01 00 | 	long	@_do_power
3ff58     5C B4 01 00 | 	long	@_do_getvar
3ff5c     24 78 01 00 | 	long	@_do_push
3ff60     54 AE 01 00 | 	long	@_do_assign
3ff64     20 F4 00 00 | 	long	@_do_cls
3ff68     44 55 01 00 | 	long	@_do_new
3ff6c     68 70 01 00 | 	long	@_do_plot
3ff70     20 16 01 00 | 	long	@_do_draw
3ff74     D0 72 01 00 | 	long	@_do_print
3ff78     00 F2 00 00 | 	long	@_do_circle
3ff7c     54 18 01 00 | 	long	@_do_fcircle
3ff80     F4 E0 00 00 | 	long	@_do_box
3ff84     38 1D 01 00 | 	long	@_do_frame
3ff88     60 F4 00 00 | 	long	@_do_color
3ff8c     C8 1A 01 00 | 	long	@_do_for
3ff90     B0 57 01 00 | 	long	@_do_next
3ff94     7C 43 01 00 | 	long	@_do_list
3ff98     94 93 01 00 | 	long	@_do_run
3ff9c     7C 17 01 00 | 	long	@_do_error
3ffa0     84 29 01 00 | 	long	@_do_fast_goto
3ffa4     74 2A 01 00 | 	long	@_do_find_goto
3ffa8     88 2C 01 00 | 	long	@_do_slow_goto
3ffac     98 5B 01 00 | 	long	@_do_nothing
3ffb0     F8 D3 00 00 | 	long	@_test_csave
3ffb4     B0 97 01 00 | 	long	@_do_save
3ffb8     18 46 01 00 | 	long	@_do_load
3ffbc     A4 63 01 00 | 	long	@_do_pinwrite
3ffc0     94 AB 01 00 | 	long	@_do_waitms
3ffc4     C8 AC 01 00 | 	long	@_do_waitvbl
3ffc8     7C 2F 01 00 | 	long	@_do_if
3ffcc     14 17 01 00 | 	long	@_do_else
3ffd0     DC C1 01 00 | 	long	@_do_eq
3ffd4     80 C8 01 00 | 	long	@_do_ge
3ffd8     4C D2 01 00 | 	long	@_do_le
3ffdc     68 CD 01 00 | 	long	@_do_gt
3ffe0     28 D7 01 00 | 	long	@_do_lt
3ffe4     E0 E5 01 00 | 	long	@_do_ne
3ffe8     FC 90 01 00 | 	long	@_do_rnd
3ffec     DC E2 00 00 | 	long	@_do_brun
3fff0     78 DC 00 00 | 	long	@_do_beep
3fff4     B0 0E 01 00 | 	long	@_do_dir
3fff8     D8 5F 01 00 | 	long	@_do_paper
3fffc     38 33 01 00 | 	long	@_do_ink
40000     4C 1A 01 00 | 	long	@_do_font
40004     54 50 01 00 | 	long	@_do_mode
40008     00 54 01 00 | 	long	@_do_mouse
4000c     04 28 01 00 | 	long	@_do_gettime
40010     BC F5 00 00 | 	long	@_do_cursor
40014     78 F3 00 00 | 	long	@_do_click
40018     BC 54 01 00 | 	long	@_do_mousex
4001c     00 55 01 00 | 	long	@_do_mousey
40020     34 54 01 00 | 	long	@_do_mousek
40024     78 54 01 00 | 	long	@_do_mousew
40028     FC A0 01 00 | 	long	@_do_sin
4002c     34 A4 01 00 | 	long	@_do_stick
40030     C4 A5 01 00 | 	long	@_do_strig
40034     54 A2 01 00 | 	long	@_do_sprite
40038     D8 09 01 00 | 	long	@_do_defsprite
4003c     B0 26 01 00 | 	long	@_do_getpixel
40040     70 AB 01 00 | 	long	@_do_waitclock
40044     A4 DF 01 00 | 	long	@_do_negative
40048     A8 7E 01 00 | 	long	@_do_rdpin
4004c     20 93 01 00 | 	long	@_do_rqpin
40050     D0 61 01 00 | 	long	@_do_pinread
40054     D4 AC 01 00 | 	long	@_do_wrpin
40058     54 AD 01 00 | 	long	@_do_wxpin
4005c     D4 AD 01 00 | 	long	@_do_wypin
40060     10 61 01 00 | 	long	@_do_pinfloat
40064     90 61 01 00 | 	long	@_do_pinlo
40068     50 61 01 00 | 	long	@_do_pinhi
4006c     54 62 01 00 | 	long	@_do_pinstart
40070     64 63 01 00 | 	long	@_do_pintoggle
40074     48 72 01 00 | 	long	@_do_position
40078     98 F4 00 00 | 	long	@_do_cos
4007c     54 A7 01 00 | 	long	@_do_tan
40080     60 DB 00 00 | 	long	@_do_atn
40084     50 DA 00 00 | 	long	@_do_asin
40088     E0 D7 00 00 | 	long	@_do_acos
4008c     40 A3 01 00 | 	long	@_do_sqr
40090     38 19 01 00 | 	long	@_do_fill
40094     EC 00 01 00 | 	long	@_do_defsnd
40098     F0 F5 00 00 | 	long	@_do_defenv
4009c     80 7E 01 00 | 	long	@_do_rad
400a0     4C 0D 01 00 | 	long	@_do_deg
400a4     B8 33 01 00 | 	long	@_do_int
400a8     2C 64 01 00 | 	long	@_do_play
400ac     54 9B 01 00 | 	long	@_do_setdelay
400b0     FC 9B 01 00 | 	long	@_do_setenv
400b4     A4 9C 01 00 | 	long	@_do_setlen
400b8     4C 9D 01 00 | 	long	@_do_setpan
400bc     9C 9E 01 00 | 	long	@_do_setvol
400c0     44 9F 01 00 | 	long	@_do_setwave
400c4     F4 9D 01 00 | 	long	@_do_setsustain
400c8     28 8E 01 00 | 	long	@_do_release
400cc     9C 24 01 00 | 	long	@_do_getenvsustain
400d0     38 71 01 00 | 	long	@_do_poke
400d4     48 15 01 00 | 	long	@_do_dpoke
400d8     F0 4C 01 00 | 	long	@_do_lpoke
400dc     60 60 01 00 | 	long	@_do_peek
400e0     9C 14 01 00 | 	long	@_do_dpeek
400e4     44 4C 01 00 | 	long	@_do_lpeek
400e8     94 1E 01 00 | 	long	@_do_fre
400ec     AC 25 01 00 | 	long	@_do_getnotevalue
400f0     14 BA 01 00 | 	long	@_do_getaddr
400f4     60 30 01 00 | 	long	@_do_inkey
400f8     60 D7 00 00 | 	long	@_do_abs
400fc     18 2E 01 00 | 	long	@_do_hex
40100     90 DF 00 00 | 	long	@_do_bin
40104     64 A8 01 00 | 	long	@_do_val
40108     00 F1 00 00 | 	long	@_do_chr
4010c     F0 D8 00 00 | 	long	@_do_asc
40110     7C 40 01 00 | 	long	@_do_left
40114     70 8F 01 00 | 	long	@_do_right
40118     C8 4D 01 00 | 	long	@_do_mid
4011c     08 42 01 00 | 	long	@_do_len
40120     6C 28 01 00 | 	long	@_do_gosub
40124     C4 8E 01 00 | 	long	@_do_return
40128     38 17 01 00 | 	long	@_do_end
4012c     10 72 01 00 | 	long	@_do_pop
40130     C8 4A 01 00 | 	long	@_do_log
40134     F4 EE 00 00 | 	long	@_do_changevol
40138     D4 EF 00 00 | 	long	@_do_changewav
4013c     E4 ED 00 00 | 	long	@_do_changepan
40140     C8 EA 00 00 | 	long	@_do_changefreq
40144     EC 9F 01 00 | 	long	@_do_shutup
40148     CC 92 01 00 | 	long	@_do_round
4014c     6C 17 01 00 | 	long	@_do_enter
40150     C0 5C 01 00 | 	long	@_do_open
40154     A4 F3 00 00 | 	long	@_do_close
40158     F8 1E 01 00 | 	long	@_do_get
4015c     40 79 01 00 | 	long	@_do_put
40160     14 E5 00 00 | 	long	@_do_cd
40164     74 0D 01 00 | 	long	@_do_delete
40168     94 4F 01 00 | 	long	@_do_mkdir
4016c     8C DD 00 00 | 	long	@_do_blit
40170     60 1E 01 00 | 	long	@_do_framebuf
40174     9C 5B 01 00 | 	long	@_do_on
40178     0C A2 01 00 | 	long	@_do_skip
4017c     74 34 01 00 | 	long	@_do_input
40180     0C 81 01 00 | 	long	@_do_read
40184     C0 8E 01 00 | 	long	@_do_restore
40188     0C 33 02 00 | 	long	@_hg010b_spin2_putchar
4018c     AC 48 03 00 | 	long	@__struct___bas_wrap_sender_tx
40190     F0 48 03 00 | 	long	@__struct___bas_wrap_sender_rx
40194     38 49 03 00 | 	long	@__struct___bas_wrap_sender_close
40198     DC 47 03 00 | 	long	@__struct__s_vfs_file_t_putchar
4019c     4C 48 03 00 | 	long	@__struct__s_vfs_file_t_getchar
401a0     94 47 03 00 | 	long	@___strs_cl_pfunc
401a4     28 A5 02 00 | 	long	@__system____root_opendir
401a8     C4 A5 02 00 | 	long	@__system____root_closedir
401ac     40 A5 02 00 | 	long	@__system____root_readdir
401b0     CC A5 02 00 | 	long	@__system____root_stat
401b4     18 9E 02 00 | 	long	@__system____default_putc
401b8     9C 9D 02 00 | 	long	@__system____default_getc
401bc     C0 9E 02 00 | 	long	@__system____default_flush
401c0     98 32 03 00 | 	long	@_fatfs_cc_v_close
401c4     B4 36 03 00 | 	long	@_fatfs_cc_v_read
401c8     C8 37 03 00 | 	long	@_fatfs_cc_v_write
401cc     A8 38 03 00 | 	long	@_fatfs_cc_v_lseek
401d0     30 39 03 00 | 	long	@_fatfs_cc_v_ioctl
401d4     84 39 03 00 | 	long	@_fatfs_cc_v_open
401d8     FC 31 03 00 | 	long	@_fatfs_cc_v_creat
401dc     DC 32 03 00 | 	long	@_fatfs_cc_v_opendir
401e0     50 33 03 00 | 	long	@_fatfs_cc_v_closedir
401e4     90 33 03 00 | 	long	@_fatfs_cc_v_readdir
401e8     C4 34 03 00 | 	long	@_fatfs_cc_v_stat
401ec     44 39 03 00 | 	long	@_fatfs_cc_v_mkdir
401f0     64 39 03 00 | 	long	@_fatfs_cc_v_rmdir
401f4     54 39 03 00 | 	long	@_fatfs_cc_v_remove
401f8     74 39 03 00 | 	long	@_fatfs_cc_v_rename
401fc     94 3A 03 00 | 	long	@_fatfs_cc_v_init
40200     9C 3A 03 00 | 	long	@_fatfs_cc_v_deinit
40204     6C 4F 02 00 | 	long	@__system___tx
40208     AC 4F 02 00 | 	long	@__system___rx
4020c     38 B1 02 00 | 	long	@__system___rxtxioctl_0757
40210     90 B1 02 00 | 	long	@__system____dummy_flush_0758
40214     64 3A 03 00 | 	long	@_fatfs_cc_v_flush
40218                 | __heap_base
40218     00 00 00 00 
      ...             
57918     00 00 00 00 
5791c     00 00 00 00 | 	long	0[24002]
57920                 | objmem
57920     00 00 00 00 
      ...             
61d74     00 00 00 00 
61d78     00 00 00 00 | 	long	0[10519]
61d7c                 | stackspace
61d7c     00 00 00 00 | 	long	0[1]
61d80 100             | 	org	COG_BSS_START
61d80 100             | _var01
61d80 100             | 	res	1
61d80 101             | _var02
61d80 101             | 	res	1
61d80 102             | _var03
61d80 102             | 	res	1
61d80 103             | _var04
61d80 103             | 	res	1
61d80 104             | _var05
61d80 104             | 	res	1
61d80 105             | _var06
61d80 105             | 	res	1
61d80 106             | _var07
61d80 106             | 	res	1
61d80 107             | _var08
61d80 107             | 	res	1
61d80 108             | _var09
61d80 108             | 	res	1
61d80 109             | arg01
61d80 109             | 	res	1
61d80 10a             | arg02
61d80 10a             | 	res	1
61d80 10b             | arg03
61d80 10b             | 	res	1
61d80 10c             | arg04
61d80 10c             | 	res	1
61d80 10d             | arg05
61d80 10d             | 	res	1
61d80 10e             | arg06
61d80 10e             | 	res	1
61d80 10f             | arg07
61d80 10f             | 	res	1
61d80 110             | arg08
61d80 110             | 	res	1
61d80 111             | arg09
61d80 111             | 	res	1
61d80 112             | arg10
61d80 112             | 	res	1
61d80 113             | local01
61d80 113             | 	res	1
61d80 114             | local02
61d80 114             | 	res	1
61d80 115             | local03
61d80 115             | 	res	1
61d80 116             | local04
61d80 116             | 	res	1
61d80 117             | local05
61d80 117             | 	res	1
61d80 118             | local06
61d80 118             | 	res	1
61d80 119             | local07
61d80 119             | 	res	1
61d80 11a             | local08
61d80 11a             | 	res	1
61d80 11b             | local09
61d80 11b             | 	res	1
61d80 11c             | local10
61d80 11c             | 	res	1
61d80 11d             | local11
61d80 11d             | 	res	1
61d80 11e             | local12
61d80 11e             | 	res	1
61d80 11f             | local13
61d80 11f             | 	res	1
61d80 120             | local14
61d80 120             | 	res	1
61d80 121             | local15
61d80 121             | 	res	1
61d80 122             | local16
61d80 122             | 	res	1
61d80 123             | local17
61d80 123             | 	res	1
61d80 124             | local18
61d80 124             | 	res	1
61d80 125             | local19
61d80 125             | 	res	1
61d80 126             | local20
61d80 126             | 	res	1
61d80 127             | local21
61d80 127             | 	res	1
61d80 128             | local22
61d80 128             | 	res	1
61d80 129             | local23
61d80 129             | 	res	1
61d80 12a             | local24
61d80 12a             | 	res	1
61d80 12b             | local25
61d80 12b             | 	res	1
61d80 12c             | local26
61d80 12c             | 	res	1
61d80 12d             | local27
61d80 12d             | 	res	1
61d80 12e             | local28
61d80 12e             | 	res	1
61d80 12f             | local29
61d80 12f             | 	res	1
61d80 130             | local30
61d80 130             | 	res	1
61d80 131             | local31
61d80 131             | 	res	1
61d80 132             | local32
61d80 132             | 	res	1
61d80 133             | local33
61d80 133             | 	res	1
61d80 134             | local34
61d80 134             | 	res	1
61d80 135             | local35
61d80 135             | 	res	1
61d80 136             | local36
61d80 136             | 	res	1
61d80 137             | local37
61d80 137             | 	res	1
61d80 138             | local38
61d80 138             | 	res	1
61d80 139             | local39
61d80 139             | 	res	1
61d80 13a             | local40
61d80 13a             | 	res	1
61d80 13b             | local41
61d80 13b             | 	res	1
61d80 13c             | local42
61d80 13c             | 	res	1
61d80 13d             | local43
61d80 13d             | 	res	1
61d80 13e             | local44
61d80 13e             | 	res	1
61d80 13f             | local45
61d80 13f             | 	res	1
61d80 140             | local46
61d80 140             | 	res	1
61d80 141             | local47
61d80 141             | 	res	1
61d80 142             | local48
61d80 142             | 	res	1
61d80 143             | local49
61d80 143             | 	res	1
61d80 144             | muldiva_
61d80 144             | 	res	1
61d80 145             | muldivb_
61d80 145             | 	res	1
61d80 146             | 	fit	480
61d80 146             | 
