00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 14 E4 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 41 83 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 40 81 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 41 81 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 82 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 80 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 40 81 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 41 83 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 9C C8 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed C8 C5 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 A4 B6 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 A8 B8 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 00 B4 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 0C 21 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 E8 BF 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 74 52 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 24 7A 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa DC 77 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb B4 89 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc D0 5A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     54 F4 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     88 05 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     EC E5 05 F1 | 	add	objptr, ##41964
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     EC E5 85 F1 | 	sub	objptr, ##41964
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     80 08 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     D4 0F B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     CC 09 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     90 07 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     9C D9 B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     EC E5 05 F1 | 	add	objptr, ##41964
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     EC E5 85 F1 | 	sub	objptr, ##41964
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     94 D7 B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     34 D7 B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F4 E5 05 F1 | 	add	objptr, ##41972
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     B6 E5 85 F1 | 	sub	objptr, ##41910
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     B8 E5 05 F1 | 	add	objptr, ##41912
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     B6 E5 85 F1 | 	sub	objptr, ##41910
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     C4 D6 B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     9C EE B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F4 E5 05 F1 | 	add	objptr, ##41972
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F4 E5 85 F1 | 	sub	objptr, ##41972
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     B8 F1 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     BC 04 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     10 0C B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     0C 06 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     88 01 00 FF 
00ccc     66 49 06 F6 | 	mov	local22, ##@LR__5097
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     58 D5 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     EC 2A B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     FC 08 B2 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     08 F6 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     38 F8 B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     48 03 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     9C 0A B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     98 04 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     F4 D3 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     78 ED B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     6C ED B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     FC EC B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     C8 EC B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     E8 EC B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     D8 EC B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     98 D2 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     44 D2 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     14 D2 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F4 E5 05 F1 | 	add	objptr, ##41972
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     B6 E5 85 F1 | 	sub	objptr, ##41910
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     B8 E5 05 F1 | 	add	objptr, ##41912
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     B6 E5 85 F1 | 	sub	objptr, ##41910
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     AC D1 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     84 E9 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F4 E5 05 F1 | 	add	objptr, ##41972
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F4 E5 85 F1 | 	sub	objptr, ##41972
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     60 EA B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     94 D0 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     40 D0 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     10 D0 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F4 E5 05 F1 | 	add	objptr, ##41972
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     B6 E5 85 F1 | 	sub	objptr, ##41910
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     B8 E5 05 F1 | 	add	objptr, ##41912
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     B6 E5 85 F1 | 	sub	objptr, ##41910
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     A8 CF B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     80 E7 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F4 E5 05 F1 | 	add	objptr, ##41972
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F4 E5 85 F1 | 	sub	objptr, ##41972
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     88 01 00 FF 
01328     67 49 06 F6 | 	mov	local22, ##@LR__5098
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 34 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1A 29 02 F6 | 	mov	local06, local12
01394     14 13 02 F6 | 	mov	arg01, local06
01398     A8 E8 B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 32 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 34 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1A 29 02 F6 | 	mov	local06, local12
013f4     14 13 02 F6 | 	mov	arg01, local06
013f8     48 E8 B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 32 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 28 E2 FA | 	rdword	local06, objptr
0140c     02 28 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 28 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 2C 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     16 2B 02 F6 | 	mov	local07, local08
01434     15 29 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 28 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 28 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 34 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1A 29 02 F6 | 	mov	local06, local12
01470     14 13 02 F6 | 	mov	arg01, local06
01474     9C E7 B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 32 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 28 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     14 13 02 F6 | 	mov	arg01, local06
014d0     40 E7 B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 32 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 28 02 FB | 	rdlong	local06, objptr
014e8     14 35 22 F6 | 	not	local12, local06
014ec     F2 34 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 34 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 28 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     8C D5 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 28 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     7C D5 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 24 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     50 03 B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     28 03 B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     00 03 B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 1E 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 20 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     10 13 02 F6 | 	mov	arg01, local02
01650     58 F8 B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     10 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     A8 F8 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 22 02 F6 | 	mov	local03, result1
0166c     10 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     98 F8 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 22 06 F1 | 	add	local03, ##49152
01680     0F 22 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     11 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     0F 23 02 F6 | 	mov	local03, local01
016a4     02 22 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 22 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     11 15 62 FC | 	wrlong	arg02, local03
016c0     0F 23 02 F6 | 	mov	local03, local01
016c4     02 22 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 22 02 F1 | 	add	local03, objptr
016d0     10 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     FC F7 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     11 FB 61 FC | 	wrlong	result1, local03
016e4     01 1E 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 20 06 F1 | 	add	local02, #1
016ec     07 20 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 1E 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     0F 23 02 F6 | 	mov	local03, local01
01704     02 22 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 22 02 F1 | 	add	local03, objptr
01714     11 01 68 FC | 	wrlong	#0, local03
01718     0F 23 02 F6 | 	mov	local03, local01
0171c     02 22 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 22 02 F1 | 	add	local03, objptr
01728     11 01 68 FC | 	wrlong	#0, local03
0172c     01 1E 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     60 23 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     98 22 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 1E 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 20 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     10 23 02 F6 | 	mov	local03, local02
017c4     02 22 66 F0 | 	shl	local03, #2
017c8     A7 22 02 F1 | 	add	local03, fp
017cc     11 01 68 FC | 	wrlong	#0, local03
017d0     01 20 06 F1 | 	add	local02, #1
017d4     7E 20 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 20 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     10 25 02 F6 | 	mov	local04, local02
017f4     03 24 66 F0 | 	shl	local04, #3
017f8     F2 24 02 F1 | 	add	local04, objptr
017fc     88 01 00 FF 
01800     68 17 06 F6 | 	mov	arg03, ##@LR__5099
01804     12 17 62 FC | 	wrlong	arg03, local04
01808     10 25 02 F6 | 	mov	local04, local02
0180c     03 24 66 F0 | 	shl	local04, #3
01810     F2 26 02 F6 | 	mov	local05, objptr
01814     F2 24 02 F1 | 	add	local04, objptr
01818     00 28 06 F6 | 	mov	local06, #0
0181c     04 24 06 F1 | 	add	local04, #4
01820     12 01 68 FC | 	wrlong	#0, local04
01824     01 20 06 F1 | 	add	local02, #1
01828     7E 20 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     88 22 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     C0 21 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     88 01 00 FF 
01860     69 25 06 F6 | 	mov	local04, ##@LR__5100
01864     1A 00 00 FF 
01868     DC E5 05 F1 | 	add	objptr, ##13788
0186c     F2 24 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     DC E5 85 F1 | 	sub	objptr, ##13788
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 2B 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     15 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 2A 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 2B 8A F1 | 	sub	local07, arg01 wz
0189c     51 00 00 FF 
018a0     FC E5 05 F1 | 	add	objptr, ##41980
018a4     F2 2A 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     51 00 00 FF 
018ac     FC E5 85 F1 | 	sub	objptr, ##41980
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 2C 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 20 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 2B 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     15 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 2A 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 2B 82 F1 | 	sub	local07, arg01
018e8     15 2F 02 F6 | 	mov	local09, local07
018ec     01 2E 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     17 21 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     10 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     40 1E B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     88 01 00 FF 
01920     6A 15 06 F6 | 	mov	arg02, ##@LR__5101
01924     C4 FC B1 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 2C 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     10 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     00 1E B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     88 01 00 FF 
01960     6C 15 06 F6 | 	mov	arg02, ##@LR__5102
01964     84 FC B1 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 2C 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     10 25 02 F6 | 	mov	local04, local02
01978     03 24 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 26 02 F6 | 	mov	local05, objptr
01988     F2 24 02 F1 | 	add	local04, objptr
0198c     04 24 06 F1 | 	add	local04, #4
01990     12 2D 62 FC | 	wrlong	local08, local04
01994     01 20 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 20 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     10 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     90 1D B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     88 01 00 FF 
019d0     6E 31 06 F6 | 	mov	local10, ##@LR__5103
019d4     18 15 02 F6 | 	mov	arg02, local10
019d8     10 FC B1 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     10 27 02 F6 | 	mov	local05, local02
019e8     03 26 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 28 02 F6 | 	mov	local06, objptr
019f8     F2 26 02 F1 | 	add	local05, objptr
019fc     04 26 06 F1 | 	add	local05, #4
01a00     13 33 02 FB | 	rdlong	local11, local05
01a04     04 26 86 F1 | 	sub	local05, #4
01a08     19 35 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     51 00 00 FF 
01a1c     FC E5 05 F1 | 	add	objptr, ##41980
01a20     F2 36 02 FB | 	rdlong	local13, objptr
01a24     51 00 00 FF 
01a28     FC E5 85 F1 | 	sub	objptr, ##41980
01a2c     1B 39 02 F6 | 	mov	local14, local13
01a30     1C 21 52 F2 | 	cmps	local02, local14 wc
01a34     01 20 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     51 00 00 FF 
01a40     FC E5 05 F1 | 	add	objptr, ##41980
01a44     F2 24 02 FB | 	rdlong	local04, objptr
01a48     51 00 00 FF 
01a4c     FC E5 85 F1 | 	sub	objptr, ##41980
01a50     12 21 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 28 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     14 13 02 F6 | 	mov	arg01, local06
01a70     09 2B 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     15 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 2A 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 2B 82 F1 | 	sub	local07, arg01
01a88     15 27 02 F6 | 	mov	local05, local07
01a8c     13 15 02 F6 | 	mov	arg02, local05
01a90     10 15 82 F1 | 	sub	arg02, local02
01a94     14 13 02 F6 | 	mov	arg01, local06
01a98     2C 1C B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     2C 20 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     64 1F B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     00 E4 05 F1 | 	add	objptr, ##41984
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E4 E5 85 F1 | 	sub	objptr, ##13796
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 20 86 F1 | 	sub	local02, #1
01ad0     10 15 02 F6 | 	mov	arg02, local02
01ad4     68 1B B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     F0 1F B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     28 1F B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     88 01 00 FF 
01b04     70 25 06 F6 | 	mov	local04, ##@LR__5104
01b08     52 00 00 FF 
01b0c     00 E4 05 F1 | 	add	objptr, ##41984
01b10     F2 24 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     00 E4 85 F1 | 	sub	objptr, ##41984
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 24 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     00 E4 05 F1 | 	add	objptr, ##41984
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     00 E4 85 F1 | 	sub	objptr, ##41984
01b50     88 01 00 FF 
01b54     71 29 06 F6 | 	mov	local06, ##@LR__5105
01b58     14 15 02 F6 | 	mov	arg02, local06
01b5c     8C FA B1 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 24 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     00 E4 05 F1 | 	add	objptr, ##41984
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     00 E4 85 F1 | 	sub	objptr, ##41984
01bb0     88 01 00 FF 
01bb4     72 15 06 F6 | 	mov	arg02, ##@LR__5106
01bb8     30 FA B1 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 24 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 24 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     00 E4 05 F1 | 	add	objptr, ##41984
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     00 E4 85 F1 | 	sub	objptr, ##41984
01c08     88 01 00 FF 
01c0c     73 15 06 F6 | 	mov	arg02, ##@LR__5107
01c10     D8 F9 B1 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 24 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 24 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     00 E4 05 F1 | 	add	objptr, ##41984
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     00 E4 85 F1 | 	sub	objptr, ##41984
01c60     88 01 00 FF 
01c64     74 15 06 F6 | 	mov	arg02, ##@LR__5108
01c68     80 F9 B1 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 20 06 F6 | 	mov	local02, #0
01c94     01 3A 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 20 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     10 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     9C 1A B2 FD | 	call	#__system__Mid_S
01cbc     FD 3C 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     1E 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     1D 23 02 F6 | 	mov	local03, local15
01cd4     02 22 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 22 02 F1 | 	add	local03, fp
01ce0     11 21 62 FC | 	wrlong	local02, local03
01ce4     01 3A 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     51 00 00 FF 
01cf0     FC E5 05 F1 | 	add	objptr, ##41980
01cf4     F2 24 02 FB | 	rdlong	local04, objptr
01cf8     51 00 00 FF 
01cfc     FC E5 85 F1 | 	sub	objptr, ##41980
01d00     12 21 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     1D 23 02 F6 | 	mov	local03, local15
01d0c     02 22 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 30 02 F6 | 	mov	local10, fp
01d18     A7 22 02 F1 | 	add	local03, fp
01d1c     11 21 62 FC | 	wrlong	local02, local03
01d20     00 3E 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 20 06 F6 | 	mov	local02, #0
01d28     1D 41 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     20 21 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     10 23 02 F6 | 	mov	local03, local02
01d3c     02 22 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 22 02 F1 | 	add	local03, fp
01d48     11 27 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     08 E4 05 F1 | 	add	objptr, ##41992
01d54     F2 26 62 FC | 	wrlong	local05, objptr
01d58     10 23 02 F6 | 	mov	local03, local02
01d5c     01 22 06 F1 | 	add	local03, #1
01d60     02 22 66 F0 | 	shl	local03, #2
01d64     A7 30 02 F6 | 	mov	local10, fp
01d68     A7 22 02 F1 | 	add	local03, fp
01d6c     11 27 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 26 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 24 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     08 E4 85 F1 | 	sub	objptr, ##41992
01d88     01 24 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     EC E5 05 F1 | 	add	objptr, ##13804
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     08 E4 85 F1 | 	sub	objptr, ##41992
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     9C 19 B2 FD | 	call	#__system__Mid_S
01dbc     FD 42 02 F6 | 	mov	local19, result1
01dc0     88 01 00 FF 
01dc4     75 15 06 F6 | 	mov	arg02, ##@LR__5109
01dc8     21 13 02 F6 | 	mov	arg01, local19
01dcc     1C F8 B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     1F 31 02 F6 | 	mov	local10, local17
01ddc     03 30 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 30 02 F1 | 	add	local10, objptr
01dec     18 43 62 FC | 	wrlong	local19, local10
01df0     01 3E 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     EC E5 05 F1 | 	add	objptr, ##13804
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 32 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     08 E4 85 F1 | 	sub	objptr, ##41992
01e30     19 35 02 F6 | 	mov	local12, local11
01e34     1A 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     18 19 B2 FD | 	call	#__system__Mid_S
01e40     FD 42 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     88 01 00 FF 
01e48     76 15 06 F6 | 	mov	arg02, ##@LR__5110
01e4c     21 13 02 F6 | 	mov	arg01, local19
01e50     98 F7 B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     1F 31 02 F6 | 	mov	local10, local17
01e60     03 30 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 30 02 F1 | 	add	local10, objptr
01e70     18 43 62 FC | 	wrlong	local19, local10
01e74     01 3E 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 20 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 24 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 32 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     19 13 02 F6 | 	mov	arg01, local11
01ed0     64 4A B0 FD | 	call	#_isdec
01ed4     FD 34 02 F6 | 	mov	local12, result1
01ed8     1A 29 22 F6 | 	not	local06, local12
01edc     00 28 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     1F 21 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     10 27 02 F6 | 	mov	local05, local02
01ef8     01 26 86 F1 | 	sub	local05, #1
01efc     03 26 66 F0 | 	shl	local05, #3
01f00     F2 26 02 F1 | 	add	local05, objptr
01f04     13 25 02 FB | 	rdlong	local04, local05
01f08     10 29 02 F6 | 	mov	local06, local02
01f0c     01 28 86 F1 | 	sub	local06, #1
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     04 28 06 F1 | 	add	local06, #4
01f1c     14 23 02 FB | 	rdlong	local03, local06
01f20     10 29 02 F6 | 	mov	local06, local02
01f24     03 28 66 F0 | 	shl	local06, #3
01f28     F2 34 02 F6 | 	mov	local12, objptr
01f2c     F2 28 02 F1 | 	add	local06, objptr
01f30     14 25 62 FC | 	wrlong	local04, local06
01f34     10 33 02 F6 | 	mov	local11, local02
01f38     19 37 02 F6 | 	mov	local13, local11
01f3c     03 36 66 F0 | 	shl	local13, #3
01f40     F2 36 02 F1 | 	add	local13, objptr
01f44     04 36 06 F1 | 	add	local13, #4
01f48     1B 23 62 FC | 	wrlong	local03, local13
01f4c     01 20 86 F1 | 	sub	local02, #1
01f50     01 20 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     88 01 00 FF 
01f5c     77 25 06 F6 | 	mov	local04, ##@LR__5111
01f60     F2 24 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 3E 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 20 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     10 27 02 F6 | 	mov	local05, local02
01f78     03 26 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 26 02 F1 | 	add	local05, objptr
01f88     13 13 02 FB | 	rdlong	arg01, local05
01f8c     88 01 00 FF 
01f90     79 15 06 F6 | 	mov	arg02, ##@LR__5112
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     4C F6 B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 20 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     10 45 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     10 31 02 F6 | 	mov	local10, local02
01fb4     01 30 06 F1 | 	add	local10, #1
01fb8     03 30 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 30 02 F1 | 	add	local10, objptr
01fc8     18 43 02 FB | 	rdlong	local19, local10
01fcc     22 31 02 F6 | 	mov	local10, local20
01fd0     03 30 66 F0 | 	shl	local10, #3
01fd4     F2 30 02 F1 | 	add	local10, objptr
01fd8     22 33 02 F6 | 	mov	local11, local20
01fdc     19 39 02 F6 | 	mov	local14, local11
01fe0     03 38 66 F0 | 	shl	local14, #3
01fe4     F2 38 02 F1 | 	add	local14, objptr
01fe8     1C 13 02 FB | 	rdlong	arg01, local14
01fec     21 35 02 F6 | 	mov	local12, local19
01ff0     1A 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     20 F6 B1 FD | 	call	#__system___string_concat
02000     18 FB 61 FC | 	wrlong	result1, local10
02004     10 3B 02 F6 | 	mov	local15, local02
02008     01 3A 06 F1 | 	add	local15, #1
0200c     1F 47 02 F6 | 	mov	local21, local17
02010     01 46 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     23 3B 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     1D 27 02 F6 | 	mov	local05, local15
02024     01 26 06 F1 | 	add	local05, #1
02028     03 26 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 26 02 F1 | 	add	local05, objptr
02038     13 25 02 FB | 	rdlong	local04, local05
0203c     1D 29 02 F6 | 	mov	local06, local15
02040     01 28 06 F1 | 	add	local06, #1
02044     03 28 66 F0 | 	shl	local06, #3
02048     F2 28 02 F1 | 	add	local06, objptr
0204c     04 28 06 F1 | 	add	local06, #4
02050     14 23 02 FB | 	rdlong	local03, local06
02054     1D 29 02 F6 | 	mov	local06, local15
02058     03 28 66 F0 | 	shl	local06, #3
0205c     F2 34 02 F6 | 	mov	local12, objptr
02060     F2 28 02 F1 | 	add	local06, objptr
02064     14 25 62 FC | 	wrlong	local04, local06
02068     1D 33 02 F6 | 	mov	local11, local15
0206c     19 37 02 F6 | 	mov	local13, local11
02070     03 36 66 F0 | 	shl	local13, #3
02074     F2 36 02 F1 | 	add	local13, objptr
02078     04 36 06 F1 | 	add	local13, #4
0207c     1B 23 62 FC | 	wrlong	local03, local13
02080     01 3A 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 3E 86 F1 | 	sub	local17, #1
02094     88 01 00 FF 
02098     7B 15 06 F6 | 	mov	arg02, ##@LR__5113
0209c     21 13 02 F6 | 	mov	arg01, local19
020a0     48 F5 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     88 01 00 FF 
020b4     7D 15 06 F6 | 	mov	arg02, ##@LR__5114
020b8     21 13 02 F6 | 	mov	arg01, local19
020bc     2C F5 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 3E 06 51 |  if_ne	add	local17, #1
020c8     01 20 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     1F 21 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 20 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     10 27 02 F6 | 	mov	local05, local02
020dc     03 26 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 28 02 F6 | 	mov	local06, objptr
020ec     F2 26 02 F1 | 	add	local05, objptr
020f0     13 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     C4 15 B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     88 01 00 FF 
0210c     7F 15 06 F6 | 	mov	arg02, ##@LR__5115
02110     D8 F4 B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     10 29 02 F6 | 	mov	local06, local02
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 34 02 F6 | 	mov	local12, objptr
02134     F2 28 02 F1 | 	add	local06, objptr
02138     14 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     F4 14 B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     88 01 00 FF 
02154     81 15 06 F6 | 	mov	arg02, ##@LR__5116
02158     90 F4 B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     10 31 02 F6 | 	mov	local10, local02
02168     03 30 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 30 02 F1 | 	add	local10, objptr
02178     10 39 02 F6 | 	mov	local14, local02
0217c     03 38 66 F0 | 	shl	local14, #3
02180     F2 38 02 F1 | 	add	local14, objptr
02184     1C 29 02 FB | 	rdlong	local06, local14
02188     10 37 02 F6 | 	mov	local13, local02
0218c     01 36 06 F1 | 	add	local13, #1
02190     03 36 66 F0 | 	shl	local13, #3
02194     F2 36 02 F1 | 	add	local13, objptr
02198     1B 35 02 FB | 	rdlong	local12, local13
0219c     10 49 02 F6 | 	mov	local22, local02
021a0     01 48 06 F1 | 	add	local22, #1
021a4     24 4B 02 F6 | 	mov	local23, local22
021a8     03 4A 66 F0 | 	shl	local23, #3
021ac     F2 4C 02 F6 | 	mov	local24, objptr
021b0     F2 4A 02 F1 | 	add	local23, objptr
021b4     25 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 2B 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 2A 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 2B 82 F1 | 	sub	local07, arg01
021d8     15 33 02 F6 | 	mov	local11, local07
021dc     01 32 86 F1 | 	sub	local11, #1
021e0     1A 13 02 F6 | 	mov	arg01, local12
021e4     19 15 02 F6 | 	mov	arg02, local11
021e8     DC 14 B2 FD | 	call	#__system__Right_S
021ec     FD 34 02 F6 | 	mov	local12, result1
021f0     14 13 02 F6 | 	mov	arg01, local06
021f4     1A 15 02 F6 | 	mov	arg02, local12
021f8     24 F4 B1 FD | 	call	#__system___string_concat
021fc     FD 28 02 F6 | 	mov	local06, result1
02200     18 29 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     10 3B 02 F6 | 	mov	local15, local02
02208     01 3A 06 F1 | 	add	local15, #1
0220c     1F 4F 02 F6 | 	mov	local25, local17
02210     01 4E 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     27 3B 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     1D 27 02 F6 | 	mov	local05, local15
02224     01 26 06 F1 | 	add	local05, #1
02228     03 26 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 26 02 F1 | 	add	local05, objptr
02238     13 25 02 FB | 	rdlong	local04, local05
0223c     1D 29 02 F6 | 	mov	local06, local15
02240     01 28 06 F1 | 	add	local06, #1
02244     03 28 66 F0 | 	shl	local06, #3
02248     F2 28 02 F1 | 	add	local06, objptr
0224c     04 28 06 F1 | 	add	local06, #4
02250     14 23 02 FB | 	rdlong	local03, local06
02254     1D 29 02 F6 | 	mov	local06, local15
02258     03 28 66 F0 | 	shl	local06, #3
0225c     F2 34 02 F6 | 	mov	local12, objptr
02260     F2 28 02 F1 | 	add	local06, objptr
02264     14 25 62 FC | 	wrlong	local04, local06
02268     1D 33 02 F6 | 	mov	local11, local15
0226c     19 37 02 F6 | 	mov	local13, local11
02270     03 36 66 F0 | 	shl	local13, #3
02274     F2 36 02 F1 | 	add	local13, objptr
02278     04 36 06 F1 | 	add	local13, #4
0227c     1B 23 62 FC | 	wrlong	local03, local13
02280     01 3A 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 20 86 F1 | 	sub	local02, #1
02294     01 3E 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 20 06 F1 | 	add	local02, #1
0229c     1F 21 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 20 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     10 31 02 F6 | 	mov	local10, local02
022ac     03 30 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 30 02 F1 | 	add	local10, objptr
022bc     18 51 02 FB | 	rdlong	local26, local10
022c0     10 31 02 F6 | 	mov	local10, local02
022c4     01 30 06 F1 | 	add	local10, #1
022c8     03 30 66 F0 | 	shl	local10, #3
022cc     F2 30 02 F1 | 	add	local10, objptr
022d0     18 53 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     88 01 00 FF 
022d8     83 15 06 F6 | 	mov	arg02, ##@LR__5117
022dc     28 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     00 F3 B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     88 01 00 FF 
022f8     85 15 06 F6 | 	mov	arg02, ##@LR__5118
022fc     28 13 02 F6 | 	mov	arg01, local26
02300     E8 F2 B1 FD | 	call	#__system___string_cmp
02304     FD 22 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     88 01 00 FF 
02310     87 29 06 F6 | 	mov	local06, ##@LR__5119
02314     28 13 02 F6 | 	mov	arg01, local26
02318     14 15 02 F6 | 	mov	arg02, local06
0231c     CC F2 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     88 01 00 FF 
0232c     89 35 06 F6 | 	mov	local12, ##@LR__5120
02330     28 13 02 F6 | 	mov	arg01, local26
02334     1A 15 02 F6 | 	mov	arg02, local12
02338     B0 F2 B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     88 01 00 FF 
02348     8B 33 06 F6 | 	mov	local11, ##@LR__5121
0234c     19 35 02 F6 | 	mov	local12, local11
02350     28 13 02 F6 | 	mov	arg01, local26
02354     1A 15 02 F6 | 	mov	arg02, local12
02358     90 F2 B1 FD | 	call	#__system___string_cmp
0235c     FD 28 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     88 01 00 FF 
02368     8D 33 06 F6 | 	mov	local11, ##@LR__5122
0236c     28 13 02 F6 | 	mov	arg01, local26
02370     19 15 02 F6 | 	mov	arg02, local11
02374     74 F2 B1 FD | 	call	#__system___string_cmp
02378     FD 34 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     88 01 00 FF 
02384     8F 39 06 F6 | 	mov	local14, ##@LR__5123
02388     28 13 02 F6 | 	mov	arg01, local26
0238c     1C 15 02 F6 | 	mov	arg02, local14
02390     58 F2 B1 FD | 	call	#__system___string_cmp
02394     FD 32 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     88 01 00 FF 
023a0     91 55 06 F6 | 	mov	local28, ##@LR__5124
023a4     2A 37 02 F6 | 	mov	local13, local28
023a8     29 13 02 F6 | 	mov	arg01, local27
023ac     1B 15 02 F6 | 	mov	arg02, local13
023b0     38 F2 B1 FD | 	call	#__system___string_cmp
023b4     FD 38 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     88 01 00 FF 
023c0     93 55 06 F6 | 	mov	local28, ##@LR__5125
023c4     28 13 02 F6 | 	mov	arg01, local26
023c8     2A 15 02 F6 | 	mov	arg02, local28
023cc     1C F2 B1 FD | 	call	#__system___string_cmp
023d0     FD 36 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     88 01 00 FF 
023dc     95 4B 06 F6 | 	mov	local23, ##@LR__5126
023e0     25 49 02 F6 | 	mov	local22, local23
023e4     29 13 02 F6 | 	mov	arg01, local27
023e8     24 15 02 F6 | 	mov	arg02, local22
023ec     FC F1 B1 FD | 	call	#__system___string_cmp
023f0     FD 54 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     88 01 00 FF 
023fc     97 4B 06 F6 | 	mov	local23, ##@LR__5127
02400     28 13 02 F6 | 	mov	arg01, local26
02404     25 15 02 F6 | 	mov	arg02, local23
02408     E0 F1 B1 FD | 	call	#__system___string_cmp
0240c     FD 48 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     88 01 00 FF 
02418     99 57 06 F6 | 	mov	local29, ##@LR__5128
0241c     2B 4D 02 F6 | 	mov	local24, local29
02420     29 13 02 F6 | 	mov	arg01, local27
02424     26 15 02 F6 | 	mov	arg02, local24
02428     C0 F1 B1 FD | 	call	#__system___string_cmp
0242c     FD 4A 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     88 01 00 FF 
02438     9B 59 06 F6 | 	mov	local30, ##@LR__5129
0243c     2C 57 02 F6 | 	mov	local29, local30
02440     28 13 02 F6 | 	mov	arg01, local26
02444     2B 15 02 F6 | 	mov	arg02, local29
02448     A0 F1 B1 FD | 	call	#__system___string_cmp
0244c     FD 4C 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     88 01 00 FF 
02458     9D 5B 06 F6 | 	mov	local31, ##@LR__5130
0245c     2D 59 02 F6 | 	mov	local30, local31
02460     29 13 02 F6 | 	mov	arg01, local27
02464     2C 15 02 F6 | 	mov	arg02, local30
02468     80 F1 B1 FD | 	call	#__system___string_cmp
0246c     FD 56 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     10 31 02 F6 | 	mov	local10, local02
02478     03 30 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 30 02 F1 | 	add	local10, objptr
02488     29 35 02 F6 | 	mov	local12, local27
0248c     28 13 02 F6 | 	mov	arg01, local26
02490     1A 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     80 F1 B1 FD | 	call	#__system___string_concat
024a0     18 FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     10 3B 02 F6 | 	mov	local15, local02
024a8     01 3A 06 F1 | 	add	local15, #1
024ac     1F 5D 02 F6 | 	mov	local32, local17
024b0     01 5C 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     2E 3B 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     1D 27 02 F6 | 	mov	local05, local15
024c4     01 26 06 F1 | 	add	local05, #1
024c8     03 26 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 26 02 F1 | 	add	local05, objptr
024d8     13 25 02 FB | 	rdlong	local04, local05
024dc     1D 29 02 F6 | 	mov	local06, local15
024e0     01 28 06 F1 | 	add	local06, #1
024e4     03 28 66 F0 | 	shl	local06, #3
024e8     F2 28 02 F1 | 	add	local06, objptr
024ec     04 28 06 F1 | 	add	local06, #4
024f0     14 23 02 FB | 	rdlong	local03, local06
024f4     1D 29 02 F6 | 	mov	local06, local15
024f8     03 28 66 F0 | 	shl	local06, #3
024fc     F2 34 02 F6 | 	mov	local12, objptr
02500     F2 28 02 F1 | 	add	local06, objptr
02504     14 25 62 FC | 	wrlong	local04, local06
02508     1D 33 02 F6 | 	mov	local11, local15
0250c     19 39 02 F6 | 	mov	local14, local11
02510     1C 37 02 F6 | 	mov	local13, local14
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 54 02 F6 | 	mov	local28, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     04 36 06 F1 | 	add	local13, #4
02524     1B 23 62 FC | 	wrlong	local03, local13
02528     04 36 86 F1 | 	sub	local13, #4
0252c     01 3A 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 20 86 F1 | 	sub	local02, #1
02540     01 3E 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 20 06 F1 | 	add	local02, #1
02548     1F 21 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 20 06 F6 | 	mov	local02, #0
02554     1F 5F 02 F6 | 	mov	local33, local17
02558     01 5E 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     2F 21 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     10 31 02 F6 | 	mov	local10, local02
02568     03 30 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 30 02 F1 | 	add	local10, objptr
02578     10 35 02 F6 | 	mov	local12, local02
0257c     1A 33 02 F6 | 	mov	local11, local12
02580     19 39 02 F6 | 	mov	local14, local11
02584     03 38 66 F0 | 	shl	local14, #3
02588     F2 36 02 F6 | 	mov	local13, objptr
0258c     F2 38 02 F1 | 	add	local14, objptr
02590     1C 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     30 15 B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     68 14 B2 FD | 	call	#__system__LTrim_S
025a8     18 FB 61 FC | 	wrlong	result1, local10
025ac     01 20 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 20 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     10 27 02 F6 | 	mov	local05, local02
025c0     03 26 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 26 02 F1 | 	add	local05, objptr
025d0     13 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 2B 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 2A 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 2B 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     1F 25 02 F6 | 	mov	local04, local17
025f8     01 24 86 F1 | 	sub	local04, #1
025fc     12 21 0A F2 | 	cmp	local02, local04 wz
02600     01 3E 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     1F 25 02 F6 | 	mov	local04, local17
0260c     01 24 86 F1 | 	sub	local04, #1
02610     12 21 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     10 3B 02 F6 | 	mov	local15, local02
0261c     1F 61 02 F6 | 	mov	local34, local17
02620     01 60 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     30 3B 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     1D 27 02 F6 | 	mov	local05, local15
02630     01 26 06 F1 | 	add	local05, #1
02634     03 26 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 26 02 F1 | 	add	local05, objptr
02644     13 25 02 FB | 	rdlong	local04, local05
02648     1D 29 02 F6 | 	mov	local06, local15
0264c     01 28 06 F1 | 	add	local06, #1
02650     03 28 66 F0 | 	shl	local06, #3
02654     F2 28 02 F1 | 	add	local06, objptr
02658     04 28 06 F1 | 	add	local06, #4
0265c     14 23 02 FB | 	rdlong	local03, local06
02660     1D 31 02 F6 | 	mov	local10, local15
02664     18 29 02 F6 | 	mov	local06, local10
02668     03 28 66 F0 | 	shl	local06, #3
0266c     F2 34 02 F6 | 	mov	local12, objptr
02670     F2 28 02 F1 | 	add	local06, objptr
02674     14 25 62 FC | 	wrlong	local04, local06
02678     1D 33 02 F6 | 	mov	local11, local15
0267c     19 39 02 F6 | 	mov	local14, local11
02680     1C 37 02 F6 | 	mov	local13, local14
02684     03 36 66 F0 | 	shl	local13, #3
02688     F2 54 02 F6 | 	mov	local28, objptr
0268c     F2 36 02 F1 | 	add	local13, objptr
02690     04 36 06 F1 | 	add	local13, #4
02694     1B 23 62 FC | 	wrlong	local03, local13
02698     04 36 86 F1 | 	sub	local13, #4
0269c     01 3A 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 3E 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 20 56 F2 | 	cmps	local02, #1 wc
026b4     01 20 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 20 06 F1 | 	add	local02, #1
026bc     1F 25 02 F6 | 	mov	local04, local17
026c0     01 24 86 F1 | 	sub	local04, #1
026c4     12 21 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 3A 06 F6 | 	mov	local15, #0
026d0     1F 63 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     31 3B 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     1D 27 02 F6 | 	mov	local05, local15
026e0     03 26 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 26 02 F1 | 	add	local05, objptr
026f0     13 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     3C 0F B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     88 01 00 FF 
0270c     9F 15 06 F6 | 	mov	arg02, ##@LR__5131
02710     D8 EE B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     1D 29 02 F6 | 	mov	local06, local15
02720     03 28 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 34 02 F6 | 	mov	local12, objptr
02730     F2 28 02 F1 | 	add	local06, objptr
02734     14 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     80 0F B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     88 01 00 FF 
02750     A1 15 06 F6 | 	mov	arg02, ##@LR__5132
02754     94 EE B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     1D 31 02 F6 | 	mov	local10, local15
02764     03 30 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 30 02 F1 | 	add	local10, objptr
02774     1D 33 02 F6 | 	mov	local11, local15
02778     19 39 02 F6 | 	mov	local14, local11
0277c     03 38 66 F0 | 	shl	local14, #3
02780     F2 36 02 F6 | 	mov	local13, objptr
02784     F2 38 02 F1 | 	add	local14, objptr
02788     1C 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     B8 11 B2 FD | 	call	#__system__LCase_S
02798     18 FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 3A 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 20 06 F6 | 	mov	local02, #0
027a8     1F 65 02 F6 | 	mov	local36, local17
027ac     01 64 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     32 21 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     10 31 02 F6 | 	mov	local10, local02
027c0     03 30 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 30 02 F1 | 	add	local10, objptr
027d0     04 30 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     18 FF 6B FC | 	wrlong	##-1, local10
027dc     01 20 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     34 41 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 66 06 56 |  if_ne	mov	local37, #1
0280c     00 66 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     88 01 00 FF 
02828     A3 15 06 F6 | 	mov	arg02, ##@LR__5133
0282c     BC ED B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 66 06 A6 |  if_e	mov	local37, #1
02838     00 20 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     88 01 00 FF 
02858     A8 15 06 F6 | 	mov	arg02, ##@LR__5134
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     84 ED B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 20 06 F1 | 	add	local02, #1
02874     1F 21 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     1F 21 52 F2 | 	cmps	local02, local17 wc
02880     10 67 02 C6 |  if_b	mov	local37, local02
02884     01 66 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     33 29 02 F6 | 	mov	local06, local37
02894     03 28 66 F0 | 	shl	local06, #3
02898     F2 34 02 F6 | 	mov	local12, objptr
0289c     F2 28 02 F1 | 	add	local06, objptr
028a0     14 15 02 FB | 	rdlong	arg02, local06
028a4     88 01 00 FF 
028a8     AD 17 06 F6 | 	mov	arg03, ##@LR__5135
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     CC 12 B2 FD | 	call	#__system__Instr
028bc     FD 68 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 68 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     33 27 02 F6 | 	mov	local05, local37
028cc     03 26 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 26 02 F1 | 	add	local05, objptr
028dc     13 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 2B 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     15 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 2A 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 2B 82 F1 | 	sub	local07, arg01
02900     15 69 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 3E 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     1F 21 02 F6 | 	mov	local02, local17
02910     33 6B 02 F6 | 	mov	local39, local37
02914     01 6A 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     10 27 02 F6 | 	mov	local05, local02
02928     01 26 86 F1 | 	sub	local05, #1
0292c     03 26 66 F0 | 	shl	local05, #3
02930     F2 26 02 F1 | 	add	local05, objptr
02934     13 25 02 FB | 	rdlong	local04, local05
02938     10 29 02 F6 | 	mov	local06, local02
0293c     01 28 86 F1 | 	sub	local06, #1
02940     03 28 66 F0 | 	shl	local06, #3
02944     F2 28 02 F1 | 	add	local06, objptr
02948     04 28 06 F1 | 	add	local06, #4
0294c     14 23 02 FB | 	rdlong	local03, local06
02950     10 29 02 F6 | 	mov	local06, local02
02954     03 28 66 F0 | 	shl	local06, #3
02958     F2 28 02 F1 | 	add	local06, objptr
0295c     14 25 62 FC | 	wrlong	local04, local06
02960     10 37 02 F6 | 	mov	local13, local02
02964     03 36 66 F0 | 	shl	local13, #3
02968     F2 36 02 F1 | 	add	local13, objptr
0296c     04 36 06 F1 | 	add	local13, #4
02970     1B 23 62 FC | 	wrlong	local03, local13
02974     01 20 86 F1 | 	sub	local02, #1
02978     35 21 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     33 31 02 F6 | 	mov	local10, local37
02984     01 30 06 F1 | 	add	local10, #1
02988     03 30 66 F0 | 	shl	local10, #3
0298c     F2 30 02 F1 | 	add	local10, objptr
02990     33 39 02 F6 | 	mov	local14, local37
02994     03 38 66 F0 | 	shl	local14, #3
02998     F2 38 02 F1 | 	add	local14, objptr
0299c     1C 29 02 FB | 	rdlong	local06, local14
029a0     33 55 02 F6 | 	mov	local28, local37
029a4     2A 49 02 F6 | 	mov	local22, local28
029a8     03 48 66 F0 | 	shl	local22, #3
029ac     F2 4A 02 F6 | 	mov	local23, objptr
029b0     F2 48 02 F1 | 	add	local22, objptr
029b4     24 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 2B 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 2A 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 2B 82 F1 | 	sub	local07, arg01
029d8     15 15 02 F6 | 	mov	arg02, local07
029dc     34 15 82 F1 | 	sub	arg02, local38
029e0     14 13 02 F6 | 	mov	arg01, local06
029e4     E0 0C B2 FD | 	call	#__system__Right_S
029e8     18 FB 61 FC | 	wrlong	result1, local10
029ec     33 31 02 F6 | 	mov	local10, local37
029f0     03 30 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 30 02 F1 | 	add	local10, objptr
02a00     33 33 02 F6 | 	mov	local11, local37
02a04     19 39 02 F6 | 	mov	local14, local11
02a08     03 38 66 F0 | 	shl	local14, #3
02a0c     F2 36 02 F6 | 	mov	local13, objptr
02a10     F2 38 02 F1 | 	add	local14, objptr
02a14     1C 13 02 FB | 	rdlong	arg01, local14
02a18     34 35 02 F6 | 	mov	local12, local38
02a1c     1A 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     14 0C B2 FD | 	call	#__system__Left_S
02a2c     18 FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     33 27 02 F6 | 	mov	local05, local37
02a34     03 26 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 26 02 F1 | 	add	local05, objptr
02a44     13 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     E8 0B B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     88 01 00 FF 
02a60     AF 15 06 F6 | 	mov	arg02, ##@LR__5136
02a64     84 EB B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     33 29 02 F6 | 	mov	local06, local37
02a74     03 28 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 34 02 F6 | 	mov	local12, objptr
02a84     F2 28 02 F1 | 	add	local06, objptr
02a88     14 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 2B 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 2A 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 2B 82 F1 | 	sub	local07, arg01
02aac     02 2A 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 3E 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     1F 21 02 F6 | 	mov	local02, local17
02abc     33 6D 02 F6 | 	mov	local40, local37
02ac0     01 6C 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     10 27 02 F6 | 	mov	local05, local02
02ad4     01 26 86 F1 | 	sub	local05, #1
02ad8     03 26 66 F0 | 	shl	local05, #3
02adc     F2 26 02 F1 | 	add	local05, objptr
02ae0     13 25 02 FB | 	rdlong	local04, local05
02ae4     10 29 02 F6 | 	mov	local06, local02
02ae8     01 28 86 F1 | 	sub	local06, #1
02aec     03 28 66 F0 | 	shl	local06, #3
02af0     F2 28 02 F1 | 	add	local06, objptr
02af4     04 28 06 F1 | 	add	local06, #4
02af8     14 23 02 FB | 	rdlong	local03, local06
02afc     10 29 02 F6 | 	mov	local06, local02
02b00     03 28 66 F0 | 	shl	local06, #3
02b04     F2 28 02 F1 | 	add	local06, objptr
02b08     14 25 62 FC | 	wrlong	local04, local06
02b0c     10 37 02 F6 | 	mov	local13, local02
02b10     03 36 66 F0 | 	shl	local13, #3
02b14     F2 36 02 F1 | 	add	local13, objptr
02b18     04 36 06 F1 | 	add	local13, #4
02b1c     1B 23 62 FC | 	wrlong	local03, local13
02b20     01 20 86 F1 | 	sub	local02, #1
02b24     36 21 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     33 31 02 F6 | 	mov	local10, local37
02b30     01 30 06 F1 | 	add	local10, #1
02b34     03 30 66 F0 | 	shl	local10, #3
02b38     F2 30 02 F1 | 	add	local10, objptr
02b3c     33 39 02 F6 | 	mov	local14, local37
02b40     03 38 66 F0 | 	shl	local14, #3
02b44     F2 38 02 F1 | 	add	local14, objptr
02b48     1C 29 02 FB | 	rdlong	local06, local14
02b4c     33 37 02 F6 | 	mov	local13, local37
02b50     1B 55 02 F6 | 	mov	local28, local13
02b54     2A 49 02 F6 | 	mov	local22, local28
02b58     03 48 66 F0 | 	shl	local22, #3
02b5c     F2 4A 02 F6 | 	mov	local23, objptr
02b60     F2 48 02 F1 | 	add	local22, objptr
02b64     24 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 2B 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     15 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 2A 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 2B 82 F1 | 	sub	local07, arg01
02b88     15 39 02 F6 | 	mov	local14, local07
02b8c     1C 33 02 F6 | 	mov	local11, local14
02b90     01 32 86 F1 | 	sub	local11, #1
02b94     19 35 02 F6 | 	mov	local12, local11
02b98     14 13 02 F6 | 	mov	arg01, local06
02b9c     1A 15 02 F6 | 	mov	arg02, local12
02ba0     24 0B B2 FD | 	call	#__system__Right_S
02ba4     18 FB 61 FC | 	wrlong	result1, local10
02ba8     33 31 02 F6 | 	mov	local10, local37
02bac     03 30 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 30 02 F1 | 	add	local10, objptr
02bbc     88 01 00 FF 
02bc0     B1 29 06 F6 | 	mov	local06, ##@LR__5137
02bc4     18 29 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     33 31 02 F6 | 	mov	local10, local37
02bd4     03 30 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 30 02 F1 | 	add	local10, objptr
02be4     18 6F 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     88 01 00 FF 
02bec     B3 15 06 F6 | 	mov	arg02, ##@LR__5138
02bf0     37 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     EC E9 B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     88 01 00 FF 
02c0c     B9 15 06 F6 | 	mov	arg02, ##@LR__5139
02c10     37 13 02 F6 | 	mov	arg01, local41
02c14     D4 E9 B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     88 01 00 FF 
02c24     C0 15 06 F6 | 	mov	arg02, ##@LR__5140
02c28     37 13 02 F6 | 	mov	arg01, local41
02c2c     BC E9 B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     33 27 02 F6 | 	mov	local05, local37
02c3c     01 26 06 F1 | 	add	local05, #1
02c40     03 26 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     13 13 02 FB | 	rdlong	arg01, local05
02c54     88 01 00 FF 
02c58     C6 15 06 F6 | 	mov	arg02, ##@LR__5141
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     84 E9 B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     33 31 02 F6 | 	mov	local10, local37
02c74     01 30 06 F1 | 	add	local10, #1
02c78     03 30 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 30 02 F1 | 	add	local10, objptr
02c88     88 01 00 FF 
02c8c     C9 29 06 F6 | 	mov	local06, ##@LR__5142
02c90     18 29 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     33 27 02 F6 | 	mov	local05, local37
02cac     01 26 06 F1 | 	add	local05, #1
02cb0     03 26 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 26 02 F1 | 	add	local05, objptr
02cc0     13 13 02 FB | 	rdlong	arg01, local05
02cc4     88 01 00 FF 
02cc8     CB 15 06 F6 | 	mov	arg02, ##@LR__5143
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     14 E9 B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     33 31 02 F6 | 	mov	local10, local37
02ce4     01 30 06 F1 | 	add	local10, #1
02ce8     03 30 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 30 02 F1 | 	add	local10, objptr
02cf8     88 01 00 FF 
02cfc     CF 29 06 F6 | 	mov	local06, ##@LR__5144
02d00     18 29 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     88 01 00 FF 
02d1c     D1 15 06 F6 | 	mov	arg02, ##@LR__5145
02d20     37 13 02 F6 | 	mov	arg01, local41
02d24     C4 E8 B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     88 01 00 FF 
02d34     D6 15 06 F6 | 	mov	arg02, ##@LR__5146
02d38     37 13 02 F6 | 	mov	arg01, local41
02d3c     AC E8 B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     33 27 02 F6 | 	mov	local05, local37
02d4c     01 26 06 F1 | 	add	local05, #1
02d50     03 26 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 26 02 F1 | 	add	local05, objptr
02d60     13 13 02 FB | 	rdlong	arg01, local05
02d64     88 01 00 FF 
02d68     D9 15 06 F6 | 	mov	arg02, ##@LR__5147
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     74 E8 B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     33 31 02 F6 | 	mov	local10, local37
02d84     01 30 06 F1 | 	add	local10, #1
02d88     03 30 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 30 02 F1 | 	add	local10, objptr
02d98     88 01 00 FF 
02d9c     DF 29 06 F6 | 	mov	local06, ##@LR__5148
02da0     18 29 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     33 27 02 F6 | 	mov	local05, local37
02db0     01 26 06 F1 | 	add	local05, #1
02db4     03 26 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 26 02 F1 | 	add	local05, objptr
02dc4     13 13 02 FB | 	rdlong	arg01, local05
02dc8     88 01 00 FF 
02dcc     E1 15 06 F6 | 	mov	arg02, ##@LR__5149
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     10 E8 B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     33 31 02 F6 | 	mov	local10, local37
02de8     01 30 06 F1 | 	add	local10, #1
02dec     03 30 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 30 02 F1 | 	add	local10, objptr
02dfc     88 01 00 FF 
02e00     EA 29 06 F6 | 	mov	local06, ##@LR__5150
02e04     18 29 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     33 27 02 F6 | 	mov	local05, local37
02e14     01 26 06 F1 | 	add	local05, #1
02e18     03 26 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 26 02 F1 | 	add	local05, objptr
02e28     13 13 02 FB | 	rdlong	arg01, local05
02e2c     88 01 00 FF 
02e30     EC 15 06 F6 | 	mov	arg02, ##@LR__5151
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     AC E7 B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     33 31 02 F6 | 	mov	local10, local37
02e4c     01 30 06 F1 | 	add	local10, #1
02e50     03 30 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 30 02 F1 | 	add	local10, objptr
02e60     88 01 00 FF 
02e64     F5 29 06 F6 | 	mov	local06, ##@LR__5152
02e68     18 29 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     33 27 02 F6 | 	mov	local05, local37
02e78     01 26 06 F1 | 	add	local05, #1
02e7c     03 26 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 26 02 F1 | 	add	local05, objptr
02e8c     13 13 02 FB | 	rdlong	arg01, local05
02e90     88 01 00 FF 
02e94     F7 15 06 F6 | 	mov	arg02, ##@LR__5153
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     48 E7 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     33 31 02 F6 | 	mov	local10, local37
02eb0     01 30 06 F1 | 	add	local10, #1
02eb4     03 30 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 30 02 F1 | 	add	local10, objptr
02ec4     89 01 00 FF 
02ec8     00 28 06 F6 | 	mov	local06, ##@LR__5154
02ecc     18 29 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     33 27 02 F6 | 	mov	local05, local37
02edc     01 26 06 F1 | 	add	local05, #1
02ee0     03 26 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 26 02 F1 | 	add	local05, objptr
02ef0     13 13 02 FB | 	rdlong	arg01, local05
02ef4     89 01 00 FF 
02ef8     02 14 06 F6 | 	mov	arg02, ##@LR__5155
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     E4 E6 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     33 31 02 F6 | 	mov	local10, local37
02f14     01 30 06 F1 | 	add	local10, #1
02f18     03 30 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 30 02 F1 | 	add	local10, objptr
02f28     89 01 00 FF 
02f2c     05 28 06 F6 | 	mov	local06, ##@LR__5156
02f30     18 29 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 20 06 F6 | 	mov	local02, #0
02f40     1F 71 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     38 21 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     10 31 02 F6 | 	mov	local10, local02
02f50     03 30 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 30 02 F1 | 	add	local10, objptr
02f60     10 33 02 F6 | 	mov	local11, local02
02f64     19 39 02 F6 | 	mov	local14, local11
02f68     1C 37 02 F6 | 	mov	local13, local14
02f6c     03 36 66 F0 | 	shl	local13, #3
02f70     F2 36 02 F1 | 	add	local13, objptr
02f74     1B 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 30 06 F1 | 	add	local10, #4
02f8c     18 FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     10 31 02 F6 | 	mov	local10, local02
02f94     03 30 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 30 02 F1 | 	add	local10, objptr
02fa4     04 30 06 F1 | 	add	local10, #4
02fa8     18 35 02 FB | 	rdlong	local12, local10
02fac     01 34 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     10 31 02 F6 | 	mov	local10, local02
02fc0     03 30 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 30 02 F1 | 	add	local10, objptr
02fd0     10 33 02 F6 | 	mov	local11, local02
02fd4     19 39 02 F6 | 	mov	local14, local11
02fd8     1C 37 02 F6 | 	mov	local13, local14
02fdc     03 36 66 F0 | 	shl	local13, #3
02fe0     F2 36 02 F1 | 	add	local13, objptr
02fe4     1B 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 30 06 F1 | 	add	local10, #4
02ffc     18 FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     10 31 02 F6 | 	mov	local10, local02
03004     03 30 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 30 02 F1 | 	add	local10, objptr
03014     04 30 06 F1 | 	add	local10, #4
03018     18 35 02 FB | 	rdlong	local12, local10
0301c     01 34 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     10 31 02 F6 | 	mov	local10, local02
03030     03 30 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 30 02 F1 | 	add	local10, objptr
03040     10 33 02 F6 | 	mov	local11, local02
03044     19 39 02 F6 | 	mov	local14, local11
03048     1C 37 02 F6 | 	mov	local13, local14
0304c     03 36 66 F0 | 	shl	local13, #3
03050     F2 36 02 F1 | 	add	local13, objptr
03054     1B 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     89 01 00 FF 
03064     F8 14 06 F6 | 	mov	arg02, ##@LR__5241
03068     80 E5 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 30 06 F1 | 	add	local10, #4
03080     18 FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     10 31 02 F6 | 	mov	local10, local02
03088     03 30 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 30 02 F1 | 	add	local10, objptr
03098     04 30 06 F1 | 	add	local10, #4
0309c     18 35 02 FB | 	rdlong	local12, local10
030a0     01 34 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     10 31 02 F6 | 	mov	local10, local02
030b4     03 30 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 30 02 F1 | 	add	local10, objptr
030c4     10 33 02 F6 | 	mov	local11, local02
030c8     19 39 02 F6 | 	mov	local14, local11
030cc     1C 37 02 F6 | 	mov	local13, local14
030d0     03 36 66 F0 | 	shl	local13, #3
030d4     F2 36 02 F1 | 	add	local13, objptr
030d8     1B 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 30 06 F1 | 	add	local10, #4
030f0     18 FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     10 31 02 F6 | 	mov	local10, local02
030f8     03 30 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 30 02 F1 | 	add	local10, objptr
03108     04 30 06 F1 | 	add	local10, #4
0310c     18 35 02 FB | 	rdlong	local12, local10
03110     01 34 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     10 31 02 F6 | 	mov	local10, local02
03124     03 30 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 30 02 F1 | 	add	local10, objptr
03134     10 33 02 F6 | 	mov	local11, local02
03138     19 39 02 F6 | 	mov	local14, local11
0313c     1C 37 02 F6 | 	mov	local13, local14
03140     03 36 66 F0 | 	shl	local13, #3
03144     F2 54 02 F6 | 	mov	local28, objptr
03148     F2 36 02 F1 | 	add	local13, objptr
0314c     1B 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     38 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 30 06 F1 | 	add	local10, #4
03164     18 FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     10 31 02 F6 | 	mov	local10, local02
0316c     03 30 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 30 02 F1 | 	add	local10, objptr
0317c     04 30 06 F1 | 	add	local10, #4
03180     18 35 02 FB | 	rdlong	local12, local10
03184     01 34 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     10 31 02 F6 | 	mov	local10, local02
03198     03 30 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 30 02 F1 | 	add	local10, objptr
031a8     10 33 02 F6 | 	mov	local11, local02
031ac     19 39 02 F6 | 	mov	local14, local11
031b0     03 38 66 F0 | 	shl	local14, #3
031b4     F2 36 02 F6 | 	mov	local13, objptr
031b8     F2 38 02 F1 | 	add	local14, objptr
031bc     1C 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 30 06 F1 | 	add	local10, #4
031d0     18 FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     10 31 02 F6 | 	mov	local10, local02
031d8     03 30 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 30 02 F1 | 	add	local10, objptr
031e8     04 30 06 F1 | 	add	local10, #4
031ec     18 29 02 FB | 	rdlong	local06, local10
031f0     01 28 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     10 27 02 F6 | 	mov	local05, local02
03204     03 26 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 26 02 F1 | 	add	local05, objptr
03214     04 26 06 F1 | 	add	local05, #4
03218     13 35 02 FB | 	rdlong	local12, local05
0321c     1A 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     30 38 B0 FD | 	call	#_getnoteval
0322c     FD 72 02 F6 | 	mov	local43, result1
03230     10 31 02 F6 | 	mov	local10, local02
03234     03 30 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 30 02 F1 | 	add	local10, objptr
03244     39 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     E4 05 B2 FD | 	call	#__system__str_S
03254     18 FB 61 FC | 	wrlong	result1, local10
03258     10 25 02 F6 | 	mov	local04, local02
0325c     12 23 02 F6 | 	mov	local03, local04
03260     11 31 02 F6 | 	mov	local10, local03
03264     03 30 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 30 02 F1 | 	add	local10, objptr
03274     04 30 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     18 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     10 31 02 F6 | 	mov	local10, local02
03290     03 30 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 30 02 F1 | 	add	local10, objptr
032a0     10 39 02 F6 | 	mov	local14, local02
032a4     03 38 66 F0 | 	shl	local14, #3
032a8     F2 38 02 F1 | 	add	local14, objptr
032ac     1C 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 30 06 F1 | 	add	local10, #4
032c0     18 FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     10 31 02 F6 | 	mov	local10, local02
032c8     03 30 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 30 02 F1 | 	add	local10, objptr
032d8     04 30 06 F1 | 	add	local10, #4
032dc     18 29 02 FB | 	rdlong	local06, local10
032e0     01 28 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     10 31 02 F6 | 	mov	local10, local02
032f4     03 30 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 30 02 F1 | 	add	local10, objptr
03304     10 33 02 F6 | 	mov	local11, local02
03308     19 39 02 F6 | 	mov	local14, local11
0330c     03 38 66 F0 | 	shl	local14, #3
03310     F2 36 02 F6 | 	mov	local13, objptr
03314     F2 38 02 F1 | 	add	local14, objptr
03318     1C 13 02 FB | 	rdlong	arg01, local14
0331c     01 34 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     98 03 B2 FD | 	call	#__system__Right_S
03330     18 FB 61 FC | 	wrlong	result1, local10
03334     10 25 02 F6 | 	mov	local04, local02
03338     12 23 02 F6 | 	mov	local03, local04
0333c     11 31 02 F6 | 	mov	local10, local03
03340     03 30 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 30 02 F1 | 	add	local10, objptr
03350     04 30 06 F1 | 	add	local10, #4
03354     18 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     10 31 02 F6 | 	mov	local10, local02
03368     03 30 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 30 02 F1 | 	add	local10, objptr
03378     10 33 02 F6 | 	mov	local11, local02
0337c     19 39 02 F6 | 	mov	local14, local11
03380     03 38 66 F0 | 	shl	local14, #3
03384     F2 36 02 F6 | 	mov	local13, objptr
03388     F2 38 02 F1 | 	add	local14, objptr
0338c     1C 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 30 06 F1 | 	add	local10, #4
033a0     18 FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     10 31 02 F6 | 	mov	local10, local02
033a8     03 30 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 30 02 F1 | 	add	local10, objptr
033b8     04 30 06 F1 | 	add	local10, #4
033bc     18 35 02 FB | 	rdlong	local12, local10
033c0     01 34 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     10 31 02 F6 | 	mov	local10, local02
033d4     03 30 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 30 02 F1 | 	add	local10, objptr
033e4     10 35 02 F6 | 	mov	local12, local02
033e8     1A 33 02 F6 | 	mov	local11, local12
033ec     19 39 02 F6 | 	mov	local14, local11
033f0     03 38 66 F0 | 	shl	local14, #3
033f4     F2 36 02 F6 | 	mov	local13, objptr
033f8     F2 38 02 F1 | 	add	local14, objptr
033fc     04 38 06 F1 | 	add	local14, #4
03400     1C 13 02 FB | 	rdlong	arg01, local14
03404     04 38 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 74 C6 C9 |  if_b	decod	local44, #31
03418     00 74 06 36 |  if_ae	mov	local44, #0
0341c     5C 0B B2 FD | 	call	#__system___float_fromuns
03420     3A FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     0C 04 B2 FD | 	call	#__system__str_S
0342c     18 FB 61 FC | 	wrlong	result1, local10
03430     10 25 02 F6 | 	mov	local04, local02
03434     12 23 02 F6 | 	mov	local03, local04
03438     11 31 02 F6 | 	mov	local10, local03
0343c     03 30 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 30 02 F1 | 	add	local10, objptr
0344c     04 30 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     18 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     10 27 02 F6 | 	mov	local05, local02
03468     03 26 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 26 02 F1 | 	add	local05, objptr
03478     13 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     20 2E B0 FD | 	call	#_isnum
03488     FD 76 02 F6 | 	mov	local45, result1
0348c     10 27 02 F6 | 	mov	local05, local02
03490     03 26 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 26 02 F1 | 	add	local05, objptr
034a0     13 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     E4 31 B0 FD | 	call	#_isint
034b0     FD 78 02 F6 | 	mov	local46, result1
034b4     10 27 02 F6 | 	mov	local05, local02
034b8     03 26 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 26 02 F1 | 	add	local05, objptr
034c8     13 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     60 34 B0 FD | 	call	#_isdec
034d8     FD 7A 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 76 0E F2 | 	cmp	local45, #0 wz
034e0     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     10 25 02 F6 | 	mov	local04, local02
034f0     12 23 02 F6 | 	mov	local03, local04
034f4     11 31 02 F6 | 	mov	local10, local03
034f8     03 30 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 30 02 F1 | 	add	local10, objptr
03508     04 30 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     18 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 76 0E F2 | 	cmp	local45, #0 wz
03524     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03528     3D 25 22 56 |  if_ne	not	local04, local47
0352c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     10 25 02 F6 | 	mov	local04, local02
03538     12 23 02 F6 | 	mov	local03, local04
0353c     11 31 02 F6 | 	mov	local10, local03
03540     03 30 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 30 02 F1 | 	add	local10, objptr
03550     04 30 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     18 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 76 0E F2 | 	cmp	local45, #0 wz
0356c     3C 25 22 56 |  if_ne	not	local04, local46
03570     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03574     3D 23 22 56 |  if_ne	not	local03, local47
03578     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     10 25 02 F6 | 	mov	local04, local02
03584     12 23 02 F6 | 	mov	local03, local04
03588     11 31 02 F6 | 	mov	local10, local03
0358c     03 30 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 30 02 F1 | 	add	local10, objptr
0359c     04 30 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     18 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     10 27 02 F6 | 	mov	local05, local02
035b8     03 26 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 26 02 F1 | 	add	local05, objptr
035c8     13 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     20 34 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     10 31 02 F6 | 	mov	local10, local02
035e4     03 30 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 30 02 F1 | 	add	local10, objptr
035f4     04 30 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     18 07 68 FC | 	wrlong	##515, local10
03600     10 25 02 F6 | 	mov	local04, local02
03604     12 23 02 F6 | 	mov	local03, local04
03608     11 31 02 F6 | 	mov	local10, local03
0360c     03 30 66 F0 | 	shl	local10, #3
03610     F2 30 02 F1 | 	add	local10, objptr
03614     10 39 02 F6 | 	mov	local14, local02
03618     03 38 66 F0 | 	shl	local14, #3
0361c     F2 38 02 F1 | 	add	local14, objptr
03620     1C 29 02 FB | 	rdlong	local06, local14
03624     02 34 06 F6 | 	mov	local12, #2
03628     10 49 02 F6 | 	mov	local22, local02
0362c     24 4B 02 F6 | 	mov	local23, local22
03630     03 4A 66 F0 | 	shl	local23, #3
03634     F2 4C 02 F6 | 	mov	local24, objptr
03638     F2 4A 02 F1 | 	add	local23, objptr
0363c     25 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 2B 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     15 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 2A 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 2B 82 F1 | 	sub	local07, arg01
03660     15 37 02 F6 | 	mov	local13, local07
03664     1B 39 02 F6 | 	mov	local14, local13
03668     02 38 86 F1 | 	sub	local14, #2
0366c     1C 33 02 F6 | 	mov	local11, local14
03670     14 13 02 F6 | 	mov	arg01, local06
03674     1A 15 02 F6 | 	mov	arg02, local12
03678     19 17 02 F6 | 	mov	arg03, local11
0367c     D8 00 B2 FD | 	call	#__system__Mid_S
03680     18 FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     10 23 02 F6 | 	mov	local03, local02
0368c     11 27 02 F6 | 	mov	local05, local03
03690     03 26 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 26 02 F1 | 	add	local05, objptr
036a0     13 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     84 29 B0 FD | 	call	#_isname
036b0     FD 24 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     10 25 02 F6 | 	mov	local04, local02
036bc     12 23 02 F6 | 	mov	local03, local04
036c0     11 31 02 F6 | 	mov	local10, local03
036c4     03 30 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 30 02 F1 | 	add	local10, objptr
036d4     04 30 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     18 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 20 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     1F 31 02 F6 | 	mov	local10, local17
036f4     03 30 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 30 02 F1 | 	add	local10, objptr
03704     04 30 06 F1 | 	add	local10, #4
03708     18 FD 6B FC | 	wrlong	#510, local10
0370c     1F 31 02 F6 | 	mov	local10, local17
03710     03 30 66 F0 | 	shl	local10, #3
03714     F2 30 02 F1 | 	add	local10, objptr
03718     89 01 00 FF 
0371c     07 28 06 F6 | 	mov	local06, ##@LR__5157
03720     18 29 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 3E 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     89 01 00 FF 
0373c     08 14 06 F6 | 	mov	arg02, ##@LR__5158
03740     37 13 02 F6 | 	mov	arg01, local41
03744     A4 DE B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     89 01 00 FF 
03754     0D 14 06 F6 | 	mov	arg02, ##@LR__5159
03758     37 13 02 F6 | 	mov	arg01, local41
0375c     8C DE B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     89 01 00 FF 
0376c     12 28 06 F6 | 	mov	local06, ##@LR__5160
03770     37 13 02 F6 | 	mov	arg01, local41
03774     14 15 02 F6 | 	mov	arg02, local06
03778     70 DE B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     89 01 00 FF 
03788     17 34 06 F6 | 	mov	local12, ##@LR__5161
0378c     1A 29 02 F6 | 	mov	local06, local12
03790     37 13 02 F6 | 	mov	arg01, local41
03794     14 15 02 F6 | 	mov	arg02, local06
03798     50 DE B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     89 01 00 FF 
037a8     1B 32 06 F6 | 	mov	local11, ##@LR__5162
037ac     19 35 02 F6 | 	mov	local12, local11
037b0     37 13 02 F6 | 	mov	arg01, local41
037b4     1A 15 02 F6 | 	mov	arg02, local12
037b8     30 DE B1 FD | 	call	#__system___string_cmp
037bc     FD 28 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     89 01 00 FF 
037c8     1F 38 06 F6 | 	mov	local14, ##@LR__5163
037cc     1C 33 02 F6 | 	mov	local11, local14
037d0     37 13 02 F6 | 	mov	arg01, local41
037d4     19 15 02 F6 | 	mov	arg02, local11
037d8     10 DE B1 FD | 	call	#__system___string_cmp
037dc     FD 34 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     89 01 00 FF 
037e8     22 36 06 F6 | 	mov	local13, ##@LR__5164
037ec     1B 39 02 F6 | 	mov	local14, local13
037f0     37 13 02 F6 | 	mov	arg01, local41
037f4     1C 15 02 F6 | 	mov	arg02, local14
037f8     F0 DD B1 FD | 	call	#__system___string_cmp
037fc     FD 32 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     89 01 00 FF 
03808     26 36 06 F6 | 	mov	local13, ##@LR__5165
0380c     37 13 02 F6 | 	mov	arg01, local41
03810     1B 15 02 F6 | 	mov	arg02, local13
03814     D4 DD B1 FD | 	call	#__system___string_cmp
03818     FD 38 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     89 01 00 FF 
03824     2C 48 06 F6 | 	mov	local22, ##@LR__5166
03828     24 55 02 F6 | 	mov	local28, local22
0382c     37 13 02 F6 | 	mov	arg01, local41
03830     2A 15 02 F6 | 	mov	arg02, local28
03834     B4 DD B1 FD | 	call	#__system___string_cmp
03838     FD 36 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     33 55 02 F6 | 	mov	local28, local37
03844     01 54 06 F1 | 	add	local28, #1
03848     2A 49 02 F6 | 	mov	local22, local28
0384c     24 4B 02 F6 | 	mov	local23, local22
03850     03 4A 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 4C 02 F6 | 	mov	local24, objptr
03860     F2 4A 02 F1 | 	add	local23, objptr
03864     04 4A 06 F1 | 	add	local23, #4
03868     25 59 02 FB | 	rdlong	local30, local23
0386c     04 4A 86 F1 | 	sub	local23, #4
03870     2C 57 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 56 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     33 31 02 F6 | 	mov	local10, local37
0388c     01 30 06 F1 | 	add	local10, #1
03890     03 30 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 30 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 28 06 F6 | 	mov	local06, ##515
038a8     04 30 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     18 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     89 01 00 FF 
038c0     2F 14 06 F6 | 	mov	arg02, ##@LR__5167
038c4     37 13 02 F6 | 	mov	arg01, local41
038c8     20 DD B1 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     89 01 00 FF 
038d8     36 26 06 F6 | 	mov	local05, ##@LR__5168
038dc     37 13 02 F6 | 	mov	arg01, local41
038e0     13 15 02 F6 | 	mov	arg02, local05
038e4     04 DD B1 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     33 27 02 F6 | 	mov	local05, local37
038f4     01 26 06 F1 | 	add	local05, #1
038f8     13 29 02 F6 | 	mov	local06, local05
038fc     03 28 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 34 02 F6 | 	mov	local12, objptr
0390c     F2 28 02 F1 | 	add	local06, objptr
03910     04 28 06 F1 | 	add	local06, #4
03914     14 39 02 FB | 	rdlong	local14, local06
03918     04 28 86 F1 | 	sub	local06, #4
0391c     1C 33 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 32 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     33 31 02 F6 | 	mov	local10, local37
03938     01 30 06 F1 | 	add	local10, #1
0393c     03 30 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 26 02 F6 | 	mov	local05, objptr
0394c     F2 30 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 28 06 F6 | 	mov	local06, ##515
03958     04 30 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     18 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     89 01 00 FF 
03970     3C 14 06 F6 | 	mov	arg02, ##@LR__5169
03974     37 13 02 F6 | 	mov	arg01, local41
03978     70 DC B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     33 31 02 F6 | 	mov	local10, local37
03988     01 30 06 F1 | 	add	local10, #1
0398c     03 30 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 26 02 F6 | 	mov	local05, objptr
0399c     F2 30 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 28 06 F6 | 	mov	local06, ##515
039a8     04 30 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     18 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     89 01 00 FF 
039c0     3F 14 06 F6 | 	mov	arg02, ##@LR__5170
039c4     37 13 02 F6 | 	mov	arg01, local41
039c8     20 DC B1 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     33 29 02 F6 | 	mov	local06, local37
039d8     01 28 06 F1 | 	add	local06, #1
039dc     03 28 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 34 02 F6 | 	mov	local12, objptr
039ec     F2 28 02 F1 | 	add	local06, objptr
039f0     14 13 02 FB | 	rdlong	arg01, local06
039f4     89 01 00 FF 
039f8     43 26 06 F6 | 	mov	local05, ##@LR__5171
039fc     13 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     E0 DB B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     33 31 02 F6 | 	mov	local10, local37
03a18     01 30 06 F1 | 	add	local10, #1
03a1c     03 30 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 30 02 F1 | 	add	local10, objptr
03a2c     04 30 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     18 07 68 FC | 	wrlong	##515, local10
03a38     33 31 02 F6 | 	mov	local10, local37
03a3c     01 30 06 F1 | 	add	local10, #1
03a40     03 30 66 F0 | 	shl	local10, #3
03a44     F2 30 02 F1 | 	add	local10, objptr
03a48     89 01 00 FF 
03a4c     45 28 06 F6 | 	mov	local06, ##@LR__5172
03a50     18 29 62 FC | 	wrlong	local06, local10
03a54     33 31 02 F6 | 	mov	local10, local37
03a58     03 30 66 F0 | 	shl	local10, #3
03a5c     F2 26 02 F6 | 	mov	local05, objptr
03a60     F2 30 02 F1 | 	add	local10, objptr
03a64     C3 28 06 F6 | 	mov	local06, #195
03a68     04 30 06 F1 | 	add	local10, #4
03a6c     18 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     89 01 00 FF 
03a7c     48 30 06 F6 | 	mov	local10, ##@LR__5173
03a80     37 13 02 F6 | 	mov	arg01, local41
03a84     18 15 02 F6 | 	mov	arg02, local10
03a88     60 DB B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     33 29 02 F6 | 	mov	local06, local37
03a98     01 28 06 F1 | 	add	local06, #1
03a9c     03 28 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 34 02 F6 | 	mov	local12, objptr
03aac     F2 28 02 F1 | 	add	local06, objptr
03ab0     14 13 02 FB | 	rdlong	arg01, local06
03ab4     89 01 00 FF 
03ab8     4B 26 06 F6 | 	mov	local05, ##@LR__5174
03abc     13 31 02 F6 | 	mov	local10, local05
03ac0     18 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     1C DB B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     33 31 02 F6 | 	mov	local10, local37
03adc     01 30 06 F1 | 	add	local10, #1
03ae0     03 30 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 26 02 F6 | 	mov	local05, objptr
03af0     F2 30 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 28 06 F6 | 	mov	local06, ##515
03afc     04 30 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     18 07 68 FC | 	wrlong	##515, local10
03b08     04 30 86 F1 | 	sub	local10, #4
03b0c     33 21 02 F6 | 	mov	local02, local37
03b10     02 20 06 F1 | 	add	local02, #2
03b14     1F 7D 02 F6 | 	mov	local48, local17
03b18     01 7C 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     3E 21 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     10 31 02 F6 | 	mov	local10, local02
03b30     03 30 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 30 02 F1 | 	add	local10, objptr
03b40     18 7F 02 FB | 	rdlong	local49, local10
03b44     33 31 02 F6 | 	mov	local10, local37
03b48     01 30 06 F1 | 	add	local10, #1
03b4c     03 30 66 F0 | 	shl	local10, #3
03b50     F2 26 02 F6 | 	mov	local05, objptr
03b54     F2 30 02 F1 | 	add	local10, objptr
03b58     33 33 02 F6 | 	mov	local11, local37
03b5c     01 32 06 F1 | 	add	local11, #1
03b60     19 39 02 F6 | 	mov	local14, local11
03b64     03 38 66 F0 | 	shl	local14, #3
03b68     F2 36 02 F6 | 	mov	local13, objptr
03b6c     F2 38 02 F1 | 	add	local14, objptr
03b70     1C 13 02 FB | 	rdlong	arg01, local14
03b74     3F 35 02 F6 | 	mov	local12, local49
03b78     1A 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     98 DA B1 FD | 	call	#__system___string_concat
03b88     FD 28 02 F6 | 	mov	local06, result1
03b8c     18 29 62 FC | 	wrlong	local06, local10
03b90     01 20 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     88 2D B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     24 0E B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 24 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 24 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 3E 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 26 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     13 31 02 A6 |  if_e	mov	local10, local05
03c20     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     A4 2E B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 24 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 26 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     13 31 02 F6 | 	mov	local10, local05
03c74     03 30 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 34 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 34 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     0C 42 B0 FD | 	call	#_compile
03cc0     FD 1E 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     0F 13 02 F6 | 	mov	arg01, local01
03ce0     20 A3 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     00 E4 05 F1 | 	add	objptr, ##41984
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     00 E4 85 F1 | 	sub	objptr, ##41984
03cfc     89 01 00 FF 
03d00     4D 14 06 F6 | 	mov	arg02, ##@LR__5175
03d04     E4 D8 B1 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     00 E4 05 F1 | 	add	objptr, ##41984
03d18     F2 24 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E4 E5 85 F1 | 	sub	objptr, ##13796
03d24     F2 24 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 24 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 24 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 34 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 34 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     18 41 B0 FD | 	call	#_compile
03db4     FD 1E 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     0F 13 02 F6 | 	mov	arg01, local01
03dd4     2C A2 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     00 E4 05 F1 | 	add	objptr, ##41984
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     00 E4 85 F1 | 	sub	objptr, ##41984
03df0     89 01 00 FF 
03df4     4E 14 06 F6 | 	mov	arg02, ##@LR__5176
03df8     F0 D7 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     00 E4 05 F1 | 	add	objptr, ##41984
03e0c     F2 24 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E4 E5 85 F1 | 	sub	objptr, ##13796
03e18     F2 24 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 24 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 34 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     F4 40 B0 FD | 	call	#_compile_assign
03ea0     FD 1E 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     40 A1 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     00 E4 05 F1 | 	add	objptr, ##41984
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     00 E4 85 F1 | 	sub	objptr, ##41984
03edc     89 01 00 FF 
03ee0     4F 14 06 F6 | 	mov	arg02, ##@LR__5177
03ee4     04 D7 B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     00 E4 05 F1 | 	add	objptr, ##41984
03ef8     F2 24 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E4 E5 85 F1 | 	sub	objptr, ##13796
03f04     F2 24 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 24 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 24 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 34 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     04 40 B0 FD | 	call	#_compile_assign
03f90     FD 1E 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     50 A0 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     00 E4 05 F1 | 	add	objptr, ##41984
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     00 E4 85 F1 | 	sub	objptr, ##41984
03fcc     89 01 00 FF 
03fd0     50 14 06 F6 | 	mov	arg02, ##@LR__5178
03fd4     14 D6 B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     00 E4 05 F1 | 	add	objptr, ##41984
03fe8     F2 24 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E4 E5 85 F1 | 	sub	objptr, ##13796
03ff4     F2 24 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 24 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     E8 76 B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 24 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     89 01 00 FF 
04048     51 12 06 F6 | 	mov	arg01, ##@LR__5179
0404c                 | ' 
0404c                 | ' write(text)
0404c     58 C0 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     54 C5 B1 FD | 	call	#_hg010b_spin2_crlf
04054     89 01 00 FF 
04058     52 12 06 F6 | 	mov	arg01, ##@LR__5180
0405c                 | ' 
0405c                 | ' write(text)
0405c     48 C0 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     44 C5 B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 24 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 24 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 1E 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     60 32 B2 FD | 	call	#__system___getiolock_0570
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     2C D5 B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     00 E2 B1 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     98 E1 B1 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     20 32 B2 FD | 	call	#__system___getiolock_0570
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 1F 02 F6 | 	mov	local01, arg01
040ec     89 01 00 FF 
040f0     58 14 06 F6 | 	mov	arg02, ##@LR__5181
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     F0 D4 B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     89 01 00 FF 
04108     5A 14 06 F6 | 	mov	arg02, ##@LR__5182
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     D8 D4 B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     89 01 00 FF 
04120     5C 14 06 F6 | 	mov	arg02, ##@LR__5183
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     C0 D4 B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     89 01 00 FF 
04138     5F 14 06 F6 | 	mov	arg02, ##@LR__5184
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     A8 D4 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     89 01 00 FF 
04150     63 14 06 F6 | 	mov	arg02, ##@LR__5185
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     90 D4 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     89 01 00 FF 
04168     65 14 06 F6 | 	mov	arg02, ##@LR__5186
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     78 D4 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     89 01 00 FF 
04180     67 14 06 F6 | 	mov	arg02, ##@LR__5187
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     60 D4 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     89 01 00 FF 
04198     6B 14 06 F6 | 	mov	arg02, ##@LR__5188
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     48 D4 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     89 01 00 FF 
041b0     6F 14 06 F6 | 	mov	arg02, ##@LR__5189
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     30 D4 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     89 01 00 FF 
041c8     73 14 06 F6 | 	mov	arg02, ##@LR__5190
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     18 D4 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     89 01 00 FF 
041e0     77 14 06 F6 | 	mov	arg02, ##@LR__5191
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     00 D4 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     89 01 00 FF 
041f8     7B 14 06 F6 | 	mov	arg02, ##@LR__5192
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     E8 D3 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     89 01 00 FF 
04210     7D 14 06 F6 | 	mov	arg02, ##@LR__5193
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     D0 D3 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     89 01 00 FF 
04228     81 14 06 F6 | 	mov	arg02, ##@LR__5194
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     B8 D3 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     89 01 00 FF 
04240     83 14 06 F6 | 	mov	arg02, ##@LR__5195
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     A0 D3 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     89 01 00 FF 
04258     85 14 06 F6 | 	mov	arg02, ##@LR__5196
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     88 D3 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     89 01 00 FF 
04270     88 14 06 F6 | 	mov	arg02, ##@LR__5197
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     70 D3 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     89 01 00 FF 
04288     8B 14 06 F6 | 	mov	arg02, ##@LR__5198
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     58 D3 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     89 01 00 FF 
042a0     8D 14 06 F6 | 	mov	arg02, ##@LR__5199
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     40 D3 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     89 01 00 FF 
042b8     8F 14 06 F6 | 	mov	arg02, ##@LR__5200
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     28 D3 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     89 01 00 FF 
042d0     92 14 06 F6 | 	mov	arg02, ##@LR__5201
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     10 D3 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     89 01 00 FF 
042e8     95 14 06 F6 | 	mov	arg02, ##@LR__5202
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     F8 D2 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 1F 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     6C F2 B1 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     89 01 00 FF 
043dc     98 14 06 F6 | 	mov	arg02, ##@LR__5203
043e0     08 D2 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     0F 13 02 F6 | 	mov	arg01, local01
043f4     09 21 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     10 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 20 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 21 82 F1 | 	sub	local02, arg01
0440c     10 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     0F 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     A0 F2 B1 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     89 01 00 FF 
04430     9A 14 06 F6 | 	mov	arg02, ##@LR__5204
04434     B4 D1 B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     0F 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     7C F2 B1 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     89 01 00 FF 
04454     9C 14 06 F6 | 	mov	arg02, ##@LR__5205
04458     90 D1 B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     50 F2 B1 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     0C 07 B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     20 FB B1 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     AC 03 B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 1F 02 F6 | 	mov	local01, arg01
044b4     89 01 00 FF 
044b8     9E 14 06 F6 | 	mov	arg02, ##@LR__5206
044bc     0F 13 02 F6 | 	mov	arg01, local01
044c0     28 D1 B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     89 01 00 FF 
044d0     A4 14 06 F6 | 	mov	arg02, ##@LR__5207
044d4     0F 13 02 F6 | 	mov	arg01, local01
044d8     10 D1 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     89 01 00 FF 
044e8     AB 14 06 F6 | 	mov	arg02, ##@LR__5208
044ec     0F 13 02 F6 | 	mov	arg01, local01
044f0     F8 D0 B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 1F 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     04 F1 B1 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     89 01 00 FF 
04544     B3 14 06 F6 | 	mov	arg02, ##@LR__5209
04548     A0 D0 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     0F 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     F0 F1 B1 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     89 01 00 FF 
04570     B5 14 06 F6 | 	mov	arg02, ##@LR__5210
04574     74 D0 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     0F 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     C8 F1 B1 FD | 	call	#__system__Mid_S
04590     FD 20 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     0F 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     B0 F1 B1 FD | 	call	#__system__Mid_S
045a8     FD 20 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     0F 13 02 F6 | 	mov	arg01, local01
045b0     09 23 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     11 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 22 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 23 82 F1 | 	sub	local03, arg01
045c8     11 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     0F 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     7C F1 B1 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     89 01 00 FF 
045e4     B7 14 06 F6 | 	mov	arg02, ##@LR__5211
045e8     00 D0 B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     0F 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     C8 F0 B1 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     84 05 B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     34 02 B2 FD | 	call	#__system___float_tointeger
04614     FD 24 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     0F 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     A0 F0 B1 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     5C 05 B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     40 FD B1 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     FC 01 B2 FD | 	call	#__system___float_tointeger
0464c     FD 24 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 24 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     64 F0 B1 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     89 01 00 FF 
0466c     B9 14 06 F6 | 	mov	arg02, ##@LR__5212
04670     78 CF B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 24 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     10 27 02 F6 | 	mov	local05, local02
04680     89 01 00 FF 
04684     BB 14 06 F6 | 	mov	arg02, ##@LR__5213
04688     13 13 02 F6 | 	mov	arg01, local05
0468c     5C CF B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     89 01 00 FF 
0469c     BD 14 06 F6 | 	mov	arg02, ##@LR__5214
046a0     13 13 02 F6 | 	mov	arg01, local05
046a4     44 CF B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     89 01 00 FF 
046b4     C0 14 06 F6 | 	mov	arg02, ##@LR__5215
046b8     13 13 02 F6 | 	mov	arg01, local05
046bc     2C CF B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     89 01 00 FF 
046cc     C2 14 06 F6 | 	mov	arg02, ##@LR__5216
046d0     13 13 02 F6 | 	mov	arg01, local05
046d4     14 CF B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     89 01 00 FF 
046e4     C5 14 06 F6 | 	mov	arg02, ##@LR__5217
046e8     13 13 02 F6 | 	mov	arg01, local05
046ec     FC CE B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     89 01 00 FF 
046fc     C7 14 06 F6 | 	mov	arg02, ##@LR__5218
04700     13 13 02 F6 | 	mov	arg01, local05
04704     E4 CE B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     89 01 00 FF 
04714     C9 14 06 F6 | 	mov	arg02, ##@LR__5219
04718     13 13 02 F6 | 	mov	arg01, local05
0471c     CC CE B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     89 01 00 FF 
0472c     CC 14 06 F6 | 	mov	arg02, ##@LR__5220
04730     13 13 02 F6 | 	mov	arg01, local05
04734     B4 CE B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     89 01 00 FF 
04744     CE 14 06 F6 | 	mov	arg02, ##@LR__5221
04748     13 13 02 F6 | 	mov	arg01, local05
0474c     9C CE B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     89 01 00 FF 
0475c     D1 14 06 F6 | 	mov	arg02, ##@LR__5222
04760     13 13 02 F6 | 	mov	arg01, local05
04764     84 CE B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     89 01 00 FF 
04774     D3 14 06 F6 | 	mov	arg02, ##@LR__5223
04778     13 13 02 F6 | 	mov	arg01, local05
0477c     6C CE B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     89 01 00 FF 
0478c     D6 14 06 F6 | 	mov	arg02, ##@LR__5224
04790     13 13 02 F6 | 	mov	arg01, local05
04794     54 CE B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     89 01 00 FF 
047a4     D8 14 06 F6 | 	mov	arg02, ##@LR__5225
047a8     13 13 02 F6 | 	mov	arg01, local05
047ac     3C CE B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 29 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 29 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 29 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 29 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 29 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 29 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 29 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 29 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 29 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 29 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 29 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 29 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 29 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 25 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 24 56 F2 | 	cmps	local04, #10 wc
04870     12 2B 02 C6 |  if_b	mov	local07, local04
04874     01 2A 66 C0 |  if_b	shl	local07, #1
04878     12 2B 02 C1 |  if_b	add	local07, local04
0487c     02 2A 66 C0 |  if_b	shl	local07, #2
04880     15 29 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     14 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 1F 02 F6 | 	mov	local01, arg01
048a0     89 01 00 FF 
048a4     DA 14 06 F6 | 	mov	arg02, ##@LR__5226
048a8     0F 13 02 F6 | 	mov	arg01, local01
048ac     3C CD B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     89 01 00 FF 
048bc     DC 14 06 F6 | 	mov	arg02, ##@LR__5227
048c0     0F 13 02 F6 | 	mov	arg01, local01
048c4     24 CD B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     89 01 00 FF 
048d4     DE 14 06 F6 | 	mov	arg02, ##@LR__5228
048d8     0F 13 02 F6 | 	mov	arg01, local01
048dc     0C CD B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     89 01 00 FF 
048ec     E0 14 06 F6 | 	mov	arg02, ##@LR__5229
048f0     0F 13 02 F6 | 	mov	arg01, local01
048f4     F4 CC B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     89 01 00 FF 
04904     E2 14 06 F6 | 	mov	arg02, ##@LR__5230
04908     0F 13 02 F6 | 	mov	arg01, local01
0490c     DC CC B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     89 01 00 FF 
0491c     E4 14 06 F6 | 	mov	arg02, ##@LR__5231
04920     0F 13 02 F6 | 	mov	arg01, local01
04924     C4 CC B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     89 01 00 FF 
04934     E6 14 06 F6 | 	mov	arg02, ##@LR__5232
04938     0F 13 02 F6 | 	mov	arg01, local01
0493c     AC CC B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     89 01 00 FF 
0494c     E8 14 06 F6 | 	mov	arg02, ##@LR__5233
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     94 CC B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     89 01 00 FF 
04964     EA 14 06 F6 | 	mov	arg02, ##@LR__5234
04968     0F 13 02 F6 | 	mov	arg01, local01
0496c     7C CC B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     89 01 00 FF 
0497c     EC 14 06 F6 | 	mov	arg02, ##@LR__5235
04980     0F 13 02 F6 | 	mov	arg01, local01
04984     64 CC B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     89 01 00 FF 
04994     EE 14 06 F6 | 	mov	arg02, ##@LR__5236
04998     0F 13 02 F6 | 	mov	arg01, local01
0499c     4C CC B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     89 01 00 FF 
049ac     F0 14 06 F6 | 	mov	arg02, ##@LR__5237
049b0     0F 13 02 F6 | 	mov	arg01, local01
049b4     34 CC B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     89 01 00 FF 
049c4     F2 14 06 F6 | 	mov	arg02, ##@LR__5238
049c8     0F 13 02 F6 | 	mov	arg01, local01
049cc     1C CC B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     89 01 00 FF 
049dc     F4 14 06 F6 | 	mov	arg02, ##@LR__5239
049e0     0F 13 02 F6 | 	mov	arg01, local01
049e4     04 CC B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     89 01 00 FF 
049f4     F6 14 06 F6 | 	mov	arg02, ##@LR__5240
049f8     0F 13 02 F6 | 	mov	arg01, local01
049fc     EC CB B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 1F 02 F6 | 	mov	local01, arg01
04aa0     89 01 00 FF 
04aa4     FA 14 06 F6 | 	mov	arg02, ##@LR__5242
04aa8     0F 13 02 F6 | 	mov	arg01, local01
04aac     3C CB B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     D4 0B 90 AD |  if_e	jmp	#LR__0310
04ab8     89 01 00 FF 
04abc     FF 14 06 F6 | 	mov	arg02, ##@LR__5243
04ac0     0F 13 02 F6 | 	mov	arg01, local01
04ac4     24 CB B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     C4 0B 90 AD |  if_e	jmp	#LR__0311
04ad0     89 01 00 FF 
04ad4     02 15 06 F6 | 	mov	arg02, ##@LR__5244
04ad8     0F 13 02 F6 | 	mov	arg01, local01
04adc     0C CB B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     B4 0B 90 AD |  if_e	jmp	#LR__0312
04ae8     89 01 00 FF 
04aec     06 15 06 F6 | 	mov	arg02, ##@LR__5245
04af0     0F 13 02 F6 | 	mov	arg01, local01
04af4     F4 CA B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     A4 0B 90 AD |  if_e	jmp	#LR__0313
04b00     89 01 00 FF 
04b04     0B 15 06 F6 | 	mov	arg02, ##@LR__5246
04b08     0F 13 02 F6 | 	mov	arg01, local01
04b0c     DC CA B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     94 0B 90 AD |  if_e	jmp	#LR__0314
04b18     89 01 00 FF 
04b1c     0F 15 06 F6 | 	mov	arg02, ##@LR__5247
04b20     0F 13 02 F6 | 	mov	arg01, local01
04b24     C4 CA B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     84 0B 90 AD |  if_e	jmp	#LR__0315
04b30     89 01 00 FF 
04b34     12 15 06 F6 | 	mov	arg02, ##@LR__5248
04b38     0F 13 02 F6 | 	mov	arg01, local01
04b3c     AC CA B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     74 0B 90 AD |  if_e	jmp	#LR__0316
04b48     89 01 00 FF 
04b4c     1D 15 06 F6 | 	mov	arg02, ##@LR__5249
04b50     0F 13 02 F6 | 	mov	arg01, local01
04b54     94 CA B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     64 0B 90 AD |  if_e	jmp	#LR__0317
04b60     89 01 00 FF 
04b64     21 15 06 F6 | 	mov	arg02, ##@LR__5250
04b68     0F 13 02 F6 | 	mov	arg01, local01
04b6c     7C CA B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     54 0B 90 AD |  if_e	jmp	#LR__0318
04b78     89 01 00 FF 
04b7c     2B 15 06 F6 | 	mov	arg02, ##@LR__5251
04b80     0F 13 02 F6 | 	mov	arg01, local01
04b84     64 CA B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     44 0B 90 AD |  if_e	jmp	#LR__0319
04b90     89 01 00 FF 
04b94     2F 15 06 F6 | 	mov	arg02, ##@LR__5252
04b98     0F 13 02 F6 | 	mov	arg01, local01
04b9c     4C CA B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     34 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     89 01 00 FF 
04bac     39 15 06 F6 | 	mov	arg02, ##@LR__5253
04bb0     0F 13 02 F6 | 	mov	arg01, local01
04bb4     34 CA B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     24 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     89 01 00 FF 
04bc4     3D 15 06 F6 | 	mov	arg02, ##@LR__5254
04bc8     0F 13 02 F6 | 	mov	arg01, local01
04bcc     1C CA B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     14 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     89 01 00 FF 
04bdc     48 15 06 F6 | 	mov	arg02, ##@LR__5255
04be0     0F 13 02 F6 | 	mov	arg01, local01
04be4     04 CA B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     04 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     89 01 00 FF 
04bf4     4C 15 06 F6 | 	mov	arg02, ##@LR__5256
04bf8     0F 13 02 F6 | 	mov	arg01, local01
04bfc     EC C9 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     F4 0A 90 AD |  if_e	jmp	#LR__0324
04c08     89 01 00 FF 
04c0c     53 15 06 F6 | 	mov	arg02, ##@LR__5257
04c10     0F 13 02 F6 | 	mov	arg01, local01
04c14     D4 C9 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     E4 0A 90 AD |  if_e	jmp	#LR__0325
04c20     89 01 00 FF 
04c24     57 15 06 F6 | 	mov	arg02, ##@LR__5258
04c28     0F 13 02 F6 | 	mov	arg01, local01
04c2c     BC C9 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     D4 0A 90 AD |  if_e	jmp	#LR__0326
04c38     89 01 00 FF 
04c3c     5D 15 06 F6 | 	mov	arg02, ##@LR__5259
04c40     0F 13 02 F6 | 	mov	arg01, local01
04c44     A4 C9 B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     C4 0A 90 AD |  if_e	jmp	#LR__0327
04c50     89 01 00 FF 
04c54     63 15 06 F6 | 	mov	arg02, ##@LR__5260
04c58     0F 13 02 F6 | 	mov	arg01, local01
04c5c     8C C9 B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     B4 0A 90 AD |  if_e	jmp	#LR__0328
04c68     89 01 00 FF 
04c6c     67 15 06 F6 | 	mov	arg02, ##@LR__5261
04c70     0F 13 02 F6 | 	mov	arg01, local01
04c74     74 C9 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     A4 0A 90 AD |  if_e	jmp	#LR__0329
04c80     89 01 00 FF 
04c84     6D 15 06 F6 | 	mov	arg02, ##@LR__5262
04c88     0F 13 02 F6 | 	mov	arg01, local01
04c8c     5C C9 B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     94 0A 90 AD |  if_e	jmp	#LR__0330
04c98     89 01 00 FF 
04c9c     70 15 06 F6 | 	mov	arg02, ##@LR__5263
04ca0     0F 13 02 F6 | 	mov	arg01, local01
04ca4     44 C9 B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     84 0A 90 AD |  if_e	jmp	#LR__0331
04cb0     89 01 00 FF 
04cb4     76 15 06 F6 | 	mov	arg02, ##@LR__5264
04cb8     0F 13 02 F6 | 	mov	arg01, local01
04cbc     2C C9 B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     74 0A 90 AD |  if_e	jmp	#LR__0332
04cc8     89 01 00 FF 
04ccc     7A 15 06 F6 | 	mov	arg02, ##@LR__5265
04cd0     0F 13 02 F6 | 	mov	arg01, local01
04cd4     14 C9 B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     64 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     89 01 00 FF 
04ce4     81 15 06 F6 | 	mov	arg02, ##@LR__5266
04ce8     0F 13 02 F6 | 	mov	arg01, local01
04cec     FC C8 B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     54 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     89 01 00 FF 
04cfc     88 15 06 F6 | 	mov	arg02, ##@LR__5267
04d00     0F 13 02 F6 | 	mov	arg01, local01
04d04     E4 C8 B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     44 0A 90 AD |  if_e	jmp	#LR__0335
04d10     89 01 00 FF 
04d14     8F 15 06 F6 | 	mov	arg02, ##@LR__5268
04d18     0F 13 02 F6 | 	mov	arg01, local01
04d1c     CC C8 B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     34 0A 90 AD |  if_e	jmp	#LR__0336
04d28     89 01 00 FF 
04d2c     99 15 06 F6 | 	mov	arg02, ##@LR__5269
04d30     0F 13 02 F6 | 	mov	arg01, local01
04d34     B4 C8 B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     24 0A 90 AD |  if_e	jmp	#LR__0337
04d40     89 01 00 FF 
04d44     9D 15 06 F6 | 	mov	arg02, ##@LR__5270
04d48     0F 13 02 F6 | 	mov	arg01, local01
04d4c     9C C8 B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     14 0A 90 AD |  if_e	jmp	#LR__0338
04d58     89 01 00 FF 
04d5c     A1 15 06 F6 | 	mov	arg02, ##@LR__5271
04d60     0F 13 02 F6 | 	mov	arg01, local01
04d64     84 C8 B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     04 0A 90 AD |  if_e	jmp	#LR__0339
04d70     89 01 00 FF 
04d74     A8 15 06 F6 | 	mov	arg02, ##@LR__5272
04d78     0F 13 02 F6 | 	mov	arg01, local01
04d7c     6C C8 B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     F4 09 90 AD |  if_e	jmp	#LR__0340
04d88     89 01 00 FF 
04d8c     AC 15 06 F6 | 	mov	arg02, ##@LR__5273
04d90     0F 13 02 F6 | 	mov	arg01, local01
04d94     54 C8 B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     E4 09 90 AD |  if_e	jmp	#LR__0341
04da0     89 01 00 FF 
04da4     B0 15 06 F6 | 	mov	arg02, ##@LR__5274
04da8     0F 13 02 F6 | 	mov	arg01, local01
04dac     3C C8 B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     D4 09 90 AD |  if_e	jmp	#LR__0342
04db8     89 01 00 FF 
04dbc     B6 15 06 F6 | 	mov	arg02, ##@LR__5275
04dc0     0F 13 02 F6 | 	mov	arg01, local01
04dc4     24 C8 B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     C4 09 90 AD |  if_e	jmp	#LR__0343
04dd0     89 01 00 FF 
04dd4     BB 15 06 F6 | 	mov	arg02, ##@LR__5276
04dd8     0F 13 02 F6 | 	mov	arg01, local01
04ddc     0C C8 B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     B4 09 90 AD |  if_e	jmp	#LR__0344
04de8     89 01 00 FF 
04dec     C2 15 06 F6 | 	mov	arg02, ##@LR__5277
04df0     0F 13 02 F6 | 	mov	arg01, local01
04df4     F4 C7 B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     A4 09 90 AD |  if_e	jmp	#LR__0345
04e00     89 01 00 FF 
04e04     C6 15 06 F6 | 	mov	arg02, ##@LR__5278
04e08     0F 13 02 F6 | 	mov	arg01, local01
04e0c     DC C7 B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     94 09 90 AD |  if_e	jmp	#LR__0346
04e18     89 01 00 FF 
04e1c     CB 15 06 F6 | 	mov	arg02, ##@LR__5279
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     C4 C7 B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     84 09 90 AD |  if_e	jmp	#LR__0347
04e30     89 01 00 FF 
04e34     CF 15 06 F6 | 	mov	arg02, ##@LR__5280
04e38     0F 13 02 F6 | 	mov	arg01, local01
04e3c     AC C7 B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     74 09 90 AD |  if_e	jmp	#LR__0348
04e48     89 01 00 FF 
04e4c     D5 15 06 F6 | 	mov	arg02, ##@LR__5281
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     94 C7 B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     64 09 90 AD |  if_e	jmp	#LR__0349
04e60     89 01 00 FF 
04e64     D8 15 06 F6 | 	mov	arg02, ##@LR__5282
04e68     0F 13 02 F6 | 	mov	arg01, local01
04e6c     7C C7 B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     54 09 90 AD |  if_e	jmp	#LR__0350
04e78     89 01 00 FF 
04e7c     E0 15 06 F6 | 	mov	arg02, ##@LR__5283
04e80     0F 13 02 F6 | 	mov	arg01, local01
04e84     64 C7 B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     44 09 90 AD |  if_e	jmp	#LR__0351
04e90     89 01 00 FF 
04e94     E4 15 06 F6 | 	mov	arg02, ##@LR__5284
04e98     0F 13 02 F6 | 	mov	arg01, local01
04e9c     4C C7 B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     34 09 90 AD |  if_e	jmp	#LR__0352
04ea8     89 01 00 FF 
04eac     E9 15 06 F6 | 	mov	arg02, ##@LR__5285
04eb0     0F 13 02 F6 | 	mov	arg01, local01
04eb4     34 C7 B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     24 09 90 AD |  if_e	jmp	#LR__0353
04ec0     89 01 00 FF 
04ec4     ED 15 06 F6 | 	mov	arg02, ##@LR__5286
04ec8     0F 13 02 F6 | 	mov	arg01, local01
04ecc     1C C7 B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     14 09 90 AD |  if_e	jmp	#LR__0354
04ed8     89 01 00 FF 
04edc     F2 15 06 F6 | 	mov	arg02, ##@LR__5287
04ee0     0F 13 02 F6 | 	mov	arg01, local01
04ee4     04 C7 B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     04 09 90 AD |  if_e	jmp	#LR__0355
04ef0     89 01 00 FF 
04ef4     F6 15 06 F6 | 	mov	arg02, ##@LR__5288
04ef8     0F 13 02 F6 | 	mov	arg01, local01
04efc     EC C6 B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     F4 08 90 AD |  if_e	jmp	#LR__0356
04f08     89 01 00 FF 
04f0c     F9 15 06 F6 | 	mov	arg02, ##@LR__5289
04f10     0F 13 02 F6 | 	mov	arg01, local01
04f14     D4 C6 B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     E4 08 90 AD |  if_e	jmp	#LR__0357
04f20     89 01 00 FF 
04f24     FF 15 06 F6 | 	mov	arg02, ##@LR__5290
04f28     0F 13 02 F6 | 	mov	arg01, local01
04f2c     BC C6 B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     D4 08 90 AD |  if_e	jmp	#LR__0358
04f38     8A 01 00 FF 
04f3c     03 14 06 F6 | 	mov	arg02, ##@LR__5291
04f40     0F 13 02 F6 | 	mov	arg01, local01
04f44     A4 C6 B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     C4 08 90 AD |  if_e	jmp	#LR__0359
04f50     8A 01 00 FF 
04f54     07 14 06 F6 | 	mov	arg02, ##@LR__5292
04f58     0F 13 02 F6 | 	mov	arg01, local01
04f5c     8C C6 B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     B4 08 90 AD |  if_e	jmp	#LR__0360
04f68     8A 01 00 FF 
04f6c     0D 14 06 F6 | 	mov	arg02, ##@LR__5293
04f70     0F 13 02 F6 | 	mov	arg01, local01
04f74     74 C6 B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     A4 08 90 AD |  if_e	jmp	#LR__0361
04f80     8A 01 00 FF 
04f84     12 14 06 F6 | 	mov	arg02, ##@LR__5294
04f88     0F 13 02 F6 | 	mov	arg01, local01
04f8c     5C C6 B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     94 08 90 AD |  if_e	jmp	#LR__0362
04f98     8A 01 00 FF 
04f9c     15 14 06 F6 | 	mov	arg02, ##@LR__5295
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     44 C6 B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     84 08 90 AD |  if_e	jmp	#LR__0363
04fb0     8A 01 00 FF 
04fb4     18 14 06 F6 | 	mov	arg02, ##@LR__5296
04fb8     0F 13 02 F6 | 	mov	arg01, local01
04fbc     2C C6 B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     74 08 90 AD |  if_e	jmp	#LR__0364
04fc8     8A 01 00 FF 
04fcc     1C 14 06 F6 | 	mov	arg02, ##@LR__5297
04fd0     0F 13 02 F6 | 	mov	arg01, local01
04fd4     14 C6 B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     64 08 90 AD |  if_e	jmp	#LR__0365
04fe0     8A 01 00 FF 
04fe4     1F 14 06 F6 | 	mov	arg02, ##@LR__5298
04fe8     0F 13 02 F6 | 	mov	arg01, local01
04fec     FC C5 B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     54 08 90 AD |  if_e	jmp	#LR__0366
04ff8     8A 01 00 FF 
04ffc     24 14 06 F6 | 	mov	arg02, ##@LR__5299
05000     0F 13 02 F6 | 	mov	arg01, local01
05004     E4 C5 B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     44 08 90 AD |  if_e	jmp	#LR__0367
05010     8A 01 00 FF 
05014     27 14 06 F6 | 	mov	arg02, ##@LR__5300
05018     0F 13 02 F6 | 	mov	arg01, local01
0501c     CC C5 B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     34 08 90 AD |  if_e	jmp	#LR__0368
05028     8A 01 00 FF 
0502c     2C 14 06 F6 | 	mov	arg02, ##@LR__5301
05030     0F 13 02 F6 | 	mov	arg01, local01
05034     B4 C5 B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     24 08 90 AD |  if_e	jmp	#LR__0369
05040     8A 01 00 FF 
05044     30 14 06 F6 | 	mov	arg02, ##@LR__5302
05048     0F 13 02 F6 | 	mov	arg01, local01
0504c     9C C5 B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     14 08 90 AD |  if_e	jmp	#LR__0370
05058     8A 01 00 FF 
0505c     36 14 06 F6 | 	mov	arg02, ##@LR__5303
05060     0F 13 02 F6 | 	mov	arg01, local01
05064     84 C5 B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     04 08 90 AD |  if_e	jmp	#LR__0371
05070     8A 01 00 FF 
05074     3C 14 06 F6 | 	mov	arg02, ##@LR__5304
05078     0F 13 02 F6 | 	mov	arg01, local01
0507c     6C C5 B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     F4 07 90 AD |  if_e	jmp	#LR__0372
05088     8A 01 00 FF 
0508c     41 14 06 F6 | 	mov	arg02, ##@LR__5305
05090     0F 13 02 F6 | 	mov	arg01, local01
05094     54 C5 B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     E4 07 90 AD |  if_e	jmp	#LR__0373
050a0     8A 01 00 FF 
050a4     44 14 06 F6 | 	mov	arg02, ##@LR__5306
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     3C C5 B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     D4 07 90 AD |  if_e	jmp	#LR__0374
050b8     8A 01 00 FF 
050bc     4A 14 06 F6 | 	mov	arg02, ##@LR__5307
050c0     0F 13 02 F6 | 	mov	arg01, local01
050c4     24 C5 B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     C4 07 90 AD |  if_e	jmp	#LR__0375
050d0     8A 01 00 FF 
050d4     4E 14 06 F6 | 	mov	arg02, ##@LR__5308
050d8     0F 13 02 F6 | 	mov	arg01, local01
050dc     0C C5 B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     B4 07 90 AD |  if_e	jmp	#LR__0376
050e8     8A 01 00 FF 
050ec     53 14 06 F6 | 	mov	arg02, ##@LR__5309
050f0     0F 13 02 F6 | 	mov	arg01, local01
050f4     F4 C4 B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     A4 07 90 AD |  if_e	jmp	#LR__0377
05100     8A 01 00 FF 
05104     56 14 06 F6 | 	mov	arg02, ##@LR__5310
05108     0F 13 02 F6 | 	mov	arg01, local01
0510c     DC C4 B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     94 07 90 AD |  if_e	jmp	#LR__0378
05118     8A 01 00 FF 
0511c     5B 14 06 F6 | 	mov	arg02, ##@LR__5311
05120     0F 13 02 F6 | 	mov	arg01, local01
05124     C4 C4 B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     84 07 90 AD |  if_e	jmp	#LR__0379
05130     8A 01 00 FF 
05134     61 14 06 F6 | 	mov	arg02, ##@LR__5312
05138     0F 13 02 F6 | 	mov	arg01, local01
0513c     AC C4 B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     74 07 90 AD |  if_e	jmp	#LR__0380
05148     8A 01 00 FF 
0514c     65 14 06 F6 | 	mov	arg02, ##@LR__5313
05150     0F 13 02 F6 | 	mov	arg01, local01
05154     94 C4 B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     64 07 90 AD |  if_e	jmp	#LR__0381
05160     8A 01 00 FF 
05164     6E 14 06 F6 | 	mov	arg02, ##@LR__5314
05168     0F 13 02 F6 | 	mov	arg01, local01
0516c     7C C4 B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     54 07 90 AD |  if_e	jmp	#LR__0382
05178     8A 01 00 FF 
0517c     74 14 06 F6 | 	mov	arg02, ##@LR__5315
05180     0F 13 02 F6 | 	mov	arg01, local01
05184     64 C4 B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     44 07 90 AD |  if_e	jmp	#LR__0383
05190     8A 01 00 FF 
05194     7A 14 06 F6 | 	mov	arg02, ##@LR__5316
05198     0F 13 02 F6 | 	mov	arg01, local01
0519c     4C C4 B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     34 07 90 AD |  if_e	jmp	#LR__0384
051a8     8A 01 00 FF 
051ac     83 14 06 F6 | 	mov	arg02, ##@LR__5317
051b0     0F 13 02 F6 | 	mov	arg01, local01
051b4     34 C4 B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     24 07 90 AD |  if_e	jmp	#LR__0385
051c0     8A 01 00 FF 
051c4     8D 14 06 F6 | 	mov	arg02, ##@LR__5318
051c8     0F 13 02 F6 | 	mov	arg01, local01
051cc     1C C4 B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     14 07 90 AD |  if_e	jmp	#LR__0386
051d8     8A 01 00 FF 
051dc     96 14 06 F6 | 	mov	arg02, ##@LR__5319
051e0     0F 13 02 F6 | 	mov	arg01, local01
051e4     04 C4 B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     04 07 90 AD |  if_e	jmp	#LR__0387
051f0     8A 01 00 FF 
051f4     9B 14 06 F6 | 	mov	arg02, ##@LR__5320
051f8     0F 13 02 F6 | 	mov	arg01, local01
051fc     EC C3 B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     F4 06 90 AD |  if_e	jmp	#LR__0388
05208     8A 01 00 FF 
0520c     9E 14 06 F6 | 	mov	arg02, ##@LR__5321
05210     0F 13 02 F6 | 	mov	arg01, local01
05214     D4 C3 B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     E4 06 90 AD |  if_e	jmp	#LR__0389
05220     8A 01 00 FF 
05224     A3 14 06 F6 | 	mov	arg02, ##@LR__5322
05228     0F 13 02 F6 | 	mov	arg01, local01
0522c     BC C3 B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     D4 06 90 AD |  if_e	jmp	#LR__0390
05238     8A 01 00 FF 
0523c     A7 14 06 F6 | 	mov	arg02, ##@LR__5323
05240     0F 13 02 F6 | 	mov	arg01, local01
05244     A4 C3 B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     C4 06 90 AD |  if_e	jmp	#LR__0391
05250     8A 01 00 FF 
05254     AC 14 06 F6 | 	mov	arg02, ##@LR__5324
05258     0F 13 02 F6 | 	mov	arg01, local01
0525c     8C C3 B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     B4 06 90 AD |  if_e	jmp	#LR__0392
05268     8A 01 00 FF 
0526c     B0 14 06 F6 | 	mov	arg02, ##@LR__5325
05270     0F 13 02 F6 | 	mov	arg01, local01
05274     74 C3 B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     A4 06 90 AD |  if_e	jmp	#LR__0393
05280     8A 01 00 FF 
05284     B9 14 06 F6 | 	mov	arg02, ##@LR__5326
05288     0F 13 02 F6 | 	mov	arg01, local01
0528c     5C C3 B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     94 06 90 AD |  if_e	jmp	#LR__0394
05298     8A 01 00 FF 
0529c     BE 14 06 F6 | 	mov	arg02, ##@LR__5327
052a0     0F 13 02 F6 | 	mov	arg01, local01
052a4     44 C3 B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     84 06 90 AD |  if_e	jmp	#LR__0395
052b0     8A 01 00 FF 
052b4     C4 14 06 F6 | 	mov	arg02, ##@LR__5328
052b8     0F 13 02 F6 | 	mov	arg01, local01
052bc     2C C3 B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     74 06 90 AD |  if_e	jmp	#LR__0396
052c8     8A 01 00 FF 
052cc     C6 14 06 F6 | 	mov	arg02, ##@LR__5329
052d0     0F 13 02 F6 | 	mov	arg01, local01
052d4     14 C3 B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     64 06 90 AD |  if_e	jmp	#LR__0397
052e0     8A 01 00 FF 
052e4     CA 14 06 F6 | 	mov	arg02, ##@LR__5330
052e8     0F 13 02 F6 | 	mov	arg01, local01
052ec     FC C2 B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     54 06 90 AD |  if_e	jmp	#LR__0398
052f8     8A 01 00 FF 
052fc     CE 14 06 F6 | 	mov	arg02, ##@LR__5331
05300     0F 13 02 F6 | 	mov	arg01, local01
05304     E4 C2 B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     44 06 90 AD |  if_e	jmp	#LR__0399
05310     8A 01 00 FF 
05314     D6 14 06 F6 | 	mov	arg02, ##@LR__5332
05318     0F 13 02 F6 | 	mov	arg01, local01
0531c     CC C2 B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     34 06 90 AD |  if_e	jmp	#LR__0400
05328     8A 01 00 FF 
0532c     DA 14 06 F6 | 	mov	arg02, ##@LR__5333
05330     0F 13 02 F6 | 	mov	arg01, local01
05334     B4 C2 B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     24 06 90 AD |  if_e	jmp	#LR__0401
05340     8A 01 00 FF 
05344     DC 14 06 F6 | 	mov	arg02, ##@LR__5334
05348     0F 13 02 F6 | 	mov	arg01, local01
0534c     9C C2 B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     14 06 90 AD |  if_e	jmp	#LR__0402
05358     8A 01 00 FF 
0535c     E3 14 06 F6 | 	mov	arg02, ##@LR__5335
05360     0F 13 02 F6 | 	mov	arg01, local01
05364     84 C2 B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     04 06 90 AD |  if_e	jmp	#LR__0403
05370     8A 01 00 FF 
05374     E7 14 06 F6 | 	mov	arg02, ##@LR__5336
05378     0F 13 02 F6 | 	mov	arg01, local01
0537c     6C C2 B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     F4 05 90 AD |  if_e	jmp	#LR__0404
05388     8A 01 00 FF 
0538c     EC 14 06 F6 | 	mov	arg02, ##@LR__5337
05390     0F 13 02 F6 | 	mov	arg01, local01
05394     54 C2 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     E4 05 90 AD |  if_e	jmp	#LR__0405
053a0     8A 01 00 FF 
053a4     EF 14 06 F6 | 	mov	arg02, ##@LR__5338
053a8     0F 13 02 F6 | 	mov	arg01, local01
053ac     3C C2 B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     D4 05 90 AD |  if_e	jmp	#LR__0406
053b8     8A 01 00 FF 
053bc     F8 14 06 F6 | 	mov	arg02, ##@LR__5339
053c0     0F 13 02 F6 | 	mov	arg01, local01
053c4     24 C2 B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     C4 05 90 AD |  if_e	jmp	#LR__0407
053d0     8A 01 00 FF 
053d4     FC 14 06 F6 | 	mov	arg02, ##@LR__5340
053d8     0F 13 02 F6 | 	mov	arg01, local01
053dc     0C C2 B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     B4 05 90 AD |  if_e	jmp	#LR__0408
053e8     8A 01 00 FF 
053ec     03 15 06 F6 | 	mov	arg02, ##@LR__5341
053f0     0F 13 02 F6 | 	mov	arg01, local01
053f4     F4 C1 B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     A4 05 90 AD |  if_e	jmp	#LR__0409
05400     8A 01 00 FF 
05404     07 15 06 F6 | 	mov	arg02, ##@LR__5342
05408     0F 13 02 F6 | 	mov	arg01, local01
0540c     DC C1 B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     94 05 90 AD |  if_e	jmp	#LR__0410
05418     8A 01 00 FF 
0541c     0E 15 06 F6 | 	mov	arg02, ##@LR__5343
05420     0F 13 02 F6 | 	mov	arg01, local01
05424     C4 C1 B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     84 05 90 AD |  if_e	jmp	#LR__0411
05430     8A 01 00 FF 
05434     12 15 06 F6 | 	mov	arg02, ##@LR__5344
05438     0F 13 02 F6 | 	mov	arg01, local01
0543c     AC C1 B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     74 05 90 AD |  if_e	jmp	#LR__0412
05448     8A 01 00 FF 
0544c     19 15 06 F6 | 	mov	arg02, ##@LR__5345
05450     0F 13 02 F6 | 	mov	arg01, local01
05454     94 C1 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     64 05 90 AD |  if_e	jmp	#LR__0413
05460     8A 01 00 FF 
05464     1C 15 06 F6 | 	mov	arg02, ##@LR__5346
05468     0F 13 02 F6 | 	mov	arg01, local01
0546c     7C C1 B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     54 05 90 AD |  if_e	jmp	#LR__0414
05478     8A 01 00 FF 
0547c     27 15 06 F6 | 	mov	arg02, ##@LR__5347
05480     0F 13 02 F6 | 	mov	arg01, local01
05484     64 C1 B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     44 05 90 AD |  if_e	jmp	#LR__0415
05490     8A 01 00 FF 
05494     2B 15 06 F6 | 	mov	arg02, ##@LR__5348
05498     0F 13 02 F6 | 	mov	arg01, local01
0549c     4C C1 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     34 05 90 AD |  if_e	jmp	#LR__0416
054a8     8A 01 00 FF 
054ac     32 15 06 F6 | 	mov	arg02, ##@LR__5349
054b0     0F 13 02 F6 | 	mov	arg01, local01
054b4     34 C1 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     24 05 90 AD |  if_e	jmp	#LR__0417
054c0     8A 01 00 FF 
054c4     36 15 06 F6 | 	mov	arg02, ##@LR__5350
054c8     0F 13 02 F6 | 	mov	arg01, local01
054cc     1C C1 B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     14 05 90 AD |  if_e	jmp	#LR__0418
054d8     8A 01 00 FF 
054dc     3E 15 06 F6 | 	mov	arg02, ##@LR__5351
054e0     0F 13 02 F6 | 	mov	arg01, local01
054e4     04 C1 B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     04 05 90 AD |  if_e	jmp	#LR__0419
054f0     8A 01 00 FF 
054f4     42 15 06 F6 | 	mov	arg02, ##@LR__5352
054f8     0F 13 02 F6 | 	mov	arg01, local01
054fc     EC C0 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     F4 04 90 AD |  if_e	jmp	#LR__0420
05508     8A 01 00 FF 
0550c     49 15 06 F6 | 	mov	arg02, ##@LR__5353
05510     0F 13 02 F6 | 	mov	arg01, local01
05514     D4 C0 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     E4 04 90 AD |  if_e	jmp	#LR__0421
05520     8A 01 00 FF 
05524     50 15 06 F6 | 	mov	arg02, ##@LR__5354
05528     0F 13 02 F6 | 	mov	arg01, local01
0552c     BC C0 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     D4 04 90 AD |  if_e	jmp	#LR__0422
05538     8A 01 00 FF 
0553c     54 15 06 F6 | 	mov	arg02, ##@LR__5355
05540     0F 13 02 F6 | 	mov	arg01, local01
05544     A4 C0 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     C4 04 90 AD |  if_e	jmp	#LR__0423
05550     8A 01 00 FF 
05554     5A 15 06 F6 | 	mov	arg02, ##@LR__5356
05558     0F 13 02 F6 | 	mov	arg01, local01
0555c     8C C0 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     B4 04 90 AD |  if_e	jmp	#LR__0424
05568     8A 01 00 FF 
0556c     5E 15 06 F6 | 	mov	arg02, ##@LR__5357
05570     0F 13 02 F6 | 	mov	arg01, local01
05574     74 C0 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     A4 04 90 AD |  if_e	jmp	#LR__0425
05580     8A 01 00 FF 
05584     65 15 06 F6 | 	mov	arg02, ##@LR__5358
05588     0F 13 02 F6 | 	mov	arg01, local01
0558c     5C C0 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     94 04 90 AD |  if_e	jmp	#LR__0426
05598     8A 01 00 FF 
0559c     6A 15 06 F6 | 	mov	arg02, ##@LR__5359
055a0     0F 13 02 F6 | 	mov	arg01, local01
055a4     44 C0 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     84 04 90 AD |  if_e	jmp	#LR__0427
055b0     8A 01 00 FF 
055b4     6F 15 06 F6 | 	mov	arg02, ##@LR__5360
055b8     0F 13 02 F6 | 	mov	arg01, local01
055bc     2C C0 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     74 04 90 AD |  if_e	jmp	#LR__0428
055c8     8A 01 00 FF 
055cc     76 15 06 F6 | 	mov	arg02, ##@LR__5361
055d0     0F 13 02 F6 | 	mov	arg01, local01
055d4     14 C0 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     64 04 90 AD |  if_e	jmp	#LR__0429
055e0     8A 01 00 FF 
055e4     79 15 06 F6 | 	mov	arg02, ##@LR__5362
055e8     0F 13 02 F6 | 	mov	arg01, local01
055ec     FC BF B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     54 04 90 AD |  if_e	jmp	#LR__0430
055f8     8A 01 00 FF 
055fc     83 15 06 F6 | 	mov	arg02, ##@LR__5363
05600     0F 13 02 F6 | 	mov	arg01, local01
05604     E4 BF B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     44 04 90 AD |  if_e	jmp	#LR__0431
05610     8A 01 00 FF 
05614     87 15 06 F6 | 	mov	arg02, ##@LR__5364
05618     0F 13 02 F6 | 	mov	arg01, local01
0561c     CC BF B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     34 04 90 AD |  if_e	jmp	#LR__0432
05628     8A 01 00 FF 
0562c     8F 15 06 F6 | 	mov	arg02, ##@LR__5365
05630     0F 13 02 F6 | 	mov	arg01, local01
05634     B4 BF B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     24 04 90 AD |  if_e	jmp	#LR__0433
05640     8A 01 00 FF 
05644     93 15 06 F6 | 	mov	arg02, ##@LR__5366
05648     0F 13 02 F6 | 	mov	arg01, local01
0564c     9C BF B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     14 04 90 AD |  if_e	jmp	#LR__0434
05658     8A 01 00 FF 
0565c     99 15 06 F6 | 	mov	arg02, ##@LR__5367
05660     0F 13 02 F6 | 	mov	arg01, local01
05664     84 BF B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     04 04 90 AD |  if_e	jmp	#LR__0435
05670     8A 01 00 FF 
05674     9F 15 06 F6 | 	mov	arg02, ##@LR__5368
05678     0F 13 02 F6 | 	mov	arg01, local01
0567c     6C BF B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     F4 03 90 AD |  if_e	jmp	#LR__0436
05688     F8 03 90 FD | 	jmp	#LR__0437
0568c                 | LR__0310
0568c     5C FA 05 F6 | 	mov	result1, #92
05690     F4 03 90 FD | 	jmp	#LR__0438
05694                 | LR__0311
05694     5C FA 05 F6 | 	mov	result1, #92
05698     EC 03 90 FD | 	jmp	#LR__0438
0569c                 | LR__0312
0569c     47 FA 05 F6 | 	mov	result1, #71
056a0     E4 03 90 FD | 	jmp	#LR__0438
056a4                 | LR__0313
056a4     59 FA 05 F6 | 	mov	result1, #89
056a8     DC 03 90 FD | 	jmp	#LR__0438
056ac                 | LR__0314
056ac     59 FA 05 F6 | 	mov	result1, #89
056b0     D4 03 90 FD | 	jmp	#LR__0438
056b4                 | LR__0315
056b4     C3 FA 05 F6 | 	mov	result1, #195
056b8     CC 03 90 FD | 	jmp	#LR__0438
056bc                 | LR__0316
056bc     AE FA 05 F6 | 	mov	result1, #174
056c0     C4 03 90 FD | 	jmp	#LR__0438
056c4                 | LR__0317
056c4     AE FA 05 F6 | 	mov	result1, #174
056c8     BC 03 90 FD | 	jmp	#LR__0438
056cc                 | LR__0318
056cc     B1 FA 05 F6 | 	mov	result1, #177
056d0     B4 03 90 FD | 	jmp	#LR__0438
056d4                 | LR__0319
056d4     B1 FA 05 F6 | 	mov	result1, #177
056d8     AC 03 90 FD | 	jmp	#LR__0438
056dc                 | LR__0320
056dc     AF FA 05 F6 | 	mov	result1, #175
056e0     A4 03 90 FD | 	jmp	#LR__0438
056e4                 | LR__0321
056e4     AF FA 05 F6 | 	mov	result1, #175
056e8     9C 03 90 FD | 	jmp	#LR__0438
056ec                 | LR__0322
056ec     B0 FA 05 F6 | 	mov	result1, #176
056f0     94 03 90 FD | 	jmp	#LR__0438
056f4                 | LR__0323
056f4     B0 FA 05 F6 | 	mov	result1, #176
056f8     8C 03 90 FD | 	jmp	#LR__0438
056fc                 | LR__0324
056fc     45 FA 05 F6 | 	mov	result1, #69
05700     84 03 90 FD | 	jmp	#LR__0438
05704                 | LR__0325
05704     45 FA 05 F6 | 	mov	result1, #69
05708     7C 03 90 FD | 	jmp	#LR__0438
0570c                 | LR__0326
0570c     69 FA 05 F6 | 	mov	result1, #105
05710     74 03 90 FD | 	jmp	#LR__0438
05714                 | LR__0327
05714     B4 FA 05 F6 | 	mov	result1, #180
05718     6C 03 90 FD | 	jmp	#LR__0438
0571c                 | LR__0328
0571c     40 FA 05 F6 | 	mov	result1, #64
05720     64 03 90 FD | 	jmp	#LR__0438
05724                 | LR__0329
05724     49 FA 05 F6 | 	mov	result1, #73
05728     5C 03 90 FD | 	jmp	#LR__0438
0572c                 | LR__0330
0572c     49 FA 05 F6 | 	mov	result1, #73
05730     54 03 90 FD | 	jmp	#LR__0438
05734                 | LR__0331
05734     50 FA 05 F6 | 	mov	result1, #80
05738     4C 03 90 FD | 	jmp	#LR__0438
0573c                 | LR__0332
0573c     50 FA 05 F6 | 	mov	result1, #80
05740     44 03 90 FD | 	jmp	#LR__0438
05744                 | LR__0333
05744     68 FA 05 F6 | 	mov	result1, #104
05748     3C 03 90 FD | 	jmp	#LR__0438
0574c                 | LR__0334
0574c     73 FA 05 F6 | 	mov	result1, #115
05750     34 03 90 FD | 	jmp	#LR__0438
05754                 | LR__0335
05754     74 FA 05 F6 | 	mov	result1, #116
05758     2C 03 90 FD | 	jmp	#LR__0438
0575c                 | LR__0336
0575c     6C FA 05 F6 | 	mov	result1, #108
05760     24 03 90 FD | 	jmp	#LR__0438
05764                 | LR__0337
05764     6C FA 05 F6 | 	mov	result1, #108
05768     1C 03 90 FD | 	jmp	#LR__0438
0576c                 | LR__0338
0576c     89 FA 05 F6 | 	mov	result1, #137
05770     14 03 90 FD | 	jmp	#LR__0438
05774                 | LR__0339
05774     C2 FA 05 F6 | 	mov	result1, #194
05778     0C 03 90 FD | 	jmp	#LR__0438
0577c                 | LR__0340
0577c     72 FA 05 F6 | 	mov	result1, #114
05780     04 03 90 FD | 	jmp	#LR__0438
05784                 | LR__0341
05784     5D FA 05 F6 | 	mov	result1, #93
05788     FC 02 90 FD | 	jmp	#LR__0438
0578c                 | LR__0342
0578c     96 FA 05 F6 | 	mov	result1, #150
05790     F4 02 90 FD | 	jmp	#LR__0438
05794                 | LR__0343
05794     43 FA 05 F6 | 	mov	result1, #67
05798     EC 02 90 FD | 	jmp	#LR__0438
0579c                 | LR__0344
0579c     43 FA 05 F6 | 	mov	result1, #67
057a0     E4 02 90 FD | 	jmp	#LR__0438
057a4                 | LR__0345
057a4     43 FA 05 F6 | 	mov	result1, #67
057a8     DC 02 90 FD | 	jmp	#LR__0438
057ac                 | LR__0346
057ac     5A FA 05 F6 | 	mov	result1, #90
057b0     D4 02 90 FD | 	jmp	#LR__0438
057b4                 | LR__0347
057b4     AB FA 05 F6 | 	mov	result1, #171
057b8     CC 02 90 FD | 	jmp	#LR__0438
057bc                 | LR__0348
057bc     BD FA 05 F6 | 	mov	result1, #189
057c0     C4 02 90 FD | 	jmp	#LR__0438
057c4                 | LR__0349
057c4     BD FA 05 F6 | 	mov	result1, #189
057c8     BC 02 90 FD | 	jmp	#LR__0438
057cc                 | LR__0350
057cc     46 FA 05 F6 | 	mov	result1, #70
057d0     B4 02 90 FD | 	jmp	#LR__0438
057d4                 | LR__0351
057d4     46 FA 05 F6 | 	mov	result1, #70
057d8     AC 02 90 FD | 	jmp	#LR__0438
057dc                 | LR__0352
057dc     71 FA 05 F6 | 	mov	result1, #113
057e0     A4 02 90 FD | 	jmp	#LR__0438
057e4                 | LR__0353
057e4     71 FA 05 F6 | 	mov	result1, #113
057e8     9C 02 90 FD | 	jmp	#LR__0438
057ec                 | LR__0354
057ec     60 FA 05 F6 | 	mov	result1, #96
057f0     94 02 90 FD | 	jmp	#LR__0438
057f4                 | LR__0355
057f4     4A FA 05 F6 | 	mov	result1, #74
057f8     8C 02 90 FD | 	jmp	#LR__0438
057fc                 | LR__0356
057fc     4A FA 05 F6 | 	mov	result1, #74
05800     84 02 90 FD | 	jmp	#LR__0438
05804                 | LR__0357
05804     48 FA 05 F6 | 	mov	result1, #72
05808     7C 02 90 FD | 	jmp	#LR__0438
0580c                 | LR__0358
0580c     48 FA 05 F6 | 	mov	result1, #72
05810     74 02 90 FD | 	jmp	#LR__0438
05814                 | LR__0359
05814     BB FA 05 F6 | 	mov	result1, #187
05818     6C 02 90 FD | 	jmp	#LR__0438
0581c                 | LR__0360
0581c     A9 FA 05 F6 | 	mov	result1, #169
05820     64 02 90 FD | 	jmp	#LR__0438
05824                 | LR__0361
05824     4E FA 05 F6 | 	mov	result1, #78
05828     5C 02 90 FD | 	jmp	#LR__0438
0582c                 | LR__0362
0582c     4E FA 05 F6 | 	mov	result1, #78
05830     54 02 90 FD | 	jmp	#LR__0438
05834                 | LR__0363
05834     58 FA 05 F6 | 	mov	result1, #88
05838     4C 02 90 FD | 	jmp	#LR__0438
0583c                 | LR__0364
0583c     5F FA 05 F6 | 	mov	result1, #95
05840     44 02 90 FD | 	jmp	#LR__0438
05844                 | LR__0365
05844     5F FA 05 F6 | 	mov	result1, #95
05848     3C 02 90 FD | 	jmp	#LR__0438
0584c                 | LR__0366
0584c     4C FA 05 F6 | 	mov	result1, #76
05850     34 02 90 FD | 	jmp	#LR__0438
05854                 | LR__0367
05854     4C FA 05 F6 | 	mov	result1, #76
05858     2C 02 90 FD | 	jmp	#LR__0438
0585c                 | LR__0368
0585c     52 FA 05 F6 | 	mov	result1, #82
05860     24 02 90 FD | 	jmp	#LR__0438
05864                 | LR__0369
05864     52 FA 05 F6 | 	mov	result1, #82
05868     1C 02 90 FD | 	jmp	#LR__0438
0586c                 | LR__0370
0586c     97 FA 05 F6 | 	mov	result1, #151
05870     14 02 90 FD | 	jmp	#LR__0438
05874                 | LR__0371
05874     C6 FA 05 F6 | 	mov	result1, #198
05878     0C 02 90 FD | 	jmp	#LR__0438
0587c                 | LR__0372
0587c     61 FA 05 F6 | 	mov	result1, #97
05880     04 02 90 FD | 	jmp	#LR__0438
05884                 | LR__0373
05884     61 FA 05 F6 | 	mov	result1, #97
05888     FC 01 90 FD | 	jmp	#LR__0438
0588c                 | LR__0374
0588c     63 FA 05 F6 | 	mov	result1, #99
05890     F4 01 90 FD | 	jmp	#LR__0438
05894                 | LR__0375
05894     41 FA 05 F6 | 	mov	result1, #65
05898     EC 01 90 FD | 	jmp	#LR__0438
0589c                 | LR__0376
0589c     4B FA 05 F6 | 	mov	result1, #75
058a0     E4 01 90 FD | 	jmp	#LR__0438
058a4                 | LR__0377
058a4     4B FA 05 F6 | 	mov	result1, #75
058a8     DC 01 90 FD | 	jmp	#LR__0438
058ac                 | LR__0378
058ac     B3 FA 05 F6 | 	mov	result1, #179
058b0     D4 01 90 FD | 	jmp	#LR__0438
058b4                 | LR__0379
058b4     5E FA 05 F6 | 	mov	result1, #94
058b8     CC 01 90 FD | 	jmp	#LR__0438
058bc                 | LR__0380
058bc     5E FA 05 F6 | 	mov	result1, #94
058c0     C4 01 90 FD | 	jmp	#LR__0438
058c4                 | LR__0381
058c4     7C FA 05 F6 | 	mov	result1, #124
058c8     BC 01 90 FD | 	jmp	#LR__0438
058cc                 | LR__0382
058cc     7E FA 05 F6 | 	mov	result1, #126
058d0     B4 01 90 FD | 	jmp	#LR__0438
058d4                 | LR__0383
058d4     7D FA 05 F6 | 	mov	result1, #125
058d8     AC 01 90 FD | 	jmp	#LR__0438
058dc                 | LR__0384
058dc     7F FA 05 F6 | 	mov	result1, #127
058e0     A4 01 90 FD | 	jmp	#LR__0438
058e4                 | LR__0385
058e4     80 FA 05 F6 | 	mov	result1, #128
058e8     9C 01 90 FD | 	jmp	#LR__0438
058ec                 | LR__0386
058ec     55 FA 05 F6 | 	mov	result1, #85
058f0     94 01 90 FD | 	jmp	#LR__0438
058f4                 | LR__0387
058f4     75 FA 05 F6 | 	mov	result1, #117
058f8     8C 01 90 FD | 	jmp	#LR__0438
058fc                 | LR__0388
058fc     75 FA 05 F6 | 	mov	result1, #117
05900     84 01 90 FD | 	jmp	#LR__0438
05904                 | LR__0389
05904     42 FA 05 F6 | 	mov	result1, #66
05908     7C 01 90 FD | 	jmp	#LR__0438
0590c                 | LR__0390
0590c     42 FA 05 F6 | 	mov	result1, #66
05910     74 01 90 FD | 	jmp	#LR__0438
05914                 | LR__0391
05914     95 FA 05 F6 | 	mov	result1, #149
05918     6C 01 90 FD | 	jmp	#LR__0438
0591c                 | LR__0392
0591c     AC FA 05 F6 | 	mov	result1, #172
05920     64 01 90 FD | 	jmp	#LR__0438
05924                 | LR__0393
05924     81 FA 05 F6 | 	mov	result1, #129
05928     5C 01 90 FD | 	jmp	#LR__0438
0592c                 | LR__0394
0592c     81 FA 05 F6 | 	mov	result1, #129
05930     54 01 90 FD | 	jmp	#LR__0438
05934                 | LR__0395
05934     44 FA 05 F6 | 	mov	result1, #68
05938     4C 01 90 FD | 	jmp	#LR__0438
0593c                 | LR__0396
0593c     44 FA 05 F6 | 	mov	result1, #68
05940     44 01 90 FD | 	jmp	#LR__0438
05944                 | LR__0397
05944     BC FA 05 F6 | 	mov	result1, #188
05948     3C 01 90 FD | 	jmp	#LR__0438
0594c                 | LR__0398
0594c     88 FA 05 F6 | 	mov	result1, #136
05950     34 01 90 FD | 	jmp	#LR__0438
05954                 | LR__0399
05954     92 FA 05 F6 | 	mov	result1, #146
05958     2C 01 90 FD | 	jmp	#LR__0438
0595c                 | LR__0400
0595c     BE FA 05 F6 | 	mov	result1, #190
05960     24 01 90 FD | 	jmp	#LR__0438
05964                 | LR__0401
05964     BE FA 05 F6 | 	mov	result1, #190
05968     1C 01 90 FD | 	jmp	#LR__0438
0596c                 | LR__0402
0596c     AA FA 05 F6 | 	mov	result1, #170
05970     14 01 90 FD | 	jmp	#LR__0438
05974                 | LR__0403
05974     4D FA 05 F6 | 	mov	result1, #77
05978     0C 01 90 FD | 	jmp	#LR__0438
0597c                 | LR__0404
0597c     51 FA 05 F6 | 	mov	result1, #81
05980     04 01 90 FD | 	jmp	#LR__0438
05984                 | LR__0405
05984     51 FA 05 F6 | 	mov	result1, #81
05988     FC 00 90 FD | 	jmp	#LR__0438
0598c                 | LR__0406
0598c     8E FA 05 F6 | 	mov	result1, #142
05990     F4 00 90 FD | 	jmp	#LR__0438
05994                 | LR__0407
05994     8E FA 05 F6 | 	mov	result1, #142
05998     EC 00 90 FD | 	jmp	#LR__0438
0599c                 | LR__0408
0599c     90 FA 05 F6 | 	mov	result1, #144
059a0     E4 00 90 FD | 	jmp	#LR__0438
059a4                 | LR__0409
059a4     90 FA 05 F6 | 	mov	result1, #144
059a8     DC 00 90 FD | 	jmp	#LR__0438
059ac                 | LR__0410
059ac     8D FA 05 F6 | 	mov	result1, #141
059b0     D4 00 90 FD | 	jmp	#LR__0438
059b4                 | LR__0411
059b4     8D FA 05 F6 | 	mov	result1, #141
059b8     CC 00 90 FD | 	jmp	#LR__0438
059bc                 | LR__0412
059bc     8C FA 05 F6 | 	mov	result1, #140
059c0     C4 00 90 FD | 	jmp	#LR__0438
059c4                 | LR__0413
059c4     8C FA 05 F6 | 	mov	result1, #140
059c8     BC 00 90 FD | 	jmp	#LR__0438
059cc                 | LR__0414
059cc     91 FA 05 F6 | 	mov	result1, #145
059d0     B4 00 90 FD | 	jmp	#LR__0438
059d4                 | LR__0415
059d4     91 FA 05 F6 | 	mov	result1, #145
059d8     AC 00 90 FD | 	jmp	#LR__0438
059dc                 | LR__0416
059dc     8B FA 05 F6 | 	mov	result1, #139
059e0     A4 00 90 FD | 	jmp	#LR__0438
059e4                 | LR__0417
059e4     8B FA 05 F6 | 	mov	result1, #139
059e8     9C 00 90 FD | 	jmp	#LR__0438
059ec                 | LR__0418
059ec     8F FA 05 F6 | 	mov	result1, #143
059f0     94 00 90 FD | 	jmp	#LR__0438
059f4                 | LR__0419
059f4     8F FA 05 F6 | 	mov	result1, #143
059f8     8C 00 90 FD | 	jmp	#LR__0438
059fc                 | LR__0420
059fc     8F FA 05 F6 | 	mov	result1, #143
05a00     84 00 90 FD | 	jmp	#LR__0438
05a04                 | LR__0421
05a04     B2 FA 05 F6 | 	mov	result1, #178
05a08     7C 00 90 FD | 	jmp	#LR__0438
05a0c                 | LR__0422
05a0c     B2 FA 05 F6 | 	mov	result1, #178
05a10     74 00 90 FD | 	jmp	#LR__0438
05a14                 | LR__0423
05a14     75 FA 05 F6 | 	mov	result1, #117
05a18     6C 00 90 FD | 	jmp	#LR__0438
05a1c                 | LR__0424
05a1c     75 FA 05 F6 | 	mov	result1, #117
05a20     64 00 90 FD | 	jmp	#LR__0438
05a24                 | LR__0425
05a24     6D FA 05 F6 | 	mov	result1, #109
05a28     5C 00 90 FD | 	jmp	#LR__0438
05a2c                 | LR__0426
05a2c     6D FA 05 F6 | 	mov	result1, #109
05a30     54 00 90 FD | 	jmp	#LR__0438
05a34                 | LR__0427
05a34     5B FA 05 F6 | 	mov	result1, #91
05a38     4C 00 90 FD | 	jmp	#LR__0438
05a3c                 | LR__0428
05a3c     56 FA 05 F6 | 	mov	result1, #86
05a40     44 00 90 FD | 	jmp	#LR__0438
05a44                 | LR__0429
05a44     56 FA 05 F6 | 	mov	result1, #86
05a48     3C 00 90 FD | 	jmp	#LR__0438
05a4c                 | LR__0430
05a4c     70 FA 05 F6 | 	mov	result1, #112
05a50     34 00 90 FD | 	jmp	#LR__0438
05a54                 | LR__0431
05a54     70 FA 05 F6 | 	mov	result1, #112
05a58     2C 00 90 FD | 	jmp	#LR__0438
05a5c                 | LR__0432
05a5c     57 FA 05 F6 | 	mov	result1, #87
05a60     24 00 90 FD | 	jmp	#LR__0438
05a64                 | LR__0433
05a64     57 FA 05 F6 | 	mov	result1, #87
05a68     1C 00 90 FD | 	jmp	#LR__0438
05a6c                 | LR__0434
05a6c     79 FA 05 F6 | 	mov	result1, #121
05a70     14 00 90 FD | 	jmp	#LR__0438
05a74                 | LR__0435
05a74     77 FA 05 F6 | 	mov	result1, #119
05a78     0C 00 90 FD | 	jmp	#LR__0438
05a7c                 | LR__0436
05a7c     78 FA 05 F6 | 	mov	result1, #120
05a80     04 00 90 FD | 	jmp	#LR__0438
05a84                 | LR__0437
05a84     00 FA 05 F6 | 	mov	result1, #0
05a88                 | LR__0438
05a88     A7 F0 03 F6 | 	mov	ptra, fp
05a8c     B2 00 A0 FD | 	call	#popregs_
05a90                 | _iscommand_ret
05a90     2D 00 64 FD | 	ret
05a94                 | 
05a94                 | ' 
05a94                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05a94                 | ' 
05a94                 | ' function isfunction(s as string) as ubyte
05a94                 | _isfunction
05a94     01 4A 05 F6 | 	mov	COUNT_, #1
05a98     A8 00 A0 FD | 	call	#pushregs_
05a9c                 | ' 
05a9c                 | ' select case s
05a9c     09 1F 02 F6 | 	mov	local01, arg01
05aa0     8A 01 00 FF 
05aa4     A5 15 06 F6 | 	mov	arg02, ##@LR__5369
05aa8     0F 13 02 F6 | 	mov	arg01, local01
05aac     3C BB B1 FD | 	call	#__system___string_cmp
05ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ab4     0C 04 90 AD |  if_e	jmp	#LR__0440
05ab8     8A 01 00 FF 
05abc     A9 15 06 F6 | 	mov	arg02, ##@LR__5370
05ac0     0F 13 02 F6 | 	mov	arg01, local01
05ac4     24 BB B1 FD | 	call	#__system___string_cmp
05ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
05acc     FC 03 90 AD |  if_e	jmp	#LR__0441
05ad0     8A 01 00 FF 
05ad4     AE 15 06 F6 | 	mov	arg02, ##@LR__5371
05ad8     0F 13 02 F6 | 	mov	arg01, local01
05adc     0C BB B1 FD | 	call	#__system___string_cmp
05ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ae4     EC 03 90 AD |  if_e	jmp	#LR__0442
05ae8     8A 01 00 FF 
05aec     B2 15 06 F6 | 	mov	arg02, ##@LR__5372
05af0     0F 13 02 F6 | 	mov	arg01, local01
05af4     F4 BA B1 FD | 	call	#__system___string_cmp
05af8     00 FA 0D F2 | 	cmp	result1, #0 wz
05afc     DC 03 90 AD |  if_e	jmp	#LR__0443
05b00     8A 01 00 FF 
05b04     B7 15 06 F6 | 	mov	arg02, ##@LR__5373
05b08     0F 13 02 F6 | 	mov	arg01, local01
05b0c     DC BA B1 FD | 	call	#__system___string_cmp
05b10     00 FA 0D F2 | 	cmp	result1, #0 wz
05b14     CC 03 90 AD |  if_e	jmp	#LR__0444
05b18     8A 01 00 FF 
05b1c     BB 15 06 F6 | 	mov	arg02, ##@LR__5374
05b20     0F 13 02 F6 | 	mov	arg01, local01
05b24     C4 BA B1 FD | 	call	#__system___string_cmp
05b28     00 FA 0D F2 | 	cmp	result1, #0 wz
05b2c     BC 03 90 AD |  if_e	jmp	#LR__0445
05b30     8A 01 00 FF 
05b34     C0 15 06 F6 | 	mov	arg02, ##@LR__5375
05b38     0F 13 02 F6 | 	mov	arg01, local01
05b3c     AC BA B1 FD | 	call	#__system___string_cmp
05b40     00 FA 0D F2 | 	cmp	result1, #0 wz
05b44     AC 03 90 AD |  if_e	jmp	#LR__0446
05b48     8A 01 00 FF 
05b4c     C4 15 06 F6 | 	mov	arg02, ##@LR__5376
05b50     0F 13 02 F6 | 	mov	arg01, local01
05b54     94 BA B1 FD | 	call	#__system___string_cmp
05b58     00 FA 0D F2 | 	cmp	result1, #0 wz
05b5c     9C 03 90 AD |  if_e	jmp	#LR__0447
05b60     8A 01 00 FF 
05b64     C9 15 06 F6 | 	mov	arg02, ##@LR__5377
05b68     0F 13 02 F6 | 	mov	arg01, local01
05b6c     7C BA B1 FD | 	call	#__system___string_cmp
05b70     00 FA 0D F2 | 	cmp	result1, #0 wz
05b74     8C 03 90 AD |  if_e	jmp	#LR__0448
05b78     8A 01 00 FF 
05b7c     CE 15 06 F6 | 	mov	arg02, ##@LR__5378
05b80     0F 13 02 F6 | 	mov	arg01, local01
05b84     64 BA B1 FD | 	call	#__system___string_cmp
05b88     00 FA 0D F2 | 	cmp	result1, #0 wz
05b8c     7C 03 90 AD |  if_e	jmp	#LR__0449
05b90     8A 01 00 FF 
05b94     D2 15 06 F6 | 	mov	arg02, ##@LR__5379
05b98     0F 13 02 F6 | 	mov	arg01, local01
05b9c     4C BA B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ba4     6C 03 90 AD |  if_e	jmp	#LR__0450
05ba8     8A 01 00 FF 
05bac     D8 15 06 F6 | 	mov	arg02, ##@LR__5380
05bb0     0F 13 02 F6 | 	mov	arg01, local01
05bb4     34 BA B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bbc     5C 03 90 AD |  if_e	jmp	#LR__0451
05bc0     8A 01 00 FF 
05bc4     DC 15 06 F6 | 	mov	arg02, ##@LR__5381
05bc8     0F 13 02 F6 | 	mov	arg01, local01
05bcc     1C BA B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bd4     4C 03 90 AD |  if_e	jmp	#LR__0452
05bd8     8A 01 00 FF 
05bdc     E5 15 06 F6 | 	mov	arg02, ##@LR__5382
05be0     0F 13 02 F6 | 	mov	arg01, local01
05be4     04 BA B1 FD | 	call	#__system___string_cmp
05be8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bec     3C 03 90 AD |  if_e	jmp	#LR__0453
05bf0     8A 01 00 FF 
05bf4     E9 15 06 F6 | 	mov	arg02, ##@LR__5383
05bf8     0F 13 02 F6 | 	mov	arg01, local01
05bfc     EC B9 B1 FD | 	call	#__system___string_cmp
05c00     00 FA 0D F2 | 	cmp	result1, #0 wz
05c04     2C 03 90 AD |  if_e	jmp	#LR__0454
05c08     8A 01 00 FF 
05c0c     F7 15 06 F6 | 	mov	arg02, ##@LR__5384
05c10     0F 13 02 F6 | 	mov	arg01, local01
05c14     D4 B9 B1 FD | 	call	#__system___string_cmp
05c18     00 FA 0D F2 | 	cmp	result1, #0 wz
05c1c     1C 03 90 AD |  if_e	jmp	#LR__0455
05c20     8B 01 00 FF 
05c24     04 14 06 F6 | 	mov	arg02, ##@LR__5385
05c28     0F 13 02 F6 | 	mov	arg01, local01
05c2c     BC B9 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     0C 03 90 AD |  if_e	jmp	#LR__0456
05c38     8B 01 00 FF 
05c3c     0C 14 06 F6 | 	mov	arg02, ##@LR__5386
05c40     0F 13 02 F6 | 	mov	arg01, local01
05c44     A4 B9 B1 FD | 	call	#__system___string_cmp
05c48     00 FA 0D F2 | 	cmp	result1, #0 wz
05c4c     FC 02 90 AD |  if_e	jmp	#LR__0457
05c50     8B 01 00 FF 
05c54     11 14 06 F6 | 	mov	arg02, ##@LR__5387
05c58     0F 13 02 F6 | 	mov	arg01, local01
05c5c     8C B9 B1 FD | 	call	#__system___string_cmp
05c60     00 FA 0D F2 | 	cmp	result1, #0 wz
05c64     EC 02 90 AD |  if_e	jmp	#LR__0458
05c68     8B 01 00 FF 
05c6c     18 14 06 F6 | 	mov	arg02, ##@LR__5388
05c70     0F 13 02 F6 | 	mov	arg01, local01
05c74     74 B9 B1 FD | 	call	#__system___string_cmp
05c78     00 FA 0D F2 | 	cmp	result1, #0 wz
05c7c     DC 02 90 AD |  if_e	jmp	#LR__0459
05c80     8B 01 00 FF 
05c84     1C 14 06 F6 | 	mov	arg02, ##@LR__5389
05c88     0F 13 02 F6 | 	mov	arg01, local01
05c8c     5C B9 B1 FD | 	call	#__system___string_cmp
05c90     00 FA 0D F2 | 	cmp	result1, #0 wz
05c94     CC 02 90 AD |  if_e	jmp	#LR__0460
05c98     8B 01 00 FF 
05c9c     22 14 06 F6 | 	mov	arg02, ##@LR__5390
05ca0     0F 13 02 F6 | 	mov	arg01, local01
05ca4     44 B9 B1 FD | 	call	#__system___string_cmp
05ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cac     BC 02 90 AD |  if_e	jmp	#LR__0461
05cb0     8B 01 00 FF 
05cb4     26 14 06 F6 | 	mov	arg02, ##@LR__5391
05cb8     0F 13 02 F6 | 	mov	arg01, local01
05cbc     2C B9 B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc4     AC 02 90 AD |  if_e	jmp	#LR__0462
05cc8     8B 01 00 FF 
05ccc     2A 14 06 F6 | 	mov	arg02, ##@LR__5392
05cd0     0F 13 02 F6 | 	mov	arg01, local01
05cd4     14 B9 B1 FD | 	call	#__system___string_cmp
05cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cdc     9C 02 90 AD |  if_e	jmp	#LR__0463
05ce0     8B 01 00 FF 
05ce4     30 14 06 F6 | 	mov	arg02, ##@LR__5393
05ce8     0F 13 02 F6 | 	mov	arg01, local01
05cec     FC B8 B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf4     8C 02 90 AD |  if_e	jmp	#LR__0464
05cf8     8B 01 00 FF 
05cfc     35 14 06 F6 | 	mov	arg02, ##@LR__5394
05d00     0F 13 02 F6 | 	mov	arg01, local01
05d04     E4 B8 B1 FD | 	call	#__system___string_cmp
05d08     00 FA 0D F2 | 	cmp	result1, #0 wz
05d0c     7C 02 90 AD |  if_e	jmp	#LR__0465
05d10     8B 01 00 FF 
05d14     3C 14 06 F6 | 	mov	arg02, ##@LR__5395
05d18     0F 13 02 F6 | 	mov	arg01, local01
05d1c     CC B8 B1 FD | 	call	#__system___string_cmp
05d20     00 FA 0D F2 | 	cmp	result1, #0 wz
05d24     6C 02 90 AD |  if_e	jmp	#LR__0466
05d28     8B 01 00 FF 
05d2c     43 14 06 F6 | 	mov	arg02, ##@LR__5396
05d30     0F 13 02 F6 | 	mov	arg01, local01
05d34     B4 B8 B1 FD | 	call	#__system___string_cmp
05d38     00 FA 0D F2 | 	cmp	result1, #0 wz
05d3c     5C 02 90 AD |  if_e	jmp	#LR__0467
05d40     8B 01 00 FF 
05d44     4A 14 06 F6 | 	mov	arg02, ##@LR__5397
05d48     0F 13 02 F6 | 	mov	arg01, local01
05d4c     9C B8 B1 FD | 	call	#__system___string_cmp
05d50     00 FA 0D F2 | 	cmp	result1, #0 wz
05d54     4C 02 90 AD |  if_e	jmp	#LR__0468
05d58     8B 01 00 FF 
05d5c     51 14 06 F6 | 	mov	arg02, ##@LR__5398
05d60     0F 13 02 F6 | 	mov	arg01, local01
05d64     84 B8 B1 FD | 	call	#__system___string_cmp
05d68     00 FA 0D F2 | 	cmp	result1, #0 wz
05d6c     3C 02 90 AD |  if_e	jmp	#LR__0469
05d70     8B 01 00 FF 
05d74     56 14 06 F6 | 	mov	arg02, ##@LR__5399
05d78     0F 13 02 F6 | 	mov	arg01, local01
05d7c     6C B8 B1 FD | 	call	#__system___string_cmp
05d80     00 FA 0D F2 | 	cmp	result1, #0 wz
05d84     2C 02 90 AD |  if_e	jmp	#LR__0470
05d88     8B 01 00 FF 
05d8c     5E 14 06 F6 | 	mov	arg02, ##@LR__5400
05d90     0F 13 02 F6 | 	mov	arg01, local01
05d94     54 B8 B1 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     1C 02 90 AD |  if_e	jmp	#LR__0471
05da0     8B 01 00 FF 
05da4     64 14 06 F6 | 	mov	arg02, ##@LR__5401
05da8     0F 13 02 F6 | 	mov	arg01, local01
05dac     3C B8 B1 FD | 	call	#__system___string_cmp
05db0     00 FA 0D F2 | 	cmp	result1, #0 wz
05db4     0C 02 90 AD |  if_e	jmp	#LR__0472
05db8     8B 01 00 FF 
05dbc     6B 14 06 F6 | 	mov	arg02, ##@LR__5402
05dc0     0F 13 02 F6 | 	mov	arg01, local01
05dc4     24 B8 B1 FD | 	call	#__system___string_cmp
05dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dcc     FC 01 90 AD |  if_e	jmp	#LR__0473
05dd0     8B 01 00 FF 
05dd4     71 14 06 F6 | 	mov	arg02, ##@LR__5403
05dd8     0F 13 02 F6 | 	mov	arg01, local01
05ddc     0C B8 B1 FD | 	call	#__system___string_cmp
05de0     00 FA 0D F2 | 	cmp	result1, #0 wz
05de4     EC 01 90 AD |  if_e	jmp	#LR__0474
05de8     8B 01 00 FF 
05dec     77 14 06 F6 | 	mov	arg02, ##@LR__5404
05df0     0F 13 02 F6 | 	mov	arg01, local01
05df4     F4 B7 B1 FD | 	call	#__system___string_cmp
05df8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dfc     DC 01 90 AD |  if_e	jmp	#LR__0475
05e00     8B 01 00 FF 
05e04     7B 14 06 F6 | 	mov	arg02, ##@LR__5405
05e08     0F 13 02 F6 | 	mov	arg01, local01
05e0c     DC B7 B1 FD | 	call	#__system___string_cmp
05e10     00 FA 0D F2 | 	cmp	result1, #0 wz
05e14     CC 01 90 AD |  if_e	jmp	#LR__0476
05e18     8B 01 00 FF 
05e1c     7F 14 06 F6 | 	mov	arg02, ##@LR__5406
05e20     0F 13 02 F6 | 	mov	arg01, local01
05e24     C4 B7 B1 FD | 	call	#__system___string_cmp
05e28     00 FA 0D F2 | 	cmp	result1, #0 wz
05e2c     BC 01 90 AD |  if_e	jmp	#LR__0477
05e30     8B 01 00 FF 
05e34     83 14 06 F6 | 	mov	arg02, ##@LR__5407
05e38     0F 13 02 F6 | 	mov	arg01, local01
05e3c     AC B7 B1 FD | 	call	#__system___string_cmp
05e40     00 FA 0D F2 | 	cmp	result1, #0 wz
05e44     AC 01 90 AD |  if_e	jmp	#LR__0478
05e48     8B 01 00 FF 
05e4c     89 14 06 F6 | 	mov	arg02, ##@LR__5408
05e50     0F 13 02 F6 | 	mov	arg01, local01
05e54     94 B7 B1 FD | 	call	#__system___string_cmp
05e58     00 FA 0D F2 | 	cmp	result1, #0 wz
05e5c     9C 01 90 AD |  if_e	jmp	#LR__0479
05e60     8B 01 00 FF 
05e64     8F 14 06 F6 | 	mov	arg02, ##@LR__5409
05e68     0F 13 02 F6 | 	mov	arg01, local01
05e6c     7C B7 B1 FD | 	call	#__system___string_cmp
05e70     00 FA 0D F2 | 	cmp	result1, #0 wz
05e74     8C 01 90 AD |  if_e	jmp	#LR__0480
05e78     8B 01 00 FF 
05e7c     94 14 06 F6 | 	mov	arg02, ##@LR__5410
05e80     0F 13 02 F6 | 	mov	arg01, local01
05e84     64 B7 B1 FD | 	call	#__system___string_cmp
05e88     00 FA 0D F2 | 	cmp	result1, #0 wz
05e8c     7C 01 90 AD |  if_e	jmp	#LR__0481
05e90     8B 01 00 FF 
05e94     98 14 06 F6 | 	mov	arg02, ##@LR__5411
05e98     0F 13 02 F6 | 	mov	arg01, local01
05e9c     4C B7 B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     6C 01 90 AD |  if_e	jmp	#LR__0482
05ea8     8B 01 00 FF 
05eac     9C 14 06 F6 | 	mov	arg02, ##@LR__5412
05eb0     0F 13 02 F6 | 	mov	arg01, local01
05eb4     34 B7 B1 FD | 	call	#__system___string_cmp
05eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ebc     5C 01 90 AD |  if_e	jmp	#LR__0483
05ec0     60 01 90 FD | 	jmp	#LR__0484
05ec4                 | LR__0440
05ec4     9E FA 05 F6 | 	mov	result1, #158
05ec8     5C 01 90 FD | 	jmp	#LR__0485
05ecc                 | LR__0441
05ecc     85 FA 05 F6 | 	mov	result1, #133
05ed0     54 01 90 FD | 	jmp	#LR__0485
05ed4                 | LR__0442
05ed4     9B FA 05 F6 | 	mov	result1, #155
05ed8     4C 01 90 FD | 	jmp	#LR__0485
05edc                 | LR__0443
05edc     9B FA 05 F6 | 	mov	result1, #155
05ee0     44 01 90 FD | 	jmp	#LR__0485
05ee4                 | LR__0444
05ee4     A7 FA 05 F6 | 	mov	result1, #167
05ee8     3C 01 90 FD | 	jmp	#LR__0485
05eec                 | LR__0445
05eec     84 FA 05 F6 | 	mov	result1, #132
05ef0     34 01 90 FD | 	jmp	#LR__0485
05ef4                 | LR__0446
05ef4     86 FA 05 F6 | 	mov	result1, #134
05ef8     2C 01 90 FD | 	jmp	#LR__0485
05efc                 | LR__0447
05efc     A2 FA 05 F6 | 	mov	result1, #162
05f00     24 01 90 FD | 	jmp	#LR__0485
05f04                 | LR__0448
05f04     9F FA 05 F6 | 	mov	result1, #159
05f08     1C 01 90 FD | 	jmp	#LR__0485
05f0c                 | LR__0449
05f0c     82 FA 05 F6 | 	mov	result1, #130
05f10     14 01 90 FD | 	jmp	#LR__0485
05f14                 | LR__0450
05f14     99 FA 05 F6 | 	mov	result1, #153
05f18     0C 01 90 FD | 	jmp	#LR__0485
05f1c                 | LR__0451
05f1c     9C FA 05 F6 | 	mov	result1, #156
05f20     04 01 90 FD | 	jmp	#LR__0485
05f24                 | LR__0452
05f24     6F FA 05 F6 | 	mov	result1, #111
05f28     FC 00 90 FD | 	jmp	#LR__0485
05f2c                 | LR__0453
05f2c     6F FA 05 F6 | 	mov	result1, #111
05f30     F4 00 90 FD | 	jmp	#LR__0485
05f34                 | LR__0454
05f34     93 FA 05 F6 | 	mov	result1, #147
05f38     EC 00 90 FD | 	jmp	#LR__0485
05f3c                 | LR__0455
05f3c     94 FA 05 F6 | 	mov	result1, #148
05f40     E4 00 90 FD | 	jmp	#LR__0485
05f44                 | LR__0456
05f44     62 FA 05 F6 | 	mov	result1, #98
05f48     DC 00 90 FD | 	jmp	#LR__0485
05f4c                 | LR__0457
05f4c     A3 FA 05 F6 | 	mov	result1, #163
05f50     D4 00 90 FD | 	jmp	#LR__0485
05f54                 | LR__0458
05f54     9D FA 05 F6 | 	mov	result1, #157
05f58     CC 00 90 FD | 	jmp	#LR__0485
05f5c                 | LR__0459
05f5c     8A FA 05 F6 | 	mov	result1, #138
05f60     C4 00 90 FD | 	jmp	#LR__0485
05f64                 | LR__0460
05f64     A4 FA 05 F6 | 	mov	result1, #164
05f68     BC 00 90 FD | 	jmp	#LR__0485
05f6c                 | LR__0461
05f6c     A8 FA 05 F6 | 	mov	result1, #168
05f70     B4 00 90 FD | 	jmp	#LR__0485
05f74                 | LR__0462
05f74     AD FA 05 F6 | 	mov	result1, #173
05f78     AC 00 90 FD | 	jmp	#LR__0485
05f7c                 | LR__0463
05f7c     9A FA 05 F6 | 	mov	result1, #154
05f80     A4 00 90 FD | 	jmp	#LR__0485
05f84                 | LR__0464
05f84     A6 FA 05 F6 | 	mov	result1, #166
05f88     9C 00 90 FD | 	jmp	#LR__0485
05f8c                 | LR__0465
05f8c     66 FA 05 F6 | 	mov	result1, #102
05f90     94 00 90 FD | 	jmp	#LR__0485
05f94                 | LR__0466
05f94     67 FA 05 F6 | 	mov	result1, #103
05f98     8C 00 90 FD | 	jmp	#LR__0485
05f9c                 | LR__0467
05f9c     64 FA 05 F6 | 	mov	result1, #100
05fa0     84 00 90 FD | 	jmp	#LR__0485
05fa4                 | LR__0468
05fa4     65 FA 05 F6 | 	mov	result1, #101
05fa8     7C 00 90 FD | 	jmp	#LR__0485
05fac                 | LR__0469
05fac     98 FA 05 F6 | 	mov	result1, #152
05fb0     74 00 90 FD | 	jmp	#LR__0485
05fb4                 | LR__0470
05fb4     7B FA 05 F6 | 	mov	result1, #123
05fb8     6C 00 90 FD | 	jmp	#LR__0485
05fbc                 | LR__0471
05fbc     76 FA 05 F6 | 	mov	result1, #118
05fc0     64 00 90 FD | 	jmp	#LR__0485
05fc4                 | LR__0472
05fc4     A5 FA 05 F6 | 	mov	result1, #165
05fc8     5C 00 90 FD | 	jmp	#LR__0485
05fcc                 | LR__0473
05fcc     7A FA 05 F6 | 	mov	result1, #122
05fd0     54 00 90 FD | 	jmp	#LR__0485
05fd4                 | LR__0474
05fd4     BF FA 05 F6 | 	mov	result1, #191
05fd8     4C 00 90 FD | 	jmp	#LR__0485
05fdc                 | LR__0475
05fdc     54 FA 05 F6 | 	mov	result1, #84
05fe0     44 00 90 FD | 	jmp	#LR__0485
05fe4                 | LR__0476
05fe4     6B FA 05 F6 | 	mov	result1, #107
05fe8     3C 00 90 FD | 	jmp	#LR__0485
05fec                 | LR__0477
05fec     87 FA 05 F6 | 	mov	result1, #135
05ff0     34 00 90 FD | 	jmp	#LR__0485
05ff4                 | LR__0478
05ff4     6A FA 05 F6 | 	mov	result1, #106
05ff8     2C 00 90 FD | 	jmp	#LR__0485
05ffc                 | LR__0479
05ffc     6E FA 05 F6 | 	mov	result1, #110
06000     24 00 90 FD | 	jmp	#LR__0485
06004                 | LR__0480
06004     A1 FA 05 F6 | 	mov	result1, #161
06008     1C 00 90 FD | 	jmp	#LR__0485
0600c                 | LR__0481
0600c     83 FA 05 F6 | 	mov	result1, #131
06010     14 00 90 FD | 	jmp	#LR__0485
06014                 | LR__0482
06014     A0 FA 05 F6 | 	mov	result1, #160
06018     0C 00 90 FD | 	jmp	#LR__0485
0601c                 | LR__0483
0601c     9B FA 05 F6 | 	mov	result1, #155
06020     04 00 90 FD | 	jmp	#LR__0485
06024                 | LR__0484
06024     00 FA 05 F6 | 	mov	result1, #0
06028                 | LR__0485
06028     A7 F0 03 F6 | 	mov	ptra, fp
0602c     B2 00 A0 FD | 	call	#popregs_
06030                 | _isfunction_ret
06030     2D 00 64 FD | 	ret
06034                 | 
06034                 | ' 
06034                 | ' ' Check if the part is a name
06034                 | ' 
06034                 | ' function isname(s as string) as boolean
06034                 | _isname
06034     0D 4A 05 F6 | 	mov	COUNT_, #13
06038     A8 00 A0 FD | 	call	#pushregs_
0603c     09 1F 02 F6 | 	mov	local01, arg01
06040     09 21 02 F6 | 	mov	local02, arg01
06044     97 06 48 FB | 	callpa	#(@LR__0491-@LR__0490)>>2,fcache_load_ptr_
06048                 | LR__0490
06048     10 FB C9 FA | 	rdbyte	result1, local02 wz
0604c     01 20 06 51 |  if_ne	add	local02, #1
06050     F4 FF 9F 5D |  if_ne	jmp	#LR__0490
06054                 | LR__0491
06054     09 21 82 F1 | 	sub	local02, arg01
06058     10 FB 01 F6 | 	mov	result1, local02
0605c     FD 22 0A F6 | 	mov	local03, result1 wz
06060     00 FA 05 A6 |  if_e	mov	result1, #0
06064     34 02 90 AD |  if_e	jmp	#LR__0503
06068     0F 13 02 F6 | 	mov	arg01, local01
0606c     01 14 06 F6 | 	mov	arg02, #1
06070     01 16 06 F6 | 	mov	arg03, #1
06074     E0 D6 B1 FD | 	call	#__system__Mid_S
06078     FD 24 02 F6 | 	mov	local04, result1
0607c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0607c     8B 01 00 FF 
06080     A3 14 06 F6 | 	mov	arg02, ##@LR__5413
06084     12 13 02 F6 | 	mov	arg01, local04
06088     60 B5 B1 FD | 	call	#__system___string_cmp
0608c     00 FA 55 F2 | 	cmps	result1, #0 wc
06090     18 00 90 CD |  if_b	jmp	#LR__0492
06094     8B 01 00 FF 
06098     A5 14 06 F6 | 	mov	arg02, ##@LR__5414
0609c     12 13 02 F6 | 	mov	arg01, local04
060a0     48 B5 B1 FD | 	call	#__system___string_cmp
060a4     01 FA 55 F2 | 	cmps	result1, #1 wc
060a8     1C 00 90 CD |  if_b	jmp	#LR__0493
060ac                 | LR__0492
060ac     8B 01 00 FF 
060b0     A7 14 06 F6 | 	mov	arg02, ##@LR__5415
060b4     12 13 02 F6 | 	mov	arg01, local04
060b8     30 B5 B1 FD | 	call	#__system___string_cmp
060bc     00 FA 0D F2 | 	cmp	result1, #0 wz
060c0     00 FA 05 56 |  if_ne	mov	result1, #0
060c4     D4 01 90 5D |  if_ne	jmp	#LR__0503
060c8                 | LR__0493
060c8                 | ' if l>2 then 
060c8     03 22 56 F2 | 	cmps	local03, #3 wc
060cc     C8 01 90 CD |  if_b	jmp	#LR__0502
060d0                 | '   for i=2 to l
060d0     02 26 06 F6 | 	mov	local05, #2
060d4     11 29 02 F6 | 	mov	local06, local03
060d8     01 28 06 F1 | 	add	local06, #1
060dc                 | LR__0494
060dc     14 27 52 F2 | 	cmps	local05, local06 wc
060e0     B4 01 90 3D |  if_ae	jmp	#LR__0501
060e4     0F 13 02 F6 | 	mov	arg01, local01
060e8     13 15 02 F6 | 	mov	arg02, local05
060ec     01 16 06 F6 | 	mov	arg03, #1
060f0     64 D6 B1 FD | 	call	#__system__Mid_S
060f4     FD 24 02 F6 | 	mov	local04, result1
060f8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
060f8     11 27 52 F2 | 	cmps	local05, local03 wc
060fc     9C 00 90 3D |  if_ae	jmp	#LR__0497
06100     8B 01 00 FF 
06104     A9 14 06 F6 | 	mov	arg02, ##@LR__5416
06108     12 13 02 F6 | 	mov	arg01, local04
0610c     DC B4 B1 FD | 	call	#__system___string_cmp
06110     00 FA 55 F2 | 	cmps	result1, #0 wc
06114     18 00 90 CD |  if_b	jmp	#LR__0495
06118     8B 01 00 FF 
0611c     AB 14 06 F6 | 	mov	arg02, ##@LR__5417
06120     12 13 02 F6 | 	mov	arg01, local04
06124     C4 B4 B1 FD | 	call	#__system___string_cmp
06128     01 FA 55 F2 | 	cmps	result1, #1 wc
0612c     6C 00 90 CD |  if_b	jmp	#LR__0497
06130                 | LR__0495
06130     8B 01 00 FF 
06134     AD 14 06 F6 | 	mov	arg02, ##@LR__5418
06138     12 13 02 F6 | 	mov	arg01, local04
0613c     AC B4 B1 FD | 	call	#__system___string_cmp
06140     00 FA 55 F2 | 	cmps	result1, #0 wc
06144     18 00 90 CD |  if_b	jmp	#LR__0496
06148     8B 01 00 FF 
0614c     AF 14 06 F6 | 	mov	arg02, ##@LR__5419
06150     12 13 02 F6 | 	mov	arg01, local04
06154     94 B4 B1 FD | 	call	#__system___string_cmp
06158     01 FA 55 F2 | 	cmps	result1, #1 wc
0615c     3C 00 90 CD |  if_b	jmp	#LR__0497
06160                 | LR__0496
06160     8B 01 00 FF 
06164     B1 2A 06 F6 | 	mov	local07, ##@LR__5420
06168     12 13 02 F6 | 	mov	arg01, local04
0616c     15 15 02 F6 | 	mov	arg02, local07
06170     78 B4 B1 FD | 	call	#__system___string_cmp
06174     00 FA 0D F2 | 	cmp	result1, #0 wz
06178     20 00 90 AD |  if_e	jmp	#LR__0497
0617c     8B 01 00 FF 
06180     B3 2C 06 F6 | 	mov	local08, ##@LR__5421
06184     12 13 02 F6 | 	mov	arg01, local04
06188     16 15 02 F6 | 	mov	arg02, local08
0618c     5C B4 B1 FD | 	call	#__system___string_cmp
06190     FD 2E 0A F6 | 	mov	local09, result1 wz
06194     00 FA 05 56 |  if_ne	mov	result1, #0
06198     00 01 90 5D |  if_ne	jmp	#LR__0503
0619c                 | LR__0497
0619c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0619c     11 27 0A F2 | 	cmp	local05, local03 wz
061a0     EC 00 90 5D |  if_ne	jmp	#LR__0500
061a4     8B 01 00 FF 
061a8     B5 30 06 F6 | 	mov	local10, ##@LR__5422
061ac     12 13 02 F6 | 	mov	arg01, local04
061b0     18 15 02 F6 | 	mov	arg02, local10
061b4     34 B4 B1 FD | 	call	#__system___string_cmp
061b8     FD 32 02 F6 | 	mov	local11, result1
061bc     00 32 56 F2 | 	cmps	local11, #0 wc
061c0     1C 00 90 CD |  if_b	jmp	#LR__0498
061c4     8B 01 00 FF 
061c8     B7 14 06 F6 | 	mov	arg02, ##@LR__5423
061cc     12 13 02 F6 | 	mov	arg01, local04
061d0     18 B4 B1 FD | 	call	#__system___string_cmp
061d4     FD 30 02 F6 | 	mov	local10, result1
061d8     01 30 56 F2 | 	cmps	local10, #1 wc
061dc     B0 00 90 CD |  if_b	jmp	#LR__0500
061e0                 | LR__0498
061e0     8B 01 00 FF 
061e4     B9 14 06 F6 | 	mov	arg02, ##@LR__5424
061e8     12 13 02 F6 | 	mov	arg01, local04
061ec     FC B3 B1 FD | 	call	#__system___string_cmp
061f0     00 FA 55 F2 | 	cmps	result1, #0 wc
061f4     1C 00 90 CD |  if_b	jmp	#LR__0499
061f8     8B 01 00 FF 
061fc     BB 2E 06 F6 | 	mov	local09, ##@LR__5425
06200     12 13 02 F6 | 	mov	arg01, local04
06204     17 15 02 F6 | 	mov	arg02, local09
06208     E0 B3 B1 FD | 	call	#__system___string_cmp
0620c     01 FA 55 F2 | 	cmps	result1, #1 wc
06210     7C 00 90 CD |  if_b	jmp	#LR__0500
06214                 | LR__0499
06214     8B 01 00 FF 
06218     BD 2E 06 F6 | 	mov	local09, ##@LR__5426
0621c     12 13 02 F6 | 	mov	arg01, local04
06220     17 15 02 F6 | 	mov	arg02, local09
06224     C4 B3 B1 FD | 	call	#__system___string_cmp
06228     00 FA 4D F2 | 	cmps	result1, #0 wz
0622c     60 00 90 AD |  if_e	jmp	#LR__0500
06230     8B 01 00 FF 
06234     BF 2C 06 F6 | 	mov	local08, ##@LR__5427
06238     12 13 02 F6 | 	mov	arg01, local04
0623c     16 15 02 F6 | 	mov	arg02, local08
06240     A8 B3 B1 FD | 	call	#__system___string_cmp
06244     FD 2E 0A F6 | 	mov	local09, result1 wz
06248     44 00 90 AD |  if_e	jmp	#LR__0500
0624c     8B 01 00 FF 
06250     C1 34 06 F6 | 	mov	local12, ##@LR__5428
06254     1A 2D 02 F6 | 	mov	local08, local12
06258     12 13 02 F6 | 	mov	arg01, local04
0625c     16 15 02 F6 | 	mov	arg02, local08
06260     88 B3 B1 FD | 	call	#__system___string_cmp
06264     FD 2A 0A F6 | 	mov	local07, result1 wz
06268     24 00 90 AD |  if_e	jmp	#LR__0500
0626c     8B 01 00 FF 
06270     C3 36 06 F6 | 	mov	local13, ##@LR__5429
06274     1B 35 02 F6 | 	mov	local12, local13
06278     12 13 02 F6 | 	mov	arg01, local04
0627c     1A 15 02 F6 | 	mov	arg02, local12
06280     68 B3 B1 FD | 	call	#__system___string_cmp
06284     FD 2C 0A F6 | 	mov	local08, result1 wz
06288     00 FA 05 56 |  if_ne	mov	result1, #0
0628c     0C 00 90 5D |  if_ne	jmp	#LR__0503
06290                 | LR__0500
06290     01 26 06 F1 | 	add	local05, #1
06294     44 FE 9F FD | 	jmp	#LR__0494
06298                 | LR__0501
06298                 | LR__0502
06298                 | ' return true
06298     01 FA 65 F6 | 	neg	result1, #1
0629c                 | LR__0503
0629c     A7 F0 03 F6 | 	mov	ptra, fp
062a0     B2 00 A0 FD | 	call	#popregs_
062a4                 | _isname_ret
062a4     2D 00 64 FD | 	ret
062a8                 | 
062a8                 | ' 
062a8                 | ' ' Check if the part is a number.  
062a8                 | ' 
062a8                 | ' function isnum(s as string) as boolean 
062a8                 | _isnum
062a8     13 4A 05 F6 | 	mov	COUNT_, #19
062ac     A8 00 A0 FD | 	call	#pushregs_
062b0     09 1F 02 F6 | 	mov	local01, arg01
062b4     00 20 06 F6 | 	mov	local02, #0
062b8     00 22 06 F6 | 	mov	local03, #0
062bc     0F 13 02 F6 | 	mov	arg01, local01
062c0     09 25 02 F6 | 	mov	local04, arg01
062c4     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
062c8                 | LR__0510
062c8     12 FB C9 FA | 	rdbyte	result1, local04 wz
062cc     01 24 06 51 |  if_ne	add	local04, #1
062d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
062d4                 | LR__0511
062d4     09 25 82 F1 | 	sub	local04, arg01
062d8     12 FB 01 F6 | 	mov	result1, local04
062dc     FD 26 0A F6 | 	mov	local05, result1 wz
062e0     00 FA 05 A6 |  if_e	mov	result1, #0
062e4     A0 03 90 AD |  if_e	jmp	#LR__0526
062e8     0F 13 02 F6 | 	mov	arg01, local01
062ec     01 14 06 F6 | 	mov	arg02, #1
062f0     01 16 06 F6 | 	mov	arg03, #1
062f4     60 D4 B1 FD | 	call	#__system__Mid_S
062f8     FD 28 02 F6 | 	mov	local06, result1
062fc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
062fc     8B 01 00 FF 
06300     C5 14 06 F6 | 	mov	arg02, ##@LR__5430
06304     14 13 02 F6 | 	mov	arg01, local06
06308     E0 B2 B1 FD | 	call	#__system___string_cmp
0630c     00 FA 55 F2 | 	cmps	result1, #0 wc
06310     1C 00 90 CD |  if_b	jmp	#LR__0512
06314     8B 01 00 FF 
06318     C7 2A 06 F6 | 	mov	local07, ##@LR__5431
0631c     14 13 02 F6 | 	mov	arg01, local06
06320     15 15 02 F6 | 	mov	arg02, local07
06324     C4 B2 B1 FD | 	call	#__system___string_cmp
06328     01 FA 55 F2 | 	cmps	result1, #1 wc
0632c     84 00 90 CD |  if_b	jmp	#LR__0513
06330                 | LR__0512
06330     8B 01 00 FF 
06334     C9 2C 06 F6 | 	mov	local08, ##@LR__5432
06338     16 2B 02 F6 | 	mov	local07, local08
0633c     14 13 02 F6 | 	mov	arg01, local06
06340     15 15 02 F6 | 	mov	arg02, local07
06344     A4 B2 B1 FD | 	call	#__system___string_cmp
06348     00 FA 0D F2 | 	cmp	result1, #0 wz
0634c     64 00 90 AD |  if_e	jmp	#LR__0513
06350     8B 01 00 FF 
06354     CB 2E 06 F6 | 	mov	local09, ##@LR__5433
06358     17 2D 02 F6 | 	mov	local08, local09
0635c     14 13 02 F6 | 	mov	arg01, local06
06360     16 15 02 F6 | 	mov	arg02, local08
06364     84 B2 B1 FD | 	call	#__system___string_cmp
06368     FD 2A 0A F6 | 	mov	local07, result1 wz
0636c     44 00 90 AD |  if_e	jmp	#LR__0513
06370     8B 01 00 FF 
06374     CD 30 06 F6 | 	mov	local10, ##@LR__5434
06378     18 2F 02 F6 | 	mov	local09, local10
0637c     14 13 02 F6 | 	mov	arg01, local06
06380     17 15 02 F6 | 	mov	arg02, local09
06384     64 B2 B1 FD | 	call	#__system___string_cmp
06388     FD 2C 0A F6 | 	mov	local08, result1 wz
0638c     24 00 90 AD |  if_e	jmp	#LR__0513
06390     8B 01 00 FF 
06394     CF 32 06 F6 | 	mov	local11, ##@LR__5435
06398     19 31 02 F6 | 	mov	local10, local11
0639c     14 13 02 F6 | 	mov	arg01, local06
063a0     18 15 02 F6 | 	mov	arg02, local10
063a4     44 B2 B1 FD | 	call	#__system___string_cmp
063a8     FD 2E 0A F6 | 	mov	local09, result1 wz
063ac     00 FA 05 56 |  if_ne	mov	result1, #0
063b0     D4 02 90 5D |  if_ne	jmp	#LR__0526
063b4                 | LR__0513
063b4                 | ' if m$="." then ds=1
063b4     8B 01 00 FF 
063b8     D1 14 06 F6 | 	mov	arg02, ##@LR__5436
063bc     14 13 02 F6 | 	mov	arg01, local06
063c0     28 B2 B1 FD | 	call	#__system___string_cmp
063c4     00 FA 0D F2 | 	cmp	result1, #0 wz
063c8     01 20 06 A6 |  if_e	mov	local02, #1
063cc                 | ' if m$="$" then hex=1 else hex=0
063cc     8B 01 00 FF 
063d0     D3 14 06 F6 | 	mov	arg02, ##@LR__5437
063d4     14 13 02 F6 | 	mov	arg01, local06
063d8     10 B2 B1 FD | 	call	#__system___string_cmp
063dc     00 FA 0D F2 | 	cmp	result1, #0 wz
063e0     01 34 06 A6 |  if_e	mov	local12, #1
063e4     00 34 06 56 |  if_ne	mov	local12, #0
063e8                 | ' if m$="%" then bin=1 else bin=0
063e8     8B 01 00 FF 
063ec     D5 14 06 F6 | 	mov	arg02, ##@LR__5438
063f0     14 13 02 F6 | 	mov	arg01, local06
063f4     F4 B1 B1 FD | 	call	#__system___string_cmp
063f8     00 FA 0D F2 | 	cmp	result1, #0 wz
063fc     01 36 06 A6 |  if_e	mov	local13, #1
06400     00 36 06 56 |  if_ne	mov	local13, #0
06404                 | ' if l>1 then 
06404     02 26 56 F2 | 	cmps	local05, #2 wc
06408     78 02 90 CD |  if_b	jmp	#LR__0525
0640c                 | '   for i=2 to l
0640c     02 38 06 F6 | 	mov	local14, #2
06410     13 3B 02 F6 | 	mov	local15, local05
06414     01 3A 06 F1 | 	add	local15, #1
06418                 | LR__0514
06418     1D 39 52 F2 | 	cmps	local14, local15 wc
0641c     64 02 90 3D |  if_ae	jmp	#LR__0524
06420     0F 13 02 F6 | 	mov	arg01, local01
06424     1C 15 02 F6 | 	mov	arg02, local14
06428     01 16 06 F6 | 	mov	arg03, #1
0642c     28 D3 B1 FD | 	call	#__system__Mid_S
06430     FD 28 02 F6 | 	mov	local06, result1
06434     00 3C 06 F6 | 	mov	local16, #0
06438                 | '     m$=mid$(s,i,1) : b=false
06438                 | '     if m$>="0" andalso m$<="9" then b=true  
06438     8B 01 00 FF 
0643c     D7 14 06 F6 | 	mov	arg02, ##@LR__5439
06440     14 13 02 F6 | 	mov	arg01, local06
06444     A4 B1 B1 FD | 	call	#__system___string_cmp
06448     00 FA 55 F2 | 	cmps	result1, #0 wc
0644c     1C 00 90 CD |  if_b	jmp	#LR__0515
06450     8B 01 00 FF 
06454     D9 2A 06 F6 | 	mov	local07, ##@LR__5440
06458     14 13 02 F6 | 	mov	arg01, local06
0645c     15 15 02 F6 | 	mov	arg02, local07
06460     88 B1 B1 FD | 	call	#__system___string_cmp
06464     01 FA 55 F2 | 	cmps	result1, #1 wc
06468     01 3C 66 C6 |  if_b	neg	local16, #1
0646c                 | LR__0515
0646c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0646c     8B 01 00 FF 
06470     DB 14 06 F6 | 	mov	arg02, ##@LR__5441
06474     14 13 02 F6 | 	mov	arg01, local06
06478     70 B1 B1 FD | 	call	#__system___string_cmp
0647c     00 FA 0D F2 | 	cmp	result1, #0 wz
06480     7C 00 90 AD |  if_e	jmp	#LR__0516
06484     8B 01 00 FF 
06488     DD 2A 06 F6 | 	mov	local07, ##@LR__5442
0648c     14 13 02 F6 | 	mov	arg01, local06
06490     15 15 02 F6 | 	mov	arg02, local07
06494     54 B1 B1 FD | 	call	#__system___string_cmp
06498     00 FA 0D F2 | 	cmp	result1, #0 wz
0649c     60 00 90 AD |  if_e	jmp	#LR__0516
064a0     8B 01 00 FF 
064a4     DF 2C 06 F6 | 	mov	local08, ##@LR__5443
064a8     16 2B 02 F6 | 	mov	local07, local08
064ac     14 13 02 F6 | 	mov	arg01, local06
064b0     15 15 02 F6 | 	mov	arg02, local07
064b4     34 B1 B1 FD | 	call	#__system___string_cmp
064b8     00 FA 0D F2 | 	cmp	result1, #0 wz
064bc     40 00 90 AD |  if_e	jmp	#LR__0516
064c0     8B 01 00 FF 
064c4     E1 2E 06 F6 | 	mov	local09, ##@LR__5444
064c8     17 2D 02 F6 | 	mov	local08, local09
064cc     14 13 02 F6 | 	mov	arg01, local06
064d0     16 15 02 F6 | 	mov	arg02, local08
064d4     14 B1 B1 FD | 	call	#__system___string_cmp
064d8     FD 2A 0A F6 | 	mov	local07, result1 wz
064dc     20 00 90 AD |  if_e	jmp	#LR__0516
064e0     8B 01 00 FF 
064e4     E3 30 06 F6 | 	mov	local10, ##@LR__5445
064e8     18 2F 02 F6 | 	mov	local09, local10
064ec     14 13 02 F6 | 	mov	arg01, local06
064f0     17 15 02 F6 | 	mov	arg02, local09
064f4     F4 B0 B1 FD | 	call	#__system___string_cmp
064f8     FD 2C 0A F6 | 	mov	local08, result1 wz
064fc     04 00 90 5D |  if_ne	jmp	#LR__0517
06500                 | LR__0516
06500     01 3C 66 F6 | 	neg	local16, #1
06504                 | LR__0517
06504                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06504     01 34 0E F2 | 	cmp	local12, #1 wz
06508     34 00 90 5D |  if_ne	jmp	#LR__0518
0650c     8B 01 00 FF 
06510     E5 14 06 F6 | 	mov	arg02, ##@LR__5446
06514     14 13 02 F6 | 	mov	arg01, local06
06518     D0 B0 B1 FD | 	call	#__system___string_cmp
0651c     00 FA 55 F2 | 	cmps	result1, #0 wc
06520     1C 00 90 CD |  if_b	jmp	#LR__0518
06524     8B 01 00 FF 
06528     E7 2A 06 F6 | 	mov	local07, ##@LR__5447
0652c     14 13 02 F6 | 	mov	arg01, local06
06530     15 15 02 F6 | 	mov	arg02, local07
06534     B4 B0 B1 FD | 	call	#__system___string_cmp
06538     01 FA 55 F2 | 	cmps	result1, #1 wc
0653c     01 3C 66 C6 |  if_b	neg	local16, #1
06540                 | LR__0518
06540                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06540     01 36 0E F2 | 	cmp	local13, #1 wz
06544     58 00 90 5D |  if_ne	jmp	#LR__0520
06548     8B 01 00 FF 
0654c     E9 14 06 F6 | 	mov	arg02, ##@LR__5448
06550     14 13 02 F6 | 	mov	arg01, local06
06554     94 B0 B1 FD | 	call	#__system___string_cmp
06558     00 FA 55 F2 | 	cmps	result1, #0 wc
0655c     1C 00 90 CD |  if_b	jmp	#LR__0519
06560     8B 01 00 FF 
06564     EB 2A 06 F6 | 	mov	local07, ##@LR__5449
06568     14 13 02 F6 | 	mov	arg01, local06
0656c     15 15 02 F6 | 	mov	arg02, local07
06570     78 B0 B1 FD | 	call	#__system___string_cmp
06574     01 FA 55 F2 | 	cmps	result1, #1 wc
06578     24 00 90 CD |  if_b	jmp	#LR__0520
0657c                 | LR__0519
0657c     8B 01 00 FF 
06580     ED 2C 06 F6 | 	mov	local08, ##@LR__5450
06584     16 2B 02 F6 | 	mov	local07, local08
06588     14 13 02 F6 | 	mov	arg01, local06
0658c     15 15 02 F6 | 	mov	arg02, local07
06590     58 B0 B1 FD | 	call	#__system___string_cmp
06594     00 FA 0D F2 | 	cmp	result1, #0 wz
06598     00 FA 05 56 |  if_ne	mov	result1, #0
0659c     E8 00 90 5D |  if_ne	jmp	#LR__0526
065a0                 | LR__0520
065a0                 | '     if not b then return false
065a0     1E 3D 22 F6 | 	not	local16, local16
065a4     00 3C 0E F2 | 	cmp	local16, #0 wz
065a8     00 FA 05 56 |  if_ne	mov	result1, #0
065ac     D8 00 90 5D |  if_ne	jmp	#LR__0526
065b0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
065b0     8B 01 00 FF 
065b4     EF 14 06 F6 | 	mov	arg02, ##@LR__5451
065b8     14 13 02 F6 | 	mov	arg01, local06
065bc     2C B0 B1 FD | 	call	#__system___string_cmp
065c0     00 FA 0D F2 | 	cmp	result1, #0 wz
065c4     3C 00 90 5D |  if_ne	jmp	#LR__0521
065c8     1C 15 02 F6 | 	mov	arg02, local14
065cc     01 14 86 F1 | 	sub	arg02, #1
065d0     0F 13 02 F6 | 	mov	arg01, local01
065d4     01 16 06 F6 | 	mov	arg03, #1
065d8     7C D1 B1 FD | 	call	#__system__Mid_S
065dc     FD 12 02 F6 | 	mov	arg01, result1
065e0     6C D3 B1 FD | 	call	#__system__LCase_S
065e4     FD 12 02 F6 | 	mov	arg01, result1
065e8     8B 01 00 FF 
065ec     F1 2A 06 F6 | 	mov	local07, ##@LR__5452
065f0     15 15 02 F6 | 	mov	arg02, local07
065f4     F4 AF B1 FD | 	call	#__system___string_cmp
065f8     00 FA 0D F2 | 	cmp	result1, #0 wz
065fc     00 FA 05 56 |  if_ne	mov	result1, #0
06600     84 00 90 5D |  if_ne	jmp	#LR__0526
06604                 | LR__0521
06604                 | '     if m$="." then ds+=1: if ds>1 then return false
06604     8B 01 00 FF 
06608     F3 14 06 F6 | 	mov	arg02, ##@LR__5453
0660c     14 13 02 F6 | 	mov	arg01, local06
06610     D8 AF B1 FD | 	call	#__system___string_cmp
06614     00 FA 0D F2 | 	cmp	result1, #0 wz
06618     01 20 06 A1 |  if_e	add	local02, #1
0661c     02 20 56 A2 |  if_e	cmps	local02, #2 wc
06620     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06624     60 00 90 2D |  if_nc_and_z	jmp	#LR__0526
06628                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06628     8B 01 00 FF 
0662c     F5 3E 06 F6 | 	mov	local17, ##@LR__5454
06630     1F 41 02 F6 | 	mov	local18, local17
06634     14 13 02 F6 | 	mov	arg01, local06
06638     20 15 02 F6 | 	mov	arg02, local18
0663c     AC AF B1 FD | 	call	#__system___string_cmp
06640     FD 42 0A F6 | 	mov	local19, result1 wz
06644     20 00 90 AD |  if_e	jmp	#LR__0522
06648     8B 01 00 FF 
0664c     F7 2A 06 F6 | 	mov	local07, ##@LR__5455
06650     15 3F 02 F6 | 	mov	local17, local07
06654     14 13 02 F6 | 	mov	arg01, local06
06658     1F 15 02 F6 | 	mov	arg02, local17
0665c     8C AF B1 FD | 	call	#__system___string_cmp
06660     FD 40 0A F6 | 	mov	local18, result1 wz
06664     14 00 90 5D |  if_ne	jmp	#LR__0523
06668                 | LR__0522
06668     01 22 06 F1 | 	add	local03, #1
0666c     00 34 0E F2 | 	cmp	local12, #0 wz
06670     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06674     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06678     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0526
0667c                 | LR__0523
0667c     01 38 06 F1 | 	add	local14, #1
06680     94 FD 9F FD | 	jmp	#LR__0514
06684                 | LR__0524
06684                 | LR__0525
06684                 | ' return true
06684     01 FA 65 F6 | 	neg	result1, #1
06688                 | LR__0526
06688     A7 F0 03 F6 | 	mov	ptra, fp
0668c     B2 00 A0 FD | 	call	#popregs_
06690                 | _isnum_ret
06690     2D 00 64 FD | 	ret
06694                 | 
06694                 | '   
06694                 | ' ' Check if the part is an integer number.    
06694                 | '   
06694                 | ' function isint(s as string) as boolean
06694                 | _isint
06694     0E 4A 05 F6 | 	mov	COUNT_, #14
06698     A8 00 A0 FD | 	call	#pushregs_
0669c     09 1F 02 F6 | 	mov	local01, arg01
066a0     09 21 02 F6 | 	mov	local02, arg01
066a4     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
066a8                 | LR__0530
066a8     10 FB C9 FA | 	rdbyte	result1, local02 wz
066ac     01 20 06 51 |  if_ne	add	local02, #1
066b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
066b4                 | LR__0531
066b4     09 21 82 F1 | 	sub	local02, arg01
066b8     10 FB 01 F6 | 	mov	result1, local02
066bc     FD 22 0A F6 | 	mov	local03, result1 wz
066c0     00 FA 05 A6 |  if_e	mov	result1, #0
066c4     64 02 90 AD |  if_e	jmp	#LR__0544
066c8     0F 13 02 F6 | 	mov	arg01, local01
066cc     01 14 06 F6 | 	mov	arg02, #1
066d0     01 16 06 F6 | 	mov	arg03, #1
066d4     80 D0 B1 FD | 	call	#__system__Mid_S
066d8     FD 24 02 F6 | 	mov	local04, result1
066dc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
066dc     8B 01 00 FF 
066e0     F9 14 06 F6 | 	mov	arg02, ##@LR__5456
066e4     12 13 02 F6 | 	mov	arg01, local04
066e8     00 AF B1 FD | 	call	#__system___string_cmp
066ec     00 FA 55 F2 | 	cmps	result1, #0 wc
066f0     1C 00 90 CD |  if_b	jmp	#LR__0532
066f4     8B 01 00 FF 
066f8     FB 26 06 F6 | 	mov	local05, ##@LR__5457
066fc     12 13 02 F6 | 	mov	arg01, local04
06700     13 15 02 F6 | 	mov	arg02, local05
06704     E4 AE B1 FD | 	call	#__system___string_cmp
06708     01 FA 55 F2 | 	cmps	result1, #1 wc
0670c     64 00 90 CD |  if_b	jmp	#LR__0533
06710                 | LR__0532
06710     8B 01 00 FF 
06714     FD 28 06 F6 | 	mov	local06, ##@LR__5458
06718     14 27 02 F6 | 	mov	local05, local06
0671c     12 13 02 F6 | 	mov	arg01, local04
06720     13 15 02 F6 | 	mov	arg02, local05
06724     C4 AE B1 FD | 	call	#__system___string_cmp
06728     00 FA 0D F2 | 	cmp	result1, #0 wz
0672c     44 00 90 AD |  if_e	jmp	#LR__0533
06730     8B 01 00 FF 
06734     FF 2A 06 F6 | 	mov	local07, ##@LR__5459
06738     15 29 02 F6 | 	mov	local06, local07
0673c     12 13 02 F6 | 	mov	arg01, local04
06740     14 15 02 F6 | 	mov	arg02, local06
06744     A4 AE B1 FD | 	call	#__system___string_cmp
06748     FD 26 0A F6 | 	mov	local05, result1 wz
0674c     24 00 90 AD |  if_e	jmp	#LR__0533
06750     8B 01 00 FF 
06754     01 2D 06 F6 | 	mov	local08, ##@LR__5460
06758     16 2B 02 F6 | 	mov	local07, local08
0675c     12 13 02 F6 | 	mov	arg01, local04
06760     15 15 02 F6 | 	mov	arg02, local07
06764     84 AE B1 FD | 	call	#__system___string_cmp
06768     FD 28 0A F6 | 	mov	local06, result1 wz
0676c     00 FA 05 56 |  if_ne	mov	result1, #0
06770     B8 01 90 5D |  if_ne	jmp	#LR__0544
06774                 | LR__0533
06774                 | ' if m$="$" then hex=1 else hex=0
06774     8B 01 00 FF 
06778     03 15 06 F6 | 	mov	arg02, ##@LR__5461
0677c     12 13 02 F6 | 	mov	arg01, local04
06780     68 AE B1 FD | 	call	#__system___string_cmp
06784     00 FA 0D F2 | 	cmp	result1, #0 wz
06788     01 2E 06 A6 |  if_e	mov	local09, #1
0678c     00 2E 06 56 |  if_ne	mov	local09, #0
06790                 | ' if m$="%" then bin=1 else bin=0
06790     8B 01 00 FF 
06794     05 15 06 F6 | 	mov	arg02, ##@LR__5462
06798     12 13 02 F6 | 	mov	arg01, local04
0679c     4C AE B1 FD | 	call	#__system___string_cmp
067a0     00 FA 0D F2 | 	cmp	result1, #0 wz
067a4     01 30 06 A6 |  if_e	mov	local10, #1
067a8     00 30 06 56 |  if_ne	mov	local10, #0
067ac                 | ' if l>1 then 
067ac     02 22 56 F2 | 	cmps	local03, #2 wc
067b0     74 01 90 CD |  if_b	jmp	#LR__0543
067b4                 | '   for i=2 to l
067b4     02 32 06 F6 | 	mov	local11, #2
067b8     11 35 02 F6 | 	mov	local12, local03
067bc     01 34 06 F1 | 	add	local12, #1
067c0                 | LR__0534
067c0     1A 33 52 F2 | 	cmps	local11, local12 wc
067c4     60 01 90 3D |  if_ae	jmp	#LR__0542
067c8     0F 13 02 F6 | 	mov	arg01, local01
067cc     19 15 02 F6 | 	mov	arg02, local11
067d0     01 16 06 F6 | 	mov	arg03, #1
067d4     80 CF B1 FD | 	call	#__system__Mid_S
067d8     FD 24 02 F6 | 	mov	local04, result1
067dc                 | '     m$=mid$(s,i,1) 
067dc                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
067dc     00 2E 0E F2 | 	cmp	local09, #0 wz
067e0     50 00 90 5D |  if_ne	jmp	#LR__0536
067e4     8B 01 00 FF 
067e8     07 15 06 F6 | 	mov	arg02, ##@LR__5463
067ec     12 13 02 F6 | 	mov	arg01, local04
067f0     F8 AD B1 FD | 	call	#__system___string_cmp
067f4     00 FA 55 F2 | 	cmps	result1, #0 wc
067f8     18 00 90 CD |  if_b	jmp	#LR__0535
067fc     8B 01 00 FF 
06800     09 15 06 F6 | 	mov	arg02, ##@LR__5464
06804     12 13 02 F6 | 	mov	arg01, local04
06808     E0 AD B1 FD | 	call	#__system___string_cmp
0680c     01 FA 55 F2 | 	cmps	result1, #1 wc
06810     20 00 90 CD |  if_b	jmp	#LR__0536
06814                 | LR__0535
06814     8B 01 00 FF 
06818     0B 29 06 F6 | 	mov	local06, ##@LR__5465
0681c     12 13 02 F6 | 	mov	arg01, local04
06820     14 15 02 F6 | 	mov	arg02, local06
06824     C4 AD B1 FD | 	call	#__system___string_cmp
06828     00 FA 0D F2 | 	cmp	result1, #0 wz
0682c     00 FA 05 56 |  if_ne	mov	result1, #0
06830     F8 00 90 5D |  if_ne	jmp	#LR__0544
06834                 | LR__0536
06834                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06834     01 2E 0E F2 | 	cmp	local09, #1 wz
06838     90 00 90 5D |  if_ne	jmp	#LR__0539
0683c     8B 01 00 FF 
06840     0D 15 06 F6 | 	mov	arg02, ##@LR__5466
06844     12 13 02 F6 | 	mov	arg01, local04
06848     A0 AD B1 FD | 	call	#__system___string_cmp
0684c     00 FA 55 F2 | 	cmps	result1, #0 wc
06850     1C 00 90 CD |  if_b	jmp	#LR__0537
06854     8B 01 00 FF 
06858     0F 15 06 F6 | 	mov	arg02, ##@LR__5467
0685c     12 13 02 F6 | 	mov	arg01, local04
06860     88 AD B1 FD | 	call	#__system___string_cmp
06864     FD 36 02 F6 | 	mov	local13, result1
06868     01 36 56 F2 | 	cmps	local13, #1 wc
0686c     5C 00 90 CD |  if_b	jmp	#LR__0539
06870                 | LR__0537
06870     8B 01 00 FF 
06874     11 27 06 F6 | 	mov	local05, ##@LR__5468
06878     12 13 02 F6 | 	mov	arg01, local04
0687c     13 15 02 F6 | 	mov	arg02, local05
06880     68 AD B1 FD | 	call	#__system___string_cmp
06884     FD 38 02 F6 | 	mov	local14, result1
06888     00 38 56 F2 | 	cmps	local14, #0 wc
0688c     1C 00 90 CD |  if_b	jmp	#LR__0538
06890     8B 01 00 FF 
06894     13 2B 06 F6 | 	mov	local07, ##@LR__5469
06898     12 13 02 F6 | 	mov	arg01, local04
0689c     15 15 02 F6 | 	mov	arg02, local07
068a0     48 AD B1 FD | 	call	#__system___string_cmp
068a4     01 FA 55 F2 | 	cmps	result1, #1 wc
068a8     20 00 90 CD |  if_b	jmp	#LR__0539
068ac                 | LR__0538
068ac     8B 01 00 FF 
068b0     15 2D 06 F6 | 	mov	local08, ##@LR__5470
068b4     12 13 02 F6 | 	mov	arg01, local04
068b8     16 15 02 F6 | 	mov	arg02, local08
068bc     2C AD B1 FD | 	call	#__system___string_cmp
068c0     00 FA 0D F2 | 	cmp	result1, #0 wz
068c4     00 FA 05 56 |  if_ne	mov	result1, #0
068c8     60 00 90 5D |  if_ne	jmp	#LR__0544
068cc                 | LR__0539
068cc                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
068cc     01 30 0E F2 | 	cmp	local10, #1 wz
068d0     4C 00 90 5D |  if_ne	jmp	#LR__0541
068d4     8B 01 00 FF 
068d8     17 15 06 F6 | 	mov	arg02, ##@LR__5471
068dc     12 13 02 F6 | 	mov	arg01, local04
068e0     08 AD B1 FD | 	call	#__system___string_cmp
068e4     00 FA 55 F2 | 	cmps	result1, #0 wc
068e8     18 00 90 CD |  if_b	jmp	#LR__0540
068ec     8B 01 00 FF 
068f0     19 15 06 F6 | 	mov	arg02, ##@LR__5472
068f4     12 13 02 F6 | 	mov	arg01, local04
068f8     F0 AC B1 FD | 	call	#__system___string_cmp
068fc     01 FA 55 F2 | 	cmps	result1, #1 wc
06900     1C 00 90 CD |  if_b	jmp	#LR__0541
06904                 | LR__0540
06904     8B 01 00 FF 
06908     1B 15 06 F6 | 	mov	arg02, ##@LR__5473
0690c     12 13 02 F6 | 	mov	arg01, local04
06910     D8 AC B1 FD | 	call	#__system___string_cmp
06914     00 FA 0D F2 | 	cmp	result1, #0 wz
06918     00 FA 05 56 |  if_ne	mov	result1, #0
0691c     0C 00 90 5D |  if_ne	jmp	#LR__0544
06920                 | LR__0541
06920     01 32 06 F1 | 	add	local11, #1
06924     98 FE 9F FD | 	jmp	#LR__0534
06928                 | LR__0542
06928                 | LR__0543
06928                 | ' return true
06928     01 FA 65 F6 | 	neg	result1, #1
0692c                 | LR__0544
0692c     A7 F0 03 F6 | 	mov	ptra, fp
06930     B2 00 A0 FD | 	call	#popregs_
06934                 | _isint_ret
06934     2D 00 64 FD | 	ret
06938                 | 
06938                 | ' 
06938                 | ' ' Check if the part is a positive decimal number.  
06938                 | ' 
06938                 | ' function isdec(s as string) as boolean
06938                 | _isdec
06938     05 4A 05 F6 | 	mov	COUNT_, #5
0693c     A8 00 A0 FD | 	call	#pushregs_
06940     09 1F 02 F6 | 	mov	local01, arg01
06944     09 21 02 F6 | 	mov	local02, arg01
06948     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
0694c                 | LR__0550
0694c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06950     01 20 06 51 |  if_ne	add	local02, #1
06954     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
06958                 | LR__0551
06958     09 21 82 F1 | 	sub	local02, arg01
0695c     10 FB 01 F6 | 	mov	result1, local02
06960     FD 20 0A F6 | 	mov	local02, result1 wz
06964     00 FA 05 A6 |  if_e	mov	result1, #0
06968     80 00 90 AD |  if_e	jmp	#LR__0556
0696c                 | ' for i=1 to l
0696c     01 22 06 F6 | 	mov	local03, #1
06970     10 25 02 F6 | 	mov	local04, local02
06974     01 24 06 F1 | 	add	local04, #1
06978                 | LR__0552
06978     12 23 52 F2 | 	cmps	local03, local04 wc
0697c     68 00 90 3D |  if_ae	jmp	#LR__0555
06980     0F 13 02 F6 | 	mov	arg01, local01
06984     11 15 02 F6 | 	mov	arg02, local03
06988     01 16 06 F6 | 	mov	arg03, #1
0698c     C8 CD B1 FD | 	call	#__system__Mid_S
06990     FD 26 02 F6 | 	mov	local05, result1
06994                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06994     8B 01 00 FF 
06998     1D 15 06 F6 | 	mov	arg02, ##@LR__5474
0699c     13 13 02 F6 | 	mov	arg01, local05
069a0     48 AC B1 FD | 	call	#__system___string_cmp
069a4     00 FA 55 F2 | 	cmps	result1, #0 wc
069a8     18 00 90 CD |  if_b	jmp	#LR__0553
069ac     8B 01 00 FF 
069b0     1F 15 06 F6 | 	mov	arg02, ##@LR__5475
069b4     13 13 02 F6 | 	mov	arg01, local05
069b8     30 AC B1 FD | 	call	#__system___string_cmp
069bc     01 FA 55 F2 | 	cmps	result1, #1 wc
069c0     1C 00 90 CD |  if_b	jmp	#LR__0554
069c4                 | LR__0553
069c4     8B 01 00 FF 
069c8     21 15 06 F6 | 	mov	arg02, ##@LR__5476
069cc     13 13 02 F6 | 	mov	arg01, local05
069d0     18 AC B1 FD | 	call	#__system___string_cmp
069d4     00 FA 0D F2 | 	cmp	result1, #0 wz
069d8     00 FA 05 56 |  if_ne	mov	result1, #0
069dc     0C 00 90 5D |  if_ne	jmp	#LR__0556
069e0                 | LR__0554
069e0     01 22 06 F1 | 	add	local03, #1
069e4     90 FF 9F FD | 	jmp	#LR__0552
069e8                 | LR__0555
069e8                 | ' return true
069e8     01 FA 65 F6 | 	neg	result1, #1
069ec                 | LR__0556
069ec     A7 F0 03 F6 | 	mov	ptra, fp
069f0     B2 00 A0 FD | 	call	#popregs_
069f4                 | _isdec_ret
069f4     2D 00 64 FD | 	ret
069f8                 | 
069f8                 | ' 
069f8                 | ' ' Check if the part is a string.  
069f8                 | ' 
069f8                 | ' function isstring(s as string) as boolean
069f8                 | _isstring
069f8     01 4A 05 F6 | 	mov	COUNT_, #1
069fc     A8 00 A0 FD | 	call	#pushregs_
06a00                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06a00     09 1F 02 F6 | 	mov	local01, arg01
06a04     01 14 06 F6 | 	mov	arg02, #1
06a08     34 CC B1 FD | 	call	#__system__Left_S
06a0c     FD 12 02 F6 | 	mov	arg01, result1
06a10     8B 01 00 FF 
06a14     23 15 06 F6 | 	mov	arg02, ##@LR__5477
06a18     D0 AB B1 FD | 	call	#__system___string_cmp
06a1c     00 FA 4D F2 | 	cmps	result1, #0 wz
06a20     28 00 90 5D |  if_ne	jmp	#LR__0560
06a24     0F 13 02 F6 | 	mov	arg01, local01
06a28     01 14 06 F6 | 	mov	arg02, #1
06a2c     98 CC B1 FD | 	call	#__system__Right_S
06a30     FD 12 02 F6 | 	mov	arg01, result1
06a34     8B 01 00 FF 
06a38     25 15 06 F6 | 	mov	arg02, ##@LR__5478
06a3c     AC AB B1 FD | 	call	#__system___string_cmp
06a40     00 FA 4D F2 | 	cmps	result1, #0 wz
06a44     01 FA 65 A6 |  if_e	neg	result1, #1
06a48     04 00 90 AD |  if_e	jmp	#LR__0561
06a4c                 | LR__0560
06a4c     00 FA 05 F6 | 	mov	result1, #0
06a50                 | LR__0561
06a50     A7 F0 03 F6 | 	mov	ptra, fp
06a54     B2 00 A0 FD | 	call	#popregs_
06a58                 | _isstring_ret
06a58     2D 00 64 FD | 	ret
06a5c                 | 
06a5c                 | ' 
06a5c                 | ' ' getnoteval. Returns the frequency of note token
06a5c                 | ' 
06a5c                 | ' function getnoteval(token) as single
06a5c                 | _getnoteval
06a5c     02 4A 05 F6 | 	mov	COUNT_, #2
06a60     A8 00 A0 FD | 	call	#pushregs_
06a64     01 00 00 FF 
06a68     00 13 86 F1 | 	sub	arg01, ##768
06a6c     09 15 52 F6 | 	abs	arg02, arg01 wc
06a70     0C 14 16 FD | 	qdiv	arg02, #12
06a74     14 00 00 FF 
06a78     D8 E4 05 F1 | 	add	objptr, ##10456
06a7c     19 14 62 FD | 	getqy	arg02
06a80     0A 15 82 F6 | 	negc	arg02, arg02
06a84     02 14 66 F0 | 	shl	arg02, #2
06a88     F2 14 02 F1 | 	add	arg02, objptr
06a8c     0A 1F 02 FB | 	rdlong	local01, arg02
06a90     09 15 52 F6 | 	abs	arg02, arg01 wc
06a94     0C 14 16 FD | 	qdiv	arg02, #12
06a98     14 00 00 FF 
06a9c     D8 E4 85 F1 | 	sub	objptr, ##10456
06aa0     01 12 06 F6 | 	mov	arg01, #1
06aa4                 | ' noteexp=1+(note/12) 
06aa4                 | ' return (2.0^noteexp)*notebase
06aa4     18 14 62 FD | 	getqx	arg02
06aa8     0A 13 82 F3 | 	sumc	arg01, arg02
06aac     09 13 52 F6 | 	abs	arg01, arg01 wc
06ab0     1F 20 C6 C9 |  if_b	decod	local02, #31
06ab4     00 20 06 36 |  if_ae	mov	local02, #0
06ab8     C0 D4 B1 FD | 	call	#__system___float_fromuns
06abc     10 FB 61 F5 | 	xor	result1, local02
06ac0     FD 14 02 F6 | 	mov	arg02, result1
06ac4     1E 12 C6 F9 | 	decod	arg01, #30
06ac8     BC E7 B1 FD | 	call	#__system____builtin_powf
06acc     FD 12 02 F6 | 	mov	arg01, result1
06ad0     0F 15 02 F6 | 	mov	arg02, local01
06ad4     A8 D8 B1 FD | 	call	#__system___float_mul
06ad8     A7 F0 03 F6 | 	mov	ptra, fp
06adc     B2 00 A0 FD | 	call	#popregs_
06ae0                 | _getnoteval_ret
06ae0     2D 00 64 FD | 	ret
06ae4                 | 
06ae4                 | ' 
06ae4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06ae4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06ae4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06ae4                 | ' 
06ae4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06ae4                 | ' '
06ae4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06ae4                 | ' '
06ae4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06ae4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06ae4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06ae4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06ae4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06ae4                 | ' ' 
06ae4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06ae4                 | ' 
06ae4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06ae4                 | ' ' Helper functions to manage program lines
06ae4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06ae4                 | ' 
06ae4                 | ' '----- delete a line from a program
06ae4                 | ' 
06ae4                 | ' function deleteline(aline as ulong) as integer
06ae4                 | _deleteline
06ae4     02 4A 05 F6 | 	mov	COUNT_, #2
06ae8     A8 00 A0 FD | 	call	#pushregs_
06aec     2C F0 07 F1 | 	add	ptra, #44
06af0     04 4E 05 F1 | 	add	fp, #4
06af4     A7 12 62 FC | 	wrlong	arg01, fp
06af8     4A 00 00 FF 
06afc     88 E4 05 F1 | 	add	objptr, ##38024
06b00     F2 1E 02 FB | 	rdlong	local01, objptr
06b04     0C 4E 05 F1 | 	add	fp, #12
06b08     A7 1E 62 FC | 	wrlong	local01, fp
06b0c     10 4E 85 F1 | 	sub	fp, #16
06b10                 | ' 
06b10                 | ' searchptr=programstart
06b10                 | ' do
06b10     3E 00 00 FF 
06b14     BC E5 85 F1 | 	sub	objptr, ##32188
06b18                 | LR__0570
06b18     14 4E 05 F1 | 	add	fp, #20
06b1c     A7 12 02 F6 | 	mov	arg01, fp
06b20     04 4E 85 F1 | 	sub	fp, #4
06b24     A7 14 02 FB | 	rdlong	arg02, fp
06b28     10 4E 85 F1 | 	sub	fp, #16
06b2c     18 16 06 F6 | 	mov	arg03, #24
06b30     50 9E B1 FD | 	call	#_psram_spin2_read1
06b34     10 4E 05 F1 | 	add	fp, #16
06b38     A7 1E 02 FB | 	rdlong	local01, fp
06b3c     08 4E 85 F1 | 	sub	fp, #8
06b40     A7 1E 62 FC | 	wrlong	local01, fp
06b44     20 4E 05 F1 | 	add	fp, #32
06b48     A7 1E 02 FB | 	rdlong	local01, fp
06b4c     18 4E 85 F1 | 	sub	fp, #24
06b50     A7 1E 62 FC | 	wrlong	local01, fp
06b54     04 4E 05 F1 | 	add	fp, #4
06b58     A7 1E 02 FB | 	rdlong	local01, fp
06b5c     10 4E 85 F1 | 	sub	fp, #16
06b60     A7 16 02 FB | 	rdlong	arg03, fp
06b64     04 4E 85 F1 | 	sub	fp, #4
06b68     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b6c     28 4E 05 C1 |  if_b	add	fp, #40
06b70     A7 20 02 CB |  if_b	rdlong	local02, fp
06b74     28 4E 85 C1 |  if_b	sub	fp, #40
06b78     FF FF 3F CF 
06b7c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06b80     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0570
06b84     0B 00 00 FF 
06b88     CC E4 85 F1 | 	sub	objptr, ##5836
06b8c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06b8c     14 4E 05 F1 | 	add	fp, #20
06b90     A7 1E 02 FB | 	rdlong	local01, fp
06b94     10 4E 85 F1 | 	sub	fp, #16
06b98     A7 20 02 FB | 	rdlong	local02, fp
06b9c     04 4E 85 F1 | 	sub	fp, #4
06ba0     10 1F 0A F2 | 	cmp	local01, local02 wz
06ba4     01 FA 65 56 |  if_ne	neg	result1, #1
06ba8     34 02 90 5D |  if_ne	jmp	#LR__0575
06bac     08 4E 05 F1 | 	add	fp, #8
06bb0     A7 12 02 FB | 	rdlong	arg01, fp
06bb4     08 4E 85 F1 | 	sub	fp, #8
06bb8     01 14 66 F6 | 	neg	arg02, #1
06bbc     D0 75 B1 FD | 	call	#_pslpoke
06bc0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06bc0                 | ' 
06bc0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06bc0     28 4E 05 F1 | 	add	fp, #40
06bc4     A7 1E 02 FB | 	rdlong	local01, fp
06bc8     28 4E 85 F1 | 	sub	fp, #40
06bcc     FF FF 3F FF 
06bd0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06bd4     24 4E 05 A1 |  if_e	add	fp, #36
06bd8     A7 20 02 AB |  if_e	rdlong	local02, fp
06bdc     24 4E 85 A1 |  if_e	sub	fp, #36
06be0     FF FF 7F AF 
06be4     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
06be8     88 00 90 5D |  if_ne	jmp	#LR__0571
06bec     4A 00 00 FF 
06bf0     88 E4 05 F1 | 	add	objptr, ##38024
06bf4     00 04 80 FF 
06bf8     F2 00 68 FC | 	wrlong	##524288, objptr
06bfc     07 00 00 FF 
06c00     2C E4 85 F1 | 	sub	objptr, ##3628
06c04     00 04 80 FF 
06c08     F2 00 68 FC | 	wrlong	##524288, objptr
06c0c     07 00 00 FF 
06c10     30 E4 05 F1 | 	add	objptr, ##3632
06c14     F2 00 68 FC | 	wrlong	#0, objptr
06c18     04 E4 05 F1 | 	add	objptr, #4
06c1c     FF FF FF FF 
06c20     F2 FE 6B FC | 	wrlong	##-1, objptr
06c24     4A 00 00 FF 
06c28     90 E4 85 F1 | 	sub	objptr, ##38032
06c2c     00 12 06 F6 | 	mov	arg01, #0
06c30     01 14 66 F6 | 	neg	arg02, #1
06c34     58 75 B1 FD | 	call	#_pslpoke
06c38     10 12 06 F6 | 	mov	arg01, #16
06c3c     01 14 66 F6 | 	neg	arg02, #1
06c40     4C 75 B1 FD | 	call	#_pslpoke
06c44     14 12 06 F6 | 	mov	arg01, #20
06c48     1E 14 CE F9 | 	bmask	arg02, #30
06c4c     40 75 B1 FD | 	call	#_pslpoke
06c50     50 00 00 FF 
06c54     B8 E4 05 F1 | 	add	objptr, ##41144
06c58     00 04 80 FF 
06c5c     F2 00 68 FC | 	wrlong	##524288, objptr
06c60     04 E4 05 F1 | 	add	objptr, #4
06c64     00 04 80 FF 
06c68     F2 00 68 FC | 	wrlong	##524288, objptr
06c6c     50 00 00 FF 
06c70     BC E4 85 F1 | 	sub	objptr, ##41148
06c74                 | LR__0571
06c74                 | ' 
06c74                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06c74     28 4E 05 F1 | 	add	fp, #40
06c78     A7 1E 02 FB | 	rdlong	local01, fp
06c7c     28 4E 85 F1 | 	sub	fp, #40
06c80     FF FF 3F FF 
06c84     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06c88     74 00 90 5D |  if_ne	jmp	#LR__0572
06c8c     24 4E 05 F1 | 	add	fp, #36
06c90     A7 20 02 FB | 	rdlong	local02, fp
06c94     24 4E 85 F1 | 	sub	fp, #36
06c98     FF FF 7F FF 
06c9c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06ca0     5C 00 90 AD |  if_e	jmp	#LR__0572
06ca4     24 4E 05 F1 | 	add	fp, #36
06ca8     A7 12 02 FB | 	rdlong	arg01, fp
06cac     24 4E 85 F1 | 	sub	fp, #36
06cb0     14 12 06 F1 | 	add	arg01, #20
06cb4     1E 14 CE F9 | 	bmask	arg02, #30
06cb8     D4 74 B1 FD | 	call	#_pslpoke
06cbc     24 4E 05 F1 | 	add	fp, #36
06cc0     A7 1E 02 FB | 	rdlong	local01, fp
06cc4     4A 00 00 FF 
06cc8     90 E4 05 F1 | 	add	objptr, ##38032
06ccc     F2 1E 62 FC | 	wrlong	local01, objptr
06cd0     4A 00 00 FF 
06cd4     90 E4 85 F1 | 	sub	objptr, ##38032
06cd8     A7 12 02 FB | 	rdlong	arg01, fp
06cdc     24 4E 85 F1 | 	sub	fp, #36
06ce0     DC 75 B1 FD | 	call	#_pslpeek
06ce4     4A 00 00 FF 
06ce8     8C E4 05 F1 | 	add	objptr, ##38028
06cec     F2 FA 61 FC | 	wrlong	result1, objptr
06cf0     4A 00 00 FF 
06cf4     8C E4 85 F1 | 	sub	objptr, ##38028
06cf8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06cf8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06cf8                 | '   lastline=pslpeek(header(4))
06cf8                 | '   return 0
06cf8     00 FA 05 F6 | 	mov	result1, #0
06cfc     E0 00 90 FD | 	jmp	#LR__0575
06d00                 | LR__0572
06d00                 | ' 
06d00                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06d00     28 4E 05 F1 | 	add	fp, #40
06d04     A7 1E 02 FB | 	rdlong	local01, fp
06d08     28 4E 85 F1 | 	sub	fp, #40
06d0c     FF FF 3F FF 
06d10     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06d14     58 00 90 AD |  if_e	jmp	#LR__0573
06d18     24 4E 05 F1 | 	add	fp, #36
06d1c     A7 20 02 FB | 	rdlong	local02, fp
06d20     24 4E 85 F1 | 	sub	fp, #36
06d24     FF FF 7F FF 
06d28     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06d2c     40 00 90 5D |  if_ne	jmp	#LR__0573
06d30     28 4E 05 F1 | 	add	fp, #40
06d34     A7 12 02 FB | 	rdlong	arg01, fp
06d38     28 4E 85 F1 | 	sub	fp, #40
06d3c     10 12 06 F1 | 	add	arg01, #16
06d40     01 14 66 F6 | 	neg	arg02, #1
06d44     48 74 B1 FD | 	call	#_pslpoke
06d48     28 4E 05 F1 | 	add	fp, #40
06d4c     A7 1E 02 FB | 	rdlong	local01, fp
06d50     28 4E 85 F1 | 	sub	fp, #40
06d54     4A 00 00 FF 
06d58     88 E4 05 F1 | 	add	objptr, ##38024
06d5c     F2 1E 62 FC | 	wrlong	local01, objptr
06d60     4A 00 00 FF 
06d64     88 E4 85 F1 | 	sub	objptr, ##38024
06d68                 | ' '   print "deleted first line"
06d68                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06d68                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06d68                 | '   return 0
06d68     00 FA 05 F6 | 	mov	result1, #0
06d6c     70 00 90 FD | 	jmp	#LR__0575
06d70                 | LR__0573
06d70                 | ' 
06d70                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06d70     28 4E 05 F1 | 	add	fp, #40
06d74     A7 1E 02 FB | 	rdlong	local01, fp
06d78     28 4E 85 F1 | 	sub	fp, #40
06d7c     FF FF 3F FF 
06d80     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06d84     24 4E 05 51 |  if_ne	add	fp, #36
06d88     A7 20 02 5B |  if_ne	rdlong	local02, fp
06d8c     24 4E 85 51 |  if_ne	sub	fp, #36
06d90     FF FF 7F 5F 
06d94     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
06d98     40 00 90 AD |  if_e	jmp	#LR__0574
06d9c     28 4E 05 F1 | 	add	fp, #40
06da0     A7 12 02 FB | 	rdlong	arg01, fp
06da4     10 12 06 F1 | 	add	arg01, #16
06da8     04 4E 85 F1 | 	sub	fp, #4
06dac     A7 14 02 FB | 	rdlong	arg02, fp
06db0     24 4E 85 F1 | 	sub	fp, #36
06db4     D8 73 B1 FD | 	call	#_pslpoke
06db8     24 4E 05 F1 | 	add	fp, #36
06dbc     A7 12 02 FB | 	rdlong	arg01, fp
06dc0     14 12 06 F1 | 	add	arg01, #20
06dc4     04 4E 05 F1 | 	add	fp, #4
06dc8     A7 14 02 FB | 	rdlong	arg02, fp
06dcc     28 4E 85 F1 | 	sub	fp, #40
06dd0     BC 73 B1 FD | 	call	#_pslpoke
06dd4                 | '    pslpoke(header(5)+16,header(4))  
06dd4                 | '    pslpoke(header(4)+20, header(5))
06dd4                 | '    return 0
06dd4     00 FA 05 F6 | 	mov	result1, #0
06dd8     04 00 90 FD | 	jmp	#LR__0575
06ddc                 | LR__0574
06ddc     00 FA 05 F6 | 	mov	result1, #0
06de0                 | LR__0575
06de0     A7 F0 03 F6 | 	mov	ptra, fp
06de4     B2 00 A0 FD | 	call	#popregs_
06de8                 | _deleteline_ret
06de8     2D 00 64 FD | 	ret
06dec                 | 
06dec                 | ' 
06dec                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06dec                 | ' 
06dec                 | ' sub save_line
06dec                 | _save_line
06dec     03 4A 05 F6 | 	mov	COUNT_, #3
06df0     A8 00 A0 FD | 	call	#pushregs_
06df4     4A 00 00 FF 
06df8     7C E4 05 F1 | 	add	objptr, ##38012
06dfc     F2 16 02 FB | 	rdlong	arg03, objptr
06e00     01 16 06 F1 | 	add	arg03, #1
06e04     05 00 00 FF 
06e08     18 E4 85 F1 | 	sub	objptr, ##2584
06e0c     F2 14 02 FB | 	rdlong	arg02, objptr
06e10     0B 15 02 FD | 	qmul	arg02, arg03
06e14     0E 00 00 FF 
06e18     44 E4 85 F1 | 	sub	objptr, ##7236
06e1c     F2 12 02 FB | 	rdlong	arg01, objptr
06e20     37 00 00 FF 
06e24     20 E4 85 F1 | 	sub	objptr, ##28192
06e28     09 1F 02 F6 | 	mov	local01, arg01
06e2c     18 20 62 FD | 	getqx	local02
06e30     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e34                 | LR__0580
06e34     0F FB C9 FA | 	rdbyte	result1, local01 wz
06e38     01 1E 06 51 |  if_ne	add	local01, #1
06e3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e40                 | LR__0581
06e40     09 1F 82 F1 | 	sub	local01, arg01
06e44     03 1E CE F7 | 	test	local01, #3 wz
06e48     02 1E 46 50 |  if_ne	shr	local01, #2
06e4c     01 1E 06 51 |  if_ne	add	local01, #1
06e50     02 1E 66 50 |  if_ne	shl	local01, #2
06e54     10 23 02 F6 | 	mov	local03, local02
06e58     0F 23 02 F1 | 	add	local03, local01
06e5c     43 00 00 FF 
06e60     5C E4 05 F1 | 	add	objptr, ##34396
06e64     F2 16 02 FB | 	rdlong	arg03, objptr
06e68     10 17 02 F1 | 	add	arg03, local02
06e6c     04 00 00 FF 
06e70     28 E4 05 F1 | 	add	objptr, ##2088
06e74     F2 16 62 FC | 	wrlong	arg03, objptr
06e78     04 E4 05 F1 | 	add	objptr, #4
06e7c     F2 1E 62 FC | 	wrlong	local01, objptr
06e80     0C E4 85 F1 | 	sub	objptr, #12
06e84     F2 12 02 F6 | 	mov	arg01, objptr
06e88     04 00 00 FF 
06e8c     20 E4 85 F1 | 	sub	objptr, ##2080
06e90     F2 14 02 FB | 	rdlong	arg02, objptr
06e94     10 17 02 F6 | 	mov	arg03, local02
06e98     37 00 00 FF 
06e9c     90 E5 85 F1 | 	sub	objptr, ##28560
06ea0     7C 9B B1 FD | 	call	#_psram_spin2_write
06ea4     2B 00 00 FF 
06ea8     54 E5 05 F1 | 	add	objptr, ##22356
06eac     F2 12 02 FB | 	rdlong	arg01, objptr
06eb0     0C 00 00 FF 
06eb4     3C E4 05 F1 | 	add	objptr, ##6204
06eb8     F2 14 02 FB | 	rdlong	arg02, objptr
06ebc     10 15 02 F1 | 	add	arg02, local02
06ec0     0F 17 02 F6 | 	mov	arg03, local01
06ec4     37 00 00 FF 
06ec8     90 E5 85 F1 | 	sub	objptr, ##28560
06ecc     50 9B B1 FD | 	call	#_psram_spin2_write
06ed0     37 00 00 FF 
06ed4     90 E5 05 F1 | 	add	objptr, ##28560
06ed8     F2 1E 02 FB | 	rdlong	local01, objptr
06edc     11 1F 02 F1 | 	add	local01, local03
06ee0     F2 1E 62 FC | 	wrlong	local01, objptr
06ee4     43 00 00 FF 
06ee8     5C E4 85 F1 | 	sub	objptr, ##34396
06eec     A7 F0 03 F6 | 	mov	ptra, fp
06ef0     B2 00 A0 FD | 	call	#popregs_
06ef4                 | _save_line_ret
06ef4     2D 00 64 FD | 	ret
06ef8                 | 
06ef8                 | ' 
06ef8                 | ' '----- Insert a new line into the middle of the program
06ef8                 | ' 
06ef8                 | ' function insertline(aline as ulong) as integer
06ef8                 | _insertline
06ef8     02 4A 05 F6 | 	mov	COUNT_, #2
06efc     A8 00 A0 FD | 	call	#pushregs_
06f00     28 F0 07 F1 | 	add	ptra, #40
06f04     04 4E 05 F1 | 	add	fp, #4
06f08     A7 12 62 FC | 	wrlong	arg01, fp
06f0c     4A 00 00 FF 
06f10     88 E4 05 F1 | 	add	objptr, ##38024
06f14     F2 1E 02 FB | 	rdlong	local01, objptr
06f18     04 4E 05 F1 | 	add	fp, #4
06f1c     A7 1E 62 FC | 	wrlong	local01, fp
06f20     08 4E 85 F1 | 	sub	fp, #8
06f24                 | ' 
06f24                 | ' do
06f24     3E 00 00 FF 
06f28     BC E5 85 F1 | 	sub	objptr, ##32188
06f2c                 | LR__0590
06f2c     10 4E 05 F1 | 	add	fp, #16
06f30     A7 12 02 F6 | 	mov	arg01, fp
06f34     08 4E 85 F1 | 	sub	fp, #8
06f38     A7 14 02 FB | 	rdlong	arg02, fp
06f3c     08 4E 85 F1 | 	sub	fp, #8
06f40     18 16 06 F6 | 	mov	arg03, #24
06f44     3C 9A B1 FD | 	call	#_psram_spin2_read1
06f48     08 4E 05 F1 | 	add	fp, #8
06f4c     A7 1E 02 FB | 	rdlong	local01, fp
06f50     04 4E 05 F1 | 	add	fp, #4
06f54     A7 1E 62 FC | 	wrlong	local01, fp
06f58     18 4E 05 F1 | 	add	fp, #24
06f5c     A7 1E 02 FB | 	rdlong	local01, fp
06f60     1C 4E 85 F1 | 	sub	fp, #28
06f64     A7 1E 62 FC | 	wrlong	local01, fp
06f68     08 4E 05 F1 | 	add	fp, #8
06f6c     A7 1E 02 FB | 	rdlong	local01, fp
06f70     0C 4E 85 F1 | 	sub	fp, #12
06f74     A7 16 02 FB | 	rdlong	arg03, fp
06f78     04 4E 85 F1 | 	sub	fp, #4
06f7c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06f80     24 4E 05 C1 |  if_b	add	fp, #36
06f84     A7 20 02 CB |  if_b	rdlong	local02, fp
06f88     24 4E 85 C1 |  if_b	sub	fp, #36
06f8c     FF FF 3F CF 
06f90     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06f94     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0590
06f98     0B 00 00 FF 
06f9c     CC E4 85 F1 | 	sub	objptr, ##5836
06fa0                 | ' 
06fa0                 | ' if header(0)=aline then return -1 				' delete it first
06fa0     10 4E 05 F1 | 	add	fp, #16
06fa4     A7 1E 02 FB | 	rdlong	local01, fp
06fa8     0C 4E 85 F1 | 	sub	fp, #12
06fac     A7 20 02 FB | 	rdlong	local02, fp
06fb0     04 4E 85 F1 | 	sub	fp, #4
06fb4     10 1F 0A F2 | 	cmp	local01, local02 wz
06fb8     01 FA 65 A6 |  if_e	neg	result1, #1
06fbc     48 01 90 AD |  if_e	jmp	#LR__0593
06fc0                 | ' if header(0)<aline then return -2 				' end of program reached
06fc0     10 4E 05 F1 | 	add	fp, #16
06fc4     A7 1E 02 FB | 	rdlong	local01, fp
06fc8     0C 4E 85 F1 | 	sub	fp, #12
06fcc     A7 16 02 FB | 	rdlong	arg03, fp
06fd0     04 4E 85 F1 | 	sub	fp, #4
06fd4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06fd8     02 FA 65 C6 |  if_b	neg	result1, #2
06fdc     28 01 90 CD |  if_b	jmp	#LR__0593
06fe0                 | ' 
06fe0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06fe0     20 4E 05 F1 | 	add	fp, #32
06fe4     A7 1E 02 FB | 	rdlong	local01, fp
06fe8     20 4E 85 F1 | 	sub	fp, #32
06fec     FF FF 7F FF 
06ff0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06ff4     78 00 90 5D |  if_ne	jmp	#LR__0591
06ff8     43 00 00 FF 
06ffc     5C E4 05 F1 | 	add	objptr, ##34396
07000     F2 1E 02 FB | 	rdlong	local01, objptr
07004     07 00 00 FF 
07008     2C E4 05 F1 | 	add	objptr, ##3628
0700c     F2 1E 62 FC | 	wrlong	local01, objptr
07010     0C 4E 05 F1 | 	add	fp, #12
07014     A7 12 02 FB | 	rdlong	arg01, fp
07018     0C 4E 85 F1 | 	sub	fp, #12
0701c     10 12 06 F1 | 	add	arg01, #16
07020     07 00 00 FF 
07024     2C E4 85 F1 | 	sub	objptr, ##3628
07028     F2 14 02 FB | 	rdlong	arg02, objptr
0702c     43 00 00 FF 
07030     5C E4 85 F1 | 	sub	objptr, ##34396
07034     58 71 B1 FD | 	call	#_pslpoke
07038     47 00 00 FF 
0703c     8C E4 05 F1 | 	add	objptr, ##36492
07040     FF FF FF FF 
07044     F2 FE 6B FC | 	wrlong	##-1, objptr
07048     0C 4E 05 F1 | 	add	fp, #12
0704c     A7 1E 02 FB | 	rdlong	local01, fp
07050     0C 4E 85 F1 | 	sub	fp, #12
07054     04 E4 05 F1 | 	add	objptr, #4
07058     F2 1E 62 FC | 	wrlong	local01, objptr
0705c     47 00 00 FF 
07060     90 E4 85 F1 | 	sub	objptr, ##36496
07064     84 FD BF FD | 	call	#_save_line
07068                 | '   programstart=programptr
07068                 | '   pslpoke(lineptr2+16,programptr)
07068                 | '   ucompiledline(4)=$FFFF_FFFF
07068                 | '   ucompiledline(5)=lineptr2
07068                 | '   save_line
07068                 | '   return 0
07068     00 FA 05 F6 | 	mov	result1, #0
0706c     98 00 90 FD | 	jmp	#LR__0593
07070                 | LR__0591
07070                 | ' 
07070                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07070     20 4E 05 F1 | 	add	fp, #32
07074     A7 1E 02 FB | 	rdlong	local01, fp
07078     20 4E 85 F1 | 	sub	fp, #32
0707c     FF FF 7F FF 
07080     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
07084     7C 00 90 AD |  if_e	jmp	#LR__0592
07088     20 4E 05 F1 | 	add	fp, #32
0708c     A7 1E 02 FB | 	rdlong	local01, fp
07090     47 00 00 FF 
07094     8C E4 05 F1 | 	add	objptr, ##36492
07098     F2 1E 62 FC | 	wrlong	local01, objptr
0709c     14 4E 85 F1 | 	sub	fp, #20
070a0     A7 1E 02 FB | 	rdlong	local01, fp
070a4     04 E4 05 F1 | 	add	objptr, #4
070a8     F2 1E 62 FC | 	wrlong	local01, objptr
070ac     A7 12 02 FB | 	rdlong	arg01, fp
070b0     0C 4E 85 F1 | 	sub	fp, #12
070b4     10 12 06 F1 | 	add	arg01, #16
070b8     04 00 00 FF 
070bc     34 E4 85 F1 | 	sub	objptr, ##2100
070c0     F2 14 02 FB | 	rdlong	arg02, objptr
070c4     43 00 00 FF 
070c8     5C E4 85 F1 | 	sub	objptr, ##34396
070cc     C0 70 B1 FD | 	call	#_pslpoke
070d0     20 4E 05 F1 | 	add	fp, #32
070d4     A7 12 02 FB | 	rdlong	arg01, fp
070d8     20 4E 85 F1 | 	sub	fp, #32
070dc     14 12 06 F1 | 	add	arg01, #20
070e0     43 00 00 FF 
070e4     5C E4 05 F1 | 	add	objptr, ##34396
070e8     F2 14 02 FB | 	rdlong	arg02, objptr
070ec     43 00 00 FF 
070f0     5C E4 85 F1 | 	sub	objptr, ##34396
070f4     98 70 B1 FD | 	call	#_pslpoke
070f8     F0 FC BF FD | 	call	#_save_line
070fc                 | '   ucompiledline(4)=header(4)
070fc                 | '   ucompiledline(5)=lineptr2
070fc                 | '   pslpoke(lineptr2+16,programptr)
070fc                 | '   pslpoke(header(4)+20,programptr)
070fc                 | '   save_line
070fc                 | '   return 0
070fc     00 FA 05 F6 | 	mov	result1, #0
07100     04 00 90 FD | 	jmp	#LR__0593
07104                 | LR__0592
07104     00 FA 05 F6 | 	mov	result1, #0
07108                 | LR__0593
07108     A7 F0 03 F6 | 	mov	ptra, fp
0710c     B2 00 A0 FD | 	call	#popregs_
07110                 | _insertline_ret
07110     2D 00 64 FD | 	ret
07114                 | 
07114                 | ' 
07114                 | ' '----- Adds a new line at the end of the program
07114                 | ' 
07114                 | ' sub add_line_at_end(aline) 
07114                 | _add_line_at_end
07114     4A 00 00 FF 
07118     8C E4 05 F1 | 	add	objptr, ##38028
0711c     F2 12 62 FC | 	wrlong	arg01, objptr
07120     04 E4 05 F1 | 	add	objptr, #4
07124     F2 14 02 FB | 	rdlong	arg02, objptr
07128     03 00 00 FF 
0712c     04 E4 85 F1 | 	sub	objptr, ##1540
07130     F2 14 62 FC | 	wrlong	arg02, objptr
07134     03 00 00 FF 
07138     04 E4 05 F1 | 	add	objptr, ##1540
0713c     F2 12 02 FB | 	rdlong	arg01, objptr
07140     14 12 06 F1 | 	add	arg01, #20
07144     07 00 00 FF 
07148     34 E4 85 F1 | 	sub	objptr, ##3636
0714c     F2 14 02 FB | 	rdlong	arg02, objptr
07150     43 00 00 FF 
07154     5C E4 85 F1 | 	sub	objptr, ##34396
07158     34 70 B1 FD | 	call	#_pslpoke
0715c     43 00 00 FF 
07160     5C E4 05 F1 | 	add	objptr, ##34396
07164     F2 14 02 FB | 	rdlong	arg02, objptr
07168     07 00 00 FF 
0716c     34 E4 05 F1 | 	add	objptr, ##3636
07170     F2 14 62 FC | 	wrlong	arg02, objptr
07174     03 00 00 FF 
07178     00 E4 85 F1 | 	sub	objptr, ##1536
0717c     FF FF BF FF 
07180     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07184                 | ' 
07184                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07184                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07184     04 00 00 FF 
07188     34 E4 85 F1 | 	sub	objptr, ##2100
0718c     F2 14 02 FB | 	rdlong	arg02, objptr
07190     43 00 00 FF 
07194     5C E4 85 F1 | 	sub	objptr, ##34396
07198     00 04 00 FF 
0719c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
071a0     47 00 00 AF 
071a4     8C E4 05 A1 |  if_e	add	objptr, ##36492
071a8     FF FF FF AF 
071ac     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
071b0     47 00 00 AF 
071b4     8C E4 85 A1 |  if_e	sub	objptr, ##36492
071b8     30 FC BF FD | 	call	#_save_line
071bc     43 00 00 FF 
071c0     5C E4 05 F1 | 	add	objptr, ##34396
071c4     F2 12 02 FB | 	rdlong	arg01, objptr
071c8     43 00 00 FF 
071cc     5C E4 85 F1 | 	sub	objptr, ##34396
071d0     01 14 66 F6 | 	neg	arg02, #1
071d4     B8 6F B1 FD | 	call	#_pslpoke
071d8                 | _add_line_at_end_ret
071d8     2D 00 64 FD | 	ret
071dc                 | 
071dc                 | ' 
071dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
071dc                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
071dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
071dc                 | ' 
071dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
071dc                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
071dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
071dc                 | ' 
071dc                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
071dc                 | ' 
071dc                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
071dc                 | _compile_immediate
071dc     0A 4A 05 F6 | 	mov	COUNT_, #10
071e0     A8 00 A0 FD | 	call	#pushregs_
071e4                 | _compile_immediate_enter
071e4     09 25 02 F6 | 	mov	local04, arg01
071e8     0A 27 02 F6 | 	mov	local05, arg02
071ec     00 28 06 F6 | 	mov	local06, #0
071f0     00 2A 06 F6 | 	mov	local07, #0
071f4     00 2C 06 F6 | 	mov	local08, #0
071f8                 | ' 
071f8                 | ' ' linetype=cont+1
071f8                 | ' ' 1 : this is the first part of the line that will continue
071f8                 | ' ' 2 - this is the continuation of the line
071f8                 | ' ' 3 - this is the last continued line
071f8                 | ' ' 4 - this is the one and only part
071f8                 | ' ' 5 - continued after if/else
071f8                 | ' 
071f8                 | ' err=0
071f8                 | ' cmd=0
071f8                 | ' vars=0
071f8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
071f8     02 24 0E F2 | 	cmp	local04, #2 wz
071fc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07200     24 00 90 5D |  if_ne	jmp	#LR__0600
07204     35 00 00 FF 
07208     10 E4 05 F1 | 	add	objptr, ##27152
0720c     F2 2A 02 FB | 	rdlong	local07, objptr
07210     01 2E 06 F6 | 	mov	local09, #1
07214     02 00 00 FF 
07218     34 E4 05 F1 | 	add	objptr, ##1076
0721c     F2 02 68 FC | 	wrlong	#1, objptr
07220     37 00 00 FF 
07224     44 E4 85 F1 | 	sub	objptr, ##28228
07228                 | LR__0600
07228                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07228     04 24 0E F2 | 	cmp	local04, #4 wz
0722c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07230     30 00 90 5D |  if_ne	jmp	#LR__0601
07234     35 00 00 FF 
07238     18 E4 05 F1 | 	add	objptr, ##27160
0723c     F2 2A 02 FB | 	rdlong	local07, objptr
07240     02 2E 06 F6 | 	mov	local09, #2
07244     02 00 00 FF 
07248     2C E4 05 F1 | 	add	objptr, ##1068
0724c     F2 04 68 FC | 	wrlong	#2, objptr
07250     13 00 00 FF 
07254     38 E4 05 F1 | 	add	objptr, ##9784
07258     F2 04 68 FC | 	wrlong	#2, objptr
0725c     4A 00 00 FF 
07260     7C E4 85 F1 | 	sub	objptr, ##38012
07264                 | LR__0601
07264                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07264     05 24 0E F2 | 	cmp	local04, #5 wz
07268     40 00 90 5D |  if_ne	jmp	#LR__0602
0726c     37 00 00 FF 
07270     44 E4 05 F1 | 	add	objptr, ##28228
07274     F2 FC 01 FB | 	rdlong	result2, objptr
07278     FE 2E 02 F6 | 	mov	local09, result2
0727c     03 2E 66 F0 | 	shl	local09, #3
07280     02 00 00 FF 
07284     38 E4 85 F1 | 	sub	objptr, ##1080
07288     F2 2E 02 F1 | 	add	local09, objptr
0728c     04 2E 06 F1 | 	add	local09, #4
07290     17 2B 02 FB | 	rdlong	local07, local09
07294     01 FC 05 F1 | 	add	result2, #1
07298     02 00 00 FF 
0729c     38 E4 05 F1 | 	add	objptr, ##1080
072a0     F2 FC 61 FC | 	wrlong	result2, objptr
072a4     37 00 00 FF 
072a8     44 E4 85 F1 | 	sub	objptr, ##28228
072ac                 | LR__0602
072ac                 | ' 
072ac                 | ' 'print  "In compile_immediate cmd=:", cmd
072ac                 | ' 451 select case cmd
072ac     5C 2A 0E F2 | 	cmp	local07, #92 wz
072b0     98 02 90 AD |  if_e	jmp	#LR__0603
072b4     47 2A 0E F2 | 	cmp	local07, #71 wz
072b8     9C 02 90 AD |  if_e	jmp	#LR__0604
072bc     59 2A 0E F2 | 	cmp	local07, #89 wz
072c0     A4 02 90 AD |  if_e	jmp	#LR__0605
072c4     C3 2A 0E F2 | 	cmp	local07, #195 wz
072c8     AC 02 90 AD |  if_e	jmp	#LR__0606
072cc     45 2A 0E F2 | 	cmp	local07, #69 wz
072d0     B0 02 90 AD |  if_e	jmp	#LR__0607
072d4     69 2A 0E F2 | 	cmp	local07, #105 wz
072d8     B8 02 90 AD |  if_e	jmp	#LR__0608
072dc     40 2A 0E F2 | 	cmp	local07, #64 wz
072e0     64 06 90 AD |  if_e	jmp	#LR__0678
072e4     B4 2A 0E F2 | 	cmp	local07, #180 wz
072e8     B4 02 90 AD |  if_e	jmp	#LR__0609
072ec     49 2A 0E F2 | 	cmp	local07, #73 wz
072f0     B8 02 90 AD |  if_e	jmp	#LR__0610
072f4     50 2A 0E F2 | 	cmp	local07, #80 wz
072f8     BC 02 90 AD |  if_e	jmp	#LR__0611
072fc     AE 2A 0E F2 | 	cmp	local07, #174 wz
07300     C4 02 90 AD |  if_e	jmp	#LR__0612
07304     B0 2A 0E F2 | 	cmp	local07, #176 wz
07308     C8 02 90 AD |  if_e	jmp	#LR__0613
0730c     AF 2A 0E F2 | 	cmp	local07, #175 wz
07310     CC 02 90 AD |  if_e	jmp	#LR__0614
07314     B1 2A 0E F2 | 	cmp	local07, #177 wz
07318     D0 02 90 AD |  if_e	jmp	#LR__0615
0731c     68 2A 0E F2 | 	cmp	local07, #104 wz
07320     D4 02 90 AD |  if_e	jmp	#LR__0616
07324     74 2A 0E F2 | 	cmp	local07, #116 wz
07328     D8 02 90 AD |  if_e	jmp	#LR__0617
0732c     73 2A 0E F2 | 	cmp	local07, #115 wz
07330     E0 02 90 AD |  if_e	jmp	#LR__0618
07334     6C 2A 0E F2 | 	cmp	local07, #108 wz
07338     E8 02 90 AD |  if_e	jmp	#LR__0619
0733c     89 2A 0E F2 | 	cmp	local07, #137 wz
07340     04 06 90 AD |  if_e	jmp	#LR__0678
07344     C2 2A 0E F2 | 	cmp	local07, #194 wz
07348     E8 02 90 AD |  if_e	jmp	#LR__0620
0734c     72 2A 0E F2 | 	cmp	local07, #114 wz
07350     EC 02 90 AD |  if_e	jmp	#LR__0621
07354     5D 2A 0E F2 | 	cmp	local07, #93 wz
07358     F0 02 90 AD |  if_e	jmp	#LR__0622
0735c     96 2A 0E F2 | 	cmp	local07, #150 wz
07360     F8 02 90 AD |  if_e	jmp	#LR__0623
07364     43 2A 0E F2 | 	cmp	local07, #67 wz
07368     FC 02 90 AD |  if_e	jmp	#LR__0624
0736c     5A 2A 0E F2 | 	cmp	local07, #90 wz
07370     04 03 90 AD |  if_e	jmp	#LR__0625
07374     AB 2A 0E F2 | 	cmp	local07, #171 wz
07378     CC 05 90 AD |  if_e	jmp	#LR__0678
0737c     BD 2A 0E F2 | 	cmp	local07, #189 wz
07380     04 03 90 AD |  if_e	jmp	#LR__0626
07384     BB 2A 0E F2 | 	cmp	local07, #187 wz
07388     0C 03 90 AD |  if_e	jmp	#LR__0627
0738c     4E 2A 0E F2 | 	cmp	local07, #78 wz
07390     14 03 90 AD |  if_e	jmp	#LR__0628
07394     A9 2A 0E F2 | 	cmp	local07, #169 wz
07398     2C 03 90 AD |  if_e	jmp	#LR__0630
0739c     46 2A 0E F2 | 	cmp	local07, #70 wz
073a0     44 03 90 AD |  if_e	jmp	#LR__0632
073a4     71 2A 0E F2 | 	cmp	local07, #113 wz
073a8     4C 03 90 AD |  if_e	jmp	#LR__0633
073ac     60 2A 0E F2 | 	cmp	local07, #96 wz
073b0     50 03 90 AD |  if_e	jmp	#LR__0634
073b4     4A 2A 0E F2 | 	cmp	local07, #74 wz
073b8     54 03 90 AD |  if_e	jmp	#LR__0635
073bc     48 2A 0E F2 | 	cmp	local07, #72 wz
073c0     58 03 90 AD |  if_e	jmp	#LR__0636
073c4     58 2A 0E F2 | 	cmp	local07, #88 wz
073c8     60 03 90 AD |  if_e	jmp	#LR__0637
073cc     5F 2A 0E F2 | 	cmp	local07, #95 wz
073d0     68 03 90 AD |  if_e	jmp	#LR__0638
073d4     8A 2A 0E F2 | 	cmp	local07, #138 wz
073d8     6C 03 90 AD |  if_e	jmp	#LR__0639
073dc     4C 2A 0E F2 | 	cmp	local07, #76 wz
073e0     70 03 90 AD |  if_e	jmp	#LR__0640
073e4     52 2A 0E F2 | 	cmp	local07, #82 wz
073e8     78 03 90 AD |  if_e	jmp	#LR__0641
073ec     97 2A 0E F2 | 	cmp	local07, #151 wz
073f0     80 03 90 AD |  if_e	jmp	#LR__0642
073f4     C6 2A 0E F2 | 	cmp	local07, #198 wz
073f8     84 03 90 AD |  if_e	jmp	#LR__0643
073fc     61 2A 0E F2 | 	cmp	local07, #97 wz
07400     88 03 90 AD |  if_e	jmp	#LR__0644
07404     63 2A 0E F2 | 	cmp	local07, #99 wz
07408     8C 03 90 AD |  if_e	jmp	#LR__0645
0740c     41 2A 0E F2 | 	cmp	local07, #65 wz
07410     34 05 90 AD |  if_e	jmp	#LR__0678
07414     4B 2A 0E F2 | 	cmp	local07, #75 wz
07418     88 03 90 AD |  if_e	jmp	#LR__0646
0741c     B3 2A 0E F2 | 	cmp	local07, #179 wz
07420     8C 03 90 AD |  if_e	jmp	#LR__0647
07424     5E 2A 0E F2 | 	cmp	local07, #94 wz
07428     90 03 90 AD |  if_e	jmp	#LR__0648
0742c     7C 2A 0E F2 | 	cmp	local07, #124 wz
07430     94 03 90 AD |  if_e	jmp	#LR__0649
07434     7D 2A 0E F2 | 	cmp	local07, #125 wz
07438     98 03 90 AD |  if_e	jmp	#LR__0650
0743c     7E 2A 0E F2 | 	cmp	local07, #126 wz
07440     9C 03 90 AD |  if_e	jmp	#LR__0651
07444     7F 2A 0E F2 | 	cmp	local07, #127 wz
07448     A0 03 90 AD |  if_e	jmp	#LR__0652
0744c     80 2A 0E F2 | 	cmp	local07, #128 wz
07450     A4 03 90 AD |  if_e	jmp	#LR__0653
07454     55 2A 0E F2 | 	cmp	local07, #85 wz
07458     A8 03 90 AD |  if_e	jmp	#LR__0654
0745c     75 2A 0E F2 | 	cmp	local07, #117 wz
07460     AC 03 90 AD |  if_e	jmp	#LR__0655
07464     42 2A 0E F2 | 	cmp	local07, #66 wz
07468     B4 03 90 AD |  if_e	jmp	#LR__0656
0746c     95 2A 0E F2 | 	cmp	local07, #149 wz
07470     BC 03 90 AD |  if_e	jmp	#LR__0657
07474     AC 2A 0E F2 | 	cmp	local07, #172 wz
07478     CC 04 90 AD |  if_e	jmp	#LR__0678
0747c     81 2A 0E F2 | 	cmp	local07, #129 wz
07480     B8 03 90 AD |  if_e	jmp	#LR__0658
07484     44 2A 0E F2 | 	cmp	local07, #68 wz
07488     BC 03 90 AD |  if_e	jmp	#LR__0659
0748c     BC 2A 0E F2 | 	cmp	local07, #188 wz
07490     C0 03 90 AD |  if_e	jmp	#LR__0660
07494     88 2A 0E F2 | 	cmp	local07, #136 wz
07498     AC 04 90 AD |  if_e	jmp	#LR__0678
0749c     92 2A 0E F2 | 	cmp	local07, #146 wz
074a0     C0 03 90 AD |  if_e	jmp	#LR__0661
074a4     BE 2A 0E F2 | 	cmp	local07, #190 wz
074a8     58 05 90 AD |  if_e	jmp	#LR__0679
074ac     AA 2A 0E F2 | 	cmp	local07, #170 wz
074b0     94 04 90 AD |  if_e	jmp	#LR__0678
074b4     4D 2A 0E F2 | 	cmp	local07, #77 wz
074b8     B4 03 90 AD |  if_e	jmp	#LR__0662
074bc     51 2A 0E F2 | 	cmp	local07, #81 wz
074c0     BC 03 90 AD |  if_e	jmp	#LR__0663
074c4     8E 2A 0E F2 | 	cmp	local07, #142 wz
074c8     C4 03 90 AD |  if_e	jmp	#LR__0664
074cc     90 2A 0E F2 | 	cmp	local07, #144 wz
074d0     C8 03 90 AD |  if_e	jmp	#LR__0665
074d4     8D 2A 0E F2 | 	cmp	local07, #141 wz
074d8     CC 03 90 AD |  if_e	jmp	#LR__0666
074dc     8C 2A 0E F2 | 	cmp	local07, #140 wz
074e0     D0 03 90 AD |  if_e	jmp	#LR__0667
074e4     91 2A 0E F2 | 	cmp	local07, #145 wz
074e8     D4 03 90 AD |  if_e	jmp	#LR__0668
074ec     8B 2A 0E F2 | 	cmp	local07, #139 wz
074f0     D8 03 90 AD |  if_e	jmp	#LR__0669
074f4     8F 2A 0E F2 | 	cmp	local07, #143 wz
074f8     DC 03 90 AD |  if_e	jmp	#LR__0670
074fc     B2 2A 0E F2 | 	cmp	local07, #178 wz
07500     E0 03 90 AD |  if_e	jmp	#LR__0671
07504     6D 2A 0E F2 | 	cmp	local07, #109 wz
07508     E8 03 90 AD |  if_e	jmp	#LR__0672
0750c     70 2A 0E F2 | 	cmp	local07, #112 wz
07510     34 04 90 AD |  if_e	jmp	#LR__0678
07514     56 2A 0E F2 | 	cmp	local07, #86 wz
07518     E4 03 90 AD |  if_e	jmp	#LR__0673
0751c     57 2A 0E F2 | 	cmp	local07, #87 wz
07520     24 04 90 AD |  if_e	jmp	#LR__0678
07524     79 2A 0E F2 | 	cmp	local07, #121 wz
07528     E0 03 90 AD |  if_e	jmp	#LR__0674
0752c     77 2A 0E F2 | 	cmp	local07, #119 wz
07530     E4 03 90 AD |  if_e	jmp	#LR__0675
07534     78 2A 0E F2 | 	cmp	local07, #120 wz
07538     E8 03 90 AD |  if_e	jmp	#LR__0676
0753c     01 00 00 FF 
07540     04 2A 0E F2 | 	cmp	local07, ##516 wz
07544     E8 03 90 AD |  if_e	jmp	#LR__0677
07548     B8 04 90 FD | 	jmp	#LR__0679
0754c                 | LR__0603
0754c     04 0B B0 FD | 	call	#_compile_fun_2p
07550     FD 28 02 F6 | 	mov	local06, result1
07554     F0 03 90 FD | 	jmp	#LR__0678
07558                 | LR__0604
07558     C8 0D B0 FD | 	call	#_compile_fun_varp
0755c     FD 2C 02 F6 | 	mov	local08, result1
07560     FE 28 02 F6 | 	mov	local06, result2
07564     E0 03 90 FD | 	jmp	#LR__0678
07568                 | LR__0605
07568     B8 0D B0 FD | 	call	#_compile_fun_varp
0756c     FD 2C 02 F6 | 	mov	local08, result1
07570     FE 28 02 F6 | 	mov	local06, result2
07574     D0 03 90 FD | 	jmp	#LR__0678
07578                 | LR__0606
07578                 | ' return expr()
07578     80 2A B0 FD | 	call	#_expr
0757c     FD 28 02 F6 | 	mov	local06, result1
07580     C4 03 90 FD | 	jmp	#LR__0678
07584                 | LR__0607
07584     9C 0D B0 FD | 	call	#_compile_fun_varp
07588     FD 2C 02 F6 | 	mov	local08, result1
0758c     FE 28 02 F6 | 	mov	local06, result2
07590     B4 03 90 FD | 	jmp	#LR__0678
07594                 | LR__0608
07594                 | ' return expr()
07594     64 2A B0 FD | 	call	#_expr
07598     FD 28 02 F6 | 	mov	local06, result1
0759c     A8 03 90 FD | 	jmp	#LR__0678
075a0                 | LR__0609
075a0                 | ' return expr()
075a0     58 2A B0 FD | 	call	#_expr
075a4     FD 28 02 F6 | 	mov	local06, result1
075a8     9C 03 90 FD | 	jmp	#LR__0678
075ac                 | LR__0610
075ac                 | ' return expr()
075ac     4C 2A B0 FD | 	call	#_expr
075b0     FD 28 02 F6 | 	mov	local06, result1
075b4     90 03 90 FD | 	jmp	#LR__0678
075b8                 | LR__0611
075b8     68 0D B0 FD | 	call	#_compile_fun_varp
075bc     FD 2C 02 F6 | 	mov	local08, result1
075c0     FE 28 02 F6 | 	mov	local06, result2
075c4     80 03 90 FD | 	jmp	#LR__0678
075c8                 | LR__0612
075c8     88 0A B0 FD | 	call	#_compile_fun_2p
075cc     FD 28 02 F6 | 	mov	local06, result1
075d0     74 03 90 FD | 	jmp	#LR__0678
075d4                 | LR__0613
075d4     7C 0A B0 FD | 	call	#_compile_fun_2p
075d8     FD 28 02 F6 | 	mov	local06, result1
075dc     68 03 90 FD | 	jmp	#LR__0678
075e0                 | LR__0614
075e0     70 0A B0 FD | 	call	#_compile_fun_2p
075e4     FD 28 02 F6 | 	mov	local06, result1
075e8     5C 03 90 FD | 	jmp	#LR__0678
075ec                 | LR__0615
075ec     64 0A B0 FD | 	call	#_compile_fun_2p
075f0     FD 28 02 F6 | 	mov	local06, result1
075f4     50 03 90 FD | 	jmp	#LR__0678
075f8                 | LR__0616
075f8                 | ' return expr()
075f8     00 2A B0 FD | 	call	#_expr
075fc     FD 28 02 F6 | 	mov	local06, result1
07600     44 03 90 FD | 	jmp	#LR__0678
07604                 | LR__0617
07604     1C 0D B0 FD | 	call	#_compile_fun_varp
07608     FD 2C 02 F6 | 	mov	local08, result1
0760c     FE 28 02 F6 | 	mov	local06, result2
07610     34 03 90 FD | 	jmp	#LR__0678
07614                 | LR__0618
07614     0C 0D B0 FD | 	call	#_compile_fun_varp
07618     FD 2C 02 F6 | 	mov	local08, result1
0761c     FE 28 02 F6 | 	mov	local06, result2
07620     24 03 90 FD | 	jmp	#LR__0678
07624                 | LR__0619
07624     FC 0C B0 FD | 	call	#_compile_fun_varp
07628     FD 2C 02 F6 | 	mov	local08, result1
0762c     FE 28 02 F6 | 	mov	local06, result2
07630     14 03 90 FD | 	jmp	#LR__0678
07634                 | LR__0620
07634                 | ' return expr()
07634     C4 29 B0 FD | 	call	#_expr
07638     FD 28 02 F6 | 	mov	local06, result1
0763c     08 03 90 FD | 	jmp	#LR__0678
07640                 | LR__0621
07640     B4 19 B0 FD | 	call	#_compile_dim
07644     FD 28 02 F6 | 	mov	local06, result1
07648     B8 03 90 FD | 	jmp	#LR__0679
0764c                 | LR__0622
0764c     D4 0C B0 FD | 	call	#_compile_fun_varp
07650     FD 2C 02 F6 | 	mov	local08, result1
07654     FE 28 02 F6 | 	mov	local06, result2
07658     EC 02 90 FD | 	jmp	#LR__0678
0765c                 | LR__0623
0765c     F4 09 B0 FD | 	call	#_compile_fun_2p
07660     FD 28 02 F6 | 	mov	local06, result1
07664     E0 02 90 FD | 	jmp	#LR__0678
07668                 | LR__0624
07668     B8 0C B0 FD | 	call	#_compile_fun_varp
0766c     FD 2C 02 F6 | 	mov	local08, result1
07670     FE 28 02 F6 | 	mov	local06, result2
07674     D0 02 90 FD | 	jmp	#LR__0678
07678                 | LR__0625
07678     13 13 02 F6 | 	mov	arg01, local05
0767c     40 18 B0 FD | 	call	#_compile_else
07680     FD 28 02 F6 | 	mov	local06, result1
07684     7C 03 90 FD | 	jmp	#LR__0679
07688                 | LR__0626
07688     98 0C B0 FD | 	call	#_compile_fun_varp
0768c     FD 2C 02 F6 | 	mov	local08, result1
07690     FE 28 02 F6 | 	mov	local06, result2
07694     B0 02 90 FD | 	jmp	#LR__0678
07698                 | LR__0627
07698     88 0C B0 FD | 	call	#_compile_fun_varp
0769c     FD 2C 02 F6 | 	mov	local08, result1
076a0     FE 28 02 F6 | 	mov	local06, result2
076a4     A0 02 90 FD | 	jmp	#LR__0678
076a8                 | LR__0628
076a8     01 26 16 F2 | 	cmp	local05, #1 wc
076ac     08 00 90 CD |  if_b	jmp	#LR__0629
076b0     58 25 B0 FD | 	call	#_compile_goto
076b4     4C 03 90 FD | 	jmp	#LR__0679
076b8                 | LR__0629
076b8     19 12 06 F6 | 	mov	arg01, #25
076bc     00 14 06 F6 | 	mov	arg02, #0
076c0     40 69 B1 FD | 	call	#_printerror
076c4     3C 03 90 FD | 	jmp	#LR__0679
076c8                 | LR__0630
076c8     01 26 16 F2 | 	cmp	local05, #1 wc
076cc     08 00 90 CD |  if_b	jmp	#LR__0631
076d0     D4 24 B0 FD | 	call	#_compile_gosub
076d4     2C 03 90 FD | 	jmp	#LR__0679
076d8                 | LR__0631
076d8     19 12 06 F6 | 	mov	arg01, #25
076dc     00 14 06 F6 | 	mov	arg02, #0
076e0     20 69 B1 FD | 	call	#_printerror
076e4     1C 03 90 FD | 	jmp	#LR__0679
076e8                 | LR__0632
076e8     38 0C B0 FD | 	call	#_compile_fun_varp
076ec     FD 2C 02 F6 | 	mov	local08, result1
076f0     FE 28 02 F6 | 	mov	local06, result2
076f4     50 02 90 FD | 	jmp	#LR__0678
076f8                 | LR__0633
076f8     D0 0A B0 FD | 	call	#_compile_fun_4p
076fc     FD 28 02 F6 | 	mov	local06, result1
07700     44 02 90 FD | 	jmp	#LR__0678
07704                 | LR__0634
07704                 | ' return expr()
07704     F4 28 B0 FD | 	call	#_expr
07708     FD 28 02 F6 | 	mov	local06, result1
0770c     38 02 90 FD | 	jmp	#LR__0678
07710                 | LR__0635
07710     B8 1F B0 FD | 	call	#_compile_for
07714     FD 28 02 F6 | 	mov	local06, result1
07718     E8 02 90 FD | 	jmp	#LR__0679
0771c                 | LR__0636
0771c     04 0C B0 FD | 	call	#_compile_fun_varp
07720     FD 2C 02 F6 | 	mov	local08, result1
07724     FE 28 02 F6 | 	mov	local06, result2
07728     1C 02 90 FD | 	jmp	#LR__0678
0772c                 | LR__0637
0772c     13 13 02 F6 | 	mov	arg01, local05
07730     04 16 B0 FD | 	call	#_compile_if
07734     FD 28 02 F6 | 	mov	local06, result1
07738     C8 02 90 FD | 	jmp	#LR__0679
0773c                 | LR__0638
0773c                 | ' return expr()
0773c     BC 28 B0 FD | 	call	#_expr
07740     FD 28 02 F6 | 	mov	local06, result1
07744     00 02 90 FD | 	jmp	#LR__0678
07748                 | LR__0639
07748                 | ' return expr()
07748     B0 28 B0 FD | 	call	#_expr
0774c     FD 28 02 F6 | 	mov	local06, result1
07750     F4 01 90 FD | 	jmp	#LR__0678
07754                 | LR__0640
07754     CC 0B B0 FD | 	call	#_compile_fun_varp
07758     FD 2C 02 F6 | 	mov	local08, result1
0775c     FE 28 02 F6 | 	mov	local06, result2
07760     E4 01 90 FD | 	jmp	#LR__0678
07764                 | LR__0641
07764     BC 0B B0 FD | 	call	#_compile_fun_varp
07768     FD 2C 02 F6 | 	mov	local08, result1
0776c     FE 28 02 F6 | 	mov	local06, result2
07770     D4 01 90 FD | 	jmp	#LR__0678
07774                 | LR__0642
07774     DC 08 B0 FD | 	call	#_compile_fun_2p
07778     FD 28 02 F6 | 	mov	local06, result1
0777c     C8 01 90 FD | 	jmp	#LR__0678
07780                 | LR__0643
07780                 | ' return expr()
07780     78 28 B0 FD | 	call	#_expr
07784     FD 28 02 F6 | 	mov	local06, result1
07788     BC 01 90 FD | 	jmp	#LR__0678
0778c                 | LR__0644
0778c                 | ' return expr()
0778c     6C 28 B0 FD | 	call	#_expr
07790     FD 28 02 F6 | 	mov	local06, result1
07794     B0 01 90 FD | 	jmp	#LR__0678
07798                 | LR__0645
07798                 | ' return expr()
07798     60 28 B0 FD | 	call	#_expr
0779c     FD 28 02 F6 | 	mov	local06, result1
077a0     A4 01 90 FD | 	jmp	#LR__0678
077a4                 | LR__0646
077a4     68 22 B0 FD | 	call	#_compile_next
077a8     FD 28 02 F6 | 	mov	local06, result1
077ac     54 02 90 FD | 	jmp	#LR__0679
077b0                 | LR__0647
077b0     28 09 B0 FD | 	call	#_compile_fun_3p
077b4     FD 28 02 F6 | 	mov	local06, result1
077b8     8C 01 90 FD | 	jmp	#LR__0678
077bc                 | LR__0648
077bc                 | ' return expr()
077bc     3C 28 B0 FD | 	call	#_expr
077c0     FD 28 02 F6 | 	mov	local06, result1
077c4     80 01 90 FD | 	jmp	#LR__0678
077c8                 | LR__0649
077c8                 | ' return expr()
077c8     30 28 B0 FD | 	call	#_expr
077cc     FD 28 02 F6 | 	mov	local06, result1
077d0     74 01 90 FD | 	jmp	#LR__0678
077d4                 | LR__0650
077d4                 | ' return expr()
077d4     24 28 B0 FD | 	call	#_expr
077d8     FD 28 02 F6 | 	mov	local06, result1
077dc     68 01 90 FD | 	jmp	#LR__0678
077e0                 | LR__0651
077e0                 | ' return expr()
077e0     18 28 B0 FD | 	call	#_expr
077e4     FD 28 02 F6 | 	mov	local06, result1
077e8     5C 01 90 FD | 	jmp	#LR__0678
077ec                 | LR__0652
077ec     DC 09 B0 FD | 	call	#_compile_fun_4p
077f0     FD 28 02 F6 | 	mov	local06, result1
077f4     50 01 90 FD | 	jmp	#LR__0678
077f8                 | LR__0653
077f8                 | ' return expr()
077f8     00 28 B0 FD | 	call	#_expr
077fc     FD 28 02 F6 | 	mov	local06, result1
07800     44 01 90 FD | 	jmp	#LR__0678
07804                 | LR__0654
07804     4C 08 B0 FD | 	call	#_compile_fun_2p
07808     FD 28 02 F6 | 	mov	local06, result1
0780c     38 01 90 FD | 	jmp	#LR__0678
07810                 | LR__0655
07810     10 0B B0 FD | 	call	#_compile_fun_varp
07814     FD 2C 02 F6 | 	mov	local08, result1
07818     FE 28 02 F6 | 	mov	local06, result2
0781c     28 01 90 FD | 	jmp	#LR__0678
07820                 | LR__0656
07820     00 0B B0 FD | 	call	#_compile_fun_varp
07824     FD 2C 02 F6 | 	mov	local08, result1
07828     FE 28 02 F6 | 	mov	local06, result2
0782c     18 01 90 FD | 	jmp	#LR__0678
07830                 | LR__0657
07830     20 08 B0 FD | 	call	#_compile_fun_2p
07834     FD 28 02 F6 | 	mov	local06, result1
07838     0C 01 90 FD | 	jmp	#LR__0678
0783c                 | LR__0658
0783c     14 08 B0 FD | 	call	#_compile_fun_2p
07840     FD 28 02 F6 | 	mov	local06, result1
07844     00 01 90 FD | 	jmp	#LR__0678
07848                 | LR__0659
07848     14 0E B0 FD | 	call	#_compile_print
0784c     FD 28 02 F6 | 	mov	local06, result1
07850     B0 01 90 FD | 	jmp	#LR__0679
07854                 | LR__0660
07854     CC 0A B0 FD | 	call	#_compile_fun_varp
07858     FD 2C 02 F6 | 	mov	local08, result1
0785c     FE 28 02 F6 | 	mov	local06, result2
07860     E4 00 90 FD | 	jmp	#LR__0678
07864                 | LR__0661
07864                 | ' return expr()
07864     94 27 B0 FD | 	call	#_expr
07868     FD 28 02 F6 | 	mov	local06, result1
0786c     D8 00 90 FD | 	jmp	#LR__0678
07870                 | LR__0662
07870     B0 0A B0 FD | 	call	#_compile_fun_varp
07874     FD 2C 02 F6 | 	mov	local08, result1
07878     FE 28 02 F6 | 	mov	local06, result2
0787c     C8 00 90 FD | 	jmp	#LR__0678
07880                 | LR__0663
07880     A0 0A B0 FD | 	call	#_compile_fun_varp
07884     FD 2C 02 F6 | 	mov	local08, result1
07888     FE 28 02 F6 | 	mov	local06, result2
0788c     B8 00 90 FD | 	jmp	#LR__0678
07890                 | LR__0664
07890     C0 07 B0 FD | 	call	#_compile_fun_2p
07894     FD 28 02 F6 | 	mov	local06, result1
07898     AC 00 90 FD | 	jmp	#LR__0678
0789c                 | LR__0665
0789c     B4 07 B0 FD | 	call	#_compile_fun_2p
078a0     FD 28 02 F6 | 	mov	local06, result1
078a4     A0 00 90 FD | 	jmp	#LR__0678
078a8                 | LR__0666
078a8     A8 07 B0 FD | 	call	#_compile_fun_2p
078ac     FD 28 02 F6 | 	mov	local06, result1
078b0     94 00 90 FD | 	jmp	#LR__0678
078b4                 | LR__0667
078b4     9C 07 B0 FD | 	call	#_compile_fun_2p
078b8     FD 28 02 F6 | 	mov	local06, result1
078bc     88 00 90 FD | 	jmp	#LR__0678
078c0                 | LR__0668
078c0     90 07 B0 FD | 	call	#_compile_fun_2p
078c4     FD 28 02 F6 | 	mov	local06, result1
078c8     7C 00 90 FD | 	jmp	#LR__0678
078cc                 | LR__0669
078cc     84 07 B0 FD | 	call	#_compile_fun_2p
078d0     FD 28 02 F6 | 	mov	local06, result1
078d4     70 00 90 FD | 	jmp	#LR__0678
078d8                 | LR__0670
078d8     78 07 B0 FD | 	call	#_compile_fun_2p
078dc     FD 28 02 F6 | 	mov	local06, result1
078e0     64 00 90 FD | 	jmp	#LR__0678
078e4                 | LR__0671
078e4     3C 0A B0 FD | 	call	#_compile_fun_varp
078e8     FD 2C 02 F6 | 	mov	local08, result1
078ec     FE 28 02 F6 | 	mov	local06, result2
078f0     54 00 90 FD | 	jmp	#LR__0678
078f4                 | LR__0672
078f4     E4 07 B0 FD | 	call	#_compile_fun_3p
078f8     FD 28 02 F6 | 	mov	local06, result1
078fc     48 00 90 FD | 	jmp	#LR__0678
07900                 | LR__0673
07900                 | ' return expr()
07900     F8 26 B0 FD | 	call	#_expr
07904     FD 28 02 F6 | 	mov	local06, result1
07908     3C 00 90 FD | 	jmp	#LR__0678
0790c                 | LR__0674
0790c     44 07 B0 FD | 	call	#_compile_fun_2p
07910     FD 28 02 F6 | 	mov	local06, result1
07914     30 00 90 FD | 	jmp	#LR__0678
07918                 | LR__0675
07918     38 07 B0 FD | 	call	#_compile_fun_2p
0791c     FD 28 02 F6 | 	mov	local06, result1
07920     24 00 90 FD | 	jmp	#LR__0678
07924                 | LR__0676
07924     2C 07 B0 FD | 	call	#_compile_fun_2p
07928     FD 28 02 F6 | 	mov	local06, result1
0792c     18 00 90 FD | 	jmp	#LR__0678
07930                 | LR__0677
07930     CC 0A B0 FD | 	call	#_compile_array_assign
07934     FD 28 02 F6 | 	mov	local06, result1
07938     0E 28 0E F2 | 	cmp	local06, #14 wz
0793c     C4 00 90 5D |  if_ne	jmp	#LR__0679
07940                 | ' return 23
07940     17 28 06 F6 | 	mov	local06, #23
07944     BC 00 90 FD | 	jmp	#LR__0679
07948                 | ' return 23
07948                 | LR__0678
07948     15 23 02 F6 | 	mov	local03, local07
0794c     16 1F 02 F6 | 	mov	local01, local08
07950     0F 2F 02 F6 | 	mov	local09, local01
07954     10 31 02 F6 | 	mov	local10, local02
07958     11 2B 02 F6 | 	mov	local07, local03
0795c     4A 00 00 FF 
07960     7C E4 05 F1 | 	add	objptr, ##38012
07964     F2 1E 02 FB | 	rdlong	local01, objptr
07968     0F 2D 02 F6 | 	mov	local08, local01
0796c     01 2C 66 F0 | 	shl	local08, #1
07970     0F 2D 02 F1 | 	add	local08, local01
07974     02 2C 66 F0 | 	shl	local08, #2
07978     03 00 00 FF 
0797c     00 E4 85 F1 | 	sub	objptr, ##1536
07980     F2 2C 02 F1 | 	add	local08, objptr
07984     16 2F 62 FC | 	wrlong	local09, local08
07988     03 00 00 FF 
0798c     00 E4 05 F1 | 	add	objptr, ##1536
07990     F2 1E 02 FB | 	rdlong	local01, objptr
07994     0F 2F 02 F6 | 	mov	local09, local01
07998     01 2E 66 F0 | 	shl	local09, #1
0799c     0F 2F 02 F1 | 	add	local09, local01
079a0     02 2E 66 F0 | 	shl	local09, #2
079a4     03 00 00 FF 
079a8     00 E4 85 F1 | 	sub	objptr, ##1536
079ac     F2 2E 02 F1 | 	add	local09, objptr
079b0     04 2E 06 F1 | 	add	local09, #4
079b4     17 31 62 FC | 	wrlong	local10, local09
079b8     03 00 00 FF 
079bc     00 E4 05 F1 | 	add	objptr, ##1536
079c0     F2 1E 02 FB | 	rdlong	local01, objptr
079c4     0F 31 02 F6 | 	mov	local10, local01
079c8     01 30 66 F0 | 	shl	local10, #1
079cc     0F 31 02 F1 | 	add	local10, local01
079d0     02 30 66 F0 | 	shl	local10, #2
079d4     03 00 00 FF 
079d8     00 E4 85 F1 | 	sub	objptr, ##1536
079dc     F2 30 02 F1 | 	add	local10, objptr
079e0     08 30 06 F1 | 	add	local10, #8
079e4     18 2B 62 FC | 	wrlong	local07, local10
079e8     03 00 00 FF 
079ec     00 E4 05 F1 | 	add	objptr, ##1536
079f0     F2 2E 02 FB | 	rdlong	local09, objptr
079f4     01 2E 06 F1 | 	add	local09, #1
079f8     F2 2E 62 FC | 	wrlong	local09, objptr
079fc     4A 00 00 FF 
07a00     7C E4 85 F1 | 	sub	objptr, ##38012
07a04                 | LR__0679
07a04                 | ' 
07a04                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07a04                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07a04     03 24 0E F2 | 	cmp	local04, #3 wz
07a08     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07a0c     38 00 90 5D |  if_ne	jmp	#LR__0680
07a10     4A 00 00 FF 
07a14     7C E4 05 F1 | 	add	objptr, ##38012
07a18     F2 30 02 FB | 	rdlong	local10, objptr
07a1c     18 1F 02 F6 | 	mov	local01, local10
07a20     01 1E 66 F0 | 	shl	local01, #1
07a24     18 1F 02 F1 | 	add	local01, local10
07a28     02 1E 66 F0 | 	shl	local01, #2
07a2c     03 00 00 FF 
07a30     00 E4 85 F1 | 	sub	objptr, ##1536
07a34     F2 1E 02 F1 | 	add	local01, objptr
07a38     08 1E 06 F1 | 	add	local01, #8
07a3c     0F FD 6B FC | 	wrlong	#510, local01
07a40     47 00 00 FF 
07a44     7C E4 85 F1 | 	sub	objptr, ##36476
07a48                 | LR__0680
07a48                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07a48                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07a48     4A 00 00 FF 
07a4c     7C E4 05 F1 | 	add	objptr, ##38012
07a50     F2 1E 02 FB | 	rdlong	local01, objptr
07a54     4A 00 00 FF 
07a58     7C E4 85 F1 | 	sub	objptr, ##38012
07a5c     97 58 48 FB | 	callpa	#(@LR__0683-@LR__0681)>>2,fcache_load_ptr_
07a60                 | LR__0681
07a60     0F 31 02 F6 | 	mov	local10, local01
07a64     01 30 66 F0 | 	shl	local10, #1
07a68     0F 31 02 F1 | 	add	local10, local01
07a6c     02 30 66 F0 | 	shl	local10, #2
07a70     47 00 00 FF 
07a74     7C E4 05 F1 | 	add	objptr, ##36476
07a78     F2 30 02 F1 | 	add	local10, objptr
07a7c     08 30 06 F1 | 	add	local10, #8
07a80     18 31 02 FB | 	rdlong	local10, local10
07a84     9B 30 0E F2 | 	cmp	local10, #155 wz
07a88     47 00 00 FF 
07a8c     7C E4 85 F1 | 	sub	objptr, ##36476
07a90     70 00 90 5D |  if_ne	jmp	#LR__0682
07a94     0F 2F 02 F6 | 	mov	local09, local01
07a98     01 2E 86 F1 | 	sub	local09, #1
07a9c     17 31 02 F6 | 	mov	local10, local09
07aa0     01 30 66 F0 | 	shl	local10, #1
07aa4     17 31 02 F1 | 	add	local10, local09
07aa8     02 30 66 F0 | 	shl	local10, #2
07aac     47 00 00 FF 
07ab0     7C E4 05 F1 | 	add	objptr, ##36476
07ab4     F2 30 02 F1 | 	add	local10, objptr
07ab8     08 30 06 F1 | 	add	local10, #8
07abc     18 31 02 FB | 	rdlong	local10, local10
07ac0     11 30 0E F2 | 	cmp	local10, #17 wz
07ac4     47 00 00 FF 
07ac8     7C E4 85 F1 | 	sub	objptr, ##36476
07acc     34 00 90 5D |  if_ne	jmp	#LR__0682
07ad0     0F 2F 02 F6 | 	mov	local09, local01
07ad4     01 2E 86 F1 | 	sub	local09, #1
07ad8     17 31 02 F6 | 	mov	local10, local09
07adc     01 30 66 F0 | 	shl	local10, #1
07ae0     17 31 02 F1 | 	add	local10, local09
07ae4     02 30 66 F0 | 	shl	local10, #2
07ae8     47 00 00 FF 
07aec     7C E4 05 F1 | 	add	objptr, ##36476
07af0     F2 30 02 F1 | 	add	local10, objptr
07af4     08 30 06 F1 | 	add	local10, #8
07af8     18 25 68 FC | 	wrlong	#18, local10
07afc     47 00 00 FF 
07b00     7C E4 85 F1 | 	sub	objptr, ##36476
07b04                 | LR__0682
07b04     01 1E 86 F1 | 	sub	local01, #1
07b08     01 1E 56 F2 | 	cmps	local01, #1 wc
07b0c     50 FF 9F 3D |  if_ae	jmp	#LR__0681
07b10                 | LR__0683
07b10                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07b10                 | ' return err
07b10     14 FB 01 F6 | 	mov	result1, local06
07b14     A7 F0 03 F6 | 	mov	ptra, fp
07b18     B2 00 A0 FD | 	call	#popregs_
07b1c                 | _compile_immediate_ret
07b1c     2D 00 64 FD | 	ret
07b20                 | 
07b20                 | ' 
07b20                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07b20                 | ' 
07b20                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07b20                 | _compile_immediate_assign
07b20     0C 4A 05 F6 | 	mov	COUNT_, #12
07b24     A8 00 A0 FD | 	call	#pushregs_
07b28     09 25 02 F6 | 	mov	local04, arg01
07b2c     FF 22 06 F6 | 	mov	local03, #255
07b30     01 26 66 F6 | 	neg	local05, #1
07b34     00 28 06 F6 | 	mov	local06, #0
07b38                 | ' 
07b38                 | ' t1.result_type=result_error : t1.result.uresult=0
07b38                 | ' i=-1: j=-1 : err=0
07b38                 | ' 
07b38                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07b38     02 24 0E F2 | 	cmp	local04, #2 wz
07b3c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07b40     35 00 00 AF 
07b44     0C E4 05 A1 |  if_e	add	objptr, ##27148
07b48     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07b4c     02 00 00 AF 
07b50     38 E4 05 A1 |  if_e	add	objptr, ##1080
07b54     F2 04 68 AC |  if_e	wrlong	#2, objptr
07b58     37 00 00 AF 
07b5c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07b60                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07b60     04 24 0E F2 | 	cmp	local04, #4 wz
07b64     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07b68     2C 00 90 5D |  if_ne	jmp	#LR__0690
07b6c     35 00 00 FF 
07b70     14 E4 05 F1 | 	add	objptr, ##27156
07b74     F2 2A 02 FB | 	rdlong	local07, objptr
07b78     02 00 00 FF 
07b7c     30 E4 05 F1 | 	add	objptr, ##1072
07b80     F2 06 68 FC | 	wrlong	#3, objptr
07b84     13 00 00 FF 
07b88     38 E4 05 F1 | 	add	objptr, ##9784
07b8c     F2 04 68 FC | 	wrlong	#2, objptr
07b90     4A 00 00 FF 
07b94     7C E4 85 F1 | 	sub	objptr, ##38012
07b98                 | LR__0690
07b98                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07b98     05 24 0E F2 | 	cmp	local04, #5 wz
07b9c     3C 00 90 5D |  if_ne	jmp	#LR__0691
07ba0     37 00 00 FF 
07ba4     44 E4 05 F1 | 	add	objptr, ##28228
07ba8     F2 FA 01 FB | 	rdlong	result1, objptr
07bac     FD 2A 02 F6 | 	mov	local07, result1
07bb0     03 2A 66 F0 | 	shl	local07, #3
07bb4     02 00 00 FF 
07bb8     38 E4 85 F1 | 	sub	objptr, ##1080
07bbc     F2 2A 02 F1 | 	add	local07, objptr
07bc0     15 2B 02 FB | 	rdlong	local07, local07
07bc4     02 FA 05 F1 | 	add	result1, #2
07bc8     02 00 00 FF 
07bcc     38 E4 05 F1 | 	add	objptr, ##1080
07bd0     F2 FA 61 FC | 	wrlong	result1, objptr
07bd4     37 00 00 FF 
07bd8     44 E4 85 F1 | 	sub	objptr, ##28228
07bdc                 | LR__0691
07bdc     15 13 02 F6 | 	mov	arg01, local07
07be0     01 14 06 F6 | 	mov	arg02, #1
07be4     E0 BA B1 FD | 	call	#__system__Right_S
07be8     FD 2C 02 F6 | 	mov	local08, result1
07bec     0C 24 B0 FD | 	call	#_expr
07bf0                 | ' 
07bf0                 | ' suffix2$=right$(varname2$,1)
07bf0                 | ' expr()
07bf0                 | ' if varnum>0 then					' try to find a variable
07bf0     35 00 00 FF 
07bf4     08 E4 05 F1 | 	add	objptr, ##27144
07bf8     F2 2E 02 FB | 	rdlong	local09, objptr
07bfc     35 00 00 FF 
07c00     08 E4 85 F1 | 	sub	objptr, ##27144
07c04     01 2E 56 F2 | 	cmps	local09, #1 wc
07c08     58 00 90 CD |  if_b	jmp	#LR__0694
07c0c                 | '   for i=0 to varnum-1
07c0c     00 30 06 F6 | 	mov	local10, #0
07c10     35 00 00 FF 
07c14     08 E4 05 F1 | 	add	objptr, ##27144
07c18     F2 32 02 FB | 	rdlong	local11, objptr
07c1c     35 00 00 FF 
07c20     08 E4 85 F1 | 	sub	objptr, ##27144
07c24                 | LR__0692
07c24     19 31 52 F2 | 	cmps	local10, local11 wc
07c28     38 00 90 3D |  if_ae	jmp	#LR__0693
07c2c                 | '     if variables(i).name=varname2$ then j=i : exit
07c2c     18 2F 02 F6 | 	mov	local09, local10
07c30     04 2E 66 F0 | 	shl	local09, #4
07c34     14 00 00 FF 
07c38     F8 E5 05 F1 | 	add	objptr, ##10744
07c3c     F2 2E 02 F1 | 	add	local09, objptr
07c40     17 13 02 FB | 	rdlong	arg01, local09
07c44     15 15 02 F6 | 	mov	arg02, local07
07c48     14 00 00 FF 
07c4c     F8 E5 85 F1 | 	sub	objptr, ##10744
07c50     98 99 B1 FD | 	call	#__system___string_cmp
07c54     00 FA 0D F2 | 	cmp	result1, #0 wz
07c58     18 27 02 A6 |  if_e	mov	local05, local10
07c5c     01 30 06 51 |  if_ne	add	local10, #1
07c60     C0 FF 9F 5D |  if_ne	jmp	#LR__0692
07c64                 | LR__0693
07c64                 | LR__0694
07c64                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07c64     FF FF 7F FF 
07c68     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07c6c     60 00 90 5D |  if_ne	jmp	#LR__0695
07c70     35 00 00 FF 
07c74     08 E4 05 F1 | 	add	objptr, ##27144
07c78     F2 2E 02 FB | 	rdlong	local09, objptr
07c7c     35 00 00 FF 
07c80     08 E4 85 F1 | 	sub	objptr, ##27144
07c84     02 00 00 FF 
07c88     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07c8c     40 00 90 3D |  if_ae	jmp	#LR__0695
07c90     35 00 00 FF 
07c94     08 E4 05 F1 | 	add	objptr, ##27144
07c98     F2 32 02 FB | 	rdlong	local11, objptr
07c9c     04 32 66 F0 | 	shl	local11, #4
07ca0     20 00 00 FF 
07ca4     10 E4 85 F1 | 	sub	objptr, ##16400
07ca8     F2 32 02 F1 | 	add	local11, objptr
07cac     19 2B 62 FC | 	wrlong	local07, local11
07cb0     20 00 00 FF 
07cb4     10 E4 05 F1 | 	add	objptr, ##16400
07cb8     F2 2E 02 FB | 	rdlong	local09, objptr
07cbc     17 27 02 F6 | 	mov	local05, local09
07cc0     01 2E 06 F1 | 	add	local09, #1
07cc4     F2 2E 62 FC | 	wrlong	local09, objptr
07cc8     35 00 00 FF 
07ccc     08 E4 85 F1 | 	sub	objptr, ##27144
07cd0                 | LR__0695
07cd0                 | ' if varnum>=maxvars then
07cd0     35 00 00 FF 
07cd4     08 E4 05 F1 | 	add	objptr, ##27144
07cd8     F2 2E 02 FB | 	rdlong	local09, objptr
07cdc     35 00 00 FF 
07ce0     08 E4 85 F1 | 	sub	objptr, ##27144
07ce4     02 00 00 FF 
07ce8     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07cec     2D 28 06 36 |  if_ae	mov	local06, #45
07cf0     C8 01 90 3D |  if_ae	jmp	#LR__0700
07cf4     13 1F 02 F6 | 	mov	local01, local05
07cf8     17 22 06 F6 | 	mov	local03, #23
07cfc     0F 2F 02 F6 | 	mov	local09, local01
07d00     10 35 02 F6 | 	mov	local12, local02
07d04     11 1F 02 F6 | 	mov	local01, local03
07d08     4A 00 00 FF 
07d0c     7C E4 05 F1 | 	add	objptr, ##38012
07d10     F2 32 02 FB | 	rdlong	local11, objptr
07d14     19 31 02 F6 | 	mov	local10, local11
07d18     01 30 66 F0 | 	shl	local10, #1
07d1c     19 31 02 F1 | 	add	local10, local11
07d20     02 30 66 F0 | 	shl	local10, #2
07d24     03 00 00 FF 
07d28     00 E4 85 F1 | 	sub	objptr, ##1536
07d2c     F2 30 02 F1 | 	add	local10, objptr
07d30     18 2F 62 FC | 	wrlong	local09, local10
07d34     03 00 00 FF 
07d38     00 E4 05 F1 | 	add	objptr, ##1536
07d3c     F2 2E 02 FB | 	rdlong	local09, objptr
07d40     17 33 02 F6 | 	mov	local11, local09
07d44     01 32 66 F0 | 	shl	local11, #1
07d48     17 33 02 F1 | 	add	local11, local09
07d4c     02 32 66 F0 | 	shl	local11, #2
07d50     03 00 00 FF 
07d54     00 E4 85 F1 | 	sub	objptr, ##1536
07d58     F2 32 02 F1 | 	add	local11, objptr
07d5c     04 32 06 F1 | 	add	local11, #4
07d60     19 35 62 FC | 	wrlong	local12, local11
07d64     03 00 00 FF 
07d68     00 E4 05 F1 | 	add	objptr, ##1536
07d6c     F2 2E 02 FB | 	rdlong	local09, objptr
07d70     17 35 02 F6 | 	mov	local12, local09
07d74     01 34 66 F0 | 	shl	local12, #1
07d78     17 35 02 F1 | 	add	local12, local09
07d7c     02 34 66 F0 | 	shl	local12, #2
07d80     03 00 00 FF 
07d84     00 E4 85 F1 | 	sub	objptr, ##1536
07d88     F2 34 02 F1 | 	add	local12, objptr
07d8c     08 34 06 F1 | 	add	local12, #8
07d90     1A 1F 62 FC | 	wrlong	local01, local12
07d94     03 00 00 FF 
07d98     00 E4 05 F1 | 	add	objptr, ##1536
07d9c     F2 2E 02 FB | 	rdlong	local09, objptr
07da0     01 2E 06 F1 | 	add	local09, #1
07da4     F2 2E 62 FC | 	wrlong	local09, objptr
07da8     4A 00 00 FF 
07dac     7C E4 85 F1 | 	sub	objptr, ##38012
07db0                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07db0                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07db0                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07db0     03 24 0E F2 | 	cmp	local04, #3 wz
07db4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07db8     38 00 90 5D |  if_ne	jmp	#LR__0696
07dbc     4A 00 00 FF 
07dc0     7C E4 05 F1 | 	add	objptr, ##38012
07dc4     F2 34 02 FB | 	rdlong	local12, objptr
07dc8     1A 1F 02 F6 | 	mov	local01, local12
07dcc     01 1E 66 F0 | 	shl	local01, #1
07dd0     1A 1F 02 F1 | 	add	local01, local12
07dd4     02 1E 66 F0 | 	shl	local01, #2
07dd8     03 00 00 FF 
07ddc     00 E4 85 F1 | 	sub	objptr, ##1536
07de0     F2 1E 02 F1 | 	add	local01, objptr
07de4     08 1E 06 F1 | 	add	local01, #8
07de8     0F FD 6B FC | 	wrlong	#510, local01
07dec     47 00 00 FF 
07df0     7C E4 85 F1 | 	sub	objptr, ##36476
07df4                 | LR__0696
07df4                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07df4     4A 00 00 FF 
07df8     7C E4 05 F1 | 	add	objptr, ##38012
07dfc     F2 30 02 FB | 	rdlong	local10, objptr
07e00     4A 00 00 FF 
07e04     7C E4 85 F1 | 	sub	objptr, ##38012
07e08     97 58 48 FB | 	callpa	#(@LR__0699-@LR__0697)>>2,fcache_load_ptr_
07e0c                 | LR__0697
07e0c     18 35 02 F6 | 	mov	local12, local10
07e10     01 34 66 F0 | 	shl	local12, #1
07e14     18 35 02 F1 | 	add	local12, local10
07e18     02 34 66 F0 | 	shl	local12, #2
07e1c     47 00 00 FF 
07e20     7C E4 05 F1 | 	add	objptr, ##36476
07e24     F2 34 02 F1 | 	add	local12, objptr
07e28     08 34 06 F1 | 	add	local12, #8
07e2c     1A 35 02 FB | 	rdlong	local12, local12
07e30     9B 34 0E F2 | 	cmp	local12, #155 wz
07e34     47 00 00 FF 
07e38     7C E4 85 F1 | 	sub	objptr, ##36476
07e3c     70 00 90 5D |  if_ne	jmp	#LR__0698
07e40     18 35 02 F6 | 	mov	local12, local10
07e44     01 34 86 F1 | 	sub	local12, #1
07e48     1A 1F 02 F6 | 	mov	local01, local12
07e4c     01 1E 66 F0 | 	shl	local01, #1
07e50     1A 1F 02 F1 | 	add	local01, local12
07e54     02 1E 66 F0 | 	shl	local01, #2
07e58     47 00 00 FF 
07e5c     7C E4 05 F1 | 	add	objptr, ##36476
07e60     F2 1E 02 F1 | 	add	local01, objptr
07e64     08 1E 06 F1 | 	add	local01, #8
07e68     0F 1F 02 FB | 	rdlong	local01, local01
07e6c     11 1E 0E F2 | 	cmp	local01, #17 wz
07e70     47 00 00 FF 
07e74     7C E4 85 F1 | 	sub	objptr, ##36476
07e78     34 00 90 5D |  if_ne	jmp	#LR__0698
07e7c     18 35 02 F6 | 	mov	local12, local10
07e80     01 34 86 F1 | 	sub	local12, #1
07e84     1A 1F 02 F6 | 	mov	local01, local12
07e88     01 1E 66 F0 | 	shl	local01, #1
07e8c     1A 1F 02 F1 | 	add	local01, local12
07e90     02 1E 66 F0 | 	shl	local01, #2
07e94     47 00 00 FF 
07e98     7C E4 05 F1 | 	add	objptr, ##36476
07e9c     F2 1E 02 F1 | 	add	local01, objptr
07ea0     08 1E 06 F1 | 	add	local01, #8
07ea4     0F 25 68 FC | 	wrlong	#18, local01
07ea8     47 00 00 FF 
07eac     7C E4 85 F1 | 	sub	objptr, ##36476
07eb0                 | LR__0698
07eb0     01 30 86 F1 | 	sub	local10, #1
07eb4     01 30 56 F2 | 	cmps	local10, #1 wc
07eb8     50 FF 9F 3D |  if_ae	jmp	#LR__0697
07ebc                 | LR__0699
07ebc                 | LR__0700
07ebc                 | ' return err
07ebc     14 FB 01 F6 | 	mov	result1, local06
07ec0     A7 F0 03 F6 | 	mov	ptra, fp
07ec4     B2 00 A0 FD | 	call	#popregs_
07ec8                 | _compile_immediate_assign_ret
07ec8     2D 00 64 FD | 	ret
07ecc                 | 
07ecc                 | ' 
07ecc                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07ecc                 | ' 
07ecc                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07ecc                 | _compile
07ecc     03 4A 05 F6 | 	mov	COUNT_, #3
07ed0     A8 00 A0 FD | 	call	#pushregs_
07ed4     09 1F 02 F6 | 	mov	local01, arg01
07ed8     0B 21 02 F6 | 	mov	local02, arg03
07edc     47 00 00 FF 
07ee0     7C E4 05 F1 | 	add	objptr, ##36476
07ee4     F2 1E 62 FC | 	wrlong	local01, objptr
07ee8     04 E4 05 F1 | 	add	objptr, #4
07eec     F2 14 62 FC | 	wrlong	arg02, objptr
07ef0     47 00 00 FF 
07ef4     80 E4 85 F1 | 	sub	objptr, ##36480
07ef8     10 13 02 F6 | 	mov	arg01, local02
07efc     01 12 06 F1 | 	add	arg01, #1
07f00     0F 15 02 F6 | 	mov	arg02, local01
07f04     D4 F2 BF FD | 	call	#_compile_immediate
07f08     FD 22 0A F6 | 	mov	local03, result1 wz
07f0c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07f0c                 | ' ucompiledline(0)=alinemajor
07f0c                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07f0c                 | ' 
07f0c                 | ' ' cont: 
07f0c                 | ' ' 0 - this is the first part of the line that will continue
07f0c                 | ' ' 1 - this is the continuation of the line
07f0c                 | ' ' 2 - this is the last continued line
07f0c                 | ' ' 3 - this is the one and only part
07f0c                 | ' 
07f0c                 | ' err=compile_immediate(cont+1,alinemajor) 
07f0c                 | ' if err=0 andalso alinemajor>0 then
07f0c     74 00 90 5D |  if_ne	jmp	#LR__0715
07f10     01 1E 16 F2 | 	cmp	local01, #1 wc
07f14     6C 00 90 CD |  if_b	jmp	#LR__0715
07f18                 | '   if cont=3 orelse cont=2 then 
07f18     03 20 0E F2 | 	cmp	local02, #3 wz
07f1c     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07f20     60 00 90 5D |  if_ne	jmp	#LR__0714
07f24                 | '     if alinemajor >lastline then 
07f24     4A 00 00 FF 
07f28     8C E4 05 F1 | 	add	objptr, ##38028
07f2c     F2 14 02 FB | 	rdlong	arg02, objptr
07f30     4A 00 00 FF 
07f34     8C E4 85 F1 | 	sub	objptr, ##38028
07f38     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07f3c     0C 00 90 ED |  if_be	jmp	#LR__0710
07f40     0F 13 02 F6 | 	mov	arg01, local01
07f44     CC F1 BF FD | 	call	#_add_line_at_end
07f48     38 00 90 FD | 	jmp	#LR__0713
07f4c                 | LR__0710
07f4c     0F 13 02 F6 | 	mov	arg01, local01
07f50     90 EB BF FD | 	call	#_deleteline
07f54                 | '       deleteline(alinemajor)  
07f54                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07f54     4A 00 00 FF 
07f58     8C E4 05 F1 | 	add	objptr, ##38028
07f5c     F2 14 02 FB | 	rdlong	arg02, objptr
07f60     4A 00 00 FF 
07f64     8C E4 85 F1 | 	sub	objptr, ##38028
07f68     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07f6c     0C 00 90 ED |  if_be	jmp	#LR__0711
07f70     0F 13 02 F6 | 	mov	arg01, local01
07f74     9C F1 BF FD | 	call	#_add_line_at_end
07f78     08 00 90 FD | 	jmp	#LR__0712
07f7c                 | LR__0711
07f7c     0F 13 02 F6 | 	mov	arg01, local01
07f80     74 EF BF FD | 	call	#_insertline
07f84                 | LR__0712
07f84                 | LR__0713
07f84                 | LR__0714
07f84                 | LR__0715
07f84                 | ' return err
07f84     11 FB 01 F6 | 	mov	result1, local03
07f88     A7 F0 03 F6 | 	mov	ptra, fp
07f8c     B2 00 A0 FD | 	call	#popregs_
07f90                 | _compile_ret
07f90     2D 00 64 FD | 	ret
07f94                 | 
07f94                 | ' 
07f94                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07f94                 | ' 
07f94                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07f94                 | _compile_assign
07f94     03 4A 05 F6 | 	mov	COUNT_, #3
07f98     A8 00 A0 FD | 	call	#pushregs_
07f9c     09 1F 02 F6 | 	mov	local01, arg01
07fa0     0B 21 02 F6 | 	mov	local02, arg03
07fa4     47 00 00 FF 
07fa8     7C E4 05 F1 | 	add	objptr, ##36476
07fac     F2 1E 62 FC | 	wrlong	local01, objptr
07fb0     04 E4 05 F1 | 	add	objptr, #4
07fb4     F2 14 62 FC | 	wrlong	arg02, objptr
07fb8     47 00 00 FF 
07fbc     80 E4 85 F1 | 	sub	objptr, ##36480
07fc0     10 13 02 F6 | 	mov	arg01, local02
07fc4     01 12 06 F1 | 	add	arg01, #1
07fc8     54 FB BF FD | 	call	#_compile_immediate_assign
07fcc     FD 22 02 F6 | 	mov	local03, result1
07fd0                 | ' 
07fd0                 | ' ucompiledline(0)=alinemajor
07fd0                 | ' ucompiledline(1)=alineminor
07fd0                 | ' 
07fd0                 | ' err=compile_immediate_assign(cont+1) 
07fd0                 | ' if alinemajor>0 then
07fd0     01 1E 16 F2 | 	cmp	local01, #1 wc
07fd4     6C 00 90 CD |  if_b	jmp	#LR__0725
07fd8                 | '   if cont=3 orelse cont=2 then 
07fd8     03 20 0E F2 | 	cmp	local02, #3 wz
07fdc     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07fe0     60 00 90 5D |  if_ne	jmp	#LR__0724
07fe4                 | '     if alinemajor >lastline then 
07fe4     4A 00 00 FF 
07fe8     8C E4 05 F1 | 	add	objptr, ##38028
07fec     F2 14 02 FB | 	rdlong	arg02, objptr
07ff0     4A 00 00 FF 
07ff4     8C E4 85 F1 | 	sub	objptr, ##38028
07ff8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ffc     0C 00 90 ED |  if_be	jmp	#LR__0720
08000     0F 13 02 F6 | 	mov	arg01, local01
08004     0C F1 BF FD | 	call	#_add_line_at_end
08008     38 00 90 FD | 	jmp	#LR__0723
0800c                 | LR__0720
0800c     0F 13 02 F6 | 	mov	arg01, local01
08010     D0 EA BF FD | 	call	#_deleteline
08014                 | '       deleteline(alinemajor)  
08014                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08014     4A 00 00 FF 
08018     8C E4 05 F1 | 	add	objptr, ##38028
0801c     F2 14 02 FB | 	rdlong	arg02, objptr
08020     4A 00 00 FF 
08024     8C E4 85 F1 | 	sub	objptr, ##38028
08028     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
0802c     0C 00 90 ED |  if_be	jmp	#LR__0721
08030     0F 13 02 F6 | 	mov	arg01, local01
08034     DC F0 BF FD | 	call	#_add_line_at_end
08038     08 00 90 FD | 	jmp	#LR__0722
0803c                 | LR__0721
0803c     0F 13 02 F6 | 	mov	arg01, local01
08040     B4 EE BF FD | 	call	#_insertline
08044                 | LR__0722
08044                 | LR__0723
08044                 | LR__0724
08044                 | LR__0725
08044                 | ' return err
08044     11 FB 01 F6 | 	mov	result1, local03
08048     A7 F0 03 F6 | 	mov	ptra, fp
0804c     B2 00 A0 FD | 	call	#popregs_
08050                 | _compile_assign_ret
08050     2D 00 64 FD | 	ret
08054                 | 
08054                 | ' 
08054                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08054                 | ' 
08054                 | ' function compile_fun_2p() as ulong
08054                 | _compile_fun_2p
08054     01 4A 05 F6 | 	mov	COUNT_, #1
08058     A8 00 A0 FD | 	call	#pushregs_
0805c     9C 1F B0 FD | 	call	#_expr
08060     FD 1E 02 F6 | 	mov	local01, result1
08064                 | ' err=expr() : if err>0 then return err
08064     01 1E 16 F2 | 	cmp	local01, #1 wc
08068     0F FB 01 36 |  if_ae	mov	result1, local01
0806c     60 00 90 3D |  if_ae	jmp	#LR__0730
08070                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08070     37 00 00 FF 
08074     44 E4 05 F1 | 	add	objptr, ##28228
08078     F2 1E 02 FB | 	rdlong	local01, objptr
0807c     03 1E 66 F0 | 	shl	local01, #3
08080     02 00 00 FF 
08084     38 E4 85 F1 | 	sub	objptr, ##1080
08088     F2 1E 02 F1 | 	add	local01, objptr
0808c     04 1E 06 F1 | 	add	local01, #4
08090     0F 1F 02 FB | 	rdlong	local01, local01
08094     11 1E 0E F2 | 	cmp	local01, #17 wz
08098     35 00 00 FF 
0809c     0C E4 85 F1 | 	sub	objptr, ##27148
080a0     15 FA 05 56 |  if_ne	mov	result1, #21
080a4     28 00 90 5D |  if_ne	jmp	#LR__0730
080a8     37 00 00 FF 
080ac     44 E4 05 F1 | 	add	objptr, ##28228
080b0     F2 1E 02 FB | 	rdlong	local01, objptr
080b4     01 1E 06 F1 | 	add	local01, #1
080b8     F2 1E 62 FC | 	wrlong	local01, objptr
080bc     37 00 00 FF 
080c0     44 E4 85 F1 | 	sub	objptr, ##28228
080c4     34 1F B0 FD | 	call	#_expr
080c8                 | ' err=expr() : if err>0 then return err
080c8     01 FA 15 F2 | 	cmp	result1, #1 wc
080cc                 | ' return 0
080cc     00 FA 05 C6 |  if_b	mov	result1, #0
080d0                 | LR__0730
080d0     A7 F0 03 F6 | 	mov	ptra, fp
080d4     B2 00 A0 FD | 	call	#popregs_
080d8                 | _compile_fun_2p_ret
080d8     2D 00 64 FD | 	ret
080dc                 | 
080dc                 | ' 
080dc                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
080dc                 | ' 
080dc                 | ' function compile_fun_3p() as ulong
080dc                 | _compile_fun_3p
080dc     01 4A 05 F6 | 	mov	COUNT_, #1
080e0     A8 00 A0 FD | 	call	#pushregs_
080e4     14 1F B0 FD | 	call	#_expr
080e8     FD 1E 02 F6 | 	mov	local01, result1
080ec                 | ' err=expr() : if err>0 then return err
080ec     01 1E 16 F2 | 	cmp	local01, #1 wc
080f0     0F FB 01 36 |  if_ae	mov	result1, local01
080f4     C8 00 90 3D |  if_ae	jmp	#LR__0740
080f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
080f8     37 00 00 FF 
080fc     44 E4 05 F1 | 	add	objptr, ##28228
08100     F2 1E 02 FB | 	rdlong	local01, objptr
08104     03 1E 66 F0 | 	shl	local01, #3
08108     02 00 00 FF 
0810c     38 E4 85 F1 | 	sub	objptr, ##1080
08110     F2 1E 02 F1 | 	add	local01, objptr
08114     04 1E 06 F1 | 	add	local01, #4
08118     0F 1F 02 FB | 	rdlong	local01, local01
0811c     11 1E 0E F2 | 	cmp	local01, #17 wz
08120     35 00 00 FF 
08124     0C E4 85 F1 | 	sub	objptr, ##27148
08128     15 FA 05 56 |  if_ne	mov	result1, #21
0812c     90 00 90 5D |  if_ne	jmp	#LR__0740
08130     37 00 00 FF 
08134     44 E4 05 F1 | 	add	objptr, ##28228
08138     F2 1E 02 FB | 	rdlong	local01, objptr
0813c     01 1E 06 F1 | 	add	local01, #1
08140     F2 1E 62 FC | 	wrlong	local01, objptr
08144     37 00 00 FF 
08148     44 E4 85 F1 | 	sub	objptr, ##28228
0814c     AC 1E B0 FD | 	call	#_expr
08150     FD 1E 02 F6 | 	mov	local01, result1
08154                 | ' err=expr() : if err>0 then return err
08154     01 1E 16 F2 | 	cmp	local01, #1 wc
08158     0F FB 01 36 |  if_ae	mov	result1, local01
0815c     60 00 90 3D |  if_ae	jmp	#LR__0740
08160                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08160     37 00 00 FF 
08164     44 E4 05 F1 | 	add	objptr, ##28228
08168     F2 1E 02 FB | 	rdlong	local01, objptr
0816c     03 1E 66 F0 | 	shl	local01, #3
08170     02 00 00 FF 
08174     38 E4 85 F1 | 	sub	objptr, ##1080
08178     F2 1E 02 F1 | 	add	local01, objptr
0817c     04 1E 06 F1 | 	add	local01, #4
08180     0F 1F 02 FB | 	rdlong	local01, local01
08184     11 1E 0E F2 | 	cmp	local01, #17 wz
08188     35 00 00 FF 
0818c     0C E4 85 F1 | 	sub	objptr, ##27148
08190     15 FA 05 56 |  if_ne	mov	result1, #21
08194     28 00 90 5D |  if_ne	jmp	#LR__0740
08198     37 00 00 FF 
0819c     44 E4 05 F1 | 	add	objptr, ##28228
081a0     F2 1E 02 FB | 	rdlong	local01, objptr
081a4     01 1E 06 F1 | 	add	local01, #1
081a8     F2 1E 62 FC | 	wrlong	local01, objptr
081ac     37 00 00 FF 
081b0     44 E4 85 F1 | 	sub	objptr, ##28228
081b4     44 1E B0 FD | 	call	#_expr
081b8                 | ' err=expr() : if err>0 then return err
081b8     01 FA 15 F2 | 	cmp	result1, #1 wc
081bc                 | ' return 0
081bc     00 FA 05 C6 |  if_b	mov	result1, #0
081c0                 | LR__0740
081c0     A7 F0 03 F6 | 	mov	ptra, fp
081c4     B2 00 A0 FD | 	call	#popregs_
081c8                 | _compile_fun_3p_ret
081c8     2D 00 64 FD | 	ret
081cc                 | 
081cc                 | ' 
081cc                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
081cc                 | ' 
081cc                 | ' function compile_fun_4p() as ulong
081cc                 | _compile_fun_4p
081cc     01 4A 05 F6 | 	mov	COUNT_, #1
081d0     A8 00 A0 FD | 	call	#pushregs_
081d4     24 1E B0 FD | 	call	#_expr
081d8     FD 1E 02 F6 | 	mov	local01, result1
081dc                 | ' err=expr() : if err>0 then return err
081dc     01 1E 16 F2 | 	cmp	local01, #1 wc
081e0     0F FB 01 36 |  if_ae	mov	result1, local01
081e4     30 01 90 3D |  if_ae	jmp	#LR__0750
081e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
081e8     37 00 00 FF 
081ec     44 E4 05 F1 | 	add	objptr, ##28228
081f0     F2 1E 02 FB | 	rdlong	local01, objptr
081f4     03 1E 66 F0 | 	shl	local01, #3
081f8     02 00 00 FF 
081fc     38 E4 85 F1 | 	sub	objptr, ##1080
08200     F2 1E 02 F1 | 	add	local01, objptr
08204     04 1E 06 F1 | 	add	local01, #4
08208     0F 1F 02 FB | 	rdlong	local01, local01
0820c     11 1E 0E F2 | 	cmp	local01, #17 wz
08210     35 00 00 FF 
08214     0C E4 85 F1 | 	sub	objptr, ##27148
08218     15 FA 05 56 |  if_ne	mov	result1, #21
0821c     F8 00 90 5D |  if_ne	jmp	#LR__0750
08220     37 00 00 FF 
08224     44 E4 05 F1 | 	add	objptr, ##28228
08228     F2 1E 02 FB | 	rdlong	local01, objptr
0822c     01 1E 06 F1 | 	add	local01, #1
08230     F2 1E 62 FC | 	wrlong	local01, objptr
08234     37 00 00 FF 
08238     44 E4 85 F1 | 	sub	objptr, ##28228
0823c     BC 1D B0 FD | 	call	#_expr
08240     FD 1E 02 F6 | 	mov	local01, result1
08244                 | ' err=expr() : if err>0 then return err
08244     01 1E 16 F2 | 	cmp	local01, #1 wc
08248     0F FB 01 36 |  if_ae	mov	result1, local01
0824c     C8 00 90 3D |  if_ae	jmp	#LR__0750
08250                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08250     37 00 00 FF 
08254     44 E4 05 F1 | 	add	objptr, ##28228
08258     F2 1E 02 FB | 	rdlong	local01, objptr
0825c     03 1E 66 F0 | 	shl	local01, #3
08260     02 00 00 FF 
08264     38 E4 85 F1 | 	sub	objptr, ##1080
08268     F2 1E 02 F1 | 	add	local01, objptr
0826c     04 1E 06 F1 | 	add	local01, #4
08270     0F 1F 02 FB | 	rdlong	local01, local01
08274     11 1E 0E F2 | 	cmp	local01, #17 wz
08278     35 00 00 FF 
0827c     0C E4 85 F1 | 	sub	objptr, ##27148
08280     15 FA 05 56 |  if_ne	mov	result1, #21
08284     90 00 90 5D |  if_ne	jmp	#LR__0750
08288     37 00 00 FF 
0828c     44 E4 05 F1 | 	add	objptr, ##28228
08290     F2 1E 02 FB | 	rdlong	local01, objptr
08294     01 1E 06 F1 | 	add	local01, #1
08298     F2 1E 62 FC | 	wrlong	local01, objptr
0829c     37 00 00 FF 
082a0     44 E4 85 F1 | 	sub	objptr, ##28228
082a4     54 1D B0 FD | 	call	#_expr
082a8     FD 1E 02 F6 | 	mov	local01, result1
082ac                 | ' err=expr() : if err>0 then return err
082ac     01 1E 16 F2 | 	cmp	local01, #1 wc
082b0     0F FB 01 36 |  if_ae	mov	result1, local01
082b4     60 00 90 3D |  if_ae	jmp	#LR__0750
082b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
082b8     37 00 00 FF 
082bc     44 E4 05 F1 | 	add	objptr, ##28228
082c0     F2 1E 02 FB | 	rdlong	local01, objptr
082c4     03 1E 66 F0 | 	shl	local01, #3
082c8     02 00 00 FF 
082cc     38 E4 85 F1 | 	sub	objptr, ##1080
082d0     F2 1E 02 F1 | 	add	local01, objptr
082d4     04 1E 06 F1 | 	add	local01, #4
082d8     0F 1F 02 FB | 	rdlong	local01, local01
082dc     11 1E 0E F2 | 	cmp	local01, #17 wz
082e0     35 00 00 FF 
082e4     0C E4 85 F1 | 	sub	objptr, ##27148
082e8     15 FA 05 56 |  if_ne	mov	result1, #21
082ec     28 00 90 5D |  if_ne	jmp	#LR__0750
082f0     37 00 00 FF 
082f4     44 E4 05 F1 | 	add	objptr, ##28228
082f8     F2 1E 02 FB | 	rdlong	local01, objptr
082fc     01 1E 06 F1 | 	add	local01, #1
08300     F2 1E 62 FC | 	wrlong	local01, objptr
08304     37 00 00 FF 
08308     44 E4 85 F1 | 	sub	objptr, ##28228
0830c     EC 1C B0 FD | 	call	#_expr
08310                 | ' err=expr() : if err>0 then return err
08310     01 FA 15 F2 | 	cmp	result1, #1 wc
08314                 | ' return 0
08314     00 FA 05 C6 |  if_b	mov	result1, #0
08318                 | LR__0750
08318     A7 F0 03 F6 | 	mov	ptra, fp
0831c     B2 00 A0 FD | 	call	#popregs_
08320                 | _compile_fun_4p_ret
08320     2D 00 64 FD | 	ret
08324                 | 
08324                 | ' 
08324                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08324                 | ' 
08324                 | ' function compile_fun_varp() as ulong,ulong 
08324                 | _compile_fun_varp
08324     03 4A 05 F6 | 	mov	COUNT_, #3
08328     A8 00 A0 FD | 	call	#pushregs_
0832c     00 1E 06 F6 | 	mov	local01, #0
08330                 | ' 
08330                 | ' i=0 : err=0
08330                 | ' if lparts(ct).token<>token_end then
08330     37 00 00 FF 
08334     44 E4 05 F1 | 	add	objptr, ##28228
08338     F2 20 02 FB | 	rdlong	local02, objptr
0833c     03 20 66 F0 | 	shl	local02, #3
08340     02 00 00 FF 
08344     38 E4 85 F1 | 	sub	objptr, ##1080
08348     F2 20 02 F1 | 	add	local02, objptr
0834c     04 20 06 F1 | 	add	local02, #4
08350     10 21 02 FB | 	rdlong	local02, local02
08354     FE 21 0E F2 | 	cmp	local02, #510 wz
08358     35 00 00 FF 
0835c     0C E4 85 F1 | 	sub	objptr, ##27148
08360     88 00 90 AD |  if_e	jmp	#LR__0761
08364                 | '   do
08364                 | LR__0760
08364     94 1C B0 FD | 	call	#_expr
08368     01 1E 06 F1 | 	add	local01, #1
0836c                 | '     expr()
0836c                 | '     i+=1
0836c                 | '     if lparts(ct).token=token_comma then ct+=1
0836c     37 00 00 FF 
08370     44 E4 05 F1 | 	add	objptr, ##28228
08374     F2 20 02 FB | 	rdlong	local02, objptr
08378     03 20 66 F0 | 	shl	local02, #3
0837c     02 00 00 FF 
08380     38 E4 85 F1 | 	sub	objptr, ##1080
08384     F2 20 02 F1 | 	add	local02, objptr
08388     04 20 06 F1 | 	add	local02, #4
0838c     10 21 02 FB | 	rdlong	local02, local02
08390     11 20 0E F2 | 	cmp	local02, #17 wz
08394     35 00 00 FF 
08398     0C E4 85 F1 | 	sub	objptr, ##27148
0839c     37 00 00 AF 
083a0     44 E4 05 A1 |  if_e	add	objptr, ##28228
083a4     F2 22 02 AB |  if_e	rdlong	local03, objptr
083a8     01 22 06 A1 |  if_e	add	local03, #1
083ac     F2 22 62 AC |  if_e	wrlong	local03, objptr
083b0     37 00 00 AF 
083b4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
083b8                 | '     if lparts(ct).token=token_end then exit loop
083b8     37 00 00 FF 
083bc     44 E4 05 F1 | 	add	objptr, ##28228
083c0     F2 20 02 FB | 	rdlong	local02, objptr
083c4     03 20 66 F0 | 	shl	local02, #3
083c8     02 00 00 FF 
083cc     38 E4 85 F1 | 	sub	objptr, ##1080
083d0     F2 20 02 F1 | 	add	local02, objptr
083d4     04 20 06 F1 | 	add	local02, #4
083d8     10 21 02 FB | 	rdlong	local02, local02
083dc     FE 21 0E F2 | 	cmp	local02, #510 wz
083e0     35 00 00 FF 
083e4     0C E4 85 F1 | 	sub	objptr, ##27148
083e8     78 FF 9F 5D |  if_ne	jmp	#LR__0760
083ec                 | LR__0761
083ec                 | ' return i,err
083ec     0F FB 01 F6 | 	mov	result1, local01
083f0     00 FC 05 F6 | 	mov	result2, #0
083f4     A7 F0 03 F6 | 	mov	ptra, fp
083f8     B2 00 A0 FD | 	call	#popregs_
083fc                 | _compile_fun_varp_ret
083fc     2D 00 64 FD | 	ret
08400                 | 
08400                 | ' 
08400                 | ' '----- compile assign to an array element
08400                 | ' 
08400                 | ' function compile_array_assign() as ulong 
08400                 | _compile_array_assign
08400     0B 4A 05 F6 | 	mov	COUNT_, #11
08404     A8 00 A0 FD | 	call	#pushregs_
08408     00 24 06 F6 | 	mov	local04, #0
0840c     00 26 06 F6 | 	mov	local05, #0
08410     37 00 00 FF 
08414     44 E4 05 F1 | 	add	objptr, ##28228
08418     F2 28 02 FB | 	rdlong	local06, objptr
0841c     14 FB 01 F6 | 	mov	result1, local06
08420     01 FA 85 F1 | 	sub	result1, #1
08424     03 FA 65 F0 | 	shl	result1, #3
08428     02 00 00 FF 
0842c     38 E4 85 F1 | 	sub	objptr, ##1080
08430     F2 FA 01 F1 | 	add	result1, objptr
08434     FD 2A 02 FB | 	rdlong	local07, result1
08438                 | ' numpar=0 : err=0
08438                 | ' varname$=lparts(ct-1).part$
08438                 | ' if lparts(ct).token=token_lpar then
08438     03 28 66 F0 | 	shl	local06, #3
0843c     F2 28 02 F1 | 	add	local06, objptr
08440     04 28 06 F1 | 	add	local06, #4
08444     14 29 02 FB | 	rdlong	local06, local06
08448     15 28 0E F2 | 	cmp	local06, #21 wz
0844c     35 00 00 FF 
08450     0C E4 85 F1 | 	sub	objptr, ##27148
08454     F4 01 90 5D |  if_ne	jmp	#LR__0774
08458     37 00 00 FF 
0845c     44 E4 05 F1 | 	add	objptr, ##28228
08460     F2 2C 02 FB | 	rdlong	local08, objptr
08464     01 2C 06 F1 | 	add	local08, #1
08468     F2 2C 62 FC | 	wrlong	local08, objptr
0846c     37 00 00 FF 
08470     44 E4 85 F1 | 	sub	objptr, ##28228
08474                 | '   ct+=1 											' omit this lpar, this is for expr list
08474                 | '   do
08474                 | LR__0770
08474     84 1B B0 FD | 	call	#_expr
08478     37 00 00 FF 
0847c     44 E4 05 F1 | 	add	objptr, ##28228
08480     F2 28 02 FB | 	rdlong	local06, objptr
08484     01 28 06 F1 | 	add	local06, #1
08488     F2 28 62 FC | 	wrlong	local06, objptr
0848c     01 24 06 F1 | 	add	local04, #1
08490     01 28 86 F1 | 	sub	local06, #1
08494     03 28 66 F0 | 	shl	local06, #3
08498     02 00 00 FF 
0849c     38 E4 85 F1 | 	sub	objptr, ##1080
084a0     F2 28 02 F1 | 	add	local06, objptr
084a4     04 28 06 F1 | 	add	local06, #4
084a8     14 2D 02 FB | 	rdlong	local08, local06
084ac     14 2C 0E F2 | 	cmp	local08, #20 wz
084b0     35 00 00 FF 
084b4     0C E4 85 F1 | 	sub	objptr, ##27148
084b8     34 00 90 AD |  if_e	jmp	#LR__0771
084bc     37 00 00 FF 
084c0     44 E4 05 F1 | 	add	objptr, ##28228
084c4     F2 2C 02 FB | 	rdlong	local08, objptr
084c8     03 2C 66 F0 | 	shl	local08, #3
084cc     02 00 00 FF 
084d0     38 E4 85 F1 | 	sub	objptr, ##1080
084d4     F2 2C 02 F1 | 	add	local08, objptr
084d8     04 2C 06 F1 | 	add	local08, #4
084dc     16 2D 02 FB | 	rdlong	local08, local08
084e0     FE 2D 0E F2 | 	cmp	local08, #510 wz
084e4     35 00 00 FF 
084e8     0C E4 85 F1 | 	sub	objptr, ##27148
084ec     84 FF 9F 5D |  if_ne	jmp	#LR__0770
084f0                 | LR__0771
084f0     37 00 00 FF 
084f4     44 E4 05 F1 | 	add	objptr, ##28228
084f8     F2 2C 02 FB | 	rdlong	local08, objptr
084fc     01 2C 06 F1 | 	add	local08, #1
08500     F2 2C 62 FC | 	wrlong	local08, objptr
08504     37 00 00 FF 
08508     44 E4 85 F1 | 	sub	objptr, ##28228
0850c     EC 1A B0 FD | 	call	#_expr
08510     01 2E 66 F6 | 	neg	local09, #1
08514     00 30 06 F6 | 	mov	local10, #0
08518                 | '   ct+=1 : expr()
08518                 | '   j=-1 : i=0 
08518                 | '   do 
08518                 | LR__0772
08518                 | '     if variables(i).name=varname$ then j=i: exit loop
08518     18 29 02 F6 | 	mov	local06, local10
0851c     04 28 66 F0 | 	shl	local06, #4
08520     14 00 00 FF 
08524     F8 E5 05 F1 | 	add	objptr, ##10744
08528     F2 28 02 F1 | 	add	local06, objptr
0852c     14 13 02 FB | 	rdlong	arg01, local06
08530     15 15 02 F6 | 	mov	arg02, local07
08534     14 00 00 FF 
08538     F8 E5 85 F1 | 	sub	objptr, ##10744
0853c     AC 90 B1 FD | 	call	#__system___string_cmp
08540     00 FA 0D F2 | 	cmp	result1, #0 wz
08544     18 2F 02 A6 |  if_e	mov	local09, local10
08548     20 00 90 AD |  if_e	jmp	#LR__0773
0854c     01 30 06 F1 | 	add	local10, #1
08550     35 00 00 FF 
08554     08 E4 05 F1 | 	add	objptr, ##27144
08558     F2 2C 02 FB | 	rdlong	local08, objptr
0855c     35 00 00 FF 
08560     08 E4 85 F1 | 	sub	objptr, ##27144
08564     16 31 5A F2 | 	cmps	local10, local08 wcz
08568     AC FF 9F ED |  if_be	jmp	#LR__0772
0856c                 | LR__0773
0856c     17 1F 02 F6 | 	mov	local01, local09
08570     12 21 02 F6 | 	mov	local02, local04
08574     17 22 06 F6 | 	mov	local03, #23
08578     0F 2D 02 F6 | 	mov	local08, local01
0857c     10 33 02 F6 | 	mov	local11, local02
08580     11 2B 02 F6 | 	mov	local07, local03
08584     4A 00 00 FF 
08588     7C E4 05 F1 | 	add	objptr, ##38012
0858c     F2 1E 02 FB | 	rdlong	local01, objptr
08590     0F 2F 02 F6 | 	mov	local09, local01
08594     01 2E 66 F0 | 	shl	local09, #1
08598     0F 2F 02 F1 | 	add	local09, local01
0859c     02 2E 66 F0 | 	shl	local09, #2
085a0     03 00 00 FF 
085a4     00 E4 85 F1 | 	sub	objptr, ##1536
085a8     F2 2E 02 F1 | 	add	local09, objptr
085ac     17 2D 62 FC | 	wrlong	local08, local09
085b0     03 00 00 FF 
085b4     00 E4 05 F1 | 	add	objptr, ##1536
085b8     F2 1E 02 FB | 	rdlong	local01, objptr
085bc     0F 2F 02 F6 | 	mov	local09, local01
085c0     01 2E 66 F0 | 	shl	local09, #1
085c4     0F 2F 02 F1 | 	add	local09, local01
085c8     02 2E 66 F0 | 	shl	local09, #2
085cc     03 00 00 FF 
085d0     00 E4 85 F1 | 	sub	objptr, ##1536
085d4     F2 2E 02 F1 | 	add	local09, objptr
085d8     04 2E 06 F1 | 	add	local09, #4
085dc     17 33 62 FC | 	wrlong	local11, local09
085e0     03 00 00 FF 
085e4     00 E4 05 F1 | 	add	objptr, ##1536
085e8     F2 32 02 FB | 	rdlong	local11, objptr
085ec     19 1F 02 F6 | 	mov	local01, local11
085f0     01 1E 66 F0 | 	shl	local01, #1
085f4     19 1F 02 F1 | 	add	local01, local11
085f8     02 1E 66 F0 | 	shl	local01, #2
085fc     03 00 00 FF 
08600     00 E4 85 F1 | 	sub	objptr, ##1536
08604     F2 1E 02 F1 | 	add	local01, objptr
08608     08 1E 06 F1 | 	add	local01, #8
0860c     0F 2B 62 FC | 	wrlong	local07, local01
08610     03 00 00 FF 
08614     00 E4 05 F1 | 	add	objptr, ##1536
08618     F2 2C 02 FB | 	rdlong	local08, objptr
0861c     01 2C 06 F1 | 	add	local08, #1
08620     F2 2C 62 FC | 	wrlong	local08, objptr
08624                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08624                 | '   if numpar>3 then err=45
08624     04 24 16 F2 | 	cmp	local04, #4 wc
08628     2D 26 06 36 |  if_ae	mov	local05, #45
0862c                 | '   if i>varnum then err=20
0862c     15 00 00 FF 
08630     74 E4 85 F1 | 	sub	objptr, ##10868
08634     F2 2C 02 FB | 	rdlong	local08, objptr
08638     35 00 00 FF 
0863c     08 E4 85 F1 | 	sub	objptr, ##27144
08640     16 31 5A F2 | 	cmps	local10, local08 wcz
08644     14 26 06 16 |  if_a	mov	local05, #20
08648     04 00 90 FD | 	jmp	#LR__0775
0864c                 | LR__0774
0864c     0E 26 06 F6 | 	mov	local05, #14
08650                 | LR__0775
08650                 | ' return err
08650     13 FB 01 F6 | 	mov	result1, local05
08654     A7 F0 03 F6 | 	mov	ptra, fp
08658     B2 00 A0 FD | 	call	#popregs_
0865c                 | _compile_array_assign_ret
0865c     2D 00 64 FD | 	ret
08660                 | 
08660                 | ' 
08660                 | ' '----- compile print command with its ";" and "," modifiers
08660                 | ' 
08660                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08660                 | _compile_print
08660     0B 4A 05 F6 | 	mov	COUNT_, #11
08664     A8 00 A0 FD | 	call	#pushregs_
08668     00 1E 06 F6 | 	mov	local01, #0
0866c     1D 22 06 F6 | 	mov	local03, #29
08670                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08670                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08670     37 00 00 FF 
08674     44 E4 05 F1 | 	add	objptr, ##28228
08678     F2 24 02 FB | 	rdlong	local04, objptr
0867c     03 24 66 F0 | 	shl	local04, #3
08680     02 00 00 FF 
08684     38 E4 85 F1 | 	sub	objptr, ##1080
08688     F2 24 02 F1 | 	add	local04, objptr
0868c     04 24 06 F1 | 	add	local04, #4
08690     12 25 02 FB | 	rdlong	local04, local04
08694     FE 25 0E F2 | 	cmp	local04, #510 wz
08698     35 00 00 FF 
0869c     0C E4 85 F1 | 	sub	objptr, ##27148
086a0     68 01 90 5D |  if_ne	jmp	#LR__0780
086a4     20 22 06 F6 | 	mov	local03, #32
086a8     0F 27 02 F6 | 	mov	local05, local01
086ac     10 29 02 F6 | 	mov	local06, local02
086b0     11 2B 02 F6 | 	mov	local07, local03
086b4     4A 00 00 FF 
086b8     7C E4 05 F1 | 	add	objptr, ##38012
086bc     F2 2C 02 FB | 	rdlong	local08, objptr
086c0     16 2F 02 F6 | 	mov	local09, local08
086c4     01 2E 66 F0 | 	shl	local09, #1
086c8     16 2F 02 F1 | 	add	local09, local08
086cc     02 2E 66 F0 | 	shl	local09, #2
086d0     03 00 00 FF 
086d4     00 E4 85 F1 | 	sub	objptr, ##1536
086d8     F2 2E 02 F1 | 	add	local09, objptr
086dc     17 27 62 FC | 	wrlong	local05, local09
086e0     03 00 00 FF 
086e4     00 E4 05 F1 | 	add	objptr, ##1536
086e8     F2 26 02 FB | 	rdlong	local05, objptr
086ec     13 31 02 F6 | 	mov	local10, local05
086f0     01 30 66 F0 | 	shl	local10, #1
086f4     13 31 02 F1 | 	add	local10, local05
086f8     02 30 66 F0 | 	shl	local10, #2
086fc     03 00 00 FF 
08700     00 E4 85 F1 | 	sub	objptr, ##1536
08704     F2 30 02 F1 | 	add	local10, objptr
08708     04 30 06 F1 | 	add	local10, #4
0870c     18 29 62 FC | 	wrlong	local06, local10
08710     03 00 00 FF 
08714     00 E4 05 F1 | 	add	objptr, ##1536
08718     F2 26 02 FB | 	rdlong	local05, objptr
0871c     13 33 02 F6 | 	mov	local11, local05
08720     01 32 66 F0 | 	shl	local11, #1
08724     13 33 02 F1 | 	add	local11, local05
08728     02 32 66 F0 | 	shl	local11, #2
0872c     03 00 00 FF 
08730     00 E4 85 F1 | 	sub	objptr, ##1536
08734     F2 32 02 F1 | 	add	local11, objptr
08738     08 32 06 F1 | 	add	local11, #8
0873c     19 2B 62 FC | 	wrlong	local07, local11
08740     03 00 00 FF 
08744     00 E4 05 F1 | 	add	objptr, ##1536
08748     F2 26 02 FB | 	rdlong	local05, objptr
0874c     01 26 06 F1 | 	add	local05, #1
08750     F2 26 62 FC | 	wrlong	local05, objptr
08754     44 22 06 F6 | 	mov	local03, #68
08758     0F 27 02 F6 | 	mov	local05, local01
0875c     10 29 02 F6 | 	mov	local06, local02
08760     11 2B 02 F6 | 	mov	local07, local03
08764     F2 2C 02 FB | 	rdlong	local08, objptr
08768     16 2F 02 F6 | 	mov	local09, local08
0876c     01 2E 66 F0 | 	shl	local09, #1
08770     16 2F 02 F1 | 	add	local09, local08
08774     02 2E 66 F0 | 	shl	local09, #2
08778     03 00 00 FF 
0877c     00 E4 85 F1 | 	sub	objptr, ##1536
08780     F2 2E 02 F1 | 	add	local09, objptr
08784     17 27 62 FC | 	wrlong	local05, local09
08788     03 00 00 FF 
0878c     00 E4 05 F1 | 	add	objptr, ##1536
08790     F2 32 02 FB | 	rdlong	local11, objptr
08794     19 31 02 F6 | 	mov	local10, local11
08798     01 30 66 F0 | 	shl	local10, #1
0879c     19 31 02 F1 | 	add	local10, local11
087a0     02 30 66 F0 | 	shl	local10, #2
087a4     03 00 00 FF 
087a8     00 E4 85 F1 | 	sub	objptr, ##1536
087ac     F2 30 02 F1 | 	add	local10, objptr
087b0     04 30 06 F1 | 	add	local10, #4
087b4     18 29 62 FC | 	wrlong	local06, local10
087b8     03 00 00 FF 
087bc     00 E4 05 F1 | 	add	objptr, ##1536
087c0     F2 30 02 FB | 	rdlong	local10, objptr
087c4     18 33 02 F6 | 	mov	local11, local10
087c8     01 32 66 F0 | 	shl	local11, #1
087cc     18 33 02 F1 | 	add	local11, local10
087d0     02 32 66 F0 | 	shl	local11, #2
087d4     03 00 00 FF 
087d8     00 E4 85 F1 | 	sub	objptr, ##1536
087dc     F2 32 02 F1 | 	add	local11, objptr
087e0     08 32 06 F1 | 	add	local11, #8
087e4     19 2B 62 FC | 	wrlong	local07, local11
087e8     03 00 00 FF 
087ec     00 E4 05 F1 | 	add	objptr, ##1536
087f0     F2 26 02 FB | 	rdlong	local05, objptr
087f4     01 26 06 F1 | 	add	local05, #1
087f8     F2 26 62 FC | 	wrlong	local05, objptr
087fc     4A 00 00 FF 
08800     7C E4 85 F1 | 	sub	objptr, ##38012
08804     00 FA 05 F6 | 	mov	result1, #0
08808     20 05 90 FD | 	jmp	#LR__0787
0880c                 | LR__0780
0880c                 | ' do
0880c                 | LR__0781
0880c     EC 17 B0 FD | 	call	#_expr
08810                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
08810                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08810     37 00 00 FF 
08814     44 E4 05 F1 | 	add	objptr, ##28228
08818     F2 24 02 FB | 	rdlong	local04, objptr
0881c     03 24 66 F0 | 	shl	local04, #3
08820     02 00 00 FF 
08824     38 E4 85 F1 | 	sub	objptr, ##1080
08828     F2 24 02 F1 | 	add	local04, objptr
0882c     04 24 06 F1 | 	add	local04, #4
08830     12 2D 02 FB | 	rdlong	local08, local04
08834     11 2C 0E F2 | 	cmp	local08, #17 wz
08838     35 00 00 FF 
0883c     0C E4 85 F1 | 	sub	objptr, ##27148
08840     60 01 90 5D |  if_ne	jmp	#LR__0782
08844     21 22 06 F6 | 	mov	local03, #33
08848     0F 27 02 F6 | 	mov	local05, local01
0884c     10 29 02 F6 | 	mov	local06, local02
08850     11 2B 02 F6 | 	mov	local07, local03
08854     4A 00 00 FF 
08858     7C E4 05 F1 | 	add	objptr, ##38012
0885c     F2 2C 02 FB | 	rdlong	local08, objptr
08860     16 2F 02 F6 | 	mov	local09, local08
08864     01 2E 66 F0 | 	shl	local09, #1
08868     16 2F 02 F1 | 	add	local09, local08
0886c     02 2E 66 F0 | 	shl	local09, #2
08870     03 00 00 FF 
08874     00 E4 85 F1 | 	sub	objptr, ##1536
08878     F2 2E 02 F1 | 	add	local09, objptr
0887c     17 27 62 FC | 	wrlong	local05, local09
08880     03 00 00 FF 
08884     00 E4 05 F1 | 	add	objptr, ##1536
08888     F2 32 02 FB | 	rdlong	local11, objptr
0888c     19 31 02 F6 | 	mov	local10, local11
08890     01 30 66 F0 | 	shl	local10, #1
08894     19 31 02 F1 | 	add	local10, local11
08898     02 30 66 F0 | 	shl	local10, #2
0889c     03 00 00 FF 
088a0     00 E4 85 F1 | 	sub	objptr, ##1536
088a4     F2 30 02 F1 | 	add	local10, objptr
088a8     04 30 06 F1 | 	add	local10, #4
088ac     18 29 62 FC | 	wrlong	local06, local10
088b0     03 00 00 FF 
088b4     00 E4 05 F1 | 	add	objptr, ##1536
088b8     F2 26 02 FB | 	rdlong	local05, objptr
088bc     13 33 02 F6 | 	mov	local11, local05
088c0     01 32 66 F0 | 	shl	local11, #1
088c4     13 33 02 F1 | 	add	local11, local05
088c8     02 32 66 F0 | 	shl	local11, #2
088cc     03 00 00 FF 
088d0     00 E4 85 F1 | 	sub	objptr, ##1536
088d4     F2 32 02 F1 | 	add	local11, objptr
088d8     08 32 06 F1 | 	add	local11, #8
088dc     19 2B 62 FC | 	wrlong	local07, local11
088e0     03 00 00 FF 
088e4     00 E4 05 F1 | 	add	objptr, ##1536
088e8     F2 26 02 FB | 	rdlong	local05, objptr
088ec     01 26 06 F1 | 	add	local05, #1
088f0     F2 26 62 FC | 	wrlong	local05, objptr
088f4     44 22 06 F6 | 	mov	local03, #68
088f8     0F 27 02 F6 | 	mov	local05, local01
088fc     10 29 02 F6 | 	mov	local06, local02
08900     11 2B 02 F6 | 	mov	local07, local03
08904     F2 2C 02 FB | 	rdlong	local08, objptr
08908     16 2F 02 F6 | 	mov	local09, local08
0890c     01 2E 66 F0 | 	shl	local09, #1
08910     16 2F 02 F1 | 	add	local09, local08
08914     02 2E 66 F0 | 	shl	local09, #2
08918     03 00 00 FF 
0891c     00 E4 85 F1 | 	sub	objptr, ##1536
08920     F2 2E 02 F1 | 	add	local09, objptr
08924     17 27 62 FC | 	wrlong	local05, local09
08928     03 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##1536
08930     F2 32 02 FB | 	rdlong	local11, objptr
08934     19 31 02 F6 | 	mov	local10, local11
08938     01 30 66 F0 | 	shl	local10, #1
0893c     19 31 02 F1 | 	add	local10, local11
08940     02 30 66 F0 | 	shl	local10, #2
08944     03 00 00 FF 
08948     00 E4 85 F1 | 	sub	objptr, ##1536
0894c     F2 30 02 F1 | 	add	local10, objptr
08950     04 30 06 F1 | 	add	local10, #4
08954     18 29 62 FC | 	wrlong	local06, local10
08958     03 00 00 FF 
0895c     00 E4 05 F1 | 	add	objptr, ##1536
08960     F2 30 02 FB | 	rdlong	local10, objptr
08964     18 33 02 F6 | 	mov	local11, local10
08968     01 32 66 F0 | 	shl	local11, #1
0896c     18 33 02 F1 | 	add	local11, local10
08970     02 32 66 F0 | 	shl	local11, #2
08974     03 00 00 FF 
08978     00 E4 85 F1 | 	sub	objptr, ##1536
0897c     F2 32 02 F1 | 	add	local11, objptr
08980     08 32 06 F1 | 	add	local11, #8
08984     19 2B 62 FC | 	wrlong	local07, local11
08988     03 00 00 FF 
0898c     00 E4 05 F1 | 	add	objptr, ##1536
08990     F2 26 02 FB | 	rdlong	local05, objptr
08994     01 26 06 F1 | 	add	local05, #1
08998     F2 26 62 FC | 	wrlong	local05, objptr
0899c     4A 00 00 FF 
089a0     7C E4 85 F1 | 	sub	objptr, ##38012
089a4                 | LR__0782
089a4                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
089a4     37 00 00 FF 
089a8     44 E4 05 F1 | 	add	objptr, ##28228
089ac     F2 24 02 FB | 	rdlong	local04, objptr
089b0     03 24 66 F0 | 	shl	local04, #3
089b4     02 00 00 FF 
089b8     38 E4 85 F1 | 	sub	objptr, ##1080
089bc     F2 24 02 F1 | 	add	local04, objptr
089c0     04 24 06 F1 | 	add	local04, #4
089c4     12 2D 02 FB | 	rdlong	local08, local04
089c8     12 2C 0E F2 | 	cmp	local08, #18 wz
089cc     35 00 00 FF 
089d0     0C E4 85 F1 | 	sub	objptr, ##27148
089d4     60 01 90 5D |  if_ne	jmp	#LR__0783
089d8     22 22 06 F6 | 	mov	local03, #34
089dc     0F 27 02 F6 | 	mov	local05, local01
089e0     10 29 02 F6 | 	mov	local06, local02
089e4     11 2B 02 F6 | 	mov	local07, local03
089e8     4A 00 00 FF 
089ec     7C E4 05 F1 | 	add	objptr, ##38012
089f0     F2 2C 02 FB | 	rdlong	local08, objptr
089f4     16 2F 02 F6 | 	mov	local09, local08
089f8     01 2E 66 F0 | 	shl	local09, #1
089fc     16 2F 02 F1 | 	add	local09, local08
08a00     02 2E 66 F0 | 	shl	local09, #2
08a04     03 00 00 FF 
08a08     00 E4 85 F1 | 	sub	objptr, ##1536
08a0c     F2 2E 02 F1 | 	add	local09, objptr
08a10     17 27 62 FC | 	wrlong	local05, local09
08a14     03 00 00 FF 
08a18     00 E4 05 F1 | 	add	objptr, ##1536
08a1c     F2 32 02 FB | 	rdlong	local11, objptr
08a20     19 31 02 F6 | 	mov	local10, local11
08a24     01 30 66 F0 | 	shl	local10, #1
08a28     19 31 02 F1 | 	add	local10, local11
08a2c     02 30 66 F0 | 	shl	local10, #2
08a30     03 00 00 FF 
08a34     00 E4 85 F1 | 	sub	objptr, ##1536
08a38     F2 30 02 F1 | 	add	local10, objptr
08a3c     04 30 06 F1 | 	add	local10, #4
08a40     18 29 62 FC | 	wrlong	local06, local10
08a44     03 00 00 FF 
08a48     00 E4 05 F1 | 	add	objptr, ##1536
08a4c     F2 26 02 FB | 	rdlong	local05, objptr
08a50     13 33 02 F6 | 	mov	local11, local05
08a54     01 32 66 F0 | 	shl	local11, #1
08a58     13 33 02 F1 | 	add	local11, local05
08a5c     02 32 66 F0 | 	shl	local11, #2
08a60     03 00 00 FF 
08a64     00 E4 85 F1 | 	sub	objptr, ##1536
08a68     F2 32 02 F1 | 	add	local11, objptr
08a6c     08 32 06 F1 | 	add	local11, #8
08a70     19 2B 62 FC | 	wrlong	local07, local11
08a74     03 00 00 FF 
08a78     00 E4 05 F1 | 	add	objptr, ##1536
08a7c     F2 26 02 FB | 	rdlong	local05, objptr
08a80     01 26 06 F1 | 	add	local05, #1
08a84     F2 26 62 FC | 	wrlong	local05, objptr
08a88     44 22 06 F6 | 	mov	local03, #68
08a8c     0F 27 02 F6 | 	mov	local05, local01
08a90     10 29 02 F6 | 	mov	local06, local02
08a94     11 2B 02 F6 | 	mov	local07, local03
08a98     F2 2C 02 FB | 	rdlong	local08, objptr
08a9c     16 2F 02 F6 | 	mov	local09, local08
08aa0     01 2E 66 F0 | 	shl	local09, #1
08aa4     16 2F 02 F1 | 	add	local09, local08
08aa8     02 2E 66 F0 | 	shl	local09, #2
08aac     03 00 00 FF 
08ab0     00 E4 85 F1 | 	sub	objptr, ##1536
08ab4     F2 2E 02 F1 | 	add	local09, objptr
08ab8     17 27 62 FC | 	wrlong	local05, local09
08abc     03 00 00 FF 
08ac0     00 E4 05 F1 | 	add	objptr, ##1536
08ac4     F2 32 02 FB | 	rdlong	local11, objptr
08ac8     19 31 02 F6 | 	mov	local10, local11
08acc     01 30 66 F0 | 	shl	local10, #1
08ad0     19 31 02 F1 | 	add	local10, local11
08ad4     02 30 66 F0 | 	shl	local10, #2
08ad8     03 00 00 FF 
08adc     00 E4 85 F1 | 	sub	objptr, ##1536
08ae0     F2 30 02 F1 | 	add	local10, objptr
08ae4     04 30 06 F1 | 	add	local10, #4
08ae8     18 29 62 FC | 	wrlong	local06, local10
08aec     03 00 00 FF 
08af0     00 E4 05 F1 | 	add	objptr, ##1536
08af4     F2 30 02 FB | 	rdlong	local10, objptr
08af8     18 33 02 F6 | 	mov	local11, local10
08afc     01 32 66 F0 | 	shl	local11, #1
08b00     18 33 02 F1 | 	add	local11, local10
08b04     02 32 66 F0 | 	shl	local11, #2
08b08     03 00 00 FF 
08b0c     00 E4 85 F1 | 	sub	objptr, ##1536
08b10     F2 32 02 F1 | 	add	local11, objptr
08b14     08 32 06 F1 | 	add	local11, #8
08b18     19 2B 62 FC | 	wrlong	local07, local11
08b1c     03 00 00 FF 
08b20     00 E4 05 F1 | 	add	objptr, ##1536
08b24     F2 26 02 FB | 	rdlong	local05, objptr
08b28     01 26 06 F1 | 	add	local05, #1
08b2c     F2 26 62 FC | 	wrlong	local05, objptr
08b30     4A 00 00 FF 
08b34     7C E4 85 F1 | 	sub	objptr, ##38012
08b38                 | LR__0783
08b38                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08b38     37 00 00 FF 
08b3c     44 E4 05 F1 | 	add	objptr, ##28228
08b40     F2 24 02 FB | 	rdlong	local04, objptr
08b44     03 24 66 F0 | 	shl	local04, #3
08b48     02 00 00 FF 
08b4c     38 E4 85 F1 | 	sub	objptr, ##1080
08b50     F2 24 02 F1 | 	add	local04, objptr
08b54     04 24 06 F1 | 	add	local04, #4
08b58     12 2D 02 FB | 	rdlong	local08, local04
08b5c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08b60     35 00 00 FF 
08b64     0C E4 85 F1 | 	sub	objptr, ##27148
08b68     B8 00 90 5D |  if_ne	jmp	#LR__0784
08b6c     44 22 06 F6 | 	mov	local03, #68
08b70     0F 27 02 F6 | 	mov	local05, local01
08b74     10 29 02 F6 | 	mov	local06, local02
08b78     11 2B 02 F6 | 	mov	local07, local03
08b7c     4A 00 00 FF 
08b80     7C E4 05 F1 | 	add	objptr, ##38012
08b84     F2 2C 02 FB | 	rdlong	local08, objptr
08b88     16 2F 02 F6 | 	mov	local09, local08
08b8c     01 2E 66 F0 | 	shl	local09, #1
08b90     16 2F 02 F1 | 	add	local09, local08
08b94     02 2E 66 F0 | 	shl	local09, #2
08b98     03 00 00 FF 
08b9c     00 E4 85 F1 | 	sub	objptr, ##1536
08ba0     F2 2E 02 F1 | 	add	local09, objptr
08ba4     17 27 62 FC | 	wrlong	local05, local09
08ba8     03 00 00 FF 
08bac     00 E4 05 F1 | 	add	objptr, ##1536
08bb0     F2 32 02 FB | 	rdlong	local11, objptr
08bb4     19 31 02 F6 | 	mov	local10, local11
08bb8     01 30 66 F0 | 	shl	local10, #1
08bbc     19 31 02 F1 | 	add	local10, local11
08bc0     02 30 66 F0 | 	shl	local10, #2
08bc4     03 00 00 FF 
08bc8     00 E4 85 F1 | 	sub	objptr, ##1536
08bcc     F2 30 02 F1 | 	add	local10, objptr
08bd0     04 30 06 F1 | 	add	local10, #4
08bd4     18 29 62 FC | 	wrlong	local06, local10
08bd8     03 00 00 FF 
08bdc     00 E4 05 F1 | 	add	objptr, ##1536
08be0     F2 30 02 FB | 	rdlong	local10, objptr
08be4     18 33 02 F6 | 	mov	local11, local10
08be8     01 32 66 F0 | 	shl	local11, #1
08bec     18 33 02 F1 | 	add	local11, local10
08bf0     02 32 66 F0 | 	shl	local11, #2
08bf4     03 00 00 FF 
08bf8     00 E4 85 F1 | 	sub	objptr, ##1536
08bfc     F2 32 02 F1 | 	add	local11, objptr
08c00     08 32 06 F1 | 	add	local11, #8
08c04     19 2B 62 FC | 	wrlong	local07, local11
08c08     03 00 00 FF 
08c0c     00 E4 05 F1 | 	add	objptr, ##1536
08c10     F2 26 02 FB | 	rdlong	local05, objptr
08c14     01 26 06 F1 | 	add	local05, #1
08c18     F2 26 62 FC | 	wrlong	local05, objptr
08c1c     4A 00 00 FF 
08c20     7C E4 85 F1 | 	sub	objptr, ##38012
08c24                 | LR__0784
08c24                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08c24     37 00 00 FF 
08c28     44 E4 05 F1 | 	add	objptr, ##28228
08c2c     F2 24 02 FB | 	rdlong	local04, objptr
08c30     03 24 66 F0 | 	shl	local04, #3
08c34     02 00 00 FF 
08c38     38 E4 85 F1 | 	sub	objptr, ##1080
08c3c     F2 24 02 F1 | 	add	local04, objptr
08c40     04 24 06 F1 | 	add	local04, #4
08c44     12 2D 02 FB | 	rdlong	local08, local04
08c48     11 2C 0E F2 | 	cmp	local08, #17 wz
08c4c     35 00 00 FF 
08c50     0C E4 85 F1 | 	sub	objptr, ##27148
08c54     6C 00 90 AD |  if_e	jmp	#LR__0785
08c58     37 00 00 FF 
08c5c     44 E4 05 F1 | 	add	objptr, ##28228
08c60     F2 2C 02 FB | 	rdlong	local08, objptr
08c64     03 2C 66 F0 | 	shl	local08, #3
08c68     02 00 00 FF 
08c6c     38 E4 85 F1 | 	sub	objptr, ##1080
08c70     F2 2C 02 F1 | 	add	local08, objptr
08c74     04 2C 06 F1 | 	add	local08, #4
08c78     16 2D 02 FB | 	rdlong	local08, local08
08c7c     12 2C 0E F2 | 	cmp	local08, #18 wz
08c80     35 00 00 FF 
08c84     0C E4 85 F1 | 	sub	objptr, ##27148
08c88     38 00 90 AD |  if_e	jmp	#LR__0785
08c8c     37 00 00 FF 
08c90     44 E4 05 F1 | 	add	objptr, ##28228
08c94     F2 32 02 FB | 	rdlong	local11, objptr
08c98     03 32 66 F0 | 	shl	local11, #3
08c9c     02 00 00 FF 
08ca0     38 E4 85 F1 | 	sub	objptr, ##1080
08ca4     F2 32 02 F1 | 	add	local11, objptr
08ca8     04 32 06 F1 | 	add	local11, #4
08cac     19 33 02 FB | 	rdlong	local11, local11
08cb0     FE 33 0E F2 | 	cmp	local11, #510 wz
08cb4     35 00 00 FF 
08cb8     0C E4 85 F1 | 	sub	objptr, ##27148
08cbc     16 FA 05 56 |  if_ne	mov	result1, #22
08cc0     68 00 90 5D |  if_ne	jmp	#LR__0787
08cc4                 | LR__0785
08cc4     37 00 00 FF 
08cc8     44 E4 05 F1 | 	add	objptr, ##28228
08ccc     F2 24 02 FB | 	rdlong	local04, objptr
08cd0     01 24 06 F1 | 	add	local04, #1
08cd4     F2 24 62 FC | 	wrlong	local04, objptr
08cd8     03 24 66 F0 | 	shl	local04, #3
08cdc     02 00 00 FF 
08ce0     38 E4 85 F1 | 	sub	objptr, ##1080
08ce4     F2 24 02 F1 | 	add	local04, objptr
08ce8     04 24 06 F1 | 	add	local04, #4
08cec     12 2D 02 FB | 	rdlong	local08, local04
08cf0     FE 2D 0E F2 | 	cmp	local08, #510 wz
08cf4     35 00 00 FF 
08cf8     0C E4 85 F1 | 	sub	objptr, ##27148
08cfc     28 00 90 AD |  if_e	jmp	#LR__0786
08d00     37 00 00 FF 
08d04     44 E4 05 F1 | 	add	objptr, ##28228
08d08     F2 32 02 FB | 	rdlong	local11, objptr
08d0c     0E 00 00 FF 
08d10     1C E4 05 F1 | 	add	objptr, ##7196
08d14     F2 30 02 FB | 	rdlong	local10, objptr
08d18     45 00 00 FF 
08d1c     60 E4 85 F1 | 	sub	objptr, ##35424
08d20     18 33 52 F2 | 	cmps	local11, local10 wc
08d24     E4 FA 9F CD |  if_b	jmp	#LR__0781
08d28                 | LR__0786
08d28                 | ' return 0
08d28     00 FA 05 F6 | 	mov	result1, #0
08d2c                 | LR__0787
08d2c     A7 F0 03 F6 | 	mov	ptra, fp
08d30     B2 00 A0 FD | 	call	#popregs_
08d34                 | _compile_print_ret
08d34     2D 00 64 FD | 	ret
08d38                 | 
08d38                 | ' 
08d38                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08d38                 | ' 
08d38                 | ' function compile_if(aline as ulong) as ulong  
08d38                 | _compile_if
08d38     09 4A 05 F6 | 	mov	COUNT_, #9
08d3c     A8 00 A0 FD | 	call	#pushregs_
08d40                 | _compile_if_enter
08d40     09 25 02 F6 | 	mov	local04, arg01
08d44                 | ' return expr()
08d44     B4 12 B0 FD | 	call	#_expr
08d48     37 00 00 FF 
08d4c     44 E4 05 F1 | 	add	objptr, ##28228
08d50     F2 14 02 FB | 	rdlong	arg02, objptr
08d54     0A 27 02 F6 | 	mov	local05, arg02
08d58     03 26 66 F0 | 	shl	local05, #3
08d5c     02 00 00 FF 
08d60     38 E4 85 F1 | 	sub	objptr, ##1080
08d64     F2 26 02 F1 | 	add	local05, objptr
08d68     04 26 06 F1 | 	add	local05, #4
08d6c     13 27 02 FB | 	rdlong	local05, local05
08d70     01 14 06 F1 | 	add	arg02, #1
08d74     02 00 00 FF 
08d78     38 E4 05 F1 | 	add	objptr, ##1080
08d7c     F2 14 62 FC | 	wrlong	arg02, objptr
08d80     37 00 00 FF 
08d84     44 E4 85 F1 | 	sub	objptr, ##28228
08d88                 | ' 
08d88                 | ' err=compile_fun_1p()
08d88                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08d88     5B 26 0E F2 | 	cmp	local05, #91 wz
08d8c     34 FA 05 56 |  if_ne	mov	result1, #52
08d90     20 01 90 5D |  if_ne	jmp	#LR__0792
08d94     58 22 06 F6 | 	mov	local03, #88
08d98     0F 29 02 F6 | 	mov	local06, local01
08d9c     10 2B 02 F6 | 	mov	local07, local02
08da0     11 15 02 F6 | 	mov	arg02, local03
08da4     4A 00 00 FF 
08da8     7C E4 05 F1 | 	add	objptr, ##38012
08dac     F2 12 02 FB | 	rdlong	arg01, objptr
08db0     09 2D 02 F6 | 	mov	local08, arg01
08db4     01 2C 66 F0 | 	shl	local08, #1
08db8     09 2D 02 F1 | 	add	local08, arg01
08dbc     02 2C 66 F0 | 	shl	local08, #2
08dc0     03 00 00 FF 
08dc4     00 E4 85 F1 | 	sub	objptr, ##1536
08dc8     F2 2C 02 F1 | 	add	local08, objptr
08dcc     16 29 62 FC | 	wrlong	local06, local08
08dd0     03 00 00 FF 
08dd4     00 E4 05 F1 | 	add	objptr, ##1536
08dd8     F2 28 02 FB | 	rdlong	local06, objptr
08ddc     14 13 02 F6 | 	mov	arg01, local06
08de0     01 12 66 F0 | 	shl	arg01, #1
08de4     14 13 02 F1 | 	add	arg01, local06
08de8     02 12 66 F0 | 	shl	arg01, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 12 02 F1 | 	add	arg01, objptr
08df8     04 12 06 F1 | 	add	arg01, #4
08dfc     09 2B 62 FC | 	wrlong	local07, arg01
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 28 02 FB | 	rdlong	local06, objptr
08e0c     14 13 02 F6 | 	mov	arg01, local06
08e10     01 12 66 F0 | 	shl	arg01, #1
08e14     14 13 02 F1 | 	add	arg01, local06
08e18     02 12 66 F0 | 	shl	arg01, #2
08e1c     03 00 00 FF 
08e20     00 E4 85 F1 | 	sub	objptr, ##1536
08e24     F2 12 02 F1 | 	add	arg01, objptr
08e28     08 12 06 F1 | 	add	arg01, #8
08e2c     09 15 62 FC | 	wrlong	arg02, arg01
08e30     03 00 00 FF 
08e34     00 E4 05 F1 | 	add	objptr, ##1536
08e38     F2 28 02 FB | 	rdlong	local06, objptr
08e3c     01 28 06 F1 | 	add	local06, #1
08e40     F2 28 62 FC | 	wrlong	local06, objptr
08e44                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08e44                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08e44     13 00 00 FF 
08e48     38 E4 85 F1 | 	sub	objptr, ##9784
08e4c     F2 14 02 FB | 	rdlong	arg02, objptr
08e50     01 14 06 F1 | 	add	arg02, #1
08e54     03 14 66 F0 | 	shl	arg02, #3
08e58     02 00 00 FF 
08e5c     38 E4 85 F1 | 	sub	objptr, ##1080
08e60     F2 14 02 F1 | 	add	arg02, objptr
08e64     0A 13 02 FB | 	rdlong	arg01, arg02
08e68     35 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##27148
08e70                 | ' 
08e70                 | ' select case s
08e70     89 01 00 FF 
08e74     F8 14 06 F6 | 	mov	arg02, ##@LR__5241
08e78     70 87 B1 FD | 	call	#__system___string_cmp
08e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e80     1B FA 05 A6 |  if_e	mov	result1, #27
08e84     00 FA 05 56 |  if_ne	mov	result1, #0
08e88     00 FA 0D F2 | 	cmp	result1, #0 wz
08e8c     10 00 90 AD |  if_e	jmp	#LR__0790
08e90     05 12 06 F6 | 	mov	arg01, #5
08e94     88 EC BF FD | 	call	#_compile_immediate_assign
08e98     FD 2E 02 F6 | 	mov	local09, result1
08e9c     10 00 90 FD | 	jmp	#LR__0791
08ea0                 | LR__0790
08ea0     05 12 06 F6 | 	mov	arg01, #5
08ea4     12 15 02 F6 | 	mov	arg02, local04
08ea8     30 E3 BF FD | 	call	#_compile_immediate
08eac     FD 2E 02 F6 | 	mov	local09, result1
08eb0                 | LR__0791
08eb0                 | ' return err
08eb0     17 FB 01 F6 | 	mov	result1, local09
08eb4                 | LR__0792
08eb4     A7 F0 03 F6 | 	mov	ptra, fp
08eb8     B2 00 A0 FD | 	call	#popregs_
08ebc                 | _compile_if_ret
08ebc     2D 00 64 FD | 	ret
08ec0                 | 
08ec0                 | ' 
08ec0                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08ec0                 | ' 
08ec0                 | ' function compile_else(aline as ulong) as ulong  
08ec0                 | _compile_else
08ec0     07 4A 05 F6 | 	mov	COUNT_, #7
08ec4     A8 00 A0 FD | 	call	#pushregs_
08ec8                 | _compile_else_enter
08ec8     09 25 02 F6 | 	mov	local04, arg01
08ecc     5A 22 06 F6 | 	mov	local03, #90
08ed0     0F 27 02 F6 | 	mov	local05, local01
08ed4     10 29 02 F6 | 	mov	local06, local02
08ed8     11 1F 02 F6 | 	mov	local01, local03
08edc     4A 00 00 FF 
08ee0     7C E4 05 F1 | 	add	objptr, ##38012
08ee4     F2 14 02 FB | 	rdlong	arg02, objptr
08ee8     0A 13 02 F6 | 	mov	arg01, arg02
08eec     01 12 66 F0 | 	shl	arg01, #1
08ef0     0A 13 02 F1 | 	add	arg01, arg02
08ef4     02 12 66 F0 | 	shl	arg01, #2
08ef8     03 00 00 FF 
08efc     00 E4 85 F1 | 	sub	objptr, ##1536
08f00     F2 12 02 F1 | 	add	arg01, objptr
08f04     09 27 62 FC | 	wrlong	local05, arg01
08f08     03 00 00 FF 
08f0c     00 E4 05 F1 | 	add	objptr, ##1536
08f10     F2 26 02 FB | 	rdlong	local05, objptr
08f14     13 15 02 F6 | 	mov	arg02, local05
08f18     01 14 66 F0 | 	shl	arg02, #1
08f1c     13 15 02 F1 | 	add	arg02, local05
08f20     02 14 66 F0 | 	shl	arg02, #2
08f24     03 00 00 FF 
08f28     00 E4 85 F1 | 	sub	objptr, ##1536
08f2c     F2 14 02 F1 | 	add	arg02, objptr
08f30     04 14 06 F1 | 	add	arg02, #4
08f34     0A 29 62 FC | 	wrlong	local06, arg02
08f38     03 00 00 FF 
08f3c     00 E4 05 F1 | 	add	objptr, ##1536
08f40     F2 28 02 FB | 	rdlong	local06, objptr
08f44     14 27 02 F6 | 	mov	local05, local06
08f48     01 26 66 F0 | 	shl	local05, #1
08f4c     14 27 02 F1 | 	add	local05, local06
08f50     02 26 66 F0 | 	shl	local05, #2
08f54     03 00 00 FF 
08f58     00 E4 85 F1 | 	sub	objptr, ##1536
08f5c     F2 26 02 F1 | 	add	local05, objptr
08f60     08 26 06 F1 | 	add	local05, #8
08f64     13 1F 62 FC | 	wrlong	local01, local05
08f68     03 00 00 FF 
08f6c     00 E4 05 F1 | 	add	objptr, ##1536
08f70     F2 26 02 FB | 	rdlong	local05, objptr
08f74     01 26 06 F1 | 	add	local05, #1
08f78     F2 26 62 FC | 	wrlong	local05, objptr
08f7c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08f7c                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08f7c     13 00 00 FF 
08f80     38 E4 85 F1 | 	sub	objptr, ##9784
08f84     F2 28 02 FB | 	rdlong	local06, objptr
08f88     01 28 06 F1 | 	add	local06, #1
08f8c     03 28 66 F0 | 	shl	local06, #3
08f90     02 00 00 FF 
08f94     38 E4 85 F1 | 	sub	objptr, ##1080
08f98     F2 28 02 F1 | 	add	local06, objptr
08f9c     14 13 02 FB | 	rdlong	arg01, local06
08fa0     35 00 00 FF 
08fa4     0C E4 85 F1 | 	sub	objptr, ##27148
08fa8                 | ' 
08fa8                 | ' select case s
08fa8     89 01 00 FF 
08fac     F8 14 06 F6 | 	mov	arg02, ##@LR__5241
08fb0     38 86 B1 FD | 	call	#__system___string_cmp
08fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
08fb8     1B FA 05 A6 |  if_e	mov	result1, #27
08fbc     00 FA 05 56 |  if_ne	mov	result1, #0
08fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
08fc4     10 00 90 AD |  if_e	jmp	#LR__0800
08fc8     05 12 06 F6 | 	mov	arg01, #5
08fcc     50 EB BF FD | 	call	#_compile_immediate_assign
08fd0     FD 2A 02 F6 | 	mov	local07, result1
08fd4     10 00 90 FD | 	jmp	#LR__0801
08fd8                 | LR__0800
08fd8     05 12 06 F6 | 	mov	arg01, #5
08fdc     12 15 02 F6 | 	mov	arg02, local04
08fe0     F8 E1 BF FD | 	call	#_compile_immediate
08fe4     FD 2A 02 F6 | 	mov	local07, result1
08fe8                 | LR__0801
08fe8                 | ' return err
08fe8     15 FB 01 F6 | 	mov	result1, local07
08fec     A7 F0 03 F6 | 	mov	ptra, fp
08ff0     B2 00 A0 FD | 	call	#popregs_
08ff4                 | _compile_else_ret
08ff4     2D 00 64 FD | 	ret
08ff8                 | 
08ff8                 | ' 
08ff8                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
08ff8                 | ' 
08ff8                 | ' function compile_dim() as ulong  
08ff8                 | _compile_dim
08ff8     11 4A 05 F6 | 	mov	COUNT_, #17
08ffc     A8 00 A0 FD | 	call	#pushregs_
09000     01 1E 06 F6 | 	mov	local01, #1
09004     01 20 06 F6 | 	mov	local02, #1
09008     01 22 06 F6 | 	mov	local03, #1
0900c                 | ' 
0900c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0900c                 | ' if isname(lparts(ct).part$) then 
0900c     37 00 00 FF 
09010     44 E4 05 F1 | 	add	objptr, ##28228
09014     F2 18 02 FB | 	rdlong	arg04, objptr
09018     03 18 66 F0 | 	shl	arg04, #3
0901c     02 00 00 FF 
09020     38 E4 85 F1 | 	sub	objptr, ##1080
09024     F2 18 02 F1 | 	add	arg04, objptr
09028     0C 13 02 FB | 	rdlong	arg01, arg04
0902c     35 00 00 FF 
09030     0C E4 85 F1 | 	sub	objptr, ##27148
09034     FC CF BF FD | 	call	#_isname
09038     00 FA 0D F2 | 	cmp	result1, #0 wz
0903c     78 05 90 AD |  if_e	jmp	#LR__0833
09040     37 00 00 FF 
09044     44 E4 05 F1 | 	add	objptr, ##28228
09048     F2 24 02 FB | 	rdlong	local04, objptr
0904c     03 24 66 F0 | 	shl	local04, #3
09050     02 00 00 FF 
09054     38 E4 85 F1 | 	sub	objptr, ##1080
09058     F2 24 02 F1 | 	add	local04, objptr
0905c     12 27 02 FB | 	rdlong	local05, local04
09060     01 28 66 F6 | 	neg	local06, #1
09064                 | '   varname2$=lparts(ct).part$ 
09064                 | '   j=-1
09064                 | '   if varnum>0 then
09064     04 E4 85 F1 | 	sub	objptr, #4
09068     F2 2A 02 FB | 	rdlong	local07, objptr
0906c     35 00 00 FF 
09070     08 E4 85 F1 | 	sub	objptr, ##27144
09074     01 2A 56 F2 | 	cmps	local07, #1 wc
09078     58 00 90 CD |  if_b	jmp	#LR__0812
0907c                 | '     for i=0 to varnum-1
0907c     00 2C 06 F6 | 	mov	local08, #0
09080     35 00 00 FF 
09084     08 E4 05 F1 | 	add	objptr, ##27144
09088     F2 2E 02 FB | 	rdlong	local09, objptr
0908c     35 00 00 FF 
09090     08 E4 85 F1 | 	sub	objptr, ##27144
09094                 | LR__0810
09094     17 2D 52 F2 | 	cmps	local08, local09 wc
09098     38 00 90 3D |  if_ae	jmp	#LR__0811
0909c                 | '       if variables(i).name=varname2$ then j=i : exit
0909c     16 25 02 F6 | 	mov	local04, local08
090a0     04 24 66 F0 | 	shl	local04, #4
090a4     14 00 00 FF 
090a8     F8 E5 05 F1 | 	add	objptr, ##10744
090ac     F2 24 02 F1 | 	add	local04, objptr
090b0     12 13 02 FB | 	rdlong	arg01, local04
090b4     13 15 02 F6 | 	mov	arg02, local05
090b8     14 00 00 FF 
090bc     F8 E5 85 F1 | 	sub	objptr, ##10744
090c0     28 85 B1 FD | 	call	#__system___string_cmp
090c4     00 FA 0D F2 | 	cmp	result1, #0 wz
090c8     16 29 02 A6 |  if_e	mov	local06, local08
090cc     01 2C 06 51 |  if_ne	add	local08, #1
090d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
090d4                 | LR__0811
090d4                 | LR__0812
090d4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
090d4     FF FF 7F FF 
090d8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
090dc     35 00 00 AF 
090e0     08 E4 05 A1 |  if_e	add	objptr, ##27144
090e4     F2 28 02 AB |  if_e	rdlong	local06, objptr
090e8     35 00 00 AF 
090ec     08 E4 85 A1 |  if_e	sub	objptr, ##27144
090f0     78 00 90 AD |  if_e	jmp	#LR__0813
090f4     00 12 06 F6 | 	mov	arg01, #0
090f8     F4 E1 B1 FD | 	call	#__system___getiolock_0570
090fc     FD 12 02 F6 | 	mov	arg01, result1
09100     C0 84 B1 FD | 	call	#__system___lockmem
09104     8B 01 00 FF 
09108     27 15 06 F6 | 	mov	arg02, ##@LR__5479
0910c     00 12 06 F6 | 	mov	arg01, #0
09110     00 16 06 F6 | 	mov	arg03, #0
09114     A0 91 B1 FD | 	call	#__system___basic_print_string
09118     51 00 00 FF 
0911c     C4 E5 05 F1 | 	add	objptr, ##41924
09120     F2 14 02 FB | 	rdlong	arg02, objptr
09124     51 00 00 FF 
09128     C4 E5 85 F1 | 	sub	objptr, ##41924
0912c     00 12 06 F6 | 	mov	arg01, #0
09130     00 16 06 F6 | 	mov	arg03, #0
09134     0A 18 06 F6 | 	mov	arg04, #10
09138     00 92 B1 FD | 	call	#__system___basic_print_unsigned
0913c     8B 01 00 FF 
09140     35 15 06 F6 | 	mov	arg02, ##@LR__5480
09144     00 12 06 F6 | 	mov	arg01, #0
09148     00 16 06 F6 | 	mov	arg03, #0
0914c     68 91 B1 FD | 	call	#__system___basic_print_string
09150     00 12 06 F6 | 	mov	arg01, #0
09154     0A 14 06 F6 | 	mov	arg02, #10
09158     00 16 06 F6 | 	mov	arg03, #0
0915c     00 91 B1 FD | 	call	#__system___basic_print_char
09160     00 12 06 F6 | 	mov	arg01, #0
09164     88 E1 B1 FD | 	call	#__system___getiolock_0570
09168     FD 00 68 FC | 	wrlong	#0, result1
0916c                 | LR__0813
0916c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0916c     37 00 00 FF 
09170     44 E4 05 F1 | 	add	objptr, ##28228
09174     F2 14 02 FB | 	rdlong	arg02, objptr
09178     01 14 06 F1 | 	add	arg02, #1
0917c     03 14 66 F0 | 	shl	arg02, #3
09180     02 00 00 FF 
09184     38 E4 85 F1 | 	sub	objptr, ##1080
09188     F2 14 02 F1 | 	add	arg02, objptr
0918c     0A 13 02 FB | 	rdlong	arg01, arg02
09190     8B 01 00 FF 
09194     56 15 06 F6 | 	mov	arg02, ##@LR__5481
09198     35 00 00 FF 
0919c     0C E4 85 F1 | 	sub	objptr, ##27148
091a0     48 84 B1 FD | 	call	#__system___string_cmp
091a4     00 FA 0D F2 | 	cmp	result1, #0 wz
091a8     44 00 90 AD |  if_e	jmp	#LR__0814
091ac     37 00 00 FF 
091b0     44 E4 05 F1 | 	add	objptr, ##28228
091b4     F2 2E 02 FB | 	rdlong	local09, objptr
091b8     01 2E 06 F1 | 	add	local09, #1
091bc     03 2E 66 F0 | 	shl	local09, #3
091c0     02 00 00 FF 
091c4     38 E4 85 F1 | 	sub	objptr, ##1080
091c8     F2 2E 02 F1 | 	add	local09, objptr
091cc     17 13 02 FB | 	rdlong	arg01, local09
091d0     8B 01 00 FF 
091d4     58 15 06 F6 | 	mov	arg02, ##@LR__5482
091d8     35 00 00 FF 
091dc     0C E4 85 F1 | 	sub	objptr, ##27148
091e0     08 84 B1 FD | 	call	#__system___string_cmp
091e4     00 FA 0D F2 | 	cmp	result1, #0 wz
091e8     2B FA 05 56 |  if_ne	mov	result1, #43
091ec     D0 04 90 5D |  if_ne	jmp	#LR__0835
091f0                 | LR__0814
091f0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
091f0     37 00 00 FF 
091f4     44 E4 05 F1 | 	add	objptr, ##28228
091f8     F2 14 02 FB | 	rdlong	arg02, objptr
091fc     01 14 06 F1 | 	add	arg02, #1
09200     03 14 66 F0 | 	shl	arg02, #3
09204     02 00 00 FF 
09208     38 E4 85 F1 | 	sub	objptr, ##1080
0920c     F2 14 02 F1 | 	add	arg02, objptr
09210     0A 13 02 FB | 	rdlong	arg01, arg02
09214     8B 01 00 FF 
09218     5B 15 06 F6 | 	mov	arg02, ##@LR__5483
0921c     35 00 00 FF 
09220     0C E4 85 F1 | 	sub	objptr, ##27148
09224     C4 83 B1 FD | 	call	#__system___string_cmp
09228     00 FA 0D F2 | 	cmp	result1, #0 wz
0922c     37 00 00 AF 
09230     44 E4 05 A1 |  if_e	add	objptr, ##28228
09234     F2 30 02 AB |  if_e	rdlong	local10, objptr
09238     37 00 00 AF 
0923c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09240     01 30 06 A1 |  if_e	add	local10, #1
09244     5C 01 90 AD |  if_e	jmp	#LR__0819
09248     37 00 00 FF 
0924c     44 E4 05 F1 | 	add	objptr, ##28228
09250     F2 30 02 FB | 	rdlong	local10, objptr
09254     37 00 00 FF 
09258     44 E4 85 F1 | 	sub	objptr, ##28228
0925c     02 30 06 F1 | 	add	local10, #2
09260     00 32 06 F6 | 	mov	local11, #0
09264                 | '   l=ct+2 : m=0 : do
09264                 | LR__0815
09264                 | '   if isdec(lparts(l).part$) then 
09264     18 25 02 F6 | 	mov	local04, local10
09268     03 24 66 F0 | 	shl	local04, #3
0926c     35 00 00 FF 
09270     0C E4 05 F1 | 	add	objptr, ##27148
09274     F2 24 02 F1 | 	add	local04, objptr
09278     12 13 02 FB | 	rdlong	arg01, local04
0927c     35 00 00 FF 
09280     0C E4 85 F1 | 	sub	objptr, ##27148
09284     B0 D6 BF FD | 	call	#_isdec
09288     00 FA 0D F2 | 	cmp	result1, #0 wz
0928c     44 00 90 AD |  if_e	jmp	#LR__0816
09290     19 35 02 F6 | 	mov	local12, local11
09294     0F 35 06 F1 | 	add	local12, #local01
09298     18 2F 02 F6 | 	mov	local09, local10
0929c     03 2E 66 F0 | 	shl	local09, #3
092a0     35 00 00 FF 
092a4     0C E4 05 F1 | 	add	objptr, ##27148
092a8     F2 2E 02 F1 | 	add	local09, objptr
092ac     17 13 02 FB | 	rdlong	arg01, local09
092b0     00 14 06 F6 | 	mov	arg02, #0
092b4     35 00 00 FF 
092b8     0C E4 85 F1 | 	sub	objptr, ##27148
092bc     38 B7 B1 FD | 	call	#__system____builtin_atoi
092c0     FD 36 02 F6 | 	mov	local13, result1
092c4                 | 	'.live	local13
092c4                 | 	'.live	local12
092c4     00 34 8E F9 | 	altd	local12, #0
092c8     1B 35 02 F6 | 	mov	local12, local13
092cc     01 32 06 F1 | 	add	local11, #1
092d0     08 00 90 FD | 	jmp	#LR__0817
092d4                 | LR__0816
092d4                 | '     return(17)
092d4     11 FA 05 F6 | 	mov	result1, #17
092d8     E4 03 90 FD | 	jmp	#LR__0835
092dc                 | LR__0817
092dc                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
092dc     18 25 02 F6 | 	mov	local04, local10
092e0     01 24 06 F1 | 	add	local04, #1
092e4     03 24 66 F0 | 	shl	local04, #3
092e8     35 00 00 FF 
092ec     0C E4 05 F1 | 	add	objptr, ##27148
092f0     F2 24 02 F1 | 	add	local04, objptr
092f4     12 13 02 FB | 	rdlong	arg01, local04
092f8     8B 01 00 FF 
092fc     5E 15 06 F6 | 	mov	arg02, ##@LR__5484
09300     35 00 00 FF 
09304     0C E4 85 F1 | 	sub	objptr, ##27148
09308     E0 82 B1 FD | 	call	#__system___string_cmp
0930c     00 FA 0D F2 | 	cmp	result1, #0 wz
09310     3C 00 90 AD |  if_e	jmp	#LR__0818
09314     18 37 02 F6 | 	mov	local13, local10
09318     01 36 06 F1 | 	add	local13, #1
0931c     03 36 66 F0 | 	shl	local13, #3
09320     35 00 00 FF 
09324     0C E4 05 F1 | 	add	objptr, ##27148
09328     F2 36 02 F1 | 	add	local13, objptr
0932c     1B 13 02 FB | 	rdlong	arg01, local13
09330     8B 01 00 FF 
09334     60 15 06 F6 | 	mov	arg02, ##@LR__5485
09338     35 00 00 FF 
0933c     0C E4 85 F1 | 	sub	objptr, ##27148
09340     A8 82 B1 FD | 	call	#__system___string_cmp
09344     00 FA 0D F2 | 	cmp	result1, #0 wz
09348     2C FA 05 56 |  if_ne	mov	result1, #44
0934c     70 03 90 5D |  if_ne	jmp	#LR__0835
09350                 | LR__0818
09350     02 30 06 F1 | 	add	local10, #2
09354     18 25 02 F6 | 	mov	local04, local10
09358     01 24 86 F1 | 	sub	local04, #1
0935c     03 24 66 F0 | 	shl	local04, #3
09360     35 00 00 FF 
09364     0C E4 05 F1 | 	add	objptr, ##27148
09368     F2 24 02 F1 | 	add	local04, objptr
0936c     12 13 02 FB | 	rdlong	arg01, local04
09370     8B 01 00 FF 
09374     62 15 06 F6 | 	mov	arg02, ##@LR__5486
09378     35 00 00 FF 
0937c     0C E4 85 F1 | 	sub	objptr, ##27148
09380     68 82 B1 FD | 	call	#__system___string_cmp
09384     00 FA 0D F2 | 	cmp	result1, #0 wz
09388     03 32 56 52 |  if_ne	cmps	local11, #3 wc
0938c     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0815
09390                 | '   if m>3 then return 45
09390     04 32 56 F2 | 	cmps	local11, #4 wc
09394     2D FA 05 36 |  if_ae	mov	result1, #45
09398     24 03 90 3D |  if_ae	jmp	#LR__0835
0939c     00 39 06 F6 | 	mov	local14, #256
093a0     0C 3A 06 F6 | 	mov	local15, #12
093a4                 | LR__0819
093a4                 | '   arraytype=array_no_type : esize=12
093a4                 | ' 1350 
093a4                 | '   if lparts(l).part$="as" then
093a4     18 25 02 F6 | 	mov	local04, local10
093a8     03 24 66 F0 | 	shl	local04, #3
093ac     35 00 00 FF 
093b0     0C E4 05 F1 | 	add	objptr, ##27148
093b4     F2 24 02 F1 | 	add	local04, objptr
093b8     12 13 02 FB | 	rdlong	arg01, local04
093bc     8B 01 00 FF 
093c0     64 15 06 F6 | 	mov	arg02, ##@LR__5487
093c4     35 00 00 FF 
093c8     0C E4 85 F1 | 	sub	objptr, ##27148
093cc     1C 82 B1 FD | 	call	#__system___string_cmp
093d0     00 FA 0D F2 | 	cmp	result1, #0 wz
093d4     E8 01 90 5D |  if_ne	jmp	#LR__0834
093d8                 | '     select case lparts(l+1).part$
093d8     18 35 02 F6 | 	mov	local12, local10
093dc     01 34 06 F1 | 	add	local12, #1
093e0     03 34 66 F0 | 	shl	local12, #3
093e4     35 00 00 FF 
093e8     0C E4 05 F1 | 	add	objptr, ##27148
093ec     F2 34 02 F1 | 	add	local12, objptr
093f0     1A 3D 02 FB | 	rdlong	local16, local12
093f4     8B 01 00 FF 
093f8     67 15 06 F6 | 	mov	arg02, ##@LR__5488
093fc     1E 13 02 F6 | 	mov	arg01, local16
09400     35 00 00 FF 
09404     0C E4 85 F1 | 	sub	objptr, ##27148
09408     E0 81 B1 FD | 	call	#__system___string_cmp
0940c     00 FA 0D F2 | 	cmp	result1, #0 wz
09410     0C 01 90 AD |  if_e	jmp	#LR__0820
09414     8B 01 00 FF 
09418     6C 15 06 F6 | 	mov	arg02, ##@LR__5489
0941c     1E 13 02 F6 | 	mov	arg01, local16
09420     C8 81 B1 FD | 	call	#__system___string_cmp
09424     00 FA 0D F2 | 	cmp	result1, #0 wz
09428     00 01 90 AD |  if_e	jmp	#LR__0821
0942c     8B 01 00 FF 
09430     72 15 06 F6 | 	mov	arg02, ##@LR__5490
09434     1E 13 02 F6 | 	mov	arg01, local16
09438     B0 81 B1 FD | 	call	#__system___string_cmp
0943c     00 FA 0D F2 | 	cmp	result1, #0 wz
09440     F4 00 90 AD |  if_e	jmp	#LR__0822
09444     8B 01 00 FF 
09448     78 15 06 F6 | 	mov	arg02, ##@LR__5491
0944c     1E 13 02 F6 | 	mov	arg01, local16
09450     98 81 B1 FD | 	call	#__system___string_cmp
09454     00 FA 0D F2 | 	cmp	result1, #0 wz
09458     E8 00 90 AD |  if_e	jmp	#LR__0823
0945c     8B 01 00 FF 
09460     7F 15 06 F6 | 	mov	arg02, ##@LR__5492
09464     1E 13 02 F6 | 	mov	arg01, local16
09468     80 81 B1 FD | 	call	#__system___string_cmp
0946c     00 FA 0D F2 | 	cmp	result1, #0 wz
09470     DC 00 90 AD |  if_e	jmp	#LR__0824
09474     8B 01 00 FF 
09478     84 15 06 F6 | 	mov	arg02, ##@LR__5493
0947c     1E 13 02 F6 | 	mov	arg01, local16
09480     68 81 B1 FD | 	call	#__system___string_cmp
09484     00 FA 0D F2 | 	cmp	result1, #0 wz
09488     D0 00 90 AD |  if_e	jmp	#LR__0825
0948c     8B 01 00 FF 
09490     8C 15 06 F6 | 	mov	arg02, ##@LR__5494
09494     1E 13 02 F6 | 	mov	arg01, local16
09498     50 81 B1 FD | 	call	#__system___string_cmp
0949c     00 FA 0D F2 | 	cmp	result1, #0 wz
094a0     C4 00 90 AD |  if_e	jmp	#LR__0826
094a4     8B 01 00 FF 
094a8     92 15 06 F6 | 	mov	arg02, ##@LR__5495
094ac     1E 13 02 F6 | 	mov	arg01, local16
094b0     38 81 B1 FD | 	call	#__system___string_cmp
094b4     00 FA 0D F2 | 	cmp	result1, #0 wz
094b8     B8 00 90 AD |  if_e	jmp	#LR__0827
094bc     8B 01 00 FF 
094c0     98 15 06 F6 | 	mov	arg02, ##@LR__5496
094c4     1E 13 02 F6 | 	mov	arg01, local16
094c8     20 81 B1 FD | 	call	#__system___string_cmp
094cc     00 FA 0D F2 | 	cmp	result1, #0 wz
094d0     AC 00 90 AD |  if_e	jmp	#LR__0828
094d4     8B 01 00 FF 
094d8     9F 15 06 F6 | 	mov	arg02, ##@LR__5497
094dc     1E 13 02 F6 | 	mov	arg01, local16
094e0     08 81 B1 FD | 	call	#__system___string_cmp
094e4     00 FA 0D F2 | 	cmp	result1, #0 wz
094e8     A0 00 90 AD |  if_e	jmp	#LR__0829
094ec     8B 01 00 FF 
094f0     A6 15 06 F6 | 	mov	arg02, ##@LR__5498
094f4     1E 13 02 F6 | 	mov	arg01, local16
094f8     F0 80 B1 FD | 	call	#__system___string_cmp
094fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09500     94 00 90 AD |  if_e	jmp	#LR__0830
09504     8B 01 00 FF 
09508     AD 15 06 F6 | 	mov	arg02, ##@LR__5499
0950c     1E 13 02 F6 | 	mov	arg01, local16
09510     D8 80 B1 FD | 	call	#__system___string_cmp
09514     00 FA 0D F2 | 	cmp	result1, #0 wz
09518     88 00 90 AD |  if_e	jmp	#LR__0831
0951c     90 00 90 FD | 	jmp	#LR__0832
09520                 | LR__0820
09520     01 39 06 F6 | 	mov	local14, #257
09524     01 3A 06 F6 | 	mov	local15, #1
09528     94 00 90 FD | 	jmp	#LR__0834
0952c                 | LR__0821
0952c     02 39 06 F6 | 	mov	local14, #258
09530     01 3A 06 F6 | 	mov	local15, #1
09534     88 00 90 FD | 	jmp	#LR__0834
09538                 | LR__0822
09538     03 39 06 F6 | 	mov	local14, #259
0953c     02 3A 06 F6 | 	mov	local15, #2
09540     7C 00 90 FD | 	jmp	#LR__0834
09544                 | LR__0823
09544     04 39 06 F6 | 	mov	local14, #260
09548     02 3A 06 F6 | 	mov	local15, #2
0954c     70 00 90 FD | 	jmp	#LR__0834
09550                 | LR__0824
09550     05 39 06 F6 | 	mov	local14, #261
09554     04 3A 06 F6 | 	mov	local15, #4
09558     64 00 90 FD | 	jmp	#LR__0834
0955c                 | LR__0825
0955c     05 39 06 F6 | 	mov	local14, #261
09560     04 3A 06 F6 | 	mov	local15, #4
09564     58 00 90 FD | 	jmp	#LR__0834
09568                 | LR__0826
09568     06 39 06 F6 | 	mov	local14, #262
0956c     04 3A 06 F6 | 	mov	local15, #4
09570     4C 00 90 FD | 	jmp	#LR__0834
09574                 | LR__0827
09574     07 39 06 F6 | 	mov	local14, #263
09578     08 3A 06 F6 | 	mov	local15, #8
0957c     40 00 90 FD | 	jmp	#LR__0834
09580                 | LR__0828
09580     08 39 06 F6 | 	mov	local14, #264
09584     08 3A 06 F6 | 	mov	local15, #8
09588     34 00 90 FD | 	jmp	#LR__0834
0958c                 | LR__0829
0958c     09 39 06 F6 | 	mov	local14, #265
09590     04 3A 06 F6 | 	mov	local15, #4
09594     28 00 90 FD | 	jmp	#LR__0834
09598                 | LR__0830
09598     0A 39 06 F6 | 	mov	local14, #266
0959c     08 3A 06 F6 | 	mov	local15, #8
095a0     1C 00 90 FD | 	jmp	#LR__0834
095a4                 | LR__0831
095a4     0B 39 06 F6 | 	mov	local14, #267
095a8     04 3A 06 F6 | 	mov	local15, #4
095ac     10 00 90 FD | 	jmp	#LR__0834
095b0                 | LR__0832
095b0     2F FA 05 F6 | 	mov	result1, #47
095b4     08 01 90 FD | 	jmp	#LR__0835
095b8                 | LR__0833
095b8                 | '   return 46
095b8     2E FA 05 F6 | 	mov	result1, #46
095bc     00 01 90 FD | 	jmp	#LR__0835
095c0                 | LR__0834
095c0     0F 3B 02 FD | 	qmul	local15, local01
095c4     18 2A 62 FD | 	getqx	local07
095c8     10 2B 02 FD | 	qmul	local07, local02
095cc     18 3C 62 FD | 	getqx	local16
095d0     11 3D 02 FD | 	qmul	local16, local03
095d4     51 00 00 FF 
095d8     AC E5 05 F1 | 	add	objptr, ##41900
095dc     F2 3E 02 FB | 	rdlong	local17, objptr
095e0     1C 15 02 F6 | 	mov	arg02, local14
095e4     18 3C 62 FD | 	getqx	local16
095e8     1E 3F 82 F1 | 	sub	local17, local16
095ec     10 3E 86 F1 | 	sub	local17, #16
095f0     0F 3E 26 F5 | 	andn	local17, #15
095f4     F2 3E 62 FC | 	wrlong	local17, objptr
095f8     51 00 00 FF 
095fc     AC E5 85 F1 | 	sub	objptr, ##41900
09600     1F 13 02 F6 | 	mov	arg01, local17
09604     D0 4B B1 FD | 	call	#_psdpoke
09608     1F 13 02 F6 | 	mov	arg01, local17
0960c     02 12 06 F1 | 	add	arg01, #2
09610     1D 15 02 F6 | 	mov	arg02, local15
09614     C0 4B B1 FD | 	call	#_psdpoke
09618     1F 13 02 F6 | 	mov	arg01, local17
0961c     04 12 06 F1 | 	add	arg01, #4
09620     0F 15 02 F6 | 	mov	arg02, local01
09624     68 4B B1 FD | 	call	#_pslpoke
09628     1F 13 02 F6 | 	mov	arg01, local17
0962c     08 12 06 F1 | 	add	arg01, #8
09630     10 15 02 F6 | 	mov	arg02, local02
09634     58 4B B1 FD | 	call	#_pslpoke
09638     1F 13 02 F6 | 	mov	arg01, local17
0963c     0C 12 06 F1 | 	add	arg01, #12
09640     11 15 02 F6 | 	mov	arg02, local03
09644     48 4B B1 FD | 	call	#_pslpoke
09648     14 35 02 F6 | 	mov	local12, local06
0964c     04 34 66 F0 | 	shl	local12, #4
09650     14 00 00 FF 
09654     F8 E5 05 F1 | 	add	objptr, ##10744
09658     F2 34 02 F1 | 	add	local12, objptr
0965c     1A 27 62 FC | 	wrlong	local05, local12
09660     14 35 02 F6 | 	mov	local12, local06
09664     04 34 66 F0 | 	shl	local12, #4
09668     F2 34 02 F1 | 	add	local12, objptr
0966c     04 34 06 F1 | 	add	local12, #4
09670     1A 3F 62 FC | 	wrlong	local17, local12
09674     14 35 02 F6 | 	mov	local12, local06
09678     04 34 66 F0 | 	shl	local12, #4
0967c     F2 34 02 F1 | 	add	local12, objptr
09680     0C 34 06 F1 | 	add	local12, #12
09684     1A 39 62 FC | 	wrlong	local14, local12
09688                 | ' memtop=arrayptr
09688                 | ' psdpoke arrayptr,arraytype 
09688                 | ' psdpoke arrayptr+2,esize 
09688                 | ' pslpoke arrayptr+4,dims(0)
09688                 | ' pslpoke arrayptr+8,dims(1)
09688                 | ' pslpoke arrayptr+12,dims(2)
09688                 | ' variables(j).name=varname2$
09688                 | ' variables(j).value.uresult=arrayptr
09688                 | ' variables(j).vartype=arraytype
09688                 | ' if j=varnum then varnum+=1
09688     20 00 00 FF 
0968c     10 E4 05 F1 | 	add	objptr, ##16400
09690     F2 2A 02 FB | 	rdlong	local07, objptr
09694     35 00 00 FF 
09698     08 E4 85 F1 | 	sub	objptr, ##27144
0969c     15 29 0A F2 | 	cmp	local06, local07 wz
096a0     35 00 00 AF 
096a4     08 E4 05 A1 |  if_e	add	objptr, ##27144
096a8     F2 2A 02 AB |  if_e	rdlong	local07, objptr
096ac     01 2A 06 A1 |  if_e	add	local07, #1
096b0     F2 2A 62 AC |  if_e	wrlong	local07, objptr
096b4     35 00 00 AF 
096b8     08 E4 85 A1 |  if_e	sub	objptr, ##27144
096bc                 | ' return 0
096bc     00 FA 05 F6 | 	mov	result1, #0
096c0                 | LR__0835
096c0     A7 F0 03 F6 | 	mov	ptra, fp
096c4     B2 00 A0 FD | 	call	#popregs_
096c8                 | _compile_dim_ret
096c8     2D 00 64 FD | 	ret
096cc                 | 
096cc                 | ' 
096cc                 | ' '----- compile 'for' command. 
096cc                 | ' 
096cc                 | ' function compile_for() as ulong  
096cc                 | _compile_for
096cc     05 4A 05 F6 | 	mov	COUNT_, #5
096d0     A8 00 A0 FD | 	call	#pushregs_
096d4                 | ' 
096d4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
096d4     37 00 00 FF 
096d8     44 E4 05 F1 | 	add	objptr, ##28228
096dc     F2 14 02 FB | 	rdlong	arg02, objptr
096e0     01 14 06 F1 | 	add	arg02, #1
096e4     03 14 66 F0 | 	shl	arg02, #3
096e8     02 00 00 FF 
096ec     38 E4 85 F1 | 	sub	objptr, ##1080
096f0     F2 14 02 F1 | 	add	arg02, objptr
096f4     0A 13 02 FB | 	rdlong	arg01, arg02
096f8     35 00 00 FF 
096fc     0C E4 85 F1 | 	sub	objptr, ##27148
09700                 | ' 
09700                 | ' select case s
09700     89 01 00 FF 
09704     F8 14 06 F6 | 	mov	arg02, ##@LR__5241
09708     E0 7E B1 FD | 	call	#__system___string_cmp
0970c     00 FA 0D F2 | 	cmp	result1, #0 wz
09710     1B FA 05 A6 |  if_e	mov	result1, #27
09714     00 FA 05 56 |  if_ne	mov	result1, #0
09718     00 FA 0D F2 | 	cmp	result1, #0 wz
0971c     0C 00 90 AD |  if_e	jmp	#LR__0840
09720     05 12 06 F6 | 	mov	arg01, #5
09724     F8 E3 BF FD | 	call	#_compile_immediate_assign
09728     08 00 90 FD | 	jmp	#LR__0841
0972c                 | LR__0840
0972c     20 FA 05 F6 | 	mov	result1, #32
09730     D0 02 90 FD | 	jmp	#LR__0845
09734                 | LR__0841
09734     4A 00 00 FF 
09738     7C E4 05 F1 | 	add	objptr, ##38012
0973c     F2 14 02 FB | 	rdlong	arg02, objptr
09740     0A 13 02 F6 | 	mov	arg01, arg02
09744     01 12 86 F1 | 	sub	arg01, #1
09748     09 25 02 F6 | 	mov	local04, arg01
0974c     01 24 66 F0 | 	shl	local04, #1
09750     09 25 02 F1 | 	add	local04, arg01
09754     02 24 66 F0 | 	shl	local04, #2
09758     03 00 00 FF 
0975c     00 E4 85 F1 | 	sub	objptr, ##1536
09760     F2 24 02 F1 | 	add	local04, objptr
09764     12 1F 02 FB | 	rdlong	local01, local04
09768     04 24 06 F1 | 	add	local04, #4
0976c     12 25 02 FB | 	rdlong	local04, local04
09770     01 14 86 F1 | 	sub	arg02, #1
09774     0A 13 02 F6 | 	mov	arg01, arg02
09778     01 12 66 F0 | 	shl	arg01, #1
0977c     0A 13 02 F1 | 	add	arg01, arg02
09780     02 12 66 F0 | 	shl	arg01, #2
09784     F2 12 02 F1 | 	add	arg01, objptr
09788     08 12 06 F1 | 	add	arg01, #8
0978c     09 15 02 FB | 	rdlong	arg02, arg01
09790     12 21 02 F6 | 	mov	local02, local04
09794     0A 23 02 F6 | 	mov	local03, arg02
09798                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09798     17 22 0E F2 | 	cmp	local03, #23 wz
0979c     47 00 00 FF 
097a0     7C E4 85 F1 | 	sub	objptr, ##36476
097a4     22 FA 05 56 |  if_ne	mov	result1, #34
097a8     58 02 90 5D |  if_ne	jmp	#LR__0845
097ac     0F 27 02 F6 | 	mov	local05, local01
097b0                 | ' varnum=t1.result.uresult
097b0                 | ' if lparts(ct).part$<>"to" then return 33
097b0     37 00 00 FF 
097b4     44 E4 05 F1 | 	add	objptr, ##28228
097b8     F2 1E 02 FB | 	rdlong	local01, objptr
097bc     03 1E 66 F0 | 	shl	local01, #3
097c0     02 00 00 FF 
097c4     38 E4 85 F1 | 	sub	objptr, ##1080
097c8     F2 1E 02 F1 | 	add	local01, objptr
097cc     0F 13 02 FB | 	rdlong	arg01, local01
097d0     8B 01 00 FF 
097d4     B4 15 06 F6 | 	mov	arg02, ##@LR__5500
097d8     35 00 00 FF 
097dc     0C E4 85 F1 | 	sub	objptr, ##27148
097e0     08 7E B1 FD | 	call	#__system___string_cmp
097e4     00 FA 0D F2 | 	cmp	result1, #0 wz
097e8     21 FA 05 56 |  if_ne	mov	result1, #33
097ec     14 02 90 5D |  if_ne	jmp	#LR__0845
097f0     37 00 00 FF 
097f4     44 E4 05 F1 | 	add	objptr, ##28228
097f8     F2 24 02 FB | 	rdlong	local04, objptr
097fc     01 24 06 F1 | 	add	local04, #1
09800     F2 24 62 FC | 	wrlong	local04, objptr
09804     37 00 00 FF 
09808     44 E4 85 F1 | 	sub	objptr, ##28228
0980c     EC 07 B0 FD | 	call	#_expr
09810                 | ' ct+=1
09810                 | ' expr()  										' there is "to" value pushed on the stack
09810                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09810     37 00 00 FF 
09814     44 E4 05 F1 | 	add	objptr, ##28228
09818     F2 24 02 FB | 	rdlong	local04, objptr
0981c     03 24 66 F0 | 	shl	local04, #3
09820     02 00 00 FF 
09824     38 E4 85 F1 | 	sub	objptr, ##1080
09828     F2 24 02 F1 | 	add	local04, objptr
0982c     12 13 02 FB | 	rdlong	arg01, local04
09830     8B 01 00 FF 
09834     B7 15 06 F6 | 	mov	arg02, ##@LR__5501
09838     35 00 00 FF 
0983c     0C E4 85 F1 | 	sub	objptr, ##27148
09840     A8 7D B1 FD | 	call	#__system___string_cmp
09844     00 FA 0D F2 | 	cmp	result1, #0 wz
09848     3C 00 90 AD |  if_e	jmp	#LR__0842
0984c     37 00 00 FF 
09850     44 E4 05 F1 | 	add	objptr, ##28228
09854     F2 24 02 FB | 	rdlong	local04, objptr
09858     03 24 66 F0 | 	shl	local04, #3
0985c     02 00 00 FF 
09860     38 E4 85 F1 | 	sub	objptr, ##1080
09864     F2 24 02 F1 | 	add	local04, objptr
09868     12 13 02 FB | 	rdlong	arg01, local04
0986c     8B 01 00 FF 
09870     BC 15 06 F6 | 	mov	arg02, ##@LR__5502
09874     35 00 00 FF 
09878     0C E4 85 F1 | 	sub	objptr, ##27148
0987c     6C 7D B1 FD | 	call	#__system___string_cmp
09880     00 FA 0D F2 | 	cmp	result1, #0 wz
09884     24 00 90 5D |  if_ne	jmp	#LR__0843
09888                 | LR__0842
09888     37 00 00 FF 
0988c     44 E4 05 F1 | 	add	objptr, ##28228
09890     F2 1E 02 FB | 	rdlong	local01, objptr
09894     01 1E 06 F1 | 	add	local01, #1
09898     F2 1E 62 FC | 	wrlong	local01, objptr
0989c     37 00 00 FF 
098a0     44 E4 85 F1 | 	sub	objptr, ##28228
098a4     54 07 B0 FD | 	call	#_expr
098a8     78 00 90 FD | 	jmp	#LR__0844
098ac                 | LR__0843
098ac     4A 00 00 FF 
098b0     7C E4 05 F1 | 	add	objptr, ##38012
098b4     F2 1E 02 FB | 	rdlong	local01, objptr
098b8     0F 25 02 F6 | 	mov	local04, local01
098bc     01 24 66 F0 | 	shl	local04, #1
098c0     0F 25 02 F1 | 	add	local04, local01
098c4     02 24 66 F0 | 	shl	local04, #2
098c8     03 00 00 FF 
098cc     00 E4 85 F1 | 	sub	objptr, ##1536
098d0     F2 24 02 F1 | 	add	local04, objptr
098d4     08 24 06 F1 | 	add	local04, #8
098d8     12 39 68 FC | 	wrlong	#28, local04
098dc     03 00 00 FF 
098e0     00 E4 05 F1 | 	add	objptr, ##1536
098e4     F2 1E 02 FB | 	rdlong	local01, objptr
098e8     0F 25 02 F6 | 	mov	local04, local01
098ec     01 24 66 F0 | 	shl	local04, #1
098f0     0F 25 02 F1 | 	add	local04, local01
098f4     02 24 66 F0 | 	shl	local04, #2
098f8     03 00 00 FF 
098fc     00 E4 85 F1 | 	sub	objptr, ##1536
09900     F2 24 02 F1 | 	add	local04, objptr
09904     12 03 68 FC | 	wrlong	#1, local04
09908     03 00 00 FF 
0990c     00 E4 05 F1 | 	add	objptr, ##1536
09910     F2 1E 02 FB | 	rdlong	local01, objptr
09914     01 1E 06 F1 | 	add	local01, #1
09918     F2 1E 62 FC | 	wrlong	local01, objptr
0991c     4A 00 00 FF 
09920     7C E4 85 F1 | 	sub	objptr, ##38012
09924                 | LR__0844
09924     4A 00 00 FF 
09928     7C E4 05 F1 | 	add	objptr, ##38012
0992c     F2 1E 02 FB | 	rdlong	local01, objptr
09930     0F 25 02 F6 | 	mov	local04, local01
09934     01 24 66 F0 | 	shl	local04, #1
09938     0F 25 02 F1 | 	add	local04, local01
0993c     02 24 66 F0 | 	shl	local04, #2
09940     03 00 00 FF 
09944     00 E4 85 F1 | 	sub	objptr, ##1536
09948     F2 24 02 F1 | 	add	local04, objptr
0994c     08 24 06 F1 | 	add	local04, #8
09950     12 39 68 FC | 	wrlong	#28, local04
09954     03 00 00 FF 
09958     00 E4 05 F1 | 	add	objptr, ##1536
0995c     F2 1E 02 FB | 	rdlong	local01, objptr
09960     0F 25 02 F6 | 	mov	local04, local01
09964     01 24 66 F0 | 	shl	local04, #1
09968     0F 25 02 F1 | 	add	local04, local01
0996c     02 24 66 F0 | 	shl	local04, #2
09970     03 00 00 FF 
09974     00 E4 85 F1 | 	sub	objptr, ##1536
09978     F2 24 02 F1 | 	add	local04, objptr
0997c     12 27 62 FC | 	wrlong	local05, local04
09980     03 00 00 FF 
09984     00 E4 05 F1 | 	add	objptr, ##1536
09988     F2 26 02 FB | 	rdlong	local05, objptr
0998c     01 26 06 F1 | 	add	local05, #1
09990     F2 26 62 FC | 	wrlong	local05, objptr
09994     13 1F 02 F6 | 	mov	local01, local05
09998     01 1E 66 F0 | 	shl	local01, #1
0999c     13 1F 02 F1 | 	add	local01, local05
099a0     02 1E 66 F0 | 	shl	local01, #2
099a4     03 00 00 FF 
099a8     00 E4 85 F1 | 	sub	objptr, ##1536
099ac     F2 1E 02 F1 | 	add	local01, objptr
099b0     08 1E 06 F1 | 	add	local01, #8
099b4     0F 95 68 FC | 	wrlong	#74, local01
099b8     03 00 00 FF 
099bc     00 E4 05 F1 | 	add	objptr, ##1536
099c0     F2 26 02 FB | 	rdlong	local05, objptr
099c4     13 1F 02 F6 | 	mov	local01, local05
099c8     01 1E 66 F0 | 	shl	local01, #1
099cc     13 1F 02 F1 | 	add	local01, local05
099d0     02 1E 66 F0 | 	shl	local01, #2
099d4     03 00 00 FF 
099d8     00 E4 85 F1 | 	sub	objptr, ##1536
099dc     F2 1E 02 F1 | 	add	local01, objptr
099e0     0F 01 68 FC | 	wrlong	#0, local01
099e4     03 00 00 FF 
099e8     00 E4 05 F1 | 	add	objptr, ##1536
099ec     F2 26 02 FB | 	rdlong	local05, objptr
099f0     01 26 06 F1 | 	add	local05, #1
099f4     F2 26 62 FC | 	wrlong	local05, objptr
099f8     4A 00 00 FF 
099fc     7C E4 85 F1 | 	sub	objptr, ##38012
09a00                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09a00                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09a00                 | ' return 0
09a00     00 FA 05 F6 | 	mov	result1, #0
09a04                 | LR__0845
09a04     A7 F0 03 F6 | 	mov	ptra, fp
09a08     B2 00 A0 FD | 	call	#popregs_
09a0c                 | _compile_for_ret
09a0c     2D 00 64 FD | 	ret
09a10                 | 
09a10                 | ' 
09a10                 | ' '----- compile 'next' command. 
09a10                 | ' 
09a10                 | ' function compile_next() as ulong
09a10                 | _compile_next
09a10     04 4A 05 F6 | 	mov	COUNT_, #4
09a14     A8 00 A0 FD | 	call	#pushregs_
09a18     37 00 00 FF 
09a1c     44 E4 05 F1 | 	add	objptr, ##28228
09a20     F2 14 02 FB | 	rdlong	arg02, objptr
09a24     03 14 66 F0 | 	shl	arg02, #3
09a28     02 00 00 FF 
09a2c     38 E4 85 F1 | 	sub	objptr, ##1080
09a30     F2 14 02 F1 | 	add	arg02, objptr
09a34     0A 1F 02 FB | 	rdlong	local01, arg02
09a38                 | ' 
09a38                 | ' varname$=lparts(ct).part$ 
09a38                 | ' if varnum=0 then return 35
09a38     04 E4 85 F1 | 	sub	objptr, #4
09a3c     F2 14 0A FB | 	rdlong	arg02, objptr wz
09a40     35 00 00 FF 
09a44     08 E4 85 F1 | 	sub	objptr, ##27144
09a48     23 FA 05 A6 |  if_e	mov	result1, #35
09a4c     4C 01 90 AD |  if_e	jmp	#LR__0852
09a50     01 20 66 F6 | 	neg	local02, #1
09a54                 | ' j=-1
09a54                 | ' for i=0 to varnum-1
09a54     00 22 06 F6 | 	mov	local03, #0
09a58     35 00 00 FF 
09a5c     08 E4 05 F1 | 	add	objptr, ##27144
09a60     F2 24 02 FB | 	rdlong	local04, objptr
09a64     35 00 00 FF 
09a68     08 E4 85 F1 | 	sub	objptr, ##27144
09a6c                 | LR__0850
09a6c     12 23 12 F2 | 	cmp	local03, local04 wc
09a70     38 00 90 3D |  if_ae	jmp	#LR__0851
09a74                 | '   if variables(i).name=varname$ then j=i : exit
09a74     11 15 02 F6 | 	mov	arg02, local03
09a78     04 14 66 F0 | 	shl	arg02, #4
09a7c     14 00 00 FF 
09a80     F8 E5 05 F1 | 	add	objptr, ##10744
09a84     F2 14 02 F1 | 	add	arg02, objptr
09a88     0A 13 02 FB | 	rdlong	arg01, arg02
09a8c     0F 15 02 F6 | 	mov	arg02, local01
09a90     14 00 00 FF 
09a94     F8 E5 85 F1 | 	sub	objptr, ##10744
09a98     50 7B B1 FD | 	call	#__system___string_cmp
09a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09aa0     11 21 02 A6 |  if_e	mov	local02, local03
09aa4     01 22 06 51 |  if_ne	add	local03, #1
09aa8     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
09aac                 | LR__0851
09aac                 | ' if j=-1 then return 35
09aac     FF FF 7F FF 
09ab0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09ab4     23 FA 05 A6 |  if_e	mov	result1, #35
09ab8     E0 00 90 AD |  if_e	jmp	#LR__0852
09abc     4A 00 00 FF 
09ac0     7C E4 05 F1 | 	add	objptr, ##38012
09ac4     F2 24 02 FB | 	rdlong	local04, objptr
09ac8     12 23 02 F6 | 	mov	local03, local04
09acc     01 22 66 F0 | 	shl	local03, #1
09ad0     12 23 02 F1 | 	add	local03, local04
09ad4     02 22 66 F0 | 	shl	local03, #2
09ad8     03 00 00 FF 
09adc     00 E4 85 F1 | 	sub	objptr, ##1536
09ae0     F2 22 02 F1 | 	add	local03, objptr
09ae4     08 22 06 F1 | 	add	local03, #8
09ae8     11 39 68 FC | 	wrlong	#28, local03
09aec     03 00 00 FF 
09af0     00 E4 05 F1 | 	add	objptr, ##1536
09af4     F2 24 02 FB | 	rdlong	local04, objptr
09af8     12 23 02 F6 | 	mov	local03, local04
09afc     01 22 66 F0 | 	shl	local03, #1
09b00     12 23 02 F1 | 	add	local03, local04
09b04     02 22 66 F0 | 	shl	local03, #2
09b08     03 00 00 FF 
09b0c     00 E4 85 F1 | 	sub	objptr, ##1536
09b10     F2 22 02 F1 | 	add	local03, objptr
09b14     11 21 62 FC | 	wrlong	local02, local03
09b18     03 00 00 FF 
09b1c     00 E4 05 F1 | 	add	objptr, ##1536
09b20     F2 24 02 FB | 	rdlong	local04, objptr
09b24     01 24 06 F1 | 	add	local04, #1
09b28     F2 24 62 FC | 	wrlong	local04, objptr
09b2c     12 23 02 F6 | 	mov	local03, local04
09b30     01 22 66 F0 | 	shl	local03, #1
09b34     12 23 02 F1 | 	add	local03, local04
09b38     02 22 66 F0 | 	shl	local03, #2
09b3c     03 00 00 FF 
09b40     00 E4 85 F1 | 	sub	objptr, ##1536
09b44     F2 22 02 F1 | 	add	local03, objptr
09b48     08 22 06 F1 | 	add	local03, #8
09b4c     11 97 68 FC | 	wrlong	#75, local03
09b50     03 00 00 FF 
09b54     00 E4 05 F1 | 	add	objptr, ##1536
09b58     F2 24 02 FB | 	rdlong	local04, objptr
09b5c     12 23 02 F6 | 	mov	local03, local04
09b60     01 22 66 F0 | 	shl	local03, #1
09b64     12 23 02 F1 | 	add	local03, local04
09b68     02 22 66 F0 | 	shl	local03, #2
09b6c     03 00 00 FF 
09b70     00 E4 85 F1 | 	sub	objptr, ##1536
09b74     F2 22 02 F1 | 	add	local03, objptr
09b78     11 01 68 FC | 	wrlong	#0, local03
09b7c     03 00 00 FF 
09b80     00 E4 05 F1 | 	add	objptr, ##1536
09b84     F2 24 02 FB | 	rdlong	local04, objptr
09b88     01 24 06 F1 | 	add	local04, #1
09b8c     F2 24 62 FC | 	wrlong	local04, objptr
09b90     4A 00 00 FF 
09b94     7C E4 85 F1 | 	sub	objptr, ##38012
09b98                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09b98                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09b98                 | ' return 0
09b98     00 FA 05 F6 | 	mov	result1, #0
09b9c                 | LR__0852
09b9c     A7 F0 03 F6 | 	mov	ptra, fp
09ba0     B2 00 A0 FD | 	call	#popregs_
09ba4                 | _compile_next_ret
09ba4     2D 00 64 FD | 	ret
09ba8                 | 
09ba8                 | ' 
09ba8                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
09ba8                 | ' 
09ba8                 | ' function compile_gosub() as ulong
09ba8                 | _compile_gosub
09ba8     02 4A 05 F6 | 	mov	COUNT_, #2
09bac     A8 00 A0 FD | 	call	#pushregs_
09bb0     4A 00 00 FF 
09bb4     7C E4 05 F1 | 	add	objptr, ##38012
09bb8     F2 1E 02 FB | 	rdlong	local01, objptr
09bbc     0F 21 02 F6 | 	mov	local02, local01
09bc0     01 20 66 F0 | 	shl	local02, #1
09bc4     0F 21 02 F1 | 	add	local02, local01
09bc8     02 20 66 F0 | 	shl	local02, #2
09bcc     03 00 00 FF 
09bd0     00 E4 85 F1 | 	sub	objptr, ##1536
09bd4     F2 20 02 F1 | 	add	local02, objptr
09bd8     08 20 06 F1 | 	add	local02, #8
09bdc     10 53 69 FC | 	wrlong	#169, local02
09be0     03 00 00 FF 
09be4     00 E4 05 F1 | 	add	objptr, ##1536
09be8     F2 20 02 FB | 	rdlong	local02, objptr
09bec     01 20 06 F1 | 	add	local02, #1
09bf0     F2 20 62 FC | 	wrlong	local02, objptr
09bf4     4A 00 00 FF 
09bf8     7C E4 85 F1 | 	sub	objptr, ##38012
09bfc     0C 00 B0 FD | 	call	#_compile_goto
09c00                 | ' compiledline(lineptr).result_type=token_gosub
09c00                 | ' lineptr+=1
09c00                 | ' err=compile_goto()
09c00                 | ' return err
09c00     A7 F0 03 F6 | 	mov	ptra, fp
09c04     B2 00 A0 FD | 	call	#popregs_
09c08                 | _compile_gosub_ret
09c08     2D 00 64 FD | 	ret
09c0c                 | 
09c0c                 | ' 
09c0c                 | ' '----- compile 'goto' 
09c0c                 | ' 
09c0c                 | ' function compile_goto( ) as ulong
09c0c                 | _compile_goto
09c0c     03 4A 05 F6 | 	mov	COUNT_, #3
09c10     A8 00 A0 FD | 	call	#pushregs_
09c14     34 F0 07 F1 | 	add	ptra, #52
09c18                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09c18     37 00 00 FF 
09c1c     44 E4 05 F1 | 	add	objptr, ##28228
09c20     F2 16 02 FB | 	rdlong	arg03, objptr
09c24     03 16 66 F0 | 	shl	arg03, #3
09c28     02 00 00 FF 
09c2c     38 E4 85 F1 | 	sub	objptr, ##1080
09c30     F2 16 02 F1 | 	add	arg03, objptr
09c34     04 16 06 F1 | 	add	arg03, #4
09c38     0B 17 02 FB | 	rdlong	arg03, arg03
09c3c     01 00 00 FF 
09c40     00 16 0E F2 | 	cmp	arg03, ##512 wz
09c44     35 00 00 FF 
09c48     0C E4 85 F1 | 	sub	objptr, ##27148
09c4c     CC 02 90 5D |  if_ne	jmp	#LR__0865
09c50     37 00 00 FF 
09c54     44 E4 05 F1 | 	add	objptr, ##28228
09c58     F2 16 02 FB | 	rdlong	arg03, objptr
09c5c     01 16 06 F1 | 	add	arg03, #1
09c60     03 16 66 F0 | 	shl	arg03, #3
09c64     02 00 00 FF 
09c68     38 E4 85 F1 | 	sub	objptr, ##1080
09c6c     F2 16 02 F1 | 	add	arg03, objptr
09c70     04 16 06 F1 | 	add	arg03, #4
09c74     0B 17 02 FB | 	rdlong	arg03, arg03
09c78     FE 17 0E F2 | 	cmp	arg03, #510 wz
09c7c     35 00 00 FF 
09c80     0C E4 85 F1 | 	sub	objptr, ##27148
09c84     94 02 90 5D |  if_ne	jmp	#LR__0865
09c88     37 00 00 FF 
09c8c     44 E4 05 F1 | 	add	objptr, ##28228
09c90     F2 16 02 FB | 	rdlong	arg03, objptr
09c94     03 16 66 F0 | 	shl	arg03, #3
09c98     02 00 00 FF 
09c9c     38 E4 85 F1 | 	sub	objptr, ##1080
09ca0     F2 16 02 F1 | 	add	arg03, objptr
09ca4     0B 13 02 FB | 	rdlong	arg01, arg03
09ca8     00 14 06 F6 | 	mov	arg02, #0
09cac     35 00 00 FF 
09cb0     0C E4 85 F1 | 	sub	objptr, ##27148
09cb4     40 AD B1 FD | 	call	#__system____builtin_atoi
09cb8     04 4E 05 F1 | 	add	fp, #4
09cbc     A7 FA 61 FC | 	wrlong	result1, fp
09cc0     4A 00 00 FF 
09cc4     7C E4 05 F1 | 	add	objptr, ##38012
09cc8     F2 1E 02 FB | 	rdlong	local01, objptr
09ccc     0F 21 02 F6 | 	mov	local02, local01
09cd0     01 20 66 F0 | 	shl	local02, #1
09cd4     0F 21 02 F1 | 	add	local02, local01
09cd8     02 20 66 F0 | 	shl	local02, #2
09cdc     03 00 00 FF 
09ce0     00 E4 85 F1 | 	sub	objptr, ##1536
09ce4     F2 20 02 F1 | 	add	local02, objptr
09ce8     08 20 06 F1 | 	add	local02, #8
09cec     10 9D 68 FC | 	wrlong	#78, local02
09cf0     03 00 00 FF 
09cf4     0C E4 05 F1 | 	add	objptr, ##1548
09cf8     F2 22 02 FB | 	rdlong	local03, objptr
09cfc     4A 00 00 FF 
09d00     88 E4 85 F1 | 	sub	objptr, ##38024
09d04     04 4E 05 F1 | 	add	fp, #4
09d08     A7 22 62 FC | 	wrlong	local03, fp
09d0c     08 4E 85 F1 | 	sub	fp, #8
09d10                 | '   gotoline=val%(lparts(ct).part$) 
09d10                 | '   compiledline(lineptr).result_type=token_fast_goto
09d10                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09d10                 | '   do
09d10                 | LR__0860
09d10     10 4E 05 F1 | 	add	fp, #16
09d14     A7 12 02 F6 | 	mov	arg01, fp
09d18     08 4E 85 F1 | 	sub	fp, #8
09d1c     A7 14 02 FB | 	rdlong	arg02, fp
09d20     08 4E 85 F1 | 	sub	fp, #8
09d24     18 16 06 F6 | 	mov	arg03, #24
09d28     0B 00 00 FF 
09d2c     CC E4 05 F1 | 	add	objptr, ##5836
09d30     50 6C B1 FD | 	call	#_psram_spin2_read1
09d34     0B 00 00 FF 
09d38     CC E4 85 F1 | 	sub	objptr, ##5836
09d3c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09d3c                 | '     if gotoheader(0)<>$FFFFFFFF then
09d3c     10 4E 05 F1 | 	add	fp, #16
09d40     A7 22 02 FB | 	rdlong	local03, fp
09d44     10 4E 85 F1 | 	sub	fp, #16
09d48     FF FF 7F FF 
09d4c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
09d50     24 00 90 AD |  if_e	jmp	#LR__0861
09d54     08 4E 05 F1 | 	add	fp, #8
09d58     A7 22 02 FB | 	rdlong	local03, fp
09d5c     04 4E 05 F1 | 	add	fp, #4
09d60     A7 22 62 FC | 	wrlong	local03, fp
09d64     18 4E 05 F1 | 	add	fp, #24
09d68     A7 22 02 FB | 	rdlong	local03, fp
09d6c     1C 4E 85 F1 | 	sub	fp, #28
09d70     A7 22 62 FC | 	wrlong	local03, fp
09d74     08 4E 85 F1 | 	sub	fp, #8
09d78                 | LR__0861
09d78     24 4E 05 F1 | 	add	fp, #36
09d7c     A7 22 02 FB | 	rdlong	local03, fp
09d80     24 4E 85 F1 | 	sub	fp, #36
09d84     FF FF 3F FF 
09d88     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09d8c     10 4E 05 51 |  if_ne	add	fp, #16
09d90     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09d94     10 4E 85 51 |  if_ne	sub	fp, #16
09d98     FF FF 7F 5F 
09d9c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09da0     1C 00 90 AD |  if_e	jmp	#LR__0862
09da4     10 4E 05 F1 | 	add	fp, #16
09da8     A7 22 02 FB | 	rdlong	local03, fp
09dac     0C 4E 85 F1 | 	sub	fp, #12
09db0     A7 20 02 FB | 	rdlong	local02, fp
09db4     04 4E 85 F1 | 	sub	fp, #4
09db8     10 23 0A F2 | 	cmp	local03, local02 wz
09dbc     50 FF 9F 5D |  if_ne	jmp	#LR__0860
09dc0                 | LR__0862
09dc0                 | '   if gotoheader(0)=gotoline then
09dc0     10 4E 05 F1 | 	add	fp, #16
09dc4     A7 22 02 FB | 	rdlong	local03, fp
09dc8     0C 4E 85 F1 | 	sub	fp, #12
09dcc     A7 1E 02 FB | 	rdlong	local01, fp
09dd0     04 4E 85 F1 | 	sub	fp, #4
09dd4     0F 23 0A F2 | 	cmp	local03, local01 wz
09dd8     7C 00 90 5D |  if_ne	jmp	#LR__0863
09ddc     4A 00 00 FF 
09de0     7C E4 05 F1 | 	add	objptr, ##38012
09de4     F2 1E 02 FB | 	rdlong	local01, objptr
09de8     0F 21 02 F6 | 	mov	local02, local01
09dec     01 20 66 F0 | 	shl	local02, #1
09df0     0F 21 02 F1 | 	add	local02, local01
09df4     02 20 66 F0 | 	shl	local02, #2
09df8     03 00 00 FF 
09dfc     00 E4 85 F1 | 	sub	objptr, ##1536
09e00     F2 20 02 F1 | 	add	local02, objptr
09e04     0C 4E 05 F1 | 	add	fp, #12
09e08     A7 22 02 FB | 	rdlong	local03, fp
09e0c     10 23 62 FC | 	wrlong	local03, local02
09e10     03 00 00 FF 
09e14     00 E4 05 F1 | 	add	objptr, ##1536
09e18     F2 1E 02 FB | 	rdlong	local01, objptr
09e1c     0F 21 02 F6 | 	mov	local02, local01
09e20     01 20 66 F0 | 	shl	local02, #1
09e24     0F 21 02 F1 | 	add	local02, local01
09e28     02 20 66 F0 | 	shl	local02, #2
09e2c     03 00 00 FF 
09e30     00 E4 85 F1 | 	sub	objptr, ##1536
09e34     F2 20 02 F1 | 	add	local02, objptr
09e38     08 4E 85 F1 | 	sub	fp, #8
09e3c     A7 22 02 FB | 	rdlong	local03, fp
09e40     04 4E 85 F1 | 	sub	fp, #4
09e44     04 20 06 F1 | 	add	local02, #4
09e48     10 23 62 FC | 	wrlong	local03, local02
09e4c     47 00 00 FF 
09e50     7C E4 85 F1 | 	sub	objptr, ##36476
09e54     A4 00 90 FD | 	jmp	#LR__0864
09e58                 | LR__0863
09e58     4A 00 00 FF 
09e5c     7C E4 05 F1 | 	add	objptr, ##38012
09e60     F2 1E 02 FB | 	rdlong	local01, objptr
09e64     0F 21 02 F6 | 	mov	local02, local01
09e68     01 20 66 F0 | 	shl	local02, #1
09e6c     0F 21 02 F1 | 	add	local02, local01
09e70     02 20 66 F0 | 	shl	local02, #2
09e74     03 00 00 FF 
09e78     00 E4 85 F1 | 	sub	objptr, ##1536
09e7c     F2 20 02 F1 | 	add	local02, objptr
09e80     00 00 C0 FF 
09e84     10 01 68 FC | 	wrlong	##-2147483648, local02
09e88     03 00 00 FF 
09e8c     00 E4 05 F1 | 	add	objptr, ##1536
09e90     F2 1E 02 FB | 	rdlong	local01, objptr
09e94     0F 21 02 F6 | 	mov	local02, local01
09e98     01 20 66 F0 | 	shl	local02, #1
09e9c     0F 21 02 F1 | 	add	local02, local01
09ea0     02 20 66 F0 | 	shl	local02, #2
09ea4     03 00 00 FF 
09ea8     00 E4 85 F1 | 	sub	objptr, ##1536
09eac     F2 20 02 F1 | 	add	local02, objptr
09eb0     04 4E 05 F1 | 	add	fp, #4
09eb4     A7 22 02 FB | 	rdlong	local03, fp
09eb8     04 4E 85 F1 | 	sub	fp, #4
09ebc     04 20 06 F1 | 	add	local02, #4
09ec0     10 23 62 FC | 	wrlong	local03, local02
09ec4     03 00 00 FF 
09ec8     00 E4 05 F1 | 	add	objptr, ##1536
09ecc     F2 1E 02 FB | 	rdlong	local01, objptr
09ed0     0F 21 02 F6 | 	mov	local02, local01
09ed4     01 20 66 F0 | 	shl	local02, #1
09ed8     0F 21 02 F1 | 	add	local02, local01
09edc     02 20 66 F0 | 	shl	local02, #2
09ee0     03 00 00 FF 
09ee4     00 E4 85 F1 | 	sub	objptr, ##1536
09ee8     F2 20 02 F1 | 	add	local02, objptr
09eec     08 20 06 F1 | 	add	local02, #8
09ef0     10 A7 68 FC | 	wrlong	#83, local02
09ef4     47 00 00 FF 
09ef8     7C E4 85 F1 | 	sub	objptr, ##36476
09efc                 | LR__0864
09efc     4A 00 00 FF 
09f00     7C E4 05 F1 | 	add	objptr, ##38012
09f04     F2 22 02 FB | 	rdlong	local03, objptr
09f08     01 22 06 F1 | 	add	local03, #1
09f0c     F2 22 62 FC | 	wrlong	local03, objptr
09f10     4A 00 00 FF 
09f14     7C E4 85 F1 | 	sub	objptr, ##38012
09f18     D0 00 90 FD | 	jmp	#LR__0866
09f1c                 | LR__0865
09f1c     DC 00 B0 FD | 	call	#_expr
09f20     30 4E 05 F1 | 	add	fp, #48
09f24     A7 9E 68 FC | 	wrlong	#79, fp
09f28     08 4E 85 F1 | 	sub	fp, #8
09f2c     A7 00 68 FC | 	wrlong	#0, fp
09f30     04 4E 05 F1 | 	add	fp, #4
09f34     A7 22 02 FB | 	rdlong	local03, fp
09f38     04 4E 05 F1 | 	add	fp, #4
09f3c     A7 1E 02 FB | 	rdlong	local01, fp
09f40     30 4E 85 F1 | 	sub	fp, #48
09f44     4A 00 00 FF 
09f48     7C E4 05 F1 | 	add	objptr, ##38012
09f4c     F2 20 02 FB | 	rdlong	local02, objptr
09f50     10 17 02 F6 | 	mov	arg03, local02
09f54     01 16 66 F0 | 	shl	arg03, #1
09f58     10 17 02 F1 | 	add	arg03, local02
09f5c     02 16 66 F0 | 	shl	arg03, #2
09f60     03 00 00 FF 
09f64     00 E4 85 F1 | 	sub	objptr, ##1536
09f68     F2 16 02 F1 | 	add	arg03, objptr
09f6c     0B 01 68 FC | 	wrlong	#0, arg03
09f70     03 00 00 FF 
09f74     00 E4 05 F1 | 	add	objptr, ##1536
09f78     F2 20 02 FB | 	rdlong	local02, objptr
09f7c     10 17 02 F6 | 	mov	arg03, local02
09f80     01 16 66 F0 | 	shl	arg03, #1
09f84     10 17 02 F1 | 	add	arg03, local02
09f88     02 16 66 F0 | 	shl	arg03, #2
09f8c     03 00 00 FF 
09f90     00 E4 85 F1 | 	sub	objptr, ##1536
09f94     F2 16 02 F1 | 	add	arg03, objptr
09f98     04 16 06 F1 | 	add	arg03, #4
09f9c     0B 23 62 FC | 	wrlong	local03, arg03
09fa0     03 00 00 FF 
09fa4     00 E4 05 F1 | 	add	objptr, ##1536
09fa8     F2 22 02 FB | 	rdlong	local03, objptr
09fac     11 21 02 F6 | 	mov	local02, local03
09fb0     01 20 66 F0 | 	shl	local02, #1
09fb4     11 21 02 F1 | 	add	local02, local03
09fb8     02 20 66 F0 | 	shl	local02, #2
09fbc     03 00 00 FF 
09fc0     00 E4 85 F1 | 	sub	objptr, ##1536
09fc4     F2 20 02 F1 | 	add	local02, objptr
09fc8     08 20 06 F1 | 	add	local02, #8
09fcc     10 1F 62 FC | 	wrlong	local01, local02
09fd0     03 00 00 FF 
09fd4     00 E4 05 F1 | 	add	objptr, ##1536
09fd8     F2 22 02 FB | 	rdlong	local03, objptr
09fdc     01 22 06 F1 | 	add	local03, #1
09fe0     F2 22 62 FC | 	wrlong	local03, objptr
09fe4     4A 00 00 FF 
09fe8     7C E4 85 F1 | 	sub	objptr, ##38012
09fec                 | LR__0866
09fec                 | ' return 0
09fec     00 FA 05 F6 | 	mov	result1, #0
09ff0     A7 F0 03 F6 | 	mov	ptra, fp
09ff4     B2 00 A0 FD | 	call	#popregs_
09ff8                 | _compile_goto_ret
09ff8     2D 00 64 FD | 	ret
09ffc                 | 
09ffc                 | ' 
09ffc                 | ' 
09ffc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ffc                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09ffc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ffc                 | ' 
09ffc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ffc                 | ' '
09ffc                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09ffc                 | ' '
09ffc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ffc                 | ' 
09ffc                 | ' function expr() as ulong 
09ffc                 | _expr
09ffc     07 4A 05 F6 | 	mov	COUNT_, #7
0a000     A8 00 A0 FD | 	call	#pushregs_
0a004                 | _expr_enter
0a004     37 00 00 FF 
0a008     44 E4 05 F1 | 	add	objptr, ##28228
0a00c     F2 24 02 FB | 	rdlong	local04, objptr
0a010     03 24 66 F0 | 	shl	local04, #3
0a014     02 00 00 FF 
0a018     38 E4 85 F1 | 	sub	objptr, ##1080
0a01c     F2 24 02 F1 | 	add	local04, objptr
0a020     04 24 06 F1 | 	add	local04, #4
0a024     12 27 02 FB | 	rdlong	local05, local04
0a028                 | ' 
0a028                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a028     FE 27 0E F2 | 	cmp	local05, #510 wz
0a02c     35 00 00 FF 
0a030     0C E4 85 F1 | 	sub	objptr, ##27148
0a034     C4 00 90 5D |  if_ne	jmp	#LR__0870
0a038     1D 1E 06 F6 | 	mov	local01, #29
0a03c     FF 22 06 F6 | 	mov	local03, #255
0a040     0F 29 02 F6 | 	mov	local06, local01
0a044     10 2B 02 F6 | 	mov	local07, local02
0a048     11 1F 02 F6 | 	mov	local01, local03
0a04c     4A 00 00 FF 
0a050     7C E4 05 F1 | 	add	objptr, ##38012
0a054     F2 26 02 FB | 	rdlong	local05, objptr
0a058     13 25 02 F6 | 	mov	local04, local05
0a05c     01 24 66 F0 | 	shl	local04, #1
0a060     13 25 02 F1 | 	add	local04, local05
0a064     02 24 66 F0 | 	shl	local04, #2
0a068     03 00 00 FF 
0a06c     00 E4 85 F1 | 	sub	objptr, ##1536
0a070     F2 24 02 F1 | 	add	local04, objptr
0a074     12 29 62 FC | 	wrlong	local06, local04
0a078     03 00 00 FF 
0a07c     00 E4 05 F1 | 	add	objptr, ##1536
0a080     F2 28 02 FB | 	rdlong	local06, objptr
0a084     14 27 02 F6 | 	mov	local05, local06
0a088     01 26 66 F0 | 	shl	local05, #1
0a08c     14 27 02 F1 | 	add	local05, local06
0a090     02 26 66 F0 | 	shl	local05, #2
0a094     03 00 00 FF 
0a098     00 E4 85 F1 | 	sub	objptr, ##1536
0a09c     F2 26 02 F1 | 	add	local05, objptr
0a0a0     04 26 06 F1 | 	add	local05, #4
0a0a4     13 2B 62 FC | 	wrlong	local07, local05
0a0a8     03 00 00 FF 
0a0ac     00 E4 05 F1 | 	add	objptr, ##1536
0a0b0     F2 2A 02 FB | 	rdlong	local07, objptr
0a0b4     15 29 02 F6 | 	mov	local06, local07
0a0b8     01 28 66 F0 | 	shl	local06, #1
0a0bc     15 29 02 F1 | 	add	local06, local07
0a0c0     02 28 66 F0 | 	shl	local06, #2
0a0c4     03 00 00 FF 
0a0c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a0cc     F2 28 02 F1 | 	add	local06, objptr
0a0d0     08 28 06 F1 | 	add	local06, #8
0a0d4     14 1F 62 FC | 	wrlong	local01, local06
0a0d8     03 00 00 FF 
0a0dc     00 E4 05 F1 | 	add	objptr, ##1536
0a0e0     F2 28 02 FB | 	rdlong	local06, objptr
0a0e4     01 28 06 F1 | 	add	local06, #1
0a0e8     F2 28 62 FC | 	wrlong	local06, objptr
0a0ec     4A 00 00 FF 
0a0f0     7C E4 85 F1 | 	sub	objptr, ##38012
0a0f4     1D FA 05 F6 | 	mov	result1, #29
0a0f8     64 01 90 FD | 	jmp	#LR__0873
0a0fc                 | LR__0870
0a0fc     00 1E 06 F6 | 	mov	local01, #0
0a100     68 01 B0 FD | 	call	#_addsub
0a104                 | ' t3.result.uresult=0
0a104                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0a104                 | ' if err>0 then return err
0a104     01 FA 15 F2 | 	cmp	result1, #1 wc
0a108     54 01 90 3D |  if_ae	jmp	#LR__0873
0a10c     37 00 00 FF 
0a110     44 E4 05 F1 | 	add	objptr, ##28228
0a114     F2 24 02 FB | 	rdlong	local04, objptr
0a118     03 24 66 F0 | 	shl	local04, #3
0a11c     02 00 00 FF 
0a120     38 E4 85 F1 | 	sub	objptr, ##1080
0a124     F2 24 02 F1 | 	add	local04, objptr
0a128     04 24 06 F1 | 	add	local04, #4
0a12c     12 27 02 FB | 	rdlong	local05, local04
0a130                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0a130                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a130     35 00 00 FF 
0a134     0C E4 85 F1 | 	sub	objptr, ##27148
0a138                 | LR__0871
0a138     1B 26 0E F2 | 	cmp	local05, #27 wz
0a13c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a140     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a144     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a148     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a14c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a150     08 01 90 5D |  if_ne	jmp	#LR__0872
0a154     37 00 00 FF 
0a158     44 E4 05 F1 | 	add	objptr, ##28228
0a15c     F2 28 02 FB | 	rdlong	local06, objptr
0a160     01 28 06 F1 | 	add	local06, #1
0a164     F2 28 62 FC | 	wrlong	local06, objptr
0a168     37 00 00 FF 
0a16c     44 E4 85 F1 | 	sub	objptr, ##28228
0a170     F8 00 B0 FD | 	call	#_addsub
0a174                 | '   ct+=1
0a174                 | '   err=addsub() : if err>0 then return err
0a174     01 FA 15 F2 | 	cmp	result1, #1 wc
0a178     E4 00 90 3D |  if_ae	jmp	#LR__0873
0a17c     13 23 02 F6 | 	mov	local03, local05
0a180     0F 29 02 F6 | 	mov	local06, local01
0a184     10 2B 02 F6 | 	mov	local07, local02
0a188     11 27 02 F6 | 	mov	local05, local03
0a18c     4A 00 00 FF 
0a190     7C E4 05 F1 | 	add	objptr, ##38012
0a194     F2 24 02 FB | 	rdlong	local04, objptr
0a198     12 FB 01 F6 | 	mov	result1, local04
0a19c     01 FA 65 F0 | 	shl	result1, #1
0a1a0     12 FB 01 F1 | 	add	result1, local04
0a1a4     02 FA 65 F0 | 	shl	result1, #2
0a1a8     03 00 00 FF 
0a1ac     00 E4 85 F1 | 	sub	objptr, ##1536
0a1b0     F2 FA 01 F1 | 	add	result1, objptr
0a1b4     FD 28 62 FC | 	wrlong	local06, result1
0a1b8     03 00 00 FF 
0a1bc     00 E4 05 F1 | 	add	objptr, ##1536
0a1c0     F2 28 02 FB | 	rdlong	local06, objptr
0a1c4     14 25 02 F6 | 	mov	local04, local06
0a1c8     01 24 66 F0 | 	shl	local04, #1
0a1cc     14 25 02 F1 | 	add	local04, local06
0a1d0     02 24 66 F0 | 	shl	local04, #2
0a1d4     03 00 00 FF 
0a1d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a1dc     F2 24 02 F1 | 	add	local04, objptr
0a1e0     04 24 06 F1 | 	add	local04, #4
0a1e4     12 2B 62 FC | 	wrlong	local07, local04
0a1e8     03 00 00 FF 
0a1ec     00 E4 05 F1 | 	add	objptr, ##1536
0a1f0     F2 2A 02 FB | 	rdlong	local07, objptr
0a1f4     15 29 02 F6 | 	mov	local06, local07
0a1f8     01 28 66 F0 | 	shl	local06, #1
0a1fc     15 29 02 F1 | 	add	local06, local07
0a200     02 28 66 F0 | 	shl	local06, #2
0a204     03 00 00 FF 
0a208     00 E4 85 F1 | 	sub	objptr, ##1536
0a20c     F2 28 02 F1 | 	add	local06, objptr
0a210     08 28 06 F1 | 	add	local06, #8
0a214     14 27 62 FC | 	wrlong	local05, local06
0a218     03 00 00 FF 
0a21c     00 E4 05 F1 | 	add	objptr, ##1536
0a220     F2 28 02 FB | 	rdlong	local06, objptr
0a224     01 28 06 F1 | 	add	local06, #1
0a228     F2 28 62 FC | 	wrlong	local06, objptr
0a22c     13 00 00 FF 
0a230     38 E4 85 F1 | 	sub	objptr, ##9784
0a234     F2 24 02 FB | 	rdlong	local04, objptr
0a238     03 24 66 F0 | 	shl	local04, #3
0a23c     02 00 00 FF 
0a240     38 E4 85 F1 | 	sub	objptr, ##1080
0a244     F2 24 02 F1 | 	add	local04, objptr
0a248     04 24 06 F1 | 	add	local04, #4
0a24c     12 27 02 FB | 	rdlong	local05, local04
0a250     35 00 00 FF 
0a254     0C E4 85 F1 | 	sub	objptr, ##27148
0a258     DC FE 9F FD | 	jmp	#LR__0871
0a25c                 | LR__0872
0a25c                 | ' return 0  
0a25c     00 FA 05 F6 | 	mov	result1, #0
0a260                 | LR__0873
0a260     A7 F0 03 F6 | 	mov	ptra, fp
0a264     B2 00 A0 FD | 	call	#popregs_
0a268                 | _expr_ret
0a268     2D 00 64 FD | 	ret
0a26c                 | 
0a26c                 | ' 
0a26c                 | ' ' Second level operators : add, sub, logic
0a26c                 | ' 
0a26c                 | ' function addsub() as ulong
0a26c                 | _addsub
0a26c     07 4A 05 F6 | 	mov	COUNT_, #7
0a270     A8 00 A0 FD | 	call	#pushregs_
0a274                 | _addsub_enter
0a274     00 1E 06 F6 | 	mov	local01, #0
0a278     60 01 B0 FD | 	call	#_muldiv
0a27c                 | ' 
0a27c                 | ' t3.result.uresult=0
0a27c                 | ' err=muldiv() : if err>0 then return err           			 
0a27c     01 FA 15 F2 | 	cmp	result1, #1 wc
0a280     4C 01 90 3D |  if_ae	jmp	#LR__0882
0a284     37 00 00 FF 
0a288     44 E4 05 F1 | 	add	objptr, ##28228
0a28c     F2 24 02 FB | 	rdlong	local04, objptr
0a290     03 24 66 F0 | 	shl	local04, #3
0a294     02 00 00 FF 
0a298     38 E4 85 F1 | 	sub	objptr, ##1080
0a29c     F2 24 02 F1 | 	add	local04, objptr
0a2a0     04 24 06 F1 | 	add	local04, #4
0a2a4     12 27 02 FB | 	rdlong	local05, local04
0a2a8                 | ' op = lparts(ct).token				 
0a2a8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a2a8     35 00 00 FF 
0a2ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a2b0                 | LR__0880
0a2b0     01 26 0E F2 | 	cmp	local05, #1 wz
0a2b4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a2b8     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a2bc     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a2c0     08 01 90 5D |  if_ne	jmp	#LR__0881
0a2c4     37 00 00 FF 
0a2c8     44 E4 05 F1 | 	add	objptr, ##28228
0a2cc     F2 24 02 FB | 	rdlong	local04, objptr
0a2d0     01 24 06 F1 | 	add	local04, #1
0a2d4     F2 24 62 FC | 	wrlong	local04, objptr
0a2d8     37 00 00 FF 
0a2dc     44 E4 85 F1 | 	sub	objptr, ##28228
0a2e0     F8 00 B0 FD | 	call	#_muldiv
0a2e4                 | '   ct+=1
0a2e4                 | '   err=muldiv() : if err>0 then return err   
0a2e4     01 FA 15 F2 | 	cmp	result1, #1 wc
0a2e8     E4 00 90 3D |  if_ae	jmp	#LR__0882
0a2ec     13 23 02 F6 | 	mov	local03, local05
0a2f0     0F 29 02 F6 | 	mov	local06, local01
0a2f4     10 2B 02 F6 | 	mov	local07, local02
0a2f8     11 27 02 F6 | 	mov	local05, local03
0a2fc     4A 00 00 FF 
0a300     7C E4 05 F1 | 	add	objptr, ##38012
0a304     F2 24 02 FB | 	rdlong	local04, objptr
0a308     12 FB 01 F6 | 	mov	result1, local04
0a30c     01 FA 65 F0 | 	shl	result1, #1
0a310     12 FB 01 F1 | 	add	result1, local04
0a314     02 FA 65 F0 | 	shl	result1, #2
0a318     03 00 00 FF 
0a31c     00 E4 85 F1 | 	sub	objptr, ##1536
0a320     F2 FA 01 F1 | 	add	result1, objptr
0a324     FD 28 62 FC | 	wrlong	local06, result1
0a328     03 00 00 FF 
0a32c     00 E4 05 F1 | 	add	objptr, ##1536
0a330     F2 28 02 FB | 	rdlong	local06, objptr
0a334     14 25 02 F6 | 	mov	local04, local06
0a338     01 24 66 F0 | 	shl	local04, #1
0a33c     14 25 02 F1 | 	add	local04, local06
0a340     02 24 66 F0 | 	shl	local04, #2
0a344     03 00 00 FF 
0a348     00 E4 85 F1 | 	sub	objptr, ##1536
0a34c     F2 24 02 F1 | 	add	local04, objptr
0a350     04 24 06 F1 | 	add	local04, #4
0a354     12 2B 62 FC | 	wrlong	local07, local04
0a358     03 00 00 FF 
0a35c     00 E4 05 F1 | 	add	objptr, ##1536
0a360     F2 2A 02 FB | 	rdlong	local07, objptr
0a364     15 29 02 F6 | 	mov	local06, local07
0a368     01 28 66 F0 | 	shl	local06, #1
0a36c     15 29 02 F1 | 	add	local06, local07
0a370     02 28 66 F0 | 	shl	local06, #2
0a374     03 00 00 FF 
0a378     00 E4 85 F1 | 	sub	objptr, ##1536
0a37c     F2 28 02 F1 | 	add	local06, objptr
0a380     08 28 06 F1 | 	add	local06, #8
0a384     14 27 62 FC | 	wrlong	local05, local06
0a388     03 00 00 FF 
0a38c     00 E4 05 F1 | 	add	objptr, ##1536
0a390     F2 28 02 FB | 	rdlong	local06, objptr
0a394     01 28 06 F1 | 	add	local06, #1
0a398     F2 28 62 FC | 	wrlong	local06, objptr
0a39c     13 00 00 FF 
0a3a0     38 E4 85 F1 | 	sub	objptr, ##9784
0a3a4     F2 24 02 FB | 	rdlong	local04, objptr
0a3a8     03 24 66 F0 | 	shl	local04, #3
0a3ac     02 00 00 FF 
0a3b0     38 E4 85 F1 | 	sub	objptr, ##1080
0a3b4     F2 24 02 F1 | 	add	local04, objptr
0a3b8     04 24 06 F1 | 	add	local04, #4
0a3bc     12 27 02 FB | 	rdlong	local05, local04
0a3c0     35 00 00 FF 
0a3c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a3c8     E4 FE 9F FD | 	jmp	#LR__0880
0a3cc                 | LR__0881
0a3cc                 | ' return 0
0a3cc     00 FA 05 F6 | 	mov	result1, #0
0a3d0                 | LR__0882
0a3d0     A7 F0 03 F6 | 	mov	ptra, fp
0a3d4     B2 00 A0 FD | 	call	#popregs_
0a3d8                 | _addsub_ret
0a3d8     2D 00 64 FD | 	ret
0a3dc                 | 
0a3dc                 | ' 
0a3dc                 | ' ' Third level operators : mul,div,shift,power
0a3dc                 | ' 
0a3dc                 | ' function muldiv() as ulong
0a3dc                 | _muldiv
0a3dc     07 4A 05 F6 | 	mov	COUNT_, #7
0a3e0     A8 00 A0 FD | 	call	#pushregs_
0a3e4                 | _muldiv_enter
0a3e4     00 1E 06 F6 | 	mov	local01, #0
0a3e8     6C 01 B0 FD | 	call	#_getvalue
0a3ec                 | ' 
0a3ec                 | ' t3.result.uresult=0
0a3ec                 | ' err=getvalue() : if err>0 then return err     
0a3ec     01 FA 15 F2 | 	cmp	result1, #1 wc
0a3f0     58 01 90 3D |  if_ae	jmp	#LR__0892
0a3f4     37 00 00 FF 
0a3f8     44 E4 05 F1 | 	add	objptr, ##28228
0a3fc     F2 24 02 FB | 	rdlong	local04, objptr
0a400     03 24 66 F0 | 	shl	local04, #3
0a404     02 00 00 FF 
0a408     38 E4 85 F1 | 	sub	objptr, ##1080
0a40c     F2 24 02 F1 | 	add	local04, objptr
0a410     04 24 06 F1 | 	add	local04, #4
0a414     12 27 02 FB | 	rdlong	local05, local04
0a418                 | ' op = lparts(ct).token
0a418                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a418     35 00 00 FF 
0a41c     0C E4 85 F1 | 	sub	objptr, ##27148
0a420                 | LR__0890
0a420     05 26 0E F2 | 	cmp	local05, #5 wz
0a424     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a428     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a42c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a430     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a434     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a438     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a43c     08 01 90 5D |  if_ne	jmp	#LR__0891
0a440     37 00 00 FF 
0a444     44 E4 05 F1 | 	add	objptr, ##28228
0a448     F2 24 02 FB | 	rdlong	local04, objptr
0a44c     01 24 06 F1 | 	add	local04, #1
0a450     F2 24 62 FC | 	wrlong	local04, objptr
0a454     37 00 00 FF 
0a458     44 E4 85 F1 | 	sub	objptr, ##28228
0a45c     F8 00 B0 FD | 	call	#_getvalue
0a460                 | '   ct+=1
0a460                 | '   err=getvalue() :if err>0 then return err   
0a460     01 FA 15 F2 | 	cmp	result1, #1 wc
0a464     E4 00 90 3D |  if_ae	jmp	#LR__0892
0a468     13 23 02 F6 | 	mov	local03, local05
0a46c     0F 29 02 F6 | 	mov	local06, local01
0a470     10 2B 02 F6 | 	mov	local07, local02
0a474     11 27 02 F6 | 	mov	local05, local03
0a478     4A 00 00 FF 
0a47c     7C E4 05 F1 | 	add	objptr, ##38012
0a480     F2 24 02 FB | 	rdlong	local04, objptr
0a484     12 FB 01 F6 | 	mov	result1, local04
0a488     01 FA 65 F0 | 	shl	result1, #1
0a48c     12 FB 01 F1 | 	add	result1, local04
0a490     02 FA 65 F0 | 	shl	result1, #2
0a494     03 00 00 FF 
0a498     00 E4 85 F1 | 	sub	objptr, ##1536
0a49c     F2 FA 01 F1 | 	add	result1, objptr
0a4a0     FD 28 62 FC | 	wrlong	local06, result1
0a4a4     03 00 00 FF 
0a4a8     00 E4 05 F1 | 	add	objptr, ##1536
0a4ac     F2 28 02 FB | 	rdlong	local06, objptr
0a4b0     14 25 02 F6 | 	mov	local04, local06
0a4b4     01 24 66 F0 | 	shl	local04, #1
0a4b8     14 25 02 F1 | 	add	local04, local06
0a4bc     02 24 66 F0 | 	shl	local04, #2
0a4c0     03 00 00 FF 
0a4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4c8     F2 24 02 F1 | 	add	local04, objptr
0a4cc     04 24 06 F1 | 	add	local04, #4
0a4d0     12 2B 62 FC | 	wrlong	local07, local04
0a4d4     03 00 00 FF 
0a4d8     00 E4 05 F1 | 	add	objptr, ##1536
0a4dc     F2 2A 02 FB | 	rdlong	local07, objptr
0a4e0     15 29 02 F6 | 	mov	local06, local07
0a4e4     01 28 66 F0 | 	shl	local06, #1
0a4e8     15 29 02 F1 | 	add	local06, local07
0a4ec     02 28 66 F0 | 	shl	local06, #2
0a4f0     03 00 00 FF 
0a4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4f8     F2 28 02 F1 | 	add	local06, objptr
0a4fc     08 28 06 F1 | 	add	local06, #8
0a500     14 27 62 FC | 	wrlong	local05, local06
0a504     03 00 00 FF 
0a508     00 E4 05 F1 | 	add	objptr, ##1536
0a50c     F2 28 02 FB | 	rdlong	local06, objptr
0a510     01 28 06 F1 | 	add	local06, #1
0a514     F2 28 62 FC | 	wrlong	local06, objptr
0a518     13 00 00 FF 
0a51c     38 E4 85 F1 | 	sub	objptr, ##9784
0a520     F2 24 02 FB | 	rdlong	local04, objptr
0a524     03 24 66 F0 | 	shl	local04, #3
0a528     02 00 00 FF 
0a52c     38 E4 85 F1 | 	sub	objptr, ##1080
0a530     F2 24 02 F1 | 	add	local04, objptr
0a534     04 24 06 F1 | 	add	local04, #4
0a538     12 27 02 FB | 	rdlong	local05, local04
0a53c     35 00 00 FF 
0a540     0C E4 85 F1 | 	sub	objptr, ##27148
0a544     D8 FE 9F FD | 	jmp	#LR__0890
0a548                 | LR__0891
0a548                 | ' return 0
0a548     00 FA 05 F6 | 	mov	result1, #0
0a54c                 | LR__0892
0a54c     A7 F0 03 F6 | 	mov	ptra, fp
0a550     B2 00 A0 FD | 	call	#popregs_
0a554                 | _muldiv_ret
0a554     2D 00 64 FD | 	ret
0a558                 | 
0a558                 | ' 
0a558                 | ' ' Get a value for operations
0a558                 | ' 
0a558                 | ' function getvalue()  as ulong
0a558                 | _getvalue
0a558     0B 4A 05 F6 | 	mov	COUNT_, #11
0a55c     A8 00 A0 FD | 	call	#pushregs_
0a560                 | _getvalue_enter
0a560     01 24 06 F6 | 	mov	local04, #1
0a564     00 1E 06 F6 | 	mov	local01, #0
0a568     1D 22 06 F6 | 	mov	local03, #29
0a56c     37 00 00 FF 
0a570     44 E4 05 F1 | 	add	objptr, ##28228
0a574     F2 16 02 FB | 	rdlong	arg03, objptr
0a578     03 16 66 F0 | 	shl	arg03, #3
0a57c     02 00 00 FF 
0a580     38 E4 85 F1 | 	sub	objptr, ##1080
0a584     F2 16 02 F1 | 	add	arg03, objptr
0a588     04 16 06 F1 | 	add	arg03, #4
0a58c     0B 27 02 FB | 	rdlong	local05, arg03
0a590                 | ' 
0a590                 | ' m=1											' for negative numbers
0a590                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a590                 | ' op=lparts(ct).token
0a590                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a590     02 26 0E F2 | 	cmp	local05, #2 wz
0a594     35 00 00 FF 
0a598     0C E4 85 F1 | 	sub	objptr, ##27148
0a59c     38 00 90 5D |  if_ne	jmp	#LR__0900
0a5a0     01 24 66 F6 | 	neg	local04, #1
0a5a4     37 00 00 FF 
0a5a8     44 E4 05 F1 | 	add	objptr, ##28228
0a5ac     F2 26 02 FB | 	rdlong	local05, objptr
0a5b0     01 26 06 F1 | 	add	local05, #1
0a5b4     F2 26 62 FC | 	wrlong	local05, objptr
0a5b8     03 26 66 F0 | 	shl	local05, #3
0a5bc     02 00 00 FF 
0a5c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a5c4     F2 26 02 F1 | 	add	local05, objptr
0a5c8     04 26 06 F1 | 	add	local05, #4
0a5cc     13 27 02 FB | 	rdlong	local05, local05
0a5d0     35 00 00 FF 
0a5d4     0C E4 85 F1 | 	sub	objptr, ##27148
0a5d8                 | LR__0900
0a5d8                 | ' select case op
0a5d8     01 00 00 FF 
0a5dc     00 26 0E F2 | 	cmp	local05, ##512 wz
0a5e0     44 00 90 AD |  if_e	jmp	#LR__0901
0a5e4     01 00 00 FF 
0a5e8     01 26 0E F2 | 	cmp	local05, ##513 wz
0a5ec     90 01 90 AD |  if_e	jmp	#LR__0904
0a5f0     01 00 00 FF 
0a5f4     02 26 0E F2 | 	cmp	local05, ##514 wz
0a5f8     44 04 90 AD |  if_e	jmp	#LR__0911
0a5fc     01 00 00 FF 
0a600     03 26 0E F2 | 	cmp	local05, ##515 wz
0a604     A8 05 90 AD |  if_e	jmp	#LR__0914
0a608     2C 26 0E F2 | 	cmp	local05, #44 wz
0a60c     78 07 90 AD |  if_e	jmp	#LR__0919
0a610     01 00 00 FF 
0a614     04 26 0E F2 | 	cmp	local05, ##516 wz
0a618     70 08 90 AD |  if_e	jmp	#LR__0920
0a61c     15 26 0E F2 | 	cmp	local05, #21 wz
0a620     98 08 90 AD |  if_e	jmp	#LR__0921
0a624     10 09 90 FD | 	jmp	#LR__0922
0a628                 | LR__0901
0a628                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a628     01 24 0E F2 | 	cmp	local04, #1 wz
0a62c     3C 00 90 5D |  if_ne	jmp	#LR__0902
0a630     37 00 00 FF 
0a634     44 E4 05 F1 | 	add	objptr, ##28228
0a638     F2 26 02 FB | 	rdlong	local05, objptr
0a63c     03 26 66 F0 | 	shl	local05, #3
0a640     02 00 00 FF 
0a644     38 E4 85 F1 | 	sub	objptr, ##1080
0a648     F2 26 02 F1 | 	add	local05, objptr
0a64c     13 13 02 FB | 	rdlong	arg01, local05
0a650     00 14 06 F6 | 	mov	arg02, #0
0a654     35 00 00 FF 
0a658     0C E4 85 F1 | 	sub	objptr, ##27148
0a65c     98 A3 B1 FD | 	call	#__system____builtin_atoi
0a660     FD 24 02 FD | 	qmul	local04, result1
0a664     18 1E 62 FD | 	getqx	local01
0a668     1C 22 06 F6 | 	mov	local03, #28
0a66c                 | LR__0902
0a66c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a66c     FF FF 7F FF 
0a670     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a674     3C 00 90 5D |  if_ne	jmp	#LR__0903
0a678     37 00 00 FF 
0a67c     44 E4 05 F1 | 	add	objptr, ##28228
0a680     F2 26 02 FB | 	rdlong	local05, objptr
0a684     03 26 66 F0 | 	shl	local05, #3
0a688     02 00 00 FF 
0a68c     38 E4 85 F1 | 	sub	objptr, ##1080
0a690     F2 26 02 F1 | 	add	local05, objptr
0a694     13 13 02 FB | 	rdlong	arg01, local05
0a698     00 14 06 F6 | 	mov	arg02, #0
0a69c     35 00 00 FF 
0a6a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a6a4     50 A3 B1 FD | 	call	#__system____builtin_atoi
0a6a8     FD 24 02 FD | 	qmul	local04, result1
0a6ac     18 1E 62 FD | 	getqx	local01
0a6b0     1C 22 06 F6 | 	mov	local03, #28
0a6b4                 | LR__0903
0a6b4     0F 29 02 F6 | 	mov	local06, local01
0a6b8     10 2B 02 F6 | 	mov	local07, local02
0a6bc     11 27 02 F6 | 	mov	local05, local03
0a6c0     4A 00 00 FF 
0a6c4     7C E4 05 F1 | 	add	objptr, ##38012
0a6c8     F2 1E 02 FB | 	rdlong	local01, objptr
0a6cc     0F 25 02 F6 | 	mov	local04, local01
0a6d0     01 24 66 F0 | 	shl	local04, #1
0a6d4     0F 25 02 F1 | 	add	local04, local01
0a6d8     02 24 66 F0 | 	shl	local04, #2
0a6dc     03 00 00 FF 
0a6e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6e4     F2 24 02 F1 | 	add	local04, objptr
0a6e8     12 29 62 FC | 	wrlong	local06, local04
0a6ec     03 00 00 FF 
0a6f0     00 E4 05 F1 | 	add	objptr, ##1536
0a6f4     F2 28 02 FB | 	rdlong	local06, objptr
0a6f8     14 1F 02 F6 | 	mov	local01, local06
0a6fc     01 1E 66 F0 | 	shl	local01, #1
0a700     14 1F 02 F1 | 	add	local01, local06
0a704     02 1E 66 F0 | 	shl	local01, #2
0a708     03 00 00 FF 
0a70c     00 E4 85 F1 | 	sub	objptr, ##1536
0a710     F2 1E 02 F1 | 	add	local01, objptr
0a714     04 1E 06 F1 | 	add	local01, #4
0a718     0F 2B 62 FC | 	wrlong	local07, local01
0a71c     03 00 00 FF 
0a720     00 E4 05 F1 | 	add	objptr, ##1536
0a724     F2 2A 02 FB | 	rdlong	local07, objptr
0a728     15 29 02 F6 | 	mov	local06, local07
0a72c     01 28 66 F0 | 	shl	local06, #1
0a730     15 29 02 F1 | 	add	local06, local07
0a734     02 28 66 F0 | 	shl	local06, #2
0a738     03 00 00 FF 
0a73c     00 E4 85 F1 | 	sub	objptr, ##1536
0a740     F2 28 02 F1 | 	add	local06, objptr
0a744     08 28 06 F1 | 	add	local06, #8
0a748     14 27 62 FC | 	wrlong	local05, local06
0a74c     03 00 00 FF 
0a750     00 E4 05 F1 | 	add	objptr, ##1536
0a754     F2 28 02 FB | 	rdlong	local06, objptr
0a758     01 28 06 F1 | 	add	local06, #1
0a75c     F2 28 62 FC | 	wrlong	local06, objptr
0a760     13 00 00 FF 
0a764     38 E4 85 F1 | 	sub	objptr, ##9784
0a768     F2 28 02 FB | 	rdlong	local06, objptr
0a76c     01 28 06 F1 | 	add	local06, #1
0a770     F2 28 62 FC | 	wrlong	local06, objptr
0a774     37 00 00 FF 
0a778     44 E4 85 F1 | 	sub	objptr, ##28228
0a77c     E4 07 90 FD | 	jmp	#LR__0923
0a780                 | LR__0904
0a780                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a780     37 00 00 FF 
0a784     44 E4 05 F1 | 	add	objptr, ##28228
0a788     F2 16 02 FB | 	rdlong	arg03, objptr
0a78c     03 16 66 F0 | 	shl	arg03, #3
0a790     02 00 00 FF 
0a794     38 E4 85 F1 | 	sub	objptr, ##1080
0a798     F2 16 02 F1 | 	add	arg03, objptr
0a79c     0B 13 02 FB | 	rdlong	arg01, arg03
0a7a0     01 14 06 F6 | 	mov	arg02, #1
0a7a4     35 00 00 FF 
0a7a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a7ac     90 8E B1 FD | 	call	#__system__Left_S
0a7b0     FD 12 02 F6 | 	mov	arg01, result1
0a7b4     8B 01 00 FF 
0a7b8     BF 15 06 F6 | 	mov	arg02, ##@LR__5503
0a7bc     2C 6E B1 FD | 	call	#__system___string_cmp
0a7c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7c4     94 00 90 5D |  if_ne	jmp	#LR__0907
0a7c8     37 00 00 FF 
0a7cc     44 E4 05 F1 | 	add	objptr, ##28228
0a7d0     F2 2A 02 FB | 	rdlong	local07, objptr
0a7d4     15 29 02 F6 | 	mov	local06, local07
0a7d8     03 28 66 F0 | 	shl	local06, #3
0a7dc     02 00 00 FF 
0a7e0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7e4     F2 28 02 F1 | 	add	local06, objptr
0a7e8     8B 01 00 FF 
0a7ec     C1 27 06 F6 | 	mov	local05, ##@LR__5504
0a7f0     03 2A 66 F0 | 	shl	local07, #3
0a7f4     F2 2A 02 F1 | 	add	local07, objptr
0a7f8     15 2B 02 FB | 	rdlong	local07, local07
0a7fc     02 00 00 FF 
0a800     38 E4 05 F1 | 	add	objptr, ##1080
0a804     F2 1E 02 FB | 	rdlong	local01, objptr
0a808     03 1E 66 F0 | 	shl	local01, #3
0a80c     02 00 00 FF 
0a810     38 E4 85 F1 | 	sub	objptr, ##1080
0a814     F2 1E 02 F1 | 	add	local01, objptr
0a818     0F 13 02 FB | 	rdlong	arg01, local01
0a81c     35 00 00 FF 
0a820     0C E4 85 F1 | 	sub	objptr, ##27148
0a824     09 2D 02 F6 | 	mov	local08, arg01
0a828     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a82c                 | LR__0905
0a82c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a830     01 2C 06 51 |  if_ne	add	local08, #1
0a834     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a838                 | LR__0906
0a838     09 2D 82 F1 | 	sub	local08, arg01
0a83c     16 15 02 F6 | 	mov	arg02, local08
0a840     01 14 86 F1 | 	sub	arg02, #1
0a844     15 13 02 F6 | 	mov	arg01, local07
0a848     7C 8E B1 FD | 	call	#__system__Right_S
0a84c     FD 14 02 F6 | 	mov	arg02, result1
0a850     13 13 02 F6 | 	mov	arg01, local05
0a854     C8 6D B1 FD | 	call	#__system___string_concat
0a858     14 FB 61 FC | 	wrlong	result1, local06
0a85c                 | LR__0907
0a85c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a85c     37 00 00 FF 
0a860     44 E4 05 F1 | 	add	objptr, ##28228
0a864     F2 16 02 FB | 	rdlong	arg03, objptr
0a868     03 16 66 F0 | 	shl	arg03, #3
0a86c     02 00 00 FF 
0a870     38 E4 85 F1 | 	sub	objptr, ##1080
0a874     F2 16 02 F1 | 	add	arg03, objptr
0a878     0B 13 02 FB | 	rdlong	arg01, arg03
0a87c     01 14 06 F6 | 	mov	arg02, #1
0a880     35 00 00 FF 
0a884     0C E4 85 F1 | 	sub	objptr, ##27148
0a888     B4 8D B1 FD | 	call	#__system__Left_S
0a88c     FD 12 02 F6 | 	mov	arg01, result1
0a890     8B 01 00 FF 
0a894     C4 15 06 F6 | 	mov	arg02, ##@LR__5505
0a898     50 6D B1 FD | 	call	#__system___string_cmp
0a89c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a8a0     94 00 90 5D |  if_ne	jmp	#LR__0910
0a8a4     37 00 00 FF 
0a8a8     44 E4 05 F1 | 	add	objptr, ##28228
0a8ac     F2 2A 02 FB | 	rdlong	local07, objptr
0a8b0     15 29 02 F6 | 	mov	local06, local07
0a8b4     03 28 66 F0 | 	shl	local06, #3
0a8b8     02 00 00 FF 
0a8bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a8c0     F2 28 02 F1 | 	add	local06, objptr
0a8c4     8B 01 00 FF 
0a8c8     C6 27 06 F6 | 	mov	local05, ##@LR__5506
0a8cc     03 2A 66 F0 | 	shl	local07, #3
0a8d0     F2 2A 02 F1 | 	add	local07, objptr
0a8d4     15 2B 02 FB | 	rdlong	local07, local07
0a8d8     02 00 00 FF 
0a8dc     38 E4 05 F1 | 	add	objptr, ##1080
0a8e0     F2 1E 02 FB | 	rdlong	local01, objptr
0a8e4     03 1E 66 F0 | 	shl	local01, #3
0a8e8     02 00 00 FF 
0a8ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f0     F2 1E 02 F1 | 	add	local01, objptr
0a8f4     0F 13 02 FB | 	rdlong	arg01, local01
0a8f8     35 00 00 FF 
0a8fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a900     09 2D 02 F6 | 	mov	local08, arg01
0a904     97 06 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0a908                 | LR__0908
0a908     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a90c     01 2C 06 51 |  if_ne	add	local08, #1
0a910     F4 FF 9F 5D |  if_ne	jmp	#LR__0908
0a914                 | LR__0909
0a914     09 2D 82 F1 | 	sub	local08, arg01
0a918     16 15 02 F6 | 	mov	arg02, local08
0a91c     01 14 86 F1 | 	sub	arg02, #1
0a920     15 13 02 F6 | 	mov	arg01, local07
0a924     A0 8D B1 FD | 	call	#__system__Right_S
0a928     FD 14 02 F6 | 	mov	arg02, result1
0a92c     13 13 02 F6 | 	mov	arg01, local05
0a930     EC 6C B1 FD | 	call	#__system___string_concat
0a934     14 FB 61 FC | 	wrlong	result1, local06
0a938                 | LR__0910
0a938     37 00 00 FF 
0a93c     44 E4 05 F1 | 	add	objptr, ##28228
0a940     F2 28 02 FB | 	rdlong	local06, objptr
0a944     03 28 66 F0 | 	shl	local06, #3
0a948     02 00 00 FF 
0a94c     38 E4 85 F1 | 	sub	objptr, ##1080
0a950     F2 28 02 F1 | 	add	local06, objptr
0a954     14 13 02 FB | 	rdlong	arg01, local06
0a958     00 14 06 F6 | 	mov	arg02, #0
0a95c     35 00 00 FF 
0a960     0C E4 85 F1 | 	sub	objptr, ##27148
0a964     90 A0 B1 FD | 	call	#__system____builtin_atoi
0a968     FD 24 02 FD | 	qmul	local04, result1
0a96c     4A 00 00 FF 
0a970     7C E4 05 F1 | 	add	objptr, ##38012
0a974     F2 28 02 FB | 	rdlong	local06, objptr
0a978     14 2F 02 F6 | 	mov	local09, local06
0a97c     01 2E 66 F0 | 	shl	local09, #1
0a980     14 2F 02 F1 | 	add	local09, local06
0a984     02 2E 66 F0 | 	shl	local09, #2
0a988     03 00 00 FF 
0a98c     00 E4 85 F1 | 	sub	objptr, ##1536
0a990     F2 2E 02 F1 | 	add	local09, objptr
0a994     03 00 00 FF 
0a998     00 E4 05 F1 | 	add	objptr, ##1536
0a99c     18 1E 62 FD | 	getqx	local01
0a9a0     1C 22 06 F6 | 	mov	local03, #28
0a9a4     0F 29 02 F6 | 	mov	local06, local01
0a9a8     10 2B 02 F6 | 	mov	local07, local02
0a9ac     17 29 62 FC | 	wrlong	local06, local09
0a9b0     11 2F 02 F6 | 	mov	local09, local03
0a9b4     F2 28 02 FB | 	rdlong	local06, objptr
0a9b8     14 27 02 F6 | 	mov	local05, local06
0a9bc     01 26 66 F0 | 	shl	local05, #1
0a9c0     14 27 02 F1 | 	add	local05, local06
0a9c4     02 26 66 F0 | 	shl	local05, #2
0a9c8     03 00 00 FF 
0a9cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a9d0     F2 26 02 F1 | 	add	local05, objptr
0a9d4     04 26 06 F1 | 	add	local05, #4
0a9d8     13 2B 62 FC | 	wrlong	local07, local05
0a9dc     03 00 00 FF 
0a9e0     00 E4 05 F1 | 	add	objptr, ##1536
0a9e4     F2 2A 02 FB | 	rdlong	local07, objptr
0a9e8     15 29 02 F6 | 	mov	local06, local07
0a9ec     01 28 66 F0 | 	shl	local06, #1
0a9f0     15 29 02 F1 | 	add	local06, local07
0a9f4     02 28 66 F0 | 	shl	local06, #2
0a9f8     03 00 00 FF 
0a9fc     00 E4 85 F1 | 	sub	objptr, ##1536
0aa00     F2 28 02 F1 | 	add	local06, objptr
0aa04     08 28 06 F1 | 	add	local06, #8
0aa08     14 2F 62 FC | 	wrlong	local09, local06
0aa0c     03 00 00 FF 
0aa10     00 E4 05 F1 | 	add	objptr, ##1536
0aa14     F2 28 02 FB | 	rdlong	local06, objptr
0aa18     01 28 06 F1 | 	add	local06, #1
0aa1c     F2 28 62 FC | 	wrlong	local06, objptr
0aa20     13 00 00 FF 
0aa24     38 E4 85 F1 | 	sub	objptr, ##9784
0aa28     F2 28 02 FB | 	rdlong	local06, objptr
0aa2c     01 28 06 F1 | 	add	local06, #1
0aa30     F2 28 62 FC | 	wrlong	local06, objptr
0aa34     37 00 00 FF 
0aa38     44 E4 85 F1 | 	sub	objptr, ##28228
0aa3c     24 05 90 FD | 	jmp	#LR__0923
0aa40                 | LR__0911
0aa40                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0aa40     01 24 0E F2 | 	cmp	local04, #1 wz
0aa44     48 00 90 5D |  if_ne	jmp	#LR__0912
0aa48     00 C0 1F FF 
0aa4c     00 28 06 F6 | 	mov	local06, ##1065353216
0aa50     37 00 00 FF 
0aa54     44 E4 05 F1 | 	add	objptr, ##28228
0aa58     F2 2E 02 FB | 	rdlong	local09, objptr
0aa5c     03 2E 66 F0 | 	shl	local09, #3
0aa60     02 00 00 FF 
0aa64     38 E4 85 F1 | 	sub	objptr, ##1080
0aa68     F2 2E 02 F1 | 	add	local09, objptr
0aa6c     17 13 02 FB | 	rdlong	arg01, local09
0aa70     35 00 00 FF 
0aa74     0C E4 85 F1 | 	sub	objptr, ##27148
0aa78     10 A1 B1 FD | 	call	#__system____builtin_atof
0aa7c     FD 14 02 F6 | 	mov	arg02, result1
0aa80     14 13 02 F6 | 	mov	arg01, local06
0aa84     F8 98 B1 FD | 	call	#__system___float_mul
0aa88     FD 1E 02 F6 | 	mov	local01, result1
0aa8c     1E 22 06 F6 | 	mov	local03, #30
0aa90                 | LR__0912
0aa90                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0aa90     FF FF 7F FF 
0aa94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0aa98     48 00 90 5D |  if_ne	jmp	#LR__0913
0aa9c     00 C0 5F FF 
0aaa0     00 28 06 F6 | 	mov	local06, ##-1082130432
0aaa4     37 00 00 FF 
0aaa8     44 E4 05 F1 | 	add	objptr, ##28228
0aaac     F2 2E 02 FB | 	rdlong	local09, objptr
0aab0     03 2E 66 F0 | 	shl	local09, #3
0aab4     02 00 00 FF 
0aab8     38 E4 85 F1 | 	sub	objptr, ##1080
0aabc     F2 2E 02 F1 | 	add	local09, objptr
0aac0     17 13 02 FB | 	rdlong	arg01, local09
0aac4     35 00 00 FF 
0aac8     0C E4 85 F1 | 	sub	objptr, ##27148
0aacc     BC A0 B1 FD | 	call	#__system____builtin_atof
0aad0     FD 14 02 F6 | 	mov	arg02, result1
0aad4     14 13 02 F6 | 	mov	arg01, local06
0aad8     A4 98 B1 FD | 	call	#__system___float_mul
0aadc     FD 1E 02 F6 | 	mov	local01, result1
0aae0     1E 22 06 F6 | 	mov	local03, #30
0aae4                 | LR__0913
0aae4     0F 29 02 F6 | 	mov	local06, local01
0aae8     10 2B 02 F6 | 	mov	local07, local02
0aaec     11 27 02 F6 | 	mov	local05, local03
0aaf0     4A 00 00 FF 
0aaf4     7C E4 05 F1 | 	add	objptr, ##38012
0aaf8     F2 1E 02 FB | 	rdlong	local01, objptr
0aafc     0F 2F 02 F6 | 	mov	local09, local01
0ab00     01 2E 66 F0 | 	shl	local09, #1
0ab04     0F 2F 02 F1 | 	add	local09, local01
0ab08     02 2E 66 F0 | 	shl	local09, #2
0ab0c     03 00 00 FF 
0ab10     00 E4 85 F1 | 	sub	objptr, ##1536
0ab14     F2 2E 02 F1 | 	add	local09, objptr
0ab18     17 29 62 FC | 	wrlong	local06, local09
0ab1c     03 00 00 FF 
0ab20     00 E4 05 F1 | 	add	objptr, ##1536
0ab24     F2 2E 02 FB | 	rdlong	local09, objptr
0ab28     17 29 02 F6 | 	mov	local06, local09
0ab2c     01 28 66 F0 | 	shl	local06, #1
0ab30     17 29 02 F1 | 	add	local06, local09
0ab34     02 28 66 F0 | 	shl	local06, #2
0ab38     03 00 00 FF 
0ab3c     00 E4 85 F1 | 	sub	objptr, ##1536
0ab40     F2 28 02 F1 | 	add	local06, objptr
0ab44     04 28 06 F1 | 	add	local06, #4
0ab48     14 2B 62 FC | 	wrlong	local07, local06
0ab4c     03 00 00 FF 
0ab50     00 E4 05 F1 | 	add	objptr, ##1536
0ab54     F2 2E 02 FB | 	rdlong	local09, objptr
0ab58     17 2B 02 F6 | 	mov	local07, local09
0ab5c     01 2A 66 F0 | 	shl	local07, #1
0ab60     17 2B 02 F1 | 	add	local07, local09
0ab64     02 2A 66 F0 | 	shl	local07, #2
0ab68     03 00 00 FF 
0ab6c     00 E4 85 F1 | 	sub	objptr, ##1536
0ab70     F2 2A 02 F1 | 	add	local07, objptr
0ab74     08 2A 06 F1 | 	add	local07, #8
0ab78     15 27 62 FC | 	wrlong	local05, local07
0ab7c     03 00 00 FF 
0ab80     00 E4 05 F1 | 	add	objptr, ##1536
0ab84     F2 28 02 FB | 	rdlong	local06, objptr
0ab88     01 28 06 F1 | 	add	local06, #1
0ab8c     F2 28 62 FC | 	wrlong	local06, objptr
0ab90     13 00 00 FF 
0ab94     38 E4 85 F1 | 	sub	objptr, ##9784
0ab98     F2 28 02 FB | 	rdlong	local06, objptr
0ab9c     01 28 06 F1 | 	add	local06, #1
0aba0     F2 28 62 FC | 	wrlong	local06, objptr
0aba4     37 00 00 FF 
0aba8     44 E4 85 F1 | 	sub	objptr, ##28228
0abac     B4 03 90 FD | 	jmp	#LR__0923
0abb0                 | LR__0914
0abb0     37 00 00 FF 
0abb4     44 E4 05 F1 | 	add	objptr, ##28228
0abb8     F2 16 02 FB | 	rdlong	arg03, objptr
0abbc     03 16 66 F0 | 	shl	arg03, #3
0abc0     02 00 00 FF 
0abc4     38 E4 85 F1 | 	sub	objptr, ##1080
0abc8     F2 16 02 F1 | 	add	arg03, objptr
0abcc     0B 13 02 FB | 	rdlong	arg01, arg03
0abd0     35 00 00 FF 
0abd4     0C E4 85 F1 | 	sub	objptr, ##27148
0abd8     09 2D 02 F6 | 	mov	local08, arg01
0abdc     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0abe0                 | LR__0915
0abe0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0abe4     01 2C 06 51 |  if_ne	add	local08, #1
0abe8     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0abec                 | LR__0916
0abec     09 2D 82 F1 | 	sub	local08, arg01
0abf0     16 FB 01 F6 | 	mov	result1, local08
0abf4     51 00 00 FF 
0abf8     FC E5 05 F1 | 	add	objptr, ##41980
0abfc     F2 FA 61 FC | 	wrlong	result1, objptr
0ac00     50 E4 85 F1 | 	sub	objptr, #80
0ac04     F2 12 02 FB | 	rdlong	arg01, objptr
0ac08     FD 12 82 F1 | 	sub	arg01, result1
0ac0c     04 12 86 F1 | 	sub	arg01, #4
0ac10     03 12 26 F5 | 	andn	arg01, #3
0ac14     F2 12 62 FC | 	wrlong	arg01, objptr
0ac18     50 E4 05 F1 | 	add	objptr, #80
0ac1c     F2 14 02 FB | 	rdlong	arg02, objptr
0ac20     51 00 00 FF 
0ac24     FC E5 85 F1 | 	sub	objptr, ##41980
0ac28     64 35 B1 FD | 	call	#_pslpoke
0ac2c                 | '     pslpoke memtop,l
0ac2c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ac2c     01 30 06 F6 | 	mov	local10, #1
0ac30     51 00 00 FF 
0ac34     FC E5 05 F1 | 	add	objptr, ##41980
0ac38     F2 32 02 FB | 	rdlong	local11, objptr
0ac3c     51 00 00 FF 
0ac40     FC E5 85 F1 | 	sub	objptr, ##41980
0ac44     01 32 06 F1 | 	add	local11, #1
0ac48                 | LR__0917
0ac48     19 31 52 F2 | 	cmps	local10, local11 wc
0ac4c     5C 00 90 3D |  if_ae	jmp	#LR__0918
0ac50     51 00 00 FF 
0ac54     AC E5 05 F1 | 	add	objptr, ##41900
0ac58     F2 2A 02 FB | 	rdlong	local07, objptr
0ac5c     03 2A 06 F1 | 	add	local07, #3
0ac60     18 2B 02 F1 | 	add	local07, local10
0ac64     1A 00 00 FF 
0ac68     68 E5 85 F1 | 	sub	objptr, ##13672
0ac6c     F2 2E 02 FB | 	rdlong	local09, objptr
0ac70     03 2E 66 F0 | 	shl	local09, #3
0ac74     02 00 00 FF 
0ac78     38 E4 85 F1 | 	sub	objptr, ##1080
0ac7c     F2 2E 02 F1 | 	add	local09, objptr
0ac80     17 13 02 FB | 	rdlong	arg01, local09
0ac84     18 15 02 F6 | 	mov	arg02, local10
0ac88     01 16 06 F6 | 	mov	arg03, #1
0ac8c     35 00 00 FF 
0ac90     0C E4 85 F1 | 	sub	objptr, ##27148
0ac94     C0 8A B1 FD | 	call	#__system__Mid_S
0ac98     FD 14 C2 FA | 	rdbyte	arg02, result1
0ac9c     15 13 02 F6 | 	mov	arg01, local07
0aca0     7C 35 B1 FD | 	call	#_pspoke
0aca4     01 30 06 F1 | 	add	local10, #1
0aca8     9C FF 9F FD | 	jmp	#LR__0917
0acac                 | LR__0918
0acac     51 00 00 FF 
0acb0     AC E5 05 F1 | 	add	objptr, ##41900
0acb4     F2 1E 02 FB | 	rdlong	local01, objptr
0acb8     2B 22 06 F6 | 	mov	local03, #43
0acbc     0F 29 02 F6 | 	mov	local06, local01
0acc0     10 2B 02 F6 | 	mov	local07, local02
0acc4     11 33 02 F6 | 	mov	local11, local03
0acc8     07 00 00 FF 
0accc     30 E5 85 F1 | 	sub	objptr, ##3888
0acd0     F2 30 02 FB | 	rdlong	local10, objptr
0acd4     18 2F 02 F6 | 	mov	local09, local10
0acd8     01 2E 66 F0 | 	shl	local09, #1
0acdc     18 2F 02 F1 | 	add	local09, local10
0ace0     02 2E 66 F0 | 	shl	local09, #2
0ace4     03 00 00 FF 
0ace8     00 E4 85 F1 | 	sub	objptr, ##1536
0acec     F2 2E 02 F1 | 	add	local09, objptr
0acf0     17 29 62 FC | 	wrlong	local06, local09
0acf4     03 00 00 FF 
0acf8     00 E4 05 F1 | 	add	objptr, ##1536
0acfc     F2 30 02 FB | 	rdlong	local10, objptr
0ad00     18 2F 02 F6 | 	mov	local09, local10
0ad04     01 2E 66 F0 | 	shl	local09, #1
0ad08     18 2F 02 F1 | 	add	local09, local10
0ad0c     02 2E 66 F0 | 	shl	local09, #2
0ad10     03 00 00 FF 
0ad14     00 E4 85 F1 | 	sub	objptr, ##1536
0ad18     F2 2E 02 F1 | 	add	local09, objptr
0ad1c     04 2E 06 F1 | 	add	local09, #4
0ad20     17 2B 62 FC | 	wrlong	local07, local09
0ad24     03 00 00 FF 
0ad28     00 E4 05 F1 | 	add	objptr, ##1536
0ad2c     F2 30 02 FB | 	rdlong	local10, objptr
0ad30     18 2F 02 F6 | 	mov	local09, local10
0ad34     01 2E 66 F0 | 	shl	local09, #1
0ad38     18 2F 02 F1 | 	add	local09, local10
0ad3c     02 2E 66 F0 | 	shl	local09, #2
0ad40     03 00 00 FF 
0ad44     00 E4 85 F1 | 	sub	objptr, ##1536
0ad48     F2 2E 02 F1 | 	add	local09, objptr
0ad4c     08 2E 06 F1 | 	add	local09, #8
0ad50     17 33 62 FC | 	wrlong	local11, local09
0ad54     03 00 00 FF 
0ad58     00 E4 05 F1 | 	add	objptr, ##1536
0ad5c     F2 28 02 FB | 	rdlong	local06, objptr
0ad60     01 28 06 F1 | 	add	local06, #1
0ad64     F2 28 62 FC | 	wrlong	local06, objptr
0ad68     13 00 00 FF 
0ad6c     38 E4 85 F1 | 	sub	objptr, ##9784
0ad70     F2 28 02 FB | 	rdlong	local06, objptr
0ad74     01 28 06 F1 | 	add	local06, #1
0ad78     F2 28 62 FC | 	wrlong	local06, objptr
0ad7c     37 00 00 FF 
0ad80     44 E4 85 F1 | 	sub	objptr, ##28228
0ad84     DC 01 90 FD | 	jmp	#LR__0923
0ad88                 | LR__0919
0ad88     2C 22 06 F6 | 	mov	local03, #44
0ad8c     37 00 00 FF 
0ad90     44 E4 05 F1 | 	add	objptr, ##28228
0ad94     F2 28 02 FB | 	rdlong	local06, objptr
0ad98     03 28 66 F0 | 	shl	local06, #3
0ad9c     02 00 00 FF 
0ada0     38 E4 85 F1 | 	sub	objptr, ##1080
0ada4     F2 28 02 F1 | 	add	local06, objptr
0ada8     14 13 02 FB | 	rdlong	arg01, local06
0adac     00 14 06 F6 | 	mov	arg02, #0
0adb0     35 00 00 FF 
0adb4     0C E4 85 F1 | 	sub	objptr, ##27148
0adb8     3C 9C B1 FD | 	call	#__system____builtin_atoi
0adbc     FD 1E 02 F6 | 	mov	local01, result1
0adc0     0F 29 02 F6 | 	mov	local06, local01
0adc4     10 2B 02 F6 | 	mov	local07, local02
0adc8     11 33 02 F6 | 	mov	local11, local03
0adcc     4A 00 00 FF 
0add0     7C E4 05 F1 | 	add	objptr, ##38012
0add4     F2 30 02 FB | 	rdlong	local10, objptr
0add8     18 2F 02 F6 | 	mov	local09, local10
0addc     01 2E 66 F0 | 	shl	local09, #1
0ade0     18 2F 02 F1 | 	add	local09, local10
0ade4     02 2E 66 F0 | 	shl	local09, #2
0ade8     03 00 00 FF 
0adec     00 E4 85 F1 | 	sub	objptr, ##1536
0adf0     F2 2E 02 F1 | 	add	local09, objptr
0adf4     17 29 62 FC | 	wrlong	local06, local09
0adf8     03 00 00 FF 
0adfc     00 E4 05 F1 | 	add	objptr, ##1536
0ae00     F2 30 02 FB | 	rdlong	local10, objptr
0ae04     18 2F 02 F6 | 	mov	local09, local10
0ae08     01 2E 66 F0 | 	shl	local09, #1
0ae0c     18 2F 02 F1 | 	add	local09, local10
0ae10     02 2E 66 F0 | 	shl	local09, #2
0ae14     03 00 00 FF 
0ae18     00 E4 85 F1 | 	sub	objptr, ##1536
0ae1c     F2 2E 02 F1 | 	add	local09, objptr
0ae20     04 2E 06 F1 | 	add	local09, #4
0ae24     17 2B 62 FC | 	wrlong	local07, local09
0ae28     03 00 00 FF 
0ae2c     00 E4 05 F1 | 	add	objptr, ##1536
0ae30     F2 30 02 FB | 	rdlong	local10, objptr
0ae34     18 2F 02 F6 | 	mov	local09, local10
0ae38     01 2E 66 F0 | 	shl	local09, #1
0ae3c     18 2F 02 F1 | 	add	local09, local10
0ae40     02 2E 66 F0 | 	shl	local09, #2
0ae44     03 00 00 FF 
0ae48     00 E4 85 F1 | 	sub	objptr, ##1536
0ae4c     F2 2E 02 F1 | 	add	local09, objptr
0ae50     08 2E 06 F1 | 	add	local09, #8
0ae54     17 33 62 FC | 	wrlong	local11, local09
0ae58     03 00 00 FF 
0ae5c     00 E4 05 F1 | 	add	objptr, ##1536
0ae60     F2 28 02 FB | 	rdlong	local06, objptr
0ae64     01 28 06 F1 | 	add	local06, #1
0ae68     F2 28 62 FC | 	wrlong	local06, objptr
0ae6c     13 00 00 FF 
0ae70     38 E4 85 F1 | 	sub	objptr, ##9784
0ae74     F2 28 02 FB | 	rdlong	local06, objptr
0ae78     01 28 06 F1 | 	add	local06, #1
0ae7c     F2 28 62 FC | 	wrlong	local06, objptr
0ae80     37 00 00 FF 
0ae84     44 E4 85 F1 | 	sub	objptr, ##28228
0ae88     D8 00 90 FD | 	jmp	#LR__0923
0ae8c                 | LR__0920
0ae8c     12 13 02 F6 | 	mov	arg01, local04
0ae90     24 04 B0 FD | 	call	#_getvar
0ae94     37 00 00 FF 
0ae98     44 E4 05 F1 | 	add	objptr, ##28228
0ae9c     F2 28 02 FB | 	rdlong	local06, objptr
0aea0     01 28 06 F1 | 	add	local06, #1
0aea4     F2 28 62 FC | 	wrlong	local06, objptr
0aea8     37 00 00 FF 
0aeac     44 E4 85 F1 | 	sub	objptr, ##28228
0aeb0                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0aeb0     01 FA 55 F2 | 	cmps	result1, #1 wc
0aeb4     B0 00 90 3D |  if_ae	jmp	#LR__0924
0aeb8     A8 00 90 FD | 	jmp	#LR__0923
0aebc                 | LR__0921
0aebc     37 00 00 FF 
0aec0     44 E4 05 F1 | 	add	objptr, ##28228
0aec4     F2 28 02 FB | 	rdlong	local06, objptr
0aec8     01 28 06 F1 | 	add	local06, #1
0aecc     F2 28 62 FC | 	wrlong	local06, objptr
0aed0     37 00 00 FF 
0aed4     44 E4 85 F1 | 	sub	objptr, ##28228
0aed8     20 F1 BF FD | 	call	#_expr
0aedc                 | '     ct+=1
0aedc                 | '     err=expr() : if err>0 then return err 
0aedc     01 FA 55 F2 | 	cmps	result1, #1 wc
0aee0     84 00 90 3D |  if_ae	jmp	#LR__0924
0aee4                 | '     if lparts(ct).token=token_rpar then ct+=1
0aee4     37 00 00 FF 
0aee8     44 E4 05 F1 | 	add	objptr, ##28228
0aeec     F2 32 02 FB | 	rdlong	local11, objptr
0aef0     03 32 66 F0 | 	shl	local11, #3
0aef4     02 00 00 FF 
0aef8     38 E4 85 F1 | 	sub	objptr, ##1080
0aefc     F2 32 02 F1 | 	add	local11, objptr
0af00     04 32 06 F1 | 	add	local11, #4
0af04     19 33 02 FB | 	rdlong	local11, local11
0af08     14 32 0E F2 | 	cmp	local11, #20 wz
0af0c     35 00 00 FF 
0af10     0C E4 85 F1 | 	sub	objptr, ##27148
0af14     4C 00 90 5D |  if_ne	jmp	#LR__0923
0af18     37 00 00 FF 
0af1c     44 E4 05 F1 | 	add	objptr, ##28228
0af20     F2 28 02 FB | 	rdlong	local06, objptr
0af24     01 28 06 F1 | 	add	local06, #1
0af28     F2 28 62 FC | 	wrlong	local06, objptr
0af2c     37 00 00 FF 
0af30     44 E4 85 F1 | 	sub	objptr, ##28228
0af34     2C 00 90 FD | 	jmp	#LR__0923
0af38                 | LR__0922
0af38     12 13 02 F6 | 	mov	arg01, local04
0af3c     34 00 B0 FD | 	call	#_getfun
0af40     37 00 00 FF 
0af44     44 E4 05 F1 | 	add	objptr, ##28228
0af48     F2 28 02 FB | 	rdlong	local06, objptr
0af4c     01 28 06 F1 | 	add	local06, #1
0af50     F2 28 62 FC | 	wrlong	local06, objptr
0af54     37 00 00 FF 
0af58     44 E4 85 F1 | 	sub	objptr, ##28228
0af5c                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0af5c     01 FA 55 F2 | 	cmps	result1, #1 wc
0af60     04 00 90 3D |  if_ae	jmp	#LR__0924
0af64                 | LR__0923
0af64                 | ' return 0  
0af64     00 FA 05 F6 | 	mov	result1, #0
0af68                 | LR__0924
0af68     A7 F0 03 F6 | 	mov	ptra, fp
0af6c     B2 00 A0 FD | 	call	#popregs_
0af70                 | _getvalue_ret
0af70     2D 00 64 FD | 	ret
0af74                 | 
0af74                 | ' 
0af74                 | ' ' Get a function result 
0af74                 | ' 
0af74                 | ' function getfun(m as integer) as ulong
0af74                 | _getfun
0af74     0F 4A 05 F6 | 	mov	COUNT_, #15
0af78     A8 00 A0 FD | 	call	#pushregs_
0af7c                 | _getfun_enter
0af7c     09 25 02 F6 | 	mov	local04, arg01
0af80     37 00 00 FF 
0af84     44 E4 05 F1 | 	add	objptr, ##28228
0af88     F2 26 02 FB | 	rdlong	local05, objptr
0af8c     13 29 02 F6 | 	mov	local06, local05
0af90     00 2A 06 F6 | 	mov	local07, #0
0af94                 | ' oldct=ct
0af94                 | ' numpar=0
0af94                 | ' if lparts(ct+1).token=token_lpar then
0af94     01 26 06 F1 | 	add	local05, #1
0af98     03 26 66 F0 | 	shl	local05, #3
0af9c     02 00 00 FF 
0afa0     38 E4 85 F1 | 	sub	objptr, ##1080
0afa4     F2 26 02 F1 | 	add	local05, objptr
0afa8     04 26 06 F1 | 	add	local05, #4
0afac     13 27 02 FB | 	rdlong	local05, local05
0afb0     15 26 0E F2 | 	cmp	local05, #21 wz
0afb4     35 00 00 FF 
0afb8     0C E4 85 F1 | 	sub	objptr, ##27148
0afbc     54 01 90 5D |  if_ne	jmp	#LR__0934
0afc0     37 00 00 FF 
0afc4     44 E4 05 F1 | 	add	objptr, ##28228
0afc8     F2 2C 02 FB | 	rdlong	local08, objptr
0afcc     01 2C 06 F1 | 	add	local08, #1
0afd0     F2 2C 62 FC | 	wrlong	local08, objptr
0afd4     37 00 00 FF 
0afd8     44 E4 85 F1 | 	sub	objptr, ##28228
0afdc                 | '   ct+=1 											' omit this lpar, this is for expr list
0afdc                 | '   do
0afdc                 | LR__0930
0afdc     37 00 00 FF 
0afe0     44 E4 05 F1 | 	add	objptr, ##28228
0afe4     F2 26 02 FB | 	rdlong	local05, objptr
0afe8     01 26 06 F1 | 	add	local05, #1
0afec     F2 26 62 FC | 	wrlong	local05, objptr
0aff0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0aff0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0aff0     03 26 66 F0 | 	shl	local05, #3
0aff4     02 00 00 FF 
0aff8     38 E4 85 F1 | 	sub	objptr, ##1080
0affc     F2 26 02 F1 | 	add	local05, objptr
0b000     04 26 06 F1 | 	add	local05, #4
0b004     13 2D 02 FB | 	rdlong	local08, local05
0b008     15 2C 0E F2 | 	cmp	local08, #21 wz
0b00c     35 00 00 FF 
0b010     0C E4 85 F1 | 	sub	objptr, ##27148
0b014     44 00 90 5D |  if_ne	jmp	#LR__0931
0b018     37 00 00 FF 
0b01c     44 E4 05 F1 | 	add	objptr, ##28228
0b020     F2 2C 02 FB | 	rdlong	local08, objptr
0b024     01 2C 06 F1 | 	add	local08, #1
0b028     F2 2C 62 FC | 	wrlong	local08, objptr
0b02c     37 00 00 FF 
0b030     44 E4 85 F1 | 	sub	objptr, ##28228
0b034     C4 EF BF FD | 	call	#_expr
0b038     FD 2E 02 F6 | 	mov	local09, result1
0b03c     37 00 00 FF 
0b040     44 E4 05 F1 | 	add	objptr, ##28228
0b044     F2 2C 02 FB | 	rdlong	local08, objptr
0b048     01 2C 06 F1 | 	add	local08, #1
0b04c     F2 2C 62 FC | 	wrlong	local08, objptr
0b050     37 00 00 FF 
0b054     44 E4 85 F1 | 	sub	objptr, ##28228
0b058     08 00 90 FD | 	jmp	#LR__0932
0b05c                 | LR__0931
0b05c     9C EF BF FD | 	call	#_expr
0b060     FD 2E 02 F6 | 	mov	local09, result1
0b064                 | LR__0932
0b064                 | '     if err>0 then return err
0b064     01 2E 16 F2 | 	cmp	local09, #1 wc
0b068     17 FB 01 36 |  if_ae	mov	result1, local09
0b06c     3C 02 90 3D |  if_ae	jmp	#LR__0936
0b070     01 2A 06 F1 | 	add	local07, #1
0b074     37 00 00 FF 
0b078     44 E4 05 F1 | 	add	objptr, ##28228
0b07c     F2 26 02 FB | 	rdlong	local05, objptr
0b080     03 26 66 F0 | 	shl	local05, #3
0b084     02 00 00 FF 
0b088     38 E4 85 F1 | 	sub	objptr, ##1080
0b08c     F2 26 02 F1 | 	add	local05, objptr
0b090     04 26 06 F1 | 	add	local05, #4
0b094     13 2F 02 FB | 	rdlong	local09, local05
0b098     14 2E 0E F2 | 	cmp	local09, #20 wz
0b09c     35 00 00 FF 
0b0a0     0C E4 85 F1 | 	sub	objptr, ##27148
0b0a4     34 00 90 AD |  if_e	jmp	#LR__0933
0b0a8     37 00 00 FF 
0b0ac     44 E4 05 F1 | 	add	objptr, ##28228
0b0b0     F2 2E 02 FB | 	rdlong	local09, objptr
0b0b4     03 2E 66 F0 | 	shl	local09, #3
0b0b8     02 00 00 FF 
0b0bc     38 E4 85 F1 | 	sub	objptr, ##1080
0b0c0     F2 2E 02 F1 | 	add	local09, objptr
0b0c4     04 2E 06 F1 | 	add	local09, #4
0b0c8     17 2F 02 FB | 	rdlong	local09, local09
0b0cc     FE 2F 0E F2 | 	cmp	local09, #510 wz
0b0d0     35 00 00 FF 
0b0d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b0d8     00 FF 9F 5D |  if_ne	jmp	#LR__0930
0b0dc                 | LR__0933
0b0dc                 | '   if lparts(ct).token=token_end then return 14
0b0dc     37 00 00 FF 
0b0e0     44 E4 05 F1 | 	add	objptr, ##28228
0b0e4     F2 26 02 FB | 	rdlong	local05, objptr
0b0e8     03 26 66 F0 | 	shl	local05, #3
0b0ec     02 00 00 FF 
0b0f0     38 E4 85 F1 | 	sub	objptr, ##1080
0b0f4     F2 26 02 F1 | 	add	local05, objptr
0b0f8     04 26 06 F1 | 	add	local05, #4
0b0fc     13 2F 02 FB | 	rdlong	local09, local05
0b100     FE 2F 0E F2 | 	cmp	local09, #510 wz
0b104     35 00 00 FF 
0b108     0C E4 85 F1 | 	sub	objptr, ##27148
0b10c     0E FA 05 A6 |  if_e	mov	result1, #14
0b110     98 01 90 AD |  if_e	jmp	#LR__0936
0b114                 | LR__0934
0b114     15 1F 02 F6 | 	mov	local01, local07
0b118     03 28 66 F0 | 	shl	local06, #3
0b11c     35 00 00 FF 
0b120     0C E4 05 F1 | 	add	objptr, ##27148
0b124     F2 28 02 F1 | 	add	local06, objptr
0b128     04 28 06 F1 | 	add	local06, #4
0b12c     14 23 02 FB | 	rdlong	local03, local06
0b130     0F 2D 02 F6 | 	mov	local08, local01
0b134     10 31 02 F6 | 	mov	local10, local02
0b138     11 33 02 F6 | 	mov	local11, local03
0b13c     15 00 00 FF 
0b140     70 E4 05 F1 | 	add	objptr, ##10864
0b144     F2 34 02 FB | 	rdlong	local12, objptr
0b148     1A 37 02 F6 | 	mov	local13, local12
0b14c     01 36 66 F0 | 	shl	local13, #1
0b150     1A 37 02 F1 | 	add	local13, local12
0b154     02 36 66 F0 | 	shl	local13, #2
0b158     03 00 00 FF 
0b15c     00 E4 85 F1 | 	sub	objptr, ##1536
0b160     F2 36 02 F1 | 	add	local13, objptr
0b164     1B 2D 62 FC | 	wrlong	local08, local13
0b168     03 00 00 FF 
0b16c     00 E4 05 F1 | 	add	objptr, ##1536
0b170     F2 2C 02 FB | 	rdlong	local08, objptr
0b174     16 39 02 F6 | 	mov	local14, local08
0b178     01 38 66 F0 | 	shl	local14, #1
0b17c     16 39 02 F1 | 	add	local14, local08
0b180     02 38 66 F0 | 	shl	local14, #2
0b184     03 00 00 FF 
0b188     00 E4 85 F1 | 	sub	objptr, ##1536
0b18c     F2 38 02 F1 | 	add	local14, objptr
0b190     04 38 06 F1 | 	add	local14, #4
0b194     1C 31 62 FC | 	wrlong	local10, local14
0b198     03 00 00 FF 
0b19c     00 E4 05 F1 | 	add	objptr, ##1536
0b1a0     F2 2C 02 FB | 	rdlong	local08, objptr
0b1a4     16 3B 02 F6 | 	mov	local15, local08
0b1a8     01 3A 66 F0 | 	shl	local15, #1
0b1ac     16 3B 02 F1 | 	add	local15, local08
0b1b0     02 3A 66 F0 | 	shl	local15, #2
0b1b4     03 00 00 FF 
0b1b8     00 E4 85 F1 | 	sub	objptr, ##1536
0b1bc     F2 3A 02 F1 | 	add	local15, objptr
0b1c0     08 3A 06 F1 | 	add	local15, #8
0b1c4     1D 33 62 FC | 	wrlong	local11, local15
0b1c8     03 00 00 FF 
0b1cc     00 E4 05 F1 | 	add	objptr, ##1536
0b1d0     F2 2C 02 FB | 	rdlong	local08, objptr
0b1d4     01 2C 06 F1 | 	add	local08, #1
0b1d8     F2 2C 62 FC | 	wrlong	local08, objptr
0b1dc     4A 00 00 FF 
0b1e0     7C E4 85 F1 | 	sub	objptr, ##38012
0b1e4                 | ' t2.result.uresult=numpar
0b1e4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b1e4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b1e4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b1e4     FF FF 7F FF 
0b1e8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b1ec     B8 00 90 5D |  if_ne	jmp	#LR__0935
0b1f0     15 22 06 F6 | 	mov	local03, #21
0b1f4     0F 2D 02 F6 | 	mov	local08, local01
0b1f8     10 31 02 F6 | 	mov	local10, local02
0b1fc     11 33 02 F6 | 	mov	local11, local03
0b200     4A 00 00 FF 
0b204     7C E4 05 F1 | 	add	objptr, ##38012
0b208     F2 34 02 FB | 	rdlong	local12, objptr
0b20c     1A 37 02 F6 | 	mov	local13, local12
0b210     01 36 66 F0 | 	shl	local13, #1
0b214     1A 37 02 F1 | 	add	local13, local12
0b218     02 36 66 F0 | 	shl	local13, #2
0b21c     03 00 00 FF 
0b220     00 E4 85 F1 | 	sub	objptr, ##1536
0b224     F2 36 02 F1 | 	add	local13, objptr
0b228     1B 2D 62 FC | 	wrlong	local08, local13
0b22c     03 00 00 FF 
0b230     00 E4 05 F1 | 	add	objptr, ##1536
0b234     F2 3A 02 FB | 	rdlong	local15, objptr
0b238     1D 39 02 F6 | 	mov	local14, local15
0b23c     01 38 66 F0 | 	shl	local14, #1
0b240     1D 39 02 F1 | 	add	local14, local15
0b244     02 38 66 F0 | 	shl	local14, #2
0b248     03 00 00 FF 
0b24c     00 E4 85 F1 | 	sub	objptr, ##1536
0b250     F2 38 02 F1 | 	add	local14, objptr
0b254     04 38 06 F1 | 	add	local14, #4
0b258     1C 31 62 FC | 	wrlong	local10, local14
0b25c     03 00 00 FF 
0b260     00 E4 05 F1 | 	add	objptr, ##1536
0b264     F2 38 02 FB | 	rdlong	local14, objptr
0b268     1C 3B 02 F6 | 	mov	local15, local14
0b26c     01 3A 66 F0 | 	shl	local15, #1
0b270     1C 3B 02 F1 | 	add	local15, local14
0b274     02 3A 66 F0 | 	shl	local15, #2
0b278     03 00 00 FF 
0b27c     00 E4 85 F1 | 	sub	objptr, ##1536
0b280     F2 3A 02 F1 | 	add	local15, objptr
0b284     08 3A 06 F1 | 	add	local15, #8
0b288     1D 33 62 FC | 	wrlong	local11, local15
0b28c     03 00 00 FF 
0b290     00 E4 05 F1 | 	add	objptr, ##1536
0b294     F2 2C 02 FB | 	rdlong	local08, objptr
0b298     01 2C 06 F1 | 	add	local08, #1
0b29c     F2 2C 62 FC | 	wrlong	local08, objptr
0b2a0     4A 00 00 FF 
0b2a4     7C E4 85 F1 | 	sub	objptr, ##38012
0b2a8                 | LR__0935
0b2a8                 | ' return 0
0b2a8     00 FA 05 F6 | 	mov	result1, #0
0b2ac                 | LR__0936
0b2ac     A7 F0 03 F6 | 	mov	ptra, fp
0b2b0     B2 00 A0 FD | 	call	#popregs_
0b2b4                 | _getfun_ret
0b2b4     2D 00 64 FD | 	ret
0b2b8                 | 
0b2b8                 | '   
0b2b8                 | '   
0b2b8                 | ' function getvar(m as integer) as ulong
0b2b8                 | _getvar
0b2b8     11 4A 05 F6 | 	mov	COUNT_, #17
0b2bc     A8 00 A0 FD | 	call	#pushregs_
0b2c0                 | _getvar_enter
0b2c0     09 25 02 F6 | 	mov	local04, arg01
0b2c4     37 00 00 FF 
0b2c8     44 E4 05 F1 | 	add	objptr, ##28228
0b2cc     F2 26 02 FB | 	rdlong	local05, objptr
0b2d0     03 26 66 F0 | 	shl	local05, #3
0b2d4     02 00 00 FF 
0b2d8     38 E4 85 F1 | 	sub	objptr, ##1080
0b2dc     F2 26 02 F1 | 	add	local05, objptr
0b2e0     13 29 02 FB | 	rdlong	local06, local05
0b2e4     01 2A 66 F6 | 	neg	local07, #1
0b2e8                 | ' 
0b2e8                 | ' varname$=lparts(ct).part$
0b2e8                 | ' j=-1
0b2e8                 | ' 
0b2e8                 | ' for i=0 to varnum-1
0b2e8     00 2C 06 F6 | 	mov	local08, #0
0b2ec     04 E4 85 F1 | 	sub	objptr, #4
0b2f0     F2 2E 02 FB | 	rdlong	local09, objptr
0b2f4     35 00 00 FF 
0b2f8     08 E4 85 F1 | 	sub	objptr, ##27144
0b2fc                 | LR__0940
0b2fc     17 2D 52 F2 | 	cmps	local08, local09 wc
0b300     38 00 90 3D |  if_ae	jmp	#LR__0941
0b304                 | '   if variables(i).name=varname$ then j=i : exit
0b304     16 27 02 F6 | 	mov	local05, local08
0b308     04 26 66 F0 | 	shl	local05, #4
0b30c     14 00 00 FF 
0b310     F8 E5 05 F1 | 	add	objptr, ##10744
0b314     F2 26 02 F1 | 	add	local05, objptr
0b318     13 13 02 FB | 	rdlong	arg01, local05
0b31c     14 15 02 F6 | 	mov	arg02, local06
0b320     14 00 00 FF 
0b324     F8 E5 85 F1 | 	sub	objptr, ##10744
0b328     C0 62 B1 FD | 	call	#__system___string_cmp
0b32c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b330     16 2B 02 A6 |  if_e	mov	local07, local08
0b334     01 2C 06 51 |  if_ne	add	local08, #1
0b338     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b33c                 | LR__0941
0b33c                 | ' if  j=-1 andalso varnum<maxvars then   
0b33c     FF FF 7F FF 
0b340     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b344     A8 00 90 5D |  if_ne	jmp	#LR__0942
0b348     35 00 00 FF 
0b34c     08 E4 05 F1 | 	add	objptr, ##27144
0b350     F2 2E 02 FB | 	rdlong	local09, objptr
0b354     35 00 00 FF 
0b358     08 E4 85 F1 | 	sub	objptr, ##27144
0b35c     02 00 00 FF 
0b360     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b364     88 00 90 3D |  if_ae	jmp	#LR__0942
0b368     35 00 00 FF 
0b36c     08 E4 05 F1 | 	add	objptr, ##27144
0b370     F2 26 02 FB | 	rdlong	local05, objptr
0b374     04 26 66 F0 | 	shl	local05, #4
0b378     20 00 00 FF 
0b37c     10 E4 85 F1 | 	sub	objptr, ##16400
0b380     F2 26 02 F1 | 	add	local05, objptr
0b384     13 29 62 FC | 	wrlong	local06, local05
0b388     20 00 00 FF 
0b38c     10 E4 05 F1 | 	add	objptr, ##16400
0b390     F2 26 02 FB | 	rdlong	local05, objptr
0b394     04 26 66 F0 | 	shl	local05, #4
0b398     20 00 00 FF 
0b39c     10 E4 85 F1 | 	sub	objptr, ##16400
0b3a0     F2 26 02 F1 | 	add	local05, objptr
0b3a4     04 26 06 F1 | 	add	local05, #4
0b3a8     13 01 68 FC | 	wrlong	#0, local05
0b3ac     20 00 00 FF 
0b3b0     10 E4 05 F1 | 	add	objptr, ##16400
0b3b4     F2 26 02 FB | 	rdlong	local05, objptr
0b3b8     04 26 66 F0 | 	shl	local05, #4
0b3bc     20 00 00 FF 
0b3c0     10 E4 85 F1 | 	sub	objptr, ##16400
0b3c4     F2 26 02 F1 | 	add	local05, objptr
0b3c8     0C 26 06 F1 | 	add	local05, #12
0b3cc     13 39 68 FC | 	wrlong	#28, local05
0b3d0     20 00 00 FF 
0b3d4     10 E4 05 F1 | 	add	objptr, ##16400
0b3d8     F2 2E 02 FB | 	rdlong	local09, objptr
0b3dc     17 2B 02 F6 | 	mov	local07, local09
0b3e0     01 2E 06 F1 | 	add	local09, #1
0b3e4     F2 2E 62 FC | 	wrlong	local09, objptr
0b3e8     35 00 00 FF 
0b3ec     08 E4 85 F1 | 	sub	objptr, ##27144
0b3f0                 | LR__0942
0b3f0     00 2E 06 F6 | 	mov	local09, #0
0b3f4                 | ' numpar=0
0b3f4                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b3f4     37 00 00 FF 
0b3f8     44 E4 05 F1 | 	add	objptr, ##28228
0b3fc     F2 26 02 FB | 	rdlong	local05, objptr
0b400     01 26 06 F1 | 	add	local05, #1
0b404     03 26 66 F0 | 	shl	local05, #3
0b408     02 00 00 FF 
0b40c     38 E4 85 F1 | 	sub	objptr, ##1080
0b410     F2 26 02 F1 | 	add	local05, objptr
0b414     04 26 06 F1 | 	add	local05, #4
0b418     13 2D 02 FB | 	rdlong	local08, local05
0b41c     15 2C 0E F2 | 	cmp	local08, #21 wz
0b420     35 00 00 FF 
0b424     0C E4 85 F1 | 	sub	objptr, ##27148
0b428     54 01 90 5D |  if_ne	jmp	#LR__0947
0b42c     37 00 00 FF 
0b430     44 E4 05 F1 | 	add	objptr, ##28228
0b434     F2 30 02 FB | 	rdlong	local10, objptr
0b438     01 30 06 F1 | 	add	local10, #1
0b43c     F2 30 62 FC | 	wrlong	local10, objptr
0b440     37 00 00 FF 
0b444     44 E4 85 F1 | 	sub	objptr, ##28228
0b448                 | '   ct+=1 											' omit this lpar, this is for expr list
0b448                 | '   do
0b448                 | LR__0943
0b448     37 00 00 FF 
0b44c     44 E4 05 F1 | 	add	objptr, ##28228
0b450     F2 26 02 FB | 	rdlong	local05, objptr
0b454     01 26 06 F1 | 	add	local05, #1
0b458     F2 26 62 FC | 	wrlong	local05, objptr
0b45c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b45c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b45c     03 26 66 F0 | 	shl	local05, #3
0b460     02 00 00 FF 
0b464     38 E4 85 F1 | 	sub	objptr, ##1080
0b468     F2 26 02 F1 | 	add	local05, objptr
0b46c     04 26 06 F1 | 	add	local05, #4
0b470     13 31 02 FB | 	rdlong	local10, local05
0b474     15 30 0E F2 | 	cmp	local10, #21 wz
0b478     35 00 00 FF 
0b47c     0C E4 85 F1 | 	sub	objptr, ##27148
0b480     44 00 90 5D |  if_ne	jmp	#LR__0944
0b484     37 00 00 FF 
0b488     44 E4 05 F1 | 	add	objptr, ##28228
0b48c     F2 30 02 FB | 	rdlong	local10, objptr
0b490     01 30 06 F1 | 	add	local10, #1
0b494     F2 30 62 FC | 	wrlong	local10, objptr
0b498     37 00 00 FF 
0b49c     44 E4 85 F1 | 	sub	objptr, ##28228
0b4a0     58 EB BF FD | 	call	#_expr
0b4a4     FD 32 02 F6 | 	mov	local11, result1
0b4a8     37 00 00 FF 
0b4ac     44 E4 05 F1 | 	add	objptr, ##28228
0b4b0     F2 30 02 FB | 	rdlong	local10, objptr
0b4b4     01 30 06 F1 | 	add	local10, #1
0b4b8     F2 30 62 FC | 	wrlong	local10, objptr
0b4bc     37 00 00 FF 
0b4c0     44 E4 85 F1 | 	sub	objptr, ##28228
0b4c4     08 00 90 FD | 	jmp	#LR__0945
0b4c8                 | LR__0944
0b4c8     30 EB BF FD | 	call	#_expr
0b4cc     FD 32 02 F6 | 	mov	local11, result1
0b4d0                 | LR__0945
0b4d0                 | '     if err>0 then return err
0b4d0     01 32 56 F2 | 	cmps	local11, #1 wc
0b4d4     19 FB 01 36 |  if_ae	mov	result1, local11
0b4d8     2C 02 90 3D |  if_ae	jmp	#LR__0949
0b4dc     01 2E 06 F1 | 	add	local09, #1
0b4e0     37 00 00 FF 
0b4e4     44 E4 05 F1 | 	add	objptr, ##28228
0b4e8     F2 26 02 FB | 	rdlong	local05, objptr
0b4ec     03 26 66 F0 | 	shl	local05, #3
0b4f0     02 00 00 FF 
0b4f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b4f8     F2 26 02 F1 | 	add	local05, objptr
0b4fc     04 26 06 F1 | 	add	local05, #4
0b500     13 33 02 FB | 	rdlong	local11, local05
0b504     14 32 0E F2 | 	cmp	local11, #20 wz
0b508     35 00 00 FF 
0b50c     0C E4 85 F1 | 	sub	objptr, ##27148
0b510     34 00 90 AD |  if_e	jmp	#LR__0946
0b514     37 00 00 FF 
0b518     44 E4 05 F1 | 	add	objptr, ##28228
0b51c     F2 32 02 FB | 	rdlong	local11, objptr
0b520     03 32 66 F0 | 	shl	local11, #3
0b524     02 00 00 FF 
0b528     38 E4 85 F1 | 	sub	objptr, ##1080
0b52c     F2 32 02 F1 | 	add	local11, objptr
0b530     04 32 06 F1 | 	add	local11, #4
0b534     19 33 02 FB | 	rdlong	local11, local11
0b538     FE 33 0E F2 | 	cmp	local11, #510 wz
0b53c     35 00 00 FF 
0b540     0C E4 85 F1 | 	sub	objptr, ##27148
0b544     00 FF 9F 5D |  if_ne	jmp	#LR__0943
0b548                 | LR__0946
0b548                 | '     if lparts(ct).token=token_end then return 14
0b548     37 00 00 FF 
0b54c     44 E4 05 F1 | 	add	objptr, ##28228
0b550     F2 26 02 FB | 	rdlong	local05, objptr
0b554     03 26 66 F0 | 	shl	local05, #3
0b558     02 00 00 FF 
0b55c     38 E4 85 F1 | 	sub	objptr, ##1080
0b560     F2 26 02 F1 | 	add	local05, objptr
0b564     04 26 06 F1 | 	add	local05, #4
0b568     13 33 02 FB | 	rdlong	local11, local05
0b56c     FE 33 0E F2 | 	cmp	local11, #510 wz
0b570     35 00 00 FF 
0b574     0C E4 85 F1 | 	sub	objptr, ##27148
0b578     0E FA 05 A6 |  if_e	mov	result1, #14
0b57c     88 01 90 AD |  if_e	jmp	#LR__0949
0b580                 | LR__0947
0b580     17 21 02 F6 | 	mov	local02, local09
0b584     11 22 06 F6 | 	mov	local03, #17
0b588     15 1F 02 F6 | 	mov	local01, local07
0b58c     0F 31 02 F6 | 	mov	local10, local01
0b590     10 35 02 F6 | 	mov	local12, local02
0b594     11 37 02 F6 | 	mov	local13, local03
0b598     4A 00 00 FF 
0b59c     7C E4 05 F1 | 	add	objptr, ##38012
0b5a0     F2 38 02 FB | 	rdlong	local14, objptr
0b5a4     1C 3B 02 F6 | 	mov	local15, local14
0b5a8     01 3A 66 F0 | 	shl	local15, #1
0b5ac     1C 3B 02 F1 | 	add	local15, local14
0b5b0     02 3A 66 F0 | 	shl	local15, #2
0b5b4     03 00 00 FF 
0b5b8     00 E4 85 F1 | 	sub	objptr, ##1536
0b5bc     F2 3A 02 F1 | 	add	local15, objptr
0b5c0     1D 31 62 FC | 	wrlong	local10, local15
0b5c4     03 00 00 FF 
0b5c8     00 E4 05 F1 | 	add	objptr, ##1536
0b5cc     F2 30 02 FB | 	rdlong	local10, objptr
0b5d0     18 3D 02 F6 | 	mov	local16, local10
0b5d4     01 3C 66 F0 | 	shl	local16, #1
0b5d8     18 3D 02 F1 | 	add	local16, local10
0b5dc     02 3C 66 F0 | 	shl	local16, #2
0b5e0     03 00 00 FF 
0b5e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b5e8     F2 3C 02 F1 | 	add	local16, objptr
0b5ec     04 3C 06 F1 | 	add	local16, #4
0b5f0     1E 35 62 FC | 	wrlong	local12, local16
0b5f4     03 00 00 FF 
0b5f8     00 E4 05 F1 | 	add	objptr, ##1536
0b5fc     F2 30 02 FB | 	rdlong	local10, objptr
0b600     18 3F 02 F6 | 	mov	local17, local10
0b604     01 3E 66 F0 | 	shl	local17, #1
0b608     18 3F 02 F1 | 	add	local17, local10
0b60c     02 3E 66 F0 | 	shl	local17, #2
0b610     03 00 00 FF 
0b614     00 E4 85 F1 | 	sub	objptr, ##1536
0b618     F2 3E 02 F1 | 	add	local17, objptr
0b61c     08 3E 06 F1 | 	add	local17, #8
0b620     1F 37 62 FC | 	wrlong	local13, local17
0b624     03 00 00 FF 
0b628     00 E4 05 F1 | 	add	objptr, ##1536
0b62c     F2 30 02 FB | 	rdlong	local10, objptr
0b630     01 30 06 F1 | 	add	local10, #1
0b634     F2 30 62 FC | 	wrlong	local10, objptr
0b638     4A 00 00 FF 
0b63c     7C E4 85 F1 | 	sub	objptr, ##38012
0b640                 | ' t2.result.twowords(1)=numpar
0b640                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b640                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b640                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b640     FF FF 7F FF 
0b644     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b648     B8 00 90 5D |  if_ne	jmp	#LR__0948
0b64c     15 22 06 F6 | 	mov	local03, #21
0b650     0F 31 02 F6 | 	mov	local10, local01
0b654     10 35 02 F6 | 	mov	local12, local02
0b658     11 37 02 F6 | 	mov	local13, local03
0b65c     4A 00 00 FF 
0b660     7C E4 05 F1 | 	add	objptr, ##38012
0b664     F2 38 02 FB | 	rdlong	local14, objptr
0b668     1C 3B 02 F6 | 	mov	local15, local14
0b66c     01 3A 66 F0 | 	shl	local15, #1
0b670     1C 3B 02 F1 | 	add	local15, local14
0b674     02 3A 66 F0 | 	shl	local15, #2
0b678     03 00 00 FF 
0b67c     00 E4 85 F1 | 	sub	objptr, ##1536
0b680     F2 3A 02 F1 | 	add	local15, objptr
0b684     1D 31 62 FC | 	wrlong	local10, local15
0b688     03 00 00 FF 
0b68c     00 E4 05 F1 | 	add	objptr, ##1536
0b690     F2 3E 02 FB | 	rdlong	local17, objptr
0b694     1F 3D 02 F6 | 	mov	local16, local17
0b698     01 3C 66 F0 | 	shl	local16, #1
0b69c     1F 3D 02 F1 | 	add	local16, local17
0b6a0     02 3C 66 F0 | 	shl	local16, #2
0b6a4     03 00 00 FF 
0b6a8     00 E4 85 F1 | 	sub	objptr, ##1536
0b6ac     F2 3C 02 F1 | 	add	local16, objptr
0b6b0     04 3C 06 F1 | 	add	local16, #4
0b6b4     1E 35 62 FC | 	wrlong	local12, local16
0b6b8     03 00 00 FF 
0b6bc     00 E4 05 F1 | 	add	objptr, ##1536
0b6c0     F2 3C 02 FB | 	rdlong	local16, objptr
0b6c4     1E 3F 02 F6 | 	mov	local17, local16
0b6c8     01 3E 66 F0 | 	shl	local17, #1
0b6cc     1E 3F 02 F1 | 	add	local17, local16
0b6d0     02 3E 66 F0 | 	shl	local17, #2
0b6d4     03 00 00 FF 
0b6d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b6dc     F2 3E 02 F1 | 	add	local17, objptr
0b6e0     08 3E 06 F1 | 	add	local17, #8
0b6e4     1F 37 62 FC | 	wrlong	local13, local17
0b6e8     03 00 00 FF 
0b6ec     00 E4 05 F1 | 	add	objptr, ##1536
0b6f0     F2 30 02 FB | 	rdlong	local10, objptr
0b6f4     01 30 06 F1 | 	add	local10, #1
0b6f8     F2 30 62 FC | 	wrlong	local10, objptr
0b6fc     4A 00 00 FF 
0b700     7C E4 85 F1 | 	sub	objptr, ##38012
0b704                 | LR__0948
0b704                 | ' return 0
0b704     00 FA 05 F6 | 	mov	result1, #0
0b708                 | LR__0949
0b708     A7 F0 03 F6 | 	mov	ptra, fp
0b70c     B2 00 A0 FD | 	call	#popregs_
0b710                 | _getvar_ret
0b710     2D 00 64 FD | 	ret
0b714                 | 
0b714                 | ' 
0b714                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b714                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b714                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b714                 | ' 
0b714                 | ' 
0b714                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b714                 | ' '                                                                                                                                       -
0b714                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b714                 | ' '                                                                                                                                       -
0b714                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b714                 | ' 
0b714                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b714                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b714                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b714                 | ' 
0b714                 | ' function execute_line (astart=0 as integer) as integer
0b714                 | _execute_line
0b714     04 4A 05 F6 | 	mov	COUNT_, #4
0b718     A8 00 A0 FD | 	call	#pushregs_
0b71c     50 00 00 FF 
0b720     BC E4 05 F1 | 	add	objptr, ##41148
0b724     F2 00 68 FC | 	wrlong	#0, objptr
0b728                 | ' 
0b728                 | ' runptr2=0
0b728                 | ' for lineptr_e=astart to lineptr-1
0b728     06 00 00 FF 
0b72c     3C E4 85 F1 | 	sub	objptr, ##3132
0b730     F2 12 62 FC | 	wrlong	arg01, objptr
0b734     04 E4 85 F1 | 	sub	objptr, #4
0b738     F2 1E 02 FB | 	rdlong	local01, objptr
0b73c     4A 00 00 FF 
0b740     7C E4 85 F1 | 	sub	objptr, ##38012
0b744                 | LR__0950
0b744     4A 00 00 FF 
0b748     80 E4 05 F1 | 	add	objptr, ##38016
0b74c     F2 FA 01 FB | 	rdlong	result1, objptr
0b750     4A 00 00 FF 
0b754     80 E4 85 F1 | 	sub	objptr, ##38016
0b758     0F FB 51 F2 | 	cmps	result1, local01 wc
0b75c     98 00 90 3D |  if_ae	jmp	#LR__0951
0b760     4A 00 00 FF 
0b764     80 E4 05 F1 | 	add	objptr, ##38016
0b768     F2 FA 01 FB | 	rdlong	result1, objptr
0b76c     FD 20 02 F6 | 	mov	local02, result1
0b770     01 20 66 F0 | 	shl	local02, #1
0b774     FD 20 02 F1 | 	add	local02, result1
0b778     02 20 66 F0 | 	shl	local02, #2
0b77c     03 00 00 FF 
0b780     04 E4 85 F1 | 	sub	objptr, ##1540
0b784     F2 20 02 F1 | 	add	local02, objptr
0b788     08 20 06 F1 | 	add	local02, #8
0b78c     10 21 02 FB | 	rdlong	local02, local02
0b790     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b794     02 20 66 F0 | 	shl	local02, #2
0b798     04 00 00 FF 
0b79c     1C E4 85 F1 | 	sub	objptr, ##2076
0b7a0     F2 20 02 F1 | 	add	local02, objptr
0b7a4     10 21 02 FB | 	rdlong	local02, local02
0b7a8     10 23 02 F6 | 	mov	local03, local02
0b7ac     13 20 46 F7 | 	zerox	local02, #19
0b7b0     14 22 46 F0 | 	shr	local03, #20
0b7b4     02 22 66 F0 | 	shl	local03, #2
0b7b8     ED 22 02 F1 | 	add	local03, __methods__
0b7bc     11 23 02 FB | 	rdlong	local03, local03
0b7c0     43 00 00 FF 
0b7c4     60 E4 85 F1 | 	sub	objptr, ##34400
0b7c8     F2 24 02 F6 | 	mov	local04, objptr
0b7cc     10 E5 01 F6 | 	mov	objptr, local02
0b7d0     2D 22 62 FD | 	call	local03
0b7d4     12 E5 01 F6 | 	mov	objptr, local04
0b7d8     4A 00 00 FF 
0b7dc     80 E4 05 F1 | 	add	objptr, ##38016
0b7e0     F2 24 02 FB | 	rdlong	local04, objptr
0b7e4     01 24 06 F1 | 	add	local04, #1
0b7e8     F2 24 62 FC | 	wrlong	local04, objptr
0b7ec     4A 00 00 FF 
0b7f0     80 E4 85 F1 | 	sub	objptr, ##38016
0b7f4     4C FF 9F FD | 	jmp	#LR__0950
0b7f8                 | LR__0951
0b7f8                 | ' return runptr2
0b7f8     50 00 00 FF 
0b7fc     BC E4 05 F1 | 	add	objptr, ##41148
0b800     F2 FA 01 FB | 	rdlong	result1, objptr
0b804     50 00 00 FF 
0b808     BC E4 85 F1 | 	sub	objptr, ##41148
0b80c     A7 F0 03 F6 | 	mov	ptra, fp
0b810     B2 00 A0 FD | 	call	#popregs_
0b814                 | _execute_line_ret
0b814     2D 00 64 FD | 	ret
0b818                 | 
0b818                 | ' 
0b818                 | ' 
0b818                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b818                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b818                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b818                 | ' 
0b818                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b818                 | ' 
0b818                 | ' function pop() as expr_result
0b818                 | _pop
0b818                 | ' if stackpointer=0 then
0b818     43 00 00 FF 
0b81c     58 E4 05 F1 | 	add	objptr, ##34392
0b820     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b824     43 00 00 FF 
0b828     58 E4 85 F1 | 	sub	objptr, ##34392
0b82c     FF 04 06 A6 |  if_e	mov	_var03, #255
0b830     18 00 06 A6 |  if_e	mov	_var01, #24
0b834     68 00 90 AD |  if_e	jmp	#LR__0960
0b838     43 00 00 FF 
0b83c     58 E4 05 F1 | 	add	objptr, ##34392
0b840     F2 FA 01 FB | 	rdlong	result1, objptr
0b844     01 FA 85 F1 | 	sub	result1, #1
0b848     F2 FA 61 FC | 	wrlong	result1, objptr
0b84c     FD FE 01 F6 | 	mov	result3, result1
0b850     01 FE 65 F0 | 	shl	result3, #1
0b854     FD FE 01 F1 | 	add	result3, result1
0b858     02 FE 65 F0 | 	shl	result3, #2
0b85c     0C 00 00 FF 
0b860     0C E4 85 F1 | 	sub	objptr, ##6156
0b864     F2 FE 01 F1 | 	add	result3, objptr
0b868     FF 00 02 FB | 	rdlong	_var01, result3
0b86c     04 FE 05 F1 | 	add	result3, #4
0b870     FF FE 01 FB | 	rdlong	result3, result3
0b874     FD FC 01 F6 | 	mov	result2, result1
0b878     01 FC 65 F0 | 	shl	result2, #1
0b87c     FD FC 01 F1 | 	add	result2, result1
0b880     02 FC 65 F0 | 	shl	result2, #2
0b884     F2 FC 01 F1 | 	add	result2, objptr
0b888     08 FC 05 F1 | 	add	result2, #8
0b88c     FE FA 01 FB | 	rdlong	result1, result2
0b890     FF 02 02 F6 | 	mov	_var02, result3
0b894     FD 04 02 F6 | 	mov	_var03, result1
0b898     37 00 00 FF 
0b89c     4C E4 85 F1 | 	sub	objptr, ##28236
0b8a0                 | LR__0960
0b8a0                 | ' return t1
0b8a0     01 FD 01 F6 | 	mov	result2, _var02
0b8a4     02 FF 01 F6 | 	mov	result3, _var03
0b8a8     00 FB 01 F6 | 	mov	result1, _var01
0b8ac                 | _pop_ret
0b8ac     2D 00 64 FD | 	ret
0b8b0                 | 
0b8b0                 | ' 
0b8b0                 | ' sub push(t1 as expr_result )
0b8b0                 | _push
0b8b0                 | ' if stackpointer<maxstack then 
0b8b0     43 00 00 FF 
0b8b4     58 E4 05 F1 | 	add	objptr, ##34392
0b8b8     F2 00 02 FB | 	rdlong	_var01, objptr
0b8bc     43 00 00 FF 
0b8c0     58 E4 85 F1 | 	sub	objptr, ##34392
0b8c4     01 00 00 FF 
0b8c8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b8cc     BC 00 90 3D |  if_ae	jmp	#LR__0970
0b8d0     09 01 02 FB | 	rdlong	_var01, arg01
0b8d4     04 12 06 F1 | 	add	arg01, #4
0b8d8     09 03 02 FB | 	rdlong	_var02, arg01
0b8dc     04 12 06 F1 | 	add	arg01, #4
0b8e0     09 13 02 FB | 	rdlong	arg01, arg01
0b8e4     43 00 00 FF 
0b8e8     58 E4 05 F1 | 	add	objptr, ##34392
0b8ec     F2 04 02 FB | 	rdlong	_var03, objptr
0b8f0     02 07 02 F6 | 	mov	_var04, _var03
0b8f4     01 06 66 F0 | 	shl	_var04, #1
0b8f8     02 07 02 F1 | 	add	_var04, _var03
0b8fc     02 06 66 F0 | 	shl	_var04, #2
0b900     0C 00 00 FF 
0b904     0C E4 85 F1 | 	sub	objptr, ##6156
0b908     F2 06 02 F1 | 	add	_var04, objptr
0b90c     03 01 62 FC | 	wrlong	_var01, _var04
0b910     0C 00 00 FF 
0b914     0C E4 05 F1 | 	add	objptr, ##6156
0b918     F2 06 02 FB | 	rdlong	_var04, objptr
0b91c     03 05 02 F6 | 	mov	_var03, _var04
0b920     01 04 66 F0 | 	shl	_var03, #1
0b924     03 05 02 F1 | 	add	_var03, _var04
0b928     02 04 66 F0 | 	shl	_var03, #2
0b92c     0C 00 00 FF 
0b930     0C E4 85 F1 | 	sub	objptr, ##6156
0b934     F2 04 02 F1 | 	add	_var03, objptr
0b938     04 04 06 F1 | 	add	_var03, #4
0b93c     02 03 62 FC | 	wrlong	_var02, _var03
0b940     0C 00 00 FF 
0b944     0C E4 05 F1 | 	add	objptr, ##6156
0b948     F2 06 02 FB | 	rdlong	_var04, objptr
0b94c     03 05 02 F6 | 	mov	_var03, _var04
0b950     01 04 66 F0 | 	shl	_var03, #1
0b954     03 05 02 F1 | 	add	_var03, _var04
0b958     02 04 66 F0 | 	shl	_var03, #2
0b95c     0C 00 00 FF 
0b960     0C E4 85 F1 | 	sub	objptr, ##6156
0b964     F2 04 02 F1 | 	add	_var03, objptr
0b968     08 04 06 F1 | 	add	_var03, #8
0b96c     02 13 62 FC | 	wrlong	arg01, _var03
0b970     0C 00 00 FF 
0b974     0C E4 05 F1 | 	add	objptr, ##6156
0b978     F2 00 02 FB | 	rdlong	_var01, objptr
0b97c     01 00 06 F1 | 	add	_var01, #1
0b980     F2 00 62 FC | 	wrlong	_var01, objptr
0b984     43 00 00 FF 
0b988     58 E4 85 F1 | 	sub	objptr, ##34392
0b98c                 | LR__0970
0b98c                 | _push_ret
0b98c     2D 00 64 FD | 	ret
0b990                 | 
0b990                 | ' 
0b990                 | ' ' -------------------------------- Runtime converting functions
0b990                 | ' 
0b990                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b990                 | ' 
0b990                 | ' function  convertstring(psaddr as ulong) as string
0b990                 | _convertstring
0b990     04 4A 05 F6 | 	mov	COUNT_, #4
0b994     A8 00 A0 FD | 	call	#pushregs_
0b998     09 1F 02 F6 | 	mov	local01, arg01
0b99c     20 29 B1 FD | 	call	#_pslpeek
0b9a0     FD 20 02 F6 | 	mov	local02, result1
0b9a4     8B 01 00 FF 
0b9a8     C9 23 06 F6 | 	mov	local03, ##@LR__5507
0b9ac                 | ' l=pslpeek(psaddr)
0b9ac                 | ' s="" 
0b9ac                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b9ac     01 24 06 F6 | 	mov	local04, #1
0b9b0     01 20 06 F1 | 	add	local02, #1
0b9b4                 | LR__0980
0b9b4     10 25 52 F2 | 	cmps	local04, local02 wc
0b9b8     30 00 90 3D |  if_ae	jmp	#LR__0981
0b9bc     0F 13 02 F6 | 	mov	arg01, local01
0b9c0     03 12 06 F1 | 	add	arg01, #3
0b9c4     12 13 02 F1 | 	add	arg01, local04
0b9c8     9C 28 B1 FD | 	call	#_pspeek
0b9cc     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b9d0     30 7E B1 FD | 	call	#__system__Chr_S
0b9d4     FD 14 02 F6 | 	mov	arg02, result1
0b9d8     11 13 02 F6 | 	mov	arg01, local03
0b9dc     40 5C B1 FD | 	call	#__system___string_concat
0b9e0     FD 22 02 F6 | 	mov	local03, result1
0b9e4     01 24 06 F1 | 	add	local04, #1
0b9e8     C8 FF 9F FD | 	jmp	#LR__0980
0b9ec                 | LR__0981
0b9ec                 | ' return s
0b9ec     11 FB 01 F6 | 	mov	result1, local03
0b9f0     A7 F0 03 F6 | 	mov	ptra, fp
0b9f4     B2 00 A0 FD | 	call	#popregs_
0b9f8                 | _convertstring_ret
0b9f8     2D 00 64 FD | 	ret
0b9fc                 | 
0b9fc                 | ' 
0b9fc                 | ' ' converts a variable to an integer
0b9fc                 | ' 
0b9fc                 | ' function converttoint (t1 as expr_result) as integer 
0b9fc                 | _converttoint
0b9fc     02 4A 05 F6 | 	mov	COUNT_, #2
0ba00     A8 00 A0 FD | 	call	#pushregs_
0ba04     09 1F 02 F6 | 	mov	local01, arg01
0ba08                 | ' 
0ba08                 | ' select case t1.result_type
0ba08     08 1E 06 F1 | 	add	local01, #8
0ba0c     0F 21 02 FB | 	rdlong	local02, local01
0ba10     08 1E 86 F1 | 	sub	local01, #8
0ba14     1C 20 0E F2 | 	cmp	local02, #28 wz
0ba18     2C 00 90 AD |  if_e	jmp	#LR__0990
0ba1c     1D 20 0E F2 | 	cmp	local02, #29 wz
0ba20     2C 00 90 AD |  if_e	jmp	#LR__0991
0ba24     1E 20 0E F2 | 	cmp	local02, #30 wz
0ba28     2C 00 90 AD |  if_e	jmp	#LR__0992
0ba2c     1F 20 0E F2 | 	cmp	local02, #31 wz
0ba30     34 00 90 AD |  if_e	jmp	#LR__0993
0ba34     2B 20 0E F2 | 	cmp	local02, #43 wz
0ba38     44 00 90 AD |  if_e	jmp	#LR__0994
0ba3c     2C 20 0E F2 | 	cmp	local02, #44 wz
0ba40     5C 00 90 AD |  if_e	jmp	#LR__0995
0ba44     60 00 90 FD | 	jmp	#LR__0996
0ba48                 | LR__0990
0ba48     0F FB 01 FB | 	rdlong	result1, local01
0ba4c     5C 00 90 FD | 	jmp	#LR__0997
0ba50                 | LR__0991
0ba50     0F FB 01 FB | 	rdlong	result1, local01
0ba54     54 00 90 FD | 	jmp	#LR__0997
0ba58                 | LR__0992
0ba58     0F 13 02 FB | 	rdlong	arg01, local01
0ba5c     01 14 06 F6 | 	mov	arg02, #1
0ba60     E4 8D B1 FD | 	call	#__system___float_tointeger
0ba64     44 00 90 FD | 	jmp	#LR__0997
0ba68                 | LR__0993
0ba68     0F 13 02 FB | 	rdlong	arg01, local01
0ba6c     1C 91 B1 FD | 	call	#__system____builtin_atof
0ba70     FD 12 02 F6 | 	mov	arg01, result1
0ba74     01 14 06 F6 | 	mov	arg02, #1
0ba78     CC 8D B1 FD | 	call	#__system___float_tointeger
0ba7c     2C 00 90 FD | 	jmp	#LR__0997
0ba80                 | LR__0994
0ba80     0F 13 02 FB | 	rdlong	arg01, local01
0ba84     08 FF BF FD | 	call	#_convertstring
0ba88     FD 12 02 F6 | 	mov	arg01, result1
0ba8c     FC 90 B1 FD | 	call	#__system____builtin_atof
0ba90     FD 12 02 F6 | 	mov	arg01, result1
0ba94     01 14 06 F6 | 	mov	arg02, #1
0ba98     AC 8D B1 FD | 	call	#__system___float_tointeger
0ba9c     0C 00 90 FD | 	jmp	#LR__0997
0baa0                 | LR__0995
0baa0     0F FB 01 FB | 	rdlong	result1, local01
0baa4     04 00 90 FD | 	jmp	#LR__0997
0baa8                 | LR__0996
0baa8     00 FA 05 F6 | 	mov	result1, #0
0baac                 | LR__0997
0baac     A7 F0 03 F6 | 	mov	ptra, fp
0bab0     B2 00 A0 FD | 	call	#popregs_
0bab4                 | _converttoint_ret
0bab4     2D 00 64 FD | 	ret
0bab8                 | 
0bab8                 | ' 
0bab8                 | ' ' converts a variable to float
0bab8                 | ' 
0bab8                 | ' function converttofloat (t1 as expr_result) as single
0bab8                 | _converttofloat
0bab8     03 4A 05 F6 | 	mov	COUNT_, #3
0babc     A8 00 A0 FD | 	call	#pushregs_
0bac0     09 1F 02 F6 | 	mov	local01, arg01
0bac4                 | ' 
0bac4                 | ' select case t1.result_type
0bac4     08 1E 06 F1 | 	add	local01, #8
0bac8     0F 21 02 FB | 	rdlong	local02, local01
0bacc     08 1E 86 F1 | 	sub	local01, #8
0bad0     1C 20 0E F2 | 	cmp	local02, #28 wz
0bad4     24 00 90 AD |  if_e	jmp	#LR__1000
0bad8     1D 20 0E F2 | 	cmp	local02, #29 wz
0badc     38 00 90 AD |  if_e	jmp	#LR__1001
0bae0     1E 20 0E F2 | 	cmp	local02, #30 wz
0bae4     3C 00 90 AD |  if_e	jmp	#LR__1002
0bae8     1F 20 0E F2 | 	cmp	local02, #31 wz
0baec     3C 00 90 AD |  if_e	jmp	#LR__1003
0baf0     2B 20 0E F2 | 	cmp	local02, #43 wz
0baf4     40 00 90 AD |  if_e	jmp	#LR__1004
0baf8     50 00 90 FD | 	jmp	#LR__1005
0bafc                 | LR__1000
0bafc     0F 13 02 FB | 	rdlong	arg01, local01
0bb00     09 13 52 F6 | 	abs	arg01, arg01 wc
0bb04     1F 22 C6 C9 |  if_b	decod	local03, #31
0bb08     00 22 06 36 |  if_ae	mov	local03, #0
0bb0c     6C 84 B1 FD | 	call	#__system___float_fromuns
0bb10     11 FB 61 F5 | 	xor	result1, local03
0bb14     38 00 90 FD | 	jmp	#LR__1006
0bb18                 | LR__1001
0bb18     0F 13 02 FB | 	rdlong	arg01, local01
0bb1c     5C 84 B1 FD | 	call	#__system___float_fromuns
0bb20     2C 00 90 FD | 	jmp	#LR__1006
0bb24                 | LR__1002
0bb24     0F FB 01 FB | 	rdlong	result1, local01
0bb28     24 00 90 FD | 	jmp	#LR__1006
0bb2c                 | LR__1003
0bb2c     0F 13 02 FB | 	rdlong	arg01, local01
0bb30     58 90 B1 FD | 	call	#__system____builtin_atof
0bb34     18 00 90 FD | 	jmp	#LR__1006
0bb38                 | LR__1004
0bb38     0F 13 02 FB | 	rdlong	arg01, local01
0bb3c     50 FE BF FD | 	call	#_convertstring
0bb40     FD 12 02 F6 | 	mov	arg01, result1
0bb44     44 90 B1 FD | 	call	#__system____builtin_atof
0bb48     04 00 90 FD | 	jmp	#LR__1006
0bb4c                 | LR__1005
0bb4c     00 FA 05 F6 | 	mov	result1, #0
0bb50                 | LR__1006
0bb50     A7 F0 03 F6 | 	mov	ptra, fp
0bb54     B2 00 A0 FD | 	call	#popregs_
0bb58                 | _converttofloat_ret
0bb58     2D 00 64 FD | 	ret
0bb5c                 | 
0bb5c                 | ' 
0bb5c                 | ' '----------------- End of converting 
0bb5c                 | ' 
0bb5c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bb5c                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0bb5c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bb5c                 | ' 
0bb5c                 | ' sub csave_block(address as ulong)
0bb5c                 | _csave_block
0bb5c     09 01 02 F6 | 	mov	_var01, arg01
0bb60                 | ' 
0bb60                 | ' for i=0 to 63 step 2
0bb60     00 02 06 F6 | 	mov	_var02, #0
0bb64                 | LR__1010
0bb64                 | '   do: loop until lpeek(base+64*7)>32768
0bb64     37 00 00 FF 
0bb68     10 E4 05 F1 | 	add	objptr, ##28176
0bb6c     97 0C 48 FB | 	callpa	#(@LR__1012-@LR__1011)>>2,fcache_load_ptr_
0bb70                 | LR__1011
0bb70     F2 12 02 FB | 	rdlong	arg01, objptr
0bb74     C0 13 06 F1 | 	add	arg01, #448
0bb78     09 FB 01 FB | 	rdlong	result1, arg01
0bb7c     40 00 00 FF 
0bb80     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bb84     E8 FF 9F CD |  if_b	jmp	#LR__1011
0bb88                 | LR__1012
0bb88     00 13 02 F6 | 	mov	arg01, _var01
0bb8c     01 05 02 F6 | 	mov	_var03, _var02
0bb90     02 04 66 F0 | 	shl	_var03, #2
0bb94     02 13 02 F1 | 	add	arg01, _var03
0bb98     09 07 02 FB | 	rdlong	_var04, arg01
0bb9c     1B 00 00 FF 
0bba0     04 E4 05 F1 | 	add	objptr, ##13828
0bba4     F2 06 62 FC | 	wrlong	_var04, objptr
0bba8     52 00 00 FF 
0bbac     14 E4 85 F1 | 	sub	objptr, ##42004
0bbb0                 | '   q=lpeek(address+4*i)
0bbb0                 | '      for bit=0 to 31
0bbb0     00 08 06 F6 | 	mov	_var05, #0
0bbb4     97 84 48 FB | 	callpa	#(@LR__1017-@LR__1013)>>2,fcache_load_ptr_
0bbb8                 | LR__1013
0bbb8                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bbb8     52 00 00 FF 
0bbbc     14 E4 05 F1 | 	add	objptr, ##42004
0bbc0     F2 06 02 FB | 	rdlong	_var04, objptr
0bbc4     52 00 00 FF 
0bbc8     14 E4 85 F1 | 	sub	objptr, ##42004
0bbcc     04 05 C2 F9 | 	decod	_var03, _var05
0bbd0     02 07 CA F7 | 	test	_var04, _var03 wz
0bbd4     60 00 90 AD |  if_e	jmp	#LR__1014
0bbd8     04 05 02 F6 | 	mov	_var03, _var05
0bbdc     02 04 66 F0 | 	shl	_var03, #2
0bbe0     4D 00 00 FF 
0bbe4     B4 E5 05 F1 | 	add	objptr, ##39860
0bbe8     F2 04 02 F1 | 	add	_var03, objptr
0bbec     02 FF 48 FC | 	wrbyte	#127, _var03
0bbf0     04 05 02 F6 | 	mov	_var03, _var05
0bbf4     02 04 66 F0 | 	shl	_var03, #2
0bbf8     01 04 06 F1 | 	add	_var03, #1
0bbfc     F2 04 02 F1 | 	add	_var03, objptr
0bc00     02 01 49 FC | 	wrbyte	#128, _var03
0bc04     04 05 02 F6 | 	mov	_var03, _var05
0bc08     02 04 66 F0 | 	shl	_var03, #2
0bc0c     02 04 06 F1 | 	add	_var03, #2
0bc10     F2 04 02 F1 | 	add	_var03, objptr
0bc14     02 FF 48 FC | 	wrbyte	#127, _var03
0bc18     04 05 02 F6 | 	mov	_var03, _var05
0bc1c     02 04 66 F0 | 	shl	_var03, #2
0bc20     03 04 06 F1 | 	add	_var03, #3
0bc24     F2 04 02 F1 | 	add	_var03, objptr
0bc28     02 01 49 FC | 	wrbyte	#128, _var03
0bc2c     4D 00 00 FF 
0bc30     B4 E5 85 F1 | 	sub	objptr, ##39860
0bc34     5C 00 90 FD | 	jmp	#LR__1015
0bc38                 | LR__1014
0bc38     04 05 02 F6 | 	mov	_var03, _var05
0bc3c     02 04 66 F0 | 	shl	_var03, #2
0bc40     4D 00 00 FF 
0bc44     B4 E5 05 F1 | 	add	objptr, ##39860
0bc48     F2 04 02 F1 | 	add	_var03, objptr
0bc4c     02 01 49 FC | 	wrbyte	#128, _var03
0bc50     04 05 02 F6 | 	mov	_var03, _var05
0bc54     02 04 66 F0 | 	shl	_var03, #2
0bc58     01 04 06 F1 | 	add	_var03, #1
0bc5c     F2 04 02 F1 | 	add	_var03, objptr
0bc60     02 01 49 FC | 	wrbyte	#128, _var03
0bc64     04 05 02 F6 | 	mov	_var03, _var05
0bc68     02 04 66 F0 | 	shl	_var03, #2
0bc6c     02 04 06 F1 | 	add	_var03, #2
0bc70     F2 04 02 F1 | 	add	_var03, objptr
0bc74     02 FF 48 FC | 	wrbyte	#127, _var03
0bc78     04 05 02 F6 | 	mov	_var03, _var05
0bc7c     02 04 66 F0 | 	shl	_var03, #2
0bc80     03 04 06 F1 | 	add	_var03, #3
0bc84     F2 04 02 F1 | 	add	_var03, objptr
0bc88     02 FF 48 FC | 	wrbyte	#127, _var03
0bc8c     4D 00 00 FF 
0bc90     B4 E5 85 F1 | 	sub	objptr, ##39860
0bc94                 | LR__1015
0bc94     01 08 06 F1 | 	add	_var05, #1
0bc98     20 08 56 F2 | 	cmps	_var05, #32 wc
0bc9c     18 FF 9F CD |  if_b	jmp	#LR__1013
0bca0                 | '   do: loop until lpeek(base+64*7)<32768
0bca0     37 00 00 FF 
0bca4     10 E4 05 F1 | 	add	objptr, ##28176
0bca8                 | LR__1016
0bca8     F2 12 02 FB | 	rdlong	arg01, objptr
0bcac     C0 13 06 F1 | 	add	arg01, #448
0bcb0     09 FB 01 FB | 	rdlong	result1, arg01
0bcb4     40 00 00 FF 
0bcb8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bcbc     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0bcc0                 | LR__1017
0bcc0     00 13 02 F6 | 	mov	arg01, _var01
0bcc4     04 12 06 F1 | 	add	arg01, #4
0bcc8     01 05 02 F6 | 	mov	_var03, _var02
0bccc     02 04 66 F0 | 	shl	_var03, #2
0bcd0     02 13 02 F1 | 	add	arg01, _var03
0bcd4     09 07 02 FB | 	rdlong	_var04, arg01
0bcd8     1B 00 00 FF 
0bcdc     04 E4 05 F1 | 	add	objptr, ##13828
0bce0     F2 06 62 FC | 	wrlong	_var04, objptr
0bce4     52 00 00 FF 
0bce8     14 E4 85 F1 | 	sub	objptr, ##42004
0bcec                 | '   q=lpeek(address+4+4*i)
0bcec                 | '      for bit=0 to 31
0bcec     00 08 06 F6 | 	mov	_var05, #0
0bcf0     97 94 48 FB | 	callpa	#(@LR__1021-@LR__1018)>>2,fcache_load_ptr_
0bcf4                 | LR__1018
0bcf4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bcf4     52 00 00 FF 
0bcf8     14 E4 05 F1 | 	add	objptr, ##42004
0bcfc     F2 06 02 FB | 	rdlong	_var04, objptr
0bd00     52 00 00 FF 
0bd04     14 E4 85 F1 | 	sub	objptr, ##42004
0bd08     04 05 C2 F9 | 	decod	_var03, _var05
0bd0c     02 07 CA F7 | 	test	_var04, _var03 wz
0bd10     80 00 90 AD |  if_e	jmp	#LR__1019
0bd14     04 0B 02 F6 | 	mov	_var06, _var05
0bd18     02 0A 66 F0 | 	shl	_var06, #2
0bd1c     80 04 06 F6 | 	mov	_var03, #128
0bd20     05 05 02 F1 | 	add	_var03, _var06
0bd24     4D 00 00 FF 
0bd28     B4 E5 05 F1 | 	add	objptr, ##39860
0bd2c     F2 04 02 F1 | 	add	_var03, objptr
0bd30     02 FF 48 FC | 	wrbyte	#127, _var03
0bd34     04 0B 02 F6 | 	mov	_var06, _var05
0bd38     02 0A 66 F0 | 	shl	_var06, #2
0bd3c     80 04 06 F6 | 	mov	_var03, #128
0bd40     05 05 02 F1 | 	add	_var03, _var06
0bd44     01 04 06 F1 | 	add	_var03, #1
0bd48     F2 04 02 F1 | 	add	_var03, objptr
0bd4c     02 01 49 FC | 	wrbyte	#128, _var03
0bd50     04 0B 02 F6 | 	mov	_var06, _var05
0bd54     02 0A 66 F0 | 	shl	_var06, #2
0bd58     80 04 06 F6 | 	mov	_var03, #128
0bd5c     05 05 02 F1 | 	add	_var03, _var06
0bd60     02 04 06 F1 | 	add	_var03, #2
0bd64     F2 04 02 F1 | 	add	_var03, objptr
0bd68     02 FF 48 FC | 	wrbyte	#127, _var03
0bd6c     04 0B 02 F6 | 	mov	_var06, _var05
0bd70     02 0A 66 F0 | 	shl	_var06, #2
0bd74     80 04 06 F6 | 	mov	_var03, #128
0bd78     05 05 02 F1 | 	add	_var03, _var06
0bd7c     03 04 06 F1 | 	add	_var03, #3
0bd80     F2 04 02 F1 | 	add	_var03, objptr
0bd84     02 01 49 FC | 	wrbyte	#128, _var03
0bd88     4D 00 00 FF 
0bd8c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd90     7C 00 90 FD | 	jmp	#LR__1020
0bd94                 | LR__1019
0bd94     04 0B 02 F6 | 	mov	_var06, _var05
0bd98     02 0A 66 F0 | 	shl	_var06, #2
0bd9c     80 04 06 F6 | 	mov	_var03, #128
0bda0     05 05 02 F1 | 	add	_var03, _var06
0bda4     4D 00 00 FF 
0bda8     B4 E5 05 F1 | 	add	objptr, ##39860
0bdac     F2 04 02 F1 | 	add	_var03, objptr
0bdb0     02 01 49 FC | 	wrbyte	#128, _var03
0bdb4     04 0B 02 F6 | 	mov	_var06, _var05
0bdb8     02 0A 66 F0 | 	shl	_var06, #2
0bdbc     80 04 06 F6 | 	mov	_var03, #128
0bdc0     05 05 02 F1 | 	add	_var03, _var06
0bdc4     01 04 06 F1 | 	add	_var03, #1
0bdc8     F2 04 02 F1 | 	add	_var03, objptr
0bdcc     02 01 49 FC | 	wrbyte	#128, _var03
0bdd0     04 0B 02 F6 | 	mov	_var06, _var05
0bdd4     02 0A 66 F0 | 	shl	_var06, #2
0bdd8     80 04 06 F6 | 	mov	_var03, #128
0bddc     05 05 02 F1 | 	add	_var03, _var06
0bde0     02 04 06 F1 | 	add	_var03, #2
0bde4     F2 04 02 F1 | 	add	_var03, objptr
0bde8     02 FF 48 FC | 	wrbyte	#127, _var03
0bdec     04 0B 02 F6 | 	mov	_var06, _var05
0bdf0     02 0A 66 F0 | 	shl	_var06, #2
0bdf4     80 04 06 F6 | 	mov	_var03, #128
0bdf8     05 05 02 F1 | 	add	_var03, _var06
0bdfc     03 04 06 F1 | 	add	_var03, #3
0be00     F2 04 02 F1 | 	add	_var03, objptr
0be04     02 FF 48 FC | 	wrbyte	#127, _var03
0be08     4D 00 00 FF 
0be0c     B4 E5 85 F1 | 	sub	objptr, ##39860
0be10                 | LR__1020
0be10     01 08 06 F1 | 	add	_var05, #1
0be14     20 08 56 F2 | 	cmps	_var05, #32 wc
0be18     D8 FE 9F CD |  if_b	jmp	#LR__1018
0be1c                 | LR__1021
0be1c     02 02 06 F1 | 	add	_var02, #2
0be20     40 02 56 F2 | 	cmps	_var02, #64 wc
0be24     3C FD 9F CD |  if_b	jmp	#LR__1010
0be28                 | ' do: loop until lpeek(base+64*7)>32768
0be28     37 00 00 FF 
0be2c     10 E4 05 F1 | 	add	objptr, ##28176
0be30     97 84 48 FB | 	callpa	#(@LR__1030-@LR__1022)>>2,fcache_load_ptr_
0be34                 | LR__1022
0be34     F2 12 02 FB | 	rdlong	arg01, objptr
0be38     C0 13 06 F1 | 	add	arg01, #448
0be3c     09 FB 01 FB | 	rdlong	result1, arg01
0be40     40 00 00 FF 
0be44     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0be48     E8 FF 9F CD |  if_b	jmp	#LR__1022
0be4c     37 00 00 FF 
0be50     10 E4 85 F1 | 	sub	objptr, ##28176
0be54                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0be54     00 02 06 F6 | 	mov	_var02, #0
0be58                 | LR__1023
0be58     01 07 52 F6 | 	abs	_var04, _var02 wc
0be5c     07 06 06 F5 | 	and	_var04, #7
0be60     03 07 82 F6 | 	negc	_var04, _var04
0be64     04 06 56 F2 | 	cmps	_var04, #4 wc
0be68     20 00 90 3D |  if_ae	jmp	#LR__1024
0be6c     01 0B 02 F6 | 	mov	_var06, _var02
0be70     4D 00 00 FF 
0be74     B4 E5 05 F1 | 	add	objptr, ##39860
0be78     F2 0A 02 F1 | 	add	_var06, objptr
0be7c     05 FF 48 FC | 	wrbyte	#127, _var06
0be80     4D 00 00 FF 
0be84     B4 E5 85 F1 | 	sub	objptr, ##39860
0be88     1C 00 90 FD | 	jmp	#LR__1025
0be8c                 | LR__1024
0be8c     01 0B 02 F6 | 	mov	_var06, _var02
0be90     4D 00 00 FF 
0be94     B4 E5 05 F1 | 	add	objptr, ##39860
0be98     F2 0A 02 F1 | 	add	_var06, objptr
0be9c     05 01 49 FC | 	wrbyte	#128, _var06
0bea0     4D 00 00 FF 
0bea4     B4 E5 85 F1 | 	sub	objptr, ##39860
0bea8                 | LR__1025
0bea8     01 02 06 F1 | 	add	_var02, #1
0beac     80 02 56 F2 | 	cmps	_var02, #128 wc
0beb0     A4 FF 9F CD |  if_b	jmp	#LR__1023
0beb4                 | ' 
0beb4                 | ' do: loop until lpeek(base+64*7)<32768
0beb4     37 00 00 FF 
0beb8     10 E4 05 F1 | 	add	objptr, ##28176
0bebc                 | LR__1026
0bebc     F2 12 02 FB | 	rdlong	arg01, objptr
0bec0     C0 13 06 F1 | 	add	arg01, #448
0bec4     09 FB 01 FB | 	rdlong	result1, arg01
0bec8     40 00 00 FF 
0becc     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bed0     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0bed4     37 00 00 FF 
0bed8     10 E4 85 F1 | 	sub	objptr, ##28176
0bedc                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bedc     80 02 06 F6 | 	mov	_var02, #128
0bee0                 | LR__1027
0bee0     01 07 52 F6 | 	abs	_var04, _var02 wc
0bee4     07 06 06 F5 | 	and	_var04, #7
0bee8     03 07 82 F6 | 	negc	_var04, _var04
0beec     04 06 56 F2 | 	cmps	_var04, #4 wc
0bef0     20 00 90 3D |  if_ae	jmp	#LR__1028
0bef4     01 0B 02 F6 | 	mov	_var06, _var02
0bef8     4D 00 00 FF 
0befc     B4 E5 05 F1 | 	add	objptr, ##39860
0bf00     F2 0A 02 F1 | 	add	_var06, objptr
0bf04     05 FF 48 FC | 	wrbyte	#127, _var06
0bf08     4D 00 00 FF 
0bf0c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf10     1C 00 90 FD | 	jmp	#LR__1029
0bf14                 | LR__1028
0bf14     01 0B 02 F6 | 	mov	_var06, _var02
0bf18     4D 00 00 FF 
0bf1c     B4 E5 05 F1 | 	add	objptr, ##39860
0bf20     F2 0A 02 F1 | 	add	_var06, objptr
0bf24     05 01 49 FC | 	wrbyte	#128, _var06
0bf28     4D 00 00 FF 
0bf2c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf30                 | LR__1029
0bf30     01 02 06 F1 | 	add	_var02, #1
0bf34     00 03 16 F2 | 	cmp	_var02, #256 wc
0bf38     A4 FF 9F CD |  if_b	jmp	#LR__1027
0bf3c                 | LR__1030
0bf3c                 | _csave_block_ret
0bf3c     2D 00 64 FD | 	ret
0bf40                 | 
0bf40                 | ' 
0bf40                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0bf40                 | _csave_addtoblock
0bf40     04 4A 05 F6 | 	mov	COUNT_, #4
0bf44     A8 00 A0 FD | 	call	#pushregs_
0bf48     09 1F 02 F6 | 	mov	local01, arg01
0bf4c                 | ' 
0bf4c                 | ' if force=0 then
0bf4c     07 14 4E F7 | 	zerox	arg02, #7 wz
0bf50     78 00 90 5D |  if_ne	jmp	#LR__1040
0bf54     50 00 00 FF 
0bf58     B4 E4 05 F1 | 	add	objptr, ##41140
0bf5c     F2 14 02 FB | 	rdlong	arg02, objptr
0bf60     02 00 00 FF 
0bf64     00 E4 85 F1 | 	sub	objptr, ##1024
0bf68     F2 14 02 F1 | 	add	arg02, objptr
0bf6c     0A 1F 42 FC | 	wrbyte	local01, arg02
0bf70     02 00 00 FF 
0bf74     00 E4 05 F1 | 	add	objptr, ##1024
0bf78     F2 1E 02 FB | 	rdlong	local01, objptr
0bf7c     01 1E 06 F1 | 	add	local01, #1
0bf80     F2 1E 62 FC | 	wrlong	local01, objptr
0bf84                 | '   block(blockptr)=d
0bf84                 | '   blockptr+=1
0bf84                 | '   if blockptr>=255 then
0bf84     50 00 00 FF 
0bf88     B4 E4 85 F1 | 	sub	objptr, ##41140
0bf8c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0bf90     E4 00 90 CD |  if_b	jmp	#LR__1044
0bf94     4E 00 00 FF 
0bf98     B4 E4 05 F1 | 	add	objptr, ##40116
0bf9c     F2 12 02 F6 | 	mov	arg01, objptr
0bfa0     4E 00 00 FF 
0bfa4     B4 E4 85 F1 | 	sub	objptr, ##40116
0bfa8     B0 FB BF FD | 	call	#_csave_block
0bfac     50 00 00 FF 
0bfb0     B4 E4 05 F1 | 	add	objptr, ##41140
0bfb4     F2 00 68 FC | 	wrlong	#0, objptr
0bfb8     50 00 00 FF 
0bfbc     B4 E4 85 F1 | 	sub	objptr, ##41140
0bfc0     2C 13 06 F6 | 	mov	arg01, #300
0bfc4     F0 58 B1 FD | 	call	#__system___waitms
0bfc8     AC 00 90 FD | 	jmp	#LR__1044
0bfcc                 | LR__1040
0bfcc     50 00 00 FF 
0bfd0     B4 E4 05 F1 | 	add	objptr, ##41140
0bfd4     F2 20 02 FB | 	rdlong	local02, objptr
0bfd8     02 00 00 FF 
0bfdc     00 E4 85 F1 | 	sub	objptr, ##1024
0bfe0     F2 20 02 F1 | 	add	local02, objptr
0bfe4     10 1F 42 FC | 	wrbyte	local01, local02
0bfe8                 | '   block(blockptr)=d
0bfe8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0bfe8     02 00 00 FF 
0bfec     00 E4 05 F1 | 	add	objptr, ##1024
0bff0     F2 22 02 FB | 	rdlong	local03, objptr
0bff4     50 00 00 FF 
0bff8     B4 E4 85 F1 | 	sub	objptr, ##41140
0bffc     FF 22 16 F2 | 	cmp	local03, #255 wc
0c000     40 00 90 3D |  if_ae	jmp	#LR__1043
0c004     50 00 00 FF 
0c008     B4 E4 05 F1 | 	add	objptr, ##41140
0c00c     F2 24 02 FB | 	rdlong	local04, objptr
0c010     50 00 00 FF 
0c014     B4 E4 85 F1 | 	sub	objptr, ##41140
0c018                 | LR__1041
0c018     00 25 56 F2 | 	cmps	local04, #256 wc
0c01c     24 00 90 3D |  if_ae	jmp	#LR__1042
0c020     12 21 02 F6 | 	mov	local02, local04
0c024     4E 00 00 FF 
0c028     B4 E4 05 F1 | 	add	objptr, ##40116
0c02c     F2 20 02 F1 | 	add	local02, objptr
0c030     10 01 48 FC | 	wrbyte	#0, local02
0c034     01 24 06 F1 | 	add	local04, #1
0c038     4E 00 00 FF 
0c03c     B4 E4 85 F1 | 	sub	objptr, ##40116
0c040     D4 FF 9F FD | 	jmp	#LR__1041
0c044                 | LR__1042
0c044                 | LR__1043
0c044     4E 00 00 FF 
0c048     B4 E4 05 F1 | 	add	objptr, ##40116
0c04c     F2 12 02 F6 | 	mov	arg01, objptr
0c050     4E 00 00 FF 
0c054     B4 E4 85 F1 | 	sub	objptr, ##40116
0c058     00 FB BF FD | 	call	#_csave_block
0c05c     50 00 00 FF 
0c060     B4 E4 05 F1 | 	add	objptr, ##41140
0c064     F2 00 68 FC | 	wrlong	#0, objptr
0c068     50 00 00 FF 
0c06c     B4 E4 85 F1 | 	sub	objptr, ##41140
0c070     2C 13 06 F6 | 	mov	arg01, #300
0c074     40 58 B1 FD | 	call	#__system___waitms
0c078                 | LR__1044
0c078     A7 F0 03 F6 | 	mov	ptra, fp
0c07c     B2 00 A0 FD | 	call	#popregs_
0c080                 | _csave_addtoblock_ret
0c080     2D 00 64 FD | 	ret
0c084                 | 
0c084                 | ' 
0c084                 | ' '----------------------- csave
0c084                 | ' 
0c084                 | ' sub test_csave
0c084                 | _test_csave
0c084     04 4A 05 F6 | 	mov	COUNT_, #4
0c088     A8 00 A0 FD | 	call	#pushregs_
0c08c     C0 F0 07 F1 | 	add	ptra, #192
0c090                 | ' 'dim fileheader,savestart, saveptr as ulong
0c090                 | ' 
0c090                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c090     4A 00 00 FF 
0c094     88 E4 05 F1 | 	add	objptr, ##38024
0c098     F2 12 02 FB | 	rdlong	arg01, objptr
0c09c     4A 00 00 FF 
0c0a0     88 E4 85 F1 | 	sub	objptr, ##38024
0c0a4     18 22 B1 FD | 	call	#_pslpeek
0c0a8     FF FF 7F FF 
0c0ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c0b0     10 00 90 5D |  if_ne	jmp	#LR__1050
0c0b4     1B 12 06 F6 | 	mov	arg01, #27
0c0b8     00 14 06 F6 | 	mov	arg02, #0
0c0bc     44 1F B1 FD | 	call	#_printerror
0c0c0     1C 03 90 FD | 	jmp	#LR__1064
0c0c4                 | LR__1050
0c0c4     50 F7 BF FD | 	call	#_pop
0c0c8     90 4E 05 F1 | 	add	fp, #144
0c0cc     A7 FA 61 FC | 	wrlong	result1, fp
0c0d0     04 4E 05 F1 | 	add	fp, #4
0c0d4     A7 FC 61 FC | 	wrlong	result2, fp
0c0d8     04 4E 05 F1 | 	add	fp, #4
0c0dc     A7 FE 61 FC | 	wrlong	result3, fp
0c0e0                 | ' t1=pop()
0c0e0                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c0e0     98 4E 85 F1 | 	sub	fp, #152
0c0e4     1F FE 0D F2 | 	cmp	result3, #31 wz
0c0e8     24 00 90 AD |  if_e	jmp	#LR__1051
0c0ec     51 00 00 FF 
0c0f0     D8 E5 05 F1 | 	add	objptr, ##41944
0c0f4     F2 1C 02 FB | 	rdlong	arg06, objptr
0c0f8     51 00 00 FF 
0c0fc     D8 E5 85 F1 | 	sub	objptr, ##41944
0c100     8C 4E 05 F1 | 	add	fp, #140
0c104     A7 1C 62 FC | 	wrlong	arg06, fp
0c108     8C 4E 85 F1 | 	sub	fp, #140
0c10c     14 00 90 FD | 	jmp	#LR__1052
0c110                 | LR__1051
0c110     90 4E 05 F1 | 	add	fp, #144
0c114     A7 1C 02 FB | 	rdlong	arg06, fp
0c118     04 4E 85 F1 | 	sub	fp, #4
0c11c     A7 1C 62 FC | 	wrlong	arg06, fp
0c120     8C 4E 85 F1 | 	sub	fp, #140
0c124                 | LR__1052
0c124                 | ' 
0c124                 | ' ' prepare 1 kHz header wave
0c124                 | ' 
0c124                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c124     A7 00 68 FC | 	wrlong	#0, fp
0c128     97 34 48 FB | 	callpa	#(@LR__1056-@LR__1053)>>2,fcache_load_ptr_
0c12c                 | LR__1053
0c12c     A7 1C 02 FB | 	rdlong	arg06, fp
0c130     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c134     07 1A 06 F5 | 	and	arg05, #7
0c138     0D 1B 82 F6 | 	negc	arg05, arg05
0c13c     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c140     20 00 90 3D |  if_ae	jmp	#LR__1054
0c144     A7 1A 02 FB | 	rdlong	arg05, fp
0c148     4D 00 00 FF 
0c14c     B4 E5 05 F1 | 	add	objptr, ##39860
0c150     F2 1A 02 F1 | 	add	arg05, objptr
0c154     0D FF 48 FC | 	wrbyte	#127, arg05
0c158     4D 00 00 FF 
0c15c     B4 E5 85 F1 | 	sub	objptr, ##39860
0c160     1C 00 90 FD | 	jmp	#LR__1055
0c164                 | LR__1054
0c164     A7 1A 02 FB | 	rdlong	arg05, fp
0c168     4D 00 00 FF 
0c16c     B4 E5 05 F1 | 	add	objptr, ##39860
0c170     F2 1A 02 F1 | 	add	arg05, objptr
0c174     0D 01 49 FC | 	wrbyte	#128, arg05
0c178     4D 00 00 FF 
0c17c     B4 E5 85 F1 | 	sub	objptr, ##39860
0c180                 | LR__1055
0c180     A7 1A 02 FB | 	rdlong	arg05, fp
0c184     01 1A 06 F1 | 	add	arg05, #1
0c188     A7 1A 62 FC | 	wrlong	arg05, fp
0c18c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c190     98 FF 9F CD |  if_b	jmp	#LR__1053
0c194                 | LR__1056
0c194     4D 00 00 FF 
0c198     B4 E5 05 F1 | 	add	objptr, ##39860
0c19c     F2 14 02 F6 | 	mov	arg02, objptr
0c1a0     07 12 06 F6 | 	mov	arg01, #7
0c1a4     0F 00 00 FF 
0c1a8     40 17 06 F6 | 	mov	arg03, ##8000
0c1ac     0E 18 C6 F9 | 	decod	arg04, #14
0c1b0     00 1B 06 F6 | 	mov	arg05, #256
0c1b4     00 1C 06 F6 | 	mov	arg06, #0
0c1b8     42 00 00 FF 
0c1bc     E8 E4 85 F1 | 	sub	objptr, ##34024
0c1c0     5C 50 B1 FD | 	call	#_audio096_spin2_play8
0c1c4     0B 00 00 FF 
0c1c8     CC E4 85 F1 | 	sub	objptr, ##5836
0c1cc     05 00 00 FF 
0c1d0     B8 13 06 F6 | 	mov	arg01, ##3000
0c1d4     E0 56 B1 FD | 	call	#__system___waitms
0c1d8     50 00 00 FF 
0c1dc     B4 E4 05 F1 | 	add	objptr, ##41140
0c1e0     F2 00 68 FC | 	wrlong	#0, objptr
0c1e4     50 00 00 FF 
0c1e8     B4 E4 85 F1 | 	sub	objptr, ##41140
0c1ec     72 12 06 F6 | 	mov	arg01, #114
0c1f0     00 14 06 F6 | 	mov	arg02, #0
0c1f4     48 FD BF FD | 	call	#_csave_addtoblock
0c1f8     62 12 06 F6 | 	mov	arg01, #98
0c1fc     00 14 06 F6 | 	mov	arg02, #0
0c200     3C FD BF FD | 	call	#_csave_addtoblock
0c204     61 12 06 F6 | 	mov	arg01, #97
0c208     00 14 06 F6 | 	mov	arg02, #0
0c20c     30 FD BF FD | 	call	#_csave_addtoblock
0c210     0D 12 06 F6 | 	mov	arg01, #13
0c214     00 14 06 F6 | 	mov	arg02, #0
0c218     24 FD BF FD | 	call	#_csave_addtoblock
0c21c                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c21c                 | ' waitms 3000 
0c21c                 | ' 
0c21c                 | ' blockptr=0
0c21c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c21c                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c21c     A7 02 68 FC | 	wrlong	#1, fp
0c220     8C 4E 05 F1 | 	add	fp, #140
0c224     A7 12 02 FB | 	rdlong	arg01, fp
0c228     8C 4E 85 F1 | 	sub	fp, #140
0c22c     09 1F 02 F6 | 	mov	local01, arg01
0c230     97 06 48 FB | 	callpa	#(@LR__1058-@LR__1057)>>2,fcache_load_ptr_
0c234                 | LR__1057
0c234     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c238     01 1E 06 51 |  if_ne	add	local01, #1
0c23c     F4 FF 9F 5D |  if_ne	jmp	#LR__1057
0c240                 | LR__1058
0c240     09 1F 82 F1 | 	sub	local01, arg01
0c244     0F 21 02 F6 | 	mov	local02, local01
0c248     01 20 06 F1 | 	add	local02, #1
0c24c                 | LR__1059
0c24c     A7 1A 02 FB | 	rdlong	arg05, fp
0c250     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c254     34 00 90 3D |  if_ae	jmp	#LR__1060
0c258     8C 4E 05 F1 | 	add	fp, #140
0c25c     A7 12 02 FB | 	rdlong	arg01, fp
0c260     8C 4E 85 F1 | 	sub	fp, #140
0c264     A7 14 02 FB | 	rdlong	arg02, fp
0c268     01 16 06 F6 | 	mov	arg03, #1
0c26c     E8 74 B1 FD | 	call	#__system__Mid_S
0c270     FD 12 C2 FA | 	rdbyte	arg01, result1
0c274     00 14 06 F6 | 	mov	arg02, #0
0c278     C4 FC BF FD | 	call	#_csave_addtoblock
0c27c     A7 1A 02 FB | 	rdlong	arg05, fp
0c280     01 1A 06 F1 | 	add	arg05, #1
0c284     A7 1A 62 FC | 	wrlong	arg05, fp
0c288     C0 FF 9F FD | 	jmp	#LR__1059
0c28c                 | LR__1060
0c28c     00 12 06 F6 | 	mov	arg01, #0
0c290     00 14 06 F6 | 	mov	arg02, #0
0c294     A8 FC BF FD | 	call	#_csave_addtoblock
0c298     72 12 06 F6 | 	mov	arg01, #114
0c29c     00 14 06 F6 | 	mov	arg02, #0
0c2a0     9C FC BF FD | 	call	#_csave_addtoblock
0c2a4     62 12 06 F6 | 	mov	arg01, #98
0c2a8     00 14 06 F6 | 	mov	arg02, #0
0c2ac     90 FC BF FD | 	call	#_csave_addtoblock
0c2b0     73 12 06 F6 | 	mov	arg01, #115
0c2b4     00 14 06 F6 | 	mov	arg02, #0
0c2b8     84 FC BF FD | 	call	#_csave_addtoblock
0c2bc     0D 12 06 F6 | 	mov	arg01, #13
0c2c0     00 14 06 F6 | 	mov	arg02, #0
0c2c4     78 FC BF FD | 	call	#_csave_addtoblock
0c2c8     4A 00 00 FF 
0c2cc     88 E4 05 F1 | 	add	objptr, ##38024
0c2d0     F2 22 02 FB | 	rdlong	local03, objptr
0c2d4     4A 00 00 FF 
0c2d8     88 E4 85 F1 | 	sub	objptr, ##38024
0c2dc     9C 4E 05 F1 | 	add	fp, #156
0c2e0     A7 22 62 FC | 	wrlong	local03, fp
0c2e4     9C 4E 85 F1 | 	sub	fp, #156
0c2e8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c2e8                 | ' 
0c2e8                 | ' saveptr=programstart
0c2e8                 | ' do
0c2e8                 | LR__1061
0c2e8     A0 4E 05 F1 | 	add	fp, #160
0c2ec     A7 12 02 F6 | 	mov	arg01, fp
0c2f0     04 4E 85 F1 | 	sub	fp, #4
0c2f4     A7 14 02 FB | 	rdlong	arg02, fp
0c2f8     9C 4E 85 F1 | 	sub	fp, #156
0c2fc     18 16 06 F6 | 	mov	arg03, #24
0c300     0B 00 00 FF 
0c304     CC E4 05 F1 | 	add	objptr, ##5836
0c308     78 46 B1 FD | 	call	#_psram_spin2_read1
0c30c     0C 4E 05 F1 | 	add	fp, #12
0c310     A7 12 02 F6 | 	mov	arg01, fp
0c314     9C 4E 05 F1 | 	add	fp, #156
0c318     A7 14 02 FB | 	rdlong	arg02, fp
0c31c     04 4E 05 F1 | 	add	fp, #4
0c320     A7 16 02 FB | 	rdlong	arg03, fp
0c324     AC 4E 85 F1 | 	sub	fp, #172
0c328     58 46 B1 FD | 	call	#_psram_spin2_read1
0c32c     0B 00 00 FF 
0c330     CC E4 85 F1 | 	sub	objptr, ##5836
0c334     AC 4E 05 F1 | 	add	fp, #172
0c338     A7 12 02 FB | 	rdlong	arg01, fp
0c33c     AC 4E 85 F1 | 	sub	fp, #172
0c340     00 14 06 F6 | 	mov	arg02, #0
0c344     F8 FB BF FD | 	call	#_csave_addtoblock
0c348                 | ' 
0c348                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c348                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c348                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c348                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c348     A7 00 68 FC | 	wrlong	#0, fp
0c34c     AC 4E 05 F1 | 	add	fp, #172
0c350     A7 24 02 FB | 	rdlong	local04, fp
0c354     AC 4E 85 F1 | 	sub	fp, #172
0c358                 | LR__1062
0c358     A7 22 02 FB | 	rdlong	local03, fp
0c35c     12 23 52 F2 | 	cmps	local03, local04 wc
0c360     2C 00 90 3D |  if_ae	jmp	#LR__1063
0c364     A7 22 02 FB | 	rdlong	local03, fp
0c368     0C 4E 05 F1 | 	add	fp, #12
0c36c     A7 22 02 F1 | 	add	local03, fp
0c370     11 13 C2 FA | 	rdbyte	arg01, local03
0c374     00 14 06 F6 | 	mov	arg02, #0
0c378     0C 4E 85 F1 | 	sub	fp, #12
0c37c     C0 FB BF FD | 	call	#_csave_addtoblock
0c380     A7 22 02 FB | 	rdlong	local03, fp
0c384     01 22 06 F1 | 	add	local03, #1
0c388     A7 22 62 FC | 	wrlong	local03, fp
0c38c     C8 FF 9F FD | 	jmp	#LR__1062
0c390                 | LR__1063
0c390     B4 4E 05 F1 | 	add	fp, #180
0c394     A7 22 02 FB | 	rdlong	local03, fp
0c398     18 4E 85 F1 | 	sub	fp, #24
0c39c     A7 22 62 FC | 	wrlong	local03, fp
0c3a0     18 4E 05 F1 | 	add	fp, #24
0c3a4     A7 22 02 FB | 	rdlong	local03, fp
0c3a8     B4 4E 85 F1 | 	sub	fp, #180
0c3ac     FF FF 3F FF 
0c3b0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c3b4     30 FF 9F 5D |  if_ne	jmp	#LR__1061
0c3b8     00 12 06 F6 | 	mov	arg01, #0
0c3bc     01 14 06 F6 | 	mov	arg02, #1
0c3c0     7C FB BF FD | 	call	#_csave_addtoblock
0c3c4     37 00 00 FF 
0c3c8     10 E4 05 F1 | 	add	objptr, ##28176
0c3cc     F2 12 02 FB | 	rdlong	arg01, objptr
0c3d0     37 00 00 FF 
0c3d4     10 E4 85 F1 | 	sub	objptr, ##28176
0c3d8     D4 13 06 F1 | 	add	arg01, #468
0c3dc     09 01 58 FC | 	wrword	#0, arg01
0c3e0                 | LR__1064
0c3e0     A7 F0 03 F6 | 	mov	ptra, fp
0c3e4     B2 00 A0 FD | 	call	#popregs_
0c3e8                 | _test_csave_ret
0c3e8     2D 00 64 FD | 	ret
0c3ec                 | 
0c3ec                 | ' 
0c3ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ec                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0c3ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ec                 | ' 
0c3ec                 | ' 
0c3ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ec                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0c3ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ec                 | ' 
0c3ec                 | ' '-------------------- abs
0c3ec                 | ' 
0c3ec                 | ' sub do_abs
0c3ec                 | _do_abs
0c3ec     01 4A 05 F6 | 	mov	COUNT_, #1
0c3f0     A8 00 A0 FD | 	call	#pushregs_
0c3f4     0C F0 07 F1 | 	add	ptra, #12
0c3f8     1C F4 BF FD | 	call	#_pop
0c3fc     FF 1E 02 F6 | 	mov	local01, result3
0c400     A7 FA 61 FC | 	wrlong	result1, fp
0c404     04 4E 05 F1 | 	add	fp, #4
0c408     A7 FC 61 FC | 	wrlong	result2, fp
0c40c     04 4E 05 F1 | 	add	fp, #4
0c410     A7 1E 62 FC | 	wrlong	local01, fp
0c414                 | ' 
0c414                 | ' t1=pop()
0c414                 | ' if t1.result_type=result_int then 
0c414     08 4E 85 F1 | 	sub	fp, #8
0c418     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c41c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0c420     09 1F 42 A6 |  if_e	abs	local01, arg01
0c424     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c428     2C 00 90 AD |  if_e	jmp	#LR__1070
0c42c     08 4E 05 F1 | 	add	fp, #8
0c430     A7 1E 02 FB | 	rdlong	local01, fp
0c434     08 4E 85 F1 | 	sub	fp, #8
0c438     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c43c     A7 FA 01 AB |  if_e	rdlong	result1, fp
0c440     1F FA 05 A4 |  if_e	bitl	result1, #31
0c444     A7 FA 61 AC |  if_e	wrlong	result1, fp
0c448     08 4E 05 51 |  if_ne	add	fp, #8
0c44c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c450     08 4E 85 51 |  if_ne	sub	fp, #8
0c454     A7 50 68 5C |  if_ne	wrlong	#40, fp
0c458                 | LR__1070
0c458     A7 12 02 F6 | 	mov	arg01, fp
0c45c     50 F4 BF FD | 	call	#_push
0c460     A7 F0 03 F6 | 	mov	ptra, fp
0c464     B2 00 A0 FD | 	call	#popregs_
0c468                 | _do_abs_ret
0c468     2D 00 64 FD | 	ret
0c46c                 | 
0c46c                 | ' 
0c46c                 | ' '-------------------- acos
0c46c                 | ' 
0c46c                 | ' sub do_acos
0c46c                 | _do_acos
0c46c     01 4A 05 F6 | 	mov	COUNT_, #1
0c470     A8 00 A0 FD | 	call	#pushregs_
0c474     10 F0 07 F1 | 	add	ptra, #16
0c478     4A 00 00 FF 
0c47c     80 E4 05 F1 | 	add	objptr, ##38016
0c480     F2 1E 02 FB | 	rdlong	local01, objptr
0c484     0F 17 02 F6 | 	mov	arg03, local01
0c488     01 16 66 F0 | 	shl	arg03, #1
0c48c     0F 17 02 F1 | 	add	arg03, local01
0c490     02 16 66 F0 | 	shl	arg03, #2
0c494     03 00 00 FF 
0c498     04 E4 85 F1 | 	sub	objptr, ##1540
0c49c     F2 16 02 F1 | 	add	arg03, objptr
0c4a0     0B 17 02 FB | 	rdlong	arg03, arg03
0c4a4     0C 4E 05 F1 | 	add	fp, #12
0c4a8     A7 16 62 FC | 	wrlong	arg03, fp
0c4ac                 | ' 
0c4ac                 | ' numpar=compiledline(lineptr_e).result.uresult
0c4ac                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c4ac     0C 4E 85 F1 | 	sub	fp, #12
0c4b0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c4b4     47 00 00 FF 
0c4b8     7C E4 85 F1 | 	sub	objptr, ##36476
0c4bc     0C 4E 05 C1 |  if_b	add	fp, #12
0c4c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c4c4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c4c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c4cc     00 12 06 F6 | 	mov	arg01, #0
0c4d0     1C AE B1 FD | 	call	#__system___getiolock_0570
0c4d4     FD 12 02 F6 | 	mov	arg01, result1
0c4d8     E8 50 B1 FD | 	call	#__system___lockmem
0c4dc     8B 01 00 FF 
0c4e0     CA 15 06 F6 | 	mov	arg02, ##@LR__5508
0c4e4     00 12 06 F6 | 	mov	arg01, #0
0c4e8     00 16 06 F6 | 	mov	arg03, #0
0c4ec     C8 5D B1 FD | 	call	#__system___basic_print_string
0c4f0     00 12 06 F6 | 	mov	arg01, #0
0c4f4     F8 AD B1 FD | 	call	#__system___getiolock_0570
0c4f8     FD 00 68 FC | 	wrlong	#0, result1
0c4fc     27 12 06 F6 | 	mov	arg01, #39
0c500     00 14 06 F6 | 	mov	arg02, #0
0c504     FC 1A B1 FD | 	call	#_printerror
0c508     64 00 90 FD | 	jmp	#LR__1081
0c50c                 | LR__1080
0c50c     08 F3 BF FD | 	call	#_pop
0c510     FF 1E 02 F6 | 	mov	local01, result3
0c514     A7 FA 61 FC | 	wrlong	result1, fp
0c518     04 4E 05 F1 | 	add	fp, #4
0c51c     A7 FC 61 FC | 	wrlong	result2, fp
0c520     04 4E 05 F1 | 	add	fp, #4
0c524     A7 1E 62 FC | 	wrlong	local01, fp
0c528     08 4E 85 F1 | 	sub	fp, #8
0c52c     A7 12 02 F6 | 	mov	arg01, fp
0c530     84 F5 BF FD | 	call	#_converttofloat
0c534     FD 12 02 F6 | 	mov	arg01, result1
0c538     84 89 B1 FD | 	call	#__system____builtin_acosf
0c53c     FD 12 02 F6 | 	mov	arg01, result1
0c540     51 00 00 FF 
0c544     C0 E5 05 F1 | 	add	objptr, ##41920
0c548     F2 14 02 FB | 	rdlong	arg02, objptr
0c54c     51 00 00 FF 
0c550     C0 E5 85 F1 | 	sub	objptr, ##41920
0c554     28 7E B1 FD | 	call	#__system___float_mul
0c558     A7 FA 61 FC | 	wrlong	result1, fp
0c55c     08 4E 05 F1 | 	add	fp, #8
0c560     A7 3C 68 FC | 	wrlong	#30, fp
0c564     08 4E 85 F1 | 	sub	fp, #8
0c568     A7 12 02 F6 | 	mov	arg01, fp
0c56c     40 F3 BF FD | 	call	#_push
0c570                 | LR__1081
0c570     A7 F0 03 F6 | 	mov	ptra, fp
0c574     B2 00 A0 FD | 	call	#popregs_
0c578                 | _do_acos_ret
0c578     2D 00 64 FD | 	ret
0c57c                 | 
0c57c                 | ' 
0c57c                 | ' '-------------------- asc
0c57c                 | ' 
0c57c                 | ' sub do_asc
0c57c                 | _do_asc
0c57c     01 4A 05 F6 | 	mov	COUNT_, #1
0c580     A8 00 A0 FD | 	call	#pushregs_
0c584     14 F0 07 F1 | 	add	ptra, #20
0c588     4A 00 00 FF 
0c58c     80 E4 05 F1 | 	add	objptr, ##38016
0c590     F2 1E 02 FB | 	rdlong	local01, objptr
0c594     0F 17 02 F6 | 	mov	arg03, local01
0c598     01 16 66 F0 | 	shl	arg03, #1
0c59c     0F 17 02 F1 | 	add	arg03, local01
0c5a0     02 16 66 F0 | 	shl	arg03, #2
0c5a4     03 00 00 FF 
0c5a8     04 E4 85 F1 | 	sub	objptr, ##1540
0c5ac     F2 16 02 F1 | 	add	arg03, objptr
0c5b0     0B 17 02 FB | 	rdlong	arg03, arg03
0c5b4     0C 4E 05 F1 | 	add	fp, #12
0c5b8     A7 16 62 FC | 	wrlong	arg03, fp
0c5bc                 | ' 
0c5bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5bc                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c5bc     0C 4E 85 F1 | 	sub	fp, #12
0c5c0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c5c4     47 00 00 FF 
0c5c8     7C E4 85 F1 | 	sub	objptr, ##36476
0c5cc     0C 4E 05 C1 |  if_b	add	fp, #12
0c5d0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c5d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c5d8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c5dc     00 12 06 F6 | 	mov	arg01, #0
0c5e0     0C AD B1 FD | 	call	#__system___getiolock_0570
0c5e4     FD 12 02 F6 | 	mov	arg01, result1
0c5e8     D8 4F B1 FD | 	call	#__system___lockmem
0c5ec     8B 01 00 FF 
0c5f0     D1 15 06 F6 | 	mov	arg02, ##@LR__5509
0c5f4     00 12 06 F6 | 	mov	arg01, #0
0c5f8     00 16 06 F6 | 	mov	arg03, #0
0c5fc     B8 5C B1 FD | 	call	#__system___basic_print_string
0c600     00 12 06 F6 | 	mov	arg01, #0
0c604     E8 AC B1 FD | 	call	#__system___getiolock_0570
0c608     FD 00 68 FC | 	wrlong	#0, result1
0c60c     27 12 06 F6 | 	mov	arg01, #39
0c610     00 14 06 F6 | 	mov	arg02, #0
0c614     EC 19 B1 FD | 	call	#_printerror
0c618     B4 00 90 FD | 	jmp	#LR__1093
0c61c                 | LR__1090
0c61c     F8 F1 BF FD | 	call	#_pop
0c620     FF 16 02 F6 | 	mov	arg03, result3
0c624     A7 FA 61 FC | 	wrlong	result1, fp
0c628     04 4E 05 F1 | 	add	fp, #4
0c62c     A7 FC 61 FC | 	wrlong	result2, fp
0c630     04 4E 05 F1 | 	add	fp, #4
0c634     A7 16 62 FC | 	wrlong	arg03, fp
0c638                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c638     08 4E 85 F1 | 	sub	fp, #8
0c63c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c640     18 00 90 5D |  if_ne	jmp	#LR__1091
0c644     A7 12 02 FB | 	rdlong	arg01, fp
0c648     44 F3 BF FD | 	call	#_convertstring
0c64c     A7 FA 61 FC | 	wrlong	result1, fp
0c650     08 4E 05 F1 | 	add	fp, #8
0c654     A7 3E 68 FC | 	wrlong	#31, fp
0c658     08 4E 85 F1 | 	sub	fp, #8
0c65c                 | LR__1091
0c65c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c65c     08 4E 05 F1 | 	add	fp, #8
0c660     A7 16 02 FB | 	rdlong	arg03, fp
0c664     08 4E 85 F1 | 	sub	fp, #8
0c668     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c66c     40 00 90 AD |  if_e	jmp	#LR__1092
0c670     00 12 06 F6 | 	mov	arg01, #0
0c674     78 AC B1 FD | 	call	#__system___getiolock_0570
0c678     FD 12 02 F6 | 	mov	arg01, result1
0c67c     44 4F B1 FD | 	call	#__system___lockmem
0c680     8B 01 00 FF 
0c684     D7 15 06 F6 | 	mov	arg02, ##@LR__5510
0c688     00 12 06 F6 | 	mov	arg01, #0
0c68c     00 16 06 F6 | 	mov	arg03, #0
0c690     24 5C B1 FD | 	call	#__system___basic_print_string
0c694     00 12 06 F6 | 	mov	arg01, #0
0c698     54 AC B1 FD | 	call	#__system___getiolock_0570
0c69c     FD 00 68 FC | 	wrlong	#0, result1
0c6a0     0F 12 06 F6 | 	mov	arg01, #15
0c6a4     00 14 06 F6 | 	mov	arg02, #0
0c6a8     58 19 B1 FD | 	call	#_printerror
0c6ac     20 00 90 FD | 	jmp	#LR__1093
0c6b0                 | LR__1092
0c6b0     A7 1E 02 FB | 	rdlong	local01, fp
0c6b4     0F 1F C2 FA | 	rdbyte	local01, local01
0c6b8     A7 1E 62 FC | 	wrlong	local01, fp
0c6bc     08 4E 05 F1 | 	add	fp, #8
0c6c0     A7 38 68 FC | 	wrlong	#28, fp
0c6c4     08 4E 85 F1 | 	sub	fp, #8
0c6c8     A7 12 02 F6 | 	mov	arg01, fp
0c6cc     E0 F1 BF FD | 	call	#_push
0c6d0                 | LR__1093
0c6d0     A7 F0 03 F6 | 	mov	ptra, fp
0c6d4     B2 00 A0 FD | 	call	#popregs_
0c6d8                 | _do_asc_ret
0c6d8     2D 00 64 FD | 	ret
0c6dc                 | 
0c6dc                 | ' 
0c6dc                 | ' '-------------------- asin
0c6dc                 | ' 
0c6dc                 | ' sub do_asin
0c6dc                 | _do_asin
0c6dc     01 4A 05 F6 | 	mov	COUNT_, #1
0c6e0     A8 00 A0 FD | 	call	#pushregs_
0c6e4     10 F0 07 F1 | 	add	ptra, #16
0c6e8     4A 00 00 FF 
0c6ec     80 E4 05 F1 | 	add	objptr, ##38016
0c6f0     F2 1E 02 FB | 	rdlong	local01, objptr
0c6f4     0F 17 02 F6 | 	mov	arg03, local01
0c6f8     01 16 66 F0 | 	shl	arg03, #1
0c6fc     0F 17 02 F1 | 	add	arg03, local01
0c700     02 16 66 F0 | 	shl	arg03, #2
0c704     03 00 00 FF 
0c708     04 E4 85 F1 | 	sub	objptr, ##1540
0c70c     F2 16 02 F1 | 	add	arg03, objptr
0c710     0B 17 02 FB | 	rdlong	arg03, arg03
0c714     0C 4E 05 F1 | 	add	fp, #12
0c718     A7 16 62 FC | 	wrlong	arg03, fp
0c71c                 | ' 
0c71c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c71c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c71c     0C 4E 85 F1 | 	sub	fp, #12
0c720     02 16 16 F2 | 	cmp	arg03, #2 wc
0c724     47 00 00 FF 
0c728     7C E4 85 F1 | 	sub	objptr, ##36476
0c72c     0C 4E 05 C1 |  if_b	add	fp, #12
0c730     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c734     0C 4E 85 C1 |  if_b	sub	fp, #12
0c738     40 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c73c     00 12 06 F6 | 	mov	arg01, #0
0c740     AC AB B1 FD | 	call	#__system___getiolock_0570
0c744     FD 12 02 F6 | 	mov	arg01, result1
0c748     78 4E B1 FD | 	call	#__system___lockmem
0c74c     8B 01 00 FF 
0c750     DD 15 06 F6 | 	mov	arg02, ##@LR__5511
0c754     00 12 06 F6 | 	mov	arg01, #0
0c758     00 16 06 F6 | 	mov	arg03, #0
0c75c     58 5B B1 FD | 	call	#__system___basic_print_string
0c760     00 12 06 F6 | 	mov	arg01, #0
0c764     88 AB B1 FD | 	call	#__system___getiolock_0570
0c768     FD 00 68 FC | 	wrlong	#0, result1
0c76c     27 12 06 F6 | 	mov	arg01, #39
0c770     00 14 06 F6 | 	mov	arg02, #0
0c774     8C 18 B1 FD | 	call	#_printerror
0c778     64 00 90 FD | 	jmp	#LR__1101
0c77c                 | LR__1100
0c77c     98 F0 BF FD | 	call	#_pop
0c780     FF 1E 02 F6 | 	mov	local01, result3
0c784     A7 FA 61 FC | 	wrlong	result1, fp
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 FC 61 FC | 	wrlong	result2, fp
0c790     04 4E 05 F1 | 	add	fp, #4
0c794     A7 1E 62 FC | 	wrlong	local01, fp
0c798     08 4E 85 F1 | 	sub	fp, #8
0c79c     A7 12 02 F6 | 	mov	arg01, fp
0c7a0     14 F3 BF FD | 	call	#_converttofloat
0c7a4     FD 12 02 F6 | 	mov	arg01, result1
0c7a8     C8 86 B1 FD | 	call	#__system____builtin_asinf
0c7ac     FD 12 02 F6 | 	mov	arg01, result1
0c7b0     51 00 00 FF 
0c7b4     C0 E5 05 F1 | 	add	objptr, ##41920
0c7b8     F2 14 02 FB | 	rdlong	arg02, objptr
0c7bc     51 00 00 FF 
0c7c0     C0 E5 85 F1 | 	sub	objptr, ##41920
0c7c4     B8 7B B1 FD | 	call	#__system___float_mul
0c7c8     A7 FA 61 FC | 	wrlong	result1, fp
0c7cc     08 4E 05 F1 | 	add	fp, #8
0c7d0     A7 3C 68 FC | 	wrlong	#30, fp
0c7d4     08 4E 85 F1 | 	sub	fp, #8
0c7d8     A7 12 02 F6 | 	mov	arg01, fp
0c7dc     D0 F0 BF FD | 	call	#_push
0c7e0                 | LR__1101
0c7e0     A7 F0 03 F6 | 	mov	ptra, fp
0c7e4     B2 00 A0 FD | 	call	#popregs_
0c7e8                 | _do_asin_ret
0c7e8     2D 00 64 FD | 	ret
0c7ec                 | 
0c7ec                 | ' 
0c7ec                 | ' '-------------------- atn
0c7ec                 | ' 
0c7ec                 | ' sub do_atn
0c7ec                 | _do_atn
0c7ec     01 4A 05 F6 | 	mov	COUNT_, #1
0c7f0     A8 00 A0 FD | 	call	#pushregs_
0c7f4     10 F0 07 F1 | 	add	ptra, #16
0c7f8     4A 00 00 FF 
0c7fc     80 E4 05 F1 | 	add	objptr, ##38016
0c800     F2 1E 02 FB | 	rdlong	local01, objptr
0c804     0F 17 02 F6 | 	mov	arg03, local01
0c808     01 16 66 F0 | 	shl	arg03, #1
0c80c     0F 17 02 F1 | 	add	arg03, local01
0c810     02 16 66 F0 | 	shl	arg03, #2
0c814     03 00 00 FF 
0c818     04 E4 85 F1 | 	sub	objptr, ##1540
0c81c     F2 16 02 F1 | 	add	arg03, objptr
0c820     0B 17 02 FB | 	rdlong	arg03, arg03
0c824     0C 4E 05 F1 | 	add	fp, #12
0c828     A7 16 62 FC | 	wrlong	arg03, fp
0c82c                 | ' 
0c82c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c82c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c82c     0C 4E 85 F1 | 	sub	fp, #12
0c830     02 16 16 F2 | 	cmp	arg03, #2 wc
0c834     47 00 00 FF 
0c838     7C E4 85 F1 | 	sub	objptr, ##36476
0c83c     0C 4E 05 C1 |  if_b	add	fp, #12
0c840     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c844     0C 4E 85 C1 |  if_b	sub	fp, #12
0c848     40 00 90 4D |  if_c_and_nz	jmp	#LR__1110
0c84c     00 12 06 F6 | 	mov	arg01, #0
0c850     9C AA B1 FD | 	call	#__system___getiolock_0570
0c854     FD 12 02 F6 | 	mov	arg01, result1
0c858     68 4D B1 FD | 	call	#__system___lockmem
0c85c     8B 01 00 FF 
0c860     E4 15 06 F6 | 	mov	arg02, ##@LR__5512
0c864     00 12 06 F6 | 	mov	arg01, #0
0c868     00 16 06 F6 | 	mov	arg03, #0
0c86c     48 5A B1 FD | 	call	#__system___basic_print_string
0c870     00 12 06 F6 | 	mov	arg01, #0
0c874     78 AA B1 FD | 	call	#__system___getiolock_0570
0c878     FD 00 68 FC | 	wrlong	#0, result1
0c87c     27 12 06 F6 | 	mov	arg01, #39
0c880     00 14 06 F6 | 	mov	arg02, #0
0c884     7C 17 B1 FD | 	call	#_printerror
0c888     6C 00 90 FD | 	jmp	#LR__1111
0c88c                 | LR__1110
0c88c     88 EF BF FD | 	call	#_pop
0c890     FF 1E 02 F6 | 	mov	local01, result3
0c894     A7 FA 61 FC | 	wrlong	result1, fp
0c898     04 4E 05 F1 | 	add	fp, #4
0c89c     A7 FC 61 FC | 	wrlong	result2, fp
0c8a0     04 4E 05 F1 | 	add	fp, #4
0c8a4     A7 1E 62 FC | 	wrlong	local01, fp
0c8a8     08 4E 85 F1 | 	sub	fp, #8
0c8ac     A7 12 02 F6 | 	mov	arg01, fp
0c8b0     04 F2 BF FD | 	call	#_converttofloat
0c8b4     FD 12 02 F6 | 	mov	arg01, result1
0c8b8     00 C0 1F FF 
0c8bc     00 14 06 F6 | 	mov	arg02, ##1065353216
0c8c0     48 86 B1 FD | 	call	#__system____builtin_atan2f
0c8c4     FD 12 02 F6 | 	mov	arg01, result1
0c8c8     51 00 00 FF 
0c8cc     C0 E5 05 F1 | 	add	objptr, ##41920
0c8d0     F2 14 02 FB | 	rdlong	arg02, objptr
0c8d4     51 00 00 FF 
0c8d8     C0 E5 85 F1 | 	sub	objptr, ##41920
0c8dc     A0 7A B1 FD | 	call	#__system___float_mul
0c8e0     A7 FA 61 FC | 	wrlong	result1, fp
0c8e4     08 4E 05 F1 | 	add	fp, #8
0c8e8     A7 3C 68 FC | 	wrlong	#30, fp
0c8ec     08 4E 85 F1 | 	sub	fp, #8
0c8f0     A7 12 02 F6 | 	mov	arg01, fp
0c8f4     B8 EF BF FD | 	call	#_push
0c8f8                 | LR__1111
0c8f8     A7 F0 03 F6 | 	mov	ptra, fp
0c8fc     B2 00 A0 FD | 	call	#popregs_
0c900                 | _do_atn_ret
0c900     2D 00 64 FD | 	ret
0c904                 | 
0c904                 | ' 
0c904                 | ' '-------------------- beep
0c904                 | ' 
0c904                 | ' sub do_beep
0c904                 | _do_beep
0c904     02 4A 05 F6 | 	mov	COUNT_, #2
0c908     A8 00 A0 FD | 	call	#pushregs_
0c90c     20 F0 07 F1 | 	add	ptra, #32
0c910     04 EF BF FD | 	call	#_pop
0c914     FD 1E 02 F6 | 	mov	local01, result1
0c918     FE 1C 02 F6 | 	mov	arg06, result2
0c91c     FF 20 02 F6 | 	mov	local02, result3
0c920     0C 4E 05 F1 | 	add	fp, #12
0c924     A7 1E 62 FC | 	wrlong	local01, fp
0c928     04 4E 05 F1 | 	add	fp, #4
0c92c     A7 1C 62 FC | 	wrlong	arg06, fp
0c930     04 4E 05 F1 | 	add	fp, #4
0c934     A7 20 62 FC | 	wrlong	local02, fp
0c938     14 4E 85 F1 | 	sub	fp, #20
0c93c     D8 EE BF FD | 	call	#_pop
0c940     A7 FA 61 FC | 	wrlong	result1, fp
0c944     04 4E 05 F1 | 	add	fp, #4
0c948     A7 FC 61 FC | 	wrlong	result2, fp
0c94c     04 4E 05 F1 | 	add	fp, #4
0c950     A7 FE 61 FC | 	wrlong	result3, fp
0c954                 | ' 
0c954                 | ' t2=pop()
0c954                 | ' t1=pop()
0c954                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c954     08 4E 85 F1 | 	sub	fp, #8
0c958     1C FE 0D F2 | 	cmp	result3, #28 wz
0c95c     08 4E 05 51 |  if_ne	add	fp, #8
0c960     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c964     08 4E 85 51 |  if_ne	sub	fp, #8
0c968     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0c96c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c970     18 4E 05 A1 |  if_e	add	fp, #24
0c974     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c978     18 4E 85 A1 |  if_e	sub	fp, #24
0c97c     14 00 90 AD |  if_e	jmp	#LR__1120
0c980     A7 12 02 F6 | 	mov	arg01, fp
0c984     74 F0 BF FD | 	call	#_converttoint
0c988     18 4E 05 F1 | 	add	fp, #24
0c98c     A7 FA 61 FC | 	wrlong	result1, fp
0c990     18 4E 85 F1 | 	sub	fp, #24
0c994                 | LR__1120
0c994     1C 4E 05 F1 | 	add	fp, #28
0c998     A7 FE 48 FC | 	wrbyte	#127, fp
0c99c     01 4E 05 F1 | 	add	fp, #1
0c9a0     A7 00 49 FC | 	wrbyte	#128, fp
0c9a4     01 4E 85 F1 | 	sub	fp, #1
0c9a8     A7 14 02 F6 | 	mov	arg02, fp
0c9ac     04 4E 85 F1 | 	sub	fp, #4
0c9b0     A7 16 02 FB | 	rdlong	arg03, fp
0c9b4     18 4E 85 F1 | 	sub	fp, #24
0c9b8     01 16 66 F0 | 	shl	arg03, #1
0c9bc     07 12 06 F6 | 	mov	arg01, #7
0c9c0     0E 18 C6 F9 | 	decod	arg04, #14
0c9c4     02 1A 06 F6 | 	mov	arg05, #2
0c9c8     00 1C 06 F6 | 	mov	arg06, #0
0c9cc     0B 00 00 FF 
0c9d0     CC E4 05 F1 | 	add	objptr, ##5836
0c9d4     48 48 B1 FD | 	call	#_audio096_spin2_play8
0c9d8     0B 00 00 FF 
0c9dc     CC E4 85 F1 | 	sub	objptr, ##5836
0c9e0     0C 4E 05 F1 | 	add	fp, #12
0c9e4     A7 12 02 F6 | 	mov	arg01, fp
0c9e8     0C 4E 85 F1 | 	sub	fp, #12
0c9ec     C0 EE BF FD | 	call	#_push
0c9f0     B0 AE B0 FD | 	call	#_do_waitms
0c9f4     07 12 06 F6 | 	mov	arg01, #7
0c9f8     0B 00 00 FF 
0c9fc     CC E4 05 F1 | 	add	objptr, ##5836
0ca00     C0 48 B1 FD | 	call	#_audio096_spin2_stop
0ca04     0B 00 00 FF 
0ca08     CC E4 85 F1 | 	sub	objptr, ##5836
0ca0c     A7 F0 03 F6 | 	mov	ptra, fp
0ca10     B2 00 A0 FD | 	call	#popregs_
0ca14                 | _do_beep_ret
0ca14     2D 00 64 FD | 	ret
0ca18                 | 
0ca18                 | ' 
0ca18                 | ' '-------------------- bin$
0ca18                 | ' 
0ca18                 | ' sub do_bin
0ca18                 | _do_bin
0ca18     01 4A 05 F6 | 	mov	COUNT_, #1
0ca1c     A8 00 A0 FD | 	call	#pushregs_
0ca20     18 F0 07 F1 | 	add	ptra, #24
0ca24     4A 00 00 FF 
0ca28     80 E4 05 F1 | 	add	objptr, ##38016
0ca2c     F2 1E 02 FB | 	rdlong	local01, objptr
0ca30     0F 17 02 F6 | 	mov	arg03, local01
0ca34     01 16 66 F0 | 	shl	arg03, #1
0ca38     0F 17 02 F1 | 	add	arg03, local01
0ca3c     02 16 66 F0 | 	shl	arg03, #2
0ca40     03 00 00 FF 
0ca44     04 E4 85 F1 | 	sub	objptr, ##1540
0ca48     F2 16 02 F1 | 	add	arg03, objptr
0ca4c     0B 17 02 FB | 	rdlong	arg03, arg03
0ca50     0C 4E 05 F1 | 	add	fp, #12
0ca54     A7 16 62 FC | 	wrlong	arg03, fp
0ca58                 | ' 
0ca58                 | ' numpar=compiledline(lineptr_e).result.uresult
0ca58                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0ca58     0C 4E 85 F1 | 	sub	fp, #12
0ca5c     03 16 16 F2 | 	cmp	arg03, #3 wc
0ca60     47 00 00 FF 
0ca64     7C E4 85 F1 | 	sub	objptr, ##36476
0ca68     0C 4E 05 C1 |  if_b	add	fp, #12
0ca6c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0ca70     0C 4E 85 C1 |  if_b	sub	fp, #12
0ca74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0ca78     00 12 06 F6 | 	mov	arg01, #0
0ca7c     70 A8 B1 FD | 	call	#__system___getiolock_0570
0ca80     FD 12 02 F6 | 	mov	arg01, result1
0ca84     3C 4B B1 FD | 	call	#__system___lockmem
0ca88     8B 01 00 FF 
0ca8c     EA 15 06 F6 | 	mov	arg02, ##@LR__5513
0ca90     00 12 06 F6 | 	mov	arg01, #0
0ca94     00 16 06 F6 | 	mov	arg03, #0
0ca98     1C 58 B1 FD | 	call	#__system___basic_print_string
0ca9c     00 12 06 F6 | 	mov	arg01, #0
0caa0     4C A8 B1 FD | 	call	#__system___getiolock_0570
0caa4     FD 00 68 FC | 	wrlong	#0, result1
0caa8     27 12 06 F6 | 	mov	arg01, #39
0caac     00 14 06 F6 | 	mov	arg02, #0
0cab0     50 15 B1 FD | 	call	#_printerror
0cab4     B8 00 90 FD | 	jmp	#LR__1133
0cab8                 | LR__1130
0cab8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0cab8     0C 4E 05 F1 | 	add	fp, #12
0cabc     A7 1E 02 FB | 	rdlong	local01, fp
0cac0     0C 4E 85 F1 | 	sub	fp, #12
0cac4     02 1E 0E F2 | 	cmp	local01, #2 wz
0cac8     38 00 90 5D |  if_ne	jmp	#LR__1131
0cacc     48 ED BF FD | 	call	#_pop
0cad0     FF 1E 02 F6 | 	mov	local01, result3
0cad4     A7 FA 61 FC | 	wrlong	result1, fp
0cad8     04 4E 05 F1 | 	add	fp, #4
0cadc     A7 FC 61 FC | 	wrlong	result2, fp
0cae0     04 4E 05 F1 | 	add	fp, #4
0cae4     A7 1E 62 FC | 	wrlong	local01, fp
0cae8     08 4E 85 F1 | 	sub	fp, #8
0caec     A7 12 02 F6 | 	mov	arg01, fp
0caf0     08 EF BF FD | 	call	#_converttoint
0caf4     14 4E 05 F1 | 	add	fp, #20
0caf8     A7 FA 61 FC | 	wrlong	result1, fp
0cafc     14 4E 85 F1 | 	sub	fp, #20
0cb00     0C 00 90 FD | 	jmp	#LR__1132
0cb04                 | LR__1131
0cb04     14 4E 05 F1 | 	add	fp, #20
0cb08     A7 00 68 FC | 	wrlong	#0, fp
0cb0c     14 4E 85 F1 | 	sub	fp, #20
0cb10                 | LR__1132
0cb10     04 ED BF FD | 	call	#_pop
0cb14     FF 1E 02 F6 | 	mov	local01, result3
0cb18     A7 FA 61 FC | 	wrlong	result1, fp
0cb1c     04 4E 05 F1 | 	add	fp, #4
0cb20     A7 FC 61 FC | 	wrlong	result2, fp
0cb24     04 4E 05 F1 | 	add	fp, #4
0cb28     A7 1E 62 FC | 	wrlong	local01, fp
0cb2c     08 4E 85 F1 | 	sub	fp, #8
0cb30     A7 12 02 F6 | 	mov	arg01, fp
0cb34     C4 EE BF FD | 	call	#_converttoint
0cb38     10 4E 05 F1 | 	add	fp, #16
0cb3c     A7 FA 61 FC | 	wrlong	result1, fp
0cb40     FD 12 02 F6 | 	mov	arg01, result1
0cb44     04 4E 05 F1 | 	add	fp, #4
0cb48     A7 14 02 FB | 	rdlong	arg02, fp
0cb4c     14 4E 85 F1 | 	sub	fp, #20
0cb50     02 16 06 F6 | 	mov	arg03, #2
0cb54     3C 6D B1 FD | 	call	#__system__Number_S
0cb58     A7 FA 61 FC | 	wrlong	result1, fp
0cb5c     08 4E 05 F1 | 	add	fp, #8
0cb60     A7 3E 68 FC | 	wrlong	#31, fp
0cb64     08 4E 85 F1 | 	sub	fp, #8
0cb68     A7 12 02 F6 | 	mov	arg01, fp
0cb6c     40 ED BF FD | 	call	#_push
0cb70                 | LR__1133
0cb70     A7 F0 03 F6 | 	mov	ptra, fp
0cb74     B2 00 A0 FD | 	call	#popregs_
0cb78                 | _do_bin_ret
0cb78     2D 00 64 FD | 	ret
0cb7c                 | 
0cb7c                 | ' 
0cb7c                 | ' '-------------------- box
0cb7c                 | ' 
0cb7c                 | ' sub do_box
0cb7c                 | _do_box
0cb7c     03 4A 05 F6 | 	mov	COUNT_, #3
0cb80     A8 00 A0 FD | 	call	#pushregs_
0cb84     30 F0 07 F1 | 	add	ptra, #48
0cb88     8C EC BF FD | 	call	#_pop
0cb8c     FD 1A 02 F6 | 	mov	arg05, result1
0cb90     FE 18 02 F6 | 	mov	arg04, result2
0cb94     FF 16 02 F6 | 	mov	arg03, result3
0cb98     24 4E 05 F1 | 	add	fp, #36
0cb9c     A7 1A 62 FC | 	wrlong	arg05, fp
0cba0     04 4E 05 F1 | 	add	fp, #4
0cba4     A7 18 62 FC | 	wrlong	arg04, fp
0cba8     04 4E 05 F1 | 	add	fp, #4
0cbac     A7 16 62 FC | 	wrlong	arg03, fp
0cbb0     2C 4E 85 F1 | 	sub	fp, #44
0cbb4     60 EC BF FD | 	call	#_pop
0cbb8     FD 1A 02 F6 | 	mov	arg05, result1
0cbbc     FE 18 02 F6 | 	mov	arg04, result2
0cbc0     FF 16 02 F6 | 	mov	arg03, result3
0cbc4     18 4E 05 F1 | 	add	fp, #24
0cbc8     A7 1A 62 FC | 	wrlong	arg05, fp
0cbcc     04 4E 05 F1 | 	add	fp, #4
0cbd0     A7 18 62 FC | 	wrlong	arg04, fp
0cbd4     04 4E 05 F1 | 	add	fp, #4
0cbd8     A7 16 62 FC | 	wrlong	arg03, fp
0cbdc     20 4E 85 F1 | 	sub	fp, #32
0cbe0     34 EC BF FD | 	call	#_pop
0cbe4     FD 1A 02 F6 | 	mov	arg05, result1
0cbe8     FE 18 02 F6 | 	mov	arg04, result2
0cbec     FF 1E 02 F6 | 	mov	local01, result3
0cbf0     0C 4E 05 F1 | 	add	fp, #12
0cbf4     A7 1A 62 FC | 	wrlong	arg05, fp
0cbf8     04 4E 05 F1 | 	add	fp, #4
0cbfc     A7 18 62 FC | 	wrlong	arg04, fp
0cc00     04 4E 05 F1 | 	add	fp, #4
0cc04     A7 1E 62 FC | 	wrlong	local01, fp
0cc08     14 4E 85 F1 | 	sub	fp, #20
0cc0c     08 EC BF FD | 	call	#_pop
0cc10     A7 FA 61 FC | 	wrlong	result1, fp
0cc14     04 4E 05 F1 | 	add	fp, #4
0cc18     A7 FC 61 FC | 	wrlong	result2, fp
0cc1c     04 4E 05 F1 | 	add	fp, #4
0cc20     A7 FE 61 FC | 	wrlong	result3, fp
0cc24                 | ' 
0cc24                 | ' t4=pop()
0cc24                 | ' t3=pop()
0cc24                 | ' t2=pop()
0cc24                 | ' t1=pop()
0cc24                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0cc24     FF 1A 02 F6 | 	mov	arg05, result3
0cc28     08 4E 85 F1 | 	sub	fp, #8
0cc2c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0cc30     08 4E 05 51 |  if_ne	add	fp, #8
0cc34     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cc38     08 4E 85 51 |  if_ne	sub	fp, #8
0cc3c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0cc40     A8 00 90 5D |  if_ne	jmp	#LR__1140
0cc44     14 4E 05 F1 | 	add	fp, #20
0cc48     A7 1E 02 FB | 	rdlong	local01, fp
0cc4c     14 4E 85 F1 | 	sub	fp, #20
0cc50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc54     14 4E 05 51 |  if_ne	add	fp, #20
0cc58     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cc5c     14 4E 85 51 |  if_ne	sub	fp, #20
0cc60     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cc64     84 00 90 5D |  if_ne	jmp	#LR__1140
0cc68     20 4E 05 F1 | 	add	fp, #32
0cc6c     A7 1E 02 FB | 	rdlong	local01, fp
0cc70     20 4E 85 F1 | 	sub	fp, #32
0cc74     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc78     20 4E 05 51 |  if_ne	add	fp, #32
0cc7c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cc80     20 4E 85 51 |  if_ne	sub	fp, #32
0cc84     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cc88     60 00 90 5D |  if_ne	jmp	#LR__1140
0cc8c     2C 4E 05 F1 | 	add	fp, #44
0cc90     A7 1E 02 FB | 	rdlong	local01, fp
0cc94     2C 4E 85 F1 | 	sub	fp, #44
0cc98     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc9c     2C 4E 05 51 |  if_ne	add	fp, #44
0cca0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cca4     2C 4E 85 51 |  if_ne	sub	fp, #44
0cca8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0ccac     3C 00 90 5D |  if_ne	jmp	#LR__1140
0ccb0     A7 12 02 FB | 	rdlong	arg01, fp
0ccb4     0C 4E 05 F1 | 	add	fp, #12
0ccb8     A7 14 02 FB | 	rdlong	arg02, fp
0ccbc     0C 4E 05 F1 | 	add	fp, #12
0ccc0     A7 16 02 FB | 	rdlong	arg03, fp
0ccc4     0C 4E 05 F1 | 	add	fp, #12
0ccc8     A7 18 02 FB | 	rdlong	arg04, fp
0cccc     24 4E 85 F1 | 	sub	fp, #36
0ccd0     37 00 00 FF 
0ccd4     28 E4 05 F1 | 	add	objptr, ##28200
0ccd8     F2 1A 02 FB | 	rdlong	arg05, objptr
0ccdc     37 00 00 FF 
0cce0     28 E4 85 F1 | 	sub	objptr, ##28200
0cce4     38 2D B1 FD | 	call	#_hg010b_spin2_box
0cce8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0cce8     6C 00 90 FD | 	jmp	#LR__1141
0ccec                 | LR__1140
0ccec     A7 12 02 F6 | 	mov	arg01, fp
0ccf0     08 ED BF FD | 	call	#_converttoint
0ccf4     FD 20 02 F6 | 	mov	local02, result1
0ccf8     0C 4E 05 F1 | 	add	fp, #12
0ccfc     A7 12 02 F6 | 	mov	arg01, fp
0cd00     0C 4E 85 F1 | 	sub	fp, #12
0cd04     F4 EC BF FD | 	call	#_converttoint
0cd08     FD 22 02 F6 | 	mov	local03, result1
0cd0c     18 4E 05 F1 | 	add	fp, #24
0cd10     A7 12 02 F6 | 	mov	arg01, fp
0cd14     18 4E 85 F1 | 	sub	fp, #24
0cd18     E0 EC BF FD | 	call	#_converttoint
0cd1c     FD 1E 02 F6 | 	mov	local01, result1
0cd20     24 4E 05 F1 | 	add	fp, #36
0cd24     A7 12 02 F6 | 	mov	arg01, fp
0cd28     24 4E 85 F1 | 	sub	fp, #36
0cd2c     CC EC BF FD | 	call	#_converttoint
0cd30     FD 18 02 F6 | 	mov	arg04, result1
0cd34     37 00 00 FF 
0cd38     28 E4 05 F1 | 	add	objptr, ##28200
0cd3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0cd40     37 00 00 FF 
0cd44     28 E4 85 F1 | 	sub	objptr, ##28200
0cd48     10 13 02 F6 | 	mov	arg01, local02
0cd4c     11 15 02 F6 | 	mov	arg02, local03
0cd50     0F 17 02 F6 | 	mov	arg03, local01
0cd54     C8 2C B1 FD | 	call	#_hg010b_spin2_box
0cd58                 | LR__1141
0cd58     A7 F0 03 F6 | 	mov	ptra, fp
0cd5c     B2 00 A0 FD | 	call	#popregs_
0cd60                 | _do_box_ret
0cd60     2D 00 64 FD | 	ret
0cd64                 | 
0cd64                 | ' 
0cd64                 | ' '-------------------- brun
0cd64                 | ' 
0cd64                 | ' sub do_brun
0cd64                 | _do_brun
0cd64     08 4A 05 F6 | 	mov	COUNT_, #8
0cd68     A8 00 A0 FD | 	call	#pushregs_
0cd6c     A8 EA BF FD | 	call	#_pop
0cd70     FE 1A 02 F6 | 	mov	arg05, result2
0cd74     FF 18 02 F6 | 	mov	arg04, result3
0cd78     FD 1E 02 F6 | 	mov	local01, result1
0cd7c     0D 21 02 F6 | 	mov	local02, arg05
0cd80     0C 23 02 F6 | 	mov	local03, arg04
0cd84                 | ' 
0cd84                 | ' t1=pop() 
0cd84                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0cd84     2B 22 0E F2 | 	cmp	local03, #43 wz
0cd88     10 00 90 5D |  if_ne	jmp	#LR__1150
0cd8c     0F 13 02 F6 | 	mov	arg01, local01
0cd90     FC EB BF FD | 	call	#_convertstring
0cd94     FD 1E 02 F6 | 	mov	local01, result1
0cd98     1F 22 06 F6 | 	mov	local03, #31
0cd9c                 | LR__1150
0cd9c                 | ' if t1.result_type=result_string then
0cd9c     1F 22 0E F2 | 	cmp	local03, #31 wz
0cda0     EC 01 90 5D |  if_ne	jmp	#LR__1154
0cda4     0F 25 02 F6 | 	mov	local04, local01
0cda8                 | '   filename=t1.result.sresult
0cda8                 | '   if left$(filename,1)="/" then 
0cda8     12 13 02 F6 | 	mov	arg01, local04
0cdac     01 14 06 F6 | 	mov	arg02, #1
0cdb0     8C 68 B1 FD | 	call	#__system__Left_S
0cdb4     FD 12 02 F6 | 	mov	arg01, result1
0cdb8     8B 01 00 FF 
0cdbc     F1 15 06 F6 | 	mov	arg02, ##@LR__5514
0cdc0     28 48 B1 FD | 	call	#__system___string_cmp
0cdc4     00 FA 0D F2 | 	cmp	result1, #0 wz
0cdc8     12 27 02 A6 |  if_e	mov	local05, local04
0cdcc     14 00 90 AD |  if_e	jmp	#LR__1151
0cdd0     8B 01 00 FF 
0cdd4     F3 13 06 F6 | 	mov	arg01, ##@LR__5515
0cdd8     12 15 02 F6 | 	mov	arg02, local04
0cddc     40 48 B1 FD | 	call	#__system___string_concat
0cde0     FD 26 02 F6 | 	mov	local05, result1
0cde4                 | LR__1151
0cde4                 | '   open fullfilename for input as #9
0cde4     09 12 06 F6 | 	mov	arg01, #9
0cde8     13 15 02 F6 | 	mov	arg02, local05
0cdec     00 16 06 F6 | 	mov	arg03, #0
0cdf0     D4 53 B1 FD | 	call	#__system___basic_open_string
0cdf4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cdf8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0cdfc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ce00     FD 28 0A F6 | 	mov	local06, result1 wz
0ce04                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0ce04     8C 00 90 AD |  if_e	jmp	#LR__1152
0ce08     00 12 06 F6 | 	mov	arg01, #0
0ce0c     E0 A4 B1 FD | 	call	#__system___getiolock_0570
0ce10     FD 12 02 F6 | 	mov	arg01, result1
0ce14     AC 47 B1 FD | 	call	#__system___lockmem
0ce18     8B 01 00 FF 
0ce1c     FC 15 06 F6 | 	mov	arg02, ##@LR__5516
0ce20     00 12 06 F6 | 	mov	arg01, #0
0ce24     00 16 06 F6 | 	mov	arg03, #0
0ce28     8C 54 B1 FD | 	call	#__system___basic_print_string
0ce2c     00 12 06 F6 | 	mov	arg01, #0
0ce30     14 15 02 F6 | 	mov	arg02, local06
0ce34     00 16 06 F6 | 	mov	arg03, #0
0ce38     0A 18 06 F6 | 	mov	arg04, #10
0ce3c     BC 54 B1 FD | 	call	#__system___basic_print_integer
0ce40     8C 01 00 FF 
0ce44     0A 14 06 F6 | 	mov	arg02, ##@LR__5517
0ce48     00 12 06 F6 | 	mov	arg01, #0
0ce4c     00 16 06 F6 | 	mov	arg03, #0
0ce50     64 54 B1 FD | 	call	#__system___basic_print_string
0ce54     14 13 02 F6 | 	mov	arg01, local06
0ce58     38 70 B1 FD | 	call	#__system___strerror
0ce5c     FD 14 02 F6 | 	mov	arg02, result1
0ce60     00 12 06 F6 | 	mov	arg01, #0
0ce64     00 16 06 F6 | 	mov	arg03, #0
0ce68     4C 54 B1 FD | 	call	#__system___basic_print_string
0ce6c     00 12 06 F6 | 	mov	arg01, #0
0ce70     0A 14 06 F6 | 	mov	arg02, #10
0ce74     00 16 06 F6 | 	mov	arg03, #0
0ce78     E4 53 B1 FD | 	call	#__system___basic_print_char
0ce7c     00 12 06 F6 | 	mov	arg01, #0
0ce80     6C A4 B1 FD | 	call	#__system___getiolock_0570
0ce84     FD 00 68 FC | 	wrlong	#0, result1
0ce88     09 12 06 F6 | 	mov	arg01, #9
0ce8c     D0 99 B1 FD | 	call	#__system__close
0ce90     FC 00 90 FD | 	jmp	#LR__1155
0ce94                 | LR__1152
0ce94     01 2A 06 F6 | 	mov	local07, #1
0ce98     00 2C 06 F6 | 	mov	local08, #0
0ce9c                 | '   do
0ce9c                 | LR__1153
0ce9c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0ce9c     4E 00 00 FF 
0cea0     B4 E4 05 F1 | 	add	objptr, ##40116
0cea4     F2 16 02 F6 | 	mov	arg03, objptr
0cea8     4E 00 00 FF 
0ceac     B4 E4 85 F1 | 	sub	objptr, ##40116
0ceb0     09 12 06 F6 | 	mov	arg01, #9
0ceb4     15 15 02 F6 | 	mov	arg02, local07
0ceb8     0A 18 C6 F9 | 	decod	arg04, #10
0cebc     01 1A 06 F6 | 	mov	arg05, #1
0cec0     70 55 B1 FD | 	call	#__system___basic_get
0cec4     FD 28 02 F6 | 	mov	local06, result1
0cec8     FD 2A 02 F1 | 	add	local07, result1
0cecc     4E 00 00 FF 
0ced0     B4 E4 05 F1 | 	add	objptr, ##40116
0ced4     F2 12 02 F6 | 	mov	arg01, objptr
0ced8     16 15 02 F6 | 	mov	arg02, local08
0cedc     0A 16 C6 F9 | 	decod	arg03, #10
0cee0     42 00 00 FF 
0cee4     E8 E5 85 F1 | 	sub	objptr, ##34280
0cee8     34 3B B1 FD | 	call	#_psram_spin2_write
0ceec     0B 00 00 FF 
0cef0     CC E4 85 F1 | 	sub	objptr, ##5836
0cef4     14 2D 02 F1 | 	add	local08, local06
0cef8     02 00 00 FF 
0cefc     00 28 0E F2 | 	cmp	local06, ##1024 wz
0cf00     E0 03 00 AF 
0cf04     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0cf08     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1153
0cf0c     36 00 00 FF 
0cf10     FC E5 05 F1 | 	add	objptr, ##28156
0cf14     F2 12 02 FB | 	rdlong	arg01, objptr
0cf18     03 12 62 FD | 	cogstop	arg01
0cf1c     04 E4 05 F1 | 	add	objptr, #4
0cf20     F2 12 02 FB | 	rdlong	arg01, objptr
0cf24     03 12 62 FD | 	cogstop	arg01
0cf28     04 E4 05 F1 | 	add	objptr, #4
0cf2c     F2 12 02 FB | 	rdlong	arg01, objptr
0cf30     03 12 62 FD | 	cogstop	arg01
0cf34     19 00 00 FF 
0cf38     14 E5 05 F1 | 	add	objptr, ##13076
0cf3c     F2 12 02 FB | 	rdlong	arg01, objptr
0cf40     03 12 62 FD | 	cogstop	arg01
0cf44     18 00 00 FF 
0cf48     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0cf4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0cf50     18 00 00 FF 
0cf54     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0cf58     19 00 00 FF 
0cf5c     0C E5 85 F1 | 	sub	objptr, ##13068
0cf60     1E 2C 06 F6 | 	mov	local08, #30
0cf64     28 E4 61 FD | 	setq	objptr
0cf68     0A 2D F2 FC | 	coginit	local08, arg02 wc
0cf6c     01 2C 66 C6 |  if_b	neg	local08, #1
0cf70     1B 00 00 FF 
0cf74     18 E4 05 F1 | 	add	objptr, ##13848
0cf78     F2 2C 62 FC | 	wrlong	local08, objptr
0cf7c     52 00 00 FF 
0cf80     24 E4 85 F1 | 	sub	objptr, ##42020
0cf84     00 12 06 F6 | 	mov	arg01, #0
0cf88     01 12 62 FD | 	cogid	arg01
0cf8c     03 12 62 FD | 	cogstop	arg01
0cf90                 | LR__1154
0cf90                 | LR__1155
0cf90     A7 F0 03 F6 | 	mov	ptra, fp
0cf94     B2 00 A0 FD | 	call	#popregs_
0cf98                 | _do_brun_ret
0cf98     2D 00 64 FD | 	ret
0cf9c                 | 
0cf9c                 | ' 
0cf9c                 | ' '-------------------- cd
0cf9c                 | ' 
0cf9c                 | ' sub do_cd
0cf9c                 | _do_cd
0cf9c     06 4A 05 F6 | 	mov	COUNT_, #6
0cfa0     A8 00 A0 FD | 	call	#pushregs_
0cfa4     8C 01 00 FF 
0cfa8     0D 12 06 F6 | 	mov	arg01, ##@LR__5518
0cfac     31 14 06 F6 | 	mov	arg02, #49
0cfb0     74 A4 B1 FD | 	call	#__system___basic_dir
0cfb4     60 E8 BF FD | 	call	#_pop
0cfb8     FE 18 02 F6 | 	mov	arg04, result2
0cfbc     FF 16 02 F6 | 	mov	arg03, result3
0cfc0     FD 1E 02 F6 | 	mov	local01, result1
0cfc4     0C 21 02 F6 | 	mov	local02, arg04
0cfc8     0B 23 02 F6 | 	mov	local03, arg03
0cfcc                 | ' t1=pop()
0cfcc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0cfcc     2B 22 0E F2 | 	cmp	local03, #43 wz
0cfd0     10 00 90 5D |  if_ne	jmp	#LR__1160
0cfd4     0F 13 02 F6 | 	mov	arg01, local01
0cfd8     B4 E9 BF FD | 	call	#_convertstring
0cfdc     FD 1E 02 F6 | 	mov	local01, result1
0cfe0     1F 22 06 F6 | 	mov	local03, #31
0cfe4                 | LR__1160
0cfe4                 | ' if t1.result_type<>result_string then printerror(15): return
0cfe4     1F 22 0E F2 | 	cmp	local03, #31 wz
0cfe8     10 00 90 AD |  if_e	jmp	#LR__1161
0cfec     0F 12 06 F6 | 	mov	arg01, #15
0cff0     00 14 06 F6 | 	mov	arg02, #0
0cff4     0C 10 B1 FD | 	call	#_printerror
0cff8     48 05 90 FD | 	jmp	#LR__1179
0cffc                 | LR__1161
0cffc     0F 25 02 F6 | 	mov	local04, local01
0d000                 | ' newdir$=t1.result.sresult
0d000                 | ' if newdir$=".." then 
0d000     8C 01 00 FF 
0d004     0F 14 06 F6 | 	mov	arg02, ##@LR__5519
0d008     12 13 02 F6 | 	mov	arg01, local04
0d00c     DC 45 B1 FD | 	call	#__system___string_cmp
0d010     00 FA 0D F2 | 	cmp	result1, #0 wz
0d014     C4 01 90 5D |  if_ne	jmp	#LR__1168
0d018     4A 00 00 FF 
0d01c     94 E4 05 F1 | 	add	objptr, ##38036
0d020     F2 12 02 FB | 	rdlong	arg01, objptr
0d024     4A 00 00 FF 
0d028     94 E4 85 F1 | 	sub	objptr, ##38036
0d02c     09 27 02 F6 | 	mov	local05, arg01
0d030     97 06 48 FB | 	callpa	#(@LR__1163-@LR__1162)>>2,fcache_load_ptr_
0d034                 | LR__1162
0d034     13 FB C9 FA | 	rdbyte	result1, local05 wz
0d038     01 26 06 51 |  if_ne	add	local05, #1
0d03c     F4 FF 9F 5D |  if_ne	jmp	#LR__1162
0d040                 | LR__1163
0d040     13 13 C2 F2 | 	subr	arg01, local05
0d044     4A 00 00 FF 
0d048     94 E4 05 F1 | 	add	objptr, ##38036
0d04c     F2 14 02 FB | 	rdlong	arg02, objptr
0d050     4A 00 00 FF 
0d054     94 E4 85 F1 | 	sub	objptr, ##38036
0d058     8C 01 00 FF 
0d05c     12 16 06 F6 | 	mov	arg03, ##@LR__5520
0d060     28 6C B1 FD | 	call	#__system__InstrRev
0d064     FD 24 02 F6 | 	mov	local04, result1
0d068                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0d068     02 24 56 F2 | 	cmps	local04, #2 wc
0d06c     28 00 90 CD |  if_b	jmp	#LR__1164
0d070     4A 00 00 FF 
0d074     94 E4 05 F1 | 	add	objptr, ##38036
0d078     F2 12 02 FB | 	rdlong	arg01, objptr
0d07c     4A 00 00 FF 
0d080     94 E4 85 F1 | 	sub	objptr, ##38036
0d084     01 24 86 F1 | 	sub	local04, #1
0d088     12 15 02 F6 | 	mov	arg02, local04
0d08c     B0 65 B1 FD | 	call	#__system__Left_S
0d090     FD 24 02 F6 | 	mov	local04, result1
0d094     08 00 90 FD | 	jmp	#LR__1165
0d098                 | LR__1164
0d098     8C 01 00 FF 
0d09c     14 24 06 F6 | 	mov	local04, ##@LR__5521
0d0a0                 | LR__1165
0d0a0     12 13 02 F6 | 	mov	arg01, local04
0d0a4     A8 4B B1 FD | 	call	#__system___chdir
0d0a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d0ac     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d0b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d0b4     FD 28 0A F6 | 	mov	local06, result1 wz
0d0b8                 | '   chdir newdir$
0d0b8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d0b8     05 28 0E 52 |  if_ne	cmp	local06, #5 wz
0d0bc     A4 00 90 AD |  if_e	jmp	#LR__1166
0d0c0     00 12 06 F6 | 	mov	arg01, #0
0d0c4     28 A2 B1 FD | 	call	#__system___getiolock_0570
0d0c8     FD 12 02 F6 | 	mov	arg01, result1
0d0cc     F4 44 B1 FD | 	call	#__system___lockmem
0d0d0     8C 01 00 FF 
0d0d4     16 14 06 F6 | 	mov	arg02, ##@LR__5522
0d0d8     00 12 06 F6 | 	mov	arg01, #0
0d0dc     00 16 06 F6 | 	mov	arg03, #0
0d0e0     D4 51 B1 FD | 	call	#__system___basic_print_string
0d0e4     00 12 06 F6 | 	mov	arg01, #0
0d0e8     14 15 02 F6 | 	mov	arg02, local06
0d0ec     00 16 06 F6 | 	mov	arg03, #0
0d0f0     0A 18 06 F6 | 	mov	arg04, #10
0d0f4     04 52 B1 FD | 	call	#__system___basic_print_integer
0d0f8     8C 01 00 FF 
0d0fc     24 14 06 F6 | 	mov	arg02, ##@LR__5523
0d100     00 12 06 F6 | 	mov	arg01, #0
0d104     00 16 06 F6 | 	mov	arg03, #0
0d108     AC 51 B1 FD | 	call	#__system___basic_print_string
0d10c     45 00 00 FF 
0d110     50 E5 05 F1 | 	add	objptr, ##35664
0d114     F2 14 02 FB | 	rdlong	arg02, objptr
0d118     45 00 00 FF 
0d11c     50 E5 85 F1 | 	sub	objptr, ##35664
0d120     00 12 06 F6 | 	mov	arg01, #0
0d124     00 16 06 F6 | 	mov	arg03, #0
0d128     8C 51 B1 FD | 	call	#__system___basic_print_string
0d12c     00 12 06 F6 | 	mov	arg01, #0
0d130     0A 14 06 F6 | 	mov	arg02, #10
0d134     00 16 06 F6 | 	mov	arg03, #0
0d138     24 51 B1 FD | 	call	#__system___basic_print_char
0d13c     00 12 06 F6 | 	mov	arg01, #0
0d140     AC A1 B1 FD | 	call	#__system___getiolock_0570
0d144     FD 00 68 FC | 	wrlong	#0, result1
0d148     4A 00 00 FF 
0d14c     94 E4 05 F1 | 	add	objptr, ##38036
0d150     F2 12 02 FB | 	rdlong	arg01, objptr
0d154     4A 00 00 FF 
0d158     94 E4 85 F1 | 	sub	objptr, ##38036
0d15c     F0 4A B1 FD | 	call	#__system___chdir
0d160     14 00 90 FD | 	jmp	#LR__1167
0d164                 | LR__1166
0d164     4A 00 00 FF 
0d168     94 E4 05 F1 | 	add	objptr, ##38036
0d16c     F2 24 62 FC | 	wrlong	local04, objptr
0d170     4A 00 00 FF 
0d174     94 E4 85 F1 | 	sub	objptr, ##38036
0d178                 | LR__1167
0d178                 | '   print "Current directory: ";currentdir$
0d178     00 12 06 F6 | 	mov	arg01, #0
0d17c     70 A1 B1 FD | 	call	#__system___getiolock_0570
0d180     FD 12 02 F6 | 	mov	arg01, result1
0d184     3C 44 B1 FD | 	call	#__system___lockmem
0d188     8C 01 00 FF 
0d18c     27 14 06 F6 | 	mov	arg02, ##@LR__5524
0d190     00 12 06 F6 | 	mov	arg01, #0
0d194     00 16 06 F6 | 	mov	arg03, #0
0d198     1C 51 B1 FD | 	call	#__system___basic_print_string
0d19c     4A 00 00 FF 
0d1a0     94 E4 05 F1 | 	add	objptr, ##38036
0d1a4     F2 14 02 FB | 	rdlong	arg02, objptr
0d1a8     4A 00 00 FF 
0d1ac     94 E4 85 F1 | 	sub	objptr, ##38036
0d1b0     00 12 06 F6 | 	mov	arg01, #0
0d1b4     00 16 06 F6 | 	mov	arg03, #0
0d1b8     FC 50 B1 FD | 	call	#__system___basic_print_string
0d1bc     00 12 06 F6 | 	mov	arg01, #0
0d1c0     0A 14 06 F6 | 	mov	arg02, #10
0d1c4     00 16 06 F6 | 	mov	arg03, #0
0d1c8     94 50 B1 FD | 	call	#__system___basic_print_char
0d1cc     00 12 06 F6 | 	mov	arg01, #0
0d1d0     1C A1 B1 FD | 	call	#__system___getiolock_0570
0d1d4     FD 00 68 FC | 	wrlong	#0, result1
0d1d8                 | '   return
0d1d8     68 03 90 FD | 	jmp	#LR__1179
0d1dc                 | LR__1168
0d1dc                 | ' if left$(newdir$,1)="/" then 
0d1dc     12 13 02 F6 | 	mov	arg01, local04
0d1e0     01 14 06 F6 | 	mov	arg02, #1
0d1e4     58 64 B1 FD | 	call	#__system__Left_S
0d1e8     FD 12 02 F6 | 	mov	arg01, result1
0d1ec     8C 01 00 FF 
0d1f0     3B 14 06 F6 | 	mov	arg02, ##@LR__5525
0d1f4     F4 43 B1 FD | 	call	#__system___string_cmp
0d1f8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d1fc     3C 01 90 5D |  if_ne	jmp	#LR__1171
0d200     12 13 02 F6 | 	mov	arg01, local04
0d204     48 4A B1 FD | 	call	#__system___chdir
0d208     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d20c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d210     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d214     FD 28 0A F6 | 	mov	local06, result1 wz
0d218                 | '   chdir(newdir$)
0d218                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d218     05 28 0E 52 |  if_ne	cmp	local06, #5 wz
0d21c     A4 00 90 AD |  if_e	jmp	#LR__1169
0d220     00 12 06 F6 | 	mov	arg01, #0
0d224     C8 A0 B1 FD | 	call	#__system___getiolock_0570
0d228     FD 12 02 F6 | 	mov	arg01, result1
0d22c     94 43 B1 FD | 	call	#__system___lockmem
0d230     8C 01 00 FF 
0d234     3D 14 06 F6 | 	mov	arg02, ##@LR__5526
0d238     00 12 06 F6 | 	mov	arg01, #0
0d23c     00 16 06 F6 | 	mov	arg03, #0
0d240     74 50 B1 FD | 	call	#__system___basic_print_string
0d244     00 12 06 F6 | 	mov	arg01, #0
0d248     14 15 02 F6 | 	mov	arg02, local06
0d24c     00 16 06 F6 | 	mov	arg03, #0
0d250     0A 18 06 F6 | 	mov	arg04, #10
0d254     A4 50 B1 FD | 	call	#__system___basic_print_integer
0d258     8C 01 00 FF 
0d25c     4B 14 06 F6 | 	mov	arg02, ##@LR__5527
0d260     00 12 06 F6 | 	mov	arg01, #0
0d264     00 16 06 F6 | 	mov	arg03, #0
0d268     4C 50 B1 FD | 	call	#__system___basic_print_string
0d26c     45 00 00 FF 
0d270     50 E5 05 F1 | 	add	objptr, ##35664
0d274     F2 14 02 FB | 	rdlong	arg02, objptr
0d278     45 00 00 FF 
0d27c     50 E5 85 F1 | 	sub	objptr, ##35664
0d280     00 12 06 F6 | 	mov	arg01, #0
0d284     00 16 06 F6 | 	mov	arg03, #0
0d288     2C 50 B1 FD | 	call	#__system___basic_print_string
0d28c     00 12 06 F6 | 	mov	arg01, #0
0d290     0A 14 06 F6 | 	mov	arg02, #10
0d294     00 16 06 F6 | 	mov	arg03, #0
0d298     C4 4F B1 FD | 	call	#__system___basic_print_char
0d29c     00 12 06 F6 | 	mov	arg01, #0
0d2a0     4C A0 B1 FD | 	call	#__system___getiolock_0570
0d2a4     FD 00 68 FC | 	wrlong	#0, result1
0d2a8     4A 00 00 FF 
0d2ac     94 E4 05 F1 | 	add	objptr, ##38036
0d2b0     F2 12 02 FB | 	rdlong	arg01, objptr
0d2b4     4A 00 00 FF 
0d2b8     94 E4 85 F1 | 	sub	objptr, ##38036
0d2bc     90 49 B1 FD | 	call	#__system___chdir
0d2c0     14 00 90 FD | 	jmp	#LR__1170
0d2c4                 | LR__1169
0d2c4     4A 00 00 FF 
0d2c8     94 E4 05 F1 | 	add	objptr, ##38036
0d2cc     F2 24 62 FC | 	wrlong	local04, objptr
0d2d0     4A 00 00 FF 
0d2d4     94 E4 85 F1 | 	sub	objptr, ##38036
0d2d8                 | LR__1170
0d2d8                 | '   print "Current directory: ";currentdir$
0d2d8     00 12 06 F6 | 	mov	arg01, #0
0d2dc     10 A0 B1 FD | 	call	#__system___getiolock_0570
0d2e0     FD 12 02 F6 | 	mov	arg01, result1
0d2e4     DC 42 B1 FD | 	call	#__system___lockmem
0d2e8     8C 01 00 FF 
0d2ec     4E 14 06 F6 | 	mov	arg02, ##@LR__5528
0d2f0     00 12 06 F6 | 	mov	arg01, #0
0d2f4     00 16 06 F6 | 	mov	arg03, #0
0d2f8     BC 4F B1 FD | 	call	#__system___basic_print_string
0d2fc     4A 00 00 FF 
0d300     94 E4 05 F1 | 	add	objptr, ##38036
0d304     F2 14 02 FB | 	rdlong	arg02, objptr
0d308     4A 00 00 FF 
0d30c     94 E4 85 F1 | 	sub	objptr, ##38036
0d310     00 12 06 F6 | 	mov	arg01, #0
0d314     00 16 06 F6 | 	mov	arg03, #0
0d318     9C 4F B1 FD | 	call	#__system___basic_print_string
0d31c     00 12 06 F6 | 	mov	arg01, #0
0d320     0A 14 06 F6 | 	mov	arg02, #10
0d324     00 16 06 F6 | 	mov	arg03, #0
0d328     34 4F B1 FD | 	call	#__system___basic_print_char
0d32c     00 12 06 F6 | 	mov	arg01, #0
0d330     BC 9F B1 FD | 	call	#__system___getiolock_0570
0d334     FD 00 68 FC | 	wrlong	#0, result1
0d338                 | '   return
0d338     08 02 90 FD | 	jmp	#LR__1179
0d33c                 | LR__1171
0d33c                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0d33c     4A 00 00 FF 
0d340     94 E4 05 F1 | 	add	objptr, ##38036
0d344     F2 12 02 FB | 	rdlong	arg01, objptr
0d348     4A 00 00 FF 
0d34c     94 E4 85 F1 | 	sub	objptr, ##38036
0d350     8C 01 00 FF 
0d354     62 14 06 F6 | 	mov	arg02, ##@LR__5529
0d358     90 42 B1 FD | 	call	#__system___string_cmp
0d35c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d360     34 00 90 AD |  if_e	jmp	#LR__1172
0d364     4A 00 00 FF 
0d368     94 E4 05 F1 | 	add	objptr, ##38036
0d36c     F2 12 02 FB | 	rdlong	arg01, objptr
0d370     4A 00 00 FF 
0d374     94 E4 85 F1 | 	sub	objptr, ##38036
0d378     8C 01 00 FF 
0d37c     64 14 06 F6 | 	mov	arg02, ##@LR__5530
0d380     9C 42 B1 FD | 	call	#__system___string_concat
0d384     FD 12 02 F6 | 	mov	arg01, result1
0d388     12 15 02 F6 | 	mov	arg02, local04
0d38c     90 42 B1 FD | 	call	#__system___string_concat
0d390     FD 24 02 F6 | 	mov	local04, result1
0d394     20 00 90 FD | 	jmp	#LR__1173
0d398                 | LR__1172
0d398     4A 00 00 FF 
0d39c     94 E4 05 F1 | 	add	objptr, ##38036
0d3a0     F2 12 02 FB | 	rdlong	arg01, objptr
0d3a4     4A 00 00 FF 
0d3a8     94 E4 85 F1 | 	sub	objptr, ##38036
0d3ac     12 15 02 F6 | 	mov	arg02, local04
0d3b0     6C 42 B1 FD | 	call	#__system___string_concat
0d3b4     FD 24 02 F6 | 	mov	local04, result1
0d3b8                 | LR__1173
0d3b8                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0d3b8     12 13 02 F6 | 	mov	arg01, local04
0d3bc     01 14 06 F6 | 	mov	arg02, #1
0d3c0     04 63 B1 FD | 	call	#__system__Right_S
0d3c4     FD 12 02 F6 | 	mov	arg01, result1
0d3c8     8C 01 00 FF 
0d3cc     66 14 06 F6 | 	mov	arg02, ##@LR__5531
0d3d0     18 42 B1 FD | 	call	#__system___string_cmp
0d3d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0d3d8     30 00 90 5D |  if_ne	jmp	#LR__1176
0d3dc     12 13 02 F6 | 	mov	arg01, local04
0d3e0     09 27 02 F6 | 	mov	local05, arg01
0d3e4     97 06 48 FB | 	callpa	#(@LR__1175-@LR__1174)>>2,fcache_load_ptr_
0d3e8                 | LR__1174
0d3e8     13 FB C9 FA | 	rdbyte	result1, local05 wz
0d3ec     01 26 06 51 |  if_ne	add	local05, #1
0d3f0     F4 FF 9F 5D |  if_ne	jmp	#LR__1174
0d3f4                 | LR__1175
0d3f4     09 27 82 F1 | 	sub	local05, arg01
0d3f8     13 15 02 F6 | 	mov	arg02, local05
0d3fc     01 14 86 F1 | 	sub	arg02, #1
0d400     12 13 02 F6 | 	mov	arg01, local04
0d404     38 62 B1 FD | 	call	#__system__Left_S
0d408     FD 24 02 F6 | 	mov	local04, result1
0d40c                 | LR__1176
0d40c     12 13 02 F6 | 	mov	arg01, local04
0d410     3C 48 B1 FD | 	call	#__system___chdir
0d414     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d418     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d41c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d420     FD 28 0A F6 | 	mov	local06, result1 wz
0d424                 | '   chdir(newdir$)
0d424                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d424     05 28 0E 52 |  if_ne	cmp	local06, #5 wz
0d428     A4 00 90 AD |  if_e	jmp	#LR__1177
0d42c     00 12 06 F6 | 	mov	arg01, #0
0d430     BC 9E B1 FD | 	call	#__system___getiolock_0570
0d434     FD 12 02 F6 | 	mov	arg01, result1
0d438     88 41 B1 FD | 	call	#__system___lockmem
0d43c     8C 01 00 FF 
0d440     68 14 06 F6 | 	mov	arg02, ##@LR__5532
0d444     00 12 06 F6 | 	mov	arg01, #0
0d448     00 16 06 F6 | 	mov	arg03, #0
0d44c     68 4E B1 FD | 	call	#__system___basic_print_string
0d450     00 12 06 F6 | 	mov	arg01, #0
0d454     14 15 02 F6 | 	mov	arg02, local06
0d458     00 16 06 F6 | 	mov	arg03, #0
0d45c     0A 18 06 F6 | 	mov	arg04, #10
0d460     98 4E B1 FD | 	call	#__system___basic_print_integer
0d464     8C 01 00 FF 
0d468     76 14 06 F6 | 	mov	arg02, ##@LR__5533
0d46c     00 12 06 F6 | 	mov	arg01, #0
0d470     00 16 06 F6 | 	mov	arg03, #0
0d474     40 4E B1 FD | 	call	#__system___basic_print_string
0d478     45 00 00 FF 
0d47c     50 E5 05 F1 | 	add	objptr, ##35664
0d480     F2 14 02 FB | 	rdlong	arg02, objptr
0d484     45 00 00 FF 
0d488     50 E5 85 F1 | 	sub	objptr, ##35664
0d48c     00 12 06 F6 | 	mov	arg01, #0
0d490     00 16 06 F6 | 	mov	arg03, #0
0d494     20 4E B1 FD | 	call	#__system___basic_print_string
0d498     00 12 06 F6 | 	mov	arg01, #0
0d49c     0A 14 06 F6 | 	mov	arg02, #10
0d4a0     00 16 06 F6 | 	mov	arg03, #0
0d4a4     B8 4D B1 FD | 	call	#__system___basic_print_char
0d4a8     00 12 06 F6 | 	mov	arg01, #0
0d4ac     40 9E B1 FD | 	call	#__system___getiolock_0570
0d4b0     FD 00 68 FC | 	wrlong	#0, result1
0d4b4     4A 00 00 FF 
0d4b8     94 E4 05 F1 | 	add	objptr, ##38036
0d4bc     F2 12 02 FB | 	rdlong	arg01, objptr
0d4c0     4A 00 00 FF 
0d4c4     94 E4 85 F1 | 	sub	objptr, ##38036
0d4c8     84 47 B1 FD | 	call	#__system___chdir
0d4cc     14 00 90 FD | 	jmp	#LR__1178
0d4d0                 | LR__1177
0d4d0     4A 00 00 FF 
0d4d4     94 E4 05 F1 | 	add	objptr, ##38036
0d4d8     F2 24 62 FC | 	wrlong	local04, objptr
0d4dc     4A 00 00 FF 
0d4e0     94 E4 85 F1 | 	sub	objptr, ##38036
0d4e4                 | LR__1178
0d4e4                 | '   print "Current directory: ";currentdir$
0d4e4     00 12 06 F6 | 	mov	arg01, #0
0d4e8     04 9E B1 FD | 	call	#__system___getiolock_0570
0d4ec     FD 12 02 F6 | 	mov	arg01, result1
0d4f0     D0 40 B1 FD | 	call	#__system___lockmem
0d4f4     8C 01 00 FF 
0d4f8     79 14 06 F6 | 	mov	arg02, ##@LR__5534
0d4fc     00 12 06 F6 | 	mov	arg01, #0
0d500     00 16 06 F6 | 	mov	arg03, #0
0d504     B0 4D B1 FD | 	call	#__system___basic_print_string
0d508     4A 00 00 FF 
0d50c     94 E4 05 F1 | 	add	objptr, ##38036
0d510     F2 14 02 FB | 	rdlong	arg02, objptr
0d514     4A 00 00 FF 
0d518     94 E4 85 F1 | 	sub	objptr, ##38036
0d51c     00 12 06 F6 | 	mov	arg01, #0
0d520     00 16 06 F6 | 	mov	arg03, #0
0d524     90 4D B1 FD | 	call	#__system___basic_print_string
0d528     00 12 06 F6 | 	mov	arg01, #0
0d52c     0A 14 06 F6 | 	mov	arg02, #10
0d530     00 16 06 F6 | 	mov	arg03, #0
0d534     28 4D B1 FD | 	call	#__system___basic_print_char
0d538     00 12 06 F6 | 	mov	arg01, #0
0d53c     B0 9D B1 FD | 	call	#__system___getiolock_0570
0d540     FD 00 68 FC | 	wrlong	#0, result1
0d544                 | LR__1179
0d544     A7 F0 03 F6 | 	mov	ptra, fp
0d548     B2 00 A0 FD | 	call	#popregs_
0d54c                 | _do_cd_ret
0d54c     2D 00 64 FD | 	ret
0d550                 | 
0d550                 | ' 
0d550                 | ' '-------------------- changefreq
0d550                 | ' 
0d550                 | ' sub do_changefreq
0d550                 | _do_changefreq
0d550     04 4A 05 F6 | 	mov	COUNT_, #4
0d554     A8 00 A0 FD | 	call	#pushregs_
0d558     28 F0 07 F1 | 	add	ptra, #40
0d55c     B8 E2 BF FD | 	call	#_pop
0d560     FF 14 02 F6 | 	mov	arg02, result3
0d564     A7 FA 61 FC | 	wrlong	result1, fp
0d568     04 4E 05 F1 | 	add	fp, #4
0d56c     A7 FC 61 FC | 	wrlong	result2, fp
0d570     04 4E 05 F1 | 	add	fp, #4
0d574     A7 14 62 FC | 	wrlong	arg02, fp
0d578     08 4E 85 F1 | 	sub	fp, #8
0d57c     A7 12 02 F6 | 	mov	arg01, fp
0d580     34 E5 BF FD | 	call	#_converttofloat
0d584     24 4E 05 F1 | 	add	fp, #36
0d588     A7 FA 61 FC | 	wrlong	result1, fp
0d58c     24 4E 85 F1 | 	sub	fp, #36
0d590     FD 14 02 F6 | 	mov	arg02, result1
0d594     FC 16 20 FF 
0d598     54 12 06 F6 | 	mov	arg01, ##1076754516
0d59c     B0 7D B1 FD | 	call	#__system____builtin_logbase
0d5a0     FD 1E 02 F6 | 	mov	local01, result1
0d5a4     1E 14 C6 F9 | 	decod	arg02, #30
0d5a8     FC 16 20 FF 
0d5ac     54 12 06 F6 | 	mov	arg01, ##1076754516
0d5b0     9C 7D B1 FD | 	call	#__system____builtin_logbase
0d5b4     FD 14 02 F6 | 	mov	arg02, result1
0d5b8     0F 13 02 F6 | 	mov	arg01, local01
0d5bc     C4 6F B1 FD | 	call	#__system___float_div
0d5c0     FD 12 02 F6 | 	mov	arg01, result1
0d5c4     00 14 06 F6 | 	mov	arg02, #0
0d5c8     7C 72 B1 FD | 	call	#__system___float_tointeger
0d5cc     10 4E 05 F1 | 	add	fp, #16
0d5d0     A7 FA 61 FC | 	wrlong	result1, fp
0d5d4     1E 1E C6 F9 | 	decod	local01, #30
0d5d8     FD 12 02 F6 | 	mov	arg01, result1
0d5dc     10 4E 85 F1 | 	sub	fp, #16
0d5e0     05 12 06 F1 | 	add	arg01, #5
0d5e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5e8     1F 20 C6 C9 |  if_b	decod	local02, #31
0d5ec     00 20 06 36 |  if_ae	mov	local02, #0
0d5f0     88 69 B1 FD | 	call	#__system___float_fromuns
0d5f4     10 FB 61 F5 | 	xor	result1, local02
0d5f8     FD 14 02 F6 | 	mov	arg02, result1
0d5fc     0F 13 02 F6 | 	mov	arg01, local01
0d600     84 7C B1 FD | 	call	#__system____builtin_powf
0d604     FD 12 02 F6 | 	mov	arg01, result1
0d608     01 14 06 F6 | 	mov	arg02, #1
0d60c     38 72 B1 FD | 	call	#__system___float_tointeger
0d610     14 4E 05 F1 | 	add	fp, #20
0d614     A7 FA 61 FC | 	wrlong	result1, fp
0d618                 | ' skip=round(2^(lfreq+5))
0d618                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0d618     14 4E 85 F1 | 	sub	fp, #20
0d61c     40 00 00 FF 
0d620     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d624     30 00 90 CD |  if_b	jmp	#LR__1180
0d628     14 4E 05 F1 | 	add	fp, #20
0d62c     A7 1E 02 FB | 	rdlong	local01, fp
0d630     0F 1F 52 F6 | 	abs	local01, local01 wc
0d634     0F 1E 46 F0 | 	shr	local01, #15
0d638     0F 1F 82 F6 | 	negc	local01, local01
0d63c     04 4E 05 F1 | 	add	fp, #4
0d640     A7 1E 62 FC | 	wrlong	local01, fp
0d644     04 4E 85 F1 | 	sub	fp, #4
0d648     40 00 80 FF 
0d64c     A7 00 68 FC | 	wrlong	##32768, fp
0d650     14 4E 85 F1 | 	sub	fp, #20
0d654     0C 00 90 FD | 	jmp	#LR__1181
0d658                 | LR__1180
0d658     18 4E 05 F1 | 	add	fp, #24
0d65c     A7 02 68 FC | 	wrlong	#1, fp
0d660     18 4E 85 F1 | 	sub	fp, #24
0d664                 | LR__1181
0d664     24 4E 05 F1 | 	add	fp, #36
0d668     A7 14 02 FB | 	rdlong	arg02, fp
0d66c     24 4E 85 F1 | 	sub	fp, #36
0d670     3E 2C 25 FF 
0d674     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d678     08 6F B1 FD | 	call	#__system___float_div
0d67c     FD 1E 02 F6 | 	mov	local01, result1
0d680     18 4E 05 F1 | 	add	fp, #24
0d684     A7 12 02 FB | 	rdlong	arg01, fp
0d688     18 4E 85 F1 | 	sub	fp, #24
0d68c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d690     1F 20 C6 C9 |  if_b	decod	local02, #31
0d694     00 20 06 36 |  if_ae	mov	local02, #0
0d698     E0 68 B1 FD | 	call	#__system___float_fromuns
0d69c     10 FB 61 F5 | 	xor	result1, local02
0d6a0     FD 22 02 F6 | 	mov	local03, result1
0d6a4     1E 24 C6 F9 | 	decod	local04, #30
0d6a8     0D 12 06 F6 | 	mov	arg01, #13
0d6ac     10 4E 05 F1 | 	add	fp, #16
0d6b0     A7 14 02 FB | 	rdlong	arg02, fp
0d6b4     10 4E 85 F1 | 	sub	fp, #16
0d6b8     0A 13 82 F1 | 	sub	arg01, arg02
0d6bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6c0     1F 20 C6 C9 |  if_b	decod	local02, #31
0d6c4     00 20 06 36 |  if_ae	mov	local02, #0
0d6c8     B0 68 B1 FD | 	call	#__system___float_fromuns
0d6cc     10 FB 61 F5 | 	xor	result1, local02
0d6d0     FD 14 02 F6 | 	mov	arg02, result1
0d6d4     12 13 02 F6 | 	mov	arg01, local04
0d6d8     AC 7B B1 FD | 	call	#__system____builtin_powf
0d6dc     FD 14 02 F6 | 	mov	arg02, result1
0d6e0     11 13 02 F6 | 	mov	arg01, local03
0d6e4     98 6C B1 FD | 	call	#__system___float_mul
0d6e8     FD 14 02 F6 | 	mov	arg02, result1
0d6ec     0F 13 02 F6 | 	mov	arg01, local01
0d6f0     90 6E B1 FD | 	call	#__system___float_div
0d6f4     FD 12 02 F6 | 	mov	arg01, result1
0d6f8     01 14 06 F6 | 	mov	arg02, #1
0d6fc     48 71 B1 FD | 	call	#__system___float_tointeger
0d700     FD 1E 02 F6 | 	mov	local01, result1
0d704     1C 4E 05 F1 | 	add	fp, #28
0d708     A7 1E 62 FC | 	wrlong	local01, fp
0d70c     1C 4E 85 F1 | 	sub	fp, #28
0d710     04 E1 BF FD | 	call	#_pop
0d714     FF 24 02 F6 | 	mov	local04, result3
0d718     A7 FA 61 FC | 	wrlong	result1, fp
0d71c     04 4E 05 F1 | 	add	fp, #4
0d720     A7 FC 61 FC | 	wrlong	result2, fp
0d724     04 4E 05 F1 | 	add	fp, #4
0d728     A7 24 62 FC | 	wrlong	local04, fp
0d72c     08 4E 85 F1 | 	sub	fp, #8
0d730     A7 12 02 F6 | 	mov	arg01, fp
0d734     C4 E2 BF FD | 	call	#_converttoint
0d738     FD 22 52 F6 | 	abs	local03, result1 wc
0d73c     07 22 06 F5 | 	and	local03, #7
0d740     11 23 82 F6 | 	negc	local03, local03
0d744     0C 4E 05 F1 | 	add	fp, #12
0d748     A7 22 62 FC | 	wrlong	local03, fp
0d74c     08 4E 05 F1 | 	add	fp, #8
0d750     A7 1E 02 FB | 	rdlong	local01, fp
0d754     10 1E 66 F0 | 	shl	local01, #16
0d758     08 4E 05 F1 | 	add	fp, #8
0d75c     A7 24 02 FB | 	rdlong	local04, fp
0d760     12 1F 02 F1 | 	add	local01, local04
0d764     04 4E 05 F1 | 	add	fp, #4
0d768     A7 1E 62 FC | 	wrlong	local01, fp
0d76c                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0d76c     37 00 00 FF 
0d770     10 E4 05 F1 | 	add	objptr, ##28176
0d774     F2 12 02 FB | 	rdlong	arg01, objptr
0d778     37 00 00 FF 
0d77c     10 E4 85 F1 | 	sub	objptr, ##28176
0d780     14 4E 85 F1 | 	sub	fp, #20
0d784     A7 24 02 FB | 	rdlong	local04, fp
0d788     0C 4E 85 F1 | 	sub	fp, #12
0d78c     06 24 66 F0 | 	shl	local04, #6
0d790     12 13 02 F1 | 	add	arg01, local04
0d794     08 12 06 F1 | 	add	arg01, #8
0d798     09 FB 01 FB | 	rdlong	result1, arg01
0d79c     1B FA 2D F4 | 	testbn	result1, #27 wz
0d7a0     3C 00 90 5D |  if_ne	jmp	#LR__1182
0d7a4     37 00 00 FF 
0d7a8     10 E4 05 F1 | 	add	objptr, ##28176
0d7ac     F2 12 02 FB | 	rdlong	arg01, objptr
0d7b0     37 00 00 FF 
0d7b4     10 E4 85 F1 | 	sub	objptr, ##28176
0d7b8     0C 4E 05 F1 | 	add	fp, #12
0d7bc     A7 24 02 FB | 	rdlong	local04, fp
0d7c0     06 24 66 F0 | 	shl	local04, #6
0d7c4     12 13 02 F1 | 	add	arg01, local04
0d7c8     18 12 06 F1 | 	add	arg01, #24
0d7cc     14 4E 05 F1 | 	add	fp, #20
0d7d0     A7 14 02 FB | 	rdlong	arg02, fp
0d7d4     20 4E 85 F1 | 	sub	fp, #32
0d7d8     09 15 62 FC | 	wrlong	arg02, arg01
0d7dc     80 00 90 FD | 	jmp	#LR__1183
0d7e0                 | LR__1182
0d7e0     37 00 00 FF 
0d7e4     10 E4 05 F1 | 	add	objptr, ##28176
0d7e8     F2 1E 02 FB | 	rdlong	local01, objptr
0d7ec     37 00 00 FF 
0d7f0     10 E4 85 F1 | 	sub	objptr, ##28176
0d7f4     0C 4E 05 F1 | 	add	fp, #12
0d7f8     A7 24 02 FB | 	rdlong	local04, fp
0d7fc     06 24 66 F0 | 	shl	local04, #6
0d800     12 1F 02 F1 | 	add	local01, local04
0d804     18 1E 06 F1 | 	add	local01, #24
0d808     18 4E 05 F1 | 	add	fp, #24
0d80c     A7 14 02 FB | 	rdlong	arg02, fp
0d810     24 4E 85 F1 | 	sub	fp, #36
0d814     3E 2C 25 FF 
0d818     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d81c     64 6D B1 FD | 	call	#__system___float_div
0d820     FD 12 02 F6 | 	mov	arg01, result1
0d824     01 14 06 F6 | 	mov	arg02, #1
0d828     1C 70 B1 FD | 	call	#__system___float_tointeger
0d82c     0F FB 51 FC | 	wrword	result1, local01
0d830     37 00 00 FF 
0d834     10 E4 05 F1 | 	add	objptr, ##28176
0d838     F2 12 02 FB | 	rdlong	arg01, objptr
0d83c     37 00 00 FF 
0d840     10 E4 85 F1 | 	sub	objptr, ##28176
0d844     0C 4E 05 F1 | 	add	fp, #12
0d848     A7 24 02 FB | 	rdlong	local04, fp
0d84c     0C 4E 85 F1 | 	sub	fp, #12
0d850     06 24 66 F0 | 	shl	local04, #6
0d854     12 13 02 F1 | 	add	arg01, local04
0d858     1A 12 06 F1 | 	add	arg01, #26
0d85c     09 01 5A FC | 	wrword	#256, arg01
0d860                 | LR__1183
0d860     A7 F0 03 F6 | 	mov	ptra, fp
0d864     B2 00 A0 FD | 	call	#popregs_
0d868                 | _do_changefreq_ret
0d868     2D 00 64 FD | 	ret
0d86c                 | 
0d86c                 | ' 
0d86c                 | ' '-------------------- changepan
0d86c                 | ' 
0d86c                 | ' sub do_changepan
0d86c                 | _do_changepan
0d86c     01 4A 05 F6 | 	mov	COUNT_, #1
0d870     A8 00 A0 FD | 	call	#pushregs_
0d874     14 F0 07 F1 | 	add	ptra, #20
0d878     9C DF BF FD | 	call	#_pop
0d87c     A7 FA 61 FC | 	wrlong	result1, fp
0d880     04 4E 05 F1 | 	add	fp, #4
0d884     A7 FC 61 FC | 	wrlong	result2, fp
0d888     04 4E 05 F1 | 	add	fp, #4
0d88c     A7 FE 61 FC | 	wrlong	result3, fp
0d890     08 4E 85 F1 | 	sub	fp, #8
0d894     00 00 23 FF 
0d898     00 1E 06 F6 | 	mov	local01, ##1174405120
0d89c     A7 12 02 F6 | 	mov	arg01, fp
0d8a0     14 E2 BF FD | 	call	#_converttofloat
0d8a4     FD 14 02 F6 | 	mov	arg02, result1
0d8a8     0F 13 02 F6 | 	mov	arg01, local01
0d8ac     D0 6A B1 FD | 	call	#__system___float_mul
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     01 14 06 F6 | 	mov	arg02, #1
0d8b8     8C 6F B1 FD | 	call	#__system___float_tointeger
0d8bc     0D 1E C6 F9 | 	decod	local01, #13
0d8c0     FD 1E 02 F1 | 	add	local01, result1
0d8c4     10 4E 05 F1 | 	add	fp, #16
0d8c8     A7 1E 62 FC | 	wrlong	local01, fp
0d8cc                 | ' 
0d8cc                 | ' t1=pop()
0d8cc                 | ' pan=8192+round(8192*converttofloat(t1)) 
0d8cc                 | ' if pan<0 then pan=0
0d8cc     10 4E 85 F1 | 	sub	fp, #16
0d8d0     00 1E 56 F2 | 	cmps	local01, #0 wc
0d8d4     10 4E 05 C1 |  if_b	add	fp, #16
0d8d8     A7 00 68 CC |  if_b	wrlong	#0, fp
0d8dc     10 4E 85 C1 |  if_b	sub	fp, #16
0d8e0                 | ' if pan>16384 then pan=16384
0d8e0     10 4E 05 F1 | 	add	fp, #16
0d8e4     A7 1E 02 FB | 	rdlong	local01, fp
0d8e8     10 4E 85 F1 | 	sub	fp, #16
0d8ec     20 00 00 FF 
0d8f0     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0d8f4     10 4E 05 31 |  if_ae	add	fp, #16
0d8f8     20 00 80 3F 
0d8fc     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0d900     10 4E 85 31 |  if_ae	sub	fp, #16
0d904     10 DF BF FD | 	call	#_pop
0d908     FF 1E 02 F6 | 	mov	local01, result3
0d90c     A7 FA 61 FC | 	wrlong	result1, fp
0d910     04 4E 05 F1 | 	add	fp, #4
0d914     A7 FC 61 FC | 	wrlong	result2, fp
0d918     04 4E 05 F1 | 	add	fp, #4
0d91c     A7 1E 62 FC | 	wrlong	local01, fp
0d920     08 4E 85 F1 | 	sub	fp, #8
0d924     A7 12 02 F6 | 	mov	arg01, fp
0d928     D0 E0 BF FD | 	call	#_converttoint
0d92c     FD 1E 52 F6 | 	abs	local01, result1 wc
0d930     07 1E 06 F5 | 	and	local01, #7
0d934     0F 1F 82 F6 | 	negc	local01, local01
0d938     0C 4E 05 F1 | 	add	fp, #12
0d93c     A7 1E 62 FC | 	wrlong	local01, fp
0d940     37 00 00 FF 
0d944     10 E4 05 F1 | 	add	objptr, ##28176
0d948     F2 12 02 FB | 	rdlong	arg01, objptr
0d94c     37 00 00 FF 
0d950     10 E4 85 F1 | 	sub	objptr, ##28176
0d954     06 1E 66 F0 | 	shl	local01, #6
0d958     0F 13 02 F1 | 	add	arg01, local01
0d95c     16 12 06 F1 | 	add	arg01, #22
0d960     04 4E 05 F1 | 	add	fp, #4
0d964     A7 14 02 FB | 	rdlong	arg02, fp
0d968     10 4E 85 F1 | 	sub	fp, #16
0d96c     09 15 52 FC | 	wrword	arg02, arg01
0d970     A7 F0 03 F6 | 	mov	ptra, fp
0d974     B2 00 A0 FD | 	call	#popregs_
0d978                 | _do_changepan_ret
0d978     2D 00 64 FD | 	ret
0d97c                 | 
0d97c                 | ' 
0d97c                 | ' '-------------------- changevol
0d97c                 | ' 
0d97c                 | ' sub do_changevol
0d97c                 | _do_changevol
0d97c     00 4A 05 F6 | 	mov	COUNT_, #0
0d980     A8 00 A0 FD | 	call	#pushregs_
0d984     14 F0 07 F1 | 	add	ptra, #20
0d988     8C DE BF FD | 	call	#_pop
0d98c     FF 14 02 F6 | 	mov	arg02, result3
0d990     A7 FA 61 FC | 	wrlong	result1, fp
0d994     04 4E 05 F1 | 	add	fp, #4
0d998     A7 FC 61 FC | 	wrlong	result2, fp
0d99c     04 4E 05 F1 | 	add	fp, #4
0d9a0     A7 14 62 FC | 	wrlong	arg02, fp
0d9a4     08 4E 85 F1 | 	sub	fp, #8
0d9a8     A7 12 02 F6 | 	mov	arg01, fp
0d9ac     08 E1 BF FD | 	call	#_converttofloat
0d9b0     FD 12 02 F6 | 	mov	arg01, result1
0d9b4     00 3D 22 FF 
0d9b8     00 14 06 F6 | 	mov	arg02, ##1148846080
0d9bc     C0 69 B1 FD | 	call	#__system___float_mul
0d9c0     FD 12 02 F6 | 	mov	arg01, result1
0d9c4     01 14 06 F6 | 	mov	arg02, #1
0d9c8     7C 6E B1 FD | 	call	#__system___float_tointeger
0d9cc     FD 14 52 F6 | 	abs	arg02, result1 wc
0d9d0     0D 14 46 F7 | 	zerox	arg02, #13
0d9d4     0A 15 82 F6 | 	negc	arg02, arg02
0d9d8     10 4E 05 F1 | 	add	fp, #16
0d9dc     A7 14 62 FC | 	wrlong	arg02, fp
0d9e0     10 4E 85 F1 | 	sub	fp, #16
0d9e4     30 DE BF FD | 	call	#_pop
0d9e8     FF 14 02 F6 | 	mov	arg02, result3
0d9ec     A7 FA 61 FC | 	wrlong	result1, fp
0d9f0     04 4E 05 F1 | 	add	fp, #4
0d9f4     A7 FC 61 FC | 	wrlong	result2, fp
0d9f8     04 4E 05 F1 | 	add	fp, #4
0d9fc     A7 14 62 FC | 	wrlong	arg02, fp
0da00     08 4E 85 F1 | 	sub	fp, #8
0da04     A7 12 02 F6 | 	mov	arg01, fp
0da08     F0 DF BF FD | 	call	#_converttoint
0da0c     FD 14 52 F6 | 	abs	arg02, result1 wc
0da10     07 14 06 F5 | 	and	arg02, #7
0da14     0A 15 82 F6 | 	negc	arg02, arg02
0da18     0C 4E 05 F1 | 	add	fp, #12
0da1c     A7 14 62 FC | 	wrlong	arg02, fp
0da20     37 00 00 FF 
0da24     10 E4 05 F1 | 	add	objptr, ##28176
0da28     F2 12 02 FB | 	rdlong	arg01, objptr
0da2c     37 00 00 FF 
0da30     10 E4 85 F1 | 	sub	objptr, ##28176
0da34     06 14 66 F0 | 	shl	arg02, #6
0da38     0A 13 02 F1 | 	add	arg01, arg02
0da3c     14 12 06 F1 | 	add	arg01, #20
0da40     04 4E 05 F1 | 	add	fp, #4
0da44     A7 14 02 FB | 	rdlong	arg02, fp
0da48     10 4E 85 F1 | 	sub	fp, #16
0da4c     09 15 52 FC | 	wrword	arg02, arg01
0da50     A7 F0 03 F6 | 	mov	ptra, fp
0da54     B2 00 A0 FD | 	call	#popregs_
0da58                 | _do_changevol_ret
0da58     2D 00 64 FD | 	ret
0da5c                 | 
0da5c                 | ' 
0da5c                 | ' '-------------------- changewav
0da5c                 | ' 
0da5c                 | ' sub do_changewav
0da5c                 | _do_changewav
0da5c     00 4A 05 F6 | 	mov	COUNT_, #0
0da60     A8 00 A0 FD | 	call	#pushregs_
0da64     14 F0 07 F1 | 	add	ptra, #20
0da68     AC DD BF FD | 	call	#_pop
0da6c     FF 14 02 F6 | 	mov	arg02, result3
0da70     A7 FA 61 FC | 	wrlong	result1, fp
0da74     04 4E 05 F1 | 	add	fp, #4
0da78     A7 FC 61 FC | 	wrlong	result2, fp
0da7c     04 4E 05 F1 | 	add	fp, #4
0da80     A7 14 62 FC | 	wrlong	arg02, fp
0da84     08 4E 85 F1 | 	sub	fp, #8
0da88     A7 12 02 F6 | 	mov	arg01, fp
0da8c     6C DF BF FD | 	call	#_converttoint
0da90     10 4E 05 F1 | 	add	fp, #16
0da94     A7 FA 61 FC | 	wrlong	result1, fp
0da98                 | ' 
0da98                 | ' t1=pop()
0da98                 | ' wave=converttoint(t1)
0da98                 | ' if wave<0 then wave=0
0da98     FD 14 02 F6 | 	mov	arg02, result1
0da9c     10 4E 85 F1 | 	sub	fp, #16
0daa0     00 14 56 F2 | 	cmps	arg02, #0 wc
0daa4     10 4E 05 C1 |  if_b	add	fp, #16
0daa8     A7 00 68 CC |  if_b	wrlong	#0, fp
0daac     10 4E 85 C1 |  if_b	sub	fp, #16
0dab0     64 DD BF FD | 	call	#_pop
0dab4     FF 14 02 F6 | 	mov	arg02, result3
0dab8     A7 FA 61 FC | 	wrlong	result1, fp
0dabc     04 4E 05 F1 | 	add	fp, #4
0dac0     A7 FC 61 FC | 	wrlong	result2, fp
0dac4     04 4E 05 F1 | 	add	fp, #4
0dac8     A7 14 62 FC | 	wrlong	arg02, fp
0dacc     08 4E 85 F1 | 	sub	fp, #8
0dad0     A7 12 02 F6 | 	mov	arg01, fp
0dad4     24 DF BF FD | 	call	#_converttoint
0dad8     FD 14 52 F6 | 	abs	arg02, result1 wc
0dadc     07 14 06 F5 | 	and	arg02, #7
0dae0     0A 15 82 F6 | 	negc	arg02, arg02
0dae4     0C 4E 05 F1 | 	add	fp, #12
0dae8     A7 14 62 FC | 	wrlong	arg02, fp
0daec                 | ' if wave <32 then 
0daec     04 4E 05 F1 | 	add	fp, #4
0daf0     A7 14 02 FB | 	rdlong	arg02, fp
0daf4     10 4E 85 F1 | 	sub	fp, #16
0daf8     20 14 56 F2 | 	cmps	arg02, #32 wc
0dafc     48 00 90 3D |  if_ae	jmp	#LR__1190
0db00     37 00 00 FF 
0db04     10 E4 05 F1 | 	add	objptr, ##28176
0db08     F2 12 02 FB | 	rdlong	arg01, objptr
0db0c     37 00 00 FF 
0db10     10 E4 85 F1 | 	sub	objptr, ##28176
0db14     0C 4E 05 F1 | 	add	fp, #12
0db18     A7 14 02 FB | 	rdlong	arg02, fp
0db1c     06 14 66 F0 | 	shl	arg02, #6
0db20     0A 13 02 F1 | 	add	arg01, arg02
0db24     08 12 06 F1 | 	add	arg01, #8
0db28     04 4E 05 F1 | 	add	fp, #4
0db2c     A7 14 02 FB | 	rdlong	arg02, fp
0db30     10 4E 85 F1 | 	sub	fp, #16
0db34     0B 14 66 F0 | 	shl	arg02, #11
0db38     00 00 40 FF 
0db3c     00 14 06 F1 | 	add	arg02, ##-2147483648
0db40     09 15 62 FC | 	wrlong	arg02, arg01
0db44     34 00 90 FD | 	jmp	#LR__1191
0db48                 | LR__1190
0db48     37 00 00 FF 
0db4c     10 E4 05 F1 | 	add	objptr, ##28176
0db50     F2 12 02 FB | 	rdlong	arg01, objptr
0db54     37 00 00 FF 
0db58     10 E4 85 F1 | 	sub	objptr, ##28176
0db5c     0C 4E 05 F1 | 	add	fp, #12
0db60     A7 14 02 FB | 	rdlong	arg02, fp
0db64     0C 4E 85 F1 | 	sub	fp, #12
0db68     06 14 66 F0 | 	shl	arg02, #6
0db6c     0A 13 02 F1 | 	add	arg01, arg02
0db70     08 12 06 F1 | 	add	arg01, #8
0db74     00 00 C4 FF 
0db78     09 01 68 FC | 	wrlong	##-2013265920, arg01
0db7c                 | LR__1191
0db7c     A7 F0 03 F6 | 	mov	ptra, fp
0db80     B2 00 A0 FD | 	call	#popregs_
0db84                 | _do_changewav_ret
0db84     2D 00 64 FD | 	ret
0db88                 | 
0db88                 | ' 
0db88                 | ' '-------------------- chr$
0db88                 | ' 
0db88                 | ' sub do_chr
0db88                 | _do_chr
0db88     01 4A 05 F6 | 	mov	COUNT_, #1
0db8c     A8 00 A0 FD | 	call	#pushregs_
0db90     14 F0 07 F1 | 	add	ptra, #20
0db94     4A 00 00 FF 
0db98     80 E4 05 F1 | 	add	objptr, ##38016
0db9c     F2 1E 02 FB | 	rdlong	local01, objptr
0dba0     0F 17 02 F6 | 	mov	arg03, local01
0dba4     01 16 66 F0 | 	shl	arg03, #1
0dba8     0F 17 02 F1 | 	add	arg03, local01
0dbac     02 16 66 F0 | 	shl	arg03, #2
0dbb0     03 00 00 FF 
0dbb4     04 E4 85 F1 | 	sub	objptr, ##1540
0dbb8     F2 16 02 F1 | 	add	arg03, objptr
0dbbc     0B 17 02 FB | 	rdlong	arg03, arg03
0dbc0     0C 4E 05 F1 | 	add	fp, #12
0dbc4     A7 16 62 FC | 	wrlong	arg03, fp
0dbc8                 | ' 
0dbc8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbc8                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0dbc8     0C 4E 85 F1 | 	sub	fp, #12
0dbcc     02 16 16 F2 | 	cmp	arg03, #2 wc
0dbd0     47 00 00 FF 
0dbd4     7C E4 85 F1 | 	sub	objptr, ##36476
0dbd8     0C 4E 05 C1 |  if_b	add	fp, #12
0dbdc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0dbe0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbe4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0dbe8     00 12 06 F6 | 	mov	arg01, #0
0dbec     00 97 B1 FD | 	call	#__system___getiolock_0570
0dbf0     FD 12 02 F6 | 	mov	arg01, result1
0dbf4     CC 39 B1 FD | 	call	#__system___lockmem
0dbf8     8C 01 00 FF 
0dbfc     8D 14 06 F6 | 	mov	arg02, ##@LR__5535
0dc00     00 12 06 F6 | 	mov	arg01, #0
0dc04     00 16 06 F6 | 	mov	arg03, #0
0dc08     AC 46 B1 FD | 	call	#__system___basic_print_string
0dc0c     00 12 06 F6 | 	mov	arg01, #0
0dc10     DC 96 B1 FD | 	call	#__system___getiolock_0570
0dc14     FD 00 68 FC | 	wrlong	#0, result1
0dc18     27 12 06 F6 | 	mov	arg01, #39
0dc1c     00 14 06 F6 | 	mov	arg02, #0
0dc20     E0 03 B1 FD | 	call	#_printerror
0dc24     54 00 90 FD | 	jmp	#LR__1201
0dc28                 | LR__1200
0dc28     EC DB BF FD | 	call	#_pop
0dc2c     FF 1E 02 F6 | 	mov	local01, result3
0dc30     A7 FA 61 FC | 	wrlong	result1, fp
0dc34     04 4E 05 F1 | 	add	fp, #4
0dc38     A7 FC 61 FC | 	wrlong	result2, fp
0dc3c     04 4E 05 F1 | 	add	fp, #4
0dc40     A7 1E 62 FC | 	wrlong	local01, fp
0dc44     08 4E 85 F1 | 	sub	fp, #8
0dc48     A7 12 02 F6 | 	mov	arg01, fp
0dc4c     AC DD BF FD | 	call	#_converttoint
0dc50     10 4E 05 F1 | 	add	fp, #16
0dc54     A7 FA 61 FC | 	wrlong	result1, fp
0dc58     FD 12 02 F6 | 	mov	arg01, result1
0dc5c     10 4E 85 F1 | 	sub	fp, #16
0dc60     A0 5B B1 FD | 	call	#__system__Chr_S
0dc64     A7 FA 61 FC | 	wrlong	result1, fp
0dc68     08 4E 05 F1 | 	add	fp, #8
0dc6c     A7 3E 68 FC | 	wrlong	#31, fp
0dc70     08 4E 85 F1 | 	sub	fp, #8
0dc74     A7 12 02 F6 | 	mov	arg01, fp
0dc78     34 DC BF FD | 	call	#_push
0dc7c                 | LR__1201
0dc7c     A7 F0 03 F6 | 	mov	ptra, fp
0dc80     B2 00 A0 FD | 	call	#popregs_
0dc84                 | _do_chr_ret
0dc84     2D 00 64 FD | 	ret
0dc88                 | 
0dc88                 | ' 
0dc88                 | ' '-------------------- circle
0dc88                 | ' 
0dc88                 | ' sub do_circle
0dc88                 | _do_circle
0dc88     02 4A 05 F6 | 	mov	COUNT_, #2
0dc8c     A8 00 A0 FD | 	call	#pushregs_
0dc90     24 F0 07 F1 | 	add	ptra, #36
0dc94     80 DB BF FD | 	call	#_pop
0dc98     FD 18 02 F6 | 	mov	arg04, result1
0dc9c     FE 16 02 F6 | 	mov	arg03, result2
0dca0     FF 14 02 F6 | 	mov	arg02, result3
0dca4     18 4E 05 F1 | 	add	fp, #24
0dca8     A7 18 62 FC | 	wrlong	arg04, fp
0dcac     04 4E 05 F1 | 	add	fp, #4
0dcb0     A7 16 62 FC | 	wrlong	arg03, fp
0dcb4     04 4E 05 F1 | 	add	fp, #4
0dcb8     A7 14 62 FC | 	wrlong	arg02, fp
0dcbc     20 4E 85 F1 | 	sub	fp, #32
0dcc0     54 DB BF FD | 	call	#_pop
0dcc4     FD 18 02 F6 | 	mov	arg04, result1
0dcc8     FE 16 02 F6 | 	mov	arg03, result2
0dccc     FF 1E 02 F6 | 	mov	local01, result3
0dcd0     0C 4E 05 F1 | 	add	fp, #12
0dcd4     A7 18 62 FC | 	wrlong	arg04, fp
0dcd8     04 4E 05 F1 | 	add	fp, #4
0dcdc     A7 16 62 FC | 	wrlong	arg03, fp
0dce0     04 4E 05 F1 | 	add	fp, #4
0dce4     A7 1E 62 FC | 	wrlong	local01, fp
0dce8     14 4E 85 F1 | 	sub	fp, #20
0dcec     28 DB BF FD | 	call	#_pop
0dcf0     A7 FA 61 FC | 	wrlong	result1, fp
0dcf4     04 4E 05 F1 | 	add	fp, #4
0dcf8     A7 FC 61 FC | 	wrlong	result2, fp
0dcfc     04 4E 05 F1 | 	add	fp, #4
0dd00     A7 FE 61 FC | 	wrlong	result3, fp
0dd04                 | ' 
0dd04                 | ' t3=pop()
0dd04                 | ' t2=pop()
0dd04                 | ' t1=pop()
0dd04                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0dd04     FF 18 02 F6 | 	mov	arg04, result3
0dd08     08 4E 85 F1 | 	sub	fp, #8
0dd0c     1C 18 0E F2 | 	cmp	arg04, #28 wz
0dd10     08 4E 05 51 |  if_ne	add	fp, #8
0dd14     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0dd18     08 4E 85 51 |  if_ne	sub	fp, #8
0dd1c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0dd20     7C 00 90 5D |  if_ne	jmp	#LR__1210
0dd24     14 4E 05 F1 | 	add	fp, #20
0dd28     A7 1E 02 FB | 	rdlong	local01, fp
0dd2c     14 4E 85 F1 | 	sub	fp, #20
0dd30     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd34     14 4E 05 51 |  if_ne	add	fp, #20
0dd38     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dd3c     14 4E 85 51 |  if_ne	sub	fp, #20
0dd40     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dd44     58 00 90 5D |  if_ne	jmp	#LR__1210
0dd48     20 4E 05 F1 | 	add	fp, #32
0dd4c     A7 1E 02 FB | 	rdlong	local01, fp
0dd50     20 4E 85 F1 | 	sub	fp, #32
0dd54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd58     20 4E 05 51 |  if_ne	add	fp, #32
0dd5c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dd60     20 4E 85 51 |  if_ne	sub	fp, #32
0dd64     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dd68     34 00 90 5D |  if_ne	jmp	#LR__1210
0dd6c     A7 12 02 FB | 	rdlong	arg01, fp
0dd70     0C 4E 05 F1 | 	add	fp, #12
0dd74     A7 14 02 FB | 	rdlong	arg02, fp
0dd78     0C 4E 05 F1 | 	add	fp, #12
0dd7c     A7 16 02 FB | 	rdlong	arg03, fp
0dd80     18 4E 85 F1 | 	sub	fp, #24
0dd84     37 00 00 FF 
0dd88     28 E4 05 F1 | 	add	objptr, ##28200
0dd8c     F2 18 02 FB | 	rdlong	arg04, objptr
0dd90     37 00 00 FF 
0dd94     28 E4 85 F1 | 	sub	objptr, ##28200
0dd98     B8 1A B1 FD | 	call	#_hg010b_spin2_circle
0dd9c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0dd9c     54 00 90 FD | 	jmp	#LR__1211
0dda0                 | LR__1210
0dda0     A7 12 02 F6 | 	mov	arg01, fp
0dda4     54 DC BF FD | 	call	#_converttoint
0dda8     FD 1E 02 F6 | 	mov	local01, result1
0ddac     0C 4E 05 F1 | 	add	fp, #12
0ddb0     A7 12 02 F6 | 	mov	arg01, fp
0ddb4     0C 4E 85 F1 | 	sub	fp, #12
0ddb8     40 DC BF FD | 	call	#_converttoint
0ddbc     FD 20 02 F6 | 	mov	local02, result1
0ddc0     18 4E 05 F1 | 	add	fp, #24
0ddc4     A7 12 02 F6 | 	mov	arg01, fp
0ddc8     18 4E 85 F1 | 	sub	fp, #24
0ddcc     2C DC BF FD | 	call	#_converttoint
0ddd0     FD 16 02 F6 | 	mov	arg03, result1
0ddd4     37 00 00 FF 
0ddd8     28 E4 05 F1 | 	add	objptr, ##28200
0dddc     F2 18 02 FB | 	rdlong	arg04, objptr
0dde0     37 00 00 FF 
0dde4     28 E4 85 F1 | 	sub	objptr, ##28200
0dde8     0F 13 02 F6 | 	mov	arg01, local01
0ddec     10 15 02 F6 | 	mov	arg02, local02
0ddf0     60 1A B1 FD | 	call	#_hg010b_spin2_circle
0ddf4                 | LR__1211
0ddf4     A7 F0 03 F6 | 	mov	ptra, fp
0ddf8     B2 00 A0 FD | 	call	#popregs_
0ddfc                 | _do_circle_ret
0ddfc     2D 00 64 FD | 	ret
0de00                 | 
0de00                 | ' 
0de00                 | ' '-------------------- click
0de00                 | ' 
0de00                 | ' sub do_click
0de00                 | _do_click
0de00     14 DA BF FD | 	call	#_pop
0de04     00 FA 4D F2 | 	cmps	result1, #0 wz
0de08                 | ' 
0de08                 | ' t1=pop()
0de08                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0de08     50 00 00 AF 
0de0c     14 E5 05 A1 |  if_e	add	objptr, ##41236
0de10     F2 00 68 AC |  if_e	wrlong	#0, objptr
0de14     50 00 00 FF 
0de18     14 E5 C5 F3 | 	sumz	objptr, ##41236
0de1c     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0de20     50 00 00 5F 
0de24     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0de28                 | _do_click_ret
0de28     2D 00 64 FD | 	ret
0de2c                 | 
0de2c                 | ' 
0de2c                 | ' '-------------------- close
0de2c                 | ' 
0de2c                 | ' sub do_close
0de2c                 | _do_close
0de2c     03 4A 05 F6 | 	mov	COUNT_, #3
0de30     A8 00 A0 FD | 	call	#pushregs_
0de34     E0 D9 BF FD | 	call	#_pop
0de38     FD 1E 02 F6 | 	mov	local01, result1
0de3c     FF 16 02 F6 | 	mov	arg03, result3
0de40     FE 20 02 F6 | 	mov	local02, result2
0de44     0B 23 02 F6 | 	mov	local03, arg03
0de48                 | ' 
0de48                 | ' numpar=compiledline(lineptr_e).result.uresult
0de48                 | ' t1=pop()
0de48                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0de48     2C 22 0E F2 | 	cmp	local03, #44 wz
0de4c     44 00 90 AD |  if_e	jmp	#LR__1220
0de50     00 12 06 F6 | 	mov	arg01, #0
0de54     98 94 B1 FD | 	call	#__system___getiolock_0570
0de58     FD 12 02 F6 | 	mov	arg01, result1
0de5c     64 37 B1 FD | 	call	#__system___lockmem
0de60     8C 01 00 FF 
0de64     94 14 06 F6 | 	mov	arg02, ##@LR__5536
0de68     00 12 06 F6 | 	mov	arg01, #0
0de6c     00 16 06 F6 | 	mov	arg03, #0
0de70     44 44 B1 FD | 	call	#__system___basic_print_string
0de74     00 12 06 F6 | 	mov	arg01, #0
0de78     0A 14 06 F6 | 	mov	arg02, #10
0de7c     00 16 06 F6 | 	mov	arg03, #0
0de80     DC 43 B1 FD | 	call	#__system___basic_print_char
0de84     00 12 06 F6 | 	mov	arg01, #0
0de88     64 94 B1 FD | 	call	#__system___getiolock_0570
0de8c     FD 00 68 FC | 	wrlong	#0, result1
0de90     08 00 90 FD | 	jmp	#LR__1221
0de94                 | LR__1220
0de94                 | ' channel  = t1.result.iresult
0de94                 | ' close #channel
0de94     0F 13 02 F6 | 	mov	arg01, local01
0de98     C4 89 B1 FD | 	call	#__system__close
0de9c                 | LR__1221
0de9c     A7 F0 03 F6 | 	mov	ptra, fp
0dea0     B2 00 A0 FD | 	call	#popregs_
0dea4                 | _do_close_ret
0dea4     2D 00 64 FD | 	ret
0dea8                 | 
0dea8                 | ' 
0dea8                 | ' '-------------------- cls
0dea8                 | ' 
0dea8                 | ' sub do_cls
0dea8                 | _do_cls
0dea8     37 00 00 FF 
0deac     3C E4 05 F1 | 	add	objptr, ##28220
0deb0     F2 12 02 FB | 	rdlong	arg01, objptr
0deb4     04 E4 85 F1 | 	sub	objptr, #4
0deb8     F2 14 02 FB | 	rdlong	arg02, objptr
0debc     37 00 00 FF 
0dec0     38 E4 85 F1 | 	sub	objptr, ##28216
0dec4     20 1E B1 FD | 	call	#_hg010b_spin2_cls
0dec8     37 00 00 FF 
0decc     3C E4 05 F1 | 	add	objptr, ##28220
0ded0     F2 14 02 FB | 	rdlong	arg02, objptr
0ded4     14 E4 85 F1 | 	sub	objptr, #20
0ded8     F2 14 62 FC | 	wrlong	arg02, objptr
0dedc     37 00 00 FF 
0dee0     28 E4 85 F1 | 	sub	objptr, ##28200
0dee4                 | _do_cls_ret
0dee4     2D 00 64 FD | 	ret
0dee8                 | 
0dee8                 | ' 
0dee8                 | ' '-------------------- color
0dee8                 | ' 
0dee8                 | ' sub do_color
0dee8                 | _do_color
0dee8     03 4A 05 F6 | 	mov	COUNT_, #3
0deec     A8 00 A0 FD | 	call	#pushregs_
0def0     24 D9 BF FD | 	call	#_pop
0def4     FD 1E 02 F6 | 	mov	local01, result1
0def8     FE 20 02 F6 | 	mov	local02, result2
0defc     FF 22 02 F6 | 	mov	local03, result3
0df00     37 00 00 FF 
0df04     28 E4 05 F1 | 	add	objptr, ##28200
0df08     F2 1E 62 FC | 	wrlong	local01, objptr
0df0c     37 00 00 FF 
0df10     28 E4 85 F1 | 	sub	objptr, ##28200
0df14     A7 F0 03 F6 | 	mov	ptra, fp
0df18     B2 00 A0 FD | 	call	#popregs_
0df1c                 | _do_color_ret
0df1c     2D 00 64 FD | 	ret
0df20                 | 
0df20                 | ' 
0df20                 | ' '-------------------- cos
0df20                 | ' 
0df20                 | ' sub do_cos
0df20                 | _do_cos
0df20     01 4A 05 F6 | 	mov	COUNT_, #1
0df24     A8 00 A0 FD | 	call	#pushregs_
0df28     10 F0 07 F1 | 	add	ptra, #16
0df2c     4A 00 00 FF 
0df30     80 E4 05 F1 | 	add	objptr, ##38016
0df34     F2 1E 02 FB | 	rdlong	local01, objptr
0df38     0F 17 02 F6 | 	mov	arg03, local01
0df3c     01 16 66 F0 | 	shl	arg03, #1
0df40     0F 17 02 F1 | 	add	arg03, local01
0df44     02 16 66 F0 | 	shl	arg03, #2
0df48     03 00 00 FF 
0df4c     04 E4 85 F1 | 	sub	objptr, ##1540
0df50     F2 16 02 F1 | 	add	arg03, objptr
0df54     0B 17 02 FB | 	rdlong	arg03, arg03
0df58     0C 4E 05 F1 | 	add	fp, #12
0df5c     A7 16 62 FC | 	wrlong	arg03, fp
0df60                 | ' 
0df60                 | ' numpar=compiledline(lineptr_e).result.uresult
0df60                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0df60     0C 4E 85 F1 | 	sub	fp, #12
0df64     02 16 16 F2 | 	cmp	arg03, #2 wc
0df68     47 00 00 FF 
0df6c     7C E4 85 F1 | 	sub	objptr, ##36476
0df70     0C 4E 05 C1 |  if_b	add	fp, #12
0df74     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0df78     0C 4E 85 C1 |  if_b	sub	fp, #12
0df7c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1230
0df80     00 12 06 F6 | 	mov	arg01, #0
0df84     68 93 B1 FD | 	call	#__system___getiolock_0570
0df88     FD 12 02 F6 | 	mov	arg01, result1
0df8c     34 36 B1 FD | 	call	#__system___lockmem
0df90     8C 01 00 FF 
0df94     A6 14 06 F6 | 	mov	arg02, ##@LR__5537
0df98     00 12 06 F6 | 	mov	arg01, #0
0df9c     00 16 06 F6 | 	mov	arg03, #0
0dfa0     14 43 B1 FD | 	call	#__system___basic_print_string
0dfa4     00 12 06 F6 | 	mov	arg01, #0
0dfa8     44 93 B1 FD | 	call	#__system___getiolock_0570
0dfac     FD 00 68 FC | 	wrlong	#0, result1
0dfb0     27 12 06 F6 | 	mov	arg01, #39
0dfb4     00 14 06 F6 | 	mov	arg02, #0
0dfb8     48 00 B1 FD | 	call	#_printerror
0dfbc     78 00 90 FD | 	jmp	#LR__1231
0dfc0                 | LR__1230
0dfc0     54 D8 BF FD | 	call	#_pop
0dfc4     A7 FA 61 FC | 	wrlong	result1, fp
0dfc8     04 4E 05 F1 | 	add	fp, #4
0dfcc     A7 FC 61 FC | 	wrlong	result2, fp
0dfd0     04 4E 05 F1 | 	add	fp, #4
0dfd4     A7 FE 61 FC | 	wrlong	result3, fp
0dfd8     08 4E 85 F1 | 	sub	fp, #8
0dfdc     51 00 00 FF 
0dfe0     BC E5 05 F1 | 	add	objptr, ##41916
0dfe4     F2 1E 02 FB | 	rdlong	local01, objptr
0dfe8     51 00 00 FF 
0dfec     BC E5 85 F1 | 	sub	objptr, ##41916
0dff0     A7 12 02 F6 | 	mov	arg01, fp
0dff4     C0 DA BF FD | 	call	#_converttofloat
0dff8     FD 14 02 F6 | 	mov	arg02, result1
0dffc     0F 13 02 F6 | 	mov	arg01, local01
0e000     7C 63 B1 FD | 	call	#__system___float_mul
0e004     FD 14 02 F6 | 	mov	arg02, result1
0e008     87 E4 1F FF 
0e00c     DB 13 06 F6 | 	mov	arg01, ##1070141403
0e010     1F 14 E6 F4 | 	bitnot	arg02, #31
0e014     98 5F B1 FD | 	call	#__system___float_add
0e018     FD 12 02 F6 | 	mov	arg01, result1
0e01c     C0 6C B1 FD | 	call	#__system____builtin_sinf
0e020     A7 FA 61 FC | 	wrlong	result1, fp
0e024     08 4E 05 F1 | 	add	fp, #8
0e028     A7 3C 68 FC | 	wrlong	#30, fp
0e02c     08 4E 85 F1 | 	sub	fp, #8
0e030     A7 12 02 F6 | 	mov	arg01, fp
0e034     78 D8 BF FD | 	call	#_push
0e038                 | LR__1231
0e038     A7 F0 03 F6 | 	mov	ptra, fp
0e03c     B2 00 A0 FD | 	call	#popregs_
0e040                 | _do_cos_ret
0e040     2D 00 64 FD | 	ret
0e044                 | 
0e044                 | ' 
0e044                 | ' '-------------------- cursor
0e044                 | ' 
0e044                 | ' sub do_cursor
0e044                 | _do_cursor
0e044     D0 D7 BF FD | 	call	#_pop
0e048     00 FA 4D F2 | 	cmps	result1, #0 wz
0e04c                 | ' t1=pop()
0e04c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0e04c     14 00 90 5D |  if_ne	jmp	#LR__1240
0e050     11 12 06 F6 | 	mov	arg01, #17
0e054     00 14 06 F6 | 	mov	arg02, #0
0e058     00 16 06 F6 | 	mov	arg03, #0
0e05c     68 0F B1 FD | 	call	#_hg010b_spin2_setspritesize
0e060     10 00 90 FD | 	jmp	#LR__1241
0e064                 | LR__1240
0e064     11 12 06 F6 | 	mov	arg01, #17
0e068     08 14 06 F6 | 	mov	arg02, #8
0e06c     10 16 06 F6 | 	mov	arg03, #16
0e070     54 0F B1 FD | 	call	#_hg010b_spin2_setspritesize
0e074                 | LR__1241
0e074                 | _do_cursor_ret
0e074     2D 00 64 FD | 	ret
0e078                 | 
0e078                 | ' 
0e078                 | ' '-------------------- defenv
0e078                 | ' 
0e078                 | ' sub do_defenv
0e078                 | _do_defenv
0e078     08 4A 05 F6 | 	mov	COUNT_, #8
0e07c     A8 00 A0 FD | 	call	#pushregs_
0e080     58 F0 07 F1 | 	add	ptra, #88
0e084     4A 00 00 FF 
0e088     80 E4 05 F1 | 	add	objptr, ##38016
0e08c     F2 1E 02 FB | 	rdlong	local01, objptr
0e090     0F 1B 02 F6 | 	mov	arg05, local01
0e094     01 1A 66 F0 | 	shl	arg05, #1
0e098     0F 1B 02 F1 | 	add	arg05, local01
0e09c     02 1A 66 F0 | 	shl	arg05, #2
0e0a0     03 00 00 FF 
0e0a4     04 E4 85 F1 | 	sub	objptr, ##1540
0e0a8     F2 1A 02 F1 | 	add	arg05, objptr
0e0ac     0D 1B 02 FB | 	rdlong	arg05, arg05
0e0b0     10 4E 05 F1 | 	add	fp, #16
0e0b4     A7 1A 62 FC | 	wrlong	arg05, fp
0e0b8                 | ' 
0e0b8                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0b8                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0e0b8     10 4E 85 F1 | 	sub	fp, #16
0e0bc     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e0c0     47 00 00 FF 
0e0c4     7C E4 85 F1 | 	sub	objptr, ##36476
0e0c8     10 4E 05 51 |  if_ne	add	fp, #16
0e0cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e0d0     10 4E 85 51 |  if_ne	sub	fp, #16
0e0d4     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0e0d8     8C 0A 90 5D |  if_ne	jmp	#LR__1271
0e0dc                 | ' 
0e0dc                 | ' if numpar=2 then						' env from .h2 or from a pointer
0e0dc     10 4E 05 F1 | 	add	fp, #16
0e0e0     A7 1E 02 FB | 	rdlong	local01, fp
0e0e4     10 4E 85 F1 | 	sub	fp, #16
0e0e8     02 1E 0E F2 | 	cmp	local01, #2 wz
0e0ec     24 04 90 5D |  if_ne	jmp	#LR__1263
0e0f0     24 D7 BF FD | 	call	#_pop
0e0f4     FF 1A 02 F6 | 	mov	arg05, result3
0e0f8     40 4E 05 F1 | 	add	fp, #64
0e0fc     A7 FA 61 FC | 	wrlong	result1, fp
0e100     04 4E 05 F1 | 	add	fp, #4
0e104     A7 FC 61 FC | 	wrlong	result2, fp
0e108     04 4E 05 F1 | 	add	fp, #4
0e10c     A7 1A 62 FC | 	wrlong	arg05, fp
0e110                 | '   t1=pop()
0e110                 | '   if t1.result_type=result_string2 then 
0e110     48 4E 85 F1 | 	sub	fp, #72
0e114     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e118     20 00 90 5D |  if_ne	jmp	#LR__1250
0e11c     40 4E 05 F1 | 	add	fp, #64
0e120     A7 12 02 FB | 	rdlong	arg01, fp
0e124     40 4E 85 F1 | 	sub	fp, #64
0e128     64 D8 BF FD | 	call	#_convertstring
0e12c     4C 4E 05 F1 | 	add	fp, #76
0e130     A7 FA 61 FC | 	wrlong	result1, fp
0e134     4C 4E 85 F1 | 	sub	fp, #76
0e138     58 00 90 FD | 	jmp	#LR__1253
0e13c                 | LR__1250
0e13c     48 4E 05 F1 | 	add	fp, #72
0e140     A7 1E 02 FB | 	rdlong	local01, fp
0e144     48 4E 85 F1 | 	sub	fp, #72
0e148     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e14c     18 00 90 5D |  if_ne	jmp	#LR__1251
0e150     40 4E 05 F1 | 	add	fp, #64
0e154     A7 1E 02 FB | 	rdlong	local01, fp
0e158     0C 4E 05 F1 | 	add	fp, #12
0e15c     A7 1E 62 FC | 	wrlong	local01, fp
0e160     4C 4E 85 F1 | 	sub	fp, #76
0e164     2C 00 90 FD | 	jmp	#LR__1252
0e168                 | LR__1251
0e168     8C 01 00 FF 
0e16c     AC 1E 06 F6 | 	mov	local01, ##@LR__5538
0e170     4C 4E 05 F1 | 	add	fp, #76
0e174     A7 1E 62 FC | 	wrlong	local01, fp
0e178     0C 4E 85 F1 | 	sub	fp, #12
0e17c     A7 12 02 F6 | 	mov	arg01, fp
0e180     40 4E 85 F1 | 	sub	fp, #64
0e184     74 D8 BF FD | 	call	#_converttoint
0e188     1C 4E 05 F1 | 	add	fp, #28
0e18c     A7 FA 61 FC | 	wrlong	result1, fp
0e190     1C 4E 85 F1 | 	sub	fp, #28
0e194                 | LR__1252
0e194                 | LR__1253
0e194                 | '   if s1<>"" then 
0e194     4C 4E 05 F1 | 	add	fp, #76
0e198     A7 12 02 FB | 	rdlong	arg01, fp
0e19c     4C 4E 85 F1 | 	sub	fp, #76
0e1a0     8C 01 00 FF 
0e1a4     AD 14 06 F6 | 	mov	arg02, ##@LR__5539
0e1a8     40 34 B1 FD | 	call	#__system___string_cmp
0e1ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0e1b0     24 02 90 AD |  if_e	jmp	#LR__1257
0e1b4     60 D6 BF FD | 	call	#_pop
0e1b8     FF 1E 02 F6 | 	mov	local01, result3
0e1bc     40 4E 05 F1 | 	add	fp, #64
0e1c0     A7 FA 61 FC | 	wrlong	result1, fp
0e1c4     04 4E 05 F1 | 	add	fp, #4
0e1c8     A7 FC 61 FC | 	wrlong	result2, fp
0e1cc     04 4E 05 F1 | 	add	fp, #4
0e1d0     A7 1E 62 FC | 	wrlong	local01, fp
0e1d4     08 4E 85 F1 | 	sub	fp, #8
0e1d8     A7 12 02 F6 | 	mov	arg01, fp
0e1dc     40 4E 85 F1 | 	sub	fp, #64
0e1e0     18 D8 BF FD | 	call	#_converttoint
0e1e4     18 4E 05 F1 | 	add	fp, #24
0e1e8     A7 FA 61 FC | 	wrlong	result1, fp
0e1ec     18 4E 85 F1 | 	sub	fp, #24
0e1f0                 | '     t1=pop()
0e1f0                 | '     channel=converttoint(t1) 
0e1f0                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0e1f0     09 12 06 F6 | 	mov	arg01, #9
0e1f4     68 86 B1 FD | 	call	#__system__close
0e1f8     09 1E 06 F6 | 	mov	local01, #9
0e1fc     8C 01 00 FF 
0e200     AE 12 06 F6 | 	mov	arg01, ##@LR__5540
0e204     4C 4E 05 F1 | 	add	fp, #76
0e208     A7 14 02 FB | 	rdlong	arg02, fp
0e20c     4C 4E 85 F1 | 	sub	fp, #76
0e210     0C 34 B1 FD | 	call	#__system___string_concat
0e214     FD 14 02 F6 | 	mov	arg02, result1
0e218     0F 13 02 F6 | 	mov	arg01, local01
0e21c     00 16 06 F6 | 	mov	arg03, #0
0e220     A4 3F B1 FD | 	call	#__system___basic_open_string
0e224     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e228     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e22c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e230     0C 4E 05 F1 | 	add	fp, #12
0e234     A7 FA 61 FC | 	wrlong	result1, fp
0e238                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e238     0C 4E 85 F1 | 	sub	fp, #12
0e23c     A0 00 90 AD |  if_e	jmp	#LR__1254
0e240     00 12 06 F6 | 	mov	arg01, #0
0e244     A8 90 B1 FD | 	call	#__system___getiolock_0570
0e248     FD 12 02 F6 | 	mov	arg01, result1
0e24c     74 33 B1 FD | 	call	#__system___lockmem
0e250     8C 01 00 FF 
0e254     BB 14 06 F6 | 	mov	arg02, ##@LR__5541
0e258     00 12 06 F6 | 	mov	arg01, #0
0e25c     00 16 06 F6 | 	mov	arg03, #0
0e260     54 40 B1 FD | 	call	#__system___basic_print_string
0e264     0C 4E 05 F1 | 	add	fp, #12
0e268     A7 14 02 FB | 	rdlong	arg02, fp
0e26c     0C 4E 85 F1 | 	sub	fp, #12
0e270     00 12 06 F6 | 	mov	arg01, #0
0e274     00 16 06 F6 | 	mov	arg03, #0
0e278     0A 18 06 F6 | 	mov	arg04, #10
0e27c     7C 40 B1 FD | 	call	#__system___basic_print_integer
0e280     8C 01 00 FF 
0e284     C9 14 06 F6 | 	mov	arg02, ##@LR__5542
0e288     00 12 06 F6 | 	mov	arg01, #0
0e28c     00 16 06 F6 | 	mov	arg03, #0
0e290     24 40 B1 FD | 	call	#__system___basic_print_string
0e294     00 1E 06 F6 | 	mov	local01, #0
0e298     0C 4E 05 F1 | 	add	fp, #12
0e29c     A7 12 02 FB | 	rdlong	arg01, fp
0e2a0     0C 4E 85 F1 | 	sub	fp, #12
0e2a4     EC 5B B1 FD | 	call	#__system___strerror
0e2a8     FD 14 02 F6 | 	mov	arg02, result1
0e2ac     0F 13 02 F6 | 	mov	arg01, local01
0e2b0     00 16 06 F6 | 	mov	arg03, #0
0e2b4     00 40 B1 FD | 	call	#__system___basic_print_string
0e2b8     00 12 06 F6 | 	mov	arg01, #0
0e2bc     0A 14 06 F6 | 	mov	arg02, #10
0e2c0     00 16 06 F6 | 	mov	arg03, #0
0e2c4     98 3F B1 FD | 	call	#__system___basic_print_char
0e2c8     00 12 06 F6 | 	mov	arg01, #0
0e2cc     20 90 B1 FD | 	call	#__system___getiolock_0570
0e2d0     FD 00 68 FC | 	wrlong	#0, result1
0e2d4     09 12 06 F6 | 	mov	arg01, #9
0e2d8     84 85 B1 FD | 	call	#__system__close
0e2dc     88 08 90 FD | 	jmp	#LR__1271
0e2e0                 | LR__1254
0e2e0                 | '     get #9,17,envbuf8(channel,0),256
0e2e0     18 4E 05 F1 | 	add	fp, #24
0e2e4     A7 1A 02 FB | 	rdlong	arg05, fp
0e2e8     18 4E 85 F1 | 	sub	fp, #24
0e2ec     0D 17 02 F6 | 	mov	arg03, arg05
0e2f0     09 16 66 F0 | 	shl	arg03, #9
0e2f4     0D 17 02 F1 | 	add	arg03, arg05
0e2f8     0C 00 00 FF 
0e2fc     D8 E4 05 F1 | 	add	objptr, ##6360
0e300     F2 16 02 F1 | 	add	arg03, objptr
0e304     09 12 06 F6 | 	mov	arg01, #9
0e308     11 14 06 F6 | 	mov	arg02, #17
0e30c     00 19 06 F6 | 	mov	arg04, #256
0e310     01 1A 06 F6 | 	mov	arg05, #1
0e314     0C 00 00 FF 
0e318     D8 E4 85 F1 | 	sub	objptr, ##6360
0e31c     14 41 B1 FD | 	call	#__system___basic_get
0e320                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0e320     14 4E 05 F1 | 	add	fp, #20
0e324     A7 FE 69 FC | 	wrlong	#255, fp
0e328     14 4E 85 F1 | 	sub	fp, #20
0e32c     0C 00 00 FF 
0e330     D8 E4 05 F1 | 	add	objptr, ##6360
0e334     97 30 48 FB | 	callpa	#(@LR__1256-@LR__1255)>>2,fcache_load_ptr_
0e338                 | LR__1255
0e338     18 4E 05 F1 | 	add	fp, #24
0e33c     A7 16 02 FB | 	rdlong	arg03, fp
0e340     0B 1F 02 F6 | 	mov	local01, arg03
0e344     09 1E 66 F0 | 	shl	local01, #9
0e348     F2 1E 02 F1 | 	add	local01, objptr
0e34c     04 4E 85 F1 | 	sub	fp, #4
0e350     A7 1A 02 FB | 	rdlong	arg05, fp
0e354     0D 19 02 F6 | 	mov	arg04, arg05
0e358     01 18 66 F0 | 	shl	arg04, #1
0e35c     0F 19 02 F1 | 	add	arg04, local01
0e360     0B 1F 02 F6 | 	mov	local01, arg03
0e364     09 1E 66 F0 | 	shl	local01, #9
0e368     0B 1F 02 F1 | 	add	local01, arg03
0e36c     F2 1E 02 F1 | 	add	local01, objptr
0e370     0F 1B 02 F1 | 	add	arg05, local01
0e374     0D 1F C2 FA | 	rdbyte	local01, arg05
0e378     00 1F 06 FA | 	mul	local01, #256
0e37c     0C 1F 52 FC | 	wrword	local01, arg04
0e380     A7 1E 02 FB | 	rdlong	local01, fp
0e384     01 1E 86 F1 | 	sub	local01, #1
0e388     A7 1E 62 FC | 	wrlong	local01, fp
0e38c     14 4E 85 F1 | 	sub	fp, #20
0e390     00 1E 56 F2 | 	cmps	local01, #0 wc
0e394     A0 FF 9F 3D |  if_ae	jmp	#LR__1255
0e398                 | LR__1256
0e398     0C 00 00 FF 
0e39c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e3a0                 | '     close #9
0e3a0     09 12 06 F6 | 	mov	arg01, #9
0e3a4     B8 84 B1 FD | 	call	#__system__close
0e3a8     18 4E 05 F1 | 	add	fp, #24
0e3ac     A7 1E 02 FB | 	rdlong	local01, fp
0e3b0     18 4E 85 F1 | 	sub	fp, #24
0e3b4     09 1E 66 F0 | 	shl	local01, #9
0e3b8     0C 00 00 FF 
0e3bc     D8 E4 05 F1 | 	add	objptr, ##6360
0e3c0     F2 1E 02 F1 | 	add	local01, objptr
0e3c4     FE 1F 06 F1 | 	add	local01, #510
0e3c8     0F 01 58 FC | 	wrword	#0, local01
0e3cc                 | '     envbuf(channel,255)=0                                                              
0e3cc                 | '     return
0e3cc     0C 00 00 FF 
0e3d0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e3d4     90 07 90 FD | 	jmp	#LR__1271
0e3d8                 | LR__1257
0e3d8                 | '     if wptr < $80000 then 
0e3d8     1C 4E 05 F1 | 	add	fp, #28
0e3dc     A7 20 02 FB | 	rdlong	local02, fp
0e3e0     1C 4E 85 F1 | 	sub	fp, #28
0e3e4     00 04 00 FF 
0e3e8     00 20 56 F2 | 	cmps	local02, ##524288 wc
0e3ec     7C 00 90 3D |  if_ae	jmp	#LR__1260
0e3f0                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0e3f0     14 4E 05 F1 | 	add	fp, #20
0e3f4     A7 00 68 FC | 	wrlong	#0, fp
0e3f8     14 4E 85 F1 | 	sub	fp, #20
0e3fc     0C 00 00 FF 
0e400     D8 E4 05 F1 | 	add	objptr, ##6360
0e404     97 2C 48 FB | 	callpa	#(@LR__1259-@LR__1258)>>2,fcache_load_ptr_
0e408                 | LR__1258
0e408     18 4E 05 F1 | 	add	fp, #24
0e40c     A7 20 02 FB | 	rdlong	local02, fp
0e410     09 20 66 F0 | 	shl	local02, #9
0e414     F2 20 02 F1 | 	add	local02, objptr
0e418     04 4E 85 F1 | 	sub	fp, #4
0e41c     A7 1E 02 FB | 	rdlong	local01, fp
0e420     0F 1B 02 F6 | 	mov	arg05, local01
0e424     01 1A 66 F0 | 	shl	arg05, #1
0e428     10 1B 02 F1 | 	add	arg05, local02
0e42c     08 4E 05 F1 | 	add	fp, #8
0e430     A7 12 02 FB | 	rdlong	arg01, fp
0e434     01 1E 66 F0 | 	shl	local01, #1
0e438     0F 13 02 F1 | 	add	arg01, local01
0e43c     09 FB E1 FA | 	rdword	result1, arg01
0e440     0D FB 51 FC | 	wrword	result1, arg05
0e444     08 4E 85 F1 | 	sub	fp, #8
0e448     A7 20 02 FB | 	rdlong	local02, fp
0e44c     01 20 06 F1 | 	add	local02, #1
0e450     A7 20 62 FC | 	wrlong	local02, fp
0e454     14 4E 85 F1 | 	sub	fp, #20
0e458     00 21 56 F2 | 	cmps	local02, #256 wc
0e45c     A8 FF 9F CD |  if_b	jmp	#LR__1258
0e460                 | LR__1259
0e460     0C 00 00 FF 
0e464     D8 E4 85 F1 | 	sub	objptr, ##6360
0e468     78 00 90 FD | 	jmp	#LR__1262
0e46c                 | LR__1260
0e46c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0e46c     14 4E 05 F1 | 	add	fp, #20
0e470     A7 00 68 FC | 	wrlong	#0, fp
0e474     14 4E 85 F1 | 	sub	fp, #20
0e478                 | LR__1261
0e478     18 4E 05 F1 | 	add	fp, #24
0e47c     A7 20 02 FB | 	rdlong	local02, fp
0e480     09 20 66 F0 | 	shl	local02, #9
0e484     0C 00 00 FF 
0e488     D8 E4 05 F1 | 	add	objptr, ##6360
0e48c     F2 20 02 F1 | 	add	local02, objptr
0e490     04 4E 85 F1 | 	sub	fp, #4
0e494     A7 1E 02 FB | 	rdlong	local01, fp
0e498     0F 23 02 F6 | 	mov	local03, local01
0e49c     01 22 66 F0 | 	shl	local03, #1
0e4a0     10 23 02 F1 | 	add	local03, local02
0e4a4     08 4E 05 F1 | 	add	fp, #8
0e4a8     A7 12 02 FB | 	rdlong	arg01, fp
0e4ac     1C 4E 85 F1 | 	sub	fp, #28
0e4b0     01 1E 66 F0 | 	shl	local01, #1
0e4b4     0F 13 02 F1 | 	add	arg01, local01
0e4b8     0C 00 00 FF 
0e4bc     D8 E4 85 F1 | 	sub	objptr, ##6360
0e4c0     54 FE B0 FD | 	call	#_psdpeek
0e4c4     11 FB 51 FC | 	wrword	result1, local03
0e4c8     14 4E 05 F1 | 	add	fp, #20
0e4cc     A7 22 02 FB | 	rdlong	local03, fp
0e4d0     01 22 06 F1 | 	add	local03, #1
0e4d4     A7 22 62 FC | 	wrlong	local03, fp
0e4d8     14 4E 85 F1 | 	sub	fp, #20
0e4dc     00 23 56 F2 | 	cmps	local03, #256 wc
0e4e0     94 FF 9F CD |  if_b	jmp	#LR__1261
0e4e4                 | LR__1262
0e4e4     18 4E 05 F1 | 	add	fp, #24
0e4e8     A7 22 02 FB | 	rdlong	local03, fp
0e4ec     18 4E 85 F1 | 	sub	fp, #24
0e4f0     09 22 66 F0 | 	shl	local03, #9
0e4f4     0C 00 00 FF 
0e4f8     D8 E4 05 F1 | 	add	objptr, ##6360
0e4fc     F2 22 02 F1 | 	add	local03, objptr
0e500     FE 23 06 F1 | 	add	local03, #510
0e504     11 01 58 FC | 	wrword	#0, local03
0e508                 | '     envbuf(channel,255)=0
0e508                 | '     return   
0e508     0C 00 00 FF 
0e50c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e510     54 06 90 FD | 	jmp	#LR__1271
0e514                 | LR__1263
0e514                 | ' 
0e514                 | ' if numpar=5 then   						 'simple adsr
0e514     10 4E 05 F1 | 	add	fp, #16
0e518     A7 20 02 FB | 	rdlong	local02, fp
0e51c     10 4E 85 F1 | 	sub	fp, #16
0e520     05 20 0E F2 | 	cmp	local02, #5 wz
0e524     14 06 90 5D |  if_ne	jmp	#LR__1270
0e528     EC D2 BF FD | 	call	#_pop
0e52c     FF 1E 02 F6 | 	mov	local01, result3
0e530     40 4E 05 F1 | 	add	fp, #64
0e534     A7 FA 61 FC | 	wrlong	result1, fp
0e538     04 4E 05 F1 | 	add	fp, #4
0e53c     A7 FC 61 FC | 	wrlong	result2, fp
0e540     04 4E 05 F1 | 	add	fp, #4
0e544     A7 1E 62 FC | 	wrlong	local01, fp
0e548     08 4E 85 F1 | 	sub	fp, #8
0e54c     A7 12 02 F6 | 	mov	arg01, fp
0e550     40 4E 85 F1 | 	sub	fp, #64
0e554     60 D5 BF FD | 	call	#_converttofloat
0e558     FD 20 02 F6 | 	mov	local02, result1
0e55c     2C 4E 05 F1 | 	add	fp, #44
0e560     A7 20 62 FC | 	wrlong	local02, fp
0e564     2C 4E 85 F1 | 	sub	fp, #44
0e568     AC D2 BF FD | 	call	#_pop
0e56c     FF 1E 02 F6 | 	mov	local01, result3
0e570     40 4E 05 F1 | 	add	fp, #64
0e574     A7 FA 61 FC | 	wrlong	result1, fp
0e578     04 4E 05 F1 | 	add	fp, #4
0e57c     A7 FC 61 FC | 	wrlong	result2, fp
0e580     04 4E 05 F1 | 	add	fp, #4
0e584     A7 1E 62 FC | 	wrlong	local01, fp
0e588     08 4E 85 F1 | 	sub	fp, #8
0e58c     A7 12 02 F6 | 	mov	arg01, fp
0e590     40 4E 85 F1 | 	sub	fp, #64
0e594     20 D5 BF FD | 	call	#_converttofloat
0e598     FD 20 02 F6 | 	mov	local02, result1
0e59c     28 4E 05 F1 | 	add	fp, #40
0e5a0     A7 20 62 FC | 	wrlong	local02, fp
0e5a4     28 4E 85 F1 | 	sub	fp, #40
0e5a8     6C D2 BF FD | 	call	#_pop
0e5ac     FF 1E 02 F6 | 	mov	local01, result3
0e5b0     40 4E 05 F1 | 	add	fp, #64
0e5b4     A7 FA 61 FC | 	wrlong	result1, fp
0e5b8     04 4E 05 F1 | 	add	fp, #4
0e5bc     A7 FC 61 FC | 	wrlong	result2, fp
0e5c0     04 4E 05 F1 | 	add	fp, #4
0e5c4     A7 1E 62 FC | 	wrlong	local01, fp
0e5c8     08 4E 85 F1 | 	sub	fp, #8
0e5cc     A7 12 02 F6 | 	mov	arg01, fp
0e5d0     40 4E 85 F1 | 	sub	fp, #64
0e5d4     E0 D4 BF FD | 	call	#_converttofloat
0e5d8     FD 20 02 F6 | 	mov	local02, result1
0e5dc     24 4E 05 F1 | 	add	fp, #36
0e5e0     A7 20 62 FC | 	wrlong	local02, fp
0e5e4     24 4E 85 F1 | 	sub	fp, #36
0e5e8     2C D2 BF FD | 	call	#_pop
0e5ec     FF 1E 02 F6 | 	mov	local01, result3
0e5f0     40 4E 05 F1 | 	add	fp, #64
0e5f4     A7 FA 61 FC | 	wrlong	result1, fp
0e5f8     04 4E 05 F1 | 	add	fp, #4
0e5fc     A7 FC 61 FC | 	wrlong	result2, fp
0e600     04 4E 05 F1 | 	add	fp, #4
0e604     A7 1E 62 FC | 	wrlong	local01, fp
0e608     08 4E 85 F1 | 	sub	fp, #8
0e60c     A7 12 02 F6 | 	mov	arg01, fp
0e610     40 4E 85 F1 | 	sub	fp, #64
0e614     A0 D4 BF FD | 	call	#_converttofloat
0e618     FD 20 02 F6 | 	mov	local02, result1
0e61c     20 4E 05 F1 | 	add	fp, #32
0e620     A7 20 62 FC | 	wrlong	local02, fp
0e624     20 4E 85 F1 | 	sub	fp, #32
0e628     EC D1 BF FD | 	call	#_pop
0e62c     FF 1E 02 F6 | 	mov	local01, result3
0e630     40 4E 05 F1 | 	add	fp, #64
0e634     A7 FA 61 FC | 	wrlong	result1, fp
0e638     04 4E 05 F1 | 	add	fp, #4
0e63c     A7 FC 61 FC | 	wrlong	result2, fp
0e640     04 4E 05 F1 | 	add	fp, #4
0e644     A7 1E 62 FC | 	wrlong	local01, fp
0e648     08 4E 85 F1 | 	sub	fp, #8
0e64c     A7 12 02 F6 | 	mov	arg01, fp
0e650     40 4E 85 F1 | 	sub	fp, #64
0e654     A4 D3 BF FD | 	call	#_converttoint
0e658     18 4E 05 F1 | 	add	fp, #24
0e65c     A7 FA 61 FC | 	wrlong	result1, fp
0e660                 | '   t1=pop() : rr=converttofloat(t1)
0e660                 | '   t1=pop() : ss=converttofloat(t1) 
0e660                 | '   t1=pop() : dd=converttofloat(t1)
0e660                 | '   t1=pop() : aa=converttofloat(t1)
0e660                 | '   t1=pop() : channel=converttoint(t1)
0e660                 | '   if ss<0.0 then ss=0.0 
0e660     10 4E 05 F1 | 	add	fp, #16
0e664     A7 12 02 FB | 	rdlong	arg01, fp
0e668     28 4E 85 F1 | 	sub	fp, #40
0e66c     00 14 06 F6 | 	mov	arg02, #0
0e670     01 16 06 F6 | 	mov	arg03, #1
0e674     3C 61 B1 FD | 	call	#__system___float_cmp
0e678     00 FA 55 F2 | 	cmps	result1, #0 wc
0e67c     28 4E 05 C1 |  if_b	add	fp, #40
0e680     A7 00 68 CC |  if_b	wrlong	#0, fp
0e684     28 4E 85 C1 |  if_b	sub	fp, #40
0e688                 | '   if ss>1.0 then ss=1.0
0e688     28 4E 05 F1 | 	add	fp, #40
0e68c     A7 12 02 FB | 	rdlong	arg01, fp
0e690     28 4E 85 F1 | 	sub	fp, #40
0e694     00 C0 1F FF 
0e698     00 14 06 F6 | 	mov	arg02, ##1065353216
0e69c     01 16 66 F6 | 	neg	arg03, #1
0e6a0     10 61 B1 FD | 	call	#__system___float_cmp
0e6a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e6a8     28 4E 05 31 |  if_ae	add	fp, #40
0e6ac     00 C0 9F 3F 
0e6b0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0e6b4     28 4E 85 31 |  if_ae	sub	fp, #40
0e6b8     20 4E 05 F1 | 	add	fp, #32
0e6bc     A7 12 02 FB | 	rdlong	arg01, fp
0e6c0     04 4E 05 F1 | 	add	fp, #4
0e6c4     A7 14 02 FB | 	rdlong	arg02, fp
0e6c8     24 4E 85 F1 | 	sub	fp, #36
0e6cc     E0 58 B1 FD | 	call	#__system___float_add
0e6d0     FD 12 02 F6 | 	mov	arg01, result1
0e6d4     2C 4E 05 F1 | 	add	fp, #44
0e6d8     A7 14 02 FB | 	rdlong	arg02, fp
0e6dc     2C 4E 85 F1 | 	sub	fp, #44
0e6e0     CC 58 B1 FD | 	call	#__system___float_add
0e6e4     30 4E 05 F1 | 	add	fp, #48
0e6e8     A7 FA 61 FC | 	wrlong	result1, fp
0e6ec     FD 14 02 F6 | 	mov	arg02, result1
0e6f0     30 4E 85 F1 | 	sub	fp, #48
0e6f4     00 C0 21 FF 
0e6f8     00 12 06 F6 | 	mov	arg01, ##1132462080
0e6fc     84 5E B1 FD | 	call	#__system___float_div
0e700     34 4E 05 F1 | 	add	fp, #52
0e704     A7 FA 61 FC | 	wrlong	result1, fp
0e708     14 4E 85 F1 | 	sub	fp, #20
0e70c     A7 12 02 FB | 	rdlong	arg01, fp
0e710     FD 14 02 F6 | 	mov	arg02, result1
0e714     20 4E 85 F1 | 	sub	fp, #32
0e718     64 5C B1 FD | 	call	#__system___float_mul
0e71c     FD 12 02 F6 | 	mov	arg01, result1
0e720     01 14 06 F6 | 	mov	arg02, #1
0e724     20 61 B1 FD | 	call	#__system___float_tointeger
0e728     A7 FA 61 FC | 	wrlong	result1, fp
0e72c     24 4E 05 F1 | 	add	fp, #36
0e730     A7 12 02 FB | 	rdlong	arg01, fp
0e734     10 4E 05 F1 | 	add	fp, #16
0e738     A7 14 02 FB | 	rdlong	arg02, fp
0e73c     34 4E 85 F1 | 	sub	fp, #52
0e740     3C 5C B1 FD | 	call	#__system___float_mul
0e744     FD 12 02 F6 | 	mov	arg01, result1
0e748     01 14 06 F6 | 	mov	arg02, #1
0e74c     F8 60 B1 FD | 	call	#__system___float_tointeger
0e750     04 4E 05 F1 | 	add	fp, #4
0e754     A7 FA 61 FC | 	wrlong	result1, fp
0e758     28 4E 05 F1 | 	add	fp, #40
0e75c     A7 12 02 FB | 	rdlong	arg01, fp
0e760     08 4E 05 F1 | 	add	fp, #8
0e764     A7 14 02 FB | 	rdlong	arg02, fp
0e768     34 4E 85 F1 | 	sub	fp, #52
0e76c     10 5C B1 FD | 	call	#__system___float_mul
0e770     FD 12 02 F6 | 	mov	arg01, result1
0e774     01 14 06 F6 | 	mov	arg02, #1
0e778     CC 60 B1 FD | 	call	#__system___float_tointeger
0e77c     0C 4E 05 F1 | 	add	fp, #12
0e780     A7 FA 61 FC | 	wrlong	result1, fp
0e784     0C 4E 85 F1 | 	sub	fp, #12
0e788     F8 BF 23 FF 
0e78c     00 20 06 F6 | 	mov	local02, ##1199566848
0e790     A7 12 02 FB | 	rdlong	arg01, fp
0e794     09 13 52 F6 | 	abs	arg01, arg01 wc
0e798     1F 24 C6 C9 |  if_b	decod	local04, #31
0e79c     00 24 06 36 |  if_ae	mov	local04, #0
0e7a0     D8 57 B1 FD | 	call	#__system___float_fromuns
0e7a4     12 FB 61 F5 | 	xor	result1, local04
0e7a8     FD 14 02 F6 | 	mov	arg02, result1
0e7ac     10 13 02 F6 | 	mov	arg01, local02
0e7b0     D0 5D B1 FD | 	call	#__system___float_div
0e7b4     38 4E 05 F1 | 	add	fp, #56
0e7b8     A7 FA 61 FC | 	wrlong	result1, fp
0e7bc     F8 BF 23 FF 
0e7c0     00 20 06 F6 | 	mov	local02, ##1199566848
0e7c4     10 4E 85 F1 | 	sub	fp, #16
0e7c8     A7 14 02 FB | 	rdlong	arg02, fp
0e7cc     28 4E 85 F1 | 	sub	fp, #40
0e7d0     F8 BF 23 FF 
0e7d4     00 12 06 F6 | 	mov	arg01, ##1199566848
0e7d8     A4 5B B1 FD | 	call	#__system___float_mul
0e7dc     FD 14 02 F6 | 	mov	arg02, result1
0e7e0     10 13 02 F6 | 	mov	arg01, local02
0e7e4     1F 14 E6 F4 | 	bitnot	arg02, #31
0e7e8     C4 57 B1 FD | 	call	#__system___float_add
0e7ec     FD 20 02 F6 | 	mov	local02, result1
0e7f0     04 4E 05 F1 | 	add	fp, #4
0e7f4     A7 12 02 FB | 	rdlong	arg01, fp
0e7f8     04 4E 85 F1 | 	sub	fp, #4
0e7fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e800     1F 24 C6 C9 |  if_b	decod	local04, #31
0e804     00 24 06 36 |  if_ae	mov	local04, #0
0e808     70 57 B1 FD | 	call	#__system___float_fromuns
0e80c     12 FB 61 F5 | 	xor	result1, local04
0e810     FD 14 02 F6 | 	mov	arg02, result1
0e814     10 13 02 F6 | 	mov	arg01, local02
0e818     68 5D B1 FD | 	call	#__system___float_div
0e81c     24 4E 05 F1 | 	add	fp, #36
0e820     A7 FA 61 FC | 	wrlong	result1, fp
0e824     04 4E 05 F1 | 	add	fp, #4
0e828     A7 14 02 FB | 	rdlong	arg02, fp
0e82c     28 4E 85 F1 | 	sub	fp, #40
0e830     F8 BF 23 FF 
0e834     00 12 06 F6 | 	mov	arg01, ##1199566848
0e838     44 5B B1 FD | 	call	#__system___float_mul
0e83c     FD 20 02 F6 | 	mov	local02, result1
0e840     0C 4E 05 F1 | 	add	fp, #12
0e844     A7 12 02 FB | 	rdlong	arg01, fp
0e848     0C 4E 85 F1 | 	sub	fp, #12
0e84c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e850     1F 24 C6 C9 |  if_b	decod	local04, #31
0e854     00 24 06 36 |  if_ae	mov	local04, #0
0e858     20 57 B1 FD | 	call	#__system___float_fromuns
0e85c     12 FB 61 F5 | 	xor	result1, local04
0e860     FD 14 02 F6 | 	mov	arg02, result1
0e864     10 13 02 F6 | 	mov	arg01, local02
0e868     18 5D B1 FD | 	call	#__system___float_div
0e86c     3C 4E 05 F1 | 	add	fp, #60
0e870     A7 FA 61 FC | 	wrlong	result1, fp
0e874     24 4E 85 F1 | 	sub	fp, #36
0e878     A7 26 02 FB | 	rdlong	local05, fp
0e87c     18 4E 85 F1 | 	sub	fp, #24
0e880     01 26 66 F0 | 	shl	local05, #1
0e884     51 00 00 FF 
0e888     C8 E5 05 F1 | 	add	objptr, ##41928
0e88c     F2 26 02 F1 | 	add	local05, objptr
0e890     A7 28 02 FB | 	rdlong	local06, fp
0e894     04 4E 05 F1 | 	add	fp, #4
0e898     A7 22 02 FB | 	rdlong	local03, fp
0e89c     11 29 02 F1 | 	add	local06, local03
0e8a0     13 29 52 FC | 	wrword	local06, local05
0e8a4     1C 4E 05 F1 | 	add	fp, #28
0e8a8     A7 00 68 FC | 	wrlong	#0, fp
0e8ac                 | '   fulltime=aa+dd+rr
0e8ac                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0e8ac                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0e8ac                 | '   suspoints(channel)=a+d
0e8ac                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0e8ac     0C 4E 85 F1 | 	sub	fp, #12
0e8b0     A7 00 68 FC | 	wrlong	#0, fp
0e8b4     14 4E 85 F1 | 	sub	fp, #20
0e8b8     A7 2A 02 FB | 	rdlong	local07, fp
0e8bc     51 00 00 FF 
0e8c0     C8 E5 85 F1 | 	sub	objptr, ##41928
0e8c4                 | LR__1264
0e8c4     14 4E 05 F1 | 	add	fp, #20
0e8c8     A7 20 02 FB | 	rdlong	local02, fp
0e8cc     14 4E 85 F1 | 	sub	fp, #20
0e8d0     15 21 52 F2 | 	cmps	local02, local07 wc
0e8d4     80 00 90 3D |  if_ae	jmp	#LR__1265
0e8d8     18 4E 05 F1 | 	add	fp, #24
0e8dc     A7 28 02 FB | 	rdlong	local06, fp
0e8e0     09 28 66 F0 | 	shl	local06, #9
0e8e4     0C 00 00 FF 
0e8e8     D8 E4 05 F1 | 	add	objptr, ##6360
0e8ec     F2 28 02 F1 | 	add	local06, objptr
0e8f0     04 4E 85 F1 | 	sub	fp, #4
0e8f4     A7 26 02 FB | 	rdlong	local05, fp
0e8f8     01 26 66 F0 | 	shl	local05, #1
0e8fc     14 27 02 F1 | 	add	local05, local06
0e900     0C 4E 05 F1 | 	add	fp, #12
0e904     A7 12 02 FB | 	rdlong	arg01, fp
0e908     20 4E 85 F1 | 	sub	fp, #32
0e90c     0C 00 00 FF 
0e910     D8 E4 85 F1 | 	sub	objptr, ##6360
0e914     01 14 06 F6 | 	mov	arg02, #1
0e918     2C 5F B1 FD | 	call	#__system___float_tointeger
0e91c     13 FB 51 FC | 	wrword	result1, local05
0e920     20 4E 05 F1 | 	add	fp, #32
0e924     A7 12 02 FB | 	rdlong	arg01, fp
0e928     18 4E 05 F1 | 	add	fp, #24
0e92c     A7 14 02 FB | 	rdlong	arg02, fp
0e930     38 4E 85 F1 | 	sub	fp, #56
0e934     78 56 B1 FD | 	call	#__system___float_add
0e938     20 4E 05 F1 | 	add	fp, #32
0e93c     A7 FA 61 FC | 	wrlong	result1, fp
0e940     0C 4E 85 F1 | 	sub	fp, #12
0e944     A7 28 02 FB | 	rdlong	local06, fp
0e948     01 28 06 F1 | 	add	local06, #1
0e94c     A7 28 62 FC | 	wrlong	local06, fp
0e950     14 4E 85 F1 | 	sub	fp, #20
0e954     6C FF 9F FD | 	jmp	#LR__1264
0e958                 | LR__1265
0e958                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0e958     A7 20 02 FB | 	rdlong	local02, fp
0e95c     14 4E 05 F1 | 	add	fp, #20
0e960     A7 20 62 FC | 	wrlong	local02, fp
0e964     14 4E 85 F1 | 	sub	fp, #20
0e968     A7 2C 02 FB | 	rdlong	local08, fp
0e96c     04 4E 05 F1 | 	add	fp, #4
0e970     A7 20 02 FB | 	rdlong	local02, fp
0e974     04 4E 85 F1 | 	sub	fp, #4
0e978     10 2D 02 F1 | 	add	local08, local02
0e97c                 | LR__1266
0e97c     14 4E 05 F1 | 	add	fp, #20
0e980     A7 20 02 FB | 	rdlong	local02, fp
0e984     14 4E 85 F1 | 	sub	fp, #20
0e988     16 21 52 F2 | 	cmps	local02, local08 wc
0e98c     A8 00 90 3D |  if_ae	jmp	#LR__1267
0e990     18 4E 05 F1 | 	add	fp, #24
0e994     A7 2A 02 FB | 	rdlong	local07, fp
0e998     09 2A 66 F0 | 	shl	local07, #9
0e99c     0C 00 00 FF 
0e9a0     D8 E4 05 F1 | 	add	objptr, ##6360
0e9a4     F2 2A 02 F1 | 	add	local07, objptr
0e9a8     04 4E 85 F1 | 	sub	fp, #4
0e9ac     A7 28 02 FB | 	rdlong	local06, fp
0e9b0     01 28 66 F0 | 	shl	local06, #1
0e9b4     15 29 02 F1 | 	add	local06, local07
0e9b8     0C 4E 05 F1 | 	add	fp, #12
0e9bc     A7 12 02 FB | 	rdlong	arg01, fp
0e9c0     20 4E 85 F1 | 	sub	fp, #32
0e9c4     0C 00 00 FF 
0e9c8     D8 E4 85 F1 | 	sub	objptr, ##6360
0e9cc     01 14 06 F6 | 	mov	arg02, #1
0e9d0     74 5E B1 FD | 	call	#__system___float_tointeger
0e9d4     14 FB 51 FC | 	wrword	result1, local06
0e9d8     20 4E 05 F1 | 	add	fp, #32
0e9dc     A7 12 02 FB | 	rdlong	arg01, fp
0e9e0     04 4E 05 F1 | 	add	fp, #4
0e9e4     A7 14 02 FB | 	rdlong	arg02, fp
0e9e8     24 4E 85 F1 | 	sub	fp, #36
0e9ec     1F 14 E6 F4 | 	bitnot	arg02, #31
0e9f0     BC 55 B1 FD | 	call	#__system___float_add
0e9f4     20 4E 05 F1 | 	add	fp, #32
0e9f8     A7 FA 61 FC | 	wrlong	result1, fp
0e9fc     20 4E 85 F1 | 	sub	fp, #32
0ea00     FD 12 02 F6 | 	mov	arg01, result1
0ea04     00 14 06 F6 | 	mov	arg02, #0
0ea08     01 16 06 F6 | 	mov	arg03, #1
0ea0c     A4 5D B1 FD | 	call	#__system___float_cmp
0ea10     00 FA 55 F2 | 	cmps	result1, #0 wc
0ea14     20 4E 05 C1 |  if_b	add	fp, #32
0ea18     A7 00 68 CC |  if_b	wrlong	#0, fp
0ea1c     20 4E 85 C1 |  if_b	sub	fp, #32
0ea20     14 4E 05 F1 | 	add	fp, #20
0ea24     A7 2A 02 FB | 	rdlong	local07, fp
0ea28     01 2A 06 F1 | 	add	local07, #1
0ea2c     A7 2A 62 FC | 	wrlong	local07, fp
0ea30     14 4E 85 F1 | 	sub	fp, #20
0ea34     44 FF 9F FD | 	jmp	#LR__1266
0ea38                 | LR__1267
0ea38                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0ea38     A7 20 02 FB | 	rdlong	local02, fp
0ea3c     04 4E 05 F1 | 	add	fp, #4
0ea40     A7 2C 02 FB | 	rdlong	local08, fp
0ea44     16 21 02 F1 | 	add	local02, local08
0ea48     10 4E 05 F1 | 	add	fp, #16
0ea4c     A7 20 62 FC | 	wrlong	local02, fp
0ea50     14 4E 85 F1 | 	sub	fp, #20
0ea54                 | LR__1268
0ea54     14 4E 05 F1 | 	add	fp, #20
0ea58     A7 26 02 FB | 	rdlong	local05, fp
0ea5c     14 4E 85 F1 | 	sub	fp, #20
0ea60     00 27 56 F2 | 	cmps	local05, #256 wc
0ea64     A8 00 90 3D |  if_ae	jmp	#LR__1269
0ea68     18 4E 05 F1 | 	add	fp, #24
0ea6c     A7 2C 02 FB | 	rdlong	local08, fp
0ea70     09 2C 66 F0 | 	shl	local08, #9
0ea74     0C 00 00 FF 
0ea78     D8 E4 05 F1 | 	add	objptr, ##6360
0ea7c     F2 2C 02 F1 | 	add	local08, objptr
0ea80     04 4E 85 F1 | 	sub	fp, #4
0ea84     A7 2A 02 FB | 	rdlong	local07, fp
0ea88     01 2A 66 F0 | 	shl	local07, #1
0ea8c     16 2B 02 F1 | 	add	local07, local08
0ea90     0C 4E 05 F1 | 	add	fp, #12
0ea94     A7 12 02 FB | 	rdlong	arg01, fp
0ea98     20 4E 85 F1 | 	sub	fp, #32
0ea9c     0C 00 00 FF 
0eaa0     D8 E4 85 F1 | 	sub	objptr, ##6360
0eaa4     01 14 06 F6 | 	mov	arg02, #1
0eaa8     9C 5D B1 FD | 	call	#__system___float_tointeger
0eaac     15 FB 51 FC | 	wrword	result1, local07
0eab0     20 4E 05 F1 | 	add	fp, #32
0eab4     A7 12 02 FB | 	rdlong	arg01, fp
0eab8     1C 4E 05 F1 | 	add	fp, #28
0eabc     A7 14 02 FB | 	rdlong	arg02, fp
0eac0     3C 4E 85 F1 | 	sub	fp, #60
0eac4     1F 14 E6 F4 | 	bitnot	arg02, #31
0eac8     E4 54 B1 FD | 	call	#__system___float_add
0eacc     20 4E 05 F1 | 	add	fp, #32
0ead0     A7 FA 61 FC | 	wrlong	result1, fp
0ead4     20 4E 85 F1 | 	sub	fp, #32
0ead8     FD 12 02 F6 | 	mov	arg01, result1
0eadc     00 14 06 F6 | 	mov	arg02, #0
0eae0     01 16 06 F6 | 	mov	arg03, #1
0eae4     CC 5C B1 FD | 	call	#__system___float_cmp
0eae8     00 FA 55 F2 | 	cmps	result1, #0 wc
0eaec     20 4E 05 C1 |  if_b	add	fp, #32
0eaf0     A7 00 68 CC |  if_b	wrlong	#0, fp
0eaf4     20 4E 85 C1 |  if_b	sub	fp, #32
0eaf8     14 4E 05 F1 | 	add	fp, #20
0eafc     A7 2C 02 FB | 	rdlong	local08, fp
0eb00     01 2C 06 F1 | 	add	local08, #1
0eb04     A7 2C 62 FC | 	wrlong	local08, fp
0eb08     14 4E 85 F1 | 	sub	fp, #20
0eb0c     44 FF 9F FD | 	jmp	#LR__1268
0eb10                 | LR__1269
0eb10     18 4E 05 F1 | 	add	fp, #24
0eb14     A7 26 02 FB | 	rdlong	local05, fp
0eb18     18 4E 85 F1 | 	sub	fp, #24
0eb1c     09 26 66 F0 | 	shl	local05, #9
0eb20     0C 00 00 FF 
0eb24     D8 E4 05 F1 | 	add	objptr, ##6360
0eb28     F2 26 02 F1 | 	add	local05, objptr
0eb2c     FE 27 06 F1 | 	add	local05, #510
0eb30     13 01 58 FC | 	wrword	#0, local05
0eb34     0C 00 00 FF 
0eb38     D8 E4 85 F1 | 	sub	objptr, ##6360
0eb3c                 | LR__1270
0eb3c     18 4E 05 F1 | 	add	fp, #24
0eb40     A7 26 02 FB | 	rdlong	local05, fp
0eb44     18 4E 85 F1 | 	sub	fp, #24
0eb48     09 26 66 F0 | 	shl	local05, #9
0eb4c     0C 00 00 FF 
0eb50     D8 E4 05 F1 | 	add	objptr, ##6360
0eb54     F2 26 02 F1 | 	add	local05, objptr
0eb58     FE 27 06 F1 | 	add	local05, #510
0eb5c     13 01 58 FC | 	wrword	#0, local05
0eb60     0C 00 00 FF 
0eb64     D8 E4 85 F1 | 	sub	objptr, ##6360
0eb68                 | LR__1271
0eb68     A7 F0 03 F6 | 	mov	ptra, fp
0eb6c     B2 00 A0 FD | 	call	#popregs_
0eb70                 | _do_defenv_ret
0eb70     2D 00 64 FD | 	ret
0eb74                 | 
0eb74                 | ' 
0eb74                 | ' '-------------------- defsnd
0eb74                 | ' 
0eb74                 | ' sub do_defsnd
0eb74                 | _do_defsnd
0eb74     04 4A 05 F6 | 	mov	COUNT_, #4
0eb78     A8 00 A0 FD | 	call	#pushregs_
0eb7c     88 F0 07 F1 | 	add	ptra, #136
0eb80     4A 00 00 FF 
0eb84     80 E4 05 F1 | 	add	objptr, ##38016
0eb88     F2 1A 02 FB | 	rdlong	arg05, objptr
0eb8c     0D 19 02 F6 | 	mov	arg04, arg05
0eb90     01 18 66 F0 | 	shl	arg04, #1
0eb94     0D 19 02 F1 | 	add	arg04, arg05
0eb98     02 18 66 F0 | 	shl	arg04, #2
0eb9c     03 00 00 FF 
0eba0     04 E4 85 F1 | 	sub	objptr, ##1540
0eba4     F2 18 02 F1 | 	add	arg04, objptr
0eba8     0C 1B 02 FB | 	rdlong	arg05, arg04
0ebac     A7 1A 62 FC | 	wrlong	arg05, fp
0ebb0                 | ' 
0ebb0                 | ' numpar=compiledline(lineptr_e).result.uresult
0ebb0                 | ' 
0ebb0                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ebb0                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ebb0                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ebb0                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ebb0                 | ' 
0ebb0                 | ' if numpar<2 then return
0ebb0     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ebb4     47 00 00 FF 
0ebb8     7C E4 85 F1 | 	sub	objptr, ##36476
0ebbc     94 08 90 CD |  if_b	jmp	#LR__1303
0ebc0                 | '  
0ebc0                 | ' if numpar=2 then
0ebc0     A7 1A 02 FB | 	rdlong	arg05, fp
0ebc4     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ebc8     A0 03 90 5D |  if_ne	jmp	#LR__1290
0ebcc     48 CC BF FD | 	call	#_pop
0ebd0     FF 1A 02 F6 | 	mov	arg05, result3
0ebd4     2C 4E 05 F1 | 	add	fp, #44
0ebd8     A7 FA 61 FC | 	wrlong	result1, fp
0ebdc     04 4E 05 F1 | 	add	fp, #4
0ebe0     A7 FC 61 FC | 	wrlong	result2, fp
0ebe4     04 4E 05 F1 | 	add	fp, #4
0ebe8     A7 1A 62 FC | 	wrlong	arg05, fp
0ebec                 | '   t1=pop()
0ebec                 | '   if t1.result_type=result_string2 then 
0ebec     34 4E 85 F1 | 	sub	fp, #52
0ebf0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ebf4     20 00 90 5D |  if_ne	jmp	#LR__1280
0ebf8     2C 4E 05 F1 | 	add	fp, #44
0ebfc     A7 12 02 FB | 	rdlong	arg01, fp
0ec00     2C 4E 85 F1 | 	sub	fp, #44
0ec04     88 CD BF FD | 	call	#_convertstring
0ec08     38 4E 05 F1 | 	add	fp, #56
0ec0c     A7 FA 61 FC | 	wrlong	result1, fp
0ec10     38 4E 85 F1 | 	sub	fp, #56
0ec14     58 00 90 FD | 	jmp	#LR__1283
0ec18                 | LR__1280
0ec18     34 4E 05 F1 | 	add	fp, #52
0ec1c     A7 1A 02 FB | 	rdlong	arg05, fp
0ec20     34 4E 85 F1 | 	sub	fp, #52
0ec24     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ec28     18 00 90 5D |  if_ne	jmp	#LR__1281
0ec2c     2C 4E 05 F1 | 	add	fp, #44
0ec30     A7 1A 02 FB | 	rdlong	arg05, fp
0ec34     0C 4E 05 F1 | 	add	fp, #12
0ec38     A7 1A 62 FC | 	wrlong	arg05, fp
0ec3c     38 4E 85 F1 | 	sub	fp, #56
0ec40     2C 00 90 FD | 	jmp	#LR__1282
0ec44                 | LR__1281
0ec44     8C 01 00 FF 
0ec48     CC 1A 06 F6 | 	mov	arg05, ##@LR__5543
0ec4c     38 4E 05 F1 | 	add	fp, #56
0ec50     A7 1A 62 FC | 	wrlong	arg05, fp
0ec54     0C 4E 85 F1 | 	sub	fp, #12
0ec58     A7 12 02 F6 | 	mov	arg01, fp
0ec5c     2C 4E 85 F1 | 	sub	fp, #44
0ec60     98 CD BF FD | 	call	#_converttoint
0ec64     14 4E 05 F1 | 	add	fp, #20
0ec68     A7 FA 61 FC | 	wrlong	result1, fp
0ec6c     14 4E 85 F1 | 	sub	fp, #20
0ec70                 | LR__1282
0ec70                 | LR__1283
0ec70                 | '   if s<>"" then 
0ec70     38 4E 05 F1 | 	add	fp, #56
0ec74     A7 12 02 FB | 	rdlong	arg01, fp
0ec78     38 4E 85 F1 | 	sub	fp, #56
0ec7c     8C 01 00 FF 
0ec80     CD 14 06 F6 | 	mov	arg02, ##@LR__5544
0ec84     64 29 B1 FD | 	call	#__system___string_cmp
0ec88     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec8c     E0 01 90 AD |  if_e	jmp	#LR__1286
0ec90     84 CB BF FD | 	call	#_pop
0ec94     FF 1A 02 F6 | 	mov	arg05, result3
0ec98     2C 4E 05 F1 | 	add	fp, #44
0ec9c     A7 FA 61 FC | 	wrlong	result1, fp
0eca0     04 4E 05 F1 | 	add	fp, #4
0eca4     A7 FC 61 FC | 	wrlong	result2, fp
0eca8     04 4E 05 F1 | 	add	fp, #4
0ecac     A7 1A 62 FC | 	wrlong	arg05, fp
0ecb0     08 4E 85 F1 | 	sub	fp, #8
0ecb4     A7 12 02 F6 | 	mov	arg01, fp
0ecb8     2C 4E 85 F1 | 	sub	fp, #44
0ecbc     3C CD BF FD | 	call	#_converttoint
0ecc0     10 4E 05 F1 | 	add	fp, #16
0ecc4     A7 FA 61 FC | 	wrlong	result1, fp
0ecc8                 | '     t1=pop()
0ecc8                 | '     channel=converttoint(t1) : if channel>31 then return
0ecc8     FD 1A 02 F6 | 	mov	arg05, result1
0eccc     10 4E 85 F1 | 	sub	fp, #16
0ecd0     20 1A 56 F2 | 	cmps	arg05, #32 wc
0ecd4     7C 07 90 3D |  if_ae	jmp	#LR__1303
0ecd8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0ecd8     09 12 06 F6 | 	mov	arg01, #9
0ecdc     80 7B B1 FD | 	call	#__system__close
0ece0     09 1E 06 F6 | 	mov	local01, #9
0ece4     8C 01 00 FF 
0ece8     CE 12 06 F6 | 	mov	arg01, ##@LR__5545
0ecec     38 4E 05 F1 | 	add	fp, #56
0ecf0     A7 14 02 FB | 	rdlong	arg02, fp
0ecf4     38 4E 85 F1 | 	sub	fp, #56
0ecf8     24 29 B1 FD | 	call	#__system___string_concat
0ecfc     FD 14 02 F6 | 	mov	arg02, result1
0ed00     0F 13 02 F6 | 	mov	arg01, local01
0ed04     00 16 06 F6 | 	mov	arg03, #0
0ed08     BC 34 B1 FD | 	call	#__system___basic_open_string
0ed0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ed10     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ed14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ed18     52 00 00 FF 
0ed1c     1C E4 05 F1 | 	add	objptr, ##42012
0ed20     F2 FA 61 FC | 	wrlong	result1, objptr
0ed24                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ed24     52 00 00 FF 
0ed28     1C E4 85 F1 | 	sub	objptr, ##42012
0ed2c     B0 00 90 AD |  if_e	jmp	#LR__1284
0ed30     00 12 06 F6 | 	mov	arg01, #0
0ed34     B8 85 B1 FD | 	call	#__system___getiolock_0570
0ed38     FD 12 02 F6 | 	mov	arg01, result1
0ed3c     84 28 B1 FD | 	call	#__system___lockmem
0ed40     8C 01 00 FF 
0ed44     DB 14 06 F6 | 	mov	arg02, ##@LR__5546
0ed48     00 12 06 F6 | 	mov	arg01, #0
0ed4c     00 16 06 F6 | 	mov	arg03, #0
0ed50     64 35 B1 FD | 	call	#__system___basic_print_string
0ed54     52 00 00 FF 
0ed58     1C E4 05 F1 | 	add	objptr, ##42012
0ed5c     F2 14 02 FB | 	rdlong	arg02, objptr
0ed60     52 00 00 FF 
0ed64     1C E4 85 F1 | 	sub	objptr, ##42012
0ed68     00 12 06 F6 | 	mov	arg01, #0
0ed6c     00 16 06 F6 | 	mov	arg03, #0
0ed70     0A 18 06 F6 | 	mov	arg04, #10
0ed74     84 35 B1 FD | 	call	#__system___basic_print_integer
0ed78     8C 01 00 FF 
0ed7c     E9 14 06 F6 | 	mov	arg02, ##@LR__5547
0ed80     00 12 06 F6 | 	mov	arg01, #0
0ed84     00 16 06 F6 | 	mov	arg03, #0
0ed88     2C 35 B1 FD | 	call	#__system___basic_print_string
0ed8c     00 1E 06 F6 | 	mov	local01, #0
0ed90     52 00 00 FF 
0ed94     1C E4 05 F1 | 	add	objptr, ##42012
0ed98     F2 12 02 FB | 	rdlong	arg01, objptr
0ed9c     52 00 00 FF 
0eda0     1C E4 85 F1 | 	sub	objptr, ##42012
0eda4     EC 50 B1 FD | 	call	#__system___strerror
0eda8     FD 14 02 F6 | 	mov	arg02, result1
0edac     0F 13 02 F6 | 	mov	arg01, local01
0edb0     00 16 06 F6 | 	mov	arg03, #0
0edb4     00 35 B1 FD | 	call	#__system___basic_print_string
0edb8     00 12 06 F6 | 	mov	arg01, #0
0edbc     0A 14 06 F6 | 	mov	arg02, #10
0edc0     00 16 06 F6 | 	mov	arg03, #0
0edc4     98 34 B1 FD | 	call	#__system___basic_print_char
0edc8     00 12 06 F6 | 	mov	arg01, #0
0edcc     20 85 B1 FD | 	call	#__system___getiolock_0570
0edd0     FD 00 68 FC | 	wrlong	#0, result1
0edd4     09 12 06 F6 | 	mov	arg01, #9
0edd8     84 7A B1 FD | 	call	#__system__close
0eddc     74 06 90 FD | 	jmp	#LR__1303
0ede0                 | LR__1284
0ede0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0ede0     04 4E 05 F1 | 	add	fp, #4
0ede4     A7 00 68 FC | 	wrlong	#0, fp
0ede8                 | LR__1285
0ede8     A7 1E 02 FB | 	rdlong	local01, fp
0edec     01 1E 66 F0 | 	shl	local01, #1
0edf0     11 14 06 F6 | 	mov	arg02, #17
0edf4     0F 15 02 F1 | 	add	arg02, local01
0edf8     78 4E 05 F1 | 	add	fp, #120
0edfc     A7 16 02 F6 | 	mov	arg03, fp
0ee00     7C 4E 85 F1 | 	sub	fp, #124
0ee04     09 12 06 F6 | 	mov	arg01, #9
0ee08     01 18 06 F6 | 	mov	arg04, #1
0ee0c     02 1A 06 F6 | 	mov	arg05, #2
0ee10     20 36 B1 FD | 	call	#__system___basic_get
0ee14     10 4E 05 F1 | 	add	fp, #16
0ee18     A7 12 02 FB | 	rdlong	arg01, fp
0ee1c     0B 12 66 F0 | 	shl	arg01, #11
0ee20     0C 4E 85 F1 | 	sub	fp, #12
0ee24     A7 1E 02 FB | 	rdlong	local01, fp
0ee28     01 1E 66 F0 | 	shl	local01, #1
0ee2c     0F 13 02 F1 | 	add	arg01, local01
0ee30     78 4E 05 F1 | 	add	fp, #120
0ee34     A7 14 E2 FA | 	rdword	arg02, fp
0ee38     7C 4E 85 F1 | 	sub	fp, #124
0ee3c     0F 14 66 F7 | 	signx	arg02, #15
0ee40     94 F3 B0 FD | 	call	#_psdpoke
0ee44     04 4E 05 F1 | 	add	fp, #4
0ee48     A7 1E 02 FB | 	rdlong	local01, fp
0ee4c     01 1E 06 F1 | 	add	local01, #1
0ee50     A7 1E 62 FC | 	wrlong	local01, fp
0ee54     02 00 00 FF 
0ee58     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0ee5c     88 FF 9F CD |  if_b	jmp	#LR__1285
0ee60     04 4E 85 F1 | 	sub	fp, #4
0ee64                 | '     close #9
0ee64     09 12 06 F6 | 	mov	arg01, #9
0ee68     F4 79 B1 FD | 	call	#__system__close
0ee6c                 | '     return
0ee6c     E4 05 90 FD | 	jmp	#LR__1303
0ee70                 | LR__1286
0ee70                 | '     if wptr < ($80000 - 2048) then 
0ee70     14 4E 05 F1 | 	add	fp, #20
0ee74     A7 1E 02 FB | 	rdlong	local01, fp
0ee78     14 4E 85 F1 | 	sub	fp, #20
0ee7c     FC 03 00 FF 
0ee80     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0ee84     70 00 90 3D |  if_ae	jmp	#LR__1288
0ee88                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0ee88     04 4E 05 F1 | 	add	fp, #4
0ee8c     A7 00 68 FC | 	wrlong	#0, fp
0ee90     04 4E 85 F1 | 	sub	fp, #4
0ee94                 | LR__1287
0ee94     10 4E 05 F1 | 	add	fp, #16
0ee98     A7 1E 02 FB | 	rdlong	local01, fp
0ee9c     0B 1E 66 F0 | 	shl	local01, #11
0eea0     0C 4E 85 F1 | 	sub	fp, #12
0eea4     A7 1A 02 FB | 	rdlong	arg05, fp
0eea8     0D 19 02 F6 | 	mov	arg04, arg05
0eeac     01 18 66 F0 | 	shl	arg04, #1
0eeb0     0C 1F 02 F1 | 	add	local01, arg04
0eeb4     10 4E 05 F1 | 	add	fp, #16
0eeb8     A7 12 02 FB | 	rdlong	arg01, fp
0eebc     14 4E 85 F1 | 	sub	fp, #20
0eec0     01 1A 66 F0 | 	shl	arg05, #1
0eec4     0D 13 02 F1 | 	add	arg01, arg05
0eec8     09 15 E2 FA | 	rdword	arg02, arg01
0eecc     0F 13 02 F6 | 	mov	arg01, local01
0eed0     04 F3 B0 FD | 	call	#_psdpoke
0eed4     04 4E 05 F1 | 	add	fp, #4
0eed8     A7 1E 02 FB | 	rdlong	local01, fp
0eedc     01 1E 06 F1 | 	add	local01, #1
0eee0     A7 1E 62 FC | 	wrlong	local01, fp
0eee4     04 4E 85 F1 | 	sub	fp, #4
0eee8     02 00 00 FF 
0eeec     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0eef0     A0 FF 9F CD |  if_b	jmp	#LR__1287
0eef4     5C 05 90 FD | 	jmp	#LR__1303
0eef8                 | LR__1288
0eef8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0eef8     04 4E 05 F1 | 	add	fp, #4
0eefc     A7 00 68 FC | 	wrlong	#0, fp
0ef00     04 4E 85 F1 | 	sub	fp, #4
0ef04                 | LR__1289
0ef04     10 4E 05 F1 | 	add	fp, #16
0ef08     A7 1E 02 FB | 	rdlong	local01, fp
0ef0c     0B 1E 66 F0 | 	shl	local01, #11
0ef10     0C 4E 85 F1 | 	sub	fp, #12
0ef14     A7 1A 02 FB | 	rdlong	arg05, fp
0ef18     0D 19 02 F6 | 	mov	arg04, arg05
0ef1c     01 18 66 F0 | 	shl	arg04, #1
0ef20     0C 1F 02 F1 | 	add	local01, arg04
0ef24     10 4E 05 F1 | 	add	fp, #16
0ef28     A7 12 02 FB | 	rdlong	arg01, fp
0ef2c     14 4E 85 F1 | 	sub	fp, #20
0ef30     01 1A 66 F0 | 	shl	arg05, #1
0ef34     0D 13 02 F1 | 	add	arg01, arg05
0ef38     DC F3 B0 FD | 	call	#_psdpeek
0ef3c     FD 14 02 F6 | 	mov	arg02, result1
0ef40     0F 13 02 F6 | 	mov	arg01, local01
0ef44     90 F2 B0 FD | 	call	#_psdpoke
0ef48     04 4E 05 F1 | 	add	fp, #4
0ef4c     A7 1E 02 FB | 	rdlong	local01, fp
0ef50     01 1E 06 F1 | 	add	local01, #1
0ef54     A7 1E 62 FC | 	wrlong	local01, fp
0ef58     04 4E 85 F1 | 	sub	fp, #4
0ef5c     02 00 00 FF 
0ef60     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0ef64     9C FF 9F CD |  if_b	jmp	#LR__1289
0ef68                 | '     return 
0ef68     E8 04 90 FD | 	jmp	#LR__1303
0ef6c                 | '   return
0ef6c                 | LR__1290
0ef6c                 | ' for i=0 to 15 : harm(i)=0: next i  
0ef6c     04 4E 05 F1 | 	add	fp, #4
0ef70     A7 00 68 FC | 	wrlong	#0, fp
0ef74     97 16 48 FB | 	callpa	#(@LR__1292-@LR__1291)>>2,fcache_load_ptr_
0ef78                 | LR__1291
0ef78     A7 1E 02 FB | 	rdlong	local01, fp
0ef7c     02 1E 66 F0 | 	shl	local01, #2
0ef80     38 4E 05 F1 | 	add	fp, #56
0ef84     A7 1E 02 F1 | 	add	local01, fp
0ef88     0F 01 68 FC | 	wrlong	#0, local01
0ef8c     38 4E 85 F1 | 	sub	fp, #56
0ef90     A7 1E 02 FB | 	rdlong	local01, fp
0ef94     01 1E 06 F1 | 	add	local01, #1
0ef98     A7 1E 62 FC | 	wrlong	local01, fp
0ef9c     10 1E 56 F2 | 	cmps	local01, #16 wc
0efa0     D4 FF 9F CD |  if_b	jmp	#LR__1291
0efa4                 | LR__1292
0efa4     04 4E 85 F1 | 	sub	fp, #4
0efa8                 | ' for i=numpar to 2 step -1 
0efa8     A7 1E 02 FB | 	rdlong	local01, fp
0efac     04 4E 05 F1 | 	add	fp, #4
0efb0     A7 1E 62 FC | 	wrlong	local01, fp
0efb4     04 4E 85 F1 | 	sub	fp, #4
0efb8                 | LR__1293
0efb8     5C C8 BF FD | 	call	#_pop
0efbc     2C 4E 05 F1 | 	add	fp, #44
0efc0     A7 FA 61 FC | 	wrlong	result1, fp
0efc4     04 4E 05 F1 | 	add	fp, #4
0efc8     A7 FC 61 FC | 	wrlong	result2, fp
0efcc     04 4E 05 F1 | 	add	fp, #4
0efd0     A7 FE 61 FC | 	wrlong	result3, fp
0efd4     30 4E 85 F1 | 	sub	fp, #48
0efd8     A7 1E 02 FB | 	rdlong	local01, fp
0efdc     02 1E 86 F1 | 	sub	local01, #2
0efe0     02 1E 66 F0 | 	shl	local01, #2
0efe4     38 4E 05 F1 | 	add	fp, #56
0efe8     A7 1E 02 F1 | 	add	local01, fp
0efec     10 4E 85 F1 | 	sub	fp, #16
0eff0     A7 12 02 F6 | 	mov	arg01, fp
0eff4     2C 4E 85 F1 | 	sub	fp, #44
0eff8     BC CA BF FD | 	call	#_converttofloat
0effc     0F FB 61 FC | 	wrlong	result1, local01
0f000     04 4E 05 F1 | 	add	fp, #4
0f004     A7 1E 02 FB | 	rdlong	local01, fp
0f008     01 1E 86 F1 | 	sub	local01, #1
0f00c     A7 1E 62 FC | 	wrlong	local01, fp
0f010     04 4E 85 F1 | 	sub	fp, #4
0f014     02 1E 56 F2 | 	cmps	local01, #2 wc
0f018     9C FF 9F 3D |  if_ae	jmp	#LR__1293
0f01c     F8 C7 BF FD | 	call	#_pop
0f020     FF 1E 02 F6 | 	mov	local01, result3
0f024     2C 4E 05 F1 | 	add	fp, #44
0f028     A7 FA 61 FC | 	wrlong	result1, fp
0f02c     04 4E 05 F1 | 	add	fp, #4
0f030     A7 FC 61 FC | 	wrlong	result2, fp
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 1E 62 FC | 	wrlong	local01, fp
0f03c     08 4E 85 F1 | 	sub	fp, #8
0f040     A7 12 02 F6 | 	mov	arg01, fp
0f044     2C 4E 85 F1 | 	sub	fp, #44
0f048     B0 C9 BF FD | 	call	#_converttoint
0f04c     10 4E 05 F1 | 	add	fp, #16
0f050     A7 FA 61 FC | 	wrlong	result1, fp
0f054                 | ' t1=pop()
0f054                 | ' channel=converttoint(t1) : : if channel>31 then return
0f054     FD 1E 02 F6 | 	mov	local01, result1
0f058     10 4E 85 F1 | 	sub	fp, #16
0f05c     20 1E 56 F2 | 	cmps	local01, #32 wc
0f060     F0 03 90 3D |  if_ae	jmp	#LR__1303
0f064     20 4E 05 F1 | 	add	fp, #32
0f068     A7 00 68 FC | 	wrlong	#0, fp
0f06c                 | ' max=0
0f06c                 | ' if harm(0)<0 then
0f06c     1C 4E 05 F1 | 	add	fp, #28
0f070     A7 12 02 FB | 	rdlong	arg01, fp
0f074     3C 4E 85 F1 | 	sub	fp, #60
0f078     00 14 06 F6 | 	mov	arg02, #0
0f07c     01 16 06 F6 | 	mov	arg03, #1
0f080     30 57 B1 FD | 	call	#__system___float_cmp
0f084     00 FA 55 F2 | 	cmps	result1, #0 wc
0f088     04 01 90 3D |  if_ae	jmp	#LR__1296
0f08c     3C 4E 05 F1 | 	add	fp, #60
0f090     A7 FA 01 FB | 	rdlong	result1, fp
0f094     1F FA 05 F4 | 	bitl	result1, #31
0f098     24 4E 85 F1 | 	sub	fp, #36
0f09c     A7 FA 61 FC | 	wrlong	result1, fp
0f0a0     28 4E 05 F1 | 	add	fp, #40
0f0a4     A7 FA 01 FB | 	rdlong	result1, fp
0f0a8     1F FA 05 F4 | 	bitl	result1, #31
0f0ac     24 4E 85 F1 | 	sub	fp, #36
0f0b0     A7 FA 61 FC | 	wrlong	result1, fp
0f0b4     20 4E 05 F1 | 	add	fp, #32
0f0b8     00 C0 9F FF 
0f0bc     A7 00 68 FC | 	wrlong	##1065353216, fp
0f0c0     24 4E 85 F1 | 	sub	fp, #36
0f0c4     A7 1E 02 FB | 	rdlong	local01, fp
0f0c8     28 4E 05 F1 | 	add	fp, #40
0f0cc     A7 1E 62 FC | 	wrlong	local01, fp
0f0d0     24 4E 85 F1 | 	sub	fp, #36
0f0d4     A7 1E 02 FB | 	rdlong	local01, fp
0f0d8     28 4E 05 F1 | 	add	fp, #40
0f0dc     A7 1E 62 FC | 	wrlong	local01, fp
0f0e0                 | '   harm(0)=1
0f0e0                 | '   harm(1)=even
0f0e0                 | '   harm(2)=odd
0f0e0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f0e0     40 4E 85 F1 | 	sub	fp, #64
0f0e4     A7 06 68 FC | 	wrlong	#3, fp
0f0e8                 | LR__1294
0f0e8     A7 1A 02 FB | 	rdlong	arg05, fp
0f0ec     0D 21 02 F6 | 	mov	local02, arg05
0f0f0     02 20 66 F0 | 	shl	local02, #2
0f0f4     38 4E 05 F1 | 	add	fp, #56
0f0f8     A7 20 02 F1 | 	add	local02, fp
0f0fc     02 1A 86 F1 | 	sub	arg05, #2
0f100     02 1A 66 F0 | 	shl	arg05, #2
0f104     A7 1A 02 F1 | 	add	arg05, fp
0f108     0D 13 02 FB | 	rdlong	arg01, arg05
0f10c     24 4E 85 F1 | 	sub	fp, #36
0f110     A7 14 02 FB | 	rdlong	arg02, fp
0f114     18 4E 85 F1 | 	sub	fp, #24
0f118     64 52 B1 FD | 	call	#__system___float_mul
0f11c     10 FB 61 FC | 	wrlong	result1, local02
0f120     04 4E 05 F1 | 	add	fp, #4
0f124     A7 22 02 FB | 	rdlong	local03, fp
0f128     02 22 06 F1 | 	add	local03, #2
0f12c     A7 22 62 FC | 	wrlong	local03, fp
0f130     10 22 56 F2 | 	cmps	local03, #16 wc
0f134     B0 FF 9F CD |  if_b	jmp	#LR__1294
0f138                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f138     A7 08 68 FC | 	wrlong	#4, fp
0f13c                 | LR__1295
0f13c     A7 22 02 FB | 	rdlong	local03, fp
0f140     11 21 02 F6 | 	mov	local02, local03
0f144     02 20 66 F0 | 	shl	local02, #2
0f148     38 4E 05 F1 | 	add	fp, #56
0f14c     A7 20 02 F1 | 	add	local02, fp
0f150     02 22 86 F1 | 	sub	local03, #2
0f154     02 22 66 F0 | 	shl	local03, #2
0f158     A7 22 02 F1 | 	add	local03, fp
0f15c     11 13 02 FB | 	rdlong	arg01, local03
0f160     20 4E 85 F1 | 	sub	fp, #32
0f164     A7 14 02 FB | 	rdlong	arg02, fp
0f168     1C 4E 85 F1 | 	sub	fp, #28
0f16c     10 52 B1 FD | 	call	#__system___float_mul
0f170     10 FB 61 FC | 	wrlong	result1, local02
0f174     04 4E 05 F1 | 	add	fp, #4
0f178     A7 22 02 FB | 	rdlong	local03, fp
0f17c     02 22 06 F1 | 	add	local03, #2
0f180     A7 22 62 FC | 	wrlong	local03, fp
0f184     0F 22 56 F2 | 	cmps	local03, #15 wc
0f188     B0 FF 9F CD |  if_b	jmp	#LR__1295
0f18c     04 4E 85 F1 | 	sub	fp, #4
0f190                 | LR__1296
0f190                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f190     3C 4E 05 F1 | 	add	fp, #60
0f194     A7 12 02 FB | 	rdlong	arg01, fp
0f198     3C 4E 85 F1 | 	sub	fp, #60
0f19c     00 14 06 F6 | 	mov	arg02, #0
0f1a0     01 16 66 F6 | 	neg	arg03, #1
0f1a4     0C 56 B1 FD | 	call	#__system___float_cmp
0f1a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0f1ac     A4 02 90 CD |  if_b	jmp	#LR__1302
0f1b0                 | '   for i=0 to 1023
0f1b0     04 4E 05 F1 | 	add	fp, #4
0f1b4     A7 00 68 FC | 	wrlong	#0, fp
0f1b8     04 4E 85 F1 | 	sub	fp, #4
0f1bc                 | LR__1297
0f1bc     24 4E 05 F1 | 	add	fp, #36
0f1c0     A7 00 68 FC | 	wrlong	#0, fp
0f1c4                 | '     spl=0
0f1c4                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f1c4     1C 4E 85 F1 | 	sub	fp, #28
0f1c8     A7 00 68 FC | 	wrlong	#0, fp
0f1cc                 | LR__1298
0f1cc     A7 20 02 FB | 	rdlong	local02, fp
0f1d0     02 20 66 F0 | 	shl	local02, #2
0f1d4     34 4E 05 F1 | 	add	fp, #52
0f1d8     A7 20 02 F1 | 	add	local02, fp
0f1dc     10 23 02 FB | 	rdlong	local03, local02
0f1e0     87 E4 1D FF 
0f1e4     DB 21 06 F6 | 	mov	local02, ##1003032539
0f1e8     38 4E 85 F1 | 	sub	fp, #56
0f1ec     A7 12 02 FB | 	rdlong	arg01, fp
0f1f0     04 4E 85 F1 | 	sub	fp, #4
0f1f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f1f8     1F 24 C6 C9 |  if_b	decod	local04, #31
0f1fc     00 24 06 36 |  if_ae	mov	local04, #0
0f200     78 4D B1 FD | 	call	#__system___float_fromuns
0f204     12 FB 61 F5 | 	xor	result1, local04
0f208     FD 14 02 F6 | 	mov	arg02, result1
0f20c     10 13 02 F6 | 	mov	arg01, local02
0f210     6C 51 B1 FD | 	call	#__system___float_mul
0f214     FD 20 02 F6 | 	mov	local02, result1
0f218     08 4E 05 F1 | 	add	fp, #8
0f21c     A7 12 02 FB | 	rdlong	arg01, fp
0f220     08 4E 85 F1 | 	sub	fp, #8
0f224     01 12 06 F1 | 	add	arg01, #1
0f228     09 13 52 F6 | 	abs	arg01, arg01 wc
0f22c     1F 24 C6 C9 |  if_b	decod	local04, #31
0f230     00 24 06 36 |  if_ae	mov	local04, #0
0f234     44 4D B1 FD | 	call	#__system___float_fromuns
0f238     12 FB 61 F5 | 	xor	result1, local04
0f23c     FD 14 02 F6 | 	mov	arg02, result1
0f240     10 13 02 F6 | 	mov	arg01, local02
0f244     38 51 B1 FD | 	call	#__system___float_mul
0f248     FD 12 02 F6 | 	mov	arg01, result1
0f24c     90 5A B1 FD | 	call	#__system____builtin_sinf
0f250     FD 14 02 F6 | 	mov	arg02, result1
0f254     11 13 02 F6 | 	mov	arg01, local03
0f258     24 51 B1 FD | 	call	#__system___float_mul
0f25c     FD 14 02 F6 | 	mov	arg02, result1
0f260     24 4E 05 F1 | 	add	fp, #36
0f264     A7 12 02 FB | 	rdlong	arg01, fp
0f268     24 4E 85 F1 | 	sub	fp, #36
0f26c     40 4D B1 FD | 	call	#__system___float_add
0f270     24 4E 05 F1 | 	add	fp, #36
0f274     A7 FA 61 FC | 	wrlong	result1, fp
0f278     1C 4E 85 F1 | 	sub	fp, #28
0f27c     A7 16 02 FB | 	rdlong	arg03, fp
0f280     01 16 06 F1 | 	add	arg03, #1
0f284     A7 16 62 FC | 	wrlong	arg03, fp
0f288     10 16 56 F2 | 	cmps	arg03, #16 wc
0f28c     3C FF 9F CD |  if_b	jmp	#LR__1298
0f290                 | '     if abs(spl)>max then max=abs(spl)  
0f290     1C 4E 05 F1 | 	add	fp, #28
0f294     A7 12 02 FB | 	rdlong	arg01, fp
0f298     1F 12 06 F4 | 	bitl	arg01, #31
0f29c     04 4E 85 F1 | 	sub	fp, #4
0f2a0     A7 14 02 FB | 	rdlong	arg02, fp
0f2a4     20 4E 85 F1 | 	sub	fp, #32
0f2a8     01 16 66 F6 | 	neg	arg03, #1
0f2ac     04 55 B1 FD | 	call	#__system___float_cmp
0f2b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f2b4     18 00 90 CD |  if_b	jmp	#LR__1299
0f2b8     24 4E 05 F1 | 	add	fp, #36
0f2bc     A7 FA 01 FB | 	rdlong	result1, fp
0f2c0     1F FA 05 F4 | 	bitl	result1, #31
0f2c4     04 4E 85 F1 | 	sub	fp, #4
0f2c8     A7 FA 61 FC | 	wrlong	result1, fp
0f2cc     20 4E 85 F1 | 	sub	fp, #32
0f2d0                 | LR__1299
0f2d0     04 4E 05 F1 | 	add	fp, #4
0f2d4     A7 22 02 FB | 	rdlong	local03, fp
0f2d8     01 22 06 F1 | 	add	local03, #1
0f2dc     A7 22 62 FC | 	wrlong	local03, fp
0f2e0     04 4E 85 F1 | 	sub	fp, #4
0f2e4     02 00 00 FF 
0f2e8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f2ec     CC FE 9F CD |  if_b	jmp	#LR__1297
0f2f0                 | '   for i=0 to 1023
0f2f0     04 4E 05 F1 | 	add	fp, #4
0f2f4     A7 00 68 FC | 	wrlong	#0, fp
0f2f8     04 4E 85 F1 | 	sub	fp, #4
0f2fc                 | LR__1300
0f2fc     24 4E 05 F1 | 	add	fp, #36
0f300     A7 00 68 FC | 	wrlong	#0, fp
0f304                 | '     spl=0
0f304                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0f304     1C 4E 85 F1 | 	sub	fp, #28
0f308     A7 00 68 FC | 	wrlong	#0, fp
0f30c                 | LR__1301
0f30c     A7 22 02 FB | 	rdlong	local03, fp
0f310     02 22 66 F0 | 	shl	local03, #2
0f314     34 4E 05 F1 | 	add	fp, #52
0f318     A7 22 02 F1 | 	add	local03, fp
0f31c     11 23 02 FB | 	rdlong	local03, local03
0f320     1C 4E 85 F1 | 	sub	fp, #28
0f324     A7 14 02 FB | 	rdlong	arg02, fp
0f328     20 4E 85 F1 | 	sub	fp, #32
0f32c     58 7F 23 FF 
0f330     00 12 06 F6 | 	mov	arg01, ##1191096320
0f334     4C 52 B1 FD | 	call	#__system___float_div
0f338     FD 14 02 F6 | 	mov	arg02, result1
0f33c     11 13 02 F6 | 	mov	arg01, local03
0f340     3C 50 B1 FD | 	call	#__system___float_mul
0f344     FD 22 02 F6 | 	mov	local03, result1
0f348     87 E4 1D FF 
0f34c     DB 21 06 F6 | 	mov	local02, ##1003032539
0f350     04 4E 05 F1 | 	add	fp, #4
0f354     A7 12 02 FB | 	rdlong	arg01, fp
0f358     04 4E 85 F1 | 	sub	fp, #4
0f35c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f360     1F 24 C6 C9 |  if_b	decod	local04, #31
0f364     00 24 06 36 |  if_ae	mov	local04, #0
0f368     10 4C B1 FD | 	call	#__system___float_fromuns
0f36c     12 FB 61 F5 | 	xor	result1, local04
0f370     FD 14 02 F6 | 	mov	arg02, result1
0f374     10 13 02 F6 | 	mov	arg01, local02
0f378     04 50 B1 FD | 	call	#__system___float_mul
0f37c     FD 20 02 F6 | 	mov	local02, result1
0f380     08 4E 05 F1 | 	add	fp, #8
0f384     A7 12 02 FB | 	rdlong	arg01, fp
0f388     08 4E 85 F1 | 	sub	fp, #8
0f38c     01 12 06 F1 | 	add	arg01, #1
0f390     09 13 52 F6 | 	abs	arg01, arg01 wc
0f394     1F 24 C6 C9 |  if_b	decod	local04, #31
0f398     00 24 06 36 |  if_ae	mov	local04, #0
0f39c     DC 4B B1 FD | 	call	#__system___float_fromuns
0f3a0     12 FB 61 F5 | 	xor	result1, local04
0f3a4     FD 14 02 F6 | 	mov	arg02, result1
0f3a8     10 13 02 F6 | 	mov	arg01, local02
0f3ac     D0 4F B1 FD | 	call	#__system___float_mul
0f3b0     FD 12 02 F6 | 	mov	arg01, result1
0f3b4     28 59 B1 FD | 	call	#__system____builtin_sinf
0f3b8     FD 14 02 F6 | 	mov	arg02, result1
0f3bc     11 13 02 F6 | 	mov	arg01, local03
0f3c0     BC 4F B1 FD | 	call	#__system___float_mul
0f3c4     FD 14 02 F6 | 	mov	arg02, result1
0f3c8     24 4E 05 F1 | 	add	fp, #36
0f3cc     A7 12 02 FB | 	rdlong	arg01, fp
0f3d0     24 4E 85 F1 | 	sub	fp, #36
0f3d4     D8 4B B1 FD | 	call	#__system___float_add
0f3d8     24 4E 05 F1 | 	add	fp, #36
0f3dc     A7 FA 61 FC | 	wrlong	result1, fp
0f3e0     1C 4E 85 F1 | 	sub	fp, #28
0f3e4     A7 22 02 FB | 	rdlong	local03, fp
0f3e8     01 22 06 F1 | 	add	local03, #1
0f3ec     A7 22 62 FC | 	wrlong	local03, fp
0f3f0     10 22 56 F2 | 	cmps	local03, #16 wc
0f3f4     14 FF 9F CD |  if_b	jmp	#LR__1301
0f3f8     08 4E 05 F1 | 	add	fp, #8
0f3fc     A7 22 02 FB | 	rdlong	local03, fp
0f400     0B 22 66 F0 | 	shl	local03, #11
0f404     0C 4E 85 F1 | 	sub	fp, #12
0f408     A7 20 02 FB | 	rdlong	local02, fp
0f40c     01 20 66 F0 | 	shl	local02, #1
0f410     10 23 02 F1 | 	add	local03, local02
0f414     20 4E 05 F1 | 	add	fp, #32
0f418     A7 12 02 FB | 	rdlong	arg01, fp
0f41c     24 4E 85 F1 | 	sub	fp, #36
0f420     01 14 06 F6 | 	mov	arg02, #1
0f424     20 54 B1 FD | 	call	#__system___float_tointeger
0f428     FD 14 02 F6 | 	mov	arg02, result1
0f42c     11 13 02 F6 | 	mov	arg01, local03
0f430     A4 ED B0 FD | 	call	#_psdpoke
0f434     04 4E 05 F1 | 	add	fp, #4
0f438     A7 22 02 FB | 	rdlong	local03, fp
0f43c     01 22 06 F1 | 	add	local03, #1
0f440     A7 22 62 FC | 	wrlong	local03, fp
0f444     04 4E 85 F1 | 	sub	fp, #4
0f448     02 00 00 FF 
0f44c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f450     A8 FE 9F CD |  if_b	jmp	#LR__1300
0f454                 | LR__1302
0f454                 | LR__1303
0f454     A7 F0 03 F6 | 	mov	ptra, fp
0f458     B2 00 A0 FD | 	call	#popregs_
0f45c                 | _do_defsnd_ret
0f45c     2D 00 64 FD | 	ret
0f460                 | 
0f460                 | ' 
0f460                 | ' '-------------------- defsprite
0f460                 | ' 
0f460                 | ' sub do_defsprite
0f460                 | _do_defsprite
0f460     07 4A 05 F6 | 	mov	COUNT_, #7
0f464     A8 00 A0 FD | 	call	#pushregs_
0f468     60 F0 07 F1 | 	add	ptra, #96
0f46c     A8 C3 BF FD | 	call	#_pop
0f470     FD 16 02 F6 | 	mov	arg03, result1
0f474     FE 14 02 F6 | 	mov	arg02, result2
0f478     FF 12 02 F6 | 	mov	arg01, result3
0f47c     30 4E 05 F1 | 	add	fp, #48
0f480     A7 16 62 FC | 	wrlong	arg03, fp
0f484     04 4E 05 F1 | 	add	fp, #4
0f488     A7 14 62 FC | 	wrlong	arg02, fp
0f48c     04 4E 05 F1 | 	add	fp, #4
0f490     A7 12 62 FC | 	wrlong	arg01, fp
0f494     38 4E 85 F1 | 	sub	fp, #56
0f498     7C C3 BF FD | 	call	#_pop
0f49c     FD 16 02 F6 | 	mov	arg03, result1
0f4a0     FE 14 02 F6 | 	mov	arg02, result2
0f4a4     FF 12 02 F6 | 	mov	arg01, result3
0f4a8     24 4E 05 F1 | 	add	fp, #36
0f4ac     A7 16 62 FC | 	wrlong	arg03, fp
0f4b0     04 4E 05 F1 | 	add	fp, #4
0f4b4     A7 14 62 FC | 	wrlong	arg02, fp
0f4b8     04 4E 05 F1 | 	add	fp, #4
0f4bc     A7 12 62 FC | 	wrlong	arg01, fp
0f4c0     2C 4E 85 F1 | 	sub	fp, #44
0f4c4     50 C3 BF FD | 	call	#_pop
0f4c8     FD 16 02 F6 | 	mov	arg03, result1
0f4cc     FE 14 02 F6 | 	mov	arg02, result2
0f4d0     FF 12 02 F6 | 	mov	arg01, result3
0f4d4     18 4E 05 F1 | 	add	fp, #24
0f4d8     A7 16 62 FC | 	wrlong	arg03, fp
0f4dc     04 4E 05 F1 | 	add	fp, #4
0f4e0     A7 14 62 FC | 	wrlong	arg02, fp
0f4e4     04 4E 05 F1 | 	add	fp, #4
0f4e8     A7 12 62 FC | 	wrlong	arg01, fp
0f4ec     20 4E 85 F1 | 	sub	fp, #32
0f4f0     24 C3 BF FD | 	call	#_pop
0f4f4     FD 16 02 F6 | 	mov	arg03, result1
0f4f8     FE 14 02 F6 | 	mov	arg02, result2
0f4fc     FF 12 02 F6 | 	mov	arg01, result3
0f500     0C 4E 05 F1 | 	add	fp, #12
0f504     A7 16 62 FC | 	wrlong	arg03, fp
0f508     04 4E 05 F1 | 	add	fp, #4
0f50c     A7 14 62 FC | 	wrlong	arg02, fp
0f510     04 4E 05 F1 | 	add	fp, #4
0f514     A7 12 62 FC | 	wrlong	arg01, fp
0f518     14 4E 85 F1 | 	sub	fp, #20
0f51c     F8 C2 BF FD | 	call	#_pop
0f520     FF 16 02 F6 | 	mov	arg03, result3
0f524     A7 FA 61 FC | 	wrlong	result1, fp
0f528     04 4E 05 F1 | 	add	fp, #4
0f52c     A7 FC 61 FC | 	wrlong	result2, fp
0f530     04 4E 05 F1 | 	add	fp, #4
0f534     A7 16 62 FC | 	wrlong	arg03, fp
0f538     08 4E 85 F1 | 	sub	fp, #8
0f53c     A7 12 02 F6 | 	mov	arg01, fp
0f540     B8 C4 BF FD | 	call	#_converttoint
0f544     3C 4E 05 F1 | 	add	fp, #60
0f548     A7 FA 61 FC | 	wrlong	result1, fp
0f54c     30 4E 85 F1 | 	sub	fp, #48
0f550     A7 12 02 F6 | 	mov	arg01, fp
0f554     0C 4E 85 F1 | 	sub	fp, #12
0f558     A0 C4 BF FD | 	call	#_converttoint
0f55c     40 4E 05 F1 | 	add	fp, #64
0f560     A7 FA 61 FC | 	wrlong	result1, fp
0f564     28 4E 85 F1 | 	sub	fp, #40
0f568     A7 12 02 F6 | 	mov	arg01, fp
0f56c     18 4E 85 F1 | 	sub	fp, #24
0f570     88 C4 BF FD | 	call	#_converttoint
0f574     44 4E 05 F1 | 	add	fp, #68
0f578     A7 FA 61 FC | 	wrlong	result1, fp
0f57c     20 4E 85 F1 | 	sub	fp, #32
0f580     A7 12 02 F6 | 	mov	arg01, fp
0f584     24 4E 85 F1 | 	sub	fp, #36
0f588     70 C4 BF FD | 	call	#_converttoint
0f58c     48 4E 05 F1 | 	add	fp, #72
0f590     A7 FA 61 FC | 	wrlong	result1, fp
0f594     18 4E 85 F1 | 	sub	fp, #24
0f598     A7 12 02 F6 | 	mov	arg01, fp
0f59c     30 4E 85 F1 | 	sub	fp, #48
0f5a0     58 C4 BF FD | 	call	#_converttoint
0f5a4     4C 4E 05 F1 | 	add	fp, #76
0f5a8     A7 FA 61 FC | 	wrlong	result1, fp
0f5ac                 | ' 
0f5ac                 | ' t5=pop()
0f5ac                 | ' t4=pop()
0f5ac                 | ' t3=pop()
0f5ac                 | ' t2=pop()
0f5ac                 | ' t1=pop()
0f5ac                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0f5ac                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0f5ac     10 4E 85 F1 | 	sub	fp, #16
0f5b0     A7 16 02 FB | 	rdlong	arg03, fp
0f5b4     3C 4E 85 F1 | 	sub	fp, #60
0f5b8     02 16 66 F0 | 	shl	arg03, #2
0f5bc     51 00 00 FF 
0f5c0     68 E5 05 F1 | 	add	objptr, ##41832
0f5c4     F2 16 02 F1 | 	add	arg03, objptr
0f5c8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f5cc     51 00 00 FF 
0f5d0     68 E5 85 F1 | 	sub	objptr, ##41832
0f5d4     2C 00 90 AD |  if_e	jmp	#LR__1310
0f5d8     3C 4E 05 F1 | 	add	fp, #60
0f5dc     A7 16 02 FB | 	rdlong	arg03, fp
0f5e0     3C 4E 85 F1 | 	sub	fp, #60
0f5e4     02 16 66 F0 | 	shl	arg03, #2
0f5e8     51 00 00 FF 
0f5ec     68 E5 05 F1 | 	add	objptr, ##41832
0f5f0     F2 16 02 F1 | 	add	arg03, objptr
0f5f4     0B 13 02 FB | 	rdlong	arg01, arg03
0f5f8     51 00 00 FF 
0f5fc     68 E5 85 F1 | 	sub	objptr, ##41832
0f600     E0 61 B1 FD | 	call	#__system___gc_free
0f604                 | LR__1310
0f604     3C 4E 05 F1 | 	add	fp, #60
0f608     A7 1E 02 FB | 	rdlong	local01, fp
0f60c     0C 4E 05 F1 | 	add	fp, #12
0f610     A7 16 02 FB | 	rdlong	arg03, fp
0f614     04 4E 05 F1 | 	add	fp, #4
0f618     A7 14 02 FB | 	rdlong	arg02, fp
0f61c     0A 17 02 FD | 	qmul	arg03, arg02
0f620     02 1E 66 F0 | 	shl	local01, #2
0f624     51 00 00 FF 
0f628     68 E5 05 F1 | 	add	objptr, ##41832
0f62c     F2 1E 02 F1 | 	add	local01, objptr
0f630     4C 4E 85 F1 | 	sub	fp, #76
0f634     51 00 00 FF 
0f638     68 E5 85 F1 | 	sub	objptr, ##41832
0f63c     18 12 62 FD | 	getqx	arg01
0f640     64 60 B1 FD | 	call	#__system___gc_alloc_managed
0f644     0F FB 61 FC | 	wrlong	result1, local01
0f648                 | ' for y=a3 to a3+a5-1
0f648     44 4E 05 F1 | 	add	fp, #68
0f64c     A7 20 02 FB | 	rdlong	local02, fp
0f650     0C 4E 05 F1 | 	add	fp, #12
0f654     A7 20 62 FC | 	wrlong	local02, fp
0f658     0C 4E 85 F1 | 	sub	fp, #12
0f65c     A7 22 02 FB | 	rdlong	local03, fp
0f660     08 4E 05 F1 | 	add	fp, #8
0f664     A7 24 02 FB | 	rdlong	local04, fp
0f668     4C 4E 85 F1 | 	sub	fp, #76
0f66c     12 23 02 F1 | 	add	local03, local04
0f670                 | LR__1311
0f670     50 4E 05 F1 | 	add	fp, #80
0f674     A7 20 02 FB | 	rdlong	local02, fp
0f678     50 4E 85 F1 | 	sub	fp, #80
0f67c     11 21 52 F2 | 	cmps	local02, local03 wc
0f680     F4 00 90 3D |  if_ae	jmp	#LR__1314
0f684                 | '   for x=a2 to a4+a2-1
0f684     40 4E 05 F1 | 	add	fp, #64
0f688     A7 1E 02 FB | 	rdlong	local01, fp
0f68c     14 4E 05 F1 | 	add	fp, #20
0f690     A7 1E 62 FC | 	wrlong	local01, fp
0f694     0C 4E 85 F1 | 	sub	fp, #12
0f698     A7 26 02 FB | 	rdlong	local05, fp
0f69c     08 4E 85 F1 | 	sub	fp, #8
0f6a0     A7 28 02 FB | 	rdlong	local06, fp
0f6a4     40 4E 85 F1 | 	sub	fp, #64
0f6a8     14 27 02 F1 | 	add	local05, local06
0f6ac                 | LR__1312
0f6ac     54 4E 05 F1 | 	add	fp, #84
0f6b0     A7 1E 02 FB | 	rdlong	local01, fp
0f6b4     54 4E 85 F1 | 	sub	fp, #84
0f6b8     13 1F 52 F2 | 	cmps	local01, local05 wc
0f6bc     A0 00 90 3D |  if_ae	jmp	#LR__1313
0f6c0     3C 4E 05 F1 | 	add	fp, #60
0f6c4     A7 28 02 FB | 	rdlong	local06, fp
0f6c8     18 4E 05 F1 | 	add	fp, #24
0f6cc     A7 24 02 FB | 	rdlong	local04, fp
0f6d0     14 4E 85 F1 | 	sub	fp, #20
0f6d4     A7 20 02 FB | 	rdlong	local02, fp
0f6d8     10 4E 05 F1 | 	add	fp, #16
0f6dc     A7 1E 02 FB | 	rdlong	local01, fp
0f6e0     0F 17 02 F6 | 	mov	arg03, local01
0f6e4     0C 4E 85 F1 | 	sub	fp, #12
0f6e8     A7 14 02 FB | 	rdlong	arg02, fp
0f6ec     0A 17 82 F1 | 	sub	arg03, arg02
0f6f0     04 4E 05 F1 | 	add	fp, #4
0f6f4     A7 14 02 FB | 	rdlong	arg02, fp
0f6f8     0A 17 02 FD | 	qmul	arg03, arg02
0f6fc     02 28 66 F0 | 	shl	local06, #2
0f700     51 00 00 FF 
0f704     68 E5 05 F1 | 	add	objptr, ##41832
0f708     F2 28 02 F1 | 	add	local06, objptr
0f70c     14 29 02 FB | 	rdlong	local06, local06
0f710     12 2B 02 F6 | 	mov	local07, local04
0f714     10 2B 82 F1 | 	sub	local07, local02
0f718     51 00 00 FF 
0f71c     68 E5 85 F1 | 	sub	objptr, ##41832
0f720     F2 12 02 FB | 	rdlong	arg01, objptr
0f724     12 13 02 F1 | 	add	arg01, local04
0f728     48 4E 85 F1 | 	sub	fp, #72
0f72c     0A 1E 66 F0 | 	shl	local01, #10
0f730     0F 13 02 F1 | 	add	arg01, local01
0f734     18 24 62 FD | 	getqx	local04
0f738     12 2B 02 F1 | 	add	local07, local04
0f73c     14 2B 02 F1 | 	add	local07, local06
0f740     24 EB B0 FD | 	call	#_pspeek
0f744     15 FB 41 FC | 	wrbyte	result1, local07
0f748     54 4E 05 F1 | 	add	fp, #84
0f74c     A7 2A 02 FB | 	rdlong	local07, fp
0f750     01 2A 06 F1 | 	add	local07, #1
0f754     A7 2A 62 FC | 	wrlong	local07, fp
0f758     54 4E 85 F1 | 	sub	fp, #84
0f75c     4C FF 9F FD | 	jmp	#LR__1312
0f760                 | LR__1313
0f760     50 4E 05 F1 | 	add	fp, #80
0f764     A7 2A 02 FB | 	rdlong	local07, fp
0f768     01 2A 06 F1 | 	add	local07, #1
0f76c     A7 2A 62 FC | 	wrlong	local07, fp
0f770     50 4E 85 F1 | 	sub	fp, #80
0f774     F8 FE 9F FD | 	jmp	#LR__1311
0f778                 | LR__1314
0f778     3C 4E 05 F1 | 	add	fp, #60
0f77c     A7 2A 02 FB | 	rdlong	local07, fp
0f780     15 13 02 F6 | 	mov	arg01, local07
0f784     3C 4E 85 F1 | 	sub	fp, #60
0f788     02 2A 66 F0 | 	shl	local07, #2
0f78c     51 00 00 FF 
0f790     68 E5 05 F1 | 	add	objptr, ##41832
0f794     F2 2A 02 F1 | 	add	local07, objptr
0f798     15 15 02 FB | 	rdlong	arg02, local07
0f79c     51 00 00 FF 
0f7a0     68 E5 85 F1 | 	sub	objptr, ##41832
0f7a4     90 F7 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0f7a8     3C 4E 05 F1 | 	add	fp, #60
0f7ac     A7 12 02 FB | 	rdlong	arg01, fp
0f7b0     0C 4E 05 F1 | 	add	fp, #12
0f7b4     A7 14 02 FB | 	rdlong	arg02, fp
0f7b8     04 4E 05 F1 | 	add	fp, #4
0f7bc     A7 16 02 FB | 	rdlong	arg03, fp
0f7c0     4C 4E 85 F1 | 	sub	fp, #76
0f7c4     00 F8 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f7c8     A7 F0 03 F6 | 	mov	ptra, fp
0f7cc     B2 00 A0 FD | 	call	#popregs_
0f7d0                 | _do_defsprite_ret
0f7d0     2D 00 64 FD | 	ret
0f7d4                 | 
0f7d4                 | ' 
0f7d4                 | ' '-------------------- deg
0f7d4                 | ' 
0f7d4                 | ' sub do_deg
0f7d4                 | _do_deg
0f7d4     51 00 00 FF 
0f7d8     BC E5 05 F1 | 	add	objptr, ##41916
0f7dc     7D 47 9E FF 
0f7e0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0f7e4     04 E4 05 F1 | 	add	objptr, #4
0f7e8     97 32 A1 FF 
0f7ec     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0f7f0     51 00 00 FF 
0f7f4     C0 E5 85 F1 | 	sub	objptr, ##41920
0f7f8                 | _do_deg_ret
0f7f8     2D 00 64 FD | 	ret
0f7fc                 | 
0f7fc                 | ' 
0f7fc                 | ' '-------------------- delete
0f7fc                 | ' 
0f7fc                 | ' sub do_delete
0f7fc                 | _do_delete
0f7fc     05 4A 05 F6 | 	mov	COUNT_, #5
0f800     A8 00 A0 FD | 	call	#pushregs_
0f804     10 C0 BF FD | 	call	#_pop
0f808     FE 18 02 F6 | 	mov	arg04, result2
0f80c     FF 16 02 F6 | 	mov	arg03, result3
0f810     FD 1E 02 F6 | 	mov	local01, result1
0f814     0C 21 02 F6 | 	mov	local02, arg04
0f818     0B 23 02 F6 | 	mov	local03, arg03
0f81c                 | ' 
0f81c                 | ' t1=pop()
0f81c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0f81c     2B 22 0E F2 | 	cmp	local03, #43 wz
0f820     10 00 90 5D |  if_ne	jmp	#LR__1320
0f824     0F 13 02 F6 | 	mov	arg01, local01
0f828     64 C1 BF FD | 	call	#_convertstring
0f82c     FD 1E 02 F6 | 	mov	local01, result1
0f830     1F 22 06 F6 | 	mov	local03, #31
0f834                 | LR__1320
0f834                 | ' if t1.result_type<>result_string then printerror(15): return
0f834     1F 22 0E F2 | 	cmp	local03, #31 wz
0f838     10 00 90 AD |  if_e	jmp	#LR__1321
0f83c     0F 12 06 F6 | 	mov	arg01, #15
0f840     00 14 06 F6 | 	mov	arg02, #0
0f844     BC E7 B0 FD | 	call	#_printerror
0f848     E0 00 90 FD | 	jmp	#LR__1325
0f84c                 | LR__1321
0f84c                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
0f84c     4A 00 00 FF 
0f850     94 E4 05 F1 | 	add	objptr, ##38036
0f854     F2 12 02 FB | 	rdlong	arg01, objptr
0f858     4A 00 00 FF 
0f85c     94 E4 85 F1 | 	sub	objptr, ##38036
0f860     8C 01 00 FF 
0f864     EC 14 06 F6 | 	mov	arg02, ##@LR__5548
0f868     80 1D B1 FD | 	call	#__system___string_cmp
0f86c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f870     34 00 90 AD |  if_e	jmp	#LR__1322
0f874     4A 00 00 FF 
0f878     94 E4 05 F1 | 	add	objptr, ##38036
0f87c     F2 12 02 FB | 	rdlong	arg01, objptr
0f880     4A 00 00 FF 
0f884     94 E4 85 F1 | 	sub	objptr, ##38036
0f888     8C 01 00 FF 
0f88c     EE 14 06 F6 | 	mov	arg02, ##@LR__5549
0f890     8C 1D B1 FD | 	call	#__system___string_concat
0f894     FD 12 02 F6 | 	mov	arg01, result1
0f898     0F 15 02 F6 | 	mov	arg02, local01
0f89c     80 1D B1 FD | 	call	#__system___string_concat
0f8a0     FD 24 02 F6 | 	mov	local04, result1
0f8a4     14 00 90 FD | 	jmp	#LR__1323
0f8a8                 | LR__1322
0f8a8     8C 01 00 FF 
0f8ac     F0 12 06 F6 | 	mov	arg01, ##@LR__5550
0f8b0     0F 15 02 F6 | 	mov	arg02, local01
0f8b4     68 1D B1 FD | 	call	#__system___string_concat
0f8b8     FD 24 02 F6 | 	mov	local04, result1
0f8bc                 | LR__1323
0f8bc     12 13 02 F6 | 	mov	arg01, local04
0f8c0     CC 44 B1 FD | 	call	#__system___remove
0f8c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f8c8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0f8cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f8d0     FD 26 0A F6 | 	mov	local05, result1 wz
0f8d4                 | ' kill filename$
0f8d4                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
0f8d4     54 00 90 AD |  if_e	jmp	#LR__1324
0f8d8     00 12 06 F6 | 	mov	arg01, #0
0f8dc     10 7A B1 FD | 	call	#__system___getiolock_0570
0f8e0     FD 12 02 F6 | 	mov	arg01, result1
0f8e4     DC 1C B1 FD | 	call	#__system___lockmem
0f8e8     8C 01 00 FF 
0f8ec     F2 14 06 F6 | 	mov	arg02, ##@LR__5551
0f8f0     00 12 06 F6 | 	mov	arg01, #0
0f8f4     00 16 06 F6 | 	mov	arg03, #0
0f8f8     BC 29 B1 FD | 	call	#__system___basic_print_string
0f8fc     00 12 06 F6 | 	mov	arg01, #0
0f900     13 15 02 F6 | 	mov	arg02, local05
0f904     00 16 06 F6 | 	mov	arg03, #0
0f908     0A 18 06 F6 | 	mov	arg04, #10
0f90c     EC 29 B1 FD | 	call	#__system___basic_print_integer
0f910     00 12 06 F6 | 	mov	arg01, #0
0f914     0A 14 06 F6 | 	mov	arg02, #10
0f918     00 16 06 F6 | 	mov	arg03, #0
0f91c     40 29 B1 FD | 	call	#__system___basic_print_char
0f920     00 12 06 F6 | 	mov	arg01, #0
0f924     C8 79 B1 FD | 	call	#__system___getiolock_0570
0f928     FD 00 68 FC | 	wrlong	#0, result1
0f92c                 | LR__1324
0f92c                 | LR__1325
0f92c     A7 F0 03 F6 | 	mov	ptra, fp
0f930     B2 00 A0 FD | 	call	#popregs_
0f934                 | _do_delete_ret
0f934     2D 00 64 FD | 	ret
0f938                 | 
0f938                 | ' 
0f938                 | ' '-------------------- dir
0f938                 | ' 
0f938                 | ' sub do_dir
0f938                 | _do_dir
0f938     13 4A 05 F6 | 	mov	COUNT_, #19
0f93c     A8 00 A0 FD | 	call	#pushregs_
0f940     01 00 00 FF 
0f944     38 F0 07 F1 | 	add	ptra, ##568
0f948                 | ' 
0f948                 | ' print "Current directory: "; currentdir$ 
0f948     00 12 06 F6 | 	mov	arg01, #0
0f94c     A0 79 B1 FD | 	call	#__system___getiolock_0570
0f950     FD 12 02 F6 | 	mov	arg01, result1
0f954     6C 1C B1 FD | 	call	#__system___lockmem
0f958     8C 01 00 FF 
0f95c     2A 15 06 F6 | 	mov	arg02, ##@LR__5552
0f960     00 12 06 F6 | 	mov	arg01, #0
0f964     00 16 06 F6 | 	mov	arg03, #0
0f968     4C 29 B1 FD | 	call	#__system___basic_print_string
0f96c     4A 00 00 FF 
0f970     94 E4 05 F1 | 	add	objptr, ##38036
0f974     F2 14 02 FB | 	rdlong	arg02, objptr
0f978     4A 00 00 FF 
0f97c     94 E4 85 F1 | 	sub	objptr, ##38036
0f980     00 12 06 F6 | 	mov	arg01, #0
0f984     00 16 06 F6 | 	mov	arg03, #0
0f988     2C 29 B1 FD | 	call	#__system___basic_print_string
0f98c     00 12 06 F6 | 	mov	arg01, #0
0f990     0A 14 06 F6 | 	mov	arg02, #10
0f994     00 16 06 F6 | 	mov	arg03, #0
0f998     C4 28 B1 FD | 	call	#__system___basic_print_char
0f99c     01 1E 06 F6 | 	mov	local01, #1
0f9a0     00 12 06 F6 | 	mov	arg01, #0
0f9a4     48 79 B1 FD | 	call	#__system___getiolock_0570
0f9a8     FD 00 68 FC | 	wrlong	#0, result1
0f9ac     00 20 06 F6 | 	mov	local02, #0
0f9b0     00 22 06 F6 | 	mov	local03, #0
0f9b4                 | ' px=0
0f9b4                 | ' for i=0 to 127: filelist(i)="" : next i
0f9b4     00 24 06 F6 | 	mov	local04, #0
0f9b8     1C 4E 05 F1 | 	add	fp, #28
0f9bc     97 12 48 FB | 	callpa	#(@LR__1331-@LR__1330)>>2,fcache_load_ptr_
0f9c0                 | LR__1330
0f9c0     12 27 02 F6 | 	mov	local05, local04
0f9c4     02 26 66 F0 | 	shl	local05, #2
0f9c8     A7 26 02 F1 | 	add	local05, fp
0f9cc     8C 01 00 FF 
0f9d0     3E 29 06 F6 | 	mov	local06, ##@LR__5553
0f9d4     13 29 62 FC | 	wrlong	local06, local05
0f9d8     01 24 06 F1 | 	add	local04, #1
0f9dc     80 24 56 F2 | 	cmps	local04, #128 wc
0f9e0     DC FF 9F CD |  if_b	jmp	#LR__1330
0f9e4                 | LR__1331
0f9e4     1C 4E 85 F1 | 	sub	fp, #28
0f9e8     8C 01 00 FF 
0f9ec     3F 13 06 F6 | 	mov	arg01, ##@LR__5554
0f9f0     10 14 06 F6 | 	mov	arg02, #16
0f9f4     30 7A B1 FD | 	call	#__system___basic_dir
0f9f8     FD 2A 02 F6 | 	mov	local07, result1
0f9fc     00 2C 06 F6 | 	mov	local08, #0
0fa00                 | ' filename=dir$("*", fbDirectory)
0fa00                 | ' n=0
0fa00                 | ' while filename <> "" andalso filename <> nil andalso n<128
0fa00                 | LR__1332
0fa00     8C 01 00 FF 
0fa04     41 2F 06 F6 | 	mov	local09, ##@LR__5555
0fa08     15 13 02 F6 | 	mov	arg01, local07
0fa0c     17 15 02 F6 | 	mov	arg02, local09
0fa10     D8 1B B1 FD | 	call	#__system___string_cmp
0fa14     00 FA 0D F2 | 	cmp	result1, #0 wz
0fa18     68 00 90 AD |  if_e	jmp	#LR__1333
0fa1c     00 2E 06 F6 | 	mov	local09, #0
0fa20     15 13 02 F6 | 	mov	arg01, local07
0fa24     00 14 06 F6 | 	mov	arg02, #0
0fa28     C0 1B B1 FD | 	call	#__system___string_cmp
0fa2c     00 FA 0D F2 | 	cmp	result1, #0 wz
0fa30     50 00 90 AD |  if_e	jmp	#LR__1333
0fa34     80 2C 56 F2 | 	cmps	local08, #128 wc
0fa38     48 00 90 3D |  if_ae	jmp	#LR__1333
0fa3c     8C 01 00 FF 
0fa40     42 13 06 F6 | 	mov	arg01, ##@LR__5556
0fa44     15 15 02 F6 | 	mov	arg02, local07
0fa48     D4 1B B1 FD | 	call	#__system___string_concat
0fa4c     FD 2A 02 F6 | 	mov	local07, result1
0fa50     16 27 02 F6 | 	mov	local05, local08
0fa54     02 26 66 F0 | 	shl	local05, #2
0fa58     1C 4E 05 F1 | 	add	fp, #28
0fa5c     A7 26 02 F1 | 	add	local05, fp
0fa60     13 2B 62 FC | 	wrlong	local07, local05
0fa64     01 2C 06 F1 | 	add	local08, #1
0fa68     00 26 06 F6 | 	mov	local05, #0
0fa6c     00 12 06 F6 | 	mov	arg01, #0
0fa70     00 14 06 F6 | 	mov	arg02, #0
0fa74     1C 4E 85 F1 | 	sub	fp, #28
0fa78     AC 79 B1 FD | 	call	#__system___basic_dir
0fa7c     FD 2A 02 F6 | 	mov	local07, result1
0fa80     7C FF 9F FD | 	jmp	#LR__1332
0fa84                 | LR__1333
0fa84                 | ' for i=0 to n-1			' now sort this
0fa84     00 24 06 F6 | 	mov	local04, #0
0fa88     16 31 02 F6 | 	mov	local10, local08
0fa8c                 | LR__1334
0fa8c     18 25 52 F2 | 	cmps	local04, local10 wc
0fa90     DC 00 90 3D |  if_ae	jmp	#LR__1338
0fa94     00 32 06 F6 | 	mov	local11, #0
0fa98                 | '   swapped=false
0fa98                 | '   for j=0 to n-i-2
0fa98     00 34 06 F6 | 	mov	local12, #0
0fa9c     16 37 02 F6 | 	mov	local13, local08
0faa0     12 37 82 F1 | 	sub	local13, local04
0faa4     01 36 86 F1 | 	sub	local13, #1
0faa8                 | LR__1335
0faa8     1B 35 52 F2 | 	cmps	local12, local13 wc
0faac     B0 00 90 3D |  if_ae	jmp	#LR__1337
0fab0                 | '     if filelist(j) > filelist(j+1) then
0fab0     1A 2F 02 F6 | 	mov	local09, local12
0fab4     02 2E 66 F0 | 	shl	local09, #2
0fab8     1C 4E 05 F1 | 	add	fp, #28
0fabc     A7 2E 02 F1 | 	add	local09, fp
0fac0     17 13 02 FB | 	rdlong	arg01, local09
0fac4     1A 2F 02 F6 | 	mov	local09, local12
0fac8     01 2E 06 F1 | 	add	local09, #1
0facc     17 29 02 F6 | 	mov	local06, local09
0fad0     02 28 66 F0 | 	shl	local06, #2
0fad4     A7 1E 02 F6 | 	mov	local01, fp
0fad8     A7 28 02 F1 | 	add	local06, fp
0fadc     14 27 02 FB | 	rdlong	local05, local06
0fae0     13 15 02 F6 | 	mov	arg02, local05
0fae4     1C 4E 85 F1 | 	sub	fp, #28
0fae8     00 1B B1 FD | 	call	#__system___string_cmp
0faec     01 FA 55 F2 | 	cmps	result1, #1 wc
0faf0     64 00 90 CD |  if_b	jmp	#LR__1336
0faf4     1A 2F 02 F6 | 	mov	local09, local12
0faf8     01 2E 06 F1 | 	add	local09, #1
0fafc     02 2E 66 F0 | 	shl	local09, #2
0fb00     1C 4E 05 F1 | 	add	fp, #28
0fb04     A7 2E 02 F1 | 	add	local09, fp
0fb08     17 33 02 FB | 	rdlong	local11, local09
0fb0c     1A 29 02 F6 | 	mov	local06, local12
0fb10     02 28 66 F0 | 	shl	local06, #2
0fb14     A7 28 02 F1 | 	add	local06, fp
0fb18     14 27 02 FB | 	rdlong	local05, local06
0fb1c     1A 2F 02 F6 | 	mov	local09, local12
0fb20     17 29 02 F6 | 	mov	local06, local09
0fb24     02 28 66 F0 | 	shl	local06, #2
0fb28     A7 1E 02 F6 | 	mov	local01, fp
0fb2c     A7 28 02 F1 | 	add	local06, fp
0fb30     14 33 62 FC | 	wrlong	local11, local06
0fb34     1A 21 02 F6 | 	mov	local02, local12
0fb38     01 20 06 F1 | 	add	local02, #1
0fb3c     10 39 02 F6 | 	mov	local14, local02
0fb40     02 38 66 F0 | 	shl	local14, #2
0fb44     A7 3A 02 F6 | 	mov	local15, fp
0fb48     A7 38 02 F1 | 	add	local14, fp
0fb4c     1C 27 62 FC | 	wrlong	local05, local14
0fb50     01 32 66 F6 | 	neg	local11, #1
0fb54     1C 4E 85 F1 | 	sub	fp, #28
0fb58                 | LR__1336
0fb58     01 34 06 F1 | 	add	local12, #1
0fb5c     48 FF 9F FD | 	jmp	#LR__1335
0fb60                 | LR__1337
0fb60                 | ' if not swapped then exit for
0fb60     19 3D 22 F6 | 	not	local16, local11
0fb64     00 3C 0E F2 | 	cmp	local16, #0 wz
0fb68     01 24 06 A1 |  if_e	add	local04, #1
0fb6c     1C FF 9F AD |  if_e	jmp	#LR__1334
0fb70                 | LR__1338
0fb70                 | ' for i=0 to n-1
0fb70     00 24 06 F6 | 	mov	local04, #0
0fb74     16 3F 02 F6 | 	mov	local17, local08
0fb78                 | LR__1339
0fb78     1F 25 52 F2 | 	cmps	local04, local17 wc
0fb7c     94 00 90 3D |  if_ae	jmp	#LR__1341
0fb80                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0fb80     00 12 06 F6 | 	mov	arg01, #0
0fb84     68 77 B1 FD | 	call	#__system___getiolock_0570
0fb88     FD 12 02 F6 | 	mov	arg01, result1
0fb8c     34 1A B1 FD | 	call	#__system___lockmem
0fb90     12 21 02 F6 | 	mov	local02, local04
0fb94     02 20 66 F0 | 	shl	local02, #2
0fb98     1C 4E 05 F1 | 	add	fp, #28
0fb9c     A7 38 02 F6 | 	mov	local14, fp
0fba0     A7 20 02 F1 | 	add	local02, fp
0fba4     10 15 02 FB | 	rdlong	arg02, local02
0fba8     00 1E 06 F6 | 	mov	local01, #0
0fbac     00 12 06 F6 | 	mov	arg01, #0
0fbb0     00 16 06 F6 | 	mov	arg03, #0
0fbb4     1C 4E 85 F1 | 	sub	fp, #28
0fbb8     FC 26 B1 FD | 	call	#__system___basic_print_string
0fbbc     00 12 06 F6 | 	mov	arg01, #0
0fbc0     2C 77 B1 FD | 	call	#__system___getiolock_0570
0fbc4     FD 00 68 FC | 	wrlong	#0, result1
0fbc8     40 22 06 F1 | 	add	local03, #64
0fbcc     11 13 02 F6 | 	mov	arg01, local03
0fbd0     40 00 B1 FD | 	call	#_hg010b_spin2_setcursorx
0fbd4     00 23 56 F2 | 	cmps	local03, #256 wc
0fbd8     30 00 90 CD |  if_b	jmp	#LR__1340
0fbdc     00 22 06 F6 | 	mov	local03, #0
0fbe0     00 12 06 F6 | 	mov	arg01, #0
0fbe4     08 77 B1 FD | 	call	#__system___getiolock_0570
0fbe8     FD 12 02 F6 | 	mov	arg01, result1
0fbec     D4 19 B1 FD | 	call	#__system___lockmem
0fbf0     00 12 06 F6 | 	mov	arg01, #0
0fbf4     0A 14 06 F6 | 	mov	arg02, #10
0fbf8     00 16 06 F6 | 	mov	arg03, #0
0fbfc     60 26 B1 FD | 	call	#__system___basic_print_char
0fc00     00 12 06 F6 | 	mov	arg01, #0
0fc04     E8 76 B1 FD | 	call	#__system___getiolock_0570
0fc08     FD 00 68 FC | 	wrlong	#0, result1
0fc0c                 | LR__1340
0fc0c     01 24 06 F1 | 	add	local04, #1
0fc10     64 FF 9F FD | 	jmp	#LR__1339
0fc14                 | LR__1341
0fc14                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0fc14     80 2C 56 F2 | 	cmps	local08, #128 wc
0fc18     44 00 90 CD |  if_b	jmp	#LR__1342
0fc1c     00 12 06 F6 | 	mov	arg01, #0
0fc20     CC 76 B1 FD | 	call	#__system___getiolock_0570
0fc24     FD 12 02 F6 | 	mov	arg01, result1
0fc28     98 19 B1 FD | 	call	#__system___lockmem
0fc2c     8C 01 00 FF 
0fc30     49 15 06 F6 | 	mov	arg02, ##@LR__5557
0fc34     00 12 06 F6 | 	mov	arg01, #0
0fc38     00 16 06 F6 | 	mov	arg03, #0
0fc3c     78 26 B1 FD | 	call	#__system___basic_print_string
0fc40     00 12 06 F6 | 	mov	arg01, #0
0fc44     0A 14 06 F6 | 	mov	arg02, #10
0fc48     00 16 06 F6 | 	mov	arg03, #0
0fc4c     10 26 B1 FD | 	call	#__system___basic_print_char
0fc50     00 12 06 F6 | 	mov	arg01, #0
0fc54     98 76 B1 FD | 	call	#__system___getiolock_0570
0fc58     FD 00 68 FC | 	wrlong	#0, result1
0fc5c     00 1E 06 F6 | 	mov	local01, #0
0fc60                 | LR__1342
0fc60                 | ' print
0fc60     00 12 06 F6 | 	mov	arg01, #0
0fc64     88 76 B1 FD | 	call	#__system___getiolock_0570
0fc68     FD 12 02 F6 | 	mov	arg01, result1
0fc6c     54 19 B1 FD | 	call	#__system___lockmem
0fc70     00 12 06 F6 | 	mov	arg01, #0
0fc74     0A 14 06 F6 | 	mov	arg02, #10
0fc78     00 16 06 F6 | 	mov	arg03, #0
0fc7c     E0 25 B1 FD | 	call	#__system___basic_print_char
0fc80     00 12 06 F6 | 	mov	arg01, #0
0fc84     68 76 B1 FD | 	call	#__system___getiolock_0570
0fc88     FD 00 68 FC | 	wrlong	#0, result1
0fc8c     00 28 06 F6 | 	mov	local06, #0
0fc90     00 2C 06 F6 | 	mov	local08, #0
0fc94     00 22 06 F6 | 	mov	local03, #0
0fc98                 | ' return cursor_y
0fc98     3E E4 05 F1 | 	add	objptr, #62
0fc9c     F2 40 C2 FA | 	rdbyte	local18, objptr
0fca0     3E E4 85 F1 | 	sub	objptr, #62
0fca4     8C 01 00 FF 
0fca8     7B 13 06 F6 | 	mov	arg01, ##@LR__5558
0fcac     21 14 06 F6 | 	mov	arg02, #33
0fcb0     74 77 B1 FD | 	call	#__system___basic_dir
0fcb4     FD 2A 02 F6 | 	mov	local07, result1
0fcb8                 | ' n=0
0fcb8                 | ' px=0: py=v.getcursory()
0fcb8                 | ' filename = dir$("*", fbNormal )   
0fcb8                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0fcb8                 | LR__1343
0fcb8     8C 01 00 FF 
0fcbc     7D 2F 06 F6 | 	mov	local09, ##@LR__5559
0fcc0     15 13 02 F6 | 	mov	arg01, local07
0fcc4     17 15 02 F6 | 	mov	arg02, local09
0fcc8     20 19 B1 FD | 	call	#__system___string_cmp
0fccc     00 FA 0D F2 | 	cmp	result1, #0 wz
0fcd0     54 00 90 AD |  if_e	jmp	#LR__1344
0fcd4     00 2E 06 F6 | 	mov	local09, #0
0fcd8     15 13 02 F6 | 	mov	arg01, local07
0fcdc     00 14 06 F6 | 	mov	arg02, #0
0fce0     08 19 B1 FD | 	call	#__system___string_cmp
0fce4     00 FA 0D F2 | 	cmp	result1, #0 wz
0fce8     3C 00 90 AD |  if_e	jmp	#LR__1344
0fcec     80 2C 56 F2 | 	cmps	local08, #128 wc
0fcf0     34 00 90 3D |  if_ae	jmp	#LR__1344
0fcf4     16 27 02 F6 | 	mov	local05, local08
0fcf8     02 26 66 F0 | 	shl	local05, #2
0fcfc     1C 4E 05 F1 | 	add	fp, #28
0fd00     A7 26 02 F1 | 	add	local05, fp
0fd04     13 2B 62 FC | 	wrlong	local07, local05
0fd08     01 2C 06 F1 | 	add	local08, #1
0fd0c     00 26 06 F6 | 	mov	local05, #0
0fd10     00 12 06 F6 | 	mov	arg01, #0
0fd14     00 14 06 F6 | 	mov	arg02, #0
0fd18     1C 4E 85 F1 | 	sub	fp, #28
0fd1c     08 77 B1 FD | 	call	#__system___basic_dir
0fd20     FD 2A 02 F6 | 	mov	local07, result1
0fd24     90 FF 9F FD | 	jmp	#LR__1343
0fd28                 | LR__1344
0fd28                 | ' for i =0 to n-1
0fd28     00 24 06 F6 | 	mov	local04, #0
0fd2c                 | LR__1345
0fd2c     16 25 52 F2 | 	cmps	local04, local08 wc
0fd30     D8 00 90 3D |  if_ae	jmp	#LR__1349
0fd34     00 32 06 F6 | 	mov	local11, #0
0fd38                 | '   swapped=false
0fd38                 | '   for j=0 to n-i-2
0fd38     00 34 06 F6 | 	mov	local12, #0
0fd3c     16 43 02 F6 | 	mov	local19, local08
0fd40     12 43 82 F1 | 	sub	local19, local04
0fd44     01 42 86 F1 | 	sub	local19, #1
0fd48                 | LR__1346
0fd48     21 35 52 F2 | 	cmps	local12, local19 wc
0fd4c     AC 00 90 3D |  if_ae	jmp	#LR__1348
0fd50                 | '     if filelist(j) > filelist(j+1) then
0fd50     1A 2F 02 F6 | 	mov	local09, local12
0fd54     02 2E 66 F0 | 	shl	local09, #2
0fd58     1C 4E 05 F1 | 	add	fp, #28
0fd5c     A7 2E 02 F1 | 	add	local09, fp
0fd60     17 13 02 FB | 	rdlong	arg01, local09
0fd64     1A 2F 02 F6 | 	mov	local09, local12
0fd68     01 2E 06 F1 | 	add	local09, #1
0fd6c     17 29 02 F6 | 	mov	local06, local09
0fd70     02 28 66 F0 | 	shl	local06, #2
0fd74     A7 1E 02 F6 | 	mov	local01, fp
0fd78     A7 28 02 F1 | 	add	local06, fp
0fd7c     14 27 02 FB | 	rdlong	local05, local06
0fd80     13 15 02 F6 | 	mov	arg02, local05
0fd84     1C 4E 85 F1 | 	sub	fp, #28
0fd88     60 18 B1 FD | 	call	#__system___string_cmp
0fd8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd90     60 00 90 CD |  if_b	jmp	#LR__1347
0fd94     1A 2F 02 F6 | 	mov	local09, local12
0fd98     01 2E 06 F1 | 	add	local09, #1
0fd9c     02 2E 66 F0 | 	shl	local09, #2
0fda0     1C 4E 05 F1 | 	add	fp, #28
0fda4     A7 2E 02 F1 | 	add	local09, fp
0fda8     17 3D 02 FB | 	rdlong	local16, local09
0fdac     1A 29 02 F6 | 	mov	local06, local12
0fdb0     02 28 66 F0 | 	shl	local06, #2
0fdb4     A7 28 02 F1 | 	add	local06, fp
0fdb8     14 27 02 FB | 	rdlong	local05, local06
0fdbc     1A 2F 02 F6 | 	mov	local09, local12
0fdc0     17 29 02 F6 | 	mov	local06, local09
0fdc4     02 28 66 F0 | 	shl	local06, #2
0fdc8     A7 1E 02 F6 | 	mov	local01, fp
0fdcc     A7 28 02 F1 | 	add	local06, fp
0fdd0     14 3D 62 FC | 	wrlong	local16, local06
0fdd4     1A 39 02 F6 | 	mov	local14, local12
0fdd8     01 38 06 F1 | 	add	local14, #1
0fddc     02 38 66 F0 | 	shl	local14, #2
0fde0     A7 3A 02 F6 | 	mov	local15, fp
0fde4     A7 38 02 F1 | 	add	local14, fp
0fde8     1C 27 62 FC | 	wrlong	local05, local14
0fdec     01 32 66 F6 | 	neg	local11, #1
0fdf0     1C 4E 85 F1 | 	sub	fp, #28
0fdf4                 | LR__1347
0fdf4     01 34 06 F1 | 	add	local12, #1
0fdf8     4C FF 9F FD | 	jmp	#LR__1346
0fdfc                 | LR__1348
0fdfc                 | ' if not swapped then exit for
0fdfc     19 3D 22 F6 | 	not	local16, local11
0fe00     00 3C 0E F2 | 	cmp	local16, #0 wz
0fe04     01 24 06 A1 |  if_e	add	local04, #1
0fe08     20 FF 9F AD |  if_e	jmp	#LR__1345
0fe0c                 | LR__1349
0fe0c                 | ' for i=0 to n-1
0fe0c     00 24 06 F6 | 	mov	local04, #0
0fe10                 | LR__1350
0fe10     16 25 52 F2 | 	cmps	local04, local08 wc
0fe14     8C 00 90 3D |  if_ae	jmp	#LR__1352
0fe18                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0fe18     00 12 06 F6 | 	mov	arg01, #0
0fe1c     D0 74 B1 FD | 	call	#__system___getiolock_0570
0fe20     FD 12 02 F6 | 	mov	arg01, result1
0fe24     9C 17 B1 FD | 	call	#__system___lockmem
0fe28     12 21 02 F6 | 	mov	local02, local04
0fe2c     02 20 66 F0 | 	shl	local02, #2
0fe30     1C 4E 05 F1 | 	add	fp, #28
0fe34     A7 20 02 F1 | 	add	local02, fp
0fe38     10 15 02 FB | 	rdlong	arg02, local02
0fe3c     00 12 06 F6 | 	mov	arg01, #0
0fe40     00 16 06 F6 | 	mov	arg03, #0
0fe44     1C 4E 85 F1 | 	sub	fp, #28
0fe48     6C 24 B1 FD | 	call	#__system___basic_print_string
0fe4c     00 12 06 F6 | 	mov	arg01, #0
0fe50     9C 74 B1 FD | 	call	#__system___getiolock_0570
0fe54     FD 00 68 FC | 	wrlong	#0, result1
0fe58     40 22 06 F1 | 	add	local03, #64
0fe5c     11 13 02 F6 | 	mov	arg01, local03
0fe60     B0 FD B0 FD | 	call	#_hg010b_spin2_setcursorx
0fe64     00 23 56 F2 | 	cmps	local03, #256 wc
0fe68     30 00 90 CD |  if_b	jmp	#LR__1351
0fe6c     00 22 06 F6 | 	mov	local03, #0
0fe70     00 12 06 F6 | 	mov	arg01, #0
0fe74     78 74 B1 FD | 	call	#__system___getiolock_0570
0fe78     FD 12 02 F6 | 	mov	arg01, result1
0fe7c     44 17 B1 FD | 	call	#__system___lockmem
0fe80     00 12 06 F6 | 	mov	arg01, #0
0fe84     0A 14 06 F6 | 	mov	arg02, #10
0fe88     00 16 06 F6 | 	mov	arg03, #0
0fe8c     D0 23 B1 FD | 	call	#__system___basic_print_char
0fe90     00 12 06 F6 | 	mov	arg01, #0
0fe94     58 74 B1 FD | 	call	#__system___getiolock_0570
0fe98     FD 00 68 FC | 	wrlong	#0, result1
0fe9c                 | LR__1351
0fe9c     01 24 06 F1 | 	add	local04, #1
0fea0     6C FF 9F FD | 	jmp	#LR__1350
0fea4                 | LR__1352
0fea4                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0fea4     80 2C 56 F2 | 	cmps	local08, #128 wc
0fea8     40 00 90 CD |  if_b	jmp	#LR__1353
0feac     00 12 06 F6 | 	mov	arg01, #0
0feb0     3C 74 B1 FD | 	call	#__system___getiolock_0570
0feb4     FD 12 02 F6 | 	mov	arg01, result1
0feb8     08 17 B1 FD | 	call	#__system___lockmem
0febc     8C 01 00 FF 
0fec0     7E 15 06 F6 | 	mov	arg02, ##@LR__5560
0fec4     00 12 06 F6 | 	mov	arg01, #0
0fec8     00 16 06 F6 | 	mov	arg03, #0
0fecc     E8 23 B1 FD | 	call	#__system___basic_print_string
0fed0     00 12 06 F6 | 	mov	arg01, #0
0fed4     0A 14 06 F6 | 	mov	arg02, #10
0fed8     00 16 06 F6 | 	mov	arg03, #0
0fedc     80 23 B1 FD | 	call	#__system___basic_print_char
0fee0     00 12 06 F6 | 	mov	arg01, #0
0fee4     08 74 B1 FD | 	call	#__system___getiolock_0570
0fee8     FD 00 68 FC | 	wrlong	#0, result1
0feec                 | LR__1353
0feec                 | ' print
0feec     00 12 06 F6 | 	mov	arg01, #0
0fef0     FC 73 B1 FD | 	call	#__system___getiolock_0570
0fef4     FD 12 02 F6 | 	mov	arg01, result1
0fef8     C8 16 B1 FD | 	call	#__system___lockmem
0fefc     00 12 06 F6 | 	mov	arg01, #0
0ff00     0A 14 06 F6 | 	mov	arg02, #10
0ff04     00 16 06 F6 | 	mov	arg03, #0
0ff08     54 23 B1 FD | 	call	#__system___basic_print_char
0ff0c     00 12 06 F6 | 	mov	arg01, #0
0ff10     DC 73 B1 FD | 	call	#__system___getiolock_0570
0ff14     FD 00 68 FC | 	wrlong	#0, result1
0ff18     A7 F0 03 F6 | 	mov	ptra, fp
0ff1c     B2 00 A0 FD | 	call	#popregs_
0ff20                 | _do_dir_ret
0ff20     2D 00 64 FD | 	ret
0ff24                 | 
0ff24                 | ' 
0ff24                 | ' '-------------------- dpeek
0ff24                 | ' 
0ff24                 | ' sub do_dpeek
0ff24                 | _do_dpeek
0ff24     00 4A 05 F6 | 	mov	COUNT_, #0
0ff28     A8 00 A0 FD | 	call	#pushregs_
0ff2c     14 F0 07 F1 | 	add	ptra, #20
0ff30     E4 B8 BF FD | 	call	#_pop
0ff34     A7 FA 61 FC | 	wrlong	result1, fp
0ff38     04 4E 05 F1 | 	add	fp, #4
0ff3c     A7 FC 61 FC | 	wrlong	result2, fp
0ff40     04 4E 05 F1 | 	add	fp, #4
0ff44     A7 FE 61 FC | 	wrlong	result3, fp
0ff48     08 4E 85 F1 | 	sub	fp, #8
0ff4c     A7 12 02 F6 | 	mov	arg01, fp
0ff50     A8 BA BF FD | 	call	#_converttoint
0ff54     0C 4E 05 F1 | 	add	fp, #12
0ff58     A7 FA 61 FC | 	wrlong	result1, fp
0ff5c                 | ' 
0ff5c                 | ' t1=pop()
0ff5c                 | ' a=converttoint(t1)
0ff5c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
0ff5c     0C 4E 85 F1 | 	sub	fp, #12
0ff60     00 04 00 FF 
0ff64     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0ff68     1C 00 90 3D |  if_ae	jmp	#LR__1360
0ff6c     0C 4E 05 F1 | 	add	fp, #12
0ff70     A7 12 02 FB | 	rdlong	arg01, fp
0ff74     09 FB E1 FA | 	rdword	result1, arg01
0ff78     04 4E 05 F1 | 	add	fp, #4
0ff7c     A7 FA 61 FC | 	wrlong	result1, fp
0ff80     10 4E 85 F1 | 	sub	fp, #16
0ff84     1C 00 90 FD | 	jmp	#LR__1361
0ff88                 | LR__1360
0ff88     0C 4E 05 F1 | 	add	fp, #12
0ff8c     A7 12 02 FB | 	rdlong	arg01, fp
0ff90     0C 4E 85 F1 | 	sub	fp, #12
0ff94     80 E3 B0 FD | 	call	#_psdpeek
0ff98     10 4E 05 F1 | 	add	fp, #16
0ff9c     A7 FA 61 FC | 	wrlong	result1, fp
0ffa0     10 4E 85 F1 | 	sub	fp, #16
0ffa4                 | LR__1361
0ffa4     08 4E 05 F1 | 	add	fp, #8
0ffa8     A7 3A 68 FC | 	wrlong	#29, fp
0ffac     08 4E 05 F1 | 	add	fp, #8
0ffb0     A7 12 02 FB | 	rdlong	arg01, fp
0ffb4     10 4E 85 F1 | 	sub	fp, #16
0ffb8     A7 12 62 FC | 	wrlong	arg01, fp
0ffbc     A7 12 02 F6 | 	mov	arg01, fp
0ffc0     EC B8 BF FD | 	call	#_push
0ffc4     A7 F0 03 F6 | 	mov	ptra, fp
0ffc8     B2 00 A0 FD | 	call	#popregs_
0ffcc                 | _do_dpeek_ret
0ffcc     2D 00 64 FD | 	ret
0ffd0                 | 
0ffd0                 | ' 
0ffd0                 | ' '-------------------- dpoke
0ffd0                 | ' 
0ffd0                 | ' sub do_dpoke
0ffd0                 | _do_dpoke
0ffd0     01 4A 05 F6 | 	mov	COUNT_, #1
0ffd4     A8 00 A0 FD | 	call	#pushregs_
0ffd8     20 F0 07 F1 | 	add	ptra, #32
0ffdc     38 B8 BF FD | 	call	#_pop
0ffe0     FD 14 02 F6 | 	mov	arg02, result1
0ffe4     FE 12 02 F6 | 	mov	arg01, result2
0ffe8     FF 1E 02 F6 | 	mov	local01, result3
0ffec     A7 14 62 FC | 	wrlong	arg02, fp
0fff0     04 4E 05 F1 | 	add	fp, #4
0fff4     A7 12 62 FC | 	wrlong	arg01, fp
0fff8     04 4E 05 F1 | 	add	fp, #4
0fffc     A7 1E 62 FC | 	wrlong	local01, fp
10000     08 4E 85 F1 | 	sub	fp, #8
10004     10 B8 BF FD | 	call	#_pop
10008     FF 1E 02 F6 | 	mov	local01, result3
1000c     0C 4E 05 F1 | 	add	fp, #12
10010     A7 FA 61 FC | 	wrlong	result1, fp
10014     04 4E 05 F1 | 	add	fp, #4
10018     A7 FC 61 FC | 	wrlong	result2, fp
1001c     04 4E 05 F1 | 	add	fp, #4
10020     A7 1E 62 FC | 	wrlong	local01, fp
10024     08 4E 85 F1 | 	sub	fp, #8
10028     A7 12 02 F6 | 	mov	arg01, fp
1002c     0C 4E 85 F1 | 	sub	fp, #12
10030     C8 B9 BF FD | 	call	#_converttoint
10034     18 4E 05 F1 | 	add	fp, #24
10038     A7 FA 61 FC | 	wrlong	result1, fp
1003c     18 4E 85 F1 | 	sub	fp, #24
10040     A7 12 02 F6 | 	mov	arg01, fp
10044     B4 B9 BF FD | 	call	#_converttoint
10048     1C 4E 05 F1 | 	add	fp, #28
1004c     A7 FA 61 FC | 	wrlong	result1, fp
10050                 | ' 
10050                 | ' t1=pop() 'value
10050                 | ' t2=pop() 
10050                 | ' a=converttoint(t2) : v=converttoint(t1)
10050                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
10050     04 4E 85 F1 | 	sub	fp, #4
10054     A7 1E 02 FB | 	rdlong	local01, fp
10058     18 4E 85 F1 | 	sub	fp, #24
1005c     00 04 00 FF 
10060     00 1E 16 F2 | 	cmp	local01, ##524288 wc
10064     1C 00 90 3D |  if_ae	jmp	#LR__1370
10068     18 4E 05 F1 | 	add	fp, #24
1006c     A7 12 02 FB | 	rdlong	arg01, fp
10070     04 4E 05 F1 | 	add	fp, #4
10074     A7 14 02 FB | 	rdlong	arg02, fp
10078     1C 4E 85 F1 | 	sub	fp, #28
1007c     09 15 52 FC | 	wrword	arg02, arg01
10080     18 00 90 FD | 	jmp	#LR__1371
10084                 | LR__1370
10084     18 4E 05 F1 | 	add	fp, #24
10088     A7 12 02 FB | 	rdlong	arg01, fp
1008c     04 4E 05 F1 | 	add	fp, #4
10090     A7 14 02 FB | 	rdlong	arg02, fp
10094     1C 4E 85 F1 | 	sub	fp, #28
10098     3C E1 B0 FD | 	call	#_psdpoke
1009c                 | LR__1371
1009c     A7 F0 03 F6 | 	mov	ptra, fp
100a0     B2 00 A0 FD | 	call	#popregs_
100a4                 | _do_dpoke_ret
100a4     2D 00 64 FD | 	ret
100a8                 | 
100a8                 | ' '-------------------- draw
100a8                 | ' 
100a8                 | ' sub do_draw
100a8                 | _do_draw
100a8     00 4A 05 F6 | 	mov	COUNT_, #0
100ac     A8 00 A0 FD | 	call	#pushregs_
100b0     20 F0 07 F1 | 	add	ptra, #32
100b4     60 B7 BF FD | 	call	#_pop
100b8     FD 1A 02 F6 | 	mov	arg05, result1
100bc     FE 18 02 F6 | 	mov	arg04, result2
100c0     FF 16 02 F6 | 	mov	arg03, result3
100c4     0C 4E 05 F1 | 	add	fp, #12
100c8     A7 1A 62 FC | 	wrlong	arg05, fp
100cc     04 4E 05 F1 | 	add	fp, #4
100d0     A7 18 62 FC | 	wrlong	arg04, fp
100d4     04 4E 05 F1 | 	add	fp, #4
100d8     A7 16 62 FC | 	wrlong	arg03, fp
100dc     14 4E 85 F1 | 	sub	fp, #20
100e0     34 B7 BF FD | 	call	#_pop
100e4     FF 1A 02 F6 | 	mov	arg05, result3
100e8     A7 FA 61 FC | 	wrlong	result1, fp
100ec     04 4E 05 F1 | 	add	fp, #4
100f0     A7 FC 61 FC | 	wrlong	result2, fp
100f4     04 4E 05 F1 | 	add	fp, #4
100f8     A7 1A 62 FC | 	wrlong	arg05, fp
100fc     08 4E 85 F1 | 	sub	fp, #8
10100     A7 12 02 F6 | 	mov	arg01, fp
10104     F4 B8 BF FD | 	call	#_converttoint
10108     18 4E 05 F1 | 	add	fp, #24
1010c     A7 FA 61 FC | 	wrlong	result1, fp
10110     0C 4E 85 F1 | 	sub	fp, #12
10114     A7 12 02 F6 | 	mov	arg01, fp
10118     0C 4E 85 F1 | 	sub	fp, #12
1011c     DC B8 BF FD | 	call	#_converttoint
10120     1C 4E 05 F1 | 	add	fp, #28
10124     A7 FA 61 FC | 	wrlong	result1, fp
10128     37 00 00 FF 
1012c     2C E4 05 F1 | 	add	objptr, ##28204
10130     F2 12 02 FB | 	rdlong	arg01, objptr
10134     04 E4 05 F1 | 	add	objptr, #4
10138     F2 14 02 FB | 	rdlong	arg02, objptr
1013c     04 4E 85 F1 | 	sub	fp, #4
10140     A7 16 02 FB | 	rdlong	arg03, fp
10144     FD 18 02 F6 | 	mov	arg04, result1
10148     18 4E 85 F1 | 	sub	fp, #24
1014c     08 E4 85 F1 | 	sub	objptr, #8
10150     F2 1A 02 FB | 	rdlong	arg05, objptr
10154     37 00 00 FF 
10158     28 E4 85 F1 | 	sub	objptr, ##28200
1015c     64 F1 B0 FD | 	call	#_hg010b_spin2_draw
10160     18 4E 05 F1 | 	add	fp, #24
10164     A7 1A 02 FB | 	rdlong	arg05, fp
10168     37 00 00 FF 
1016c     2C E4 05 F1 | 	add	objptr, ##28204
10170     F2 1A 62 FC | 	wrlong	arg05, objptr
10174     04 4E 05 F1 | 	add	fp, #4
10178     A7 1A 02 FB | 	rdlong	arg05, fp
1017c     1C 4E 85 F1 | 	sub	fp, #28
10180     04 E4 05 F1 | 	add	objptr, #4
10184     F2 1A 62 FC | 	wrlong	arg05, objptr
10188     37 00 00 FF 
1018c     30 E4 85 F1 | 	sub	objptr, ##28208
10190     A7 F0 03 F6 | 	mov	ptra, fp
10194     B2 00 A0 FD | 	call	#popregs_
10198                 | _do_draw_ret
10198     2D 00 64 FD | 	ret
1019c                 | 
1019c                 | ' 
1019c                 | ' '-------------------- else
1019c                 | ' 
1019c                 | ' sub do_else
1019c                 | _do_else
1019c     4A 00 00 FF 
101a0     7C E4 05 F1 | 	add	objptr, ##38012
101a4     F2 00 02 FB | 	rdlong	_var01, objptr
101a8     01 00 86 F1 | 	sub	_var01, #1
101ac     04 E4 05 F1 | 	add	objptr, #4
101b0     F2 00 62 FC | 	wrlong	_var01, objptr
101b4     4A 00 00 FF 
101b8     80 E4 85 F1 | 	sub	objptr, ##38016
101bc                 | _do_else_ret
101bc     2D 00 64 FD | 	ret
101c0                 | 
101c0                 | ' 
101c0                 | ' '-------------------- end
101c0                 | ' 
101c0                 | ' sub do_end
101c0                 | _do_end
101c0     4A 00 00 FF 
101c4     7C E4 05 F1 | 	add	objptr, ##38012
101c8     F2 00 02 FB | 	rdlong	_var01, objptr
101cc     01 00 86 F1 | 	sub	_var01, #1
101d0     04 E4 05 F1 | 	add	objptr, #4
101d4     F2 00 62 FC | 	wrlong	_var01, objptr
101d8     06 00 00 FF 
101dc     38 E4 05 F1 | 	add	objptr, ##3128
101e0     FF FF BF FF 
101e4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
101e8     50 00 00 FF 
101ec     B8 E4 85 F1 | 	sub	objptr, ##41144
101f0                 | _do_end_ret
101f0     2D 00 64 FD | 	ret
101f4                 | 
101f4                 | ' 
101f4                 | ' '-------------------- enter
101f4                 | ' 
101f4                 | ' sub do_enter
101f4                 | _do_enter
101f4     02 00 00 FF 
101f8     D2 12 06 F6 | 	mov	arg01, ##1234
101fc     64 22 B0 FD | 	call	#_do_load
10200                 | _do_enter_ret
10200     2D 00 64 FD | 	ret
10204                 | 
10204                 | ' 
10204                 | ' '------------------- error processing
10204                 | ' 
10204                 | ' sub do_error
10204                 | _do_error
10204     01 4A 05 F6 | 	mov	COUNT_, #1
10208     A8 00 A0 FD | 	call	#pushregs_
1020c     4A 00 00 FF 
10210     80 E4 05 F1 | 	add	objptr, ##38016
10214     F2 18 02 FB | 	rdlong	arg04, objptr
10218     0C 17 02 F6 | 	mov	arg03, arg04
1021c     01 16 66 F0 | 	shl	arg03, #1
10220     0C 17 02 F1 | 	add	arg03, arg04
10224     02 16 66 F0 | 	shl	arg03, #2
10228     03 00 00 FF 
1022c     04 E4 85 F1 | 	sub	objptr, ##1540
10230     F2 16 02 F1 | 	add	arg03, objptr
10234     0B 1F 02 FB | 	rdlong	local01, arg03
10238                 | ' r=compiledline(lineptr_e).result.uresult
10238                 | ' print "Error ";r;": ";errors$(r)
10238     00 12 06 F6 | 	mov	arg01, #0
1023c     47 00 00 FF 
10240     7C E4 85 F1 | 	sub	objptr, ##36476
10244     A8 70 B1 FD | 	call	#__system___getiolock_0570
10248     FD 12 02 F6 | 	mov	arg01, result1
1024c     74 13 B1 FD | 	call	#__system___lockmem
10250     8C 01 00 FF 
10254     B0 15 06 F6 | 	mov	arg02, ##@LR__5561
10258     00 12 06 F6 | 	mov	arg01, #0
1025c     00 16 06 F6 | 	mov	arg03, #0
10260     54 20 B1 FD | 	call	#__system___basic_print_string
10264     00 12 06 F6 | 	mov	arg01, #0
10268     0F 15 02 F6 | 	mov	arg02, local01
1026c     00 16 06 F6 | 	mov	arg03, #0
10270     0A 18 06 F6 | 	mov	arg04, #10
10274     C4 20 B1 FD | 	call	#__system___basic_print_unsigned
10278     8C 01 00 FF 
1027c     B7 15 06 F6 | 	mov	arg02, ##@LR__5562
10280     00 12 06 F6 | 	mov	arg01, #0
10284     00 16 06 F6 | 	mov	arg03, #0
10288     2C 20 B1 FD | 	call	#__system___basic_print_string
1028c     02 1E 66 F0 | 	shl	local01, #2
10290     45 00 00 FF 
10294     7C E4 05 F1 | 	add	objptr, ##35452
10298     F2 1E 02 F1 | 	add	local01, objptr
1029c     0F 15 02 FB | 	rdlong	arg02, local01
102a0     00 12 06 F6 | 	mov	arg01, #0
102a4     00 16 06 F6 | 	mov	arg03, #0
102a8     45 00 00 FF 
102ac     7C E4 85 F1 | 	sub	objptr, ##35452
102b0     04 20 B1 FD | 	call	#__system___basic_print_string
102b4     00 12 06 F6 | 	mov	arg01, #0
102b8     0A 14 06 F6 | 	mov	arg02, #10
102bc     00 16 06 F6 | 	mov	arg03, #0
102c0     9C 1F B1 FD | 	call	#__system___basic_print_char
102c4     00 12 06 F6 | 	mov	arg01, #0
102c8     24 70 B1 FD | 	call	#__system___getiolock_0570
102cc     FD 00 68 FC | 	wrlong	#0, result1
102d0     A7 F0 03 F6 | 	mov	ptra, fp
102d4     B2 00 A0 FD | 	call	#popregs_
102d8                 | _do_error_ret
102d8     2D 00 64 FD | 	ret
102dc                 | 
102dc                 | ' 
102dc                 | ' '-------------------- fcircle
102dc                 | ' 
102dc                 | ' sub do_fcircle
102dc                 | _do_fcircle
102dc     02 4A 05 F6 | 	mov	COUNT_, #2
102e0     A8 00 A0 FD | 	call	#pushregs_
102e4     24 F0 07 F1 | 	add	ptra, #36
102e8     2C B5 BF FD | 	call	#_pop
102ec     FD 14 02 F6 | 	mov	arg02, result1
102f0     FE 18 02 F6 | 	mov	arg04, result2
102f4     FF 16 02 F6 | 	mov	arg03, result3
102f8     18 4E 05 F1 | 	add	fp, #24
102fc     A7 14 62 FC | 	wrlong	arg02, fp
10300     04 4E 05 F1 | 	add	fp, #4
10304     A7 18 62 FC | 	wrlong	arg04, fp
10308     04 4E 05 F1 | 	add	fp, #4
1030c     A7 16 62 FC | 	wrlong	arg03, fp
10310     20 4E 85 F1 | 	sub	fp, #32
10314     00 B5 BF FD | 	call	#_pop
10318     FD 14 02 F6 | 	mov	arg02, result1
1031c     FE 18 02 F6 | 	mov	arg04, result2
10320     FF 16 02 F6 | 	mov	arg03, result3
10324     0C 4E 05 F1 | 	add	fp, #12
10328     A7 14 62 FC | 	wrlong	arg02, fp
1032c     04 4E 05 F1 | 	add	fp, #4
10330     A7 18 62 FC | 	wrlong	arg04, fp
10334     04 4E 05 F1 | 	add	fp, #4
10338     A7 16 62 FC | 	wrlong	arg03, fp
1033c     14 4E 85 F1 | 	sub	fp, #20
10340     D4 B4 BF FD | 	call	#_pop
10344     FF 14 02 F6 | 	mov	arg02, result3
10348     A7 FA 61 FC | 	wrlong	result1, fp
1034c     04 4E 05 F1 | 	add	fp, #4
10350     A7 FC 61 FC | 	wrlong	result2, fp
10354     04 4E 05 F1 | 	add	fp, #4
10358     A7 14 62 FC | 	wrlong	arg02, fp
1035c     08 4E 85 F1 | 	sub	fp, #8
10360     A7 12 02 F6 | 	mov	arg01, fp
10364     94 B6 BF FD | 	call	#_converttoint
10368     FD 1E 02 F6 | 	mov	local01, result1
1036c     0C 4E 05 F1 | 	add	fp, #12
10370     A7 12 02 F6 | 	mov	arg01, fp
10374     0C 4E 85 F1 | 	sub	fp, #12
10378     80 B6 BF FD | 	call	#_converttoint
1037c     FD 20 02 F6 | 	mov	local02, result1
10380     18 4E 05 F1 | 	add	fp, #24
10384     A7 12 02 F6 | 	mov	arg01, fp
10388     18 4E 85 F1 | 	sub	fp, #24
1038c     6C B6 BF FD | 	call	#_converttoint
10390     FD 16 02 F6 | 	mov	arg03, result1
10394     37 00 00 FF 
10398     28 E4 05 F1 | 	add	objptr, ##28200
1039c     F2 18 02 FB | 	rdlong	arg04, objptr
103a0     37 00 00 FF 
103a4     28 E4 85 F1 | 	sub	objptr, ##28200
103a8     0F 13 02 F6 | 	mov	arg01, local01
103ac     10 15 02 F6 | 	mov	arg02, local02
103b0     94 F3 B0 FD | 	call	#_hg010b_spin2_fcircle
103b4     A7 F0 03 F6 | 	mov	ptra, fp
103b8     B2 00 A0 FD | 	call	#popregs_
103bc                 | _do_fcircle_ret
103bc     2D 00 64 FD | 	ret
103c0                 | 
103c0                 | ' 
103c0                 | ' '-------------------- fill
103c0                 | ' 
103c0                 | ' sub do_fill
103c0                 | _do_fill
103c0     03 4A 05 F6 | 	mov	COUNT_, #3
103c4     A8 00 A0 FD | 	call	#pushregs_
103c8     30 F0 07 F1 | 	add	ptra, #48
103cc     48 B4 BF FD | 	call	#_pop
103d0     FD 16 02 F6 | 	mov	arg03, result1
103d4     FE 14 02 F6 | 	mov	arg02, result2
103d8     FF 18 02 F6 | 	mov	arg04, result3
103dc     24 4E 05 F1 | 	add	fp, #36
103e0     A7 16 62 FC | 	wrlong	arg03, fp
103e4     04 4E 05 F1 | 	add	fp, #4
103e8     A7 14 62 FC | 	wrlong	arg02, fp
103ec     04 4E 05 F1 | 	add	fp, #4
103f0     A7 18 62 FC | 	wrlong	arg04, fp
103f4     2C 4E 85 F1 | 	sub	fp, #44
103f8     1C B4 BF FD | 	call	#_pop
103fc     FD 16 02 F6 | 	mov	arg03, result1
10400     FE 14 02 F6 | 	mov	arg02, result2
10404     FF 18 02 F6 | 	mov	arg04, result3
10408     18 4E 05 F1 | 	add	fp, #24
1040c     A7 16 62 FC | 	wrlong	arg03, fp
10410     04 4E 05 F1 | 	add	fp, #4
10414     A7 14 62 FC | 	wrlong	arg02, fp
10418     04 4E 05 F1 | 	add	fp, #4
1041c     A7 18 62 FC | 	wrlong	arg04, fp
10420     20 4E 85 F1 | 	sub	fp, #32
10424     F0 B3 BF FD | 	call	#_pop
10428     FD 16 02 F6 | 	mov	arg03, result1
1042c     FE 14 02 F6 | 	mov	arg02, result2
10430     FF 18 02 F6 | 	mov	arg04, result3
10434     0C 4E 05 F1 | 	add	fp, #12
10438     A7 16 62 FC | 	wrlong	arg03, fp
1043c     04 4E 05 F1 | 	add	fp, #4
10440     A7 14 62 FC | 	wrlong	arg02, fp
10444     04 4E 05 F1 | 	add	fp, #4
10448     A7 18 62 FC | 	wrlong	arg04, fp
1044c     14 4E 85 F1 | 	sub	fp, #20
10450     C4 B3 BF FD | 	call	#_pop
10454     FF 16 02 F6 | 	mov	arg03, result3
10458     A7 FA 61 FC | 	wrlong	result1, fp
1045c     04 4E 05 F1 | 	add	fp, #4
10460     A7 FC 61 FC | 	wrlong	result2, fp
10464     04 4E 05 F1 | 	add	fp, #4
10468     A7 16 62 FC | 	wrlong	arg03, fp
1046c     08 4E 85 F1 | 	sub	fp, #8
10470     A7 12 02 F6 | 	mov	arg01, fp
10474     84 B5 BF FD | 	call	#_converttoint
10478     FD 1E 02 F6 | 	mov	local01, result1
1047c     0C 4E 05 F1 | 	add	fp, #12
10480     A7 12 02 F6 | 	mov	arg01, fp
10484     0C 4E 85 F1 | 	sub	fp, #12
10488     70 B5 BF FD | 	call	#_converttoint
1048c     FD 20 02 F6 | 	mov	local02, result1
10490     18 4E 05 F1 | 	add	fp, #24
10494     A7 12 02 F6 | 	mov	arg01, fp
10498     18 4E 85 F1 | 	sub	fp, #24
1049c     5C B5 BF FD | 	call	#_converttoint
104a0     FD 22 02 F6 | 	mov	local03, result1
104a4     24 4E 05 F1 | 	add	fp, #36
104a8     A7 12 02 F6 | 	mov	arg01, fp
104ac     24 4E 85 F1 | 	sub	fp, #36
104b0     48 B5 BF FD | 	call	#_converttoint
104b4     FD 18 02 F6 | 	mov	arg04, result1
104b8     0F 13 02 F6 | 	mov	arg01, local01
104bc     10 15 02 F6 | 	mov	arg02, local02
104c0     11 17 02 F6 | 	mov	arg03, local03
104c4     EC EF B0 FD | 	call	#_hg010b_spin2_fill
104c8     A7 F0 03 F6 | 	mov	ptra, fp
104cc     B2 00 A0 FD | 	call	#popregs_
104d0                 | _do_fill_ret
104d0     2D 00 64 FD | 	ret
104d4                 | 
104d4                 | ' 
104d4                 | ' '-------------------- font
104d4                 | ' 
104d4                 | ' sub do_font
104d4                 | _do_font
104d4     03 4A 05 F6 | 	mov	COUNT_, #3
104d8     A8 00 A0 FD | 	call	#pushregs_
104dc     38 B3 BF FD | 	call	#_pop
104e0     FD 1E 02 F6 | 	mov	local01, result1
104e4     FE 20 02 F6 | 	mov	local02, result2
104e8     FF 22 02 F6 | 	mov	local03, result3
104ec                 | ' 
104ec                 | ' t1=pop() 
104ec                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
104ec     1E 22 0E F2 | 	cmp	local03, #30 wz
104f0     10 00 90 5D |  if_ne	jmp	#LR__1380
104f4     0F 13 02 F6 | 	mov	arg01, local01
104f8     00 14 06 F6 | 	mov	arg02, #0
104fc     48 43 B1 FD | 	call	#__system___float_tointeger
10500     FD 1E 02 F6 | 	mov	local01, result1
10504                 | LR__1380
10504                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10504     1F 22 0E F2 | 	cmp	local03, #31 wz
10508     18 00 90 5D |  if_ne	jmp	#LR__1381
1050c     0F 13 02 F6 | 	mov	arg01, local01
10510     78 46 B1 FD | 	call	#__system____builtin_atof
10514     FD 12 02 F6 | 	mov	arg01, result1
10518     00 14 06 F6 | 	mov	arg02, #0
1051c     28 43 B1 FD | 	call	#__system___float_tointeger
10520     FD 1E 02 F6 | 	mov	local01, result1
10524                 | LR__1381
10524     37 00 00 FF 
10528     40 E4 05 F1 | 	add	objptr, ##28224
1052c     F2 1E 62 FC | 	wrlong	local01, objptr
10530     37 00 00 FF 
10534     40 E4 85 F1 | 	sub	objptr, ##28224
10538     02 1E 66 F0 | 	shl	local01, #2
1053c     0F 13 02 F6 | 	mov	arg01, local01
10540     54 F6 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10544     A7 F0 03 F6 | 	mov	ptra, fp
10548     B2 00 A0 FD | 	call	#popregs_
1054c                 | _do_font_ret
1054c     2D 00 64 FD | 	ret
10550                 | 
10550                 | ' 
10550                 | ' '-------------------- for
10550                 | ' 
10550                 | ' sub do_for()
10550                 | _do_for
10550     01 4A 05 F6 | 	mov	COUNT_, #1
10554     A8 00 A0 FD | 	call	#pushregs_
10558     10 F0 07 F1 | 	add	ptra, #16
1055c     50 00 00 FF 
10560     08 E5 05 F1 | 	add	objptr, ##41224
10564     F2 12 02 FB | 	rdlong	arg01, objptr
10568     01 12 06 F1 | 	add	arg01, #1
1056c     F2 12 62 FC | 	wrlong	arg01, objptr
10570     50 00 00 FF 
10574     08 E5 85 F1 | 	sub	objptr, ##41224
10578     9C B2 BF FD | 	call	#_pop
1057c     A7 FA 61 FC | 	wrlong	result1, fp
10580     04 4E 05 F1 | 	add	fp, #4
10584     A7 FC 61 FC | 	wrlong	result2, fp
10588     04 4E 05 F1 | 	add	fp, #4
1058c     A7 FE 61 FC | 	wrlong	result3, fp
10590     08 4E 85 F1 | 	sub	fp, #8
10594     50 00 00 FF 
10598     08 E5 05 F1 | 	add	objptr, ##41224
1059c     F2 12 02 FB | 	rdlong	arg01, objptr
105a0     09 1F 02 F6 | 	mov	local01, arg01
105a4     02 1E 66 F0 | 	shl	local01, #2
105a8     09 1F 02 F1 | 	add	local01, arg01
105ac     02 1E 66 F0 | 	shl	local01, #2
105b0     06 00 00 FF 
105b4     70 E4 85 F1 | 	sub	objptr, ##3184
105b8     F2 1E 02 F1 | 	add	local01, objptr
105bc     A7 12 02 FB | 	rdlong	arg01, fp
105c0     08 1E 06 F1 | 	add	local01, #8
105c4     0F 13 62 FC | 	wrlong	arg01, local01
105c8     4A 00 00 FF 
105cc     98 E4 85 F1 | 	sub	objptr, ##38040
105d0     44 B2 BF FD | 	call	#_pop
105d4     A7 FA 61 FC | 	wrlong	result1, fp
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 FC 61 FC | 	wrlong	result2, fp
105e0     04 4E 05 F1 | 	add	fp, #4
105e4     A7 FE 61 FC | 	wrlong	result3, fp
105e8     08 4E 85 F1 | 	sub	fp, #8
105ec     50 00 00 FF 
105f0     08 E5 05 F1 | 	add	objptr, ##41224
105f4     F2 12 02 FB | 	rdlong	arg01, objptr
105f8     09 1F 02 F6 | 	mov	local01, arg01
105fc     02 1E 66 F0 | 	shl	local01, #2
10600     09 1F 02 F1 | 	add	local01, arg01
10604     02 1E 66 F0 | 	shl	local01, #2
10608     06 00 00 FF 
1060c     70 E4 85 F1 | 	sub	objptr, ##3184
10610     F2 1E 02 F1 | 	add	local01, objptr
10614     A7 12 02 F6 | 	mov	arg01, fp
10618     4A 00 00 FF 
1061c     98 E4 85 F1 | 	sub	objptr, ##38040
10620     D8 B3 BF FD | 	call	#_converttoint
10624     FD 12 02 F6 | 	mov	arg01, result1
10628     0C 1E 06 F1 | 	add	local01, #12
1062c     0F 13 62 FC | 	wrlong	arg01, local01
10630     E4 B1 BF FD | 	call	#_pop
10634     A7 FA 61 FC | 	wrlong	result1, fp
10638     04 4E 05 F1 | 	add	fp, #4
1063c     A7 FC 61 FC | 	wrlong	result2, fp
10640     04 4E 05 F1 | 	add	fp, #4
10644     A7 FE 61 FC | 	wrlong	result3, fp
10648     08 4E 85 F1 | 	sub	fp, #8
1064c     50 00 00 FF 
10650     08 E5 05 F1 | 	add	objptr, ##41224
10654     F2 12 02 FB | 	rdlong	arg01, objptr
10658     09 1F 02 F6 | 	mov	local01, arg01
1065c     02 1E 66 F0 | 	shl	local01, #2
10660     09 1F 02 F1 | 	add	local01, arg01
10664     02 1E 66 F0 | 	shl	local01, #2
10668     06 00 00 FF 
1066c     70 E4 85 F1 | 	sub	objptr, ##3184
10670     F2 1E 02 F1 | 	add	local01, objptr
10674     A7 12 02 F6 | 	mov	arg01, fp
10678     4A 00 00 FF 
1067c     98 E4 85 F1 | 	sub	objptr, ##38040
10680     78 B3 BF FD | 	call	#_converttoint
10684     10 1E 06 F1 | 	add	local01, #16
10688     0F FB 61 FC | 	wrlong	result1, local01
1068c                 | ' fortop+=1
1068c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
1068c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
1068c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
1068c                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
1068c     4A 00 00 FF 
10690     80 E4 05 F1 | 	add	objptr, ##38016
10694     F2 12 02 FB | 	rdlong	arg01, objptr
10698     09 1F 02 F6 | 	mov	local01, arg01
1069c     01 1E 66 F0 | 	shl	local01, #1
106a0     09 1F 02 F1 | 	add	local01, arg01
106a4     02 1E 66 F0 | 	shl	local01, #2
106a8     03 00 00 FF 
106ac     04 E4 85 F1 | 	sub	objptr, ##1540
106b0     F2 1E 02 F1 | 	add	local01, objptr
106b4     08 1E 06 F1 | 	add	local01, #8
106b8     0F 1F 02 FB | 	rdlong	local01, local01
106bc     FE 1F 0E F2 | 	cmp	local01, #510 wz
106c0     47 00 00 FF 
106c4     7C E4 85 F1 | 	sub	objptr, ##36476
106c8     70 00 90 5D |  if_ne	jmp	#LR__1390
106cc     50 00 00 FF 
106d0     08 E5 05 F1 | 	add	objptr, ##41224
106d4     F2 12 02 FB | 	rdlong	arg01, objptr
106d8     09 1F 02 F6 | 	mov	local01, arg01
106dc     02 1E 66 F0 | 	shl	local01, #2
106e0     09 1F 02 F1 | 	add	local01, arg01
106e4     02 1E 66 F0 | 	shl	local01, #2
106e8     06 00 00 FF 
106ec     70 E4 85 F1 | 	sub	objptr, ##3184
106f0     F2 1E 02 F1 | 	add	local01, objptr
106f4     06 00 00 FF 
106f8     20 E4 05 F1 | 	add	objptr, ##3104
106fc     F2 12 02 FB | 	rdlong	arg01, objptr
10700     0F 13 62 FC | 	wrlong	arg01, local01
10704     50 E4 05 F1 | 	add	objptr, #80
10708     F2 12 02 FB | 	rdlong	arg01, objptr
1070c     09 1F 02 F6 | 	mov	local01, arg01
10710     02 1E 66 F0 | 	shl	local01, #2
10714     09 1F 02 F1 | 	add	local01, arg01
10718     02 1E 66 F0 | 	shl	local01, #2
1071c     06 00 00 FF 
10720     70 E4 85 F1 | 	sub	objptr, ##3184
10724     F2 1E 02 F1 | 	add	local01, objptr
10728     04 1E 06 F1 | 	add	local01, #4
1072c     0F 01 68 FC | 	wrlong	#0, local01
10730     4A 00 00 FF 
10734     98 E4 85 F1 | 	sub	objptr, ##38040
10738     78 00 90 FD | 	jmp	#LR__1391
1073c                 | LR__1390
1073c     50 00 00 FF 
10740     08 E5 05 F1 | 	add	objptr, ##41224
10744     F2 12 02 FB | 	rdlong	arg01, objptr
10748     09 1F 02 F6 | 	mov	local01, arg01
1074c     02 1E 66 F0 | 	shl	local01, #2
10750     09 1F 02 F1 | 	add	local01, arg01
10754     02 1E 66 F0 | 	shl	local01, #2
10758     06 00 00 FF 
1075c     70 E4 85 F1 | 	sub	objptr, ##3184
10760     F2 1E 02 F1 | 	add	local01, objptr
10764     06 00 00 FF 
10768     28 E4 05 F1 | 	add	objptr, ##3112
1076c     F2 12 02 FB | 	rdlong	arg01, objptr
10770     0F 13 62 FC | 	wrlong	arg01, local01
10774     48 E4 05 F1 | 	add	objptr, #72
10778     F2 12 02 FB | 	rdlong	arg01, objptr
1077c     09 1F 02 F6 | 	mov	local01, arg01
10780     02 1E 66 F0 | 	shl	local01, #2
10784     09 1F 02 F1 | 	add	local01, arg01
10788     02 1E 66 F0 | 	shl	local01, #2
1078c     06 00 00 FF 
10790     70 E4 85 F1 | 	sub	objptr, ##3184
10794     F2 1E 02 F1 | 	add	local01, objptr
10798     18 E4 85 F1 | 	sub	objptr, #24
1079c     F2 12 02 FB | 	rdlong	arg01, objptr
107a0     4A 00 00 FF 
107a4     80 E4 85 F1 | 	sub	objptr, ##38016
107a8     01 12 06 F1 | 	add	arg01, #1
107ac     04 1E 06 F1 | 	add	local01, #4
107b0     0F 13 62 FC | 	wrlong	arg01, local01
107b4                 | LR__1391
107b4     A7 F0 03 F6 | 	mov	ptra, fp
107b8     B2 00 A0 FD | 	call	#popregs_
107bc                 | _do_for_ret
107bc     2D 00 64 FD | 	ret
107c0                 | 
107c0                 | ' 
107c0                 | ' '-------------------- frame
107c0                 | ' 
107c0                 | ' sub do_frame
107c0                 | _do_frame
107c0     03 4A 05 F6 | 	mov	COUNT_, #3
107c4     A8 00 A0 FD | 	call	#pushregs_
107c8     30 F0 07 F1 | 	add	ptra, #48
107cc     48 B0 BF FD | 	call	#_pop
107d0     FD 16 02 F6 | 	mov	arg03, result1
107d4     FE 14 02 F6 | 	mov	arg02, result2
107d8     FF 1A 02 F6 | 	mov	arg05, result3
107dc     24 4E 05 F1 | 	add	fp, #36
107e0     A7 16 62 FC | 	wrlong	arg03, fp
107e4     04 4E 05 F1 | 	add	fp, #4
107e8     A7 14 62 FC | 	wrlong	arg02, fp
107ec     04 4E 05 F1 | 	add	fp, #4
107f0     A7 1A 62 FC | 	wrlong	arg05, fp
107f4     2C 4E 85 F1 | 	sub	fp, #44
107f8     1C B0 BF FD | 	call	#_pop
107fc     FD 16 02 F6 | 	mov	arg03, result1
10800     FE 14 02 F6 | 	mov	arg02, result2
10804     FF 1A 02 F6 | 	mov	arg05, result3
10808     18 4E 05 F1 | 	add	fp, #24
1080c     A7 16 62 FC | 	wrlong	arg03, fp
10810     04 4E 05 F1 | 	add	fp, #4
10814     A7 14 62 FC | 	wrlong	arg02, fp
10818     04 4E 05 F1 | 	add	fp, #4
1081c     A7 1A 62 FC | 	wrlong	arg05, fp
10820     20 4E 85 F1 | 	sub	fp, #32
10824     F0 AF BF FD | 	call	#_pop
10828     FD 16 02 F6 | 	mov	arg03, result1
1082c     FE 14 02 F6 | 	mov	arg02, result2
10830     FF 1A 02 F6 | 	mov	arg05, result3
10834     0C 4E 05 F1 | 	add	fp, #12
10838     A7 16 62 FC | 	wrlong	arg03, fp
1083c     04 4E 05 F1 | 	add	fp, #4
10840     A7 14 62 FC | 	wrlong	arg02, fp
10844     04 4E 05 F1 | 	add	fp, #4
10848     A7 1A 62 FC | 	wrlong	arg05, fp
1084c     14 4E 85 F1 | 	sub	fp, #20
10850     C4 AF BF FD | 	call	#_pop
10854     FF 16 02 F6 | 	mov	arg03, result3
10858     A7 FA 61 FC | 	wrlong	result1, fp
1085c     04 4E 05 F1 | 	add	fp, #4
10860     A7 FC 61 FC | 	wrlong	result2, fp
10864     04 4E 05 F1 | 	add	fp, #4
10868     A7 16 62 FC | 	wrlong	arg03, fp
1086c     08 4E 85 F1 | 	sub	fp, #8
10870     A7 12 02 F6 | 	mov	arg01, fp
10874     84 B1 BF FD | 	call	#_converttoint
10878     FD 1E 02 F6 | 	mov	local01, result1
1087c     0C 4E 05 F1 | 	add	fp, #12
10880     A7 12 02 F6 | 	mov	arg01, fp
10884     0C 4E 85 F1 | 	sub	fp, #12
10888     70 B1 BF FD | 	call	#_converttoint
1088c     FD 20 02 F6 | 	mov	local02, result1
10890     18 4E 05 F1 | 	add	fp, #24
10894     A7 12 02 F6 | 	mov	arg01, fp
10898     18 4E 85 F1 | 	sub	fp, #24
1089c     5C B1 BF FD | 	call	#_converttoint
108a0     FD 22 02 F6 | 	mov	local03, result1
108a4     24 4E 05 F1 | 	add	fp, #36
108a8     A7 12 02 F6 | 	mov	arg01, fp
108ac     24 4E 85 F1 | 	sub	fp, #36
108b0     48 B1 BF FD | 	call	#_converttoint
108b4     FD 18 02 F6 | 	mov	arg04, result1
108b8     37 00 00 FF 
108bc     28 E4 05 F1 | 	add	objptr, ##28200
108c0     F2 1A 02 FB | 	rdlong	arg05, objptr
108c4     37 00 00 FF 
108c8     28 E4 85 F1 | 	sub	objptr, ##28200
108cc     0F 13 02 F6 | 	mov	arg01, local01
108d0     10 15 02 F6 | 	mov	arg02, local02
108d4     11 17 02 F6 | 	mov	arg03, local03
108d8     C4 F0 B0 FD | 	call	#_hg010b_spin2_frame
108dc     A7 F0 03 F6 | 	mov	ptra, fp
108e0     B2 00 A0 FD | 	call	#popregs_
108e4                 | _do_frame_ret
108e4     2D 00 64 FD | 	ret
108e8                 | 
108e8                 | ' 
108e8                 | ' '-------------------- fre
108e8                 | ' 
108e8                 | ' sub do_fre
108e8                 | _do_fre
108e8     01 4A 05 F6 | 	mov	COUNT_, #1
108ec     A8 00 A0 FD | 	call	#pushregs_
108f0     0C F0 07 F1 | 	add	ptra, #12
108f4     51 00 00 FF 
108f8     AC E5 05 F1 | 	add	objptr, ##41900
108fc     F2 12 02 FB | 	rdlong	arg01, objptr
10900     0E 00 00 FF 
10904     50 E5 85 F1 | 	sub	objptr, ##7504
10908     F2 1E 02 FB | 	rdlong	local01, objptr
1090c     0F 13 82 F1 | 	sub	arg01, local01
10910     0E 00 00 FF 
10914     C0 E5 05 F1 | 	add	objptr, ##7616
10918     F2 12 62 FC | 	wrlong	arg01, objptr
1091c     08 4E 05 F1 | 	add	fp, #8
10920     A7 3A 68 FC | 	wrlong	#29, fp
10924     08 4E 85 F1 | 	sub	fp, #8
10928     F2 1E 02 FB | 	rdlong	local01, objptr
1092c     52 00 00 FF 
10930     1C E4 85 F1 | 	sub	objptr, ##42012
10934     A7 1E 62 FC | 	wrlong	local01, fp
10938     A7 12 02 F6 | 	mov	arg01, fp
1093c     70 AF BF FD | 	call	#_push
10940     A7 F0 03 F6 | 	mov	ptra, fp
10944     B2 00 A0 FD | 	call	#popregs_
10948                 | _do_fre_ret
10948     2D 00 64 FD | 	ret
1094c                 | 
1094c                 | ' 
1094c                 | ' '-------------------- get
1094c                 | ' 
1094c                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
1094c                 | _do_get
1094c     09 4A 05 F6 | 	mov	COUNT_, #9
10950     A8 00 A0 FD | 	call	#pushregs_
10954     40 F0 07 F1 | 	add	ptra, #64
10958     4A 00 00 FF 
1095c     80 E4 05 F1 | 	add	objptr, ##38016
10960     F2 1A 02 FB | 	rdlong	arg05, objptr
10964     0D 19 02 F6 | 	mov	arg04, arg05
10968     01 18 66 F0 | 	shl	arg04, #1
1096c     0D 19 02 F1 | 	add	arg04, arg05
10970     02 18 66 F0 | 	shl	arg04, #2
10974     03 00 00 FF 
10978     04 E4 85 F1 | 	sub	objptr, ##1540
1097c     F2 18 02 F1 | 	add	arg04, objptr
10980     0C 1B 02 FB | 	rdlong	arg05, arg04
10984     A7 1A 62 FC | 	wrlong	arg05, fp
10988                 | ' 
10988                 | ' numpar=compiledline(lineptr_e).result.uresult
10988                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10988     04 1A 0E F2 | 	cmp	arg05, #4 wz
1098c     47 00 00 FF 
10990     7C E4 85 F1 | 	sub	objptr, ##36476
10994     48 00 90 5D |  if_ne	jmp	#LR__1400
10998     7C AE BF FD | 	call	#_pop
1099c     FF 1A 02 F6 | 	mov	arg05, result3
109a0     1C 4E 05 F1 | 	add	fp, #28
109a4     A7 FA 61 FC | 	wrlong	result1, fp
109a8     04 4E 05 F1 | 	add	fp, #4
109ac     A7 FC 61 FC | 	wrlong	result2, fp
109b0     04 4E 05 F1 | 	add	fp, #4
109b4     A7 1A 62 FC | 	wrlong	arg05, fp
109b8     08 4E 85 F1 | 	sub	fp, #8
109bc     A7 12 02 F6 | 	mov	arg01, fp
109c0     1C 4E 85 F1 | 	sub	fp, #28
109c4     34 B0 BF FD | 	call	#_converttoint
109c8     52 00 00 FF 
109cc     18 E4 05 F1 | 	add	objptr, ##42008
109d0     F2 FA 61 FC | 	wrlong	result1, objptr
109d4     52 00 00 FF 
109d8     18 E4 85 F1 | 	sub	objptr, ##42008
109dc     18 00 90 FD | 	jmp	#LR__1401
109e0                 | LR__1400
109e0     52 00 00 FF 
109e4     18 E4 05 F1 | 	add	objptr, ##42008
109e8     FF FF FF FF 
109ec     F2 FE 6B FC | 	wrlong	##-1, objptr
109f0     52 00 00 FF 
109f4     18 E4 85 F1 | 	sub	objptr, ##42008
109f8                 | LR__1401
109f8                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
109f8     A7 16 02 FB | 	rdlong	arg03, fp
109fc     03 16 56 F2 | 	cmps	arg03, #3 wc
10a00     40 00 90 CD |  if_b	jmp	#LR__1402
10a04     10 AE BF FD | 	call	#_pop
10a08     FF 16 02 F6 | 	mov	arg03, result3
10a0c     1C 4E 05 F1 | 	add	fp, #28
10a10     A7 FA 61 FC | 	wrlong	result1, fp
10a14     04 4E 05 F1 | 	add	fp, #4
10a18     A7 FC 61 FC | 	wrlong	result2, fp
10a1c     04 4E 05 F1 | 	add	fp, #4
10a20     A7 16 62 FC | 	wrlong	arg03, fp
10a24     08 4E 85 F1 | 	sub	fp, #8
10a28     A7 12 02 F6 | 	mov	arg01, fp
10a2c     1C 4E 85 F1 | 	sub	fp, #28
10a30     C8 AF BF FD | 	call	#_converttoint
10a34     08 4E 05 F1 | 	add	fp, #8
10a38     A7 FA 61 FC | 	wrlong	result1, fp
10a3c     08 4E 85 F1 | 	sub	fp, #8
10a40     0C 00 90 FD | 	jmp	#LR__1403
10a44                 | LR__1402
10a44     08 4E 05 F1 | 	add	fp, #8
10a48     A7 02 68 FC | 	wrlong	#1, fp
10a4c     08 4E 85 F1 | 	sub	fp, #8
10a50                 | LR__1403
10a50                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
10a50     A7 16 02 FB | 	rdlong	arg03, fp
10a54     02 16 56 F2 | 	cmps	arg03, #2 wc
10a58     3C 00 90 CD |  if_b	jmp	#LR__1404
10a5c     B8 AD BF FD | 	call	#_pop
10a60     FF 16 02 F6 | 	mov	arg03, result3
10a64     1C 4E 05 F1 | 	add	fp, #28
10a68     A7 FA 61 FC | 	wrlong	result1, fp
10a6c     04 4E 05 F1 | 	add	fp, #4
10a70     A7 FC 61 FC | 	wrlong	result2, fp
10a74     04 4E 05 F1 | 	add	fp, #4
10a78     A7 16 62 FC | 	wrlong	arg03, fp
10a7c     08 4E 85 F1 | 	sub	fp, #8
10a80     A7 12 02 F6 | 	mov	arg01, fp
10a84     1C 4E 85 F1 | 	sub	fp, #28
10a88     70 AF BF FD | 	call	#_converttoint
10a8c     0C 4E 05 F1 | 	add	fp, #12
10a90     A7 FA 61 FC | 	wrlong	result1, fp
10a94     0C 4E 85 F1 | 	sub	fp, #12
10a98                 | LR__1404
10a98     7C AD BF FD | 	call	#_pop
10a9c     FF 16 02 F6 | 	mov	arg03, result3
10aa0     1C 4E 05 F1 | 	add	fp, #28
10aa4     A7 FA 61 FC | 	wrlong	result1, fp
10aa8     04 4E 05 F1 | 	add	fp, #4
10aac     A7 FC 61 FC | 	wrlong	result2, fp
10ab0     04 4E 05 F1 | 	add	fp, #4
10ab4     A7 16 62 FC | 	wrlong	arg03, fp
10ab8     08 4E 85 F1 | 	sub	fp, #8
10abc     A7 12 02 F6 | 	mov	arg01, fp
10ac0     1C 4E 85 F1 | 	sub	fp, #28
10ac4     34 AF BF FD | 	call	#_converttoint
10ac8     04 4E 05 F1 | 	add	fp, #4
10acc     A7 FA 61 FC | 	wrlong	result1, fp
10ad0     10 4E 05 F1 | 	add	fp, #16
10ad4     A7 16 02 FB | 	rdlong	arg03, fp
10ad8     14 4E 85 F1 | 	sub	fp, #20
10adc     02 16 66 F0 | 	shl	arg03, #2
10ae0     50 00 00 FF 
10ae4     C4 E4 05 F1 | 	add	objptr, ##41156
10ae8     F2 1E 02 F6 | 	mov	local01, objptr
10aec     F2 16 02 F1 | 	add	arg03, objptr
10af0     0B 01 68 FC | 	wrlong	#0, arg03
10af4                 | ' t1=pop() : channel=converttoint(t1)
10af4                 | ' getres(j)=0
10af4                 | ' if pos>=0 then
10af4     01 00 00 FF 
10af8     54 E5 05 F1 | 	add	objptr, ##852
10afc     F2 20 02 FB | 	rdlong	local02, objptr
10b00     52 00 00 FF 
10b04     18 E4 85 F1 | 	sub	objptr, ##42008
10b08     00 20 56 F2 | 	cmps	local02, #0 wc
10b0c     F0 01 90 CD |  if_b	jmp	#LR__1411
10b10                 | '   for i=0 to  amount/1024
10b10     10 4E 05 F1 | 	add	fp, #16
10b14     A7 00 68 FC | 	wrlong	#0, fp
10b18     08 4E 85 F1 | 	sub	fp, #8
10b1c     A7 22 02 FB | 	rdlong	local03, fp
10b20     08 4E 85 F1 | 	sub	fp, #8
10b24     11 25 52 F6 | 	abs	local04, local03 wc
10b28     0A 24 46 F0 | 	shr	local04, #10
10b2c     12 25 82 F6 | 	negc	local04, local04
10b30     01 24 06 F1 | 	add	local04, #1
10b34                 | LR__1405
10b34     10 4E 05 F1 | 	add	fp, #16
10b38     A7 22 02 FB | 	rdlong	local03, fp
10b3c     10 4E 85 F1 | 	sub	fp, #16
10b40     12 23 52 F2 | 	cmps	local03, local04 wc
10b44     9C 03 90 3D |  if_ae	jmp	#LR__1419
10b48                 | '     get #channel,pos+1,block(0),amount,r
10b48     04 4E 05 F1 | 	add	fp, #4
10b4c     A7 12 02 FB | 	rdlong	arg01, fp
10b50     52 00 00 FF 
10b54     18 E4 05 F1 | 	add	objptr, ##42008
10b58     F2 14 02 FB | 	rdlong	arg02, objptr
10b5c     01 14 06 F1 | 	add	arg02, #1
10b60     03 00 00 FF 
10b64     64 E5 85 F1 | 	sub	objptr, ##1892
10b68     F2 16 02 F6 | 	mov	arg03, objptr
10b6c     4E 00 00 FF 
10b70     B4 E4 85 F1 | 	sub	objptr, ##40116
10b74     04 4E 05 F1 | 	add	fp, #4
10b78     A7 18 02 FB | 	rdlong	arg04, fp
10b7c     08 4E 85 F1 | 	sub	fp, #8
10b80     01 1A 06 F6 | 	mov	arg05, #1
10b84     AC 18 B1 FD | 	call	#__system___basic_get
10b88     18 4E 05 F1 | 	add	fp, #24
10b8c     A7 FA 61 FC | 	wrlong	result1, fp
10b90                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10b90     0C 4E 85 F1 | 	sub	fp, #12
10b94     A7 20 02 FB | 	rdlong	local02, fp
10b98     0C 4E 85 F1 | 	sub	fp, #12
10b9c     00 04 00 FF 
10ba0     00 20 56 F2 | 	cmps	local02, ##524288 wc
10ba4     7C 00 90 3D |  if_ae	jmp	#LR__1407
10ba8     14 4E 05 F1 | 	add	fp, #20
10bac     A7 00 68 FC | 	wrlong	#0, fp
10bb0     04 4E 05 F1 | 	add	fp, #4
10bb4     A7 26 02 FB | 	rdlong	local05, fp
10bb8     18 4E 85 F1 | 	sub	fp, #24
10bbc                 | LR__1406
10bbc     14 4E 05 F1 | 	add	fp, #20
10bc0     A7 20 02 FB | 	rdlong	local02, fp
10bc4     14 4E 85 F1 | 	sub	fp, #20
10bc8     13 21 52 F2 | 	cmps	local02, local05 wc
10bcc     D8 00 90 3D |  if_ae	jmp	#LR__1410
10bd0     0C 4E 05 F1 | 	add	fp, #12
10bd4     A7 12 02 FB | 	rdlong	arg01, fp
10bd8     04 4E 05 F1 | 	add	fp, #4
10bdc     A7 22 02 FB | 	rdlong	local03, fp
10be0     0A 22 66 F0 | 	shl	local03, #10
10be4     11 13 02 F1 | 	add	arg01, local03
10be8     04 4E 05 F1 | 	add	fp, #4
10bec     A7 22 02 FB | 	rdlong	local03, fp
10bf0     11 13 02 F1 | 	add	arg01, local03
10bf4     4E 00 00 FF 
10bf8     B4 E4 05 F1 | 	add	objptr, ##40116
10bfc     F2 22 02 F1 | 	add	local03, objptr
10c00     11 15 C2 FA | 	rdbyte	arg02, local03
10c04     09 15 42 FC | 	wrbyte	arg02, arg01
10c08     4E 00 00 FF 
10c0c     B4 E4 85 F1 | 	sub	objptr, ##40116
10c10     A7 22 02 FB | 	rdlong	local03, fp
10c14     01 22 06 F1 | 	add	local03, #1
10c18     A7 22 62 FC | 	wrlong	local03, fp
10c1c     14 4E 85 F1 | 	sub	fp, #20
10c20     98 FF 9F FD | 	jmp	#LR__1406
10c24                 | LR__1407
10c24     14 4E 05 F1 | 	add	fp, #20
10c28     A7 00 68 FC | 	wrlong	#0, fp
10c2c     04 4E 05 F1 | 	add	fp, #4
10c30     A7 28 02 FB | 	rdlong	local06, fp
10c34     18 4E 85 F1 | 	sub	fp, #24
10c38                 | LR__1408
10c38     14 4E 05 F1 | 	add	fp, #20
10c3c     A7 20 02 FB | 	rdlong	local02, fp
10c40     14 4E 85 F1 | 	sub	fp, #20
10c44     14 21 52 F2 | 	cmps	local02, local06 wc
10c48     5C 00 90 3D |  if_ae	jmp	#LR__1409
10c4c     0C 4E 05 F1 | 	add	fp, #12
10c50     A7 12 02 FB | 	rdlong	arg01, fp
10c54     04 4E 05 F1 | 	add	fp, #4
10c58     A7 26 02 FB | 	rdlong	local05, fp
10c5c     0A 26 66 F0 | 	shl	local05, #10
10c60     13 13 02 F1 | 	add	arg01, local05
10c64     04 4E 05 F1 | 	add	fp, #4
10c68     A7 26 02 FB | 	rdlong	local05, fp
10c6c     13 13 02 F1 | 	add	arg01, local05
10c70     14 4E 85 F1 | 	sub	fp, #20
10c74     4E 00 00 FF 
10c78     B4 E4 05 F1 | 	add	objptr, ##40116
10c7c     F2 26 02 F1 | 	add	local05, objptr
10c80     13 15 C2 FA | 	rdbyte	arg02, local05
10c84     4E 00 00 FF 
10c88     B4 E4 85 F1 | 	sub	objptr, ##40116
10c8c     90 D5 B0 FD | 	call	#_pspoke
10c90     14 4E 05 F1 | 	add	fp, #20
10c94     A7 26 02 FB | 	rdlong	local05, fp
10c98     01 26 06 F1 | 	add	local05, #1
10c9c     A7 26 62 FC | 	wrlong	local05, fp
10ca0     14 4E 85 F1 | 	sub	fp, #20
10ca4     90 FF 9F FD | 	jmp	#LR__1408
10ca8                 | LR__1409
10ca8                 | LR__1410
10ca8     14 4E 05 F1 | 	add	fp, #20
10cac     A7 28 02 FB | 	rdlong	local06, fp
10cb0     14 23 02 F6 | 	mov	local03, local06
10cb4     02 22 66 F0 | 	shl	local03, #2
10cb8     50 00 00 FF 
10cbc     C4 E4 05 F1 | 	add	objptr, ##41156
10cc0     F2 22 02 F1 | 	add	local03, objptr
10cc4     02 28 66 F0 | 	shl	local06, #2
10cc8     F2 28 02 F1 | 	add	local06, objptr
10ccc     14 29 02 FB | 	rdlong	local06, local06
10cd0     04 4E 05 F1 | 	add	fp, #4
10cd4     A7 26 02 FB | 	rdlong	local05, fp
10cd8     13 29 02 F1 | 	add	local06, local05
10cdc     11 29 62 FC | 	wrlong	local06, local03
10ce0     08 4E 85 F1 | 	sub	fp, #8
10ce4     A7 28 02 FB | 	rdlong	local06, fp
10ce8     01 28 06 F1 | 	add	local06, #1
10cec     A7 28 62 FC | 	wrlong	local06, fp
10cf0     10 4E 85 F1 | 	sub	fp, #16
10cf4     50 00 00 FF 
10cf8     C4 E4 85 F1 | 	sub	objptr, ##41156
10cfc     34 FE 9F FD | 	jmp	#LR__1405
10d00                 | LR__1411
10d00                 | '   for i=0 to  amount/1024
10d00     10 4E 05 F1 | 	add	fp, #16
10d04     A7 00 68 FC | 	wrlong	#0, fp
10d08     08 4E 85 F1 | 	sub	fp, #8
10d0c     A7 22 02 FB | 	rdlong	local03, fp
10d10     08 4E 85 F1 | 	sub	fp, #8
10d14     11 2B 52 F6 | 	abs	local07, local03 wc
10d18     0A 2A 46 F0 | 	shr	local07, #10
10d1c     15 2B 82 F6 | 	negc	local07, local07
10d20     01 2A 06 F1 | 	add	local07, #1
10d24                 | LR__1412
10d24     10 4E 05 F1 | 	add	fp, #16
10d28     A7 22 02 FB | 	rdlong	local03, fp
10d2c     10 4E 85 F1 | 	sub	fp, #16
10d30     15 23 52 F2 | 	cmps	local03, local07 wc
10d34     AC 01 90 3D |  if_ae	jmp	#LR__1418
10d38                 | '     get #channel,,block(0),amount,r
10d38     04 4E 05 F1 | 	add	fp, #4
10d3c     A7 12 02 FB | 	rdlong	arg01, fp
10d40     4E 00 00 FF 
10d44     B4 E4 05 F1 | 	add	objptr, ##40116
10d48     F2 16 02 F6 | 	mov	arg03, objptr
10d4c     4E 00 00 FF 
10d50     B4 E4 85 F1 | 	sub	objptr, ##40116
10d54     04 4E 05 F1 | 	add	fp, #4
10d58     A7 18 02 FB | 	rdlong	arg04, fp
10d5c     08 4E 85 F1 | 	sub	fp, #8
10d60     00 14 06 F6 | 	mov	arg02, #0
10d64     01 1A 06 F6 | 	mov	arg05, #1
10d68     C8 16 B1 FD | 	call	#__system___basic_get
10d6c     18 4E 05 F1 | 	add	fp, #24
10d70     A7 FA 61 FC | 	wrlong	result1, fp
10d74                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10d74     0C 4E 85 F1 | 	sub	fp, #12
10d78     A7 20 02 FB | 	rdlong	local02, fp
10d7c     0C 4E 85 F1 | 	sub	fp, #12
10d80     00 04 00 FF 
10d84     00 20 56 F2 | 	cmps	local02, ##524288 wc
10d88     7C 00 90 3D |  if_ae	jmp	#LR__1414
10d8c     14 4E 05 F1 | 	add	fp, #20
10d90     A7 00 68 FC | 	wrlong	#0, fp
10d94     04 4E 05 F1 | 	add	fp, #4
10d98     A7 2C 02 FB | 	rdlong	local08, fp
10d9c     18 4E 85 F1 | 	sub	fp, #24
10da0                 | LR__1413
10da0     14 4E 05 F1 | 	add	fp, #20
10da4     A7 20 02 FB | 	rdlong	local02, fp
10da8     14 4E 85 F1 | 	sub	fp, #20
10dac     16 21 52 F2 | 	cmps	local02, local08 wc
10db0     D8 00 90 3D |  if_ae	jmp	#LR__1417
10db4     0C 4E 05 F1 | 	add	fp, #12
10db8     A7 12 02 FB | 	rdlong	arg01, fp
10dbc     04 4E 05 F1 | 	add	fp, #4
10dc0     A7 28 02 FB | 	rdlong	local06, fp
10dc4     0A 28 66 F0 | 	shl	local06, #10
10dc8     14 13 02 F1 | 	add	arg01, local06
10dcc     04 4E 05 F1 | 	add	fp, #4
10dd0     A7 28 02 FB | 	rdlong	local06, fp
10dd4     14 13 02 F1 | 	add	arg01, local06
10dd8     4E 00 00 FF 
10ddc     B4 E4 05 F1 | 	add	objptr, ##40116
10de0     F2 28 02 F1 | 	add	local06, objptr
10de4     14 15 C2 FA | 	rdbyte	arg02, local06
10de8     09 15 42 FC | 	wrbyte	arg02, arg01
10dec     4E 00 00 FF 
10df0     B4 E4 85 F1 | 	sub	objptr, ##40116
10df4     A7 28 02 FB | 	rdlong	local06, fp
10df8     01 28 06 F1 | 	add	local06, #1
10dfc     A7 28 62 FC | 	wrlong	local06, fp
10e00     14 4E 85 F1 | 	sub	fp, #20
10e04     98 FF 9F FD | 	jmp	#LR__1413
10e08                 | LR__1414
10e08     14 4E 05 F1 | 	add	fp, #20
10e0c     A7 00 68 FC | 	wrlong	#0, fp
10e10     04 4E 05 F1 | 	add	fp, #4
10e14     A7 2E 02 FB | 	rdlong	local09, fp
10e18     18 4E 85 F1 | 	sub	fp, #24
10e1c                 | LR__1415
10e1c     14 4E 05 F1 | 	add	fp, #20
10e20     A7 20 02 FB | 	rdlong	local02, fp
10e24     14 4E 85 F1 | 	sub	fp, #20
10e28     17 21 52 F2 | 	cmps	local02, local09 wc
10e2c     5C 00 90 3D |  if_ae	jmp	#LR__1416
10e30     0C 4E 05 F1 | 	add	fp, #12
10e34     A7 12 02 FB | 	rdlong	arg01, fp
10e38     04 4E 05 F1 | 	add	fp, #4
10e3c     A7 2C 02 FB | 	rdlong	local08, fp
10e40     0A 2C 66 F0 | 	shl	local08, #10
10e44     16 13 02 F1 | 	add	arg01, local08
10e48     04 4E 05 F1 | 	add	fp, #4
10e4c     A7 2C 02 FB | 	rdlong	local08, fp
10e50     16 13 02 F1 | 	add	arg01, local08
10e54     14 4E 85 F1 | 	sub	fp, #20
10e58     4E 00 00 FF 
10e5c     B4 E4 05 F1 | 	add	objptr, ##40116
10e60     F2 2C 02 F1 | 	add	local08, objptr
10e64     16 15 C2 FA | 	rdbyte	arg02, local08
10e68     4E 00 00 FF 
10e6c     B4 E4 85 F1 | 	sub	objptr, ##40116
10e70     AC D3 B0 FD | 	call	#_pspoke
10e74     14 4E 05 F1 | 	add	fp, #20
10e78     A7 2C 02 FB | 	rdlong	local08, fp
10e7c     01 2C 06 F1 | 	add	local08, #1
10e80     A7 2C 62 FC | 	wrlong	local08, fp
10e84     14 4E 85 F1 | 	sub	fp, #20
10e88     90 FF 9F FD | 	jmp	#LR__1415
10e8c                 | LR__1416
10e8c                 | LR__1417
10e8c     14 4E 05 F1 | 	add	fp, #20
10e90     A7 2E 02 FB | 	rdlong	local09, fp
10e94     17 29 02 F6 | 	mov	local06, local09
10e98     02 28 66 F0 | 	shl	local06, #2
10e9c     50 00 00 FF 
10ea0     C4 E4 05 F1 | 	add	objptr, ##41156
10ea4     F2 28 02 F1 | 	add	local06, objptr
10ea8     02 2E 66 F0 | 	shl	local09, #2
10eac     F2 2E 02 F1 | 	add	local09, objptr
10eb0     17 2F 02 FB | 	rdlong	local09, local09
10eb4     04 4E 05 F1 | 	add	fp, #4
10eb8     A7 2C 02 FB | 	rdlong	local08, fp
10ebc     16 2F 02 F1 | 	add	local09, local08
10ec0     14 2F 62 FC | 	wrlong	local09, local06
10ec4     08 4E 85 F1 | 	sub	fp, #8
10ec8     A7 2E 02 FB | 	rdlong	local09, fp
10ecc     01 2E 06 F1 | 	add	local09, #1
10ed0     A7 2E 62 FC | 	wrlong	local09, fp
10ed4     10 4E 85 F1 | 	sub	fp, #16
10ed8     50 00 00 FF 
10edc     C4 E4 85 F1 | 	sub	objptr, ##41156
10ee0     40 FE 9F FD | 	jmp	#LR__1412
10ee4                 | LR__1418
10ee4                 | LR__1419
10ee4     A7 F0 03 F6 | 	mov	ptra, fp
10ee8     B2 00 A0 FD | 	call	#popregs_
10eec                 | _do_get_ret
10eec     2D 00 64 FD | 	ret
10ef0                 | 
10ef0                 | ' 
10ef0                 | ' '-------------------- getenvsustain
10ef0                 | ' 
10ef0                 | ' sub do_getenvsustain
10ef0                 | _do_getenvsustain
10ef0     01 4A 05 F6 | 	mov	COUNT_, #1
10ef4     A8 00 A0 FD | 	call	#pushregs_
10ef8     10 F0 07 F1 | 	add	ptra, #16
10efc     4A 00 00 FF 
10f00     80 E4 05 F1 | 	add	objptr, ##38016
10f04     F2 1E 02 FB | 	rdlong	local01, objptr
10f08     0F 17 02 F6 | 	mov	arg03, local01
10f0c     01 16 66 F0 | 	shl	arg03, #1
10f10     0F 17 02 F1 | 	add	arg03, local01
10f14     02 16 66 F0 | 	shl	arg03, #2
10f18     03 00 00 FF 
10f1c     04 E4 85 F1 | 	sub	objptr, ##1540
10f20     F2 16 02 F1 | 	add	arg03, objptr
10f24     0B 17 02 FB | 	rdlong	arg03, arg03
10f28     0C 4E 05 F1 | 	add	fp, #12
10f2c     A7 16 62 FC | 	wrlong	arg03, fp
10f30                 | ' 
10f30                 | ' numpar=compiledline(lineptr_e).result.uresult
10f30                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
10f30     0C 4E 85 F1 | 	sub	fp, #12
10f34     02 16 16 F2 | 	cmp	arg03, #2 wc
10f38     47 00 00 FF 
10f3c     7C E4 85 F1 | 	sub	objptr, ##36476
10f40     0C 4E 05 C1 |  if_b	add	fp, #12
10f44     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10f48     0C 4E 85 C1 |  if_b	sub	fp, #12
10f4c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1420
10f50     00 12 06 F6 | 	mov	arg01, #0
10f54     98 63 B1 FD | 	call	#__system___getiolock_0570
10f58     FD 12 02 F6 | 	mov	arg01, result1
10f5c     64 06 B1 FD | 	call	#__system___lockmem
10f60     8C 01 00 FF 
10f64     BA 15 06 F6 | 	mov	arg02, ##@LR__5563
10f68     00 12 06 F6 | 	mov	arg01, #0
10f6c     00 16 06 F6 | 	mov	arg03, #0
10f70     44 13 B1 FD | 	call	#__system___basic_print_string
10f74     00 12 06 F6 | 	mov	arg01, #0
10f78     74 63 B1 FD | 	call	#__system___getiolock_0570
10f7c     FD 00 68 FC | 	wrlong	#0, result1
10f80     27 12 06 F6 | 	mov	arg01, #39
10f84     00 14 06 F6 | 	mov	arg02, #0
10f88     78 D0 B0 FD | 	call	#_printerror
10f8c     64 00 90 FD | 	jmp	#LR__1421
10f90                 | LR__1420
10f90     84 A8 BF FD | 	call	#_pop
10f94     FD 1E 02 F6 | 	mov	local01, result1
10f98     FE 16 02 F6 | 	mov	arg03, result2
10f9c     A7 1E 62 FC | 	wrlong	local01, fp
10fa0     04 4E 05 F1 | 	add	fp, #4
10fa4     A7 16 62 FC | 	wrlong	arg03, fp
10fa8     04 4E 05 F1 | 	add	fp, #4
10fac     A7 FE 61 FC | 	wrlong	result3, fp
10fb0     08 4E 85 F1 | 	sub	fp, #8
10fb4     A7 12 02 F6 | 	mov	arg01, fp
10fb8     40 AA BF FD | 	call	#_converttoint
10fbc     FD 1E 02 F6 | 	mov	local01, result1
10fc0     01 1E 66 F0 | 	shl	local01, #1
10fc4     51 00 00 FF 
10fc8     C8 E5 05 F1 | 	add	objptr, ##41928
10fcc     F2 1E 02 F1 | 	add	local01, objptr
10fd0     0F 1F E2 FA | 	rdword	local01, local01
10fd4     A7 1E 62 FC | 	wrlong	local01, fp
10fd8     08 4E 05 F1 | 	add	fp, #8
10fdc     A7 38 68 FC | 	wrlong	#28, fp
10fe0     08 4E 85 F1 | 	sub	fp, #8
10fe4     A7 12 02 F6 | 	mov	arg01, fp
10fe8     51 00 00 FF 
10fec     C8 E5 85 F1 | 	sub	objptr, ##41928
10ff0     BC A8 BF FD | 	call	#_push
10ff4                 | LR__1421
10ff4     A7 F0 03 F6 | 	mov	ptra, fp
10ff8     B2 00 A0 FD | 	call	#popregs_
10ffc                 | _do_getenvsustain_ret
10ffc     2D 00 64 FD | 	ret
11000                 | 
11000                 | ' 
11000                 | ' '-------------------- getnotevalue
11000                 | ' 
11000                 | ' sub do_getnotevalue
11000                 | _do_getnotevalue
11000     01 4A 05 F6 | 	mov	COUNT_, #1
11004     A8 00 A0 FD | 	call	#pushregs_
11008     1C F0 07 F1 | 	add	ptra, #28
1100c     08 A8 BF FD | 	call	#_pop
11010     FF 14 02 F6 | 	mov	arg02, result3
11014     10 4E 05 F1 | 	add	fp, #16
11018     A7 FA 61 FC | 	wrlong	result1, fp
1101c     04 4E 05 F1 | 	add	fp, #4
11020     A7 FC 61 FC | 	wrlong	result2, fp
11024     04 4E 05 F1 | 	add	fp, #4
11028     A7 14 62 FC | 	wrlong	arg02, fp
1102c     08 4E 85 F1 | 	sub	fp, #8
11030     A7 12 02 F6 | 	mov	arg01, fp
11034     10 4E 85 F1 | 	sub	fp, #16
11038     C0 A9 BF FD | 	call	#_converttoint
1103c     FD 14 52 F6 | 	abs	arg02, result1 wc
11040     0C 14 16 FD | 	qdiv	arg02, #12
11044     0C 4E 05 F1 | 	add	fp, #12
11048     A7 FA 61 FC | 	wrlong	result1, fp
1104c     14 00 00 FF 
11050     D8 E4 05 F1 | 	add	objptr, ##10456
11054     08 4E 85 F1 | 	sub	fp, #8
11058     19 14 62 FD | 	getqy	arg02
1105c     0A 15 82 F6 | 	negc	arg02, arg02
11060     02 14 66 F0 | 	shl	arg02, #2
11064     F2 14 02 F1 | 	add	arg02, objptr
11068     0A 15 02 FB | 	rdlong	arg02, arg02
1106c     A7 14 62 FC | 	wrlong	arg02, fp
11070     08 4E 05 F1 | 	add	fp, #8
11074     A7 14 02 FB | 	rdlong	arg02, fp
11078     0A 15 52 F6 | 	abs	arg02, arg02 wc
1107c     0C 14 16 FD | 	qdiv	arg02, #12
11080     0C 4E 85 F1 | 	sub	fp, #12
11084     14 00 00 FF 
11088     D8 E4 85 F1 | 	sub	objptr, ##10456
1108c     18 14 62 FD | 	getqx	arg02
11090     0A 13 82 F6 | 	negc	arg01, arg02
11094     09 13 52 F6 | 	abs	arg01, arg01 wc
11098     1F 1E C6 C9 |  if_b	decod	local01, #31
1109c     00 1E 06 36 |  if_ae	mov	local01, #0
110a0     D8 2E B1 FD | 	call	#__system___float_fromuns
110a4     0F FB 61 F5 | 	xor	result1, local01
110a8     08 4E 05 F1 | 	add	fp, #8
110ac     A7 FA 61 FC | 	wrlong	result1, fp
110b0     FD 14 02 F6 | 	mov	arg02, result1
110b4     08 4E 85 F1 | 	sub	fp, #8
110b8     1E 12 C6 F9 | 	decod	arg01, #30
110bc     C8 41 B1 FD | 	call	#__system____builtin_powf
110c0     FD 12 02 F6 | 	mov	arg01, result1
110c4     04 4E 05 F1 | 	add	fp, #4
110c8     A7 14 02 FB | 	rdlong	arg02, fp
110cc     04 4E 85 F1 | 	sub	fp, #4
110d0     AC 32 B1 FD | 	call	#__system___float_mul
110d4     A7 FA 61 FC | 	wrlong	result1, fp
110d8     10 4E 05 F1 | 	add	fp, #16
110dc     A7 FA 61 FC | 	wrlong	result1, fp
110e0     08 4E 05 F1 | 	add	fp, #8
110e4     A7 3C 68 FC | 	wrlong	#30, fp
110e8     08 4E 85 F1 | 	sub	fp, #8
110ec     A7 12 02 F6 | 	mov	arg01, fp
110f0     10 4E 85 F1 | 	sub	fp, #16
110f4     B8 A7 BF FD | 	call	#_push
110f8     A7 F0 03 F6 | 	mov	ptra, fp
110fc     B2 00 A0 FD | 	call	#popregs_
11100                 | _do_getnotevalue_ret
11100     2D 00 64 FD | 	ret
11104                 | 
11104                 | ' 
11104                 | ' '-------------------- getpixel
11104                 | ' 
11104                 | ' sub do_getpixel
11104                 | _do_getpixel
11104     00 4A 05 F6 | 	mov	COUNT_, #0
11108     A8 00 A0 FD | 	call	#pushregs_
1110c     24 F0 07 F1 | 	add	ptra, #36
11110     4A 00 00 FF 
11114     80 E4 05 F1 | 	add	objptr, ##38016
11118     F2 16 02 FB | 	rdlong	arg03, objptr
1111c     0B 15 02 F6 | 	mov	arg02, arg03
11120     01 14 66 F0 | 	shl	arg02, #1
11124     0B 15 02 F1 | 	add	arg02, arg03
11128     02 14 66 F0 | 	shl	arg02, #2
1112c     03 00 00 FF 
11130     04 E4 85 F1 | 	sub	objptr, ##1540
11134     F2 14 02 F1 | 	add	arg02, objptr
11138     0A 17 02 FB | 	rdlong	arg03, arg02
1113c     18 4E 05 F1 | 	add	fp, #24
11140     A7 16 62 FC | 	wrlong	arg03, fp
11144                 | ' 
11144                 | ' numpar=compiledline(lineptr_e).result.uresult
11144                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11144     18 4E 85 F1 | 	sub	fp, #24
11148     02 16 0E F2 | 	cmp	arg03, #2 wz
1114c     47 00 00 FF 
11150     7C E4 85 F1 | 	sub	objptr, ##36476
11154     40 00 90 AD |  if_e	jmp	#LR__1430
11158     00 12 06 F6 | 	mov	arg01, #0
1115c     90 61 B1 FD | 	call	#__system___getiolock_0570
11160     FD 12 02 F6 | 	mov	arg01, result1
11164     5C 04 B1 FD | 	call	#__system___lockmem
11168     8C 01 00 FF 
1116c     CA 15 06 F6 | 	mov	arg02, ##@LR__5564
11170     00 12 06 F6 | 	mov	arg01, #0
11174     00 16 06 F6 | 	mov	arg03, #0
11178     3C 11 B1 FD | 	call	#__system___basic_print_string
1117c     00 12 06 F6 | 	mov	arg01, #0
11180     6C 61 B1 FD | 	call	#__system___getiolock_0570
11184     FD 00 68 FC | 	wrlong	#0, result1
11188     27 12 06 F6 | 	mov	arg01, #39
1118c     00 14 06 F6 | 	mov	arg02, #0
11190     70 CE B0 FD | 	call	#_printerror
11194     B4 00 90 FD | 	jmp	#LR__1431
11198                 | LR__1430
11198     7C A6 BF FD | 	call	#_pop
1119c     FD 16 02 F6 | 	mov	arg03, result1
111a0     FE 14 02 F6 | 	mov	arg02, result2
111a4     FF 12 02 F6 | 	mov	arg01, result3
111a8     0C 4E 05 F1 | 	add	fp, #12
111ac     A7 16 62 FC | 	wrlong	arg03, fp
111b0     04 4E 05 F1 | 	add	fp, #4
111b4     A7 14 62 FC | 	wrlong	arg02, fp
111b8     04 4E 05 F1 | 	add	fp, #4
111bc     A7 12 62 FC | 	wrlong	arg01, fp
111c0     14 4E 85 F1 | 	sub	fp, #20
111c4     50 A6 BF FD | 	call	#_pop
111c8     FF 16 02 F6 | 	mov	arg03, result3
111cc     A7 FA 61 FC | 	wrlong	result1, fp
111d0     04 4E 05 F1 | 	add	fp, #4
111d4     A7 FC 61 FC | 	wrlong	result2, fp
111d8     04 4E 05 F1 | 	add	fp, #4
111dc     A7 16 62 FC | 	wrlong	arg03, fp
111e0     08 4E 85 F1 | 	sub	fp, #8
111e4     A7 12 02 F6 | 	mov	arg01, fp
111e8     10 A8 BF FD | 	call	#_converttoint
111ec     1C 4E 05 F1 | 	add	fp, #28
111f0     A7 FA 61 FC | 	wrlong	result1, fp
111f4     10 4E 85 F1 | 	sub	fp, #16
111f8     A7 12 02 F6 | 	mov	arg01, fp
111fc     0C 4E 85 F1 | 	sub	fp, #12
11200     F8 A7 BF FD | 	call	#_converttoint
11204     FD 16 02 F6 | 	mov	arg03, result1
11208     20 4E 05 F1 | 	add	fp, #32
1120c     A7 16 62 FC | 	wrlong	arg03, fp
11210     F2 12 02 FB | 	rdlong	arg01, objptr
11214     04 4E 85 F1 | 	sub	fp, #4
11218     A7 FE 01 FB | 	rdlong	result3, fp
1121c     FF 12 02 F1 | 	add	arg01, result3
11220     1C 4E 85 F1 | 	sub	fp, #28
11224     0A 16 66 F0 | 	shl	arg03, #10
11228     0B 13 02 F1 | 	add	arg01, arg03
1122c     38 D0 B0 FD | 	call	#_pspeek
11230     FD FA E1 F8 | 	getbyte	result1, result1, #0
11234     A7 FA 61 FC | 	wrlong	result1, fp
11238     08 4E 05 F1 | 	add	fp, #8
1123c     A7 3A 68 FC | 	wrlong	#29, fp
11240     08 4E 85 F1 | 	sub	fp, #8
11244     A7 12 02 F6 | 	mov	arg01, fp
11248     64 A6 BF FD | 	call	#_push
1124c                 | LR__1431
1124c     A7 F0 03 F6 | 	mov	ptra, fp
11250     B2 00 A0 FD | 	call	#popregs_
11254                 | _do_getpixel_ret
11254     2D 00 64 FD | 	ret
11258                 | 
11258                 | ' 
11258                 | ' '-------------------- gettime
11258                 | ' 
11258                 | ' sub do_gettime
11258                 | _do_gettime
11258     02 4A 05 F6 | 	mov	COUNT_, #2
1125c     A8 00 A0 FD | 	call	#pushregs_
11260     14 F0 07 F1 | 	add	ptra, #20
11264                 | ' 
11264                 | ' const asm 
11264     1A 1E 72 FD | 	getct	local01 wc
11268     1A 20 62 FD | 	getct	local02
1126c                 | ' return hi1, lo1
1126c     10 FD 01 F6 | 	mov	result2, local02
11270     A7 1E 62 FC | 	wrlong	local01, fp
11274     04 4E 05 F1 | 	add	fp, #4
11278     A7 FC 61 FC | 	wrlong	result2, fp
1127c     0C 4E 05 F1 | 	add	fp, #12
11280     A7 3A 68 FC | 	wrlong	#29, fp
11284     0C 4E 85 F1 | 	sub	fp, #12
11288     A7 12 02 FB | 	rdlong	arg01, fp
1128c     04 4E 05 F1 | 	add	fp, #4
11290     A7 12 62 FC | 	wrlong	arg01, fp
11294     08 4E 85 F1 | 	sub	fp, #8
11298     A7 12 02 FB | 	rdlong	arg01, fp
1129c     0C 4E 05 F1 | 	add	fp, #12
112a0     A7 12 62 FC | 	wrlong	arg01, fp
112a4     04 4E 85 F1 | 	sub	fp, #4
112a8     A7 12 02 F6 | 	mov	arg01, fp
112ac     08 4E 85 F1 | 	sub	fp, #8
112b0     FC A5 BF FD | 	call	#_push
112b4     A7 F0 03 F6 | 	mov	ptra, fp
112b8     B2 00 A0 FD | 	call	#popregs_
112bc                 | _do_gettime_ret
112bc     2D 00 64 FD | 	ret
112c0                 | 
112c0                 | ' 
112c0                 | ' '-------------------- gosub
112c0                 | ' 
112c0                 | ' sub do_gosub()
112c0                 | _do_gosub
112c0     50 00 00 FF 
112c4     0C E5 05 F1 | 	add	objptr, ##41228
112c8     F2 00 02 FB | 	rdlong	_var01, objptr
112cc     01 00 06 F1 | 	add	_var01, #1
112d0     F2 00 62 FC | 	wrlong	_var01, objptr
112d4                 | ' gosubtop+=1
112d4                 | ' if compiledline(lineptr_e+1).result_type=token_end then
112d4     06 00 00 FF 
112d8     8C E4 85 F1 | 	sub	objptr, ##3212
112dc     F2 00 02 FB | 	rdlong	_var01, objptr
112e0     01 00 06 F1 | 	add	_var01, #1
112e4     00 03 02 F6 | 	mov	_var02, _var01
112e8     01 02 66 F0 | 	shl	_var02, #1
112ec     00 03 02 F1 | 	add	_var02, _var01
112f0     02 02 66 F0 | 	shl	_var02, #2
112f4     03 00 00 FF 
112f8     04 E4 85 F1 | 	sub	objptr, ##1540
112fc     F2 02 02 F1 | 	add	_var02, objptr
11300     08 02 06 F1 | 	add	_var02, #8
11304     01 03 02 FB | 	rdlong	_var02, _var02
11308     FE 03 0E F2 | 	cmp	_var02, #510 wz
1130c     47 00 00 FF 
11310     7C E4 85 F1 | 	sub	objptr, ##36476
11314     58 00 90 5D |  if_ne	jmp	#LR__1440
11318     50 00 00 FF 
1131c     0C E5 05 F1 | 	add	objptr, ##41228
11320     F2 02 02 FB | 	rdlong	_var02, objptr
11324     03 02 66 F0 | 	shl	_var02, #3
11328     03 00 00 FF 
1132c     60 E5 85 F1 | 	sub	objptr, ##1888
11330     F2 02 02 F1 | 	add	_var02, objptr
11334     03 00 00 FF 
11338     0C E5 05 F1 | 	add	objptr, ##1804
1133c     F2 00 02 FB | 	rdlong	_var01, objptr
11340     01 01 62 FC | 	wrlong	_var01, _var02
11344     54 E4 05 F1 | 	add	objptr, #84
11348     F2 02 02 FB | 	rdlong	_var02, objptr
1134c     03 02 66 F0 | 	shl	_var02, #3
11350     03 00 00 FF 
11354     60 E5 85 F1 | 	sub	objptr, ##1888
11358     F2 02 02 F1 | 	add	_var02, objptr
1135c     04 02 06 F1 | 	add	_var02, #4
11360     01 01 68 FC | 	wrlong	#0, _var02
11364     4C 00 00 FF 
11368     AC E5 85 F1 | 	sub	objptr, ##39340
1136c     64 00 90 FD | 	jmp	#LR__1441
11370                 | LR__1440
11370     50 00 00 FF 
11374     0C E5 05 F1 | 	add	objptr, ##41228
11378     F2 02 02 FB | 	rdlong	_var02, objptr
1137c     03 02 66 F0 | 	shl	_var02, #3
11380     03 00 00 FF 
11384     60 E5 85 F1 | 	sub	objptr, ##1888
11388     F2 02 02 F1 | 	add	_var02, objptr
1138c     03 00 00 FF 
11390     14 E5 05 F1 | 	add	objptr, ##1812
11394     F2 00 02 FB | 	rdlong	_var01, objptr
11398     01 01 62 FC | 	wrlong	_var01, _var02
1139c     4C E4 05 F1 | 	add	objptr, #76
113a0     F2 02 02 FB | 	rdlong	_var02, objptr
113a4     03 02 66 F0 | 	shl	_var02, #3
113a8     03 00 00 FF 
113ac     60 E5 85 F1 | 	sub	objptr, ##1888
113b0     F2 02 02 F1 | 	add	_var02, objptr
113b4     02 00 00 FF 
113b8     2C E5 85 F1 | 	sub	objptr, ##1324
113bc     F2 00 02 FB | 	rdlong	_var01, objptr
113c0     4A 00 00 FF 
113c4     80 E4 85 F1 | 	sub	objptr, ##38016
113c8     02 00 06 F1 | 	add	_var01, #2
113cc     04 02 06 F1 | 	add	_var02, #4
113d0     01 01 62 FC | 	wrlong	_var01, _var02
113d4                 | LR__1441
113d4                 | _do_gosub_ret
113d4     2D 00 64 FD | 	ret
113d8                 | 
113d8                 | ' 
113d8                 | ' '--------------------- goto
113d8                 | ' 
113d8                 | ' '------- fast goto
113d8                 | ' 
113d8                 | ' sub do_fast_goto
113d8                 | _do_fast_goto
113d8     02 4A 05 F6 | 	mov	COUNT_, #2
113dc     A8 00 A0 FD | 	call	#pushregs_
113e0                 | _do_fast_goto_enter
113e0     4A 00 00 FF 
113e4     80 E4 05 F1 | 	add	objptr, ##38016
113e8     F2 12 02 FB | 	rdlong	arg01, objptr
113ec     09 1F 02 F6 | 	mov	local01, arg01
113f0     01 1E 66 F0 | 	shl	local01, #1
113f4     09 1F 02 F1 | 	add	local01, arg01
113f8     02 1E 66 F0 | 	shl	local01, #2
113fc     03 00 00 FF 
11400     04 E4 85 F1 | 	sub	objptr, ##1540
11404     F2 1E 02 F1 | 	add	local01, objptr
11408     0F 21 02 FB | 	rdlong	local02, local01
1140c     10 13 02 F6 | 	mov	arg01, local02
11410     47 00 00 FF 
11414     7C E4 85 F1 | 	sub	objptr, ##36476
11418     A4 CE B0 FD | 	call	#_pslpeek
1141c     FD 12 02 F6 | 	mov	arg01, result1
11420                 | ' 
11420                 | ' testptr=compiledline(lineptr_e).result.uresult
11420                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
11420                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
11420     4A 00 00 FF 
11424     80 E4 05 F1 | 	add	objptr, ##38016
11428     F2 FA 01 FB | 	rdlong	result1, objptr
1142c     FD 1E 02 F6 | 	mov	local01, result1
11430     01 1E 66 F0 | 	shl	local01, #1
11434     FD 1E 02 F1 | 	add	local01, result1
11438     02 1E 66 F0 | 	shl	local01, #2
1143c     03 00 00 FF 
11440     04 E4 85 F1 | 	sub	objptr, ##1540
11444     F2 1E 02 F1 | 	add	local01, objptr
11448     04 1E 06 F1 | 	add	local01, #4
1144c     0F 1F 02 FB | 	rdlong	local01, local01
11450     0F 13 0A F2 | 	cmp	arg01, local01 wz
11454     47 00 00 FF 
11458     7C E4 85 F1 | 	sub	objptr, ##36476
1145c     58 00 90 5D |  if_ne	jmp	#LR__1450
11460     50 00 00 FF 
11464     B8 E4 05 F1 | 	add	objptr, ##41144
11468     F2 20 62 FC | 	wrlong	local02, objptr
1146c     06 00 00 FF 
11470     3C E4 85 F1 | 	sub	objptr, ##3132
11474     F2 20 02 FB | 	rdlong	local02, objptr
11478     01 20 86 F1 | 	sub	local02, #1
1147c     04 E4 05 F1 | 	add	objptr, #4
11480     F2 20 62 FC | 	wrlong	local02, objptr
11484                 | '   runptr=testptr
11484                 | '   lineptr_e=lineptr-1
11484                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
11484     06 00 00 FF 
11488     84 E4 05 F1 | 	add	objptr, ##3204
1148c     F2 20 02 FB | 	rdlong	local02, objptr
11490     50 00 00 FF 
11494     04 E5 85 F1 | 	sub	objptr, ##41220
11498     FF FF 3F FF 
1149c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
114a0     50 00 00 AF 
114a4     04 E5 05 A1 |  if_e	add	objptr, ##41220
114a8     F2 00 68 AC |  if_e	wrlong	#0, objptr
114ac     50 00 00 AF 
114b0     04 E5 85 A1 |  if_e	sub	objptr, ##41220
114b4     04 00 90 FD | 	jmp	#LR__1451
114b8                 | LR__1450
114b8     0C 00 B0 FD | 	call	#_do_find_goto
114bc                 | LR__1451
114bc     A7 F0 03 F6 | 	mov	ptra, fp
114c0     B2 00 A0 FD | 	call	#popregs_
114c4                 | _do_fast_goto_ret
114c4     2D 00 64 FD | 	ret
114c8                 | 
114c8                 | ' 
114c8                 | ' '------- find goto  
114c8                 | ' 
114c8                 | ' sub do_find_goto
114c8                 | _do_find_goto
114c8     03 4A 05 F6 | 	mov	COUNT_, #3
114cc     A8 00 A0 FD | 	call	#pushregs_
114d0     24 F0 07 F1 | 	add	ptra, #36
114d4                 | _do_find_goto_enter
114d4     4A 00 00 FF 
114d8     80 E4 05 F1 | 	add	objptr, ##38016
114dc     F2 1E 02 FB | 	rdlong	local01, objptr
114e0     0F 21 02 F6 | 	mov	local02, local01
114e4     01 20 66 F0 | 	shl	local02, #1
114e8     0F 21 02 F1 | 	add	local02, local01
114ec     02 20 66 F0 | 	shl	local02, #2
114f0     03 00 00 FF 
114f4     04 E4 85 F1 | 	sub	objptr, ##1540
114f8     F2 20 02 F1 | 	add	local02, objptr
114fc     04 20 06 F1 | 	add	local02, #4
11500     10 21 02 FB | 	rdlong	local02, local02
11504     A7 20 62 FC | 	wrlong	local02, fp
11508     03 00 00 FF 
1150c     0C E4 05 F1 | 	add	objptr, ##1548
11510     F2 22 02 FB | 	rdlong	local03, objptr
11514     4A 00 00 FF 
11518     88 E4 85 F1 | 	sub	objptr, ##38024
1151c     04 4E 05 F1 | 	add	fp, #4
11520     A7 22 62 FC | 	wrlong	local03, fp
11524     04 4E 85 F1 | 	sub	fp, #4
11528                 | ' 
11528                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
11528                 | ' gotoptr=programstart
11528                 | ' do
11528                 | LR__1460
11528     0C 4E 05 F1 | 	add	fp, #12
1152c     A7 12 02 F6 | 	mov	arg01, fp
11530     08 4E 85 F1 | 	sub	fp, #8
11534     A7 14 02 FB | 	rdlong	arg02, fp
11538     04 4E 85 F1 | 	sub	fp, #4
1153c     18 16 06 F6 | 	mov	arg03, #24
11540     0B 00 00 FF 
11544     CC E4 05 F1 | 	add	objptr, ##5836
11548     38 F4 B0 FD | 	call	#_psram_spin2_read1
1154c     0B 00 00 FF 
11550     CC E4 85 F1 | 	sub	objptr, ##5836
11554                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11554                 | '   if gotoheader(0)<>$FFFFFFFF then
11554     0C 4E 05 F1 | 	add	fp, #12
11558     A7 22 02 FB | 	rdlong	local03, fp
1155c     0C 4E 85 F1 | 	sub	fp, #12
11560     FF FF 7F FF 
11564     FF 23 0E F2 | 	cmp	local03, ##-1 wz
11568     24 00 90 AD |  if_e	jmp	#LR__1461
1156c     04 4E 05 F1 | 	add	fp, #4
11570     A7 22 02 FB | 	rdlong	local03, fp
11574     04 4E 05 F1 | 	add	fp, #4
11578     A7 22 62 FC | 	wrlong	local03, fp
1157c     18 4E 05 F1 | 	add	fp, #24
11580     A7 22 02 FB | 	rdlong	local03, fp
11584     1C 4E 85 F1 | 	sub	fp, #28
11588     A7 22 62 FC | 	wrlong	local03, fp
1158c     04 4E 85 F1 | 	sub	fp, #4
11590                 | LR__1461
11590     20 4E 05 F1 | 	add	fp, #32
11594     A7 22 02 FB | 	rdlong	local03, fp
11598     20 4E 85 F1 | 	sub	fp, #32
1159c     FF FF 3F FF 
115a0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
115a4     0C 4E 05 51 |  if_ne	add	fp, #12
115a8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
115ac     0C 4E 85 51 |  if_ne	sub	fp, #12
115b0     FF FF 7F 5F 
115b4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
115b8     18 00 90 AD |  if_e	jmp	#LR__1462
115bc     0C 4E 05 F1 | 	add	fp, #12
115c0     A7 22 02 FB | 	rdlong	local03, fp
115c4     0C 4E 85 F1 | 	sub	fp, #12
115c8     A7 20 02 FB | 	rdlong	local02, fp
115cc     10 23 0A F2 | 	cmp	local03, local02 wz
115d0     54 FF 9F 5D |  if_ne	jmp	#LR__1460
115d4                 | LR__1462
115d4                 | ' 
115d4                 | ' if gotoheader(0)=gotoline then
115d4     0C 4E 05 F1 | 	add	fp, #12
115d8     A7 22 02 FB | 	rdlong	local03, fp
115dc     0C 4E 85 F1 | 	sub	fp, #12
115e0     A7 1E 02 FB | 	rdlong	local01, fp
115e4     0F 23 0A F2 | 	cmp	local03, local01 wz
115e8     D8 00 90 5D |  if_ne	jmp	#LR__1463
115ec     4A 00 00 FF 
115f0     80 E4 05 F1 | 	add	objptr, ##38016
115f4     F2 1E 02 FB | 	rdlong	local01, objptr
115f8     0F 21 02 F6 | 	mov	local02, local01
115fc     01 20 66 F0 | 	shl	local02, #1
11600     0F 21 02 F1 | 	add	local02, local01
11604     02 20 66 F0 | 	shl	local02, #2
11608     03 00 00 FF 
1160c     04 E4 85 F1 | 	sub	objptr, ##1540
11610     F2 20 02 F1 | 	add	local02, objptr
11614     08 4E 05 F1 | 	add	fp, #8
11618     A7 22 02 FB | 	rdlong	local03, fp
1161c     10 23 62 FC | 	wrlong	local03, local02
11620     03 00 00 FF 
11624     04 E4 05 F1 | 	add	objptr, ##1540
11628     F2 1E 02 FB | 	rdlong	local01, objptr
1162c     0F 21 02 F6 | 	mov	local02, local01
11630     01 20 66 F0 | 	shl	local02, #1
11634     0F 21 02 F1 | 	add	local02, local01
11638     02 20 66 F0 | 	shl	local02, #2
1163c     03 00 00 FF 
11640     04 E4 85 F1 | 	sub	objptr, ##1540
11644     F2 20 02 F1 | 	add	local02, objptr
11648     08 20 06 F1 | 	add	local02, #8
1164c     10 9D 68 FC | 	wrlong	#78, local02
11650     03 00 00 FF 
11654     04 E4 05 F1 | 	add	objptr, ##1540
11658     F2 20 02 FB | 	rdlong	local02, objptr
1165c     10 13 02 F6 | 	mov	arg01, local02
11660     01 12 66 F0 | 	shl	arg01, #1
11664     10 13 02 F1 | 	add	arg01, local02
11668     02 12 66 F0 | 	shl	arg01, #2
1166c     03 00 00 FF 
11670     04 E4 85 F1 | 	sub	objptr, ##1540
11674     F2 12 02 F1 | 	add	arg01, objptr
11678     09 00 00 FF 
1167c     44 E4 05 F1 | 	add	objptr, ##4676
11680     F2 14 02 FB | 	rdlong	arg02, objptr
11684     02 22 06 F6 | 	mov	local03, #2
11688     10 23 02 F1 | 	add	local03, local02
1168c     0B 00 00 FF 
11690     5C E4 85 F1 | 	sub	objptr, ##5724
11694     F2 16 02 FB | 	rdlong	arg03, objptr
11698     0B 23 02 FD | 	qmul	local03, arg03
1169c     08 4E 85 F1 | 	sub	fp, #8
116a0     39 00 00 FF 
116a4     98 E5 85 F1 | 	sub	objptr, ##29592
116a8     18 22 62 FD | 	getqx	local03
116ac     11 15 02 F1 | 	add	arg02, local03
116b0     6C F3 B0 FD | 	call	#_psram_spin2_write
116b4     0B 00 00 FF 
116b8     CC E4 85 F1 | 	sub	objptr, ##5836
116bc     18 FD BF FD | 	call	#_do_fast_goto
116c0     0C 00 90 FD | 	jmp	#LR__1464
116c4                 | LR__1463
116c4     26 12 06 F6 | 	mov	arg01, #38
116c8     00 14 06 F6 | 	mov	arg02, #0
116cc     34 C9 B0 FD | 	call	#_printerror
116d0                 | LR__1464
116d0     A7 F0 03 F6 | 	mov	ptra, fp
116d4     B2 00 A0 FD | 	call	#popregs_
116d8                 | _do_find_goto_ret
116d8     2D 00 64 FD | 	ret
116dc                 | 
116dc                 | ' 
116dc                 | ' '------- slow goto  
116dc                 | ' 
116dc                 | ' sub do_slow_goto
116dc                 | _do_slow_goto
116dc     02 4A 05 F6 | 	mov	COUNT_, #2
116e0     A8 00 A0 FD | 	call	#pushregs_
116e4     30 F0 07 F1 | 	add	ptra, #48
116e8     2C A1 BF FD | 	call	#_pop
116ec     FF 1E 02 F6 | 	mov	local01, result3
116f0     24 4E 05 F1 | 	add	fp, #36
116f4     A7 FA 61 FC | 	wrlong	result1, fp
116f8     04 4E 05 F1 | 	add	fp, #4
116fc     A7 FC 61 FC | 	wrlong	result2, fp
11700     04 4E 05 F1 | 	add	fp, #4
11704     A7 1E 62 FC | 	wrlong	local01, fp
11708     08 4E 85 F1 | 	sub	fp, #8
1170c     A7 12 02 F6 | 	mov	arg01, fp
11710     24 4E 85 F1 | 	sub	fp, #36
11714     E4 A2 BF FD | 	call	#_converttoint
11718     A7 FA 61 FC | 	wrlong	result1, fp
1171c     4A 00 00 FF 
11720     88 E4 05 F1 | 	add	objptr, ##38024
11724     F2 20 02 FB | 	rdlong	local02, objptr
11728     4A 00 00 FF 
1172c     88 E4 85 F1 | 	sub	objptr, ##38024
11730     04 4E 05 F1 | 	add	fp, #4
11734     A7 20 62 FC | 	wrlong	local02, fp
11738     04 4E 85 F1 | 	sub	fp, #4
1173c                 | ' 
1173c                 | ' t1=pop() : gotoline=converttoint(t1)
1173c                 | ' gotoptr=programstart
1173c                 | ' do
1173c                 | LR__1470
1173c     0C 4E 05 F1 | 	add	fp, #12
11740     A7 12 02 F6 | 	mov	arg01, fp
11744     08 4E 85 F1 | 	sub	fp, #8
11748     A7 14 02 FB | 	rdlong	arg02, fp
1174c     04 4E 85 F1 | 	sub	fp, #4
11750     18 16 06 F6 | 	mov	arg03, #24
11754     0B 00 00 FF 
11758     CC E4 05 F1 | 	add	objptr, ##5836
1175c     24 F2 B0 FD | 	call	#_psram_spin2_read1
11760     0B 00 00 FF 
11764     CC E4 85 F1 | 	sub	objptr, ##5836
11768                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11768                 | '   if gotoheader(0)<>$FFFFFFFF then
11768     0C 4E 05 F1 | 	add	fp, #12
1176c     A7 20 02 FB | 	rdlong	local02, fp
11770     0C 4E 85 F1 | 	sub	fp, #12
11774     FF FF 7F FF 
11778     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1177c     24 00 90 AD |  if_e	jmp	#LR__1471
11780     04 4E 05 F1 | 	add	fp, #4
11784     A7 20 02 FB | 	rdlong	local02, fp
11788     04 4E 05 F1 | 	add	fp, #4
1178c     A7 20 62 FC | 	wrlong	local02, fp
11790     18 4E 05 F1 | 	add	fp, #24
11794     A7 20 02 FB | 	rdlong	local02, fp
11798     1C 4E 85 F1 | 	sub	fp, #28
1179c     A7 20 62 FC | 	wrlong	local02, fp
117a0     04 4E 85 F1 | 	sub	fp, #4
117a4                 | LR__1471
117a4     20 4E 05 F1 | 	add	fp, #32
117a8     A7 20 02 FB | 	rdlong	local02, fp
117ac     20 4E 85 F1 | 	sub	fp, #32
117b0     FF FF 3F FF 
117b4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
117b8     0C 4E 05 51 |  if_ne	add	fp, #12
117bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
117c0     0C 4E 85 51 |  if_ne	sub	fp, #12
117c4     FF FF 7F 5F 
117c8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
117cc     18 00 90 AD |  if_e	jmp	#LR__1472
117d0     0C 4E 05 F1 | 	add	fp, #12
117d4     A7 20 02 FB | 	rdlong	local02, fp
117d8     0C 4E 85 F1 | 	sub	fp, #12
117dc     A7 16 02 FB | 	rdlong	arg03, fp
117e0     0B 21 0A F2 | 	cmp	local02, arg03 wz
117e4     54 FF 9F 5D |  if_ne	jmp	#LR__1470
117e8                 | LR__1472
117e8                 | ' if gotoheader(0)=gotoline then  
117e8     0C 4E 05 F1 | 	add	fp, #12
117ec     A7 20 02 FB | 	rdlong	local02, fp
117f0     0C 4E 85 F1 | 	sub	fp, #12
117f4     A7 1E 02 FB | 	rdlong	local01, fp
117f8     0F 21 0A F2 | 	cmp	local02, local01 wz
117fc     60 00 90 5D |  if_ne	jmp	#LR__1473
11800     08 4E 05 F1 | 	add	fp, #8
11804     A7 20 02 FB | 	rdlong	local02, fp
11808     08 4E 85 F1 | 	sub	fp, #8
1180c     50 00 00 FF 
11810     B8 E4 05 F1 | 	add	objptr, ##41144
11814     F2 20 62 FC | 	wrlong	local02, objptr
11818     06 00 00 FF 
1181c     3C E4 85 F1 | 	sub	objptr, ##3132
11820     F2 20 02 FB | 	rdlong	local02, objptr
11824     01 20 86 F1 | 	sub	local02, #1
11828     04 E4 05 F1 | 	add	objptr, #4
1182c     F2 20 62 FC | 	wrlong	local02, objptr
11830                 | '    runptr=oldgotoptr
11830                 | '    lineptr_e=lineptr-1
11830                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
11830     06 00 00 FF 
11834     84 E4 05 F1 | 	add	objptr, ##3204
11838     F2 20 02 FB | 	rdlong	local02, objptr
1183c     50 00 00 FF 
11840     04 E5 85 F1 | 	sub	objptr, ##41220
11844     FF FF 3F FF 
11848     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1184c     50 00 00 AF 
11850     04 E5 05 A1 |  if_e	add	objptr, ##41220
11854     F2 00 68 AC |  if_e	wrlong	#0, objptr
11858     50 00 00 AF 
1185c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11860                 | LR__1473
11860     A7 F0 03 F6 | 	mov	ptra, fp
11864     B2 00 A0 FD | 	call	#popregs_
11868                 | _do_slow_goto_ret
11868     2D 00 64 FD | 	ret
1186c                 | 
1186c                 | ' 
1186c                 | ' ' ----------------  hex$
1186c                 | ' 
1186c                 | ' sub do_hex
1186c                 | _do_hex
1186c     01 4A 05 F6 | 	mov	COUNT_, #1
11870     A8 00 A0 FD | 	call	#pushregs_
11874     18 F0 07 F1 | 	add	ptra, #24
11878     4A 00 00 FF 
1187c     80 E4 05 F1 | 	add	objptr, ##38016
11880     F2 1E 02 FB | 	rdlong	local01, objptr
11884     0F 17 02 F6 | 	mov	arg03, local01
11888     01 16 66 F0 | 	shl	arg03, #1
1188c     0F 17 02 F1 | 	add	arg03, local01
11890     02 16 66 F0 | 	shl	arg03, #2
11894     03 00 00 FF 
11898     04 E4 85 F1 | 	sub	objptr, ##1540
1189c     F2 16 02 F1 | 	add	arg03, objptr
118a0     0B 17 02 FB | 	rdlong	arg03, arg03
118a4     0C 4E 05 F1 | 	add	fp, #12
118a8     A7 16 62 FC | 	wrlong	arg03, fp
118ac                 | ' 
118ac                 | ' numpar=compiledline(lineptr_e).result.uresult
118ac                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
118ac     0C 4E 85 F1 | 	sub	fp, #12
118b0     03 16 16 F2 | 	cmp	arg03, #3 wc
118b4     47 00 00 FF 
118b8     7C E4 85 F1 | 	sub	objptr, ##36476
118bc     0C 4E 05 C1 |  if_b	add	fp, #12
118c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
118c4     0C 4E 85 C1 |  if_b	sub	fp, #12
118c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1480
118cc     00 12 06 F6 | 	mov	arg01, #0
118d0     1C 5A B1 FD | 	call	#__system___getiolock_0570
118d4     FD 12 02 F6 | 	mov	arg01, result1
118d8     E8 FC B0 FD | 	call	#__system___lockmem
118dc     8C 01 00 FF 
118e0     D5 15 06 F6 | 	mov	arg02, ##@LR__5565
118e4     00 12 06 F6 | 	mov	arg01, #0
118e8     00 16 06 F6 | 	mov	arg03, #0
118ec     C8 09 B1 FD | 	call	#__system___basic_print_string
118f0     00 12 06 F6 | 	mov	arg01, #0
118f4     F8 59 B1 FD | 	call	#__system___getiolock_0570
118f8     FD 00 68 FC | 	wrlong	#0, result1
118fc     27 12 06 F6 | 	mov	arg01, #39
11900     00 14 06 F6 | 	mov	arg02, #0
11904     FC C6 B0 FD | 	call	#_printerror
11908     B8 00 90 FD | 	jmp	#LR__1483
1190c                 | LR__1480
1190c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
1190c     0C 4E 05 F1 | 	add	fp, #12
11910     A7 1E 02 FB | 	rdlong	local01, fp
11914     0C 4E 85 F1 | 	sub	fp, #12
11918     02 1E 0E F2 | 	cmp	local01, #2 wz
1191c     38 00 90 5D |  if_ne	jmp	#LR__1481
11920     F4 9E BF FD | 	call	#_pop
11924     FF 1E 02 F6 | 	mov	local01, result3
11928     A7 FA 61 FC | 	wrlong	result1, fp
1192c     04 4E 05 F1 | 	add	fp, #4
11930     A7 FC 61 FC | 	wrlong	result2, fp
11934     04 4E 05 F1 | 	add	fp, #4
11938     A7 1E 62 FC | 	wrlong	local01, fp
1193c     08 4E 85 F1 | 	sub	fp, #8
11940     A7 12 02 F6 | 	mov	arg01, fp
11944     B4 A0 BF FD | 	call	#_converttoint
11948     14 4E 05 F1 | 	add	fp, #20
1194c     A7 FA 61 FC | 	wrlong	result1, fp
11950     14 4E 85 F1 | 	sub	fp, #20
11954     0C 00 90 FD | 	jmp	#LR__1482
11958                 | LR__1481
11958     14 4E 05 F1 | 	add	fp, #20
1195c     A7 10 68 FC | 	wrlong	#8, fp
11960     14 4E 85 F1 | 	sub	fp, #20
11964                 | LR__1482
11964     B0 9E BF FD | 	call	#_pop
11968     FF 1E 02 F6 | 	mov	local01, result3
1196c     A7 FA 61 FC | 	wrlong	result1, fp
11970     04 4E 05 F1 | 	add	fp, #4
11974     A7 FC 61 FC | 	wrlong	result2, fp
11978     04 4E 05 F1 | 	add	fp, #4
1197c     A7 1E 62 FC | 	wrlong	local01, fp
11980     08 4E 85 F1 | 	sub	fp, #8
11984     A7 12 02 F6 | 	mov	arg01, fp
11988     70 A0 BF FD | 	call	#_converttoint
1198c     10 4E 05 F1 | 	add	fp, #16
11990     A7 FA 61 FC | 	wrlong	result1, fp
11994     FD 12 02 F6 | 	mov	arg01, result1
11998     04 4E 05 F1 | 	add	fp, #4
1199c     A7 14 02 FB | 	rdlong	arg02, fp
119a0     14 4E 85 F1 | 	sub	fp, #20
119a4     10 16 06 F6 | 	mov	arg03, #16
119a8     E8 1E B1 FD | 	call	#__system__Number_S
119ac     A7 FA 61 FC | 	wrlong	result1, fp
119b0     08 4E 05 F1 | 	add	fp, #8
119b4     A7 3E 68 FC | 	wrlong	#31, fp
119b8     08 4E 85 F1 | 	sub	fp, #8
119bc     A7 12 02 F6 | 	mov	arg01, fp
119c0     EC 9E BF FD | 	call	#_push
119c4                 | LR__1483
119c4     A7 F0 03 F6 | 	mov	ptra, fp
119c8     B2 00 A0 FD | 	call	#popregs_
119cc                 | _do_hex_ret
119cc     2D 00 64 FD | 	ret
119d0                 | 
119d0                 | ' 
119d0                 | ' ' ----------------  if
119d0                 | ' 
119d0                 | ' sub do_if
119d0                 | _do_if
119d0     05 4A 05 F6 | 	mov	COUNT_, #5
119d4     A8 00 A0 FD | 	call	#pushregs_
119d8     3C 9E BF FD | 	call	#_pop
119dc     FD 1E 0A F6 | 	mov	local01, result1 wz
119e0     FE 20 02 F6 | 	mov	local02, result2
119e4     FF 22 02 F6 | 	mov	local03, result3
119e8                 | ' t1=pop()
119e8                 | ' ' if uresult=0, jump over else
119e8                 | ' if t1.result.uresult = 0 then 
119e8     BC 00 90 5D |  if_ne	jmp	#LR__1492
119ec                 | '   for i=lineptr_e to lineptr-1
119ec     4A 00 00 FF 
119f0     80 E4 05 F1 | 	add	objptr, ##38016
119f4     F2 24 02 FB | 	rdlong	local04, objptr
119f8     04 E4 85 F1 | 	sub	objptr, #4
119fc     F2 26 02 FB | 	rdlong	local05, objptr
11a00     4A 00 00 FF 
11a04     7C E4 85 F1 | 	sub	objptr, ##38012
11a08                 | LR__1490
11a08     13 25 52 F2 | 	cmps	local04, local05 wc
11a0c     78 00 90 3D |  if_ae	jmp	#LR__1491
11a10     12 FF 01 F6 | 	mov	result3, local04
11a14     01 FE 65 F0 | 	shl	result3, #1
11a18     12 FF 01 F1 | 	add	result3, local04
11a1c     02 FE 65 F0 | 	shl	result3, #2
11a20     47 00 00 FF 
11a24     7C E4 05 F1 | 	add	objptr, ##36476
11a28     F2 FE 01 F1 | 	add	result3, objptr
11a2c     FF 1E 02 FB | 	rdlong	local01, result3
11a30     04 FE 05 F1 | 	add	result3, #4
11a34     FF FC 01 FB | 	rdlong	result2, result3
11a38     12 FF 01 F6 | 	mov	result3, local04
11a3c     01 FE 65 F0 | 	shl	result3, #1
11a40     12 FF 01 F1 | 	add	result3, local04
11a44     02 FE 65 F0 | 	shl	result3, #2
11a48     F2 FE 01 F1 | 	add	result3, objptr
11a4c     08 FE 05 F1 | 	add	result3, #8
11a50     FF FE 01 FB | 	rdlong	result3, result3
11a54     FE 20 02 F6 | 	mov	local02, result2
11a58     FF 22 02 F6 | 	mov	local03, result3
11a5c                 | '     t1=compiledline(i)
11a5c                 | '     if t1.result_type=token_else then lineptr_e=i : return
11a5c     5A 22 0E F2 | 	cmp	local03, #90 wz
11a60     47 00 00 FF 
11a64     7C E4 85 F1 | 	sub	objptr, ##36476
11a68     4A 00 00 AF 
11a6c     80 E4 05 A1 |  if_e	add	objptr, ##38016
11a70     F2 24 62 AC |  if_e	wrlong	local04, objptr
11a74     4A 00 00 AF 
11a78     80 E4 85 A1 |  if_e	sub	objptr, ##38016
11a7c     28 00 90 AD |  if_e	jmp	#LR__1493
11a80     01 24 06 F1 | 	add	local04, #1
11a84     80 FF 9F FD | 	jmp	#LR__1490
11a88                 | LR__1491
11a88     4A 00 00 FF 
11a8c     7C E4 05 F1 | 	add	objptr, ##38012
11a90     F2 26 02 FB | 	rdlong	local05, objptr
11a94     01 26 86 F1 | 	sub	local05, #1
11a98     04 E4 05 F1 | 	add	objptr, #4
11a9c     F2 26 62 FC | 	wrlong	local05, objptr
11aa0     4A 00 00 FF 
11aa4     80 E4 85 F1 | 	sub	objptr, ##38016
11aa8                 | LR__1492
11aa8                 | LR__1493
11aa8     A7 F0 03 F6 | 	mov	ptra, fp
11aac     B2 00 A0 FD | 	call	#popregs_
11ab0                 | _do_if_ret
11ab0     2D 00 64 FD | 	ret
11ab4                 | 
11ab4                 | ' 
11ab4                 | ' ' ----------------  inkey$
11ab4                 | ' 
11ab4                 | ' sub do_inkey
11ab4                 | _do_inkey
11ab4     02 4A 05 F6 | 	mov	COUNT_, #2
11ab8     A8 00 A0 FD | 	call	#pushregs_
11abc     0C F0 07 F1 | 	add	ptra, #12
11ac0     EC F2 B0 FD | 	call	#_usbnew_spin2_get_key
11ac4     45 00 00 FF 
11ac8     74 E4 05 F1 | 	add	objptr, ##35444
11acc     F2 FA 61 FC | 	wrlong	result1, objptr
11ad0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
11ad0     45 00 00 FF 
11ad4     74 E4 85 F1 | 	sub	objptr, ##35444
11ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
11adc     94 00 90 AD |  if_e	jmp	#LR__1501
11ae0     45 00 00 FF 
11ae4     74 E4 05 F1 | 	add	objptr, ##35444
11ae8     F2 1C 02 FB | 	rdlong	arg06, objptr
11aec     45 00 00 FF 
11af0     74 E4 85 F1 | 	sub	objptr, ##35444
11af4     00 00 40 FF 
11af8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11afc     45 00 00 CF 
11b00     74 E4 05 C1 |  if_b	add	objptr, ##35444
11b04     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11b08     45 00 00 CF 
11b0c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11b10     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
11b14     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11b18     58 00 90 3D |  if_ae	jmp	#LR__1501
11b1c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
11b1c     50 00 00 FF 
11b20     14 E5 05 F1 | 	add	objptr, ##41236
11b24     F2 1C 02 FB | 	rdlong	arg06, objptr
11b28     50 00 00 FF 
11b2c     14 E5 85 F1 | 	sub	objptr, ##41236
11b30     01 1C 0E F2 | 	cmp	arg06, #1 wz
11b34     3C 00 90 5D |  if_ne	jmp	#LR__1500
11b38     51 00 00 FF 
11b3c     B8 E5 05 F1 | 	add	objptr, ##41912
11b40     F2 14 02 FB | 	rdlong	arg02, objptr
11b44     04 E4 85 F1 | 	sub	objptr, #4
11b48     F2 1A 02 FB | 	rdlong	arg05, objptr
11b4c     07 12 06 F6 | 	mov	arg01, #7
11b50     56 00 00 FF 
11b54     44 16 06 F6 | 	mov	arg03, ##44100
11b58     0C 18 C6 F9 | 	decod	arg04, #12
11b5c     01 1C 66 F6 | 	neg	arg06, #1
11b60     46 00 00 FF 
11b64     E8 E4 85 F1 | 	sub	objptr, ##36072
11b68     E8 F5 B0 FD | 	call	#_audio096_spin2_play
11b6c     0B 00 00 FF 
11b70     CC E4 85 F1 | 	sub	objptr, ##5836
11b74                 | LR__1500
11b74                 | LR__1501
11b74                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
11b74     45 00 00 FF 
11b78     74 E4 05 F1 | 	add	objptr, ##35444
11b7c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
11b80     45 00 00 FF 
11b84     74 E4 85 F1 | 	sub	objptr, ##35444
11b88     D4 01 90 AD |  if_e	jmp	#LR__1510
11b8c     45 00 00 FF 
11b90     74 E4 05 F1 | 	add	objptr, ##35444
11b94     F2 1C 02 FB | 	rdlong	arg06, objptr
11b98     45 00 00 FF 
11b9c     74 E4 85 F1 | 	sub	objptr, ##35444
11ba0     00 00 40 FF 
11ba4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11ba8     45 00 00 CF 
11bac     74 E4 05 C1 |  if_b	add	objptr, ##35444
11bb0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11bb4     45 00 00 CF 
11bb8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11bbc     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
11bc0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11bc4     98 01 90 3D |  if_ae	jmp	#LR__1510
11bc8                 | '   if leds and 2 = 2 then 
11bc8     51 00 00 FF 
11bcc     EC E5 05 F1 | 	add	objptr, ##41964
11bd0     F2 1E 0A FB | 	rdlong	local01, objptr wz
11bd4     51 00 00 FF 
11bd8     EC E5 85 F1 | 	sub	objptr, ##41964
11bdc     58 01 90 AD |  if_e	jmp	#LR__1509
11be0                 | '     if key>96 andalso key<123 then
11be0     45 00 00 FF 
11be4     74 E4 05 F1 | 	add	objptr, ##35444
11be8     F2 1E 02 FB | 	rdlong	local01, objptr
11bec     45 00 00 FF 
11bf0     74 E4 85 F1 | 	sub	objptr, ##35444
11bf4     61 1E 16 F2 | 	cmp	local01, #97 wc
11bf8     3C 00 90 CD |  if_b	jmp	#LR__1502
11bfc     45 00 00 FF 
11c00     74 E4 05 F1 | 	add	objptr, ##35444
11c04     F2 1E 02 FB | 	rdlong	local01, objptr
11c08     45 00 00 FF 
11c0c     74 E4 85 F1 | 	sub	objptr, ##35444
11c10     7B 1E 16 F2 | 	cmp	local01, #123 wc
11c14     20 00 90 3D |  if_ae	jmp	#LR__1502
11c18     45 00 00 FF 
11c1c     74 E4 05 F1 | 	add	objptr, ##35444
11c20     F2 1E 02 FB | 	rdlong	local01, objptr
11c24     20 1E 86 F1 | 	sub	local01, #32
11c28     F2 1E 62 FC | 	wrlong	local01, objptr
11c2c     45 00 00 FF 
11c30     74 E4 85 F1 | 	sub	objptr, ##35444
11c34     00 01 90 FD | 	jmp	#LR__1508
11c38                 | LR__1502
11c38     45 00 00 FF 
11c3c     74 E4 05 F1 | 	add	objptr, ##35444
11c40     F2 1E 02 FB | 	rdlong	local01, objptr
11c44     45 00 00 FF 
11c48     74 E4 85 F1 | 	sub	objptr, ##35444
11c4c     41 1E 16 F2 | 	cmp	local01, #65 wc
11c50     3C 00 90 CD |  if_b	jmp	#LR__1503
11c54     45 00 00 FF 
11c58     74 E4 05 F1 | 	add	objptr, ##35444
11c5c     F2 1E 02 FB | 	rdlong	local01, objptr
11c60     45 00 00 FF 
11c64     74 E4 85 F1 | 	sub	objptr, ##35444
11c68     5B 1E 16 F2 | 	cmp	local01, #91 wc
11c6c     20 00 90 3D |  if_ae	jmp	#LR__1503
11c70     45 00 00 FF 
11c74     74 E4 05 F1 | 	add	objptr, ##35444
11c78     F2 1E 02 FB | 	rdlong	local01, objptr
11c7c     20 1E 06 F1 | 	add	local01, #32
11c80     F2 1E 62 FC | 	wrlong	local01, objptr
11c84     45 00 00 FF 
11c88     74 E4 85 F1 | 	sub	objptr, ##35444
11c8c     A8 00 90 FD | 	jmp	#LR__1507
11c90                 | LR__1503
11c90     45 00 00 FF 
11c94     74 E4 05 F1 | 	add	objptr, ##35444
11c98     F2 1E 02 FB | 	rdlong	local01, objptr
11c9c     45 00 00 FF 
11ca0     74 E4 85 F1 | 	sub	objptr, ##35444
11ca4     17 1E 16 F2 | 	cmp	local01, #23 wc
11ca8     3C 00 90 CD |  if_b	jmp	#LR__1504
11cac     45 00 00 FF 
11cb0     74 E4 05 F1 | 	add	objptr, ##35444
11cb4     F2 1E 02 FB | 	rdlong	local01, objptr
11cb8     45 00 00 FF 
11cbc     74 E4 85 F1 | 	sub	objptr, ##35444
11cc0     20 1E 16 F2 | 	cmp	local01, #32 wc
11cc4     20 00 90 3D |  if_ae	jmp	#LR__1504
11cc8     45 00 00 FF 
11ccc     74 E4 05 F1 | 	add	objptr, ##35444
11cd0     F2 1E 02 FB | 	rdlong	local01, objptr
11cd4     09 1E 86 F1 | 	sub	local01, #9
11cd8     F2 1E 62 FC | 	wrlong	local01, objptr
11cdc     45 00 00 FF 
11ce0     74 E4 85 F1 | 	sub	objptr, ##35444
11ce4     50 00 90 FD | 	jmp	#LR__1506
11ce8                 | LR__1504
11ce8     45 00 00 FF 
11cec     74 E4 05 F1 | 	add	objptr, ##35444
11cf0     F2 20 02 FB | 	rdlong	local02, objptr
11cf4     45 00 00 FF 
11cf8     74 E4 85 F1 | 	sub	objptr, ##35444
11cfc     0E 20 16 F2 | 	cmp	local02, #14 wc
11d00     34 00 90 CD |  if_b	jmp	#LR__1505
11d04     45 00 00 FF 
11d08     74 E4 05 F1 | 	add	objptr, ##35444
11d0c     F2 1E 02 FB | 	rdlong	local01, objptr
11d10     45 00 00 FF 
11d14     74 E4 85 F1 | 	sub	objptr, ##35444
11d18     17 1E 16 F2 | 	cmp	local01, #23 wc
11d1c     51 00 00 CF 
11d20     F0 E5 05 C1 |  if_b	add	objptr, ##41968
11d24     F2 20 02 CB |  if_b	rdlong	local02, objptr
11d28     27 20 06 C1 |  if_b	add	local02, #39
11d2c     F2 20 62 CC |  if_b	wrlong	local02, objptr
11d30     51 00 00 CF 
11d34     F0 E5 85 C1 |  if_b	sub	objptr, ##41968
11d38                 | LR__1505
11d38                 | LR__1506
11d38                 | LR__1507
11d38                 | LR__1508
11d38                 | LR__1509
11d38     45 00 00 FF 
11d3c     74 E4 05 F1 | 	add	objptr, ##35444
11d40     F2 12 02 FB | 	rdlong	arg01, objptr
11d44     45 00 00 FF 
11d48     74 E4 85 F1 | 	sub	objptr, ##35444
11d4c     20 C6 B0 FD | 	call	#_scantochar
11d50     FD 12 02 F6 | 	mov	arg01, result1
11d54     AC 1A B1 FD | 	call	#__system__Chr_S
11d58     A7 FA 61 FC | 	wrlong	result1, fp
11d5c     0C 00 90 FD | 	jmp	#LR__1511
11d60                 | LR__1510
11d60     8C 01 00 FF 
11d64     DC 21 06 F6 | 	mov	local02, ##@LR__5566
11d68     A7 20 62 FC | 	wrlong	local02, fp
11d6c                 | LR__1511
11d6c     08 4E 05 F1 | 	add	fp, #8
11d70     A7 3E 68 FC | 	wrlong	#31, fp
11d74     08 4E 85 F1 | 	sub	fp, #8
11d78     A7 12 02 F6 | 	mov	arg01, fp
11d7c     30 9B BF FD | 	call	#_push
11d80     A7 F0 03 F6 | 	mov	ptra, fp
11d84     B2 00 A0 FD | 	call	#popregs_
11d88                 | _do_inkey_ret
11d88     2D 00 64 FD | 	ret
11d8c                 | 
11d8c                 | ' 
11d8c                 | ' ' ----------------  ink
11d8c                 | ' 
11d8c                 | ' sub do_ink
11d8c                 | _do_ink
11d8c     00 4A 05 F6 | 	mov	COUNT_, #0
11d90     A8 00 A0 FD | 	call	#pushregs_
11d94     0C F0 07 F1 | 	add	ptra, #12
11d98     7C 9A BF FD | 	call	#_pop
11d9c     FF 14 02 F6 | 	mov	arg02, result3
11da0     A7 FA 61 FC | 	wrlong	result1, fp
11da4     04 4E 05 F1 | 	add	fp, #4
11da8     A7 FC 61 FC | 	wrlong	result2, fp
11dac     04 4E 05 F1 | 	add	fp, #4
11db0     A7 14 62 FC | 	wrlong	arg02, fp
11db4     08 4E 85 F1 | 	sub	fp, #8
11db8     A7 12 02 F6 | 	mov	arg01, fp
11dbc     3C 9C BF FD | 	call	#_converttoint
11dc0     37 00 00 FF 
11dc4     3C E4 05 F1 | 	add	objptr, ##28220
11dc8     F2 FA 61 FC | 	wrlong	result1, objptr
11dcc     04 E4 85 F1 | 	sub	objptr, #4
11dd0     F2 14 02 FB | 	rdlong	arg02, objptr
11dd4                 | ' 
11dd4                 | ' write_color:=ff
11dd4     36 00 00 FF 
11dd8     F7 E5 85 F1 | 	sub	objptr, ##28151
11ddc     F2 FA 61 FC | 	wrlong	result1, objptr
11de0                 | ' write_background:=bb
11de0     04 E4 05 F1 | 	add	objptr, #4
11de4     F2 14 62 FC | 	wrlong	arg02, objptr
11de8     36 00 00 FF 
11dec     F7 E5 05 F1 | 	add	objptr, ##28151
11df0     F2 12 02 FB | 	rdlong	arg01, objptr
11df4     37 00 00 FF 
11df8     3C E4 85 F1 | 	sub	objptr, ##28220
11dfc     54 CD B0 FD | 	call	#_hg010b_spin2_setcursorcolor
11e00     A7 F0 03 F6 | 	mov	ptra, fp
11e04     B2 00 A0 FD | 	call	#popregs_
11e08                 | _do_ink_ret
11e08     2D 00 64 FD | 	ret
11e0c                 | 
11e0c                 | ' 
11e0c                 | ' ' ----------------  int
11e0c                 | ' 
11e0c                 | ' sub do_int
11e0c                 | _do_int
11e0c     02 4A 05 F6 | 	mov	COUNT_, #2
11e10     A8 00 A0 FD | 	call	#pushregs_
11e14     10 F0 07 F1 | 	add	ptra, #16
11e18     FC 99 BF FD | 	call	#_pop
11e1c     FE 1E 02 F6 | 	mov	local01, result2
11e20     FF 20 02 F6 | 	mov	local02, result3
11e24     A7 FA 61 FC | 	wrlong	result1, fp
11e28     04 4E 05 F1 | 	add	fp, #4
11e2c     A7 1E 62 FC | 	wrlong	local01, fp
11e30     04 4E 05 F1 | 	add	fp, #4
11e34     A7 20 62 FC | 	wrlong	local02, fp
11e38                 | ' 
11e38                 | ' t1=pop()
11e38                 | ' select case t1.result_type
11e38     08 4E 85 F1 | 	sub	fp, #8
11e3c     1E 20 0E F2 | 	cmp	local02, #30 wz
11e40     14 00 90 AD |  if_e	jmp	#LR__1520
11e44     1F 20 0E F2 | 	cmp	local02, #31 wz
11e48     20 00 90 AD |  if_e	jmp	#LR__1521
11e4c     2B 20 0E F2 | 	cmp	local02, #43 wz
11e50     34 00 90 AD |  if_e	jmp	#LR__1522
11e54     50 00 90 FD | 	jmp	#LR__1523
11e58                 | LR__1520
11e58     A7 12 02 FB | 	rdlong	arg01, fp
11e5c     00 14 06 F6 | 	mov	arg02, #0
11e60     E4 29 B1 FD | 	call	#__system___float_tointeger
11e64     A7 FA 61 FC | 	wrlong	result1, fp
11e68     3C 00 90 FD | 	jmp	#LR__1523
11e6c                 | LR__1521
11e6c     A7 12 02 FB | 	rdlong	arg01, fp
11e70     18 2D B1 FD | 	call	#__system____builtin_atof
11e74     FD 12 02 F6 | 	mov	arg01, result1
11e78     00 14 06 F6 | 	mov	arg02, #0
11e7c     C8 29 B1 FD | 	call	#__system___float_tointeger
11e80     A7 FA 61 FC | 	wrlong	result1, fp
11e84     20 00 90 FD | 	jmp	#LR__1523
11e88                 | LR__1522
11e88     A7 12 02 FB | 	rdlong	arg01, fp
11e8c     00 9B BF FD | 	call	#_convertstring
11e90     FD 12 02 F6 | 	mov	arg01, result1
11e94     F4 2C B1 FD | 	call	#__system____builtin_atof
11e98     FD 12 02 F6 | 	mov	arg01, result1
11e9c     00 14 06 F6 | 	mov	arg02, #0
11ea0     A4 29 B1 FD | 	call	#__system___float_tointeger
11ea4     A7 FA 61 FC | 	wrlong	result1, fp
11ea8                 | LR__1523
11ea8     08 4E 05 F1 | 	add	fp, #8
11eac     A7 38 68 FC | 	wrlong	#28, fp
11eb0     08 4E 85 F1 | 	sub	fp, #8
11eb4     A7 12 02 F6 | 	mov	arg01, fp
11eb8     F4 99 BF FD | 	call	#_push
11ebc     A7 F0 03 F6 | 	mov	ptra, fp
11ec0     B2 00 A0 FD | 	call	#popregs_
11ec4                 | _do_int_ret
11ec4     2D 00 64 FD | 	ret
11ec8                 | 
11ec8                 | ' 
11ec8                 | ' ' ----------------  left$
11ec8                 | ' 
11ec8                 | ' sub do_left
11ec8                 | _do_left
11ec8     00 4A 05 F6 | 	mov	COUNT_, #0
11ecc     A8 00 A0 FD | 	call	#pushregs_
11ed0     14 F0 07 F1 | 	add	ptra, #20
11ed4     4A 00 00 FF 
11ed8     80 E4 05 F1 | 	add	objptr, ##38016
11edc     F2 16 02 FB | 	rdlong	arg03, objptr
11ee0     0B 15 02 F6 | 	mov	arg02, arg03
11ee4     01 14 66 F0 | 	shl	arg02, #1
11ee8     0B 15 02 F1 | 	add	arg02, arg03
11eec     02 14 66 F0 | 	shl	arg02, #2
11ef0     03 00 00 FF 
11ef4     04 E4 85 F1 | 	sub	objptr, ##1540
11ef8     F2 14 02 F1 | 	add	arg02, objptr
11efc     0A 17 02 FB | 	rdlong	arg03, arg02
11f00     0C 4E 05 F1 | 	add	fp, #12
11f04     A7 16 62 FC | 	wrlong	arg03, fp
11f08                 | ' 
11f08                 | ' numpar=compiledline(lineptr_e).result.uresult
11f08                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
11f08     0C 4E 85 F1 | 	sub	fp, #12
11f0c     02 16 0E F2 | 	cmp	arg03, #2 wz
11f10     47 00 00 FF 
11f14     7C E4 85 F1 | 	sub	objptr, ##36476
11f18     40 00 90 AD |  if_e	jmp	#LR__1530
11f1c     00 12 06 F6 | 	mov	arg01, #0
11f20     CC 53 B1 FD | 	call	#__system___getiolock_0570
11f24     FD 12 02 F6 | 	mov	arg01, result1
11f28     98 F6 B0 FD | 	call	#__system___lockmem
11f2c     8C 01 00 FF 
11f30     DD 15 06 F6 | 	mov	arg02, ##@LR__5567
11f34     00 12 06 F6 | 	mov	arg01, #0
11f38     00 16 06 F6 | 	mov	arg03, #0
11f3c     78 03 B1 FD | 	call	#__system___basic_print_string
11f40     00 12 06 F6 | 	mov	arg01, #0
11f44     A8 53 B1 FD | 	call	#__system___getiolock_0570
11f48     FD 00 68 FC | 	wrlong	#0, result1
11f4c     27 12 06 F6 | 	mov	arg01, #39
11f50     00 14 06 F6 | 	mov	arg02, #0
11f54     AC C0 B0 FD | 	call	#_printerror
11f58     EC 00 90 FD | 	jmp	#LR__1533
11f5c                 | LR__1530
11f5c     B8 98 BF FD | 	call	#_pop
11f60     FF 16 02 F6 | 	mov	arg03, result3
11f64     A7 FA 61 FC | 	wrlong	result1, fp
11f68     04 4E 05 F1 | 	add	fp, #4
11f6c     A7 FC 61 FC | 	wrlong	result2, fp
11f70     04 4E 05 F1 | 	add	fp, #4
11f74     A7 16 62 FC | 	wrlong	arg03, fp
11f78     08 4E 85 F1 | 	sub	fp, #8
11f7c     A7 12 02 F6 | 	mov	arg01, fp
11f80     78 9A BF FD | 	call	#_converttoint
11f84     FD 16 02 F6 | 	mov	arg03, result1
11f88     10 4E 05 F1 | 	add	fp, #16
11f8c     A7 16 62 FC | 	wrlong	arg03, fp
11f90     10 4E 85 F1 | 	sub	fp, #16
11f94     80 98 BF FD | 	call	#_pop
11f98     FF 16 02 F6 | 	mov	arg03, result3
11f9c     A7 FA 61 FC | 	wrlong	result1, fp
11fa0     04 4E 05 F1 | 	add	fp, #4
11fa4     A7 FC 61 FC | 	wrlong	result2, fp
11fa8     04 4E 05 F1 | 	add	fp, #4
11fac     A7 16 62 FC | 	wrlong	arg03, fp
11fb0                 | ' t1=pop() : arg=converttoint(t1)
11fb0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11fb0     08 4E 85 F1 | 	sub	fp, #8
11fb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
11fb8     18 00 90 5D |  if_ne	jmp	#LR__1531
11fbc     A7 12 02 FB | 	rdlong	arg01, fp
11fc0     CC 99 BF FD | 	call	#_convertstring
11fc4     A7 FA 61 FC | 	wrlong	result1, fp
11fc8     08 4E 05 F1 | 	add	fp, #8
11fcc     A7 3E 68 FC | 	wrlong	#31, fp
11fd0     08 4E 85 F1 | 	sub	fp, #8
11fd4                 | LR__1531
11fd4                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
11fd4     08 4E 05 F1 | 	add	fp, #8
11fd8     A7 16 02 FB | 	rdlong	arg03, fp
11fdc     08 4E 85 F1 | 	sub	fp, #8
11fe0     1F 16 0E F2 | 	cmp	arg03, #31 wz
11fe4     40 00 90 AD |  if_e	jmp	#LR__1532
11fe8     00 12 06 F6 | 	mov	arg01, #0
11fec     00 53 B1 FD | 	call	#__system___getiolock_0570
11ff0     FD 12 02 F6 | 	mov	arg01, result1
11ff4     CC F5 B0 FD | 	call	#__system___lockmem
11ff8     8C 01 00 FF 
11ffc     E5 15 06 F6 | 	mov	arg02, ##@LR__5568
12000     00 12 06 F6 | 	mov	arg01, #0
12004     00 16 06 F6 | 	mov	arg03, #0
12008     AC 02 B1 FD | 	call	#__system___basic_print_string
1200c     00 12 06 F6 | 	mov	arg01, #0
12010     DC 52 B1 FD | 	call	#__system___getiolock_0570
12014     FD 00 68 FC | 	wrlong	#0, result1
12018     0F 12 06 F6 | 	mov	arg01, #15
1201c     00 14 06 F6 | 	mov	arg02, #0
12020     E0 BF B0 FD | 	call	#_printerror
12024     20 00 90 FD | 	jmp	#LR__1533
12028                 | LR__1532
12028     A7 12 02 FB | 	rdlong	arg01, fp
1202c     10 4E 05 F1 | 	add	fp, #16
12030     A7 14 02 FB | 	rdlong	arg02, fp
12034     10 4E 85 F1 | 	sub	fp, #16
12038     04 16 B1 FD | 	call	#__system__Left_S
1203c     A7 FA 61 FC | 	wrlong	result1, fp
12040     A7 12 02 F6 | 	mov	arg01, fp
12044     68 98 BF FD | 	call	#_push
12048                 | LR__1533
12048     A7 F0 03 F6 | 	mov	ptra, fp
1204c     B2 00 A0 FD | 	call	#popregs_
12050                 | _do_left_ret
12050     2D 00 64 FD | 	ret
12054                 | 
12054                 | ' 
12054                 | ' ' ----------------  len
12054                 | ' 
12054                 | ' sub do_len
12054                 | _do_len
12054     02 4A 05 F6 | 	mov	COUNT_, #2
12058     A8 00 A0 FD | 	call	#pushregs_
1205c     14 F0 07 F1 | 	add	ptra, #20
12060     4A 00 00 FF 
12064     80 E4 05 F1 | 	add	objptr, ##38016
12068     F2 1E 02 FB | 	rdlong	local01, objptr
1206c     0F 17 02 F6 | 	mov	arg03, local01
12070     01 16 66 F0 | 	shl	arg03, #1
12074     0F 17 02 F1 | 	add	arg03, local01
12078     02 16 66 F0 | 	shl	arg03, #2
1207c     03 00 00 FF 
12080     04 E4 85 F1 | 	sub	objptr, ##1540
12084     F2 16 02 F1 | 	add	arg03, objptr
12088     0B 17 02 FB | 	rdlong	arg03, arg03
1208c     0C 4E 05 F1 | 	add	fp, #12
12090     A7 16 62 FC | 	wrlong	arg03, fp
12094                 | ' 
12094                 | ' numpar=compiledline(lineptr_e).result.uresult
12094                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
12094     0C 4E 85 F1 | 	sub	fp, #12
12098     02 16 16 F2 | 	cmp	arg03, #2 wc
1209c     47 00 00 FF 
120a0     7C E4 85 F1 | 	sub	objptr, ##36476
120a4     0C 4E 05 C1 |  if_b	add	fp, #12
120a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
120ac     0C 4E 85 C1 |  if_b	sub	fp, #12
120b0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1540
120b4     00 12 06 F6 | 	mov	arg01, #0
120b8     34 52 B1 FD | 	call	#__system___getiolock_0570
120bc     FD 12 02 F6 | 	mov	arg01, result1
120c0     00 F5 B0 FD | 	call	#__system___lockmem
120c4     8C 01 00 FF 
120c8     ED 15 06 F6 | 	mov	arg02, ##@LR__5569
120cc     00 12 06 F6 | 	mov	arg01, #0
120d0     00 16 06 F6 | 	mov	arg03, #0
120d4     E0 01 B1 FD | 	call	#__system___basic_print_string
120d8     00 12 06 F6 | 	mov	arg01, #0
120dc     10 52 B1 FD | 	call	#__system___getiolock_0570
120e0     FD 00 68 FC | 	wrlong	#0, result1
120e4     27 12 06 F6 | 	mov	arg01, #39
120e8     00 14 06 F6 | 	mov	arg02, #0
120ec     14 BF B0 FD | 	call	#_printerror
120f0     C8 00 90 FD | 	jmp	#LR__1545
120f4                 | LR__1540
120f4     20 97 BF FD | 	call	#_pop
120f8     FF 16 02 F6 | 	mov	arg03, result3
120fc     A7 FA 61 FC | 	wrlong	result1, fp
12100     04 4E 05 F1 | 	add	fp, #4
12104     A7 FC 61 FC | 	wrlong	result2, fp
12108     04 4E 05 F1 | 	add	fp, #4
1210c     A7 16 62 FC | 	wrlong	arg03, fp
12110                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12110     08 4E 85 F1 | 	sub	fp, #8
12114     2B 16 0E F2 | 	cmp	arg03, #43 wz
12118     18 00 90 5D |  if_ne	jmp	#LR__1541
1211c     A7 12 02 FB | 	rdlong	arg01, fp
12120     6C 98 BF FD | 	call	#_convertstring
12124     A7 FA 61 FC | 	wrlong	result1, fp
12128     08 4E 05 F1 | 	add	fp, #8
1212c     A7 3E 68 FC | 	wrlong	#31, fp
12130     08 4E 85 F1 | 	sub	fp, #8
12134                 | LR__1541
12134                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
12134     08 4E 05 F1 | 	add	fp, #8
12138     A7 16 02 FB | 	rdlong	arg03, fp
1213c     08 4E 85 F1 | 	sub	fp, #8
12140     1F 16 0E F2 | 	cmp	arg03, #31 wz
12144     40 00 90 AD |  if_e	jmp	#LR__1542
12148     00 12 06 F6 | 	mov	arg01, #0
1214c     A0 51 B1 FD | 	call	#__system___getiolock_0570
12150     FD 12 02 F6 | 	mov	arg01, result1
12154     6C F4 B0 FD | 	call	#__system___lockmem
12158     8C 01 00 FF 
1215c     F3 15 06 F6 | 	mov	arg02, ##@LR__5570
12160     00 12 06 F6 | 	mov	arg01, #0
12164     00 16 06 F6 | 	mov	arg03, #0
12168     4C 01 B1 FD | 	call	#__system___basic_print_string
1216c     00 12 06 F6 | 	mov	arg01, #0
12170     7C 51 B1 FD | 	call	#__system___getiolock_0570
12174     FD 00 68 FC | 	wrlong	#0, result1
12178     0F 12 06 F6 | 	mov	arg01, #15
1217c     00 14 06 F6 | 	mov	arg02, #0
12180     80 BE B0 FD | 	call	#_printerror
12184     34 00 90 FD | 	jmp	#LR__1545
12188                 | LR__1542
12188     A7 12 02 FB | 	rdlong	arg01, fp
1218c     09 21 02 F6 | 	mov	local02, arg01
12190     97 06 48 FB | 	callpa	#(@LR__1544-@LR__1543)>>2,fcache_load_ptr_
12194                 | LR__1543
12194     10 FB C9 FA | 	rdbyte	result1, local02 wz
12198     01 20 06 51 |  if_ne	add	local02, #1
1219c     F4 FF 9F 5D |  if_ne	jmp	#LR__1543
121a0                 | LR__1544
121a0     09 21 82 F1 | 	sub	local02, arg01
121a4     A7 20 62 FC | 	wrlong	local02, fp
121a8     08 4E 05 F1 | 	add	fp, #8
121ac     A7 38 68 FC | 	wrlong	#28, fp
121b0     08 4E 85 F1 | 	sub	fp, #8
121b4     A7 12 02 F6 | 	mov	arg01, fp
121b8     F4 96 BF FD | 	call	#_push
121bc                 | LR__1545
121bc     A7 F0 03 F6 | 	mov	ptra, fp
121c0     B2 00 A0 FD | 	call	#popregs_
121c4                 | _do_len_ret
121c4     2D 00 64 FD | 	ret
121c8                 | 
121c8                 | ' 
121c8                 | ' ' ----------------  list
121c8                 | ' 
121c8                 | ' sub do_list
121c8                 | _do_list
121c8     02 4A 05 F6 | 	mov	COUNT_, #2
121cc     A8 00 A0 FD | 	call	#pushregs_
121d0     B8 F0 07 F1 | 	add	ptra, #184
121d4     04 4E 05 F1 | 	add	fp, #4
121d8     A7 00 68 FC | 	wrlong	#0, fp
121dc     04 4E 05 F1 | 	add	fp, #4
121e0     FF FF BF FF 
121e4     A7 FE 6B FC | 	wrlong	##2147483647, fp
121e8     08 4E 85 F1 | 	sub	fp, #8
121ec     4A 00 00 FF 
121f0     80 E4 05 F1 | 	add	objptr, ##38016
121f4     F2 1E 02 FB | 	rdlong	local01, objptr
121f8     0F 17 02 F6 | 	mov	arg03, local01
121fc     01 16 66 F0 | 	shl	arg03, #1
12200     0F 17 02 F1 | 	add	arg03, local01
12204     02 16 66 F0 | 	shl	arg03, #2
12208     03 00 00 FF 
1220c     04 E4 85 F1 | 	sub	objptr, ##1540
12210     F2 16 02 F1 | 	add	arg03, objptr
12214     0B 17 02 FB | 	rdlong	arg03, arg03
12218     A7 16 62 FC | 	wrlong	arg03, fp
1221c                 | ' 
1221c                 | ' startline=0 : endline=$7FFFFFFF
1221c                 | ' numpar=compiledline(lineptr_e).result.uresult
1221c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
1221c     01 16 0E F2 | 	cmp	arg03, #1 wz
12220     47 00 00 FF 
12224     7C E4 85 F1 | 	sub	objptr, ##36476
12228     3C 00 90 5D |  if_ne	jmp	#LR__1550
1222c     E8 95 BF FD | 	call	#_pop
12230     FF 1E 02 F6 | 	mov	local01, result3
12234     0C 4E 05 F1 | 	add	fp, #12
12238     A7 FA 61 FC | 	wrlong	result1, fp
1223c     04 4E 05 F1 | 	add	fp, #4
12240     A7 FC 61 FC | 	wrlong	result2, fp
12244     04 4E 05 F1 | 	add	fp, #4
12248     A7 1E 62 FC | 	wrlong	local01, fp
1224c     08 4E 85 F1 | 	sub	fp, #8
12250     A7 12 02 F6 | 	mov	arg01, fp
12254     0C 4E 85 F1 | 	sub	fp, #12
12258     A0 97 BF FD | 	call	#_converttoint
1225c     04 4E 05 F1 | 	add	fp, #4
12260     A7 FA 61 FC | 	wrlong	result1, fp
12264     04 4E 85 F1 | 	sub	fp, #4
12268                 | LR__1550
12268                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
12268     A7 16 02 FB | 	rdlong	arg03, fp
1226c     02 16 0E F2 | 	cmp	arg03, #2 wz
12270     7C 00 90 5D |  if_ne	jmp	#LR__1551
12274     A0 95 BF FD | 	call	#_pop
12278     FF 1E 02 F6 | 	mov	local01, result3
1227c     0C 4E 05 F1 | 	add	fp, #12
12280     A7 FA 61 FC | 	wrlong	result1, fp
12284     04 4E 05 F1 | 	add	fp, #4
12288     A7 FC 61 FC | 	wrlong	result2, fp
1228c     04 4E 05 F1 | 	add	fp, #4
12290     A7 1E 62 FC | 	wrlong	local01, fp
12294     08 4E 85 F1 | 	sub	fp, #8
12298     A7 12 02 F6 | 	mov	arg01, fp
1229c     0C 4E 85 F1 | 	sub	fp, #12
122a0     58 97 BF FD | 	call	#_converttoint
122a4     FD 1E 02 F6 | 	mov	local01, result1
122a8     08 4E 05 F1 | 	add	fp, #8
122ac     A7 1E 62 FC | 	wrlong	local01, fp
122b0     08 4E 85 F1 | 	sub	fp, #8
122b4     60 95 BF FD | 	call	#_pop
122b8     FF 1E 02 F6 | 	mov	local01, result3
122bc     0C 4E 05 F1 | 	add	fp, #12
122c0     A7 FA 61 FC | 	wrlong	result1, fp
122c4     04 4E 05 F1 | 	add	fp, #4
122c8     A7 FC 61 FC | 	wrlong	result2, fp
122cc     04 4E 05 F1 | 	add	fp, #4
122d0     A7 1E 62 FC | 	wrlong	local01, fp
122d4     08 4E 85 F1 | 	sub	fp, #8
122d8     A7 12 02 F6 | 	mov	arg01, fp
122dc     0C 4E 85 F1 | 	sub	fp, #12
122e0     18 97 BF FD | 	call	#_converttoint
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 FA 61 FC | 	wrlong	result1, fp
122ec     04 4E 85 F1 | 	sub	fp, #4
122f0                 | LR__1551
122f0                 | ' 
122f0                 | ' 
122f0                 | ' print
122f0     00 12 06 F6 | 	mov	arg01, #0
122f4     F8 4F B1 FD | 	call	#__system___getiolock_0570
122f8     FD 12 02 F6 | 	mov	arg01, result1
122fc     C4 F2 B0 FD | 	call	#__system___lockmem
12300     00 12 06 F6 | 	mov	arg01, #0
12304     0A 14 06 F6 | 	mov	arg02, #10
12308     00 16 06 F6 | 	mov	arg03, #0
1230c     50 FF B0 FD | 	call	#__system___basic_print_char
12310     00 12 06 F6 | 	mov	arg01, #0
12314     D8 4F B1 FD | 	call	#__system___getiolock_0570
12318     FD 00 68 FC | 	wrlong	#0, result1
1231c     4A 00 00 FF 
12320     88 E4 05 F1 | 	add	objptr, ##38024
12324     F2 20 02 FB | 	rdlong	local02, objptr
12328     07 00 00 FF 
1232c     A0 E5 05 F1 | 	add	objptr, ##4000
12330     F2 20 62 FC | 	wrlong	local02, objptr
12334     52 00 00 FF 
12338     28 E4 85 F1 | 	sub	objptr, ##42024
1233c                 | ' do 
1233c                 | LR__1552
1233c     20 4E 05 F1 | 	add	fp, #32
12340     A7 12 02 F6 | 	mov	arg01, fp
12344     20 4E 85 F1 | 	sub	fp, #32
12348     52 00 00 FF 
1234c     28 E4 05 F1 | 	add	objptr, ##42024
12350     F2 14 02 FB | 	rdlong	arg02, objptr
12354     18 16 06 F6 | 	mov	arg03, #24
12358     46 00 00 FF 
1235c     5C E5 85 F1 | 	sub	objptr, ##36188
12360     20 E6 B0 FD | 	call	#_psram_spin2_read1
12364     0B 00 00 FF 
12368     CC E4 85 F1 | 	sub	objptr, ##5836
1236c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
1236c                 | '   
1236c                 | '   if header(0)<> $FFFFFFFF then
1236c     20 4E 05 F1 | 	add	fp, #32
12370     A7 20 02 FB | 	rdlong	local02, fp
12374     20 4E 85 F1 | 	sub	fp, #32
12378     FF FF 7F FF 
1237c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
12380     A8 00 90 AD |  if_e	jmp	#LR__1554
12384     38 4E 05 F1 | 	add	fp, #56
12388     3F 16 06 F6 | 	mov	arg03, #63
1238c     28 16 62 FD | 	setq	arg03
12390     A7 00 68 FC | 	wrlong	#0, fp
12394     A7 12 02 F6 | 	mov	arg01, fp
12398     10 4E 85 F1 | 	sub	fp, #16
1239c     A7 14 02 FB | 	rdlong	arg02, fp
123a0     04 4E 05 F1 | 	add	fp, #4
123a4     A7 16 02 FB | 	rdlong	arg03, fp
123a8     2C 4E 85 F1 | 	sub	fp, #44
123ac     0B 00 00 FF 
123b0     CC E4 05 F1 | 	add	objptr, ##5836
123b4     CC E5 B0 FD | 	call	#_psram_spin2_read1
123b8     0B 00 00 FF 
123bc     CC E4 85 F1 | 	sub	objptr, ##5836
123c0                 | '     longfill(linebuf,0,64)
123c0                 | '     psram.read1(varptr(linebuf),header(2),header(3))
123c0                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
123c0     20 4E 05 F1 | 	add	fp, #32
123c4     A7 20 02 FB | 	rdlong	local02, fp
123c8     1C 4E 85 F1 | 	sub	fp, #28
123cc     A7 1E 02 FB | 	rdlong	local01, fp
123d0     04 4E 85 F1 | 	sub	fp, #4
123d4     0F 21 52 F2 | 	cmps	local02, local01 wc
123d8     30 00 90 CD |  if_b	jmp	#LR__1553
123dc     20 4E 05 F1 | 	add	fp, #32
123e0     A7 20 02 FB | 	rdlong	local02, fp
123e4     18 4E 85 F1 | 	sub	fp, #24
123e8     A7 16 02 FB | 	rdlong	arg03, fp
123ec     08 4E 85 F1 | 	sub	fp, #8
123f0     0B 21 5A F2 | 	cmps	local02, arg03 wcz
123f4     14 00 90 1D |  if_a	jmp	#LR__1553
123f8     38 4E 05 F1 | 	add	fp, #56
123fc     A7 12 02 F6 | 	mov	arg01, fp
12400     38 4E 85 F1 | 	sub	fp, #56
12404                 | ' 
12404                 | ' write(text)
12404     A0 DC B0 FD | 	call	#_hg010b_spin2_write
12408                 | ' crlf
12408     9C E1 B0 FD | 	call	#_hg010b_spin2_crlf
1240c                 | LR__1553
1240c     34 4E 05 F1 | 	add	fp, #52
12410     A7 20 02 FB | 	rdlong	local02, fp
12414     34 4E 85 F1 | 	sub	fp, #52
12418     52 00 00 FF 
1241c     28 E4 05 F1 | 	add	objptr, ##42024
12420     F2 20 62 FC | 	wrlong	local02, objptr
12424     52 00 00 FF 
12428     28 E4 85 F1 | 	sub	objptr, ##42024
1242c                 | LR__1554
1242c     34 4E 05 F1 | 	add	fp, #52
12430     A7 20 02 FB | 	rdlong	local02, fp
12434     34 4E 85 F1 | 	sub	fp, #52
12438     FF FF 3F FF 
1243c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
12440     20 4E 05 51 |  if_ne	add	fp, #32
12444     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12448     20 4E 85 51 |  if_ne	sub	fp, #32
1244c     FF FF 7F 5F 
12450     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
12454     E4 FE 9F 5D |  if_ne	jmp	#LR__1552
12458     A7 F0 03 F6 | 	mov	ptra, fp
1245c     B2 00 A0 FD | 	call	#popregs_
12460                 | _do_list_ret
12460     2D 00 64 FD | 	ret
12464                 | 
12464                 | ' 
12464                 | ' '-------------------- load
12464                 | ' 
12464                 | ' sub do_load(amode=0 as integer)  
12464                 | _do_load
12464     01 4A 05 F6 | 	mov	COUNT_, #1
12468     A8 00 A0 FD | 	call	#pushregs_
1246c     AC F0 07 F1 | 	add	ptra, #172
12470     A7 12 62 FC | 	wrlong	arg01, fp
12474     51 00 00 FF 
12478     E8 E5 05 F1 | 	add	objptr, ##41960
1247c     F2 02 68 FC | 	wrlong	#1, objptr
12480     07 00 00 FF 
12484     68 E5 85 F1 | 	sub	objptr, ##3944
12488     F2 14 02 FB | 	rdlong	arg02, objptr
1248c     0A 13 02 F6 | 	mov	arg01, arg02
12490     01 12 66 F0 | 	shl	arg01, #1
12494     0A 13 02 F1 | 	add	arg01, arg02
12498     02 12 66 F0 | 	shl	arg01, #2
1249c     03 00 00 FF 
124a0     04 E4 85 F1 | 	sub	objptr, ##1540
124a4     F2 12 02 F1 | 	add	arg01, objptr
124a8     09 15 02 FB | 	rdlong	arg02, arg01
124ac     1C 4E 05 F1 | 	add	fp, #28
124b0     A7 14 62 FC | 	wrlong	arg02, fp
124b4     8C 4E 05 F1 | 	add	fp, #140
124b8     A7 12 02 F6 | 	mov	arg01, fp
124bc     47 00 00 FF 
124c0     7C E4 85 F1 | 	sub	objptr, ##36476
124c4     80 4E 85 F1 | 	sub	fp, #128
124c8     09 4F 61 FC | 	wrlong	fp, arg01
124cc                 | ' 
124cc                 | ' inload=1
124cc                 | ' numpar=compiledline(lineptr_e).result.uresult
124cc                 | ' lpoke varptr(line2$),varptr(line2)
124cc                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
124cc     0C 4E 85 F1 | 	sub	fp, #12
124d0     A7 1E 02 FB | 	rdlong	local01, fp
124d4     1C 4E 85 F1 | 	sub	fp, #28
124d8     01 1E 56 F2 | 	cmps	local01, #1 wc
124dc     24 00 90 CD |  if_b	jmp	#LR__1560
124e0     34 93 BF FD | 	call	#_pop
124e4     04 4E 05 F1 | 	add	fp, #4
124e8     A7 FA 61 FC | 	wrlong	result1, fp
124ec     04 4E 05 F1 | 	add	fp, #4
124f0     A7 FC 61 FC | 	wrlong	result2, fp
124f4     04 4E 05 F1 | 	add	fp, #4
124f8     A7 FE 61 FC | 	wrlong	result3, fp
124fc     0C 4E 85 F1 | 	sub	fp, #12
12500     28 00 90 FD | 	jmp	#LR__1561
12504                 | LR__1560
12504     51 00 00 FF 
12508     D8 E5 05 F1 | 	add	objptr, ##41944
1250c     F2 1E 02 FB | 	rdlong	local01, objptr
12510     51 00 00 FF 
12514     D8 E5 85 F1 | 	sub	objptr, ##41944
12518     04 4E 05 F1 | 	add	fp, #4
1251c     A7 1E 62 FC | 	wrlong	local01, fp
12520     08 4E 05 F1 | 	add	fp, #8
12524     A7 3E 68 FC | 	wrlong	#31, fp
12528     0C 4E 85 F1 | 	sub	fp, #12
1252c                 | LR__1561
1252c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
1252c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
1252c     0C 4E 05 F1 | 	add	fp, #12
12530     A7 1E 02 FB | 	rdlong	local01, fp
12534     0C 4E 85 F1 | 	sub	fp, #12
12538     2B 1E 0E F2 | 	cmp	local01, #43 wz
1253c     24 00 90 5D |  if_ne	jmp	#LR__1562
12540     04 4E 05 F1 | 	add	fp, #4
12544     A7 12 02 FB | 	rdlong	arg01, fp
12548     04 4E 85 F1 | 	sub	fp, #4
1254c     40 94 BF FD | 	call	#_convertstring
12550     04 4E 05 F1 | 	add	fp, #4
12554     A7 FA 61 FC | 	wrlong	result1, fp
12558     08 4E 05 F1 | 	add	fp, #8
1255c     A7 3E 68 FC | 	wrlong	#31, fp
12560     0C 4E 85 F1 | 	sub	fp, #12
12564                 | LR__1562
12564                 | ' if t1.result_type=result_string then
12564     0C 4E 05 F1 | 	add	fp, #12
12568     A7 1E 02 FB | 	rdlong	local01, fp
1256c     0C 4E 85 F1 | 	sub	fp, #12
12570     1F 1E 0E F2 | 	cmp	local01, #31 wz
12574     E0 02 90 5D |  if_ne	jmp	#LR__1568
12578                 | '   if amode<>1234 then do_new
12578     A7 1E 02 FB | 	rdlong	local01, fp
1257c     02 00 00 FF 
12580     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
12584     14 0E B0 5D |  if_ne	call	#_do_new
12588                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
12588     04 4E 05 F1 | 	add	fp, #4
1258c     A7 12 02 FB | 	rdlong	arg01, fp
12590     04 4E 85 F1 | 	sub	fp, #4
12594     8C 01 00 FF 
12598     F9 15 06 F6 | 	mov	arg02, ##@LR__5571
1259c     4C F0 B0 FD | 	call	#__system___string_cmp
125a0     00 FA 0D F2 | 	cmp	result1, #0 wz
125a4     24 00 90 5D |  if_ne	jmp	#LR__1563
125a8     51 00 00 FF 
125ac     D8 E5 05 F1 | 	add	objptr, ##41944
125b0     F2 1E 02 FB | 	rdlong	local01, objptr
125b4     51 00 00 FF 
125b8     D8 E5 85 F1 | 	sub	objptr, ##41944
125bc     04 4E 05 F1 | 	add	fp, #4
125c0     A7 1E 62 FC | 	wrlong	local01, fp
125c4     04 4E 85 F1 | 	sub	fp, #4
125c8     20 00 90 FD | 	jmp	#LR__1564
125cc                 | LR__1563
125cc     04 4E 05 F1 | 	add	fp, #4
125d0     A7 1E 02 FB | 	rdlong	local01, fp
125d4     04 4E 85 F1 | 	sub	fp, #4
125d8     51 00 00 FF 
125dc     D8 E5 05 F1 | 	add	objptr, ##41944
125e0     F2 1E 62 FC | 	wrlong	local01, objptr
125e4     51 00 00 FF 
125e8     D8 E5 85 F1 | 	sub	objptr, ##41944
125ec                 | LR__1564
125ec                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
125ec     09 12 06 F6 | 	mov	arg01, #9
125f0     6C 42 B1 FD | 	call	#__system__close
125f4     09 1E 06 F6 | 	mov	local01, #9
125f8     4A 00 00 FF 
125fc     94 E4 05 F1 | 	add	objptr, ##38036
12600     F2 12 02 FB | 	rdlong	arg01, objptr
12604     4A 00 00 FF 
12608     94 E4 85 F1 | 	sub	objptr, ##38036
1260c     8C 01 00 FF 
12610     FA 15 06 F6 | 	mov	arg02, ##@LR__5572
12614     08 F0 B0 FD | 	call	#__system___string_concat
12618     FD 12 02 F6 | 	mov	arg01, result1
1261c     04 4E 05 F1 | 	add	fp, #4
12620     A7 14 02 FB | 	rdlong	arg02, fp
12624     04 4E 85 F1 | 	sub	fp, #4
12628     F4 EF B0 FD | 	call	#__system___string_concat
1262c     FD 14 02 F6 | 	mov	arg02, result1
12630     0F 13 02 F6 | 	mov	arg01, local01
12634     00 16 06 F6 | 	mov	arg03, #0
12638     8C FB B0 FD | 	call	#__system___basic_open_string
1263c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12640     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
12644     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12648     14 4E 05 F1 | 	add	fp, #20
1264c     A7 FA 61 FC | 	wrlong	result1, fp
12650                 | '   r=geterr() 
12650                 | '   if r then 
12650     14 4E 85 F1 | 	sub	fp, #20
12654     50 01 90 AD |  if_e	jmp	#LR__1566
12658                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
12658     09 12 06 F6 | 	mov	arg01, #9
1265c     00 42 B1 FD | 	call	#__system__close
12660     09 1E 06 F6 | 	mov	local01, #9
12664     4A 00 00 FF 
12668     94 E4 05 F1 | 	add	objptr, ##38036
1266c     F2 12 02 FB | 	rdlong	arg01, objptr
12670     4A 00 00 FF 
12674     94 E4 85 F1 | 	sub	objptr, ##38036
12678     8C 01 00 FF 
1267c     FC 15 06 F6 | 	mov	arg02, ##@LR__5573
12680     9C EF B0 FD | 	call	#__system___string_concat
12684     FD 12 02 F6 | 	mov	arg01, result1
12688     04 4E 05 F1 | 	add	fp, #4
1268c     A7 14 02 FB | 	rdlong	arg02, fp
12690     04 4E 85 F1 | 	sub	fp, #4
12694     88 EF B0 FD | 	call	#__system___string_concat
12698     FD 12 02 F6 | 	mov	arg01, result1
1269c     8C 01 00 FF 
126a0     FE 15 06 F6 | 	mov	arg02, ##@LR__5574
126a4     78 EF B0 FD | 	call	#__system___string_concat
126a8     FD 14 02 F6 | 	mov	arg02, result1
126ac     0F 13 02 F6 | 	mov	arg01, local01
126b0     00 16 06 F6 | 	mov	arg03, #0
126b4     10 FB B0 FD | 	call	#__system___basic_open_string
126b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
126bc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
126c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
126c4     14 4E 05 F1 | 	add	fp, #20
126c8     A7 FA 61 FC | 	wrlong	result1, fp
126cc                 | '     r=geterr() 
126cc                 | '     if r then 
126cc     14 4E 85 F1 | 	sub	fp, #20
126d0     A0 00 90 AD |  if_e	jmp	#LR__1565
126d4                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
126d4     00 12 06 F6 | 	mov	arg01, #0
126d8     14 4C B1 FD | 	call	#__system___getiolock_0570
126dc     FD 12 02 F6 | 	mov	arg01, result1
126e0     E0 EE B0 FD | 	call	#__system___lockmem
126e4     8D 01 00 FF 
126e8     03 14 06 F6 | 	mov	arg02, ##@LR__5575
126ec     00 12 06 F6 | 	mov	arg01, #0
126f0     00 16 06 F6 | 	mov	arg03, #0
126f4     C0 FB B0 FD | 	call	#__system___basic_print_string
126f8     14 4E 05 F1 | 	add	fp, #20
126fc     A7 14 02 FB | 	rdlong	arg02, fp
12700     14 4E 85 F1 | 	sub	fp, #20
12704     00 12 06 F6 | 	mov	arg01, #0
12708     00 16 06 F6 | 	mov	arg03, #0
1270c     0A 18 06 F6 | 	mov	arg04, #10
12710     E8 FB B0 FD | 	call	#__system___basic_print_integer
12714     8D 01 00 FF 
12718     11 14 06 F6 | 	mov	arg02, ##@LR__5576
1271c     00 12 06 F6 | 	mov	arg01, #0
12720     00 16 06 F6 | 	mov	arg03, #0
12724     90 FB B0 FD | 	call	#__system___basic_print_string
12728     00 1E 06 F6 | 	mov	local01, #0
1272c     14 4E 05 F1 | 	add	fp, #20
12730     A7 12 02 FB | 	rdlong	arg01, fp
12734     14 4E 85 F1 | 	sub	fp, #20
12738     58 17 B1 FD | 	call	#__system___strerror
1273c     FD 14 02 F6 | 	mov	arg02, result1
12740     0F 13 02 F6 | 	mov	arg01, local01
12744     00 16 06 F6 | 	mov	arg03, #0
12748     6C FB B0 FD | 	call	#__system___basic_print_string
1274c     00 12 06 F6 | 	mov	arg01, #0
12750     0A 14 06 F6 | 	mov	arg02, #10
12754     00 16 06 F6 | 	mov	arg03, #0
12758     04 FB B0 FD | 	call	#__system___basic_print_char
1275c     00 12 06 F6 | 	mov	arg01, #0
12760     8C 4B B1 FD | 	call	#__system___getiolock_0570
12764     FD 00 68 FC | 	wrlong	#0, result1
12768     09 12 06 F6 | 	mov	arg01, #9
1276c     F0 40 B1 FD | 	call	#__system__close
12770     94 01 90 FD | 	jmp	#LR__1570
12774                 | LR__1565
12774     51 00 00 FF 
12778     D8 E5 05 F1 | 	add	objptr, ##41944
1277c     F2 12 02 FB | 	rdlong	arg01, objptr
12780     51 00 00 FF 
12784     D8 E5 85 F1 | 	sub	objptr, ##41944
12788     8D 01 00 FF 
1278c     14 14 06 F6 | 	mov	arg02, ##@LR__5577
12790     8C EE B0 FD | 	call	#__system___string_concat
12794     51 00 00 FF 
12798     D8 E5 05 F1 | 	add	objptr, ##41944
1279c     F2 FA 61 FC | 	wrlong	result1, objptr
127a0     51 00 00 FF 
127a4     D8 E5 85 F1 | 	sub	objptr, ##41944
127a8                 | LR__1566
127a8                 | '   close #9: open currentdir$+"/"+loadname for input as #9
127a8     09 12 06 F6 | 	mov	arg01, #9
127ac     B0 40 B1 FD | 	call	#__system__close
127b0     09 1E 06 F6 | 	mov	local01, #9
127b4     4A 00 00 FF 
127b8     94 E4 05 F1 | 	add	objptr, ##38036
127bc     F2 12 02 FB | 	rdlong	arg01, objptr
127c0     4A 00 00 FF 
127c4     94 E4 85 F1 | 	sub	objptr, ##38036
127c8     8D 01 00 FF 
127cc     19 14 06 F6 | 	mov	arg02, ##@LR__5578
127d0     4C EE B0 FD | 	call	#__system___string_concat
127d4     FD 12 02 F6 | 	mov	arg01, result1
127d8     51 00 00 FF 
127dc     D8 E5 05 F1 | 	add	objptr, ##41944
127e0     F2 14 02 FB | 	rdlong	arg02, objptr
127e4     51 00 00 FF 
127e8     D8 E5 85 F1 | 	sub	objptr, ##41944
127ec     30 EE B0 FD | 	call	#__system___string_concat
127f0     FD 14 02 F6 | 	mov	arg02, result1
127f4     0F 13 02 F6 | 	mov	arg01, local01
127f8     00 16 06 F6 | 	mov	arg03, #0
127fc     C8 F9 B0 FD | 	call	#__system___basic_open_string
12800                 | '   do
12800                 | LR__1567
12800     09 12 06 F6 | 	mov	arg01, #9
12804     C8 EF B0 FD | 	call	#__system___basic_read_line
12808     FD 1E 02 F6 | 	mov	local01, result1
1280c     37 00 00 FF 
12810     1C E4 05 F1 | 	add	objptr, ##28188
12814     F2 1E 62 FC | 	wrlong	local01, objptr
12818     37 00 00 FF 
1281c     1C E4 85 F1 | 	sub	objptr, ##28188
12820     24 EF BE FD | 	call	#_interpret
12824     37 00 00 FF 
12828     1C E4 05 F1 | 	add	objptr, ##28188
1282c     F2 12 02 FB | 	rdlong	arg01, objptr
12830     37 00 00 FF 
12834     1C E4 85 F1 | 	sub	objptr, ##28188
12838     8D 01 00 FF 
1283c     1B 14 06 F6 | 	mov	arg02, ##@LR__5579
12840     A8 ED B0 FD | 	call	#__system___string_cmp
12844     00 FA 0D F2 | 	cmp	result1, #0 wz
12848     B4 FF 9F 5D |  if_ne	jmp	#LR__1567
1284c                 | '   close #9   
1284c     09 12 06 F6 | 	mov	arg01, #9
12850     0C 40 B1 FD | 	call	#__system__close
12854     0C 00 90 FD | 	jmp	#LR__1569
12858                 | LR__1568
12858     1E 12 06 F6 | 	mov	arg01, #30
1285c     00 14 06 F6 | 	mov	arg02, #0
12860     A0 B7 B0 FD | 	call	#_printerror
12864                 | LR__1569
12864                 | ' print "Loaded ";currentdir$+"/"+loadname
12864     00 12 06 F6 | 	mov	arg01, #0
12868     84 4A B1 FD | 	call	#__system___getiolock_0570
1286c     FD 12 02 F6 | 	mov	arg01, result1
12870     50 ED B0 FD | 	call	#__system___lockmem
12874     8D 01 00 FF 
12878     1C 14 06 F6 | 	mov	arg02, ##@LR__5580
1287c     00 12 06 F6 | 	mov	arg01, #0
12880     00 16 06 F6 | 	mov	arg03, #0
12884     30 FA B0 FD | 	call	#__system___basic_print_string
12888     00 1E 06 F6 | 	mov	local01, #0
1288c     4A 00 00 FF 
12890     94 E4 05 F1 | 	add	objptr, ##38036
12894     F2 12 02 FB | 	rdlong	arg01, objptr
12898     4A 00 00 FF 
1289c     94 E4 85 F1 | 	sub	objptr, ##38036
128a0     8D 01 00 FF 
128a4     24 14 06 F6 | 	mov	arg02, ##@LR__5581
128a8     74 ED B0 FD | 	call	#__system___string_concat
128ac     FD 12 02 F6 | 	mov	arg01, result1
128b0     51 00 00 FF 
128b4     D8 E5 05 F1 | 	add	objptr, ##41944
128b8     F2 14 02 FB | 	rdlong	arg02, objptr
128bc     51 00 00 FF 
128c0     D8 E5 85 F1 | 	sub	objptr, ##41944
128c4     58 ED B0 FD | 	call	#__system___string_concat
128c8     FD 14 02 F6 | 	mov	arg02, result1
128cc     0F 13 02 F6 | 	mov	arg01, local01
128d0     00 16 06 F6 | 	mov	arg03, #0
128d4     E0 F9 B0 FD | 	call	#__system___basic_print_string
128d8     00 12 06 F6 | 	mov	arg01, #0
128dc     0A 14 06 F6 | 	mov	arg02, #10
128e0     00 16 06 F6 | 	mov	arg03, #0
128e4     78 F9 B0 FD | 	call	#__system___basic_print_char
128e8     00 12 06 F6 | 	mov	arg01, #0
128ec     00 4A B1 FD | 	call	#__system___getiolock_0570
128f0     FD 00 68 FC | 	wrlong	#0, result1
128f4     51 00 00 FF 
128f8     E8 E5 05 F1 | 	add	objptr, ##41960
128fc     F2 00 68 FC | 	wrlong	#0, objptr
12900     51 00 00 FF 
12904     E8 E5 85 F1 | 	sub	objptr, ##41960
12908                 | LR__1570
12908     A7 F0 03 F6 | 	mov	ptra, fp
1290c     B2 00 A0 FD | 	call	#popregs_
12910                 | _do_load_ret
12910     2D 00 64 FD | 	ret
12914                 | 
12914                 | ' 
12914                 | ' '-------------------- log
12914                 | ' 
12914                 | ' sub do_log
12914                 | _do_log
12914     01 4A 05 F6 | 	mov	COUNT_, #1
12918     A8 00 A0 FD | 	call	#pushregs_
1291c     14 F0 07 F1 | 	add	ptra, #20
12920     4A 00 00 FF 
12924     80 E4 05 F1 | 	add	objptr, ##38016
12928     F2 1E 02 FB | 	rdlong	local01, objptr
1292c     0F 17 02 F6 | 	mov	arg03, local01
12930     01 16 66 F0 | 	shl	arg03, #1
12934     0F 17 02 F1 | 	add	arg03, local01
12938     02 16 66 F0 | 	shl	arg03, #2
1293c     03 00 00 FF 
12940     04 E4 85 F1 | 	sub	objptr, ##1540
12944     F2 16 02 F1 | 	add	arg03, objptr
12948     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1294c     0C 4E 05 F1 | 	add	fp, #12
12950     A7 16 62 FC | 	wrlong	arg03, fp
12954                 | ' 
12954                 | ' numpar=compiledline(lineptr_e).result.uresult
12954                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
12954     0C 4E 85 F1 | 	sub	fp, #12
12958     47 00 00 FF 
1295c     7C E4 85 F1 | 	sub	objptr, ##36476
12960     0C 4E 05 51 |  if_ne	add	fp, #12
12964     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12968     0C 4E 85 51 |  if_ne	sub	fp, #12
1296c     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
12970     40 00 90 4D |  if_c_and_nz	jmp	#LR__1580
12974     00 12 06 F6 | 	mov	arg01, #0
12978     74 49 B1 FD | 	call	#__system___getiolock_0570
1297c     FD 12 02 F6 | 	mov	arg01, result1
12980     40 EC B0 FD | 	call	#__system___lockmem
12984     8D 01 00 FF 
12988     26 14 06 F6 | 	mov	arg02, ##@LR__5582
1298c     00 12 06 F6 | 	mov	arg01, #0
12990     00 16 06 F6 | 	mov	arg03, #0
12994     20 F9 B0 FD | 	call	#__system___basic_print_string
12998     00 12 06 F6 | 	mov	arg01, #0
1299c     50 49 B1 FD | 	call	#__system___getiolock_0570
129a0     FD 00 68 FC | 	wrlong	#0, result1
129a4     27 12 06 F6 | 	mov	arg01, #39
129a8     00 14 06 F6 | 	mov	arg02, #0
129ac     54 B6 B0 FD | 	call	#_printerror
129b0     D0 00 90 FD | 	jmp	#LR__1583
129b4                 | LR__1580
129b4                 | ' if numpar=2 then 
129b4     0C 4E 05 F1 | 	add	fp, #12
129b8     A7 1E 02 FB | 	rdlong	local01, fp
129bc     0C 4E 85 F1 | 	sub	fp, #12
129c0     02 1E 0E F2 | 	cmp	local01, #2 wz
129c4     48 00 90 5D |  if_ne	jmp	#LR__1581
129c8     4C 8E BF FD | 	call	#_pop
129cc     FF 1E 02 F6 | 	mov	local01, result3
129d0     A7 FA 61 FC | 	wrlong	result1, fp
129d4     04 4E 05 F1 | 	add	fp, #4
129d8     A7 FC 61 FC | 	wrlong	result2, fp
129dc     04 4E 05 F1 | 	add	fp, #4
129e0     A7 1E 62 FC | 	wrlong	local01, fp
129e4     08 4E 85 F1 | 	sub	fp, #8
129e8     A7 12 02 F6 | 	mov	arg01, fp
129ec     C8 90 BF FD | 	call	#_converttofloat
129f0     FD 14 02 F6 | 	mov	arg02, result1
129f4     FC 16 20 FF 
129f8     54 12 06 F6 | 	mov	arg01, ##1076754516
129fc     50 29 B1 FD | 	call	#__system____builtin_logbase
12a00     10 4E 05 F1 | 	add	fp, #16
12a04     A7 FA 61 FC | 	wrlong	result1, fp
12a08     10 4E 85 F1 | 	sub	fp, #16
12a0c     10 00 90 FD | 	jmp	#LR__1582
12a10                 | LR__1581
12a10     10 4E 05 F1 | 	add	fp, #16
12a14     00 C0 9F FF 
12a18     A7 00 68 FC | 	wrlong	##1065353216, fp
12a1c     10 4E 85 F1 | 	sub	fp, #16
12a20                 | LR__1582
12a20     F4 8D BF FD | 	call	#_pop
12a24     FF 1E 02 F6 | 	mov	local01, result3
12a28     A7 FA 61 FC | 	wrlong	result1, fp
12a2c     04 4E 05 F1 | 	add	fp, #4
12a30     A7 FC 61 FC | 	wrlong	result2, fp
12a34     04 4E 05 F1 | 	add	fp, #4
12a38     A7 1E 62 FC | 	wrlong	local01, fp
12a3c     08 4E 85 F1 | 	sub	fp, #8
12a40     A7 12 02 F6 | 	mov	arg01, fp
12a44     70 90 BF FD | 	call	#_converttofloat
12a48     FD 14 02 F6 | 	mov	arg02, result1
12a4c     FC 16 20 FF 
12a50     54 12 06 F6 | 	mov	arg01, ##1076754516
12a54     F8 28 B1 FD | 	call	#__system____builtin_logbase
12a58     FD 12 02 F6 | 	mov	arg01, result1
12a5c     10 4E 05 F1 | 	add	fp, #16
12a60     A7 14 02 FB | 	rdlong	arg02, fp
12a64     10 4E 85 F1 | 	sub	fp, #16
12a68     18 1B B1 FD | 	call	#__system___float_div
12a6c     A7 FA 61 FC | 	wrlong	result1, fp
12a70     08 4E 05 F1 | 	add	fp, #8
12a74     A7 3C 68 FC | 	wrlong	#30, fp
12a78     08 4E 85 F1 | 	sub	fp, #8
12a7c     A7 12 02 F6 | 	mov	arg01, fp
12a80     2C 8E BF FD | 	call	#_push
12a84                 | LR__1583
12a84     A7 F0 03 F6 | 	mov	ptra, fp
12a88     B2 00 A0 FD | 	call	#popregs_
12a8c                 | _do_log_ret
12a8c     2D 00 64 FD | 	ret
12a90                 | 
12a90                 | ' 
12a90                 | ' '-------------------- lpeek
12a90                 | ' 
12a90                 | ' sub do_lpeek
12a90                 | _do_lpeek
12a90     00 4A 05 F6 | 	mov	COUNT_, #0
12a94     A8 00 A0 FD | 	call	#pushregs_
12a98     14 F0 07 F1 | 	add	ptra, #20
12a9c     78 8D BF FD | 	call	#_pop
12aa0     A7 FA 61 FC | 	wrlong	result1, fp
12aa4     04 4E 05 F1 | 	add	fp, #4
12aa8     A7 FC 61 FC | 	wrlong	result2, fp
12aac     04 4E 05 F1 | 	add	fp, #4
12ab0     A7 FE 61 FC | 	wrlong	result3, fp
12ab4     08 4E 85 F1 | 	sub	fp, #8
12ab8     A7 12 02 F6 | 	mov	arg01, fp
12abc     3C 8F BF FD | 	call	#_converttoint
12ac0     0C 4E 05 F1 | 	add	fp, #12
12ac4     A7 FA 61 FC | 	wrlong	result1, fp
12ac8                 | ' 
12ac8                 | ' t1=pop()
12ac8                 | ' a=converttoint(t1)
12ac8                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
12ac8     0C 4E 85 F1 | 	sub	fp, #12
12acc     00 04 00 FF 
12ad0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
12ad4     1C 00 90 3D |  if_ae	jmp	#LR__1590
12ad8     0C 4E 05 F1 | 	add	fp, #12
12adc     A7 12 02 FB | 	rdlong	arg01, fp
12ae0     09 FB 01 FB | 	rdlong	result1, arg01
12ae4     04 4E 05 F1 | 	add	fp, #4
12ae8     A7 FA 61 FC | 	wrlong	result1, fp
12aec     10 4E 85 F1 | 	sub	fp, #16
12af0     1C 00 90 FD | 	jmp	#LR__1591
12af4                 | LR__1590
12af4     0C 4E 05 F1 | 	add	fp, #12
12af8     A7 12 02 FB | 	rdlong	arg01, fp
12afc     0C 4E 85 F1 | 	sub	fp, #12
12b00     BC B7 B0 FD | 	call	#_pslpeek
12b04     10 4E 05 F1 | 	add	fp, #16
12b08     A7 FA 61 FC | 	wrlong	result1, fp
12b0c     10 4E 85 F1 | 	sub	fp, #16
12b10                 | LR__1591
12b10     08 4E 05 F1 | 	add	fp, #8
12b14     A7 3A 68 FC | 	wrlong	#29, fp
12b18     08 4E 05 F1 | 	add	fp, #8
12b1c     A7 12 02 FB | 	rdlong	arg01, fp
12b20     10 4E 85 F1 | 	sub	fp, #16
12b24     A7 12 62 FC | 	wrlong	arg01, fp
12b28     A7 12 02 F6 | 	mov	arg01, fp
12b2c     80 8D BF FD | 	call	#_push
12b30     A7 F0 03 F6 | 	mov	ptra, fp
12b34     B2 00 A0 FD | 	call	#popregs_
12b38                 | _do_lpeek_ret
12b38     2D 00 64 FD | 	ret
12b3c                 | 
12b3c                 | ' 
12b3c                 | ' '-------------------- lpoke
12b3c                 | ' 
12b3c                 | ' sub do_lpoke
12b3c                 | _do_lpoke
12b3c     01 4A 05 F6 | 	mov	COUNT_, #1
12b40     A8 00 A0 FD | 	call	#pushregs_
12b44     20 F0 07 F1 | 	add	ptra, #32
12b48     CC 8C BF FD | 	call	#_pop
12b4c     FD 14 02 F6 | 	mov	arg02, result1
12b50     FE 12 02 F6 | 	mov	arg01, result2
12b54     FF 1E 02 F6 | 	mov	local01, result3
12b58     A7 14 62 FC | 	wrlong	arg02, fp
12b5c     04 4E 05 F1 | 	add	fp, #4
12b60     A7 12 62 FC | 	wrlong	arg01, fp
12b64     04 4E 05 F1 | 	add	fp, #4
12b68     A7 1E 62 FC | 	wrlong	local01, fp
12b6c     08 4E 85 F1 | 	sub	fp, #8
12b70     A4 8C BF FD | 	call	#_pop
12b74     FF 1E 02 F6 | 	mov	local01, result3
12b78     0C 4E 05 F1 | 	add	fp, #12
12b7c     A7 FA 61 FC | 	wrlong	result1, fp
12b80     04 4E 05 F1 | 	add	fp, #4
12b84     A7 FC 61 FC | 	wrlong	result2, fp
12b88     04 4E 05 F1 | 	add	fp, #4
12b8c     A7 1E 62 FC | 	wrlong	local01, fp
12b90     08 4E 85 F1 | 	sub	fp, #8
12b94     A7 12 02 F6 | 	mov	arg01, fp
12b98     0C 4E 85 F1 | 	sub	fp, #12
12b9c     5C 8E BF FD | 	call	#_converttoint
12ba0     18 4E 05 F1 | 	add	fp, #24
12ba4     A7 FA 61 FC | 	wrlong	result1, fp
12ba8     18 4E 85 F1 | 	sub	fp, #24
12bac     A7 12 02 F6 | 	mov	arg01, fp
12bb0     48 8E BF FD | 	call	#_converttoint
12bb4     1C 4E 05 F1 | 	add	fp, #28
12bb8     A7 FA 61 FC | 	wrlong	result1, fp
12bbc                 | ' 
12bbc                 | ' t1=pop() 'value
12bbc                 | ' t2=pop() 
12bbc                 | ' a=converttoint(t2) : v=converttoint(t1)
12bbc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
12bbc     04 4E 85 F1 | 	sub	fp, #4
12bc0     A7 1E 02 FB | 	rdlong	local01, fp
12bc4     18 4E 85 F1 | 	sub	fp, #24
12bc8     00 04 00 FF 
12bcc     00 1E 16 F2 | 	cmp	local01, ##524288 wc
12bd0     1C 00 90 3D |  if_ae	jmp	#LR__1600
12bd4     18 4E 05 F1 | 	add	fp, #24
12bd8     A7 12 02 FB | 	rdlong	arg01, fp
12bdc     04 4E 05 F1 | 	add	fp, #4
12be0     A7 14 02 FB | 	rdlong	arg02, fp
12be4     1C 4E 85 F1 | 	sub	fp, #28
12be8     09 15 62 FC | 	wrlong	arg02, arg01
12bec     18 00 90 FD | 	jmp	#LR__1601
12bf0                 | LR__1600
12bf0     18 4E 05 F1 | 	add	fp, #24
12bf4     A7 12 02 FB | 	rdlong	arg01, fp
12bf8     04 4E 05 F1 | 	add	fp, #4
12bfc     A7 14 02 FB | 	rdlong	arg02, fp
12c00     1C 4E 85 F1 | 	sub	fp, #28
12c04     88 B5 B0 FD | 	call	#_pslpoke
12c08                 | LR__1601
12c08     A7 F0 03 F6 | 	mov	ptra, fp
12c0c     B2 00 A0 FD | 	call	#popregs_
12c10                 | _do_lpoke_ret
12c10     2D 00 64 FD | 	ret
12c14                 | 
12c14                 | ' 
12c14                 | ' '-------------------- mid$
12c14                 | ' 
12c14                 | ' sub do_mid
12c14                 | _do_mid
12c14     00 4A 05 F6 | 	mov	COUNT_, #0
12c18     A8 00 A0 FD | 	call	#pushregs_
12c1c     18 F0 07 F1 | 	add	ptra, #24
12c20     4A 00 00 FF 
12c24     80 E4 05 F1 | 	add	objptr, ##38016
12c28     F2 16 02 FB | 	rdlong	arg03, objptr
12c2c     0B 15 02 F6 | 	mov	arg02, arg03
12c30     01 14 66 F0 | 	shl	arg02, #1
12c34     0B 15 02 F1 | 	add	arg02, arg03
12c38     02 14 66 F0 | 	shl	arg02, #2
12c3c     03 00 00 FF 
12c40     04 E4 85 F1 | 	sub	objptr, ##1540
12c44     F2 14 02 F1 | 	add	arg02, objptr
12c48     0A 17 02 FB | 	rdlong	arg03, arg02
12c4c     0C 4E 05 F1 | 	add	fp, #12
12c50     A7 16 62 FC | 	wrlong	arg03, fp
12c54                 | ' 
12c54                 | ' numpar=compiledline(lineptr_e).result.uresult
12c54                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
12c54     0C 4E 85 F1 | 	sub	fp, #12
12c58     03 16 0E F2 | 	cmp	arg03, #3 wz
12c5c     47 00 00 FF 
12c60     7C E4 85 F1 | 	sub	objptr, ##36476
12c64     40 00 90 AD |  if_e	jmp	#LR__1610
12c68     00 12 06 F6 | 	mov	arg01, #0
12c6c     80 46 B1 FD | 	call	#__system___getiolock_0570
12c70     FD 12 02 F6 | 	mov	arg01, result1
12c74     4C E9 B0 FD | 	call	#__system___lockmem
12c78     8D 01 00 FF 
12c7c     2C 14 06 F6 | 	mov	arg02, ##@LR__5583
12c80     00 12 06 F6 | 	mov	arg01, #0
12c84     00 16 06 F6 | 	mov	arg03, #0
12c88     2C F6 B0 FD | 	call	#__system___basic_print_string
12c8c     00 12 06 F6 | 	mov	arg01, #0
12c90     5C 46 B1 FD | 	call	#__system___getiolock_0570
12c94     FD 00 68 FC | 	wrlong	#0, result1
12c98     27 12 06 F6 | 	mov	arg01, #39
12c9c     00 14 06 F6 | 	mov	arg02, #0
12ca0     60 B3 B0 FD | 	call	#_printerror
12ca4     2C 01 90 FD | 	jmp	#LR__1613
12ca8                 | LR__1610
12ca8     6C 8B BF FD | 	call	#_pop
12cac     FF 16 02 F6 | 	mov	arg03, result3
12cb0     A7 FA 61 FC | 	wrlong	result1, fp
12cb4     04 4E 05 F1 | 	add	fp, #4
12cb8     A7 FC 61 FC | 	wrlong	result2, fp
12cbc     04 4E 05 F1 | 	add	fp, #4
12cc0     A7 16 62 FC | 	wrlong	arg03, fp
12cc4     08 4E 85 F1 | 	sub	fp, #8
12cc8     A7 12 02 F6 | 	mov	arg01, fp
12ccc     2C 8D BF FD | 	call	#_converttoint
12cd0     FD 16 02 F6 | 	mov	arg03, result1
12cd4     14 4E 05 F1 | 	add	fp, #20
12cd8     A7 16 62 FC | 	wrlong	arg03, fp
12cdc     14 4E 85 F1 | 	sub	fp, #20
12ce0     34 8B BF FD | 	call	#_pop
12ce4     FF 16 02 F6 | 	mov	arg03, result3
12ce8     A7 FA 61 FC | 	wrlong	result1, fp
12cec     04 4E 05 F1 | 	add	fp, #4
12cf0     A7 FC 61 FC | 	wrlong	result2, fp
12cf4     04 4E 05 F1 | 	add	fp, #4
12cf8     A7 16 62 FC | 	wrlong	arg03, fp
12cfc     08 4E 85 F1 | 	sub	fp, #8
12d00     A7 12 02 F6 | 	mov	arg01, fp
12d04     F4 8C BF FD | 	call	#_converttoint
12d08     FD 16 02 F6 | 	mov	arg03, result1
12d0c     10 4E 05 F1 | 	add	fp, #16
12d10     A7 16 62 FC | 	wrlong	arg03, fp
12d14     10 4E 85 F1 | 	sub	fp, #16
12d18     FC 8A BF FD | 	call	#_pop
12d1c     FF 16 02 F6 | 	mov	arg03, result3
12d20     A7 FA 61 FC | 	wrlong	result1, fp
12d24     04 4E 05 F1 | 	add	fp, #4
12d28     A7 FC 61 FC | 	wrlong	result2, fp
12d2c     04 4E 05 F1 | 	add	fp, #4
12d30     A7 16 62 FC | 	wrlong	arg03, fp
12d34                 | ' t1=pop() : arg2=converttoint(t1)
12d34                 | ' t1=pop() : arg1=converttoint(t1)
12d34                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12d34     08 4E 85 F1 | 	sub	fp, #8
12d38     2B 16 0E F2 | 	cmp	arg03, #43 wz
12d3c     18 00 90 5D |  if_ne	jmp	#LR__1611
12d40     A7 12 02 FB | 	rdlong	arg01, fp
12d44     48 8C BF FD | 	call	#_convertstring
12d48     A7 FA 61 FC | 	wrlong	result1, fp
12d4c     08 4E 05 F1 | 	add	fp, #8
12d50     A7 3E 68 FC | 	wrlong	#31, fp
12d54     08 4E 85 F1 | 	sub	fp, #8
12d58                 | LR__1611
12d58                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
12d58     08 4E 05 F1 | 	add	fp, #8
12d5c     A7 16 02 FB | 	rdlong	arg03, fp
12d60     08 4E 85 F1 | 	sub	fp, #8
12d64     1F 16 0E F2 | 	cmp	arg03, #31 wz
12d68     40 00 90 AD |  if_e	jmp	#LR__1612
12d6c     00 12 06 F6 | 	mov	arg01, #0
12d70     7C 45 B1 FD | 	call	#__system___getiolock_0570
12d74     FD 12 02 F6 | 	mov	arg01, result1
12d78     48 E8 B0 FD | 	call	#__system___lockmem
12d7c     8D 01 00 FF 
12d80     33 14 06 F6 | 	mov	arg02, ##@LR__5584
12d84     00 12 06 F6 | 	mov	arg01, #0
12d88     00 16 06 F6 | 	mov	arg03, #0
12d8c     28 F5 B0 FD | 	call	#__system___basic_print_string
12d90     00 12 06 F6 | 	mov	arg01, #0
12d94     58 45 B1 FD | 	call	#__system___getiolock_0570
12d98     FD 00 68 FC | 	wrlong	#0, result1
12d9c     0F 12 06 F6 | 	mov	arg01, #15
12da0     00 14 06 F6 | 	mov	arg02, #0
12da4     5C B2 B0 FD | 	call	#_printerror
12da8     28 00 90 FD | 	jmp	#LR__1613
12dac                 | LR__1612
12dac     A7 12 02 FB | 	rdlong	arg01, fp
12db0     10 4E 05 F1 | 	add	fp, #16
12db4     A7 14 02 FB | 	rdlong	arg02, fp
12db8     04 4E 05 F1 | 	add	fp, #4
12dbc     A7 16 02 FB | 	rdlong	arg03, fp
12dc0     14 4E 85 F1 | 	sub	fp, #20
12dc4     90 09 B1 FD | 	call	#__system__Mid_S
12dc8     A7 FA 61 FC | 	wrlong	result1, fp
12dcc     A7 12 02 F6 | 	mov	arg01, fp
12dd0     DC 8A BF FD | 	call	#_push
12dd4                 | LR__1613
12dd4     A7 F0 03 F6 | 	mov	ptra, fp
12dd8     B2 00 A0 FD | 	call	#popregs_
12ddc                 | _do_mid_ret
12ddc     2D 00 64 FD | 	ret
12de0                 | 
12de0                 | ' 
12de0                 | ' '-------------------- mkdir
12de0                 | ' 
12de0                 | ' sub do_mkdir
12de0                 | _do_mkdir
12de0     04 4A 05 F6 | 	mov	COUNT_, #4
12de4     A8 00 A0 FD | 	call	#pushregs_
12de8     2C 8A BF FD | 	call	#_pop
12dec     FE 18 02 F6 | 	mov	arg04, result2
12df0     FF 16 02 F6 | 	mov	arg03, result3
12df4     FD 1E 02 F6 | 	mov	local01, result1
12df8     0C 21 02 F6 | 	mov	local02, arg04
12dfc     0B 23 02 F6 | 	mov	local03, arg03
12e00                 | ' 
12e00                 | ' t1=pop()
12e00                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12e00     2B 22 0E F2 | 	cmp	local03, #43 wz
12e04     10 00 90 5D |  if_ne	jmp	#LR__1620
12e08     0F 13 02 F6 | 	mov	arg01, local01
12e0c     80 8B BF FD | 	call	#_convertstring
12e10     FD 1E 02 F6 | 	mov	local01, result1
12e14     1F 22 06 F6 | 	mov	local03, #31
12e18                 | LR__1620
12e18                 | ' if t1.result_type<>result_string then printerror(15): return
12e18     1F 22 0E F2 | 	cmp	local03, #31 wz
12e1c     10 00 90 AD |  if_e	jmp	#LR__1621
12e20     0F 12 06 F6 | 	mov	arg01, #15
12e24     00 14 06 F6 | 	mov	arg02, #0
12e28     D8 B1 B0 FD | 	call	#_printerror
12e2c     70 00 90 FD | 	jmp	#LR__1623
12e30                 | LR__1621
12e30     0F 13 02 F6 | 	mov	arg01, local01
12e34     1C 3C B1 FD | 	call	#__system__mkdir
12e38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12e3c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
12e40     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12e44     FD 24 0A F6 | 	mov	local04, result1 wz
12e48                 | ' filename$=t1.result.sresult
12e48                 | ' mkdir(filename$)
12e48                 | ' err=geterr() : if err<>0 then print "Cannot create a directory: system error "; err
12e48     54 00 90 AD |  if_e	jmp	#LR__1622
12e4c     00 12 06 F6 | 	mov	arg01, #0
12e50     9C 44 B1 FD | 	call	#__system___getiolock_0570
12e54     FD 12 02 F6 | 	mov	arg01, result1
12e58     68 E7 B0 FD | 	call	#__system___lockmem
12e5c     8D 01 00 FF 
12e60     3A 14 06 F6 | 	mov	arg02, ##@LR__5585
12e64     00 12 06 F6 | 	mov	arg01, #0
12e68     00 16 06 F6 | 	mov	arg03, #0
12e6c     48 F4 B0 FD | 	call	#__system___basic_print_string
12e70     00 12 06 F6 | 	mov	arg01, #0
12e74     12 15 02 F6 | 	mov	arg02, local04
12e78     00 16 06 F6 | 	mov	arg03, #0
12e7c     0A 18 06 F6 | 	mov	arg04, #10
12e80     78 F4 B0 FD | 	call	#__system___basic_print_integer
12e84     00 12 06 F6 | 	mov	arg01, #0
12e88     0A 14 06 F6 | 	mov	arg02, #10
12e8c     00 16 06 F6 | 	mov	arg03, #0
12e90     CC F3 B0 FD | 	call	#__system___basic_print_char
12e94     00 12 06 F6 | 	mov	arg01, #0
12e98     54 44 B1 FD | 	call	#__system___getiolock_0570
12e9c     FD 00 68 FC | 	wrlong	#0, result1
12ea0                 | LR__1622
12ea0                 | LR__1623
12ea0     A7 F0 03 F6 | 	mov	ptra, fp
12ea4     B2 00 A0 FD | 	call	#popregs_
12ea8                 | _do_mkdir_ret
12ea8     2D 00 64 FD | 	ret
12eac                 | 
12eac                 | ' 
12eac                 | ' '-------------------- mode
12eac                 | ' 
12eac                 | ' sub do_mode
12eac                 | _do_mode
12eac     05 4A 05 F6 | 	mov	COUNT_, #5
12eb0     A8 00 A0 FD | 	call	#pushregs_
12eb4     60 89 BF FD | 	call	#_pop
12eb8     FD 1E 02 F6 | 	mov	local01, result1
12ebc     FE 20 02 F6 | 	mov	local02, result2
12ec0     FF 22 02 F6 | 	mov	local03, result3
12ec4                 | ' t1=pop() 
12ec4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12ec4     1E 22 0E F2 | 	cmp	local03, #30 wz
12ec8     10 00 90 5D |  if_ne	jmp	#LR__1630
12ecc     0F 13 02 F6 | 	mov	arg01, local01
12ed0     00 14 06 F6 | 	mov	arg02, #0
12ed4     70 19 B1 FD | 	call	#__system___float_tointeger
12ed8     FD 1E 02 F6 | 	mov	local01, result1
12edc                 | LR__1630
12edc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12edc     1F 22 0E F2 | 	cmp	local03, #31 wz
12ee0     18 00 90 5D |  if_ne	jmp	#LR__1631
12ee4     0F 13 02 F6 | 	mov	arg01, local01
12ee8     A0 1C B1 FD | 	call	#__system____builtin_atof
12eec     FD 12 02 F6 | 	mov	arg01, result1
12ef0     00 14 06 F6 | 	mov	arg02, #0
12ef4     50 19 B1 FD | 	call	#__system___float_tointeger
12ef8     FD 1E 02 F6 | 	mov	local01, result1
12efc                 | LR__1631
12efc                 | ' select case t1.result.iresult
12efc     0F 25 02 F6 | 	mov	local04, local01
12f00     05 24 26 F3 | 	fle	local04, #5
12f04     30 24 62 FD | 	jmprel	local04
12f08                 | LR__1632
12f08     14 00 90 FD | 	jmp	#LR__1633
12f0c     A8 00 90 FD | 	jmp	#LR__1634
12f10     10 01 90 FD | 	jmp	#LR__1635
12f14     78 01 90 FD | 	jmp	#LR__1636
12f18     E0 01 90 FD | 	jmp	#LR__1637
12f1c     70 02 90 FD | 	jmp	#LR__1638
12f20                 | LR__1633
12f20     37 00 00 FF 
12f24     40 E4 05 F1 | 	add	objptr, ##28224
12f28     F2 02 68 FC | 	wrlong	#1, objptr
12f2c     04 E4 85 F1 | 	sub	objptr, #4
12f30     F2 34 69 FC | 	wrlong	#154, objptr
12f34     19 00 00 FF 
12f38     D8 E4 05 F1 | 	add	objptr, ##13016
12f3c     F2 02 68 FC | 	wrlong	#1, objptr
12f40     19 00 00 FF 
12f44     DC E4 85 F1 | 	sub	objptr, ##13020
12f48     F2 26 69 FC | 	wrlong	#147, objptr
12f4c     37 00 00 FF 
12f50     38 E4 85 F1 | 	sub	objptr, ##28216
12f54     04 12 06 F6 | 	mov	arg01, #4
12f58     3C CC B0 FD | 	call	#_hg010b_spin2_setfontfamily
12f5c     37 00 00 FF 
12f60     3C E4 05 F1 | 	add	objptr, ##28220
12f64     F2 12 02 FB | 	rdlong	arg01, objptr
12f68     04 E4 85 F1 | 	sub	objptr, #4
12f6c     F2 14 02 FB | 	rdlong	arg02, objptr
12f70                 | ' 
12f70                 | ' write_color:=ff
12f70     36 00 00 FF 
12f74     F7 E5 85 F1 | 	sub	objptr, ##28151
12f78     F2 12 62 FC | 	wrlong	arg01, objptr
12f7c                 | ' write_background:=bb
12f7c     04 E4 05 F1 | 	add	objptr, #4
12f80     F2 14 62 FC | 	wrlong	arg02, objptr
12f84     01 00 00 FF 
12f88     00 EA 05 F1 | 	add	ptr__dat__, ##512
12f8c     51 00 00 FF 
12f90     73 E5 05 F1 | 	add	objptr, ##41843
12f94     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
12f98     04 E4 85 F1 | 	sub	objptr, #4
12f9c     03 00 80 FF 
12fa0     F2 30 69 FC | 	wrlong	##1688, objptr
12fa4     51 00 00 FF 
12fa8     B4 E5 85 F1 | 	sub	objptr, ##41908
12fac     01 00 00 FF 
12fb0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12fb4     D8 01 90 FD | 	jmp	#LR__1638
12fb8                 | LR__1634
12fb8     37 00 00 FF 
12fbc     40 E4 05 F1 | 	add	objptr, ##28224
12fc0     F2 00 68 FC | 	wrlong	#0, objptr
12fc4     04 E4 85 F1 | 	sub	objptr, #4
12fc8     F2 2E 68 FC | 	wrlong	#23, objptr
12fcc     19 00 00 FF 
12fd0     D8 E4 05 F1 | 	add	objptr, ##13016
12fd4     F2 00 68 FC | 	wrlong	#0, objptr
12fd8     19 00 00 FF 
12fdc     DC E4 85 F1 | 	sub	objptr, ##13020
12fe0     F2 00 68 FC | 	wrlong	#0, objptr
12fe4     37 00 00 FF 
12fe8     38 E4 85 F1 | 	sub	objptr, ##28216
12fec     00 12 06 F6 | 	mov	arg01, #0
12ff0     A4 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
12ff4     37 00 00 FF 
12ff8     3C E4 05 F1 | 	add	objptr, ##28220
12ffc     F2 12 02 FB | 	rdlong	arg01, objptr
13000     04 E4 85 F1 | 	sub	objptr, #4
13004     F2 14 02 FB | 	rdlong	arg02, objptr
13008                 | ' 
13008                 | ' write_color:=ff
13008     36 00 00 FF 
1300c     F7 E5 85 F1 | 	sub	objptr, ##28151
13010     F2 12 62 FC | 	wrlong	arg01, objptr
13014                 | ' write_background:=bb
13014     04 E4 05 F1 | 	add	objptr, #4
13018     F2 14 62 FC | 	wrlong	arg02, objptr
1301c     45 E4 85 F1 | 	sub	objptr, #69
13020     6C 01 90 FD | 	jmp	#LR__1638
13024                 | LR__1635
13024     37 00 00 FF 
13028     40 E4 05 F1 | 	add	objptr, ##28224
1302c     F2 00 68 FC | 	wrlong	#0, objptr
13030     04 E4 85 F1 | 	sub	objptr, #4
13034     F2 6A 69 FC | 	wrlong	#181, objptr
13038     19 00 00 FF 
1303c     D8 E4 05 F1 | 	add	objptr, ##13016
13040     F2 00 68 FC | 	wrlong	#0, objptr
13044     19 00 00 FF 
13048     DC E4 85 F1 | 	sub	objptr, ##13020
1304c     F2 00 68 FC | 	wrlong	#0, objptr
13050     37 00 00 FF 
13054     38 E4 85 F1 | 	sub	objptr, ##28216
13058     00 12 06 F6 | 	mov	arg01, #0
1305c     38 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
13060     37 00 00 FF 
13064     3C E4 05 F1 | 	add	objptr, ##28220
13068     F2 12 02 FB | 	rdlong	arg01, objptr
1306c     04 E4 85 F1 | 	sub	objptr, #4
13070     F2 14 02 FB | 	rdlong	arg02, objptr
13074                 | ' 
13074                 | ' write_color:=ff
13074     36 00 00 FF 
13078     F7 E5 85 F1 | 	sub	objptr, ##28151
1307c     F2 12 62 FC | 	wrlong	arg01, objptr
13080                 | ' write_background:=bb
13080     04 E4 05 F1 | 	add	objptr, #4
13084     F2 14 62 FC | 	wrlong	arg02, objptr
13088     45 E4 85 F1 | 	sub	objptr, #69
1308c     00 01 90 FD | 	jmp	#LR__1638
13090                 | LR__1636
13090     37 00 00 FF 
13094     40 E4 05 F1 | 	add	objptr, ##28224
13098     F2 00 68 FC | 	wrlong	#0, objptr
1309c     04 E4 85 F1 | 	sub	objptr, #4
130a0     F2 1E 68 FC | 	wrlong	#15, objptr
130a4     19 00 00 FF 
130a8     D8 E4 05 F1 | 	add	objptr, ##13016
130ac     F2 00 68 FC | 	wrlong	#0, objptr
130b0     19 00 00 FF 
130b4     DC E4 85 F1 | 	sub	objptr, ##13020
130b8     F2 00 68 FC | 	wrlong	#0, objptr
130bc     37 00 00 FF 
130c0     38 E4 85 F1 | 	sub	objptr, ##28216
130c4     00 12 06 F6 | 	mov	arg01, #0
130c8     CC CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
130cc     37 00 00 FF 
130d0     3C E4 05 F1 | 	add	objptr, ##28220
130d4     F2 12 02 FB | 	rdlong	arg01, objptr
130d8     04 E4 85 F1 | 	sub	objptr, #4
130dc     F2 14 02 FB | 	rdlong	arg02, objptr
130e0                 | ' 
130e0                 | ' write_color:=ff
130e0     36 00 00 FF 
130e4     F7 E5 85 F1 | 	sub	objptr, ##28151
130e8     F2 12 62 FC | 	wrlong	arg01, objptr
130ec                 | ' write_background:=bb
130ec     04 E4 05 F1 | 	add	objptr, #4
130f0     F2 14 62 FC | 	wrlong	arg02, objptr
130f4     45 E4 85 F1 | 	sub	objptr, #69
130f8     94 00 90 FD | 	jmp	#LR__1638
130fc                 | LR__1637
130fc     37 00 00 FF 
13100     40 E4 05 F1 | 	add	objptr, ##28224
13104     F2 02 68 FC | 	wrlong	#1, objptr
13108     04 E4 85 F1 | 	sub	objptr, #4
1310c     F2 02 68 FC | 	wrlong	#1, objptr
13110     19 00 00 FF 
13114     D8 E4 05 F1 | 	add	objptr, ##13016
13118     F2 02 68 FC | 	wrlong	#1, objptr
1311c     19 00 00 FF 
13120     DC E4 85 F1 | 	sub	objptr, ##13020
13124     F2 1C 68 FC | 	wrlong	#14, objptr
13128     37 00 00 FF 
1312c     38 E4 85 F1 | 	sub	objptr, ##28216
13130     04 12 06 F6 | 	mov	arg01, #4
13134     60 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
13138     37 00 00 FF 
1313c     3C E4 05 F1 | 	add	objptr, ##28220
13140     F2 12 02 FB | 	rdlong	arg01, objptr
13144     04 E4 85 F1 | 	sub	objptr, #4
13148     F2 14 02 FB | 	rdlong	arg02, objptr
1314c                 | ' 
1314c                 | ' write_color:=ff
1314c     36 00 00 FF 
13150     F7 E5 85 F1 | 	sub	objptr, ##28151
13154     F2 12 62 FC | 	wrlong	arg01, objptr
13158                 | ' write_background:=bb
13158     04 E4 05 F1 | 	add	objptr, #4
1315c     F2 14 62 FC | 	wrlong	arg02, objptr
13160     07 00 00 FF 
13164     82 EB 05 F1 | 	add	ptr__dat__, ##3970
13168     51 00 00 FF 
1316c     73 E5 05 F1 | 	add	objptr, ##41843
13170     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13174     04 E4 85 F1 | 	sub	objptr, #4
13178     03 00 80 FF 
1317c     F2 30 69 FC | 	wrlong	##1688, objptr
13180     51 00 00 FF 
13184     B4 E5 85 F1 | 	sub	objptr, ##41908
13188     07 00 00 FF 
1318c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
13190                 | LR__1638
13190     51 00 00 FF 
13194     B0 E5 05 F1 | 	add	objptr, ##41904
13198     F2 1E 62 FC | 	wrlong	local01, objptr
1319c     04 E4 85 F1 | 	sub	objptr, #4
131a0     F2 12 02 FB | 	rdlong	arg01, objptr
131a4     0E 00 00 FF 
131a8     50 E5 85 F1 | 	sub	objptr, ##7504
131ac     F2 26 02 FB | 	rdlong	local05, objptr
131b0     43 00 00 FF 
131b4     5C E4 85 F1 | 	sub	objptr, ##34396
131b8     13 13 82 F1 | 	sub	arg01, local05
131bc     00 14 06 F6 | 	mov	arg02, #0
131c0     0A 16 06 F6 | 	mov	arg03, #10
131c4     CC 06 B1 FD | 	call	#__system__Number_S
131c8     FD 12 02 F6 | 	mov	arg01, result1
131cc     8D 01 00 FF 
131d0     63 14 06 F6 | 	mov	arg02, ##@LR__5586
131d4     48 E4 B0 FD | 	call	#__system___string_concat
131d8     50 00 00 FF 
131dc     10 E5 05 F1 | 	add	objptr, ##41232
131e0     F2 FA 61 FC | 	wrlong	result1, objptr
131e4     19 00 00 FF 
131e8     D4 E4 85 F1 | 	sub	objptr, ##13012
131ec     F2 12 02 FB | 	rdlong	arg01, objptr
131f0     04 E4 85 F1 | 	sub	objptr, #4
131f4     F2 14 02 FB | 	rdlong	arg02, objptr
131f8     37 00 00 FF 
131fc     38 E4 85 F1 | 	sub	objptr, ##28216
13200     E4 CA B0 FD | 	call	#_hg010b_spin2_cls
13204     8D 01 00 FF 
13208     75 12 06 F6 | 	mov	arg01, ##@LR__5587
1320c                 | ' 
1320c                 | ' write(text)
1320c     98 CE B0 FD | 	call	#_hg010b_spin2_write
13210                 | ' crlf
13210     94 D3 B0 FD | 	call	#_hg010b_spin2_crlf
13214     18 00 00 FF 
13218     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1321c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
13220     18 00 00 FF 
13224     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
13228                 | ' 
13228                 | ' write(text)
13228     7C CE B0 FD | 	call	#_hg010b_spin2_write
1322c                 | ' crlf
1322c     78 D3 B0 FD | 	call	#_hg010b_spin2_crlf
13230     50 00 00 FF 
13234     10 E5 05 F1 | 	add	objptr, ##41232
13238     F2 12 02 FB | 	rdlong	arg01, objptr
1323c     50 00 00 FF 
13240     10 E5 85 F1 | 	sub	objptr, ##41232
13244                 | ' 
13244                 | ' write(text)
13244     60 CE B0 FD | 	call	#_hg010b_spin2_write
13248                 | ' crlf
13248     5C D3 B0 FD | 	call	#_hg010b_spin2_crlf
1324c     A7 F0 03 F6 | 	mov	ptra, fp
13250     B2 00 A0 FD | 	call	#popregs_
13254                 | _do_mode_ret
13254     2D 00 64 FD | 	ret
13258                 | 
13258                 | ' 
13258                 | ' '-------------------- mouse
13258                 | ' 
13258                 | ' sub do_mouse
13258                 | _do_mouse
13258     BC 85 BF FD | 	call	#_pop
1325c     00 FA 4D F2 | 	cmps	result1, #0 wz
13260                 | ' 
13260                 | ' t1=pop()
13260                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
13260     14 00 90 5D |  if_ne	jmp	#LR__1640
13264     10 12 06 F6 | 	mov	arg01, #16
13268     00 14 06 F6 | 	mov	arg02, #0
1326c     00 16 06 F6 | 	mov	arg03, #0
13270     54 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13274     10 00 90 FD | 	jmp	#LR__1641
13278                 | LR__1640
13278     10 12 06 F6 | 	mov	arg01, #16
1327c     20 14 06 F6 | 	mov	arg02, #32
13280     20 16 06 F6 | 	mov	arg03, #32
13284     40 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13288                 | LR__1641
13288                 | _do_mouse_ret
13288     2D 00 64 FD | 	ret
1328c                 | 
1328c                 | ' 
1328c                 | ' '-------------------- mousek
1328c                 | ' 
1328c                 | ' sub do_mousek
1328c                 | _do_mousek
1328c     00 4A 05 F6 | 	mov	COUNT_, #0
13290     A8 00 A0 FD | 	call	#pushregs_
13294     0C F0 07 F1 | 	add	ptra, #12
13298     08 4E 05 F1 | 	add	fp, #8
1329c     A7 3A 68 FC | 	wrlong	#29, fp
132a0     08 4E 85 F1 | 	sub	fp, #8
132a4     51 00 00 FF 
132a8     28 E5 05 F1 | 	add	objptr, ##41768
132ac     F2 12 02 FB | 	rdlong	arg01, objptr
132b0     51 00 00 FF 
132b4     28 E5 85 F1 | 	sub	objptr, ##41768
132b8     A7 12 62 FC | 	wrlong	arg01, fp
132bc     A7 12 02 F6 | 	mov	arg01, fp
132c0     EC 85 BF FD | 	call	#_push
132c4     A7 F0 03 F6 | 	mov	ptra, fp
132c8     B2 00 A0 FD | 	call	#popregs_
132cc                 | _do_mousek_ret
132cc     2D 00 64 FD | 	ret
132d0                 | 
132d0                 | ' 
132d0                 | ' '-------------------- mousew
132d0                 | ' 
132d0                 | ' sub do_mousew
132d0                 | _do_mousew
132d0     00 4A 05 F6 | 	mov	COUNT_, #0
132d4     A8 00 A0 FD | 	call	#pushregs_
132d8     0C F0 07 F1 | 	add	ptra, #12
132dc     08 4E 05 F1 | 	add	fp, #8
132e0     A7 38 68 FC | 	wrlong	#28, fp
132e4     08 4E 85 F1 | 	sub	fp, #8
132e8     51 00 00 FF 
132ec     2C E5 05 F1 | 	add	objptr, ##41772
132f0     F2 12 02 FB | 	rdlong	arg01, objptr
132f4     51 00 00 FF 
132f8     2C E5 85 F1 | 	sub	objptr, ##41772
132fc     A7 12 62 FC | 	wrlong	arg01, fp
13300     A7 12 02 F6 | 	mov	arg01, fp
13304     A8 85 BF FD | 	call	#_push
13308     A7 F0 03 F6 | 	mov	ptra, fp
1330c     B2 00 A0 FD | 	call	#popregs_
13310                 | _do_mousew_ret
13310     2D 00 64 FD | 	ret
13314                 | 
13314                 | ' 
13314                 | ' '-------------------- mousex
13314                 | ' 
13314                 | ' sub do_mousex
13314                 | _do_mousex
13314     00 4A 05 F6 | 	mov	COUNT_, #0
13318     A8 00 A0 FD | 	call	#pushregs_
1331c     0C F0 07 F1 | 	add	ptra, #12
13320     08 4E 05 F1 | 	add	fp, #8
13324     A7 3A 68 FC | 	wrlong	#29, fp
13328     08 4E 85 F1 | 	sub	fp, #8
1332c     51 00 00 FF 
13330     20 E5 05 F1 | 	add	objptr, ##41760
13334     F2 12 02 FB | 	rdlong	arg01, objptr
13338     51 00 00 FF 
1333c     20 E5 85 F1 | 	sub	objptr, ##41760
13340     A7 12 62 FC | 	wrlong	arg01, fp
13344     A7 12 02 F6 | 	mov	arg01, fp
13348     64 85 BF FD | 	call	#_push
1334c     A7 F0 03 F6 | 	mov	ptra, fp
13350     B2 00 A0 FD | 	call	#popregs_
13354                 | _do_mousex_ret
13354     2D 00 64 FD | 	ret
13358                 | 
13358                 | ' 
13358                 | ' '-------------------- mousey
13358                 | ' 
13358                 | ' sub do_mousey
13358                 | _do_mousey
13358     00 4A 05 F6 | 	mov	COUNT_, #0
1335c     A8 00 A0 FD | 	call	#pushregs_
13360     0C F0 07 F1 | 	add	ptra, #12
13364     08 4E 05 F1 | 	add	fp, #8
13368     A7 3A 68 FC | 	wrlong	#29, fp
1336c     08 4E 85 F1 | 	sub	fp, #8
13370     51 00 00 FF 
13374     24 E5 05 F1 | 	add	objptr, ##41764
13378     F2 12 02 FB | 	rdlong	arg01, objptr
1337c     51 00 00 FF 
13380     24 E5 85 F1 | 	sub	objptr, ##41764
13384     A7 12 62 FC | 	wrlong	arg01, fp
13388     A7 12 02 F6 | 	mov	arg01, fp
1338c     20 85 BF FD | 	call	#_push
13390     A7 F0 03 F6 | 	mov	ptra, fp
13394     B2 00 A0 FD | 	call	#popregs_
13398                 | _do_mousey_ret
13398     2D 00 64 FD | 	ret
1339c                 | 
1339c                 | ' 
1339c                 | ' '------------------ new
1339c                 | ' 
1339c                 | ' sub do_new
1339c                 | _do_new
1339c     03 4A 05 F6 | 	mov	COUNT_, #3
133a0     A8 00 A0 FD | 	call	#pushregs_
133a4     13 12 C6 F9 | 	decod	arg01, #19
133a8     01 14 66 F6 | 	neg	arg02, #1
133ac     E0 AD B0 FD | 	call	#_pslpoke
133b0     35 00 00 FF 
133b4     08 E4 05 F1 | 	add	objptr, ##27144
133b8     F2 00 68 FC | 	wrlong	#0, objptr
133bc                 | ' 
133bc                 | ' pslpoke(memlo,$FFFFFFFF)
133bc                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
133bc     00 1E 06 F6 | 	mov	local01, #0
133c0     20 00 00 FF 
133c4     10 E4 85 F1 | 	sub	objptr, ##16400
133c8     97 1E 48 FB | 	callpa	#(@LR__1651-@LR__1650)>>2,fcache_load_ptr_
133cc                 | LR__1650
133cc     0F 17 02 F6 | 	mov	arg03, local01
133d0     04 16 66 F0 | 	shl	arg03, #4
133d4     F2 16 02 F1 | 	add	arg03, objptr
133d8     8D 01 00 FF 
133dc     76 14 06 F6 | 	mov	arg02, ##@LR__5588
133e0     0B 15 62 FC | 	wrlong	arg02, arg03
133e4     0F 21 02 F6 | 	mov	local02, local01
133e8     04 20 66 F0 | 	shl	local02, #4
133ec     F2 20 02 F1 | 	add	local02, objptr
133f0     0C 20 06 F1 | 	add	local02, #12
133f4     10 01 68 FC | 	wrlong	#0, local02
133f8     01 1E 06 F1 | 	add	local01, #1
133fc     02 00 00 FF 
13400     01 1E 56 F2 | 	cmps	local01, ##1025 wc
13404     C4 FF 9F CD |  if_b	jmp	#LR__1650
13408                 | LR__1651
13408     35 00 00 FF 
1340c     90 E4 05 F1 | 	add	objptr, ##27280
13410     00 04 80 FF 
13414     F2 00 68 FC | 	wrlong	##524288, objptr
13418     06 00 00 FF 
1341c     30 E4 05 F1 | 	add	objptr, ##3120
13420     00 04 80 FF 
13424     F2 00 68 FC | 	wrlong	##524288, objptr
13428     04 E4 05 F1 | 	add	objptr, #4
1342c     00 04 80 FF 
13430     F2 00 68 FC | 	wrlong	##524288, objptr
13434     0D 00 00 FF 
13438     64 E4 85 F1 | 	sub	objptr, ##6756
1343c     F2 00 68 FC | 	wrlong	#0, objptr
13440     07 00 00 FF 
13444     24 E4 05 F1 | 	add	objptr, ##3620
13448     F2 00 68 FC | 	wrlong	#0, objptr
1344c     07 00 00 FF 
13450     20 E4 85 F1 | 	sub	objptr, ##3616
13454     00 04 80 FF 
13458     F2 00 68 FC | 	wrlong	##524288, objptr
1345c     07 00 00 FF 
13460     30 E4 05 F1 | 	add	objptr, ##3632
13464     F2 00 68 FC | 	wrlong	#0, objptr
13468     04 E4 05 F1 | 	add	objptr, #4
1346c     FF FF FF FF 
13470     F2 FE 6B FC | 	wrlong	##-1, objptr
13474     06 00 00 FF 
13478     78 E4 05 F1 | 	add	objptr, ##3192
1347c     F2 00 68 FC | 	wrlong	#0, objptr
13480     04 E4 05 F1 | 	add	objptr, #4
13484     F2 00 68 FC | 	wrlong	#0, objptr
13488                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
13488                 | ' stackpointer=0
13488                 | ' lineptr=0 
13488                 | ' programptr=memlo ': stringptr=0
13488                 | ' 
13488                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
13488                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
13488     00 1E 06 F6 | 	mov	local01, #0
1348c     06 00 00 FF 
13490     74 E4 85 F1 | 	sub	objptr, ##3188
13494     97 16 48 FB | 	callpa	#(@LR__1653-@LR__1652)>>2,fcache_load_ptr_
13498                 | LR__1652
13498     0F 21 02 F6 | 	mov	local02, local01
1349c     02 20 66 F0 | 	shl	local02, #2
134a0     0F 21 02 F1 | 	add	local02, local01
134a4     02 20 66 F0 | 	shl	local02, #2
134a8     F2 20 02 F1 | 	add	local02, objptr
134ac     08 20 06 F1 | 	add	local02, #8
134b0     FF FF FF FF 
134b4     10 FF 6B FC | 	wrlong	##-1, local02
134b8     01 1E 06 F1 | 	add	local01, #1
134bc     41 1E 56 F2 | 	cmps	local01, #65 wc
134c0     D4 FF 9F CD |  if_b	jmp	#LR__1652
134c4                 | LR__1653
134c4     4A 00 00 FF 
134c8     98 E4 85 F1 | 	sub	objptr, ##38040
134cc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
134cc     00 1E 06 F6 | 	mov	local01, #0
134d0                 | LR__1654
134d0     0F 21 02 F6 | 	mov	local02, local01
134d4     02 20 66 F0 | 	shl	local02, #2
134d8     51 00 00 FF 
134dc     68 E5 05 F1 | 	add	objptr, ##41832
134e0     F2 20 02 F1 | 	add	local02, objptr
134e4     10 23 0A FB | 	rdlong	local03, local02 wz
134e8     51 00 00 FF 
134ec     68 E5 85 F1 | 	sub	objptr, ##41832
134f0     34 00 90 AD |  if_e	jmp	#LR__1655
134f4     0F 13 02 F6 | 	mov	arg01, local01
134f8     00 14 06 F6 | 	mov	arg02, #0
134fc     00 16 06 F6 | 	mov	arg03, #0
13500     C4 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13504     0F 21 02 F6 | 	mov	local02, local01
13508     02 20 66 F0 | 	shl	local02, #2
1350c     51 00 00 FF 
13510     68 E5 05 F1 | 	add	objptr, ##41832
13514     F2 20 02 F1 | 	add	local02, objptr
13518     10 13 02 FB | 	rdlong	arg01, local02
1351c     51 00 00 FF 
13520     68 E5 85 F1 | 	sub	objptr, ##41832
13524     BC 22 B1 FD | 	call	#__system___gc_free
13528                 | LR__1655
13528     01 1E 06 F1 | 	add	local01, #1
1352c     10 1E 56 F2 | 	cmps	local01, #16 wc
13530     9C FF 9F CD |  if_b	jmp	#LR__1654
13534     51 00 00 FF 
13538     BC E5 05 F1 | 	add	objptr, ##41916
1353c     00 C0 9F FF 
13540     F2 00 68 FC | 	wrlong	##1065353216, objptr
13544     04 E4 05 F1 | 	add	objptr, #4
13548     00 C0 9F FF 
1354c     F2 00 68 FC | 	wrlong	##1065353216, objptr
13550     51 00 00 FF 
13554     BC E5 85 F1 | 	sub	objptr, ##41916
13558     F2 22 02 FB | 	rdlong	local03, objptr
1355c     51 00 00 FF 
13560     A8 E5 05 F1 | 	add	objptr, ##41896
13564     F2 22 62 FC | 	wrlong	local03, objptr
13568     51 00 00 FF 
1356c     AC E5 85 F1 | 	sub	objptr, ##41900
13570     11 12 06 F6 | 	mov	arg01, #17
13574     08 14 06 F6 | 	mov	arg02, #8
13578     10 16 06 F6 | 	mov	arg03, #16
1357c     48 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13580     10 12 06 F6 | 	mov	arg01, #16
13584     20 14 06 F6 | 	mov	arg02, #32
13588     20 16 06 F6 | 	mov	arg03, #32
1358c     38 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13590     8D 01 00 FF 
13594     77 22 06 F6 | 	mov	local03, ##@LR__5589
13598     51 00 00 FF 
1359c     D8 E5 05 F1 | 	add	objptr, ##41944
135a0     F2 22 62 FC | 	wrlong	local03, objptr
135a4     51 00 00 FF 
135a8     D8 E5 85 F1 | 	sub	objptr, ##41944
135ac     6C 9E B0 FD | 	call	#_init_audio
135b0     A7 F0 03 F6 | 	mov	ptra, fp
135b4     B2 00 A0 FD | 	call	#popregs_
135b8                 | _do_new_ret
135b8     2D 00 64 FD | 	ret
135bc                 | 
135bc                 | ' 
135bc                 | ' '-------------------- next
135bc                 | ' 
135bc                 | ' sub do_next()
135bc                 | _do_next
135bc     04 4A 05 F6 | 	mov	COUNT_, #4
135c0     A8 00 A0 FD | 	call	#pushregs_
135c4     50 82 BF FD | 	call	#_pop
135c8     FD 1E 02 F6 | 	mov	local01, result1
135cc     FE 20 02 F6 | 	mov	local02, result2
135d0     FF 22 02 F6 | 	mov	local03, result3
135d4                 | ' t1=pop() :varnum=t1.result.uresult
135d4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
135d4     50 00 00 FF 
135d8     08 E5 05 F1 | 	add	objptr, ##41224
135dc     F2 14 02 FB | 	rdlong	arg02, objptr
135e0     0A 13 02 F6 | 	mov	arg01, arg02
135e4     02 12 66 F0 | 	shl	arg01, #2
135e8     0A 13 02 F1 | 	add	arg01, arg02
135ec     02 12 66 F0 | 	shl	arg01, #2
135f0     06 00 00 FF 
135f4     70 E4 85 F1 | 	sub	objptr, ##3184
135f8     F2 12 02 F1 | 	add	arg01, objptr
135fc     08 12 06 F1 | 	add	arg01, #8
13600     09 15 02 FB | 	rdlong	arg02, arg01
13604     0F 15 0A F2 | 	cmp	arg02, local01 wz
13608     4A 00 00 FF 
1360c     98 E4 85 F1 | 	sub	objptr, ##38040
13610     10 00 90 AD |  if_e	jmp	#LR__1660
13614     25 12 06 F6 | 	mov	arg01, #37
13618     00 14 06 F6 | 	mov	arg02, #0
1361c     E4 A9 B0 FD | 	call	#_printerror
13620     54 03 90 FD | 	jmp	#LR__1667
13624                 | LR__1660
13624                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
13624     0F 15 02 F6 | 	mov	arg02, local01
13628     04 14 66 F0 | 	shl	arg02, #4
1362c     14 00 00 FF 
13630     F8 E5 05 F1 | 	add	objptr, ##10744
13634     F2 14 02 F1 | 	add	arg02, objptr
13638     0C 14 06 F1 | 	add	arg02, #12
1363c     0A 15 02 FB | 	rdlong	arg02, arg02
13640     1E 14 0E F2 | 	cmp	arg02, #30 wz
13644     14 00 00 FF 
13648     F8 E5 85 F1 | 	sub	objptr, ##10744
1364c     54 00 90 5D |  if_ne	jmp	#LR__1661
13650     0F 15 02 F6 | 	mov	arg02, local01
13654     04 14 66 F0 | 	shl	arg02, #4
13658     14 00 00 FF 
1365c     F8 E5 05 F1 | 	add	objptr, ##10744
13660     F2 14 02 F1 | 	add	arg02, objptr
13664     0C 14 06 F1 | 	add	arg02, #12
13668     0A 39 68 FC | 	wrlong	#28, arg02
1366c     0F 25 02 F6 | 	mov	local04, local01
13670     04 24 66 F0 | 	shl	local04, #4
13674     F2 24 02 F1 | 	add	local04, objptr
13678     0F 15 02 F6 | 	mov	arg02, local01
1367c     04 14 66 F0 | 	shl	arg02, #4
13680     F2 14 02 F1 | 	add	arg02, objptr
13684     04 14 06 F1 | 	add	arg02, #4
13688     0A 13 02 FB | 	rdlong	arg01, arg02
1368c     14 00 00 FF 
13690     F8 E5 85 F1 | 	sub	objptr, ##10744
13694     01 14 06 F6 | 	mov	arg02, #1
13698     AC 11 B1 FD | 	call	#__system___float_tointeger
1369c     04 24 06 F1 | 	add	local04, #4
136a0     12 FB 61 FC | 	wrlong	result1, local04
136a4                 | LR__1661
136a4     50 00 00 FF 
136a8     08 E5 05 F1 | 	add	objptr, ##41224
136ac     F2 24 02 FB | 	rdlong	local04, objptr
136b0     12 15 02 F6 | 	mov	arg02, local04
136b4     02 14 66 F0 | 	shl	arg02, #2
136b8     12 15 02 F1 | 	add	arg02, local04
136bc     02 14 66 F0 | 	shl	arg02, #2
136c0     06 00 00 FF 
136c4     70 E4 85 F1 | 	sub	objptr, ##3184
136c8     F2 14 02 F1 | 	add	arg02, objptr
136cc     0C 14 06 F1 | 	add	arg02, #12
136d0     0A FF 01 FB | 	rdlong	result3, arg02
136d4     0F 25 02 F6 | 	mov	local04, local01
136d8     04 24 66 F0 | 	shl	local04, #4
136dc     35 00 00 FF 
136e0     A0 E4 85 F1 | 	sub	objptr, ##27296
136e4     F2 24 02 F1 | 	add	local04, objptr
136e8     0F 15 02 F6 | 	mov	arg02, local01
136ec     04 14 66 F0 | 	shl	arg02, #4
136f0     F2 14 02 F1 | 	add	arg02, objptr
136f4     04 14 06 F1 | 	add	arg02, #4
136f8     0A 13 02 FB | 	rdlong	arg01, arg02
136fc     FF 12 02 F1 | 	add	arg01, result3
13700     04 24 06 F1 | 	add	local04, #4
13704     12 13 62 FC | 	wrlong	arg01, local04
13708                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
13708                 | ' if fortable(fortop).stepval>=0 then
13708     3B 00 00 FF 
1370c     10 E5 05 F1 | 	add	objptr, ##30480
13710     F2 24 02 FB | 	rdlong	local04, objptr
13714     12 13 02 F6 | 	mov	arg01, local04
13718     02 12 66 F0 | 	shl	arg01, #2
1371c     12 13 02 F1 | 	add	arg01, local04
13720     02 12 66 F0 | 	shl	arg01, #2
13724     06 00 00 FF 
13728     70 E4 85 F1 | 	sub	objptr, ##3184
1372c     F2 12 02 F1 | 	add	arg01, objptr
13730     0C 12 06 F1 | 	add	arg01, #12
13734     09 13 02 FB | 	rdlong	arg01, arg01
13738     00 12 56 F2 | 	cmps	arg01, #0 wc
1373c     4A 00 00 FF 
13740     98 E4 85 F1 | 	sub	objptr, ##38040
13744     78 00 90 CD |  if_b	jmp	#LR__1662
13748                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
13748     04 1E 66 F0 | 	shl	local01, #4
1374c     14 00 00 FF 
13750     F8 E5 05 F1 | 	add	objptr, ##10744
13754     F2 1E 02 F1 | 	add	local01, objptr
13758     3B 00 00 FF 
1375c     10 E5 05 F1 | 	add	objptr, ##30480
13760     F2 12 02 FB | 	rdlong	arg01, objptr
13764     09 25 02 F6 | 	mov	local04, arg01
13768     02 24 66 F0 | 	shl	local04, #2
1376c     09 25 02 F1 | 	add	local04, arg01
13770     02 24 66 F0 | 	shl	local04, #2
13774     06 00 00 FF 
13778     70 E4 85 F1 | 	sub	objptr, ##3184
1377c     F2 24 02 F1 | 	add	local04, objptr
13780     04 1E 06 F1 | 	add	local01, #4
13784     0F 1F 02 FB | 	rdlong	local01, local01
13788     10 24 06 F1 | 	add	local04, #16
1378c     12 25 02 FB | 	rdlong	local04, local04
13790     12 1F 5A F2 | 	cmps	local01, local04 wcz
13794     4A 00 00 FF 
13798     98 E4 85 F1 | 	sub	objptr, ##38040
1379c     9C 00 90 ED |  if_be	jmp	#LR__1664
137a0     50 00 00 FF 
137a4     08 E5 05 F1 | 	add	objptr, ##41224
137a8     F2 24 02 FB | 	rdlong	local04, objptr
137ac     01 24 86 F1 | 	sub	local04, #1
137b0     F2 24 62 FC | 	wrlong	local04, objptr
137b4     50 00 00 FF 
137b8     08 E5 85 F1 | 	sub	objptr, ##41224
137bc     B8 01 90 FD | 	jmp	#LR__1667
137c0                 | LR__1662
137c0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
137c0     0F 25 02 F6 | 	mov	local04, local01
137c4     04 24 66 F0 | 	shl	local04, #4
137c8     14 00 00 FF 
137cc     F8 E5 05 F1 | 	add	objptr, ##10744
137d0     F2 24 02 F1 | 	add	local04, objptr
137d4     3B 00 00 FF 
137d8     10 E5 05 F1 | 	add	objptr, ##30480
137dc     F2 1E 02 FB | 	rdlong	local01, objptr
137e0     0F 13 02 F6 | 	mov	arg01, local01
137e4     02 12 66 F0 | 	shl	arg01, #2
137e8     0F 13 02 F1 | 	add	arg01, local01
137ec     02 12 66 F0 | 	shl	arg01, #2
137f0     06 00 00 FF 
137f4     70 E4 85 F1 | 	sub	objptr, ##3184
137f8     F2 12 02 F1 | 	add	arg01, objptr
137fc     04 24 06 F1 | 	add	local04, #4
13800     12 25 02 FB | 	rdlong	local04, local04
13804     10 12 06 F1 | 	add	arg01, #16
13808     09 13 02 FB | 	rdlong	arg01, arg01
1380c     09 25 52 F2 | 	cmps	local04, arg01 wc
13810     4A 00 00 FF 
13814     98 E4 85 F1 | 	sub	objptr, ##38040
13818     20 00 90 3D |  if_ae	jmp	#LR__1663
1381c     50 00 00 FF 
13820     08 E5 05 F1 | 	add	objptr, ##41224
13824     F2 24 02 FB | 	rdlong	local04, objptr
13828     01 24 86 F1 | 	sub	local04, #1
1382c     F2 24 62 FC | 	wrlong	local04, objptr
13830     50 00 00 FF 
13834     08 E5 85 F1 | 	sub	objptr, ##41224
13838     3C 01 90 FD | 	jmp	#LR__1667
1383c                 | LR__1663
1383c                 | LR__1664
1383c                 | ' ' if not returned, goto pointer 
1383c                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
1383c     50 00 00 FF 
13840     EC E4 05 F1 | 	add	objptr, ##41196
13844     F2 24 02 FB | 	rdlong	local04, objptr
13848     50 00 00 FF 
1384c     EC E4 85 F1 | 	sub	objptr, ##41196
13850     01 24 16 F2 | 	cmp	local04, #1 wc
13854     DC 00 90 CD |  if_b	jmp	#LR__1665
13858     50 00 00 FF 
1385c     08 E5 05 F1 | 	add	objptr, ##41224
13860     F2 24 02 FB | 	rdlong	local04, objptr
13864     12 1F 02 F6 | 	mov	local01, local04
13868     02 1E 66 F0 | 	shl	local01, #2
1386c     12 1F 02 F1 | 	add	local01, local04
13870     02 1E 66 F0 | 	shl	local01, #2
13874     06 00 00 FF 
13878     70 E4 85 F1 | 	sub	objptr, ##3184
1387c     F2 1E 02 F1 | 	add	local01, objptr
13880     06 00 00 FF 
13884     20 E4 05 F1 | 	add	objptr, ##3104
13888     F2 24 02 FB | 	rdlong	local04, objptr
1388c     50 00 00 FF 
13890     B8 E4 85 F1 | 	sub	objptr, ##41144
13894     0F 1F 02 FB | 	rdlong	local01, local01
13898     0F 25 0A F2 | 	cmp	local04, local01 wz
1389c     94 00 90 AD |  if_e	jmp	#LR__1665
138a0     50 00 00 FF 
138a4     08 E5 05 F1 | 	add	objptr, ##41224
138a8     F2 24 02 FB | 	rdlong	local04, objptr
138ac     12 1F 02 F6 | 	mov	local01, local04
138b0     02 1E 66 F0 | 	shl	local01, #2
138b4     12 1F 02 F1 | 	add	local01, local04
138b8     02 1E 66 F0 | 	shl	local01, #2
138bc     06 00 00 FF 
138c0     70 E4 85 F1 | 	sub	objptr, ##3184
138c4     F2 1E 02 F1 | 	add	local01, objptr
138c8     0F 1F 02 FB | 	rdlong	local01, local01
138cc     06 00 00 FF 
138d0     20 E4 05 F1 | 	add	objptr, ##3104
138d4     F2 1E 62 FC | 	wrlong	local01, objptr
138d8     50 E4 05 F1 | 	add	objptr, #80
138dc     F2 24 02 FB | 	rdlong	local04, objptr
138e0     12 1F 02 F6 | 	mov	local01, local04
138e4     02 1E 66 F0 | 	shl	local01, #2
138e8     12 1F 02 F1 | 	add	local01, local04
138ec     02 1E 66 F0 | 	shl	local01, #2
138f0     06 00 00 FF 
138f4     70 E4 85 F1 | 	sub	objptr, ##3184
138f8     F2 1E 02 F1 | 	add	local01, objptr
138fc     04 1E 06 F1 | 	add	local01, #4
13900     0F 1F 02 FB | 	rdlong	local01, local01
13904     06 00 00 FF 
13908     24 E4 05 F1 | 	add	objptr, ##3108
1390c     F2 1E 62 FC | 	wrlong	local01, objptr
13910     06 00 00 FF 
13914     40 E4 85 F1 | 	sub	objptr, ##3136
13918     F2 24 02 FB | 	rdlong	local04, objptr
1391c     01 24 86 F1 | 	sub	local04, #1
13920     04 E4 05 F1 | 	add	objptr, #4
13924     F2 24 62 FC | 	wrlong	local04, objptr
13928     4A 00 00 FF 
1392c     80 E4 85 F1 | 	sub	objptr, ##38016
13930     44 00 90 FD | 	jmp	#LR__1666
13934                 | LR__1665
13934     50 00 00 FF 
13938     08 E5 05 F1 | 	add	objptr, ##41224
1393c     F2 24 02 FB | 	rdlong	local04, objptr
13940     12 1F 02 F6 | 	mov	local01, local04
13944     02 1E 66 F0 | 	shl	local01, #2
13948     12 1F 02 F1 | 	add	local01, local04
1394c     02 1E 66 F0 | 	shl	local01, #2
13950     06 00 00 FF 
13954     70 E4 85 F1 | 	sub	objptr, ##3184
13958     F2 1E 02 F1 | 	add	local01, objptr
1395c     04 1E 06 F1 | 	add	local01, #4
13960     0F 1F 02 FB | 	rdlong	local01, local01
13964     01 1E 86 F1 | 	sub	local01, #1
13968     18 E4 85 F1 | 	sub	objptr, #24
1396c     F2 1E 62 FC | 	wrlong	local01, objptr
13970     4A 00 00 FF 
13974     80 E4 85 F1 | 	sub	objptr, ##38016
13978                 | LR__1666
13978                 | LR__1667
13978     A7 F0 03 F6 | 	mov	ptra, fp
1397c     B2 00 A0 FD | 	call	#popregs_
13980                 | _do_next_ret
13980     2D 00 64 FD | 	ret
13984                 | 
13984                 | ' 
13984                 | ' '-------------------- no command (print "Unknown command")
13984                 | ' 
13984                 | ' sub do_no_command
13984                 | _do_no_command
13984     17 12 06 F6 | 	mov	arg01, #23
13988     00 14 06 F6 | 	mov	arg02, #0
1398c     74 A6 B0 FD | 	call	#_printerror
13990                 | _do_no_command_ret
13990     2D 00 64 FD | 	ret
13994                 | 
13994                 | ' 
13994                 | ' '-------------------- nothing
13994                 | ' 
13994                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
13994                 | _do_nothing
13994                 | _do_nothing_ret
13994     2D 00 64 FD | 	ret
13998                 | 
13998                 | ' 
13998                 | ' '-------------------- open
13998                 | ' 
13998                 | ' sub do_open
13998                 | _do_open
13998     02 4A 05 F6 | 	mov	COUNT_, #2
1399c     A8 00 A0 FD | 	call	#pushregs_
139a0     20 F0 07 F1 | 	add	ptra, #32
139a4     4A 00 00 FF 
139a8     80 E4 05 F1 | 	add	objptr, ##38016
139ac     F2 16 02 FB | 	rdlong	arg03, objptr
139b0     0B 15 02 F6 | 	mov	arg02, arg03
139b4     01 14 66 F0 | 	shl	arg02, #1
139b8     0B 15 02 F1 | 	add	arg02, arg03
139bc     02 14 66 F0 | 	shl	arg02, #2
139c0     03 00 00 FF 
139c4     04 E4 85 F1 | 	sub	objptr, ##1540
139c8     F2 14 02 F1 | 	add	arg02, objptr
139cc     0A 17 02 FB | 	rdlong	arg03, arg02
139d0     10 4E 05 F1 | 	add	fp, #16
139d4     A7 16 62 FC | 	wrlong	arg03, fp
139d8     10 4E 85 F1 | 	sub	fp, #16
139dc     47 00 00 FF 
139e0     7C E4 85 F1 | 	sub	objptr, ##36476
139e4     30 7E BF FD | 	call	#_pop
139e8     FF 16 02 F6 | 	mov	arg03, result3
139ec     A7 FA 61 FC | 	wrlong	result1, fp
139f0     04 4E 05 F1 | 	add	fp, #4
139f4     A7 FC 61 FC | 	wrlong	result2, fp
139f8     04 4E 05 F1 | 	add	fp, #4
139fc     A7 16 62 FC | 	wrlong	arg03, fp
13a00                 | ' 
13a00                 | ' numpar=compiledline(lineptr_e).result.uresult
13a00                 | ' 
13a00                 | ' t1=pop()
13a00                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13a00     08 4E 85 F1 | 	sub	fp, #8
13a04     2B 16 0E F2 | 	cmp	arg03, #43 wz
13a08     18 00 90 5D |  if_ne	jmp	#LR__1670
13a0c     A7 12 02 FB | 	rdlong	arg01, fp
13a10     7C 7F BF FD | 	call	#_convertstring
13a14     A7 FA 61 FC | 	wrlong	result1, fp
13a18     08 4E 05 F1 | 	add	fp, #8
13a1c     A7 3E 68 FC | 	wrlong	#31, fp
13a20     08 4E 85 F1 | 	sub	fp, #8
13a24                 | LR__1670
13a24                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
13a24     08 4E 05 F1 | 	add	fp, #8
13a28     A7 16 02 FB | 	rdlong	arg03, fp
13a2c     08 4E 85 F1 | 	sub	fp, #8
13a30     1F 16 0E F2 | 	cmp	arg03, #31 wz
13a34     44 00 90 AD |  if_e	jmp	#LR__1671
13a38     00 12 06 F6 | 	mov	arg01, #0
13a3c     B0 38 B1 FD | 	call	#__system___getiolock_0570
13a40     FD 12 02 F6 | 	mov	arg01, result1
13a44     7C DB B0 FD | 	call	#__system___lockmem
13a48     8D 01 00 FF 
13a4c     82 14 06 F6 | 	mov	arg02, ##@LR__5590
13a50     00 12 06 F6 | 	mov	arg01, #0
13a54     00 16 06 F6 | 	mov	arg03, #0
13a58     5C E8 B0 FD | 	call	#__system___basic_print_string
13a5c     00 12 06 F6 | 	mov	arg01, #0
13a60     0A 14 06 F6 | 	mov	arg02, #10
13a64     00 16 06 F6 | 	mov	arg03, #0
13a68     F4 E7 B0 FD | 	call	#__system___basic_print_char
13a6c     00 12 06 F6 | 	mov	arg01, #0
13a70     7C 38 B1 FD | 	call	#__system___getiolock_0570
13a74     FD 00 68 FC | 	wrlong	#0, result1
13a78     28 02 90 FD | 	jmp	#LR__1682
13a7c                 | LR__1671
13a7c     A7 16 02 FB | 	rdlong	arg03, fp
13a80     0C 4E 05 F1 | 	add	fp, #12
13a84     A7 16 62 FC | 	wrlong	arg03, fp
13a88     0C 4E 85 F1 | 	sub	fp, #12
13a8c     88 7D BF FD | 	call	#_pop
13a90     FF 16 02 F6 | 	mov	arg03, result3
13a94     A7 FA 61 FC | 	wrlong	result1, fp
13a98     04 4E 05 F1 | 	add	fp, #4
13a9c     A7 FC 61 FC | 	wrlong	result2, fp
13aa0     04 4E 05 F1 | 	add	fp, #4
13aa4     A7 16 62 FC | 	wrlong	arg03, fp
13aa8                 | ' filename=t1.result.sresult
13aa8                 | ' t1=pop()
13aa8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13aa8     08 4E 85 F1 | 	sub	fp, #8
13aac     2B 16 0E F2 | 	cmp	arg03, #43 wz
13ab0     18 00 90 5D |  if_ne	jmp	#LR__1672
13ab4     A7 12 02 FB | 	rdlong	arg01, fp
13ab8     D4 7E BF FD | 	call	#_convertstring
13abc     A7 FA 61 FC | 	wrlong	result1, fp
13ac0     08 4E 05 F1 | 	add	fp, #8
13ac4     A7 3E 68 FC | 	wrlong	#31, fp
13ac8     08 4E 85 F1 | 	sub	fp, #8
13acc                 | LR__1672
13acc     14 4E 05 F1 | 	add	fp, #20
13ad0     A7 00 68 FC | 	wrlong	#0, fp
13ad4                 | ' mode=0
13ad4                 | ' if t1.result_type=result_string then
13ad4     0C 4E 85 F1 | 	sub	fp, #12
13ad8     A7 14 02 FB | 	rdlong	arg02, fp
13adc     08 4E 85 F1 | 	sub	fp, #8
13ae0     1F 14 0E F2 | 	cmp	arg02, #31 wz
13ae4     64 00 90 5D |  if_ne	jmp	#LR__1673
13ae8                 | '   if t1.result.sresult="read" then mode=1
13ae8     A7 12 02 FB | 	rdlong	arg01, fp
13aec     8D 01 00 FF 
13af0     94 14 06 F6 | 	mov	arg02, ##@LR__5591
13af4     F4 DA B0 FD | 	call	#__system___string_cmp
13af8     00 FA 0D F2 | 	cmp	result1, #0 wz
13afc     14 4E 05 A1 |  if_e	add	fp, #20
13b00     A7 02 68 AC |  if_e	wrlong	#1, fp
13b04     14 4E 85 A1 |  if_e	sub	fp, #20
13b08                 | '   if t1.result.sresult="write" then mode=2
13b08     A7 12 02 FB | 	rdlong	arg01, fp
13b0c     8D 01 00 FF 
13b10     99 14 06 F6 | 	mov	arg02, ##@LR__5592
13b14     D4 DA B0 FD | 	call	#__system___string_cmp
13b18     00 FA 0D F2 | 	cmp	result1, #0 wz
13b1c     14 4E 05 A1 |  if_e	add	fp, #20
13b20     A7 04 68 AC |  if_e	wrlong	#2, fp
13b24     14 4E 85 A1 |  if_e	sub	fp, #20
13b28                 | '   if t1.result.sresult="append" then mode=4
13b28     A7 12 02 FB | 	rdlong	arg01, fp
13b2c     8D 01 00 FF 
13b30     9F 14 06 F6 | 	mov	arg02, ##@LR__5593
13b34     B4 DA B0 FD | 	call	#__system___string_cmp
13b38     00 FA 0D F2 | 	cmp	result1, #0 wz
13b3c     14 4E 05 A1 |  if_e	add	fp, #20
13b40     A7 08 68 AC |  if_e	wrlong	#4, fp
13b44     14 4E 85 A1 |  if_e	sub	fp, #20
13b48     14 00 90 FD | 	jmp	#LR__1674
13b4c                 | LR__1673
13b4c     A7 12 02 F6 | 	mov	arg01, fp
13b50     A8 7E BF FD | 	call	#_converttoint
13b54     14 4E 05 F1 | 	add	fp, #20
13b58     A7 FA 61 FC | 	wrlong	result1, fp
13b5c     14 4E 85 F1 | 	sub	fp, #20
13b60                 | LR__1674
13b60     B4 7C BF FD | 	call	#_pop
13b64     FF 16 02 F6 | 	mov	arg03, result3
13b68     A7 FA 61 FC | 	wrlong	result1, fp
13b6c     04 4E 05 F1 | 	add	fp, #4
13b70     A7 FC 61 FC | 	wrlong	result2, fp
13b74     04 4E 05 F1 | 	add	fp, #4
13b78     A7 16 62 FC | 	wrlong	arg03, fp
13b7c                 | ' t1=pop()
13b7c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
13b7c     08 4E 85 F1 | 	sub	fp, #8
13b80     2C 16 0E F2 | 	cmp	arg03, #44 wz
13b84     44 00 90 AD |  if_e	jmp	#LR__1675
13b88     00 12 06 F6 | 	mov	arg01, #0
13b8c     60 37 B1 FD | 	call	#__system___getiolock_0570
13b90     FD 12 02 F6 | 	mov	arg01, result1
13b94     2C DA B0 FD | 	call	#__system___lockmem
13b98     8D 01 00 FF 
13b9c     A6 14 06 F6 | 	mov	arg02, ##@LR__5594
13ba0     00 12 06 F6 | 	mov	arg01, #0
13ba4     00 16 06 F6 | 	mov	arg03, #0
13ba8     0C E7 B0 FD | 	call	#__system___basic_print_string
13bac     00 12 06 F6 | 	mov	arg01, #0
13bb0     0A 14 06 F6 | 	mov	arg02, #10
13bb4     00 16 06 F6 | 	mov	arg03, #0
13bb8     A4 E6 B0 FD | 	call	#__system___basic_print_char
13bbc     00 12 06 F6 | 	mov	arg01, #0
13bc0     2C 37 B1 FD | 	call	#__system___getiolock_0570
13bc4     FD 00 68 FC | 	wrlong	#0, result1
13bc8     D8 00 90 FD | 	jmp	#LR__1682
13bcc                 | LR__1675
13bcc     A7 1E 02 FB | 	rdlong	local01, fp
13bd0     18 4E 05 F1 | 	add	fp, #24
13bd4     A7 1E 62 FC | 	wrlong	local01, fp
13bd8                 | ' channel  = t1.result.iresult
13bd8                 | ' select case  mode
13bd8     04 4E 85 F1 | 	sub	fp, #4
13bdc     A7 20 02 FB | 	rdlong	local02, fp
13be0     14 4E 85 F1 | 	sub	fp, #20
13be4     01 20 86 F1 | 	sub	local02, #1
13be8     04 20 26 F3 | 	fle	local02, #4
13bec     30 20 62 FD | 	jmprel	local02
13bf0                 | LR__1676
13bf0     10 00 90 FD | 	jmp	#LR__1677
13bf4     2C 00 90 FD | 	jmp	#LR__1678
13bf8     68 00 90 FD | 	jmp	#LR__1680
13bfc     44 00 90 FD | 	jmp	#LR__1679
13c00     60 00 90 FD | 	jmp	#LR__1680
13c04                 | LR__1677
13c04     18 4E 05 F1 | 	add	fp, #24
13c08     A7 12 02 FB | 	rdlong	arg01, fp
13c0c     0C 4E 85 F1 | 	sub	fp, #12
13c10     A7 14 02 FB | 	rdlong	arg02, fp
13c14     0C 4E 85 F1 | 	sub	fp, #12
13c18     00 16 06 F6 | 	mov	arg03, #0
13c1c     A8 E5 B0 FD | 	call	#__system___basic_open_string
13c20     80 00 90 FD | 	jmp	#LR__1681
13c24                 | LR__1678
13c24     18 4E 05 F1 | 	add	fp, #24
13c28     A7 12 02 FB | 	rdlong	arg01, fp
13c2c     0C 4E 85 F1 | 	sub	fp, #12
13c30     A7 14 02 FB | 	rdlong	arg02, fp
13c34     0C 4E 85 F1 | 	sub	fp, #12
13c38     0D 16 06 F6 | 	mov	arg03, #13
13c3c     88 E5 B0 FD | 	call	#__system___basic_open_string
13c40     60 00 90 FD | 	jmp	#LR__1681
13c44                 | LR__1679
13c44     18 4E 05 F1 | 	add	fp, #24
13c48     A7 12 02 FB | 	rdlong	arg01, fp
13c4c     0C 4E 85 F1 | 	sub	fp, #12
13c50     A7 14 02 FB | 	rdlong	arg02, fp
13c54     0C 4E 85 F1 | 	sub	fp, #12
13c58     25 16 06 F6 | 	mov	arg03, #37
13c5c     68 E5 B0 FD | 	call	#__system___basic_open_string
13c60     40 00 90 FD | 	jmp	#LR__1681
13c64                 | LR__1680
13c64     00 12 06 F6 | 	mov	arg01, #0
13c68     84 36 B1 FD | 	call	#__system___getiolock_0570
13c6c     FD 12 02 F6 | 	mov	arg01, result1
13c70     50 D9 B0 FD | 	call	#__system___lockmem
13c74     8D 01 00 FF 
13c78     B8 14 06 F6 | 	mov	arg02, ##@LR__5595
13c7c     00 12 06 F6 | 	mov	arg01, #0
13c80     00 16 06 F6 | 	mov	arg03, #0
13c84     30 E6 B0 FD | 	call	#__system___basic_print_string
13c88     00 12 06 F6 | 	mov	arg01, #0
13c8c     0A 14 06 F6 | 	mov	arg02, #10
13c90     00 16 06 F6 | 	mov	arg03, #0
13c94     C8 E5 B0 FD | 	call	#__system___basic_print_char
13c98     00 12 06 F6 | 	mov	arg01, #0
13c9c     50 36 B1 FD | 	call	#__system___getiolock_0570
13ca0     FD 00 68 FC | 	wrlong	#0, result1
13ca4                 | LR__1681
13ca4                 | LR__1682
13ca4     A7 F0 03 F6 | 	mov	ptra, fp
13ca8     B2 00 A0 FD | 	call	#popregs_
13cac                 | _do_open_ret
13cac     2D 00 64 FD | 	ret
13cb0                 | 
13cb0                 | ' 
13cb0                 | ' '-------------------- paper
13cb0                 | ' 
13cb0                 | ' sub do_paper
13cb0                 | _do_paper
13cb0     03 4A 05 F6 | 	mov	COUNT_, #3
13cb4     A8 00 A0 FD | 	call	#pushregs_
13cb8     5C 7B BF FD | 	call	#_pop
13cbc     FD 1E 02 F6 | 	mov	local01, result1
13cc0     FE 20 02 F6 | 	mov	local02, result2
13cc4     FF 22 02 F6 | 	mov	local03, result3
13cc8                 | ' t1=pop() 
13cc8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13cc8     1E 22 0E F2 | 	cmp	local03, #30 wz
13ccc     10 00 90 5D |  if_ne	jmp	#LR__1690
13cd0     0F 13 02 F6 | 	mov	arg01, local01
13cd4     00 14 06 F6 | 	mov	arg02, #0
13cd8     6C 0B B1 FD | 	call	#__system___float_tointeger
13cdc     FD 1E 02 F6 | 	mov	local01, result1
13ce0                 | LR__1690
13ce0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13ce0     1F 22 0E F2 | 	cmp	local03, #31 wz
13ce4     18 00 90 5D |  if_ne	jmp	#LR__1691
13ce8     0F 13 02 F6 | 	mov	arg01, local01
13cec     9C 0E B1 FD | 	call	#__system____builtin_atof
13cf0     FD 12 02 F6 | 	mov	arg01, result1
13cf4     00 14 06 F6 | 	mov	arg02, #0
13cf8     4C 0B B1 FD | 	call	#__system___float_tointeger
13cfc     FD 1E 02 F6 | 	mov	local01, result1
13d00                 | LR__1691
13d00     37 00 00 FF 
13d04     38 E4 05 F1 | 	add	objptr, ##28216
13d08     F2 1E 62 FC | 	wrlong	local01, objptr
13d0c     04 E4 05 F1 | 	add	objptr, #4
13d10     F2 12 02 FB | 	rdlong	arg01, objptr
13d14                 | ' 
13d14                 | ' write_color:=ff
13d14     36 00 00 FF 
13d18     FB E5 85 F1 | 	sub	objptr, ##28155
13d1c     F2 12 62 FC | 	wrlong	arg01, objptr
13d20                 | ' write_background:=bb
13d20     04 E4 05 F1 | 	add	objptr, #4
13d24     F2 1E 62 FC | 	wrlong	local01, objptr
13d28     45 E4 85 F1 | 	sub	objptr, #69
13d2c     A7 F0 03 F6 | 	mov	ptra, fp
13d30     B2 00 A0 FD | 	call	#popregs_
13d34                 | _do_paper_ret
13d34     2D 00 64 FD | 	ret
13d38                 | 
13d38                 | ' 
13d38                 | ' '-------------------- peek
13d38                 | ' 
13d38                 | ' sub do_peek
13d38                 | _do_peek
13d38     00 4A 05 F6 | 	mov	COUNT_, #0
13d3c     A8 00 A0 FD | 	call	#pushregs_
13d40     14 F0 07 F1 | 	add	ptra, #20
13d44     D0 7A BF FD | 	call	#_pop
13d48     A7 FA 61 FC | 	wrlong	result1, fp
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 FC 61 FC | 	wrlong	result2, fp
13d54     04 4E 05 F1 | 	add	fp, #4
13d58     A7 FE 61 FC | 	wrlong	result3, fp
13d5c     08 4E 85 F1 | 	sub	fp, #8
13d60     A7 12 02 F6 | 	mov	arg01, fp
13d64     94 7C BF FD | 	call	#_converttoint
13d68     0C 4E 05 F1 | 	add	fp, #12
13d6c     A7 FA 61 FC | 	wrlong	result1, fp
13d70                 | ' 
13d70                 | ' t1=pop()
13d70                 | ' a=converttoint(t1)
13d70                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
13d70     0C 4E 85 F1 | 	sub	fp, #12
13d74     00 04 00 FF 
13d78     00 FA 15 F2 | 	cmp	result1, ##524288 wc
13d7c     1C 00 90 3D |  if_ae	jmp	#LR__1700
13d80     0C 4E 05 F1 | 	add	fp, #12
13d84     A7 12 02 FB | 	rdlong	arg01, fp
13d88     09 FB C1 FA | 	rdbyte	result1, arg01
13d8c     04 4E 05 F1 | 	add	fp, #4
13d90     A7 FA 61 FC | 	wrlong	result1, fp
13d94     10 4E 85 F1 | 	sub	fp, #16
13d98     20 00 90 FD | 	jmp	#LR__1701
13d9c                 | LR__1700
13d9c     0C 4E 05 F1 | 	add	fp, #12
13da0     A7 12 02 FB | 	rdlong	arg01, fp
13da4     0C 4E 85 F1 | 	sub	fp, #12
13da8     BC A4 B0 FD | 	call	#_pspeek
13dac     FD FA E1 F8 | 	getbyte	result1, result1, #0
13db0     10 4E 05 F1 | 	add	fp, #16
13db4     A7 FA 61 FC | 	wrlong	result1, fp
13db8     10 4E 85 F1 | 	sub	fp, #16
13dbc                 | LR__1701
13dbc     08 4E 05 F1 | 	add	fp, #8
13dc0     A7 3A 68 FC | 	wrlong	#29, fp
13dc4     08 4E 05 F1 | 	add	fp, #8
13dc8     A7 12 02 FB | 	rdlong	arg01, fp
13dcc     10 4E 85 F1 | 	sub	fp, #16
13dd0     A7 12 62 FC | 	wrlong	arg01, fp
13dd4     A7 12 02 F6 | 	mov	arg01, fp
13dd8     D4 7A BF FD | 	call	#_push
13ddc     A7 F0 03 F6 | 	mov	ptra, fp
13de0     B2 00 A0 FD | 	call	#popregs_
13de4                 | _do_peek_ret
13de4     2D 00 64 FD | 	ret
13de8                 | 
13de8                 | ' 
13de8                 | ' '-------------------- pinfloat
13de8                 | ' 
13de8                 | ' sub do_pinfloat
13de8                 | _do_pinfloat
13de8     00 4A 05 F6 | 	mov	COUNT_, #0
13dec     A8 00 A0 FD | 	call	#pushregs_
13df0     0C F0 07 F1 | 	add	ptra, #12
13df4     20 7A BF FD | 	call	#_pop
13df8     A7 FA 61 FC | 	wrlong	result1, fp
13dfc     04 4E 05 F1 | 	add	fp, #4
13e00     A7 FC 61 FC | 	wrlong	result2, fp
13e04     04 4E 05 F1 | 	add	fp, #4
13e08     A7 FE 61 FC | 	wrlong	result3, fp
13e0c     08 4E 85 F1 | 	sub	fp, #8
13e10     A7 12 02 F6 | 	mov	arg01, fp
13e14     E4 7B BF FD | 	call	#_converttoint
13e18     50 FA 61 FD | 	fltl	result1
13e1c     A7 F0 03 F6 | 	mov	ptra, fp
13e20     B2 00 A0 FD | 	call	#popregs_
13e24                 | _do_pinfloat_ret
13e24     2D 00 64 FD | 	ret
13e28                 | 
13e28                 | ' 
13e28                 | ' '-------------------- pinhi
13e28                 | ' 
13e28                 | ' sub do_pinhi
13e28                 | _do_pinhi
13e28     00 4A 05 F6 | 	mov	COUNT_, #0
13e2c     A8 00 A0 FD | 	call	#pushregs_
13e30     0C F0 07 F1 | 	add	ptra, #12
13e34     E0 79 BF FD | 	call	#_pop
13e38     A7 FA 61 FC | 	wrlong	result1, fp
13e3c     04 4E 05 F1 | 	add	fp, #4
13e40     A7 FC 61 FC | 	wrlong	result2, fp
13e44     04 4E 05 F1 | 	add	fp, #4
13e48     A7 FE 61 FC | 	wrlong	result3, fp
13e4c     08 4E 85 F1 | 	sub	fp, #8
13e50     A7 12 02 F6 | 	mov	arg01, fp
13e54     A4 7B BF FD | 	call	#_converttoint
13e58     59 FA 61 FD | 	drvh	result1
13e5c     A7 F0 03 F6 | 	mov	ptra, fp
13e60     B2 00 A0 FD | 	call	#popregs_
13e64                 | _do_pinhi_ret
13e64     2D 00 64 FD | 	ret
13e68                 | 
13e68                 | ' 
13e68                 | ' '-------------------- pinlo
13e68                 | ' 
13e68                 | ' sub do_pinlo
13e68                 | _do_pinlo
13e68     00 4A 05 F6 | 	mov	COUNT_, #0
13e6c     A8 00 A0 FD | 	call	#pushregs_
13e70     0C F0 07 F1 | 	add	ptra, #12
13e74     A0 79 BF FD | 	call	#_pop
13e78     A7 FA 61 FC | 	wrlong	result1, fp
13e7c     04 4E 05 F1 | 	add	fp, #4
13e80     A7 FC 61 FC | 	wrlong	result2, fp
13e84     04 4E 05 F1 | 	add	fp, #4
13e88     A7 FE 61 FC | 	wrlong	result3, fp
13e8c     08 4E 85 F1 | 	sub	fp, #8
13e90     A7 12 02 F6 | 	mov	arg01, fp
13e94     64 7B BF FD | 	call	#_converttoint
13e98     58 FA 61 FD | 	drvl	result1
13e9c     A7 F0 03 F6 | 	mov	ptra, fp
13ea0     B2 00 A0 FD | 	call	#popregs_
13ea4                 | _do_pinlo_ret
13ea4     2D 00 64 FD | 	ret
13ea8                 | 
13ea8                 | ' 
13ea8                 | ' '-------------------- pinread
13ea8                 | ' 
13ea8                 | ' sub do_pinread
13ea8                 | _do_pinread
13ea8     00 4A 05 F6 | 	mov	COUNT_, #0
13eac     A8 00 A0 FD | 	call	#pushregs_
13eb0     0C F0 07 F1 | 	add	ptra, #12
13eb4     60 79 BF FD | 	call	#_pop
13eb8     A7 FA 61 FC | 	wrlong	result1, fp
13ebc     04 4E 05 F1 | 	add	fp, #4
13ec0     A7 FC 61 FC | 	wrlong	result2, fp
13ec4     04 4E 05 F1 | 	add	fp, #4
13ec8     A7 FE 61 FC | 	wrlong	result3, fp
13ecc     08 4E 85 F1 | 	sub	fp, #8
13ed0     A7 12 02 F6 | 	mov	arg01, fp
13ed4     24 7B BF FD | 	call	#_converttoint
13ed8     FD 12 02 F6 | 	mov	arg01, result1
13edc     20 12 CE F7 | 	test	arg01, #32 wz
13ee0     FF FB 01 56 |  if_ne	mov	result1, inb
13ee4     FE FB 01 A6 |  if_e	mov	result1, ina
13ee8     09 FB 41 F0 | 	shr	result1, arg01
13eec     06 12 46 F0 | 	shr	arg01, #6
13ef0     09 FB 41 F7 | 	zerox	result1, arg01
13ef4     52 00 00 FF 
13ef8     1C E4 05 F1 | 	add	objptr, ##42012
13efc     F2 FA 61 FC | 	wrlong	result1, objptr
13f00     52 00 00 FF 
13f04     1C E4 85 F1 | 	sub	objptr, ##42012
13f08     08 4E 05 F1 | 	add	fp, #8
13f0c     A7 3A 68 FC | 	wrlong	#29, fp
13f10     08 4E 85 F1 | 	sub	fp, #8
13f14     A7 08 68 FC | 	wrlong	#4, fp
13f18     A7 12 02 F6 | 	mov	arg01, fp
13f1c     90 79 BF FD | 	call	#_push
13f20     A7 F0 03 F6 | 	mov	ptra, fp
13f24     B2 00 A0 FD | 	call	#popregs_
13f28                 | _do_pinread_ret
13f28     2D 00 64 FD | 	ret
13f2c                 | 
13f2c                 | ' 
13f2c                 | ' '-------------------- pinstart
13f2c                 | ' 
13f2c                 | ' sub do_pinstart
13f2c                 | _do_pinstart
13f2c     03 4A 05 F6 | 	mov	COUNT_, #3
13f30     A8 00 A0 FD | 	call	#pushregs_
13f34     30 F0 07 F1 | 	add	ptra, #48
13f38     DC 78 BF FD | 	call	#_pop
13f3c     FD 16 02 F6 | 	mov	arg03, result1
13f40     FE 14 02 F6 | 	mov	arg02, result2
13f44     FF 18 02 F6 | 	mov	arg04, result3
13f48     A7 16 62 FC | 	wrlong	arg03, fp
13f4c     04 4E 05 F1 | 	add	fp, #4
13f50     A7 14 62 FC | 	wrlong	arg02, fp
13f54     04 4E 05 F1 | 	add	fp, #4
13f58     A7 18 62 FC | 	wrlong	arg04, fp
13f5c     08 4E 85 F1 | 	sub	fp, #8
13f60     B4 78 BF FD | 	call	#_pop
13f64     FD 16 02 F6 | 	mov	arg03, result1
13f68     FE 14 02 F6 | 	mov	arg02, result2
13f6c     FF 18 02 F6 | 	mov	arg04, result3
13f70     0C 4E 05 F1 | 	add	fp, #12
13f74     A7 16 62 FC | 	wrlong	arg03, fp
13f78     04 4E 05 F1 | 	add	fp, #4
13f7c     A7 14 62 FC | 	wrlong	arg02, fp
13f80     04 4E 05 F1 | 	add	fp, #4
13f84     A7 18 62 FC | 	wrlong	arg04, fp
13f88     14 4E 85 F1 | 	sub	fp, #20
13f8c     88 78 BF FD | 	call	#_pop
13f90     FD 16 02 F6 | 	mov	arg03, result1
13f94     FE 14 02 F6 | 	mov	arg02, result2
13f98     FF 18 02 F6 | 	mov	arg04, result3
13f9c     18 4E 05 F1 | 	add	fp, #24
13fa0     A7 16 62 FC | 	wrlong	arg03, fp
13fa4     04 4E 05 F1 | 	add	fp, #4
13fa8     A7 14 62 FC | 	wrlong	arg02, fp
13fac     04 4E 05 F1 | 	add	fp, #4
13fb0     A7 18 62 FC | 	wrlong	arg04, fp
13fb4     20 4E 85 F1 | 	sub	fp, #32
13fb8     5C 78 BF FD | 	call	#_pop
13fbc     FF 16 02 F6 | 	mov	arg03, result3
13fc0     24 4E 05 F1 | 	add	fp, #36
13fc4     A7 FA 61 FC | 	wrlong	result1, fp
13fc8     04 4E 05 F1 | 	add	fp, #4
13fcc     A7 FC 61 FC | 	wrlong	result2, fp
13fd0     04 4E 05 F1 | 	add	fp, #4
13fd4     A7 16 62 FC | 	wrlong	arg03, fp
13fd8     08 4E 85 F1 | 	sub	fp, #8
13fdc     A7 12 02 F6 | 	mov	arg01, fp
13fe0     24 4E 85 F1 | 	sub	fp, #36
13fe4     14 7A BF FD | 	call	#_converttoint
13fe8     FD 1E 02 F6 | 	mov	local01, result1
13fec     18 4E 05 F1 | 	add	fp, #24
13ff0     A7 12 02 F6 | 	mov	arg01, fp
13ff4     18 4E 85 F1 | 	sub	fp, #24
13ff8     00 7A BF FD | 	call	#_converttoint
13ffc     FD 20 02 F6 | 	mov	local02, result1
14000     0C 4E 05 F1 | 	add	fp, #12
14004     A7 12 02 F6 | 	mov	arg01, fp
14008     0C 4E 85 F1 | 	sub	fp, #12
1400c     EC 79 BF FD | 	call	#_converttoint
14010     FD 22 02 F6 | 	mov	local03, result1
14014     A7 12 02 F6 | 	mov	arg01, fp
14018     E0 79 BF FD | 	call	#_converttoint
1401c     40 1E 62 FD | 	dirl	local01
14020     0F 21 02 FC | 	wrpin	local02, local01
14024     0F 23 12 FC | 	wxpin	local03, local01
14028     0F FB 21 FC | 	wypin	result1, local01
1402c     41 1E 62 FD | 	dirh	local01
14030     A7 F0 03 F6 | 	mov	ptra, fp
14034     B2 00 A0 FD | 	call	#popregs_
14038                 | _do_pinstart_ret
14038     2D 00 64 FD | 	ret
1403c                 | 
1403c                 | ' 
1403c                 | ' '-------------------- pintoggle
1403c                 | ' 
1403c                 | ' sub do_pintoggle
1403c                 | _do_pintoggle
1403c     00 4A 05 F6 | 	mov	COUNT_, #0
14040     A8 00 A0 FD | 	call	#pushregs_
14044     0C F0 07 F1 | 	add	ptra, #12
14048     CC 77 BF FD | 	call	#_pop
1404c     A7 FA 61 FC | 	wrlong	result1, fp
14050     04 4E 05 F1 | 	add	fp, #4
14054     A7 FC 61 FC | 	wrlong	result2, fp
14058     04 4E 05 F1 | 	add	fp, #4
1405c     A7 FE 61 FC | 	wrlong	result3, fp
14060     08 4E 85 F1 | 	sub	fp, #8
14064     A7 12 02 F6 | 	mov	arg01, fp
14068     90 79 BF FD | 	call	#_converttoint
1406c     5F FA 61 FD | 	drvnot	result1
14070     A7 F0 03 F6 | 	mov	ptra, fp
14074     B2 00 A0 FD | 	call	#popregs_
14078                 | _do_pintoggle_ret
14078     2D 00 64 FD | 	ret
1407c                 | 
1407c                 | ' 
1407c                 | ' '-------------------- pinwrite
1407c                 | ' 
1407c                 | ' sub do_pinwrite
1407c                 | _do_pinwrite
1407c     01 4A 05 F6 | 	mov	COUNT_, #1
14080     A8 00 A0 FD | 	call	#pushregs_
14084     18 F0 07 F1 | 	add	ptra, #24
14088     8C 77 BF FD | 	call	#_pop
1408c     FD 14 02 F6 | 	mov	arg02, result1
14090     FE 12 02 F6 | 	mov	arg01, result2
14094     FF 1E 02 F6 | 	mov	local01, result3
14098     A7 14 62 FC | 	wrlong	arg02, fp
1409c     04 4E 05 F1 | 	add	fp, #4
140a0     A7 12 62 FC | 	wrlong	arg01, fp
140a4     04 4E 05 F1 | 	add	fp, #4
140a8     A7 1E 62 FC | 	wrlong	local01, fp
140ac     08 4E 85 F1 | 	sub	fp, #8
140b0     64 77 BF FD | 	call	#_pop
140b4     FF 1E 02 F6 | 	mov	local01, result3
140b8     0C 4E 05 F1 | 	add	fp, #12
140bc     A7 FA 61 FC | 	wrlong	result1, fp
140c0     04 4E 05 F1 | 	add	fp, #4
140c4     A7 FC 61 FC | 	wrlong	result2, fp
140c8     04 4E 05 F1 | 	add	fp, #4
140cc     A7 1E 62 FC | 	wrlong	local01, fp
140d0     08 4E 85 F1 | 	sub	fp, #8
140d4     A7 12 02 F6 | 	mov	arg01, fp
140d8     0C 4E 85 F1 | 	sub	fp, #12
140dc     1C 79 BF FD | 	call	#_converttoint
140e0     FD 1E 02 F6 | 	mov	local01, result1
140e4     A7 12 02 F6 | 	mov	arg01, fp
140e8     10 79 BF FD | 	call	#_converttoint
140ec     FD 14 02 F6 | 	mov	arg02, result1
140f0     0F 13 02 F6 | 	mov	arg01, local01
140f4     80 D6 B0 FD | 	call	#__system___pinwrite
140f8     A7 F0 03 F6 | 	mov	ptra, fp
140fc     B2 00 A0 FD | 	call	#popregs_
14100                 | _do_pinwrite_ret
14100     2D 00 64 FD | 	ret
14104                 | 
14104                 | ' 
14104                 | ' '-------------------- play
14104                 | ' 
14104                 | ' sub do_play
14104                 | _do_play
14104     08 4A 05 F6 | 	mov	COUNT_, #8
14108     A8 00 A0 FD | 	call	#pushregs_
1410c     7C F0 07 F1 | 	add	ptra, #124
14110     68 4E 05 F1 | 	add	fp, #104
14114     77 CC A1 FF 
14118     A7 7C 6B FC | 	wrlong	##1134096318, fp
1411c                 | ' speed_coeff=305.873
1411c                 | ' 
1411c                 | ' for i=0 to 8 : params(i)=-2.0 : next i
1411c     64 4E 85 F1 | 	sub	fp, #100
14120     A7 00 68 FC | 	wrlong	#0, fp
14124     97 18 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
14128                 | LR__1710
14128     A7 16 02 FB | 	rdlong	arg03, fp
1412c     02 16 66 F0 | 	shl	arg03, #2
14130     34 4E 05 F1 | 	add	fp, #52
14134     A7 16 02 F1 | 	add	arg03, fp
14138     00 00 E0 FF 
1413c     0B 01 68 FC | 	wrlong	##-1073741824, arg03
14140     34 4E 85 F1 | 	sub	fp, #52
14144     A7 1E 02 FB | 	rdlong	local01, fp
14148     01 1E 06 F1 | 	add	local01, #1
1414c     A7 1E 62 FC | 	wrlong	local01, fp
14150     09 1E 56 F2 | 	cmps	local01, #9 wc
14154     D0 FF 9F CD |  if_b	jmp	#LR__1710
14158                 | LR__1711
14158     04 4E 85 F1 | 	sub	fp, #4
1415c     4A 00 00 FF 
14160     80 E4 05 F1 | 	add	objptr, ##38016
14164     F2 20 02 FB | 	rdlong	local02, objptr
14168     10 23 02 F6 | 	mov	local03, local02
1416c     01 22 66 F0 | 	shl	local03, #1
14170     10 23 02 F1 | 	add	local03, local02
14174     02 22 66 F0 | 	shl	local03, #2
14178     03 00 00 FF 
1417c     04 E4 85 F1 | 	sub	objptr, ##1540
14180     F2 22 02 F1 | 	add	local03, objptr
14184     11 25 02 FB | 	rdlong	local04, local03
14188     A7 24 62 FC | 	wrlong	local04, fp
1418c                 | ' numpar=compiledline(lineptr_e).result.uresult
1418c                 | ' for i=numpar to 1 step -1 
1418c     04 4E 05 F1 | 	add	fp, #4
14190     A7 24 62 FC | 	wrlong	local04, fp
14194     04 4E 85 F1 | 	sub	fp, #4
14198     47 00 00 FF 
1419c     7C E4 85 F1 | 	sub	objptr, ##36476
141a0                 | LR__1712
141a0     74 76 BF FD | 	call	#_pop
141a4     5C 4E 05 F1 | 	add	fp, #92
141a8     A7 FA 61 FC | 	wrlong	result1, fp
141ac     04 4E 05 F1 | 	add	fp, #4
141b0     A7 FC 61 FC | 	wrlong	result2, fp
141b4     04 4E 05 F1 | 	add	fp, #4
141b8     A7 FE 61 FC | 	wrlong	result3, fp
141bc     60 4E 85 F1 | 	sub	fp, #96
141c0     A7 22 02 FB | 	rdlong	local03, fp
141c4     01 22 86 F1 | 	sub	local03, #1
141c8     02 22 66 F0 | 	shl	local03, #2
141cc     34 4E 05 F1 | 	add	fp, #52
141d0     A7 22 02 F1 | 	add	local03, fp
141d4     24 4E 05 F1 | 	add	fp, #36
141d8     A7 26 02 F6 | 	mov	local05, fp
141dc     13 13 02 F6 | 	mov	arg01, local05
141e0     5C 4E 85 F1 | 	sub	fp, #92
141e4     D0 78 BF FD | 	call	#_converttofloat
141e8     11 FB 61 FC | 	wrlong	result1, local03
141ec     04 4E 05 F1 | 	add	fp, #4
141f0     A7 1E 02 FB | 	rdlong	local01, fp
141f4     01 1E 86 F1 | 	sub	local01, #1
141f8     A7 1E 62 FC | 	wrlong	local01, fp
141fc     04 4E 85 F1 | 	sub	fp, #4
14200     01 1E 56 F2 | 	cmps	local01, #1 wc
14204     98 FF 9F 3D |  if_ae	jmp	#LR__1712
14208                 | ' 
14208                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
14208     38 4E 05 F1 | 	add	fp, #56
1420c     A7 12 02 FB | 	rdlong	arg01, fp
14210     38 4E 85 F1 | 	sub	fp, #56
14214     00 14 06 F6 | 	mov	arg02, #0
14218     01 16 06 F6 | 	mov	arg03, #1
1421c     94 05 B1 FD | 	call	#__system___float_cmp
14220     00 FA 55 F2 | 	cmps	result1, #0 wc
14224     0C 4E 05 C1 |  if_b	add	fp, #12
14228     A7 00 68 CC |  if_b	wrlong	#0, fp
1422c     0C 4E 85 C1 |  if_b	sub	fp, #12
14230     2C 00 90 CD |  if_b	jmp	#LR__1713
14234     38 4E 05 F1 | 	add	fp, #56
14238     A7 12 02 FB | 	rdlong	arg01, fp
1423c     38 4E 85 F1 | 	sub	fp, #56
14240     01 14 06 F6 | 	mov	arg02, #1
14244     00 06 B1 FD | 	call	#__system___float_tointeger
14248     FD 1E 52 F6 | 	abs	local01, result1 wc
1424c     07 1E 06 F5 | 	and	local01, #7
14250     0F 1F 82 F6 | 	negc	local01, local01
14254     0C 4E 05 F1 | 	add	fp, #12
14258     A7 1E 62 FC | 	wrlong	local01, fp
1425c     0C 4E 85 F1 | 	sub	fp, #12
14260                 | LR__1713
14260                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
14260     3C 4E 05 F1 | 	add	fp, #60
14264     A7 12 02 FB | 	rdlong	arg01, fp
14268     3C 4E 85 F1 | 	sub	fp, #60
1426c     00 14 06 F6 | 	mov	arg02, #0
14270     01 16 06 F6 | 	mov	arg03, #1
14274     3C 05 B1 FD | 	call	#__system___float_cmp
14278     00 FA 55 F2 | 	cmps	result1, #0 wc
1427c     40 00 90 3D |  if_ae	jmp	#LR__1714
14280     0C 4E 05 F1 | 	add	fp, #12
14284     A7 20 02 FB | 	rdlong	local02, fp
14288     10 23 02 F6 | 	mov	local03, local02
1428c     01 22 66 F0 | 	shl	local03, #1
14290     10 23 02 F1 | 	add	local03, local02
14294     03 22 66 F0 | 	shl	local03, #3
14298     14 00 00 FF 
1429c     38 E5 05 F1 | 	add	objptr, ##10552
142a0     F2 22 02 F1 | 	add	local03, objptr
142a4     11 29 02 FB | 	rdlong	local06, local03
142a8     60 4E 05 F1 | 	add	fp, #96
142ac     A7 28 62 FC | 	wrlong	local06, fp
142b0     6C 4E 85 F1 | 	sub	fp, #108
142b4     14 00 00 FF 
142b8     38 E5 85 F1 | 	sub	objptr, ##10552
142bc     44 00 90 FD | 	jmp	#LR__1715
142c0                 | LR__1714
142c0     3C 4E 05 F1 | 	add	fp, #60
142c4     A7 24 02 FB | 	rdlong	local04, fp
142c8     30 4E 05 F1 | 	add	fp, #48
142cc     A7 24 62 FC | 	wrlong	local04, fp
142d0     60 4E 85 F1 | 	sub	fp, #96
142d4     A7 20 02 FB | 	rdlong	local02, fp
142d8     10 23 02 F6 | 	mov	local03, local02
142dc     01 22 66 F0 | 	shl	local03, #1
142e0     10 23 02 F1 | 	add	local03, local02
142e4     03 22 66 F0 | 	shl	local03, #3
142e8     14 00 00 FF 
142ec     38 E5 05 F1 | 	add	objptr, ##10552
142f0     F2 22 02 F1 | 	add	local03, objptr
142f4     0C 4E 85 F1 | 	sub	fp, #12
142f8     11 25 62 FC | 	wrlong	local04, local03
142fc     14 00 00 FF 
14300     38 E5 85 F1 | 	sub	objptr, ##10552
14304                 | LR__1715
14304                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
14304     40 4E 05 F1 | 	add	fp, #64
14308     A7 12 02 FB | 	rdlong	arg01, fp
1430c     40 4E 85 F1 | 	sub	fp, #64
14310     00 14 06 F6 | 	mov	arg02, #0
14314     01 16 06 F6 | 	mov	arg03, #1
14318     98 04 B1 FD | 	call	#__system___float_cmp
1431c     00 FA 55 F2 | 	cmps	result1, #0 wc
14320     24 00 90 CD |  if_b	jmp	#LR__1716
14324     40 4E 05 F1 | 	add	fp, #64
14328     A7 12 02 FB | 	rdlong	arg01, fp
1432c     40 4E 85 F1 | 	sub	fp, #64
14330     20 0E 23 FF 
14334     00 14 06 F6 | 	mov	arg02, ##1176256512
14338     01 16 66 F6 | 	neg	arg03, #1
1433c     74 04 B1 FD | 	call	#__system___float_cmp
14340     01 FA 55 F2 | 	cmps	result1, #1 wc
14344     48 00 90 CD |  if_b	jmp	#LR__1717
14348                 | LR__1716
14348     0C 4E 05 F1 | 	add	fp, #12
1434c     A7 22 02 FB | 	rdlong	local03, fp
14350     11 2B 02 F6 | 	mov	local07, local03
14354     01 2A 66 F0 | 	shl	local07, #1
14358     11 2B 02 F1 | 	add	local07, local03
1435c     03 2A 66 F0 | 	shl	local07, #3
14360     14 00 00 FF 
14364     38 E5 05 F1 | 	add	objptr, ##10552
14368     F2 2A 02 F1 | 	add	local07, objptr
1436c     06 2A 06 F1 | 	add	local07, #6
14370     15 27 E2 FA | 	rdword	local05, local07
14374     13 25 32 F9 | 	getword	local04, local05, #0
14378     1C 4E 05 F1 | 	add	fp, #28
1437c     A7 24 62 FC | 	wrlong	local04, fp
14380     28 4E 85 F1 | 	sub	fp, #40
14384     14 00 00 FF 
14388     38 E5 85 F1 | 	sub	objptr, ##10552
1438c     54 00 90 FD | 	jmp	#LR__1718
14390                 | LR__1717
14390     40 4E 05 F1 | 	add	fp, #64
14394     A7 12 02 FB | 	rdlong	arg01, fp
14398     40 4E 85 F1 | 	sub	fp, #64
1439c     01 14 06 F6 | 	mov	arg02, #1
143a0     A4 04 B1 FD | 	call	#__system___float_tointeger
143a4     28 4E 05 F1 | 	add	fp, #40
143a8     A7 FA 61 FC | 	wrlong	result1, fp
143ac     1C 4E 85 F1 | 	sub	fp, #28
143b0     A7 20 02 FB | 	rdlong	local02, fp
143b4     10 23 02 F6 | 	mov	local03, local02
143b8     01 22 66 F0 | 	shl	local03, #1
143bc     10 23 02 F1 | 	add	local03, local02
143c0     03 22 66 F0 | 	shl	local03, #3
143c4     14 00 00 FF 
143c8     38 E5 05 F1 | 	add	objptr, ##10552
143cc     F2 22 02 F1 | 	add	local03, objptr
143d0     0C 4E 85 F1 | 	sub	fp, #12
143d4     06 22 06 F1 | 	add	local03, #6
143d8     11 FB 51 FC | 	wrword	result1, local03
143dc     14 00 00 FF 
143e0     38 E5 85 F1 | 	sub	objptr, ##10552
143e4                 | LR__1718
143e4                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
143e4     44 4E 05 F1 | 	add	fp, #68
143e8     A7 12 02 FB | 	rdlong	arg01, fp
143ec     44 4E 85 F1 | 	sub	fp, #68
143f0     00 14 06 F6 | 	mov	arg02, #0
143f4     01 16 06 F6 | 	mov	arg03, #1
143f8     B8 03 B1 FD | 	call	#__system___float_cmp
143fc     00 FA 55 F2 | 	cmps	result1, #0 wc
14400     24 00 90 CD |  if_b	jmp	#LR__1719
14404     44 4E 05 F1 | 	add	fp, #68
14408     A7 12 02 FB | 	rdlong	arg01, fp
1440c     44 4E 85 F1 | 	sub	fp, #68
14410     89 C1 20 FF 
14414     6F 14 06 F6 | 	mov	arg02, ##1099108975
14418     01 16 66 F6 | 	neg	arg03, #1
1441c     94 03 B1 FD | 	call	#__system___float_cmp
14420     01 FA 55 F2 | 	cmps	result1, #1 wc
14424     44 00 90 CD |  if_b	jmp	#LR__1720
14428                 | LR__1719
14428     0C 4E 05 F1 | 	add	fp, #12
1442c     A7 20 02 FB | 	rdlong	local02, fp
14430     10 23 02 F6 | 	mov	local03, local02
14434     01 22 66 F0 | 	shl	local03, #1
14438     10 23 02 F1 | 	add	local03, local02
1443c     03 22 66 F0 | 	shl	local03, #3
14440     14 00 00 FF 
14444     38 E5 05 F1 | 	add	objptr, ##10552
14448     F2 22 02 F1 | 	add	local03, objptr
1444c     0C 22 06 F1 | 	add	local03, #12
14450     11 29 02 FB | 	rdlong	local06, local03
14454     68 4E 05 F1 | 	add	fp, #104
14458     A7 28 62 FC | 	wrlong	local06, fp
1445c     74 4E 85 F1 | 	sub	fp, #116
14460     14 00 00 FF 
14464     38 E5 85 F1 | 	sub	objptr, ##10552
14468     48 00 90 FD | 	jmp	#LR__1721
1446c                 | LR__1720
1446c     44 4E 05 F1 | 	add	fp, #68
14470     A7 24 02 FB | 	rdlong	local04, fp
14474     30 4E 05 F1 | 	add	fp, #48
14478     A7 24 62 FC | 	wrlong	local04, fp
1447c     68 4E 85 F1 | 	sub	fp, #104
14480     A7 20 02 FB | 	rdlong	local02, fp
14484     10 23 02 F6 | 	mov	local03, local02
14488     01 22 66 F0 | 	shl	local03, #1
1448c     10 23 02 F1 | 	add	local03, local02
14490     03 22 66 F0 | 	shl	local03, #3
14494     14 00 00 FF 
14498     38 E5 05 F1 | 	add	objptr, ##10552
1449c     F2 22 02 F1 | 	add	local03, objptr
144a0     0C 4E 85 F1 | 	sub	fp, #12
144a4     0C 22 06 F1 | 	add	local03, #12
144a8     11 25 62 FC | 	wrlong	local04, local03
144ac     14 00 00 FF 
144b0     38 E5 85 F1 | 	sub	objptr, ##10552
144b4                 | LR__1721
144b4                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
144b4     48 4E 05 F1 | 	add	fp, #72
144b8     A7 12 02 FB | 	rdlong	arg01, fp
144bc     48 4E 85 F1 | 	sub	fp, #72
144c0     00 14 06 F6 | 	mov	arg02, #0
144c4     01 16 06 F6 | 	mov	arg03, #1
144c8     E8 02 B1 FD | 	call	#__system___float_cmp
144cc     00 FA 55 F2 | 	cmps	result1, #0 wc
144d0     24 00 90 CD |  if_b	jmp	#LR__1722
144d4     48 4E 05 F1 | 	add	fp, #72
144d8     A7 12 02 FB | 	rdlong	arg01, fp
144dc     48 4E 85 F1 | 	sub	fp, #72
144e0     00 00 21 FF 
144e4     00 14 06 F6 | 	mov	arg02, ##1107296256
144e8     01 16 66 F6 | 	neg	arg03, #1
144ec     C4 02 B1 FD | 	call	#__system___float_cmp
144f0     01 FA 55 F2 | 	cmps	result1, #1 wc
144f4     48 00 90 CD |  if_b	jmp	#LR__1723
144f8                 | LR__1722
144f8     0C 4E 05 F1 | 	add	fp, #12
144fc     A7 22 02 FB | 	rdlong	local03, fp
14500     11 2B 02 F6 | 	mov	local07, local03
14504     01 2A 66 F0 | 	shl	local07, #1
14508     11 2B 02 F1 | 	add	local07, local03
1450c     03 2A 66 F0 | 	shl	local07, #3
14510     14 00 00 FF 
14514     38 E5 05 F1 | 	add	objptr, ##10552
14518     F2 2A 02 F1 | 	add	local07, objptr
1451c     04 2A 06 F1 | 	add	local07, #4
14520     15 27 C2 FA | 	rdbyte	local05, local07
14524     13 25 E2 F8 | 	getbyte	local04, local05, #0
14528     14 4E 05 F1 | 	add	fp, #20
1452c     A7 24 62 FC | 	wrlong	local04, fp
14530     20 4E 85 F1 | 	sub	fp, #32
14534     14 00 00 FF 
14538     38 E5 85 F1 | 	sub	objptr, ##10552
1453c     54 00 90 FD | 	jmp	#LR__1724
14540                 | LR__1723
14540     48 4E 05 F1 | 	add	fp, #72
14544     A7 12 02 FB | 	rdlong	arg01, fp
14548     48 4E 85 F1 | 	sub	fp, #72
1454c     01 14 06 F6 | 	mov	arg02, #1
14550     F4 02 B1 FD | 	call	#__system___float_tointeger
14554     20 4E 05 F1 | 	add	fp, #32
14558     A7 FA 61 FC | 	wrlong	result1, fp
1455c     14 4E 85 F1 | 	sub	fp, #20
14560     A7 20 02 FB | 	rdlong	local02, fp
14564     10 23 02 F6 | 	mov	local03, local02
14568     01 22 66 F0 | 	shl	local03, #1
1456c     10 23 02 F1 | 	add	local03, local02
14570     03 22 66 F0 | 	shl	local03, #3
14574     14 00 00 FF 
14578     38 E5 05 F1 | 	add	objptr, ##10552
1457c     F2 22 02 F1 | 	add	local03, objptr
14580     0C 4E 85 F1 | 	sub	fp, #12
14584     04 22 06 F1 | 	add	local03, #4
14588     11 FB 41 FC | 	wrbyte	result1, local03
1458c     14 00 00 FF 
14590     38 E5 85 F1 | 	sub	objptr, ##10552
14594                 | LR__1724
14594                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
14594     4C 4E 05 F1 | 	add	fp, #76
14598     A7 12 02 FB | 	rdlong	arg01, fp
1459c     4C 4E 85 F1 | 	sub	fp, #76
145a0     00 14 06 F6 | 	mov	arg02, #0
145a4     01 16 06 F6 | 	mov	arg03, #1
145a8     08 02 B1 FD | 	call	#__system___float_cmp
145ac     00 FA 55 F2 | 	cmps	result1, #0 wc
145b0     24 00 90 CD |  if_b	jmp	#LR__1725
145b4     4C 4E 05 F1 | 	add	fp, #76
145b8     A7 12 02 FB | 	rdlong	arg01, fp
145bc     4C 4E 85 F1 | 	sub	fp, #76
145c0     00 80 20 FF 
145c4     00 14 06 F6 | 	mov	arg02, ##1090519040
145c8     01 16 66 F6 | 	neg	arg03, #1
145cc     E4 01 B1 FD | 	call	#__system___float_cmp
145d0     01 FA 55 F2 | 	cmps	result1, #1 wc
145d4     48 00 90 CD |  if_b	jmp	#LR__1726
145d8                 | LR__1725
145d8     0C 4E 05 F1 | 	add	fp, #12
145dc     A7 22 02 FB | 	rdlong	local03, fp
145e0     11 2B 02 F6 | 	mov	local07, local03
145e4     01 2A 66 F0 | 	shl	local07, #1
145e8     11 2B 02 F1 | 	add	local07, local03
145ec     03 2A 66 F0 | 	shl	local07, #3
145f0     14 00 00 FF 
145f4     38 E5 05 F1 | 	add	objptr, ##10552
145f8     F2 2A 02 F1 | 	add	local07, objptr
145fc     05 2A 06 F1 | 	add	local07, #5
14600     15 27 C2 FA | 	rdbyte	local05, local07
14604     13 25 E2 F8 | 	getbyte	local04, local05, #0
14608     18 4E 05 F1 | 	add	fp, #24
1460c     A7 24 62 FC | 	wrlong	local04, fp
14610     24 4E 85 F1 | 	sub	fp, #36
14614     14 00 00 FF 
14618     38 E5 85 F1 | 	sub	objptr, ##10552
1461c     54 00 90 FD | 	jmp	#LR__1727
14620                 | LR__1726
14620     4C 4E 05 F1 | 	add	fp, #76
14624     A7 12 02 FB | 	rdlong	arg01, fp
14628     4C 4E 85 F1 | 	sub	fp, #76
1462c     01 14 06 F6 | 	mov	arg02, #1
14630     14 02 B1 FD | 	call	#__system___float_tointeger
14634     24 4E 05 F1 | 	add	fp, #36
14638     A7 FA 61 FC | 	wrlong	result1, fp
1463c     18 4E 85 F1 | 	sub	fp, #24
14640     A7 20 02 FB | 	rdlong	local02, fp
14644     10 23 02 F6 | 	mov	local03, local02
14648     01 22 66 F0 | 	shl	local03, #1
1464c     10 23 02 F1 | 	add	local03, local02
14650     03 22 66 F0 | 	shl	local03, #3
14654     14 00 00 FF 
14658     38 E5 05 F1 | 	add	objptr, ##10552
1465c     F2 22 02 F1 | 	add	local03, objptr
14660     0C 4E 85 F1 | 	sub	fp, #12
14664     05 22 06 F1 | 	add	local03, #5
14668     11 FB 41 FC | 	wrbyte	result1, local03
1466c     14 00 00 FF 
14670     38 E5 85 F1 | 	sub	objptr, ##10552
14674                 | LR__1727
14674                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
14674     50 4E 05 F1 | 	add	fp, #80
14678     A7 12 02 FB | 	rdlong	arg01, fp
1467c     50 4E 85 F1 | 	sub	fp, #80
14680     00 14 06 F6 | 	mov	arg02, #0
14684     01 16 06 F6 | 	mov	arg03, #1
14688     28 01 B1 FD | 	call	#__system___float_cmp
1468c     00 FA 55 F2 | 	cmps	result1, #0 wc
14690     24 00 90 CD |  if_b	jmp	#LR__1728
14694     50 4E 05 F1 | 	add	fp, #80
14698     A7 12 02 FB | 	rdlong	arg01, fp
1469c     50 4E 85 F1 | 	sub	fp, #80
146a0     00 3D 22 FF 
146a4     00 14 06 F6 | 	mov	arg02, ##1148846080
146a8     01 16 66 F6 | 	neg	arg03, #1
146ac     04 01 B1 FD | 	call	#__system___float_cmp
146b0     01 FA 55 F2 | 	cmps	result1, #1 wc
146b4     44 00 90 CD |  if_b	jmp	#LR__1729
146b8                 | LR__1728
146b8     0C 4E 05 F1 | 	add	fp, #12
146bc     A7 20 02 FB | 	rdlong	local02, fp
146c0     10 23 02 F6 | 	mov	local03, local02
146c4     01 22 66 F0 | 	shl	local03, #1
146c8     10 23 02 F1 | 	add	local03, local02
146cc     03 22 66 F0 | 	shl	local03, #3
146d0     14 00 00 FF 
146d4     38 E5 05 F1 | 	add	objptr, ##10552
146d8     F2 22 02 F1 | 	add	local03, objptr
146dc     08 22 06 F1 | 	add	local03, #8
146e0     11 29 02 FB | 	rdlong	local06, local03
146e4     6C 4E 05 F1 | 	add	fp, #108
146e8     A7 28 62 FC | 	wrlong	local06, fp
146ec     78 4E 85 F1 | 	sub	fp, #120
146f0     14 00 00 FF 
146f4     38 E5 85 F1 | 	sub	objptr, ##10552
146f8     48 00 90 FD | 	jmp	#LR__1730
146fc                 | LR__1729
146fc     50 4E 05 F1 | 	add	fp, #80
14700     A7 28 02 FB | 	rdlong	local06, fp
14704     28 4E 05 F1 | 	add	fp, #40
14708     A7 28 62 FC | 	wrlong	local06, fp
1470c     6C 4E 85 F1 | 	sub	fp, #108
14710     A7 20 02 FB | 	rdlong	local02, fp
14714     10 23 02 F6 | 	mov	local03, local02
14718     01 22 66 F0 | 	shl	local03, #1
1471c     10 23 02 F1 | 	add	local03, local02
14720     03 22 66 F0 | 	shl	local03, #3
14724     14 00 00 FF 
14728     38 E5 05 F1 | 	add	objptr, ##10552
1472c     F2 22 02 F1 | 	add	local03, objptr
14730     0C 4E 85 F1 | 	sub	fp, #12
14734     08 22 06 F1 | 	add	local03, #8
14738     11 29 62 FC | 	wrlong	local06, local03
1473c     14 00 00 FF 
14740     38 E5 85 F1 | 	sub	objptr, ##10552
14744                 | LR__1730
14744                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
14744     54 4E 05 F1 | 	add	fp, #84
14748     A7 12 02 FB | 	rdlong	arg01, fp
1474c     54 4E 85 F1 | 	sub	fp, #84
14750     00 C0 5F FF 
14754     00 14 06 F6 | 	mov	arg02, ##-1082130432
14758     01 16 06 F6 | 	mov	arg03, #1
1475c     54 00 B1 FD | 	call	#__system___float_cmp
14760     00 FA 55 F2 | 	cmps	result1, #0 wc
14764     24 00 90 CD |  if_b	jmp	#LR__1731
14768     54 4E 05 F1 | 	add	fp, #84
1476c     A7 12 02 FB | 	rdlong	arg01, fp
14770     54 4E 85 F1 | 	sub	fp, #84
14774     00 C0 1F FF 
14778     00 14 06 F6 | 	mov	arg02, ##1065353216
1477c     01 16 66 F6 | 	neg	arg03, #1
14780     30 00 B1 FD | 	call	#__system___float_cmp
14784     01 FA 55 F2 | 	cmps	result1, #1 wc
14788     44 00 90 CD |  if_b	jmp	#LR__1732
1478c                 | LR__1731
1478c     0C 4E 05 F1 | 	add	fp, #12
14790     A7 20 02 FB | 	rdlong	local02, fp
14794     10 23 02 F6 | 	mov	local03, local02
14798     01 22 66 F0 | 	shl	local03, #1
1479c     10 23 02 F1 | 	add	local03, local02
147a0     03 22 66 F0 | 	shl	local03, #3
147a4     14 00 00 FF 
147a8     38 E5 05 F1 | 	add	objptr, ##10552
147ac     F2 22 02 F1 | 	add	local03, objptr
147b0     10 22 06 F1 | 	add	local03, #16
147b4     11 29 02 FB | 	rdlong	local06, local03
147b8     64 4E 05 F1 | 	add	fp, #100
147bc     A7 28 62 FC | 	wrlong	local06, fp
147c0     70 4E 85 F1 | 	sub	fp, #112
147c4     14 00 00 FF 
147c8     38 E5 85 F1 | 	sub	objptr, ##10552
147cc     48 00 90 FD | 	jmp	#LR__1733
147d0                 | LR__1732
147d0     54 4E 05 F1 | 	add	fp, #84
147d4     A7 28 02 FB | 	rdlong	local06, fp
147d8     1C 4E 05 F1 | 	add	fp, #28
147dc     A7 28 62 FC | 	wrlong	local06, fp
147e0     64 4E 85 F1 | 	sub	fp, #100
147e4     A7 20 02 FB | 	rdlong	local02, fp
147e8     10 23 02 F6 | 	mov	local03, local02
147ec     01 22 66 F0 | 	shl	local03, #1
147f0     10 23 02 F1 | 	add	local03, local02
147f4     03 22 66 F0 | 	shl	local03, #3
147f8     14 00 00 FF 
147fc     38 E5 05 F1 | 	add	objptr, ##10552
14800     F2 22 02 F1 | 	add	local03, objptr
14804     0C 4E 85 F1 | 	sub	fp, #12
14808     10 22 06 F1 | 	add	local03, #16
1480c     11 29 62 FC | 	wrlong	local06, local03
14810     14 00 00 FF 
14814     38 E5 85 F1 | 	sub	objptr, ##10552
14818                 | LR__1733
14818                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
14818     58 4E 05 F1 | 	add	fp, #88
1481c     A7 12 02 FB | 	rdlong	arg01, fp
14820     58 4E 85 F1 | 	sub	fp, #88
14824     00 14 06 F6 | 	mov	arg02, #0
14828     01 16 06 F6 | 	mov	arg03, #1
1482c     84 FF B0 FD | 	call	#__system___float_cmp
14830     00 FA 55 F2 | 	cmps	result1, #0 wc
14834     24 00 90 CD |  if_b	jmp	#LR__1734
14838     58 4E 05 F1 | 	add	fp, #88
1483c     A7 12 02 FB | 	rdlong	arg01, fp
14840     58 4E 85 F1 | 	sub	fp, #88
14844     80 BF 21 FF 
14848     00 14 06 F6 | 	mov	arg02, ##1132396544
1484c     01 16 66 F6 | 	neg	arg03, #1
14850     60 FF B0 FD | 	call	#__system___float_cmp
14854     01 FA 55 F2 | 	cmps	result1, #1 wc
14858     44 00 90 CD |  if_b	jmp	#LR__1735
1485c                 | LR__1734
1485c     0C 4E 05 F1 | 	add	fp, #12
14860     A7 22 02 FB | 	rdlong	local03, fp
14864     11 2B 02 F6 | 	mov	local07, local03
14868     01 2A 66 F0 | 	shl	local07, #1
1486c     11 2B 02 F1 | 	add	local07, local03
14870     03 2A 66 F0 | 	shl	local07, #3
14874     14 00 00 FF 
14878     38 E5 05 F1 | 	add	objptr, ##10552
1487c     F2 2A 02 F1 | 	add	local07, objptr
14880     14 2A 06 F1 | 	add	local07, #20
14884     15 25 E2 FA | 	rdword	local04, local07
14888     20 4E 05 F1 | 	add	fp, #32
1488c     A7 24 62 FC | 	wrlong	local04, fp
14890     2C 4E 85 F1 | 	sub	fp, #44
14894     14 00 00 FF 
14898     38 E5 85 F1 | 	sub	objptr, ##10552
1489c     54 00 90 FD | 	jmp	#LR__1736
148a0                 | LR__1735
148a0     58 4E 05 F1 | 	add	fp, #88
148a4     A7 12 02 FB | 	rdlong	arg01, fp
148a8     58 4E 85 F1 | 	sub	fp, #88
148ac     01 14 06 F6 | 	mov	arg02, #1
148b0     94 FF B0 FD | 	call	#__system___float_tointeger
148b4     2C 4E 05 F1 | 	add	fp, #44
148b8     A7 FA 61 FC | 	wrlong	result1, fp
148bc     20 4E 85 F1 | 	sub	fp, #32
148c0     A7 20 02 FB | 	rdlong	local02, fp
148c4     10 23 02 F6 | 	mov	local03, local02
148c8     01 22 66 F0 | 	shl	local03, #1
148cc     10 23 02 F1 | 	add	local03, local02
148d0     03 22 66 F0 | 	shl	local03, #3
148d4     14 00 00 FF 
148d8     38 E5 05 F1 | 	add	objptr, ##10552
148dc     F2 22 02 F1 | 	add	local03, objptr
148e0     0C 4E 85 F1 | 	sub	fp, #12
148e4     14 22 06 F1 | 	add	local03, #20
148e8     11 FB 51 FC | 	wrword	result1, local03
148ec     14 00 00 FF 
148f0     38 E5 85 F1 | 	sub	objptr, ##10552
148f4                 | LR__1736
148f4     6C 4E 05 F1 | 	add	fp, #108
148f8     A7 14 02 FB | 	rdlong	arg02, fp
148fc     6C 4E 85 F1 | 	sub	fp, #108
14900     FC 16 20 FF 
14904     54 12 06 F6 | 	mov	arg01, ##1076754516
14908     44 0A B1 FD | 	call	#__system____builtin_logbase
1490c     FD 24 02 F6 | 	mov	local04, result1
14910     1E 14 C6 F9 | 	decod	arg02, #30
14914     FC 16 20 FF 
14918     54 12 06 F6 | 	mov	arg01, ##1076754516
1491c     30 0A B1 FD | 	call	#__system____builtin_logbase
14920     FD 14 02 F6 | 	mov	arg02, result1
14924     12 13 02 F6 | 	mov	arg01, local04
14928     58 FC B0 FD | 	call	#__system___float_div
1492c     FD 12 02 F6 | 	mov	arg01, result1
14930     00 14 06 F6 | 	mov	arg02, #0
14934     10 FF B0 FD | 	call	#__system___float_tointeger
14938     30 4E 05 F1 | 	add	fp, #48
1493c     A7 FA 61 FC | 	wrlong	result1, fp
14940     1E 24 C6 F9 | 	decod	local04, #30
14944     FD 12 02 F6 | 	mov	arg01, result1
14948     30 4E 85 F1 | 	sub	fp, #48
1494c     05 12 06 F1 | 	add	arg01, #5
14950     09 13 52 F6 | 	abs	arg01, arg01 wc
14954     1F 2C C6 C9 |  if_b	decod	local08, #31
14958     00 2C 06 36 |  if_ae	mov	local08, #0
1495c     1C F6 B0 FD | 	call	#__system___float_fromuns
14960     16 FB 61 F5 | 	xor	result1, local08
14964     FD 14 02 F6 | 	mov	arg02, result1
14968     12 13 02 F6 | 	mov	arg01, local04
1496c     18 09 B1 FD | 	call	#__system____builtin_powf
14970     FD 12 02 F6 | 	mov	arg01, result1
14974     01 14 06 F6 | 	mov	arg02, #1
14978     CC FE B0 FD | 	call	#__system___float_tointeger
1497c     10 4E 05 F1 | 	add	fp, #16
14980     A7 FA 61 FC | 	wrlong	result1, fp
14984                 | ' skip=round(2^(lfreq+5))
14984                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
14984     10 4E 85 F1 | 	sub	fp, #16
14988     40 00 00 FF 
1498c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
14990     30 00 90 CD |  if_b	jmp	#LR__1737
14994     10 4E 05 F1 | 	add	fp, #16
14998     A7 1E 02 FB | 	rdlong	local01, fp
1499c     0F 25 52 F6 | 	abs	local04, local01 wc
149a0     0F 24 46 F0 | 	shr	local04, #15
149a4     12 25 82 F6 | 	negc	local04, local04
149a8     0C 4E 85 F1 | 	sub	fp, #12
149ac     A7 24 62 FC | 	wrlong	local04, fp
149b0     0C 4E 05 F1 | 	add	fp, #12
149b4     40 00 80 FF 
149b8     A7 00 68 FC | 	wrlong	##32768, fp
149bc     10 4E 85 F1 | 	sub	fp, #16
149c0     0C 00 90 FD | 	jmp	#LR__1738
149c4                 | LR__1737
149c4     04 4E 05 F1 | 	add	fp, #4
149c8     A7 02 68 FC | 	wrlong	#1, fp
149cc     04 4E 85 F1 | 	sub	fp, #4
149d0                 | LR__1738
149d0     6C 4E 05 F1 | 	add	fp, #108
149d4     A7 14 02 FB | 	rdlong	arg02, fp
149d8     6C 4E 85 F1 | 	sub	fp, #108
149dc     3E 2C 25 FF 
149e0     3C 12 06 F6 | 	mov	arg01, ##1247312956
149e4     9C FB B0 FD | 	call	#__system___float_div
149e8     FD 24 02 F6 | 	mov	local04, result1
149ec     04 4E 05 F1 | 	add	fp, #4
149f0     A7 12 02 FB | 	rdlong	arg01, fp
149f4     04 4E 85 F1 | 	sub	fp, #4
149f8     09 13 52 F6 | 	abs	arg01, arg01 wc
149fc     1F 2C C6 C9 |  if_b	decod	local08, #31
14a00     00 2C 06 36 |  if_ae	mov	local08, #0
14a04     74 F5 B0 FD | 	call	#__system___float_fromuns
14a08     16 FB 61 F5 | 	xor	result1, local08
14a0c     FD 1E 02 F6 | 	mov	local01, result1
14a10     1E 20 C6 F9 | 	decod	local02, #30
14a14     0D 12 06 F6 | 	mov	arg01, #13
14a18     30 4E 05 F1 | 	add	fp, #48
14a1c     A7 28 02 FB | 	rdlong	local06, fp
14a20     30 4E 85 F1 | 	sub	fp, #48
14a24     14 13 82 F1 | 	sub	arg01, local06
14a28     09 13 52 F6 | 	abs	arg01, arg01 wc
14a2c     1F 2C C6 C9 |  if_b	decod	local08, #31
14a30     00 2C 06 36 |  if_ae	mov	local08, #0
14a34     44 F5 B0 FD | 	call	#__system___float_fromuns
14a38     16 FB 61 F5 | 	xor	result1, local08
14a3c     FD 14 02 F6 | 	mov	arg02, result1
14a40     10 13 02 F6 | 	mov	arg01, local02
14a44     40 08 B1 FD | 	call	#__system____builtin_powf
14a48     FD 14 02 F6 | 	mov	arg02, result1
14a4c     0F 13 02 F6 | 	mov	arg01, local01
14a50     2C F9 B0 FD | 	call	#__system___float_mul
14a54     FD 14 02 F6 | 	mov	arg02, result1
14a58     12 13 02 F6 | 	mov	arg01, local04
14a5c     24 FB B0 FD | 	call	#__system___float_div
14a60     FD 12 02 F6 | 	mov	arg01, result1
14a64     01 14 06 F6 | 	mov	arg02, #1
14a68     DC FD B0 FD | 	call	#__system___float_tointeger
14a6c     34 4E 05 F1 | 	add	fp, #52
14a70     A7 FA 61 FC | 	wrlong	result1, fp
14a74     34 4E 05 F1 | 	add	fp, #52
14a78     A7 12 02 FB | 	rdlong	arg01, fp
14a7c     10 4E 05 F1 | 	add	fp, #16
14a80     A7 14 02 FB | 	rdlong	arg02, fp
14a84     78 4E 85 F1 | 	sub	fp, #120
14a88     F8 FA B0 FD | 	call	#__system___float_div
14a8c     FD 12 02 F6 | 	mov	arg01, result1
14a90     01 14 06 F6 | 	mov	arg02, #1
14a94     B0 FD B0 FD | 	call	#__system___float_tointeger
14a98     FD 24 02 F6 | 	mov	local04, result1
14a9c     14 4E 05 F1 | 	add	fp, #20
14aa0     A7 24 62 FC | 	wrlong	local04, fp
14aa4     5C 4E 05 F1 | 	add	fp, #92
14aa8     A7 14 02 FB | 	rdlong	arg02, fp
14aac     70 4E 85 F1 | 	sub	fp, #112
14ab0     00 00 23 FF 
14ab4     00 12 06 F6 | 	mov	arg01, ##1174405120
14ab8     C4 F8 B0 FD | 	call	#__system___float_mul
14abc     FD 12 02 F6 | 	mov	arg01, result1
14ac0     01 14 06 F6 | 	mov	arg02, #1
14ac4     80 FD B0 FD | 	call	#__system___float_tointeger
14ac8     0D 24 C6 F9 | 	decod	local04, #13
14acc     FD 24 02 F1 | 	add	local04, result1
14ad0     18 4E 05 F1 | 	add	fp, #24
14ad4     A7 24 62 FC | 	wrlong	local04, fp
14ad8     5C 4E 05 F1 | 	add	fp, #92
14adc     A7 14 02 FB | 	rdlong	arg02, fp
14ae0     74 4E 85 F1 | 	sub	fp, #116
14ae4     00 3D 22 FF 
14ae8     00 12 06 F6 | 	mov	arg01, ##1148846080
14aec     90 F8 B0 FD | 	call	#__system___float_mul
14af0     FD 12 02 F6 | 	mov	arg01, result1
14af4     01 14 06 F6 | 	mov	arg02, #1
14af8     4C FD B0 FD | 	call	#__system___float_tointeger
14afc     1C 4E 05 F1 | 	add	fp, #28
14b00     A7 FA 61 FC | 	wrlong	result1, fp
14b04     37 00 00 FF 
14b08     10 E4 05 F1 | 	add	objptr, ##28176
14b0c     F2 24 02 FB | 	rdlong	local04, objptr
14b10     37 00 00 FF 
14b14     10 E4 85 F1 | 	sub	objptr, ##28176
14b18     10 4E 85 F1 | 	sub	fp, #16
14b1c     A7 20 02 FB | 	rdlong	local02, fp
14b20     06 20 66 F0 | 	shl	local02, #6
14b24     10 25 02 F1 | 	add	local04, local02
14b28     04 4E 85 F1 | 	sub	fp, #4
14b2c     A7 24 62 FC | 	wrlong	local04, fp
14b30                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
14b30                 | ' speed=round(speed_coeff/slen)
14b30                 | ' ipan=8192+round(8192*pan)
14b30                 | ' ivol=round(1000.0*vol)
14b30                 | ' base2=base+64*channel
14b30                 | ' if wave <32 then 
14b30     18 4E 05 F1 | 	add	fp, #24
14b34     A7 24 02 FB | 	rdlong	local04, fp
14b38     20 4E 85 F1 | 	sub	fp, #32
14b3c     20 24 56 F2 | 	cmps	local04, #32 wc
14b40     2C 00 90 3D |  if_ae	jmp	#LR__1739
14b44     08 4E 05 F1 | 	add	fp, #8
14b48     A7 12 02 FB | 	rdlong	arg01, fp
14b4c     08 12 06 F1 | 	add	arg01, #8
14b50     18 4E 05 F1 | 	add	fp, #24
14b54     A7 14 02 FB | 	rdlong	arg02, fp
14b58     20 4E 85 F1 | 	sub	fp, #32
14b5c     0B 14 66 F0 | 	shl	arg02, #11
14b60     00 00 60 FF 
14b64     00 14 06 F1 | 	add	arg02, ##-1073741824
14b68     09 15 62 FC | 	wrlong	arg02, arg01
14b6c     18 00 90 FD | 	jmp	#LR__1740
14b70                 | LR__1739
14b70     08 4E 05 F1 | 	add	fp, #8
14b74     A7 12 02 FB | 	rdlong	arg01, fp
14b78     08 4E 85 F1 | 	sub	fp, #8
14b7c     08 12 06 F1 | 	add	arg01, #8
14b80     00 00 E4 FF 
14b84     09 01 68 FC | 	wrlong	##-939524096, arg01
14b88                 | LR__1740
14b88     08 4E 05 F1 | 	add	fp, #8
14b8c     A7 12 02 FB | 	rdlong	arg01, fp
14b90     10 12 06 F1 | 	add	arg01, #16
14b94     04 00 80 FF 
14b98     09 01 68 FC | 	wrlong	##2048, arg01
14b9c     A7 12 02 FB | 	rdlong	arg01, fp
14ba0     0C 12 06 F1 | 	add	arg01, #12
14ba4     09 01 68 FC | 	wrlong	#0, arg01
14ba8     A7 12 02 FB | 	rdlong	arg01, fp
14bac     14 12 06 F1 | 	add	arg01, #20
14bb0     14 4E 05 F1 | 	add	fp, #20
14bb4     A7 14 02 FB | 	rdlong	arg02, fp
14bb8     09 15 52 FC | 	wrword	arg02, arg01
14bbc     14 4E 85 F1 | 	sub	fp, #20
14bc0     A7 12 02 FB | 	rdlong	arg01, fp
14bc4     16 12 06 F1 | 	add	arg01, #22
14bc8     10 4E 05 F1 | 	add	fp, #16
14bcc     A7 14 02 FB | 	rdlong	arg02, fp
14bd0     09 15 52 FC | 	wrword	arg02, arg01
14bd4                 | ' lpoke base2+16,2048
14bd4                 | ' lpoke base2+12,0
14bd4                 | ' dpoke base2+20,ivol 
14bd4                 | ' dpoke base2+22,ipan 
14bd4                 | ' if wave<32 then
14bd4     08 4E 05 F1 | 	add	fp, #8
14bd8     A7 24 02 FB | 	rdlong	local04, fp
14bdc     20 4E 85 F1 | 	sub	fp, #32
14be0     20 24 56 F2 | 	cmps	local04, #32 wc
14be4     38 00 90 3D |  if_ae	jmp	#LR__1741
14be8     08 4E 05 F1 | 	add	fp, #8
14bec     A7 12 02 FB | 	rdlong	arg01, fp
14bf0     18 12 06 F1 | 	add	arg01, #24
14bf4     2C 4E 05 F1 | 	add	fp, #44
14bf8     A7 14 02 FB | 	rdlong	arg02, fp
14bfc     09 15 52 FC | 	wrword	arg02, arg01
14c00     2C 4E 85 F1 | 	sub	fp, #44
14c04     A7 12 02 FB | 	rdlong	arg01, fp
14c08     1A 12 06 F1 | 	add	arg01, #26
14c0c     08 4E 05 F1 | 	add	fp, #8
14c10     A7 14 02 FB | 	rdlong	arg02, fp
14c14     10 4E 85 F1 | 	sub	fp, #16
14c18     09 15 52 FC | 	wrword	arg02, arg01
14c1c     48 00 90 FD | 	jmp	#LR__1742
14c20                 | LR__1741
14c20     08 4E 05 F1 | 	add	fp, #8
14c24     A7 24 02 FB | 	rdlong	local04, fp
14c28     18 24 06 F1 | 	add	local04, #24
14c2c     64 4E 05 F1 | 	add	fp, #100
14c30     A7 14 02 FB | 	rdlong	arg02, fp
14c34     6C 4E 85 F1 | 	sub	fp, #108
14c38     3E 2C 25 FF 
14c3c     3C 12 06 F6 | 	mov	arg01, ##1247312956
14c40     40 F9 B0 FD | 	call	#__system___float_div
14c44     FD 12 02 F6 | 	mov	arg01, result1
14c48     01 14 06 F6 | 	mov	arg02, #1
14c4c     F8 FB B0 FD | 	call	#__system___float_tointeger
14c50     12 FB 51 FC | 	wrword	result1, local04
14c54     08 4E 05 F1 | 	add	fp, #8
14c58     A7 12 02 FB | 	rdlong	arg01, fp
14c5c     08 4E 85 F1 | 	sub	fp, #8
14c60     1A 12 06 F1 | 	add	arg01, #26
14c64     09 01 5A FC | 	wrword	#256, arg01
14c68                 | LR__1742
14c68     08 4E 05 F1 | 	add	fp, #8
14c6c     A7 12 02 FB | 	rdlong	arg01, fp
14c70     1C 12 06 F1 | 	add	arg01, #28
14c74     09 01 68 FC | 	wrlong	#0, arg01
14c78     A7 12 02 FB | 	rdlong	arg01, fp
14c7c     20 12 06 F1 | 	add	arg01, #32
14c80     09 01 68 FC | 	wrlong	#0, arg01
14c84                 | ' lpoke base2+28,$0000_0000
14c84                 | ' lpoke base2+32,0 
14c84                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
14c84     1C 4E 05 F1 | 	add	fp, #28
14c88     A7 24 02 FB | 	rdlong	local04, fp
14c8c     24 4E 85 F1 | 	sub	fp, #36
14c90     08 24 0E F2 | 	cmp	local04, #8 wz
14c94     18 00 90 5D |  if_ne	jmp	#LR__1743
14c98     08 4E 05 F1 | 	add	fp, #8
14c9c     A7 12 02 FB | 	rdlong	arg01, fp
14ca0     08 4E 85 F1 | 	sub	fp, #8
14ca4     24 12 06 F1 | 	add	arg01, #36
14ca8     09 01 68 FC | 	wrlong	#0, arg01
14cac     34 00 90 FD | 	jmp	#LR__1744
14cb0                 | LR__1743
14cb0     08 4E 05 F1 | 	add	fp, #8
14cb4     A7 12 02 FB | 	rdlong	arg01, fp
14cb8     24 12 06 F1 | 	add	arg01, #36
14cbc     1C 4E 05 F1 | 	add	fp, #28
14cc0     A7 14 02 FB | 	rdlong	arg02, fp
14cc4     24 4E 85 F1 | 	sub	fp, #36
14cc8     09 14 66 F0 | 	shl	arg02, #9
14ccc     0C 00 00 FF 
14cd0     D8 E4 05 F1 | 	add	objptr, ##6360
14cd4     F2 14 02 F1 | 	add	arg02, objptr
14cd8     0C 00 00 FF 
14cdc     D8 E4 85 F1 | 	sub	objptr, ##6360
14ce0     09 15 62 FC | 	wrlong	arg02, arg01
14ce4                 | LR__1744
14ce4     08 4E 05 F1 | 	add	fp, #8
14ce8     A7 12 02 FB | 	rdlong	arg01, fp
14cec     28 12 06 F1 | 	add	arg01, #40
14cf0     0C 4E 05 F1 | 	add	fp, #12
14cf4     A7 14 02 FB | 	rdlong	arg02, fp
14cf8     09 15 62 FC | 	wrlong	arg02, arg01
14cfc     0C 4E 85 F1 | 	sub	fp, #12
14d00     A7 12 02 FB | 	rdlong	arg01, fp
14d04     2C 12 06 F1 | 	add	arg01, #44
14d08     24 4E 05 F1 | 	add	fp, #36
14d0c     A7 14 02 FB | 	rdlong	arg02, fp
14d10     09 15 62 FC | 	wrlong	arg02, arg01
14d14                 | ' lpoke base2+40,speed 
14d14                 | ' lpoke base2+44,sus 
14d14                 | ' if delay>0 then waitms(delay) 
14d14     04 4E 85 F1 | 	sub	fp, #4
14d18     A7 24 02 FB | 	rdlong	local04, fp
14d1c     28 4E 85 F1 | 	sub	fp, #40
14d20     01 24 56 F2 | 	cmps	local04, #1 wc
14d24     28 4E 05 31 |  if_ae	add	fp, #40
14d28     A7 12 02 3B |  if_ae	rdlong	arg01, fp
14d2c     28 4E 85 31 |  if_ae	sub	fp, #40
14d30     84 CB B0 3D |  if_ae	call	#__system___waitms
14d34     A7 F0 03 F6 | 	mov	ptra, fp
14d38     B2 00 A0 FD | 	call	#popregs_
14d3c                 | _do_play_ret
14d3c     2D 00 64 FD | 	ret
14d40                 | 
14d40                 | ' 
14d40                 | ' '-------------------- plot
14d40                 | ' 
14d40                 | ' sub do_plot
14d40                 | _do_plot
14d40     00 4A 05 F6 | 	mov	COUNT_, #0
14d44     A8 00 A0 FD | 	call	#pushregs_
14d48     20 F0 07 F1 | 	add	ptra, #32
14d4c     C8 6A BF FD | 	call	#_pop
14d50     FD 16 02 F6 | 	mov	arg03, result1
14d54     FE 14 02 F6 | 	mov	arg02, result2
14d58     FF 12 02 F6 | 	mov	arg01, result3
14d5c     0C 4E 05 F1 | 	add	fp, #12
14d60     A7 16 62 FC | 	wrlong	arg03, fp
14d64     04 4E 05 F1 | 	add	fp, #4
14d68     A7 14 62 FC | 	wrlong	arg02, fp
14d6c     04 4E 05 F1 | 	add	fp, #4
14d70     A7 12 62 FC | 	wrlong	arg01, fp
14d74     14 4E 85 F1 | 	sub	fp, #20
14d78     9C 6A BF FD | 	call	#_pop
14d7c     FF 16 02 F6 | 	mov	arg03, result3
14d80     A7 FA 61 FC | 	wrlong	result1, fp
14d84     04 4E 05 F1 | 	add	fp, #4
14d88     A7 FC 61 FC | 	wrlong	result2, fp
14d8c     04 4E 05 F1 | 	add	fp, #4
14d90     A7 16 62 FC | 	wrlong	arg03, fp
14d94     08 4E 85 F1 | 	sub	fp, #8
14d98     A7 12 02 F6 | 	mov	arg01, fp
14d9c     5C 6C BF FD | 	call	#_converttoint
14da0     18 4E 05 F1 | 	add	fp, #24
14da4     A7 FA 61 FC | 	wrlong	result1, fp
14da8     0C 4E 85 F1 | 	sub	fp, #12
14dac     A7 12 02 F6 | 	mov	arg01, fp
14db0     0C 4E 85 F1 | 	sub	fp, #12
14db4     44 6C BF FD | 	call	#_converttoint
14db8     1C 4E 05 F1 | 	add	fp, #28
14dbc     A7 FA 61 FC | 	wrlong	result1, fp
14dc0     04 4E 85 F1 | 	sub	fp, #4
14dc4     A7 16 02 FB | 	rdlong	arg03, fp
14dc8     37 00 00 FF 
14dcc     2C E4 05 F1 | 	add	objptr, ##28204
14dd0     F2 16 62 FC | 	wrlong	arg03, objptr
14dd4     04 4E 05 F1 | 	add	fp, #4
14dd8     A7 14 02 FB | 	rdlong	arg02, fp
14ddc     1C 4E 85 F1 | 	sub	fp, #28
14de0     04 E4 05 F1 | 	add	objptr, #4
14de4     F2 14 62 FC | 	wrlong	arg02, objptr
14de8     04 E4 85 F1 | 	sub	objptr, #4
14dec     F2 12 02 FB | 	rdlong	arg01, objptr
14df0     04 E4 85 F1 | 	sub	objptr, #4
14df4     F2 16 02 FB | 	rdlong	arg03, objptr
14df8     37 00 00 FF 
14dfc     28 E4 85 F1 | 	sub	objptr, ##28200
14e00     10 A2 B0 FD | 	call	#_hg010b_spin2_putpixel
14e04     A7 F0 03 F6 | 	mov	ptra, fp
14e08     B2 00 A0 FD | 	call	#popregs_
14e0c                 | _do_plot_ret
14e0c     2D 00 64 FD | 	ret
14e10                 | 
14e10                 | ' 
14e10                 | ' '-------------------- poke
14e10                 | ' 
14e10                 | ' sub do_poke
14e10                 | _do_poke
14e10     01 4A 05 F6 | 	mov	COUNT_, #1
14e14     A8 00 A0 FD | 	call	#pushregs_
14e18     20 F0 07 F1 | 	add	ptra, #32
14e1c     F8 69 BF FD | 	call	#_pop
14e20     FD 14 02 F6 | 	mov	arg02, result1
14e24     FE 12 02 F6 | 	mov	arg01, result2
14e28     FF 1E 02 F6 | 	mov	local01, result3
14e2c     A7 14 62 FC | 	wrlong	arg02, fp
14e30     04 4E 05 F1 | 	add	fp, #4
14e34     A7 12 62 FC | 	wrlong	arg01, fp
14e38     04 4E 05 F1 | 	add	fp, #4
14e3c     A7 1E 62 FC | 	wrlong	local01, fp
14e40     08 4E 85 F1 | 	sub	fp, #8
14e44     D0 69 BF FD | 	call	#_pop
14e48     FF 1E 02 F6 | 	mov	local01, result3
14e4c     0C 4E 05 F1 | 	add	fp, #12
14e50     A7 FA 61 FC | 	wrlong	result1, fp
14e54     04 4E 05 F1 | 	add	fp, #4
14e58     A7 FC 61 FC | 	wrlong	result2, fp
14e5c     04 4E 05 F1 | 	add	fp, #4
14e60     A7 1E 62 FC | 	wrlong	local01, fp
14e64     08 4E 85 F1 | 	sub	fp, #8
14e68     A7 12 02 F6 | 	mov	arg01, fp
14e6c     0C 4E 85 F1 | 	sub	fp, #12
14e70     88 6B BF FD | 	call	#_converttoint
14e74     18 4E 05 F1 | 	add	fp, #24
14e78     A7 FA 61 FC | 	wrlong	result1, fp
14e7c     18 4E 85 F1 | 	sub	fp, #24
14e80     A7 12 02 F6 | 	mov	arg01, fp
14e84     74 6B BF FD | 	call	#_converttoint
14e88     1C 4E 05 F1 | 	add	fp, #28
14e8c     A7 FA 61 FC | 	wrlong	result1, fp
14e90                 | ' t1=pop() 'value
14e90                 | ' t2=pop() 
14e90                 | ' a=converttoint(t2) : v=converttoint(t1)
14e90                 | ' if a<$80000 then poke a,v else pspoke a,v
14e90     04 4E 85 F1 | 	sub	fp, #4
14e94     A7 1E 02 FB | 	rdlong	local01, fp
14e98     18 4E 85 F1 | 	sub	fp, #24
14e9c     00 04 00 FF 
14ea0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
14ea4     1C 00 90 3D |  if_ae	jmp	#LR__1750
14ea8     18 4E 05 F1 | 	add	fp, #24
14eac     A7 12 02 FB | 	rdlong	arg01, fp
14eb0     04 4E 05 F1 | 	add	fp, #4
14eb4     A7 14 02 FB | 	rdlong	arg02, fp
14eb8     1C 4E 85 F1 | 	sub	fp, #28
14ebc     09 15 42 FC | 	wrbyte	arg02, arg01
14ec0     18 00 90 FD | 	jmp	#LR__1751
14ec4                 | LR__1750
14ec4     18 4E 05 F1 | 	add	fp, #24
14ec8     A7 12 02 FB | 	rdlong	arg01, fp
14ecc     04 4E 05 F1 | 	add	fp, #4
14ed0     A7 14 02 FB | 	rdlong	arg02, fp
14ed4     1C 4E 85 F1 | 	sub	fp, #28
14ed8     44 93 B0 FD | 	call	#_pspoke
14edc                 | LR__1751
14edc     A7 F0 03 F6 | 	mov	ptra, fp
14ee0     B2 00 A0 FD | 	call	#popregs_
14ee4                 | _do_poke_ret
14ee4     2D 00 64 FD | 	ret
14ee8                 | 
14ee8                 | ' 
14ee8                 | ' '-------------------- pop
14ee8                 | ' 
14ee8                 | ' sub do_pop()
14ee8                 | _do_pop
14ee8                 | ' if gosubtop>0 then  gosubtop -=1 
14ee8     50 00 00 FF 
14eec     0C E5 05 F1 | 	add	objptr, ##41228
14ef0     F2 00 02 FB | 	rdlong	_var01, objptr
14ef4     50 00 00 FF 
14ef8     0C E5 85 F1 | 	sub	objptr, ##41228
14efc     01 00 56 F2 | 	cmps	_var01, #1 wc
14f00     50 00 00 3F 
14f04     0C E5 05 31 |  if_ae	add	objptr, ##41228
14f08     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
14f0c     01 00 86 31 |  if_ae	sub	_var01, #1
14f10     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
14f14     50 00 00 3F 
14f18     0C E5 85 31 |  if_ae	sub	objptr, ##41228
14f1c                 | _do_pop_ret
14f1c     2D 00 64 FD | 	ret
14f20                 | 
14f20                 | ' 
14f20                 | ' '-------------------- position
14f20                 | ' 
14f20                 | ' sub do_position
14f20                 | _do_position
14f20     01 4A 05 F6 | 	mov	COUNT_, #1
14f24     A8 00 A0 FD | 	call	#pushregs_
14f28     18 F0 07 F1 | 	add	ptra, #24
14f2c     E8 68 BF FD | 	call	#_pop
14f30     FD 14 02 F6 | 	mov	arg02, result1
14f34     FE 12 02 F6 | 	mov	arg01, result2
14f38     FF 1E 02 F6 | 	mov	local01, result3
14f3c     A7 14 62 FC | 	wrlong	arg02, fp
14f40     04 4E 05 F1 | 	add	fp, #4
14f44     A7 12 62 FC | 	wrlong	arg01, fp
14f48     04 4E 05 F1 | 	add	fp, #4
14f4c     A7 1E 62 FC | 	wrlong	local01, fp
14f50     08 4E 85 F1 | 	sub	fp, #8
14f54     C0 68 BF FD | 	call	#_pop
14f58     FF 1E 02 F6 | 	mov	local01, result3
14f5c     0C 4E 05 F1 | 	add	fp, #12
14f60     A7 FA 61 FC | 	wrlong	result1, fp
14f64     04 4E 05 F1 | 	add	fp, #4
14f68     A7 FC 61 FC | 	wrlong	result2, fp
14f6c     04 4E 05 F1 | 	add	fp, #4
14f70     A7 1E 62 FC | 	wrlong	local01, fp
14f74     08 4E 85 F1 | 	sub	fp, #8
14f78     A7 12 02 F6 | 	mov	arg01, fp
14f7c     0C 4E 85 F1 | 	sub	fp, #12
14f80     78 6A BF FD | 	call	#_converttoint
14f84     FD 1E 02 F6 | 	mov	local01, result1
14f88     A7 12 02 F6 | 	mov	arg01, fp
14f8c     6C 6A BF FD | 	call	#_converttoint
14f90     FD 14 02 F6 | 	mov	arg02, result1
14f94     0F 13 02 F6 | 	mov	arg01, local01
14f98     3C AC B0 FD | 	call	#_hg010b_spin2_setcursorpos
14f9c     A7 F0 03 F6 | 	mov	ptra, fp
14fa0     B2 00 A0 FD | 	call	#popregs_
14fa4                 | _do_position_ret
14fa4     2D 00 64 FD | 	ret
14fa8                 | 
14fa8                 | ' 
14fa8                 | ' '-------------------- print
14fa8                 | ' 
14fa8                 | ' sub do_print  
14fa8                 | _do_print
14fa8     0B 4A 05 F6 | 	mov	COUNT_, #11
14fac     A8 00 A0 FD | 	call	#pushregs_
14fb0     00 24 06 F6 | 	mov	local04, #0
14fb4     60 68 BF FD | 	call	#_pop
14fb8     FD 26 02 F6 | 	mov	local05, result1
14fbc     FE 28 02 F6 | 	mov	local06, result2
14fc0     FF 2A 02 F6 | 	mov	local07, result3
14fc4     13 1F 02 F6 | 	mov	local01, local05
14fc8     14 21 02 F6 | 	mov	local02, local06
14fcc     15 23 02 F6 | 	mov	local03, local07
14fd0                 | '  
14fd0                 | ' r=0
14fd0                 | ' t1=pop() 
14fd0                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14fd0     21 22 0E F2 | 	cmp	local03, #33 wz
14fd4     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14fd8     20 00 90 5D |  if_ne	jmp	#LR__1760
14fdc     11 25 02 F6 | 	mov	local04, local03
14fe0     34 68 BF FD | 	call	#_pop
14fe4     FD 26 02 F6 | 	mov	local05, result1
14fe8     FE 28 02 F6 | 	mov	local06, result2
14fec     FF 2A 02 F6 | 	mov	local07, result3
14ff0     13 1F 02 F6 | 	mov	local01, local05
14ff4     14 21 02 F6 | 	mov	local02, local06
14ff8     15 23 02 F6 | 	mov	local03, local07
14ffc                 | LR__1760
14ffc                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14ffc     20 22 0E F2 | 	cmp	local03, #32 wz
15000     11 25 02 A6 |  if_e	mov	local04, local03
15004                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
15004     FF 22 0E F2 | 	cmp	local03, #255 wz
15008     10 00 90 5D |  if_ne	jmp	#LR__1761
1500c     0F 13 02 F6 | 	mov	arg01, local01
15010     00 14 06 F6 | 	mov	arg02, #0
15014     EC 8F B0 FD | 	call	#_printerror
15018     D4 04 90 FD | 	jmp	#LR__1780
1501c                 | LR__1761
1501c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
1501c     2B 22 0E F2 | 	cmp	local03, #43 wz
15020     14 00 90 5D |  if_ne	jmp	#LR__1762
15024     0F 13 02 F6 | 	mov	arg01, local01
15028     64 69 BF FD | 	call	#_convertstring
1502c     FD 26 02 F6 | 	mov	local05, result1
15030     13 1F 02 F6 | 	mov	local01, local05
15034     1F 22 06 F6 | 	mov	local03, #31
15038                 | LR__1762
15038                 | ' 
15038                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
15038     2C 22 0E F2 | 	cmp	local03, #44 wz
1503c     80 00 90 5D |  if_ne	jmp	#LR__1763
15040     00 12 06 F6 | 	mov	arg01, #0
15044     A8 22 B1 FD | 	call	#__system___getiolock_0570
15048     FD 12 02 F6 | 	mov	arg01, result1
1504c     74 C5 B0 FD | 	call	#__system___lockmem
15050     8D 01 00 FF 
15054     CB 14 06 F6 | 	mov	arg02, ##@LR__5596
15058     00 12 06 F6 | 	mov	arg01, #0
1505c     00 16 06 F6 | 	mov	arg03, #0
15060     54 D2 B0 FD | 	call	#__system___basic_print_string
15064     0A 2C 06 F6 | 	mov	local08, #10
15068     00 12 06 F6 | 	mov	arg01, #0
1506c     0F 15 02 F6 | 	mov	arg02, local01
15070     00 16 06 F6 | 	mov	arg03, #0
15074     0A 18 06 F6 | 	mov	arg04, #10
15078     80 D2 B0 FD | 	call	#__system___basic_print_integer
1507c     FD 2E 02 F6 | 	mov	local09, result1
15080     00 12 06 F6 | 	mov	arg01, #0
15084     0A 14 06 F6 | 	mov	arg02, #10
15088     00 16 06 F6 | 	mov	arg03, #0
1508c     D0 D1 B0 FD | 	call	#__system___basic_print_char
15090     01 30 06 F6 | 	mov	local10, #1
15094     00 12 06 F6 | 	mov	arg01, #0
15098     54 22 B1 FD | 	call	#__system___getiolock_0570
1509c     FD 00 68 FC | 	wrlong	#0, result1
150a0     00 32 06 F6 | 	mov	local11, #0
150a4     70 67 BF FD | 	call	#_pop
150a8     FD 26 02 F6 | 	mov	local05, result1
150ac     FE 28 02 F6 | 	mov	local06, result2
150b0     FF 2A 02 F6 | 	mov	local07, result3
150b4     13 1F 02 F6 | 	mov	local01, local05
150b8     14 21 02 F6 | 	mov	local02, local06
150bc     15 23 02 F6 | 	mov	local03, local07
150c0                 | LR__1763
150c0                 | ' 
150c0                 | ' if r=print_mod_comma  then
150c0     21 24 0E F2 | 	cmp	local04, #33 wz
150c4     AC 01 90 5D |  if_ne	jmp	#LR__1768
150c8                 | '   if t1.result_type=result_int then print t1.result.iresult,
150c8     1C 22 0E F2 | 	cmp	local03, #28 wz
150cc     64 00 90 5D |  if_ne	jmp	#LR__1764
150d0     00 12 06 F6 | 	mov	arg01, #0
150d4     18 22 B1 FD | 	call	#__system___getiolock_0570
150d8     FD 12 02 F6 | 	mov	arg01, result1
150dc     E4 C4 B0 FD | 	call	#__system___lockmem
150e0     00 28 06 F6 | 	mov	local06, #0
150e4     00 12 06 F6 | 	mov	arg01, #0
150e8     0F 15 02 F6 | 	mov	arg02, local01
150ec     00 16 06 F6 | 	mov	arg03, #0
150f0     0A 18 06 F6 | 	mov	arg04, #10
150f4     04 D2 B0 FD | 	call	#__system___basic_print_integer
150f8     FD 2A 02 F6 | 	mov	local07, result1
150fc     14 27 02 F6 | 	mov	local05, local06
15100     15 27 02 F1 | 	add	local05, local07
15104     00 32 06 F6 | 	mov	local11, #0
15108     00 12 06 F6 | 	mov	arg01, #0
1510c     09 14 06 F6 | 	mov	arg02, #9
15110     00 16 06 F6 | 	mov	arg03, #0
15114     48 D1 B0 FD | 	call	#__system___basic_print_char
15118     FD 2E 02 F6 | 	mov	local09, result1
1511c     FD 26 02 F1 | 	add	local05, result1
15120     00 12 06 F6 | 	mov	arg01, #0
15124     C8 21 B1 FD | 	call	#__system___getiolock_0570
15128     FD 00 68 FC | 	wrlong	#0, result1
1512c     00 FA 05 F6 | 	mov	result1, #0
15130     00 30 06 F6 | 	mov	local10, #0
15134                 | LR__1764
15134                 | '   if t1.result_type=result_uint then print t1.result.uresult,
15134     1D 22 0E F2 | 	cmp	local03, #29 wz
15138     64 00 90 5D |  if_ne	jmp	#LR__1765
1513c     00 12 06 F6 | 	mov	arg01, #0
15140     AC 21 B1 FD | 	call	#__system___getiolock_0570
15144     FD 12 02 F6 | 	mov	arg01, result1
15148     78 C4 B0 FD | 	call	#__system___lockmem
1514c     00 28 06 F6 | 	mov	local06, #0
15150     00 12 06 F6 | 	mov	arg01, #0
15154     0F 15 02 F6 | 	mov	arg02, local01
15158     00 16 06 F6 | 	mov	arg03, #0
1515c     0A 18 06 F6 | 	mov	arg04, #10
15160     D8 D1 B0 FD | 	call	#__system___basic_print_unsigned
15164     FD 2A 02 F6 | 	mov	local07, result1
15168     14 27 02 F6 | 	mov	local05, local06
1516c     15 27 02 F1 | 	add	local05, local07
15170     00 32 06 F6 | 	mov	local11, #0
15174     00 12 06 F6 | 	mov	arg01, #0
15178     09 14 06 F6 | 	mov	arg02, #9
1517c     00 16 06 F6 | 	mov	arg03, #0
15180     DC D0 B0 FD | 	call	#__system___basic_print_char
15184     FD 2E 02 F6 | 	mov	local09, result1
15188     FD 26 02 F1 | 	add	local05, result1
1518c     00 12 06 F6 | 	mov	arg01, #0
15190     5C 21 B1 FD | 	call	#__system___getiolock_0570
15194     FD 00 68 FC | 	wrlong	#0, result1
15198     00 FA 05 F6 | 	mov	result1, #0
1519c     00 30 06 F6 | 	mov	local10, #0
151a0                 | LR__1765
151a0                 | '   if t1.result_type=result_float then print t1.result.fresult,
151a0     1E 22 0E F2 | 	cmp	local03, #30 wz
151a4     64 00 90 5D |  if_ne	jmp	#LR__1766
151a8     00 12 06 F6 | 	mov	arg01, #0
151ac     40 21 B1 FD | 	call	#__system___getiolock_0570
151b0     FD 12 02 F6 | 	mov	arg01, result1
151b4     0C C4 B0 FD | 	call	#__system___lockmem
151b8     00 28 06 F6 | 	mov	local06, #0
151bc     00 12 06 F6 | 	mov	arg01, #0
151c0     0F 15 02 F6 | 	mov	arg02, local01
151c4     00 16 06 F6 | 	mov	arg03, #0
151c8     23 18 06 F6 | 	mov	arg04, #35
151cc     C8 F7 B0 FD | 	call	#__system___basic_print_float
151d0     FD 2A 02 F6 | 	mov	local07, result1
151d4     14 27 02 F6 | 	mov	local05, local06
151d8     15 27 02 F1 | 	add	local05, local07
151dc     00 32 06 F6 | 	mov	local11, #0
151e0     00 12 06 F6 | 	mov	arg01, #0
151e4     09 14 06 F6 | 	mov	arg02, #9
151e8     00 16 06 F6 | 	mov	arg03, #0
151ec     70 D0 B0 FD | 	call	#__system___basic_print_char
151f0     FD 2E 02 F6 | 	mov	local09, result1
151f4     FD 26 02 F1 | 	add	local05, result1
151f8     00 12 06 F6 | 	mov	arg01, #0
151fc     F0 20 B1 FD | 	call	#__system___getiolock_0570
15200     FD 00 68 FC | 	wrlong	#0, result1
15204     00 FA 05 F6 | 	mov	result1, #0
15208     00 30 06 F6 | 	mov	local10, #0
1520c                 | LR__1766
1520c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1520c     1F 22 0E F2 | 	cmp	local03, #31 wz
15210     60 00 90 5D |  if_ne	jmp	#LR__1767
15214     00 12 06 F6 | 	mov	arg01, #0
15218     D4 20 B1 FD | 	call	#__system___getiolock_0570
1521c     FD 12 02 F6 | 	mov	arg01, result1
15220     A0 C3 B0 FD | 	call	#__system___lockmem
15224     00 28 06 F6 | 	mov	local06, #0
15228     00 12 06 F6 | 	mov	arg01, #0
1522c     0F 15 02 F6 | 	mov	arg02, local01
15230     00 16 06 F6 | 	mov	arg03, #0
15234     80 D0 B0 FD | 	call	#__system___basic_print_string
15238     FD 2A 02 F6 | 	mov	local07, result1
1523c     14 27 02 F6 | 	mov	local05, local06
15240     15 27 02 F1 | 	add	local05, local07
15244     00 32 06 F6 | 	mov	local11, #0
15248     00 12 06 F6 | 	mov	arg01, #0
1524c     09 14 06 F6 | 	mov	arg02, #9
15250     00 16 06 F6 | 	mov	arg03, #0
15254     08 D0 B0 FD | 	call	#__system___basic_print_char
15258     FD 2E 02 F6 | 	mov	local09, result1
1525c     FD 26 02 F1 | 	add	local05, result1
15260     00 12 06 F6 | 	mov	arg01, #0
15264     88 20 B1 FD | 	call	#__system___getiolock_0570
15268     FD 00 68 FC | 	wrlong	#0, result1
1526c     00 FA 05 F6 | 	mov	result1, #0
15270     00 30 06 F6 | 	mov	local10, #0
15274                 | LR__1767
15274                 | LR__1768
15274                 | ' if r=print_mod_semicolon then 
15274     22 24 0E F2 | 	cmp	local04, #34 wz
15278     1C 01 90 5D |  if_ne	jmp	#LR__1773
1527c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1527c     1C 22 0E F2 | 	cmp	local03, #28 wz
15280     50 00 90 5D |  if_ne	jmp	#LR__1769
15284     00 12 06 F6 | 	mov	arg01, #0
15288     64 20 B1 FD | 	call	#__system___getiolock_0570
1528c     FD 12 02 F6 | 	mov	arg01, result1
15290     30 C3 B0 FD | 	call	#__system___lockmem
15294     00 28 06 F6 | 	mov	local06, #0
15298     00 30 06 F6 | 	mov	local10, #0
1529c     0A 32 06 F6 | 	mov	local11, #10
152a0     00 12 06 F6 | 	mov	arg01, #0
152a4     0F 15 02 F6 | 	mov	arg02, local01
152a8     00 16 06 F6 | 	mov	arg03, #0
152ac     0A 18 06 F6 | 	mov	arg04, #10
152b0     48 D0 B0 FD | 	call	#__system___basic_print_integer
152b4     FD 2A 02 F6 | 	mov	local07, result1
152b8     14 27 02 F6 | 	mov	local05, local06
152bc     15 27 02 F1 | 	add	local05, local07
152c0     00 12 06 F6 | 	mov	arg01, #0
152c4     28 20 B1 FD | 	call	#__system___getiolock_0570
152c8     FD 00 68 FC | 	wrlong	#0, result1
152cc     00 FA 05 F6 | 	mov	result1, #0
152d0     00 2E 06 F6 | 	mov	local09, #0
152d4                 | LR__1769
152d4                 | '   if t1.result_type=result_uint then print t1.result.uresult;
152d4     1D 22 0E F2 | 	cmp	local03, #29 wz
152d8     50 00 90 5D |  if_ne	jmp	#LR__1770
152dc     00 12 06 F6 | 	mov	arg01, #0
152e0     0C 20 B1 FD | 	call	#__system___getiolock_0570
152e4     FD 12 02 F6 | 	mov	arg01, result1
152e8     D8 C2 B0 FD | 	call	#__system___lockmem
152ec     00 28 06 F6 | 	mov	local06, #0
152f0     00 30 06 F6 | 	mov	local10, #0
152f4     0A 32 06 F6 | 	mov	local11, #10
152f8     00 12 06 F6 | 	mov	arg01, #0
152fc     0F 15 02 F6 | 	mov	arg02, local01
15300     00 16 06 F6 | 	mov	arg03, #0
15304     0A 18 06 F6 | 	mov	arg04, #10
15308     30 D0 B0 FD | 	call	#__system___basic_print_unsigned
1530c     FD 2A 02 F6 | 	mov	local07, result1
15310     14 27 02 F6 | 	mov	local05, local06
15314     15 27 02 F1 | 	add	local05, local07
15318     00 12 06 F6 | 	mov	arg01, #0
1531c     D0 1F B1 FD | 	call	#__system___getiolock_0570
15320     FD 00 68 FC | 	wrlong	#0, result1
15324     00 FA 05 F6 | 	mov	result1, #0
15328     00 2E 06 F6 | 	mov	local09, #0
1532c                 | LR__1770
1532c                 | '   if t1.result_type=result_float then print t1.result.fresult;
1532c     1E 22 0E F2 | 	cmp	local03, #30 wz
15330     30 00 90 5D |  if_ne	jmp	#LR__1771
15334     00 12 06 F6 | 	mov	arg01, #0
15338     B4 1F B1 FD | 	call	#__system___getiolock_0570
1533c     FD 12 02 F6 | 	mov	arg01, result1
15340     80 C2 B0 FD | 	call	#__system___lockmem
15344     00 12 06 F6 | 	mov	arg01, #0
15348     0F 15 02 F6 | 	mov	arg02, local01
1534c     00 16 06 F6 | 	mov	arg03, #0
15350     23 18 06 F6 | 	mov	arg04, #35
15354     40 F6 B0 FD | 	call	#__system___basic_print_float
15358     00 12 06 F6 | 	mov	arg01, #0
1535c     90 1F B1 FD | 	call	#__system___getiolock_0570
15360     FD 00 68 FC | 	wrlong	#0, result1
15364                 | LR__1771
15364                 | '   if t1.result_type=result_string then print t1.result.sresult;
15364     1F 22 0E F2 | 	cmp	local03, #31 wz
15368     2C 00 90 5D |  if_ne	jmp	#LR__1772
1536c     00 12 06 F6 | 	mov	arg01, #0
15370     7C 1F B1 FD | 	call	#__system___getiolock_0570
15374     FD 12 02 F6 | 	mov	arg01, result1
15378     48 C2 B0 FD | 	call	#__system___lockmem
1537c     00 12 06 F6 | 	mov	arg01, #0
15380     0F 15 02 F6 | 	mov	arg02, local01
15384     00 16 06 F6 | 	mov	arg03, #0
15388     2C CF B0 FD | 	call	#__system___basic_print_string
1538c     00 12 06 F6 | 	mov	arg01, #0
15390     5C 1F B1 FD | 	call	#__system___getiolock_0570
15394     FD 00 68 FC | 	wrlong	#0, result1
15398                 | LR__1772
15398                 | LR__1773
15398                 | ' if r=0 then 
15398     00 24 0E F2 | 	cmp	local04, #0 wz
1539c     1C 01 90 5D |  if_ne	jmp	#LR__1778
153a0                 | '   if t1.result_type=result_int then print t1.result.iresult
153a0     1C 22 0E F2 | 	cmp	local03, #28 wz
153a4     40 00 90 5D |  if_ne	jmp	#LR__1774
153a8     00 12 06 F6 | 	mov	arg01, #0
153ac     40 1F B1 FD | 	call	#__system___getiolock_0570
153b0     FD 12 02 F6 | 	mov	arg01, result1
153b4     0C C2 B0 FD | 	call	#__system___lockmem
153b8     00 12 06 F6 | 	mov	arg01, #0
153bc     0F 15 02 F6 | 	mov	arg02, local01
153c0     00 16 06 F6 | 	mov	arg03, #0
153c4     0A 18 06 F6 | 	mov	arg04, #10
153c8     30 CF B0 FD | 	call	#__system___basic_print_integer
153cc     00 12 06 F6 | 	mov	arg01, #0
153d0     0A 14 06 F6 | 	mov	arg02, #10
153d4     00 16 06 F6 | 	mov	arg03, #0
153d8     84 CE B0 FD | 	call	#__system___basic_print_char
153dc     00 12 06 F6 | 	mov	arg01, #0
153e0     0C 1F B1 FD | 	call	#__system___getiolock_0570
153e4     FD 00 68 FC | 	wrlong	#0, result1
153e8                 | LR__1774
153e8                 | '   if t1.result_type=result_uint then print t1.result.uresult
153e8     1D 22 0E F2 | 	cmp	local03, #29 wz
153ec     40 00 90 5D |  if_ne	jmp	#LR__1775
153f0     00 12 06 F6 | 	mov	arg01, #0
153f4     F8 1E B1 FD | 	call	#__system___getiolock_0570
153f8     FD 12 02 F6 | 	mov	arg01, result1
153fc     C4 C1 B0 FD | 	call	#__system___lockmem
15400     00 12 06 F6 | 	mov	arg01, #0
15404     0F 15 02 F6 | 	mov	arg02, local01
15408     00 16 06 F6 | 	mov	arg03, #0
1540c     0A 18 06 F6 | 	mov	arg04, #10
15410     28 CF B0 FD | 	call	#__system___basic_print_unsigned
15414     00 12 06 F6 | 	mov	arg01, #0
15418     0A 14 06 F6 | 	mov	arg02, #10
1541c     00 16 06 F6 | 	mov	arg03, #0
15420     3C CE B0 FD | 	call	#__system___basic_print_char
15424     00 12 06 F6 | 	mov	arg01, #0
15428     C4 1E B1 FD | 	call	#__system___getiolock_0570
1542c     FD 00 68 FC | 	wrlong	#0, result1
15430                 | LR__1775
15430                 | '   if t1.result_type=result_float then print t1.result.fresult
15430     1E 22 0E F2 | 	cmp	local03, #30 wz
15434     40 00 90 5D |  if_ne	jmp	#LR__1776
15438     00 12 06 F6 | 	mov	arg01, #0
1543c     B0 1E B1 FD | 	call	#__system___getiolock_0570
15440     FD 12 02 F6 | 	mov	arg01, result1
15444     7C C1 B0 FD | 	call	#__system___lockmem
15448     00 12 06 F6 | 	mov	arg01, #0
1544c     0F 15 02 F6 | 	mov	arg02, local01
15450     00 16 06 F6 | 	mov	arg03, #0
15454     23 18 06 F6 | 	mov	arg04, #35
15458     3C F5 B0 FD | 	call	#__system___basic_print_float
1545c     00 12 06 F6 | 	mov	arg01, #0
15460     0A 14 06 F6 | 	mov	arg02, #10
15464     00 16 06 F6 | 	mov	arg03, #0
15468     F4 CD B0 FD | 	call	#__system___basic_print_char
1546c     00 12 06 F6 | 	mov	arg01, #0
15470     7C 1E B1 FD | 	call	#__system___getiolock_0570
15474     FD 00 68 FC | 	wrlong	#0, result1
15478                 | LR__1776
15478                 | '   if t1.result_type=result_string then print t1.result.sresult
15478     1F 22 0E F2 | 	cmp	local03, #31 wz
1547c     3C 00 90 5D |  if_ne	jmp	#LR__1777
15480     00 12 06 F6 | 	mov	arg01, #0
15484     68 1E B1 FD | 	call	#__system___getiolock_0570
15488     FD 12 02 F6 | 	mov	arg01, result1
1548c     34 C1 B0 FD | 	call	#__system___lockmem
15490     00 12 06 F6 | 	mov	arg01, #0
15494     0F 15 02 F6 | 	mov	arg02, local01
15498     00 16 06 F6 | 	mov	arg03, #0
1549c     18 CE B0 FD | 	call	#__system___basic_print_string
154a0     00 12 06 F6 | 	mov	arg01, #0
154a4     0A 14 06 F6 | 	mov	arg02, #10
154a8     00 16 06 F6 | 	mov	arg03, #0
154ac     B0 CD B0 FD | 	call	#__system___basic_print_char
154b0     00 12 06 F6 | 	mov	arg01, #0
154b4     38 1E B1 FD | 	call	#__system___getiolock_0570
154b8     FD 00 68 FC | 	wrlong	#0, result1
154bc                 | LR__1777
154bc                 | LR__1778
154bc                 | ' if r=print_mod_empty then print
154bc     20 24 0E F2 | 	cmp	local04, #32 wz
154c0     2C 00 90 5D |  if_ne	jmp	#LR__1779
154c4     00 12 06 F6 | 	mov	arg01, #0
154c8     24 1E B1 FD | 	call	#__system___getiolock_0570
154cc     FD 12 02 F6 | 	mov	arg01, result1
154d0     F0 C0 B0 FD | 	call	#__system___lockmem
154d4     00 12 06 F6 | 	mov	arg01, #0
154d8     0A 14 06 F6 | 	mov	arg02, #10
154dc     00 16 06 F6 | 	mov	arg03, #0
154e0     7C CD B0 FD | 	call	#__system___basic_print_char
154e4     00 12 06 F6 | 	mov	arg01, #0
154e8     04 1E B1 FD | 	call	#__system___getiolock_0570
154ec     FD 00 68 FC | 	wrlong	#0, result1
154f0                 | LR__1779
154f0                 | LR__1780
154f0     A7 F0 03 F6 | 	mov	ptra, fp
154f4     B2 00 A0 FD | 	call	#popregs_
154f8                 | _do_print_ret
154f8     2D 00 64 FD | 	ret
154fc                 | 
154fc                 | ' 
154fc                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
154fc                 | ' 
154fc                 | ' sub do_push
154fc                 | _do_push
154fc                 | ' if stackpointer<maxstack then 
154fc     43 00 00 FF 
15500     58 E4 05 F1 | 	add	objptr, ##34392
15504     F2 00 02 FB | 	rdlong	_var01, objptr
15508     43 00 00 FF 
1550c     58 E4 85 F1 | 	sub	objptr, ##34392
15510     01 00 00 FF 
15514     00 00 56 F2 | 	cmps	_var01, ##512 wc
15518     F8 00 90 3D |  if_ae	jmp	#LR__1790
1551c     4A 00 00 FF 
15520     80 E4 05 F1 | 	add	objptr, ##38016
15524     F2 02 02 FB | 	rdlong	_var02, objptr
15528     01 05 02 F6 | 	mov	_var03, _var02
1552c     01 04 66 F0 | 	shl	_var03, #1
15530     01 05 02 F1 | 	add	_var03, _var02
15534     02 04 66 F0 | 	shl	_var03, #2
15538     03 00 00 FF 
1553c     04 E4 85 F1 | 	sub	objptr, ##1540
15540     F2 04 02 F1 | 	add	_var03, objptr
15544     02 01 02 FB | 	rdlong	_var01, _var03
15548     04 04 06 F1 | 	add	_var03, #4
1554c     02 07 02 FB | 	rdlong	_var04, _var03
15550     01 05 02 F6 | 	mov	_var03, _var02
15554     01 04 66 F0 | 	shl	_var03, #1
15558     01 05 02 F1 | 	add	_var03, _var02
1555c     02 04 66 F0 | 	shl	_var03, #2
15560     F2 04 02 F1 | 	add	_var03, objptr
15564     08 04 06 F1 | 	add	_var03, #8
15568     02 03 02 FB | 	rdlong	_var02, _var03
1556c     04 00 00 FF 
15570     24 E4 85 F1 | 	sub	objptr, ##2084
15574     F2 04 02 FB | 	rdlong	_var03, objptr
15578     02 09 02 F6 | 	mov	_var05, _var03
1557c     01 08 66 F0 | 	shl	_var05, #1
15580     02 09 02 F1 | 	add	_var05, _var03
15584     02 08 66 F0 | 	shl	_var05, #2
15588     0C 00 00 FF 
1558c     0C E4 85 F1 | 	sub	objptr, ##6156
15590     F2 08 02 F1 | 	add	_var05, objptr
15594     04 01 62 FC | 	wrlong	_var01, _var05
15598     0C 00 00 FF 
1559c     0C E4 05 F1 | 	add	objptr, ##6156
155a0     F2 08 02 FB | 	rdlong	_var05, objptr
155a4     04 05 02 F6 | 	mov	_var03, _var05
155a8     01 04 66 F0 | 	shl	_var03, #1
155ac     04 05 02 F1 | 	add	_var03, _var05
155b0     02 04 66 F0 | 	shl	_var03, #2
155b4     0C 00 00 FF 
155b8     0C E4 85 F1 | 	sub	objptr, ##6156
155bc     F2 04 02 F1 | 	add	_var03, objptr
155c0     04 04 06 F1 | 	add	_var03, #4
155c4     02 07 62 FC | 	wrlong	_var04, _var03
155c8     0C 00 00 FF 
155cc     0C E4 05 F1 | 	add	objptr, ##6156
155d0     F2 08 02 FB | 	rdlong	_var05, objptr
155d4     04 07 02 F6 | 	mov	_var04, _var05
155d8     01 06 66 F0 | 	shl	_var04, #1
155dc     04 07 02 F1 | 	add	_var04, _var05
155e0     02 06 66 F0 | 	shl	_var04, #2
155e4     0C 00 00 FF 
155e8     0C E4 85 F1 | 	sub	objptr, ##6156
155ec     F2 06 02 F1 | 	add	_var04, objptr
155f0     08 06 06 F1 | 	add	_var04, #8
155f4     03 03 62 FC | 	wrlong	_var02, _var04
155f8     0C 00 00 FF 
155fc     0C E4 05 F1 | 	add	objptr, ##6156
15600     F2 00 02 FB | 	rdlong	_var01, objptr
15604     01 00 06 F1 | 	add	_var01, #1
15608     F2 00 62 FC | 	wrlong	_var01, objptr
1560c     43 00 00 FF 
15610     58 E4 85 F1 | 	sub	objptr, ##34392
15614                 | LR__1790
15614                 | _do_push_ret
15614     2D 00 64 FD | 	ret
15618                 | 
15618                 | ' 
15618                 | ' '-------------------- put
15618                 | ' 
15618                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
15618                 | _do_put
15618     03 4A 05 F6 | 	mov	COUNT_, #3
1561c     A8 00 A0 FD | 	call	#pushregs_
15620     28 F0 07 F1 | 	add	ptra, #40
15624     4A 00 00 FF 
15628     80 E4 05 F1 | 	add	objptr, ##38016
1562c     F2 1A 02 FB | 	rdlong	arg05, objptr
15630     0D 19 02 F6 | 	mov	arg04, arg05
15634     01 18 66 F0 | 	shl	arg04, #1
15638     0D 19 02 F1 | 	add	arg04, arg05
1563c     02 18 66 F0 | 	shl	arg04, #2
15640     03 00 00 FF 
15644     04 E4 85 F1 | 	sub	objptr, ##1540
15648     F2 18 02 F1 | 	add	arg04, objptr
1564c     0C 1B 02 FB | 	rdlong	arg05, arg04
15650     A7 1A 62 FC | 	wrlong	arg05, fp
15654                 | ' 
15654                 | ' numpar=compiledline(lineptr_e).result.uresult
15654                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
15654     04 1A 0E F2 | 	cmp	arg05, #4 wz
15658     47 00 00 FF 
1565c     7C E4 85 F1 | 	sub	objptr, ##36476
15660     48 00 90 5D |  if_ne	jmp	#LR__1800
15664     B0 61 BF FD | 	call	#_pop
15668     FF 1A 02 F6 | 	mov	arg05, result3
1566c     1C 4E 05 F1 | 	add	fp, #28
15670     A7 FA 61 FC | 	wrlong	result1, fp
15674     04 4E 05 F1 | 	add	fp, #4
15678     A7 FC 61 FC | 	wrlong	result2, fp
1567c     04 4E 05 F1 | 	add	fp, #4
15680     A7 1A 62 FC | 	wrlong	arg05, fp
15684     08 4E 85 F1 | 	sub	fp, #8
15688     A7 12 02 F6 | 	mov	arg01, fp
1568c     1C 4E 85 F1 | 	sub	fp, #28
15690     68 63 BF FD | 	call	#_converttoint
15694     52 00 00 FF 
15698     18 E4 05 F1 | 	add	objptr, ##42008
1569c     F2 FA 61 FC | 	wrlong	result1, objptr
156a0     52 00 00 FF 
156a4     18 E4 85 F1 | 	sub	objptr, ##42008
156a8     18 00 90 FD | 	jmp	#LR__1801
156ac                 | LR__1800
156ac     52 00 00 FF 
156b0     18 E4 05 F1 | 	add	objptr, ##42008
156b4     FF FF FF FF 
156b8     F2 FE 6B FC | 	wrlong	##-1, objptr
156bc     52 00 00 FF 
156c0     18 E4 85 F1 | 	sub	objptr, ##42008
156c4                 | LR__1801
156c4                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
156c4     A7 1A 02 FB | 	rdlong	arg05, fp
156c8     03 1A 56 F2 | 	cmps	arg05, #3 wc
156cc     40 00 90 CD |  if_b	jmp	#LR__1802
156d0     44 61 BF FD | 	call	#_pop
156d4     FF 1A 02 F6 | 	mov	arg05, result3
156d8     1C 4E 05 F1 | 	add	fp, #28
156dc     A7 FA 61 FC | 	wrlong	result1, fp
156e0     04 4E 05 F1 | 	add	fp, #4
156e4     A7 FC 61 FC | 	wrlong	result2, fp
156e8     04 4E 05 F1 | 	add	fp, #4
156ec     A7 1A 62 FC | 	wrlong	arg05, fp
156f0     08 4E 85 F1 | 	sub	fp, #8
156f4     A7 12 02 F6 | 	mov	arg01, fp
156f8     1C 4E 85 F1 | 	sub	fp, #28
156fc     FC 62 BF FD | 	call	#_converttoint
15700     08 4E 05 F1 | 	add	fp, #8
15704     A7 FA 61 FC | 	wrlong	result1, fp
15708     08 4E 85 F1 | 	sub	fp, #8
1570c     0C 00 90 FD | 	jmp	#LR__1803
15710                 | LR__1802
15710     08 4E 05 F1 | 	add	fp, #8
15714     A7 02 68 FC | 	wrlong	#1, fp
15718     08 4E 85 F1 | 	sub	fp, #8
1571c                 | LR__1803
1571c                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1571c     A7 18 02 FB | 	rdlong	arg04, fp
15720     02 18 56 F2 | 	cmps	arg04, #2 wc
15724     3C 00 90 CD |  if_b	jmp	#LR__1804
15728     EC 60 BF FD | 	call	#_pop
1572c     FF 18 02 F6 | 	mov	arg04, result3
15730     1C 4E 05 F1 | 	add	fp, #28
15734     A7 FA 61 FC | 	wrlong	result1, fp
15738     04 4E 05 F1 | 	add	fp, #4
1573c     A7 FC 61 FC | 	wrlong	result2, fp
15740     04 4E 05 F1 | 	add	fp, #4
15744     A7 18 62 FC | 	wrlong	arg04, fp
15748     08 4E 85 F1 | 	sub	fp, #8
1574c     A7 12 02 F6 | 	mov	arg01, fp
15750     1C 4E 85 F1 | 	sub	fp, #28
15754     A4 62 BF FD | 	call	#_converttoint
15758     0C 4E 05 F1 | 	add	fp, #12
1575c     A7 FA 61 FC | 	wrlong	result1, fp
15760     0C 4E 85 F1 | 	sub	fp, #12
15764                 | LR__1804
15764     B0 60 BF FD | 	call	#_pop
15768     FF 18 02 F6 | 	mov	arg04, result3
1576c     1C 4E 05 F1 | 	add	fp, #28
15770     A7 FA 61 FC | 	wrlong	result1, fp
15774     04 4E 05 F1 | 	add	fp, #4
15778     A7 FC 61 FC | 	wrlong	result2, fp
1577c     04 4E 05 F1 | 	add	fp, #4
15780     A7 18 62 FC | 	wrlong	arg04, fp
15784     08 4E 85 F1 | 	sub	fp, #8
15788     A7 12 02 F6 | 	mov	arg01, fp
1578c     1C 4E 85 F1 | 	sub	fp, #28
15790     68 62 BF FD | 	call	#_converttoint
15794     04 4E 05 F1 | 	add	fp, #4
15798     A7 FA 61 FC | 	wrlong	result1, fp
1579c     10 4E 05 F1 | 	add	fp, #16
157a0     A7 1E 02 FB | 	rdlong	local01, fp
157a4     14 4E 85 F1 | 	sub	fp, #20
157a8     02 1E 66 F0 | 	shl	local01, #2
157ac     50 00 00 FF 
157b0     C4 E4 05 F1 | 	add	objptr, ##41156
157b4     F2 1E 02 F1 | 	add	local01, objptr
157b8     0F 01 68 FC | 	wrlong	#0, local01
157bc                 | ' t1=pop() : channel=converttoint(t1)
157bc                 | ' getres(j)=0
157bc                 | ' if pos>=0 then
157bc     01 00 00 FF 
157c0     54 E5 05 F1 | 	add	objptr, ##852
157c4     F2 20 02 FB | 	rdlong	local02, objptr
157c8     52 00 00 FF 
157cc     18 E4 85 F1 | 	sub	objptr, ##42008
157d0     00 20 56 F2 | 	cmps	local02, #0 wc
157d4     C0 01 90 CD |  if_b	jmp	#LR__1810
157d8     10 4E 05 F1 | 	add	fp, #16
157dc     A7 00 68 FC | 	wrlong	#0, fp
157e0     10 4E 85 F1 | 	sub	fp, #16
157e4                 | '    i=0: do
157e4                 | LR__1805
157e4     14 4E 05 F1 | 	add	fp, #20
157e8     A7 00 68 FC | 	wrlong	#0, fp
157ec     14 4E 85 F1 | 	sub	fp, #20
157f0                 | '    j=0: do    
157f0                 | LR__1806
157f0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
157f0     0C 4E 05 F1 | 	add	fp, #12
157f4     A7 20 02 FB | 	rdlong	local02, fp
157f8     0C 4E 85 F1 | 	sub	fp, #12
157fc     00 04 00 FF 
15800     00 20 56 F2 | 	cmps	local02, ##524288 wc
15804     4C 00 90 3D |  if_ae	jmp	#LR__1807
15808     14 4E 05 F1 | 	add	fp, #20
1580c     A7 20 02 FB | 	rdlong	local02, fp
15810     10 1F 02 F6 | 	mov	local01, local02
15814     4E 00 00 FF 
15818     B4 E4 05 F1 | 	add	objptr, ##40116
1581c     F2 1E 02 F1 | 	add	local01, objptr
15820     08 4E 85 F1 | 	sub	fp, #8
15824     A7 12 02 FB | 	rdlong	arg01, fp
15828     04 4E 05 F1 | 	add	fp, #4
1582c     A7 18 02 FB | 	rdlong	arg04, fp
15830     0A 18 66 F0 | 	shl	arg04, #10
15834     0C 13 02 F1 | 	add	arg01, arg04
15838     10 4E 85 F1 | 	sub	fp, #16
1583c     10 13 02 F1 | 	add	arg01, local02
15840     09 FB C1 FA | 	rdbyte	result1, arg01
15844     4E 00 00 FF 
15848     B4 E4 85 F1 | 	sub	objptr, ##40116
1584c     0F FB 41 FC | 	wrbyte	result1, local01
15850     48 00 90 FD | 	jmp	#LR__1808
15854                 | LR__1807
15854     14 4E 05 F1 | 	add	fp, #20
15858     A7 20 02 FB | 	rdlong	local02, fp
1585c     10 1F 02 F6 | 	mov	local01, local02
15860     4E 00 00 FF 
15864     B4 E4 05 F1 | 	add	objptr, ##40116
15868     F2 1E 02 F1 | 	add	local01, objptr
1586c     08 4E 85 F1 | 	sub	fp, #8
15870     A7 12 02 FB | 	rdlong	arg01, fp
15874     04 4E 05 F1 | 	add	fp, #4
15878     A7 18 02 FB | 	rdlong	arg04, fp
1587c     0A 18 66 F0 | 	shl	arg04, #10
15880     0C 13 02 F1 | 	add	arg01, arg04
15884     10 4E 85 F1 | 	sub	fp, #16
15888     10 13 02 F1 | 	add	arg01, local02
1588c     4E 00 00 FF 
15890     B4 E4 85 F1 | 	sub	objptr, ##40116
15894     D0 89 B0 FD | 	call	#_pspeek
15898     0F FB 41 FC | 	wrbyte	result1, local01
1589c                 | LR__1808
1589c     14 4E 05 F1 | 	add	fp, #20
158a0     A7 20 02 FB | 	rdlong	local02, fp
158a4     01 20 06 F1 | 	add	local02, #1
158a8     A7 20 62 FC | 	wrlong	local02, fp
158ac     14 4E 85 F1 | 	sub	fp, #20
158b0     02 00 00 FF 
158b4     00 20 56 F2 | 	cmps	local02, ##1024 wc
158b8     2C 00 90 3D |  if_ae	jmp	#LR__1809
158bc     10 4E 05 F1 | 	add	fp, #16
158c0     A7 1E 02 FB | 	rdlong	local01, fp
158c4     0A 1E 66 F0 | 	shl	local01, #10
158c8     04 4E 05 F1 | 	add	fp, #4
158cc     A7 20 02 FB | 	rdlong	local02, fp
158d0     10 1F 02 F1 | 	add	local01, local02
158d4     0C 4E 85 F1 | 	sub	fp, #12
158d8     A7 20 02 FB | 	rdlong	local02, fp
158dc     08 4E 85 F1 | 	sub	fp, #8
158e0     10 1F 5A F2 | 	cmps	local01, local02 wcz
158e4     08 FF 9F ED |  if_be	jmp	#LR__1806
158e8                 | LR__1809
158e8                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
158e8     04 4E 05 F1 | 	add	fp, #4
158ec     A7 12 02 FB | 	rdlong	arg01, fp
158f0     52 00 00 FF 
158f4     18 E4 05 F1 | 	add	objptr, ##42008
158f8     F2 14 02 FB | 	rdlong	arg02, objptr
158fc     01 14 06 F1 | 	add	arg02, #1
15900     03 00 00 FF 
15904     64 E5 85 F1 | 	sub	objptr, ##1892
15908     F2 16 02 F6 | 	mov	arg03, objptr
1590c     4E 00 00 FF 
15910     B4 E4 85 F1 | 	sub	objptr, ##40116
15914     04 4E 05 F1 | 	add	fp, #4
15918     A7 18 02 FB | 	rdlong	arg04, fp
1591c     08 4E 85 F1 | 	sub	fp, #8
15920     01 1A 06 F6 | 	mov	arg05, #1
15924     A0 CA B0 FD | 	call	#__system___basic_put
15928     18 4E 05 F1 | 	add	fp, #24
1592c     A7 FA 61 FC | 	wrlong	result1, fp
15930     14 4E 85 F1 | 	sub	fp, #20
15934     A7 1E 02 FB | 	rdlong	local01, fp
15938     02 1E 66 F0 | 	shl	local01, #2
1593c     50 00 00 FF 
15940     C4 E4 05 F1 | 	add	objptr, ##41156
15944     F2 1E 02 F1 | 	add	local01, objptr
15948     0F FB 61 FC | 	wrlong	result1, local01
1594c                 | '    if 1024*i+j>amount then exit loop
1594c     0C 4E 05 F1 | 	add	fp, #12
15950     A7 20 02 FB | 	rdlong	local02, fp
15954     0A 20 66 F0 | 	shl	local02, #10
15958     04 4E 05 F1 | 	add	fp, #4
1595c     A7 1E 02 FB | 	rdlong	local01, fp
15960     0F 21 02 F1 | 	add	local02, local01
15964     0C 4E 85 F1 | 	sub	fp, #12
15968     A7 1E 02 FB | 	rdlong	local01, fp
1596c     08 4E 85 F1 | 	sub	fp, #8
15970     0F 21 5A F2 | 	cmps	local02, local01 wcz
15974     50 00 00 FF 
15978     C4 E4 85 F1 | 	sub	objptr, ##41156
1597c     CC 01 90 1D |  if_a	jmp	#LR__1817
15980     10 4E 05 F1 | 	add	fp, #16
15984     A7 20 02 FB | 	rdlong	local02, fp
15988     01 20 06 F1 | 	add	local02, #1
1598c     A7 20 62 FC | 	wrlong	local02, fp
15990     10 4E 85 F1 | 	sub	fp, #16
15994     4C FE 9F FD | 	jmp	#LR__1805
15998                 | LR__1810
15998     10 4E 05 F1 | 	add	fp, #16
1599c     A7 00 68 FC | 	wrlong	#0, fp
159a0     10 4E 85 F1 | 	sub	fp, #16
159a4                 | '    i=0: do
159a4                 | LR__1811
159a4     14 4E 05 F1 | 	add	fp, #20
159a8     A7 00 68 FC | 	wrlong	#0, fp
159ac     14 4E 85 F1 | 	sub	fp, #20
159b0                 | '    j=0: do  
159b0                 | LR__1812
159b0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
159b0     0C 4E 05 F1 | 	add	fp, #12
159b4     A7 20 02 FB | 	rdlong	local02, fp
159b8     0C 4E 85 F1 | 	sub	fp, #12
159bc     00 04 00 FF 
159c0     00 20 56 F2 | 	cmps	local02, ##524288 wc
159c4     4C 00 90 3D |  if_ae	jmp	#LR__1813
159c8     14 4E 05 F1 | 	add	fp, #20
159cc     A7 20 02 FB | 	rdlong	local02, fp
159d0     10 1F 02 F6 | 	mov	local01, local02
159d4     4E 00 00 FF 
159d8     B4 E4 05 F1 | 	add	objptr, ##40116
159dc     F2 1E 02 F1 | 	add	local01, objptr
159e0     08 4E 85 F1 | 	sub	fp, #8
159e4     A7 12 02 FB | 	rdlong	arg01, fp
159e8     04 4E 05 F1 | 	add	fp, #4
159ec     A7 18 02 FB | 	rdlong	arg04, fp
159f0     0A 18 66 F0 | 	shl	arg04, #10
159f4     0C 13 02 F1 | 	add	arg01, arg04
159f8     10 4E 85 F1 | 	sub	fp, #16
159fc     10 13 02 F1 | 	add	arg01, local02
15a00     09 FB C1 FA | 	rdbyte	result1, arg01
15a04     4E 00 00 FF 
15a08     B4 E4 85 F1 | 	sub	objptr, ##40116
15a0c     0F FB 41 FC | 	wrbyte	result1, local01
15a10     48 00 90 FD | 	jmp	#LR__1814
15a14                 | LR__1813
15a14     14 4E 05 F1 | 	add	fp, #20
15a18     A7 20 02 FB | 	rdlong	local02, fp
15a1c     10 1F 02 F6 | 	mov	local01, local02
15a20     4E 00 00 FF 
15a24     B4 E4 05 F1 | 	add	objptr, ##40116
15a28     F2 1E 02 F1 | 	add	local01, objptr
15a2c     08 4E 85 F1 | 	sub	fp, #8
15a30     A7 12 02 FB | 	rdlong	arg01, fp
15a34     04 4E 05 F1 | 	add	fp, #4
15a38     A7 18 02 FB | 	rdlong	arg04, fp
15a3c     0A 18 66 F0 | 	shl	arg04, #10
15a40     0C 13 02 F1 | 	add	arg01, arg04
15a44     10 4E 85 F1 | 	sub	fp, #16
15a48     10 13 02 F1 | 	add	arg01, local02
15a4c     4E 00 00 FF 
15a50     B4 E4 85 F1 | 	sub	objptr, ##40116
15a54     10 88 B0 FD | 	call	#_pspeek
15a58     0F FB 41 FC | 	wrbyte	result1, local01
15a5c                 | LR__1814
15a5c     14 4E 05 F1 | 	add	fp, #20
15a60     A7 20 02 FB | 	rdlong	local02, fp
15a64     01 20 06 F1 | 	add	local02, #1
15a68     A7 20 62 FC | 	wrlong	local02, fp
15a6c     14 4E 85 F1 | 	sub	fp, #20
15a70     02 00 00 FF 
15a74     00 20 56 F2 | 	cmps	local02, ##1024 wc
15a78     2C 00 90 3D |  if_ae	jmp	#LR__1815
15a7c     10 4E 05 F1 | 	add	fp, #16
15a80     A7 1E 02 FB | 	rdlong	local01, fp
15a84     0A 1E 66 F0 | 	shl	local01, #10
15a88     04 4E 05 F1 | 	add	fp, #4
15a8c     A7 20 02 FB | 	rdlong	local02, fp
15a90     10 1F 02 F1 | 	add	local01, local02
15a94     0C 4E 85 F1 | 	sub	fp, #12
15a98     A7 20 02 FB | 	rdlong	local02, fp
15a9c     08 4E 85 F1 | 	sub	fp, #8
15aa0     10 1F 5A F2 | 	cmps	local01, local02 wcz
15aa4     08 FF 9F ED |  if_be	jmp	#LR__1812
15aa8                 | LR__1815
15aa8                 | '    put #channel,,block(0),amount, r : getres(channel)=r
15aa8     04 4E 05 F1 | 	add	fp, #4
15aac     A7 12 02 FB | 	rdlong	arg01, fp
15ab0     4E 00 00 FF 
15ab4     B4 E4 05 F1 | 	add	objptr, ##40116
15ab8     F2 16 02 F6 | 	mov	arg03, objptr
15abc     4E 00 00 FF 
15ac0     B4 E4 85 F1 | 	sub	objptr, ##40116
15ac4     04 4E 05 F1 | 	add	fp, #4
15ac8     A7 18 02 FB | 	rdlong	arg04, fp
15acc     08 4E 85 F1 | 	sub	fp, #8
15ad0     00 14 06 F6 | 	mov	arg02, #0
15ad4     01 1A 06 F6 | 	mov	arg05, #1
15ad8     EC C8 B0 FD | 	call	#__system___basic_put
15adc     18 4E 05 F1 | 	add	fp, #24
15ae0     A7 FA 61 FC | 	wrlong	result1, fp
15ae4     14 4E 85 F1 | 	sub	fp, #20
15ae8     A7 1E 02 FB | 	rdlong	local01, fp
15aec     02 1E 66 F0 | 	shl	local01, #2
15af0     50 00 00 FF 
15af4     C4 E4 05 F1 | 	add	objptr, ##41156
15af8     F2 1E 02 F1 | 	add	local01, objptr
15afc     0F FB 61 FC | 	wrlong	result1, local01
15b00                 | '    if 1024*i+j>amount then exit loop
15b00     0C 4E 05 F1 | 	add	fp, #12
15b04     A7 20 02 FB | 	rdlong	local02, fp
15b08     0A 20 66 F0 | 	shl	local02, #10
15b0c     04 4E 05 F1 | 	add	fp, #4
15b10     A7 1E 02 FB | 	rdlong	local01, fp
15b14     0F 21 02 F1 | 	add	local02, local01
15b18     0C 4E 85 F1 | 	sub	fp, #12
15b1c     A7 22 02 FB | 	rdlong	local03, fp
15b20     08 4E 85 F1 | 	sub	fp, #8
15b24     11 21 5A F2 | 	cmps	local02, local03 wcz
15b28     50 00 00 FF 
15b2c     C4 E4 85 F1 | 	sub	objptr, ##41156
15b30     18 00 90 1D |  if_a	jmp	#LR__1816
15b34     10 4E 05 F1 | 	add	fp, #16
15b38     A7 20 02 FB | 	rdlong	local02, fp
15b3c     01 20 06 F1 | 	add	local02, #1
15b40     A7 20 62 FC | 	wrlong	local02, fp
15b44     10 4E 85 F1 | 	sub	fp, #16
15b48     58 FE 9F FD | 	jmp	#LR__1811
15b4c                 | LR__1816
15b4c                 | LR__1817
15b4c     A7 F0 03 F6 | 	mov	ptra, fp
15b50     B2 00 A0 FD | 	call	#popregs_
15b54                 | _do_put_ret
15b54     2D 00 64 FD | 	ret
15b58                 | 
15b58                 | ' 
15b58                 | ' '-------------------- rad
15b58                 | ' 
15b58                 | ' sub do_rad
15b58                 | _do_rad
15b58     51 00 00 FF 
15b5c     BC E5 05 F1 | 	add	objptr, ##41916
15b60     00 C0 9F FF 
15b64     F2 00 68 FC | 	wrlong	##1065353216, objptr
15b68     04 E4 05 F1 | 	add	objptr, #4
15b6c     00 C0 9F FF 
15b70     F2 00 68 FC | 	wrlong	##1065353216, objptr
15b74     51 00 00 FF 
15b78     C0 E5 85 F1 | 	sub	objptr, ##41920
15b7c                 | _do_rad_ret
15b7c     2D 00 64 FD | 	ret
15b80                 | 
15b80                 | ' 
15b80                 | ' '-------------------- rdpin
15b80                 | ' 
15b80                 | ' sub do_rdpin
15b80                 | _do_rdpin
15b80     00 4A 05 F6 | 	mov	COUNT_, #0
15b84     A8 00 A0 FD | 	call	#pushregs_
15b88     0C F0 07 F1 | 	add	ptra, #12
15b8c     88 5C BF FD | 	call	#_pop
15b90     A7 FA 61 FC | 	wrlong	result1, fp
15b94     04 4E 05 F1 | 	add	fp, #4
15b98     A7 FC 61 FC | 	wrlong	result2, fp
15b9c     04 4E 05 F1 | 	add	fp, #4
15ba0     A7 FE 61 FC | 	wrlong	result3, fp
15ba4     08 4E 85 F1 | 	sub	fp, #8
15ba8     A7 12 02 F6 | 	mov	arg01, fp
15bac     4C 5E BF FD | 	call	#_converttoint
15bb0     FD FA 89 FA | 	rdpin	result1, result1
15bb4     52 00 00 FF 
15bb8     1C E4 05 F1 | 	add	objptr, ##42012
15bbc     F2 FA 61 FC | 	wrlong	result1, objptr
15bc0     52 00 00 FF 
15bc4     1C E4 85 F1 | 	sub	objptr, ##42012
15bc8     08 4E 05 F1 | 	add	fp, #8
15bcc     A7 3A 68 FC | 	wrlong	#29, fp
15bd0     08 4E 85 F1 | 	sub	fp, #8
15bd4     A7 08 68 FC | 	wrlong	#4, fp
15bd8     A7 12 02 F6 | 	mov	arg01, fp
15bdc     D0 5C BF FD | 	call	#_push
15be0     A7 F0 03 F6 | 	mov	ptra, fp
15be4     B2 00 A0 FD | 	call	#popregs_
15be8                 | _do_rdpin_ret
15be8     2D 00 64 FD | 	ret
15bec                 | 
15bec                 | ' 
15bec                 | ' '------------------- release
15bec                 | ' 
15bec                 | ' sub do_release
15bec                 | _do_release
15bec     00 4A 05 F6 | 	mov	COUNT_, #0
15bf0     A8 00 A0 FD | 	call	#pushregs_
15bf4     10 F0 07 F1 | 	add	ptra, #16
15bf8     1C 5C BF FD | 	call	#_pop
15bfc     FF 14 02 F6 | 	mov	arg02, result3
15c00     A7 FA 61 FC | 	wrlong	result1, fp
15c04     04 4E 05 F1 | 	add	fp, #4
15c08     A7 FC 61 FC | 	wrlong	result2, fp
15c0c     04 4E 05 F1 | 	add	fp, #4
15c10     A7 14 62 FC | 	wrlong	arg02, fp
15c14     08 4E 85 F1 | 	sub	fp, #8
15c18     A7 12 02 F6 | 	mov	arg01, fp
15c1c     DC 5D BF FD | 	call	#_converttoint
15c20     0C 4E 05 F1 | 	add	fp, #12
15c24     A7 FA 61 FC | 	wrlong	result1, fp
15c28                 | ' 
15c28                 | ' t1=pop()
15c28                 | ' channel=converttoint(t1)
15c28                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
15c28     0C 4E 85 F1 | 	sub	fp, #12
15c2c     00 FA 55 F2 | 	cmps	result1, #0 wc
15c30     44 00 90 CD |  if_b	jmp	#LR__1820
15c34     0C 4E 05 F1 | 	add	fp, #12
15c38     A7 14 02 FB | 	rdlong	arg02, fp
15c3c     0C 4E 85 F1 | 	sub	fp, #12
15c40     08 14 56 F2 | 	cmps	arg02, #8 wc
15c44     30 00 90 3D |  if_ae	jmp	#LR__1820
15c48     37 00 00 FF 
15c4c     10 E4 05 F1 | 	add	objptr, ##28176
15c50     F2 12 02 FB | 	rdlong	arg01, objptr
15c54     37 00 00 FF 
15c58     10 E4 85 F1 | 	sub	objptr, ##28176
15c5c     0C 4E 05 F1 | 	add	fp, #12
15c60     A7 14 02 FB | 	rdlong	arg02, fp
15c64     0C 4E 85 F1 | 	sub	fp, #12
15c68     06 14 66 F0 | 	shl	arg02, #6
15c6c     0A 13 02 F1 | 	add	arg01, arg02
15c70     2C 12 06 F1 | 	add	arg01, #44
15c74     09 FF 69 FC | 	wrlong	#255, arg01
15c78                 | LR__1820
15c78     A7 F0 03 F6 | 	mov	ptra, fp
15c7c     B2 00 A0 FD | 	call	#popregs_
15c80                 | _do_release_ret
15c80     2D 00 64 FD | 	ret
15c84                 | 
15c84                 | ' 
15c84                 | ' '------------------- return
15c84                 | ' 
15c84                 | ' sub do_return()
15c84                 | _do_return
15c84                 | ' if gosubtop>0 then
15c84     50 00 00 FF 
15c88     0C E5 05 F1 | 	add	objptr, ##41228
15c8c     F2 00 02 FB | 	rdlong	_var01, objptr
15c90     50 00 00 FF 
15c94     0C E5 85 F1 | 	sub	objptr, ##41228
15c98     01 00 56 F2 | 	cmps	_var01, #1 wc
15c9c     8C 00 90 CD |  if_b	jmp	#LR__1830
15ca0     50 00 00 FF 
15ca4     0C E5 05 F1 | 	add	objptr, ##41228
15ca8     F2 00 02 FB | 	rdlong	_var01, objptr
15cac     03 00 66 F0 | 	shl	_var01, #3
15cb0     03 00 00 FF 
15cb4     60 E5 85 F1 | 	sub	objptr, ##1888
15cb8     F2 00 02 F1 | 	add	_var01, objptr
15cbc     00 01 02 FB | 	rdlong	_var01, _var01
15cc0     03 00 00 FF 
15cc4     0C E5 05 F1 | 	add	objptr, ##1804
15cc8     F2 00 62 FC | 	wrlong	_var01, objptr
15ccc     54 E4 05 F1 | 	add	objptr, #84
15cd0     F2 00 02 FB | 	rdlong	_var01, objptr
15cd4     03 00 66 F0 | 	shl	_var01, #3
15cd8     03 00 00 FF 
15cdc     60 E5 85 F1 | 	sub	objptr, ##1888
15ce0     F2 00 02 F1 | 	add	_var01, objptr
15ce4     04 00 06 F1 | 	add	_var01, #4
15ce8     00 01 02 FB | 	rdlong	_var01, _var01
15cec     03 00 00 FF 
15cf0     10 E5 05 F1 | 	add	objptr, ##1808
15cf4     F2 00 62 FC | 	wrlong	_var01, objptr
15cf8     06 00 00 FF 
15cfc     40 E4 85 F1 | 	sub	objptr, ##3136
15d00     F2 00 02 FB | 	rdlong	_var01, objptr
15d04     01 00 86 F1 | 	sub	_var01, #1
15d08     04 E4 05 F1 | 	add	objptr, #4
15d0c     F2 00 62 FC | 	wrlong	_var01, objptr
15d10     06 00 00 FF 
15d14     8C E4 05 F1 | 	add	objptr, ##3212
15d18     F2 00 02 FB | 	rdlong	_var01, objptr
15d1c     01 00 86 F1 | 	sub	_var01, #1
15d20     F2 00 62 FC | 	wrlong	_var01, objptr
15d24     50 00 00 FF 
15d28     0C E5 85 F1 | 	sub	objptr, ##41228
15d2c                 | LR__1830
15d2c                 | _do_return_ret
15d2c     2D 00 64 FD | 	ret
15d30                 | 
15d30                 | ' 
15d30                 | ' '------------------- right$
15d30                 | ' 
15d30                 | ' sub do_right
15d30                 | _do_right
15d30     00 4A 05 F6 | 	mov	COUNT_, #0
15d34     A8 00 A0 FD | 	call	#pushregs_
15d38     14 F0 07 F1 | 	add	ptra, #20
15d3c     4A 00 00 FF 
15d40     80 E4 05 F1 | 	add	objptr, ##38016
15d44     F2 16 02 FB | 	rdlong	arg03, objptr
15d48     0B 15 02 F6 | 	mov	arg02, arg03
15d4c     01 14 66 F0 | 	shl	arg02, #1
15d50     0B 15 02 F1 | 	add	arg02, arg03
15d54     02 14 66 F0 | 	shl	arg02, #2
15d58     03 00 00 FF 
15d5c     04 E4 85 F1 | 	sub	objptr, ##1540
15d60     F2 14 02 F1 | 	add	arg02, objptr
15d64     0A 17 02 FB | 	rdlong	arg03, arg02
15d68     0C 4E 05 F1 | 	add	fp, #12
15d6c     A7 16 62 FC | 	wrlong	arg03, fp
15d70                 | ' 
15d70                 | ' numpar=compiledline(lineptr_e).result.uresult
15d70                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
15d70     0C 4E 85 F1 | 	sub	fp, #12
15d74     02 16 0E F2 | 	cmp	arg03, #2 wz
15d78     47 00 00 FF 
15d7c     7C E4 85 F1 | 	sub	objptr, ##36476
15d80     40 00 90 AD |  if_e	jmp	#LR__1840
15d84     00 12 06 F6 | 	mov	arg01, #0
15d88     64 15 B1 FD | 	call	#__system___getiolock_0570
15d8c     FD 12 02 F6 | 	mov	arg01, result1
15d90     30 B8 B0 FD | 	call	#__system___lockmem
15d94     8D 01 00 FF 
15d98     F2 14 06 F6 | 	mov	arg02, ##@LR__5597
15d9c     00 12 06 F6 | 	mov	arg01, #0
15da0     00 16 06 F6 | 	mov	arg03, #0
15da4     10 C5 B0 FD | 	call	#__system___basic_print_string
15da8     00 12 06 F6 | 	mov	arg01, #0
15dac     40 15 B1 FD | 	call	#__system___getiolock_0570
15db0     FD 00 68 FC | 	wrlong	#0, result1
15db4     27 12 06 F6 | 	mov	arg01, #39
15db8     00 14 06 F6 | 	mov	arg02, #0
15dbc     44 82 B0 FD | 	call	#_printerror
15dc0     EC 00 90 FD | 	jmp	#LR__1843
15dc4                 | LR__1840
15dc4     50 5A BF FD | 	call	#_pop
15dc8     FF 16 02 F6 | 	mov	arg03, result3
15dcc     A7 FA 61 FC | 	wrlong	result1, fp
15dd0     04 4E 05 F1 | 	add	fp, #4
15dd4     A7 FC 61 FC | 	wrlong	result2, fp
15dd8     04 4E 05 F1 | 	add	fp, #4
15ddc     A7 16 62 FC | 	wrlong	arg03, fp
15de0     08 4E 85 F1 | 	sub	fp, #8
15de4     A7 12 02 F6 | 	mov	arg01, fp
15de8     10 5C BF FD | 	call	#_converttoint
15dec     FD 16 02 F6 | 	mov	arg03, result1
15df0     10 4E 05 F1 | 	add	fp, #16
15df4     A7 16 62 FC | 	wrlong	arg03, fp
15df8     10 4E 85 F1 | 	sub	fp, #16
15dfc     18 5A BF FD | 	call	#_pop
15e00     FF 16 02 F6 | 	mov	arg03, result3
15e04     A7 FA 61 FC | 	wrlong	result1, fp
15e08     04 4E 05 F1 | 	add	fp, #4
15e0c     A7 FC 61 FC | 	wrlong	result2, fp
15e10     04 4E 05 F1 | 	add	fp, #4
15e14     A7 16 62 FC | 	wrlong	arg03, fp
15e18                 | ' t1=pop() : arg=converttoint(t1)
15e18                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15e18     08 4E 85 F1 | 	sub	fp, #8
15e1c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15e20     18 00 90 5D |  if_ne	jmp	#LR__1841
15e24     A7 12 02 FB | 	rdlong	arg01, fp
15e28     64 5B BF FD | 	call	#_convertstring
15e2c     A7 FA 61 FC | 	wrlong	result1, fp
15e30     08 4E 05 F1 | 	add	fp, #8
15e34     A7 3E 68 FC | 	wrlong	#31, fp
15e38     08 4E 85 F1 | 	sub	fp, #8
15e3c                 | LR__1841
15e3c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
15e3c     08 4E 05 F1 | 	add	fp, #8
15e40     A7 16 02 FB | 	rdlong	arg03, fp
15e44     08 4E 85 F1 | 	sub	fp, #8
15e48     1F 16 0E F2 | 	cmp	arg03, #31 wz
15e4c     40 00 90 AD |  if_e	jmp	#LR__1842
15e50     00 12 06 F6 | 	mov	arg01, #0
15e54     98 14 B1 FD | 	call	#__system___getiolock_0570
15e58     FD 12 02 F6 | 	mov	arg01, result1
15e5c     64 B7 B0 FD | 	call	#__system___lockmem
15e60     8D 01 00 FF 
15e64     FB 14 06 F6 | 	mov	arg02, ##@LR__5598
15e68     00 12 06 F6 | 	mov	arg01, #0
15e6c     00 16 06 F6 | 	mov	arg03, #0
15e70     44 C4 B0 FD | 	call	#__system___basic_print_string
15e74     00 12 06 F6 | 	mov	arg01, #0
15e78     74 14 B1 FD | 	call	#__system___getiolock_0570
15e7c     FD 00 68 FC | 	wrlong	#0, result1
15e80     0F 12 06 F6 | 	mov	arg01, #15
15e84     00 14 06 F6 | 	mov	arg02, #0
15e88     78 81 B0 FD | 	call	#_printerror
15e8c     20 00 90 FD | 	jmp	#LR__1843
15e90                 | LR__1842
15e90     A7 12 02 FB | 	rdlong	arg01, fp
15e94     10 4E 05 F1 | 	add	fp, #16
15e98     A7 14 02 FB | 	rdlong	arg02, fp
15e9c     10 4E 85 F1 | 	sub	fp, #16
15ea0     24 D8 B0 FD | 	call	#__system__Right_S
15ea4     A7 FA 61 FC | 	wrlong	result1, fp
15ea8     A7 12 02 F6 | 	mov	arg01, fp
15eac     00 5A BF FD | 	call	#_push
15eb0                 | LR__1843
15eb0     A7 F0 03 F6 | 	mov	ptra, fp
15eb4     B2 00 A0 FD | 	call	#popregs_
15eb8                 | _do_right_ret
15eb8     2D 00 64 FD | 	ret
15ebc                 | 
15ebc                 | ' 
15ebc                 | ' '------------------- rnd
15ebc                 | ' 
15ebc                 | ' sub do_rnd
15ebc                 | _do_rnd
15ebc     01 4A 05 F6 | 	mov	COUNT_, #1
15ec0     A8 00 A0 FD | 	call	#pushregs_
15ec4     10 F0 07 F1 | 	add	ptra, #16
15ec8     4A 00 00 FF 
15ecc     80 E4 05 F1 | 	add	objptr, ##38016
15ed0     F2 1E 02 FB | 	rdlong	local01, objptr
15ed4     0F 17 02 F6 | 	mov	arg03, local01
15ed8     01 16 66 F0 | 	shl	arg03, #1
15edc     0F 17 02 F1 | 	add	arg03, local01
15ee0     02 16 66 F0 | 	shl	arg03, #2
15ee4     03 00 00 FF 
15ee8     04 E4 85 F1 | 	sub	objptr, ##1540
15eec     F2 16 02 F1 | 	add	arg03, objptr
15ef0     0B 17 02 FB | 	rdlong	arg03, arg03
15ef4     0C 4E 05 F1 | 	add	fp, #12
15ef8     A7 16 62 FC | 	wrlong	arg03, fp
15efc                 | ' 
15efc                 | ' numpar=compiledline(lineptr_e).result.uresult
15efc                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15efc     0C 4E 85 F1 | 	sub	fp, #12
15f00     02 16 16 F2 | 	cmp	arg03, #2 wc
15f04     47 00 00 FF 
15f08     7C E4 85 F1 | 	sub	objptr, ##36476
15f0c     40 00 90 CD |  if_b	jmp	#LR__1850
15f10     00 12 06 F6 | 	mov	arg01, #0
15f14     D8 13 B1 FD | 	call	#__system___getiolock_0570
15f18     FD 12 02 F6 | 	mov	arg01, result1
15f1c     A4 B6 B0 FD | 	call	#__system___lockmem
15f20     8D 01 00 FF 
15f24     04 15 06 F6 | 	mov	arg02, ##@LR__5599
15f28     00 12 06 F6 | 	mov	arg01, #0
15f2c     00 16 06 F6 | 	mov	arg03, #0
15f30     84 C3 B0 FD | 	call	#__system___basic_print_string
15f34     00 12 06 F6 | 	mov	arg01, #0
15f38     B4 13 B1 FD | 	call	#__system___getiolock_0570
15f3c     FD 00 68 FC | 	wrlong	#0, result1
15f40     27 12 06 F6 | 	mov	arg01, #39
15f44     00 14 06 F6 | 	mov	arg02, #0
15f48     B8 80 B0 FD | 	call	#_printerror
15f4c     30 01 90 FD | 	jmp	#LR__1857
15f50                 | LR__1850
15f50                 | ' if numpar=0 then
15f50     0C 4E 05 F1 | 	add	fp, #12
15f54     A7 FE 09 FB | 	rdlong	result3, fp wz
15f58     0C 4E 85 F1 | 	sub	fp, #12
15f5c     20 00 90 5D |  if_ne	jmp	#LR__1851
15f60     08 4E 05 F1 | 	add	fp, #8
15f64     A7 3A 68 FC | 	wrlong	#29, fp
15f68     08 4E 85 F1 | 	sub	fp, #8
15f6c     1B FA 61 FD | 	getrnd	result1
15f70     A7 FA 61 FC | 	wrlong	result1, fp
15f74     A7 12 02 F6 | 	mov	arg01, fp
15f78     34 59 BF FD | 	call	#_push
15f7c     00 01 90 FD | 	jmp	#LR__1856
15f80                 | LR__1851
15f80     94 58 BF FD | 	call	#_pop
15f84     A7 FA 61 FC | 	wrlong	result1, fp
15f88     04 4E 05 F1 | 	add	fp, #4
15f8c     A7 FC 61 FC | 	wrlong	result2, fp
15f90     04 4E 05 F1 | 	add	fp, #4
15f94     A7 FE 61 FC | 	wrlong	result3, fp
15f98                 | '   t1=pop()
15f98                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15f98     08 4E 85 F1 | 	sub	fp, #8
15f9c     1C FE 0D F2 | 	cmp	result3, #28 wz
15fa0     08 4E 05 51 |  if_ne	add	fp, #8
15fa4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15fa8     08 4E 85 51 |  if_ne	sub	fp, #8
15fac     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15fb0     2C 00 90 5D |  if_ne	jmp	#LR__1852
15fb4     1B FA 61 FD | 	getrnd	result1
15fb8     A7 1E 02 FB | 	rdlong	local01, fp
15fbc     0F FB 11 FD | 	qdiv	result1, local01
15fc0     A7 12 02 F6 | 	mov	arg01, fp
15fc4     19 1E 62 FD | 	getqy	local01
15fc8     A7 1E 62 FC | 	wrlong	local01, fp
15fcc     08 4E 05 F1 | 	add	fp, #8
15fd0     A7 3A 68 FC | 	wrlong	#29, fp
15fd4     08 4E 85 F1 | 	sub	fp, #8
15fd8     D4 58 BF FD | 	call	#_push
15fdc     A0 00 90 FD | 	jmp	#LR__1855
15fe0                 | LR__1852
15fe0     08 4E 05 F1 | 	add	fp, #8
15fe4     A7 1E 02 FB | 	rdlong	local01, fp
15fe8     08 4E 85 F1 | 	sub	fp, #8
15fec     1E 1E 0E F2 | 	cmp	local01, #30 wz
15ff0     48 00 90 5D |  if_ne	jmp	#LR__1853
15ff4     A7 12 02 FB | 	rdlong	arg01, fp
15ff8     00 C0 24 FF 
15ffc     00 14 06 F6 | 	mov	arg02, ##1233125376
16000     80 E5 B0 FD | 	call	#__system___float_div
16004     FD 1E 02 F6 | 	mov	local01, result1
16008     1B 12 62 FD | 	getrnd	arg01
1600c     74 13 06 F4 | 	bitl	arg01, #372
16010     68 DF B0 FD | 	call	#__system___float_fromuns
16014     FD 14 02 F6 | 	mov	arg02, result1
16018     0F 13 02 F6 | 	mov	arg01, local01
1601c     60 E3 B0 FD | 	call	#__system___float_mul
16020     A7 FA 61 FC | 	wrlong	result1, fp
16024     08 4E 05 F1 | 	add	fp, #8
16028     A7 3C 68 FC | 	wrlong	#30, fp
1602c     08 4E 85 F1 | 	sub	fp, #8
16030     A7 12 02 F6 | 	mov	arg01, fp
16034     78 58 BF FD | 	call	#_push
16038     44 00 90 FD | 	jmp	#LR__1854
1603c                 | LR__1853
1603c                 | '     print "rnd: "; : printerror(40) 
1603c     00 12 06 F6 | 	mov	arg01, #0
16040     AC 12 B1 FD | 	call	#__system___getiolock_0570
16044     FD 12 02 F6 | 	mov	arg01, result1
16048     78 B5 B0 FD | 	call	#__system___lockmem
1604c     8D 01 00 FF 
16050     0A 15 06 F6 | 	mov	arg02, ##@LR__5600
16054     00 12 06 F6 | 	mov	arg01, #0
16058     00 16 06 F6 | 	mov	arg03, #0
1605c     58 C2 B0 FD | 	call	#__system___basic_print_string
16060     00 12 06 F6 | 	mov	arg01, #0
16064     88 12 B1 FD | 	call	#__system___getiolock_0570
16068     FD 00 68 FC | 	wrlong	#0, result1
1606c     28 12 06 F6 | 	mov	arg01, #40
16070     00 14 06 F6 | 	mov	arg02, #0
16074     8C 7F B0 FD | 	call	#_printerror
16078     A7 12 02 F6 | 	mov	arg01, fp
1607c     30 58 BF FD | 	call	#_push
16080                 | LR__1854
16080                 | LR__1855
16080                 | LR__1856
16080                 | LR__1857
16080     A7 F0 03 F6 | 	mov	ptra, fp
16084     B2 00 A0 FD | 	call	#popregs_
16088                 | _do_rnd_ret
16088     2D 00 64 FD | 	ret
1608c                 | 
1608c                 | ' 
1608c                 | ' '-------------------- round
1608c                 | ' 
1608c                 | ' sub do_round
1608c                 | _do_round
1608c     00 4A 05 F6 | 	mov	COUNT_, #0
16090     A8 00 A0 FD | 	call	#pushregs_
16094     0C F0 07 F1 | 	add	ptra, #12
16098     7C 57 BF FD | 	call	#_pop
1609c     A7 FA 61 FC | 	wrlong	result1, fp
160a0     04 4E 05 F1 | 	add	fp, #4
160a4     A7 FC 61 FC | 	wrlong	result2, fp
160a8     04 4E 05 F1 | 	add	fp, #4
160ac     A7 FE 61 FC | 	wrlong	result3, fp
160b0     08 4E 85 F1 | 	sub	fp, #8
160b4     A7 12 02 F6 | 	mov	arg01, fp
160b8     40 59 BF FD | 	call	#_converttoint
160bc     A7 FA 61 FC | 	wrlong	result1, fp
160c0     08 4E 05 F1 | 	add	fp, #8
160c4     A7 38 68 FC | 	wrlong	#28, fp
160c8     08 4E 85 F1 | 	sub	fp, #8
160cc     A7 12 02 F6 | 	mov	arg01, fp
160d0     DC 57 BF FD | 	call	#_push
160d4     A7 F0 03 F6 | 	mov	ptra, fp
160d8     B2 00 A0 FD | 	call	#popregs_
160dc                 | _do_round_ret
160dc     2D 00 64 FD | 	ret
160e0                 | 
160e0                 | ' 
160e0                 | ' '-------------------- rqpin
160e0                 | ' 
160e0                 | ' sub do_rqpin
160e0                 | _do_rqpin
160e0     00 4A 05 F6 | 	mov	COUNT_, #0
160e4     A8 00 A0 FD | 	call	#pushregs_
160e8     0C F0 07 F1 | 	add	ptra, #12
160ec     28 57 BF FD | 	call	#_pop
160f0     A7 FA 61 FC | 	wrlong	result1, fp
160f4     04 4E 05 F1 | 	add	fp, #4
160f8     A7 FC 61 FC | 	wrlong	result2, fp
160fc     04 4E 05 F1 | 	add	fp, #4
16100     A7 FE 61 FC | 	wrlong	result3, fp
16104     08 4E 85 F1 | 	sub	fp, #8
16108     A7 12 02 F6 | 	mov	arg01, fp
1610c     EC 58 BF FD | 	call	#_converttoint
16110     FD 12 02 F6 | 	mov	arg01, result1
16114     00 FA 05 F6 | 	mov	result1, #0
16118     09 FB 81 FA | 	rqpin	result1, arg01
1611c     52 00 00 FF 
16120     1C E4 05 F1 | 	add	objptr, ##42012
16124     F2 FA 61 FC | 	wrlong	result1, objptr
16128     52 00 00 FF 
1612c     1C E4 85 F1 | 	sub	objptr, ##42012
16130     08 4E 05 F1 | 	add	fp, #8
16134     A7 3A 68 FC | 	wrlong	#29, fp
16138     08 4E 85 F1 | 	sub	fp, #8
1613c     A7 08 68 FC | 	wrlong	#4, fp
16140     A7 12 02 F6 | 	mov	arg01, fp
16144     68 57 BF FD | 	call	#_push
16148     A7 F0 03 F6 | 	mov	ptra, fp
1614c     B2 00 A0 FD | 	call	#popregs_
16150                 | _do_rqpin_ret
16150     2D 00 64 FD | 	ret
16154                 | 
16154                 | ' 
16154                 | ' ' ------------------ run
16154                 | ' 
16154                 | ' sub do_run
16154                 | _do_run
16154     04 4A 05 F6 | 	mov	COUNT_, #4
16158     A8 00 A0 FD | 	call	#pushregs_
1615c     4A 00 00 FF 
16160     80 E4 05 F1 | 	add	objptr, ##38016
16164     F2 1E 02 FB | 	rdlong	local01, objptr
16168     06 00 00 FF 
1616c     38 E4 05 F1 | 	add	objptr, ##3128
16170     F2 20 02 FB | 	rdlong	local02, objptr
16174     04 E4 05 F1 | 	add	objptr, #4
16178     F2 22 02 FB | 	rdlong	local03, objptr
1617c     0F 19 02 F6 | 	mov	arg04, local01
16180     0C 17 02 F6 | 	mov	arg03, arg04
16184     01 16 66 F0 | 	shl	arg03, #1
16188     0C 17 02 F1 | 	add	arg03, arg04
1618c     02 16 66 F0 | 	shl	arg03, #2
16190     09 00 00 FF 
16194     40 E4 85 F1 | 	sub	objptr, ##4672
16198     F2 16 02 F1 | 	add	arg03, objptr
1619c     0B 15 02 FB | 	rdlong	arg02, arg03
161a0                 | ' 
161a0                 | ' r_lineptr_e=lineptr_e
161a0                 | ' r_runptr=runptr
161a0                 | ' r_runptr2=runptr2
161a0                 | ' 
161a0                 | ' numpar=compiledline(lineptr_e).result.uresult
161a0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
161a0     01 14 0E F2 | 	cmp	arg02, #1 wz
161a4     47 00 00 FF 
161a8     7C E4 85 F1 | 	sub	objptr, ##36476
161ac     00 12 06 A6 |  if_e	mov	arg01, #0
161b0     B0 C2 BF AD |  if_e	call	#_do_load
161b4     4A 00 00 FF 
161b8     88 E4 05 F1 | 	add	objptr, ##38024
161bc     F2 18 02 FB | 	rdlong	arg04, objptr
161c0     06 00 00 FF 
161c4     30 E4 05 F1 | 	add	objptr, ##3120
161c8     F2 18 62 FC | 	wrlong	arg04, objptr
161cc     04 E4 05 F1 | 	add	objptr, #4
161d0     F2 00 68 FC | 	wrlong	#0, objptr
161d4     04 E4 05 F1 | 	add	objptr, #4
161d8     FF FF FF FF 
161dc     F2 FE 6B FC | 	wrlong	##-1, objptr
161e0                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
161e0                 | ' if inrun>0 then 
161e0     2C E4 05 F1 | 	add	objptr, #44
161e4     F2 18 02 FB | 	rdlong	arg04, objptr
161e8     50 00 00 FF 
161ec     EC E4 85 F1 | 	sub	objptr, ##41196
161f0     01 18 16 F2 | 	cmp	arg04, #1 wc
161f4     30 00 90 CD |  if_b	jmp	#LR__1860
161f8     50 00 00 FF 
161fc     F0 E4 05 F1 | 	add	objptr, ##41200
16200     F2 12 02 F6 | 	mov	arg01, objptr
16204     38 E4 85 F1 | 	sub	objptr, #56
16208     F2 14 02 FB | 	rdlong	arg02, objptr
1620c     18 16 06 F6 | 	mov	arg03, #24
16210     44 00 00 FF 
16214     EC E5 85 F1 | 	sub	objptr, ##35308
16218     68 A7 B0 FD | 	call	#_psram_spin2_read1
1621c     0B 00 00 FF 
16220     CC E4 85 F1 | 	sub	objptr, ##5836
16224                 | '   psram.read1(varptr(runheader),runptr,24)  
16224                 | '   return
16224     D4 02 90 FD | 	jmp	#LR__1866
16228                 | LR__1860
16228     50 00 00 FF 
1622c     EC E4 05 F1 | 	add	objptr, ##41196
16230     F2 02 68 FC | 	wrlong	#1, objptr
16234     04 E4 05 F1 | 	add	objptr, #4
16238     F2 12 02 F6 | 	mov	arg01, objptr
1623c     38 E4 85 F1 | 	sub	objptr, #56
16240     F2 14 02 FB | 	rdlong	arg02, objptr
16244     18 16 06 F6 | 	mov	arg03, #24
16248     44 00 00 FF 
1624c     EC E5 85 F1 | 	sub	objptr, ##35308
16250     30 A7 B0 FD | 	call	#_psram_spin2_read1
16254                 | ' inrun=1
16254                 | ' psram.read1(varptr(runheader),runptr,24) 
16254                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
16254     45 00 00 FF 
16258     24 E4 05 F1 | 	add	objptr, ##35364
1625c     F2 24 02 FB | 	rdlong	local04, objptr
16260     50 00 00 FF 
16264     F0 E4 85 F1 | 	sub	objptr, ##41200
16268     FF FF 7F FF 
1626c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
16270     50 00 00 AF 
16274     EC E4 05 A1 |  if_e	add	objptr, ##41196
16278     F2 00 68 AC |  if_e	wrlong	#0, objptr
1627c     50 00 00 AF 
16280     EC E4 85 A1 |  if_e	sub	objptr, ##41196
16284     74 02 90 AD |  if_e	jmp	#LR__1866
16288                 | ' do 
16288                 | LR__1861
16288                 | '   if runptr<>oldrunptr then
16288     50 00 00 FF 
1628c     B8 E4 05 F1 | 	add	objptr, ##41144
16290     F2 24 02 FB | 	rdlong	local04, objptr
16294     08 E4 05 F1 | 	add	objptr, #8
16298     F2 18 02 FB | 	rdlong	arg04, objptr
1629c     50 00 00 FF 
162a0     C0 E4 85 F1 | 	sub	objptr, ##41152
162a4     0C 25 0A F2 | 	cmp	local04, arg04 wz
162a8     CC 00 90 AD |  if_e	jmp	#LR__1862
162ac     50 00 00 FF 
162b0     F0 E4 05 F1 | 	add	objptr, ##41200
162b4     F2 12 02 F6 | 	mov	arg01, objptr
162b8     38 E4 85 F1 | 	sub	objptr, #56
162bc     F2 14 02 FB | 	rdlong	arg02, objptr
162c0     18 16 06 F6 | 	mov	arg03, #24
162c4     44 00 00 FF 
162c8     EC E5 85 F1 | 	sub	objptr, ##35308
162cc     B4 A6 B0 FD | 	call	#_psram_spin2_read1
162d0     3B 00 00 FF 
162d4     B0 E5 05 F1 | 	add	objptr, ##30640
162d8     F2 12 02 F6 | 	mov	arg01, objptr
162dc     09 00 00 FF 
162e0     3C E4 05 F1 | 	add	objptr, ##4668
162e4     F2 14 02 FB | 	rdlong	arg02, objptr
162e8     0B 00 00 FF 
162ec     54 E4 85 F1 | 	sub	objptr, ##5716
162f0     F2 24 02 FB | 	rdlong	local04, objptr
162f4     01 24 66 F0 | 	shl	local04, #1
162f8     12 15 02 F1 | 	add	arg02, local04
162fc     0B 00 00 FF 
16300     94 E4 05 F1 | 	add	objptr, ##5780
16304     F2 16 02 FB | 	rdlong	arg03, objptr
16308     40 E4 85 F1 | 	sub	objptr, #64
1630c     F2 24 02 FB | 	rdlong	local04, objptr
16310     12 17 82 F1 | 	sub	arg03, local04
16314     44 00 00 FF 
16318     EC E5 85 F1 | 	sub	objptr, ##35308
1631c     64 A6 B0 FD | 	call	#_psram_spin2_read1
16320     45 00 00 FF 
16324     2C E4 05 F1 | 	add	objptr, ##35372
16328     F2 24 02 FB | 	rdlong	local04, objptr
1632c     40 E4 85 F1 | 	sub	objptr, #64
16330     F2 14 02 FB | 	rdlong	arg02, objptr
16334     0A 25 82 F1 | 	sub	local04, arg02
16338     0B 00 00 FF 
1633c     54 E4 85 F1 | 	sub	objptr, ##5716
16340     F2 14 02 FB | 	rdlong	arg02, objptr
16344     0A 25 12 FD | 	qdiv	local04, arg02
16348     05 00 00 FF 
1634c     18 E4 05 F1 | 	add	objptr, ##2584
16350     18 24 62 FD | 	getqx	local04
16354     03 24 86 F1 | 	sub	local04, #3
16358     F2 24 62 FC | 	wrlong	local04, objptr
1635c     06 00 00 FF 
16360     3C E4 05 F1 | 	add	objptr, ##3132
16364     F2 24 02 FB | 	rdlong	local04, objptr
16368     08 E4 05 F1 | 	add	objptr, #8
1636c     F2 24 62 FC | 	wrlong	local04, objptr
16370     50 00 00 FF 
16374     C0 E4 85 F1 | 	sub	objptr, ##41152
16378                 | LR__1862
16378     50 00 00 FF 
1637c     04 E5 05 F1 | 	add	objptr, ##41220
16380     F2 24 02 FB | 	rdlong	local04, objptr
16384     4C E4 85 F1 | 	sub	objptr, #76
16388     F2 24 62 FC | 	wrlong	local04, objptr
1638c     04 E4 05 F1 | 	add	objptr, #4
16390     F2 12 02 FB | 	rdlong	arg01, objptr
16394     50 00 00 FF 
16398     BC E4 85 F1 | 	sub	objptr, ##41148
1639c     74 53 BF FD | 	call	#_execute_line
163a0     50 00 00 FF 
163a4     BC E4 05 F1 | 	add	objptr, ##41148
163a8     F2 FA 61 FC | 	wrlong	result1, objptr
163ac     04 E4 85 F1 | 	sub	objptr, #4
163b0     F2 24 02 FB | 	rdlong	local04, objptr
163b4     50 00 00 FF 
163b8     B8 E4 85 F1 | 	sub	objptr, ##41144
163bc     FF FF 3F FF 
163c0     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
163c4     30 00 90 AD |  if_e	jmp	#LR__1864
163c8     E0 12 06 F6 | 	mov	arg01, #224
163cc     44 A9 B0 FD | 	call	#_usbnew_spin2_keystate
163d0     00 FA 0D F2 | 	cmp	result1, #0 wz
163d4     10 00 90 5D |  if_ne	jmp	#LR__1863
163d8     E4 12 06 F6 | 	mov	arg01, #228
163dc     34 A9 B0 FD | 	call	#_usbnew_spin2_keystate
163e0     00 FA 0D F2 | 	cmp	result1, #0 wz
163e4     A0 FE 9F AD |  if_e	jmp	#LR__1861
163e8                 | LR__1863
163e8     06 12 06 F6 | 	mov	arg01, #6
163ec     24 A9 B0 FD | 	call	#_usbnew_spin2_keystate
163f0     00 FA 0D F2 | 	cmp	result1, #0 wz
163f4     90 FE 9F AD |  if_e	jmp	#LR__1861
163f8                 | LR__1864
163f8                 | '   ''do whatever kbm.peek_latest_key()=$106 
163f8                 | ' if runptr<>$7FFF_FFFF then 
163f8     50 00 00 FF 
163fc     B8 E4 05 F1 | 	add	objptr, ##41144
16400     F2 24 02 FB | 	rdlong	local04, objptr
16404     50 00 00 FF 
16408     B8 E4 85 F1 | 	sub	objptr, ##41144
1640c     FF FF 3F FF 
16410     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
16414     90 00 90 AD |  if_e	jmp	#LR__1865
16418                 | '   print: print "Stopped at line ";runheader(0) 
16418     00 12 06 F6 | 	mov	arg01, #0
1641c     D0 0E B1 FD | 	call	#__system___getiolock_0570
16420     FD 12 02 F6 | 	mov	arg01, result1
16424     9C B1 B0 FD | 	call	#__system___lockmem
16428     00 12 06 F6 | 	mov	arg01, #0
1642c     0A 14 06 F6 | 	mov	arg02, #10
16430     00 16 06 F6 | 	mov	arg03, #0
16434     28 BE B0 FD | 	call	#__system___basic_print_char
16438     00 12 06 F6 | 	mov	arg01, #0
1643c     B0 0E B1 FD | 	call	#__system___getiolock_0570
16440     FD 00 68 FC | 	wrlong	#0, result1
16444     00 12 06 F6 | 	mov	arg01, #0
16448     A4 0E B1 FD | 	call	#__system___getiolock_0570
1644c     FD 12 02 F6 | 	mov	arg01, result1
16450     70 B1 B0 FD | 	call	#__system___lockmem
16454     8D 01 00 FF 
16458     10 15 06 F6 | 	mov	arg02, ##@LR__5601
1645c     00 12 06 F6 | 	mov	arg01, #0
16460     00 16 06 F6 | 	mov	arg03, #0
16464     50 BE B0 FD | 	call	#__system___basic_print_string
16468     50 00 00 FF 
1646c     F0 E4 05 F1 | 	add	objptr, ##41200
16470     F2 14 02 FB | 	rdlong	arg02, objptr
16474     50 00 00 FF 
16478     F0 E4 85 F1 | 	sub	objptr, ##41200
1647c     00 12 06 F6 | 	mov	arg01, #0
16480     00 16 06 F6 | 	mov	arg03, #0
16484     0A 18 06 F6 | 	mov	arg04, #10
16488     B0 BE B0 FD | 	call	#__system___basic_print_unsigned
1648c     00 12 06 F6 | 	mov	arg01, #0
16490     0A 14 06 F6 | 	mov	arg02, #10
16494     00 16 06 F6 | 	mov	arg03, #0
16498     C4 BD B0 FD | 	call	#__system___basic_print_char
1649c     00 12 06 F6 | 	mov	arg01, #0
164a0     4C 0E B1 FD | 	call	#__system___getiolock_0570
164a4     FD 00 68 FC | 	wrlong	#0, result1
164a8                 | LR__1865
164a8     50 00 00 FF 
164ac     EC E4 05 F1 | 	add	objptr, ##41196
164b0     F2 00 68 FC | 	wrlong	#0, objptr
164b4     06 00 00 FF 
164b8     6C E4 85 F1 | 	sub	objptr, ##3180
164bc     F2 1E 62 FC | 	wrlong	local01, objptr
164c0     06 00 00 FF 
164c4     38 E4 05 F1 | 	add	objptr, ##3128
164c8     F2 20 62 FC | 	wrlong	local02, objptr
164cc     04 E4 05 F1 | 	add	objptr, #4
164d0     F2 22 62 FC | 	wrlong	local03, objptr
164d4     50 00 00 FF 
164d8     BC E4 85 F1 | 	sub	objptr, ##41148
164dc     11 12 06 F6 | 	mov	arg01, #17
164e0     08 14 06 F6 | 	mov	arg02, #8
164e4     10 16 06 F6 | 	mov	arg03, #16
164e8     DC 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
164ec     10 12 06 F6 | 	mov	arg01, #16
164f0     20 14 06 F6 | 	mov	arg02, #32
164f4     20 16 06 F6 | 	mov	arg03, #32
164f8     CC 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
164fc                 | LR__1866
164fc     A7 F0 03 F6 | 	mov	ptra, fp
16500     B2 00 A0 FD | 	call	#popregs_
16504                 | _do_run_ret
16504     2D 00 64 FD | 	ret
16508                 | 
16508                 | ' 
16508                 | ' ' ------------------ save
16508                 | ' 
16508                 | ' sub do_save                        
16508                 | _do_save
16508     04 4A 05 F6 | 	mov	COUNT_, #4
1650c     A8 00 A0 FD | 	call	#pushregs_
16510     B8 F0 07 F1 | 	add	ptra, #184
16514     4A 00 00 FF 
16518     80 E4 05 F1 | 	add	objptr, ##38016
1651c     F2 1E 02 FB | 	rdlong	local01, objptr
16520     0F 21 02 F6 | 	mov	local02, local01
16524     01 20 66 F0 | 	shl	local02, #1
16528     0F 21 02 F1 | 	add	local02, local01
1652c     02 20 66 F0 | 	shl	local02, #2
16530     03 00 00 FF 
16534     04 E4 85 F1 | 	sub	objptr, ##1540
16538     F2 20 02 F1 | 	add	local02, objptr
1653c     10 23 02 FB | 	rdlong	local03, local02
16540     10 4E 05 F1 | 	add	fp, #16
16544     A7 22 62 FC | 	wrlong	local03, fp
16548                 | ' 
16548                 | ' numpar=compiledline(lineptr_e).result.uresult
16548                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
16548     10 4E 85 F1 | 	sub	fp, #16
1654c     01 22 56 F2 | 	cmps	local03, #1 wc
16550     47 00 00 FF 
16554     7C E4 85 F1 | 	sub	objptr, ##36476
16558     20 00 90 CD |  if_b	jmp	#LR__1870
1655c     B8 52 BF FD | 	call	#_pop
16560     A7 FA 61 FC | 	wrlong	result1, fp
16564     04 4E 05 F1 | 	add	fp, #4
16568     A7 FC 61 FC | 	wrlong	result2, fp
1656c     04 4E 05 F1 | 	add	fp, #4
16570     A7 FE 61 FC | 	wrlong	result3, fp
16574     08 4E 85 F1 | 	sub	fp, #8
16578     24 00 90 FD | 	jmp	#LR__1871
1657c                 | LR__1870
1657c     51 00 00 FF 
16580     D8 E5 05 F1 | 	add	objptr, ##41944
16584     F2 22 02 FB | 	rdlong	local03, objptr
16588     51 00 00 FF 
1658c     D8 E5 85 F1 | 	sub	objptr, ##41944
16590     A7 22 62 FC | 	wrlong	local03, fp
16594     08 4E 05 F1 | 	add	fp, #8
16598     A7 3E 68 FC | 	wrlong	#31, fp
1659c     08 4E 85 F1 | 	sub	fp, #8
165a0                 | LR__1871
165a0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
165a0     4A 00 00 FF 
165a4     88 E4 05 F1 | 	add	objptr, ##38024
165a8     F2 12 02 FB | 	rdlong	arg01, objptr
165ac     4A 00 00 FF 
165b0     88 E4 85 F1 | 	sub	objptr, ##38024
165b4     08 7D B0 FD | 	call	#_pslpeek
165b8     FF FF 7F FF 
165bc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
165c0     10 00 90 5D |  if_ne	jmp	#LR__1872
165c4     1B 12 06 F6 | 	mov	arg01, #27
165c8     00 14 06 F6 | 	mov	arg02, #0
165cc     34 7A B0 FD | 	call	#_printerror
165d0     CC 02 90 FD | 	jmp	#LR__1878
165d4                 | LR__1872
165d4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
165d4     08 4E 05 F1 | 	add	fp, #8
165d8     A7 22 02 FB | 	rdlong	local03, fp
165dc     08 4E 85 F1 | 	sub	fp, #8
165e0     2B 22 0E F2 | 	cmp	local03, #43 wz
165e4     18 00 90 5D |  if_ne	jmp	#LR__1873
165e8     A7 12 02 FB | 	rdlong	arg01, fp
165ec     A0 53 BF FD | 	call	#_convertstring
165f0     A7 FA 61 FC | 	wrlong	result1, fp
165f4     08 4E 05 F1 | 	add	fp, #8
165f8     A7 3E 68 FC | 	wrlong	#31, fp
165fc     08 4E 85 F1 | 	sub	fp, #8
16600                 | LR__1873
16600                 | ' if t1.result_type=result_string then
16600     08 4E 05 F1 | 	add	fp, #8
16604     A7 22 02 FB | 	rdlong	local03, fp
16608     08 4E 85 F1 | 	sub	fp, #8
1660c     1F 22 0E F2 | 	cmp	local03, #31 wz
16610     8C 02 90 5D |  if_ne	jmp	#LR__1877
16614                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
16614     A7 12 02 FB | 	rdlong	arg01, fp
16618     8D 01 00 FF 
1661c     21 15 06 F6 | 	mov	arg02, ##@LR__5602
16620     C8 AF B0 FD | 	call	#__system___string_cmp
16624     00 FA 0D F2 | 	cmp	result1, #0 wz
16628     51 00 00 AF 
1662c     D8 E5 05 A1 |  if_e	add	objptr, ##41944
16630     F2 22 02 AB |  if_e	rdlong	local03, objptr
16634     A7 22 62 AC |  if_e	wrlong	local03, fp
16638     51 00 00 AF 
1663c     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
16640     A7 22 02 5B |  if_ne	rdlong	local03, fp
16644     51 00 00 5F 
16648     D8 E5 05 51 |  if_ne	add	objptr, ##41944
1664c     F2 22 62 5C |  if_ne	wrlong	local03, objptr
16650     51 00 00 5F 
16654     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
16658                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
16658     09 12 06 F6 | 	mov	arg01, #9
1665c     00 02 B1 FD | 	call	#__system__close
16660     09 22 06 F6 | 	mov	local03, #9
16664     4A 00 00 FF 
16668     94 E4 05 F1 | 	add	objptr, ##38036
1666c     F2 12 02 FB | 	rdlong	arg01, objptr
16670     4A 00 00 FF 
16674     94 E4 85 F1 | 	sub	objptr, ##38036
16678     8D 01 00 FF 
1667c     22 15 06 F6 | 	mov	arg02, ##@LR__5603
16680     9C AF B0 FD | 	call	#__system___string_concat
16684     FD 12 02 F6 | 	mov	arg01, result1
16688     A7 14 02 FB | 	rdlong	arg02, fp
1668c     90 AF B0 FD | 	call	#__system___string_concat
16690     FD 14 02 F6 | 	mov	arg02, result1
16694     11 13 02 F6 | 	mov	arg01, local03
16698     0D 16 06 F6 | 	mov	arg03, #13
1669c     28 BB B0 FD | 	call	#__system___basic_open_string
166a0     4A 00 00 FF 
166a4     88 E4 05 F1 | 	add	objptr, ##38024
166a8     F2 22 02 FB | 	rdlong	local03, objptr
166ac     4A 00 00 FF 
166b0     88 E4 85 F1 | 	sub	objptr, ##38024
166b4     B0 4E 05 F1 | 	add	fp, #176
166b8     A7 22 62 FC | 	wrlong	local03, fp
166bc     B0 4E 85 F1 | 	sub	fp, #176
166c0                 | '   saveptr=programstart
166c0                 | '   do
166c0                 | LR__1874
166c0     14 4E 05 F1 | 	add	fp, #20
166c4     A7 12 02 F6 | 	mov	arg01, fp
166c8     9C 4E 05 F1 | 	add	fp, #156
166cc     A7 14 02 FB | 	rdlong	arg02, fp
166d0     B0 4E 85 F1 | 	sub	fp, #176
166d4     18 16 06 F6 | 	mov	arg03, #24
166d8     0B 00 00 FF 
166dc     CC E4 05 F1 | 	add	objptr, ##5836
166e0     A0 A2 B0 FD | 	call	#_psram_spin2_read1
166e4     2C 4E 05 F1 | 	add	fp, #44
166e8     A7 12 02 F6 | 	mov	arg01, fp
166ec     10 4E 85 F1 | 	sub	fp, #16
166f0     A7 14 02 FB | 	rdlong	arg02, fp
166f4     04 4E 05 F1 | 	add	fp, #4
166f8     A7 16 02 FB | 	rdlong	arg03, fp
166fc     20 4E 85 F1 | 	sub	fp, #32
16700     80 A2 B0 FD | 	call	#_psram_spin2_read1
16704     0B 00 00 FF 
16708     CC E4 85 F1 | 	sub	objptr, ##5836
1670c     8D 01 00 FF 
16710     24 23 06 F6 | 	mov	local03, ##@LR__5604
16714     AC 4E 05 F1 | 	add	fp, #172
16718     A7 22 62 FC | 	wrlong	local03, fp
1671c                 | '     psram.read1(varptr(header(0)),saveptr,24)
1671c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1671c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1671c     A0 4E 85 F1 | 	sub	fp, #160
16720     A7 02 68 FC | 	wrlong	#1, fp
16724     14 4E 05 F1 | 	add	fp, #20
16728     A7 24 02 FB | 	rdlong	local04, fp
1672c     20 4E 85 F1 | 	sub	fp, #32
16730     01 24 06 F1 | 	add	local04, #1
16734                 | LR__1875
16734     0C 4E 05 F1 | 	add	fp, #12
16738     A7 22 02 FB | 	rdlong	local03, fp
1673c     0C 4E 85 F1 | 	sub	fp, #12
16740     12 23 52 F2 | 	cmps	local03, local04 wc
16744     54 00 90 3D |  if_ae	jmp	#LR__1876
16748     AC 4E 05 F1 | 	add	fp, #172
1674c     A7 1E 02 FB | 	rdlong	local01, fp
16750     A0 4E 85 F1 | 	sub	fp, #160
16754     A7 22 02 FB | 	rdlong	local03, fp
16758     01 22 86 F1 | 	sub	local03, #1
1675c     20 4E 05 F1 | 	add	fp, #32
16760     A7 22 02 F1 | 	add	local03, fp
16764     11 13 C2 FA | 	rdbyte	arg01, local03
16768     2C 4E 85 F1 | 	sub	fp, #44
1676c     94 D0 B0 FD | 	call	#__system__Chr_S
16770     FD 14 02 F6 | 	mov	arg02, result1
16774     0F 13 02 F6 | 	mov	arg01, local01
16778     A4 AE B0 FD | 	call	#__system___string_concat
1677c     AC 4E 05 F1 | 	add	fp, #172
16780     A7 FA 61 FC | 	wrlong	result1, fp
16784     A0 4E 85 F1 | 	sub	fp, #160
16788     A7 22 02 FB | 	rdlong	local03, fp
1678c     01 22 06 F1 | 	add	local03, #1
16790     A7 22 62 FC | 	wrlong	local03, fp
16794     0C 4E 85 F1 | 	sub	fp, #12
16798     98 FF 9F FD | 	jmp	#LR__1875
1679c                 | LR__1876
1679c                 | '     print #9, saveline$
1679c     09 12 06 F6 | 	mov	arg01, #9
167a0     4C 0B B1 FD | 	call	#__system___getiolock_0570
167a4     FD 12 02 F6 | 	mov	arg01, result1
167a8     18 AE B0 FD | 	call	#__system___lockmem
167ac     AC 4E 05 F1 | 	add	fp, #172
167b0     A7 14 02 FB | 	rdlong	arg02, fp
167b4     AC 4E 85 F1 | 	sub	fp, #172
167b8     09 12 06 F6 | 	mov	arg01, #9
167bc     00 16 06 F6 | 	mov	arg03, #0
167c0     F4 BA B0 FD | 	call	#__system___basic_print_string
167c4     09 12 06 F6 | 	mov	arg01, #9
167c8     0A 14 06 F6 | 	mov	arg02, #10
167cc     00 16 06 F6 | 	mov	arg03, #0
167d0     8C BA B0 FD | 	call	#__system___basic_print_char
167d4     09 12 06 F6 | 	mov	arg01, #9
167d8     14 0B B1 FD | 	call	#__system___getiolock_0570
167dc     FD 00 68 FC | 	wrlong	#0, result1
167e0     28 4E 05 F1 | 	add	fp, #40
167e4     A7 22 02 FB | 	rdlong	local03, fp
167e8     88 4E 05 F1 | 	add	fp, #136
167ec     A7 22 62 FC | 	wrlong	local03, fp
167f0     88 4E 85 F1 | 	sub	fp, #136
167f4     A7 22 02 FB | 	rdlong	local03, fp
167f8     28 4E 85 F1 | 	sub	fp, #40
167fc     FF FF 3F FF 
16800     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
16804     B8 FE 9F 5D |  if_ne	jmp	#LR__1874
16808                 | '   close #9  
16808     09 12 06 F6 | 	mov	arg01, #9
1680c     50 00 B1 FD | 	call	#__system__close
16810                 | '   print "Saved as ";currentdir$+"/"+loadname
16810     00 12 06 F6 | 	mov	arg01, #0
16814     D8 0A B1 FD | 	call	#__system___getiolock_0570
16818     FD 12 02 F6 | 	mov	arg01, result1
1681c     A4 AD B0 FD | 	call	#__system___lockmem
16820     8D 01 00 FF 
16824     25 15 06 F6 | 	mov	arg02, ##@LR__5605
16828     00 12 06 F6 | 	mov	arg01, #0
1682c     00 16 06 F6 | 	mov	arg03, #0
16830     84 BA B0 FD | 	call	#__system___basic_print_string
16834     00 20 06 F6 | 	mov	local02, #0
16838     4A 00 00 FF 
1683c     94 E4 05 F1 | 	add	objptr, ##38036
16840     F2 12 02 FB | 	rdlong	arg01, objptr
16844     4A 00 00 FF 
16848     94 E4 85 F1 | 	sub	objptr, ##38036
1684c     8D 01 00 FF 
16850     2F 15 06 F6 | 	mov	arg02, ##@LR__5606
16854     C8 AD B0 FD | 	call	#__system___string_concat
16858     FD 12 02 F6 | 	mov	arg01, result1
1685c     51 00 00 FF 
16860     D8 E5 05 F1 | 	add	objptr, ##41944
16864     F2 14 02 FB | 	rdlong	arg02, objptr
16868     51 00 00 FF 
1686c     D8 E5 85 F1 | 	sub	objptr, ##41944
16870     AC AD B0 FD | 	call	#__system___string_concat
16874     FD 14 02 F6 | 	mov	arg02, result1
16878     10 13 02 F6 | 	mov	arg01, local02
1687c     00 16 06 F6 | 	mov	arg03, #0
16880     34 BA B0 FD | 	call	#__system___basic_print_string
16884     00 12 06 F6 | 	mov	arg01, #0
16888     0A 14 06 F6 | 	mov	arg02, #10
1688c     00 16 06 F6 | 	mov	arg03, #0
16890     CC B9 B0 FD | 	call	#__system___basic_print_char
16894     00 12 06 F6 | 	mov	arg01, #0
16898     54 0A B1 FD | 	call	#__system___getiolock_0570
1689c     FD 00 68 FC | 	wrlong	#0, result1
168a0                 | LR__1877
168a0                 | LR__1878
168a0     A7 F0 03 F6 | 	mov	ptra, fp
168a4     B2 00 A0 FD | 	call	#popregs_
168a8                 | _do_save_ret
168a8     2D 00 64 FD | 	ret
168ac                 | 
168ac                 | ' 
168ac                 | ' ' ------------------ setdelay
168ac                 | ' 
168ac                 | ' sub do_setdelay
168ac                 | _do_setdelay
168ac     02 4A 05 F6 | 	mov	COUNT_, #2
168b0     A8 00 A0 FD | 	call	#pushregs_
168b4     18 F0 07 F1 | 	add	ptra, #24
168b8     5C 4F BF FD | 	call	#_pop
168bc     FD 12 02 F6 | 	mov	arg01, result1
168c0     FE 1E 02 F6 | 	mov	local01, result2
168c4     FF 20 02 F6 | 	mov	local02, result3
168c8     A7 12 62 FC | 	wrlong	arg01, fp
168cc     04 4E 05 F1 | 	add	fp, #4
168d0     A7 1E 62 FC | 	wrlong	local01, fp
168d4     04 4E 05 F1 | 	add	fp, #4
168d8     A7 20 62 FC | 	wrlong	local02, fp
168dc     08 4E 85 F1 | 	sub	fp, #8
168e0     34 4F BF FD | 	call	#_pop
168e4     FD 20 02 F6 | 	mov	local02, result1
168e8     0C 4E 05 F1 | 	add	fp, #12
168ec     A7 20 62 FC | 	wrlong	local02, fp
168f0     04 4E 05 F1 | 	add	fp, #4
168f4     A7 FC 61 FC | 	wrlong	result2, fp
168f8     04 4E 05 F1 | 	add	fp, #4
168fc     A7 FE 61 FC | 	wrlong	result3, fp
16900     08 4E 85 F1 | 	sub	fp, #8
16904     A7 12 02 F6 | 	mov	arg01, fp
16908     0C 4E 85 F1 | 	sub	fp, #12
1690c     EC 50 BF FD | 	call	#_converttoint
16910     FD 20 02 F6 | 	mov	local02, result1
16914     10 1F 02 F6 | 	mov	local01, local02
16918     01 1E 66 F0 | 	shl	local01, #1
1691c     10 1F 02 F1 | 	add	local01, local02
16920     03 1E 66 F0 | 	shl	local01, #3
16924     14 00 00 FF 
16928     38 E5 05 F1 | 	add	objptr, ##10552
1692c     F2 1E 02 F1 | 	add	local01, objptr
16930     A7 12 02 F6 | 	mov	arg01, fp
16934     14 00 00 FF 
16938     38 E5 85 F1 | 	sub	objptr, ##10552
1693c     BC 50 BF FD | 	call	#_converttoint
16940     06 1E 06 F1 | 	add	local01, #6
16944     0F FB 51 FC | 	wrword	result1, local01
16948     A7 F0 03 F6 | 	mov	ptra, fp
1694c     B2 00 A0 FD | 	call	#popregs_
16950                 | _do_setdelay_ret
16950     2D 00 64 FD | 	ret
16954                 | 
16954                 | ' 
16954                 | ' ' ------------------ setenv
16954                 | ' 
16954                 | ' sub do_setenv
16954                 | _do_setenv
16954     02 4A 05 F6 | 	mov	COUNT_, #2
16958     A8 00 A0 FD | 	call	#pushregs_
1695c     18 F0 07 F1 | 	add	ptra, #24
16960     B4 4E BF FD | 	call	#_pop
16964     FD 12 02 F6 | 	mov	arg01, result1
16968     FE 1E 02 F6 | 	mov	local01, result2
1696c     FF 20 02 F6 | 	mov	local02, result3
16970     A7 12 62 FC | 	wrlong	arg01, fp
16974     04 4E 05 F1 | 	add	fp, #4
16978     A7 1E 62 FC | 	wrlong	local01, fp
1697c     04 4E 05 F1 | 	add	fp, #4
16980     A7 20 62 FC | 	wrlong	local02, fp
16984     08 4E 85 F1 | 	sub	fp, #8
16988     8C 4E BF FD | 	call	#_pop
1698c     FD 20 02 F6 | 	mov	local02, result1
16990     0C 4E 05 F1 | 	add	fp, #12
16994     A7 20 62 FC | 	wrlong	local02, fp
16998     04 4E 05 F1 | 	add	fp, #4
1699c     A7 FC 61 FC | 	wrlong	result2, fp
169a0     04 4E 05 F1 | 	add	fp, #4
169a4     A7 FE 61 FC | 	wrlong	result3, fp
169a8     08 4E 85 F1 | 	sub	fp, #8
169ac     A7 12 02 F6 | 	mov	arg01, fp
169b0     0C 4E 85 F1 | 	sub	fp, #12
169b4     44 50 BF FD | 	call	#_converttoint
169b8     FD 20 02 F6 | 	mov	local02, result1
169bc     10 1F 02 F6 | 	mov	local01, local02
169c0     01 1E 66 F0 | 	shl	local01, #1
169c4     10 1F 02 F1 | 	add	local01, local02
169c8     03 1E 66 F0 | 	shl	local01, #3
169cc     14 00 00 FF 
169d0     38 E5 05 F1 | 	add	objptr, ##10552
169d4     F2 1E 02 F1 | 	add	local01, objptr
169d8     A7 12 02 F6 | 	mov	arg01, fp
169dc     14 00 00 FF 
169e0     38 E5 85 F1 | 	sub	objptr, ##10552
169e4     14 50 BF FD | 	call	#_converttoint
169e8     05 1E 06 F1 | 	add	local01, #5
169ec     0F FB 41 FC | 	wrbyte	result1, local01
169f0     A7 F0 03 F6 | 	mov	ptra, fp
169f4     B2 00 A0 FD | 	call	#popregs_
169f8                 | _do_setenv_ret
169f8     2D 00 64 FD | 	ret
169fc                 | 
169fc                 | ' 
169fc                 | ' ' ------------------ setlen
169fc                 | ' 
169fc                 | ' sub do_setlen
169fc                 | _do_setlen
169fc     02 4A 05 F6 | 	mov	COUNT_, #2
16a00     A8 00 A0 FD | 	call	#pushregs_
16a04     18 F0 07 F1 | 	add	ptra, #24
16a08     0C 4E BF FD | 	call	#_pop
16a0c     FD 12 02 F6 | 	mov	arg01, result1
16a10     FE 1E 02 F6 | 	mov	local01, result2
16a14     FF 20 02 F6 | 	mov	local02, result3
16a18     A7 12 62 FC | 	wrlong	arg01, fp
16a1c     04 4E 05 F1 | 	add	fp, #4
16a20     A7 1E 62 FC | 	wrlong	local01, fp
16a24     04 4E 05 F1 | 	add	fp, #4
16a28     A7 20 62 FC | 	wrlong	local02, fp
16a2c     08 4E 85 F1 | 	sub	fp, #8
16a30     E4 4D BF FD | 	call	#_pop
16a34     FD 20 02 F6 | 	mov	local02, result1
16a38     0C 4E 05 F1 | 	add	fp, #12
16a3c     A7 20 62 FC | 	wrlong	local02, fp
16a40     04 4E 05 F1 | 	add	fp, #4
16a44     A7 FC 61 FC | 	wrlong	result2, fp
16a48     04 4E 05 F1 | 	add	fp, #4
16a4c     A7 FE 61 FC | 	wrlong	result3, fp
16a50     08 4E 85 F1 | 	sub	fp, #8
16a54     A7 12 02 F6 | 	mov	arg01, fp
16a58     0C 4E 85 F1 | 	sub	fp, #12
16a5c     9C 4F BF FD | 	call	#_converttoint
16a60     FD 20 02 F6 | 	mov	local02, result1
16a64     10 1F 02 F6 | 	mov	local01, local02
16a68     01 1E 66 F0 | 	shl	local01, #1
16a6c     10 1F 02 F1 | 	add	local01, local02
16a70     03 1E 66 F0 | 	shl	local01, #3
16a74     14 00 00 FF 
16a78     38 E5 05 F1 | 	add	objptr, ##10552
16a7c     F2 1E 02 F1 | 	add	local01, objptr
16a80     A7 12 02 F6 | 	mov	arg01, fp
16a84     14 00 00 FF 
16a88     38 E5 85 F1 | 	sub	objptr, ##10552
16a8c     28 50 BF FD | 	call	#_converttofloat
16a90     08 1E 06 F1 | 	add	local01, #8
16a94     0F FB 61 FC | 	wrlong	result1, local01
16a98     A7 F0 03 F6 | 	mov	ptra, fp
16a9c     B2 00 A0 FD | 	call	#popregs_
16aa0                 | _do_setlen_ret
16aa0     2D 00 64 FD | 	ret
16aa4                 | 
16aa4                 | ' 
16aa4                 | ' ' ------------------ setpan
16aa4                 | ' 
16aa4                 | ' sub do_setpan
16aa4                 | _do_setpan
16aa4     02 4A 05 F6 | 	mov	COUNT_, #2
16aa8     A8 00 A0 FD | 	call	#pushregs_
16aac     18 F0 07 F1 | 	add	ptra, #24
16ab0     64 4D BF FD | 	call	#_pop
16ab4     FD 12 02 F6 | 	mov	arg01, result1
16ab8     FE 1E 02 F6 | 	mov	local01, result2
16abc     FF 20 02 F6 | 	mov	local02, result3
16ac0     A7 12 62 FC | 	wrlong	arg01, fp
16ac4     04 4E 05 F1 | 	add	fp, #4
16ac8     A7 1E 62 FC | 	wrlong	local01, fp
16acc     04 4E 05 F1 | 	add	fp, #4
16ad0     A7 20 62 FC | 	wrlong	local02, fp
16ad4     08 4E 85 F1 | 	sub	fp, #8
16ad8     3C 4D BF FD | 	call	#_pop
16adc     FD 20 02 F6 | 	mov	local02, result1
16ae0     0C 4E 05 F1 | 	add	fp, #12
16ae4     A7 20 62 FC | 	wrlong	local02, fp
16ae8     04 4E 05 F1 | 	add	fp, #4
16aec     A7 FC 61 FC | 	wrlong	result2, fp
16af0     04 4E 05 F1 | 	add	fp, #4
16af4     A7 FE 61 FC | 	wrlong	result3, fp
16af8     08 4E 85 F1 | 	sub	fp, #8
16afc     A7 12 02 F6 | 	mov	arg01, fp
16b00     0C 4E 85 F1 | 	sub	fp, #12
16b04     F4 4E BF FD | 	call	#_converttoint
16b08     FD 20 02 F6 | 	mov	local02, result1
16b0c     10 1F 02 F6 | 	mov	local01, local02
16b10     01 1E 66 F0 | 	shl	local01, #1
16b14     10 1F 02 F1 | 	add	local01, local02
16b18     03 1E 66 F0 | 	shl	local01, #3
16b1c     14 00 00 FF 
16b20     38 E5 05 F1 | 	add	objptr, ##10552
16b24     F2 1E 02 F1 | 	add	local01, objptr
16b28     A7 12 02 F6 | 	mov	arg01, fp
16b2c     14 00 00 FF 
16b30     38 E5 85 F1 | 	sub	objptr, ##10552
16b34     80 4F BF FD | 	call	#_converttofloat
16b38     10 1E 06 F1 | 	add	local01, #16
16b3c     0F FB 61 FC | 	wrlong	result1, local01
16b40     A7 F0 03 F6 | 	mov	ptra, fp
16b44     B2 00 A0 FD | 	call	#popregs_
16b48                 | _do_setpan_ret
16b48     2D 00 64 FD | 	ret
16b4c                 | 
16b4c                 | ' 
16b4c                 | ' ' ------------------ setsustain
16b4c                 | ' 
16b4c                 | ' sub do_setsustain
16b4c                 | _do_setsustain
16b4c     02 4A 05 F6 | 	mov	COUNT_, #2
16b50     A8 00 A0 FD | 	call	#pushregs_
16b54     18 F0 07 F1 | 	add	ptra, #24
16b58     BC 4C BF FD | 	call	#_pop
16b5c     FD 12 02 F6 | 	mov	arg01, result1
16b60     FE 1E 02 F6 | 	mov	local01, result2
16b64     FF 20 02 F6 | 	mov	local02, result3
16b68     A7 12 62 FC | 	wrlong	arg01, fp
16b6c     04 4E 05 F1 | 	add	fp, #4
16b70     A7 1E 62 FC | 	wrlong	local01, fp
16b74     04 4E 05 F1 | 	add	fp, #4
16b78     A7 20 62 FC | 	wrlong	local02, fp
16b7c     08 4E 85 F1 | 	sub	fp, #8
16b80     94 4C BF FD | 	call	#_pop
16b84     FD 20 02 F6 | 	mov	local02, result1
16b88     0C 4E 05 F1 | 	add	fp, #12
16b8c     A7 20 62 FC | 	wrlong	local02, fp
16b90     04 4E 05 F1 | 	add	fp, #4
16b94     A7 FC 61 FC | 	wrlong	result2, fp
16b98     04 4E 05 F1 | 	add	fp, #4
16b9c     A7 FE 61 FC | 	wrlong	result3, fp
16ba0     08 4E 85 F1 | 	sub	fp, #8
16ba4     A7 12 02 F6 | 	mov	arg01, fp
16ba8     0C 4E 85 F1 | 	sub	fp, #12
16bac     4C 4E BF FD | 	call	#_converttoint
16bb0     FD 20 02 F6 | 	mov	local02, result1
16bb4     10 1F 02 F6 | 	mov	local01, local02
16bb8     01 1E 66 F0 | 	shl	local01, #1
16bbc     10 1F 02 F1 | 	add	local01, local02
16bc0     03 1E 66 F0 | 	shl	local01, #3
16bc4     14 00 00 FF 
16bc8     38 E5 05 F1 | 	add	objptr, ##10552
16bcc     F2 1E 02 F1 | 	add	local01, objptr
16bd0     A7 12 02 F6 | 	mov	arg01, fp
16bd4     14 00 00 FF 
16bd8     38 E5 85 F1 | 	sub	objptr, ##10552
16bdc     1C 4E BF FD | 	call	#_converttoint
16be0     14 1E 06 F1 | 	add	local01, #20
16be4     0F FB 51 FC | 	wrword	result1, local01
16be8     A7 F0 03 F6 | 	mov	ptra, fp
16bec     B2 00 A0 FD | 	call	#popregs_
16bf0                 | _do_setsustain_ret
16bf0     2D 00 64 FD | 	ret
16bf4                 | 
16bf4                 | ' 
16bf4                 | ' ' ------------------ setvol
16bf4                 | ' 
16bf4                 | ' sub do_setvol
16bf4                 | _do_setvol
16bf4     02 4A 05 F6 | 	mov	COUNT_, #2
16bf8     A8 00 A0 FD | 	call	#pushregs_
16bfc     18 F0 07 F1 | 	add	ptra, #24
16c00     14 4C BF FD | 	call	#_pop
16c04     FD 12 02 F6 | 	mov	arg01, result1
16c08     FE 1E 02 F6 | 	mov	local01, result2
16c0c     FF 20 02 F6 | 	mov	local02, result3
16c10     A7 12 62 FC | 	wrlong	arg01, fp
16c14     04 4E 05 F1 | 	add	fp, #4
16c18     A7 1E 62 FC | 	wrlong	local01, fp
16c1c     04 4E 05 F1 | 	add	fp, #4
16c20     A7 20 62 FC | 	wrlong	local02, fp
16c24     08 4E 85 F1 | 	sub	fp, #8
16c28     EC 4B BF FD | 	call	#_pop
16c2c     FD 20 02 F6 | 	mov	local02, result1
16c30     0C 4E 05 F1 | 	add	fp, #12
16c34     A7 20 62 FC | 	wrlong	local02, fp
16c38     04 4E 05 F1 | 	add	fp, #4
16c3c     A7 FC 61 FC | 	wrlong	result2, fp
16c40     04 4E 05 F1 | 	add	fp, #4
16c44     A7 FE 61 FC | 	wrlong	result3, fp
16c48     08 4E 85 F1 | 	sub	fp, #8
16c4c     A7 12 02 F6 | 	mov	arg01, fp
16c50     0C 4E 85 F1 | 	sub	fp, #12
16c54     A4 4D BF FD | 	call	#_converttoint
16c58     FD 20 02 F6 | 	mov	local02, result1
16c5c     10 1F 02 F6 | 	mov	local01, local02
16c60     01 1E 66 F0 | 	shl	local01, #1
16c64     10 1F 02 F1 | 	add	local01, local02
16c68     03 1E 66 F0 | 	shl	local01, #3
16c6c     14 00 00 FF 
16c70     38 E5 05 F1 | 	add	objptr, ##10552
16c74     F2 1E 02 F1 | 	add	local01, objptr
16c78     A7 12 02 F6 | 	mov	arg01, fp
16c7c     14 00 00 FF 
16c80     38 E5 85 F1 | 	sub	objptr, ##10552
16c84     30 4E BF FD | 	call	#_converttofloat
16c88     0C 1E 06 F1 | 	add	local01, #12
16c8c     0F FB 61 FC | 	wrlong	result1, local01
16c90     A7 F0 03 F6 | 	mov	ptra, fp
16c94     B2 00 A0 FD | 	call	#popregs_
16c98                 | _do_setvol_ret
16c98     2D 00 64 FD | 	ret
16c9c                 | 
16c9c                 | ' 
16c9c                 | ' ' ------------------ setwave
16c9c                 | ' 
16c9c                 | ' sub do_setwave
16c9c                 | _do_setwave
16c9c     02 4A 05 F6 | 	mov	COUNT_, #2
16ca0     A8 00 A0 FD | 	call	#pushregs_
16ca4     18 F0 07 F1 | 	add	ptra, #24
16ca8     6C 4B BF FD | 	call	#_pop
16cac     FD 12 02 F6 | 	mov	arg01, result1
16cb0     FE 1E 02 F6 | 	mov	local01, result2
16cb4     FF 20 02 F6 | 	mov	local02, result3
16cb8     A7 12 62 FC | 	wrlong	arg01, fp
16cbc     04 4E 05 F1 | 	add	fp, #4
16cc0     A7 1E 62 FC | 	wrlong	local01, fp
16cc4     04 4E 05 F1 | 	add	fp, #4
16cc8     A7 20 62 FC | 	wrlong	local02, fp
16ccc     08 4E 85 F1 | 	sub	fp, #8
16cd0     44 4B BF FD | 	call	#_pop
16cd4     FD 20 02 F6 | 	mov	local02, result1
16cd8     0C 4E 05 F1 | 	add	fp, #12
16cdc     A7 20 62 FC | 	wrlong	local02, fp
16ce0     04 4E 05 F1 | 	add	fp, #4
16ce4     A7 FC 61 FC | 	wrlong	result2, fp
16ce8     04 4E 05 F1 | 	add	fp, #4
16cec     A7 FE 61 FC | 	wrlong	result3, fp
16cf0     08 4E 85 F1 | 	sub	fp, #8
16cf4     A7 12 02 F6 | 	mov	arg01, fp
16cf8     0C 4E 85 F1 | 	sub	fp, #12
16cfc     FC 4C BF FD | 	call	#_converttoint
16d00     FD 20 02 F6 | 	mov	local02, result1
16d04     10 1F 02 F6 | 	mov	local01, local02
16d08     01 1E 66 F0 | 	shl	local01, #1
16d0c     10 1F 02 F1 | 	add	local01, local02
16d10     03 1E 66 F0 | 	shl	local01, #3
16d14     14 00 00 FF 
16d18     38 E5 05 F1 | 	add	objptr, ##10552
16d1c     F2 1E 02 F1 | 	add	local01, objptr
16d20     A7 12 02 F6 | 	mov	arg01, fp
16d24     14 00 00 FF 
16d28     38 E5 85 F1 | 	sub	objptr, ##10552
16d2c     CC 4C BF FD | 	call	#_converttoint
16d30     04 1E 06 F1 | 	add	local01, #4
16d34     0F FB 41 FC | 	wrbyte	result1, local01
16d38     A7 F0 03 F6 | 	mov	ptra, fp
16d3c     B2 00 A0 FD | 	call	#popregs_
16d40                 | _do_setwave_ret
16d40     2D 00 64 FD | 	ret
16d44                 | 
16d44                 | ' 
16d44                 | ' ' ------------------ shutup
16d44                 | ' 
16d44                 | ' sub do_shutup
16d44                 | _do_shutup
16d44     03 4A 05 F6 | 	mov	COUNT_, #3
16d48     A8 00 A0 FD | 	call	#pushregs_
16d4c     18 F0 07 F1 | 	add	ptra, #24
16d50     4A 00 00 FF 
16d54     80 E4 05 F1 | 	add	objptr, ##38016
16d58     F2 1E 02 FB | 	rdlong	local01, objptr
16d5c     0F 21 02 F6 | 	mov	local02, local01
16d60     01 20 66 F0 | 	shl	local02, #1
16d64     0F 21 02 F1 | 	add	local02, local01
16d68     02 20 66 F0 | 	shl	local02, #2
16d6c     03 00 00 FF 
16d70     04 E4 85 F1 | 	sub	objptr, ##1540
16d74     F2 20 02 F1 | 	add	local02, objptr
16d78     10 23 0A FB | 	rdlong	local03, local02 wz
16d7c     14 4E 05 F1 | 	add	fp, #20
16d80     A7 22 62 FC | 	wrlong	local03, fp
16d84                 | ' 
16d84                 | ' numpar=compiledline(lineptr_e).result.uresult
16d84                 | ' if numpar=0 then
16d84     14 4E 85 F1 | 	sub	fp, #20
16d88     47 00 00 FF 
16d8c     7C E4 85 F1 | 	sub	objptr, ##36476
16d90     50 00 90 5D |  if_ne	jmp	#LR__1882
16d94                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
16d94     10 4E 05 F1 | 	add	fp, #16
16d98     A7 00 68 FC | 	wrlong	#0, fp
16d9c     37 00 00 FF 
16da0     10 E4 05 F1 | 	add	objptr, ##28176
16da4     97 16 48 FB | 	callpa	#(@LR__1881-@LR__1880)>>2,fcache_load_ptr_
16da8                 | LR__1880
16da8     F2 12 02 FB | 	rdlong	arg01, objptr
16dac     A7 22 02 FB | 	rdlong	local03, fp
16db0     06 22 66 F0 | 	shl	local03, #6
16db4     11 13 02 F1 | 	add	arg01, local03
16db8     14 12 06 F1 | 	add	arg01, #20
16dbc     09 01 58 FC | 	wrword	#0, arg01
16dc0     A7 22 02 FB | 	rdlong	local03, fp
16dc4     01 22 06 F1 | 	add	local03, #1
16dc8     A7 22 62 FC | 	wrlong	local03, fp
16dcc     08 22 56 F2 | 	cmps	local03, #8 wc
16dd0     D4 FF 9F CD |  if_b	jmp	#LR__1880
16dd4                 | LR__1881
16dd4     37 00 00 FF 
16dd8     10 E4 85 F1 | 	sub	objptr, ##28176
16ddc     10 4E 85 F1 | 	sub	fp, #16
16de0     64 00 90 FD | 	jmp	#LR__1883
16de4                 | LR__1882
16de4     30 4A BF FD | 	call	#_pop
16de8     FF 1E 02 F6 | 	mov	local01, result3
16dec     A7 FA 61 FC | 	wrlong	result1, fp
16df0     04 4E 05 F1 | 	add	fp, #4
16df4     A7 FC 61 FC | 	wrlong	result2, fp
16df8     04 4E 05 F1 | 	add	fp, #4
16dfc     A7 1E 62 FC | 	wrlong	local01, fp
16e00     08 4E 85 F1 | 	sub	fp, #8
16e04     A7 12 02 F6 | 	mov	arg01, fp
16e08     F0 4B BF FD | 	call	#_converttoint
16e0c     FD 22 52 F6 | 	abs	local03, result1 wc
16e10     07 22 06 F5 | 	and	local03, #7
16e14     11 21 82 F6 | 	negc	local02, local03
16e18     0C 4E 05 F1 | 	add	fp, #12
16e1c     A7 20 62 FC | 	wrlong	local02, fp
16e20     37 00 00 FF 
16e24     10 E4 05 F1 | 	add	objptr, ##28176
16e28     F2 12 02 FB | 	rdlong	arg01, objptr
16e2c     37 00 00 FF 
16e30     10 E4 85 F1 | 	sub	objptr, ##28176
16e34     0C 4E 85 F1 | 	sub	fp, #12
16e38     06 20 66 F0 | 	shl	local02, #6
16e3c     10 13 02 F1 | 	add	arg01, local02
16e40     14 12 06 F1 | 	add	arg01, #20
16e44     09 01 58 FC | 	wrword	#0, arg01
16e48                 | LR__1883
16e48     A7 F0 03 F6 | 	mov	ptra, fp
16e4c     B2 00 A0 FD | 	call	#popregs_
16e50                 | _do_shutup_ret
16e50     2D 00 64 FD | 	ret
16e54                 | 
16e54                 | ' 
16e54                 | ' ' ------------------ sin
16e54                 | ' 
16e54                 | ' sub do_sin
16e54                 | _do_sin
16e54     01 4A 05 F6 | 	mov	COUNT_, #1
16e58     A8 00 A0 FD | 	call	#pushregs_
16e5c     10 F0 07 F1 | 	add	ptra, #16
16e60     4A 00 00 FF 
16e64     80 E4 05 F1 | 	add	objptr, ##38016
16e68     F2 1E 02 FB | 	rdlong	local01, objptr
16e6c     0F 17 02 F6 | 	mov	arg03, local01
16e70     01 16 66 F0 | 	shl	arg03, #1
16e74     0F 17 02 F1 | 	add	arg03, local01
16e78     02 16 66 F0 | 	shl	arg03, #2
16e7c     03 00 00 FF 
16e80     04 E4 85 F1 | 	sub	objptr, ##1540
16e84     F2 16 02 F1 | 	add	arg03, objptr
16e88     0B 17 02 FB | 	rdlong	arg03, arg03
16e8c     0C 4E 05 F1 | 	add	fp, #12
16e90     A7 16 62 FC | 	wrlong	arg03, fp
16e94                 | ' 
16e94                 | ' numpar=compiledline(lineptr_e).result.uresult
16e94                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
16e94     0C 4E 85 F1 | 	sub	fp, #12
16e98     02 16 16 F2 | 	cmp	arg03, #2 wc
16e9c     47 00 00 FF 
16ea0     7C E4 85 F1 | 	sub	objptr, ##36476
16ea4     0C 4E 05 C1 |  if_b	add	fp, #12
16ea8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16eac     0C 4E 85 C1 |  if_b	sub	fp, #12
16eb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16eb4     00 12 06 F6 | 	mov	arg01, #0
16eb8     34 04 B1 FD | 	call	#__system___getiolock_0570
16ebc     FD 12 02 F6 | 	mov	arg01, result1
16ec0     00 A7 B0 FD | 	call	#__system___lockmem
16ec4     8D 01 00 FF 
16ec8     31 15 06 F6 | 	mov	arg02, ##@LR__5607
16ecc     00 12 06 F6 | 	mov	arg01, #0
16ed0     00 16 06 F6 | 	mov	arg03, #0
16ed4     E0 B3 B0 FD | 	call	#__system___basic_print_string
16ed8     00 12 06 F6 | 	mov	arg01, #0
16edc     10 04 B1 FD | 	call	#__system___getiolock_0570
16ee0     FD 00 68 FC | 	wrlong	#0, result1
16ee4     27 12 06 F6 | 	mov	arg01, #39
16ee8     00 14 06 F6 | 	mov	arg02, #0
16eec     14 71 B0 FD | 	call	#_printerror
16ef0     64 00 90 FD | 	jmp	#LR__1891
16ef4                 | LR__1890
16ef4     20 49 BF FD | 	call	#_pop
16ef8     A7 FA 61 FC | 	wrlong	result1, fp
16efc     04 4E 05 F1 | 	add	fp, #4
16f00     A7 FC 61 FC | 	wrlong	result2, fp
16f04     04 4E 05 F1 | 	add	fp, #4
16f08     A7 FE 61 FC | 	wrlong	result3, fp
16f0c     08 4E 85 F1 | 	sub	fp, #8
16f10     51 00 00 FF 
16f14     BC E5 05 F1 | 	add	objptr, ##41916
16f18     F2 1E 02 FB | 	rdlong	local01, objptr
16f1c     51 00 00 FF 
16f20     BC E5 85 F1 | 	sub	objptr, ##41916
16f24     A7 12 02 F6 | 	mov	arg01, fp
16f28     8C 4B BF FD | 	call	#_converttofloat
16f2c     FD 14 02 F6 | 	mov	arg02, result1
16f30     0F 13 02 F6 | 	mov	arg01, local01
16f34     48 D4 B0 FD | 	call	#__system___float_mul
16f38     FD 12 02 F6 | 	mov	arg01, result1
16f3c     A0 DD B0 FD | 	call	#__system____builtin_sinf
16f40     A7 FA 61 FC | 	wrlong	result1, fp
16f44     08 4E 05 F1 | 	add	fp, #8
16f48     A7 3C 68 FC | 	wrlong	#30, fp
16f4c     08 4E 85 F1 | 	sub	fp, #8
16f50     A7 12 02 F6 | 	mov	arg01, fp
16f54     58 49 BF FD | 	call	#_push
16f58                 | LR__1891
16f58     A7 F0 03 F6 | 	mov	ptra, fp
16f5c     B2 00 A0 FD | 	call	#popregs_
16f60                 | _do_sin_ret
16f60     2D 00 64 FD | 	ret
16f64                 | 
16f64                 | ' 
16f64                 | ' ' ------------------ sprite
16f64                 | ' 
16f64                 | ' sub do_sprite
16f64                 | _do_sprite
16f64     00 4A 05 F6 | 	mov	COUNT_, #0
16f68     A8 00 A0 FD | 	call	#pushregs_
16f6c     30 F0 07 F1 | 	add	ptra, #48
16f70     A4 48 BF FD | 	call	#_pop
16f74     FD 16 02 F6 | 	mov	arg03, result1
16f78     FE 14 02 F6 | 	mov	arg02, result2
16f7c     FF 12 02 F6 | 	mov	arg01, result3
16f80     18 4E 05 F1 | 	add	fp, #24
16f84     A7 16 62 FC | 	wrlong	arg03, fp
16f88     04 4E 05 F1 | 	add	fp, #4
16f8c     A7 14 62 FC | 	wrlong	arg02, fp
16f90     04 4E 05 F1 | 	add	fp, #4
16f94     A7 12 62 FC | 	wrlong	arg01, fp
16f98     20 4E 85 F1 | 	sub	fp, #32
16f9c     78 48 BF FD | 	call	#_pop
16fa0     FD 16 02 F6 | 	mov	arg03, result1
16fa4     FE 14 02 F6 | 	mov	arg02, result2
16fa8     FF 12 02 F6 | 	mov	arg01, result3
16fac     0C 4E 05 F1 | 	add	fp, #12
16fb0     A7 16 62 FC | 	wrlong	arg03, fp
16fb4     04 4E 05 F1 | 	add	fp, #4
16fb8     A7 14 62 FC | 	wrlong	arg02, fp
16fbc     04 4E 05 F1 | 	add	fp, #4
16fc0     A7 12 62 FC | 	wrlong	arg01, fp
16fc4     14 4E 85 F1 | 	sub	fp, #20
16fc8     4C 48 BF FD | 	call	#_pop
16fcc     FF 16 02 F6 | 	mov	arg03, result3
16fd0     A7 FA 61 FC | 	wrlong	result1, fp
16fd4     04 4E 05 F1 | 	add	fp, #4
16fd8     A7 FC 61 FC | 	wrlong	result2, fp
16fdc     04 4E 05 F1 | 	add	fp, #4
16fe0     A7 16 62 FC | 	wrlong	arg03, fp
16fe4     08 4E 85 F1 | 	sub	fp, #8
16fe8     A7 12 02 F6 | 	mov	arg01, fp
16fec     0C 4A BF FD | 	call	#_converttoint
16ff0     24 4E 05 F1 | 	add	fp, #36
16ff4     A7 FA 61 FC | 	wrlong	result1, fp
16ff8     18 4E 85 F1 | 	sub	fp, #24
16ffc     A7 12 02 F6 | 	mov	arg01, fp
17000     0C 4E 85 F1 | 	sub	fp, #12
17004     F4 49 BF FD | 	call	#_converttoint
17008     28 4E 05 F1 | 	add	fp, #40
1700c     A7 FA 61 FC | 	wrlong	result1, fp
17010     10 4E 85 F1 | 	sub	fp, #16
17014     A7 12 02 F6 | 	mov	arg01, fp
17018     18 4E 85 F1 | 	sub	fp, #24
1701c     DC 49 BF FD | 	call	#_converttoint
17020     2C 4E 05 F1 | 	add	fp, #44
17024     A7 FA 61 FC | 	wrlong	result1, fp
17028     08 4E 85 F1 | 	sub	fp, #8
1702c     A7 12 02 FB | 	rdlong	arg01, fp
17030     04 4E 05 F1 | 	add	fp, #4
17034     A7 14 02 FB | 	rdlong	arg02, fp
17038     FD 16 02 F6 | 	mov	arg03, result1
1703c     28 4E 85 F1 | 	sub	fp, #40
17040     1C 7F B0 FD | 	call	#_hg010b_spin2_setspritepos
17044     A7 F0 03 F6 | 	mov	ptra, fp
17048     B2 00 A0 FD | 	call	#popregs_
1704c                 | _do_sprite_ret
1704c     2D 00 64 FD | 	ret
17050                 | 
17050                 | ' 
17050                 | ' ' ------------------ sqr
17050                 | ' 
17050                 | ' sub do_sqr
17050                 | _do_sqr
17050     01 4A 05 F6 | 	mov	COUNT_, #1
17054     A8 00 A0 FD | 	call	#pushregs_
17058     10 F0 07 F1 | 	add	ptra, #16
1705c     4A 00 00 FF 
17060     80 E4 05 F1 | 	add	objptr, ##38016
17064     F2 1E 02 FB | 	rdlong	local01, objptr
17068     0F 17 02 F6 | 	mov	arg03, local01
1706c     01 16 66 F0 | 	shl	arg03, #1
17070     0F 17 02 F1 | 	add	arg03, local01
17074     02 16 66 F0 | 	shl	arg03, #2
17078     03 00 00 FF 
1707c     04 E4 85 F1 | 	sub	objptr, ##1540
17080     F2 16 02 F1 | 	add	arg03, objptr
17084     0B 17 02 FB | 	rdlong	arg03, arg03
17088     0C 4E 05 F1 | 	add	fp, #12
1708c     A7 16 62 FC | 	wrlong	arg03, fp
17090                 | ' 
17090                 | ' numpar=compiledline(lineptr_e).result.uresult
17090                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17090     0C 4E 85 F1 | 	sub	fp, #12
17094     02 16 16 F2 | 	cmp	arg03, #2 wc
17098     47 00 00 FF 
1709c     7C E4 85 F1 | 	sub	objptr, ##36476
170a0     0C 4E 05 C1 |  if_b	add	fp, #12
170a4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
170a8     0C 4E 85 C1 |  if_b	sub	fp, #12
170ac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1900
170b0     00 12 06 F6 | 	mov	arg01, #0
170b4     38 02 B1 FD | 	call	#__system___getiolock_0570
170b8     FD 12 02 F6 | 	mov	arg01, result1
170bc     04 A5 B0 FD | 	call	#__system___lockmem
170c0     8D 01 00 FF 
170c4     37 15 06 F6 | 	mov	arg02, ##@LR__5608
170c8     00 12 06 F6 | 	mov	arg01, #0
170cc     00 16 06 F6 | 	mov	arg03, #0
170d0     E4 B1 B0 FD | 	call	#__system___basic_print_string
170d4     00 12 06 F6 | 	mov	arg01, #0
170d8     14 02 B1 FD | 	call	#__system___getiolock_0570
170dc     FD 00 68 FC | 	wrlong	#0, result1
170e0     27 12 06 F6 | 	mov	arg01, #39
170e4     00 14 06 F6 | 	mov	arg02, #0
170e8     18 6F B0 FD | 	call	#_printerror
170ec     48 00 90 FD | 	jmp	#LR__1901
170f0                 | LR__1900
170f0     24 47 BF FD | 	call	#_pop
170f4     FF 1E 02 F6 | 	mov	local01, result3
170f8     A7 FA 61 FC | 	wrlong	result1, fp
170fc     04 4E 05 F1 | 	add	fp, #4
17100     A7 FC 61 FC | 	wrlong	result2, fp
17104     04 4E 05 F1 | 	add	fp, #4
17108     A7 1E 62 FC | 	wrlong	local01, fp
1710c     08 4E 85 F1 | 	sub	fp, #8
17110     A7 12 02 F6 | 	mov	arg01, fp
17114     A0 49 BF FD | 	call	#_converttofloat
17118     FD 12 02 F6 | 	mov	arg01, result1
1711c     88 D1 B0 FD | 	call	#__system___float_sqrt
17120     A7 FA 61 FC | 	wrlong	result1, fp
17124     08 4E 05 F1 | 	add	fp, #8
17128     A7 3C 68 FC | 	wrlong	#30, fp
1712c     08 4E 85 F1 | 	sub	fp, #8
17130     A7 12 02 F6 | 	mov	arg01, fp
17134     78 47 BF FD | 	call	#_push
17138                 | LR__1901
17138     A7 F0 03 F6 | 	mov	ptra, fp
1713c     B2 00 A0 FD | 	call	#popregs_
17140                 | _do_sqr_ret
17140     2D 00 64 FD | 	ret
17144                 | 
17144                 | ' 
17144                 | ' ' ------------------ stick
17144                 | ' 
17144                 | ' sub do_stick
17144                 | _do_stick
17144     01 4A 05 F6 | 	mov	COUNT_, #1
17148     A8 00 A0 FD | 	call	#pushregs_
1714c     10 F0 07 F1 | 	add	ptra, #16
17150     4A 00 00 FF 
17154     80 E4 05 F1 | 	add	objptr, ##38016
17158     F2 1E 02 FB | 	rdlong	local01, objptr
1715c     0F 17 02 F6 | 	mov	arg03, local01
17160     01 16 66 F0 | 	shl	arg03, #1
17164     0F 17 02 F1 | 	add	arg03, local01
17168     02 16 66 F0 | 	shl	arg03, #2
1716c     03 00 00 FF 
17170     04 E4 85 F1 | 	sub	objptr, ##1540
17174     F2 16 02 F1 | 	add	arg03, objptr
17178     0B 17 02 FB | 	rdlong	arg03, arg03
1717c     0C 4E 05 F1 | 	add	fp, #12
17180     A7 16 62 FC | 	wrlong	arg03, fp
17184                 | ' 
17184                 | ' numpar=compiledline(lineptr_e).result.uresult
17184                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17184     0C 4E 85 F1 | 	sub	fp, #12
17188     02 16 16 F2 | 	cmp	arg03, #2 wc
1718c     47 00 00 FF 
17190     7C E4 85 F1 | 	sub	objptr, ##36476
17194     40 00 90 CD |  if_b	jmp	#LR__1910
17198     00 12 06 F6 | 	mov	arg01, #0
1719c     50 01 B1 FD | 	call	#__system___getiolock_0570
171a0     FD 12 02 F6 | 	mov	arg01, result1
171a4     1C A4 B0 FD | 	call	#__system___lockmem
171a8     8D 01 00 FF 
171ac     3D 15 06 F6 | 	mov	arg02, ##@LR__5609
171b0     00 12 06 F6 | 	mov	arg01, #0
171b4     00 16 06 F6 | 	mov	arg03, #0
171b8     FC B0 B0 FD | 	call	#__system___basic_print_string
171bc     00 12 06 F6 | 	mov	arg01, #0
171c0     2C 01 B1 FD | 	call	#__system___getiolock_0570
171c4     FD 00 68 FC | 	wrlong	#0, result1
171c8     27 12 06 F6 | 	mov	arg01, #39
171cc     00 14 06 F6 | 	mov	arg02, #0
171d0     30 6E B0 FD | 	call	#_printerror
171d4     F0 00 90 FD | 	jmp	#LR__1914
171d8                 | LR__1910
171d8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
171d8     0C 4E 05 F1 | 	add	fp, #12
171dc     A7 FE 09 FB | 	rdlong	result3, fp wz
171e0     0C 4E 85 F1 | 	sub	fp, #12
171e4     30 00 90 5D |  if_ne	jmp	#LR__1911
171e8     51 00 00 FF 
171ec     30 E5 05 F1 | 	add	objptr, ##41776
171f0     F2 1E 02 FB | 	rdlong	local01, objptr
171f4     51 00 00 FF 
171f8     30 E5 85 F1 | 	sub	objptr, ##41776
171fc     A7 1E 62 FC | 	wrlong	local01, fp
17200     08 4E 05 F1 | 	add	fp, #8
17204     A7 3A 68 FC | 	wrlong	#29, fp
17208     08 4E 85 F1 | 	sub	fp, #8
1720c     A7 12 02 F6 | 	mov	arg01, fp
17210     9C 46 BF FD | 	call	#_push
17214     B0 00 90 FD | 	jmp	#LR__1914
17218                 | LR__1911
17218     FC 45 BF FD | 	call	#_pop
1721c     A7 FA 61 FC | 	wrlong	result1, fp
17220     04 4E 05 F1 | 	add	fp, #4
17224     A7 FC 61 FC | 	wrlong	result2, fp
17228     04 4E 05 F1 | 	add	fp, #4
1722c     A7 FE 61 FC | 	wrlong	result3, fp
17230                 | ' t1=pop()
17230                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17230     08 4E 85 F1 | 	sub	fp, #8
17234     1C FE 0D F2 | 	cmp	result3, #28 wz
17238     08 4E 05 51 |  if_ne	add	fp, #8
1723c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17240     08 4E 85 51 |  if_ne	sub	fp, #8
17244     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17248     70 00 90 5D |  if_ne	jmp	#LR__1913
1724c     A7 1E 02 FB | 	rdlong	local01, fp
17250     52 00 00 FF 
17254     14 E4 05 F1 | 	add	objptr, ##42004
17258     F2 1E 62 FC | 	wrlong	local01, objptr
1725c                 | '   q=t1.result.uresult
1725c                 | '   if q<7 then 
1725c     52 00 00 FF 
17260     14 E4 85 F1 | 	sub	objptr, ##42004
17264     07 1E 56 F2 | 	cmps	local01, #7 wc
17268     40 00 90 3D |  if_ae	jmp	#LR__1912
1726c     52 00 00 FF 
17270     14 E4 05 F1 | 	add	objptr, ##42004
17274     F2 1E 02 FB | 	rdlong	local01, objptr
17278     02 1E 66 F0 | 	shl	local01, #2
1727c     E4 E4 85 F1 | 	sub	objptr, #228
17280     F2 1E 02 F1 | 	add	local01, objptr
17284     0F 1F 02 FB | 	rdlong	local01, local01
17288     A7 1E 62 FC | 	wrlong	local01, fp
1728c     08 4E 05 F1 | 	add	fp, #8
17290     A7 3A 68 FC | 	wrlong	#29, fp
17294     08 4E 85 F1 | 	sub	fp, #8
17298     A7 12 02 F6 | 	mov	arg01, fp
1729c     51 00 00 FF 
172a0     30 E5 85 F1 | 	sub	objptr, ##41776
172a4     08 46 BF FD | 	call	#_push
172a8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
172a8     1C 00 90 FD | 	jmp	#LR__1914
172ac                 | LR__1912
172ac     29 12 06 F6 | 	mov	arg01, #41
172b0     00 14 06 F6 | 	mov	arg02, #0
172b4     4C 6D B0 FD | 	call	#_printerror
172b8                 | '      printerror(41) : return
172b8     0C 00 90 FD | 	jmp	#LR__1914
172bc                 | LR__1913
172bc     29 12 06 F6 | 	mov	arg01, #41
172c0     00 14 06 F6 | 	mov	arg02, #0
172c4     3C 6D B0 FD | 	call	#_printerror
172c8                 | LR__1914
172c8     A7 F0 03 F6 | 	mov	ptra, fp
172cc     B2 00 A0 FD | 	call	#popregs_
172d0                 | _do_stick_ret
172d0     2D 00 64 FD | 	ret
172d4                 | 
172d4                 | ' 
172d4                 | ' ' ------------------ strig
172d4                 | ' 
172d4                 | ' sub do_strig
172d4                 | _do_strig
172d4     01 4A 05 F6 | 	mov	COUNT_, #1
172d8     A8 00 A0 FD | 	call	#pushregs_
172dc     10 F0 07 F1 | 	add	ptra, #16
172e0     4A 00 00 FF 
172e4     80 E4 05 F1 | 	add	objptr, ##38016
172e8     F2 1E 02 FB | 	rdlong	local01, objptr
172ec     0F 17 02 F6 | 	mov	arg03, local01
172f0     01 16 66 F0 | 	shl	arg03, #1
172f4     0F 17 02 F1 | 	add	arg03, local01
172f8     02 16 66 F0 | 	shl	arg03, #2
172fc     03 00 00 FF 
17300     04 E4 85 F1 | 	sub	objptr, ##1540
17304     F2 16 02 F1 | 	add	arg03, objptr
17308     0B 17 02 FB | 	rdlong	arg03, arg03
1730c     0C 4E 05 F1 | 	add	fp, #12
17310     A7 16 62 FC | 	wrlong	arg03, fp
17314                 | ' 
17314                 | ' numpar=compiledline(lineptr_e).result.uresult
17314                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17314     0C 4E 85 F1 | 	sub	fp, #12
17318     02 16 16 F2 | 	cmp	arg03, #2 wc
1731c     47 00 00 FF 
17320     7C E4 85 F1 | 	sub	objptr, ##36476
17324     40 00 90 CD |  if_b	jmp	#LR__1920
17328     00 12 06 F6 | 	mov	arg01, #0
1732c     C0 FF B0 FD | 	call	#__system___getiolock_0570
17330     FD 12 02 F6 | 	mov	arg01, result1
17334     8C A2 B0 FD | 	call	#__system___lockmem
17338     8D 01 00 FF 
1733c     45 15 06 F6 | 	mov	arg02, ##@LR__5610
17340     00 12 06 F6 | 	mov	arg01, #0
17344     00 16 06 F6 | 	mov	arg03, #0
17348     6C AF B0 FD | 	call	#__system___basic_print_string
1734c     00 12 06 F6 | 	mov	arg01, #0
17350     9C FF B0 FD | 	call	#__system___getiolock_0570
17354     FD 00 68 FC | 	wrlong	#0, result1
17358     27 12 06 F6 | 	mov	arg01, #39
1735c     00 14 06 F6 | 	mov	arg02, #0
17360     A0 6C B0 FD | 	call	#_printerror
17364     F0 00 90 FD | 	jmp	#LR__1924
17368                 | LR__1920
17368                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17368     0C 4E 05 F1 | 	add	fp, #12
1736c     A7 FE 09 FB | 	rdlong	result3, fp wz
17370     0C 4E 85 F1 | 	sub	fp, #12
17374     30 00 90 5D |  if_ne	jmp	#LR__1921
17378     51 00 00 FF 
1737c     4C E5 05 F1 | 	add	objptr, ##41804
17380     F2 1E 02 FB | 	rdlong	local01, objptr
17384     51 00 00 FF 
17388     4C E5 85 F1 | 	sub	objptr, ##41804
1738c     A7 1E 62 FC | 	wrlong	local01, fp
17390     08 4E 05 F1 | 	add	fp, #8
17394     A7 3A 68 FC | 	wrlong	#29, fp
17398     08 4E 85 F1 | 	sub	fp, #8
1739c     A7 12 02 F6 | 	mov	arg01, fp
173a0     0C 45 BF FD | 	call	#_push
173a4     B0 00 90 FD | 	jmp	#LR__1924
173a8                 | LR__1921
173a8     6C 44 BF FD | 	call	#_pop
173ac     A7 FA 61 FC | 	wrlong	result1, fp
173b0     04 4E 05 F1 | 	add	fp, #4
173b4     A7 FC 61 FC | 	wrlong	result2, fp
173b8     04 4E 05 F1 | 	add	fp, #4
173bc     A7 FE 61 FC | 	wrlong	result3, fp
173c0                 | ' t1=pop()
173c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
173c0     08 4E 85 F1 | 	sub	fp, #8
173c4     1C FE 0D F2 | 	cmp	result3, #28 wz
173c8     08 4E 05 51 |  if_ne	add	fp, #8
173cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
173d0     08 4E 85 51 |  if_ne	sub	fp, #8
173d4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
173d8     70 00 90 5D |  if_ne	jmp	#LR__1923
173dc     A7 1E 02 FB | 	rdlong	local01, fp
173e0     52 00 00 FF 
173e4     14 E4 05 F1 | 	add	objptr, ##42004
173e8     F2 1E 62 FC | 	wrlong	local01, objptr
173ec                 | '   q=t1.result.uresult
173ec                 | '   if q<7 then 
173ec     52 00 00 FF 
173f0     14 E4 85 F1 | 	sub	objptr, ##42004
173f4     07 1E 56 F2 | 	cmps	local01, #7 wc
173f8     40 00 90 3D |  if_ae	jmp	#LR__1922
173fc     52 00 00 FF 
17400     14 E4 05 F1 | 	add	objptr, ##42004
17404     F2 1E 02 FB | 	rdlong	local01, objptr
17408     02 1E 66 F0 | 	shl	local01, #2
1740c     C8 E4 85 F1 | 	sub	objptr, #200
17410     F2 1E 02 F1 | 	add	local01, objptr
17414     0F 1F 02 FB | 	rdlong	local01, local01
17418     A7 1E 62 FC | 	wrlong	local01, fp
1741c     08 4E 05 F1 | 	add	fp, #8
17420     A7 3A 68 FC | 	wrlong	#29, fp
17424     08 4E 85 F1 | 	sub	fp, #8
17428     A7 12 02 F6 | 	mov	arg01, fp
1742c     51 00 00 FF 
17430     4C E5 85 F1 | 	sub	objptr, ##41804
17434     78 44 BF FD | 	call	#_push
17438                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
17438     1C 00 90 FD | 	jmp	#LR__1924
1743c                 | LR__1922
1743c     29 12 06 F6 | 	mov	arg01, #41
17440     00 14 06 F6 | 	mov	arg02, #0
17444     BC 6B B0 FD | 	call	#_printerror
17448                 | '      printerror(41) : return
17448     0C 00 90 FD | 	jmp	#LR__1924
1744c                 | LR__1923
1744c     29 12 06 F6 | 	mov	arg01, #41
17450     00 14 06 F6 | 	mov	arg02, #0
17454     AC 6B B0 FD | 	call	#_printerror
17458                 | LR__1924
17458     A7 F0 03 F6 | 	mov	ptra, fp
1745c     B2 00 A0 FD | 	call	#popregs_
17460                 | _do_strig_ret
17460     2D 00 64 FD | 	ret
17464                 | 
17464                 | ' 
17464                 | ' ' ------------------ tan
17464                 | ' 
17464                 | ' sub do_tan
17464                 | _do_tan
17464     01 4A 05 F6 | 	mov	COUNT_, #1
17468     A8 00 A0 FD | 	call	#pushregs_
1746c     10 F0 07 F1 | 	add	ptra, #16
17470     4A 00 00 FF 
17474     80 E4 05 F1 | 	add	objptr, ##38016
17478     F2 1E 02 FB | 	rdlong	local01, objptr
1747c     0F 17 02 F6 | 	mov	arg03, local01
17480     01 16 66 F0 | 	shl	arg03, #1
17484     0F 17 02 F1 | 	add	arg03, local01
17488     02 16 66 F0 | 	shl	arg03, #2
1748c     03 00 00 FF 
17490     04 E4 85 F1 | 	sub	objptr, ##1540
17494     F2 16 02 F1 | 	add	arg03, objptr
17498     0B 17 02 FB | 	rdlong	arg03, arg03
1749c     0C 4E 05 F1 | 	add	fp, #12
174a0     A7 16 62 FC | 	wrlong	arg03, fp
174a4                 | ' 
174a4                 | ' numpar=compiledline(lineptr_e).result.uresult
174a4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
174a4     0C 4E 85 F1 | 	sub	fp, #12
174a8     02 16 16 F2 | 	cmp	arg03, #2 wc
174ac     47 00 00 FF 
174b0     7C E4 85 F1 | 	sub	objptr, ##36476
174b4     0C 4E 05 C1 |  if_b	add	fp, #12
174b8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
174bc     0C 4E 85 C1 |  if_b	sub	fp, #12
174c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1930
174c4     00 12 06 F6 | 	mov	arg01, #0
174c8     24 FE B0 FD | 	call	#__system___getiolock_0570
174cc     FD 12 02 F6 | 	mov	arg01, result1
174d0     F0 A0 B0 FD | 	call	#__system___lockmem
174d4     8D 01 00 FF 
174d8     4D 15 06 F6 | 	mov	arg02, ##@LR__5611
174dc     00 12 06 F6 | 	mov	arg01, #0
174e0     00 16 06 F6 | 	mov	arg03, #0
174e4     D0 AD B0 FD | 	call	#__system___basic_print_string
174e8     00 12 06 F6 | 	mov	arg01, #0
174ec     00 FE B0 FD | 	call	#__system___getiolock_0570
174f0     FD 00 68 FC | 	wrlong	#0, result1
174f4     27 12 06 F6 | 	mov	arg01, #39
174f8     00 14 06 F6 | 	mov	arg02, #0
174fc     04 6B B0 FD | 	call	#_printerror
17500     64 00 90 FD | 	jmp	#LR__1931
17504                 | LR__1930
17504     10 43 BF FD | 	call	#_pop
17508     A7 FA 61 FC | 	wrlong	result1, fp
1750c     04 4E 05 F1 | 	add	fp, #4
17510     A7 FC 61 FC | 	wrlong	result2, fp
17514     04 4E 05 F1 | 	add	fp, #4
17518     A7 FE 61 FC | 	wrlong	result3, fp
1751c     08 4E 85 F1 | 	sub	fp, #8
17520     51 00 00 FF 
17524     BC E5 05 F1 | 	add	objptr, ##41916
17528     F2 1E 02 FB | 	rdlong	local01, objptr
1752c     51 00 00 FF 
17530     BC E5 85 F1 | 	sub	objptr, ##41916
17534     A7 12 02 F6 | 	mov	arg01, fp
17538     7C 45 BF FD | 	call	#_converttofloat
1753c     FD 14 02 F6 | 	mov	arg02, result1
17540     0F 13 02 F6 | 	mov	arg01, local01
17544     38 CE B0 FD | 	call	#__system___float_mul
17548     FD 12 02 F6 | 	mov	arg01, result1
1754c     DC D8 B0 FD | 	call	#__system____builtin_tanf
17550     A7 FA 61 FC | 	wrlong	result1, fp
17554     08 4E 05 F1 | 	add	fp, #8
17558     A7 3C 68 FC | 	wrlong	#30, fp
1755c     08 4E 85 F1 | 	sub	fp, #8
17560     A7 12 02 F6 | 	mov	arg01, fp
17564     48 43 BF FD | 	call	#_push
17568                 | LR__1931
17568     A7 F0 03 F6 | 	mov	ptra, fp
1756c     B2 00 A0 FD | 	call	#popregs_
17570                 | _do_tan_ret
17570     2D 00 64 FD | 	ret
17574                 | 
17574                 | ' 
17574                 | ' ' ------------------ val
17574                 | ' 
17574                 | ' sub do_val
17574                 | _do_val
17574     03 4A 05 F6 | 	mov	COUNT_, #3
17578     A8 00 A0 FD | 	call	#pushregs_
1757c     20 F0 07 F1 | 	add	ptra, #32
17580     4A 00 00 FF 
17584     80 E4 05 F1 | 	add	objptr, ##38016
17588     F2 16 02 FB | 	rdlong	arg03, objptr
1758c     0B 1F 02 F6 | 	mov	local01, arg03
17590     01 1E 66 F0 | 	shl	local01, #1
17594     0B 1F 02 F1 | 	add	local01, arg03
17598     02 1E 66 F0 | 	shl	local01, #2
1759c     03 00 00 FF 
175a0     04 E4 85 F1 | 	sub	objptr, ##1540
175a4     F2 1E 02 F1 | 	add	local01, objptr
175a8     0F 17 02 FB | 	rdlong	arg03, local01
175ac     0C 4E 05 F1 | 	add	fp, #12
175b0     A7 16 62 FC | 	wrlong	arg03, fp
175b4                 | ' 
175b4                 | ' numpar=compiledline(lineptr_e).result.uresult
175b4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
175b4     0C 4E 85 F1 | 	sub	fp, #12
175b8     02 16 16 F2 | 	cmp	arg03, #2 wc
175bc     47 00 00 FF 
175c0     7C E4 85 F1 | 	sub	objptr, ##36476
175c4     0C 4E 05 C1 |  if_b	add	fp, #12
175c8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
175cc     0C 4E 85 C1 |  if_b	sub	fp, #12
175d0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1940
175d4     00 12 06 F6 | 	mov	arg01, #0
175d8     14 FD B0 FD | 	call	#__system___getiolock_0570
175dc     FD 12 02 F6 | 	mov	arg01, result1
175e0     E0 9F B0 FD | 	call	#__system___lockmem
175e4     8D 01 00 FF 
175e8     53 15 06 F6 | 	mov	arg02, ##@LR__5612
175ec     00 12 06 F6 | 	mov	arg01, #0
175f0     00 16 06 F6 | 	mov	arg03, #0
175f4     C0 AC B0 FD | 	call	#__system___basic_print_string
175f8     00 12 06 F6 | 	mov	arg01, #0
175fc     F0 FC B0 FD | 	call	#__system___getiolock_0570
17600     FD 00 68 FC | 	wrlong	#0, result1
17604     27 12 06 F6 | 	mov	arg01, #39
17608     00 14 06 F6 | 	mov	arg02, #0
1760c     F4 69 B0 FD | 	call	#_printerror
17610     60 02 90 FD | 	jmp	#LR__1953
17614                 | LR__1940
17614     00 42 BF FD | 	call	#_pop
17618     FF 16 02 F6 | 	mov	arg03, result3
1761c     A7 FA 61 FC | 	wrlong	result1, fp
17620     04 4E 05 F1 | 	add	fp, #4
17624     A7 FC 61 FC | 	wrlong	result2, fp
17628     04 4E 05 F1 | 	add	fp, #4
1762c     A7 16 62 FC | 	wrlong	arg03, fp
17630                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
17630     08 4E 85 F1 | 	sub	fp, #8
17634     2B 16 0E F2 | 	cmp	arg03, #43 wz
17638     18 00 90 5D |  if_ne	jmp	#LR__1941
1763c     A7 12 02 FB | 	rdlong	arg01, fp
17640     4C 43 BF FD | 	call	#_convertstring
17644     A7 FA 61 FC | 	wrlong	result1, fp
17648     08 4E 05 F1 | 	add	fp, #8
1764c     A7 3E 68 FC | 	wrlong	#31, fp
17650     08 4E 85 F1 | 	sub	fp, #8
17654                 | LR__1941
17654                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
17654     08 4E 05 F1 | 	add	fp, #8
17658     A7 16 02 FB | 	rdlong	arg03, fp
1765c     08 4E 85 F1 | 	sub	fp, #8
17660     1F 16 0E F2 | 	cmp	arg03, #31 wz
17664     40 00 90 AD |  if_e	jmp	#LR__1942
17668     00 12 06 F6 | 	mov	arg01, #0
1766c     80 FC B0 FD | 	call	#__system___getiolock_0570
17670     FD 12 02 F6 | 	mov	arg01, result1
17674     4C 9F B0 FD | 	call	#__system___lockmem
17678     8D 01 00 FF 
1767c     59 15 06 F6 | 	mov	arg02, ##@LR__5613
17680     00 12 06 F6 | 	mov	arg01, #0
17684     00 16 06 F6 | 	mov	arg03, #0
17688     2C AC B0 FD | 	call	#__system___basic_print_string
1768c     00 12 06 F6 | 	mov	arg01, #0
17690     5C FC B0 FD | 	call	#__system___getiolock_0570
17694     FD 00 68 FC | 	wrlong	#0, result1
17698     0F 12 06 F6 | 	mov	arg01, #15
1769c     00 14 06 F6 | 	mov	arg02, #0
176a0     60 69 B0 FD | 	call	#_printerror
176a4     CC 01 90 FD | 	jmp	#LR__1953
176a8                 | LR__1942
176a8                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
176a8     A7 12 02 FB | 	rdlong	arg01, fp
176ac     01 14 06 F6 | 	mov	arg02, #1
176b0     8C BF B0 FD | 	call	#__system__Left_S
176b4     FD 12 02 F6 | 	mov	arg01, result1
176b8     8D 01 00 FF 
176bc     5F 15 06 F6 | 	mov	arg02, ##@LR__5614
176c0     28 9F B0 FD | 	call	#__system___string_cmp
176c4     00 FA 0D F2 | 	cmp	result1, #0 wz
176c8     48 00 90 5D |  if_ne	jmp	#LR__1945
176cc     8D 01 00 FF 
176d0     61 1F 06 F6 | 	mov	local01, ##@LR__5615
176d4     A7 16 02 FB | 	rdlong	arg03, fp
176d8     0B 13 02 F6 | 	mov	arg01, arg03
176dc     09 21 02 F6 | 	mov	local02, arg01
176e0     97 06 48 FB | 	callpa	#(@LR__1944-@LR__1943)>>2,fcache_load_ptr_
176e4                 | LR__1943
176e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
176e8     01 20 06 51 |  if_ne	add	local02, #1
176ec     F4 FF 9F 5D |  if_ne	jmp	#LR__1943
176f0                 | LR__1944
176f0     09 21 82 F1 | 	sub	local02, arg01
176f4     10 15 02 F6 | 	mov	arg02, local02
176f8     01 14 86 F1 | 	sub	arg02, #1
176fc     0B 13 02 F6 | 	mov	arg01, arg03
17700     C4 BF B0 FD | 	call	#__system__Right_S
17704     FD 14 02 F6 | 	mov	arg02, result1
17708     0F 13 02 F6 | 	mov	arg01, local01
1770c     10 9F B0 FD | 	call	#__system___string_concat
17710     A7 FA 61 FC | 	wrlong	result1, fp
17714                 | LR__1945
17714                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
17714     A7 12 02 FB | 	rdlong	arg01, fp
17718     01 14 06 F6 | 	mov	arg02, #1
1771c     20 BF B0 FD | 	call	#__system__Left_S
17720     FD 12 02 F6 | 	mov	arg01, result1
17724     8D 01 00 FF 
17728     64 15 06 F6 | 	mov	arg02, ##@LR__5616
1772c     BC 9E B0 FD | 	call	#__system___string_cmp
17730     00 FA 0D F2 | 	cmp	result1, #0 wz
17734     48 00 90 5D |  if_ne	jmp	#LR__1948
17738     8D 01 00 FF 
1773c     66 1F 06 F6 | 	mov	local01, ##@LR__5617
17740     A7 16 02 FB | 	rdlong	arg03, fp
17744     0B 13 02 F6 | 	mov	arg01, arg03
17748     09 21 02 F6 | 	mov	local02, arg01
1774c     97 06 48 FB | 	callpa	#(@LR__1947-@LR__1946)>>2,fcache_load_ptr_
17750                 | LR__1946
17750     10 FB C9 FA | 	rdbyte	result1, local02 wz
17754     01 20 06 51 |  if_ne	add	local02, #1
17758     F4 FF 9F 5D |  if_ne	jmp	#LR__1946
1775c                 | LR__1947
1775c     09 21 82 F1 | 	sub	local02, arg01
17760     10 15 02 F6 | 	mov	arg02, local02
17764     01 14 86 F1 | 	sub	arg02, #1
17768     0B 13 02 F6 | 	mov	arg01, arg03
1776c     58 BF B0 FD | 	call	#__system__Right_S
17770     FD 14 02 F6 | 	mov	arg02, result1
17774     0F 13 02 F6 | 	mov	arg01, local01
17778     A4 9E B0 FD | 	call	#__system___string_concat
1777c     A7 FA 61 FC | 	wrlong	result1, fp
17780                 | LR__1948
17780     A7 12 02 FB | 	rdlong	arg01, fp
17784     04 D4 B0 FD | 	call	#__system____builtin_atof
17788     1C 4E 05 F1 | 	add	fp, #28
1778c     A7 FA 61 FC | 	wrlong	result1, fp
17790     1C 4E 85 F1 | 	sub	fp, #28
17794     A7 12 02 FB | 	rdlong	arg01, fp
17798     00 14 06 F6 | 	mov	arg02, #0
1779c     58 D2 B0 FD | 	call	#__system____builtin_atoi
177a0     18 4E 05 F1 | 	add	fp, #24
177a4     A7 FA 61 FC | 	wrlong	result1, fp
177a8                 | ' fval=val(t1.result.sresult)
177a8                 | ' ival=val%(t1.result.sresult)
177a8                 | ' if fval=ival then
177a8     04 4E 05 F1 | 	add	fp, #4
177ac     A7 1E 02 FB | 	rdlong	local01, fp
177b0     1C 4E 85 F1 | 	sub	fp, #28
177b4     FD 12 52 F6 | 	abs	arg01, result1 wc
177b8     1F 22 C6 C9 |  if_b	decod	local03, #31
177bc     00 22 06 36 |  if_ae	mov	local03, #0
177c0     B8 C7 B0 FD | 	call	#__system___float_fromuns
177c4     11 FB 61 F5 | 	xor	result1, local03
177c8     FD 14 02 F6 | 	mov	arg02, result1
177cc     0F 13 02 F6 | 	mov	arg01, local01
177d0     01 16 06 F6 | 	mov	arg03, #1
177d4     DC CF B0 FD | 	call	#__system___float_cmp
177d8     00 FA 0D F2 | 	cmp	result1, #0 wz
177dc     20 00 90 5D |  if_ne	jmp	#LR__1949
177e0     18 4E 05 F1 | 	add	fp, #24
177e4     A7 1E 02 FB | 	rdlong	local01, fp
177e8     18 4E 85 F1 | 	sub	fp, #24
177ec     A7 1E 62 FC | 	wrlong	local01, fp
177f0     08 4E 05 F1 | 	add	fp, #8
177f4     A7 38 68 FC | 	wrlong	#28, fp
177f8     08 4E 85 F1 | 	sub	fp, #8
177fc     6C 00 90 FD | 	jmp	#LR__1952
17800                 | LR__1949
17800                 | '   if fval=0 andalso ival<>0 then
17800     1C 4E 05 F1 | 	add	fp, #28
17804     A7 12 02 FB | 	rdlong	arg01, fp
17808     1C 4E 85 F1 | 	sub	fp, #28
1780c     00 14 06 F6 | 	mov	arg02, #0
17810     01 16 06 F6 | 	mov	arg03, #1
17814     9C CF B0 FD | 	call	#__system___float_cmp
17818     00 FA 0D F2 | 	cmp	result1, #0 wz
1781c     30 00 90 5D |  if_ne	jmp	#LR__1950
17820     18 4E 05 F1 | 	add	fp, #24
17824     A7 1E 0A FB | 	rdlong	local01, fp wz
17828     18 4E 85 F1 | 	sub	fp, #24
1782c     20 00 90 AD |  if_e	jmp	#LR__1950
17830     18 4E 05 F1 | 	add	fp, #24
17834     A7 1E 02 FB | 	rdlong	local01, fp
17838     18 4E 85 F1 | 	sub	fp, #24
1783c     A7 1E 62 FC | 	wrlong	local01, fp
17840     08 4E 05 F1 | 	add	fp, #8
17844     A7 38 68 FC | 	wrlong	#28, fp
17848     08 4E 85 F1 | 	sub	fp, #8
1784c     1C 00 90 FD | 	jmp	#LR__1951
17850                 | LR__1950
17850     1C 4E 05 F1 | 	add	fp, #28
17854     A7 1E 02 FB | 	rdlong	local01, fp
17858     1C 4E 85 F1 | 	sub	fp, #28
1785c     A7 1E 62 FC | 	wrlong	local01, fp
17860     08 4E 05 F1 | 	add	fp, #8
17864     A7 3C 68 FC | 	wrlong	#30, fp
17868     08 4E 85 F1 | 	sub	fp, #8
1786c                 | LR__1951
1786c                 | LR__1952
1786c     A7 12 02 F6 | 	mov	arg01, fp
17870     3C 40 BF FD | 	call	#_push
17874                 | LR__1953
17874     A7 F0 03 F6 | 	mov	ptra, fp
17878     B2 00 A0 FD | 	call	#popregs_
1787c                 | _do_val_ret
1787c     2D 00 64 FD | 	ret
17880                 | 
17880                 | ' 
17880                 | ' ' ------------------ waitclock
17880                 | ' 
17880                 | ' sub do_waitclock
17880                 | _do_waitclock
17880     51 00 00 FF 
17884     A8 E5 05 F1 | 	add	objptr, ##41896
17888     F2 00 02 FB | 	rdlong	_var01, objptr
1788c                 | ' c=hkcnt
1788c                 | ' do: loop until hkcnt<>c
1788c                 | LR__1960
1788c     F2 02 02 FB | 	rdlong	_var02, objptr
17890     00 03 0A F2 | 	cmp	_var02, _var01 wz
17894     F4 FF 9F AD |  if_e	jmp	#LR__1960
17898     51 00 00 FF 
1789c     A8 E5 85 F1 | 	sub	objptr, ##41896
178a0                 | _do_waitclock_ret
178a0     2D 00 64 FD | 	ret
178a4                 | 
178a4                 | ' 
178a4                 | ' ' ------------------ waitms
178a4                 | ' 
178a4                 | ' sub do_waitms
178a4                 | _do_waitms
178a4     01 4A 05 F6 | 	mov	COUNT_, #1
178a8     A8 00 A0 FD | 	call	#pushregs_
178ac     18 F0 07 F1 | 	add	ptra, #24
178b0     64 3F BF FD | 	call	#_pop
178b4     A7 FA 61 FC | 	wrlong	result1, fp
178b8     04 4E 05 F1 | 	add	fp, #4
178bc     A7 FC 61 FC | 	wrlong	result2, fp
178c0     04 4E 05 F1 | 	add	fp, #4
178c4     A7 FE 61 FC | 	wrlong	result3, fp
178c8     08 4E 85 F1 | 	sub	fp, #8
178cc     A7 12 02 F6 | 	mov	arg01, fp
178d0     28 41 BF FD | 	call	#_converttoint
178d4     0C 4E 05 F1 | 	add	fp, #12
178d8     A7 FA 61 FC | 	wrlong	result1, fp
178dc                 | ' 
178dc                 | ' t1=pop()  
178dc                 | ' t=converttoint(t1)
178dc                 | ' if t<0 then return
178dc     0C 4E 85 F1 | 	sub	fp, #12
178e0     00 FA 55 F2 | 	cmps	result1, #0 wc
178e4     E4 00 90 CD |  if_b	jmp	#LR__1976
178e8                 | ' if t < 1000 then 
178e8     0C 4E 05 F1 | 	add	fp, #12
178ec     A7 12 02 FB | 	rdlong	arg01, fp
178f0     0C 4E 85 F1 | 	sub	fp, #12
178f4     01 00 00 FF 
178f8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
178fc     14 00 90 3D |  if_ae	jmp	#LR__1970
17900     0C 4E 05 F1 | 	add	fp, #12
17904     A7 12 02 FB | 	rdlong	arg01, fp
17908     0C 4E 85 F1 | 	sub	fp, #12
1790c     A8 9F B0 FD | 	call	#__system___waitms
17910     B8 00 90 FD | 	jmp	#LR__1975
17914                 | LR__1970
17914     10 4E 05 F1 | 	add	fp, #16
17918     A7 02 68 FC | 	wrlong	#1, fp
1791c     04 4E 85 F1 | 	sub	fp, #4
17920     A7 12 02 FB | 	rdlong	arg01, fp
17924     09 13 52 F6 | 	abs	arg01, arg01 wc
17928     01 00 00 FF 
1792c     E8 13 16 FD | 	qdiv	arg01, ##1000
17930                 | '   for i=1 to t/1000
17930     0C 4E 85 F1 | 	sub	fp, #12
17934     18 1E 62 FD | 	getqx	local01
17938     0F 1F 82 F6 | 	negc	local01, local01
1793c     01 1E 06 F1 | 	add	local01, #1
17940                 | LR__1971
17940     10 4E 05 F1 | 	add	fp, #16
17944     A7 12 02 FB | 	rdlong	arg01, fp
17948     10 4E 85 F1 | 	sub	fp, #16
1794c     0F 13 52 F2 | 	cmps	arg01, local01 wc
17950     54 00 90 3D |  if_ae	jmp	#LR__1974
17954     01 00 00 FF 
17958     E8 13 06 F6 | 	mov	arg01, ##1000
1795c     58 9F B0 FD | 	call	#__system___waitms
17960                 | '     waitms(1000)
17960                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
17960     E0 12 06 F6 | 	mov	arg01, #224
17964     AC 93 B0 FD | 	call	#_usbnew_spin2_keystate
17968     00 FA 0D F2 | 	cmp	result1, #0 wz
1796c     10 00 90 5D |  if_ne	jmp	#LR__1972
17970     E4 12 06 F6 | 	mov	arg01, #228
17974     9C 93 B0 FD | 	call	#_usbnew_spin2_keystate
17978     00 FA 0D F2 | 	cmp	result1, #0 wz
1797c     10 00 90 AD |  if_e	jmp	#LR__1973
17980                 | LR__1972
17980     06 12 06 F6 | 	mov	arg01, #6
17984     8C 93 B0 FD | 	call	#_usbnew_spin2_keystate
17988     00 FA 0D F2 | 	cmp	result1, #0 wz
1798c     3C 00 90 5D |  if_ne	jmp	#LR__1976
17990                 | LR__1973
17990     10 4E 05 F1 | 	add	fp, #16
17994     A7 12 02 FB | 	rdlong	arg01, fp
17998     01 12 06 F1 | 	add	arg01, #1
1799c     A7 12 62 FC | 	wrlong	arg01, fp
179a0     10 4E 85 F1 | 	sub	fp, #16
179a4     98 FF 9F FD | 	jmp	#LR__1971
179a8                 | LR__1974
179a8     0C 4E 05 F1 | 	add	fp, #12
179ac     A7 1E 02 FB | 	rdlong	local01, fp
179b0     0F 1F 52 F6 | 	abs	local01, local01 wc
179b4     01 00 00 FF 
179b8     E8 1F 16 FD | 	qdiv	local01, ##1000
179bc     0C 4E 85 F1 | 	sub	fp, #12
179c0     19 1E 62 FD | 	getqy	local01
179c4     0F 13 82 F6 | 	negc	arg01, local01
179c8     EC 9E B0 FD | 	call	#__system___waitms
179cc                 | LR__1975
179cc                 | LR__1976
179cc     A7 F0 03 F6 | 	mov	ptra, fp
179d0     B2 00 A0 FD | 	call	#popregs_
179d4                 | _do_waitms_ret
179d4     2D 00 64 FD | 	ret
179d8                 | 
179d8                 | ' 
179d8                 | ' ' ------------------ waitvbl
179d8                 | ' 
179d8                 | ' sub do_waitvbl
179d8                 | _do_waitvbl
179d8     01 12 06 F6 | 	mov	arg01, #1
179dc     98 82 B0 FD | 	call	#_hg010b_spin2_waitvbl
179e0                 | _do_waitvbl_ret
179e0     2D 00 64 FD | 	ret
179e4                 | 
179e4                 | ' 
179e4                 | ' ' ------------------ wrpin
179e4                 | ' 
179e4                 | ' sub do_wrpin
179e4                 | _do_wrpin
179e4     01 4A 05 F6 | 	mov	COUNT_, #1
179e8     A8 00 A0 FD | 	call	#pushregs_
179ec     18 F0 07 F1 | 	add	ptra, #24
179f0     24 3E BF FD | 	call	#_pop
179f4     FD 14 02 F6 | 	mov	arg02, result1
179f8     FE 12 02 F6 | 	mov	arg01, result2
179fc     FF 1E 02 F6 | 	mov	local01, result3
17a00     A7 14 62 FC | 	wrlong	arg02, fp
17a04     04 4E 05 F1 | 	add	fp, #4
17a08     A7 12 62 FC | 	wrlong	arg01, fp
17a0c     04 4E 05 F1 | 	add	fp, #4
17a10     A7 1E 62 FC | 	wrlong	local01, fp
17a14     08 4E 85 F1 | 	sub	fp, #8
17a18     FC 3D BF FD | 	call	#_pop
17a1c     FF 1E 02 F6 | 	mov	local01, result3
17a20     0C 4E 05 F1 | 	add	fp, #12
17a24     A7 FA 61 FC | 	wrlong	result1, fp
17a28     04 4E 05 F1 | 	add	fp, #4
17a2c     A7 FC 61 FC | 	wrlong	result2, fp
17a30     04 4E 05 F1 | 	add	fp, #4
17a34     A7 1E 62 FC | 	wrlong	local01, fp
17a38     08 4E 85 F1 | 	sub	fp, #8
17a3c     A7 12 02 F6 | 	mov	arg01, fp
17a40     0C 4E 85 F1 | 	sub	fp, #12
17a44     B4 3F BF FD | 	call	#_converttoint
17a48     FD 1E 02 F6 | 	mov	local01, result1
17a4c     A7 12 02 F6 | 	mov	arg01, fp
17a50     A8 3F BF FD | 	call	#_converttoint
17a54     0F FB 01 FC | 	wrpin	result1, local01
17a58     A7 F0 03 F6 | 	mov	ptra, fp
17a5c     B2 00 A0 FD | 	call	#popregs_
17a60                 | _do_wrpin_ret
17a60     2D 00 64 FD | 	ret
17a64                 | 
17a64                 | ' 
17a64                 | ' ' ------------------ wxpin
17a64                 | ' 
17a64                 | ' sub do_wxpin
17a64                 | _do_wxpin
17a64     01 4A 05 F6 | 	mov	COUNT_, #1
17a68     A8 00 A0 FD | 	call	#pushregs_
17a6c     18 F0 07 F1 | 	add	ptra, #24
17a70     A4 3D BF FD | 	call	#_pop
17a74     FD 14 02 F6 | 	mov	arg02, result1
17a78     FE 12 02 F6 | 	mov	arg01, result2
17a7c     FF 1E 02 F6 | 	mov	local01, result3
17a80     A7 14 62 FC | 	wrlong	arg02, fp
17a84     04 4E 05 F1 | 	add	fp, #4
17a88     A7 12 62 FC | 	wrlong	arg01, fp
17a8c     04 4E 05 F1 | 	add	fp, #4
17a90     A7 1E 62 FC | 	wrlong	local01, fp
17a94     08 4E 85 F1 | 	sub	fp, #8
17a98     7C 3D BF FD | 	call	#_pop
17a9c     FF 1E 02 F6 | 	mov	local01, result3
17aa0     0C 4E 05 F1 | 	add	fp, #12
17aa4     A7 FA 61 FC | 	wrlong	result1, fp
17aa8     04 4E 05 F1 | 	add	fp, #4
17aac     A7 FC 61 FC | 	wrlong	result2, fp
17ab0     04 4E 05 F1 | 	add	fp, #4
17ab4     A7 1E 62 FC | 	wrlong	local01, fp
17ab8     08 4E 85 F1 | 	sub	fp, #8
17abc     A7 12 02 F6 | 	mov	arg01, fp
17ac0     0C 4E 85 F1 | 	sub	fp, #12
17ac4     34 3F BF FD | 	call	#_converttoint
17ac8     FD 1E 02 F6 | 	mov	local01, result1
17acc     A7 12 02 F6 | 	mov	arg01, fp
17ad0     28 3F BF FD | 	call	#_converttoint
17ad4     0F FB 11 FC | 	wxpin	result1, local01
17ad8     A7 F0 03 F6 | 	mov	ptra, fp
17adc     B2 00 A0 FD | 	call	#popregs_
17ae0                 | _do_wxpin_ret
17ae0     2D 00 64 FD | 	ret
17ae4                 | 
17ae4                 | ' 
17ae4                 | ' ' ------------------ wypin
17ae4                 | ' 
17ae4                 | ' sub do_wypin
17ae4                 | _do_wypin
17ae4     01 4A 05 F6 | 	mov	COUNT_, #1
17ae8     A8 00 A0 FD | 	call	#pushregs_
17aec     18 F0 07 F1 | 	add	ptra, #24
17af0     24 3D BF FD | 	call	#_pop
17af4     FD 14 02 F6 | 	mov	arg02, result1
17af8     FE 12 02 F6 | 	mov	arg01, result2
17afc     FF 1E 02 F6 | 	mov	local01, result3
17b00     A7 14 62 FC | 	wrlong	arg02, fp
17b04     04 4E 05 F1 | 	add	fp, #4
17b08     A7 12 62 FC | 	wrlong	arg01, fp
17b0c     04 4E 05 F1 | 	add	fp, #4
17b10     A7 1E 62 FC | 	wrlong	local01, fp
17b14     08 4E 85 F1 | 	sub	fp, #8
17b18     FC 3C BF FD | 	call	#_pop
17b1c     FF 1E 02 F6 | 	mov	local01, result3
17b20     0C 4E 05 F1 | 	add	fp, #12
17b24     A7 FA 61 FC | 	wrlong	result1, fp
17b28     04 4E 05 F1 | 	add	fp, #4
17b2c     A7 FC 61 FC | 	wrlong	result2, fp
17b30     04 4E 05 F1 | 	add	fp, #4
17b34     A7 1E 62 FC | 	wrlong	local01, fp
17b38     08 4E 85 F1 | 	sub	fp, #8
17b3c     A7 12 02 F6 | 	mov	arg01, fp
17b40     0C 4E 85 F1 | 	sub	fp, #12
17b44     B4 3E BF FD | 	call	#_converttoint
17b48     FD 1E 02 F6 | 	mov	local01, result1
17b4c     A7 12 02 F6 | 	mov	arg01, fp
17b50     A8 3E BF FD | 	call	#_converttoint
17b54     0F FB 21 FC | 	wypin	result1, local01
17b58     A7 F0 03 F6 | 	mov	ptra, fp
17b5c     B2 00 A0 FD | 	call	#popregs_
17b60                 | _do_wypin_ret
17b60     2D 00 64 FD | 	ret
17b64                 | 
17b64                 | ' 
17b64                 | ' 
17b64                 | ' 
17b64                 | ' 
17b64                 | ' 
17b64                 | ' 
17b64                 | ' 
17b64                 | ' 
17b64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17b64                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
17b64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17b64                 | ' 
17b64                 | ' 
17b64                 | ' '------------------ Assign
17b64                 | ' 
17b64                 | ' sub do_assign
17b64                 | _do_assign
17b64     05 4A 05 F6 | 	mov	COUNT_, #5
17b68     A8 00 A0 FD | 	call	#pushregs_
17b6c     44 F0 07 F1 | 	add	ptra, #68
17b70     4A 00 00 FF 
17b74     80 E4 05 F1 | 	add	objptr, ##38016
17b78     F2 16 02 FB | 	rdlong	arg03, objptr
17b7c     0B 15 02 F6 | 	mov	arg02, arg03
17b80     01 14 66 F0 | 	shl	arg02, #1
17b84     0B 15 02 F1 | 	add	arg02, arg03
17b88     02 14 66 F0 | 	shl	arg02, #2
17b8c     03 00 00 FF 
17b90     04 E4 85 F1 | 	sub	objptr, ##1540
17b94     F2 14 02 F1 | 	add	arg02, objptr
17b98     0A 15 02 FB | 	rdlong	arg02, arg02
17b9c     18 4E 05 F1 | 	add	fp, #24
17ba0     A7 14 62 FC | 	wrlong	arg02, fp
17ba4                 | ' 
17ba4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
17ba4                 | ' if variables(varnum).vartype<array_no_type then 
17ba4     18 4E 85 F1 | 	sub	fp, #24
17ba8     04 14 66 F0 | 	shl	arg02, #4
17bac     32 00 00 FF 
17bb0     84 E4 85 F1 | 	sub	objptr, ##25732
17bb4     F2 14 02 F1 | 	add	arg02, objptr
17bb8     0C 14 06 F1 | 	add	arg02, #12
17bbc     0A 17 02 FB | 	rdlong	arg03, arg02
17bc0     00 17 16 F2 | 	cmp	arg03, #256 wc
17bc4     14 00 00 FF 
17bc8     F8 E5 85 F1 | 	sub	objptr, ##10744
17bcc     18 01 90 3D |  if_ae	jmp	#LR__1980
17bd0     44 3C BF FD | 	call	#_pop
17bd4     A7 FA 61 FC | 	wrlong	result1, fp
17bd8     04 4E 05 F1 | 	add	fp, #4
17bdc     A7 FC 61 FC | 	wrlong	result2, fp
17be0     04 4E 05 F1 | 	add	fp, #4
17be4     A7 FE 61 FC | 	wrlong	result3, fp
17be8     08 4E 85 F1 | 	sub	fp, #8
17bec     A7 16 02 FB | 	rdlong	arg03, fp
17bf0     04 4E 05 F1 | 	add	fp, #4
17bf4     A7 14 02 FB | 	rdlong	arg02, fp
17bf8     14 4E 05 F1 | 	add	fp, #20
17bfc     A7 12 02 FB | 	rdlong	arg01, fp
17c00     04 12 66 F0 | 	shl	arg01, #4
17c04     14 00 00 FF 
17c08     F8 E5 05 F1 | 	add	objptr, ##10744
17c0c     F2 12 02 F1 | 	add	arg01, objptr
17c10     04 12 06 F1 | 	add	arg01, #4
17c14     09 17 62 FC | 	wrlong	arg03, arg01
17c18     A7 16 02 FB | 	rdlong	arg03, fp
17c1c     04 16 66 F0 | 	shl	arg03, #4
17c20     F2 16 02 F1 | 	add	arg03, objptr
17c24     08 16 06 F1 | 	add	arg03, #8
17c28     0B 15 62 FC | 	wrlong	arg02, arg03
17c2c     A7 16 02 FB | 	rdlong	arg03, fp
17c30     04 16 66 F0 | 	shl	arg03, #4
17c34     F2 16 02 F1 | 	add	arg03, objptr
17c38     10 4E 85 F1 | 	sub	fp, #16
17c3c     A7 14 02 FB | 	rdlong	arg02, fp
17c40     0C 16 06 F1 | 	add	arg03, #12
17c44     0B 15 62 FC | 	wrlong	arg02, arg03
17c48                 | '   t1=pop() 
17c48                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
17c48                 | '   if variables(varnum).vartype<>result_string2 then return
17c48     10 4E 05 F1 | 	add	fp, #16
17c4c     A7 16 02 FB | 	rdlong	arg03, fp
17c50     18 4E 85 F1 | 	sub	fp, #24
17c54     04 16 66 F0 | 	shl	arg03, #4
17c58     F2 16 02 F1 | 	add	arg03, objptr
17c5c     0C 16 06 F1 | 	add	arg03, #12
17c60     0B 17 02 FB | 	rdlong	arg03, arg03
17c64     2B 16 0E F2 | 	cmp	arg03, #43 wz
17c68     14 00 00 FF 
17c6c     F8 E5 85 F1 | 	sub	objptr, ##10744
17c70     EC 04 90 5D |  if_ne	jmp	#LR__2003
17c74     18 4E 05 F1 | 	add	fp, #24
17c78     A7 16 02 FB | 	rdlong	arg03, fp
17c7c     0B 1F 02 F6 | 	mov	local01, arg03
17c80     04 1E 66 F0 | 	shl	local01, #4
17c84     14 00 00 FF 
17c88     F8 E5 05 F1 | 	add	objptr, ##10744
17c8c     F2 1E 02 F1 | 	add	local01, objptr
17c90     18 4E 85 F1 | 	sub	fp, #24
17c94     04 16 66 F0 | 	shl	arg03, #4
17c98     F2 16 02 F1 | 	add	arg03, objptr
17c9c     04 16 06 F1 | 	add	arg03, #4
17ca0     0B 13 02 FB | 	rdlong	arg01, arg03
17ca4     14 00 00 FF 
17ca8     F8 E5 85 F1 | 	sub	objptr, ##10744
17cac     E0 3C BF FD | 	call	#_convertstring
17cb0     04 1E 06 F1 | 	add	local01, #4
17cb4     0F FB 61 FC | 	wrlong	result1, local01
17cb8     18 4E 05 F1 | 	add	fp, #24
17cbc     A7 1E 02 FB | 	rdlong	local01, fp
17cc0     18 4E 85 F1 | 	sub	fp, #24
17cc4     04 1E 66 F0 | 	shl	local01, #4
17cc8     14 00 00 FF 
17ccc     F8 E5 05 F1 | 	add	objptr, ##10744
17cd0     F2 1E 02 F1 | 	add	local01, objptr
17cd4     0C 1E 06 F1 | 	add	local01, #12
17cd8     0F 3F 68 FC | 	wrlong	#31, local01
17cdc                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
17cdc                 | '   variables(varnum).vartype=result_string
17cdc                 | '   return
17cdc     14 00 00 FF 
17ce0     F8 E5 85 F1 | 	sub	objptr, ##10744
17ce4     78 04 90 FD | 	jmp	#LR__2003
17ce8                 | LR__1980
17ce8                 | ' for i=0 to 2 : arrid(i)=0 : next i
17ce8     1C 4E 05 F1 | 	add	fp, #28
17cec     A7 00 68 FC | 	wrlong	#0, fp
17cf0     97 16 48 FB | 	callpa	#(@LR__1982-@LR__1981)>>2,fcache_load_ptr_
17cf4                 | LR__1981
17cf4     A7 1E 02 FB | 	rdlong	local01, fp
17cf8     02 1E 66 F0 | 	shl	local01, #2
17cfc     18 4E 05 F1 | 	add	fp, #24
17d00     A7 1E 02 F1 | 	add	local01, fp
17d04     0F 01 68 FC | 	wrlong	#0, local01
17d08     18 4E 85 F1 | 	sub	fp, #24
17d0c     A7 1E 02 FB | 	rdlong	local01, fp
17d10     01 1E 06 F1 | 	add	local01, #1
17d14     A7 1E 62 FC | 	wrlong	local01, fp
17d18     03 1E 16 F2 | 	cmp	local01, #3 wc
17d1c     D4 FF 9F CD |  if_b	jmp	#LR__1981
17d20                 | LR__1982
17d20     4A 00 00 FF 
17d24     80 E4 05 F1 | 	add	objptr, ##38016
17d28     F2 16 02 FB | 	rdlong	arg03, objptr
17d2c     0B 1F 02 F6 | 	mov	local01, arg03
17d30     01 1E 66 F0 | 	shl	local01, #1
17d34     0B 1F 02 F1 | 	add	local01, arg03
17d38     02 1E 66 F0 | 	shl	local01, #2
17d3c     03 00 00 FF 
17d40     04 E4 85 F1 | 	sub	objptr, ##1540
17d44     F2 1E 02 F1 | 	add	local01, objptr
17d48     04 1E 06 F1 | 	add	local01, #4
17d4c     0F 21 02 FB | 	rdlong	local02, local01
17d50     04 4E 05 F1 | 	add	fp, #4
17d54     A7 20 62 FC | 	wrlong	local02, fp
17d58     20 4E 85 F1 | 	sub	fp, #32
17d5c     47 00 00 FF 
17d60     7C E4 85 F1 | 	sub	objptr, ##36476
17d64     B0 3A BF FD | 	call	#_pop
17d68     A7 FA 61 FC | 	wrlong	result1, fp
17d6c     04 4E 05 F1 | 	add	fp, #4
17d70     A7 FC 61 FC | 	wrlong	result2, fp
17d74     04 4E 05 F1 | 	add	fp, #4
17d78     A7 FE 61 FC | 	wrlong	result3, fp
17d7c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
17d7c                 | ' t1=pop() ' var value
17d7c                 | ' if numpar>0 then
17d7c     18 4E 05 F1 | 	add	fp, #24
17d80     A7 22 02 FB | 	rdlong	local03, fp
17d84     20 4E 85 F1 | 	sub	fp, #32
17d88     01 22 16 F2 | 	cmp	local03, #1 wc
17d8c     78 00 90 CD |  if_b	jmp	#LR__1985
17d90                 | '   for i=numpar to 1 step -1
17d90     20 4E 05 F1 | 	add	fp, #32
17d94     A7 24 0A FB | 	rdlong	local04, fp wz
17d98     04 4E 85 F1 | 	sub	fp, #4
17d9c     A7 24 62 FC | 	wrlong	local04, fp
17da0     1C 4E 85 F1 | 	sub	fp, #28
17da4     60 00 90 AD |  if_e	jmp	#LR__1984
17da8                 | LR__1983
17da8     6C 3A BF FD | 	call	#_pop
17dac     0C 4E 05 F1 | 	add	fp, #12
17db0     A7 FA 61 FC | 	wrlong	result1, fp
17db4     04 4E 05 F1 | 	add	fp, #4
17db8     A7 FC 61 FC | 	wrlong	result2, fp
17dbc     04 4E 05 F1 | 	add	fp, #4
17dc0     A7 FE 61 FC | 	wrlong	result3, fp
17dc4     08 4E 05 F1 | 	add	fp, #8
17dc8     A7 22 02 FB | 	rdlong	local03, fp
17dcc     01 22 86 F1 | 	sub	local03, #1
17dd0     02 22 66 F0 | 	shl	local03, #2
17dd4     18 4E 05 F1 | 	add	fp, #24
17dd8     A7 22 02 F1 | 	add	local03, fp
17ddc     28 4E 85 F1 | 	sub	fp, #40
17de0     A7 12 02 F6 | 	mov	arg01, fp
17de4     0C 4E 85 F1 | 	sub	fp, #12
17de8     10 3C BF FD | 	call	#_converttoint
17dec     11 FB 61 FC | 	wrlong	result1, local03
17df0     1C 4E 05 F1 | 	add	fp, #28
17df4     A7 24 02 FB | 	rdlong	local04, fp
17df8     01 24 8E F1 | 	sub	local04, #1 wz
17dfc     A7 24 62 FC | 	wrlong	local04, fp
17e00     1C 4E 85 F1 | 	sub	fp, #28
17e04     A0 FF 9F 5D |  if_ne	jmp	#LR__1983
17e08                 | LR__1984
17e08                 | LR__1985
17e08     18 4E 05 F1 | 	add	fp, #24
17e0c     A7 1E 02 FB | 	rdlong	local01, fp
17e10     04 1E 66 F0 | 	shl	local01, #4
17e14     14 00 00 FF 
17e18     F8 E5 05 F1 | 	add	objptr, ##10744
17e1c     F2 1E 02 F1 | 	add	local01, objptr
17e20     04 1E 06 F1 | 	add	local01, #4
17e24     0F 13 02 FB | 	rdlong	arg01, local01
17e28     0C 4E 05 F1 | 	add	fp, #12
17e2c     A7 12 62 FC | 	wrlong	arg01, fp
17e30     24 4E 85 F1 | 	sub	fp, #36
17e34     14 00 00 FF 
17e38     F8 E5 85 F1 | 	sub	objptr, ##10744
17e3c     80 64 B0 FD | 	call	#_pslpeek
17e40     FD 24 32 F9 | 	getword	local04, result1, #0
17e44     28 4E 05 F1 | 	add	fp, #40
17e48     A7 24 62 FC | 	wrlong	local04, fp
17e4c     04 4E 85 F1 | 	sub	fp, #4
17e50     A7 12 02 FB | 	rdlong	arg01, fp
17e54     24 4E 85 F1 | 	sub	fp, #36
17e58     02 12 06 F1 | 	add	arg01, #2
17e5c     08 64 B0 FD | 	call	#_pspeek
17e60     FD FA E1 F8 | 	getbyte	result1, result1, #0
17e64     2C 4E 05 F1 | 	add	fp, #44
17e68     A7 FA 61 FC | 	wrlong	result1, fp
17e6c                 | ' esize=pspeek(arrptr+2)
17e6c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
17e6c     08 4E 85 F1 | 	sub	fp, #8
17e70     A7 12 02 FB | 	rdlong	arg01, fp
17e74     24 4E 85 F1 | 	sub	fp, #36
17e78     04 12 06 F1 | 	add	arg01, #4
17e7c     40 64 B0 FD | 	call	#_pslpeek
17e80     FD 24 02 F6 | 	mov	local04, result1
17e84     34 4E 05 F1 | 	add	fp, #52
17e88     A7 1E 02 FB | 	rdlong	local01, fp
17e8c     34 4E 85 F1 | 	sub	fp, #52
17e90     12 1F 12 F2 | 	cmp	local01, local04 wc
17e94     54 00 90 3D |  if_ae	jmp	#LR__1986
17e98     24 4E 05 F1 | 	add	fp, #36
17e9c     A7 12 02 FB | 	rdlong	arg01, fp
17ea0     24 4E 85 F1 | 	sub	fp, #36
17ea4     08 12 06 F1 | 	add	arg01, #8
17ea8     14 64 B0 FD | 	call	#_pslpeek
17eac     FD 1E 02 F6 | 	mov	local01, result1
17eb0     38 4E 05 F1 | 	add	fp, #56
17eb4     A7 24 02 FB | 	rdlong	local04, fp
17eb8     38 4E 85 F1 | 	sub	fp, #56
17ebc     0F 25 12 F2 | 	cmp	local04, local01 wc
17ec0     28 00 90 3D |  if_ae	jmp	#LR__1986
17ec4     24 4E 05 F1 | 	add	fp, #36
17ec8     A7 12 02 FB | 	rdlong	arg01, fp
17ecc     24 4E 85 F1 | 	sub	fp, #36
17ed0     0C 12 06 F1 | 	add	arg01, #12
17ed4     E8 63 B0 FD | 	call	#_pslpeek
17ed8     3C 4E 05 F1 | 	add	fp, #60
17edc     A7 24 02 FB | 	rdlong	local04, fp
17ee0     3C 4E 85 F1 | 	sub	fp, #60
17ee4     FD 24 12 F2 | 	cmp	local04, result1 wc
17ee8     10 00 90 CD |  if_b	jmp	#LR__1987
17eec                 | LR__1986
17eec     31 12 06 F6 | 	mov	arg01, #49
17ef0     00 14 06 F6 | 	mov	arg02, #0
17ef4     0C 61 B0 FD | 	call	#_printerror
17ef8     64 02 90 FD | 	jmp	#LR__2003
17efc                 | LR__1987
17efc     24 4E 05 F1 | 	add	fp, #36
17f00     A7 12 02 FB | 	rdlong	arg01, fp
17f04     09 25 02 F6 | 	mov	local04, arg01
17f08     10 24 06 F1 | 	add	local04, #16
17f0c     24 4E 85 F1 | 	sub	fp, #36
17f10     04 12 06 F1 | 	add	arg01, #4
17f14     A8 63 B0 FD | 	call	#_pslpeek
17f18     FD 1E 02 F6 | 	mov	local01, result1
17f1c     38 4E 05 F1 | 	add	fp, #56
17f20     A7 20 02 FB | 	rdlong	local02, fp
17f24     10 1F 02 FD | 	qmul	local01, local02
17f28     04 4E 85 F1 | 	sub	fp, #4
17f2c     A7 22 02 FB | 	rdlong	local03, fp
17f30     10 4E 85 F1 | 	sub	fp, #16
17f34     A7 12 02 FB | 	rdlong	arg01, fp
17f38     24 4E 85 F1 | 	sub	fp, #36
17f3c     08 12 06 F1 | 	add	arg01, #8
17f40     18 20 62 FD | 	getqx	local02
17f44     10 23 02 F1 | 	add	local03, local02
17f48     74 63 B0 FD | 	call	#_pslpeek
17f4c     FD 20 02 F6 | 	mov	local02, result1
17f50     24 4E 05 F1 | 	add	fp, #36
17f54     A7 12 02 FB | 	rdlong	arg01, fp
17f58     24 4E 85 F1 | 	sub	fp, #36
17f5c     04 12 06 F1 | 	add	arg01, #4
17f60     5C 63 B0 FD | 	call	#_pslpeek
17f64     FD 20 02 FD | 	qmul	local02, result1
17f68     3C 4E 05 F1 | 	add	fp, #60
17f6c     A7 20 02 FB | 	rdlong	local02, fp
17f70     18 1E 62 FD | 	getqx	local01
17f74     10 1F 02 FD | 	qmul	local01, local02
17f78     10 4E 85 F1 | 	sub	fp, #16
17f7c     A7 20 02 FB | 	rdlong	local02, fp
17f80     18 1E 62 FD | 	getqx	local01
17f84     0F 23 02 F1 | 	add	local03, local01
17f88     11 21 02 FD | 	qmul	local02, local03
17f8c     04 4E 05 F1 | 	add	fp, #4
17f90                 | ' 
17f90                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
17f90                 | ' select case arrtype
17f90     18 22 62 FD | 	getqx	local03
17f94     11 25 02 F1 | 	add	local04, local03
17f98     A7 24 62 FC | 	wrlong	local04, fp
17f9c     08 4E 85 F1 | 	sub	fp, #8
17fa0     A7 26 02 FB | 	rdlong	local05, fp
17fa4     28 4E 85 F1 | 	sub	fp, #40
17fa8     00 27 86 F1 | 	sub	local05, #256
17fac     0C 26 26 F3 | 	fle	local05, #12
17fb0     30 26 62 FD | 	jmprel	local05
17fb4                 | LR__1988
17fb4     30 00 90 FD | 	jmp	#LR__1989
17fb8     58 00 90 FD | 	jmp	#LR__1990
17fbc     6C 00 90 FD | 	jmp	#LR__1991
17fc0     80 00 90 FD | 	jmp	#LR__1992
17fc4     B0 00 90 FD | 	jmp	#LR__1993
17fc8     E0 00 90 FD | 	jmp	#LR__1994
17fcc     F4 00 90 FD | 	jmp	#LR__1995
17fd0     08 01 90 FD | 	jmp	#LR__1996
17fd4     1C 01 90 FD | 	jmp	#LR__1997
17fd8     30 01 90 FD | 	jmp	#LR__1998
17fdc     44 01 90 FD | 	jmp	#LR__1999
17fe0     58 01 90 FD | 	jmp	#LR__2000
17fe4     6C 01 90 FD | 	jmp	#LR__2001
17fe8                 | LR__1989
17fe8     A7 12 02 F6 | 	mov	arg01, fp
17fec     30 4E 05 F1 | 	add	fp, #48
17ff0     A7 14 02 FB | 	rdlong	arg02, fp
17ff4     30 4E 85 F1 | 	sub	fp, #48
17ff8     0C 16 06 F6 | 	mov	arg03, #12
17ffc     0B 00 00 FF 
18000     CC E4 05 F1 | 	add	objptr, ##5836
18004     18 8A B0 FD | 	call	#_psram_spin2_write
18008     0B 00 00 FF 
1800c     CC E4 85 F1 | 	sub	objptr, ##5836
18010     4C 01 90 FD | 	jmp	#LR__2002
18014                 | LR__1990
18014     30 4E 05 F1 | 	add	fp, #48
18018     A7 12 02 FB | 	rdlong	arg01, fp
1801c     30 4E 85 F1 | 	sub	fp, #48
18020     A7 14 02 FB | 	rdlong	arg02, fp
18024     F8 61 B0 FD | 	call	#_pspoke
18028     34 01 90 FD | 	jmp	#LR__2002
1802c                 | LR__1991
1802c     30 4E 05 F1 | 	add	fp, #48
18030     A7 12 02 FB | 	rdlong	arg01, fp
18034     30 4E 85 F1 | 	sub	fp, #48
18038     A7 14 02 FB | 	rdlong	arg02, fp
1803c     E0 61 B0 FD | 	call	#_pspoke
18040     1C 01 90 FD | 	jmp	#LR__2002
18044                 | LR__1992
18044     30 4E 05 F1 | 	add	fp, #48
18048     A7 12 02 FB | 	rdlong	arg01, fp
1804c     30 4E 85 F1 | 	sub	fp, #48
18050     A7 14 02 FB | 	rdlong	arg02, fp
18054     C8 61 B0 FD | 	call	#_pspoke
18058     30 4E 05 F1 | 	add	fp, #48
1805c     A7 12 02 FB | 	rdlong	arg01, fp
18060     30 4E 85 F1 | 	sub	fp, #48
18064     01 12 06 F1 | 	add	arg01, #1
18068     A7 14 02 FB | 	rdlong	arg02, fp
1806c     08 14 46 F0 | 	shr	arg02, #8
18070     AC 61 B0 FD | 	call	#_pspoke
18074     E8 00 90 FD | 	jmp	#LR__2002
18078                 | LR__1993
18078     30 4E 05 F1 | 	add	fp, #48
1807c     A7 12 02 FB | 	rdlong	arg01, fp
18080     30 4E 85 F1 | 	sub	fp, #48
18084     A7 14 02 FB | 	rdlong	arg02, fp
18088     94 61 B0 FD | 	call	#_pspoke
1808c     30 4E 05 F1 | 	add	fp, #48
18090     A7 12 02 FB | 	rdlong	arg01, fp
18094     30 4E 85 F1 | 	sub	fp, #48
18098     01 12 06 F1 | 	add	arg01, #1
1809c     A7 14 02 FB | 	rdlong	arg02, fp
180a0     08 14 46 F0 | 	shr	arg02, #8
180a4     78 61 B0 FD | 	call	#_pspoke
180a8     B4 00 90 FD | 	jmp	#LR__2002
180ac                 | LR__1994
180ac     30 4E 05 F1 | 	add	fp, #48
180b0     A7 12 02 FB | 	rdlong	arg01, fp
180b4     30 4E 85 F1 | 	sub	fp, #48
180b8     A7 14 02 FB | 	rdlong	arg02, fp
180bc     D0 60 B0 FD | 	call	#_pslpoke
180c0     9C 00 90 FD | 	jmp	#LR__2002
180c4                 | LR__1995
180c4     30 4E 05 F1 | 	add	fp, #48
180c8     A7 12 02 FB | 	rdlong	arg01, fp
180cc     30 4E 85 F1 | 	sub	fp, #48
180d0     A7 14 02 FB | 	rdlong	arg02, fp
180d4     B8 60 B0 FD | 	call	#_pslpoke
180d8     84 00 90 FD | 	jmp	#LR__2002
180dc                 | LR__1996
180dc     30 4E 05 F1 | 	add	fp, #48
180e0     A7 12 02 FB | 	rdlong	arg01, fp
180e4     30 4E 85 F1 | 	sub	fp, #48
180e8     A7 14 02 FB | 	rdlong	arg02, fp
180ec     A0 60 B0 FD | 	call	#_pslpoke
180f0     6C 00 90 FD | 	jmp	#LR__2002
180f4                 | LR__1997
180f4     30 4E 05 F1 | 	add	fp, #48
180f8     A7 12 02 FB | 	rdlong	arg01, fp
180fc     30 4E 85 F1 | 	sub	fp, #48
18100     A7 14 02 FB | 	rdlong	arg02, fp
18104     88 60 B0 FD | 	call	#_pslpoke
18108     54 00 90 FD | 	jmp	#LR__2002
1810c                 | LR__1998
1810c     30 4E 05 F1 | 	add	fp, #48
18110     A7 12 02 FB | 	rdlong	arg01, fp
18114     30 4E 85 F1 | 	sub	fp, #48
18118     A7 14 02 FB | 	rdlong	arg02, fp
1811c     70 60 B0 FD | 	call	#_pslpoke
18120     3C 00 90 FD | 	jmp	#LR__2002
18124                 | LR__1999
18124     30 4E 05 F1 | 	add	fp, #48
18128     A7 12 02 FB | 	rdlong	arg01, fp
1812c     30 4E 85 F1 | 	sub	fp, #48
18130     A7 14 02 FB | 	rdlong	arg02, fp
18134     58 60 B0 FD | 	call	#_pslpoke
18138     24 00 90 FD | 	jmp	#LR__2002
1813c                 | LR__2000
1813c     30 4E 05 F1 | 	add	fp, #48
18140     A7 12 02 FB | 	rdlong	arg01, fp
18144     30 4E 85 F1 | 	sub	fp, #48
18148     A7 14 02 FB | 	rdlong	arg02, fp
1814c     40 60 B0 FD | 	call	#_pslpoke
18150     0C 00 90 FD | 	jmp	#LR__2002
18154                 | LR__2001
18154     32 12 06 F6 | 	mov	arg01, #50
18158     00 14 06 F6 | 	mov	arg02, #0
1815c     A4 5E B0 FD | 	call	#_printerror
18160                 | LR__2002
18160                 | LR__2003
18160     A7 F0 03 F6 | 	mov	ptra, fp
18164     B2 00 A0 FD | 	call	#popregs_
18168                 | _do_assign_ret
18168     2D 00 64 FD | 	ret
1816c                 | 
1816c                 | ' 
1816c                 | ' 
1816c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1816c                 | ' 
1816c                 | ' sub do_getvar
1816c                 | _do_getvar
1816c     04 4A 05 F6 | 	mov	COUNT_, #4
18170     A8 00 A0 FD | 	call	#pushregs_
18174     3C F0 07 F1 | 	add	ptra, #60
18178                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
18178     4A 00 00 FF 
1817c     80 E4 05 F1 | 	add	objptr, ##38016
18180     F2 1E 02 FB | 	rdlong	local01, objptr
18184     0F 17 02 F6 | 	mov	arg03, local01
18188     01 16 66 F0 | 	shl	arg03, #1
1818c     0F 17 02 F1 | 	add	arg03, local01
18190     02 16 66 F0 | 	shl	arg03, #2
18194     03 00 00 FF 
18198     04 E4 85 F1 | 	sub	objptr, ##1540
1819c     F2 16 02 F1 | 	add	arg03, objptr
181a0     04 16 06 F1 | 	add	arg03, #4
181a4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
181a8     47 00 00 FF 
181ac     7C E4 85 F1 | 	sub	objptr, ##36476
181b0     C4 00 90 5D |  if_ne	jmp	#LR__2011
181b4     4A 00 00 FF 
181b8     80 E4 05 F1 | 	add	objptr, ##38016
181bc     F2 1E 02 FB | 	rdlong	local01, objptr
181c0     0F 13 02 F6 | 	mov	arg01, local01
181c4     01 12 66 F0 | 	shl	arg01, #1
181c8     0F 13 02 F1 | 	add	arg01, local01
181cc     02 12 66 F0 | 	shl	arg01, #2
181d0     03 00 00 FF 
181d4     04 E4 85 F1 | 	sub	objptr, ##1540
181d8     F2 12 02 F1 | 	add	arg01, objptr
181dc     09 1F 02 FB | 	rdlong	local01, arg01
181e0     04 1E 66 F0 | 	shl	local01, #4
181e4     32 00 00 FF 
181e8     84 E4 85 F1 | 	sub	objptr, ##25732
181ec     F2 1E 02 F1 | 	add	local01, objptr
181f0     04 1E 06 F1 | 	add	local01, #4
181f4     0F 13 02 FB | 	rdlong	arg01, local01
181f8     04 1E 06 F1 | 	add	local01, #4
181fc     0F 1F 02 FB | 	rdlong	local01, local01
18200     A7 12 62 FC | 	wrlong	arg01, fp
18204     04 4E 05 F1 | 	add	fp, #4
18208     A7 1E 62 FC | 	wrlong	local01, fp
1820c     35 00 00 FF 
18210     88 E4 05 F1 | 	add	objptr, ##27272
18214     F2 1E 02 FB | 	rdlong	local01, objptr
18218     0F 13 02 F6 | 	mov	arg01, local01
1821c     01 12 66 F0 | 	shl	arg01, #1
18220     0F 13 02 F1 | 	add	arg01, local01
18224     02 12 66 F0 | 	shl	arg01, #2
18228     03 00 00 FF 
1822c     04 E4 85 F1 | 	sub	objptr, ##1540
18230     F2 12 02 F1 | 	add	arg01, objptr
18234     09 1F 02 FB | 	rdlong	local01, arg01
18238     04 1E 66 F0 | 	shl	local01, #4
1823c     32 00 00 FF 
18240     84 E4 85 F1 | 	sub	objptr, ##25732
18244     F2 1E 02 F1 | 	add	local01, objptr
18248     0C 1E 06 F1 | 	add	local01, #12
1824c     0F 1F 02 FB | 	rdlong	local01, local01
18250     04 4E 05 F1 | 	add	fp, #4
18254     A7 1E 62 FC | 	wrlong	local01, fp
18258                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
18258                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18258                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
18258     08 4E 85 F1 | 	sub	fp, #8
1825c     00 1F 16 F2 | 	cmp	local01, #256 wc
18260     14 00 00 FF 
18264     F8 E5 85 F1 | 	sub	objptr, ##10744
18268     0C 00 90 3D |  if_ae	jmp	#LR__2010
1826c     A7 12 02 F6 | 	mov	arg01, fp
18270     3C 36 BF FD | 	call	#_push
18274     A0 04 90 FD | 	jmp	#LR__2032
18278                 | LR__2010
18278                 | LR__2011
18278     4A 00 00 FF 
1827c     80 E4 05 F1 | 	add	objptr, ##38016
18280     F2 16 02 FB | 	rdlong	arg03, objptr
18284     0B 15 02 F6 | 	mov	arg02, arg03
18288     01 14 66 F0 | 	shl	arg02, #1
1828c     0B 15 02 F1 | 	add	arg02, arg03
18290     02 14 66 F0 | 	shl	arg02, #2
18294     03 00 00 FF 
18298     04 E4 85 F1 | 	sub	objptr, ##1540
1829c     F2 14 02 F1 | 	add	arg02, objptr
182a0     0A 17 02 FB | 	rdlong	arg03, arg02
182a4     04 16 66 F0 | 	shl	arg03, #4
182a8     32 00 00 FF 
182ac     84 E4 85 F1 | 	sub	objptr, ##25732
182b0     F2 16 02 F1 | 	add	arg03, objptr
182b4     04 16 06 F1 | 	add	arg03, #4
182b8     0B 13 02 FB | 	rdlong	arg01, arg03
182bc     0C 4E 05 F1 | 	add	fp, #12
182c0     A7 12 62 FC | 	wrlong	arg01, fp
182c4     0C 4E 85 F1 | 	sub	fp, #12
182c8     14 00 00 FF 
182cc     F8 E5 85 F1 | 	sub	objptr, ##10744
182d0     EC 5F B0 FD | 	call	#_pslpeek
182d4     FD FA 31 F9 | 	getword	result1, result1, #0
182d8     10 4E 05 F1 | 	add	fp, #16
182dc     A7 FA 61 FC | 	wrlong	result1, fp
182e0     4A 00 00 FF 
182e4     80 E4 05 F1 | 	add	objptr, ##38016
182e8     F2 16 02 FB | 	rdlong	arg03, objptr
182ec     0B 15 02 F6 | 	mov	arg02, arg03
182f0     01 14 66 F0 | 	shl	arg02, #1
182f4     0B 15 02 F1 | 	add	arg02, arg03
182f8     02 14 66 F0 | 	shl	arg02, #2
182fc     03 00 00 FF 
18300     04 E4 85 F1 | 	sub	objptr, ##1540
18304     F2 14 02 F1 | 	add	arg02, objptr
18308     04 14 06 F1 | 	add	arg02, #4
1830c     0A 17 02 FB | 	rdlong	arg03, arg02
18310     04 4E 05 F1 | 	add	fp, #4
18314     A7 16 62 FC | 	wrlong	arg03, fp
18318     08 4E 85 F1 | 	sub	fp, #8
1831c     A7 12 02 FB | 	rdlong	arg01, fp
18320     0C 4E 85 F1 | 	sub	fp, #12
18324     02 12 06 F1 | 	add	arg01, #2
18328     47 00 00 FF 
1832c     7C E4 85 F1 | 	sub	objptr, ##36476
18330     34 5F B0 FD | 	call	#_pspeek
18334     FD FA E1 F8 | 	getbyte	result1, result1, #0
18338     18 4E 05 F1 | 	add	fp, #24
1833c     A7 FA 61 FC | 	wrlong	result1, fp
18340     0C 4E 85 F1 | 	sub	fp, #12
18344     A7 12 02 FB | 	rdlong	arg01, fp
18348     0C 4E 85 F1 | 	sub	fp, #12
1834c     04 12 06 F1 | 	add	arg01, #4
18350     6C 5F B0 FD | 	call	#_pslpeek
18354     1C 4E 05 F1 | 	add	fp, #28
18358     A7 FA 61 FC | 	wrlong	result1, fp
1835c     10 4E 85 F1 | 	sub	fp, #16
18360     A7 12 02 FB | 	rdlong	arg01, fp
18364     0C 4E 85 F1 | 	sub	fp, #12
18368     08 12 06 F1 | 	add	arg01, #8
1836c     50 5F B0 FD | 	call	#_pslpeek
18370     20 4E 05 F1 | 	add	fp, #32
18374     A7 FA 61 FC | 	wrlong	result1, fp
18378     14 4E 85 F1 | 	sub	fp, #20
1837c     A7 12 02 FB | 	rdlong	arg01, fp
18380     0C 4E 85 F1 | 	sub	fp, #12
18384     0C 12 06 F1 | 	add	arg01, #12
18388     34 5F B0 FD | 	call	#_pslpeek
1838c     24 4E 05 F1 | 	add	fp, #36
18390     A7 FA 61 FC | 	wrlong	result1, fp
18394                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
18394                 | ' esize=pspeek(arrptr+2)
18394                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
18394                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
18394                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
18394                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
18394     10 4E 85 F1 | 	sub	fp, #16
18398     A7 16 02 FB | 	rdlong	arg03, fp
1839c     14 4E 85 F1 | 	sub	fp, #20
183a0     03 16 16 F2 | 	cmp	arg03, #3 wc
183a4     38 00 90 CD |  if_b	jmp	#LR__2012
183a8     6C 34 BF FD | 	call	#_pop
183ac     FF 16 02 F6 | 	mov	arg03, result3
183b0     A7 FA 61 FC | 	wrlong	result1, fp
183b4     04 4E 05 F1 | 	add	fp, #4
183b8     A7 FC 61 FC | 	wrlong	result2, fp
183bc     04 4E 05 F1 | 	add	fp, #4
183c0     A7 16 62 FC | 	wrlong	arg03, fp
183c4     08 4E 85 F1 | 	sub	fp, #8
183c8     A7 12 02 F6 | 	mov	arg01, fp
183cc     2C 36 BF FD | 	call	#_converttoint
183d0     30 4E 05 F1 | 	add	fp, #48
183d4     A7 FA 61 FC | 	wrlong	result1, fp
183d8     30 4E 85 F1 | 	sub	fp, #48
183dc     0C 00 90 FD | 	jmp	#LR__2013
183e0                 | LR__2012
183e0     30 4E 05 F1 | 	add	fp, #48
183e4     A7 00 68 FC | 	wrlong	#0, fp
183e8     30 4E 85 F1 | 	sub	fp, #48
183ec                 | LR__2013
183ec                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
183ec     14 4E 05 F1 | 	add	fp, #20
183f0     A7 16 02 FB | 	rdlong	arg03, fp
183f4     14 4E 85 F1 | 	sub	fp, #20
183f8     02 16 16 F2 | 	cmp	arg03, #2 wc
183fc     38 00 90 CD |  if_b	jmp	#LR__2014
18400     14 34 BF FD | 	call	#_pop
18404     FF 16 02 F6 | 	mov	arg03, result3
18408     A7 FA 61 FC | 	wrlong	result1, fp
1840c     04 4E 05 F1 | 	add	fp, #4
18410     A7 FC 61 FC | 	wrlong	result2, fp
18414     04 4E 05 F1 | 	add	fp, #4
18418     A7 16 62 FC | 	wrlong	arg03, fp
1841c     08 4E 85 F1 | 	sub	fp, #8
18420     A7 12 02 F6 | 	mov	arg01, fp
18424     D4 35 BF FD | 	call	#_converttoint
18428     2C 4E 05 F1 | 	add	fp, #44
1842c     A7 FA 61 FC | 	wrlong	result1, fp
18430     2C 4E 85 F1 | 	sub	fp, #44
18434     0C 00 90 FD | 	jmp	#LR__2015
18438                 | LR__2014
18438     2C 4E 05 F1 | 	add	fp, #44
1843c     A7 00 68 FC | 	wrlong	#0, fp
18440     2C 4E 85 F1 | 	sub	fp, #44
18444                 | LR__2015
18444                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
18444     14 4E 05 F1 | 	add	fp, #20
18448     A7 16 02 FB | 	rdlong	arg03, fp
1844c     14 4E 85 F1 | 	sub	fp, #20
18450     01 16 16 F2 | 	cmp	arg03, #1 wc
18454     38 00 90 CD |  if_b	jmp	#LR__2016
18458     BC 33 BF FD | 	call	#_pop
1845c     FF 16 02 F6 | 	mov	arg03, result3
18460     A7 FA 61 FC | 	wrlong	result1, fp
18464     04 4E 05 F1 | 	add	fp, #4
18468     A7 FC 61 FC | 	wrlong	result2, fp
1846c     04 4E 05 F1 | 	add	fp, #4
18470     A7 16 62 FC | 	wrlong	arg03, fp
18474     08 4E 85 F1 | 	sub	fp, #8
18478     A7 12 02 F6 | 	mov	arg01, fp
1847c     7C 35 BF FD | 	call	#_converttoint
18480     28 4E 05 F1 | 	add	fp, #40
18484     A7 FA 61 FC | 	wrlong	result1, fp
18488     28 4E 85 F1 | 	sub	fp, #40
1848c     0C 00 90 FD | 	jmp	#LR__2017
18490                 | LR__2016
18490     28 4E 05 F1 | 	add	fp, #40
18494     A7 00 68 FC | 	wrlong	#0, fp
18498     28 4E 85 F1 | 	sub	fp, #40
1849c                 | LR__2017
1849c     0C 4E 05 F1 | 	add	fp, #12
184a0     A7 20 02 FB | 	rdlong	local02, fp
184a4     1C 4E 05 F1 | 	add	fp, #28
184a8     A7 22 02 FB | 	rdlong	local03, fp
184ac     04 4E 05 F1 | 	add	fp, #4
184b0     A7 FC 01 FB | 	rdlong	result2, fp
184b4     10 4E 85 F1 | 	sub	fp, #16
184b8     A7 FE 01 FB | 	rdlong	result3, fp
184bc     FF FC 01 FD | 	qmul	result2, result3
184c0     10 20 06 F1 | 	add	local02, #16
184c4     14 4E 05 F1 | 	add	fp, #20
184c8     A7 FC 01 FB | 	rdlong	result2, fp
184cc     18 FA 61 FD | 	getqx	result1
184d0     FF FC 01 FD | 	qmul	result2, result3
184d4     FD 22 02 F1 | 	add	local03, result1
184d8     10 4E 85 F1 | 	sub	fp, #16
184dc     A7 FE 01 FB | 	rdlong	result3, fp
184e0     18 FC 61 FD | 	getqx	result2
184e4     FF FC 01 FD | 	qmul	result2, result3
184e8     08 4E 85 F1 | 	sub	fp, #8
184ec     A7 FE 01 FB | 	rdlong	result3, fp
184f0     18 FC 61 FD | 	getqx	result2
184f4     FE 22 02 F1 | 	add	local03, result2
184f8     FF 22 02 FD | 	qmul	local03, result3
184fc     1C 4E 05 F1 | 	add	fp, #28
18500                 | ' 
18500                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
18500                 | ' 
18500                 | ' select case vartype
18500     18 FC 61 FD | 	getqx	result2
18504     FE 20 02 F1 | 	add	local02, result2
18508     A7 20 62 FC | 	wrlong	local02, fp
1850c     24 4E 85 F1 | 	sub	fp, #36
18510     A7 24 02 FB | 	rdlong	local04, fp
18514     10 4E 85 F1 | 	sub	fp, #16
18518     00 25 86 F1 | 	sub	local04, #256
1851c     0C 24 26 F3 | 	fle	local04, #12
18520     30 24 62 FD | 	jmprel	local04
18524                 | LR__2018
18524     30 00 90 FD | 	jmp	#LR__2019
18528     58 00 90 FD | 	jmp	#LR__2020
1852c     8C 00 90 FD | 	jmp	#LR__2021
18530     AC 00 90 FD | 	jmp	#LR__2022
18534     E8 00 90 FD | 	jmp	#LR__2023
18538     08 01 90 FD | 	jmp	#LR__2024
1853c     24 01 90 FD | 	jmp	#LR__2025
18540     40 01 90 FD | 	jmp	#LR__2026
18544     50 01 90 FD | 	jmp	#LR__2027
18548     60 01 90 FD | 	jmp	#LR__2028
1854c     7C 01 90 FD | 	jmp	#LR__2029
18550     8C 01 90 FD | 	jmp	#LR__2030
18554     B8 01 90 FD | 	jmp	#LR__2031
18558                 | LR__2019
18558     A7 12 02 F6 | 	mov	arg01, fp
1855c     34 4E 05 F1 | 	add	fp, #52
18560     A7 14 02 FB | 	rdlong	arg02, fp
18564     34 4E 85 F1 | 	sub	fp, #52
18568     0C 16 06 F6 | 	mov	arg03, #12
1856c     0B 00 00 FF 
18570     CC E4 05 F1 | 	add	objptr, ##5836
18574     0C 84 B0 FD | 	call	#_psram_spin2_read1
18578     0B 00 00 FF 
1857c     CC E4 85 F1 | 	sub	objptr, ##5836
18580     8C 01 90 FD | 	jmp	#LR__2031
18584                 | LR__2020
18584     08 4E 05 F1 | 	add	fp, #8
18588     A7 38 68 FC | 	wrlong	#28, fp
1858c     2C 4E 05 F1 | 	add	fp, #44
18590     A7 12 02 FB | 	rdlong	arg01, fp
18594     34 4E 85 F1 | 	sub	fp, #52
18598     CC 5C B0 FD | 	call	#_pspeek
1859c     FD FA E1 F8 | 	getbyte	result1, result1, #0
185a0     A7 FA 61 FC | 	wrlong	result1, fp
185a4     80 FA 15 F2 | 	cmp	result1, #128 wc
185a8     00 1F 66 36 |  if_ae	neg	local01, #256
185ac     A7 22 02 3B |  if_ae	rdlong	local03, fp
185b0     11 1F 42 35 |  if_ae	or	local01, local03
185b4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
185b8     54 01 90 FD | 	jmp	#LR__2031
185bc                 | LR__2021
185bc     08 4E 05 F1 | 	add	fp, #8
185c0     A7 3A 68 FC | 	wrlong	#29, fp
185c4     2C 4E 05 F1 | 	add	fp, #44
185c8     A7 12 02 FB | 	rdlong	arg01, fp
185cc     34 4E 85 F1 | 	sub	fp, #52
185d0     94 5C B0 FD | 	call	#_pspeek
185d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
185d8     A7 FA 61 FC | 	wrlong	result1, fp
185dc     30 01 90 FD | 	jmp	#LR__2031
185e0                 | LR__2022
185e0     08 4E 05 F1 | 	add	fp, #8
185e4     A7 38 68 FC | 	wrlong	#28, fp
185e8     2C 4E 05 F1 | 	add	fp, #44
185ec     A7 12 02 FB | 	rdlong	arg01, fp
185f0     34 4E 85 F1 | 	sub	fp, #52
185f4     C8 5C B0 FD | 	call	#_pslpeek
185f8     FD FA 31 F9 | 	getword	result1, result1, #0
185fc     A7 FA 61 FC | 	wrlong	result1, fp
18600     40 00 00 FF 
18604     00 FA 15 F2 | 	cmp	result1, ##32768 wc
18608     FF 7F 00 3F 
1860c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
18610     A7 22 02 3B |  if_ae	rdlong	local03, fp
18614     11 1F 42 35 |  if_ae	or	local01, local03
18618     A7 1E 62 3C |  if_ae	wrlong	local01, fp
1861c     F0 00 90 FD | 	jmp	#LR__2031
18620                 | LR__2023
18620     08 4E 05 F1 | 	add	fp, #8
18624     A7 3A 68 FC | 	wrlong	#29, fp
18628     2C 4E 05 F1 | 	add	fp, #44
1862c     A7 12 02 FB | 	rdlong	arg01, fp
18630     34 4E 85 F1 | 	sub	fp, #52
18634     88 5C B0 FD | 	call	#_pslpeek
18638     FD FA 31 F9 | 	getword	result1, result1, #0
1863c     A7 FA 61 FC | 	wrlong	result1, fp
18640     CC 00 90 FD | 	jmp	#LR__2031
18644                 | LR__2024
18644     08 4E 05 F1 | 	add	fp, #8
18648     A7 38 68 FC | 	wrlong	#28, fp
1864c     2C 4E 05 F1 | 	add	fp, #44
18650     A7 12 02 FB | 	rdlong	arg01, fp
18654     34 4E 85 F1 | 	sub	fp, #52
18658     64 5C B0 FD | 	call	#_pslpeek
1865c     A7 FA 61 FC | 	wrlong	result1, fp
18660     AC 00 90 FD | 	jmp	#LR__2031
18664                 | LR__2025
18664     08 4E 05 F1 | 	add	fp, #8
18668     A7 3A 68 FC | 	wrlong	#29, fp
1866c     2C 4E 05 F1 | 	add	fp, #44
18670     A7 12 02 FB | 	rdlong	arg01, fp
18674     34 4E 85 F1 | 	sub	fp, #52
18678     44 5C B0 FD | 	call	#_pslpeek
1867c     A7 FA 61 FC | 	wrlong	result1, fp
18680     8C 00 90 FD | 	jmp	#LR__2031
18684                 | LR__2026
18684     08 4E 05 F1 | 	add	fp, #8
18688     A7 FE 69 FC | 	wrlong	#255, fp
1868c     08 4E 85 F1 | 	sub	fp, #8
18690     A7 60 68 FC | 	wrlong	#48, fp
18694     78 00 90 FD | 	jmp	#LR__2031
18698                 | LR__2027
18698     08 4E 05 F1 | 	add	fp, #8
1869c     A7 FE 69 FC | 	wrlong	#255, fp
186a0     08 4E 85 F1 | 	sub	fp, #8
186a4     A7 60 68 FC | 	wrlong	#48, fp
186a8     64 00 90 FD | 	jmp	#LR__2031
186ac                 | LR__2028
186ac     08 4E 05 F1 | 	add	fp, #8
186b0     A7 3C 68 FC | 	wrlong	#30, fp
186b4     2C 4E 05 F1 | 	add	fp, #44
186b8     A7 12 02 FB | 	rdlong	arg01, fp
186bc     34 4E 85 F1 | 	sub	fp, #52
186c0     FC 5B B0 FD | 	call	#_pslpeek
186c4     A7 FA 61 FC | 	wrlong	result1, fp
186c8     44 00 90 FD | 	jmp	#LR__2031
186cc                 | LR__2029
186cc     08 4E 05 F1 | 	add	fp, #8
186d0     A7 FE 69 FC | 	wrlong	#255, fp
186d4     08 4E 85 F1 | 	sub	fp, #8
186d8     A7 60 68 FC | 	wrlong	#48, fp
186dc     30 00 90 FD | 	jmp	#LR__2031
186e0                 | LR__2030
186e0     08 4E 05 F1 | 	add	fp, #8
186e4     A7 3E 68 FC | 	wrlong	#31, fp
186e8     2C 4E 05 F1 | 	add	fp, #44
186ec     A7 12 02 FB | 	rdlong	arg01, fp
186f0     34 4E 85 F1 | 	sub	fp, #52
186f4     C8 5B B0 FD | 	call	#_pslpeek
186f8     A7 FA 61 FC | 	wrlong	result1, fp
186fc     00 04 00 FF 
18700     00 FA 15 F2 | 	cmp	result1, ##524288 wc
18704     08 4E 05 31 |  if_ae	add	fp, #8
18708     A7 56 68 3C |  if_ae	wrlong	#43, fp
1870c     08 4E 85 31 |  if_ae	sub	fp, #8
18710                 | LR__2031
18710     A7 12 02 F6 | 	mov	arg01, fp
18714     98 31 BF FD | 	call	#_push
18718                 | LR__2032
18718     A7 F0 03 F6 | 	mov	ptra, fp
1871c     B2 00 A0 FD | 	call	#popregs_
18720                 | _do_getvar_ret
18720     2D 00 64 FD | 	ret
18724                 | 
18724                 | ' 
18724                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
18724                 | ' 
18724                 | ' sub do_getaddr
18724                 | _do_getaddr
18724     01 4A 05 F6 | 	mov	COUNT_, #1
18728     A8 00 A0 FD | 	call	#pushregs_
1872c     38 F0 07 F1 | 	add	ptra, #56
18730                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
18730                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
18730     4A 00 00 FF 
18734     80 E4 05 F1 | 	add	objptr, ##38016
18738     F2 12 02 FB | 	rdlong	arg01, objptr
1873c     09 FD 01 F6 | 	mov	result2, arg01
18740     01 FC 65 F0 | 	shl	result2, #1
18744     09 FD 01 F1 | 	add	result2, arg01
18748     02 FC 65 F0 | 	shl	result2, #2
1874c     03 00 00 FF 
18750     04 E4 85 F1 | 	sub	objptr, ##1540
18754     F2 FC 01 F1 | 	add	result2, objptr
18758     04 FC 05 F1 | 	add	result2, #4
1875c     FE FC 09 FB | 	rdlong	result2, result2 wz
18760     47 00 00 FF 
18764     7C E4 85 F1 | 	sub	objptr, ##36476
18768     C4 00 90 5D |  if_ne	jmp	#LR__2040
1876c     4A 00 00 FF 
18770     80 E4 05 F1 | 	add	objptr, ##38016
18774     F2 12 02 FB | 	rdlong	arg01, objptr
18778     09 FD 01 F6 | 	mov	result2, arg01
1877c     01 FC 65 F0 | 	shl	result2, #1
18780     09 FD 01 F1 | 	add	result2, arg01
18784     02 FC 65 F0 | 	shl	result2, #2
18788     03 00 00 FF 
1878c     04 E4 85 F1 | 	sub	objptr, ##1540
18790     F2 FC 01 F1 | 	add	result2, objptr
18794     FE 12 02 FB | 	rdlong	arg01, result2
18798     04 12 66 F0 | 	shl	arg01, #4
1879c     32 00 00 FF 
187a0     84 E4 85 F1 | 	sub	objptr, ##25732
187a4     F2 12 02 F1 | 	add	arg01, objptr
187a8     0C 12 06 F1 | 	add	arg01, #12
187ac     09 13 02 FB | 	rdlong	arg01, arg01
187b0     08 4E 05 F1 | 	add	fp, #8
187b4     A7 12 62 FC | 	wrlong	arg01, fp
187b8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
187b8                 | '    if t1.result_type>=array_no_type then goto 2200
187b8     08 4E 85 F1 | 	sub	fp, #8
187bc     00 13 16 F2 | 	cmp	arg01, #256 wc
187c0     14 00 00 FF 
187c4     F8 E5 85 F1 | 	sub	objptr, ##10744
187c8     64 00 90 3D |  if_ae	jmp	#LR__2041
187cc     4A 00 00 FF 
187d0     80 E4 05 F1 | 	add	objptr, ##38016
187d4     F2 12 02 FB | 	rdlong	arg01, objptr
187d8     09 FB 01 F6 | 	mov	result1, arg01
187dc     01 FA 65 F0 | 	shl	result1, #1
187e0     09 FB 01 F1 | 	add	result1, arg01
187e4     02 FA 65 F0 | 	shl	result1, #2
187e8     03 00 00 FF 
187ec     04 E4 85 F1 | 	sub	objptr, ##1540
187f0     F2 FA 01 F1 | 	add	result1, objptr
187f4     FD FA 01 FB | 	rdlong	result1, result1
187f8     04 FA 65 F0 | 	shl	result1, #4
187fc     32 00 00 FF 
18800     84 E4 85 F1 | 	sub	objptr, ##25732
18804     F2 FA 01 F1 | 	add	result1, objptr
18808     04 FA 05 F1 | 	add	result1, #4
1880c     14 00 00 FF 
18810     F8 E5 85 F1 | 	sub	objptr, ##10744
18814     A7 FA 61 FC | 	wrlong	result1, fp
18818     08 4E 05 F1 | 	add	fp, #8
1881c     A7 3A 68 FC | 	wrlong	#29, fp
18820     08 4E 85 F1 | 	sub	fp, #8
18824     A7 12 02 F6 | 	mov	arg01, fp
18828     84 30 BF FD | 	call	#_push
1882c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1882c                 | '   t1.result_type=result_uint
1882c                 | '   push t1 : return
1882c     D8 02 90 FD | 	jmp	#LR__2050
18830                 | LR__2040
18830                 | LR__2041
18830     4A 00 00 FF 
18834     80 E4 05 F1 | 	add	objptr, ##38016
18838     F2 FE 01 FB | 	rdlong	result3, objptr
1883c     FF 12 02 F6 | 	mov	arg01, result3
18840     01 12 66 F0 | 	shl	arg01, #1
18844     FF 12 02 F1 | 	add	arg01, result3
18848     02 12 66 F0 | 	shl	arg01, #2
1884c     03 00 00 FF 
18850     04 E4 85 F1 | 	sub	objptr, ##1540
18854     F2 12 02 F1 | 	add	arg01, objptr
18858     09 13 02 FB | 	rdlong	arg01, arg01
1885c     04 12 66 F0 | 	shl	arg01, #4
18860     32 00 00 FF 
18864     84 E4 85 F1 | 	sub	objptr, ##25732
18868     F2 12 02 F1 | 	add	arg01, objptr
1886c     04 12 06 F1 | 	add	arg01, #4
18870     09 13 02 FB | 	rdlong	arg01, arg01
18874     0C 4E 05 F1 | 	add	fp, #12
18878     A7 12 62 FC | 	wrlong	arg01, fp
1887c     0C 4E 85 F1 | 	sub	fp, #12
18880     14 00 00 FF 
18884     F8 E5 85 F1 | 	sub	objptr, ##10744
18888     34 5A B0 FD | 	call	#_pslpeek
1888c     FD FA 31 F9 | 	getword	result1, result1, #0
18890     10 4E 05 F1 | 	add	fp, #16
18894     A7 FA 61 FC | 	wrlong	result1, fp
18898     4A 00 00 FF 
1889c     80 E4 05 F1 | 	add	objptr, ##38016
188a0     F2 FE 01 FB | 	rdlong	result3, objptr
188a4     FF 12 02 F6 | 	mov	arg01, result3
188a8     01 12 66 F0 | 	shl	arg01, #1
188ac     FF 12 02 F1 | 	add	arg01, result3
188b0     02 12 66 F0 | 	shl	arg01, #2
188b4     03 00 00 FF 
188b8     04 E4 85 F1 | 	sub	objptr, ##1540
188bc     F2 12 02 F1 | 	add	arg01, objptr
188c0     04 12 06 F1 | 	add	arg01, #4
188c4     09 13 02 FB | 	rdlong	arg01, arg01
188c8     04 4E 05 F1 | 	add	fp, #4
188cc     A7 12 62 FC | 	wrlong	arg01, fp
188d0     08 4E 85 F1 | 	sub	fp, #8
188d4     A7 12 02 FB | 	rdlong	arg01, fp
188d8     0C 4E 85 F1 | 	sub	fp, #12
188dc     02 12 06 F1 | 	add	arg01, #2
188e0     47 00 00 FF 
188e4     7C E4 85 F1 | 	sub	objptr, ##36476
188e8     7C 59 B0 FD | 	call	#_pspeek
188ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
188f0     18 4E 05 F1 | 	add	fp, #24
188f4     A7 FA 61 FC | 	wrlong	result1, fp
188f8     0C 4E 85 F1 | 	sub	fp, #12
188fc     A7 12 02 FB | 	rdlong	arg01, fp
18900     0C 4E 85 F1 | 	sub	fp, #12
18904     04 12 06 F1 | 	add	arg01, #4
18908     B4 59 B0 FD | 	call	#_pslpeek
1890c     1C 4E 05 F1 | 	add	fp, #28
18910     A7 FA 61 FC | 	wrlong	result1, fp
18914     10 4E 85 F1 | 	sub	fp, #16
18918     A7 12 02 FB | 	rdlong	arg01, fp
1891c     0C 4E 85 F1 | 	sub	fp, #12
18920     08 12 06 F1 | 	add	arg01, #8
18924     98 59 B0 FD | 	call	#_pslpeek
18928     20 4E 05 F1 | 	add	fp, #32
1892c     A7 FA 61 FC | 	wrlong	result1, fp
18930     14 4E 85 F1 | 	sub	fp, #20
18934     A7 12 02 FB | 	rdlong	arg01, fp
18938     0C 4E 85 F1 | 	sub	fp, #12
1893c     0C 12 06 F1 | 	add	arg01, #12
18940     7C 59 B0 FD | 	call	#_pslpeek
18944     24 4E 05 F1 | 	add	fp, #36
18948     A7 FA 61 FC | 	wrlong	result1, fp
1894c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1894c                 | ' esize=pspeek(arrptr+2)
1894c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1894c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1894c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1894c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1894c     10 4E 85 F1 | 	sub	fp, #16
18950     A7 12 02 FB | 	rdlong	arg01, fp
18954     14 4E 85 F1 | 	sub	fp, #20
18958     03 12 16 F2 | 	cmp	arg01, #3 wc
1895c     34 00 90 CD |  if_b	jmp	#LR__2042
18960     B4 2E BF FD | 	call	#_pop
18964     A7 FA 61 FC | 	wrlong	result1, fp
18968     04 4E 05 F1 | 	add	fp, #4
1896c     A7 FC 61 FC | 	wrlong	result2, fp
18970     04 4E 05 F1 | 	add	fp, #4
18974     A7 FE 61 FC | 	wrlong	result3, fp
18978     08 4E 85 F1 | 	sub	fp, #8
1897c     A7 12 02 F6 | 	mov	arg01, fp
18980     78 30 BF FD | 	call	#_converttoint
18984     30 4E 05 F1 | 	add	fp, #48
18988     A7 FA 61 FC | 	wrlong	result1, fp
1898c     30 4E 85 F1 | 	sub	fp, #48
18990     0C 00 90 FD | 	jmp	#LR__2043
18994                 | LR__2042
18994     30 4E 05 F1 | 	add	fp, #48
18998     A7 00 68 FC | 	wrlong	#0, fp
1899c     30 4E 85 F1 | 	sub	fp, #48
189a0                 | LR__2043
189a0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
189a0     14 4E 05 F1 | 	add	fp, #20
189a4     A7 12 02 FB | 	rdlong	arg01, fp
189a8     14 4E 85 F1 | 	sub	fp, #20
189ac     02 12 16 F2 | 	cmp	arg01, #2 wc
189b0     34 00 90 CD |  if_b	jmp	#LR__2044
189b4     60 2E BF FD | 	call	#_pop
189b8     A7 FA 61 FC | 	wrlong	result1, fp
189bc     04 4E 05 F1 | 	add	fp, #4
189c0     A7 FC 61 FC | 	wrlong	result2, fp
189c4     04 4E 05 F1 | 	add	fp, #4
189c8     A7 FE 61 FC | 	wrlong	result3, fp
189cc     08 4E 85 F1 | 	sub	fp, #8
189d0     A7 12 02 F6 | 	mov	arg01, fp
189d4     24 30 BF FD | 	call	#_converttoint
189d8     2C 4E 05 F1 | 	add	fp, #44
189dc     A7 FA 61 FC | 	wrlong	result1, fp
189e0     2C 4E 85 F1 | 	sub	fp, #44
189e4     0C 00 90 FD | 	jmp	#LR__2045
189e8                 | LR__2044
189e8     2C 4E 05 F1 | 	add	fp, #44
189ec     A7 00 68 FC | 	wrlong	#0, fp
189f0     2C 4E 85 F1 | 	sub	fp, #44
189f4                 | LR__2045
189f4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
189f4     14 4E 05 F1 | 	add	fp, #20
189f8     A7 12 02 FB | 	rdlong	arg01, fp
189fc     14 4E 85 F1 | 	sub	fp, #20
18a00     01 12 16 F2 | 	cmp	arg01, #1 wc
18a04     34 00 90 CD |  if_b	jmp	#LR__2046
18a08     0C 2E BF FD | 	call	#_pop
18a0c     A7 FA 61 FC | 	wrlong	result1, fp
18a10     04 4E 05 F1 | 	add	fp, #4
18a14     A7 FC 61 FC | 	wrlong	result2, fp
18a18     04 4E 05 F1 | 	add	fp, #4
18a1c     A7 FE 61 FC | 	wrlong	result3, fp
18a20     08 4E 85 F1 | 	sub	fp, #8
18a24     A7 12 02 F6 | 	mov	arg01, fp
18a28     D0 2F BF FD | 	call	#_converttoint
18a2c     28 4E 05 F1 | 	add	fp, #40
18a30     A7 FA 61 FC | 	wrlong	result1, fp
18a34     28 4E 85 F1 | 	sub	fp, #40
18a38     0C 00 90 FD | 	jmp	#LR__2047
18a3c                 | LR__2046
18a3c     28 4E 05 F1 | 	add	fp, #40
18a40     A7 00 68 FC | 	wrlong	#0, fp
18a44     28 4E 85 F1 | 	sub	fp, #40
18a48                 | LR__2047
18a48                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
18a48                 | ' if numpar>0 then
18a48     14 4E 05 F1 | 	add	fp, #20
18a4c     A7 FE 01 FB | 	rdlong	result3, fp
18a50     14 4E 85 F1 | 	sub	fp, #20
18a54     01 FE 15 F2 | 	cmp	result3, #1 wc
18a58     8C 00 90 CD |  if_b	jmp	#LR__2048
18a5c     0C 4E 05 F1 | 	add	fp, #12
18a60     A7 FC 01 FB | 	rdlong	result2, fp
18a64     1C 4E 05 F1 | 	add	fp, #28
18a68     A7 FE 01 FB | 	rdlong	result3, fp
18a6c     04 4E 05 F1 | 	add	fp, #4
18a70     A7 12 02 FB | 	rdlong	arg01, fp
18a74     10 4E 85 F1 | 	sub	fp, #16
18a78     A7 FA 01 FB | 	rdlong	result1, fp
18a7c     FD 12 02 FD | 	qmul	arg01, result1
18a80     10 FC 05 F1 | 	add	result2, #16
18a84     14 4E 05 F1 | 	add	fp, #20
18a88     A7 1E 02 FB | 	rdlong	local01, fp
18a8c     18 12 62 FD | 	getqx	arg01
18a90     FD 1E 02 FD | 	qmul	local01, result1
18a94     09 FF 01 F1 | 	add	result3, arg01
18a98     10 4E 85 F1 | 	sub	fp, #16
18a9c     A7 1E 02 FB | 	rdlong	local01, fp
18aa0     18 FA 61 FD | 	getqx	result1
18aa4     0F FB 01 FD | 	qmul	result1, local01
18aa8     08 4E 85 F1 | 	sub	fp, #8
18aac     A7 1E 02 FB | 	rdlong	local01, fp
18ab0     18 FA 61 FD | 	getqx	result1
18ab4     FD FE 01 F1 | 	add	result3, result1
18ab8     0F FF 01 FD | 	qmul	result3, local01
18abc     1C 4E 05 F1 | 	add	fp, #28
18ac0     18 1E 62 FD | 	getqx	local01
18ac4     0F FD 01 F1 | 	add	result2, local01
18ac8     A7 FC 61 FC | 	wrlong	result2, fp
18acc     2C 4E 85 F1 | 	sub	fp, #44
18ad0     A7 3A 68 FC | 	wrlong	#29, fp
18ad4     2C 4E 05 F1 | 	add	fp, #44
18ad8     A7 1E 02 FB | 	rdlong	local01, fp
18adc     34 4E 85 F1 | 	sub	fp, #52
18ae0     A7 1E 62 FC | 	wrlong	local01, fp
18ae4     18 00 90 FD | 	jmp	#LR__2049
18ae8                 | LR__2048
18ae8     08 4E 05 F1 | 	add	fp, #8
18aec     A7 3A 68 FC | 	wrlong	#29, fp
18af0     04 4E 05 F1 | 	add	fp, #4
18af4     A7 1E 02 FB | 	rdlong	local01, fp
18af8     0C 4E 85 F1 | 	sub	fp, #12
18afc     A7 1E 62 FC | 	wrlong	local01, fp
18b00                 | LR__2049
18b00     A7 12 02 F6 | 	mov	arg01, fp
18b04     A8 2D BF FD | 	call	#_push
18b08                 | LR__2050
18b08     A7 F0 03 F6 | 	mov	ptra, fp
18b0c     B2 00 A0 FD | 	call	#popregs_
18b10                 | _do_getaddr_ret
18b10     2D 00 64 FD | 	ret
18b14                 | 
18b14                 | ' 
18b14                 | ' 
18b14                 | ' 
18b14                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18b14                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
18b14                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18b14                 | ' 
18b14                 | ' '--------------------------------- AND 
18b14                 | ' 
18b14                 | ' sub do_and 
18b14                 | _do_and
18b14     03 4A 05 F6 | 	mov	COUNT_, #3
18b18     A8 00 A0 FD | 	call	#pushregs_
18b1c     18 F0 07 F1 | 	add	ptra, #24
18b20     F4 2C BF FD | 	call	#_pop
18b24     FD 12 02 F6 | 	mov	arg01, result1
18b28     FE 1E 02 F6 | 	mov	local01, result2
18b2c     FF 20 02 F6 | 	mov	local02, result3
18b30     0C 4E 05 F1 | 	add	fp, #12
18b34     A7 12 62 FC | 	wrlong	arg01, fp
18b38     04 4E 05 F1 | 	add	fp, #4
18b3c     A7 1E 62 FC | 	wrlong	local01, fp
18b40     04 4E 05 F1 | 	add	fp, #4
18b44     A7 20 62 FC | 	wrlong	local02, fp
18b48     14 4E 85 F1 | 	sub	fp, #20
18b4c     C8 2C BF FD | 	call	#_pop
18b50     FF 22 02 F6 | 	mov	local03, result3
18b54     A7 FA 61 FC | 	wrlong	result1, fp
18b58     04 4E 05 F1 | 	add	fp, #4
18b5c     A7 FC 61 FC | 	wrlong	result2, fp
18b60     04 4E 05 F1 | 	add	fp, #4
18b64     A7 22 62 FC | 	wrlong	local03, fp
18b68                 | ' 
18b68                 | ' t2=pop()
18b68                 | ' t1=pop()
18b68                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18b68     08 4E 85 F1 | 	sub	fp, #8
18b6c     1C 22 0E F2 | 	cmp	local03, #28 wz
18b70     A7 22 02 AB |  if_e	rdlong	local03, fp
18b74     A7 22 62 AC |  if_e	wrlong	local03, fp
18b78     08 4E 05 A1 |  if_e	add	fp, #8
18b7c     A7 3A 68 AC |  if_e	wrlong	#29, fp
18b80     08 4E 85 A1 |  if_e	sub	fp, #8
18b84                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18b84     14 4E 05 F1 | 	add	fp, #20
18b88     A7 22 02 FB | 	rdlong	local03, fp
18b8c     14 4E 85 F1 | 	sub	fp, #20
18b90     1C 22 0E F2 | 	cmp	local03, #28 wz
18b94     18 00 90 5D |  if_ne	jmp	#LR__2060
18b98     0C 4E 05 F1 | 	add	fp, #12
18b9c     A7 22 02 FB | 	rdlong	local03, fp
18ba0     A7 22 62 FC | 	wrlong	local03, fp
18ba4     08 4E 05 F1 | 	add	fp, #8
18ba8     A7 3A 68 FC | 	wrlong	#29, fp
18bac     14 4E 85 F1 | 	sub	fp, #20
18bb0                 | LR__2060
18bb0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
18bb0     08 4E 05 F1 | 	add	fp, #8
18bb4     A7 22 02 FB | 	rdlong	local03, fp
18bb8     08 4E 85 F1 | 	sub	fp, #8
18bbc     1F 22 0E F2 | 	cmp	local03, #31 wz
18bc0     14 4E 05 51 |  if_ne	add	fp, #20
18bc4     A7 20 02 5B |  if_ne	rdlong	local02, fp
18bc8     14 4E 85 51 |  if_ne	sub	fp, #20
18bcc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
18bd0     08 4E 05 51 |  if_ne	add	fp, #8
18bd4     A7 22 02 5B |  if_ne	rdlong	local03, fp
18bd8     08 4E 85 51 |  if_ne	sub	fp, #8
18bdc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
18be0     14 4E 05 51 |  if_ne	add	fp, #20
18be4     14 4E 85 51 |  if_ne	sub	fp, #20
18be8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
18bec     A7 0C 68 AC |  if_e	wrlong	#6, fp
18bf0     08 4E 05 A1 |  if_e	add	fp, #8
18bf4     A7 FE 69 AC |  if_e	wrlong	#255, fp
18bf8     08 4E 85 A1 |  if_e	sub	fp, #8
18bfc     18 00 90 AD |  if_e	jmp	#LR__2061
18c00     A7 22 02 FB | 	rdlong	local03, fp
18c04     0C 4E 05 F1 | 	add	fp, #12
18c08     A7 1E 02 FB | 	rdlong	local01, fp
18c0c     0C 4E 85 F1 | 	sub	fp, #12
18c10     0F 23 02 F5 | 	and	local03, local01
18c14     A7 22 62 FC | 	wrlong	local03, fp
18c18                 | LR__2061
18c18     A7 12 02 F6 | 	mov	arg01, fp
18c1c     90 2C BF FD | 	call	#_push
18c20     A7 F0 03 F6 | 	mov	ptra, fp
18c24     B2 00 A0 FD | 	call	#popregs_
18c28                 | _do_and_ret
18c28     2D 00 64 FD | 	ret
18c2c                 | 
18c2c                 | ' 
18c2c                 | ' '--------------------------------- DIV (integer divide)
18c2c                 | ' 
18c2c                 | ' sub do_div 
18c2c                 | _do_div
18c2c     01 4A 05 F6 | 	mov	COUNT_, #1
18c30     A8 00 A0 FD | 	call	#pushregs_
18c34     18 F0 07 F1 | 	add	ptra, #24
18c38     DC 2B BF FD | 	call	#_pop
18c3c     FD 82 02 F6 | 	mov	muldivb_, result1
18c40     FE 80 02 F6 | 	mov	muldiva_, result2
18c44     FF 1E 02 F6 | 	mov	local01, result3
18c48     0C 4E 05 F1 | 	add	fp, #12
18c4c     A7 82 62 FC | 	wrlong	muldivb_, fp
18c50     04 4E 05 F1 | 	add	fp, #4
18c54     A7 80 62 FC | 	wrlong	muldiva_, fp
18c58     04 4E 05 F1 | 	add	fp, #4
18c5c     A7 1E 62 FC | 	wrlong	local01, fp
18c60     14 4E 85 F1 | 	sub	fp, #20
18c64     B0 2B BF FD | 	call	#_pop
18c68     A7 FA 61 FC | 	wrlong	result1, fp
18c6c     04 4E 05 F1 | 	add	fp, #4
18c70     A7 FC 61 FC | 	wrlong	result2, fp
18c74     04 4E 05 F1 | 	add	fp, #4
18c78     A7 FE 61 FC | 	wrlong	result3, fp
18c7c                 | ' 
18c7c                 | ' t2=pop()
18c7c                 | ' t1=pop()
18c7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
18c7c     08 4E 85 F1 | 	sub	fp, #8
18c80     1F FE 0D F2 | 	cmp	result3, #31 wz
18c84     14 4E 05 51 |  if_ne	add	fp, #20
18c88     A7 12 02 5B |  if_ne	rdlong	arg01, fp
18c8c     14 4E 85 51 |  if_ne	sub	fp, #20
18c90     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
18c94     A7 14 68 AC |  if_e	wrlong	#10, fp
18c98     08 4E 05 A1 |  if_e	add	fp, #8
18c9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
18ca0     08 4E 85 A1 |  if_e	sub	fp, #8
18ca4     90 01 90 AD |  if_e	jmp	#LR__2076
18ca8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
18ca8     08 4E 05 F1 | 	add	fp, #8
18cac     A7 82 02 FB | 	rdlong	muldivb_, fp
18cb0     08 4E 85 F1 | 	sub	fp, #8
18cb4     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
18cb8     1C 00 90 5D |  if_ne	jmp	#LR__2070
18cbc     08 4E 05 F1 | 	add	fp, #8
18cc0     A7 38 68 FC | 	wrlong	#28, fp
18cc4     08 4E 85 F1 | 	sub	fp, #8
18cc8     A7 12 02 FB | 	rdlong	arg01, fp
18ccc     00 14 06 F6 | 	mov	arg02, #0
18cd0     74 BB B0 FD | 	call	#__system___float_tointeger
18cd4     A7 FA 61 FC | 	wrlong	result1, fp
18cd8                 | LR__2070
18cd8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
18cd8     14 4E 05 F1 | 	add	fp, #20
18cdc     A7 82 02 FB | 	rdlong	muldivb_, fp
18ce0     14 4E 85 F1 | 	sub	fp, #20
18ce4     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
18ce8     28 00 90 5D |  if_ne	jmp	#LR__2071
18cec     14 4E 05 F1 | 	add	fp, #20
18cf0     A7 38 68 FC | 	wrlong	#28, fp
18cf4     08 4E 85 F1 | 	sub	fp, #8
18cf8     A7 12 02 FB | 	rdlong	arg01, fp
18cfc     0C 4E 85 F1 | 	sub	fp, #12
18d00     00 14 06 F6 | 	mov	arg02, #0
18d04     40 BB B0 FD | 	call	#__system___float_tointeger
18d08     0C 4E 05 F1 | 	add	fp, #12
18d0c     A7 FA 61 FC | 	wrlong	result1, fp
18d10     0C 4E 85 F1 | 	sub	fp, #12
18d14                 | LR__2071
18d14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
18d14     08 4E 05 F1 | 	add	fp, #8
18d18     A7 82 02 FB | 	rdlong	muldivb_, fp
18d1c     08 4E 85 F1 | 	sub	fp, #8
18d20     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
18d24     14 4E 05 A1 |  if_e	add	fp, #20
18d28     A7 1E 02 AB |  if_e	rdlong	local01, fp
18d2c     14 4E 85 A1 |  if_e	sub	fp, #20
18d30     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18d34     20 00 90 5D |  if_ne	jmp	#LR__2072
18d38     0C 4E 05 F1 | 	add	fp, #12
18d3c     A7 1E 02 FB | 	rdlong	local01, fp
18d40     0C 4E 85 F1 | 	sub	fp, #12
18d44     A7 82 02 FB | 	rdlong	muldivb_, fp
18d48     0F 83 12 FD | 	qdiv	muldivb_, local01
18d4c     18 1E 62 FD | 	getqx	local01
18d50     A7 1E 62 FC | 	wrlong	local01, fp
18d54     E0 00 90 FD | 	jmp	#LR__2076
18d58                 | LR__2072
18d58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
18d58     08 4E 05 F1 | 	add	fp, #8
18d5c     A7 82 02 FB | 	rdlong	muldivb_, fp
18d60     08 4E 85 F1 | 	sub	fp, #8
18d64     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
18d68     14 4E 05 A1 |  if_e	add	fp, #20
18d6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18d70     14 4E 85 A1 |  if_e	sub	fp, #20
18d74     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18d78     2C 00 90 5D |  if_ne	jmp	#LR__2073
18d7c     0C 4E 05 F1 | 	add	fp, #12
18d80     A7 1E 02 FB | 	rdlong	local01, fp
18d84     0C 4E 85 F1 | 	sub	fp, #12
18d88     A7 82 02 FB | 	rdlong	muldivb_, fp
18d8c     0F 83 12 FD | 	qdiv	muldivb_, local01
18d90     18 1E 62 FD | 	getqx	local01
18d94     A7 1E 62 FC | 	wrlong	local01, fp
18d98     08 4E 05 F1 | 	add	fp, #8
18d9c     A7 38 68 FC | 	wrlong	#28, fp
18da0     08 4E 85 F1 | 	sub	fp, #8
18da4     90 00 90 FD | 	jmp	#LR__2076
18da8                 | LR__2073
18da8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
18da8     08 4E 05 F1 | 	add	fp, #8
18dac     A7 82 02 FB | 	rdlong	muldivb_, fp
18db0     08 4E 85 F1 | 	sub	fp, #8
18db4     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
18db8     14 4E 05 A1 |  if_e	add	fp, #20
18dbc     A7 1E 02 AB |  if_e	rdlong	local01, fp
18dc0     14 4E 85 A1 |  if_e	sub	fp, #20
18dc4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18dc8     1C 00 90 5D |  if_ne	jmp	#LR__2074
18dcc     A7 80 02 FB | 	rdlong	muldiva_, fp
18dd0     0C 4E 05 F1 | 	add	fp, #12
18dd4     A7 82 02 FB | 	rdlong	muldivb_, fp
18dd8     0C 4E 85 F1 | 	sub	fp, #12
18ddc     BA 00 A0 FD | 	call	#divide_
18de0     A7 82 62 FC | 	wrlong	muldivb_, fp
18de4     50 00 90 FD | 	jmp	#LR__2076
18de8                 | LR__2074
18de8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
18de8     08 4E 05 F1 | 	add	fp, #8
18dec     A7 82 02 FB | 	rdlong	muldivb_, fp
18df0     08 4E 85 F1 | 	sub	fp, #8
18df4     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
18df8     14 4E 05 A1 |  if_e	add	fp, #20
18dfc     A7 1E 02 AB |  if_e	rdlong	local01, fp
18e00     14 4E 85 A1 |  if_e	sub	fp, #20
18e04     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18e08     1C 00 90 5D |  if_ne	jmp	#LR__2075
18e0c     A7 80 02 FB | 	rdlong	muldiva_, fp
18e10     0C 4E 05 F1 | 	add	fp, #12
18e14     A7 82 02 FB | 	rdlong	muldivb_, fp
18e18     0C 4E 85 F1 | 	sub	fp, #12
18e1c     BA 00 A0 FD | 	call	#divide_
18e20     A7 82 62 FC | 	wrlong	muldivb_, fp
18e24     10 00 90 FD | 	jmp	#LR__2076
18e28                 | LR__2075
18e28     A7 16 68 FC | 	wrlong	#11, fp
18e2c     08 4E 05 F1 | 	add	fp, #8
18e30     A7 FE 69 FC | 	wrlong	#255, fp
18e34     08 4E 85 F1 | 	sub	fp, #8
18e38                 | LR__2076
18e38     A7 12 02 F6 | 	mov	arg01, fp
18e3c     70 2A BF FD | 	call	#_push
18e40     A7 F0 03 F6 | 	mov	ptra, fp
18e44     B2 00 A0 FD | 	call	#popregs_
18e48                 | _do_div_ret
18e48     2D 00 64 FD | 	ret
18e4c                 | 
18e4c                 | ' 
18e4c                 | ' '--------------------------------- equal (=)
18e4c                 | ' 
18e4c                 | ' sub do_eq
18e4c                 | _do_eq
18e4c     05 4A 05 F6 | 	mov	COUNT_, #5
18e50     A8 00 A0 FD | 	call	#pushregs_
18e54     18 F0 07 F1 | 	add	ptra, #24
18e58     BC 29 BF FD | 	call	#_pop
18e5c     FD 1E 02 F6 | 	mov	local01, result1
18e60     FE 20 02 F6 | 	mov	local02, result2
18e64     FF 22 02 F6 | 	mov	local03, result3
18e68     0C 4E 05 F1 | 	add	fp, #12
18e6c     A7 1E 62 FC | 	wrlong	local01, fp
18e70     04 4E 05 F1 | 	add	fp, #4
18e74     A7 20 62 FC | 	wrlong	local02, fp
18e78     04 4E 05 F1 | 	add	fp, #4
18e7c     A7 22 62 FC | 	wrlong	local03, fp
18e80     14 4E 85 F1 | 	sub	fp, #20
18e84     90 29 BF FD | 	call	#_pop
18e88     FF 22 02 F6 | 	mov	local03, result3
18e8c     A7 FA 61 FC | 	wrlong	result1, fp
18e90     04 4E 05 F1 | 	add	fp, #4
18e94     A7 FC 61 FC | 	wrlong	result2, fp
18e98     04 4E 05 F1 | 	add	fp, #4
18e9c     A7 22 62 FC | 	wrlong	local03, fp
18ea0                 | ' 
18ea0                 | ' t2=pop()
18ea0                 | ' t1=pop()
18ea0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
18ea0     08 4E 85 F1 | 	sub	fp, #8
18ea4     1F 22 0E F2 | 	cmp	local03, #31 wz
18ea8     14 4E 05 A1 |  if_e	add	fp, #20
18eac     A7 24 02 AB |  if_e	rdlong	local04, fp
18eb0     14 4E 85 A1 |  if_e	sub	fp, #20
18eb4     12 23 02 A6 |  if_e	mov	local03, local04
18eb8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18ebc     28 00 90 5D |  if_ne	jmp	#LR__2080
18ec0     00 1E 06 F6 | 	mov	local01, #0
18ec4     A7 12 02 FB | 	rdlong	arg01, fp
18ec8     0C 4E 05 F1 | 	add	fp, #12
18ecc     A7 14 02 FB | 	rdlong	arg02, fp
18ed0     0C 4E 85 F1 | 	sub	fp, #12
18ed4     14 87 B0 FD | 	call	#__system___string_cmp
18ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
18edc     00 1E 26 A6 |  if_e	not	local01, #0
18ee0     A7 1E 62 FC | 	wrlong	local01, fp
18ee4     1C 04 90 FD | 	jmp	#LR__2093
18ee8                 | LR__2080
18ee8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
18ee8     08 4E 05 F1 | 	add	fp, #8
18eec     A7 1E 02 FB | 	rdlong	local01, fp
18ef0     08 4E 85 F1 | 	sub	fp, #8
18ef4     1E 1E 0E F2 | 	cmp	local01, #30 wz
18ef8     14 4E 05 A1 |  if_e	add	fp, #20
18efc     A7 24 02 AB |  if_e	rdlong	local04, fp
18f00     14 4E 85 A1 |  if_e	sub	fp, #20
18f04     12 23 02 A6 |  if_e	mov	local03, local04
18f08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18f0c     2C 00 90 5D |  if_ne	jmp	#LR__2081
18f10     00 1E 06 F6 | 	mov	local01, #0
18f14     A7 12 02 FB | 	rdlong	arg01, fp
18f18     0C 4E 05 F1 | 	add	fp, #12
18f1c     A7 14 02 FB | 	rdlong	arg02, fp
18f20     0C 4E 85 F1 | 	sub	fp, #12
18f24     01 16 06 F6 | 	mov	arg03, #1
18f28     88 B8 B0 FD | 	call	#__system___float_cmp
18f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
18f30     00 1E 26 A6 |  if_e	not	local01, #0
18f34     A7 1E 62 FC | 	wrlong	local01, fp
18f38     C8 03 90 FD | 	jmp	#LR__2093
18f3c                 | LR__2081
18f3c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
18f3c     08 4E 05 F1 | 	add	fp, #8
18f40     A7 1E 02 FB | 	rdlong	local01, fp
18f44     08 4E 85 F1 | 	sub	fp, #8
18f48     1E 1E 0E F2 | 	cmp	local01, #30 wz
18f4c     14 4E 05 A1 |  if_e	add	fp, #20
18f50     A7 24 02 AB |  if_e	rdlong	local04, fp
18f54     14 4E 85 A1 |  if_e	sub	fp, #20
18f58     12 23 02 A6 |  if_e	mov	local03, local04
18f5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18f60     48 00 90 5D |  if_ne	jmp	#LR__2082
18f64     00 1E 06 F6 | 	mov	local01, #0
18f68     A7 20 02 FB | 	rdlong	local02, fp
18f6c     0C 4E 05 F1 | 	add	fp, #12
18f70     A7 12 02 FB | 	rdlong	arg01, fp
18f74     0C 4E 85 F1 | 	sub	fp, #12
18f78     09 13 52 F6 | 	abs	arg01, arg01 wc
18f7c     1F 26 C6 C9 |  if_b	decod	local05, #31
18f80     00 26 06 36 |  if_ae	mov	local05, #0
18f84     F4 AF B0 FD | 	call	#__system___float_fromuns
18f88     13 FB 61 F5 | 	xor	result1, local05
18f8c     FD 14 02 F6 | 	mov	arg02, result1
18f90     10 13 02 F6 | 	mov	arg01, local02
18f94     01 16 06 F6 | 	mov	arg03, #1
18f98     18 B8 B0 FD | 	call	#__system___float_cmp
18f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
18fa0     00 1E 26 A6 |  if_e	not	local01, #0
18fa4     A7 1E 62 FC | 	wrlong	local01, fp
18fa8     58 03 90 FD | 	jmp	#LR__2093
18fac                 | LR__2082
18fac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
18fac     08 4E 05 F1 | 	add	fp, #8
18fb0     A7 1E 02 FB | 	rdlong	local01, fp
18fb4     08 4E 85 F1 | 	sub	fp, #8
18fb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
18fbc     14 4E 05 A1 |  if_e	add	fp, #20
18fc0     A7 24 02 AB |  if_e	rdlong	local04, fp
18fc4     14 4E 85 A1 |  if_e	sub	fp, #20
18fc8     12 23 02 A6 |  if_e	mov	local03, local04
18fcc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18fd0     38 00 90 5D |  if_ne	jmp	#LR__2083
18fd4     00 1E 06 F6 | 	mov	local01, #0
18fd8     A7 20 02 FB | 	rdlong	local02, fp
18fdc     0C 4E 05 F1 | 	add	fp, #12
18fe0     A7 12 02 FB | 	rdlong	arg01, fp
18fe4     0C 4E 85 F1 | 	sub	fp, #12
18fe8     90 AF B0 FD | 	call	#__system___float_fromuns
18fec     FD 14 02 F6 | 	mov	arg02, result1
18ff0     10 13 02 F6 | 	mov	arg01, local02
18ff4     01 16 06 F6 | 	mov	arg03, #1
18ff8     B8 B7 B0 FD | 	call	#__system___float_cmp
18ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
19000     00 1E 26 A6 |  if_e	not	local01, #0
19004     A7 1E 62 FC | 	wrlong	local01, fp
19008     F8 02 90 FD | 	jmp	#LR__2093
1900c                 | LR__2083
1900c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1900c     08 4E 05 F1 | 	add	fp, #8
19010     A7 1E 02 FB | 	rdlong	local01, fp
19014     08 4E 85 F1 | 	sub	fp, #8
19018     1C 1E 0E F2 | 	cmp	local01, #28 wz
1901c     14 4E 05 A1 |  if_e	add	fp, #20
19020     A7 24 02 AB |  if_e	rdlong	local04, fp
19024     14 4E 85 A1 |  if_e	sub	fp, #20
19028     12 23 02 A6 |  if_e	mov	local03, local04
1902c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19030     44 00 90 5D |  if_ne	jmp	#LR__2084
19034     00 1E 06 F6 | 	mov	local01, #0
19038     A7 12 02 FB | 	rdlong	arg01, fp
1903c     09 13 52 F6 | 	abs	arg01, arg01 wc
19040     1F 26 C6 C9 |  if_b	decod	local05, #31
19044     00 26 06 36 |  if_ae	mov	local05, #0
19048     30 AF B0 FD | 	call	#__system___float_fromuns
1904c     13 FB 61 F5 | 	xor	result1, local05
19050     FD 12 02 F6 | 	mov	arg01, result1
19054     0C 4E 05 F1 | 	add	fp, #12
19058     A7 14 02 FB | 	rdlong	arg02, fp
1905c     0C 4E 85 F1 | 	sub	fp, #12
19060     01 16 06 F6 | 	mov	arg03, #1
19064     4C B7 B0 FD | 	call	#__system___float_cmp
19068     00 FA 0D F2 | 	cmp	result1, #0 wz
1906c     00 1E 26 A6 |  if_e	not	local01, #0
19070     A7 1E 62 FC | 	wrlong	local01, fp
19074     8C 02 90 FD | 	jmp	#LR__2093
19078                 | LR__2084
19078                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
19078     08 4E 05 F1 | 	add	fp, #8
1907c     A7 1E 02 FB | 	rdlong	local01, fp
19080     08 4E 85 F1 | 	sub	fp, #8
19084     1C 1E 0E F2 | 	cmp	local01, #28 wz
19088     14 4E 05 A1 |  if_e	add	fp, #20
1908c     A7 24 02 AB |  if_e	rdlong	local04, fp
19090     14 4E 85 A1 |  if_e	sub	fp, #20
19094     12 23 02 A6 |  if_e	mov	local03, local04
19098     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1909c     24 00 90 5D |  if_ne	jmp	#LR__2085
190a0     00 1E 06 F6 | 	mov	local01, #0
190a4     A7 20 02 FB | 	rdlong	local02, fp
190a8     0C 4E 05 F1 | 	add	fp, #12
190ac     A7 22 02 FB | 	rdlong	local03, fp
190b0     0C 4E 85 F1 | 	sub	fp, #12
190b4     11 21 0A F2 | 	cmp	local02, local03 wz
190b8     01 1E 66 A6 |  if_e	neg	local01, #1
190bc     A7 1E 62 FC | 	wrlong	local01, fp
190c0     40 02 90 FD | 	jmp	#LR__2093
190c4                 | LR__2085
190c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
190c4     08 4E 05 F1 | 	add	fp, #8
190c8     A7 1E 02 FB | 	rdlong	local01, fp
190cc     08 4E 85 F1 | 	sub	fp, #8
190d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
190d4     14 4E 05 A1 |  if_e	add	fp, #20
190d8     A7 24 02 AB |  if_e	rdlong	local04, fp
190dc     14 4E 85 A1 |  if_e	sub	fp, #20
190e0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
190e4     24 00 90 5D |  if_ne	jmp	#LR__2086
190e8     00 1E 06 F6 | 	mov	local01, #0
190ec     A7 20 02 FB | 	rdlong	local02, fp
190f0     0C 4E 05 F1 | 	add	fp, #12
190f4     A7 22 02 FB | 	rdlong	local03, fp
190f8     0C 4E 85 F1 | 	sub	fp, #12
190fc     11 21 0A F2 | 	cmp	local02, local03 wz
19100     01 1E 66 A6 |  if_e	neg	local01, #1
19104     A7 1E 62 FC | 	wrlong	local01, fp
19108     F8 01 90 FD | 	jmp	#LR__2093
1910c                 | LR__2086
1910c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1910c     08 4E 05 F1 | 	add	fp, #8
19110     A7 1E 02 FB | 	rdlong	local01, fp
19114     08 4E 85 F1 | 	sub	fp, #8
19118     1D 1E 0E F2 | 	cmp	local01, #29 wz
1911c     14 4E 05 A1 |  if_e	add	fp, #20
19120     A7 22 02 AB |  if_e	rdlong	local03, fp
19124     14 4E 85 A1 |  if_e	sub	fp, #20
19128     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1912c     34 00 90 5D |  if_ne	jmp	#LR__2087
19130     00 1E 06 F6 | 	mov	local01, #0
19134     A7 12 02 FB | 	rdlong	arg01, fp
19138     40 AE B0 FD | 	call	#__system___float_fromuns
1913c     FD 12 02 F6 | 	mov	arg01, result1
19140     0C 4E 05 F1 | 	add	fp, #12
19144     A7 14 02 FB | 	rdlong	arg02, fp
19148     0C 4E 85 F1 | 	sub	fp, #12
1914c     01 16 06 F6 | 	mov	arg03, #1
19150     60 B6 B0 FD | 	call	#__system___float_cmp
19154     00 FA 0D F2 | 	cmp	result1, #0 wz
19158     00 1E 26 A6 |  if_e	not	local01, #0
1915c     A7 1E 62 FC | 	wrlong	local01, fp
19160     A0 01 90 FD | 	jmp	#LR__2093
19164                 | LR__2087
19164                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
19164     08 4E 05 F1 | 	add	fp, #8
19168     A7 1E 02 FB | 	rdlong	local01, fp
1916c     08 4E 85 F1 | 	sub	fp, #8
19170     1D 1E 0E F2 | 	cmp	local01, #29 wz
19174     14 4E 05 A1 |  if_e	add	fp, #20
19178     A7 22 02 AB |  if_e	rdlong	local03, fp
1917c     14 4E 85 A1 |  if_e	sub	fp, #20
19180     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19184     24 00 90 5D |  if_ne	jmp	#LR__2088
19188     00 1E 06 F6 | 	mov	local01, #0
1918c     A7 20 02 FB | 	rdlong	local02, fp
19190     0C 4E 05 F1 | 	add	fp, #12
19194     A7 22 02 FB | 	rdlong	local03, fp
19198     0C 4E 85 F1 | 	sub	fp, #12
1919c     11 21 0A F2 | 	cmp	local02, local03 wz
191a0     01 1E 66 A6 |  if_e	neg	local01, #1
191a4     A7 1E 62 FC | 	wrlong	local01, fp
191a8     58 01 90 FD | 	jmp	#LR__2093
191ac                 | LR__2088
191ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
191ac     08 4E 05 F1 | 	add	fp, #8
191b0     A7 1E 02 FB | 	rdlong	local01, fp
191b4     08 4E 85 F1 | 	sub	fp, #8
191b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
191bc     14 4E 05 A1 |  if_e	add	fp, #20
191c0     A7 22 02 AB |  if_e	rdlong	local03, fp
191c4     14 4E 85 A1 |  if_e	sub	fp, #20
191c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
191cc     24 00 90 5D |  if_ne	jmp	#LR__2089
191d0     00 1E 06 F6 | 	mov	local01, #0
191d4     A7 20 02 FB | 	rdlong	local02, fp
191d8     0C 4E 05 F1 | 	add	fp, #12
191dc     A7 22 02 FB | 	rdlong	local03, fp
191e0     0C 4E 85 F1 | 	sub	fp, #12
191e4     11 21 0A F2 | 	cmp	local02, local03 wz
191e8     01 1E 66 A6 |  if_e	neg	local01, #1
191ec     A7 1E 62 FC | 	wrlong	local01, fp
191f0     10 01 90 FD | 	jmp	#LR__2093
191f4                 | LR__2089
191f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
191f4     08 4E 05 F1 | 	add	fp, #8
191f8     A7 1E 02 FB | 	rdlong	local01, fp
191fc     08 4E 85 F1 | 	sub	fp, #8
19200     2B 1E 0E F2 | 	cmp	local01, #43 wz
19204     14 4E 05 A1 |  if_e	add	fp, #20
19208     A7 22 02 AB |  if_e	rdlong	local03, fp
1920c     14 4E 85 A1 |  if_e	sub	fp, #20
19210     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19214     30 00 90 5D |  if_ne	jmp	#LR__2090
19218     00 1E 06 F6 | 	mov	local01, #0
1921c     A7 12 02 FB | 	rdlong	arg01, fp
19220     6C 27 BF FD | 	call	#_convertstring
19224     FD 12 02 F6 | 	mov	arg01, result1
19228     0C 4E 05 F1 | 	add	fp, #12
1922c     A7 14 02 FB | 	rdlong	arg02, fp
19230     0C 4E 85 F1 | 	sub	fp, #12
19234     B4 83 B0 FD | 	call	#__system___string_cmp
19238     00 FA 0D F2 | 	cmp	result1, #0 wz
1923c     00 1E 26 A6 |  if_e	not	local01, #0
19240     A7 1E 62 FC | 	wrlong	local01, fp
19244     BC 00 90 FD | 	jmp	#LR__2093
19248                 | LR__2090
19248                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
19248     08 4E 05 F1 | 	add	fp, #8
1924c     A7 1E 02 FB | 	rdlong	local01, fp
19250     08 4E 85 F1 | 	sub	fp, #8
19254     1F 1E 0E F2 | 	cmp	local01, #31 wz
19258     14 4E 05 A1 |  if_e	add	fp, #20
1925c     A7 22 02 AB |  if_e	rdlong	local03, fp
19260     14 4E 85 A1 |  if_e	sub	fp, #20
19264     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19268     34 00 90 5D |  if_ne	jmp	#LR__2091
1926c     00 1E 06 F6 | 	mov	local01, #0
19270     A7 20 02 FB | 	rdlong	local02, fp
19274     0C 4E 05 F1 | 	add	fp, #12
19278     A7 12 02 FB | 	rdlong	arg01, fp
1927c     0C 4E 85 F1 | 	sub	fp, #12
19280     0C 27 BF FD | 	call	#_convertstring
19284     FD 14 02 F6 | 	mov	arg02, result1
19288     10 13 02 F6 | 	mov	arg01, local02
1928c     5C 83 B0 FD | 	call	#__system___string_cmp
19290     00 FA 0D F2 | 	cmp	result1, #0 wz
19294     00 1E 26 A6 |  if_e	not	local01, #0
19298     A7 1E 62 FC | 	wrlong	local01, fp
1929c     64 00 90 FD | 	jmp	#LR__2093
192a0                 | LR__2091
192a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
192a0     08 4E 05 F1 | 	add	fp, #8
192a4     A7 1E 02 FB | 	rdlong	local01, fp
192a8     08 4E 85 F1 | 	sub	fp, #8
192ac     2B 1E 0E F2 | 	cmp	local01, #43 wz
192b0     14 4E 05 A1 |  if_e	add	fp, #20
192b4     A7 22 02 AB |  if_e	rdlong	local03, fp
192b8     14 4E 85 A1 |  if_e	sub	fp, #20
192bc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
192c0     3C 00 90 5D |  if_ne	jmp	#LR__2092
192c4     00 1E 06 F6 | 	mov	local01, #0
192c8     A7 12 02 FB | 	rdlong	arg01, fp
192cc     C0 26 BF FD | 	call	#_convertstring
192d0     FD 20 02 F6 | 	mov	local02, result1
192d4     0C 4E 05 F1 | 	add	fp, #12
192d8     A7 12 02 FB | 	rdlong	arg01, fp
192dc     0C 4E 85 F1 | 	sub	fp, #12
192e0     AC 26 BF FD | 	call	#_convertstring
192e4     FD 14 02 F6 | 	mov	arg02, result1
192e8     10 13 02 F6 | 	mov	arg01, local02
192ec     FC 82 B0 FD | 	call	#__system___string_cmp
192f0     00 FA 0D F2 | 	cmp	result1, #0 wz
192f4     00 1E 26 A6 |  if_e	not	local01, #0
192f8     A7 1E 62 FC | 	wrlong	local01, fp
192fc     04 00 90 FD | 	jmp	#LR__2093
19300                 | LR__2092
19300     A7 00 68 FC | 	wrlong	#0, fp
19304                 | LR__2093
19304     08 4E 05 F1 | 	add	fp, #8
19308     A7 38 68 FC | 	wrlong	#28, fp
1930c     08 4E 85 F1 | 	sub	fp, #8
19310     A7 12 02 F6 | 	mov	arg01, fp
19314     98 25 BF FD | 	call	#_push
19318     A7 F0 03 F6 | 	mov	ptra, fp
1931c     B2 00 A0 FD | 	call	#popregs_
19320                 | _do_eq_ret
19320     2D 00 64 FD | 	ret
19324                 | 
19324                 | ' 
19324                 | ' '--------------------------------- fdiv (/) - float divide
19324                 | ' 
19324                 | ' sub do_fdiv 
19324                 | _do_fdiv
19324     02 4A 05 F6 | 	mov	COUNT_, #2
19328     A8 00 A0 FD | 	call	#pushregs_
1932c     18 F0 07 F1 | 	add	ptra, #24
19330     E4 24 BF FD | 	call	#_pop
19334     FD 14 02 F6 | 	mov	arg02, result1
19338     FE 12 02 F6 | 	mov	arg01, result2
1933c     FF 1E 02 F6 | 	mov	local01, result3
19340     0C 4E 05 F1 | 	add	fp, #12
19344     A7 14 62 FC | 	wrlong	arg02, fp
19348     04 4E 05 F1 | 	add	fp, #4
1934c     A7 12 62 FC | 	wrlong	arg01, fp
19350     04 4E 05 F1 | 	add	fp, #4
19354     A7 1E 62 FC | 	wrlong	local01, fp
19358     14 4E 85 F1 | 	sub	fp, #20
1935c     B8 24 BF FD | 	call	#_pop
19360     A7 FA 61 FC | 	wrlong	result1, fp
19364     04 4E 05 F1 | 	add	fp, #4
19368     A7 FC 61 FC | 	wrlong	result2, fp
1936c     04 4E 05 F1 | 	add	fp, #4
19370     A7 FE 61 FC | 	wrlong	result3, fp
19374                 | ' 
19374                 | ' t2=pop()
19374                 | ' t1=pop()
19374                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
19374     08 4E 85 F1 | 	sub	fp, #8
19378     1F FE 0D F2 | 	cmp	result3, #31 wz
1937c     14 4E 05 51 |  if_ne	add	fp, #20
19380     A7 1E 02 5B |  if_ne	rdlong	local01, fp
19384     14 4E 85 51 |  if_ne	sub	fp, #20
19388     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1938c     A7 14 68 AC |  if_e	wrlong	#10, fp
19390     08 4E 05 A1 |  if_e	add	fp, #8
19394     A7 FE 69 AC |  if_e	wrlong	#255, fp
19398     08 4E 85 A1 |  if_e	sub	fp, #8
1939c     38 01 90 AD |  if_e	jmp	#LR__2105
193a0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
193a0     08 4E 05 F1 | 	add	fp, #8
193a4     A7 14 02 FB | 	rdlong	arg02, fp
193a8     08 4E 85 F1 | 	sub	fp, #8
193ac     1C 14 0E F2 | 	cmp	arg02, #28 wz
193b0     28 00 90 5D |  if_ne	jmp	#LR__2100
193b4     08 4E 05 F1 | 	add	fp, #8
193b8     A7 3C 68 FC | 	wrlong	#30, fp
193bc     08 4E 85 F1 | 	sub	fp, #8
193c0     A7 12 02 FB | 	rdlong	arg01, fp
193c4     09 13 52 F6 | 	abs	arg01, arg01 wc
193c8     1F 20 C6 C9 |  if_b	decod	local02, #31
193cc     00 20 06 36 |  if_ae	mov	local02, #0
193d0     A8 AB B0 FD | 	call	#__system___float_fromuns
193d4     10 FB 61 F5 | 	xor	result1, local02
193d8     A7 FA 61 FC | 	wrlong	result1, fp
193dc                 | LR__2100
193dc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
193dc     08 4E 05 F1 | 	add	fp, #8
193e0     A7 14 02 FB | 	rdlong	arg02, fp
193e4     08 4E 85 F1 | 	sub	fp, #8
193e8     1D 14 0E F2 | 	cmp	arg02, #29 wz
193ec     18 00 90 5D |  if_ne	jmp	#LR__2101
193f0     08 4E 05 F1 | 	add	fp, #8
193f4     A7 3C 68 FC | 	wrlong	#30, fp
193f8     08 4E 85 F1 | 	sub	fp, #8
193fc     A7 12 02 FB | 	rdlong	arg01, fp
19400     78 AB B0 FD | 	call	#__system___float_fromuns
19404     A7 FA 61 FC | 	wrlong	result1, fp
19408                 | LR__2101
19408                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
19408     14 4E 05 F1 | 	add	fp, #20
1940c     A7 14 02 FB | 	rdlong	arg02, fp
19410     14 4E 85 F1 | 	sub	fp, #20
19414     1C 14 0E F2 | 	cmp	arg02, #28 wz
19418     34 00 90 5D |  if_ne	jmp	#LR__2102
1941c     14 4E 05 F1 | 	add	fp, #20
19420     A7 3C 68 FC | 	wrlong	#30, fp
19424     08 4E 85 F1 | 	sub	fp, #8
19428     A7 12 02 FB | 	rdlong	arg01, fp
1942c     0C 4E 85 F1 | 	sub	fp, #12
19430     09 13 52 F6 | 	abs	arg01, arg01 wc
19434     1F 20 C6 C9 |  if_b	decod	local02, #31
19438     00 20 06 36 |  if_ae	mov	local02, #0
1943c     3C AB B0 FD | 	call	#__system___float_fromuns
19440     10 FB 61 F5 | 	xor	result1, local02
19444     0C 4E 05 F1 | 	add	fp, #12
19448     A7 FA 61 FC | 	wrlong	result1, fp
1944c     0C 4E 85 F1 | 	sub	fp, #12
19450                 | LR__2102
19450                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
19450     14 4E 05 F1 | 	add	fp, #20
19454     A7 14 02 FB | 	rdlong	arg02, fp
19458     14 4E 85 F1 | 	sub	fp, #20
1945c     1D 14 0E F2 | 	cmp	arg02, #29 wz
19460     24 00 90 5D |  if_ne	jmp	#LR__2103
19464     14 4E 05 F1 | 	add	fp, #20
19468     A7 3C 68 FC | 	wrlong	#30, fp
1946c     08 4E 85 F1 | 	sub	fp, #8
19470     A7 12 02 FB | 	rdlong	arg01, fp
19474     0C 4E 85 F1 | 	sub	fp, #12
19478     00 AB B0 FD | 	call	#__system___float_fromuns
1947c     0C 4E 05 F1 | 	add	fp, #12
19480     A7 FA 61 FC | 	wrlong	result1, fp
19484     0C 4E 85 F1 | 	sub	fp, #12
19488                 | LR__2103
19488                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
19488     08 4E 05 F1 | 	add	fp, #8
1948c     A7 14 02 FB | 	rdlong	arg02, fp
19490     08 4E 85 F1 | 	sub	fp, #8
19494     1E 14 0E F2 | 	cmp	arg02, #30 wz
19498     14 4E 05 A1 |  if_e	add	fp, #20
1949c     A7 1E 02 AB |  if_e	rdlong	local01, fp
194a0     14 4E 85 A1 |  if_e	sub	fp, #20
194a4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
194a8     1C 00 90 5D |  if_ne	jmp	#LR__2104
194ac     A7 12 02 FB | 	rdlong	arg01, fp
194b0     0C 4E 05 F1 | 	add	fp, #12
194b4     A7 14 02 FB | 	rdlong	arg02, fp
194b8     0C 4E 85 F1 | 	sub	fp, #12
194bc     C4 B0 B0 FD | 	call	#__system___float_div
194c0     A7 FA 61 FC | 	wrlong	result1, fp
194c4     10 00 90 FD | 	jmp	#LR__2105
194c8                 | LR__2104
194c8     A7 16 68 FC | 	wrlong	#11, fp
194cc     08 4E 05 F1 | 	add	fp, #8
194d0     A7 FE 69 FC | 	wrlong	#255, fp
194d4     08 4E 85 F1 | 	sub	fp, #8
194d8                 | LR__2105
194d8     A7 12 02 F6 | 	mov	arg01, fp
194dc     D0 23 BF FD | 	call	#_push
194e0     A7 F0 03 F6 | 	mov	ptra, fp
194e4     B2 00 A0 FD | 	call	#popregs_
194e8                 | _do_fdiv_ret
194e8     2D 00 64 FD | 	ret
194ec                 | 
194ec                 | ' 
194ec                 | ' '--------------------------------- greater or equal (>=)
194ec                 | ' 
194ec                 | ' sub do_ge
194ec                 | _do_ge
194ec     05 4A 05 F6 | 	mov	COUNT_, #5
194f0     A8 00 A0 FD | 	call	#pushregs_
194f4     18 F0 07 F1 | 	add	ptra, #24
194f8     1C 23 BF FD | 	call	#_pop
194fc     FD 1E 02 F6 | 	mov	local01, result1
19500     FE 20 02 F6 | 	mov	local02, result2
19504     FF 22 02 F6 | 	mov	local03, result3
19508     0C 4E 05 F1 | 	add	fp, #12
1950c     A7 1E 62 FC | 	wrlong	local01, fp
19510     04 4E 05 F1 | 	add	fp, #4
19514     A7 20 62 FC | 	wrlong	local02, fp
19518     04 4E 05 F1 | 	add	fp, #4
1951c     A7 22 62 FC | 	wrlong	local03, fp
19520     14 4E 85 F1 | 	sub	fp, #20
19524     F0 22 BF FD | 	call	#_pop
19528     FF 22 02 F6 | 	mov	local03, result3
1952c     A7 FA 61 FC | 	wrlong	result1, fp
19530     04 4E 05 F1 | 	add	fp, #4
19534     A7 FC 61 FC | 	wrlong	result2, fp
19538     04 4E 05 F1 | 	add	fp, #4
1953c     A7 22 62 FC | 	wrlong	local03, fp
19540                 | ' 
19540                 | ' t2=pop()
19540                 | ' t1=pop()
19540                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
19540     08 4E 85 F1 | 	sub	fp, #8
19544     1F 22 0E F2 | 	cmp	local03, #31 wz
19548     14 4E 05 A1 |  if_e	add	fp, #20
1954c     A7 24 02 AB |  if_e	rdlong	local04, fp
19550     14 4E 85 A1 |  if_e	sub	fp, #20
19554     12 23 02 A6 |  if_e	mov	local03, local04
19558     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1955c     28 00 90 5D |  if_ne	jmp	#LR__2110
19560     00 1E 06 F6 | 	mov	local01, #0
19564     A7 12 02 FB | 	rdlong	arg01, fp
19568     0C 4E 05 F1 | 	add	fp, #12
1956c     A7 14 02 FB | 	rdlong	arg02, fp
19570     0C 4E 85 F1 | 	sub	fp, #12
19574     74 80 B0 FD | 	call	#__system___string_cmp
19578     00 FA 55 F2 | 	cmps	result1, #0 wc
1957c     00 1E 26 36 |  if_ae	not	local01, #0
19580     A7 1E 62 FC | 	wrlong	local01, fp
19584     1C 04 90 FD | 	jmp	#LR__2123
19588                 | LR__2110
19588                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
19588     08 4E 05 F1 | 	add	fp, #8
1958c     A7 1E 02 FB | 	rdlong	local01, fp
19590     08 4E 85 F1 | 	sub	fp, #8
19594     1E 1E 0E F2 | 	cmp	local01, #30 wz
19598     14 4E 05 A1 |  if_e	add	fp, #20
1959c     A7 24 02 AB |  if_e	rdlong	local04, fp
195a0     14 4E 85 A1 |  if_e	sub	fp, #20
195a4     12 23 02 A6 |  if_e	mov	local03, local04
195a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
195ac     2C 00 90 5D |  if_ne	jmp	#LR__2111
195b0     00 1E 06 F6 | 	mov	local01, #0
195b4     A7 12 02 FB | 	rdlong	arg01, fp
195b8     0C 4E 05 F1 | 	add	fp, #12
195bc     A7 14 02 FB | 	rdlong	arg02, fp
195c0     0C 4E 85 F1 | 	sub	fp, #12
195c4     01 16 66 F6 | 	neg	arg03, #1
195c8     E8 B1 B0 FD | 	call	#__system___float_cmp
195cc     00 FA 55 F2 | 	cmps	result1, #0 wc
195d0     00 1E 26 36 |  if_ae	not	local01, #0
195d4     A7 1E 62 FC | 	wrlong	local01, fp
195d8     C8 03 90 FD | 	jmp	#LR__2123
195dc                 | LR__2111
195dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
195dc     08 4E 05 F1 | 	add	fp, #8
195e0     A7 1E 02 FB | 	rdlong	local01, fp
195e4     08 4E 85 F1 | 	sub	fp, #8
195e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
195ec     14 4E 05 A1 |  if_e	add	fp, #20
195f0     A7 24 02 AB |  if_e	rdlong	local04, fp
195f4     14 4E 85 A1 |  if_e	sub	fp, #20
195f8     12 23 02 A6 |  if_e	mov	local03, local04
195fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19600     48 00 90 5D |  if_ne	jmp	#LR__2112
19604     00 1E 06 F6 | 	mov	local01, #0
19608     A7 20 02 FB | 	rdlong	local02, fp
1960c     0C 4E 05 F1 | 	add	fp, #12
19610     A7 12 02 FB | 	rdlong	arg01, fp
19614     0C 4E 85 F1 | 	sub	fp, #12
19618     09 13 52 F6 | 	abs	arg01, arg01 wc
1961c     1F 26 C6 C9 |  if_b	decod	local05, #31
19620     00 26 06 36 |  if_ae	mov	local05, #0
19624     54 A9 B0 FD | 	call	#__system___float_fromuns
19628     13 FB 61 F5 | 	xor	result1, local05
1962c     FD 14 02 F6 | 	mov	arg02, result1
19630     10 13 02 F6 | 	mov	arg01, local02
19634     01 16 66 F6 | 	neg	arg03, #1
19638     78 B1 B0 FD | 	call	#__system___float_cmp
1963c     00 FA 55 F2 | 	cmps	result1, #0 wc
19640     00 1E 26 36 |  if_ae	not	local01, #0
19644     A7 1E 62 FC | 	wrlong	local01, fp
19648     58 03 90 FD | 	jmp	#LR__2123
1964c                 | LR__2112
1964c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1964c     08 4E 05 F1 | 	add	fp, #8
19650     A7 1E 02 FB | 	rdlong	local01, fp
19654     08 4E 85 F1 | 	sub	fp, #8
19658     1E 1E 0E F2 | 	cmp	local01, #30 wz
1965c     14 4E 05 A1 |  if_e	add	fp, #20
19660     A7 24 02 AB |  if_e	rdlong	local04, fp
19664     14 4E 85 A1 |  if_e	sub	fp, #20
19668     12 23 02 A6 |  if_e	mov	local03, local04
1966c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19670     38 00 90 5D |  if_ne	jmp	#LR__2113
19674     00 1E 06 F6 | 	mov	local01, #0
19678     A7 20 02 FB | 	rdlong	local02, fp
1967c     0C 4E 05 F1 | 	add	fp, #12
19680     A7 12 02 FB | 	rdlong	arg01, fp
19684     0C 4E 85 F1 | 	sub	fp, #12
19688     F0 A8 B0 FD | 	call	#__system___float_fromuns
1968c     FD 14 02 F6 | 	mov	arg02, result1
19690     10 13 02 F6 | 	mov	arg01, local02
19694     01 16 66 F6 | 	neg	arg03, #1
19698     18 B1 B0 FD | 	call	#__system___float_cmp
1969c     00 FA 55 F2 | 	cmps	result1, #0 wc
196a0     00 1E 26 36 |  if_ae	not	local01, #0
196a4     A7 1E 62 FC | 	wrlong	local01, fp
196a8     F8 02 90 FD | 	jmp	#LR__2123
196ac                 | LR__2113
196ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
196ac     08 4E 05 F1 | 	add	fp, #8
196b0     A7 1E 02 FB | 	rdlong	local01, fp
196b4     08 4E 85 F1 | 	sub	fp, #8
196b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
196bc     14 4E 05 A1 |  if_e	add	fp, #20
196c0     A7 24 02 AB |  if_e	rdlong	local04, fp
196c4     14 4E 85 A1 |  if_e	sub	fp, #20
196c8     12 23 02 A6 |  if_e	mov	local03, local04
196cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
196d0     44 00 90 5D |  if_ne	jmp	#LR__2114
196d4     00 1E 06 F6 | 	mov	local01, #0
196d8     A7 12 02 FB | 	rdlong	arg01, fp
196dc     09 13 52 F6 | 	abs	arg01, arg01 wc
196e0     1F 26 C6 C9 |  if_b	decod	local05, #31
196e4     00 26 06 36 |  if_ae	mov	local05, #0
196e8     90 A8 B0 FD | 	call	#__system___float_fromuns
196ec     13 FB 61 F5 | 	xor	result1, local05
196f0     FD 12 02 F6 | 	mov	arg01, result1
196f4     0C 4E 05 F1 | 	add	fp, #12
196f8     A7 14 02 FB | 	rdlong	arg02, fp
196fc     0C 4E 85 F1 | 	sub	fp, #12
19700     01 16 66 F6 | 	neg	arg03, #1
19704     AC B0 B0 FD | 	call	#__system___float_cmp
19708     00 FA 55 F2 | 	cmps	result1, #0 wc
1970c     00 1E 26 36 |  if_ae	not	local01, #0
19710     A7 1E 62 FC | 	wrlong	local01, fp
19714     8C 02 90 FD | 	jmp	#LR__2123
19718                 | LR__2114
19718                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
19718     08 4E 05 F1 | 	add	fp, #8
1971c     A7 1E 02 FB | 	rdlong	local01, fp
19720     08 4E 85 F1 | 	sub	fp, #8
19724     1C 1E 0E F2 | 	cmp	local01, #28 wz
19728     14 4E 05 A1 |  if_e	add	fp, #20
1972c     A7 24 02 AB |  if_e	rdlong	local04, fp
19730     14 4E 85 A1 |  if_e	sub	fp, #20
19734     12 23 02 A6 |  if_e	mov	local03, local04
19738     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1973c     24 00 90 5D |  if_ne	jmp	#LR__2115
19740     00 1E 06 F6 | 	mov	local01, #0
19744     A7 20 02 FB | 	rdlong	local02, fp
19748     0C 4E 05 F1 | 	add	fp, #12
1974c     A7 22 02 FB | 	rdlong	local03, fp
19750     0C 4E 85 F1 | 	sub	fp, #12
19754     11 21 52 F2 | 	cmps	local02, local03 wc
19758     01 1E 66 36 |  if_ae	neg	local01, #1
1975c     A7 1E 62 FC | 	wrlong	local01, fp
19760     40 02 90 FD | 	jmp	#LR__2123
19764                 | LR__2115
19764                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
19764     08 4E 05 F1 | 	add	fp, #8
19768     A7 1E 02 FB | 	rdlong	local01, fp
1976c     08 4E 85 F1 | 	sub	fp, #8
19770     1C 1E 0E F2 | 	cmp	local01, #28 wz
19774     14 4E 05 A1 |  if_e	add	fp, #20
19778     A7 24 02 AB |  if_e	rdlong	local04, fp
1977c     14 4E 85 A1 |  if_e	sub	fp, #20
19780     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19784     24 00 90 5D |  if_ne	jmp	#LR__2116
19788     00 1E 06 F6 | 	mov	local01, #0
1978c     A7 20 02 FB | 	rdlong	local02, fp
19790     0C 4E 05 F1 | 	add	fp, #12
19794     A7 22 02 FB | 	rdlong	local03, fp
19798     0C 4E 85 F1 | 	sub	fp, #12
1979c     11 21 52 F2 | 	cmps	local02, local03 wc
197a0     01 1E 66 36 |  if_ae	neg	local01, #1
197a4     A7 1E 62 FC | 	wrlong	local01, fp
197a8     F8 01 90 FD | 	jmp	#LR__2123
197ac                 | LR__2116
197ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
197ac     08 4E 05 F1 | 	add	fp, #8
197b0     A7 1E 02 FB | 	rdlong	local01, fp
197b4     08 4E 85 F1 | 	sub	fp, #8
197b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
197bc     14 4E 05 A1 |  if_e	add	fp, #20
197c0     A7 22 02 AB |  if_e	rdlong	local03, fp
197c4     14 4E 85 A1 |  if_e	sub	fp, #20
197c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
197cc     34 00 90 5D |  if_ne	jmp	#LR__2117
197d0     00 1E 06 F6 | 	mov	local01, #0
197d4     A7 12 02 FB | 	rdlong	arg01, fp
197d8     A0 A7 B0 FD | 	call	#__system___float_fromuns
197dc     FD 12 02 F6 | 	mov	arg01, result1
197e0     0C 4E 05 F1 | 	add	fp, #12
197e4     A7 14 02 FB | 	rdlong	arg02, fp
197e8     0C 4E 85 F1 | 	sub	fp, #12
197ec     01 16 66 F6 | 	neg	arg03, #1
197f0     C0 AF B0 FD | 	call	#__system___float_cmp
197f4     00 FA 55 F2 | 	cmps	result1, #0 wc
197f8     00 1E 26 36 |  if_ae	not	local01, #0
197fc     A7 1E 62 FC | 	wrlong	local01, fp
19800     A0 01 90 FD | 	jmp	#LR__2123
19804                 | LR__2117
19804                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
19804     08 4E 05 F1 | 	add	fp, #8
19808     A7 1E 02 FB | 	rdlong	local01, fp
1980c     08 4E 85 F1 | 	sub	fp, #8
19810     1D 1E 0E F2 | 	cmp	local01, #29 wz
19814     14 4E 05 A1 |  if_e	add	fp, #20
19818     A7 22 02 AB |  if_e	rdlong	local03, fp
1981c     14 4E 85 A1 |  if_e	sub	fp, #20
19820     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19824     24 00 90 5D |  if_ne	jmp	#LR__2118
19828     00 1E 06 F6 | 	mov	local01, #0
1982c     A7 20 02 FB | 	rdlong	local02, fp
19830     0C 4E 05 F1 | 	add	fp, #12
19834     A7 22 02 FB | 	rdlong	local03, fp
19838     0C 4E 85 F1 | 	sub	fp, #12
1983c     11 21 52 F2 | 	cmps	local02, local03 wc
19840     01 1E 66 36 |  if_ae	neg	local01, #1
19844     A7 1E 62 FC | 	wrlong	local01, fp
19848     58 01 90 FD | 	jmp	#LR__2123
1984c                 | LR__2118
1984c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1984c     08 4E 05 F1 | 	add	fp, #8
19850     A7 1E 02 FB | 	rdlong	local01, fp
19854     08 4E 85 F1 | 	sub	fp, #8
19858     1D 1E 0E F2 | 	cmp	local01, #29 wz
1985c     14 4E 05 A1 |  if_e	add	fp, #20
19860     A7 22 02 AB |  if_e	rdlong	local03, fp
19864     14 4E 85 A1 |  if_e	sub	fp, #20
19868     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1986c     24 00 90 5D |  if_ne	jmp	#LR__2119
19870     00 1E 06 F6 | 	mov	local01, #0
19874     A7 20 02 FB | 	rdlong	local02, fp
19878     0C 4E 05 F1 | 	add	fp, #12
1987c     A7 22 02 FB | 	rdlong	local03, fp
19880     0C 4E 85 F1 | 	sub	fp, #12
19884     11 21 12 F2 | 	cmp	local02, local03 wc
19888     01 1E 66 36 |  if_ae	neg	local01, #1
1988c     A7 1E 62 FC | 	wrlong	local01, fp
19890     10 01 90 FD | 	jmp	#LR__2123
19894                 | LR__2119
19894                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
19894     08 4E 05 F1 | 	add	fp, #8
19898     A7 1E 02 FB | 	rdlong	local01, fp
1989c     08 4E 85 F1 | 	sub	fp, #8
198a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
198a4     14 4E 05 A1 |  if_e	add	fp, #20
198a8     A7 22 02 AB |  if_e	rdlong	local03, fp
198ac     14 4E 85 A1 |  if_e	sub	fp, #20
198b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
198b4     30 00 90 5D |  if_ne	jmp	#LR__2120
198b8     00 1E 06 F6 | 	mov	local01, #0
198bc     A7 12 02 FB | 	rdlong	arg01, fp
198c0     CC 20 BF FD | 	call	#_convertstring
198c4     FD 12 02 F6 | 	mov	arg01, result1
198c8     0C 4E 05 F1 | 	add	fp, #12
198cc     A7 14 02 FB | 	rdlong	arg02, fp
198d0     0C 4E 85 F1 | 	sub	fp, #12
198d4     14 7D B0 FD | 	call	#__system___string_cmp
198d8     00 FA 55 F2 | 	cmps	result1, #0 wc
198dc     00 1E 26 36 |  if_ae	not	local01, #0
198e0     A7 1E 62 FC | 	wrlong	local01, fp
198e4     BC 00 90 FD | 	jmp	#LR__2123
198e8                 | LR__2120
198e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
198e8     08 4E 05 F1 | 	add	fp, #8
198ec     A7 1E 02 FB | 	rdlong	local01, fp
198f0     08 4E 85 F1 | 	sub	fp, #8
198f4     1F 1E 0E F2 | 	cmp	local01, #31 wz
198f8     14 4E 05 A1 |  if_e	add	fp, #20
198fc     A7 22 02 AB |  if_e	rdlong	local03, fp
19900     14 4E 85 A1 |  if_e	sub	fp, #20
19904     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19908     34 00 90 5D |  if_ne	jmp	#LR__2121
1990c     00 1E 06 F6 | 	mov	local01, #0
19910     A7 20 02 FB | 	rdlong	local02, fp
19914     0C 4E 05 F1 | 	add	fp, #12
19918     A7 12 02 FB | 	rdlong	arg01, fp
1991c     0C 4E 85 F1 | 	sub	fp, #12
19920     6C 20 BF FD | 	call	#_convertstring
19924     FD 14 02 F6 | 	mov	arg02, result1
19928     10 13 02 F6 | 	mov	arg01, local02
1992c     BC 7C B0 FD | 	call	#__system___string_cmp
19930     00 FA 55 F2 | 	cmps	result1, #0 wc
19934     00 1E 26 36 |  if_ae	not	local01, #0
19938     A7 1E 62 FC | 	wrlong	local01, fp
1993c     64 00 90 FD | 	jmp	#LR__2123
19940                 | LR__2121
19940                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
19940     08 4E 05 F1 | 	add	fp, #8
19944     A7 1E 02 FB | 	rdlong	local01, fp
19948     08 4E 85 F1 | 	sub	fp, #8
1994c     2B 1E 0E F2 | 	cmp	local01, #43 wz
19950     14 4E 05 A1 |  if_e	add	fp, #20
19954     A7 22 02 AB |  if_e	rdlong	local03, fp
19958     14 4E 85 A1 |  if_e	sub	fp, #20
1995c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19960     3C 00 90 5D |  if_ne	jmp	#LR__2122
19964     00 1E 06 F6 | 	mov	local01, #0
19968     A7 12 02 FB | 	rdlong	arg01, fp
1996c     20 20 BF FD | 	call	#_convertstring
19970     FD 20 02 F6 | 	mov	local02, result1
19974     0C 4E 05 F1 | 	add	fp, #12
19978     A7 12 02 FB | 	rdlong	arg01, fp
1997c     0C 4E 85 F1 | 	sub	fp, #12
19980     0C 20 BF FD | 	call	#_convertstring
19984     FD 14 02 F6 | 	mov	arg02, result1
19988     10 13 02 F6 | 	mov	arg01, local02
1998c     5C 7C B0 FD | 	call	#__system___string_cmp
19990     00 FA 55 F2 | 	cmps	result1, #0 wc
19994     00 1E 26 36 |  if_ae	not	local01, #0
19998     A7 1E 62 FC | 	wrlong	local01, fp
1999c     04 00 90 FD | 	jmp	#LR__2123
199a0                 | LR__2122
199a0     A7 00 68 FC | 	wrlong	#0, fp
199a4                 | LR__2123
199a4     08 4E 05 F1 | 	add	fp, #8
199a8     A7 38 68 FC | 	wrlong	#28, fp
199ac     08 4E 85 F1 | 	sub	fp, #8
199b0     A7 12 02 F6 | 	mov	arg01, fp
199b4     F8 1E BF FD | 	call	#_push
199b8     A7 F0 03 F6 | 	mov	ptra, fp
199bc     B2 00 A0 FD | 	call	#popregs_
199c0                 | _do_ge_ret
199c0     2D 00 64 FD | 	ret
199c4                 | 
199c4                 | ' 
199c4                 | ' '--------------------------------- greater than (>)
199c4                 | ' 
199c4                 | ' sub do_gt
199c4                 | _do_gt
199c4     05 4A 05 F6 | 	mov	COUNT_, #5
199c8     A8 00 A0 FD | 	call	#pushregs_
199cc     18 F0 07 F1 | 	add	ptra, #24
199d0     44 1E BF FD | 	call	#_pop
199d4     FD 1E 02 F6 | 	mov	local01, result1
199d8     FE 20 02 F6 | 	mov	local02, result2
199dc     FF 22 02 F6 | 	mov	local03, result3
199e0     0C 4E 05 F1 | 	add	fp, #12
199e4     A7 1E 62 FC | 	wrlong	local01, fp
199e8     04 4E 05 F1 | 	add	fp, #4
199ec     A7 20 62 FC | 	wrlong	local02, fp
199f0     04 4E 05 F1 | 	add	fp, #4
199f4     A7 22 62 FC | 	wrlong	local03, fp
199f8     14 4E 85 F1 | 	sub	fp, #20
199fc     18 1E BF FD | 	call	#_pop
19a00     FF 22 02 F6 | 	mov	local03, result3
19a04     A7 FA 61 FC | 	wrlong	result1, fp
19a08     04 4E 05 F1 | 	add	fp, #4
19a0c     A7 FC 61 FC | 	wrlong	result2, fp
19a10     04 4E 05 F1 | 	add	fp, #4
19a14     A7 22 62 FC | 	wrlong	local03, fp
19a18                 | ' 
19a18                 | ' t2=pop()
19a18                 | ' t1=pop()
19a18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
19a18     08 4E 85 F1 | 	sub	fp, #8
19a1c     1F 22 0E F2 | 	cmp	local03, #31 wz
19a20     14 4E 05 A1 |  if_e	add	fp, #20
19a24     A7 24 02 AB |  if_e	rdlong	local04, fp
19a28     14 4E 85 A1 |  if_e	sub	fp, #20
19a2c     12 23 02 A6 |  if_e	mov	local03, local04
19a30     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19a34     28 00 90 5D |  if_ne	jmp	#LR__2130
19a38     00 1E 06 F6 | 	mov	local01, #0
19a3c     A7 12 02 FB | 	rdlong	arg01, fp
19a40     0C 4E 05 F1 | 	add	fp, #12
19a44     A7 14 02 FB | 	rdlong	arg02, fp
19a48     0C 4E 85 F1 | 	sub	fp, #12
19a4c     9C 7B B0 FD | 	call	#__system___string_cmp
19a50     01 FA 55 F2 | 	cmps	result1, #1 wc
19a54     00 1E 26 36 |  if_ae	not	local01, #0
19a58     A7 1E 62 FC | 	wrlong	local01, fp
19a5c     1C 04 90 FD | 	jmp	#LR__2143
19a60                 | LR__2130
19a60                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
19a60     08 4E 05 F1 | 	add	fp, #8
19a64     A7 1E 02 FB | 	rdlong	local01, fp
19a68     08 4E 85 F1 | 	sub	fp, #8
19a6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19a70     14 4E 05 A1 |  if_e	add	fp, #20
19a74     A7 24 02 AB |  if_e	rdlong	local04, fp
19a78     14 4E 85 A1 |  if_e	sub	fp, #20
19a7c     12 23 02 A6 |  if_e	mov	local03, local04
19a80     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19a84     2C 00 90 5D |  if_ne	jmp	#LR__2131
19a88     00 1E 06 F6 | 	mov	local01, #0
19a8c     A7 12 02 FB | 	rdlong	arg01, fp
19a90     0C 4E 05 F1 | 	add	fp, #12
19a94     A7 14 02 FB | 	rdlong	arg02, fp
19a98     0C 4E 85 F1 | 	sub	fp, #12
19a9c     01 16 66 F6 | 	neg	arg03, #1
19aa0     10 AD B0 FD | 	call	#__system___float_cmp
19aa4     01 FA 55 F2 | 	cmps	result1, #1 wc
19aa8     00 1E 26 36 |  if_ae	not	local01, #0
19aac     A7 1E 62 FC | 	wrlong	local01, fp
19ab0     C8 03 90 FD | 	jmp	#LR__2143
19ab4                 | LR__2131
19ab4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
19ab4     08 4E 05 F1 | 	add	fp, #8
19ab8     A7 1E 02 FB | 	rdlong	local01, fp
19abc     08 4E 85 F1 | 	sub	fp, #8
19ac0     1E 1E 0E F2 | 	cmp	local01, #30 wz
19ac4     14 4E 05 A1 |  if_e	add	fp, #20
19ac8     A7 24 02 AB |  if_e	rdlong	local04, fp
19acc     14 4E 85 A1 |  if_e	sub	fp, #20
19ad0     12 23 02 A6 |  if_e	mov	local03, local04
19ad4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19ad8     48 00 90 5D |  if_ne	jmp	#LR__2132
19adc     00 1E 06 F6 | 	mov	local01, #0
19ae0     A7 20 02 FB | 	rdlong	local02, fp
19ae4     0C 4E 05 F1 | 	add	fp, #12
19ae8     A7 12 02 FB | 	rdlong	arg01, fp
19aec     0C 4E 85 F1 | 	sub	fp, #12
19af0     09 13 52 F6 | 	abs	arg01, arg01 wc
19af4     1F 26 C6 C9 |  if_b	decod	local05, #31
19af8     00 26 06 36 |  if_ae	mov	local05, #0
19afc     7C A4 B0 FD | 	call	#__system___float_fromuns
19b00     13 FB 61 F5 | 	xor	result1, local05
19b04     FD 14 02 F6 | 	mov	arg02, result1
19b08     10 13 02 F6 | 	mov	arg01, local02
19b0c     01 16 66 F6 | 	neg	arg03, #1
19b10     A0 AC B0 FD | 	call	#__system___float_cmp
19b14     01 FA 55 F2 | 	cmps	result1, #1 wc
19b18     00 1E 26 36 |  if_ae	not	local01, #0
19b1c     A7 1E 62 FC | 	wrlong	local01, fp
19b20     58 03 90 FD | 	jmp	#LR__2143
19b24                 | LR__2132
19b24                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
19b24     08 4E 05 F1 | 	add	fp, #8
19b28     A7 1E 02 FB | 	rdlong	local01, fp
19b2c     08 4E 85 F1 | 	sub	fp, #8
19b30     1E 1E 0E F2 | 	cmp	local01, #30 wz
19b34     14 4E 05 A1 |  if_e	add	fp, #20
19b38     A7 24 02 AB |  if_e	rdlong	local04, fp
19b3c     14 4E 85 A1 |  if_e	sub	fp, #20
19b40     12 23 02 A6 |  if_e	mov	local03, local04
19b44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19b48     38 00 90 5D |  if_ne	jmp	#LR__2133
19b4c     00 1E 06 F6 | 	mov	local01, #0
19b50     A7 20 02 FB | 	rdlong	local02, fp
19b54     0C 4E 05 F1 | 	add	fp, #12
19b58     A7 12 02 FB | 	rdlong	arg01, fp
19b5c     0C 4E 85 F1 | 	sub	fp, #12
19b60     18 A4 B0 FD | 	call	#__system___float_fromuns
19b64     FD 14 02 F6 | 	mov	arg02, result1
19b68     10 13 02 F6 | 	mov	arg01, local02
19b6c     01 16 66 F6 | 	neg	arg03, #1
19b70     40 AC B0 FD | 	call	#__system___float_cmp
19b74     01 FA 55 F2 | 	cmps	result1, #1 wc
19b78     00 1E 26 36 |  if_ae	not	local01, #0
19b7c     A7 1E 62 FC | 	wrlong	local01, fp
19b80     F8 02 90 FD | 	jmp	#LR__2143
19b84                 | LR__2133
19b84                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
19b84     08 4E 05 F1 | 	add	fp, #8
19b88     A7 1E 02 FB | 	rdlong	local01, fp
19b8c     08 4E 85 F1 | 	sub	fp, #8
19b90     1C 1E 0E F2 | 	cmp	local01, #28 wz
19b94     14 4E 05 A1 |  if_e	add	fp, #20
19b98     A7 24 02 AB |  if_e	rdlong	local04, fp
19b9c     14 4E 85 A1 |  if_e	sub	fp, #20
19ba0     12 23 02 A6 |  if_e	mov	local03, local04
19ba4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19ba8     44 00 90 5D |  if_ne	jmp	#LR__2134
19bac     00 1E 06 F6 | 	mov	local01, #0
19bb0     A7 12 02 FB | 	rdlong	arg01, fp
19bb4     09 13 52 F6 | 	abs	arg01, arg01 wc
19bb8     1F 26 C6 C9 |  if_b	decod	local05, #31
19bbc     00 26 06 36 |  if_ae	mov	local05, #0
19bc0     B8 A3 B0 FD | 	call	#__system___float_fromuns
19bc4     13 FB 61 F5 | 	xor	result1, local05
19bc8     FD 12 02 F6 | 	mov	arg01, result1
19bcc     0C 4E 05 F1 | 	add	fp, #12
19bd0     A7 14 02 FB | 	rdlong	arg02, fp
19bd4     0C 4E 85 F1 | 	sub	fp, #12
19bd8     01 16 66 F6 | 	neg	arg03, #1
19bdc     D4 AB B0 FD | 	call	#__system___float_cmp
19be0     01 FA 55 F2 | 	cmps	result1, #1 wc
19be4     00 1E 26 36 |  if_ae	not	local01, #0
19be8     A7 1E 62 FC | 	wrlong	local01, fp
19bec     8C 02 90 FD | 	jmp	#LR__2143
19bf0                 | LR__2134
19bf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
19bf0     08 4E 05 F1 | 	add	fp, #8
19bf4     A7 1E 02 FB | 	rdlong	local01, fp
19bf8     08 4E 85 F1 | 	sub	fp, #8
19bfc     1C 1E 0E F2 | 	cmp	local01, #28 wz
19c00     14 4E 05 A1 |  if_e	add	fp, #20
19c04     A7 24 02 AB |  if_e	rdlong	local04, fp
19c08     14 4E 85 A1 |  if_e	sub	fp, #20
19c0c     12 23 02 A6 |  if_e	mov	local03, local04
19c10     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19c14     24 00 90 5D |  if_ne	jmp	#LR__2135
19c18     00 1E 06 F6 | 	mov	local01, #0
19c1c     A7 20 02 FB | 	rdlong	local02, fp
19c20     0C 4E 05 F1 | 	add	fp, #12
19c24     A7 22 02 FB | 	rdlong	local03, fp
19c28     0C 4E 85 F1 | 	sub	fp, #12
19c2c     11 21 5A F2 | 	cmps	local02, local03 wcz
19c30     01 1E 66 16 |  if_a	neg	local01, #1
19c34     A7 1E 62 FC | 	wrlong	local01, fp
19c38     40 02 90 FD | 	jmp	#LR__2143
19c3c                 | LR__2135
19c3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
19c3c     08 4E 05 F1 | 	add	fp, #8
19c40     A7 1E 02 FB | 	rdlong	local01, fp
19c44     08 4E 85 F1 | 	sub	fp, #8
19c48     1C 1E 0E F2 | 	cmp	local01, #28 wz
19c4c     14 4E 05 A1 |  if_e	add	fp, #20
19c50     A7 24 02 AB |  if_e	rdlong	local04, fp
19c54     14 4E 85 A1 |  if_e	sub	fp, #20
19c58     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19c5c     24 00 90 5D |  if_ne	jmp	#LR__2136
19c60     00 1E 06 F6 | 	mov	local01, #0
19c64     A7 20 02 FB | 	rdlong	local02, fp
19c68     0C 4E 05 F1 | 	add	fp, #12
19c6c     A7 22 02 FB | 	rdlong	local03, fp
19c70     0C 4E 85 F1 | 	sub	fp, #12
19c74     11 21 5A F2 | 	cmps	local02, local03 wcz
19c78     01 1E 66 16 |  if_a	neg	local01, #1
19c7c     A7 1E 62 FC | 	wrlong	local01, fp
19c80     F8 01 90 FD | 	jmp	#LR__2143
19c84                 | LR__2136
19c84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
19c84     08 4E 05 F1 | 	add	fp, #8
19c88     A7 1E 02 FB | 	rdlong	local01, fp
19c8c     08 4E 85 F1 | 	sub	fp, #8
19c90     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c94     14 4E 05 A1 |  if_e	add	fp, #20
19c98     A7 22 02 AB |  if_e	rdlong	local03, fp
19c9c     14 4E 85 A1 |  if_e	sub	fp, #20
19ca0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19ca4     34 00 90 5D |  if_ne	jmp	#LR__2137
19ca8     00 1E 06 F6 | 	mov	local01, #0
19cac     A7 12 02 FB | 	rdlong	arg01, fp
19cb0     C8 A2 B0 FD | 	call	#__system___float_fromuns
19cb4     FD 12 02 F6 | 	mov	arg01, result1
19cb8     0C 4E 05 F1 | 	add	fp, #12
19cbc     A7 14 02 FB | 	rdlong	arg02, fp
19cc0     0C 4E 85 F1 | 	sub	fp, #12
19cc4     01 16 66 F6 | 	neg	arg03, #1
19cc8     E8 AA B0 FD | 	call	#__system___float_cmp
19ccc     01 FA 55 F2 | 	cmps	result1, #1 wc
19cd0     00 1E 26 36 |  if_ae	not	local01, #0
19cd4     A7 1E 62 FC | 	wrlong	local01, fp
19cd8     A0 01 90 FD | 	jmp	#LR__2143
19cdc                 | LR__2137
19cdc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
19cdc     08 4E 05 F1 | 	add	fp, #8
19ce0     A7 1E 02 FB | 	rdlong	local01, fp
19ce4     08 4E 85 F1 | 	sub	fp, #8
19ce8     1D 1E 0E F2 | 	cmp	local01, #29 wz
19cec     14 4E 05 A1 |  if_e	add	fp, #20
19cf0     A7 22 02 AB |  if_e	rdlong	local03, fp
19cf4     14 4E 85 A1 |  if_e	sub	fp, #20
19cf8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19cfc     24 00 90 5D |  if_ne	jmp	#LR__2138
19d00     00 1E 06 F6 | 	mov	local01, #0
19d04     A7 20 02 FB | 	rdlong	local02, fp
19d08     0C 4E 05 F1 | 	add	fp, #12
19d0c     A7 22 02 FB | 	rdlong	local03, fp
19d10     0C 4E 85 F1 | 	sub	fp, #12
19d14     11 21 5A F2 | 	cmps	local02, local03 wcz
19d18     01 1E 66 16 |  if_a	neg	local01, #1
19d1c     A7 1E 62 FC | 	wrlong	local01, fp
19d20     58 01 90 FD | 	jmp	#LR__2143
19d24                 | LR__2138
19d24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
19d24     08 4E 05 F1 | 	add	fp, #8
19d28     A7 1E 02 FB | 	rdlong	local01, fp
19d2c     08 4E 85 F1 | 	sub	fp, #8
19d30     1D 1E 0E F2 | 	cmp	local01, #29 wz
19d34     14 4E 05 A1 |  if_e	add	fp, #20
19d38     A7 22 02 AB |  if_e	rdlong	local03, fp
19d3c     14 4E 85 A1 |  if_e	sub	fp, #20
19d40     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19d44     24 00 90 5D |  if_ne	jmp	#LR__2139
19d48     00 1E 06 F6 | 	mov	local01, #0
19d4c     A7 20 02 FB | 	rdlong	local02, fp
19d50     0C 4E 05 F1 | 	add	fp, #12
19d54     A7 22 02 FB | 	rdlong	local03, fp
19d58     0C 4E 85 F1 | 	sub	fp, #12
19d5c     11 21 1A F2 | 	cmp	local02, local03 wcz
19d60     01 1E 66 16 |  if_a	neg	local01, #1
19d64     A7 1E 62 FC | 	wrlong	local01, fp
19d68     10 01 90 FD | 	jmp	#LR__2143
19d6c                 | LR__2139
19d6c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
19d6c     08 4E 05 F1 | 	add	fp, #8
19d70     A7 1E 02 FB | 	rdlong	local01, fp
19d74     08 4E 85 F1 | 	sub	fp, #8
19d78     2B 1E 0E F2 | 	cmp	local01, #43 wz
19d7c     14 4E 05 A1 |  if_e	add	fp, #20
19d80     A7 22 02 AB |  if_e	rdlong	local03, fp
19d84     14 4E 85 A1 |  if_e	sub	fp, #20
19d88     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19d8c     30 00 90 5D |  if_ne	jmp	#LR__2140
19d90     00 1E 06 F6 | 	mov	local01, #0
19d94     A7 12 02 FB | 	rdlong	arg01, fp
19d98     F4 1B BF FD | 	call	#_convertstring
19d9c     FD 12 02 F6 | 	mov	arg01, result1
19da0     0C 4E 05 F1 | 	add	fp, #12
19da4     A7 14 02 FB | 	rdlong	arg02, fp
19da8     0C 4E 85 F1 | 	sub	fp, #12
19dac     3C 78 B0 FD | 	call	#__system___string_cmp
19db0     01 FA 55 F2 | 	cmps	result1, #1 wc
19db4     00 1E 26 36 |  if_ae	not	local01, #0
19db8     A7 1E 62 FC | 	wrlong	local01, fp
19dbc     BC 00 90 FD | 	jmp	#LR__2143
19dc0                 | LR__2140
19dc0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
19dc0     08 4E 05 F1 | 	add	fp, #8
19dc4     A7 1E 02 FB | 	rdlong	local01, fp
19dc8     08 4E 85 F1 | 	sub	fp, #8
19dcc     1F 1E 0E F2 | 	cmp	local01, #31 wz
19dd0     14 4E 05 A1 |  if_e	add	fp, #20
19dd4     A7 22 02 AB |  if_e	rdlong	local03, fp
19dd8     14 4E 85 A1 |  if_e	sub	fp, #20
19ddc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19de0     34 00 90 5D |  if_ne	jmp	#LR__2141
19de4     00 1E 06 F6 | 	mov	local01, #0
19de8     A7 20 02 FB | 	rdlong	local02, fp
19dec     0C 4E 05 F1 | 	add	fp, #12
19df0     A7 12 02 FB | 	rdlong	arg01, fp
19df4     0C 4E 85 F1 | 	sub	fp, #12
19df8     94 1B BF FD | 	call	#_convertstring
19dfc     FD 14 02 F6 | 	mov	arg02, result1
19e00     10 13 02 F6 | 	mov	arg01, local02
19e04     E4 77 B0 FD | 	call	#__system___string_cmp
19e08     01 FA 55 F2 | 	cmps	result1, #1 wc
19e0c     00 1E 26 36 |  if_ae	not	local01, #0
19e10     A7 1E 62 FC | 	wrlong	local01, fp
19e14     64 00 90 FD | 	jmp	#LR__2143
19e18                 | LR__2141
19e18                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
19e18     08 4E 05 F1 | 	add	fp, #8
19e1c     A7 1E 02 FB | 	rdlong	local01, fp
19e20     08 4E 85 F1 | 	sub	fp, #8
19e24     2B 1E 0E F2 | 	cmp	local01, #43 wz
19e28     14 4E 05 A1 |  if_e	add	fp, #20
19e2c     A7 22 02 AB |  if_e	rdlong	local03, fp
19e30     14 4E 85 A1 |  if_e	sub	fp, #20
19e34     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19e38     3C 00 90 5D |  if_ne	jmp	#LR__2142
19e3c     00 1E 06 F6 | 	mov	local01, #0
19e40     A7 12 02 FB | 	rdlong	arg01, fp
19e44     48 1B BF FD | 	call	#_convertstring
19e48     FD 20 02 F6 | 	mov	local02, result1
19e4c     0C 4E 05 F1 | 	add	fp, #12
19e50     A7 12 02 FB | 	rdlong	arg01, fp
19e54     0C 4E 85 F1 | 	sub	fp, #12
19e58     34 1B BF FD | 	call	#_convertstring
19e5c     FD 14 02 F6 | 	mov	arg02, result1
19e60     10 13 02 F6 | 	mov	arg01, local02
19e64     84 77 B0 FD | 	call	#__system___string_cmp
19e68     01 FA 55 F2 | 	cmps	result1, #1 wc
19e6c     00 1E 26 36 |  if_ae	not	local01, #0
19e70     A7 1E 62 FC | 	wrlong	local01, fp
19e74     04 00 90 FD | 	jmp	#LR__2143
19e78                 | LR__2142
19e78     A7 00 68 FC | 	wrlong	#0, fp
19e7c                 | LR__2143
19e7c     08 4E 05 F1 | 	add	fp, #8
19e80     A7 38 68 FC | 	wrlong	#28, fp
19e84     08 4E 85 F1 | 	sub	fp, #8
19e88     A7 12 02 F6 | 	mov	arg01, fp
19e8c     20 1A BF FD | 	call	#_push
19e90     A7 F0 03 F6 | 	mov	ptra, fp
19e94     B2 00 A0 FD | 	call	#popregs_
19e98                 | _do_gt_ret
19e98     2D 00 64 FD | 	ret
19e9c                 | 
19e9c                 | ' 
19e9c                 | ' '--------------------------------- less or equal (<=)
19e9c                 | ' 
19e9c                 | ' sub do_le
19e9c                 | _do_le
19e9c     05 4A 05 F6 | 	mov	COUNT_, #5
19ea0     A8 00 A0 FD | 	call	#pushregs_
19ea4     18 F0 07 F1 | 	add	ptra, #24
19ea8     6C 19 BF FD | 	call	#_pop
19eac     FD 1E 02 F6 | 	mov	local01, result1
19eb0     FE 20 02 F6 | 	mov	local02, result2
19eb4     FF 22 02 F6 | 	mov	local03, result3
19eb8     0C 4E 05 F1 | 	add	fp, #12
19ebc     A7 1E 62 FC | 	wrlong	local01, fp
19ec0     04 4E 05 F1 | 	add	fp, #4
19ec4     A7 20 62 FC | 	wrlong	local02, fp
19ec8     04 4E 05 F1 | 	add	fp, #4
19ecc     A7 22 62 FC | 	wrlong	local03, fp
19ed0     14 4E 85 F1 | 	sub	fp, #20
19ed4     40 19 BF FD | 	call	#_pop
19ed8     FF 22 02 F6 | 	mov	local03, result3
19edc     A7 FA 61 FC | 	wrlong	result1, fp
19ee0     04 4E 05 F1 | 	add	fp, #4
19ee4     A7 FC 61 FC | 	wrlong	result2, fp
19ee8     04 4E 05 F1 | 	add	fp, #4
19eec     A7 22 62 FC | 	wrlong	local03, fp
19ef0                 | ' 
19ef0                 | ' t2=pop()
19ef0                 | ' t1=pop()
19ef0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
19ef0     08 4E 85 F1 | 	sub	fp, #8
19ef4     1F 22 0E F2 | 	cmp	local03, #31 wz
19ef8     14 4E 05 A1 |  if_e	add	fp, #20
19efc     A7 24 02 AB |  if_e	rdlong	local04, fp
19f00     14 4E 85 A1 |  if_e	sub	fp, #20
19f04     12 23 02 A6 |  if_e	mov	local03, local04
19f08     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19f0c     28 00 90 5D |  if_ne	jmp	#LR__2150
19f10     00 1E 06 F6 | 	mov	local01, #0
19f14     A7 12 02 FB | 	rdlong	arg01, fp
19f18     0C 4E 05 F1 | 	add	fp, #12
19f1c     A7 14 02 FB | 	rdlong	arg02, fp
19f20     0C 4E 85 F1 | 	sub	fp, #12
19f24     C4 76 B0 FD | 	call	#__system___string_cmp
19f28     01 FA 55 F2 | 	cmps	result1, #1 wc
19f2c     00 1E 26 C6 |  if_b	not	local01, #0
19f30     A7 1E 62 FC | 	wrlong	local01, fp
19f34     1C 04 90 FD | 	jmp	#LR__2163
19f38                 | LR__2150
19f38                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
19f38     08 4E 05 F1 | 	add	fp, #8
19f3c     A7 1E 02 FB | 	rdlong	local01, fp
19f40     08 4E 85 F1 | 	sub	fp, #8
19f44     1E 1E 0E F2 | 	cmp	local01, #30 wz
19f48     14 4E 05 A1 |  if_e	add	fp, #20
19f4c     A7 24 02 AB |  if_e	rdlong	local04, fp
19f50     14 4E 85 A1 |  if_e	sub	fp, #20
19f54     12 23 02 A6 |  if_e	mov	local03, local04
19f58     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19f5c     2C 00 90 5D |  if_ne	jmp	#LR__2151
19f60     00 1E 06 F6 | 	mov	local01, #0
19f64     A7 12 02 FB | 	rdlong	arg01, fp
19f68     0C 4E 05 F1 | 	add	fp, #12
19f6c     A7 14 02 FB | 	rdlong	arg02, fp
19f70     0C 4E 85 F1 | 	sub	fp, #12
19f74     01 16 06 F6 | 	mov	arg03, #1
19f78     38 A8 B0 FD | 	call	#__system___float_cmp
19f7c     01 FA 55 F2 | 	cmps	result1, #1 wc
19f80     00 1E 26 C6 |  if_b	not	local01, #0
19f84     A7 1E 62 FC | 	wrlong	local01, fp
19f88     C8 03 90 FD | 	jmp	#LR__2163
19f8c                 | LR__2151
19f8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
19f8c     08 4E 05 F1 | 	add	fp, #8
19f90     A7 1E 02 FB | 	rdlong	local01, fp
19f94     08 4E 85 F1 | 	sub	fp, #8
19f98     1E 1E 0E F2 | 	cmp	local01, #30 wz
19f9c     14 4E 05 A1 |  if_e	add	fp, #20
19fa0     A7 24 02 AB |  if_e	rdlong	local04, fp
19fa4     14 4E 85 A1 |  if_e	sub	fp, #20
19fa8     12 23 02 A6 |  if_e	mov	local03, local04
19fac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19fb0     48 00 90 5D |  if_ne	jmp	#LR__2152
19fb4     00 1E 06 F6 | 	mov	local01, #0
19fb8     A7 20 02 FB | 	rdlong	local02, fp
19fbc     0C 4E 05 F1 | 	add	fp, #12
19fc0     A7 12 02 FB | 	rdlong	arg01, fp
19fc4     0C 4E 85 F1 | 	sub	fp, #12
19fc8     09 13 52 F6 | 	abs	arg01, arg01 wc
19fcc     1F 26 C6 C9 |  if_b	decod	local05, #31
19fd0     00 26 06 36 |  if_ae	mov	local05, #0
19fd4     A4 9F B0 FD | 	call	#__system___float_fromuns
19fd8     13 FB 61 F5 | 	xor	result1, local05
19fdc     FD 14 02 F6 | 	mov	arg02, result1
19fe0     10 13 02 F6 | 	mov	arg01, local02
19fe4     01 16 06 F6 | 	mov	arg03, #1
19fe8     C8 A7 B0 FD | 	call	#__system___float_cmp
19fec     01 FA 55 F2 | 	cmps	result1, #1 wc
19ff0     00 1E 26 C6 |  if_b	not	local01, #0
19ff4     A7 1E 62 FC | 	wrlong	local01, fp
19ff8     58 03 90 FD | 	jmp	#LR__2163
19ffc                 | LR__2152
19ffc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
19ffc     08 4E 05 F1 | 	add	fp, #8
1a000     A7 1E 02 FB | 	rdlong	local01, fp
1a004     08 4E 85 F1 | 	sub	fp, #8
1a008     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a00c     14 4E 05 A1 |  if_e	add	fp, #20
1a010     A7 24 02 AB |  if_e	rdlong	local04, fp
1a014     14 4E 85 A1 |  if_e	sub	fp, #20
1a018     12 23 02 A6 |  if_e	mov	local03, local04
1a01c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a020     38 00 90 5D |  if_ne	jmp	#LR__2153
1a024     00 1E 06 F6 | 	mov	local01, #0
1a028     A7 20 02 FB | 	rdlong	local02, fp
1a02c     0C 4E 05 F1 | 	add	fp, #12
1a030     A7 12 02 FB | 	rdlong	arg01, fp
1a034     0C 4E 85 F1 | 	sub	fp, #12
1a038     40 9F B0 FD | 	call	#__system___float_fromuns
1a03c     FD 14 02 F6 | 	mov	arg02, result1
1a040     10 13 02 F6 | 	mov	arg01, local02
1a044     01 16 06 F6 | 	mov	arg03, #1
1a048     68 A7 B0 FD | 	call	#__system___float_cmp
1a04c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a050     00 1E 26 C6 |  if_b	not	local01, #0
1a054     A7 1E 62 FC | 	wrlong	local01, fp
1a058     F8 02 90 FD | 	jmp	#LR__2163
1a05c                 | LR__2153
1a05c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1a05c     08 4E 05 F1 | 	add	fp, #8
1a060     A7 1E 02 FB | 	rdlong	local01, fp
1a064     08 4E 85 F1 | 	sub	fp, #8
1a068     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a06c     14 4E 05 A1 |  if_e	add	fp, #20
1a070     A7 24 02 AB |  if_e	rdlong	local04, fp
1a074     14 4E 85 A1 |  if_e	sub	fp, #20
1a078     12 23 02 A6 |  if_e	mov	local03, local04
1a07c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a080     44 00 90 5D |  if_ne	jmp	#LR__2154
1a084     00 1E 06 F6 | 	mov	local01, #0
1a088     A7 12 02 FB | 	rdlong	arg01, fp
1a08c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a090     1F 26 C6 C9 |  if_b	decod	local05, #31
1a094     00 26 06 36 |  if_ae	mov	local05, #0
1a098     E0 9E B0 FD | 	call	#__system___float_fromuns
1a09c     13 FB 61 F5 | 	xor	result1, local05
1a0a0     FD 12 02 F6 | 	mov	arg01, result1
1a0a4     0C 4E 05 F1 | 	add	fp, #12
1a0a8     A7 14 02 FB | 	rdlong	arg02, fp
1a0ac     0C 4E 85 F1 | 	sub	fp, #12
1a0b0     01 16 06 F6 | 	mov	arg03, #1
1a0b4     FC A6 B0 FD | 	call	#__system___float_cmp
1a0b8     01 FA 55 F2 | 	cmps	result1, #1 wc
1a0bc     00 1E 26 C6 |  if_b	not	local01, #0
1a0c0     A7 1E 62 FC | 	wrlong	local01, fp
1a0c4     8C 02 90 FD | 	jmp	#LR__2163
1a0c8                 | LR__2154
1a0c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1a0c8     08 4E 05 F1 | 	add	fp, #8
1a0cc     A7 1E 02 FB | 	rdlong	local01, fp
1a0d0     08 4E 85 F1 | 	sub	fp, #8
1a0d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a0d8     14 4E 05 A1 |  if_e	add	fp, #20
1a0dc     A7 24 02 AB |  if_e	rdlong	local04, fp
1a0e0     14 4E 85 A1 |  if_e	sub	fp, #20
1a0e4     12 23 02 A6 |  if_e	mov	local03, local04
1a0e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a0ec     24 00 90 5D |  if_ne	jmp	#LR__2155
1a0f0     00 1E 06 F6 | 	mov	local01, #0
1a0f4     A7 20 02 FB | 	rdlong	local02, fp
1a0f8     0C 4E 05 F1 | 	add	fp, #12
1a0fc     A7 22 02 FB | 	rdlong	local03, fp
1a100     0C 4E 85 F1 | 	sub	fp, #12
1a104     11 21 5A F2 | 	cmps	local02, local03 wcz
1a108     01 1E 66 E6 |  if_be	neg	local01, #1
1a10c     A7 1E 62 FC | 	wrlong	local01, fp
1a110     40 02 90 FD | 	jmp	#LR__2163
1a114                 | LR__2155
1a114                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1a114     08 4E 05 F1 | 	add	fp, #8
1a118     A7 1E 02 FB | 	rdlong	local01, fp
1a11c     08 4E 85 F1 | 	sub	fp, #8
1a120     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a124     14 4E 05 A1 |  if_e	add	fp, #20
1a128     A7 24 02 AB |  if_e	rdlong	local04, fp
1a12c     14 4E 85 A1 |  if_e	sub	fp, #20
1a130     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a134     24 00 90 5D |  if_ne	jmp	#LR__2156
1a138     00 1E 06 F6 | 	mov	local01, #0
1a13c     A7 20 02 FB | 	rdlong	local02, fp
1a140     0C 4E 05 F1 | 	add	fp, #12
1a144     A7 22 02 FB | 	rdlong	local03, fp
1a148     0C 4E 85 F1 | 	sub	fp, #12
1a14c     11 21 5A F2 | 	cmps	local02, local03 wcz
1a150     01 1E 66 E6 |  if_be	neg	local01, #1
1a154     A7 1E 62 FC | 	wrlong	local01, fp
1a158     F8 01 90 FD | 	jmp	#LR__2163
1a15c                 | LR__2156
1a15c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1a15c     08 4E 05 F1 | 	add	fp, #8
1a160     A7 1E 02 FB | 	rdlong	local01, fp
1a164     08 4E 85 F1 | 	sub	fp, #8
1a168     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a16c     14 4E 05 A1 |  if_e	add	fp, #20
1a170     A7 22 02 AB |  if_e	rdlong	local03, fp
1a174     14 4E 85 A1 |  if_e	sub	fp, #20
1a178     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a17c     34 00 90 5D |  if_ne	jmp	#LR__2157
1a180     00 1E 06 F6 | 	mov	local01, #0
1a184     A7 12 02 FB | 	rdlong	arg01, fp
1a188     F0 9D B0 FD | 	call	#__system___float_fromuns
1a18c     FD 12 02 F6 | 	mov	arg01, result1
1a190     0C 4E 05 F1 | 	add	fp, #12
1a194     A7 14 02 FB | 	rdlong	arg02, fp
1a198     0C 4E 85 F1 | 	sub	fp, #12
1a19c     01 16 06 F6 | 	mov	arg03, #1
1a1a0     10 A6 B0 FD | 	call	#__system___float_cmp
1a1a4     01 FA 55 F2 | 	cmps	result1, #1 wc
1a1a8     00 1E 26 C6 |  if_b	not	local01, #0
1a1ac     A7 1E 62 FC | 	wrlong	local01, fp
1a1b0     A0 01 90 FD | 	jmp	#LR__2163
1a1b4                 | LR__2157
1a1b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1a1b4     08 4E 05 F1 | 	add	fp, #8
1a1b8     A7 1E 02 FB | 	rdlong	local01, fp
1a1bc     08 4E 85 F1 | 	sub	fp, #8
1a1c0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a1c4     14 4E 05 A1 |  if_e	add	fp, #20
1a1c8     A7 22 02 AB |  if_e	rdlong	local03, fp
1a1cc     14 4E 85 A1 |  if_e	sub	fp, #20
1a1d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a1d4     24 00 90 5D |  if_ne	jmp	#LR__2158
1a1d8     00 1E 06 F6 | 	mov	local01, #0
1a1dc     A7 20 02 FB | 	rdlong	local02, fp
1a1e0     0C 4E 05 F1 | 	add	fp, #12
1a1e4     A7 22 02 FB | 	rdlong	local03, fp
1a1e8     0C 4E 85 F1 | 	sub	fp, #12
1a1ec     11 21 5A F2 | 	cmps	local02, local03 wcz
1a1f0     01 1E 66 E6 |  if_be	neg	local01, #1
1a1f4     A7 1E 62 FC | 	wrlong	local01, fp
1a1f8     58 01 90 FD | 	jmp	#LR__2163
1a1fc                 | LR__2158
1a1fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1a1fc     08 4E 05 F1 | 	add	fp, #8
1a200     A7 1E 02 FB | 	rdlong	local01, fp
1a204     08 4E 85 F1 | 	sub	fp, #8
1a208     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a20c     14 4E 05 A1 |  if_e	add	fp, #20
1a210     A7 22 02 AB |  if_e	rdlong	local03, fp
1a214     14 4E 85 A1 |  if_e	sub	fp, #20
1a218     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a21c     24 00 90 5D |  if_ne	jmp	#LR__2159
1a220     00 1E 06 F6 | 	mov	local01, #0
1a224     A7 20 02 FB | 	rdlong	local02, fp
1a228     0C 4E 05 F1 | 	add	fp, #12
1a22c     A7 22 02 FB | 	rdlong	local03, fp
1a230     0C 4E 85 F1 | 	sub	fp, #12
1a234     11 21 1A F2 | 	cmp	local02, local03 wcz
1a238     01 1E 66 E6 |  if_be	neg	local01, #1
1a23c     A7 1E 62 FC | 	wrlong	local01, fp
1a240     10 01 90 FD | 	jmp	#LR__2163
1a244                 | LR__2159
1a244                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1a244     08 4E 05 F1 | 	add	fp, #8
1a248     A7 1E 02 FB | 	rdlong	local01, fp
1a24c     08 4E 85 F1 | 	sub	fp, #8
1a250     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a254     14 4E 05 A1 |  if_e	add	fp, #20
1a258     A7 22 02 AB |  if_e	rdlong	local03, fp
1a25c     14 4E 85 A1 |  if_e	sub	fp, #20
1a260     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a264     30 00 90 5D |  if_ne	jmp	#LR__2160
1a268     00 1E 06 F6 | 	mov	local01, #0
1a26c     A7 12 02 FB | 	rdlong	arg01, fp
1a270     1C 17 BF FD | 	call	#_convertstring
1a274     FD 12 02 F6 | 	mov	arg01, result1
1a278     0C 4E 05 F1 | 	add	fp, #12
1a27c     A7 14 02 FB | 	rdlong	arg02, fp
1a280     0C 4E 85 F1 | 	sub	fp, #12
1a284     64 73 B0 FD | 	call	#__system___string_cmp
1a288     01 FA 55 F2 | 	cmps	result1, #1 wc
1a28c     00 1E 26 C6 |  if_b	not	local01, #0
1a290     A7 1E 62 FC | 	wrlong	local01, fp
1a294     BC 00 90 FD | 	jmp	#LR__2163
1a298                 | LR__2160
1a298                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1a298     08 4E 05 F1 | 	add	fp, #8
1a29c     A7 1E 02 FB | 	rdlong	local01, fp
1a2a0     08 4E 85 F1 | 	sub	fp, #8
1a2a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a2a8     14 4E 05 A1 |  if_e	add	fp, #20
1a2ac     A7 22 02 AB |  if_e	rdlong	local03, fp
1a2b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a2b4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a2b8     34 00 90 5D |  if_ne	jmp	#LR__2161
1a2bc     00 1E 06 F6 | 	mov	local01, #0
1a2c0     A7 20 02 FB | 	rdlong	local02, fp
1a2c4     0C 4E 05 F1 | 	add	fp, #12
1a2c8     A7 12 02 FB | 	rdlong	arg01, fp
1a2cc     0C 4E 85 F1 | 	sub	fp, #12
1a2d0     BC 16 BF FD | 	call	#_convertstring
1a2d4     FD 14 02 F6 | 	mov	arg02, result1
1a2d8     10 13 02 F6 | 	mov	arg01, local02
1a2dc     0C 73 B0 FD | 	call	#__system___string_cmp
1a2e0     01 FA 55 F2 | 	cmps	result1, #1 wc
1a2e4     00 1E 26 C6 |  if_b	not	local01, #0
1a2e8     A7 1E 62 FC | 	wrlong	local01, fp
1a2ec     64 00 90 FD | 	jmp	#LR__2163
1a2f0                 | LR__2161
1a2f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1a2f0     08 4E 05 F1 | 	add	fp, #8
1a2f4     A7 1E 02 FB | 	rdlong	local01, fp
1a2f8     08 4E 85 F1 | 	sub	fp, #8
1a2fc     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a300     14 4E 05 A1 |  if_e	add	fp, #20
1a304     A7 22 02 AB |  if_e	rdlong	local03, fp
1a308     14 4E 85 A1 |  if_e	sub	fp, #20
1a30c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a310     3C 00 90 5D |  if_ne	jmp	#LR__2162
1a314     00 1E 06 F6 | 	mov	local01, #0
1a318     A7 12 02 FB | 	rdlong	arg01, fp
1a31c     70 16 BF FD | 	call	#_convertstring
1a320     FD 20 02 F6 | 	mov	local02, result1
1a324     0C 4E 05 F1 | 	add	fp, #12
1a328     A7 12 02 FB | 	rdlong	arg01, fp
1a32c     0C 4E 85 F1 | 	sub	fp, #12
1a330     5C 16 BF FD | 	call	#_convertstring
1a334     FD 14 02 F6 | 	mov	arg02, result1
1a338     10 13 02 F6 | 	mov	arg01, local02
1a33c     AC 72 B0 FD | 	call	#__system___string_cmp
1a340     01 FA 55 F2 | 	cmps	result1, #1 wc
1a344     00 1E 26 C6 |  if_b	not	local01, #0
1a348     A7 1E 62 FC | 	wrlong	local01, fp
1a34c     04 00 90 FD | 	jmp	#LR__2163
1a350                 | LR__2162
1a350     A7 00 68 FC | 	wrlong	#0, fp
1a354                 | LR__2163
1a354     08 4E 05 F1 | 	add	fp, #8
1a358     A7 38 68 FC | 	wrlong	#28, fp
1a35c     08 4E 85 F1 | 	sub	fp, #8
1a360     A7 12 02 F6 | 	mov	arg01, fp
1a364     48 15 BF FD | 	call	#_push
1a368     A7 F0 03 F6 | 	mov	ptra, fp
1a36c     B2 00 A0 FD | 	call	#popregs_
1a370                 | _do_le_ret
1a370     2D 00 64 FD | 	ret
1a374                 | 
1a374                 | ' 
1a374                 | ' '--------------------------------- less than (<)
1a374                 | ' 
1a374                 | ' sub do_lt
1a374                 | _do_lt
1a374     05 4A 05 F6 | 	mov	COUNT_, #5
1a378     A8 00 A0 FD | 	call	#pushregs_
1a37c     18 F0 07 F1 | 	add	ptra, #24
1a380     94 14 BF FD | 	call	#_pop
1a384     FD 1E 02 F6 | 	mov	local01, result1
1a388     FE 20 02 F6 | 	mov	local02, result2
1a38c     FF 22 02 F6 | 	mov	local03, result3
1a390     0C 4E 05 F1 | 	add	fp, #12
1a394     A7 1E 62 FC | 	wrlong	local01, fp
1a398     04 4E 05 F1 | 	add	fp, #4
1a39c     A7 20 62 FC | 	wrlong	local02, fp
1a3a0     04 4E 05 F1 | 	add	fp, #4
1a3a4     A7 22 62 FC | 	wrlong	local03, fp
1a3a8     14 4E 85 F1 | 	sub	fp, #20
1a3ac     68 14 BF FD | 	call	#_pop
1a3b0     FF 22 02 F6 | 	mov	local03, result3
1a3b4     A7 FA 61 FC | 	wrlong	result1, fp
1a3b8     04 4E 05 F1 | 	add	fp, #4
1a3bc     A7 FC 61 FC | 	wrlong	result2, fp
1a3c0     04 4E 05 F1 | 	add	fp, #4
1a3c4     A7 22 62 FC | 	wrlong	local03, fp
1a3c8                 | ' 
1a3c8                 | ' t2=pop()
1a3c8                 | ' t1=pop()
1a3c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1a3c8     08 4E 85 F1 | 	sub	fp, #8
1a3cc     1F 22 0E F2 | 	cmp	local03, #31 wz
1a3d0     14 4E 05 A1 |  if_e	add	fp, #20
1a3d4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a3d8     14 4E 85 A1 |  if_e	sub	fp, #20
1a3dc     12 23 02 A6 |  if_e	mov	local03, local04
1a3e0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a3e4     28 00 90 5D |  if_ne	jmp	#LR__2170
1a3e8     00 1E 06 F6 | 	mov	local01, #0
1a3ec     A7 12 02 FB | 	rdlong	arg01, fp
1a3f0     0C 4E 05 F1 | 	add	fp, #12
1a3f4     A7 14 02 FB | 	rdlong	arg02, fp
1a3f8     0C 4E 85 F1 | 	sub	fp, #12
1a3fc     EC 71 B0 FD | 	call	#__system___string_cmp
1a400     00 FA 55 F2 | 	cmps	result1, #0 wc
1a404     00 1E 26 C6 |  if_b	not	local01, #0
1a408     A7 1E 62 FC | 	wrlong	local01, fp
1a40c     0C 04 90 FD | 	jmp	#LR__2183
1a410                 | LR__2170
1a410                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1a410     08 4E 05 F1 | 	add	fp, #8
1a414     A7 1E 02 FB | 	rdlong	local01, fp
1a418     08 4E 85 F1 | 	sub	fp, #8
1a41c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a420     14 4E 05 A1 |  if_e	add	fp, #20
1a424     A7 24 02 AB |  if_e	rdlong	local04, fp
1a428     14 4E 85 A1 |  if_e	sub	fp, #20
1a42c     12 23 02 A6 |  if_e	mov	local03, local04
1a430     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a434     2C 00 90 5D |  if_ne	jmp	#LR__2171
1a438     00 1E 06 F6 | 	mov	local01, #0
1a43c     A7 12 02 FB | 	rdlong	arg01, fp
1a440     0C 4E 05 F1 | 	add	fp, #12
1a444     A7 14 02 FB | 	rdlong	arg02, fp
1a448     0C 4E 85 F1 | 	sub	fp, #12
1a44c     01 16 06 F6 | 	mov	arg03, #1
1a450     60 A3 B0 FD | 	call	#__system___float_cmp
1a454     00 FA 55 F2 | 	cmps	result1, #0 wc
1a458     00 1E 26 C6 |  if_b	not	local01, #0
1a45c     A7 1E 62 FC | 	wrlong	local01, fp
1a460     B8 03 90 FD | 	jmp	#LR__2183
1a464                 | LR__2171
1a464                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1a464     08 4E 05 F1 | 	add	fp, #8
1a468     A7 1E 02 FB | 	rdlong	local01, fp
1a46c     08 4E 85 F1 | 	sub	fp, #8
1a470     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a474     14 4E 05 A1 |  if_e	add	fp, #20
1a478     A7 24 02 AB |  if_e	rdlong	local04, fp
1a47c     14 4E 85 A1 |  if_e	sub	fp, #20
1a480     12 23 02 A6 |  if_e	mov	local03, local04
1a484     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a488     48 00 90 5D |  if_ne	jmp	#LR__2172
1a48c     00 1E 06 F6 | 	mov	local01, #0
1a490     A7 20 02 FB | 	rdlong	local02, fp
1a494     0C 4E 05 F1 | 	add	fp, #12
1a498     A7 12 02 FB | 	rdlong	arg01, fp
1a49c     0C 4E 85 F1 | 	sub	fp, #12
1a4a0     09 13 52 F6 | 	abs	arg01, arg01 wc
1a4a4     1F 26 C6 C9 |  if_b	decod	local05, #31
1a4a8     00 26 06 36 |  if_ae	mov	local05, #0
1a4ac     CC 9A B0 FD | 	call	#__system___float_fromuns
1a4b0     13 FB 61 F5 | 	xor	result1, local05
1a4b4     FD 14 02 F6 | 	mov	arg02, result1
1a4b8     10 13 02 F6 | 	mov	arg01, local02
1a4bc     01 16 06 F6 | 	mov	arg03, #1
1a4c0     F0 A2 B0 FD | 	call	#__system___float_cmp
1a4c4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a4c8     00 1E 26 C6 |  if_b	not	local01, #0
1a4cc     A7 1E 62 FC | 	wrlong	local01, fp
1a4d0     48 03 90 FD | 	jmp	#LR__2183
1a4d4                 | LR__2172
1a4d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1a4d4     08 4E 05 F1 | 	add	fp, #8
1a4d8     A7 1E 02 FB | 	rdlong	local01, fp
1a4dc     08 4E 85 F1 | 	sub	fp, #8
1a4e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a4e4     14 4E 05 A1 |  if_e	add	fp, #20
1a4e8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a4ec     14 4E 85 A1 |  if_e	sub	fp, #20
1a4f0     12 23 02 A6 |  if_e	mov	local03, local04
1a4f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a4f8     38 00 90 5D |  if_ne	jmp	#LR__2173
1a4fc     00 1E 06 F6 | 	mov	local01, #0
1a500     A7 20 02 FB | 	rdlong	local02, fp
1a504     0C 4E 05 F1 | 	add	fp, #12
1a508     A7 12 02 FB | 	rdlong	arg01, fp
1a50c     0C 4E 85 F1 | 	sub	fp, #12
1a510     68 9A B0 FD | 	call	#__system___float_fromuns
1a514     FD 14 02 F6 | 	mov	arg02, result1
1a518     10 13 02 F6 | 	mov	arg01, local02
1a51c     01 16 06 F6 | 	mov	arg03, #1
1a520     90 A2 B0 FD | 	call	#__system___float_cmp
1a524     00 FA 55 F2 | 	cmps	result1, #0 wc
1a528     00 1E 26 C6 |  if_b	not	local01, #0
1a52c     A7 1E 62 FC | 	wrlong	local01, fp
1a530     E8 02 90 FD | 	jmp	#LR__2183
1a534                 | LR__2173
1a534                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1a534     08 4E 05 F1 | 	add	fp, #8
1a538     A7 1E 02 FB | 	rdlong	local01, fp
1a53c     08 4E 85 F1 | 	sub	fp, #8
1a540     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a544     14 4E 05 A1 |  if_e	add	fp, #20
1a548     A7 24 02 AB |  if_e	rdlong	local04, fp
1a54c     14 4E 85 A1 |  if_e	sub	fp, #20
1a550     12 23 02 A6 |  if_e	mov	local03, local04
1a554     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a558     44 00 90 5D |  if_ne	jmp	#LR__2174
1a55c     00 1E 06 F6 | 	mov	local01, #0
1a560     A7 12 02 FB | 	rdlong	arg01, fp
1a564     09 13 52 F6 | 	abs	arg01, arg01 wc
1a568     1F 26 C6 C9 |  if_b	decod	local05, #31
1a56c     00 26 06 36 |  if_ae	mov	local05, #0
1a570     08 9A B0 FD | 	call	#__system___float_fromuns
1a574     13 FB 61 F5 | 	xor	result1, local05
1a578     FD 12 02 F6 | 	mov	arg01, result1
1a57c     0C 4E 05 F1 | 	add	fp, #12
1a580     A7 14 02 FB | 	rdlong	arg02, fp
1a584     0C 4E 85 F1 | 	sub	fp, #12
1a588     01 16 06 F6 | 	mov	arg03, #1
1a58c     24 A2 B0 FD | 	call	#__system___float_cmp
1a590     00 FA 55 F2 | 	cmps	result1, #0 wc
1a594     00 1E 26 C6 |  if_b	not	local01, #0
1a598     A7 1E 62 FC | 	wrlong	local01, fp
1a59c     7C 02 90 FD | 	jmp	#LR__2183
1a5a0                 | LR__2174
1a5a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1a5a0     08 4E 05 F1 | 	add	fp, #8
1a5a4     A7 1E 02 FB | 	rdlong	local01, fp
1a5a8     08 4E 85 F1 | 	sub	fp, #8
1a5ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a5b0     14 4E 05 A1 |  if_e	add	fp, #20
1a5b4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a5b8     14 4E 85 A1 |  if_e	sub	fp, #20
1a5bc     12 23 02 A6 |  if_e	mov	local03, local04
1a5c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a5c4     20 00 90 5D |  if_ne	jmp	#LR__2175
1a5c8     A7 20 02 FB | 	rdlong	local02, fp
1a5cc     0C 4E 05 F1 | 	add	fp, #12
1a5d0     A7 22 02 FB | 	rdlong	local03, fp
1a5d4     0C 4E 85 F1 | 	sub	fp, #12
1a5d8     11 21 52 F2 | 	cmps	local02, local03 wc
1a5dc     0F 1F A2 F1 | 	subx	local01, local01
1a5e0     A7 1E 62 FC | 	wrlong	local01, fp
1a5e4     34 02 90 FD | 	jmp	#LR__2183
1a5e8                 | LR__2175
1a5e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1a5e8     08 4E 05 F1 | 	add	fp, #8
1a5ec     A7 1E 02 FB | 	rdlong	local01, fp
1a5f0     08 4E 85 F1 | 	sub	fp, #8
1a5f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a5f8     14 4E 05 A1 |  if_e	add	fp, #20
1a5fc     A7 24 02 AB |  if_e	rdlong	local04, fp
1a600     14 4E 85 A1 |  if_e	sub	fp, #20
1a604     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a608     20 00 90 5D |  if_ne	jmp	#LR__2176
1a60c     A7 20 02 FB | 	rdlong	local02, fp
1a610     0C 4E 05 F1 | 	add	fp, #12
1a614     A7 22 02 FB | 	rdlong	local03, fp
1a618     0C 4E 85 F1 | 	sub	fp, #12
1a61c     11 21 52 F2 | 	cmps	local02, local03 wc
1a620     0F 1F A2 F1 | 	subx	local01, local01
1a624     A7 1E 62 FC | 	wrlong	local01, fp
1a628     F0 01 90 FD | 	jmp	#LR__2183
1a62c                 | LR__2176
1a62c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1a62c     08 4E 05 F1 | 	add	fp, #8
1a630     A7 1E 02 FB | 	rdlong	local01, fp
1a634     08 4E 85 F1 | 	sub	fp, #8
1a638     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a63c     14 4E 05 A1 |  if_e	add	fp, #20
1a640     A7 22 02 AB |  if_e	rdlong	local03, fp
1a644     14 4E 85 A1 |  if_e	sub	fp, #20
1a648     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a64c     34 00 90 5D |  if_ne	jmp	#LR__2177
1a650     00 1E 06 F6 | 	mov	local01, #0
1a654     A7 12 02 FB | 	rdlong	arg01, fp
1a658     20 99 B0 FD | 	call	#__system___float_fromuns
1a65c     FD 12 02 F6 | 	mov	arg01, result1
1a660     0C 4E 05 F1 | 	add	fp, #12
1a664     A7 14 02 FB | 	rdlong	arg02, fp
1a668     0C 4E 85 F1 | 	sub	fp, #12
1a66c     01 16 06 F6 | 	mov	arg03, #1
1a670     40 A1 B0 FD | 	call	#__system___float_cmp
1a674     00 FA 55 F2 | 	cmps	result1, #0 wc
1a678     00 1E 26 C6 |  if_b	not	local01, #0
1a67c     A7 1E 62 FC | 	wrlong	local01, fp
1a680     98 01 90 FD | 	jmp	#LR__2183
1a684                 | LR__2177
1a684                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1a684     08 4E 05 F1 | 	add	fp, #8
1a688     A7 1E 02 FB | 	rdlong	local01, fp
1a68c     08 4E 85 F1 | 	sub	fp, #8
1a690     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a694     14 4E 05 A1 |  if_e	add	fp, #20
1a698     A7 22 02 AB |  if_e	rdlong	local03, fp
1a69c     14 4E 85 A1 |  if_e	sub	fp, #20
1a6a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a6a4     20 00 90 5D |  if_ne	jmp	#LR__2178
1a6a8     A7 20 02 FB | 	rdlong	local02, fp
1a6ac     0C 4E 05 F1 | 	add	fp, #12
1a6b0     A7 22 02 FB | 	rdlong	local03, fp
1a6b4     0C 4E 85 F1 | 	sub	fp, #12
1a6b8     11 21 52 F2 | 	cmps	local02, local03 wc
1a6bc     0F 1F A2 F1 | 	subx	local01, local01
1a6c0     A7 1E 62 FC | 	wrlong	local01, fp
1a6c4     54 01 90 FD | 	jmp	#LR__2183
1a6c8                 | LR__2178
1a6c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1a6c8     08 4E 05 F1 | 	add	fp, #8
1a6cc     A7 1E 02 FB | 	rdlong	local01, fp
1a6d0     08 4E 85 F1 | 	sub	fp, #8
1a6d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a6d8     14 4E 05 A1 |  if_e	add	fp, #20
1a6dc     A7 22 02 AB |  if_e	rdlong	local03, fp
1a6e0     14 4E 85 A1 |  if_e	sub	fp, #20
1a6e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a6e8     20 00 90 5D |  if_ne	jmp	#LR__2179
1a6ec     A7 20 02 FB | 	rdlong	local02, fp
1a6f0     0C 4E 05 F1 | 	add	fp, #12
1a6f4     A7 22 02 FB | 	rdlong	local03, fp
1a6f8     0C 4E 85 F1 | 	sub	fp, #12
1a6fc     11 21 12 F2 | 	cmp	local02, local03 wc
1a700     0F 1F A2 F1 | 	subx	local01, local01
1a704     A7 1E 62 FC | 	wrlong	local01, fp
1a708     10 01 90 FD | 	jmp	#LR__2183
1a70c                 | LR__2179
1a70c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1a70c     08 4E 05 F1 | 	add	fp, #8
1a710     A7 1E 02 FB | 	rdlong	local01, fp
1a714     08 4E 85 F1 | 	sub	fp, #8
1a718     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a71c     14 4E 05 A1 |  if_e	add	fp, #20
1a720     A7 22 02 AB |  if_e	rdlong	local03, fp
1a724     14 4E 85 A1 |  if_e	sub	fp, #20
1a728     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a72c     30 00 90 5D |  if_ne	jmp	#LR__2180
1a730     00 1E 06 F6 | 	mov	local01, #0
1a734     A7 12 02 FB | 	rdlong	arg01, fp
1a738     54 12 BF FD | 	call	#_convertstring
1a73c     FD 12 02 F6 | 	mov	arg01, result1
1a740     0C 4E 05 F1 | 	add	fp, #12
1a744     A7 14 02 FB | 	rdlong	arg02, fp
1a748     0C 4E 85 F1 | 	sub	fp, #12
1a74c     9C 6E B0 FD | 	call	#__system___string_cmp
1a750     00 FA 55 F2 | 	cmps	result1, #0 wc
1a754     00 1E 26 C6 |  if_b	not	local01, #0
1a758     A7 1E 62 FC | 	wrlong	local01, fp
1a75c     BC 00 90 FD | 	jmp	#LR__2183
1a760                 | LR__2180
1a760                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1a760     08 4E 05 F1 | 	add	fp, #8
1a764     A7 1E 02 FB | 	rdlong	local01, fp
1a768     08 4E 85 F1 | 	sub	fp, #8
1a76c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a770     14 4E 05 A1 |  if_e	add	fp, #20
1a774     A7 22 02 AB |  if_e	rdlong	local03, fp
1a778     14 4E 85 A1 |  if_e	sub	fp, #20
1a77c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a780     34 00 90 5D |  if_ne	jmp	#LR__2181
1a784     00 1E 06 F6 | 	mov	local01, #0
1a788     A7 20 02 FB | 	rdlong	local02, fp
1a78c     0C 4E 05 F1 | 	add	fp, #12
1a790     A7 12 02 FB | 	rdlong	arg01, fp
1a794     0C 4E 85 F1 | 	sub	fp, #12
1a798     F4 11 BF FD | 	call	#_convertstring
1a79c     FD 14 02 F6 | 	mov	arg02, result1
1a7a0     10 13 02 F6 | 	mov	arg01, local02
1a7a4     44 6E B0 FD | 	call	#__system___string_cmp
1a7a8     00 FA 55 F2 | 	cmps	result1, #0 wc
1a7ac     00 1E 26 C6 |  if_b	not	local01, #0
1a7b0     A7 1E 62 FC | 	wrlong	local01, fp
1a7b4     64 00 90 FD | 	jmp	#LR__2183
1a7b8                 | LR__2181
1a7b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1a7b8     08 4E 05 F1 | 	add	fp, #8
1a7bc     A7 1E 02 FB | 	rdlong	local01, fp
1a7c0     08 4E 85 F1 | 	sub	fp, #8
1a7c4     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a7c8     14 4E 05 A1 |  if_e	add	fp, #20
1a7cc     A7 22 02 AB |  if_e	rdlong	local03, fp
1a7d0     14 4E 85 A1 |  if_e	sub	fp, #20
1a7d4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a7d8     3C 00 90 5D |  if_ne	jmp	#LR__2182
1a7dc     00 1E 06 F6 | 	mov	local01, #0
1a7e0     A7 12 02 FB | 	rdlong	arg01, fp
1a7e4     A8 11 BF FD | 	call	#_convertstring
1a7e8     FD 20 02 F6 | 	mov	local02, result1
1a7ec     0C 4E 05 F1 | 	add	fp, #12
1a7f0     A7 12 02 FB | 	rdlong	arg01, fp
1a7f4     0C 4E 85 F1 | 	sub	fp, #12
1a7f8     94 11 BF FD | 	call	#_convertstring
1a7fc     FD 14 02 F6 | 	mov	arg02, result1
1a800     10 13 02 F6 | 	mov	arg01, local02
1a804     E4 6D B0 FD | 	call	#__system___string_cmp
1a808     00 FA 55 F2 | 	cmps	result1, #0 wc
1a80c     00 1E 26 C6 |  if_b	not	local01, #0
1a810     A7 1E 62 FC | 	wrlong	local01, fp
1a814     04 00 90 FD | 	jmp	#LR__2183
1a818                 | LR__2182
1a818     A7 00 68 FC | 	wrlong	#0, fp
1a81c                 | LR__2183
1a81c     08 4E 05 F1 | 	add	fp, #8
1a820     A7 38 68 FC | 	wrlong	#28, fp
1a824     08 4E 85 F1 | 	sub	fp, #8
1a828     A7 12 02 F6 | 	mov	arg01, fp
1a82c     80 10 BF FD | 	call	#_push
1a830     A7 F0 03 F6 | 	mov	ptra, fp
1a834     B2 00 A0 FD | 	call	#popregs_
1a838                 | _do_lt_ret
1a838     2D 00 64 FD | 	ret
1a83c                 | 
1a83c                 | ' 
1a83c                 | ' '--------------------------------- minus (-)
1a83c                 | ' 
1a83c                 | ' sub do_minus
1a83c                 | _do_minus
1a83c     05 4A 05 F6 | 	mov	COUNT_, #5
1a840     A8 00 A0 FD | 	call	#pushregs_
1a844     18 F0 07 F1 | 	add	ptra, #24
1a848     CC 0F BF FD | 	call	#_pop
1a84c     FD 1E 02 F6 | 	mov	local01, result1
1a850     FE 20 02 F6 | 	mov	local02, result2
1a854     FF 22 02 F6 | 	mov	local03, result3
1a858     0C 4E 05 F1 | 	add	fp, #12
1a85c     A7 1E 62 FC | 	wrlong	local01, fp
1a860     04 4E 05 F1 | 	add	fp, #4
1a864     A7 20 62 FC | 	wrlong	local02, fp
1a868     04 4E 05 F1 | 	add	fp, #4
1a86c     A7 22 62 FC | 	wrlong	local03, fp
1a870     14 4E 85 F1 | 	sub	fp, #20
1a874     A0 0F BF FD | 	call	#_pop
1a878     FF 22 02 F6 | 	mov	local03, result3
1a87c     A7 FA 61 FC | 	wrlong	result1, fp
1a880     04 4E 05 F1 | 	add	fp, #4
1a884     A7 FC 61 FC | 	wrlong	result2, fp
1a888     04 4E 05 F1 | 	add	fp, #4
1a88c     A7 22 62 FC | 	wrlong	local03, fp
1a890                 | ' 
1a890                 | ' t2=pop()
1a890                 | ' t1=pop()
1a890                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1a890     08 4E 85 F1 | 	sub	fp, #8
1a894     1D 22 0E F2 | 	cmp	local03, #29 wz
1a898     14 4E 05 A1 |  if_e	add	fp, #20
1a89c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a8a0     14 4E 85 A1 |  if_e	sub	fp, #20
1a8a4     12 23 02 A6 |  if_e	mov	local03, local04
1a8a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a8ac     5C 00 90 5D |  if_ne	jmp	#LR__2191
1a8b0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1a8b0     0C 4E 05 F1 | 	add	fp, #12
1a8b4     A7 1E 02 FB | 	rdlong	local01, fp
1a8b8     0C 4E 85 F1 | 	sub	fp, #12
1a8bc     A7 22 02 FB | 	rdlong	local03, fp
1a8c0     11 1F 12 F2 | 	cmp	local01, local03 wc
1a8c4     1C 00 90 3D |  if_ae	jmp	#LR__2190
1a8c8     A7 1E 02 FB | 	rdlong	local01, fp
1a8cc     0C 4E 05 F1 | 	add	fp, #12
1a8d0     A7 20 02 FB | 	rdlong	local02, fp
1a8d4     0C 4E 85 F1 | 	sub	fp, #12
1a8d8     10 1F 82 F1 | 	sub	local01, local02
1a8dc     A7 1E 62 FC | 	wrlong	local01, fp
1a8e0     F4 02 90 FD | 	jmp	#LR__2200
1a8e4                 | LR__2190
1a8e4     A7 1E 02 FB | 	rdlong	local01, fp
1a8e8     0C 4E 05 F1 | 	add	fp, #12
1a8ec     A7 20 02 FB | 	rdlong	local02, fp
1a8f0     0C 4E 85 F1 | 	sub	fp, #12
1a8f4     10 1F 82 F1 | 	sub	local01, local02
1a8f8     A7 1E 62 FC | 	wrlong	local01, fp
1a8fc     08 4E 05 F1 | 	add	fp, #8
1a900     A7 38 68 FC | 	wrlong	#28, fp
1a904     08 4E 85 F1 | 	sub	fp, #8
1a908     CC 02 90 FD | 	jmp	#LR__2200
1a90c                 | LR__2191
1a90c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1a90c     08 4E 05 F1 | 	add	fp, #8
1a910     A7 1E 02 FB | 	rdlong	local01, fp
1a914     08 4E 85 F1 | 	sub	fp, #8
1a918     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a91c     14 4E 05 A1 |  if_e	add	fp, #20
1a920     A7 24 02 AB |  if_e	rdlong	local04, fp
1a924     14 4E 85 A1 |  if_e	sub	fp, #20
1a928     12 23 02 A6 |  if_e	mov	local03, local04
1a92c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a930     28 00 90 5D |  if_ne	jmp	#LR__2192
1a934     A7 1E 02 FB | 	rdlong	local01, fp
1a938     0C 4E 05 F1 | 	add	fp, #12
1a93c     A7 20 02 FB | 	rdlong	local02, fp
1a940     0C 4E 85 F1 | 	sub	fp, #12
1a944     10 1F 82 F1 | 	sub	local01, local02
1a948     A7 1E 62 FC | 	wrlong	local01, fp
1a94c     08 4E 05 F1 | 	add	fp, #8
1a950     A7 38 68 FC | 	wrlong	#28, fp
1a954     08 4E 85 F1 | 	sub	fp, #8
1a958     7C 02 90 FD | 	jmp	#LR__2200
1a95c                 | LR__2192
1a95c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1a95c     08 4E 05 F1 | 	add	fp, #8
1a960     A7 1E 02 FB | 	rdlong	local01, fp
1a964     08 4E 85 F1 | 	sub	fp, #8
1a968     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a96c     14 4E 05 A1 |  if_e	add	fp, #20
1a970     A7 24 02 AB |  if_e	rdlong	local04, fp
1a974     14 4E 85 A1 |  if_e	sub	fp, #20
1a978     12 23 02 A6 |  if_e	mov	local03, local04
1a97c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a980     34 00 90 5D |  if_ne	jmp	#LR__2193
1a984     A7 12 02 FB | 	rdlong	arg01, fp
1a988     F0 95 B0 FD | 	call	#__system___float_fromuns
1a98c     FD 12 02 F6 | 	mov	arg01, result1
1a990     0C 4E 05 F1 | 	add	fp, #12
1a994     A7 14 02 FB | 	rdlong	arg02, fp
1a998     0C 4E 85 F1 | 	sub	fp, #12
1a99c     1F 14 E6 F4 | 	bitnot	arg02, #31
1a9a0     0C 96 B0 FD | 	call	#__system___float_add
1a9a4     A7 FA 61 FC | 	wrlong	result1, fp
1a9a8     08 4E 05 F1 | 	add	fp, #8
1a9ac     A7 3C 68 FC | 	wrlong	#30, fp
1a9b0     08 4E 85 F1 | 	sub	fp, #8
1a9b4     20 02 90 FD | 	jmp	#LR__2200
1a9b8                 | LR__2193
1a9b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1a9b8     08 4E 05 F1 | 	add	fp, #8
1a9bc     A7 1E 02 FB | 	rdlong	local01, fp
1a9c0     08 4E 85 F1 | 	sub	fp, #8
1a9c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a9c8     14 4E 05 A1 |  if_e	add	fp, #20
1a9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
1a9d0     14 4E 85 A1 |  if_e	sub	fp, #20
1a9d4     12 23 02 A6 |  if_e	mov	local03, local04
1a9d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a9dc     1C 00 90 5D |  if_ne	jmp	#LR__2194
1a9e0     A7 1E 02 FB | 	rdlong	local01, fp
1a9e4     0C 4E 05 F1 | 	add	fp, #12
1a9e8     A7 20 02 FB | 	rdlong	local02, fp
1a9ec     0C 4E 85 F1 | 	sub	fp, #12
1a9f0     10 1F 82 F1 | 	sub	local01, local02
1a9f4     A7 1E 62 FC | 	wrlong	local01, fp
1a9f8     DC 01 90 FD | 	jmp	#LR__2200
1a9fc                 | LR__2194
1a9fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1a9fc     08 4E 05 F1 | 	add	fp, #8
1aa00     A7 1E 02 FB | 	rdlong	local01, fp
1aa04     08 4E 85 F1 | 	sub	fp, #8
1aa08     1C 1E 0E F2 | 	cmp	local01, #28 wz
1aa0c     14 4E 05 A1 |  if_e	add	fp, #20
1aa10     A7 24 02 AB |  if_e	rdlong	local04, fp
1aa14     14 4E 85 A1 |  if_e	sub	fp, #20
1aa18     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1aa1c     1C 00 90 5D |  if_ne	jmp	#LR__2195
1aa20     A7 1E 02 FB | 	rdlong	local01, fp
1aa24     0C 4E 05 F1 | 	add	fp, #12
1aa28     A7 20 02 FB | 	rdlong	local02, fp
1aa2c     0C 4E 85 F1 | 	sub	fp, #12
1aa30     10 1F 82 F1 | 	sub	local01, local02
1aa34     A7 1E 62 FC | 	wrlong	local01, fp
1aa38     9C 01 90 FD | 	jmp	#LR__2200
1aa3c                 | LR__2195
1aa3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1aa3c     08 4E 05 F1 | 	add	fp, #8
1aa40     A7 1E 02 FB | 	rdlong	local01, fp
1aa44     08 4E 85 F1 | 	sub	fp, #8
1aa48     1C 1E 0E F2 | 	cmp	local01, #28 wz
1aa4c     14 4E 05 A1 |  if_e	add	fp, #20
1aa50     A7 22 02 AB |  if_e	rdlong	local03, fp
1aa54     14 4E 85 A1 |  if_e	sub	fp, #20
1aa58     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1aa5c     44 00 90 5D |  if_ne	jmp	#LR__2196
1aa60     A7 12 02 FB | 	rdlong	arg01, fp
1aa64     09 13 52 F6 | 	abs	arg01, arg01 wc
1aa68     1F 26 C6 C9 |  if_b	decod	local05, #31
1aa6c     00 26 06 36 |  if_ae	mov	local05, #0
1aa70     08 95 B0 FD | 	call	#__system___float_fromuns
1aa74     13 FB 61 F5 | 	xor	result1, local05
1aa78     FD 12 02 F6 | 	mov	arg01, result1
1aa7c     0C 4E 05 F1 | 	add	fp, #12
1aa80     A7 14 02 FB | 	rdlong	arg02, fp
1aa84     0C 4E 85 F1 | 	sub	fp, #12
1aa88     1F 14 E6 F4 | 	bitnot	arg02, #31
1aa8c     20 95 B0 FD | 	call	#__system___float_add
1aa90     A7 FA 61 FC | 	wrlong	result1, fp
1aa94     08 4E 05 F1 | 	add	fp, #8
1aa98     A7 3C 68 FC | 	wrlong	#30, fp
1aa9c     08 4E 85 F1 | 	sub	fp, #8
1aaa0     34 01 90 FD | 	jmp	#LR__2200
1aaa4                 | LR__2196
1aaa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1aaa4     08 4E 05 F1 | 	add	fp, #8
1aaa8     A7 1E 02 FB | 	rdlong	local01, fp
1aaac     08 4E 85 F1 | 	sub	fp, #8
1aab0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1aab4     14 4E 05 A1 |  if_e	add	fp, #20
1aab8     A7 22 02 AB |  if_e	rdlong	local03, fp
1aabc     14 4E 85 A1 |  if_e	sub	fp, #20
1aac0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1aac4     2C 00 90 5D |  if_ne	jmp	#LR__2197
1aac8     A7 1E 02 FB | 	rdlong	local01, fp
1aacc     0C 4E 05 F1 | 	add	fp, #12
1aad0     A7 12 02 FB | 	rdlong	arg01, fp
1aad4     0C 4E 85 F1 | 	sub	fp, #12
1aad8     A0 94 B0 FD | 	call	#__system___float_fromuns
1aadc     FD 14 02 F6 | 	mov	arg02, result1
1aae0     0F 13 02 F6 | 	mov	arg01, local01
1aae4     1F 14 E6 F4 | 	bitnot	arg02, #31
1aae8     C4 94 B0 FD | 	call	#__system___float_add
1aaec     A7 FA 61 FC | 	wrlong	result1, fp
1aaf0     E4 00 90 FD | 	jmp	#LR__2200
1aaf4                 | LR__2197
1aaf4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1aaf4     08 4E 05 F1 | 	add	fp, #8
1aaf8     A7 1E 02 FB | 	rdlong	local01, fp
1aafc     08 4E 85 F1 | 	sub	fp, #8
1ab00     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ab04     14 4E 05 A1 |  if_e	add	fp, #20
1ab08     A7 22 02 AB |  if_e	rdlong	local03, fp
1ab0c     14 4E 85 A1 |  if_e	sub	fp, #20
1ab10     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1ab14     3C 00 90 5D |  if_ne	jmp	#LR__2198
1ab18     A7 1E 02 FB | 	rdlong	local01, fp
1ab1c     0C 4E 05 F1 | 	add	fp, #12
1ab20     A7 12 02 FB | 	rdlong	arg01, fp
1ab24     0C 4E 85 F1 | 	sub	fp, #12
1ab28     09 13 52 F6 | 	abs	arg01, arg01 wc
1ab2c     1F 26 C6 C9 |  if_b	decod	local05, #31
1ab30     00 26 06 36 |  if_ae	mov	local05, #0
1ab34     44 94 B0 FD | 	call	#__system___float_fromuns
1ab38     13 FB 61 F5 | 	xor	result1, local05
1ab3c     FD 14 02 F6 | 	mov	arg02, result1
1ab40     0F 13 02 F6 | 	mov	arg01, local01
1ab44     1F 14 E6 F4 | 	bitnot	arg02, #31
1ab48     64 94 B0 FD | 	call	#__system___float_add
1ab4c     A7 FA 61 FC | 	wrlong	result1, fp
1ab50     84 00 90 FD | 	jmp	#LR__2200
1ab54                 | LR__2198
1ab54                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ab54     08 4E 05 F1 | 	add	fp, #8
1ab58     A7 1E 02 FB | 	rdlong	local01, fp
1ab5c     08 4E 85 F1 | 	sub	fp, #8
1ab60     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ab64     14 4E 05 A1 |  if_e	add	fp, #20
1ab68     A7 22 02 AB |  if_e	rdlong	local03, fp
1ab6c     14 4E 85 A1 |  if_e	sub	fp, #20
1ab70     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ab74     20 00 90 5D |  if_ne	jmp	#LR__2199
1ab78     A7 12 02 FB | 	rdlong	arg01, fp
1ab7c     0C 4E 05 F1 | 	add	fp, #12
1ab80     A7 14 02 FB | 	rdlong	arg02, fp
1ab84     0C 4E 85 F1 | 	sub	fp, #12
1ab88     1F 14 E6 F4 | 	bitnot	arg02, #31
1ab8c     20 94 B0 FD | 	call	#__system___float_add
1ab90     A7 FA 61 FC | 	wrlong	result1, fp
1ab94     40 00 90 FD | 	jmp	#LR__2200
1ab98                 | LR__2199
1ab98                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1ab98     08 4E 05 F1 | 	add	fp, #8
1ab9c     A7 1E 02 FB | 	rdlong	local01, fp
1aba0     08 4E 85 F1 | 	sub	fp, #8
1aba4     1F 1E 0E F2 | 	cmp	local01, #31 wz
1aba8     14 4E 05 51 |  if_ne	add	fp, #20
1abac     A7 22 02 5B |  if_ne	rdlong	local03, fp
1abb0     14 4E 85 51 |  if_ne	sub	fp, #20
1abb4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1abb8     A7 06 68 AC |  if_e	wrlong	#3, fp
1abbc     08 4E 05 A1 |  if_e	add	fp, #8
1abc0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1abc4     08 4E 85 A1 |  if_e	sub	fp, #8
1abc8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1abcc     08 4E 05 51 |  if_ne	add	fp, #8
1abd0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1abd4     08 4E 85 51 |  if_ne	sub	fp, #8
1abd8                 | LR__2200
1abd8     A7 12 02 F6 | 	mov	arg01, fp
1abdc     D0 0C BF FD | 	call	#_push
1abe0     A7 F0 03 F6 | 	mov	ptra, fp
1abe4     B2 00 A0 FD | 	call	#popregs_
1abe8                 | _do_minus_ret
1abe8     2D 00 64 FD | 	ret
1abec                 | 
1abec                 | ' 
1abec                 | ' '--------------------------------- negative (-), one argument negative
1abec                 | ' 
1abec                 | ' sub do_negative
1abec                 | _do_negative
1abec     02 4A 05 F6 | 	mov	COUNT_, #2
1abf0     A8 00 A0 FD | 	call	#pushregs_
1abf4     0C F0 07 F1 | 	add	ptra, #12
1abf8     1C 0C BF FD | 	call	#_pop
1abfc     FF 1E 02 F6 | 	mov	local01, result3
1ac00     A7 FA 61 FC | 	wrlong	result1, fp
1ac04     04 4E 05 F1 | 	add	fp, #4
1ac08     A7 FC 61 FC | 	wrlong	result2, fp
1ac0c     04 4E 05 F1 | 	add	fp, #4
1ac10     A7 1E 62 FC | 	wrlong	local01, fp
1ac14                 | ' 
1ac14                 | ' t1=pop()
1ac14                 | ' if t1.result_type=result_int then 
1ac14     08 4E 85 F1 | 	sub	fp, #8
1ac18     1C 1E 0E F2 | 	cmp	local01, #28 wz
1ac1c     A7 20 02 AB |  if_e	rdlong	local02, fp
1ac20     10 1F 62 A6 |  if_e	neg	local01, local02
1ac24     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ac28     5C 00 90 AD |  if_e	jmp	#LR__2212
1ac2c     08 4E 05 F1 | 	add	fp, #8
1ac30     A7 1E 02 FB | 	rdlong	local01, fp
1ac34     08 4E 85 F1 | 	sub	fp, #8
1ac38     1D 1E 0E F2 | 	cmp	local01, #29 wz
1ac3c     1C 00 90 5D |  if_ne	jmp	#LR__2210
1ac40     A7 20 02 FB | 	rdlong	local02, fp
1ac44     10 1F 62 F6 | 	neg	local01, local02
1ac48     A7 1E 62 FC | 	wrlong	local01, fp
1ac4c     08 4E 05 F1 | 	add	fp, #8
1ac50     A7 38 68 FC | 	wrlong	#28, fp
1ac54     08 4E 85 F1 | 	sub	fp, #8
1ac58     2C 00 90 FD | 	jmp	#LR__2211
1ac5c                 | LR__2210
1ac5c     08 4E 05 F1 | 	add	fp, #8
1ac60     A7 1E 02 FB | 	rdlong	local01, fp
1ac64     08 4E 85 F1 | 	sub	fp, #8
1ac68     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ac6c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1ac70     1F FA E5 A4 |  if_e	bitnot	result1, #31
1ac74     A7 FA 61 AC |  if_e	wrlong	result1, fp
1ac78     08 4E 05 51 |  if_ne	add	fp, #8
1ac7c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ac80     08 4E 85 51 |  if_ne	sub	fp, #8
1ac84     A7 50 68 5C |  if_ne	wrlong	#40, fp
1ac88                 | LR__2211
1ac88                 | LR__2212
1ac88     A7 12 02 F6 | 	mov	arg01, fp
1ac8c     20 0C BF FD | 	call	#_push
1ac90     A7 F0 03 F6 | 	mov	ptra, fp
1ac94     B2 00 A0 FD | 	call	#popregs_
1ac98                 | _do_negative_ret
1ac98     2D 00 64 FD | 	ret
1ac9c                 | 
1ac9c                 | ' 
1ac9c                 | ' '--------------------------------- MOD (modulo)
1ac9c                 | ' 
1ac9c                 | ' sub do_mod 
1ac9c                 | _do_mod
1ac9c     01 4A 05 F6 | 	mov	COUNT_, #1
1aca0     A8 00 A0 FD | 	call	#pushregs_
1aca4     18 F0 07 F1 | 	add	ptra, #24
1aca8     6C 0B BF FD | 	call	#_pop
1acac     FD 82 02 F6 | 	mov	muldivb_, result1
1acb0     FE 80 02 F6 | 	mov	muldiva_, result2
1acb4     FF 1E 02 F6 | 	mov	local01, result3
1acb8     0C 4E 05 F1 | 	add	fp, #12
1acbc     A7 82 62 FC | 	wrlong	muldivb_, fp
1acc0     04 4E 05 F1 | 	add	fp, #4
1acc4     A7 80 62 FC | 	wrlong	muldiva_, fp
1acc8     04 4E 05 F1 | 	add	fp, #4
1accc     A7 1E 62 FC | 	wrlong	local01, fp
1acd0     14 4E 85 F1 | 	sub	fp, #20
1acd4     40 0B BF FD | 	call	#_pop
1acd8     A7 FA 61 FC | 	wrlong	result1, fp
1acdc     04 4E 05 F1 | 	add	fp, #4
1ace0     A7 FC 61 FC | 	wrlong	result2, fp
1ace4     04 4E 05 F1 | 	add	fp, #4
1ace8     A7 FE 61 FC | 	wrlong	result3, fp
1acec                 | ' 
1acec                 | ' t2=pop()
1acec                 | ' t1=pop()
1acec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1acec     08 4E 85 F1 | 	sub	fp, #8
1acf0     1F FE 0D F2 | 	cmp	result3, #31 wz
1acf4     14 4E 05 51 |  if_ne	add	fp, #20
1acf8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1acfc     14 4E 85 51 |  if_ne	sub	fp, #20
1ad00     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ad04     A7 14 68 AC |  if_e	wrlong	#10, fp
1ad08     08 4E 05 A1 |  if_e	add	fp, #8
1ad0c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ad10     08 4E 85 A1 |  if_e	sub	fp, #8
1ad14     90 01 90 AD |  if_e	jmp	#LR__2226
1ad18                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1ad18     08 4E 05 F1 | 	add	fp, #8
1ad1c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ad20     08 4E 85 F1 | 	sub	fp, #8
1ad24     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
1ad28     1C 00 90 5D |  if_ne	jmp	#LR__2220
1ad2c     08 4E 05 F1 | 	add	fp, #8
1ad30     A7 38 68 FC | 	wrlong	#28, fp
1ad34     08 4E 85 F1 | 	sub	fp, #8
1ad38     A7 12 02 FB | 	rdlong	arg01, fp
1ad3c     00 14 06 F6 | 	mov	arg02, #0
1ad40     04 9B B0 FD | 	call	#__system___float_tointeger
1ad44     A7 FA 61 FC | 	wrlong	result1, fp
1ad48                 | LR__2220
1ad48                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1ad48     14 4E 05 F1 | 	add	fp, #20
1ad4c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ad50     14 4E 85 F1 | 	sub	fp, #20
1ad54     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
1ad58     28 00 90 5D |  if_ne	jmp	#LR__2221
1ad5c     14 4E 05 F1 | 	add	fp, #20
1ad60     A7 38 68 FC | 	wrlong	#28, fp
1ad64     08 4E 85 F1 | 	sub	fp, #8
1ad68     A7 12 02 FB | 	rdlong	arg01, fp
1ad6c     0C 4E 85 F1 | 	sub	fp, #12
1ad70     00 14 06 F6 | 	mov	arg02, #0
1ad74     D0 9A B0 FD | 	call	#__system___float_tointeger
1ad78     0C 4E 05 F1 | 	add	fp, #12
1ad7c     A7 FA 61 FC | 	wrlong	result1, fp
1ad80     0C 4E 85 F1 | 	sub	fp, #12
1ad84                 | LR__2221
1ad84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1ad84     08 4E 05 F1 | 	add	fp, #8
1ad88     A7 82 02 FB | 	rdlong	muldivb_, fp
1ad8c     08 4E 85 F1 | 	sub	fp, #8
1ad90     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
1ad94     14 4E 05 A1 |  if_e	add	fp, #20
1ad98     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ad9c     14 4E 85 A1 |  if_e	sub	fp, #20
1ada0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1ada4     20 00 90 5D |  if_ne	jmp	#LR__2222
1ada8     0C 4E 05 F1 | 	add	fp, #12
1adac     A7 1E 02 FB | 	rdlong	local01, fp
1adb0     0C 4E 85 F1 | 	sub	fp, #12
1adb4     A7 82 02 FB | 	rdlong	muldivb_, fp
1adb8     0F 83 12 FD | 	qdiv	muldivb_, local01
1adbc     19 1E 62 FD | 	getqy	local01
1adc0     A7 1E 62 FC | 	wrlong	local01, fp
1adc4     E0 00 90 FD | 	jmp	#LR__2226
1adc8                 | LR__2222
1adc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1adc8     08 4E 05 F1 | 	add	fp, #8
1adcc     A7 82 02 FB | 	rdlong	muldivb_, fp
1add0     08 4E 85 F1 | 	sub	fp, #8
1add4     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
1add8     14 4E 05 A1 |  if_e	add	fp, #20
1addc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ade0     14 4E 85 A1 |  if_e	sub	fp, #20
1ade4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1ade8     2C 00 90 5D |  if_ne	jmp	#LR__2223
1adec     0C 4E 05 F1 | 	add	fp, #12
1adf0     A7 1E 02 FB | 	rdlong	local01, fp
1adf4     0C 4E 85 F1 | 	sub	fp, #12
1adf8     A7 82 02 FB | 	rdlong	muldivb_, fp
1adfc     0F 83 12 FD | 	qdiv	muldivb_, local01
1ae00     19 1E 62 FD | 	getqy	local01
1ae04     A7 1E 62 FC | 	wrlong	local01, fp
1ae08     08 4E 05 F1 | 	add	fp, #8
1ae0c     A7 38 68 FC | 	wrlong	#28, fp
1ae10     08 4E 85 F1 | 	sub	fp, #8
1ae14     90 00 90 FD | 	jmp	#LR__2226
1ae18                 | LR__2223
1ae18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1ae18     08 4E 05 F1 | 	add	fp, #8
1ae1c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ae20     08 4E 85 F1 | 	sub	fp, #8
1ae24     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
1ae28     14 4E 05 A1 |  if_e	add	fp, #20
1ae2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ae30     14 4E 85 A1 |  if_e	sub	fp, #20
1ae34     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1ae38     1C 00 90 5D |  if_ne	jmp	#LR__2224
1ae3c     A7 80 02 FB | 	rdlong	muldiva_, fp
1ae40     0C 4E 05 F1 | 	add	fp, #12
1ae44     A7 82 02 FB | 	rdlong	muldivb_, fp
1ae48     0C 4E 85 F1 | 	sub	fp, #12
1ae4c     BA 00 A0 FD | 	call	#divide_
1ae50     A7 80 62 FC | 	wrlong	muldiva_, fp
1ae54     50 00 90 FD | 	jmp	#LR__2226
1ae58                 | LR__2224
1ae58                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1ae58     08 4E 05 F1 | 	add	fp, #8
1ae5c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ae60     08 4E 85 F1 | 	sub	fp, #8
1ae64     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
1ae68     14 4E 05 A1 |  if_e	add	fp, #20
1ae6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ae70     14 4E 85 A1 |  if_e	sub	fp, #20
1ae74     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1ae78     1C 00 90 5D |  if_ne	jmp	#LR__2225
1ae7c     A7 80 02 FB | 	rdlong	muldiva_, fp
1ae80     0C 4E 05 F1 | 	add	fp, #12
1ae84     A7 82 02 FB | 	rdlong	muldivb_, fp
1ae88     0C 4E 85 F1 | 	sub	fp, #12
1ae8c     BA 00 A0 FD | 	call	#divide_
1ae90     A7 80 62 FC | 	wrlong	muldiva_, fp
1ae94     10 00 90 FD | 	jmp	#LR__2226
1ae98                 | LR__2225
1ae98     A7 16 68 FC | 	wrlong	#11, fp
1ae9c     08 4E 05 F1 | 	add	fp, #8
1aea0     A7 FE 69 FC | 	wrlong	#255, fp
1aea4     08 4E 85 F1 | 	sub	fp, #8
1aea8                 | LR__2226
1aea8     A7 12 02 F6 | 	mov	arg01, fp
1aeac     00 0A BF FD | 	call	#_push
1aeb0     A7 F0 03 F6 | 	mov	ptra, fp
1aeb4     B2 00 A0 FD | 	call	#popregs_
1aeb8                 | _do_mod_ret
1aeb8     2D 00 64 FD | 	ret
1aebc                 | 
1aebc                 | ' 
1aebc                 | ' '--------------------------------- mul (*)
1aebc                 | ' 
1aebc                 | ' sub do_mul
1aebc                 | _do_mul
1aebc     05 4A 05 F6 | 	mov	COUNT_, #5
1aec0     A8 00 A0 FD | 	call	#pushregs_
1aec4     18 F0 07 F1 | 	add	ptra, #24
1aec8     4C 09 BF FD | 	call	#_pop
1aecc     FD 1E 02 F6 | 	mov	local01, result1
1aed0     FE 20 02 F6 | 	mov	local02, result2
1aed4     FF 22 02 F6 | 	mov	local03, result3
1aed8     0C 4E 05 F1 | 	add	fp, #12
1aedc     A7 1E 62 FC | 	wrlong	local01, fp
1aee0     04 4E 05 F1 | 	add	fp, #4
1aee4     A7 20 62 FC | 	wrlong	local02, fp
1aee8     04 4E 05 F1 | 	add	fp, #4
1aeec     A7 22 62 FC | 	wrlong	local03, fp
1aef0     14 4E 85 F1 | 	sub	fp, #20
1aef4     20 09 BF FD | 	call	#_pop
1aef8     FF 22 02 F6 | 	mov	local03, result3
1aefc     A7 FA 61 FC | 	wrlong	result1, fp
1af00     04 4E 05 F1 | 	add	fp, #4
1af04     A7 FC 61 FC | 	wrlong	result2, fp
1af08     04 4E 05 F1 | 	add	fp, #4
1af0c     A7 22 62 FC | 	wrlong	local03, fp
1af10                 | ' 
1af10                 | ' t2=pop()
1af10                 | ' t1=pop()
1af10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1af10     08 4E 85 F1 | 	sub	fp, #8
1af14     1D 22 0E F2 | 	cmp	local03, #29 wz
1af18     14 4E 05 A1 |  if_e	add	fp, #20
1af1c     A7 24 02 AB |  if_e	rdlong	local04, fp
1af20     14 4E 85 A1 |  if_e	sub	fp, #20
1af24     12 23 02 A6 |  if_e	mov	local03, local04
1af28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1af2c     20 00 90 5D |  if_ne	jmp	#LR__2230
1af30     A7 20 02 FB | 	rdlong	local02, fp
1af34     0C 4E 05 F1 | 	add	fp, #12
1af38     A7 22 02 FB | 	rdlong	local03, fp
1af3c     11 21 02 FD | 	qmul	local02, local03
1af40     0C 4E 85 F1 | 	sub	fp, #12
1af44     18 1E 62 FD | 	getqx	local01
1af48     A7 1E 62 FC | 	wrlong	local01, fp
1af4c     C4 02 90 FD | 	jmp	#LR__2239
1af50                 | LR__2230
1af50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1af50     08 4E 05 F1 | 	add	fp, #8
1af54     A7 1E 02 FB | 	rdlong	local01, fp
1af58     08 4E 85 F1 | 	sub	fp, #8
1af5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1af60     14 4E 05 A1 |  if_e	add	fp, #20
1af64     A7 24 02 AB |  if_e	rdlong	local04, fp
1af68     14 4E 85 A1 |  if_e	sub	fp, #20
1af6c     12 23 02 A6 |  if_e	mov	local03, local04
1af70     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1af74     2C 00 90 5D |  if_ne	jmp	#LR__2231
1af78     A7 20 02 FB | 	rdlong	local02, fp
1af7c     0C 4E 05 F1 | 	add	fp, #12
1af80     A7 22 02 FB | 	rdlong	local03, fp
1af84     11 21 02 FD | 	qmul	local02, local03
1af88     0C 4E 85 F1 | 	sub	fp, #12
1af8c     18 1E 62 FD | 	getqx	local01
1af90     A7 1E 62 FC | 	wrlong	local01, fp
1af94     08 4E 05 F1 | 	add	fp, #8
1af98     A7 38 68 FC | 	wrlong	#28, fp
1af9c     08 4E 85 F1 | 	sub	fp, #8
1afa0     70 02 90 FD | 	jmp	#LR__2239
1afa4                 | LR__2231
1afa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1afa4     08 4E 05 F1 | 	add	fp, #8
1afa8     A7 1E 02 FB | 	rdlong	local01, fp
1afac     08 4E 85 F1 | 	sub	fp, #8
1afb0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1afb4     14 4E 05 A1 |  if_e	add	fp, #20
1afb8     A7 24 02 AB |  if_e	rdlong	local04, fp
1afbc     14 4E 85 A1 |  if_e	sub	fp, #20
1afc0     12 23 02 A6 |  if_e	mov	local03, local04
1afc4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1afc8     30 00 90 5D |  if_ne	jmp	#LR__2232
1afcc     A7 12 02 FB | 	rdlong	arg01, fp
1afd0     A8 8F B0 FD | 	call	#__system___float_fromuns
1afd4     FD 12 02 F6 | 	mov	arg01, result1
1afd8     0C 4E 05 F1 | 	add	fp, #12
1afdc     A7 14 02 FB | 	rdlong	arg02, fp
1afe0     0C 4E 85 F1 | 	sub	fp, #12
1afe4     98 93 B0 FD | 	call	#__system___float_mul
1afe8     A7 FA 61 FC | 	wrlong	result1, fp
1afec     08 4E 05 F1 | 	add	fp, #8
1aff0     A7 3C 68 FC | 	wrlong	#30, fp
1aff4     08 4E 85 F1 | 	sub	fp, #8
1aff8     18 02 90 FD | 	jmp	#LR__2239
1affc                 | LR__2232
1affc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1affc     08 4E 05 F1 | 	add	fp, #8
1b000     A7 1E 02 FB | 	rdlong	local01, fp
1b004     08 4E 85 F1 | 	sub	fp, #8
1b008     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b00c     14 4E 05 A1 |  if_e	add	fp, #20
1b010     A7 24 02 AB |  if_e	rdlong	local04, fp
1b014     14 4E 85 A1 |  if_e	sub	fp, #20
1b018     12 23 02 A6 |  if_e	mov	local03, local04
1b01c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b020     20 00 90 5D |  if_ne	jmp	#LR__2233
1b024     A7 20 02 FB | 	rdlong	local02, fp
1b028     0C 4E 05 F1 | 	add	fp, #12
1b02c     A7 22 02 FB | 	rdlong	local03, fp
1b030     11 21 02 FD | 	qmul	local02, local03
1b034     0C 4E 85 F1 | 	sub	fp, #12
1b038     18 1E 62 FD | 	getqx	local01
1b03c     A7 1E 62 FC | 	wrlong	local01, fp
1b040     D0 01 90 FD | 	jmp	#LR__2239
1b044                 | LR__2233
1b044                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1b044     08 4E 05 F1 | 	add	fp, #8
1b048     A7 1E 02 FB | 	rdlong	local01, fp
1b04c     08 4E 85 F1 | 	sub	fp, #8
1b050     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b054     14 4E 05 A1 |  if_e	add	fp, #20
1b058     A7 24 02 AB |  if_e	rdlong	local04, fp
1b05c     14 4E 85 A1 |  if_e	sub	fp, #20
1b060     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1b064     20 00 90 5D |  if_ne	jmp	#LR__2234
1b068     A7 20 02 FB | 	rdlong	local02, fp
1b06c     0C 4E 05 F1 | 	add	fp, #12
1b070     A7 22 02 FB | 	rdlong	local03, fp
1b074     11 21 02 FD | 	qmul	local02, local03
1b078     0C 4E 85 F1 | 	sub	fp, #12
1b07c     18 1E 62 FD | 	getqx	local01
1b080     A7 1E 62 FC | 	wrlong	local01, fp
1b084     8C 01 90 FD | 	jmp	#LR__2239
1b088                 | LR__2234
1b088                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1b088     08 4E 05 F1 | 	add	fp, #8
1b08c     A7 1E 02 FB | 	rdlong	local01, fp
1b090     08 4E 85 F1 | 	sub	fp, #8
1b094     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b098     14 4E 05 A1 |  if_e	add	fp, #20
1b09c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b0a0     14 4E 85 A1 |  if_e	sub	fp, #20
1b0a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b0a8     40 00 90 5D |  if_ne	jmp	#LR__2235
1b0ac     A7 12 02 FB | 	rdlong	arg01, fp
1b0b0     09 13 52 F6 | 	abs	arg01, arg01 wc
1b0b4     1F 26 C6 C9 |  if_b	decod	local05, #31
1b0b8     00 26 06 36 |  if_ae	mov	local05, #0
1b0bc     BC 8E B0 FD | 	call	#__system___float_fromuns
1b0c0     13 FB 61 F5 | 	xor	result1, local05
1b0c4     FD 12 02 F6 | 	mov	arg01, result1
1b0c8     0C 4E 05 F1 | 	add	fp, #12
1b0cc     A7 14 02 FB | 	rdlong	arg02, fp
1b0d0     0C 4E 85 F1 | 	sub	fp, #12
1b0d4     A8 92 B0 FD | 	call	#__system___float_mul
1b0d8     A7 FA 61 FC | 	wrlong	result1, fp
1b0dc     08 4E 05 F1 | 	add	fp, #8
1b0e0     A7 3C 68 FC | 	wrlong	#30, fp
1b0e4     08 4E 85 F1 | 	sub	fp, #8
1b0e8     28 01 90 FD | 	jmp	#LR__2239
1b0ec                 | LR__2235
1b0ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1b0ec     08 4E 05 F1 | 	add	fp, #8
1b0f0     A7 1E 02 FB | 	rdlong	local01, fp
1b0f4     08 4E 85 F1 | 	sub	fp, #8
1b0f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b0fc     14 4E 05 A1 |  if_e	add	fp, #20
1b100     A7 22 02 AB |  if_e	rdlong	local03, fp
1b104     14 4E 85 A1 |  if_e	sub	fp, #20
1b108     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b10c     28 00 90 5D |  if_ne	jmp	#LR__2236
1b110     A7 1E 02 FB | 	rdlong	local01, fp
1b114     0C 4E 05 F1 | 	add	fp, #12
1b118     A7 12 02 FB | 	rdlong	arg01, fp
1b11c     0C 4E 85 F1 | 	sub	fp, #12
1b120     58 8E B0 FD | 	call	#__system___float_fromuns
1b124     FD 14 02 F6 | 	mov	arg02, result1
1b128     0F 13 02 F6 | 	mov	arg01, local01
1b12c     50 92 B0 FD | 	call	#__system___float_mul
1b130     A7 FA 61 FC | 	wrlong	result1, fp
1b134     DC 00 90 FD | 	jmp	#LR__2239
1b138                 | LR__2236
1b138                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1b138     08 4E 05 F1 | 	add	fp, #8
1b13c     A7 1E 02 FB | 	rdlong	local01, fp
1b140     08 4E 85 F1 | 	sub	fp, #8
1b144     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b148     14 4E 05 A1 |  if_e	add	fp, #20
1b14c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b150     14 4E 85 A1 |  if_e	sub	fp, #20
1b154     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b158     38 00 90 5D |  if_ne	jmp	#LR__2237
1b15c     A7 1E 02 FB | 	rdlong	local01, fp
1b160     0C 4E 05 F1 | 	add	fp, #12
1b164     A7 12 02 FB | 	rdlong	arg01, fp
1b168     0C 4E 85 F1 | 	sub	fp, #12
1b16c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b170     1F 26 C6 C9 |  if_b	decod	local05, #31
1b174     00 26 06 36 |  if_ae	mov	local05, #0
1b178     00 8E B0 FD | 	call	#__system___float_fromuns
1b17c     13 FB 61 F5 | 	xor	result1, local05
1b180     FD 14 02 F6 | 	mov	arg02, result1
1b184     0F 13 02 F6 | 	mov	arg01, local01
1b188     F4 91 B0 FD | 	call	#__system___float_mul
1b18c     A7 FA 61 FC | 	wrlong	result1, fp
1b190     80 00 90 FD | 	jmp	#LR__2239
1b194                 | LR__2237
1b194                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1b194     08 4E 05 F1 | 	add	fp, #8
1b198     A7 1E 02 FB | 	rdlong	local01, fp
1b19c     08 4E 85 F1 | 	sub	fp, #8
1b1a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b1a4     14 4E 05 A1 |  if_e	add	fp, #20
1b1a8     A7 22 02 AB |  if_e	rdlong	local03, fp
1b1ac     14 4E 85 A1 |  if_e	sub	fp, #20
1b1b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b1b4     1C 00 90 5D |  if_ne	jmp	#LR__2238
1b1b8     A7 12 02 FB | 	rdlong	arg01, fp
1b1bc     0C 4E 05 F1 | 	add	fp, #12
1b1c0     A7 14 02 FB | 	rdlong	arg02, fp
1b1c4     0C 4E 85 F1 | 	sub	fp, #12
1b1c8     B4 91 B0 FD | 	call	#__system___float_mul
1b1cc     A7 FA 61 FC | 	wrlong	result1, fp
1b1d0     40 00 90 FD | 	jmp	#LR__2239
1b1d4                 | LR__2238
1b1d4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1b1d4     08 4E 05 F1 | 	add	fp, #8
1b1d8     A7 1E 02 FB | 	rdlong	local01, fp
1b1dc     08 4E 85 F1 | 	sub	fp, #8
1b1e0     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b1e4     14 4E 05 51 |  if_ne	add	fp, #20
1b1e8     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b1ec     14 4E 85 51 |  if_ne	sub	fp, #20
1b1f0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1b1f4     A7 10 68 AC |  if_e	wrlong	#8, fp
1b1f8     08 4E 05 A1 |  if_e	add	fp, #8
1b1fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b200     08 4E 85 A1 |  if_e	sub	fp, #8
1b204     A7 12 68 5C |  if_ne	wrlong	#9, fp
1b208     08 4E 05 51 |  if_ne	add	fp, #8
1b20c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b210     08 4E 85 51 |  if_ne	sub	fp, #8
1b214                 | LR__2239
1b214     A7 12 02 F6 | 	mov	arg01, fp
1b218     94 06 BF FD | 	call	#_push
1b21c     A7 F0 03 F6 | 	mov	ptra, fp
1b220     B2 00 A0 FD | 	call	#popregs_
1b224                 | _do_mul_ret
1b224     2D 00 64 FD | 	ret
1b228                 | 
1b228                 | ' 
1b228                 | ' '--------------------------------- not equal (<>)
1b228                 | ' 
1b228                 | ' sub do_ne
1b228                 | _do_ne
1b228     05 4A 05 F6 | 	mov	COUNT_, #5
1b22c     A8 00 A0 FD | 	call	#pushregs_
1b230     18 F0 07 F1 | 	add	ptra, #24
1b234     E0 05 BF FD | 	call	#_pop
1b238     FD 1E 02 F6 | 	mov	local01, result1
1b23c     FE 20 02 F6 | 	mov	local02, result2
1b240     FF 22 02 F6 | 	mov	local03, result3
1b244     0C 4E 05 F1 | 	add	fp, #12
1b248     A7 1E 62 FC | 	wrlong	local01, fp
1b24c     04 4E 05 F1 | 	add	fp, #4
1b250     A7 20 62 FC | 	wrlong	local02, fp
1b254     04 4E 05 F1 | 	add	fp, #4
1b258     A7 22 62 FC | 	wrlong	local03, fp
1b25c     14 4E 85 F1 | 	sub	fp, #20
1b260     B4 05 BF FD | 	call	#_pop
1b264     FF 22 02 F6 | 	mov	local03, result3
1b268     A7 FA 61 FC | 	wrlong	result1, fp
1b26c     04 4E 05 F1 | 	add	fp, #4
1b270     A7 FC 61 FC | 	wrlong	result2, fp
1b274     04 4E 05 F1 | 	add	fp, #4
1b278     A7 22 62 FC | 	wrlong	local03, fp
1b27c                 | ' 
1b27c                 | ' t2=pop()
1b27c                 | ' t1=pop()
1b27c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1b27c     08 4E 85 F1 | 	sub	fp, #8
1b280     1F 22 0E F2 | 	cmp	local03, #31 wz
1b284     14 4E 05 A1 |  if_e	add	fp, #20
1b288     A7 24 02 AB |  if_e	rdlong	local04, fp
1b28c     14 4E 85 A1 |  if_e	sub	fp, #20
1b290     12 23 02 A6 |  if_e	mov	local03, local04
1b294     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1b298     28 00 90 5D |  if_ne	jmp	#LR__2240
1b29c     00 1E 06 F6 | 	mov	local01, #0
1b2a0     A7 12 02 FB | 	rdlong	arg01, fp
1b2a4     0C 4E 05 F1 | 	add	fp, #12
1b2a8     A7 14 02 FB | 	rdlong	arg02, fp
1b2ac     0C 4E 85 F1 | 	sub	fp, #12
1b2b0     38 63 B0 FD | 	call	#__system___string_cmp
1b2b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2b8     00 1E 26 56 |  if_ne	not	local01, #0
1b2bc     A7 1E 62 FC | 	wrlong	local01, fp
1b2c0     1C 04 90 FD | 	jmp	#LR__2253
1b2c4                 | LR__2240
1b2c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1b2c4     08 4E 05 F1 | 	add	fp, #8
1b2c8     A7 1E 02 FB | 	rdlong	local01, fp
1b2cc     08 4E 85 F1 | 	sub	fp, #8
1b2d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b2d4     14 4E 05 A1 |  if_e	add	fp, #20
1b2d8     A7 24 02 AB |  if_e	rdlong	local04, fp
1b2dc     14 4E 85 A1 |  if_e	sub	fp, #20
1b2e0     12 23 02 A6 |  if_e	mov	local03, local04
1b2e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b2e8     2C 00 90 5D |  if_ne	jmp	#LR__2241
1b2ec     00 1E 06 F6 | 	mov	local01, #0
1b2f0     A7 12 02 FB | 	rdlong	arg01, fp
1b2f4     0C 4E 05 F1 | 	add	fp, #12
1b2f8     A7 14 02 FB | 	rdlong	arg02, fp
1b2fc     0C 4E 85 F1 | 	sub	fp, #12
1b300     01 16 06 F6 | 	mov	arg03, #1
1b304     AC 94 B0 FD | 	call	#__system___float_cmp
1b308     00 FA 0D F2 | 	cmp	result1, #0 wz
1b30c     00 1E 26 56 |  if_ne	not	local01, #0
1b310     A7 1E 62 FC | 	wrlong	local01, fp
1b314     C8 03 90 FD | 	jmp	#LR__2253
1b318                 | LR__2241
1b318                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1b318     08 4E 05 F1 | 	add	fp, #8
1b31c     A7 1E 02 FB | 	rdlong	local01, fp
1b320     08 4E 85 F1 | 	sub	fp, #8
1b324     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b328     14 4E 05 A1 |  if_e	add	fp, #20
1b32c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b330     14 4E 85 A1 |  if_e	sub	fp, #20
1b334     12 23 02 A6 |  if_e	mov	local03, local04
1b338     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b33c     48 00 90 5D |  if_ne	jmp	#LR__2242
1b340     00 1E 06 F6 | 	mov	local01, #0
1b344     A7 20 02 FB | 	rdlong	local02, fp
1b348     0C 4E 05 F1 | 	add	fp, #12
1b34c     A7 12 02 FB | 	rdlong	arg01, fp
1b350     0C 4E 85 F1 | 	sub	fp, #12
1b354     09 13 52 F6 | 	abs	arg01, arg01 wc
1b358     1F 26 C6 C9 |  if_b	decod	local05, #31
1b35c     00 26 06 36 |  if_ae	mov	local05, #0
1b360     18 8C B0 FD | 	call	#__system___float_fromuns
1b364     13 FB 61 F5 | 	xor	result1, local05
1b368     FD 14 02 F6 | 	mov	arg02, result1
1b36c     10 13 02 F6 | 	mov	arg01, local02
1b370     01 16 06 F6 | 	mov	arg03, #1
1b374     3C 94 B0 FD | 	call	#__system___float_cmp
1b378     00 FA 0D F2 | 	cmp	result1, #0 wz
1b37c     00 1E 26 56 |  if_ne	not	local01, #0
1b380     A7 1E 62 FC | 	wrlong	local01, fp
1b384     58 03 90 FD | 	jmp	#LR__2253
1b388                 | LR__2242
1b388                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1b388     08 4E 05 F1 | 	add	fp, #8
1b38c     A7 1E 02 FB | 	rdlong	local01, fp
1b390     08 4E 85 F1 | 	sub	fp, #8
1b394     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b398     14 4E 05 A1 |  if_e	add	fp, #20
1b39c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b3a0     14 4E 85 A1 |  if_e	sub	fp, #20
1b3a4     12 23 02 A6 |  if_e	mov	local03, local04
1b3a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b3ac     38 00 90 5D |  if_ne	jmp	#LR__2243
1b3b0     00 1E 06 F6 | 	mov	local01, #0
1b3b4     A7 20 02 FB | 	rdlong	local02, fp
1b3b8     0C 4E 05 F1 | 	add	fp, #12
1b3bc     A7 12 02 FB | 	rdlong	arg01, fp
1b3c0     0C 4E 85 F1 | 	sub	fp, #12
1b3c4     B4 8B B0 FD | 	call	#__system___float_fromuns
1b3c8     FD 14 02 F6 | 	mov	arg02, result1
1b3cc     10 13 02 F6 | 	mov	arg01, local02
1b3d0     01 16 06 F6 | 	mov	arg03, #1
1b3d4     DC 93 B0 FD | 	call	#__system___float_cmp
1b3d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3dc     00 1E 26 56 |  if_ne	not	local01, #0
1b3e0     A7 1E 62 FC | 	wrlong	local01, fp
1b3e4     F8 02 90 FD | 	jmp	#LR__2253
1b3e8                 | LR__2243
1b3e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1b3e8     08 4E 05 F1 | 	add	fp, #8
1b3ec     A7 1E 02 FB | 	rdlong	local01, fp
1b3f0     08 4E 85 F1 | 	sub	fp, #8
1b3f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b3f8     14 4E 05 A1 |  if_e	add	fp, #20
1b3fc     A7 24 02 AB |  if_e	rdlong	local04, fp
1b400     14 4E 85 A1 |  if_e	sub	fp, #20
1b404     12 23 02 A6 |  if_e	mov	local03, local04
1b408     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b40c     44 00 90 5D |  if_ne	jmp	#LR__2244
1b410     00 1E 06 F6 | 	mov	local01, #0
1b414     A7 12 02 FB | 	rdlong	arg01, fp
1b418     09 13 52 F6 | 	abs	arg01, arg01 wc
1b41c     1F 26 C6 C9 |  if_b	decod	local05, #31
1b420     00 26 06 36 |  if_ae	mov	local05, #0
1b424     54 8B B0 FD | 	call	#__system___float_fromuns
1b428     13 FB 61 F5 | 	xor	result1, local05
1b42c     FD 12 02 F6 | 	mov	arg01, result1
1b430     0C 4E 05 F1 | 	add	fp, #12
1b434     A7 14 02 FB | 	rdlong	arg02, fp
1b438     0C 4E 85 F1 | 	sub	fp, #12
1b43c     01 16 06 F6 | 	mov	arg03, #1
1b440     70 93 B0 FD | 	call	#__system___float_cmp
1b444     00 FA 0D F2 | 	cmp	result1, #0 wz
1b448     00 1E 26 56 |  if_ne	not	local01, #0
1b44c     A7 1E 62 FC | 	wrlong	local01, fp
1b450     8C 02 90 FD | 	jmp	#LR__2253
1b454                 | LR__2244
1b454                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1b454     08 4E 05 F1 | 	add	fp, #8
1b458     A7 1E 02 FB | 	rdlong	local01, fp
1b45c     08 4E 85 F1 | 	sub	fp, #8
1b460     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b464     14 4E 05 A1 |  if_e	add	fp, #20
1b468     A7 24 02 AB |  if_e	rdlong	local04, fp
1b46c     14 4E 85 A1 |  if_e	sub	fp, #20
1b470     12 23 02 A6 |  if_e	mov	local03, local04
1b474     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b478     24 00 90 5D |  if_ne	jmp	#LR__2245
1b47c     00 1E 06 F6 | 	mov	local01, #0
1b480     A7 20 02 FB | 	rdlong	local02, fp
1b484     0C 4E 05 F1 | 	add	fp, #12
1b488     A7 22 02 FB | 	rdlong	local03, fp
1b48c     0C 4E 85 F1 | 	sub	fp, #12
1b490     11 21 0A F2 | 	cmp	local02, local03 wz
1b494     01 1E 66 56 |  if_ne	neg	local01, #1
1b498     A7 1E 62 FC | 	wrlong	local01, fp
1b49c     40 02 90 FD | 	jmp	#LR__2253
1b4a0                 | LR__2245
1b4a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1b4a0     08 4E 05 F1 | 	add	fp, #8
1b4a4     A7 1E 02 FB | 	rdlong	local01, fp
1b4a8     08 4E 85 F1 | 	sub	fp, #8
1b4ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b4b0     14 4E 05 A1 |  if_e	add	fp, #20
1b4b4     A7 24 02 AB |  if_e	rdlong	local04, fp
1b4b8     14 4E 85 A1 |  if_e	sub	fp, #20
1b4bc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1b4c0     24 00 90 5D |  if_ne	jmp	#LR__2246
1b4c4     00 1E 06 F6 | 	mov	local01, #0
1b4c8     A7 20 02 FB | 	rdlong	local02, fp
1b4cc     0C 4E 05 F1 | 	add	fp, #12
1b4d0     A7 22 02 FB | 	rdlong	local03, fp
1b4d4     0C 4E 85 F1 | 	sub	fp, #12
1b4d8     11 21 0A F2 | 	cmp	local02, local03 wz
1b4dc     01 1E 66 56 |  if_ne	neg	local01, #1
1b4e0     A7 1E 62 FC | 	wrlong	local01, fp
1b4e4     F8 01 90 FD | 	jmp	#LR__2253
1b4e8                 | LR__2246
1b4e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1b4e8     08 4E 05 F1 | 	add	fp, #8
1b4ec     A7 1E 02 FB | 	rdlong	local01, fp
1b4f0     08 4E 85 F1 | 	sub	fp, #8
1b4f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b4f8     14 4E 05 A1 |  if_e	add	fp, #20
1b4fc     A7 22 02 AB |  if_e	rdlong	local03, fp
1b500     14 4E 85 A1 |  if_e	sub	fp, #20
1b504     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b508     34 00 90 5D |  if_ne	jmp	#LR__2247
1b50c     00 1E 06 F6 | 	mov	local01, #0
1b510     A7 12 02 FB | 	rdlong	arg01, fp
1b514     64 8A B0 FD | 	call	#__system___float_fromuns
1b518     FD 12 02 F6 | 	mov	arg01, result1
1b51c     0C 4E 05 F1 | 	add	fp, #12
1b520     A7 14 02 FB | 	rdlong	arg02, fp
1b524     0C 4E 85 F1 | 	sub	fp, #12
1b528     01 16 06 F6 | 	mov	arg03, #1
1b52c     84 92 B0 FD | 	call	#__system___float_cmp
1b530     00 FA 0D F2 | 	cmp	result1, #0 wz
1b534     00 1E 26 56 |  if_ne	not	local01, #0
1b538     A7 1E 62 FC | 	wrlong	local01, fp
1b53c     A0 01 90 FD | 	jmp	#LR__2253
1b540                 | LR__2247
1b540                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1b540     08 4E 05 F1 | 	add	fp, #8
1b544     A7 1E 02 FB | 	rdlong	local01, fp
1b548     08 4E 85 F1 | 	sub	fp, #8
1b54c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b550     14 4E 05 A1 |  if_e	add	fp, #20
1b554     A7 22 02 AB |  if_e	rdlong	local03, fp
1b558     14 4E 85 A1 |  if_e	sub	fp, #20
1b55c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b560     24 00 90 5D |  if_ne	jmp	#LR__2248
1b564     00 1E 06 F6 | 	mov	local01, #0
1b568     A7 20 02 FB | 	rdlong	local02, fp
1b56c     0C 4E 05 F1 | 	add	fp, #12
1b570     A7 22 02 FB | 	rdlong	local03, fp
1b574     0C 4E 85 F1 | 	sub	fp, #12
1b578     11 21 0A F2 | 	cmp	local02, local03 wz
1b57c     01 1E 66 56 |  if_ne	neg	local01, #1
1b580     A7 1E 62 FC | 	wrlong	local01, fp
1b584     58 01 90 FD | 	jmp	#LR__2253
1b588                 | LR__2248
1b588                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1b588     08 4E 05 F1 | 	add	fp, #8
1b58c     A7 1E 02 FB | 	rdlong	local01, fp
1b590     08 4E 85 F1 | 	sub	fp, #8
1b594     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b598     14 4E 05 A1 |  if_e	add	fp, #20
1b59c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b5a0     14 4E 85 A1 |  if_e	sub	fp, #20
1b5a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b5a8     24 00 90 5D |  if_ne	jmp	#LR__2249
1b5ac     00 1E 06 F6 | 	mov	local01, #0
1b5b0     A7 20 02 FB | 	rdlong	local02, fp
1b5b4     0C 4E 05 F1 | 	add	fp, #12
1b5b8     A7 22 02 FB | 	rdlong	local03, fp
1b5bc     0C 4E 85 F1 | 	sub	fp, #12
1b5c0     11 21 0A F2 | 	cmp	local02, local03 wz
1b5c4     01 1E 66 56 |  if_ne	neg	local01, #1
1b5c8     A7 1E 62 FC | 	wrlong	local01, fp
1b5cc     10 01 90 FD | 	jmp	#LR__2253
1b5d0                 | LR__2249
1b5d0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1b5d0     08 4E 05 F1 | 	add	fp, #8
1b5d4     A7 1E 02 FB | 	rdlong	local01, fp
1b5d8     08 4E 85 F1 | 	sub	fp, #8
1b5dc     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b5e0     14 4E 05 A1 |  if_e	add	fp, #20
1b5e4     A7 22 02 AB |  if_e	rdlong	local03, fp
1b5e8     14 4E 85 A1 |  if_e	sub	fp, #20
1b5ec     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1b5f0     30 00 90 5D |  if_ne	jmp	#LR__2250
1b5f4     00 1E 06 F6 | 	mov	local01, #0
1b5f8     A7 12 02 FB | 	rdlong	arg01, fp
1b5fc     90 03 BF FD | 	call	#_convertstring
1b600     FD 12 02 F6 | 	mov	arg01, result1
1b604     0C 4E 05 F1 | 	add	fp, #12
1b608     A7 14 02 FB | 	rdlong	arg02, fp
1b60c     0C 4E 85 F1 | 	sub	fp, #12
1b610     D8 5F B0 FD | 	call	#__system___string_cmp
1b614     00 FA 0D F2 | 	cmp	result1, #0 wz
1b618     00 1E 26 56 |  if_ne	not	local01, #0
1b61c     A7 1E 62 FC | 	wrlong	local01, fp
1b620     BC 00 90 FD | 	jmp	#LR__2253
1b624                 | LR__2250
1b624                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1b624     08 4E 05 F1 | 	add	fp, #8
1b628     A7 1E 02 FB | 	rdlong	local01, fp
1b62c     08 4E 85 F1 | 	sub	fp, #8
1b630     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b634     14 4E 05 A1 |  if_e	add	fp, #20
1b638     A7 22 02 AB |  if_e	rdlong	local03, fp
1b63c     14 4E 85 A1 |  if_e	sub	fp, #20
1b640     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b644     34 00 90 5D |  if_ne	jmp	#LR__2251
1b648     00 1E 06 F6 | 	mov	local01, #0
1b64c     A7 20 02 FB | 	rdlong	local02, fp
1b650     0C 4E 05 F1 | 	add	fp, #12
1b654     A7 12 02 FB | 	rdlong	arg01, fp
1b658     0C 4E 85 F1 | 	sub	fp, #12
1b65c     30 03 BF FD | 	call	#_convertstring
1b660     FD 14 02 F6 | 	mov	arg02, result1
1b664     10 13 02 F6 | 	mov	arg01, local02
1b668     80 5F B0 FD | 	call	#__system___string_cmp
1b66c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b670     00 1E 26 56 |  if_ne	not	local01, #0
1b674     A7 1E 62 FC | 	wrlong	local01, fp
1b678     64 00 90 FD | 	jmp	#LR__2253
1b67c                 | LR__2251
1b67c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1b67c     08 4E 05 F1 | 	add	fp, #8
1b680     A7 1E 02 FB | 	rdlong	local01, fp
1b684     08 4E 85 F1 | 	sub	fp, #8
1b688     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b68c     14 4E 05 A1 |  if_e	add	fp, #20
1b690     A7 22 02 AB |  if_e	rdlong	local03, fp
1b694     14 4E 85 A1 |  if_e	sub	fp, #20
1b698     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b69c     3C 00 90 5D |  if_ne	jmp	#LR__2252
1b6a0     00 1E 06 F6 | 	mov	local01, #0
1b6a4     A7 12 02 FB | 	rdlong	arg01, fp
1b6a8     E4 02 BF FD | 	call	#_convertstring
1b6ac     FD 20 02 F6 | 	mov	local02, result1
1b6b0     0C 4E 05 F1 | 	add	fp, #12
1b6b4     A7 12 02 FB | 	rdlong	arg01, fp
1b6b8     0C 4E 85 F1 | 	sub	fp, #12
1b6bc     D0 02 BF FD | 	call	#_convertstring
1b6c0     FD 14 02 F6 | 	mov	arg02, result1
1b6c4     10 13 02 F6 | 	mov	arg01, local02
1b6c8     20 5F B0 FD | 	call	#__system___string_cmp
1b6cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6d0     00 1E 26 56 |  if_ne	not	local01, #0
1b6d4     A7 1E 62 FC | 	wrlong	local01, fp
1b6d8     04 00 90 FD | 	jmp	#LR__2253
1b6dc                 | LR__2252
1b6dc     A7 00 68 FC | 	wrlong	#0, fp
1b6e0                 | LR__2253
1b6e0     08 4E 05 F1 | 	add	fp, #8
1b6e4     A7 38 68 FC | 	wrlong	#28, fp
1b6e8     08 4E 85 F1 | 	sub	fp, #8
1b6ec     A7 12 02 F6 | 	mov	arg01, fp
1b6f0     BC 01 BF FD | 	call	#_push
1b6f4     A7 F0 03 F6 | 	mov	ptra, fp
1b6f8     B2 00 A0 FD | 	call	#popregs_
1b6fc                 | _do_ne_ret
1b6fc     2D 00 64 FD | 	ret
1b700                 | 
1b700                 | ' 
1b700                 | ' '--------------------------------- OR
1b700                 | ' 
1b700                 | ' sub do_or 
1b700                 | _do_or
1b700     03 4A 05 F6 | 	mov	COUNT_, #3
1b704     A8 00 A0 FD | 	call	#pushregs_
1b708     18 F0 07 F1 | 	add	ptra, #24
1b70c     08 01 BF FD | 	call	#_pop
1b710     FD 12 02 F6 | 	mov	arg01, result1
1b714     FE 1E 02 F6 | 	mov	local01, result2
1b718     FF 20 02 F6 | 	mov	local02, result3
1b71c     0C 4E 05 F1 | 	add	fp, #12
1b720     A7 12 62 FC | 	wrlong	arg01, fp
1b724     04 4E 05 F1 | 	add	fp, #4
1b728     A7 1E 62 FC | 	wrlong	local01, fp
1b72c     04 4E 05 F1 | 	add	fp, #4
1b730     A7 20 62 FC | 	wrlong	local02, fp
1b734     14 4E 85 F1 | 	sub	fp, #20
1b738     DC 00 BF FD | 	call	#_pop
1b73c     FF 22 02 F6 | 	mov	local03, result3
1b740     A7 FA 61 FC | 	wrlong	result1, fp
1b744     04 4E 05 F1 | 	add	fp, #4
1b748     A7 FC 61 FC | 	wrlong	result2, fp
1b74c     04 4E 05 F1 | 	add	fp, #4
1b750     A7 22 62 FC | 	wrlong	local03, fp
1b754                 | ' 
1b754                 | ' t2=pop()
1b754                 | ' t1=pop()
1b754                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1b754     08 4E 85 F1 | 	sub	fp, #8
1b758     1C 22 0E F2 | 	cmp	local03, #28 wz
1b75c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b760     A7 22 62 AC |  if_e	wrlong	local03, fp
1b764     08 4E 05 A1 |  if_e	add	fp, #8
1b768     A7 3A 68 AC |  if_e	wrlong	#29, fp
1b76c     08 4E 85 A1 |  if_e	sub	fp, #8
1b770                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1b770     14 4E 05 F1 | 	add	fp, #20
1b774     A7 22 02 FB | 	rdlong	local03, fp
1b778     14 4E 85 F1 | 	sub	fp, #20
1b77c     1C 22 0E F2 | 	cmp	local03, #28 wz
1b780     18 00 90 5D |  if_ne	jmp	#LR__2260
1b784     0C 4E 05 F1 | 	add	fp, #12
1b788     A7 22 02 FB | 	rdlong	local03, fp
1b78c     A7 22 62 FC | 	wrlong	local03, fp
1b790     08 4E 05 F1 | 	add	fp, #8
1b794     A7 3A 68 FC | 	wrlong	#29, fp
1b798     14 4E 85 F1 | 	sub	fp, #20
1b79c                 | LR__2260
1b79c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1b79c     08 4E 05 F1 | 	add	fp, #8
1b7a0     A7 22 02 FB | 	rdlong	local03, fp
1b7a4     08 4E 85 F1 | 	sub	fp, #8
1b7a8     1F 22 0E F2 | 	cmp	local03, #31 wz
1b7ac     14 4E 05 51 |  if_ne	add	fp, #20
1b7b0     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b7b4     14 4E 85 51 |  if_ne	sub	fp, #20
1b7b8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1b7bc     08 4E 05 51 |  if_ne	add	fp, #8
1b7c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b7c4     08 4E 85 51 |  if_ne	sub	fp, #8
1b7c8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1b7cc     14 4E 05 51 |  if_ne	add	fp, #20
1b7d0     14 4E 85 51 |  if_ne	sub	fp, #20
1b7d4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1b7d8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b7dc     08 4E 05 A1 |  if_e	add	fp, #8
1b7e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b7e4     08 4E 85 A1 |  if_e	sub	fp, #8
1b7e8     18 00 90 AD |  if_e	jmp	#LR__2261
1b7ec     A7 22 02 FB | 	rdlong	local03, fp
1b7f0     0C 4E 05 F1 | 	add	fp, #12
1b7f4     A7 1E 02 FB | 	rdlong	local01, fp
1b7f8     0C 4E 85 F1 | 	sub	fp, #12
1b7fc     0F 23 42 F5 | 	or	local03, local01
1b800     A7 22 62 FC | 	wrlong	local03, fp
1b804                 | LR__2261
1b804     A7 12 02 F6 | 	mov	arg01, fp
1b808     A4 00 BF FD | 	call	#_push
1b80c     A7 F0 03 F6 | 	mov	ptra, fp
1b810     B2 00 A0 FD | 	call	#popregs_
1b814                 | _do_or_ret
1b814     2D 00 64 FD | 	ret
1b818                 | 
1b818                 | ' 
1b818                 | ' '--------------------------------- plus (+)
1b818                 | ' 
1b818                 | ' sub do_plus 
1b818                 | _do_plus
1b818     05 4A 05 F6 | 	mov	COUNT_, #5
1b81c     A8 00 A0 FD | 	call	#pushregs_
1b820     18 F0 07 F1 | 	add	ptra, #24
1b824     F0 FF BE FD | 	call	#_pop
1b828     FD 1E 02 F6 | 	mov	local01, result1
1b82c     FE 20 02 F6 | 	mov	local02, result2
1b830     FF 22 02 F6 | 	mov	local03, result3
1b834     0C 4E 05 F1 | 	add	fp, #12
1b838     A7 1E 62 FC | 	wrlong	local01, fp
1b83c     04 4E 05 F1 | 	add	fp, #4
1b840     A7 20 62 FC | 	wrlong	local02, fp
1b844     04 4E 05 F1 | 	add	fp, #4
1b848     A7 22 62 FC | 	wrlong	local03, fp
1b84c     14 4E 85 F1 | 	sub	fp, #20
1b850     C4 FF BE FD | 	call	#_pop
1b854     FF 22 02 F6 | 	mov	local03, result3
1b858     A7 FA 61 FC | 	wrlong	result1, fp
1b85c     04 4E 05 F1 | 	add	fp, #4
1b860     A7 FC 61 FC | 	wrlong	result2, fp
1b864     04 4E 05 F1 | 	add	fp, #4
1b868     A7 22 62 FC | 	wrlong	local03, fp
1b86c                 | ' 
1b86c                 | ' t2=pop()
1b86c                 | ' t1=pop()
1b86c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1b86c     08 4E 85 F1 | 	sub	fp, #8
1b870     1D 22 0E F2 | 	cmp	local03, #29 wz
1b874     14 4E 05 A1 |  if_e	add	fp, #20
1b878     A7 24 02 AB |  if_e	rdlong	local04, fp
1b87c     14 4E 85 A1 |  if_e	sub	fp, #20
1b880     12 23 02 A6 |  if_e	mov	local03, local04
1b884     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b888     1C 00 90 5D |  if_ne	jmp	#LR__2270
1b88c     A7 1E 02 FB | 	rdlong	local01, fp
1b890     0C 4E 05 F1 | 	add	fp, #12
1b894     A7 20 02 FB | 	rdlong	local02, fp
1b898     0C 4E 85 F1 | 	sub	fp, #12
1b89c     10 1F 02 F1 | 	add	local01, local02
1b8a0     A7 1E 62 FC | 	wrlong	local01, fp
1b8a4     48 04 90 FD | 	jmp	#LR__2285
1b8a8                 | LR__2270
1b8a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1b8a8     08 4E 05 F1 | 	add	fp, #8
1b8ac     A7 1E 02 FB | 	rdlong	local01, fp
1b8b0     08 4E 85 F1 | 	sub	fp, #8
1b8b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b8b8     14 4E 05 A1 |  if_e	add	fp, #20
1b8bc     A7 24 02 AB |  if_e	rdlong	local04, fp
1b8c0     14 4E 85 A1 |  if_e	sub	fp, #20
1b8c4     12 23 02 A6 |  if_e	mov	local03, local04
1b8c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b8cc     28 00 90 5D |  if_ne	jmp	#LR__2271
1b8d0     A7 1E 02 FB | 	rdlong	local01, fp
1b8d4     0C 4E 05 F1 | 	add	fp, #12
1b8d8     A7 20 02 FB | 	rdlong	local02, fp
1b8dc     0C 4E 85 F1 | 	sub	fp, #12
1b8e0     10 1F 02 F1 | 	add	local01, local02
1b8e4     A7 1E 62 FC | 	wrlong	local01, fp
1b8e8     08 4E 05 F1 | 	add	fp, #8
1b8ec     A7 38 68 FC | 	wrlong	#28, fp
1b8f0     08 4E 85 F1 | 	sub	fp, #8
1b8f4     F8 03 90 FD | 	jmp	#LR__2285
1b8f8                 | LR__2271
1b8f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1b8f8     08 4E 05 F1 | 	add	fp, #8
1b8fc     A7 1E 02 FB | 	rdlong	local01, fp
1b900     08 4E 85 F1 | 	sub	fp, #8
1b904     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b908     14 4E 05 A1 |  if_e	add	fp, #20
1b90c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b910     14 4E 85 A1 |  if_e	sub	fp, #20
1b914     12 23 02 A6 |  if_e	mov	local03, local04
1b918     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b91c     30 00 90 5D |  if_ne	jmp	#LR__2272
1b920     A7 12 02 FB | 	rdlong	arg01, fp
1b924     54 86 B0 FD | 	call	#__system___float_fromuns
1b928     FD 12 02 F6 | 	mov	arg01, result1
1b92c     0C 4E 05 F1 | 	add	fp, #12
1b930     A7 14 02 FB | 	rdlong	arg02, fp
1b934     0C 4E 85 F1 | 	sub	fp, #12
1b938     74 86 B0 FD | 	call	#__system___float_add
1b93c     A7 FA 61 FC | 	wrlong	result1, fp
1b940     08 4E 05 F1 | 	add	fp, #8
1b944     A7 3C 68 FC | 	wrlong	#30, fp
1b948     08 4E 85 F1 | 	sub	fp, #8
1b94c     A0 03 90 FD | 	jmp	#LR__2285
1b950                 | LR__2272
1b950                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1b950     08 4E 05 F1 | 	add	fp, #8
1b954     A7 1E 02 FB | 	rdlong	local01, fp
1b958     08 4E 85 F1 | 	sub	fp, #8
1b95c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b960     14 4E 05 A1 |  if_e	add	fp, #20
1b964     A7 24 02 AB |  if_e	rdlong	local04, fp
1b968     14 4E 85 A1 |  if_e	sub	fp, #20
1b96c     12 23 02 A6 |  if_e	mov	local03, local04
1b970     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b974     1C 00 90 5D |  if_ne	jmp	#LR__2273
1b978     A7 1E 02 FB | 	rdlong	local01, fp
1b97c     0C 4E 05 F1 | 	add	fp, #12
1b980     A7 20 02 FB | 	rdlong	local02, fp
1b984     0C 4E 85 F1 | 	sub	fp, #12
1b988     10 1F 02 F1 | 	add	local01, local02
1b98c     A7 1E 62 FC | 	wrlong	local01, fp
1b990     5C 03 90 FD | 	jmp	#LR__2285
1b994                 | LR__2273
1b994                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1b994     08 4E 05 F1 | 	add	fp, #8
1b998     A7 1E 02 FB | 	rdlong	local01, fp
1b99c     08 4E 85 F1 | 	sub	fp, #8
1b9a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b9a4     14 4E 05 A1 |  if_e	add	fp, #20
1b9a8     A7 24 02 AB |  if_e	rdlong	local04, fp
1b9ac     14 4E 85 A1 |  if_e	sub	fp, #20
1b9b0     12 23 02 A6 |  if_e	mov	local03, local04
1b9b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b9b8     1C 00 90 5D |  if_ne	jmp	#LR__2274
1b9bc     A7 1E 02 FB | 	rdlong	local01, fp
1b9c0     0C 4E 05 F1 | 	add	fp, #12
1b9c4     A7 20 02 FB | 	rdlong	local02, fp
1b9c8     0C 4E 85 F1 | 	sub	fp, #12
1b9cc     10 1F 02 F1 | 	add	local01, local02
1b9d0     A7 1E 62 FC | 	wrlong	local01, fp
1b9d4     18 03 90 FD | 	jmp	#LR__2285
1b9d8                 | LR__2274
1b9d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1b9d8     08 4E 05 F1 | 	add	fp, #8
1b9dc     A7 1E 02 FB | 	rdlong	local01, fp
1b9e0     08 4E 85 F1 | 	sub	fp, #8
1b9e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b9e8     14 4E 05 A1 |  if_e	add	fp, #20
1b9ec     A7 24 02 AB |  if_e	rdlong	local04, fp
1b9f0     14 4E 85 A1 |  if_e	sub	fp, #20
1b9f4     12 23 02 A6 |  if_e	mov	local03, local04
1b9f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b9fc     40 00 90 5D |  if_ne	jmp	#LR__2275
1ba00     A7 12 02 FB | 	rdlong	arg01, fp
1ba04     09 13 52 F6 | 	abs	arg01, arg01 wc
1ba08     1F 26 C6 C9 |  if_b	decod	local05, #31
1ba0c     00 26 06 36 |  if_ae	mov	local05, #0
1ba10     68 85 B0 FD | 	call	#__system___float_fromuns
1ba14     13 FB 61 F5 | 	xor	result1, local05
1ba18     FD 12 02 F6 | 	mov	arg01, result1
1ba1c     0C 4E 05 F1 | 	add	fp, #12
1ba20     A7 14 02 FB | 	rdlong	arg02, fp
1ba24     0C 4E 85 F1 | 	sub	fp, #12
1ba28     84 85 B0 FD | 	call	#__system___float_add
1ba2c     A7 FA 61 FC | 	wrlong	result1, fp
1ba30     08 4E 05 F1 | 	add	fp, #8
1ba34     A7 3C 68 FC | 	wrlong	#30, fp
1ba38     08 4E 85 F1 | 	sub	fp, #8
1ba3c     B0 02 90 FD | 	jmp	#LR__2285
1ba40                 | LR__2275
1ba40                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1ba40     08 4E 05 F1 | 	add	fp, #8
1ba44     A7 1E 02 FB | 	rdlong	local01, fp
1ba48     08 4E 85 F1 | 	sub	fp, #8
1ba4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ba50     14 4E 05 A1 |  if_e	add	fp, #20
1ba54     A7 24 02 AB |  if_e	rdlong	local04, fp
1ba58     14 4E 85 A1 |  if_e	sub	fp, #20
1ba5c     12 23 02 A6 |  if_e	mov	local03, local04
1ba60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ba64     28 00 90 5D |  if_ne	jmp	#LR__2276
1ba68     A7 1E 02 FB | 	rdlong	local01, fp
1ba6c     0C 4E 05 F1 | 	add	fp, #12
1ba70     A7 12 02 FB | 	rdlong	arg01, fp
1ba74     0C 4E 85 F1 | 	sub	fp, #12
1ba78     00 85 B0 FD | 	call	#__system___float_fromuns
1ba7c     FD 14 02 F6 | 	mov	arg02, result1
1ba80     0F 13 02 F6 | 	mov	arg01, local01
1ba84     28 85 B0 FD | 	call	#__system___float_add
1ba88     A7 FA 61 FC | 	wrlong	result1, fp
1ba8c     60 02 90 FD | 	jmp	#LR__2285
1ba90                 | LR__2276
1ba90                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1ba90     08 4E 05 F1 | 	add	fp, #8
1ba94     A7 1E 02 FB | 	rdlong	local01, fp
1ba98     08 4E 85 F1 | 	sub	fp, #8
1ba9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1baa0     14 4E 05 A1 |  if_e	add	fp, #20
1baa4     A7 24 02 AB |  if_e	rdlong	local04, fp
1baa8     14 4E 85 A1 |  if_e	sub	fp, #20
1baac     12 23 02 A6 |  if_e	mov	local03, local04
1bab0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1bab4     38 00 90 5D |  if_ne	jmp	#LR__2277
1bab8     A7 1E 02 FB | 	rdlong	local01, fp
1babc     0C 4E 05 F1 | 	add	fp, #12
1bac0     A7 12 02 FB | 	rdlong	arg01, fp
1bac4     0C 4E 85 F1 | 	sub	fp, #12
1bac8     09 13 52 F6 | 	abs	arg01, arg01 wc
1bacc     1F 26 C6 C9 |  if_b	decod	local05, #31
1bad0     00 26 06 36 |  if_ae	mov	local05, #0
1bad4     A4 84 B0 FD | 	call	#__system___float_fromuns
1bad8     13 FB 61 F5 | 	xor	result1, local05
1badc     FD 14 02 F6 | 	mov	arg02, result1
1bae0     0F 13 02 F6 | 	mov	arg01, local01
1bae4     C8 84 B0 FD | 	call	#__system___float_add
1bae8     A7 FA 61 FC | 	wrlong	result1, fp
1baec     00 02 90 FD | 	jmp	#LR__2285
1baf0                 | LR__2277
1baf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1baf0     08 4E 05 F1 | 	add	fp, #8
1baf4     A7 1E 02 FB | 	rdlong	local01, fp
1baf8     08 4E 85 F1 | 	sub	fp, #8
1bafc     1E 1E 0E F2 | 	cmp	local01, #30 wz
1bb00     14 4E 05 A1 |  if_e	add	fp, #20
1bb04     A7 24 02 AB |  if_e	rdlong	local04, fp
1bb08     14 4E 85 A1 |  if_e	sub	fp, #20
1bb0c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
1bb10     1C 00 90 5D |  if_ne	jmp	#LR__2278
1bb14     A7 12 02 FB | 	rdlong	arg01, fp
1bb18     0C 4E 05 F1 | 	add	fp, #12
1bb1c     A7 14 02 FB | 	rdlong	arg02, fp
1bb20     0C 4E 85 F1 | 	sub	fp, #12
1bb24     88 84 B0 FD | 	call	#__system___float_add
1bb28     A7 FA 61 FC | 	wrlong	result1, fp
1bb2c     C0 01 90 FD | 	jmp	#LR__2285
1bb30                 | LR__2278
1bb30                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1bb30     08 4E 05 F1 | 	add	fp, #8
1bb34     A7 1E 02 FB | 	rdlong	local01, fp
1bb38     08 4E 85 F1 | 	sub	fp, #8
1bb3c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bb40     24 00 90 5D |  if_ne	jmp	#LR__2279
1bb44     14 4E 05 F1 | 	add	fp, #20
1bb48     A7 22 02 FB | 	rdlong	local03, fp
1bb4c     14 4E 85 F1 | 	sub	fp, #20
1bb50     1F 22 0E F2 | 	cmp	local03, #31 wz
1bb54     A7 04 68 5C |  if_ne	wrlong	#2, fp
1bb58     08 4E 05 51 |  if_ne	add	fp, #8
1bb5c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1bb60     08 4E 85 51 |  if_ne	sub	fp, #8
1bb64     88 01 90 5D |  if_ne	jmp	#LR__2285
1bb68                 | LR__2279
1bb68                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1bb68     14 4E 05 F1 | 	add	fp, #20
1bb6c     A7 1E 02 FB | 	rdlong	local01, fp
1bb70     14 4E 85 F1 | 	sub	fp, #20
1bb74     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bb78     24 00 90 5D |  if_ne	jmp	#LR__2280
1bb7c     08 4E 05 F1 | 	add	fp, #8
1bb80     A7 22 02 FB | 	rdlong	local03, fp
1bb84     08 4E 85 F1 | 	sub	fp, #8
1bb88     1F 22 0E F2 | 	cmp	local03, #31 wz
1bb8c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1bb90     08 4E 05 51 |  if_ne	add	fp, #8
1bb94     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1bb98     08 4E 85 51 |  if_ne	sub	fp, #8
1bb9c     50 01 90 5D |  if_ne	jmp	#LR__2285
1bba0                 | LR__2280
1bba0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1bba0     08 4E 05 F1 | 	add	fp, #8
1bba4     A7 1E 02 FB | 	rdlong	local01, fp
1bba8     08 4E 85 F1 | 	sub	fp, #8
1bbac     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bbb0     14 4E 05 A1 |  if_e	add	fp, #20
1bbb4     A7 22 02 AB |  if_e	rdlong	local03, fp
1bbb8     14 4E 85 A1 |  if_e	sub	fp, #20
1bbbc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1bbc0     1C 00 90 5D |  if_ne	jmp	#LR__2281
1bbc4     A7 12 02 FB | 	rdlong	arg01, fp
1bbc8     0C 4E 05 F1 | 	add	fp, #12
1bbcc     A7 14 02 FB | 	rdlong	arg02, fp
1bbd0     0C 4E 85 F1 | 	sub	fp, #12
1bbd4     48 5A B0 FD | 	call	#__system___string_concat
1bbd8     A7 FA 61 FC | 	wrlong	result1, fp
1bbdc     10 01 90 FD | 	jmp	#LR__2285
1bbe0                 | LR__2281
1bbe0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1bbe0     08 4E 05 F1 | 	add	fp, #8
1bbe4     A7 1E 02 FB | 	rdlong	local01, fp
1bbe8     08 4E 85 F1 | 	sub	fp, #8
1bbec     2B 1E 0E F2 | 	cmp	local01, #43 wz
1bbf0     14 4E 05 A1 |  if_e	add	fp, #20
1bbf4     A7 22 02 AB |  if_e	rdlong	local03, fp
1bbf8     14 4E 85 A1 |  if_e	sub	fp, #20
1bbfc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1bc00     30 00 90 5D |  if_ne	jmp	#LR__2282
1bc04     A7 12 02 FB | 	rdlong	arg01, fp
1bc08     84 FD BE FD | 	call	#_convertstring
1bc0c     FD 12 02 F6 | 	mov	arg01, result1
1bc10     0C 4E 05 F1 | 	add	fp, #12
1bc14     A7 14 02 FB | 	rdlong	arg02, fp
1bc18     0C 4E 85 F1 | 	sub	fp, #12
1bc1c     00 5A B0 FD | 	call	#__system___string_concat
1bc20     A7 FA 61 FC | 	wrlong	result1, fp
1bc24     08 4E 05 F1 | 	add	fp, #8
1bc28     A7 3E 68 FC | 	wrlong	#31, fp
1bc2c     08 4E 85 F1 | 	sub	fp, #8
1bc30     BC 00 90 FD | 	jmp	#LR__2285
1bc34                 | LR__2282
1bc34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1bc34     08 4E 05 F1 | 	add	fp, #8
1bc38     A7 1E 02 FB | 	rdlong	local01, fp
1bc3c     08 4E 85 F1 | 	sub	fp, #8
1bc40     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bc44     14 4E 05 A1 |  if_e	add	fp, #20
1bc48     A7 22 02 AB |  if_e	rdlong	local03, fp
1bc4c     14 4E 85 A1 |  if_e	sub	fp, #20
1bc50     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1bc54     28 00 90 5D |  if_ne	jmp	#LR__2283
1bc58     A7 1E 02 FB | 	rdlong	local01, fp
1bc5c     0C 4E 05 F1 | 	add	fp, #12
1bc60     A7 12 02 FB | 	rdlong	arg01, fp
1bc64     0C 4E 85 F1 | 	sub	fp, #12
1bc68     24 FD BE FD | 	call	#_convertstring
1bc6c     FD 14 02 F6 | 	mov	arg02, result1
1bc70     0F 13 02 F6 | 	mov	arg01, local01
1bc74     A8 59 B0 FD | 	call	#__system___string_concat
1bc78     A7 FA 61 FC | 	wrlong	result1, fp
1bc7c     70 00 90 FD | 	jmp	#LR__2285
1bc80                 | LR__2283
1bc80                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1bc80     08 4E 05 F1 | 	add	fp, #8
1bc84     A7 1E 02 FB | 	rdlong	local01, fp
1bc88     08 4E 85 F1 | 	sub	fp, #8
1bc8c     2B 1E 0E F2 | 	cmp	local01, #43 wz
1bc90     14 4E 05 A1 |  if_e	add	fp, #20
1bc94     A7 22 02 AB |  if_e	rdlong	local03, fp
1bc98     14 4E 85 A1 |  if_e	sub	fp, #20
1bc9c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1bca0     3C 00 90 5D |  if_ne	jmp	#LR__2284
1bca4     A7 12 02 FB | 	rdlong	arg01, fp
1bca8     E4 FC BE FD | 	call	#_convertstring
1bcac     FD 1E 02 F6 | 	mov	local01, result1
1bcb0     0C 4E 05 F1 | 	add	fp, #12
1bcb4     A7 12 02 FB | 	rdlong	arg01, fp
1bcb8     0C 4E 85 F1 | 	sub	fp, #12
1bcbc     D0 FC BE FD | 	call	#_convertstring
1bcc0     FD 14 02 F6 | 	mov	arg02, result1
1bcc4     0F 13 02 F6 | 	mov	arg01, local01
1bcc8     54 59 B0 FD | 	call	#__system___string_concat
1bccc     A7 FA 61 FC | 	wrlong	result1, fp
1bcd0     08 4E 05 F1 | 	add	fp, #8
1bcd4     A7 3E 68 FC | 	wrlong	#31, fp
1bcd8     08 4E 85 F1 | 	sub	fp, #8
1bcdc     10 00 90 FD | 	jmp	#LR__2285
1bce0                 | LR__2284
1bce0     A7 08 68 FC | 	wrlong	#4, fp
1bce4     08 4E 05 F1 | 	add	fp, #8
1bce8     A7 FE 69 FC | 	wrlong	#255, fp
1bcec     08 4E 85 F1 | 	sub	fp, #8
1bcf0                 | LR__2285
1bcf0     A7 12 02 F6 | 	mov	arg01, fp
1bcf4     B8 FB BE FD | 	call	#_push
1bcf8     A7 F0 03 F6 | 	mov	ptra, fp
1bcfc     B2 00 A0 FD | 	call	#popregs_
1bd00                 | _do_plus_ret
1bd00     2D 00 64 FD | 	ret
1bd04                 | 
1bd04                 | ' 
1bd04                 | ' '--------------------------------- power (^)
1bd04                 | ' 
1bd04                 | ' sub do_power 
1bd04                 | _do_power
1bd04     02 4A 05 F6 | 	mov	COUNT_, #2
1bd08     A8 00 A0 FD | 	call	#pushregs_
1bd0c     18 F0 07 F1 | 	add	ptra, #24
1bd10     04 FB BE FD | 	call	#_pop
1bd14     FD 14 02 F6 | 	mov	arg02, result1
1bd18     FE 12 02 F6 | 	mov	arg01, result2
1bd1c     FF 1E 02 F6 | 	mov	local01, result3
1bd20     0C 4E 05 F1 | 	add	fp, #12
1bd24     A7 14 62 FC | 	wrlong	arg02, fp
1bd28     04 4E 05 F1 | 	add	fp, #4
1bd2c     A7 12 62 FC | 	wrlong	arg01, fp
1bd30     04 4E 05 F1 | 	add	fp, #4
1bd34     A7 1E 62 FC | 	wrlong	local01, fp
1bd38     14 4E 85 F1 | 	sub	fp, #20
1bd3c     D8 FA BE FD | 	call	#_pop
1bd40     A7 FA 61 FC | 	wrlong	result1, fp
1bd44     04 4E 05 F1 | 	add	fp, #4
1bd48     A7 FC 61 FC | 	wrlong	result2, fp
1bd4c     04 4E 05 F1 | 	add	fp, #4
1bd50     A7 FE 61 FC | 	wrlong	result3, fp
1bd54                 | ' 
1bd54                 | ' t2=pop()
1bd54                 | ' t1=pop()
1bd54                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1bd54     08 4E 85 F1 | 	sub	fp, #8
1bd58     1F FE 0D F2 | 	cmp	result3, #31 wz
1bd5c     14 4E 05 51 |  if_ne	add	fp, #20
1bd60     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1bd64     14 4E 85 51 |  if_ne	sub	fp, #20
1bd68     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1bd6c     A7 18 68 AC |  if_e	wrlong	#12, fp
1bd70     08 4E 05 A1 |  if_e	add	fp, #8
1bd74     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bd78     08 4E 85 A1 |  if_e	sub	fp, #8
1bd7c     38 01 90 AD |  if_e	jmp	#LR__2295
1bd80                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1bd80     08 4E 05 F1 | 	add	fp, #8
1bd84     A7 14 02 FB | 	rdlong	arg02, fp
1bd88     08 4E 85 F1 | 	sub	fp, #8
1bd8c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1bd90     28 00 90 5D |  if_ne	jmp	#LR__2290
1bd94     08 4E 05 F1 | 	add	fp, #8
1bd98     A7 3C 68 FC | 	wrlong	#30, fp
1bd9c     08 4E 85 F1 | 	sub	fp, #8
1bda0     A7 12 02 FB | 	rdlong	arg01, fp
1bda4     09 13 52 F6 | 	abs	arg01, arg01 wc
1bda8     1F 20 C6 C9 |  if_b	decod	local02, #31
1bdac     00 20 06 36 |  if_ae	mov	local02, #0
1bdb0     C8 81 B0 FD | 	call	#__system___float_fromuns
1bdb4     10 FB 61 F5 | 	xor	result1, local02
1bdb8     A7 FA 61 FC | 	wrlong	result1, fp
1bdbc                 | LR__2290
1bdbc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1bdbc     08 4E 05 F1 | 	add	fp, #8
1bdc0     A7 14 02 FB | 	rdlong	arg02, fp
1bdc4     08 4E 85 F1 | 	sub	fp, #8
1bdc8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1bdcc     18 00 90 5D |  if_ne	jmp	#LR__2291
1bdd0     08 4E 05 F1 | 	add	fp, #8
1bdd4     A7 3C 68 FC | 	wrlong	#30, fp
1bdd8     08 4E 85 F1 | 	sub	fp, #8
1bddc     A7 12 02 FB | 	rdlong	arg01, fp
1bde0     98 81 B0 FD | 	call	#__system___float_fromuns
1bde4     A7 FA 61 FC | 	wrlong	result1, fp
1bde8                 | LR__2291
1bde8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1bde8     14 4E 05 F1 | 	add	fp, #20
1bdec     A7 14 02 FB | 	rdlong	arg02, fp
1bdf0     14 4E 85 F1 | 	sub	fp, #20
1bdf4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1bdf8     34 00 90 5D |  if_ne	jmp	#LR__2292
1bdfc     14 4E 05 F1 | 	add	fp, #20
1be00     A7 3C 68 FC | 	wrlong	#30, fp
1be04     08 4E 85 F1 | 	sub	fp, #8
1be08     A7 12 02 FB | 	rdlong	arg01, fp
1be0c     0C 4E 85 F1 | 	sub	fp, #12
1be10     09 13 52 F6 | 	abs	arg01, arg01 wc
1be14     1F 20 C6 C9 |  if_b	decod	local02, #31
1be18     00 20 06 36 |  if_ae	mov	local02, #0
1be1c     5C 81 B0 FD | 	call	#__system___float_fromuns
1be20     10 FB 61 F5 | 	xor	result1, local02
1be24     0C 4E 05 F1 | 	add	fp, #12
1be28     A7 FA 61 FC | 	wrlong	result1, fp
1be2c     0C 4E 85 F1 | 	sub	fp, #12
1be30                 | LR__2292
1be30                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1be30     14 4E 05 F1 | 	add	fp, #20
1be34     A7 14 02 FB | 	rdlong	arg02, fp
1be38     14 4E 85 F1 | 	sub	fp, #20
1be3c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1be40     24 00 90 5D |  if_ne	jmp	#LR__2293
1be44     14 4E 05 F1 | 	add	fp, #20
1be48     A7 3C 68 FC | 	wrlong	#30, fp
1be4c     08 4E 85 F1 | 	sub	fp, #8
1be50     A7 12 02 FB | 	rdlong	arg01, fp
1be54     0C 4E 85 F1 | 	sub	fp, #12
1be58     20 81 B0 FD | 	call	#__system___float_fromuns
1be5c     0C 4E 05 F1 | 	add	fp, #12
1be60     A7 FA 61 FC | 	wrlong	result1, fp
1be64     0C 4E 85 F1 | 	sub	fp, #12
1be68                 | LR__2293
1be68                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1be68     08 4E 05 F1 | 	add	fp, #8
1be6c     A7 14 02 FB | 	rdlong	arg02, fp
1be70     08 4E 85 F1 | 	sub	fp, #8
1be74     1E 14 0E F2 | 	cmp	arg02, #30 wz
1be78     14 4E 05 A1 |  if_e	add	fp, #20
1be7c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1be80     14 4E 85 A1 |  if_e	sub	fp, #20
1be84     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1be88     1C 00 90 5D |  if_ne	jmp	#LR__2294
1be8c     A7 12 02 FB | 	rdlong	arg01, fp
1be90     0C 4E 05 F1 | 	add	fp, #12
1be94     A7 14 02 FB | 	rdlong	arg02, fp
1be98     0C 4E 85 F1 | 	sub	fp, #12
1be9c     E8 93 B0 FD | 	call	#__system____builtin_powf
1bea0     A7 FA 61 FC | 	wrlong	result1, fp
1bea4     10 00 90 FD | 	jmp	#LR__2295
1bea8                 | LR__2294
1bea8     A7 1A 68 FC | 	wrlong	#13, fp
1beac     08 4E 05 F1 | 	add	fp, #8
1beb0     A7 FE 69 FC | 	wrlong	#255, fp
1beb4     08 4E 85 F1 | 	sub	fp, #8
1beb8                 | LR__2295
1beb8     A7 12 02 F6 | 	mov	arg01, fp
1bebc     F0 F9 BE FD | 	call	#_push
1bec0     A7 F0 03 F6 | 	mov	ptra, fp
1bec4     B2 00 A0 FD | 	call	#popregs_
1bec8                 | _do_power_ret
1bec8     2D 00 64 FD | 	ret
1becc                 | 
1becc                 | ' 
1becc                 | ' '--------------------------------- SHL
1becc                 | ' 
1becc                 | ' sub do_shl 
1becc                 | _do_shl
1becc     03 4A 05 F6 | 	mov	COUNT_, #3
1bed0     A8 00 A0 FD | 	call	#pushregs_
1bed4     18 F0 07 F1 | 	add	ptra, #24
1bed8     3C F9 BE FD | 	call	#_pop
1bedc     FD 12 02 F6 | 	mov	arg01, result1
1bee0     FE 1E 02 F6 | 	mov	local01, result2
1bee4     FF 20 02 F6 | 	mov	local02, result3
1bee8     0C 4E 05 F1 | 	add	fp, #12
1beec     A7 12 62 FC | 	wrlong	arg01, fp
1bef0     04 4E 05 F1 | 	add	fp, #4
1bef4     A7 1E 62 FC | 	wrlong	local01, fp
1bef8     04 4E 05 F1 | 	add	fp, #4
1befc     A7 20 62 FC | 	wrlong	local02, fp
1bf00     14 4E 85 F1 | 	sub	fp, #20
1bf04     10 F9 BE FD | 	call	#_pop
1bf08     FF 22 02 F6 | 	mov	local03, result3
1bf0c     A7 FA 61 FC | 	wrlong	result1, fp
1bf10     04 4E 05 F1 | 	add	fp, #4
1bf14     A7 FC 61 FC | 	wrlong	result2, fp
1bf18     04 4E 05 F1 | 	add	fp, #4
1bf1c     A7 22 62 FC | 	wrlong	local03, fp
1bf20                 | ' 
1bf20                 | ' t2=pop()
1bf20                 | ' t1=pop()
1bf20                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bf20     08 4E 85 F1 | 	sub	fp, #8
1bf24     1C 22 0E F2 | 	cmp	local03, #28 wz
1bf28     A7 22 02 AB |  if_e	rdlong	local03, fp
1bf2c     A7 22 62 AC |  if_e	wrlong	local03, fp
1bf30     08 4E 05 A1 |  if_e	add	fp, #8
1bf34     A7 3A 68 AC |  if_e	wrlong	#29, fp
1bf38     08 4E 85 A1 |  if_e	sub	fp, #8
1bf3c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1bf3c     14 4E 05 F1 | 	add	fp, #20
1bf40     A7 22 02 FB | 	rdlong	local03, fp
1bf44     14 4E 85 F1 | 	sub	fp, #20
1bf48     1C 22 0E F2 | 	cmp	local03, #28 wz
1bf4c     18 00 90 5D |  if_ne	jmp	#LR__2300
1bf50     0C 4E 05 F1 | 	add	fp, #12
1bf54     A7 22 02 FB | 	rdlong	local03, fp
1bf58     A7 22 62 FC | 	wrlong	local03, fp
1bf5c     08 4E 05 F1 | 	add	fp, #8
1bf60     A7 3A 68 FC | 	wrlong	#29, fp
1bf64     14 4E 85 F1 | 	sub	fp, #20
1bf68                 | LR__2300
1bf68                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1bf68     08 4E 05 F1 | 	add	fp, #8
1bf6c     A7 22 02 FB | 	rdlong	local03, fp
1bf70     08 4E 85 F1 | 	sub	fp, #8
1bf74     1F 22 0E F2 | 	cmp	local03, #31 wz
1bf78     14 4E 05 51 |  if_ne	add	fp, #20
1bf7c     A7 20 02 5B |  if_ne	rdlong	local02, fp
1bf80     14 4E 85 51 |  if_ne	sub	fp, #20
1bf84     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1bf88     08 4E 05 51 |  if_ne	add	fp, #8
1bf8c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1bf90     08 4E 85 51 |  if_ne	sub	fp, #8
1bf94     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1bf98     14 4E 05 51 |  if_ne	add	fp, #20
1bf9c     14 4E 85 51 |  if_ne	sub	fp, #20
1bfa0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1bfa4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1bfa8     08 4E 05 A1 |  if_e	add	fp, #8
1bfac     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bfb0     08 4E 85 A1 |  if_e	sub	fp, #8
1bfb4     18 00 90 AD |  if_e	jmp	#LR__2301
1bfb8     A7 22 02 FB | 	rdlong	local03, fp
1bfbc     0C 4E 05 F1 | 	add	fp, #12
1bfc0     A7 1E 02 FB | 	rdlong	local01, fp
1bfc4     0C 4E 85 F1 | 	sub	fp, #12
1bfc8     0F 23 62 F0 | 	shl	local03, local01
1bfcc     A7 22 62 FC | 	wrlong	local03, fp
1bfd0                 | LR__2301
1bfd0     A7 12 02 F6 | 	mov	arg01, fp
1bfd4     D8 F8 BE FD | 	call	#_push
1bfd8     A7 F0 03 F6 | 	mov	ptra, fp
1bfdc     B2 00 A0 FD | 	call	#popregs_
1bfe0                 | _do_shl_ret
1bfe0     2D 00 64 FD | 	ret
1bfe4                 | 
1bfe4                 | ' 
1bfe4                 | ' '--------------------------------- SHR
1bfe4                 | ' 
1bfe4                 | ' sub do_shr 
1bfe4                 | _do_shr
1bfe4     03 4A 05 F6 | 	mov	COUNT_, #3
1bfe8     A8 00 A0 FD | 	call	#pushregs_
1bfec     18 F0 07 F1 | 	add	ptra, #24
1bff0     24 F8 BE FD | 	call	#_pop
1bff4     FD 12 02 F6 | 	mov	arg01, result1
1bff8     FE 1E 02 F6 | 	mov	local01, result2
1bffc     FF 20 02 F6 | 	mov	local02, result3
1c000     0C 4E 05 F1 | 	add	fp, #12
1c004     A7 12 62 FC | 	wrlong	arg01, fp
1c008     04 4E 05 F1 | 	add	fp, #4
1c00c     A7 1E 62 FC | 	wrlong	local01, fp
1c010     04 4E 05 F1 | 	add	fp, #4
1c014     A7 20 62 FC | 	wrlong	local02, fp
1c018     14 4E 85 F1 | 	sub	fp, #20
1c01c     F8 F7 BE FD | 	call	#_pop
1c020     FF 22 02 F6 | 	mov	local03, result3
1c024     A7 FA 61 FC | 	wrlong	result1, fp
1c028     04 4E 05 F1 | 	add	fp, #4
1c02c     A7 FC 61 FC | 	wrlong	result2, fp
1c030     04 4E 05 F1 | 	add	fp, #4
1c034     A7 22 62 FC | 	wrlong	local03, fp
1c038                 | ' 
1c038                 | ' t2=pop()
1c038                 | ' t1=pop()
1c038                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c038     08 4E 85 F1 | 	sub	fp, #8
1c03c     1C 22 0E F2 | 	cmp	local03, #28 wz
1c040     A7 22 02 AB |  if_e	rdlong	local03, fp
1c044     A7 22 62 AC |  if_e	wrlong	local03, fp
1c048     08 4E 05 A1 |  if_e	add	fp, #8
1c04c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c050     08 4E 85 A1 |  if_e	sub	fp, #8
1c054                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c054     14 4E 05 F1 | 	add	fp, #20
1c058     A7 22 02 FB | 	rdlong	local03, fp
1c05c     14 4E 85 F1 | 	sub	fp, #20
1c060     1C 22 0E F2 | 	cmp	local03, #28 wz
1c064     18 00 90 5D |  if_ne	jmp	#LR__2310
1c068     0C 4E 05 F1 | 	add	fp, #12
1c06c     A7 22 02 FB | 	rdlong	local03, fp
1c070     A7 22 62 FC | 	wrlong	local03, fp
1c074     08 4E 05 F1 | 	add	fp, #8
1c078     A7 3A 68 FC | 	wrlong	#29, fp
1c07c     14 4E 85 F1 | 	sub	fp, #20
1c080                 | LR__2310
1c080                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1c080     08 4E 05 F1 | 	add	fp, #8
1c084     A7 22 02 FB | 	rdlong	local03, fp
1c088     08 4E 85 F1 | 	sub	fp, #8
1c08c     1F 22 0E F2 | 	cmp	local03, #31 wz
1c090     14 4E 05 51 |  if_ne	add	fp, #20
1c094     A7 20 02 5B |  if_ne	rdlong	local02, fp
1c098     14 4E 85 51 |  if_ne	sub	fp, #20
1c09c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1c0a0     08 4E 05 51 |  if_ne	add	fp, #8
1c0a4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1c0a8     08 4E 85 51 |  if_ne	sub	fp, #8
1c0ac     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1c0b0     14 4E 05 51 |  if_ne	add	fp, #20
1c0b4     14 4E 85 51 |  if_ne	sub	fp, #20
1c0b8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1c0bc     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c0c0     08 4E 05 A1 |  if_e	add	fp, #8
1c0c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c0c8     08 4E 85 A1 |  if_e	sub	fp, #8
1c0cc     18 00 90 AD |  if_e	jmp	#LR__2311
1c0d0     A7 22 02 FB | 	rdlong	local03, fp
1c0d4     0C 4E 05 F1 | 	add	fp, #12
1c0d8     A7 1E 02 FB | 	rdlong	local01, fp
1c0dc     0C 4E 85 F1 | 	sub	fp, #12
1c0e0     0F 23 42 F0 | 	shr	local03, local01
1c0e4     A7 22 62 FC | 	wrlong	local03, fp
1c0e8                 | LR__2311
1c0e8     A7 12 02 F6 | 	mov	arg01, fp
1c0ec     C0 F7 BE FD | 	call	#_push
1c0f0     A7 F0 03 F6 | 	mov	ptra, fp
1c0f4     B2 00 A0 FD | 	call	#popregs_
1c0f8                 | _do_shr_ret
1c0f8     2D 00 64 FD | 	ret
1c0fc                 | 
1c0fc                 | ' 
1c0fc                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1c0fc                 | ' 
1c0fc                 | ' ''----------------------------------------------------------------------------------------------------
1c0fc                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1c0fc                 | ' ''----------------------------------------------------------------------------------------------------
1c0fc                 | ' 
1c0fc                 | ' ''--------------------------- Command function pointers
1c0fc                 | ' 
1c0fc                 | ' sub init_commands
1c0fc                 | _init_commands
1c0fc                 | ' 
1c0fc                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1c0fc     00 00 06 F6 | 	mov	_var01, #0
1c100     97 16 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1c104                 | LR__2320
1c104     00 FB 01 F6 | 	mov	result1, _var01
1c108     02 FA 65 F0 | 	shl	result1, #2
1c10c     43 00 00 FF 
1c110     60 E4 05 F1 | 	add	objptr, ##34400
1c114     F2 FA 01 F1 | 	add	result1, objptr
1c118     43 00 00 FF 
1c11c     60 E4 85 F1 | 	sub	objptr, ##34400
1c120     FD E4 61 FC | 	wrlong	objptr, result1
1c124     01 00 06 F1 | 	add	_var01, #1
1c128     00 01 56 F2 | 	cmps	_var01, #256 wc
1c12c     D4 FF 9F CD |  if_b	jmp	#LR__2320
1c130                 | LR__2321
1c130     F2 FA 01 F6 | 	mov	result1, objptr
1c134     14 FA 25 F4 | 	bith	result1, #20
1c138     43 00 00 FF 
1c13c     64 E4 05 F1 | 	add	objptr, ##34404
1c140     F2 FA 61 FC | 	wrlong	result1, objptr
1c144     43 00 00 FF 
1c148     64 E4 85 F1 | 	sub	objptr, ##34404
1c14c     F2 FA 01 F6 | 	mov	result1, objptr
1c150     15 FA 25 F4 | 	bith	result1, #21
1c154     43 00 00 FF 
1c158     68 E4 05 F1 | 	add	objptr, ##34408
1c15c     F2 FA 61 FC | 	wrlong	result1, objptr
1c160     43 00 00 FF 
1c164     68 E4 85 F1 | 	sub	objptr, ##34408
1c168     F2 FA 01 F6 | 	mov	result1, objptr
1c16c     34 FA 25 F4 | 	bith	result1, #52
1c170     43 00 00 FF 
1c174     6C E4 05 F1 | 	add	objptr, ##34412
1c178     F2 FA 61 FC | 	wrlong	result1, objptr
1c17c     43 00 00 FF 
1c180     6C E4 85 F1 | 	sub	objptr, ##34412
1c184     F2 FA 01 F6 | 	mov	result1, objptr
1c188     16 FA 25 F4 | 	bith	result1, #22
1c18c     43 00 00 FF 
1c190     74 E4 05 F1 | 	add	objptr, ##34420
1c194     F2 FA 61 FC | 	wrlong	result1, objptr
1c198     43 00 00 FF 
1c19c     74 E4 85 F1 | 	sub	objptr, ##34420
1c1a0     F2 FA 01 F6 | 	mov	result1, objptr
1c1a4     00 28 00 FF 
1c1a8     00 FA 45 F5 | 	or	result1, ##5242880
1c1ac     43 00 00 FF 
1c1b0     78 E4 05 F1 | 	add	objptr, ##34424
1c1b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b8     43 00 00 FF 
1c1bc     78 E4 85 F1 | 	sub	objptr, ##34424
1c1c0     F2 FA 01 F6 | 	mov	result1, objptr
1c1c4     35 FA 25 F4 | 	bith	result1, #53
1c1c8     43 00 00 FF 
1c1cc     7C E4 05 F1 | 	add	objptr, ##34428
1c1d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d4     43 00 00 FF 
1c1d8     7C E4 85 F1 | 	sub	objptr, ##34428
1c1dc     F2 FA 01 F6 | 	mov	result1, objptr
1c1e0     54 FA 25 F4 | 	bith	result1, #84
1c1e4     43 00 00 FF 
1c1e8     80 E4 05 F1 | 	add	objptr, ##34432
1c1ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f0     43 00 00 FF 
1c1f4     80 E4 85 F1 | 	sub	objptr, ##34432
1c1f8     F2 FA 01 F6 | 	mov	result1, objptr
1c1fc     17 FA 25 F4 | 	bith	result1, #23
1c200     43 00 00 FF 
1c204     84 E4 05 F1 | 	add	objptr, ##34436
1c208     F2 FA 61 FC | 	wrlong	result1, objptr
1c20c     43 00 00 FF 
1c210     84 E4 85 F1 | 	sub	objptr, ##34436
1c214     F2 FA 01 F6 | 	mov	result1, objptr
1c218     00 48 00 FF 
1c21c     00 FA 45 F5 | 	or	result1, ##9437184
1c220     43 00 00 FF 
1c224     88 E4 05 F1 | 	add	objptr, ##34440
1c228     F2 FA 61 FC | 	wrlong	result1, objptr
1c22c     43 00 00 FF 
1c230     88 E4 85 F1 | 	sub	objptr, ##34440
1c234     F2 FA 01 F6 | 	mov	result1, objptr
1c238     00 50 00 FF 
1c23c     00 FA 45 F5 | 	or	result1, ##10485760
1c240     43 00 00 FF 
1c244     8C E4 05 F1 | 	add	objptr, ##34444
1c248     F2 FA 61 FC | 	wrlong	result1, objptr
1c24c     43 00 00 FF 
1c250     8C E4 85 F1 | 	sub	objptr, ##34444
1c254     F2 FA 01 F6 | 	mov	result1, objptr
1c258     00 58 00 FF 
1c25c     00 FA 45 F5 | 	or	result1, ##11534336
1c260     43 00 00 FF 
1c264     90 E4 05 F1 | 	add	objptr, ##34448
1c268     F2 FA 61 FC | 	wrlong	result1, objptr
1c26c     43 00 00 FF 
1c270     90 E4 85 F1 | 	sub	objptr, ##34448
1c274     F2 FA 01 F6 | 	mov	result1, objptr
1c278     36 FA 25 F4 | 	bith	result1, #54
1c27c     43 00 00 FF 
1c280     A4 E4 05 F1 | 	add	objptr, ##34468
1c284     F2 FA 61 FC | 	wrlong	result1, objptr
1c288     43 00 00 FF 
1c28c     A4 E4 85 F1 | 	sub	objptr, ##34468
1c290     F2 FA 01 F6 | 	mov	result1, objptr
1c294     00 68 00 FF 
1c298     00 FA 45 F5 | 	or	result1, ##13631488
1c29c     43 00 00 FF 
1c2a0     D4 E4 05 F1 | 	add	objptr, ##34516
1c2a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2a8     43 00 00 FF 
1c2ac     D4 E4 85 F1 | 	sub	objptr, ##34516
1c2b0     F2 FA 01 F6 | 	mov	result1, objptr
1c2b4     00 68 00 FF 
1c2b8     00 FA 45 F5 | 	or	result1, ##13631488
1c2bc     43 00 00 FF 
1c2c0     D0 E4 05 F1 | 	add	objptr, ##34512
1c2c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2c8     43 00 00 FF 
1c2cc     D0 E4 85 F1 | 	sub	objptr, ##34512
1c2d0     F2 FA 01 F6 | 	mov	result1, objptr
1c2d4     00 68 00 FF 
1c2d8     00 FA 45 F5 | 	or	result1, ##13631488
1c2dc     43 00 00 FF 
1c2e0     D8 E4 05 F1 | 	add	objptr, ##34520
1c2e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2e8     43 00 00 FF 
1c2ec     D8 E4 85 F1 | 	sub	objptr, ##34520
1c2f0     F2 FA 01 F6 | 	mov	result1, objptr
1c2f4     00 68 00 FF 
1c2f8     00 FA 45 F5 | 	or	result1, ##13631488
1c2fc     43 00 00 FF 
1c300     DC E4 05 F1 | 	add	objptr, ##34524
1c304     F2 FA 61 FC | 	wrlong	result1, objptr
1c308     43 00 00 FF 
1c30c     DC E4 85 F1 | 	sub	objptr, ##34524
1c310     F2 FA 01 F6 | 	mov	result1, objptr
1c314     00 68 00 FF 
1c318     00 FA 45 F5 | 	or	result1, ##13631488
1c31c     43 00 00 FF 
1c320     0C E5 05 F1 | 	add	objptr, ##34572
1c324     F2 FA 61 FC | 	wrlong	result1, objptr
1c328     43 00 00 FF 
1c32c     0C E5 85 F1 | 	sub	objptr, ##34572
1c330     F2 FA 01 F6 | 	mov	result1, objptr
1c334     55 FA 25 F4 | 	bith	result1, #85
1c338     43 00 00 FF 
1c33c     BC E4 05 F1 | 	add	objptr, ##34492
1c340     F2 FA 61 FC | 	wrlong	result1, objptr
1c344     43 00 00 FF 
1c348     BC E4 85 F1 | 	sub	objptr, ##34492
1c34c     F2 FA 01 F6 | 	mov	result1, objptr
1c350     00 68 00 FF 
1c354     00 FA 45 F5 | 	or	result1, ##13631488
1c358     43 00 00 FF 
1c35c     10 E5 05 F1 | 	add	objptr, ##34576
1c360     F2 FA 61 FC | 	wrlong	result1, objptr
1c364     43 00 00 FF 
1c368     10 E5 85 F1 | 	sub	objptr, ##34576
1c36c     F2 FA 01 F6 | 	mov	result1, objptr
1c370     00 68 00 FF 
1c374     00 FA 45 F5 | 	or	result1, ##13631488
1c378     43 00 00 FF 
1c37c     E0 E4 05 F1 | 	add	objptr, ##34528
1c380     F2 FA 61 FC | 	wrlong	result1, objptr
1c384     43 00 00 FF 
1c388     E0 E4 85 F1 | 	sub	objptr, ##34528
1c38c     F2 FA 01 F6 | 	mov	result1, objptr
1c390     00 68 00 FF 
1c394     00 FA 45 F5 | 	or	result1, ##13631488
1c398     43 00 00 FF 
1c39c     E4 E4 05 F1 | 	add	objptr, ##34532
1c3a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3a4     43 00 00 FF 
1c3a8     E4 E4 85 F1 | 	sub	objptr, ##34532
1c3ac     F2 FA 01 F6 | 	mov	result1, objptr
1c3b0     00 68 00 FF 
1c3b4     00 FA 45 F5 | 	or	result1, ##13631488
1c3b8     43 00 00 FF 
1c3bc     E8 E4 05 F1 | 	add	objptr, ##34536
1c3c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3c4     43 00 00 FF 
1c3c8     E8 E4 85 F1 | 	sub	objptr, ##34536
1c3cc     F2 FA 01 F6 | 	mov	result1, objptr
1c3d0     74 FA 25 F4 | 	bith	result1, #116
1c3d4     43 00 00 FF 
1c3d8     60 E5 05 F1 | 	add	objptr, ##34656
1c3dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c3e0     43 00 00 FF 
1c3e4     60 E5 85 F1 | 	sub	objptr, ##34656
1c3e8     F2 FA 01 F6 | 	mov	result1, objptr
1c3ec     18 FA 25 F4 | 	bith	result1, #24
1c3f0     43 00 00 FF 
1c3f4     64 E5 05 F1 | 	add	objptr, ##34660
1c3f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3fc     43 00 00 FF 
1c400     64 E5 85 F1 | 	sub	objptr, ##34660
1c404     F2 FA 01 F6 | 	mov	result1, objptr
1c408     00 88 00 FF 
1c40c     00 FA 45 F5 | 	or	result1, ##17825792
1c410     43 00 00 FF 
1c414     68 E5 05 F1 | 	add	objptr, ##34664
1c418     F2 FA 61 FC | 	wrlong	result1, objptr
1c41c     43 00 00 FF 
1c420     68 E5 85 F1 | 	sub	objptr, ##34664
1c424     F2 FA 01 F6 | 	mov	result1, objptr
1c428     00 90 00 FF 
1c42c     00 FA 45 F5 | 	or	result1, ##18874368
1c430     43 00 00 FF 
1c434     6C E5 05 F1 | 	add	objptr, ##34668
1c438     F2 FA 61 FC | 	wrlong	result1, objptr
1c43c     43 00 00 FF 
1c440     6C E5 85 F1 | 	sub	objptr, ##34668
1c444     F2 FA 01 F6 | 	mov	result1, objptr
1c448     00 98 00 FF 
1c44c     00 FA 45 F5 | 	or	result1, ##19922944
1c450     43 00 00 FF 
1c454     70 E5 05 F1 | 	add	objptr, ##34672
1c458     F2 FA 61 FC | 	wrlong	result1, objptr
1c45c     43 00 00 FF 
1c460     70 E5 85 F1 | 	sub	objptr, ##34672
1c464     F2 FA 01 F6 | 	mov	result1, objptr
1c468     00 A0 00 FF 
1c46c     00 FA 45 F5 | 	or	result1, ##20971520
1c470     43 00 00 FF 
1c474     74 E5 05 F1 | 	add	objptr, ##34676
1c478     F2 FA 61 FC | 	wrlong	result1, objptr
1c47c     43 00 00 FF 
1c480     74 E5 85 F1 | 	sub	objptr, ##34676
1c484     F2 FA 01 F6 | 	mov	result1, objptr
1c488     00 A8 00 FF 
1c48c     00 FA 45 F5 | 	or	result1, ##22020096
1c490     43 00 00 FF 
1c494     78 E5 05 F1 | 	add	objptr, ##34680
1c498     F2 FA 61 FC | 	wrlong	result1, objptr
1c49c     43 00 00 FF 
1c4a0     78 E5 85 F1 | 	sub	objptr, ##34680
1c4a4     F2 FA 01 F6 | 	mov	result1, objptr
1c4a8     00 B0 00 FF 
1c4ac     00 FA 45 F5 | 	or	result1, ##23068672
1c4b0     43 00 00 FF 
1c4b4     7C E5 05 F1 | 	add	objptr, ##34684
1c4b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4bc     43 00 00 FF 
1c4c0     7C E5 85 F1 | 	sub	objptr, ##34684
1c4c4     F2 FA 01 F6 | 	mov	result1, objptr
1c4c8     00 B8 00 FF 
1c4cc     00 FA 45 F5 | 	or	result1, ##24117248
1c4d0     43 00 00 FF 
1c4d4     80 E5 05 F1 | 	add	objptr, ##34688
1c4d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4dc     43 00 00 FF 
1c4e0     80 E5 85 F1 | 	sub	objptr, ##34688
1c4e4     F2 FA 01 F6 | 	mov	result1, objptr
1c4e8     37 FA 25 F4 | 	bith	result1, #55
1c4ec     43 00 00 FF 
1c4f0     84 E5 05 F1 | 	add	objptr, ##34692
1c4f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4f8     43 00 00 FF 
1c4fc     84 E5 85 F1 | 	sub	objptr, ##34692
1c500     F2 FA 01 F6 | 	mov	result1, objptr
1c504     00 C8 00 FF 
1c508     00 FA 45 F5 | 	or	result1, ##26214400
1c50c     43 00 00 FF 
1c510     88 E5 05 F1 | 	add	objptr, ##34696
1c514     F2 FA 61 FC | 	wrlong	result1, objptr
1c518     43 00 00 FF 
1c51c     88 E5 85 F1 | 	sub	objptr, ##34696
1c520     F2 FA 01 F6 | 	mov	result1, objptr
1c524     00 D0 00 FF 
1c528     00 FA 45 F5 | 	or	result1, ##27262976
1c52c     43 00 00 FF 
1c530     8C E5 05 F1 | 	add	objptr, ##34700
1c534     F2 FA 61 FC | 	wrlong	result1, objptr
1c538     43 00 00 FF 
1c53c     8C E5 85 F1 | 	sub	objptr, ##34700
1c540     F2 FA 01 F6 | 	mov	result1, objptr
1c544     00 D8 00 FF 
1c548     00 FA 45 F5 | 	or	result1, ##28311552
1c54c     43 00 00 FF 
1c550     90 E5 05 F1 | 	add	objptr, ##34704
1c554     F2 FA 61 FC | 	wrlong	result1, objptr
1c558     43 00 00 FF 
1c55c     90 E5 85 F1 | 	sub	objptr, ##34704
1c560     F2 FA 01 F6 | 	mov	result1, objptr
1c564     56 FA 25 F4 | 	bith	result1, #86
1c568     43 00 00 FF 
1c56c     94 E5 05 F1 | 	add	objptr, ##34708
1c570     F2 FA 61 FC | 	wrlong	result1, objptr
1c574     43 00 00 FF 
1c578     94 E5 85 F1 | 	sub	objptr, ##34708
1c57c     F2 FA 01 F6 | 	mov	result1, objptr
1c580     00 E8 00 FF 
1c584     00 FA 45 F5 | 	or	result1, ##30408704
1c588     45 00 00 FF 
1c58c     5C E4 05 F1 | 	add	objptr, ##35420
1c590     F2 FA 61 FC | 	wrlong	result1, objptr
1c594     45 00 00 FF 
1c598     5C E4 85 F1 | 	sub	objptr, ##35420
1c59c     F2 FA 01 F6 | 	mov	result1, objptr
1c5a0     75 FA 25 F4 | 	bith	result1, #117
1c5a4     43 00 00 FF 
1c5a8     98 E5 05 F1 | 	add	objptr, ##34712
1c5ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b0     43 00 00 FF 
1c5b4     98 E5 85 F1 | 	sub	objptr, ##34712
1c5b8     F2 FA 01 F6 | 	mov	result1, objptr
1c5bc     94 FA 25 F4 | 	bith	result1, #148
1c5c0     43 00 00 FF 
1c5c4     AC E5 05 F1 | 	add	objptr, ##34732
1c5c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5cc     43 00 00 FF 
1c5d0     AC E5 85 F1 | 	sub	objptr, ##34732
1c5d4     F2 FA 01 F6 | 	mov	result1, objptr
1c5d8     19 FA 25 F4 | 	bith	result1, #25
1c5dc     43 00 00 FF 
1c5e0     9C E5 05 F1 | 	add	objptr, ##34716
1c5e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5e8     43 00 00 FF 
1c5ec     9C E5 85 F1 | 	sub	objptr, ##34716
1c5f0     F2 FA 01 F6 | 	mov	result1, objptr
1c5f4     00 08 01 FF 
1c5f8     00 FA 45 F5 | 	or	result1, ##34603008
1c5fc     43 00 00 FF 
1c600     B8 E4 05 F1 | 	add	objptr, ##34488
1c604     F2 FA 61 FC | 	wrlong	result1, objptr
1c608     43 00 00 FF 
1c60c     B8 E4 85 F1 | 	sub	objptr, ##34488
1c610     F2 FA 01 F6 | 	mov	result1, objptr
1c614     00 10 01 FF 
1c618     00 FA 45 F5 | 	or	result1, ##35651584
1c61c     43 00 00 FF 
1c620     A0 E5 05 F1 | 	add	objptr, ##34720
1c624     F2 FA 61 FC | 	wrlong	result1, objptr
1c628     43 00 00 FF 
1c62c     A0 E5 85 F1 | 	sub	objptr, ##34720
1c630     F2 FA 01 F6 | 	mov	result1, objptr
1c634     00 18 01 FF 
1c638     00 FA 45 F5 | 	or	result1, ##36700160
1c63c     43 00 00 FF 
1c640     A4 E5 05 F1 | 	add	objptr, ##34724
1c644     F2 FA 61 FC | 	wrlong	result1, objptr
1c648     43 00 00 FF 
1c64c     A4 E5 85 F1 | 	sub	objptr, ##34724
1c650     F2 FA 01 F6 | 	mov	result1, objptr
1c654     00 20 01 FF 
1c658     00 FA 45 F5 | 	or	result1, ##37748736
1c65c     43 00 00 FF 
1c660     A8 E5 05 F1 | 	add	objptr, ##34728
1c664     F2 FA 61 FC | 	wrlong	result1, objptr
1c668     43 00 00 FF 
1c66c     A8 E5 85 F1 | 	sub	objptr, ##34728
1c670     F2 FA 01 F6 | 	mov	result1, objptr
1c674     00 28 01 FF 
1c678     00 FA 45 F5 | 	or	result1, ##38797312
1c67c     43 00 00 FF 
1c680     B4 E5 05 F1 | 	add	objptr, ##34740
1c684     F2 FA 61 FC | 	wrlong	result1, objptr
1c688     43 00 00 FF 
1c68c     B4 E5 85 F1 | 	sub	objptr, ##34740
1c690     F2 FA 01 F6 | 	mov	result1, objptr
1c694     00 30 01 FF 
1c698     00 FA 45 F5 | 	or	result1, ##39845888
1c69c     43 00 00 FF 
1c6a0     B8 E5 05 F1 | 	add	objptr, ##34744
1c6a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6a8     43 00 00 FF 
1c6ac     B8 E5 85 F1 | 	sub	objptr, ##34744
1c6b0     F2 FA 01 F6 | 	mov	result1, objptr
1c6b4     00 38 01 FF 
1c6b8     00 FA 45 F5 | 	or	result1, ##40894464
1c6bc     43 00 00 FF 
1c6c0     BC E5 05 F1 | 	add	objptr, ##34748
1c6c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6c8     43 00 00 FF 
1c6cc     BC E5 85 F1 | 	sub	objptr, ##34748
1c6d0     F2 FA 01 F6 | 	mov	result1, objptr
1c6d4     00 40 01 FF 
1c6d8     00 FA 45 F5 | 	or	result1, ##41943040
1c6dc     43 00 00 FF 
1c6e0     C0 E5 05 F1 | 	add	objptr, ##34752
1c6e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6e8     43 00 00 FF 
1c6ec     C0 E5 85 F1 | 	sub	objptr, ##34752
1c6f0     F2 FA 01 F6 | 	mov	result1, objptr
1c6f4     00 48 01 FF 
1c6f8     00 FA 45 F5 | 	or	result1, ##42991616
1c6fc     43 00 00 FF 
1c700     C8 E5 05 F1 | 	add	objptr, ##34760
1c704     F2 FA 61 FC | 	wrlong	result1, objptr
1c708     43 00 00 FF 
1c70c     C8 E5 85 F1 | 	sub	objptr, ##34760
1c710     F2 FA 01 F6 | 	mov	result1, objptr
1c714     00 08 01 FF 
1c718     00 FA 45 F5 | 	or	result1, ##34603008
1c71c     43 00 00 FF 
1c720     CC E5 05 F1 | 	add	objptr, ##34764
1c724     F2 FA 61 FC | 	wrlong	result1, objptr
1c728     43 00 00 FF 
1c72c     CC E5 85 F1 | 	sub	objptr, ##34764
1c730     F2 FA 01 F6 | 	mov	result1, objptr
1c734     00 50 01 FF 
1c738     00 FA 45 F5 | 	or	result1, ##44040192
1c73c     43 00 00 FF 
1c740     CC E4 05 F1 | 	add	objptr, ##34508
1c744     F2 FA 61 FC | 	wrlong	result1, objptr
1c748     43 00 00 FF 
1c74c     CC E4 85 F1 | 	sub	objptr, ##34508
1c750     F2 FA 01 F6 | 	mov	result1, objptr
1c754     00 58 01 FF 
1c758     00 FA 45 F5 | 	or	result1, ##45088768
1c75c     43 00 00 FF 
1c760     FC E4 05 F1 | 	add	objptr, ##34556
1c764     F2 FA 61 FC | 	wrlong	result1, objptr
1c768     43 00 00 FF 
1c76c     FC E4 85 F1 | 	sub	objptr, ##34556
1c770     F2 FA 01 F6 | 	mov	result1, objptr
1c774     00 60 01 FF 
1c778     00 FA 45 F5 | 	or	result1, ##46137344
1c77c     43 00 00 FF 
1c780     F8 E4 05 F1 | 	add	objptr, ##34552
1c784     F2 FA 61 FC | 	wrlong	result1, objptr
1c788     43 00 00 FF 
1c78c     F8 E4 85 F1 | 	sub	objptr, ##34552
1c790     F2 FA 01 F6 | 	mov	result1, objptr
1c794     00 68 01 FF 
1c798     00 FA 45 F5 | 	or	result1, ##47185920
1c79c     43 00 00 FF 
1c7a0     9C E4 05 F1 | 	add	objptr, ##34460
1c7a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7a8     43 00 00 FF 
1c7ac     9C E4 85 F1 | 	sub	objptr, ##34460
1c7b0     F2 FA 01 F6 | 	mov	result1, objptr
1c7b4     00 70 01 FF 
1c7b8     00 FA 45 F5 | 	or	result1, ##48234496
1c7bc     43 00 00 FF 
1c7c0     A0 E4 05 F1 | 	add	objptr, ##34464
1c7c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7c8     43 00 00 FF 
1c7cc     A0 E4 85 F1 | 	sub	objptr, ##34464
1c7d0     F2 FA 01 F6 | 	mov	result1, objptr
1c7d4     00 78 01 FF 
1c7d8     00 FA 45 F5 | 	or	result1, ##49283072
1c7dc     43 00 00 FF 
1c7e0     08 E5 05 F1 | 	add	objptr, ##34568
1c7e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7e8     43 00 00 FF 
1c7ec     08 E5 85 F1 | 	sub	objptr, ##34568
1c7f0     F2 FA 01 F6 | 	mov	result1, objptr
1c7f4     38 FA 25 F4 | 	bith	result1, #56
1c7f8     43 00 00 FF 
1c7fc     B0 E5 05 F1 | 	add	objptr, ##34736
1c800     F2 FA 61 FC | 	wrlong	result1, objptr
1c804     43 00 00 FF 
1c808     B0 E5 85 F1 | 	sub	objptr, ##34736
1c80c     F2 FA 01 F6 | 	mov	result1, objptr
1c810     00 88 01 FF 
1c814     00 FA 45 F5 | 	or	result1, ##51380224
1c818     43 00 00 FF 
1c81c     C4 E5 05 F1 | 	add	objptr, ##34756
1c820     F2 FA 61 FC | 	wrlong	result1, objptr
1c824     43 00 00 FF 
1c828     C4 E5 85 F1 | 	sub	objptr, ##34756
1c82c     F2 FA 01 F6 | 	mov	result1, objptr
1c830     00 90 01 FF 
1c834     00 FA 45 F5 | 	or	result1, ##52428800
1c838     43 00 00 FF 
1c83c     D0 E5 05 F1 | 	add	objptr, ##34768
1c840     F2 FA 61 FC | 	wrlong	result1, objptr
1c844     43 00 00 FF 
1c848     D0 E5 85 F1 | 	sub	objptr, ##34768
1c84c     F2 FA 01 F6 | 	mov	result1, objptr
1c850     00 98 01 FF 
1c854     00 FA 45 F5 | 	or	result1, ##53477376
1c858     43 00 00 FF 
1c85c     D4 E5 05 F1 | 	add	objptr, ##34772
1c860     F2 FA 61 FC | 	wrlong	result1, objptr
1c864     43 00 00 FF 
1c868     D4 E5 85 F1 | 	sub	objptr, ##34772
1c86c     F2 FA 01 F6 | 	mov	result1, objptr
1c870     00 A0 01 FF 
1c874     00 FA 45 F5 | 	or	result1, ##54525952
1c878     43 00 00 FF 
1c87c     D8 E5 05 F1 | 	add	objptr, ##34776
1c880     F2 FA 61 FC | 	wrlong	result1, objptr
1c884     43 00 00 FF 
1c888     D8 E5 85 F1 | 	sub	objptr, ##34776
1c88c     F2 FA 01 F6 | 	mov	result1, objptr
1c890     00 A8 01 FF 
1c894     00 FA 45 F5 | 	or	result1, ##55574528
1c898     43 00 00 FF 
1c89c     DC E5 05 F1 | 	add	objptr, ##34780
1c8a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8a4     43 00 00 FF 
1c8a8     DC E5 85 F1 | 	sub	objptr, ##34780
1c8ac     F2 FA 01 F6 | 	mov	result1, objptr
1c8b0     00 B0 01 FF 
1c8b4     00 FA 45 F5 | 	or	result1, ##56623104
1c8b8     43 00 00 FF 
1c8bc     E0 E5 05 F1 | 	add	objptr, ##34784
1c8c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8c4     43 00 00 FF 
1c8c8     E0 E5 85 F1 | 	sub	objptr, ##34784
1c8cc     F2 FA 01 F6 | 	mov	result1, objptr
1c8d0     00 B8 01 FF 
1c8d4     00 FA 45 F5 | 	or	result1, ##57671680
1c8d8     43 00 00 FF 
1c8dc     E4 E5 05 F1 | 	add	objptr, ##34788
1c8e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8e4     43 00 00 FF 
1c8e8     E4 E5 85 F1 | 	sub	objptr, ##34788
1c8ec     F2 FA 01 F6 | 	mov	result1, objptr
1c8f0     94 FA 25 F4 | 	bith	result1, #148
1c8f4     43 00 00 FF 
1c8f8     AC E5 05 F1 | 	add	objptr, ##34732
1c8fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c900     43 00 00 FF 
1c904     AC E5 85 F1 | 	sub	objptr, ##34732
1c908     F2 FA 01 F6 | 	mov	result1, objptr
1c90c     57 FA 25 F4 | 	bith	result1, #87
1c910     43 00 00 FF 
1c914     EC E5 05 F1 | 	add	objptr, ##34796
1c918     F2 FA 61 FC | 	wrlong	result1, objptr
1c91c     43 00 00 FF 
1c920     EC E5 85 F1 | 	sub	objptr, ##34796
1c924     F2 FA 01 F6 | 	mov	result1, objptr
1c928     00 C8 01 FF 
1c92c     00 FA 45 F5 | 	or	result1, ##59768832
1c930     43 00 00 FF 
1c934     E8 E5 05 F1 | 	add	objptr, ##34792
1c938     F2 FA 61 FC | 	wrlong	result1, objptr
1c93c     43 00 00 FF 
1c940     E8 E5 85 F1 | 	sub	objptr, ##34792
1c944     F2 FA 01 F6 | 	mov	result1, objptr
1c948     00 D0 01 FF 
1c94c     00 FA 45 F5 | 	or	result1, ##60817408
1c950     44 00 00 FF 
1c954     00 E4 05 F1 | 	add	objptr, ##34816
1c958     F2 FA 61 FC | 	wrlong	result1, objptr
1c95c     44 00 00 FF 
1c960     00 E4 85 F1 | 	sub	objptr, ##34816
1c964     F2 FA 01 F6 | 	mov	result1, objptr
1c968     00 D8 01 FF 
1c96c     00 FA 45 F5 | 	or	result1, ##61865984
1c970     44 00 00 FF 
1c974     04 E4 05 F1 | 	add	objptr, ##34820
1c978     F2 FA 61 FC | 	wrlong	result1, objptr
1c97c     44 00 00 FF 
1c980     04 E4 85 F1 | 	sub	objptr, ##34820
1c984     F2 FA 01 F6 | 	mov	result1, objptr
1c988     76 FA 25 F4 | 	bith	result1, #118
1c98c     43 00 00 FF 
1c990     F0 E5 05 F1 | 	add	objptr, ##34800
1c994     F2 FA 61 FC | 	wrlong	result1, objptr
1c998     43 00 00 FF 
1c99c     F0 E5 85 F1 | 	sub	objptr, ##34800
1c9a0     F2 FA 01 F6 | 	mov	result1, objptr
1c9a4     00 E8 01 FF 
1c9a8     00 FA 45 F5 | 	or	result1, ##63963136
1c9ac     43 00 00 FF 
1c9b0     F4 E5 05 F1 | 	add	objptr, ##34804
1c9b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c9b8     43 00 00 FF 
1c9bc     F4 E5 85 F1 | 	sub	objptr, ##34804
1c9c0     F2 FA 01 F6 | 	mov	result1, objptr
1c9c4     95 FA 25 F4 | 	bith	result1, #149
1c9c8     43 00 00 FF 
1c9cc     F8 E5 05 F1 | 	add	objptr, ##34808
1c9d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c9d4     43 00 00 FF 
1c9d8     F8 E5 85 F1 | 	sub	objptr, ##34808
1c9dc     F2 FA 01 F6 | 	mov	result1, objptr
1c9e0     B4 FA 25 F4 | 	bith	result1, #180
1c9e4     43 00 00 FF 
1c9e8     FC E5 05 F1 | 	add	objptr, ##34812
1c9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c9f0     43 00 00 FF 
1c9f4     FC E5 85 F1 | 	sub	objptr, ##34812
1c9f8     F2 FA 01 F6 | 	mov	result1, objptr
1c9fc     1A FA 25 F4 | 	bith	result1, #26
1ca00     44 00 00 FF 
1ca04     0C E4 05 F1 | 	add	objptr, ##34828
1ca08     F2 FA 61 FC | 	wrlong	result1, objptr
1ca0c     44 00 00 FF 
1ca10     0C E4 85 F1 | 	sub	objptr, ##34828
1ca14     F2 FA 01 F6 | 	mov	result1, objptr
1ca18     00 08 02 FF 
1ca1c     00 FA 45 F5 | 	or	result1, ##68157440
1ca20     44 00 00 FF 
1ca24     08 E4 05 F1 | 	add	objptr, ##34824
1ca28     F2 FA 61 FC | 	wrlong	result1, objptr
1ca2c     44 00 00 FF 
1ca30     08 E4 85 F1 | 	sub	objptr, ##34824
1ca34     F2 FA 01 F6 | 	mov	result1, objptr
1ca38     00 10 02 FF 
1ca3c     00 FA 45 F5 | 	or	result1, ##69206016
1ca40     44 00 00 FF 
1ca44     18 E4 05 F1 | 	add	objptr, ##34840
1ca48     F2 FA 61 FC | 	wrlong	result1, objptr
1ca4c     44 00 00 FF 
1ca50     18 E4 85 F1 | 	sub	objptr, ##34840
1ca54     F2 FA 01 F6 | 	mov	result1, objptr
1ca58     00 18 02 FF 
1ca5c     00 FA 45 F5 | 	or	result1, ##70254592
1ca60     44 00 00 FF 
1ca64     14 E4 05 F1 | 	add	objptr, ##34836
1ca68     F2 FA 61 FC | 	wrlong	result1, objptr
1ca6c     44 00 00 FF 
1ca70     14 E4 85 F1 | 	sub	objptr, ##34836
1ca74     F2 FA 01 F6 | 	mov	result1, objptr
1ca78     00 20 02 FF 
1ca7c     00 FA 45 F5 | 	or	result1, ##71303168
1ca80     44 00 00 FF 
1ca84     10 E4 05 F1 | 	add	objptr, ##34832
1ca88     F2 FA 61 FC | 	wrlong	result1, objptr
1ca8c     44 00 00 FF 
1ca90     10 E4 85 F1 | 	sub	objptr, ##34832
1ca94     F2 FA 01 F6 | 	mov	result1, objptr
1ca98     00 28 02 FF 
1ca9c     00 FA 45 F5 | 	or	result1, ##72351744
1caa0     44 00 00 FF 
1caa4     1C E4 05 F1 | 	add	objptr, ##34844
1caa8     F2 FA 61 FC | 	wrlong	result1, objptr
1caac     44 00 00 FF 
1cab0     1C E4 85 F1 | 	sub	objptr, ##34844
1cab4     F2 FA 01 F6 | 	mov	result1, objptr
1cab8     00 30 02 FF 
1cabc     00 FA 45 F5 | 	or	result1, ##73400320
1cac0     44 00 00 FF 
1cac4     20 E4 05 F1 | 	add	objptr, ##34848
1cac8     F2 FA 61 FC | 	wrlong	result1, objptr
1cacc     44 00 00 FF 
1cad0     20 E4 85 F1 | 	sub	objptr, ##34848
1cad4     F2 FA 01 F6 | 	mov	result1, objptr
1cad8     00 38 02 FF 
1cadc     00 FA 45 F5 | 	or	result1, ##74448896
1cae0     43 00 00 FF 
1cae4     B4 E4 05 F1 | 	add	objptr, ##34484
1cae8     F2 FA 61 FC | 	wrlong	result1, objptr
1caec     43 00 00 FF 
1caf0     B4 E4 85 F1 | 	sub	objptr, ##34484
1caf4     F2 FA 01 F6 | 	mov	result1, objptr
1caf8     00 40 02 FF 
1cafc     00 FA 45 F5 | 	or	result1, ##75497472
1cb00     44 00 00 FF 
1cb04     38 E4 05 F1 | 	add	objptr, ##34872
1cb08     F2 FA 61 FC | 	wrlong	result1, objptr
1cb0c     44 00 00 FF 
1cb10     38 E4 85 F1 | 	sub	objptr, ##34872
1cb14     F2 FA 01 F6 | 	mov	result1, objptr
1cb18     00 48 02 FF 
1cb1c     00 FA 45 F5 | 	or	result1, ##76546048
1cb20     44 00 00 FF 
1cb24     48 E4 05 F1 | 	add	objptr, ##34888
1cb28     F2 FA 61 FC | 	wrlong	result1, objptr
1cb2c     44 00 00 FF 
1cb30     48 E4 85 F1 | 	sub	objptr, ##34888
1cb34     F2 FA 01 F6 | 	mov	result1, objptr
1cb38     00 50 02 FF 
1cb3c     00 FA 45 F5 | 	or	result1, ##77594624
1cb40     44 00 00 FF 
1cb44     4C E4 05 F1 | 	add	objptr, ##34892
1cb48     F2 FA 61 FC | 	wrlong	result1, objptr
1cb4c     44 00 00 FF 
1cb50     4C E4 85 F1 | 	sub	objptr, ##34892
1cb54     F2 FA 01 F6 | 	mov	result1, objptr
1cb58     00 58 02 FF 
1cb5c     00 FA 45 F5 | 	or	result1, ##78643200
1cb60     44 00 00 FF 
1cb64     44 E4 05 F1 | 	add	objptr, ##34884
1cb68     F2 FA 61 FC | 	wrlong	result1, objptr
1cb6c     44 00 00 FF 
1cb70     44 E4 85 F1 | 	sub	objptr, ##34884
1cb74     F2 FA 01 F6 | 	mov	result1, objptr
1cb78     00 60 02 FF 
1cb7c     00 FA 45 F5 | 	or	result1, ##79691776
1cb80     44 00 00 FF 
1cb84     3C E4 05 F1 | 	add	objptr, ##34876
1cb88     F2 FA 61 FC | 	wrlong	result1, objptr
1cb8c     44 00 00 FF 
1cb90     3C E4 85 F1 | 	sub	objptr, ##34876
1cb94     F2 FA 01 F6 | 	mov	result1, objptr
1cb98     00 68 02 FF 
1cb9c     00 FA 45 F5 | 	or	result1, ##80740352
1cba0     44 00 00 FF 
1cba4     40 E4 05 F1 | 	add	objptr, ##34880
1cba8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbac     44 00 00 FF 
1cbb0     40 E4 85 F1 | 	sub	objptr, ##34880
1cbb4     F2 FA 01 F6 | 	mov	result1, objptr
1cbb8     00 70 02 FF 
1cbbc     00 FA 45 F5 | 	or	result1, ##81788928
1cbc0     44 00 00 FF 
1cbc4     50 E4 05 F1 | 	add	objptr, ##34896
1cbc8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbcc     44 00 00 FF 
1cbd0     50 E4 85 F1 | 	sub	objptr, ##34896
1cbd4     F2 FA 01 F6 | 	mov	result1, objptr
1cbd8     00 78 02 FF 
1cbdc     00 FA 45 F5 | 	or	result1, ##82837504
1cbe0     44 00 00 FF 
1cbe4     54 E4 05 F1 | 	add	objptr, ##34900
1cbe8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbec     44 00 00 FF 
1cbf0     54 E4 85 F1 | 	sub	objptr, ##34900
1cbf4     F2 FA 01 F6 | 	mov	result1, objptr
1cbf8     00 80 02 FF 
1cbfc     00 FA 45 F5 | 	or	result1, ##83886080
1cc00     44 00 00 FF 
1cc04     58 E4 05 F1 | 	add	objptr, ##34904
1cc08     F2 FA 61 FC | 	wrlong	result1, objptr
1cc0c     44 00 00 FF 
1cc10     58 E4 85 F1 | 	sub	objptr, ##34904
1cc14     F2 FA 01 F6 | 	mov	result1, objptr
1cc18     00 88 02 FF 
1cc1c     00 FA 45 F5 | 	or	result1, ##84934656
1cc20     44 00 00 FF 
1cc24     5C E4 05 F1 | 	add	objptr, ##34908
1cc28     F2 FA 61 FC | 	wrlong	result1, objptr
1cc2c     44 00 00 FF 
1cc30     5C E4 85 F1 | 	sub	objptr, ##34908
1cc34     F2 FA 01 F6 | 	mov	result1, objptr
1cc38     00 90 02 FF 
1cc3c     00 FA 45 F5 | 	or	result1, ##85983232
1cc40     44 00 00 FF 
1cc44     60 E4 05 F1 | 	add	objptr, ##34912
1cc48     F2 FA 61 FC | 	wrlong	result1, objptr
1cc4c     44 00 00 FF 
1cc50     60 E4 85 F1 | 	sub	objptr, ##34912
1cc54     F2 FA 01 F6 | 	mov	result1, objptr
1cc58     00 98 02 FF 
1cc5c     00 FA 45 F5 | 	or	result1, ##87031808
1cc60     44 00 00 FF 
1cc64     64 E4 05 F1 | 	add	objptr, ##34916
1cc68     F2 FA 61 FC | 	wrlong	result1, objptr
1cc6c     44 00 00 FF 
1cc70     64 E4 85 F1 | 	sub	objptr, ##34916
1cc74     F2 FA 01 F6 | 	mov	result1, objptr
1cc78     00 A0 02 FF 
1cc7c     00 FA 45 F5 | 	or	result1, ##88080384
1cc80     44 00 00 FF 
1cc84     68 E4 05 F1 | 	add	objptr, ##34920
1cc88     F2 FA 61 FC | 	wrlong	result1, objptr
1cc8c     44 00 00 FF 
1cc90     68 E4 85 F1 | 	sub	objptr, ##34920
1cc94     F2 FA 01 F6 | 	mov	result1, objptr
1cc98     00 A8 02 FF 
1cc9c     00 FA 45 F5 | 	or	result1, ##89128960
1cca0     44 00 00 FF 
1cca4     6C E4 05 F1 | 	add	objptr, ##34924
1cca8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccac     44 00 00 FF 
1ccb0     6C E4 85 F1 | 	sub	objptr, ##34924
1ccb4     F2 FA 01 F6 | 	mov	result1, objptr
1ccb8     00 B0 02 FF 
1ccbc     00 FA 45 F5 | 	or	result1, ##90177536
1ccc0     44 00 00 FF 
1ccc4     78 E4 05 F1 | 	add	objptr, ##34936
1ccc8     F2 FA 61 FC | 	wrlong	result1, objptr
1cccc     44 00 00 FF 
1ccd0     78 E4 85 F1 | 	sub	objptr, ##34936
1ccd4     F2 FA 01 F6 | 	mov	result1, objptr
1ccd8     00 B8 02 FF 
1ccdc     00 FA 45 F5 | 	or	result1, ##91226112
1cce0     44 00 00 FF 
1cce4     70 E4 05 F1 | 	add	objptr, ##34928
1cce8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccec     44 00 00 FF 
1ccf0     70 E4 85 F1 | 	sub	objptr, ##34928
1ccf4     F2 FA 01 F6 | 	mov	result1, objptr
1ccf8     00 C0 02 FF 
1ccfc     00 FA 45 F5 | 	or	result1, ##92274688
1cd00     44 00 00 FF 
1cd04     74 E4 05 F1 | 	add	objptr, ##34932
1cd08     F2 FA 61 FC | 	wrlong	result1, objptr
1cd0c     44 00 00 FF 
1cd10     74 E4 85 F1 | 	sub	objptr, ##34932
1cd14     F2 FA 01 F6 | 	mov	result1, objptr
1cd18     00 C8 02 FF 
1cd1c     00 FA 45 F5 | 	or	result1, ##93323264
1cd20     44 00 00 FF 
1cd24     7C E4 05 F1 | 	add	objptr, ##34940
1cd28     F2 FA 61 FC | 	wrlong	result1, objptr
1cd2c     44 00 00 FF 
1cd30     7C E4 85 F1 | 	sub	objptr, ##34940
1cd34     F2 FA 01 F6 | 	mov	result1, objptr
1cd38     00 D0 02 FF 
1cd3c     00 FA 45 F5 | 	or	result1, ##94371840
1cd40     44 00 00 FF 
1cd44     24 E4 05 F1 | 	add	objptr, ##34852
1cd48     F2 FA 61 FC | 	wrlong	result1, objptr
1cd4c     44 00 00 FF 
1cd50     24 E4 85 F1 | 	sub	objptr, ##34852
1cd54     F2 FA 01 F6 | 	mov	result1, objptr
1cd58     00 D8 02 FF 
1cd5c     00 FA 45 F5 | 	or	result1, ##95420416
1cd60     44 00 00 FF 
1cd64     2C E4 05 F1 | 	add	objptr, ##34860
1cd68     F2 FA 61 FC | 	wrlong	result1, objptr
1cd6c     44 00 00 FF 
1cd70     2C E4 85 F1 | 	sub	objptr, ##34860
1cd74     F2 FA 01 F6 | 	mov	result1, objptr
1cd78     00 E0 02 FF 
1cd7c     00 FA 45 F5 | 	or	result1, ##96468992
1cd80     44 00 00 FF 
1cd84     30 E4 05 F1 | 	add	objptr, ##34864
1cd88     F2 FA 61 FC | 	wrlong	result1, objptr
1cd8c     44 00 00 FF 
1cd90     30 E4 85 F1 | 	sub	objptr, ##34864
1cd94     F2 FA 01 F6 | 	mov	result1, objptr
1cd98     00 E8 02 FF 
1cd9c     00 FA 45 F5 | 	or	result1, ##97517568
1cda0     44 00 00 FF 
1cda4     80 E4 05 F1 | 	add	objptr, ##34944
1cda8     F2 FA 61 FC | 	wrlong	result1, objptr
1cdac     44 00 00 FF 
1cdb0     80 E4 85 F1 | 	sub	objptr, ##34944
1cdb4     F2 FA 01 F6 | 	mov	result1, objptr
1cdb8     00 F0 02 FF 
1cdbc     00 FA 45 F5 | 	or	result1, ##98566144
1cdc0     44 00 00 FF 
1cdc4     84 E4 05 F1 | 	add	objptr, ##34948
1cdc8     F2 FA 61 FC | 	wrlong	result1, objptr
1cdcc     44 00 00 FF 
1cdd0     84 E4 85 F1 | 	sub	objptr, ##34948
1cdd4     F2 FA 01 F6 | 	mov	result1, objptr
1cdd8     00 F8 02 FF 
1cddc     00 FA 45 F5 | 	or	result1, ##99614720
1cde0     44 00 00 FF 
1cde4     88 E4 05 F1 | 	add	objptr, ##34952
1cde8     F2 FA 61 FC | 	wrlong	result1, objptr
1cdec     44 00 00 FF 
1cdf0     88 E4 85 F1 | 	sub	objptr, ##34952
1cdf4     F2 FA 01 F6 | 	mov	result1, objptr
1cdf8     39 FA 25 F4 | 	bith	result1, #57
1cdfc     44 00 00 FF 
1ce00     34 E4 05 F1 | 	add	objptr, ##34868
1ce04     F2 FA 61 FC | 	wrlong	result1, objptr
1ce08     44 00 00 FF 
1ce0c     34 E4 85 F1 | 	sub	objptr, ##34868
1ce10     F2 FA 01 F6 | 	mov	result1, objptr
1ce14     00 08 03 FF 
1ce18     00 FA 45 F5 | 	or	result1, ##101711872
1ce1c     44 00 00 FF 
1ce20     98 E4 05 F1 | 	add	objptr, ##34968
1ce24     F2 FA 61 FC | 	wrlong	result1, objptr
1ce28     44 00 00 FF 
1ce2c     98 E4 85 F1 | 	sub	objptr, ##34968
1ce30     F2 FA 01 F6 | 	mov	result1, objptr
1ce34     00 10 03 FF 
1ce38     00 FA 45 F5 | 	or	result1, ##102760448
1ce3c     44 00 00 FF 
1ce40     A0 E4 05 F1 | 	add	objptr, ##34976
1ce44     F2 FA 61 FC | 	wrlong	result1, objptr
1ce48     44 00 00 FF 
1ce4c     A0 E4 85 F1 | 	sub	objptr, ##34976
1ce50     F2 FA 01 F6 | 	mov	result1, objptr
1ce54     00 18 03 FF 
1ce58     00 FA 45 F5 | 	or	result1, ##103809024
1ce5c     44 00 00 FF 
1ce60     94 E4 05 F1 | 	add	objptr, ##34964
1ce64     F2 FA 61 FC | 	wrlong	result1, objptr
1ce68     44 00 00 FF 
1ce6c     94 E4 85 F1 | 	sub	objptr, ##34964
1ce70     F2 FA 01 F6 | 	mov	result1, objptr
1ce74     00 20 03 FF 
1ce78     00 FA 45 F5 | 	or	result1, ##104857600
1ce7c     44 00 00 FF 
1ce80     90 E4 05 F1 | 	add	objptr, ##34960
1ce84     F2 FA 61 FC | 	wrlong	result1, objptr
1ce88     44 00 00 FF 
1ce8c     90 E4 85 F1 | 	sub	objptr, ##34960
1ce90     F2 FA 01 F6 | 	mov	result1, objptr
1ce94     00 28 03 FF 
1ce98     00 FA 45 F5 | 	or	result1, ##105906176
1ce9c     44 00 00 FF 
1cea0     8C E4 05 F1 | 	add	objptr, ##34956
1cea4     F2 FA 61 FC | 	wrlong	result1, objptr
1cea8     44 00 00 FF 
1ceac     8C E4 85 F1 | 	sub	objptr, ##34956
1ceb0     F2 FA 01 F6 | 	mov	result1, objptr
1ceb4     00 30 03 FF 
1ceb8     00 FA 45 F5 | 	or	result1, ##106954752
1cebc     44 00 00 FF 
1cec0     9C E4 05 F1 | 	add	objptr, ##34972
1cec4     F2 FA 61 FC | 	wrlong	result1, objptr
1cec8     44 00 00 FF 
1cecc     9C E4 85 F1 | 	sub	objptr, ##34972
1ced0     F2 FA 01 F6 | 	mov	result1, objptr
1ced4     00 38 03 FF 
1ced8     00 FA 45 F5 | 	or	result1, ##108003328
1cedc     44 00 00 FF 
1cee0     A4 E4 05 F1 | 	add	objptr, ##34980
1cee4     F2 FA 61 FC | 	wrlong	result1, objptr
1cee8     44 00 00 FF 
1ceec     A4 E4 85 F1 | 	sub	objptr, ##34980
1cef0     F2 FA 01 F6 | 	mov	result1, objptr
1cef4     00 40 03 FF 
1cef8     00 FA 45 F5 | 	or	result1, ##109051904
1cefc     44 00 00 FF 
1cf00     A8 E4 05 F1 | 	add	objptr, ##34984
1cf04     F2 FA 61 FC | 	wrlong	result1, objptr
1cf08     44 00 00 FF 
1cf0c     A8 E4 85 F1 | 	sub	objptr, ##34984
1cf10     F2 FA 01 F6 | 	mov	result1, objptr
1cf14     00 48 03 FF 
1cf18     00 FA 45 F5 | 	or	result1, ##110100480
1cf1c     44 00 00 FF 
1cf20     AC E4 05 F1 | 	add	objptr, ##34988
1cf24     F2 FA 61 FC | 	wrlong	result1, objptr
1cf28     44 00 00 FF 
1cf2c     AC E4 85 F1 | 	sub	objptr, ##34988
1cf30     F2 FA 01 F6 | 	mov	result1, objptr
1cf34     00 50 03 FF 
1cf38     00 FA 45 F5 | 	or	result1, ##111149056
1cf3c     44 00 00 FF 
1cf40     B4 E4 05 F1 | 	add	objptr, ##34996
1cf44     F2 FA 61 FC | 	wrlong	result1, objptr
1cf48     44 00 00 FF 
1cf4c     B4 E4 85 F1 | 	sub	objptr, ##34996
1cf50     F2 FA 01 F6 | 	mov	result1, objptr
1cf54     00 58 03 FF 
1cf58     00 FA 45 F5 | 	or	result1, ##112197632
1cf5c     44 00 00 FF 
1cf60     B8 E4 05 F1 | 	add	objptr, ##35000
1cf64     F2 FA 61 FC | 	wrlong	result1, objptr
1cf68     44 00 00 FF 
1cf6c     B8 E4 85 F1 | 	sub	objptr, ##35000
1cf70     F2 FA 01 F6 | 	mov	result1, objptr
1cf74     00 60 03 FF 
1cf78     00 FA 45 F5 | 	or	result1, ##113246208
1cf7c     44 00 00 FF 
1cf80     BC E4 05 F1 | 	add	objptr, ##35004
1cf84     F2 FA 61 FC | 	wrlong	result1, objptr
1cf88     44 00 00 FF 
1cf8c     BC E4 85 F1 | 	sub	objptr, ##35004
1cf90     F2 FA 01 F6 | 	mov	result1, objptr
1cf94     00 68 03 FF 
1cf98     00 FA 45 F5 | 	or	result1, ##114294784
1cf9c     44 00 00 FF 
1cfa0     C0 E4 05 F1 | 	add	objptr, ##35008
1cfa4     F2 FA 61 FC | 	wrlong	result1, objptr
1cfa8     44 00 00 FF 
1cfac     C0 E4 85 F1 | 	sub	objptr, ##35008
1cfb0     F2 FA 01 F6 | 	mov	result1, objptr
1cfb4     00 70 03 FF 
1cfb8     00 FA 45 F5 | 	or	result1, ##115343360
1cfbc     44 00 00 FF 
1cfc0     C4 E4 05 F1 | 	add	objptr, ##35012
1cfc4     F2 FA 61 FC | 	wrlong	result1, objptr
1cfc8     44 00 00 FF 
1cfcc     C4 E4 85 F1 | 	sub	objptr, ##35012
1cfd0     F2 FA 01 F6 | 	mov	result1, objptr
1cfd4     00 78 03 FF 
1cfd8     00 FA 45 F5 | 	or	result1, ##116391936
1cfdc     44 00 00 FF 
1cfe0     C8 E4 05 F1 | 	add	objptr, ##35016
1cfe4     F2 FA 61 FC | 	wrlong	result1, objptr
1cfe8     44 00 00 FF 
1cfec     C8 E4 85 F1 | 	sub	objptr, ##35016
1cff0     F2 FA 01 F6 | 	mov	result1, objptr
1cff4     00 08 01 FF 
1cff8     00 FA 45 F5 | 	or	result1, ##34603008
1cffc     44 00 00 FF 
1d000     CC E4 05 F1 | 	add	objptr, ##35020
1d004     F2 FA 61 FC | 	wrlong	result1, objptr
1d008     44 00 00 FF 
1d00c     CC E4 85 F1 | 	sub	objptr, ##35020
1d010     F2 FA 01 F6 | 	mov	result1, objptr
1d014     58 FA 25 F4 | 	bith	result1, #88
1d018     44 00 00 FF 
1d01c     D0 E4 05 F1 | 	add	objptr, ##35024
1d020     F2 FA 61 FC | 	wrlong	result1, objptr
1d024     44 00 00 FF 
1d028     D0 E4 85 F1 | 	sub	objptr, ##35024
1d02c     F2 FA 01 F6 | 	mov	result1, objptr
1d030     00 88 03 FF 
1d034     00 FA 45 F5 | 	or	result1, ##118489088
1d038     44 00 00 FF 
1d03c     B0 E4 05 F1 | 	add	objptr, ##34992
1d040     F2 FA 61 FC | 	wrlong	result1, objptr
1d044     44 00 00 FF 
1d048     B0 E4 85 F1 | 	sub	objptr, ##34992
1d04c     F2 FA 01 F6 | 	mov	result1, objptr
1d050     00 90 03 FF 
1d054     00 FA 45 F5 | 	or	result1, ##119537664
1d058     43 00 00 FF 
1d05c     A8 E4 05 F1 | 	add	objptr, ##34472
1d060     F2 FA 61 FC | 	wrlong	result1, objptr
1d064     43 00 00 FF 
1d068     A8 E4 85 F1 | 	sub	objptr, ##34472
1d06c     F2 FA 01 F6 | 	mov	result1, objptr
1d070     00 98 03 FF 
1d074     00 FA 45 F5 | 	or	result1, ##120586240
1d078     44 00 00 FF 
1d07c     D4 E4 05 F1 | 	add	objptr, ##35028
1d080     F2 FA 61 FC | 	wrlong	result1, objptr
1d084     44 00 00 FF 
1d088     D4 E4 85 F1 | 	sub	objptr, ##35028
1d08c     F2 FA 01 F6 | 	mov	result1, objptr
1d090     00 A0 03 FF 
1d094     00 FA 45 F5 | 	or	result1, ##121634816
1d098     44 00 00 FF 
1d09c     D8 E4 05 F1 | 	add	objptr, ##35032
1d0a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d0a4     44 00 00 FF 
1d0a8     D8 E4 85 F1 | 	sub	objptr, ##35032
1d0ac     F2 FA 01 F6 | 	mov	result1, objptr
1d0b0     00 A8 03 FF 
1d0b4     00 FA 45 F5 | 	or	result1, ##122683392
1d0b8     44 00 00 FF 
1d0bc     EC E4 05 F1 | 	add	objptr, ##35052
1d0c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d0c4     44 00 00 FF 
1d0c8     EC E4 85 F1 | 	sub	objptr, ##35052
1d0cc     F2 FA 01 F6 | 	mov	result1, objptr
1d0d0     00 B0 03 FF 
1d0d4     00 FA 45 F5 | 	or	result1, ##123731968
1d0d8     44 00 00 FF 
1d0dc     E8 E4 05 F1 | 	add	objptr, ##35048
1d0e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d0e4     44 00 00 FF 
1d0e8     E8 E4 85 F1 | 	sub	objptr, ##35048
1d0ec     F2 FA 01 F6 | 	mov	result1, objptr
1d0f0     00 B8 03 FF 
1d0f4     00 FA 45 F5 | 	or	result1, ##124780544
1d0f8     44 00 00 FF 
1d0fc     E0 E4 05 F1 | 	add	objptr, ##35040
1d100     F2 FA 61 FC | 	wrlong	result1, objptr
1d104     44 00 00 FF 
1d108     E0 E4 85 F1 | 	sub	objptr, ##35040
1d10c     F2 FA 01 F6 | 	mov	result1, objptr
1d110     77 FA 25 F4 | 	bith	result1, #119
1d114     44 00 00 FF 
1d118     DC E4 05 F1 | 	add	objptr, ##35036
1d11c     F2 FA 61 FC | 	wrlong	result1, objptr
1d120     44 00 00 FF 
1d124     DC E4 85 F1 | 	sub	objptr, ##35036
1d128     F2 FA 01 F6 | 	mov	result1, objptr
1d12c     00 C8 03 FF 
1d130     00 FA 45 F5 | 	or	result1, ##126877696
1d134     44 00 00 FF 
1d138     FC E4 05 F1 | 	add	objptr, ##35068
1d13c     F2 FA 61 FC | 	wrlong	result1, objptr
1d140     44 00 00 FF 
1d144     FC E4 85 F1 | 	sub	objptr, ##35068
1d148     F2 FA 01 F6 | 	mov	result1, objptr
1d14c     00 D0 03 FF 
1d150     00 FA 45 F5 | 	or	result1, ##127926272
1d154     44 00 00 FF 
1d158     F0 E4 05 F1 | 	add	objptr, ##35056
1d15c     F2 FA 61 FC | 	wrlong	result1, objptr
1d160     44 00 00 FF 
1d164     F0 E4 85 F1 | 	sub	objptr, ##35056
1d168     F2 FA 01 F6 | 	mov	result1, objptr
1d16c     00 D8 03 FF 
1d170     00 FA 45 F5 | 	or	result1, ##128974848
1d174     44 00 00 FF 
1d178     F4 E4 05 F1 | 	add	objptr, ##35060
1d17c     F2 FA 61 FC | 	wrlong	result1, objptr
1d180     44 00 00 FF 
1d184     F4 E4 85 F1 | 	sub	objptr, ##35060
1d188     F2 FA 01 F6 | 	mov	result1, objptr
1d18c     96 FA 25 F4 | 	bith	result1, #150
1d190     44 00 00 FF 
1d194     F8 E4 05 F1 | 	add	objptr, ##35064
1d198     F2 FA 61 FC | 	wrlong	result1, objptr
1d19c     44 00 00 FF 
1d1a0     F8 E4 85 F1 | 	sub	objptr, ##35064
1d1a4     F2 FA 01 F6 | 	mov	result1, objptr
1d1a8     00 E8 03 FF 
1d1ac     00 FA 45 F5 | 	or	result1, ##131072000
1d1b0     44 00 00 FF 
1d1b4     00 E5 05 F1 | 	add	objptr, ##35072
1d1b8     F2 FA 61 FC | 	wrlong	result1, objptr
1d1bc     44 00 00 FF 
1d1c0     00 E5 85 F1 | 	sub	objptr, ##35072
1d1c4     F2 FA 01 F6 | 	mov	result1, objptr
1d1c8     B5 FA 25 F4 | 	bith	result1, #181
1d1cc     44 00 00 FF 
1d1d0     04 E5 05 F1 | 	add	objptr, ##35076
1d1d4     F2 FA 61 FC | 	wrlong	result1, objptr
1d1d8     44 00 00 FF 
1d1dc     04 E5 85 F1 | 	sub	objptr, ##35076
1d1e0     F2 FA 01 F6 | 	mov	result1, objptr
1d1e4     D4 FA 25 F4 | 	bith	result1, #212
1d1e8     44 00 00 FF 
1d1ec     08 E5 05 F1 | 	add	objptr, ##35080
1d1f0     F2 FA 61 FC | 	wrlong	result1, objptr
1d1f4     44 00 00 FF 
1d1f8     08 E5 85 F1 | 	sub	objptr, ##35080
1d1fc     F2 FA 01 F6 | 	mov	result1, objptr
1d200     1B FA 25 F4 | 	bith	result1, #27
1d204     44 00 00 FF 
1d208     0C E5 05 F1 | 	add	objptr, ##35084
1d20c     F2 FA 61 FC | 	wrlong	result1, objptr
1d210     44 00 00 FF 
1d214     0C E5 85 F1 | 	sub	objptr, ##35084
1d218     F2 FA 01 F6 | 	mov	result1, objptr
1d21c     00 08 04 FF 
1d220     00 FA 45 F5 | 	or	result1, ##135266304
1d224     44 00 00 FF 
1d228     10 E5 05 F1 | 	add	objptr, ##35088
1d22c     F2 FA 61 FC | 	wrlong	result1, objptr
1d230     44 00 00 FF 
1d234     10 E5 85 F1 | 	sub	objptr, ##35088
1d238     F2 FA 01 F6 | 	mov	result1, objptr
1d23c     00 10 04 FF 
1d240     00 FA 45 F5 | 	or	result1, ##136314880
1d244     44 00 00 FF 
1d248     14 E5 05 F1 | 	add	objptr, ##35092
1d24c     F2 FA 61 FC | 	wrlong	result1, objptr
1d250     44 00 00 FF 
1d254     14 E5 85 F1 | 	sub	objptr, ##35092
1d258     F2 FA 01 F6 | 	mov	result1, objptr
1d25c     00 18 04 FF 
1d260     00 FA 45 F5 | 	or	result1, ##137363456
1d264     44 00 00 FF 
1d268     1C E5 05 F1 | 	add	objptr, ##35100
1d26c     F2 FA 61 FC | 	wrlong	result1, objptr
1d270     44 00 00 FF 
1d274     1C E5 85 F1 | 	sub	objptr, ##35100
1d278     F2 FA 01 F6 | 	mov	result1, objptr
1d27c     00 20 04 FF 
1d280     00 FA 45 F5 | 	or	result1, ##138412032
1d284     44 00 00 FF 
1d288     20 E5 05 F1 | 	add	objptr, ##35104
1d28c     F2 FA 61 FC | 	wrlong	result1, objptr
1d290     44 00 00 FF 
1d294     20 E5 85 F1 | 	sub	objptr, ##35104
1d298     F2 FA 01 F6 | 	mov	result1, objptr
1d29c     00 28 04 FF 
1d2a0     00 FA 45 F5 | 	or	result1, ##139460608
1d2a4     44 00 00 FF 
1d2a8     24 E5 05 F1 | 	add	objptr, ##35108
1d2ac     F2 FA 61 FC | 	wrlong	result1, objptr
1d2b0     44 00 00 FF 
1d2b4     24 E5 85 F1 | 	sub	objptr, ##35108
1d2b8     F2 FA 01 F6 | 	mov	result1, objptr
1d2bc     00 30 04 FF 
1d2c0     00 FA 45 F5 | 	or	result1, ##140509184
1d2c4     44 00 00 FF 
1d2c8     18 E5 05 F1 | 	add	objptr, ##35096
1d2cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d2d0     44 00 00 FF 
1d2d4     18 E5 85 F1 | 	sub	objptr, ##35096
1d2d8     F2 FA 01 F6 | 	mov	result1, objptr
1d2dc     00 38 04 FF 
1d2e0     00 FA 45 F5 | 	or	result1, ##141557760
1d2e4     44 00 00 FF 
1d2e8     28 E5 05 F1 | 	add	objptr, ##35112
1d2ec     F2 FA 61 FC | 	wrlong	result1, objptr
1d2f0     44 00 00 FF 
1d2f4     28 E5 85 F1 | 	sub	objptr, ##35112
1d2f8     F2 FA 01 F6 | 	mov	result1, objptr
1d2fc     00 40 04 FF 
1d300     00 FA 45 F5 | 	or	result1, ##142606336
1d304     44 00 00 FF 
1d308     5C E5 05 F1 | 	add	objptr, ##35164
1d30c     F2 FA 61 FC | 	wrlong	result1, objptr
1d310     44 00 00 FF 
1d314     5C E5 85 F1 | 	sub	objptr, ##35164
1d318     F2 FA 01 F6 | 	mov	result1, objptr
1d31c     00 48 04 FF 
1d320     00 FA 45 F5 | 	or	result1, ##143654912
1d324     44 00 00 FF 
1d328     54 E5 05 F1 | 	add	objptr, ##35156
1d32c     F2 FA 61 FC | 	wrlong	result1, objptr
1d330     44 00 00 FF 
1d334     54 E5 85 F1 | 	sub	objptr, ##35156
1d338     F2 FA 01 F6 | 	mov	result1, objptr
1d33c     00 50 04 FF 
1d340     00 FA 45 F5 | 	or	result1, ##144703488
1d344     44 00 00 FF 
1d348     2C E5 05 F1 | 	add	objptr, ##35116
1d34c     F2 FA 61 FC | 	wrlong	result1, objptr
1d350     44 00 00 FF 
1d354     2C E5 85 F1 | 	sub	objptr, ##35116
1d358     F2 FA 01 F6 | 	mov	result1, objptr
1d35c     00 58 04 FF 
1d360     00 FA 45 F5 | 	or	result1, ##145752064
1d364     44 00 00 FF 
1d368     30 E5 05 F1 | 	add	objptr, ##35120
1d36c     F2 FA 61 FC | 	wrlong	result1, objptr
1d370     44 00 00 FF 
1d374     30 E5 85 F1 | 	sub	objptr, ##35120
1d378     F2 FA 01 F6 | 	mov	result1, objptr
1d37c     00 60 04 FF 
1d380     00 FA 45 F5 | 	or	result1, ##146800640
1d384     44 00 00 FF 
1d388     4C E5 05 F1 | 	add	objptr, ##35148
1d38c     F2 FA 61 FC | 	wrlong	result1, objptr
1d390     44 00 00 FF 
1d394     4C E5 85 F1 | 	sub	objptr, ##35148
1d398     F2 FA 01 F6 | 	mov	result1, objptr
1d39c     00 68 04 FF 
1d3a0     00 FA 45 F5 | 	or	result1, ##147849216
1d3a4     44 00 00 FF 
1d3a8     50 E5 05 F1 | 	add	objptr, ##35152
1d3ac     F2 FA 61 FC | 	wrlong	result1, objptr
1d3b0     44 00 00 FF 
1d3b4     50 E5 85 F1 | 	sub	objptr, ##35152
1d3b8     F2 FA 01 F6 | 	mov	result1, objptr
1d3bc     00 70 04 FF 
1d3c0     00 FA 45 F5 | 	or	result1, ##148897792
1d3c4     44 00 00 FF 
1d3c8     6C E5 05 F1 | 	add	objptr, ##35180
1d3cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d3d0     44 00 00 FF 
1d3d4     6C E5 85 F1 | 	sub	objptr, ##35180
1d3d8     F2 FA 01 F6 | 	mov	result1, objptr
1d3dc     00 78 04 FF 
1d3e0     00 FA 45 F5 | 	or	result1, ##149946368
1d3e4     44 00 00 FF 
1d3e8     68 E5 05 F1 | 	add	objptr, ##35176
1d3ec     F2 FA 61 FC | 	wrlong	result1, objptr
1d3f0     44 00 00 FF 
1d3f4     68 E5 85 F1 | 	sub	objptr, ##35176
1d3f8     F2 FA 01 F6 | 	mov	result1, objptr
1d3fc     00 80 04 FF 
1d400     00 FA 45 F5 | 	or	result1, ##150994944
1d404     44 00 00 FF 
1d408     78 E5 05 F1 | 	add	objptr, ##35192
1d40c     F2 FA 61 FC | 	wrlong	result1, objptr
1d410     44 00 00 FF 
1d414     78 E5 85 F1 | 	sub	objptr, ##35192
1d418                 | _init_commands_ret
1d418     2D 00 64 FD | 	ret
1d41c                 | 
1d41c                 | ' 
1d41c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1d41c                 | ' 
1d41c                 | ' sub init_audio
1d41c                 | _init_audio
1d41c     06 4A 05 F6 | 	mov	COUNT_, #6
1d420     A8 00 A0 FD | 	call	#pushregs_
1d424     00 C0 1F FF 
1d428     00 1E 06 F6 | 	mov	local01, ##1065353216
1d42c                 | ' 
1d42c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1d42c     00 20 06 F6 | 	mov	local02, #0
1d430                 | LR__2330
1d430     10 23 02 F6 | 	mov	local03, local02
1d434     01 22 66 F0 | 	shl	local03, #1
1d438     58 7F 23 FF 
1d43c     00 24 06 F6 | 	mov	local04, ##1191096320
1d440     10 13 52 F6 | 	abs	arg01, local02 wc
1d444     1F 26 C6 C9 |  if_b	decod	local05, #31
1d448     00 26 06 36 |  if_ae	mov	local05, #0
1d44c     2C 6B B0 FD | 	call	#__system___float_fromuns
1d450     13 FB 61 F5 | 	xor	result1, local05
1d454     FD 12 02 F6 | 	mov	arg01, result1
1d458     87 24 20 FF 
1d45c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1d460     1C 6F B0 FD | 	call	#__system___float_mul
1d464     FD 12 02 F6 | 	mov	arg01, result1
1d468     00 00 22 FF 
1d46c     00 14 06 F6 | 	mov	arg02, ##1140850688
1d470     10 71 B0 FD | 	call	#__system___float_div
1d474     FD 12 02 F6 | 	mov	arg01, result1
1d478     64 78 B0 FD | 	call	#__system____builtin_sinf
1d47c     FD 14 02 F6 | 	mov	arg02, result1
1d480     12 13 02 F6 | 	mov	arg01, local04
1d484     F8 6E B0 FD | 	call	#__system___float_mul
1d488     FD 12 02 F6 | 	mov	arg01, result1
1d48c     01 14 06 F6 | 	mov	arg02, #1
1d490     B4 73 B0 FD | 	call	#__system___float_tointeger
1d494     FD 14 02 F6 | 	mov	arg02, result1
1d498     11 13 02 F6 | 	mov	arg01, local03
1d49c     38 0D B0 FD | 	call	#_psdpoke
1d4a0     01 20 06 F1 | 	add	local02, #1
1d4a4     02 00 00 FF 
1d4a8     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d4ac     80 FF 9F CD |  if_b	jmp	#LR__2330
1d4b0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1d4b0     00 20 06 F6 | 	mov	local02, #0
1d4b4                 | LR__2331
1d4b4     10 15 02 F6 | 	mov	arg02, local02
1d4b8     01 14 66 F0 | 	shl	arg02, #1
1d4bc     0B 12 C6 F9 | 	decod	arg01, #11
1d4c0     0A 13 02 F1 | 	add	arg01, arg02
1d4c4     10 25 02 F6 | 	mov	local04, local02
1d4c8     07 24 66 F0 | 	shl	local04, #7
1d4cc     10 25 82 F1 | 	sub	local04, local02
1d4d0     C0 FF 7F FF 
1d4d4     00 15 06 F6 | 	mov	arg02, ##-32512
1d4d8     12 15 02 F1 | 	add	arg02, local04
1d4dc     F8 0C B0 FD | 	call	#_psdpoke
1d4e0     09 24 C6 F9 | 	decod	local04, #9
1d4e4     10 25 02 F1 | 	add	local04, local02
1d4e8     01 24 66 F0 | 	shl	local04, #1
1d4ec     0B 12 C6 F9 | 	decod	arg01, #11
1d4f0     12 13 02 F1 | 	add	arg01, local04
1d4f4     10 27 02 F6 | 	mov	local05, local02
1d4f8     07 26 66 F0 | 	shl	local05, #7
1d4fc     10 27 82 F1 | 	sub	local05, local02
1d500     3F 00 00 FF 
1d504     00 15 06 F6 | 	mov	arg02, ##32512
1d508     13 15 82 F1 | 	sub	arg02, local05
1d50c     C8 0C B0 FD | 	call	#_psdpoke
1d510     01 20 06 F1 | 	add	local02, #1
1d514     01 00 00 FF 
1d518     00 20 56 F2 | 	cmps	local02, ##512 wc
1d51c     94 FF 9F CD |  if_b	jmp	#LR__2331
1d520                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1d520     00 20 06 F6 | 	mov	local02, #0
1d524                 | LR__2332
1d524     10 27 02 F6 | 	mov	local05, local02
1d528     01 26 66 F0 | 	shl	local05, #1
1d52c     0C 12 C6 F9 | 	decod	arg01, #12
1d530     13 13 02 F1 | 	add	arg01, local05
1d534     10 27 02 F6 | 	mov	local05, local02
1d538     06 26 66 F0 | 	shl	local05, #6
1d53c     10 27 82 F1 | 	sub	local05, local02
1d540     C1 FF 7F FF 
1d544     00 14 06 F6 | 	mov	arg02, ##-32256
1d548     13 15 02 F1 | 	add	arg02, local05
1d54c     88 0C B0 FD | 	call	#_psdpoke
1d550     01 20 06 F1 | 	add	local02, #1
1d554     02 00 00 FF 
1d558     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d55c     C4 FF 9F CD |  if_b	jmp	#LR__2332
1d560                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1d560     00 20 06 F6 | 	mov	local02, #0
1d564                 | LR__2333
1d564     10 27 02 F6 | 	mov	local05, local02
1d568     01 26 66 F0 | 	shl	local05, #1
1d56c     0C 00 00 FF 
1d570     00 12 06 F6 | 	mov	arg01, ##6144
1d574     13 13 02 F1 | 	add	arg01, local05
1d578     C0 FF 7F FF 
1d57c     A8 14 06 F6 | 	mov	arg02, ##-32600
1d580     54 0C B0 FD | 	call	#_psdpoke
1d584     01 20 06 F1 | 	add	local02, #1
1d588     80 20 56 F2 | 	cmps	local02, #128 wc
1d58c     D4 FF 9F CD |  if_b	jmp	#LR__2333
1d590     80 20 06 F6 | 	mov	local02, #128
1d594                 | LR__2334
1d594     10 27 02 F6 | 	mov	local05, local02
1d598     01 26 66 F0 | 	shl	local05, #1
1d59c     0C 00 00 FF 
1d5a0     00 12 06 F6 | 	mov	arg01, ##6144
1d5a4     13 13 02 F1 | 	add	arg01, local05
1d5a8     3F 00 00 FF 
1d5ac     58 15 06 F6 | 	mov	arg02, ##32600
1d5b0     24 0C B0 FD | 	call	#_psdpoke
1d5b4     01 20 06 F1 | 	add	local02, #1
1d5b8     02 00 00 FF 
1d5bc     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d5c0     D0 FF 9F CD |  if_b	jmp	#LR__2334
1d5c4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1d5c4     00 20 06 F6 | 	mov	local02, #0
1d5c8                 | LR__2335
1d5c8     10 27 02 F6 | 	mov	local05, local02
1d5cc     01 26 66 F0 | 	shl	local05, #1
1d5d0     0D 12 C6 F9 | 	decod	arg01, #13
1d5d4     13 13 02 F1 | 	add	arg01, local05
1d5d8     C0 FF 7F FF 
1d5dc     A8 14 06 F6 | 	mov	arg02, ##-32600
1d5e0     F4 0B B0 FD | 	call	#_psdpoke
1d5e4     01 20 06 F1 | 	add	local02, #1
1d5e8     01 00 00 FF 
1d5ec     00 20 56 F2 | 	cmps	local02, ##512 wc
1d5f0     D4 FF 9F CD |  if_b	jmp	#LR__2335
1d5f4     09 20 C6 F9 | 	decod	local02, #9
1d5f8                 | LR__2336
1d5f8     10 27 02 F6 | 	mov	local05, local02
1d5fc     01 26 66 F0 | 	shl	local05, #1
1d600     0D 12 C6 F9 | 	decod	arg01, #13
1d604     13 13 02 F1 | 	add	arg01, local05
1d608     3F 00 00 FF 
1d60c     58 15 06 F6 | 	mov	arg02, ##32600
1d610     C4 0B B0 FD | 	call	#_psdpoke
1d614     01 20 06 F1 | 	add	local02, #1
1d618     02 00 00 FF 
1d61c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d620     D4 FF 9F CD |  if_b	jmp	#LR__2336
1d624                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1d624     00 20 06 F6 | 	mov	local02, #0
1d628                 | LR__2337
1d628     10 27 02 F6 | 	mov	local05, local02
1d62c     01 26 66 F0 | 	shl	local05, #1
1d630     14 00 00 FF 
1d634     00 12 06 F6 | 	mov	arg01, ##10240
1d638     13 13 02 F1 | 	add	arg01, local05
1d63c     C0 FF 7F FF 
1d640     A8 14 06 F6 | 	mov	arg02, ##-32600
1d644     90 0B B0 FD | 	call	#_psdpoke
1d648     01 20 06 F1 | 	add	local02, #1
1d64c     00 21 56 F2 | 	cmps	local02, #256 wc
1d650     D4 FF 9F CD |  if_b	jmp	#LR__2337
1d654     00 21 06 F6 | 	mov	local02, #256
1d658                 | LR__2338
1d658     10 27 02 F6 | 	mov	local05, local02
1d65c     01 26 66 F0 | 	shl	local05, #1
1d660     14 00 00 FF 
1d664     00 12 06 F6 | 	mov	arg01, ##10240
1d668     13 13 02 F1 | 	add	arg01, local05
1d66c     3F 00 00 FF 
1d670     58 15 06 F6 | 	mov	arg02, ##32600
1d674     60 0B B0 FD | 	call	#_psdpoke
1d678     01 20 06 F1 | 	add	local02, #1
1d67c     02 00 00 FF 
1d680     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d684     D0 FF 9F CD |  if_b	jmp	#LR__2338
1d688                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1d688     18 00 00 FF 
1d68c     00 20 06 F6 | 	mov	local02, ##12288
1d690                 | LR__2339
1d690     10 13 02 F6 | 	mov	arg01, local02
1d694     00 14 06 F6 | 	mov	arg02, #0
1d698     F4 0A B0 FD | 	call	#_pslpoke
1d69c     04 20 06 F1 | 	add	local02, #4
1d6a0     77 00 00 FF 
1d6a4     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1d6a8     E4 FF 9F CD |  if_b	jmp	#LR__2339
1d6ac                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1d6ac     00 20 06 F6 | 	mov	local02, #0
1d6b0                 | LR__2340
1d6b0     10 27 02 F6 | 	mov	local05, local02
1d6b4     01 26 66 F0 | 	shl	local05, #1
1d6b8     78 00 00 FF 
1d6bc     00 22 06 F6 | 	mov	local03, ##61440
1d6c0     13 23 02 F1 | 	add	local03, local05
1d6c4     12 00 00 FF 
1d6c8     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1d6cc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1d6d0     12 00 00 FF 
1d6d4     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1d6d8     10 12 06 F1 | 	add	arg01, #16
1d6dc     10 15 02 F6 | 	mov	arg02, local02
1d6e0     01 14 66 F0 | 	shl	arg02, #1
1d6e4     0A 13 02 F1 | 	add	arg01, arg02
1d6e8     09 15 E2 FA | 	rdword	arg02, arg01
1d6ec     11 13 02 F6 | 	mov	arg01, local03
1d6f0     E4 0A B0 FD | 	call	#_psdpoke
1d6f4     01 20 06 F1 | 	add	local02, #1
1d6f8     02 00 00 FF 
1d6fc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d700     AC FF 9F CD |  if_b	jmp	#LR__2340
1d704                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1d704     00 20 06 F6 | 	mov	local02, #0
1d708                 | LR__2341
1d708     10 27 02 F6 | 	mov	local05, local02
1d70c     01 26 66 F0 | 	shl	local05, #1
1d710     7C 00 00 FF 
1d714     00 22 06 F6 | 	mov	local03, ##63488
1d718     13 23 02 F1 | 	add	local03, local05
1d71c     0E 00 00 FF 
1d720     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1d724     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1d728     0E 00 00 FF 
1d72c     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1d730     10 12 06 F1 | 	add	arg01, #16
1d734     10 15 02 F6 | 	mov	arg02, local02
1d738     01 14 66 F0 | 	shl	arg02, #1
1d73c     0A 13 02 F1 | 	add	arg01, arg02
1d740     09 15 E2 FA | 	rdword	arg02, arg01
1d744     11 13 02 F6 | 	mov	arg01, local03
1d748     8C 0A B0 FD | 	call	#_psdpoke
1d74c     01 20 06 F1 | 	add	local02, #1
1d750     02 00 00 FF 
1d754     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d758     AC FF 9F CD |  if_b	jmp	#LR__2341
1d75c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1d75c     00 20 06 F6 | 	mov	local02, #0
1d760     0C 00 00 FF 
1d764     D8 E4 05 F1 | 	add	objptr, ##6360
1d768     97 18 48 FB | 	callpa	#(@LR__2343-@LR__2342)>>2,fcache_load_ptr_
1d76c                 | LR__2342
1d76c     10 27 02 F6 | 	mov	local05, local02
1d770     01 26 66 F0 | 	shl	local05, #1
1d774     F2 26 02 F1 | 	add	local05, objptr
1d778     10 23 02 F6 | 	mov	local03, local02
1d77c     08 22 66 F0 | 	shl	local03, #8
1d780     7F 00 00 FF 
1d784     00 29 06 F6 | 	mov	local06, ##65280
1d788     11 29 82 F1 | 	sub	local06, local03
1d78c     13 29 52 FC | 	wrword	local06, local05
1d790     01 20 06 F1 | 	add	local02, #1
1d794     00 21 56 F2 | 	cmps	local02, #256 wc
1d798     D0 FF 9F CD |  if_b	jmp	#LR__2342
1d79c                 | LR__2343
1d79c     0C 00 00 FF 
1d7a0     D8 E4 85 F1 | 	sub	objptr, ##6360
1d7a4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1d7a4     00 20 06 F6 | 	mov	local02, #0
1d7a8                 | LR__2344
1d7a8     10 27 02 F6 | 	mov	local05, local02
1d7ac     01 26 66 F0 | 	shl	local05, #1
1d7b0     0D 00 00 FF 
1d7b4     D8 E4 05 F1 | 	add	objptr, ##6872
1d7b8     F2 26 02 F1 | 	add	local05, objptr
1d7bc     80 BF 23 FF 
1d7c0     00 12 06 F6 | 	mov	arg01, ##1199505408
1d7c4     0F 15 02 F6 | 	mov	arg02, local01
1d7c8     0D 00 00 FF 
1d7cc     D8 E4 85 F1 | 	sub	objptr, ##6872
1d7d0     AC 6B B0 FD | 	call	#__system___float_mul
1d7d4     FD 12 02 F6 | 	mov	arg01, result1
1d7d8     01 14 06 F6 | 	mov	arg02, #1
1d7dc     68 70 B0 FD | 	call	#__system___float_tointeger
1d7e0     13 FB 51 FC | 	wrword	result1, local05
1d7e4     0F 13 02 F6 | 	mov	arg01, local01
1d7e8     CC BC 1F FF 
1d7ec     9A 15 06 F6 | 	mov	arg02, ##1064933786
1d7f0     8C 6B B0 FD | 	call	#__system___float_mul
1d7f4     FD 1E 02 F6 | 	mov	local01, result1
1d7f8     01 20 06 F1 | 	add	local02, #1
1d7fc     00 21 56 F2 | 	cmps	local02, #256 wc
1d800     A4 FF 9F CD |  if_b	jmp	#LR__2344
1d804     0E 00 00 FF 
1d808     D6 E4 05 F1 | 	add	objptr, ##7382
1d80c     F2 00 58 FC | 	wrword	#0, objptr
1d810                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1d810     00 20 06 F6 | 	mov	local02, #0
1d814     02 E4 05 F1 | 	add	objptr, #2
1d818     97 10 48 FB | 	callpa	#(@LR__2346-@LR__2345)>>2,fcache_load_ptr_
1d81c                 | LR__2345
1d81c     10 27 02 F6 | 	mov	local05, local02
1d820     01 26 66 F0 | 	shl	local05, #1
1d824     F2 26 02 F1 | 	add	local05, objptr
1d828     7F 00 80 FF 
1d82c     13 01 5A FC | 	wrword	##65280, local05
1d830     01 20 06 F1 | 	add	local02, #1
1d834     FF 20 56 F2 | 	cmps	local02, #255 wc
1d838     E0 FF 9F CD |  if_b	jmp	#LR__2345
1d83c                 | LR__2346
1d83c     FE E5 05 F1 | 	add	objptr, #510
1d840     F2 00 58 FC | 	wrword	#0, objptr
1d844                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1d844     00 20 06 F6 | 	mov	local02, #0
1d848     02 E4 05 F1 | 	add	objptr, #2
1d84c     97 52 48 FB | 	callpa	#(@LR__2351-@LR__2347)>>2,fcache_load_ptr_
1d850                 | LR__2347
1d850     10 27 02 F6 | 	mov	local05, local02
1d854     01 26 66 F0 | 	shl	local05, #1
1d858     F2 26 02 F1 | 	add	local05, objptr
1d85c     10 29 02 F6 | 	mov	local06, local02
1d860     0C 28 66 F0 | 	shl	local06, #12
1d864     13 29 52 FC | 	wrword	local06, local05
1d868     01 20 06 F1 | 	add	local02, #1
1d86c     10 20 56 F2 | 	cmps	local02, #16 wc
1d870     DC FF 9F CD |  if_b	jmp	#LR__2347
1d874                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1d874     10 20 06 F6 | 	mov	local02, #16
1d878                 | LR__2348
1d878     10 27 02 F6 | 	mov	local05, local02
1d87c     01 26 66 F0 | 	shl	local05, #1
1d880     F2 26 02 F1 | 	add	local05, objptr
1d884     7F 00 80 FF 
1d888     13 01 5A FC | 	wrword	##65280, local05
1d88c     01 20 06 F1 | 	add	local02, #1
1d890     F0 20 16 F2 | 	cmp	local02, #240 wc
1d894     E0 FF 9F CD |  if_b	jmp	#LR__2348
1d898                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1d898     F0 20 06 F6 | 	mov	local02, #240
1d89c                 | LR__2349
1d89c     10 27 02 F6 | 	mov	local05, local02
1d8a0     01 26 66 F0 | 	shl	local05, #1
1d8a4     F2 26 02 F1 | 	add	local05, objptr
1d8a8     FF 22 06 F6 | 	mov	local03, #255
1d8ac     10 23 82 F1 | 	sub	local03, local02
1d8b0     0C 22 66 F0 | 	shl	local03, #12
1d8b4     13 23 52 FC | 	wrword	local03, local05
1d8b8     01 20 06 F1 | 	add	local02, #1
1d8bc     00 21 16 F2 | 	cmp	local02, #256 wc
1d8c0     D8 FF 9F CD |  if_b	jmp	#LR__2349
1d8c4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1d8c4     00 20 06 F6 | 	mov	local02, #0
1d8c8     01 00 00 FF 
1d8cc     00 E4 05 F1 | 	add	objptr, ##512
1d8d0                 | LR__2350
1d8d0     10 27 02 F6 | 	mov	local05, local02
1d8d4     01 26 66 F0 | 	shl	local05, #1
1d8d8     F2 26 02 F1 | 	add	local05, objptr
1d8dc     10 29 02 F6 | 	mov	local06, local02
1d8e0     08 28 66 F0 | 	shl	local06, #8
1d8e4     13 29 52 FC | 	wrword	local06, local05
1d8e8     01 20 06 F1 | 	add	local02, #1
1d8ec     00 21 56 F2 | 	cmps	local02, #256 wc
1d8f0     DC FF 9F CD |  if_b	jmp	#LR__2350
1d8f4                 | LR__2351
1d8f4     FE E5 05 F1 | 	add	objptr, #510
1d8f8     F2 00 58 FC | 	wrword	#0, objptr
1d8fc                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1d8fc     00 20 06 F6 | 	mov	local02, #0
1d900     02 E4 05 F1 | 	add	objptr, #2
1d904     97 6A 48 FB | 	callpa	#(@LR__2356-@LR__2352)>>2,fcache_load_ptr_
1d908                 | LR__2352
1d908     10 27 02 F6 | 	mov	local05, local02
1d90c     01 26 66 F0 | 	shl	local05, #1
1d910     F2 26 02 F1 | 	add	local05, objptr
1d914     10 29 02 F6 | 	mov	local06, local02
1d918     04 28 66 F0 | 	shl	local06, #4
1d91c     10 29 02 F1 | 	add	local06, local02
1d920     04 28 66 F0 | 	shl	local06, #4
1d924     13 29 52 FC | 	wrword	local06, local05
1d928     01 20 06 F1 | 	add	local02, #1
1d92c     F0 20 56 F2 | 	cmps	local02, #240 wc
1d930     D4 FF 9F CD |  if_b	jmp	#LR__2352
1d934     F0 20 06 F6 | 	mov	local02, #240
1d938                 | LR__2353
1d938     10 27 02 F6 | 	mov	local05, local02
1d93c     01 26 66 F0 | 	shl	local05, #1
1d940     F2 26 02 F1 | 	add	local05, objptr
1d944     FF 22 06 F6 | 	mov	local03, #255
1d948     10 23 82 F1 | 	sub	local03, local02
1d94c     0C 22 66 F0 | 	shl	local03, #12
1d950     13 23 52 FC | 	wrword	local03, local05
1d954     01 20 06 F1 | 	add	local02, #1
1d958     00 21 16 F2 | 	cmp	local02, #256 wc
1d95c     D8 FF 9F CD |  if_b	jmp	#LR__2353
1d960                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1d960     00 20 06 F6 | 	mov	local02, #0
1d964     01 00 00 FF 
1d968     00 E4 05 F1 | 	add	objptr, ##512
1d96c                 | LR__2354
1d96c     10 27 02 F6 | 	mov	local05, local02
1d970     01 26 66 F0 | 	shl	local05, #1
1d974     F2 26 02 F1 | 	add	local05, objptr
1d978     10 29 02 F6 | 	mov	local06, local02
1d97c     09 28 66 F0 | 	shl	local06, #9
1d980     13 29 52 FC | 	wrword	local06, local05
1d984     FF 26 06 F6 | 	mov	local05, #255
1d988     10 27 82 F1 | 	sub	local05, local02
1d98c     01 26 66 F0 | 	shl	local05, #1
1d990     F2 26 02 F1 | 	add	local05, objptr
1d994     10 29 02 F6 | 	mov	local06, local02
1d998     09 28 66 F0 | 	shl	local06, #9
1d99c     13 29 52 FC | 	wrword	local06, local05
1d9a0     01 20 06 F1 | 	add	local02, #1
1d9a4     80 20 56 F2 | 	cmps	local02, #128 wc
1d9a8     C0 FF 9F CD |  if_b	jmp	#LR__2354
1d9ac                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1d9ac     00 20 06 F6 | 	mov	local02, #0
1d9b0     01 00 00 FF 
1d9b4     00 E4 05 F1 | 	add	objptr, ##512
1d9b8                 | LR__2355
1d9b8     10 27 02 F6 | 	mov	local05, local02
1d9bc     01 26 66 F0 | 	shl	local05, #1
1d9c0     F2 26 02 F1 | 	add	local05, objptr
1d9c4     10 29 02 F6 | 	mov	local06, local02
1d9c8     0D 28 66 F0 | 	shl	local06, #13
1d9cc     13 29 52 FC | 	wrword	local06, local05
1d9d0     01 20 06 F1 | 	add	local02, #1
1d9d4     08 20 56 F2 | 	cmps	local02, #8 wc
1d9d8     DC FF 9F CD |  if_b	jmp	#LR__2355
1d9dc                 | LR__2356
1d9dc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1d9dc     08 20 06 F6 | 	mov	local02, #8
1d9e0     97 42 48 FB | 	callpa	#(@LR__2360-@LR__2357)>>2,fcache_load_ptr_
1d9e4                 | LR__2357
1d9e4     10 27 02 F6 | 	mov	local05, local02
1d9e8     01 26 66 F0 | 	shl	local05, #1
1d9ec     F2 26 02 F1 | 	add	local05, objptr
1d9f0     10 1F 02 F6 | 	mov	local01, local02
1d9f4     08 1E 86 F1 | 	sub	local01, #8
1d9f8     0B 1E 66 F0 | 	shl	local01, #11
1d9fc     7F 00 00 FF 
1da00     00 29 06 F6 | 	mov	local06, ##65280
1da04     0F 29 82 F1 | 	sub	local06, local01
1da08     13 29 52 FC | 	wrword	local06, local05
1da0c     01 20 06 F1 | 	add	local02, #1
1da10     18 20 16 F2 | 	cmp	local02, #24 wc
1da14     CC FF 9F CD |  if_b	jmp	#LR__2357
1da18                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1da18     18 20 06 F6 | 	mov	local02, #24
1da1c                 | LR__2358
1da1c     10 27 02 F6 | 	mov	local05, local02
1da20     01 26 66 F0 | 	shl	local05, #1
1da24     F2 26 02 F1 | 	add	local05, objptr
1da28     40 00 80 FF 
1da2c     13 01 58 FC | 	wrword	##32768, local05
1da30     01 20 06 F1 | 	add	local02, #1
1da34     81 20 16 F2 | 	cmp	local02, #129 wc
1da38     E0 FF 9F CD |  if_b	jmp	#LR__2358
1da3c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1da3c     81 20 06 F6 | 	mov	local02, #129
1da40                 | LR__2359
1da40     10 27 02 F6 | 	mov	local05, local02
1da44     01 26 66 F0 | 	shl	local05, #1
1da48     F2 26 02 F1 | 	add	local05, objptr
1da4c     FF 22 06 F6 | 	mov	local03, #255
1da50     10 23 82 F1 | 	sub	local03, local02
1da54     08 22 66 F0 | 	shl	local03, #8
1da58     13 23 52 FC | 	wrword	local03, local05
1da5c     01 20 06 F1 | 	add	local02, #1
1da60     00 21 16 F2 | 	cmp	local02, #256 wc
1da64     D8 FF 9F CD |  if_b	jmp	#LR__2359
1da68                 | LR__2360
1da68     3E 00 00 FF 
1da6c     FE E4 05 F1 | 	add	objptr, ##31998
1da70     F2 00 59 FC | 	wrword	#128, objptr
1da74     51 00 00 FF 
1da78     D6 E5 85 F1 | 	sub	objptr, ##41942
1da7c                 | ' for i=0 to 7
1da7c     00 20 06 F6 | 	mov	local02, #0
1da80     97 8E 48 FB | 	callpa	#(@LR__2362-@LR__2361)>>2,fcache_load_ptr_
1da84                 | LR__2361
1da84     10 27 02 F6 | 	mov	local05, local02
1da88     01 26 66 F0 | 	shl	local05, #1
1da8c     10 27 02 F1 | 	add	local05, local02
1da90     03 26 66 F0 | 	shl	local05, #3
1da94     14 00 00 FF 
1da98     38 E5 05 F1 | 	add	objptr, ##10552
1da9c     F2 26 02 F1 | 	add	local05, objptr
1daa0     00 EE A1 FF 
1daa4     13 01 68 FC | 	wrlong	##1138491392, local05
1daa8     10 27 02 F6 | 	mov	local05, local02
1daac     01 26 66 F0 | 	shl	local05, #1
1dab0     10 27 02 F1 | 	add	local05, local02
1dab4     03 26 66 F0 | 	shl	local05, #3
1dab8     F2 26 02 F1 | 	add	local05, objptr
1dabc     04 26 06 F1 | 	add	local05, #4
1dac0     13 21 42 FC | 	wrbyte	local02, local05
1dac4     10 27 02 F6 | 	mov	local05, local02
1dac8     01 26 66 F0 | 	shl	local05, #1
1dacc     10 27 02 F1 | 	add	local05, local02
1dad0     03 26 66 F0 | 	shl	local05, #3
1dad4     F2 26 02 F1 | 	add	local05, objptr
1dad8     05 26 06 F1 | 	add	local05, #5
1dadc     13 21 42 FC | 	wrbyte	local02, local05
1dae0     10 27 02 F6 | 	mov	local05, local02
1dae4     01 26 66 F0 | 	shl	local05, #1
1dae8     10 27 02 F1 | 	add	local05, local02
1daec     03 26 66 F0 | 	shl	local05, #3
1daf0     F2 26 02 F1 | 	add	local05, objptr
1daf4     06 26 06 F1 | 	add	local05, #6
1daf8     13 01 58 FC | 	wrword	#0, local05
1dafc     10 27 02 F6 | 	mov	local05, local02
1db00     01 26 66 F0 | 	shl	local05, #1
1db04     10 27 02 F1 | 	add	local05, local02
1db08     03 26 66 F0 | 	shl	local05, #3
1db0c     F2 26 02 F1 | 	add	local05, objptr
1db10     08 26 06 F1 | 	add	local05, #8
1db14     00 C0 9F FF 
1db18     13 01 68 FC | 	wrlong	##1065353216, local05
1db1c     10 27 02 F6 | 	mov	local05, local02
1db20     01 26 66 F0 | 	shl	local05, #1
1db24     10 27 02 F1 | 	add	local05, local02
1db28     03 26 66 F0 | 	shl	local05, #3
1db2c     F2 26 02 F1 | 	add	local05, objptr
1db30     0C 26 06 F1 | 	add	local05, #12
1db34     00 40 A0 FF 
1db38     13 01 68 FC | 	wrlong	##1082130432, local05
1db3c     10 27 02 F6 | 	mov	local05, local02
1db40     01 26 66 F0 | 	shl	local05, #1
1db44     10 27 02 F1 | 	add	local05, local02
1db48     03 26 66 F0 | 	shl	local05, #3
1db4c     F2 26 02 F1 | 	add	local05, objptr
1db50     10 26 06 F1 | 	add	local05, #16
1db54     13 01 68 FC | 	wrlong	#0, local05
1db58     10 27 02 F6 | 	mov	local05, local02
1db5c     01 26 66 F0 | 	shl	local05, #1
1db60     10 27 02 F1 | 	add	local05, local02
1db64     03 26 66 F0 | 	shl	local05, #3
1db68     F2 26 02 F1 | 	add	local05, objptr
1db6c     14 26 06 F1 | 	add	local05, #20
1db70     13 FF 59 FC | 	wrword	#255, local05
1db74     10 27 02 F6 | 	mov	local05, local02
1db78     01 26 66 F0 | 	shl	local05, #1
1db7c     3D 00 00 FF 
1db80     90 E4 05 F1 | 	add	objptr, ##31376
1db84     F2 26 02 F1 | 	add	local05, objptr
1db88     13 FF 59 FC | 	wrword	#255, local05
1db8c     01 20 06 F1 | 	add	local02, #1
1db90     08 20 56 F2 | 	cmps	local02, #8 wc
1db94     51 00 00 FF 
1db98     C8 E5 85 F1 | 	sub	objptr, ##41928
1db9c     E4 FE 9F CD |  if_b	jmp	#LR__2361
1dba0                 | LR__2362
1dba0     00 6E 20 FF 
1dba4     00 28 06 F6 | 	mov	local06, ##1088159744
1dba8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1dba8     03 26 06 F6 | 	mov	local05, #3
1dbac                 | LR__2363
1dbac     14 13 02 F6 | 	mov	arg01, local06
1dbb0     CE C3 1F FF 
1dbb4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1dbb8     C4 67 B0 FD | 	call	#__system___float_mul
1dbbc     FD 28 02 F6 | 	mov	local06, result1
1dbc0     FA 27 6E FB | 	djnz	local05, #LR__2363
1dbc4     00 20 06 F6 | 	mov	local02, #0
1dbc8                 | LR__2364
1dbc8     10 25 02 F6 | 	mov	local04, local02
1dbcc     02 24 66 F0 | 	shl	local04, #2
1dbd0     14 00 00 FF 
1dbd4     D8 E4 05 F1 | 	add	objptr, ##10456
1dbd8     F2 24 02 F1 | 	add	local04, objptr
1dbdc     12 29 62 FC | 	wrlong	local06, local04
1dbe0     14 13 02 F6 | 	mov	arg01, local06
1dbe4     CE C3 1F FF 
1dbe8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1dbec     14 00 00 FF 
1dbf0     D8 E4 85 F1 | 	sub	objptr, ##10456
1dbf4     88 67 B0 FD | 	call	#__system___float_mul
1dbf8     FD 28 02 F6 | 	mov	local06, result1
1dbfc     01 20 06 F1 | 	add	local02, #1
1dc00     0C 20 56 F2 | 	cmps	local02, #12 wc
1dc04     C0 FF 9F CD |  if_b	jmp	#LR__2364
1dc08     14 00 00 FF 
1dc0c     08 E5 05 F1 | 	add	objptr, ##10504
1dc10     F2 50 6B FC | 	wrlong	#424, objptr
1dc14     04 E4 05 F1 | 	add	objptr, #4
1dc18     F2 20 6B FC | 	wrlong	#400, objptr
1dc1c     04 E4 05 F1 | 	add	objptr, #4
1dc20     F2 F2 6A FC | 	wrlong	#377, objptr
1dc24     04 E4 05 F1 | 	add	objptr, #4
1dc28     F2 C8 6A FC | 	wrlong	#356, objptr
1dc2c     04 E4 05 F1 | 	add	objptr, #4
1dc30     F2 A0 6A FC | 	wrlong	#336, objptr
1dc34     04 E4 05 F1 | 	add	objptr, #4
1dc38     F2 7A 6A FC | 	wrlong	#317, objptr
1dc3c     04 E4 05 F1 | 	add	objptr, #4
1dc40     F2 58 6A FC | 	wrlong	#300, objptr
1dc44     04 E4 05 F1 | 	add	objptr, #4
1dc48     F2 36 6A FC | 	wrlong	#283, objptr
1dc4c     04 E4 05 F1 | 	add	objptr, #4
1dc50     F2 16 6A FC | 	wrlong	#267, objptr
1dc54     04 E4 05 F1 | 	add	objptr, #4
1dc58     F2 F8 69 FC | 	wrlong	#252, objptr
1dc5c     04 E4 05 F1 | 	add	objptr, #4
1dc60     F2 DC 69 FC | 	wrlong	#238, objptr
1dc64     04 E4 05 F1 | 	add	objptr, #4
1dc68     F2 C0 69 FC | 	wrlong	#224, objptr
1dc6c     3D 00 00 FF 
1dc70     A2 E4 05 F1 | 	add	objptr, ##31394
1dc74     F2 00 59 FC | 	wrword	#128, objptr
1dc78     02 E4 85 F1 | 	sub	objptr, #2
1dc7c     F2 00 59 FC | 	wrword	#128, objptr
1dc80     51 00 00 FF 
1dc84     D4 E5 85 F1 | 	sub	objptr, ##41940
1dc88     A7 F0 03 F6 | 	mov	ptra, fp
1dc8c     B2 00 A0 FD | 	call	#popregs_
1dc90                 | _init_audio_ret
1dc90     2D 00 64 FD | 	ret
1dc94                 | 
1dc94                 | ' 
1dc94                 | ' '------------------- Error messages
1dc94                 | ' 
1dc94                 | ' sub init_error_strings
1dc94                 | _init_error_strings
1dc94     8D 01 00 FF 
1dc98     69 01 06 F6 | 	mov	_var01, ##@LR__5618
1dc9c     45 00 00 FF 
1dca0     7C E4 05 F1 | 	add	objptr, ##35452
1dca4     F2 00 62 FC | 	wrlong	_var01, objptr
1dca8     8D 01 00 FF 
1dcac     6A 01 06 F6 | 	mov	_var01, ##@LR__5619
1dcb0     04 E4 05 F1 | 	add	objptr, #4
1dcb4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcb8     8D 01 00 FF 
1dcbc     8E 01 06 F6 | 	mov	_var01, ##@LR__5620
1dcc0     04 E4 05 F1 | 	add	objptr, #4
1dcc4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcc8     8D 01 00 FF 
1dccc     AE 01 06 F6 | 	mov	_var01, ##@LR__5621
1dcd0     04 E4 05 F1 | 	add	objptr, #4
1dcd4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcd8     8D 01 00 FF 
1dcdc     C7 01 06 F6 | 	mov	_var01, ##@LR__5622
1dce0     04 E4 05 F1 | 	add	objptr, #4
1dce4     F2 00 62 FC | 	wrlong	_var01, objptr
1dce8     8D 01 00 FF 
1dcec     E2 01 06 F6 | 	mov	_var01, ##@LR__5623
1dcf0     04 E4 05 F1 | 	add	objptr, #4
1dcf4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcf8     8E 01 00 FF 
1dcfc     03 00 06 F6 | 	mov	_var01, ##@LR__5624
1dd00     04 E4 05 F1 | 	add	objptr, #4
1dd04     F2 00 62 FC | 	wrlong	_var01, objptr
1dd08     8E 01 00 FF 
1dd0c     30 00 06 F6 | 	mov	_var01, ##@LR__5625
1dd10     04 E4 05 F1 | 	add	objptr, #4
1dd14     F2 00 62 FC | 	wrlong	_var01, objptr
1dd18     8E 01 00 FF 
1dd1c     5A 00 06 F6 | 	mov	_var01, ##@LR__5626
1dd20     04 E4 05 F1 | 	add	objptr, #4
1dd24     F2 00 62 FC | 	wrlong	_var01, objptr
1dd28     8E 01 00 FF 
1dd2c     72 00 06 F6 | 	mov	_var01, ##@LR__5627
1dd30     04 E4 05 F1 | 	add	objptr, #4
1dd34     F2 00 62 FC | 	wrlong	_var01, objptr
1dd38     8E 01 00 FF 
1dd3c     92 00 06 F6 | 	mov	_var01, ##@LR__5628
1dd40     04 E4 05 F1 | 	add	objptr, #4
1dd44     F2 00 62 FC | 	wrlong	_var01, objptr
1dd48     8E 01 00 FF 
1dd4c     A8 00 06 F6 | 	mov	_var01, ##@LR__5629
1dd50     04 E4 05 F1 | 	add	objptr, #4
1dd54     F2 00 62 FC | 	wrlong	_var01, objptr
1dd58     8E 01 00 FF 
1dd5c     C5 00 06 F6 | 	mov	_var01, ##@LR__5630
1dd60     04 E4 05 F1 | 	add	objptr, #4
1dd64     F2 00 62 FC | 	wrlong	_var01, objptr
1dd68     8E 01 00 FF 
1dd6c     E8 00 06 F6 | 	mov	_var01, ##@LR__5631
1dd70     04 E4 05 F1 | 	add	objptr, #4
1dd74     F2 00 62 FC | 	wrlong	_var01, objptr
1dd78     8E 01 00 FF 
1dd7c     0E 01 06 F6 | 	mov	_var01, ##@LR__5632
1dd80     04 E4 05 F1 | 	add	objptr, #4
1dd84     F2 00 62 FC | 	wrlong	_var01, objptr
1dd88     8E 01 00 FF 
1dd8c     29 01 06 F6 | 	mov	_var01, ##@LR__5633
1dd90     04 E4 05 F1 | 	add	objptr, #4
1dd94     F2 00 62 FC | 	wrlong	_var01, objptr
1dd98     8E 01 00 FF 
1dd9c     39 01 06 F6 | 	mov	_var01, ##@LR__5634
1dda0     04 E4 05 F1 | 	add	objptr, #4
1dda4     F2 00 62 FC | 	wrlong	_var01, objptr
1dda8     8E 01 00 FF 
1ddac     48 01 06 F6 | 	mov	_var01, ##@LR__5635
1ddb0     04 E4 05 F1 | 	add	objptr, #4
1ddb4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddb8     8E 01 00 FF 
1ddbc     62 01 06 F6 | 	mov	_var01, ##@LR__5636
1ddc0     04 E4 05 F1 | 	add	objptr, #4
1ddc4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddc8     8E 01 00 FF 
1ddcc     73 01 06 F6 | 	mov	_var01, ##@LR__5637
1ddd0     04 E4 05 F1 | 	add	objptr, #4
1ddd4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddd8     8E 01 00 FF 
1dddc     8A 01 06 F6 | 	mov	_var01, ##@LR__5638
1dde0     04 E4 05 F1 | 	add	objptr, #4
1dde4     F2 00 62 FC | 	wrlong	_var01, objptr
1dde8     8E 01 00 FF 
1ddec     9D 01 06 F6 | 	mov	_var01, ##@LR__5639
1ddf0     04 E4 05 F1 | 	add	objptr, #4
1ddf4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddf8     8E 01 00 FF 
1ddfc     AC 01 06 F6 | 	mov	_var01, ##@LR__5640
1de00     04 E4 05 F1 | 	add	objptr, #4
1de04     F2 00 62 FC | 	wrlong	_var01, objptr
1de08     8E 01 00 FF 
1de0c     C8 01 06 F6 | 	mov	_var01, ##@LR__5641
1de10     04 E4 05 F1 | 	add	objptr, #4
1de14     F2 00 62 FC | 	wrlong	_var01, objptr
1de18     8E 01 00 FF 
1de1c     D8 01 06 F6 | 	mov	_var01, ##@LR__5642
1de20     04 E4 05 F1 | 	add	objptr, #4
1de24     F2 00 62 FC | 	wrlong	_var01, objptr
1de28     8E 01 00 FF 
1de2c     E8 01 06 F6 | 	mov	_var01, ##@LR__5643
1de30     04 E4 05 F1 | 	add	objptr, #4
1de34     F2 00 62 FC | 	wrlong	_var01, objptr
1de38     8F 01 00 FF 
1de3c     1B 00 06 F6 | 	mov	_var01, ##@LR__5644
1de40     04 E4 05 F1 | 	add	objptr, #4
1de44     F2 00 62 FC | 	wrlong	_var01, objptr
1de48     8F 01 00 FF 
1de4c     36 00 06 F6 | 	mov	_var01, ##@LR__5645
1de50     04 E4 05 F1 | 	add	objptr, #4
1de54     F2 00 62 FC | 	wrlong	_var01, objptr
1de58     8F 01 00 FF 
1de5c     4B 00 06 F6 | 	mov	_var01, ##@LR__5646
1de60     04 E4 05 F1 | 	add	objptr, #4
1de64     F2 00 62 FC | 	wrlong	_var01, objptr
1de68     8F 01 00 FF 
1de6c     57 00 06 F6 | 	mov	_var01, ##@LR__5647
1de70     04 E4 05 F1 | 	add	objptr, #4
1de74     F2 00 62 FC | 	wrlong	_var01, objptr
1de78     8F 01 00 FF 
1de7c     68 00 06 F6 | 	mov	_var01, ##@LR__5648
1de80     04 E4 05 F1 | 	add	objptr, #4
1de84     F2 00 62 FC | 	wrlong	_var01, objptr
1de88     8F 01 00 FF 
1de8c     78 00 06 F6 | 	mov	_var01, ##@LR__5649
1de90     04 E4 05 F1 | 	add	objptr, #4
1de94     F2 00 62 FC | 	wrlong	_var01, objptr
1de98     8F 01 00 FF 
1de9c     93 00 06 F6 | 	mov	_var01, ##@LR__5650
1dea0     04 E4 05 F1 | 	add	objptr, #4
1dea4     F2 00 62 FC | 	wrlong	_var01, objptr
1dea8     8F 01 00 FF 
1deac     A3 00 06 F6 | 	mov	_var01, ##@LR__5651
1deb0     04 E4 05 F1 | 	add	objptr, #4
1deb4     F2 00 62 FC | 	wrlong	_var01, objptr
1deb8     8F 01 00 FF 
1debc     B1 00 06 F6 | 	mov	_var01, ##@LR__5652
1dec0     04 E4 05 F1 | 	add	objptr, #4
1dec4     F2 00 62 FC | 	wrlong	_var01, objptr
1dec8     8F 01 00 FF 
1decc     CB 00 06 F6 | 	mov	_var01, ##@LR__5653
1ded0     04 E4 05 F1 | 	add	objptr, #4
1ded4     F2 00 62 FC | 	wrlong	_var01, objptr
1ded8     8F 01 00 FF 
1dedc     FE 00 06 F6 | 	mov	_var01, ##@LR__5654
1dee0     04 E4 05 F1 | 	add	objptr, #4
1dee4     F2 00 62 FC | 	wrlong	_var01, objptr
1dee8     8F 01 00 FF 
1deec     16 01 06 F6 | 	mov	_var01, ##@LR__5655
1def0     04 E4 05 F1 | 	add	objptr, #4
1def4     F2 00 62 FC | 	wrlong	_var01, objptr
1def8     8F 01 00 FF 
1defc     31 01 06 F6 | 	mov	_var01, ##@LR__5656
1df00     04 E4 05 F1 | 	add	objptr, #4
1df04     F2 00 62 FC | 	wrlong	_var01, objptr
1df08     8F 01 00 FF 
1df0c     4E 01 06 F6 | 	mov	_var01, ##@LR__5657
1df10     04 E4 05 F1 | 	add	objptr, #4
1df14     F2 00 62 FC | 	wrlong	_var01, objptr
1df18     8F 01 00 FF 
1df1c     67 01 06 F6 | 	mov	_var01, ##@LR__5658
1df20     04 E4 05 F1 | 	add	objptr, #4
1df24     F2 00 62 FC | 	wrlong	_var01, objptr
1df28     8F 01 00 FF 
1df2c     86 01 06 F6 | 	mov	_var01, ##@LR__5659
1df30     04 E4 05 F1 | 	add	objptr, #4
1df34     F2 00 62 FC | 	wrlong	_var01, objptr
1df38     8F 01 00 FF 
1df3c     94 01 06 F6 | 	mov	_var01, ##@LR__5660
1df40     04 E4 05 F1 | 	add	objptr, #4
1df44     F2 00 62 FC | 	wrlong	_var01, objptr
1df48     8F 01 00 FF 
1df4c     C1 01 06 F6 | 	mov	_var01, ##@LR__5661
1df50     04 E4 05 F1 | 	add	objptr, #4
1df54     F2 00 62 FC | 	wrlong	_var01, objptr
1df58     8F 01 00 FF 
1df5c     CE 01 06 F6 | 	mov	_var01, ##@LR__5662
1df60     04 E4 05 F1 | 	add	objptr, #4
1df64     F2 00 62 FC | 	wrlong	_var01, objptr
1df68     8F 01 00 FF 
1df6c     E2 01 06 F6 | 	mov	_var01, ##@LR__5663
1df70     04 E4 05 F1 | 	add	objptr, #4
1df74     F2 00 62 FC | 	wrlong	_var01, objptr
1df78     90 01 00 FF 
1df7c     06 00 06 F6 | 	mov	_var01, ##@LR__5664
1df80     04 E4 05 F1 | 	add	objptr, #4
1df84     F2 00 62 FC | 	wrlong	_var01, objptr
1df88     90 01 00 FF 
1df8c     1D 00 06 F6 | 	mov	_var01, ##@LR__5665
1df90     04 E4 05 F1 | 	add	objptr, #4
1df94     F2 00 62 FC | 	wrlong	_var01, objptr
1df98     90 01 00 FF 
1df9c     30 00 06 F6 | 	mov	_var01, ##@LR__5666
1dfa0     04 E4 05 F1 | 	add	objptr, #4
1dfa4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfa8     90 01 00 FF 
1dfac     47 00 06 F6 | 	mov	_var01, ##@LR__5667
1dfb0     04 E4 05 F1 | 	add	objptr, #4
1dfb4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfb8     90 01 00 FF 
1dfbc     60 00 06 F6 | 	mov	_var01, ##@LR__5668
1dfc0     04 E4 05 F1 | 	add	objptr, #4
1dfc4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfc8     90 01 00 FF 
1dfcc     82 00 06 F6 | 	mov	_var01, ##@LR__5669
1dfd0     04 E4 05 F1 | 	add	objptr, #4
1dfd4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfd8     90 01 00 FF 
1dfdc     95 00 06 F6 | 	mov	_var01, ##@LR__5670
1dfe0     04 E4 05 F1 | 	add	objptr, #4
1dfe4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfe8     90 01 00 FF 
1dfec     A5 00 06 F6 | 	mov	_var01, ##@LR__5671
1dff0     04 E4 05 F1 | 	add	objptr, #4
1dff4     F2 00 62 FC | 	wrlong	_var01, objptr
1dff8     45 00 00 FF 
1dffc     50 E5 85 F1 | 	sub	objptr, ##35664
1e000                 | _init_error_strings_ret
1e000     2D 00 64 FD | 	ret
1e004                 | 
1e004                 | '         
1e004                 | ' sub printerror(err as integer, linenum=0 as integer)
1e004                 | _printerror
1e004     02 4A 05 F6 | 	mov	COUNT_, #2
1e008     A8 00 A0 FD | 	call	#pushregs_
1e00c     09 1F 02 F6 | 	mov	local01, arg01
1e010     0A 21 02 F6 | 	mov	local02, arg02
1e014     90 01 00 FF 
1e018     BD 12 06 F6 | 	mov	arg01, ##@LR__5672
1e01c     88 20 B0 FD | 	call	#_hg010b_spin2_write
1e020     0F 13 02 F6 | 	mov	arg01, local01
1e024     24 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1e028     FD 12 02 F6 | 	mov	arg01, result1
1e02c     78 20 B0 FD | 	call	#_hg010b_spin2_write
1e030     90 01 00 FF 
1e034     C4 12 06 F6 | 	mov	arg01, ##@LR__5673
1e038     6C 20 B0 FD | 	call	#_hg010b_spin2_write
1e03c     02 1E 66 F0 | 	shl	local01, #2
1e040     45 00 00 FF 
1e044     7C E4 05 F1 | 	add	objptr, ##35452
1e048     F2 1E 02 F1 | 	add	local01, objptr
1e04c     0F 13 02 FB | 	rdlong	arg01, local01
1e050     45 00 00 FF 
1e054     7C E4 85 F1 | 	sub	objptr, ##35452
1e058     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1e05c                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(": ")  : v.write(errors$(err))
1e05c                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum))
1e05c     01 20 56 F2 | 	cmps	local02, #1 wc
1e060     20 00 90 CD |  if_b	jmp	#LR__2370
1e064     90 01 00 FF 
1e068     C7 12 06 F6 | 	mov	arg01, ##@LR__5674
1e06c     38 20 B0 FD | 	call	#_hg010b_spin2_write
1e070     10 13 02 F6 | 	mov	arg01, local02
1e074     D4 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1e078     FD 12 02 F6 | 	mov	arg01, result1
1e07c                 | ' 
1e07c                 | ' write(text)
1e07c     28 20 B0 FD | 	call	#_hg010b_spin2_write
1e080                 | ' crlf
1e080     24 25 B0 FD | 	call	#_hg010b_spin2_crlf
1e084                 | LR__2370
1e084     A7 F0 03 F6 | 	mov	ptra, fp
1e088     B2 00 A0 FD | 	call	#popregs_
1e08c                 | _printerror_ret
1e08c     2D 00 64 FD | 	ret
1e090                 | 
1e090                 | ' 
1e090                 | ' '' ------------------------------- Hardware start/stop/initialization 
1e090                 | ' 
1e090                 | ' sub startpsram
1e090                 | _startpsram
1e090     00 12 06 F6 | 	mov	arg01, #0
1e094     0A 14 C6 F9 | 	decod	arg02, #10
1e098     0B 16 06 F6 | 	mov	arg03, #11
1e09c     07 18 06 F6 | 	mov	arg04, #7
1e0a0     0B 00 00 FF 
1e0a4     CC E4 05 F1 | 	add	objptr, ##5836
1e0a8     AC 26 B0 FD | 	call	#_psram_spin2_startx
1e0ac     2B 00 00 FF 
1e0b0     3C E5 05 F1 | 	add	objptr, ##22332
1e0b4     F2 FA 61 FC | 	wrlong	result1, objptr
1e0b8                 | '     return $7FF00 + cog*12
1e0b8     0C E4 05 F1 | 	add	objptr, #12
1e0bc     FF 03 80 FF 
1e0c0     F2 00 6A FC | 	wrlong	##524032, objptr
1e0c4     37 00 00 FF 
1e0c8     14 E4 85 F1 | 	sub	objptr, ##28180
1e0cc                 | _startpsram_ret
1e0cc     2D 00 64 FD | 	ret
1e0d0                 | 
1e0d0                 | ' 
1e0d0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1e0d0                 | _startvideo
1e0d0     01 4A 05 F6 | 	mov	COUNT_, #1
1e0d4     A8 00 A0 FD | 	call	#pushregs_
1e0d8     37 00 00 FF 
1e0dc     14 E4 05 F1 | 	add	objptr, ##28180
1e0e0     F2 18 02 FB | 	rdlong	arg04, objptr
1e0e4     37 00 00 FF 
1e0e8     14 E4 85 F1 | 	sub	objptr, ##28180
1e0ec     0A 13 02 F6 | 	mov	arg01, arg02
1e0f0     0C 15 02 F6 | 	mov	arg02, arg04
1e0f4     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1e0f8     37 00 00 FF 
1e0fc     00 E4 05 F1 | 	add	objptr, ##28160
1e100     F2 FA 61 FC | 	wrlong	result1, objptr
1e104                 | ' 
1e104                 | ' videocog=v.start(pin,mbox)
1e104                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1e104     00 1E 06 F6 | 	mov	local01, #0
1e108     2B 00 00 FF 
1e10c     34 E5 85 F1 | 	sub	objptr, ##22324
1e110                 | LR__2380
1e110     0F 13 02 F6 | 	mov	arg01, local01
1e114     00 28 00 FF 
1e118     00 14 06 F6 | 	mov	arg02, ##5242880
1e11c     90 2A B0 FD | 	call	#_psram_spin2_setQos
1e120     01 1E 06 F1 | 	add	local01, #1
1e124     08 1E 56 F2 | 	cmps	local01, #8 wc
1e128     E4 FF 9F CD |  if_b	jmp	#LR__2380
1e12c     2B 00 00 FF 
1e130     34 E5 05 F1 | 	add	objptr, ##22324
1e134     F2 12 02 FB | 	rdlong	arg01, objptr
1e138     7A 00 02 FF 
1e13c     00 14 06 F6 | 	mov	arg02, ##67171328
1e140     2B 00 00 FF 
1e144     34 E5 85 F1 | 	sub	objptr, ##22324
1e148     64 2A B0 FD | 	call	#_psram_spin2_setQos
1e14c     0B 00 00 FF 
1e150     CC E4 85 F1 | 	sub	objptr, ##5836
1e154                 | ' psram.setQoS(videocog, $0400f400) 
1e154                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1e154     F2 14 02 F6 | 	mov	arg02, objptr
1e158     00 88 04 FF 
1e15c     00 14 46 F5 | 	or	arg02, ##152043520
1e160     00 16 06 F6 | 	mov	arg03, #0
1e164     00 18 06 F6 | 	mov	arg04, #0
1e168     00 12 06 F6 | 	mov	arg01, #0
1e16c     FC 3E B0 FD | 	call	#__system___basic_open
1e170                 | ' return videocog
1e170     37 00 00 FF 
1e174     00 E4 05 F1 | 	add	objptr, ##28160
1e178     F2 FA 01 FB | 	rdlong	result1, objptr
1e17c     37 00 00 FF 
1e180     00 E4 85 F1 | 	sub	objptr, ##28160
1e184     A7 F0 03 F6 | 	mov	ptra, fp
1e188     B2 00 A0 FD | 	call	#popregs_
1e18c                 | _startvideo_ret
1e18c     2D 00 64 FD | 	ret
1e190                 | 
1e190                 | ' 
1e190                 | ' 
1e190                 | ' 
1e190                 | ' '' ------------------------------- Convenient psram peek/poke
1e190                 | ' 
1e190                 | ' sub pslpoke(addr as ulong,value as ulong)
1e190                 | _pslpoke
1e190     00 4A 05 F6 | 	mov	COUNT_, #0
1e194     A8 00 A0 FD | 	call	#pushregs_
1e198     08 F0 07 F1 | 	add	ptra, #8
1e19c     A7 12 62 FC | 	wrlong	arg01, fp
1e1a0     04 4E 05 F1 | 	add	fp, #4
1e1a4     A7 14 62 FC | 	wrlong	arg02, fp
1e1a8     A7 12 02 F6 | 	mov	arg01, fp
1e1ac     04 4E 85 F1 | 	sub	fp, #4
1e1b0     A7 14 02 FB | 	rdlong	arg02, fp
1e1b4     04 16 06 F6 | 	mov	arg03, #4
1e1b8     0B 00 00 FF 
1e1bc     CC E4 05 F1 | 	add	objptr, ##5836
1e1c0     5C 28 B0 FD | 	call	#_psram_spin2_write
1e1c4     0B 00 00 FF 
1e1c8     CC E4 85 F1 | 	sub	objptr, ##5836
1e1cc     A7 F0 03 F6 | 	mov	ptra, fp
1e1d0     B2 00 A0 FD | 	call	#popregs_
1e1d4                 | _pslpoke_ret
1e1d4     2D 00 64 FD | 	ret
1e1d8                 | 
1e1d8                 | ' 
1e1d8                 | ' sub psdpoke(addr as ulong,value as ulong)
1e1d8                 | _psdpoke
1e1d8     00 4A 05 F6 | 	mov	COUNT_, #0
1e1dc     A8 00 A0 FD | 	call	#pushregs_
1e1e0     08 F0 07 F1 | 	add	ptra, #8
1e1e4     A7 12 62 FC | 	wrlong	arg01, fp
1e1e8     04 4E 05 F1 | 	add	fp, #4
1e1ec     A7 14 62 FC | 	wrlong	arg02, fp
1e1f0     A7 12 02 F6 | 	mov	arg01, fp
1e1f4     04 4E 85 F1 | 	sub	fp, #4
1e1f8     A7 14 02 FB | 	rdlong	arg02, fp
1e1fc     02 16 06 F6 | 	mov	arg03, #2
1e200     0B 00 00 FF 
1e204     CC E4 05 F1 | 	add	objptr, ##5836
1e208     14 28 B0 FD | 	call	#_psram_spin2_write
1e20c     0B 00 00 FF 
1e210     CC E4 85 F1 | 	sub	objptr, ##5836
1e214     A7 F0 03 F6 | 	mov	ptra, fp
1e218     B2 00 A0 FD | 	call	#popregs_
1e21c                 | _psdpoke_ret
1e21c     2D 00 64 FD | 	ret
1e220                 | 
1e220                 | ' 
1e220                 | ' sub pspoke(addr as ulong,value as ulong)
1e220                 | _pspoke
1e220     00 4A 05 F6 | 	mov	COUNT_, #0
1e224     A8 00 A0 FD | 	call	#pushregs_
1e228     08 F0 07 F1 | 	add	ptra, #8
1e22c     A7 12 62 FC | 	wrlong	arg01, fp
1e230     04 4E 05 F1 | 	add	fp, #4
1e234     A7 14 62 FC | 	wrlong	arg02, fp
1e238     A7 12 02 F6 | 	mov	arg01, fp
1e23c     04 4E 85 F1 | 	sub	fp, #4
1e240     A7 14 02 FB | 	rdlong	arg02, fp
1e244     01 16 06 F6 | 	mov	arg03, #1
1e248     0B 00 00 FF 
1e24c     CC E4 05 F1 | 	add	objptr, ##5836
1e250     CC 27 B0 FD | 	call	#_psram_spin2_write
1e254     0B 00 00 FF 
1e258     CC E4 85 F1 | 	sub	objptr, ##5836
1e25c     A7 F0 03 F6 | 	mov	ptra, fp
1e260     B2 00 A0 FD | 	call	#popregs_
1e264                 | _pspoke_ret
1e264     2D 00 64 FD | 	ret
1e268                 | 
1e268                 | ' 
1e268                 | ' function pspeek(adr as ulong) as ubyte
1e268                 | _pspeek
1e268     00 4A 05 F6 | 	mov	COUNT_, #0
1e26c     A8 00 A0 FD | 	call	#pushregs_
1e270     0C F0 07 F1 | 	add	ptra, #12
1e274     04 4E 05 F1 | 	add	fp, #4
1e278     A7 12 62 FC | 	wrlong	arg01, fp
1e27c     04 4E 05 F1 | 	add	fp, #4
1e280     A7 12 02 F6 | 	mov	arg01, fp
1e284     04 4E 85 F1 | 	sub	fp, #4
1e288     A7 14 02 FB | 	rdlong	arg02, fp
1e28c     04 4E 85 F1 | 	sub	fp, #4
1e290     01 16 06 F6 | 	mov	arg03, #1
1e294     0B 00 00 FF 
1e298     CC E4 05 F1 | 	add	objptr, ##5836
1e29c     E4 26 B0 FD | 	call	#_psram_spin2_read1
1e2a0     0B 00 00 FF 
1e2a4     CC E4 85 F1 | 	sub	objptr, ##5836
1e2a8                 | ' psram.read1(varptr(res),adr,1)
1e2a8                 | ' return res
1e2a8     08 4E 05 F1 | 	add	fp, #8
1e2ac     A7 FA C1 FA | 	rdbyte	result1, fp
1e2b0     08 4E 85 F1 | 	sub	fp, #8
1e2b4     A7 F0 03 F6 | 	mov	ptra, fp
1e2b8     B2 00 A0 FD | 	call	#popregs_
1e2bc                 | _pspeek_ret
1e2bc     2D 00 64 FD | 	ret
1e2c0                 | 
1e2c0                 | ' 
1e2c0                 | ' function pslpeek(adr as ulong) as ulong
1e2c0                 | _pslpeek
1e2c0     00 4A 05 F6 | 	mov	COUNT_, #0
1e2c4     A8 00 A0 FD | 	call	#pushregs_
1e2c8     0C F0 07 F1 | 	add	ptra, #12
1e2cc     04 4E 05 F1 | 	add	fp, #4
1e2d0     A7 12 62 FC | 	wrlong	arg01, fp
1e2d4     04 4E 05 F1 | 	add	fp, #4
1e2d8     A7 12 02 F6 | 	mov	arg01, fp
1e2dc     04 4E 85 F1 | 	sub	fp, #4
1e2e0     A7 14 02 FB | 	rdlong	arg02, fp
1e2e4     04 4E 85 F1 | 	sub	fp, #4
1e2e8     04 16 06 F6 | 	mov	arg03, #4
1e2ec     0B 00 00 FF 
1e2f0     CC E4 05 F1 | 	add	objptr, ##5836
1e2f4     8C 26 B0 FD | 	call	#_psram_spin2_read1
1e2f8     0B 00 00 FF 
1e2fc     CC E4 85 F1 | 	sub	objptr, ##5836
1e300                 | ' psram.read1(varptr(res),adr,4)
1e300                 | ' return res
1e300     08 4E 05 F1 | 	add	fp, #8
1e304     A7 FA 01 FB | 	rdlong	result1, fp
1e308     08 4E 85 F1 | 	sub	fp, #8
1e30c     A7 F0 03 F6 | 	mov	ptra, fp
1e310     B2 00 A0 FD | 	call	#popregs_
1e314                 | _pslpeek_ret
1e314     2D 00 64 FD | 	ret
1e318                 | 
1e318                 | ' 
1e318                 | ' function psdpeek(adr as ulong) as ulong
1e318                 | _psdpeek
1e318     00 4A 05 F6 | 	mov	COUNT_, #0
1e31c     A8 00 A0 FD | 	call	#pushregs_
1e320     0C F0 07 F1 | 	add	ptra, #12
1e324     04 4E 05 F1 | 	add	fp, #4
1e328     A7 12 62 FC | 	wrlong	arg01, fp
1e32c     04 4E 05 F1 | 	add	fp, #4
1e330     A7 12 02 F6 | 	mov	arg01, fp
1e334     04 4E 85 F1 | 	sub	fp, #4
1e338     A7 14 02 FB | 	rdlong	arg02, fp
1e33c     04 4E 85 F1 | 	sub	fp, #4
1e340     02 16 06 F6 | 	mov	arg03, #2
1e344     0B 00 00 FF 
1e348     CC E4 05 F1 | 	add	objptr, ##5836
1e34c     34 26 B0 FD | 	call	#_psram_spin2_read1
1e350     0B 00 00 FF 
1e354     CC E4 85 F1 | 	sub	objptr, ##5836
1e358                 | ' psram.read1(varptr(res),adr,2)
1e358                 | ' return res
1e358     08 4E 05 F1 | 	add	fp, #8
1e35c     A7 FA E1 FA | 	rdword	result1, fp
1e360     08 4E 85 F1 | 	sub	fp, #8
1e364     A7 F0 03 F6 | 	mov	ptra, fp
1e368     B2 00 A0 FD | 	call	#popregs_
1e36c                 | _psdpeek_ret
1e36c     2D 00 64 FD | 	ret
1e370                 | 
1e370                 | ' 
1e370                 | ' '' ------------------------------- USB keyboard scan to char translator
1e370                 | ' 
1e370                 | ' function scantochar(key)
1e370                 | _scantochar
1e370                 | ' 
1e370                 | ' select case (key shr 8) and 255
1e370     09 01 02 F6 | 	mov	_var01, arg01
1e374     08 00 C6 F0 | 	sar	_var01, #8
1e378     FF 00 0E F5 | 	and	_var01, #255 wz
1e37c     24 00 90 AD |  if_e	jmp	#LR__2390
1e380     02 00 0E F2 | 	cmp	_var01, #2 wz
1e384     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1e388     30 00 90 AD |  if_e	jmp	#LR__2391
1e38c     40 00 0E F2 | 	cmp	_var01, #64 wz
1e390     44 00 90 AD |  if_e	jmp	#LR__2392
1e394     42 00 0E F2 | 	cmp	_var01, #66 wz
1e398     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1e39c     70 00 90 5D |  if_ne	jmp	#LR__2394
1e3a0     50 00 90 FD | 	jmp	#LR__2393
1e3a4                 | LR__2390
1e3a4     09 FB 01 F6 | 	mov	result1, arg01
1e3a8     7F FA 05 F5 | 	and	result1, #127
1e3ac     02 FA 65 F0 | 	shl	result1, #2
1e3b0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e3b4     FD FA C1 FA | 	rdbyte	result1, result1
1e3b8     54 00 90 FD | 	jmp	#_scantochar_ret
1e3bc                 | LR__2391
1e3bc     09 FB 01 F6 | 	mov	result1, arg01
1e3c0     7F FA 05 F5 | 	and	result1, #127
1e3c4     02 FA 65 F0 | 	shl	result1, #2
1e3c8     01 FA 05 F1 | 	add	result1, #1
1e3cc     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e3d0     FD FA C1 FA | 	rdbyte	result1, result1
1e3d4     38 00 90 FD | 	jmp	#_scantochar_ret
1e3d8                 | LR__2392
1e3d8     09 FB 01 F6 | 	mov	result1, arg01
1e3dc     7F FA 05 F5 | 	and	result1, #127
1e3e0     02 FA 65 F0 | 	shl	result1, #2
1e3e4     02 FA 05 F1 | 	add	result1, #2
1e3e8     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e3ec     FD FA C1 FA | 	rdbyte	result1, result1
1e3f0     1C 00 90 FD | 	jmp	#_scantochar_ret
1e3f4                 | LR__2393
1e3f4     09 FB 01 F6 | 	mov	result1, arg01
1e3f8     7F FA 05 F5 | 	and	result1, #127
1e3fc     02 FA 65 F0 | 	shl	result1, #2
1e400     03 FA 05 F1 | 	add	result1, #3
1e404     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e408     FD FA C1 FA | 	rdbyte	result1, result1
1e40c     00 00 90 FD | 	jmp	#_scantochar_ret
1e410                 | LR__2394
1e410                 | _scantochar_ret
1e410     2D 00 64 FD | 	ret
1e414                 | 
1e414                 | _program
1e414     01 4A 05 F6 | 	mov	COUNT_, #1
1e418     A8 00 A0 FD | 	call	#pushregs_
1e41c     70 FC BF FD | 	call	#_startpsram
1e420     40 12 06 F6 | 	mov	arg01, #64
1e424     00 14 06 F6 | 	mov	arg02, #0
1e428     00 16 06 F6 | 	mov	arg03, #0
1e42c     A0 FC BF FD | 	call	#_startvideo
1e430     37 00 00 FF 
1e434     14 E4 05 F1 | 	add	objptr, ##28180
1e438     F2 12 02 FB | 	rdlong	arg01, objptr
1e43c     00 14 06 F6 | 	mov	arg02, #0
1e440     FB 03 00 FF 
1e444     00 17 06 F6 | 	mov	arg03, ##521984
1e448     2B 00 00 FF 
1e44c     48 E5 85 F1 | 	sub	objptr, ##22344
1e450     0C 2B B0 FD | 	call	#_audio096_spin2_start
1e454     FE 16 02 F6 | 	mov	arg03, result2
1e458     2B 00 00 FF 
1e45c     30 E5 05 F1 | 	add	objptr, ##22320
1e460     F2 FA 61 FC | 	wrlong	result1, objptr
1e464     14 E4 05 F1 | 	add	objptr, #20
1e468     F2 16 62 FC | 	wrlong	arg03, objptr
1e46c     37 00 00 FF 
1e470     10 E4 85 F1 | 	sub	objptr, ##28176
1e474     32 12 06 F6 | 	mov	arg01, #50
1e478     3C 34 B0 FD | 	call	#__system___waitms
1e47c     37 00 00 FF 
1e480     10 E4 05 F1 | 	add	objptr, ##28176
1e484     F2 12 02 FB | 	rdlong	arg01, objptr
1e488     37 00 00 FF 
1e48c     10 E4 85 F1 | 	sub	objptr, ##28176
1e490     14 12 06 F1 | 	add	arg01, #20
1e494     20 00 80 FF 
1e498     09 01 58 FC | 	wrword	##16384, arg01
1e49c     18 28 B0 FD | 	call	#_usbnew_spin2_start
1e4a0     37 00 00 FF 
1e4a4     04 E4 05 F1 | 	add	objptr, ##28164
1e4a8     F2 FA 61 FC | 	wrlong	result1, objptr
1e4ac                 | '   mouse_limits[0] := xlim
1e4ac     0F 00 00 FF 
1e4b0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1e4b4     01 00 80 FF 
1e4b8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1e4bc                 | '   mouse_limits[1] := ylim
1e4bc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e4c0     01 00 80 FF 
1e4c4     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1e4c8     36 00 00 FF 
1e4cc     F3 E4 85 F1 | 	sub	objptr, ##27891
1e4d0     F2 12 02 F6 | 	mov	arg01, objptr
1e4d4     11 E5 85 F1 | 	sub	objptr, #273
1e4d8     C4 12 06 F1 | 	add	arg01, #196
1e4dc                 | '   mouse_outptr := ptr
1e4dc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e4e0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1e4e4     0F 00 00 FF 
1e4e8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e4ec     16 00 00 FF 
1e4f0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1e4f4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1e4f8     16 00 00 FF 
1e4fc     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1e500     10 12 06 F6 | 	mov	arg01, #16
1e504     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1e508     10 12 06 F6 | 	mov	arg01, #16
1e50c     20 14 06 F6 | 	mov	arg02, #32
1e510     20 16 06 F6 | 	mov	arg03, #32
1e514     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1e518     09 12 C6 F9 | 	decod	arg01, #9
1e51c     2C 15 06 F6 | 	mov	arg02, #300
1e520     EC 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1e524     F2 16 02 F6 | 	mov	arg03, objptr
1e528     50 00 00 FF 
1e52c     1C E5 05 F1 | 	add	objptr, ##41244
1e530     F2 14 02 F6 | 	mov	arg02, objptr
1e534     0A 17 62 FC | 	wrlong	arg03, arg02
1e538     04 14 06 F1 | 	add	arg02, #4
1e53c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1e540     EF 14 02 F6 | 	mov	arg02, entryptr__
1e544     1E FA 05 F6 | 	mov	result1, #30
1e548     28 E4 61 FD | 	setq	objptr
1e54c     0A FB F1 FC | 	coginit	result1, arg02 wc
1e550     01 FA 65 C6 |  if_b	neg	result1, #1
1e554     04 E4 85 F1 | 	sub	objptr, #4
1e558     F2 FA 61 FC | 	wrlong	result1, objptr
1e55c     01 00 00 FF 
1e560     90 E4 05 F1 | 	add	objptr, ##656
1e564     F2 00 68 FC | 	wrlong	#0, objptr
1e568     1A 00 00 FF 
1e56c     74 E5 85 F1 | 	sub	objptr, ##13684
1e570     F2 04 68 FC | 	wrlong	#2, objptr
1e574     04 E4 05 F1 | 	add	objptr, #4
1e578     F2 26 69 FC | 	wrlong	#147, objptr
1e57c     04 E4 05 F1 | 	add	objptr, #4
1e580     F2 34 69 FC | 	wrlong	#154, objptr
1e584     04 E4 05 F1 | 	add	objptr, #4
1e588     F2 08 68 FC | 	wrlong	#4, objptr
1e58c     04 E4 85 F1 | 	sub	objptr, #4
1e590     F2 16 02 FB | 	rdlong	arg03, objptr
1e594     14 E4 85 F1 | 	sub	objptr, #20
1e598     F2 16 62 FC | 	wrlong	arg03, objptr
1e59c     04 E4 05 F1 | 	add	objptr, #4
1e5a0     F2 00 68 FC | 	wrlong	#0, objptr
1e5a4     04 E4 05 F1 | 	add	objptr, #4
1e5a8     F2 00 68 FC | 	wrlong	#0, objptr
1e5ac     19 00 00 FF 
1e5b0     E4 E4 05 F1 | 	add	objptr, ##13028
1e5b4     F2 02 68 FC | 	wrlong	#1, objptr
1e5b8     01 00 00 FF 
1e5bc     9C E4 05 F1 | 	add	objptr, ##668
1e5c0     F2 00 68 FC | 	wrlong	#0, objptr
1e5c4     01 00 00 FF 
1e5c8     00 EA 05 F1 | 	add	ptr__dat__, ##512
1e5cc     08 E4 05 F1 | 	add	objptr, #8
1e5d0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1e5d4     04 E4 85 F1 | 	sub	objptr, #4
1e5d8     03 00 80 FF 
1e5dc     F2 3C 69 FC | 	wrlong	##1694, objptr
1e5e0     0C 00 00 FF 
1e5e4     50 E5 85 F1 | 	sub	objptr, ##6480
1e5e8     F2 18 68 FC | 	wrlong	#12, objptr
1e5ec     45 00 00 FF 
1e5f0     64 E4 85 F1 | 	sub	objptr, ##35428
1e5f4     01 00 00 FF 
1e5f8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1e5fc     FC DA BF FD | 	call	#_init_commands
1e600     90 F6 BF FD | 	call	#_init_error_strings
1e604     14 EE BF FD | 	call	#_init_audio
1e608     90 4D BF FD | 	call	#_do_new
1e60c     37 00 00 FF 
1e610     3C E4 05 F1 | 	add	objptr, ##28220
1e614     F2 12 02 FB | 	rdlong	arg01, objptr
1e618     04 E4 85 F1 | 	sub	objptr, #4
1e61c     F2 14 02 FB | 	rdlong	arg02, objptr
1e620     37 00 00 FF 
1e624     38 E4 85 F1 | 	sub	objptr, ##28216
1e628     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1e62c     37 00 00 FF 
1e630     40 E4 05 F1 | 	add	objptr, ##28224
1e634     F2 12 02 FB | 	rdlong	arg01, objptr
1e638     37 00 00 FF 
1e63c     40 E4 85 F1 | 	sub	objptr, ##28224
1e640     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1e644                 | ' 
1e644                 | ' leading_spaces:=amount
1e644     01 00 00 FF 
1e648     B6 E4 05 F1 | 	add	objptr, ##694
1e64c     F2 04 68 FC | 	wrlong	#2, objptr
1e650     01 00 00 FF 
1e654     B6 E4 85 F1 | 	sub	objptr, ##694
1e658     90 01 00 FF 
1e65c     D1 1E 06 F6 | 	mov	local01, ##@LR__5675
1e660     3D 12 06 F6 | 	mov	arg01, #61
1e664     3C 14 06 F6 | 	mov	arg02, #60
1e668     3B 16 06 F6 | 	mov	arg03, #59
1e66c     3A 18 06 F6 | 	mov	arg04, #58
1e670     18 7C B0 FD | 	call	#__system___vfs_open_sdcardx
1e674     FD 14 02 F6 | 	mov	arg02, result1
1e678     0F 13 02 F6 | 	mov	arg01, local01
1e67c     10 33 B0 FD | 	call	#__system___mount
1e680     90 01 00 FF 
1e684     D5 12 06 F6 | 	mov	arg01, ##@LR__5676
1e688     C4 35 B0 FD | 	call	#__system___chdir
1e68c     90 01 00 FF 
1e690     DD 1E 06 F6 | 	mov	local01, ##@LR__5677
1e694     4A 00 00 FF 
1e698     94 E4 05 F1 | 	add	objptr, ##38036
1e69c     F2 1E 62 FC | 	wrlong	local01, objptr
1e6a0     13 00 00 FF 
1e6a4     60 E4 85 F1 | 	sub	objptr, ##9824
1e6a8     F2 12 02 FB | 	rdlong	arg01, objptr
1e6ac     37 00 00 FF 
1e6b0     34 E4 85 F1 | 	sub	objptr, ##28212
1e6b4     01 12 66 F0 | 	shl	arg01, #1
1e6b8     01 14 06 F6 | 	mov	arg02, #1
1e6bc     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1e6c0                 | ' init_commands
1e6c0                 | ' init_error_strings
1e6c0                 | ' init_audio
1e6c0                 | ' do_new
1e6c0                 | ' cls(ink, paper)
1e6c0                 | ' v.setfontfamily(font) 				' use ST Mono font
1e6c0                 | ' v.setleadingspaces(2)
1e6c0                 | ' mount "/sd", _vfs_open_sdcard()
1e6c0                 | ' chdir "/sd/bas"
1e6c0                 | ' currentdir$="/sd/bas"
1e6c0                 | ' position 2*editor_spaces,1 : print ver$
1e6c0     00 12 06 F6 | 	mov	arg01, #0
1e6c4     28 8C B0 FD | 	call	#__system___getiolock_0570
1e6c8     FD 12 02 F6 | 	mov	arg01, result1
1e6cc     F4 2E B0 FD | 	call	#__system___lockmem
1e6d0     18 00 00 FF 
1e6d4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1e6d8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1e6dc     18 00 00 FF 
1e6e0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1e6e4     00 12 06 F6 | 	mov	arg01, #0
1e6e8     00 16 06 F6 | 	mov	arg03, #0
1e6ec     C8 3B B0 FD | 	call	#__system___basic_print_string
1e6f0     00 12 06 F6 | 	mov	arg01, #0
1e6f4     0A 14 06 F6 | 	mov	arg02, #10
1e6f8     00 16 06 F6 | 	mov	arg03, #0
1e6fc     60 3B B0 FD | 	call	#__system___basic_print_char
1e700     00 12 06 F6 | 	mov	arg01, #0
1e704     E8 8B B0 FD | 	call	#__system___getiolock_0570
1e708     FD 00 68 FC | 	wrlong	#0, result1
1e70c     51 00 00 FF 
1e710     AC E5 05 F1 | 	add	objptr, ##41900
1e714     F2 12 02 FB | 	rdlong	arg01, objptr
1e718     0E 00 00 FF 
1e71c     50 E5 85 F1 | 	sub	objptr, ##7504
1e720     F2 1E 02 FB | 	rdlong	local01, objptr
1e724     43 00 00 FF 
1e728     5C E4 85 F1 | 	sub	objptr, ##34396
1e72c     0F 13 82 F1 | 	sub	arg01, local01
1e730     00 14 06 F6 | 	mov	arg02, #0
1e734     0A 16 06 F6 | 	mov	arg03, #10
1e738     58 51 B0 FD | 	call	#__system__Number_S
1e73c     FD 12 02 F6 | 	mov	arg01, result1
1e740     90 01 00 FF 
1e744     E5 14 06 F6 | 	mov	arg02, ##@LR__5678
1e748     D4 2E B0 FD | 	call	#__system___string_concat
1e74c     FD 1E 02 F6 | 	mov	local01, result1
1e750     50 00 00 FF 
1e754     10 E5 05 F1 | 	add	objptr, ##41232
1e758     F2 1E 62 FC | 	wrlong	local01, objptr
1e75c     50 00 00 FF 
1e760     10 E5 85 F1 | 	sub	objptr, ##41232
1e764                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1e764     00 12 06 F6 | 	mov	arg01, #0
1e768     84 8B B0 FD | 	call	#__system___getiolock_0570
1e76c     FD 12 02 F6 | 	mov	arg01, result1
1e770     50 2E B0 FD | 	call	#__system___lockmem
1e774     50 00 00 FF 
1e778     10 E5 05 F1 | 	add	objptr, ##41232
1e77c     F2 14 02 FB | 	rdlong	arg02, objptr
1e780     50 00 00 FF 
1e784     10 E5 85 F1 | 	sub	objptr, ##41232
1e788     00 12 06 F6 | 	mov	arg01, #0
1e78c     00 16 06 F6 | 	mov	arg03, #0
1e790     24 3B B0 FD | 	call	#__system___basic_print_string
1e794     00 12 06 F6 | 	mov	arg01, #0
1e798     0A 14 06 F6 | 	mov	arg02, #10
1e79c     00 16 06 F6 | 	mov	arg03, #0
1e7a0     BC 3A B0 FD | 	call	#__system___basic_print_char
1e7a4     00 12 06 F6 | 	mov	arg01, #0
1e7a8     44 8B B0 FD | 	call	#__system___getiolock_0570
1e7ac     FD 00 68 FC | 	wrlong	#0, result1
1e7b0     37 00 00 FF 
1e7b4     34 E4 05 F1 | 	add	objptr, ##28212
1e7b8     F2 12 02 FB | 	rdlong	arg01, objptr
1e7bc     37 00 00 FF 
1e7c0     34 E4 85 F1 | 	sub	objptr, ##28212
1e7c4     01 12 66 F0 | 	shl	arg01, #1
1e7c8     04 14 06 F6 | 	mov	arg02, #4
1e7cc     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1e7d0                 | ' position 2*editor_spaces,4 : print "Ready"
1e7d0     00 12 06 F6 | 	mov	arg01, #0
1e7d4     18 8B B0 FD | 	call	#__system___getiolock_0570
1e7d8     FD 12 02 F6 | 	mov	arg01, result1
1e7dc     E4 2D B0 FD | 	call	#__system___lockmem
1e7e0     90 01 00 FF 
1e7e4     F7 14 06 F6 | 	mov	arg02, ##@LR__5679
1e7e8     00 12 06 F6 | 	mov	arg01, #0
1e7ec     00 16 06 F6 | 	mov	arg03, #0
1e7f0     C4 3A B0 FD | 	call	#__system___basic_print_string
1e7f4     00 12 06 F6 | 	mov	arg01, #0
1e7f8     0A 14 06 F6 | 	mov	arg02, #10
1e7fc     00 16 06 F6 | 	mov	arg03, #0
1e800     5C 3A B0 FD | 	call	#__system___basic_print_char
1e804     00 12 06 F6 | 	mov	arg01, #0
1e808     E4 8A B0 FD | 	call	#__system___getiolock_0570
1e80c     FD 00 68 FC | 	wrlong	#0, result1
1e810     00 14 06 F6 | 	mov	arg02, #0
1e814     01 14 D6 F7 | 	test	arg02, #1 wc
1e818     5A 4C 64 FD | 	drvc	#38
1e81c     01 14 D6 F7 | 	test	arg02, #1 wc
1e820     5A 4E 64 FD | 	drvc	#39
1e824     90 01 00 FF 
1e828     FD 1E 06 F6 | 	mov	local01, ##@LR__5680
1e82c     51 00 00 FF 
1e830     D8 E5 05 F1 | 	add	objptr, ##41944
1e834     F2 1E 62 FC | 	wrlong	local01, objptr
1e838     04 E4 05 F1 | 	add	objptr, #4
1e83c     FF FF FF FF 
1e840     F2 FE 6B FC | 	wrlong	##-1, objptr
1e844     0C E4 05 F1 | 	add	objptr, #12
1e848     F2 00 68 FC | 	wrlong	#0, objptr
1e84c     51 00 00 FF 
1e850     E8 E5 85 F1 | 	sub	objptr, ##41960
1e854                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1e854                 | ' loadname="noname.bas"
1e854                 | ' do_insert=-1
1e854                 | ' inload=0
1e854                 | ' '-------------------------------------------------------------------------------------------------------- 
1e854                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1e854                 | ' '--------------------------------------------------------------------------------------------------------
1e854                 | ' 
1e854                 | ' do
1e854                 | LR__2400
1e854     AC 1F BE FD | 	call	#_edit
1e858     FD 1E 02 F6 | 	mov	local01, result1
1e85c     37 00 00 FF 
1e860     1C E4 05 F1 | 	add	objptr, ##28188
1e864     F2 1E 62 FC | 	wrlong	local01, objptr
1e868     37 00 00 FF 
1e86c     1C E4 85 F1 | 	sub	objptr, ##28188
1e870     D4 2E BE FD | 	call	#_interpret
1e874     90 01 00 FF 
1e878     08 1F 06 F6 | 	mov	local01, ##@LR__5681
1e87c     37 00 00 FF 
1e880     1C E4 05 F1 | 	add	objptr, ##28188
1e884     F2 1E 62 FC | 	wrlong	local01, objptr
1e888     37 00 00 FF 
1e88c     1C E4 85 F1 | 	sub	objptr, ##28188
1e890     C0 FF 9F FD | 	jmp	#LR__2400
1e894     A7 F0 03 F6 | 	mov	ptra, fp
1e898     B2 00 A0 FD | 	call	#popregs_
1e89c                 | _program_ret
1e89c     2D 00 64 FD | 	ret
1e8a0                 | 
1e8a0                 | ' '' this is not a main program.
1e8a0                 | ' 
1e8a0                 | ' '****************************************************************************************************************
1e8a0                 | ' '                                                                                                             	*
1e8a0                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1e8a0                 | ' '                                                                                                            	*
1e8a0                 | ' ' base - HDMI base pin												*
1e8a0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1e8a0                 | ' '														*
1e8a0                 | ' '														*
1e8a0                 | ' '****************************************************************************************************************
1e8a0                 | ' 
1e8a0                 | ' pub start(base,mb):result |i
1e8a0                 | _hg010b_spin2_start
1e8a0                 | ' 
1e8a0                 | ' '--------------------------- initialize pointers and variables
1e8a0                 | ' 
1e8a0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1e8a0     34 E4 05 F1 | 	add	objptr, #52
1e8a4     F2 FA 01 F6 | 	mov	result1, objptr
1e8a8     28 E4 85 F1 | 	sub	objptr, #40
1e8ac     F2 FA 61 FC | 	wrlong	result1, objptr
1e8b0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1e8b0                 | ' hdmibase:=base							' HDMI base pin, 8*n
1e8b0     18 E4 05 F1 | 	add	objptr, #24
1e8b4     F2 12 62 FC | 	wrlong	arg01, objptr
1e8b8                 | ' mailbox_ptr:=mb		
1e8b8     04 E4 05 F1 | 	add	objptr, #4
1e8bc     F2 14 62 FC | 	wrlong	arg02, objptr
1e8c0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1e8c0     C1 E5 05 F1 | 	add	objptr, #449
1e8c4     F2 14 62 FC | 	wrlong	arg02, objptr
1e8c8                 | ' sprite_ptr:=@spr1ptr
1e8c8     D8 E4 85 F1 | 	sub	objptr, #216
1e8cc     F2 FA 01 F6 | 	mov	result1, objptr
1e8d0     E5 E4 85 F1 | 	sub	objptr, #229
1e8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8d8                 | ' 
1e8d8                 | ' 		'
1e8d8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1e8d8     E5 E4 05 F1 | 	add	objptr, #229
1e8dc     F2 FA 01 FB | 	rdlong	result1, objptr
1e8e0     D0 FA 05 F1 | 	add	result1, #208
1e8e4     FD 10 58 FC | 	wrword	#8, result1
1e8e8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1e8e8     F2 16 02 FB | 	rdlong	arg03, objptr
1e8ec     D2 16 06 F1 | 	add	arg03, #210
1e8f0     0B 21 58 FC | 	wrword	#16, arg03
1e8f4                 | ' leading_spaces:=0				'
1e8f4     A5 E5 05 F1 | 	add	objptr, #421
1e8f8     F2 00 68 FC | 	wrlong	#0, objptr
1e8fc                 | ' 
1e8fc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1e8fc     99 E4 85 F1 | 	sub	objptr, #153
1e900     00 00 A0 FF 
1e904     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1e908                 | ' emptydl[1]:=0
1e908     04 E4 05 F1 | 	add	objptr, #4
1e90c     F2 00 68 FC | 	wrlong	#0, objptr
1e910                 | ' 
1e910                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1e910                 | ' 
1e910                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1e910     28 E5 85 F1 | 	sub	objptr, #296
1e914     F2 02 68 FC | 	wrlong	#1, objptr
1e918                 | ' if s_debug<>0
1e918                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1e918     20 00 80 FF 
1e91c     F2 00 68 FC | 	wrlong	##16384, objptr
1e920     F9 E4 85 F1 | 	sub	objptr, #249
1e924                 | ' setmode()							' set the mode, see below
1e924     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1e928                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1e928     49 E4 05 F1 | 	add	objptr, #73
1e92c     F2 FA 01 F6 | 	mov	result1, objptr
1e930     35 E4 85 F1 | 	sub	objptr, #53
1e934     F2 FA 61 FC | 	wrlong	result1, objptr
1e938                 | ' cursor_ptr:=@cursor_x						
1e938     28 E4 05 F1 | 	add	objptr, #40
1e93c     F2 16 02 F6 | 	mov	arg03, objptr
1e940     2C E4 85 F1 | 	sub	objptr, #44
1e944     F2 16 62 FC | 	wrlong	arg03, objptr
1e948                 | ' fontnum:=0  							' start with a PC type font 
1e948     55 E4 05 F1 | 	add	objptr, #85
1e94c     F2 00 68 FC | 	wrlong	#0, objptr
1e950                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1e950     1C E4 05 F1 | 	add	objptr, #28
1e954     F2 12 02 F6 | 	mov	arg01, objptr
1e958     81 E4 85 F1 | 	sub	objptr, #129
1e95c     10 00 00 FF 
1e960     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1e964     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e968     10 00 00 FF 
1e96c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1e970     10 16 06 F6 | 	mov	arg03, #16
1e974     6C 2B B0 FD | 	call	#__system____builtin_memmove
1e978                 | ' leading_spaces:=0
1e978     01 00 00 FF 
1e97c     B6 E4 05 F1 | 	add	objptr, ##694
1e980     F2 00 68 FC | 	wrlong	#0, objptr
1e984     01 00 00 FF 
1e988     B6 E4 85 F1 | 	sub	objptr, ##694
1e98c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e98c                 | ' 
1e98c                 | ' initcursor(154)
1e98c     9A 12 06 F6 | 	mov	arg01, #154
1e990     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1e994                 | ' 
1e994                 | ' '---------------------------- start the cog
1e994                 | ' 
1e994                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1e994     10 00 00 FF 
1e998     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1e99c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e9a0     10 00 00 FF 
1e9a4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1e9a8     14 E4 05 F1 | 	add	objptr, #20
1e9ac     10 FA 05 F6 | 	mov	result1, #16
1e9b0     28 E4 61 FD | 	setq	objptr
1e9b4     0A FB F1 FC | 	coginit	result1, arg02 wc
1e9b8     01 FA 65 C6 |  if_b	neg	result1, #1
1e9bc     1C E4 05 F1 | 	add	objptr, #28
1e9c0     F2 FA 61 FC | 	wrlong	result1, objptr
1e9c4     30 E4 85 F1 | 	sub	objptr, #48
1e9c8                 | ' waitms(40)							' wait for stabilize
1e9c8     28 12 06 F6 | 	mov	arg01, #40
1e9cc     E8 2E B0 FD | 	call	#__system___waitms
1e9d0                 | ' return cog							' return the driver's cog #
1e9d0     30 E4 05 F1 | 	add	objptr, #48
1e9d4     F2 FA 01 FB | 	rdlong	result1, objptr
1e9d8     30 E4 85 F1 | 	sub	objptr, #48
1e9dc                 | _hg010b_spin2_start_ret
1e9dc     2D 00 64 FD | 	ret
1e9e0                 | 
1e9e0                 | ' 
1e9e0                 | ' 
1e9e0                 | ' '**************************************************************************************************************** 
1e9e0                 | ' '                                                                                                             	*
1e9e0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1e9e0                 | ' '  Mode number - see start() above or bits below								*
1e9e0                 | ' '                                                                                                             	*
1e9e0                 | ' '****************************************************************************************************************
1e9e0                 | ' 
1e9e0                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e9e0                 | ' pub initcursor(color) |i
1e9e0                 | _hg010b_spin2_initcursor
1e9e0     03 4A 05 F6 | 	mov	COUNT_, #3
1e9e4     A8 00 A0 FD | 	call	#pushregs_
1e9e8     09 1F 02 F6 | 	mov	local01, arg01
1e9ec                 | ' 
1e9ec                 | ' cursor_x:=0							' place the cursor at 0:0
1e9ec     3C E4 05 F1 | 	add	objptr, #60
1e9f0     F2 00 58 FC | 	wrword	#0, objptr
1e9f4                 | ' cursor_y:=0
1e9f4     02 E4 05 F1 | 	add	objptr, #2
1e9f8     F2 00 48 FC | 	wrbyte	#0, objptr
1e9fc                 | ' repeat i from 0 to 111
1e9fc     00 20 06 F6 | 	mov	local02, #0
1ea00     F8 E5 05 F1 | 	add	objptr, #504
1ea04     97 1A 48 FB | 	callpa	#(@LR__2412-@LR__2410)>>2,fcache_load_ptr_
1ea08                 | LR__2410
1ea08                 | '   cursor[i]:=0
1ea08     10 23 02 F6 | 	mov	local03, local02
1ea0c     F2 22 02 F1 | 	add	local03, objptr
1ea10     11 01 48 FC | 	wrbyte	#0, local03
1ea14     01 20 06 F1 | 	add	local02, #1
1ea18     70 20 56 F2 | 	cmps	local02, #112 wc
1ea1c     E8 FF 9F CD |  if_b	jmp	#LR__2410
1ea20                 | ' repeat i from 112 to 127
1ea20     70 20 06 F6 | 	mov	local02, #112
1ea24                 | LR__2411
1ea24                 | '   cursor[i]:=color  
1ea24     10 23 02 F6 | 	mov	local03, local02
1ea28     F2 22 02 F1 | 	add	local03, objptr
1ea2c     11 1F 42 FC | 	wrbyte	local01, local03
1ea30     01 20 06 F1 | 	add	local02, #1
1ea34     80 20 16 F2 | 	cmp	local02, #128 wc
1ea38     E8 FF 9F CD |  if_b	jmp	#LR__2411
1ea3c                 | LR__2412
1ea3c                 | ' 'repeat i from 0 to 127
1ea3c                 | ' '  if ((i/8)//2)
1ea3c                 | ' '    cursor[i]:=15
1ea3c                 | ' '  else
1ea3c                 | ' '    cursor[i]:=0
1ea3c                 | ' '  if i>=120    
1ea3c                 | ' '    cursor[i]:=40
1ea3c                 | ' setspriteptr(17,@cursor)
1ea3c     F2 14 02 F6 | 	mov	arg02, objptr
1ea40     01 00 00 FF 
1ea44     36 E4 85 F1 | 	sub	objptr, ##566
1ea48     11 12 06 F6 | 	mov	arg01, #17
1ea4c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ea50                 | ' setspritesize(17,8,16)
1ea50     11 12 06 F6 | 	mov	arg01, #17
1ea54     08 14 06 F6 | 	mov	arg02, #8
1ea58     10 16 06 F6 | 	mov	arg03, #16
1ea5c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1ea60                 | ' setspritepos(17,0,0)
1ea60     11 12 06 F6 | 	mov	arg01, #17
1ea64     00 14 06 F6 | 	mov	arg02, #0
1ea68     00 16 06 F6 | 	mov	arg03, #0
1ea6c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ea70                 | ' cursorshape:=14
1ea70     0B 00 00 FF 
1ea74     C6 E4 05 F1 | 	add	objptr, ##5830
1ea78     F2 1C 68 FC | 	wrlong	#14, objptr
1ea7c                 | ' cursorcolor:=color
1ea7c     04 E4 85 F1 | 	sub	objptr, #4
1ea80     F2 1E 62 FC | 	wrlong	local01, objptr
1ea84     0B 00 00 FF 
1ea88     C2 E4 85 F1 | 	sub	objptr, ##5826
1ea8c     A7 F0 03 F6 | 	mov	ptra, fp
1ea90     B2 00 A0 FD | 	call	#popregs_
1ea94                 | _hg010b_spin2_initcursor_ret
1ea94     2D 00 64 FD | 	ret
1ea98                 | 
1ea98                 | ' 
1ea98                 | ' pub setcursorshape(shape) | i
1ea98                 | _hg010b_spin2_setcursorshape
1ea98                 | ' 
1ea98                 | ' cursorshape:=shape
1ea98     0B 00 00 FF 
1ea9c     C6 E4 05 F1 | 	add	objptr, ##5830
1eaa0     F2 12 62 FC | 	wrlong	arg01, objptr
1eaa4                 | ' repeat i from 0 to (8*cursorshape)-1
1eaa4     00 00 06 F6 | 	mov	_var01, #0
1eaa8     09 03 02 F6 | 	mov	_var02, arg01
1eaac     03 02 66 F0 | 	shl	_var02, #3
1eab0     01 02 86 F1 | 	sub	_var02, #1
1eab4     00 02 56 F2 | 	cmps	_var02, #0 wc
1eab8     01 04 86 F6 | 	negc	_var03, #1
1eabc     02 07 02 F6 | 	mov	_var04, _var03
1eac0     02 03 02 F1 | 	add	_var02, _var03
1eac4     0A 00 00 FF 
1eac8     90 E4 85 F1 | 	sub	objptr, ##5264
1eacc     97 0C 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1ead0                 | LR__2420
1ead0                 | '   cursor[i]:=0
1ead0     00 05 02 F6 | 	mov	_var03, _var01
1ead4     F2 04 02 F1 | 	add	_var03, objptr
1ead8     02 01 48 FC | 	wrbyte	#0, _var03
1eadc     03 01 02 F1 | 	add	_var01, _var04
1eae0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1eae4     E8 FF 9F 5D |  if_ne	jmp	#LR__2420
1eae8                 | LR__2421
1eae8                 | ' repeat i from 8*cursorshape to 127
1eae8     0A 00 00 FF 
1eaec     90 E4 05 F1 | 	add	objptr, ##5264
1eaf0     F2 06 02 FB | 	rdlong	_var04, objptr
1eaf4     03 01 02 F6 | 	mov	_var01, _var04
1eaf8     03 00 66 F0 | 	shl	_var01, #3
1eafc     0B 00 00 FF 
1eb00     C6 E4 85 F1 | 	sub	objptr, ##5830
1eb04     03 06 66 F0 | 	shl	_var04, #3
1eb08     80 06 56 F2 | 	cmps	_var04, #128 wc
1eb0c     01 04 A6 F6 | 	negnc	_var03, #1
1eb10     7F 02 06 F6 | 	mov	_var02, #127
1eb14     02 03 02 F1 | 	add	_var02, _var03
1eb18     97 1A 48 FB | 	callpa	#(@LR__2423-@LR__2422)>>2,fcache_load_ptr_
1eb1c                 | LR__2422
1eb1c                 | '   cursor[i]:=cursorcolor
1eb1c     00 07 02 F6 | 	mov	_var04, _var01
1eb20     01 00 00 FF 
1eb24     36 E4 05 F1 | 	add	objptr, ##566
1eb28     F2 06 02 F1 | 	add	_var04, objptr
1eb2c     0A 00 00 FF 
1eb30     8C E4 05 F1 | 	add	objptr, ##5260
1eb34     F2 12 02 FB | 	rdlong	arg01, objptr
1eb38     0B 00 00 FF 
1eb3c     C2 E4 85 F1 | 	sub	objptr, ##5826
1eb40     03 13 42 FC | 	wrbyte	arg01, _var04
1eb44     02 01 02 F1 | 	add	_var01, _var03
1eb48     01 01 0A F2 | 	cmp	_var01, _var02 wz
1eb4c     CC FF 9F 5D |  if_ne	jmp	#LR__2422
1eb50                 | LR__2423
1eb50                 | _hg010b_spin2_setcursorshape_ret
1eb50     2D 00 64 FD | 	ret
1eb54                 | 
1eb54                 | ' 
1eb54                 | ' pub setcursorcolor(color) | i
1eb54                 | _hg010b_spin2_setcursorcolor
1eb54                 | ' 
1eb54                 | ' cursorcolor:=color
1eb54     0B 00 00 FF 
1eb58     C2 E4 05 F1 | 	add	objptr, ##5826
1eb5c     F2 12 62 FC | 	wrlong	arg01, objptr
1eb60                 | ' repeat i from 0 to (8*cursorshape)-1
1eb60     00 12 06 F6 | 	mov	arg01, #0
1eb64     04 E4 05 F1 | 	add	objptr, #4
1eb68     F2 00 02 FB | 	rdlong	_var01, objptr
1eb6c     03 00 66 F0 | 	shl	_var01, #3
1eb70     01 00 86 F1 | 	sub	_var01, #1
1eb74     00 00 56 F2 | 	cmps	_var01, #0 wc
1eb78     01 02 86 F6 | 	negc	_var02, #1
1eb7c     01 05 02 F6 | 	mov	_var03, _var02
1eb80     01 01 02 F1 | 	add	_var01, _var02
1eb84     0A 00 00 FF 
1eb88     90 E4 85 F1 | 	sub	objptr, ##5264
1eb8c     97 0C 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1eb90                 | LR__2430
1eb90                 | '   cursor[i]:=0
1eb90     09 03 02 F6 | 	mov	_var02, arg01
1eb94     F2 02 02 F1 | 	add	_var02, objptr
1eb98     01 01 48 FC | 	wrbyte	#0, _var02
1eb9c     02 13 02 F1 | 	add	arg01, _var03
1eba0     00 13 0A F2 | 	cmp	arg01, _var01 wz
1eba4     E8 FF 9F 5D |  if_ne	jmp	#LR__2430
1eba8                 | LR__2431
1eba8                 | ' repeat i from 8*cursorshape to 127
1eba8     0A 00 00 FF 
1ebac     90 E4 05 F1 | 	add	objptr, ##5264
1ebb0     F2 04 02 FB | 	rdlong	_var03, objptr
1ebb4     02 13 02 F6 | 	mov	arg01, _var03
1ebb8     03 12 66 F0 | 	shl	arg01, #3
1ebbc     0B 00 00 FF 
1ebc0     C6 E4 85 F1 | 	sub	objptr, ##5830
1ebc4     03 04 66 F0 | 	shl	_var03, #3
1ebc8     80 04 56 F2 | 	cmps	_var03, #128 wc
1ebcc     01 02 A6 F6 | 	negnc	_var02, #1
1ebd0     7F 00 06 F6 | 	mov	_var01, #127
1ebd4     01 01 02 F1 | 	add	_var01, _var02
1ebd8     97 1A 48 FB | 	callpa	#(@LR__2433-@LR__2432)>>2,fcache_load_ptr_
1ebdc                 | LR__2432
1ebdc                 | '   cursor[i]:=cursorcolor
1ebdc     09 05 02 F6 | 	mov	_var03, arg01
1ebe0     01 00 00 FF 
1ebe4     36 E4 05 F1 | 	add	objptr, ##566
1ebe8     F2 04 02 F1 | 	add	_var03, objptr
1ebec     0A 00 00 FF 
1ebf0     8C E4 05 F1 | 	add	objptr, ##5260
1ebf4     F2 06 02 FB | 	rdlong	_var04, objptr
1ebf8     0B 00 00 FF 
1ebfc     C2 E4 85 F1 | 	sub	objptr, ##5826
1ec00     02 07 42 FC | 	wrbyte	_var04, _var03
1ec04     01 13 02 F1 | 	add	arg01, _var02
1ec08     00 13 0A F2 | 	cmp	arg01, _var01 wz
1ec0c     CC FF 9F 5D |  if_ne	jmp	#LR__2432
1ec10                 | LR__2433
1ec10                 | _hg010b_spin2_setcursorcolor_ret
1ec10     2D 00 64 FD | 	ret
1ec14                 | 
1ec14                 | '   
1ec14                 | '   
1ec14                 | '   
1ec14                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1ec14                 | _hg010b_spin2_setmode
1ec14     02 4A 05 F6 | 	mov	COUNT_, #2
1ec18     A8 00 A0 FD | 	call	#pushregs_
1ec1c                 | ' 
1ec1c                 | ' 
1ec1c                 | ' dl_ptr:=@emptydl[0]
1ec1c     01 00 00 FF 
1ec20     1D E4 05 F1 | 	add	objptr, ##541
1ec24     F2 1A 02 F6 | 	mov	arg05, objptr
1ec28     FD E5 85 F1 | 	sub	objptr, #509
1ec2c     F2 1A 62 FC | 	wrlong	arg05, objptr
1ec30                 | ' 
1ec30                 | ' if cog>0 
1ec30     10 E4 05 F1 | 	add	objptr, #16
1ec34     F2 1A 02 FB | 	rdlong	arg05, objptr
1ec38     30 E4 85 F1 | 	sub	objptr, #48
1ec3c     01 1A 56 F2 | 	cmps	arg05, #1 wc
1ec40                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1ec40     01 12 06 36 |  if_ae	mov	arg01, #1
1ec44     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1ec48                 | ' xres:=1024
1ec48     01 00 00 FF 
1ec4c     26 E4 05 F1 | 	add	objptr, ##550
1ec50     02 00 80 FF 
1ec54     F2 00 68 FC | 	wrlong	##1024, objptr
1ec58                 | ' yres:=600
1ec58     04 E4 05 F1 | 	add	objptr, #4
1ec5c     01 00 80 FF 
1ec60     F2 B0 68 FC | 	wrlong	##600, objptr
1ec64                 | ' ppl:=(timings[3])
1ec64     10 00 00 FF 
1ec68     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1ec6c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ec70     51 E5 85 F1 | 	sub	objptr, #337
1ec74     F2 1A 62 FC | 	wrlong	arg05, objptr
1ec78                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1ec78     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1ec7c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1ec80     01 1E 66 F0 | 	shl	local01, #1
1ec84     80 E4 85 F1 | 	sub	objptr, #128
1ec88     F2 1E 62 FC | 	wrlong	local01, objptr
1ec8c                 | ' cpl1:=cpl '' todo remove
1ec8c     04 E4 05 F1 | 	add	objptr, #4
1ec90     F2 1E 62 FC | 	wrlong	local01, objptr
1ec94                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1ec94     02 00 00 FF 
1ec98     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1ec9c     41 E4 85 F1 | 	sub	objptr, #65
1eca0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1eca4                 | ' repeat i from 0 to 3
1eca4     00 20 06 F6 | 	mov	local02, #0
1eca8     02 00 00 FF 
1ecac     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1ecb0     08 E4 05 F1 | 	add	objptr, #8
1ecb4     97 20 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1ecb8                 | LR__2440
1ecb8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1ecb8     10 1F 02 F6 | 	mov	local01, local02
1ecbc     02 1E 66 F0 | 	shl	local01, #2
1ecc0     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1ecc4     F2 1A 02 FB | 	rdlong	arg05, objptr
1ecc8     11 1A 66 F0 | 	shl	arg05, #17
1eccc     0F 1F 02 FB | 	rdlong	local01, local01
1ecd0     0D 1F 02 F1 | 	add	local01, arg05
1ecd4     80 40 38 FF 
1ecd8     00 1E 06 F1 | 	add	local01, ##1887502336
1ecdc     10 1B 02 F6 | 	mov	arg05, local02
1ece0     02 1A 66 F0 | 	shl	arg05, #2
1ece4     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1ece8     0D 1F 62 FC | 	wrlong	local01, arg05
1ecec     01 20 06 F1 | 	add	local02, #1
1ecf0     04 20 56 F2 | 	cmps	local02, #4 wc
1ecf4     C0 FF 9F CD |  if_b	jmp	#LR__2440
1ecf8                 | LR__2441
1ecf8     24 E4 85 F1 | 	sub	objptr, #36
1ecfc                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1ecfc     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1ed00     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1ed04     14 1E 66 FC | 	wrlong	local01, #20
1ed08                 | ' hubset(timings[10])
1ed08     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1ed0c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1ed10     10 00 00 FF 
1ed14     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1ed18     00 12 62 FD | 	hubset	arg01
1ed1c                 | ' waitms(1)                                                   	' wait for stabilization
1ed1c     01 12 06 F6 | 	mov	arg01, #1
1ed20     94 2B B0 FD | 	call	#__system___waitms
1ed24     10 00 00 FF 
1ed28     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1ed2c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1ed30     61 E4 05 F1 | 	add	objptr, #97
1ed34     F2 20 62 FC | 	wrlong	local02, objptr
1ed38     10 1F 52 F6 | 	abs	local01, local02 wc
1ed3c     04 1E 46 F0 | 	shr	local01, #4
1ed40     0F 1F 82 F6 | 	negc	local01, local01
1ed44     9C E4 05 F1 | 	add	objptr, #156
1ed48     F2 1E 62 FC | 	wrlong	local01, objptr
1ed4c     A4 E4 85 F1 | 	sub	objptr, #164
1ed50     F2 20 02 FB | 	rdlong	local02, objptr
1ed54     08 E4 05 F1 | 	add	objptr, #8
1ed58     F2 1E 02 FB | 	rdlong	local01, objptr
1ed5c     0F 21 02 FD | 	qmul	local02, local01
1ed60                 | ' lines:=timings[11]
1ed60                 | ' t_lines:=lines/16
1ed60                 | ' buflen:=cpl*lines						' framebuffer length in longs
1ed60     29 E4 85 F1 | 	sub	objptr, #41
1ed64     19 1E C6 F9 | 	decod	local01, #25
1ed68     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1ed6c     18 20 62 FD | 	getqx	local02
1ed70     F2 20 62 FC | 	wrlong	local02, objptr
1ed74     38 E4 85 F1 | 	sub	objptr, #56
1ed78     02 20 66 F0 | 	shl	local02, #2
1ed7c     10 1F 82 F1 | 	sub	local01, local02
1ed80     F2 1E 62 FC | 	wrlong	local01, objptr
1ed84     FD E4 05 F1 | 	add	objptr, #253
1ed88     F2 20 02 FB | 	rdlong	local02, objptr
1ed8c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ed90     0D 21 02 FD | 	qmul	local02, arg05
1ed94                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1ed94                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1ed94     F9 E4 85 F1 | 	sub	objptr, #249
1ed98                 | ' mode_ptr:=@timings						' set pointers to timings
1ed98     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1ed9c                 | ' graphmode:=1024+512+192+48							' det global variable
1ed9c                 | ' makedl(graphmode)							' make a DL for the mode
1ed9c     03 00 00 FF 
1eda0     F0 12 06 F6 | 	mov	arg01, ##1776
1eda4     18 20 62 FD | 	getqx	local02
1eda8     10 1F 82 F1 | 	sub	local01, local02
1edac     F2 1E 62 FC | 	wrlong	local01, objptr
1edb0     14 E4 05 F1 | 	add	objptr, #20
1edb4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1edb8     79 E4 05 F1 | 	add	objptr, #121
1edbc     03 00 80 FF 
1edc0     F2 E0 69 FC | 	wrlong	##1776, objptr
1edc4     91 E4 85 F1 | 	sub	objptr, #145
1edc8     10 00 00 FF 
1edcc     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1edd0     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1edd4                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1edd4     F2 1E 02 FB | 	rdlong	local01, objptr
1edd8     DD E4 05 F1 | 	add	objptr, #221
1eddc     F2 1E 62 FC | 	wrlong	local01, objptr
1ede0                 | ' s_font_ptr:=font_ptr
1ede0     D5 E4 85 F1 | 	sub	objptr, #213
1ede4     F2 1E 02 FB | 	rdlong	local01, objptr
1ede8     D9 E4 05 F1 | 	add	objptr, #217
1edec     F2 1E 62 FC | 	wrlong	local01, objptr
1edf0                 | ' s_lines:=lines
1edf0     80 E4 85 F1 | 	sub	objptr, #128
1edf4     F2 1E 02 FB | 	rdlong	local01, objptr
1edf8     84 E4 05 F1 | 	add	objptr, #132
1edfc     F2 1E 62 FC | 	wrlong	local01, objptr
1ee00                 | ' s_buflen:=buflen
1ee00     AD E4 85 F1 | 	sub	objptr, #173
1ee04     F2 1E 02 FB | 	rdlong	local01, objptr
1ee08     B5 E4 05 F1 | 	add	objptr, #181
1ee0c     F2 1E 62 FC | 	wrlong	local01, objptr
1ee10                 | ' s_cpl:=cpl
1ee10     94 E4 85 F1 | 	sub	objptr, #148
1ee14     F2 1E 02 FB | 	rdlong	local01, objptr
1ee18     90 E4 05 F1 | 	add	objptr, #144
1ee1c     F2 1E 62 FC | 	wrlong	local01, objptr
1ee20                 | ' s_cpl1:=cpl
1ee20     90 E4 85 F1 | 	sub	objptr, #144
1ee24     F2 1E 02 FB | 	rdlong	local01, objptr
1ee28     98 E4 05 F1 | 	add	objptr, #152
1ee2c     F2 1E 62 FC | 	wrlong	local01, objptr
1ee30                 | ' st_lines:=t_lines
1ee30     0C E4 05 F1 | 	add	objptr, #12
1ee34     F2 1E 02 FB | 	rdlong	local01, objptr
1ee38     04 E4 05 F1 | 	add	objptr, #4
1ee3c     F2 1E 62 FC | 	wrlong	local01, objptr
1ee40                 | ' ppl:=ppl/xzoom  
1ee40     28 E4 85 F1 | 	sub	objptr, #40
1ee44     F2 80 02 FB | 	rdlong	muldiva_, objptr
1ee48     2C E4 05 F1 | 	add	objptr, #44
1ee4c     F2 82 02 FB | 	rdlong	muldivb_, objptr
1ee50     05 E5 85 F1 | 	sub	objptr, #261
1ee54     BA 00 A0 FD | 	call	#divide_
1ee58     D9 E4 05 F1 | 	add	objptr, #217
1ee5c     F2 82 62 FC | 	wrlong	muldivb_, objptr
1ee60                 | ' s_ppl:=ppl
1ee60     1C E4 05 F1 | 	add	objptr, #28
1ee64     F2 82 62 FC | 	wrlong	muldivb_, objptr
1ee68     F5 E4 85 F1 | 	sub	objptr, #245
1ee6c                 | ' waitms(20)							' wait 
1ee6c     14 12 06 F6 | 	mov	arg01, #20
1ee70     44 2A B0 FD | 	call	#__system___waitms
1ee74                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1ee74     04 E4 05 F1 | 	add	objptr, #4
1ee78     F2 12 02 FB | 	rdlong	arg01, objptr
1ee7c     04 E4 85 F1 | 	sub	objptr, #4
1ee80     F2 16 02 FB | 	rdlong	arg03, objptr
1ee84     09 17 82 F1 | 	sub	arg03, arg01
1ee88     20 14 06 F6 | 	mov	arg02, #32
1ee8c     00 18 06 F6 | 	mov	arg04, #0
1ee90     01 1A 06 F6 | 	mov	arg05, #1
1ee94     0B 00 00 FF 
1ee98     CC E4 05 F1 | 	add	objptr, ##5836
1ee9c     1C 1C B0 FD | 	call	#_psram_spin2_fill
1eea0     0B 00 00 FF 
1eea4     CC E4 85 F1 | 	sub	objptr, ##5836
1eea8     A7 F0 03 F6 | 	mov	ptra, fp
1eeac     B2 00 A0 FD | 	call	#popregs_
1eeb0                 | _hg010b_spin2_setmode_ret
1eeb0     2D 00 64 FD | 	ret
1eeb4                 | 
1eeb4                 | ' 
1eeb4                 | ' '****************************************************************************************************************
1eeb4                 | ' '                                                                                                             	*
1eeb4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1eeb4                 | ' '                                                                                                             	*
1eeb4                 | ' '****************************************************************************************************************
1eeb4                 | ' 
1eeb4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1eeb4                 | _hg010b_spin2_makedl
1eeb4                 | ' 
1eeb4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1eeb4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1eeb4                 | ' repeat i from 0 to 11                                                           ' clear DL
1eeb4     00 00 06 F6 | 	mov	_var01, #0
1eeb8     ED E5 05 F1 | 	add	objptr, #493
1eebc     97 0E 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1eec0                 | LR__2450
1eec0                 | '   displaylist[i]:=0 
1eec0     00 03 02 F6 | 	mov	_var02, _var01
1eec4     02 02 66 F0 | 	shl	_var02, #2
1eec8     F2 02 02 F1 | 	add	_var02, objptr
1eecc     01 01 68 FC | 	wrlong	#0, _var02
1eed0     01 00 06 F1 | 	add	_var01, #1
1eed4     0C 00 56 F2 | 	cmps	_var01, #12 wc
1eed8     E4 FF 9F CD |  if_b	jmp	#LR__2450
1eedc                 | LR__2451
1eedc                 | '                         ' 
1eedc                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1eedc     8C E5 85 F1 | 	sub	objptr, #396
1eee0     F2 02 02 FB | 	rdlong	_var02, objptr
1eee4     14 02 66 F0 | 	shl	_var02, #20
1eee8     01 02 06 F1 | 	add	_var02, #1
1eeec     04 E4 85 F1 | 	sub	objptr, #4
1eef0     F2 00 02 FB | 	rdlong	_var01, objptr
1eef4     02 00 66 F0 | 	shl	_var01, #2
1eef8     04 00 66 F0 | 	shl	_var01, #4
1eefc     00 03 02 F1 | 	add	_var02, _var01
1ef00     90 E5 05 F1 | 	add	objptr, #400
1ef04     F2 02 62 FC | 	wrlong	_var02, objptr
1ef08     ED E5 85 F1 | 	sub	objptr, #493
1ef0c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1ef0c     F2 02 02 FB | 	rdlong	_var02, objptr
1ef10     04 02 66 F0 | 	shl	_var02, #4
1ef14     02 02 06 F1 | 	add	_var02, #2
1ef18     F1 E5 05 F1 | 	add	objptr, #497
1ef1c     F2 02 62 FC | 	wrlong	_var02, objptr
1ef20                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1ef20     04 E4 85 F1 | 	sub	objptr, #4
1ef24     F2 02 02 F6 | 	mov	_var02, objptr
1ef28     CD E5 85 F1 | 	sub	objptr, #461
1ef2c     F2 02 62 FC | 	wrlong	_var02, objptr
1ef30     20 E4 85 F1 | 	sub	objptr, #32
1ef34                 | _hg010b_spin2_makedl_ret
1ef34     2D 00 64 FD | 	ret
1ef38                 | 
1ef38                 | ' 
1ef38                 | ' 
1ef38                 | ' '****************************************************************************************************************
1ef38                 | ' '                                                                        					*
1ef38                 | ' '  Graphic primitives                                                    					*
1ef38                 | ' '                                                                        					*
1ef38                 | ' '****************************************************************************************************************
1ef38                 | ' 
1ef38                 | ' pub setspriteptr(num,ptr)
1ef38                 | _hg010b_spin2_setspriteptr
1ef38                 | ' long[@spr1ptr+12*num]:=ptr
1ef38     11 E5 05 F1 | 	add	objptr, #273
1ef3c     F2 00 02 F6 | 	mov	_var01, objptr
1ef40     09 03 02 F6 | 	mov	_var02, arg01
1ef44     01 02 66 F0 | 	shl	_var02, #1
1ef48     09 03 02 F1 | 	add	_var02, arg01
1ef4c     02 02 66 F0 | 	shl	_var02, #2
1ef50     01 01 02 F1 | 	add	_var01, _var02
1ef54     00 15 62 FC | 	wrlong	arg02, _var01
1ef58     11 E5 85 F1 | 	sub	objptr, #273
1ef5c                 | _hg010b_spin2_setspriteptr_ret
1ef5c     2D 00 64 FD | 	ret
1ef60                 | 
1ef60                 | ' 
1ef60                 | ' pub setspritepos(num,x,y)
1ef60                 | _hg010b_spin2_setspritepos
1ef60                 | ' if y>601
1ef60     01 00 00 FF 
1ef64     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1ef68                 | '   y:=601
1ef68     01 00 00 3F 
1ef6c     59 16 06 36 |  if_ae	mov	arg03, ##601
1ef70                 | ' if x>1024
1ef70     02 00 00 FF 
1ef74     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1ef78                 | '   x:=1024
1ef78     0A 14 C6 39 |  if_ae	decod	arg02, #10
1ef7c                 | ' word[@spr1ptr+12*num+4]:=x
1ef7c     11 E5 05 F1 | 	add	objptr, #273
1ef80     F2 00 02 F6 | 	mov	_var01, objptr
1ef84     09 03 02 F6 | 	mov	_var02, arg01
1ef88     01 02 66 F0 | 	shl	_var02, #1
1ef8c     09 03 02 F1 | 	add	_var02, arg01
1ef90     02 02 66 F0 | 	shl	_var02, #2
1ef94     01 01 02 F1 | 	add	_var01, _var02
1ef98     04 00 06 F1 | 	add	_var01, #4
1ef9c     00 15 52 FC | 	wrword	arg02, _var01
1efa0                 | ' word[@spr1ptr+12*num+6]:=y
1efa0     F2 00 02 F6 | 	mov	_var01, objptr
1efa4     09 03 02 F6 | 	mov	_var02, arg01
1efa8     01 02 66 F0 | 	shl	_var02, #1
1efac     09 03 02 F1 | 	add	_var02, arg01
1efb0     02 02 66 F0 | 	shl	_var02, #2
1efb4     01 01 02 F1 | 	add	_var01, _var02
1efb8     06 00 06 F1 | 	add	_var01, #6
1efbc     00 17 52 FC | 	wrword	arg03, _var01
1efc0     11 E5 85 F1 | 	sub	objptr, #273
1efc4                 | _hg010b_spin2_setspritepos_ret
1efc4     2D 00 64 FD | 	ret
1efc8                 | 
1efc8                 | ' 
1efc8                 | ' pub setspritesize(num,w,h)
1efc8                 | _hg010b_spin2_setspritesize
1efc8                 | ' word[@spr1ptr+12*num+8]:=w
1efc8     11 E5 05 F1 | 	add	objptr, #273
1efcc     F2 00 02 F6 | 	mov	_var01, objptr
1efd0     09 03 02 F6 | 	mov	_var02, arg01
1efd4     01 02 66 F0 | 	shl	_var02, #1
1efd8     09 03 02 F1 | 	add	_var02, arg01
1efdc     02 02 66 F0 | 	shl	_var02, #2
1efe0     01 01 02 F1 | 	add	_var01, _var02
1efe4     08 00 06 F1 | 	add	_var01, #8
1efe8     00 15 52 FC | 	wrword	arg02, _var01
1efec                 | ' word[@spr1ptr+12*num+10]:=h
1efec     F2 00 02 F6 | 	mov	_var01, objptr
1eff0     09 03 02 F6 | 	mov	_var02, arg01
1eff4     01 02 66 F0 | 	shl	_var02, #1
1eff8     09 03 02 F1 | 	add	_var02, arg01
1effc     02 02 66 F0 | 	shl	_var02, #2
1f000     01 01 02 F1 | 	add	_var01, _var02
1f004     0A 00 06 F1 | 	add	_var01, #10
1f008     00 17 52 FC | 	wrword	arg03, _var01
1f00c     11 E5 85 F1 | 	sub	objptr, #273
1f010                 | _hg010b_spin2_setspritesize_ret
1f010     2D 00 64 FD | 	ret
1f014                 | 
1f014                 | ' 
1f014                 | ' 
1f014                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1f014                 | ' 
1f014                 | ' 
1f014                 | ' pub putpixel(x,y,c)
1f014                 | _hg010b_spin2_putpixel
1f014     04 4A 05 F6 | 	mov	COUNT_, #4
1f018     A8 00 A0 FD | 	call	#pushregs_
1f01c     09 1F 02 F6 | 	mov	local01, arg01
1f020                 | ' 
1f020                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1f020     00 20 06 F6 | 	mov	local02, #0
1f024     00 1E 56 F2 | 	cmps	local01, #0 wc
1f028     01 20 66 36 |  if_ae	neg	local02, #1
1f02c     E9 E4 05 F1 | 	add	objptr, #233
1f030     F2 1A 02 FB | 	rdlong	arg05, objptr
1f034     02 1A 66 F0 | 	shl	arg05, #2
1f038     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1f03c     11 23 A2 F1 | 	subx	local03, local03
1f040     11 21 02 F5 | 	and	local02, local03
1f044     00 22 06 F6 | 	mov	local03, #0
1f048     00 14 56 F2 | 	cmps	arg02, #0 wc
1f04c     01 22 66 36 |  if_ae	neg	local03, #1
1f050     11 21 02 F5 | 	and	local02, local03
1f054     04 E4 85 F1 | 	sub	objptr, #4
1f058     F2 22 02 FB | 	rdlong	local03, objptr
1f05c     E5 E4 85 F1 | 	sub	objptr, #229
1f060     11 15 52 F2 | 	cmps	arg02, local03 wc
1f064     12 25 A2 F1 | 	subx	local04, local04
1f068     12 21 CA F7 | 	test	local02, local04 wz
1f06c     48 00 90 AD |  if_e	jmp	#LR__2460
1f070     DD E4 05 F1 | 	add	objptr, #221
1f074     F2 12 02 FB | 	rdlong	arg01, objptr
1f078     14 E4 05 F1 | 	add	objptr, #20
1f07c     F2 24 02 FB | 	rdlong	local04, objptr
1f080     02 24 66 F0 | 	shl	local04, #2
1f084     0A 25 02 FD | 	qmul	local04, arg02
1f088                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f088     0B 15 02 F6 | 	mov	arg02, arg03
1f08c     01 16 06 F6 | 	mov	arg03, #1
1f090     00 18 06 F6 | 	mov	arg04, #0
1f094     01 1A 06 F6 | 	mov	arg05, #1
1f098     0A 00 00 FF 
1f09c     DB E5 05 F1 | 	add	objptr, ##5595
1f0a0     18 24 62 FD | 	getqx	local04
1f0a4     0F 25 02 F1 | 	add	local04, local01
1f0a8     12 13 02 F1 | 	add	arg01, local04
1f0ac     0C 1A B0 FD | 	call	#_psram_spin2_fill
1f0b0     0B 00 00 FF 
1f0b4     CC E4 85 F1 | 	sub	objptr, ##5836
1f0b8                 | LR__2460
1f0b8     A7 F0 03 F6 | 	mov	ptra, fp
1f0bc     B2 00 A0 FD | 	call	#popregs_
1f0c0                 | _hg010b_spin2_putpixel_ret
1f0c0     2D 00 64 FD | 	ret
1f0c4                 | 
1f0c4                 | ' 
1f0c4                 | ' pub putpixel2(x,y,c)
1f0c4                 | _hg010b_spin2_putpixel2
1f0c4     02 4A 05 F6 | 	mov	COUNT_, #2
1f0c8     A8 00 A0 FD | 	call	#pushregs_
1f0cc     DD E4 05 F1 | 	add	objptr, #221
1f0d0     F2 1E 02 FB | 	rdlong	local01, objptr
1f0d4     14 E4 05 F1 | 	add	objptr, #20
1f0d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f0dc     02 1A 66 F0 | 	shl	arg05, #2
1f0e0     0A 1B 02 FD | 	qmul	arg05, arg02
1f0e4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f0e4     0B 15 02 F6 | 	mov	arg02, arg03
1f0e8     01 16 06 F6 | 	mov	arg03, #1
1f0ec     00 18 06 F6 | 	mov	arg04, #0
1f0f0     01 1A 06 F6 | 	mov	arg05, #1
1f0f4     0A 00 00 FF 
1f0f8     DB E5 05 F1 | 	add	objptr, ##5595
1f0fc     18 20 62 FD | 	getqx	local02
1f100     09 21 02 F1 | 	add	local02, arg01
1f104     10 1F 02 F1 | 	add	local01, local02
1f108     0F 13 02 F6 | 	mov	arg01, local01
1f10c     AC 19 B0 FD | 	call	#_psram_spin2_fill
1f110     0B 00 00 FF 
1f114     CC E4 85 F1 | 	sub	objptr, ##5836
1f118     A7 F0 03 F6 | 	mov	ptra, fp
1f11c     B2 00 A0 FD | 	call	#popregs_
1f120                 | _hg010b_spin2_putpixel2_ret
1f120     2D 00 64 FD | 	ret
1f124                 | 
1f124                 | ' 
1f124                 | ' pub getpixel2(x,y): c 
1f124                 | _hg010b_spin2_getpixel2
1f124     02 4A 05 F6 | 	mov	COUNT_, #2
1f128     A8 00 A0 FD | 	call	#pushregs_
1f12c     0C F0 07 F1 | 	add	ptra, #12
1f130     04 4E 05 F1 | 	add	fp, #4
1f134     A7 12 62 FC | 	wrlong	arg01, fp
1f138     04 4E 05 F1 | 	add	fp, #4
1f13c     A7 14 62 FC | 	wrlong	arg02, fp
1f140     08 4E 85 F1 | 	sub	fp, #8
1f144     A7 00 68 FC | 	wrlong	#0, fp
1f148     A7 12 02 F6 | 	mov	arg01, fp
1f14c     DD E4 05 F1 | 	add	objptr, #221
1f150     F2 14 02 FB | 	rdlong	arg02, objptr
1f154     14 E4 05 F1 | 	add	objptr, #20
1f158     F2 16 02 FB | 	rdlong	arg03, objptr
1f15c     02 16 66 F0 | 	shl	arg03, #2
1f160     08 4E 05 F1 | 	add	fp, #8
1f164     A7 FA 01 FB | 	rdlong	result1, fp
1f168     FD 16 02 FD | 	qmul	arg03, result1
1f16c                 | ' 
1f16c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1f16c     04 4E 85 F1 | 	sub	fp, #4
1f170     A7 1E 02 FB | 	rdlong	local01, fp
1f174     04 4E 85 F1 | 	sub	fp, #4
1f178     01 16 06 F6 | 	mov	arg03, #1
1f17c     0A 00 00 FF 
1f180     DB E5 05 F1 | 	add	objptr, ##5595
1f184     18 20 62 FD | 	getqx	local02
1f188     0F 21 02 F1 | 	add	local02, local01
1f18c     10 15 02 F1 | 	add	arg02, local02
1f190     F0 17 B0 FD | 	call	#_psram_spin2_read1
1f194     0B 00 00 FF 
1f198     CC E4 85 F1 | 	sub	objptr, ##5836
1f19c                 | ' return c
1f19c     A7 FA 01 FB | 	rdlong	result1, fp
1f1a0     A7 F0 03 F6 | 	mov	ptra, fp
1f1a4     B2 00 A0 FD | 	call	#popregs_
1f1a8                 | _hg010b_spin2_getpixel2_ret
1f1a8     2D 00 64 FD | 	ret
1f1ac                 | 
1f1ac                 | '   
1f1ac                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1f1ac                 | ' 
1f1ac                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1f1ac                 | _hg010b_spin2_fastline
1f1ac     02 4A 05 F6 | 	mov	COUNT_, #2
1f1b0     A8 00 A0 FD | 	call	#pushregs_
1f1b4     09 1F 02 F6 | 	mov	local01, arg01
1f1b8     0A 21 02 F6 | 	mov	local02, arg02
1f1bc                 | ' 
1f1bc                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1f1bc     00 16 56 F2 | 	cmps	arg03, #0 wc
1f1c0     F4 00 90 CD |  if_b	jmp	#LR__2470
1f1c4     01 00 00 FF 
1f1c8     2A E4 05 F1 | 	add	objptr, ##554
1f1cc     F2 1A 02 FB | 	rdlong	arg05, objptr
1f1d0     01 00 00 FF 
1f1d4     2A E4 85 F1 | 	sub	objptr, ##554
1f1d8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1f1dc     D8 00 90 3D |  if_ae	jmp	#LR__2470
1f1e0     00 1E 56 F2 | 	cmps	local01, #0 wc
1f1e4     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1f1e8     CC 00 90 CD |  if_b	jmp	#LR__2470
1f1ec     01 00 00 FF 
1f1f0     26 E4 05 F1 | 	add	objptr, ##550
1f1f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f1f8     01 00 00 FF 
1f1fc     26 E4 85 F1 | 	sub	objptr, ##550
1f200     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1f204     01 00 00 1F 
1f208     26 E4 05 11 |  if_a	add	objptr, ##550
1f20c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1f210     01 00 00 1F 
1f214     26 E4 85 11 |  if_a	sub	objptr, ##550
1f218     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1f21c                 | '   return
1f21c     98 00 90 1D |  if_a	jmp	#LR__2470
1f220     10 1F 5A F2 | 	cmps	local01, local02 wcz
1f224     0F 1B 02 16 |  if_a	mov	arg05, local01
1f228     10 1F 02 16 |  if_a	mov	local01, local02
1f22c     0D 21 02 16 |  if_a	mov	local02, arg05
1f230     00 1E 56 F2 | 	cmps	local01, #0 wc
1f234     00 1E 06 C6 |  if_b	mov	local01, #0
1f238     01 00 00 FF 
1f23c     26 E4 05 F1 | 	add	objptr, ##550
1f240     F2 1A 02 FB | 	rdlong	arg05, objptr
1f244     01 00 00 FF 
1f248     26 E4 85 F1 | 	sub	objptr, ##550
1f24c     0D 21 52 F2 | 	cmps	local02, arg05 wc
1f250     01 00 00 3F 
1f254     26 E4 05 31 |  if_ae	add	objptr, ##550
1f258     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1f25c     01 00 00 3F 
1f260     26 E4 85 31 |  if_ae	sub	objptr, ##550
1f264     DD E4 05 F1 | 	add	objptr, #221
1f268     F2 12 02 FB | 	rdlong	arg01, objptr
1f26c     14 E4 05 F1 | 	add	objptr, #20
1f270     F2 1A 02 FB | 	rdlong	arg05, objptr
1f274     02 1A 66 F0 | 	shl	arg05, #2
1f278     0B 1B 02 FD | 	qmul	arg05, arg03
1f27c                 | ' if x1>x2
1f27c                 | '   x1,x2:=x2,x1
1f27c                 | ' if x1<0 
1f27c                 | '   x1:=0
1f27c                 | ' if x2>=xres
1f27c                 | '   x2:=xres-1  
1f27c     01 20 86 31 |  if_ae	sub	local02, #1
1f280                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1f280     01 16 06 F6 | 	mov	arg03, #1
1f284     10 17 02 F1 | 	add	arg03, local02
1f288     0F 17 82 F1 | 	sub	arg03, local01
1f28c     0C 15 02 F6 | 	mov	arg02, arg04
1f290     00 18 06 F6 | 	mov	arg04, #0
1f294     01 1A 06 F6 | 	mov	arg05, #1
1f298     0A 00 00 FF 
1f29c     DB E5 05 F1 | 	add	objptr, ##5595
1f2a0     18 20 62 FD | 	getqx	local02
1f2a4     0F 21 02 F1 | 	add	local02, local01
1f2a8     10 13 02 F1 | 	add	arg01, local02
1f2ac     0C 18 B0 FD | 	call	#_psram_spin2_fill
1f2b0     0B 00 00 FF 
1f2b4     CC E4 85 F1 | 	sub	objptr, ##5836
1f2b8                 | LR__2470
1f2b8     A7 F0 03 F6 | 	mov	ptra, fp
1f2bc     B2 00 A0 FD | 	call	#popregs_
1f2c0                 | _hg010b_spin2_fastline_ret
1f2c0     2D 00 64 FD | 	ret
1f2c4                 | 
1f2c4                 | ' 
1f2c4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1f2c4                 | _hg010b_spin2_draw
1f2c4     0E 4A 05 F6 | 	mov	COUNT_, #14
1f2c8     A8 00 A0 FD | 	call	#pushregs_
1f2cc     09 1F 02 F6 | 	mov	local01, arg01
1f2d0     0A 21 02 F6 | 	mov	local02, arg02
1f2d4     0B 23 02 F6 | 	mov	local03, arg03
1f2d8     0C 25 02 F6 | 	mov	local04, arg04
1f2dc     0D 27 02 F6 | 	mov	local05, arg05
1f2e0                 | ' 
1f2e0                 | ' if (y1==y2)
1f2e0     12 21 0A F2 | 	cmp	local02, local04 wz
1f2e4     18 00 90 5D |  if_ne	jmp	#LR__2480
1f2e8                 | '   fastline(x1,x2,y1,c)
1f2e8     0F 13 02 F6 | 	mov	arg01, local01
1f2ec     11 15 02 F6 | 	mov	arg02, local03
1f2f0     10 17 02 F6 | 	mov	arg03, local02
1f2f4     13 19 02 F6 | 	mov	arg04, local05
1f2f8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1f2fc     F8 00 90 FD | 	jmp	#LR__2486
1f300                 | LR__2480
1f300                 | ' else  
1f300                 | '   x:=x1
1f300     0F 29 02 F6 | 	mov	local06, local01
1f304                 | '   y:=y1
1f304     10 2B 02 F6 | 	mov	local07, local02
1f308                 | ' 
1f308                 | '   if (x1<x2) 
1f308     11 1F 52 F2 | 	cmps	local01, local03 wc
1f30c                 | '     xi:=1
1f30c     01 2C 06 C6 |  if_b	mov	local08, #1
1f310                 | '     dx:=x2-x1
1f310     11 2F 02 C6 |  if_b	mov	local09, local03
1f314     0F 2F 82 C1 |  if_b	sub	local09, local01
1f318                 | '   else
1f318                 | '     xi:=-1
1f318     01 2C 66 36 |  if_ae	neg	local08, #1
1f31c                 | '     dx:=x1-x2
1f31c     11 1F 82 31 |  if_ae	sub	local01, local03
1f320     0F 2F 02 36 |  if_ae	mov	local09, local01
1f324                 | '   
1f324                 | '   if (y1<y2) 
1f324     12 21 52 F2 | 	cmps	local02, local04 wc
1f328                 | '     yi:=1
1f328     01 30 06 C6 |  if_b	mov	local10, #1
1f32c                 | '     dy:=y2-y1
1f32c     12 33 02 C6 |  if_b	mov	local11, local04
1f330     10 33 82 C1 |  if_b	sub	local11, local02
1f334                 | '   else
1f334                 | '     yi:=-1
1f334     01 30 66 36 |  if_ae	neg	local10, #1
1f338                 | '     dy:=y1-y2
1f338     12 21 82 31 |  if_ae	sub	local02, local04
1f33c     10 33 02 36 |  if_ae	mov	local11, local02
1f340                 | ' 
1f340                 | '   putpixel(x,y,c)
1f340     13 17 02 F6 | 	mov	arg03, local05
1f344     14 13 02 F6 | 	mov	arg01, local06
1f348     15 15 02 F6 | 	mov	arg02, local07
1f34c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f350                 | ' 
1f350                 | '   if (dx>dy)
1f350     19 2F 5A F2 | 	cmps	local09, local11 wcz
1f354     50 00 90 ED |  if_be	jmp	#LR__2482
1f358                 | '     ai:=(dy-dx)*2
1f358     19 35 02 F6 | 	mov	local12, local11
1f35c     17 35 82 F1 | 	sub	local12, local09
1f360     01 34 66 F0 | 	shl	local12, #1
1f364                 | '     bi:=dy*2
1f364     01 32 66 F0 | 	shl	local11, #1
1f368     19 37 02 F6 | 	mov	local13, local11
1f36c                 | '     d:= bi-dx
1f36c     1B 39 02 F6 | 	mov	local14, local13
1f370     17 39 82 F1 | 	sub	local14, local09
1f374                 | '     repeat while (x<>x2) 
1f374                 | LR__2481
1f374     11 29 0A F2 | 	cmp	local06, local03 wz
1f378     7C 00 90 AD |  if_e	jmp	#LR__2485
1f37c                 | '       if (d>=0) 
1f37c     00 38 56 F2 | 	cmps	local14, #0 wc
1f380                 | '         x+=xi
1f380     16 29 02 31 |  if_ae	add	local06, local08
1f384                 | '         y+=yi
1f384     18 2B 02 31 |  if_ae	add	local07, local10
1f388                 | '         d+=ai
1f388     1A 39 02 31 |  if_ae	add	local14, local12
1f38c                 | '       else
1f38c                 | '         d+=bi
1f38c     1B 39 02 C1 |  if_b	add	local14, local13
1f390                 | '         x+=xi
1f390     16 29 02 C1 |  if_b	add	local06, local08
1f394                 | '       putpixel(x,y,c)
1f394     14 13 02 F6 | 	mov	arg01, local06
1f398     15 15 02 F6 | 	mov	arg02, local07
1f39c     13 17 02 F6 | 	mov	arg03, local05
1f3a0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f3a4     CC FF 9F FD | 	jmp	#LR__2481
1f3a8                 | LR__2482
1f3a8                 | '   else
1f3a8                 | '     ai:=(dx-dy)*2
1f3a8     17 35 02 F6 | 	mov	local12, local09
1f3ac     19 35 82 F1 | 	sub	local12, local11
1f3b0     01 34 66 F0 | 	shl	local12, #1
1f3b4                 | '     bi:=dx*2
1f3b4     01 2E 66 F0 | 	shl	local09, #1
1f3b8     17 37 02 F6 | 	mov	local13, local09
1f3bc                 | '     d:=bi-dy
1f3bc     1B 39 02 F6 | 	mov	local14, local13
1f3c0     19 39 82 F1 | 	sub	local14, local11
1f3c4                 | '     repeat while (y<>y2)
1f3c4                 | LR__2483
1f3c4     12 2B 0A F2 | 	cmp	local07, local04 wz
1f3c8     2C 00 90 AD |  if_e	jmp	#LR__2484
1f3cc                 | '       if (d>=0)
1f3cc     00 38 56 F2 | 	cmps	local14, #0 wc
1f3d0                 | '         x+=xi
1f3d0     16 29 02 31 |  if_ae	add	local06, local08
1f3d4                 | '         y+=yi
1f3d4     18 2B 02 31 |  if_ae	add	local07, local10
1f3d8                 | '         d+=ai
1f3d8     1A 39 02 31 |  if_ae	add	local14, local12
1f3dc                 | '       else
1f3dc                 | '         d+=bi
1f3dc     1B 39 02 C1 |  if_b	add	local14, local13
1f3e0                 | '         y+=yi
1f3e0     18 2B 02 C1 |  if_b	add	local07, local10
1f3e4                 | '       putpixel(x, y,c)
1f3e4     14 13 02 F6 | 	mov	arg01, local06
1f3e8     15 15 02 F6 | 	mov	arg02, local07
1f3ec     13 17 02 F6 | 	mov	arg03, local05
1f3f0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f3f4     CC FF 9F FD | 	jmp	#LR__2483
1f3f8                 | LR__2484
1f3f8                 | LR__2485
1f3f8                 | LR__2486
1f3f8     A7 F0 03 F6 | 	mov	ptra, fp
1f3fc     B2 00 A0 FD | 	call	#popregs_
1f400                 | _hg010b_spin2_draw_ret
1f400     2D 00 64 FD | 	ret
1f404                 | 
1f404                 | '  
1f404                 | ' pub fillpush(val) 
1f404                 | _hg010b_spin2_fillpush
1f404                 | ' fillstack[fillptr]:=val
1f404     0B 00 00 FF 
1f408     BA E4 05 F1 | 	add	objptr, ##5818
1f40c     F2 00 02 FB | 	rdlong	_var01, objptr
1f410     02 00 66 F0 | 	shl	_var01, #2
1f414     0A 00 00 FF 
1f418     00 E4 85 F1 | 	sub	objptr, ##5120
1f41c     F2 00 02 F1 | 	add	_var01, objptr
1f420     00 13 62 FC | 	wrlong	arg01, _var01
1f424                 | ' fillptr+=1   
1f424     0A 00 00 FF 
1f428     00 E4 05 F1 | 	add	objptr, ##5120
1f42c     F2 00 02 FB | 	rdlong	_var01, objptr
1f430     01 00 06 F1 | 	add	_var01, #1
1f434     F2 00 62 FC | 	wrlong	_var01, objptr
1f438     0B 00 00 FF 
1f43c     BA E4 85 F1 | 	sub	objptr, ##5818
1f440                 | _hg010b_spin2_fillpush_ret
1f440     2D 00 64 FD | 	ret
1f444                 | 
1f444                 | ' 
1f444                 | '     
1f444                 | ' pub fillpop() : val
1f444                 | _hg010b_spin2_fillpop
1f444                 | ' 
1f444                 | ' fillptr-=1
1f444     0B 00 00 FF 
1f448     BA E4 05 F1 | 	add	objptr, ##5818
1f44c     F2 FA 01 FB | 	rdlong	result1, objptr
1f450     01 FA 85 F1 | 	sub	result1, #1
1f454     F2 FA 61 FC | 	wrlong	result1, objptr
1f458                 | ' if fillptr<0
1f458     0B 00 00 FF 
1f45c     BA E4 85 F1 | 	sub	objptr, ##5818
1f460     00 FA 55 F2 | 	cmps	result1, #0 wc
1f464                 | '   fillptr:=0
1f464     0B 00 00 CF 
1f468     BA E4 05 C1 |  if_b	add	objptr, ##5818
1f46c     F2 00 68 CC |  if_b	wrlong	#0, objptr
1f470     0B 00 00 CF 
1f474     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1f478                 | '   val:=-12345
1f478     E7 FF 7F CF 
1f47c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1f480     28 00 90 CD |  if_b	jmp	#LR__2490
1f484                 | ' else 
1f484                 | '   val:=fillstack[fillptr]
1f484     0B 00 00 FF 
1f488     BA E4 05 F1 | 	add	objptr, ##5818
1f48c     F2 00 02 FB | 	rdlong	_var01, objptr
1f490     02 00 66 F0 | 	shl	_var01, #2
1f494     0A 00 00 FF 
1f498     00 E4 85 F1 | 	sub	objptr, ##5120
1f49c     F2 00 02 F1 | 	add	_var01, objptr
1f4a0     00 01 02 FB | 	rdlong	_var01, _var01
1f4a4     01 00 00 FF 
1f4a8     BA E4 85 F1 | 	sub	objptr, ##698
1f4ac                 | LR__2490
1f4ac                 | ' return val
1f4ac     00 FB 01 F6 | 	mov	result1, _var01
1f4b0                 | _hg010b_spin2_fillpop_ret
1f4b0     2D 00 64 FD | 	ret
1f4b4                 | 
1f4b4                 | ' 
1f4b4                 | '       
1f4b4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1f4b4                 | _hg010b_spin2_fill
1f4b4     0B 4A 05 F6 | 	mov	COUNT_, #11
1f4b8     A8 00 A0 FD | 	call	#pushregs_
1f4bc                 | ' 
1f4bc                 | ' newcolor:=newcolor & 255
1f4bc     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1f4c0                 | ' oldcolor:=oldcolor & 255
1f4c0     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1f4c4                 | ' 
1f4c4                 | ' if (oldcolor == newcolor) 
1f4c4     0F 21 0A F2 | 	cmp	local02, local01 wz
1f4c8                 | '   return
1f4c8     70 02 90 AD |  if_e	jmp	#LR__2509
1f4cc                 | ' 
1f4cc                 | ' fillptr:=0
1f4cc     0B 00 00 FF 
1f4d0     BA E4 05 F1 | 	add	objptr, ##5818
1f4d4     F2 00 68 FC | 	wrlong	#0, objptr
1f4d8                 | ' fillmax:=0
1f4d8     04 E4 05 F1 | 	add	objptr, #4
1f4dc     F2 00 68 FC | 	wrlong	#0, objptr
1f4e0     0B 00 00 FF 
1f4e4     BE E4 85 F1 | 	sub	objptr, ##5822
1f4e8                 | ' fillpush(x)
1f4e8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f4ec                 | ' fillpush(y)
1f4ec     0A 13 02 F6 | 	mov	arg01, arg02
1f4f0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f4f4                 | ' y:=fillpop()
1f4f4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1f4f8     FD 22 02 F6 | 	mov	local03, result1
1f4fc                 | ' x:=fillpop()
1f4fc     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1f500     FD 24 02 F6 | 	mov	local04, result1
1f504                 | ' 'pinhigh(38)
1f504                 | ' repeat while (x>-1)       
1f504                 | LR__2500
1f504     00 24 56 F2 | 	cmps	local04, #0 wc
1f508     30 02 90 CD |  if_b	jmp	#LR__2508
1f50c                 | '  ' pintoggle(39)
1f50c                 | '   x1 := x
1f50c     12 27 02 F6 | 	mov	local05, local04
1f510                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1f510                 | LR__2501
1f510     00 28 06 F6 | 	mov	local06, #0
1f514     00 2A 06 F6 | 	mov	local07, #0
1f518     00 26 56 F2 | 	cmps	local05, #0 wc
1f51c     01 2A 66 36 |  if_ae	neg	local07, #1
1f520     00 2A 0E F2 | 	cmp	local07, #0 wz
1f524     00 28 26 56 |  if_ne	not	local06, #0
1f528     00 2C 06 F6 | 	mov	local08, #0
1f52c     00 2E 06 F6 | 	mov	local09, #0
1f530     11 15 02 F6 | 	mov	arg02, local03
1f534     13 13 02 F6 | 	mov	arg01, local05
1f538     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f53c     10 FB 09 F2 | 	cmp	result1, local02 wz
1f540     00 2E 26 A6 |  if_e	not	local09, #0
1f544     00 2E 0E F2 | 	cmp	local09, #0 wz
1f548     00 2C 26 56 |  if_ne	not	local08, #0
1f54c     16 29 CA F7 | 	test	local06, local08 wz
1f550                 | '     x1--
1f550     01 26 86 51 |  if_ne	sub	local05, #1
1f554     B8 FF 9F 5D |  if_ne	jmp	#LR__2501
1f558                 | '   x1++
1f558     01 26 06 F1 | 	add	local05, #1
1f55c                 | '   spanabove := 0
1f55c     00 30 06 F6 | 	mov	local10, #0
1f560                 | '   spanbelow := 0
1f560     00 32 06 F6 | 	mov	local11, #0
1f564                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1f564                 | LR__2502
1f564     00 28 06 F6 | 	mov	local06, #0
1f568     02 00 00 FF 
1f56c     00 26 56 F2 | 	cmps	local05, ##1024 wc
1f570     00 28 26 C6 |  if_b	not	local06, #0
1f574     00 2C 06 F6 | 	mov	local08, #0
1f578     00 2E 06 F6 | 	mov	local09, #0
1f57c     11 15 02 F6 | 	mov	arg02, local03
1f580     13 13 02 F6 | 	mov	arg01, local05
1f584     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f588     10 FB 09 F2 | 	cmp	result1, local02 wz
1f58c     00 2E 26 A6 |  if_e	not	local09, #0
1f590     00 2E 0E F2 | 	cmp	local09, #0 wz
1f594     00 2C 26 56 |  if_ne	not	local08, #0
1f598     16 29 CA F7 | 	test	local06, local08 wz
1f59c     88 01 90 AD |  if_e	jmp	#LR__2507
1f5a0                 | '     putpixel2 (x1,y, newcolor & 255)
1f5a0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1f5a4     13 13 02 F6 | 	mov	arg01, local05
1f5a8     11 15 02 F6 | 	mov	arg02, local03
1f5ac     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1f5b0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1f5b0     00 28 06 F6 | 	mov	local06, #0
1f5b4     00 2A 06 F6 | 	mov	local07, #0
1f5b8     00 30 0E F2 | 	cmp	local10, #0 wz
1f5bc     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1f5c0     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1f5c4     00 2A 0E F2 | 	cmp	local07, #0 wz
1f5c8     00 28 26 56 |  if_ne	not	local06, #0
1f5cc     00 2C 06 F6 | 	mov	local08, #0
1f5d0     00 2E 06 F6 | 	mov	local09, #0
1f5d4     11 15 02 F6 | 	mov	arg02, local03
1f5d8     01 14 86 F1 | 	sub	arg02, #1
1f5dc     13 13 02 F6 | 	mov	arg01, local05
1f5e0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f5e4     10 FB 09 F2 | 	cmp	result1, local02 wz
1f5e8     00 2E 26 A6 |  if_e	not	local09, #0
1f5ec     00 2E 0E F2 | 	cmp	local09, #0 wz
1f5f0     00 2C 26 56 |  if_ne	not	local08, #0
1f5f4     16 29 CA F7 | 	test	local06, local08 wz
1f5f8     1C 00 90 AD |  if_e	jmp	#LR__2503
1f5fc                 | '       fillpush(x1)
1f5fc     13 13 02 F6 | 	mov	arg01, local05
1f600     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1f604                 | '       fillpush(y-1)
1f604     11 13 02 F6 | 	mov	arg01, local03
1f608     01 12 86 F1 | 	sub	arg01, #1
1f60c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f610                 | '       spanabove := 1 
1f610     01 30 06 F6 | 	mov	local10, #1
1f614     4C 00 90 FD | 	jmp	#LR__2504
1f618                 | LR__2503
1f618                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1f618     00 28 06 F6 | 	mov	local06, #0
1f61c     00 2A 06 F6 | 	mov	local07, #0
1f620     00 30 0E F2 | 	cmp	local10, #0 wz
1f624     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1f628     01 2A 66 16 |  if_a	neg	local07, #1
1f62c     00 2A 0E F2 | 	cmp	local07, #0 wz
1f630     00 28 26 56 |  if_ne	not	local06, #0
1f634     00 2C 06 F6 | 	mov	local08, #0
1f638     00 2E 06 F6 | 	mov	local09, #0
1f63c     11 15 02 F6 | 	mov	arg02, local03
1f640     01 14 86 F1 | 	sub	arg02, #1
1f644     13 13 02 F6 | 	mov	arg01, local05
1f648     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f64c     10 FB 09 F2 | 	cmp	result1, local02 wz
1f650     00 2E 26 56 |  if_ne	not	local09, #0
1f654     00 2E 0E F2 | 	cmp	local09, #0 wz
1f658     00 2C 26 56 |  if_ne	not	local08, #0
1f65c     16 29 CA F7 | 	test	local06, local08 wz
1f660                 | '       spanabove := 0 
1f660     00 30 06 56 |  if_ne	mov	local10, #0
1f664                 | LR__2504
1f664                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1f664     00 28 06 F6 | 	mov	local06, #0
1f668     00 2A 06 F6 | 	mov	local07, #0
1f66c     00 32 0E F2 | 	cmp	local11, #0 wz
1f670     01 00 00 AF 
1f674     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1f678     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1f67c     00 2A 0E F2 | 	cmp	local07, #0 wz
1f680     00 28 26 56 |  if_ne	not	local06, #0
1f684     00 2C 06 F6 | 	mov	local08, #0
1f688     00 2E 06 F6 | 	mov	local09, #0
1f68c     11 15 02 F6 | 	mov	arg02, local03
1f690     01 14 06 F1 | 	add	arg02, #1
1f694     13 13 02 F6 | 	mov	arg01, local05
1f698     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f69c     10 FB 09 F2 | 	cmp	result1, local02 wz
1f6a0     00 2E 26 A6 |  if_e	not	local09, #0
1f6a4     00 2E 0E F2 | 	cmp	local09, #0 wz
1f6a8     00 2C 26 56 |  if_ne	not	local08, #0
1f6ac     16 29 CA F7 | 	test	local06, local08 wz
1f6b0     1C 00 90 AD |  if_e	jmp	#LR__2505
1f6b4                 | '       fillpush(x1)
1f6b4     13 13 02 F6 | 	mov	arg01, local05
1f6b8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f6bc                 | '       fillpush(y + 1)
1f6bc     11 13 02 F6 | 	mov	arg01, local03
1f6c0     01 12 06 F1 | 	add	arg01, #1
1f6c4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1f6c8                 | '       spanBelow := 1
1f6c8     01 32 06 F6 | 	mov	local11, #1
1f6cc     50 00 90 FD | 	jmp	#LR__2506
1f6d0                 | LR__2505
1f6d0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1f6d0     00 28 06 F6 | 	mov	local06, #0
1f6d4     00 2A 06 F6 | 	mov	local07, #0
1f6d8     00 32 0E F2 | 	cmp	local11, #0 wz
1f6dc     01 00 00 5F 
1f6e0     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1f6e4     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1f6e8     00 2A 0E F2 | 	cmp	local07, #0 wz
1f6ec     00 28 26 56 |  if_ne	not	local06, #0
1f6f0     00 2C 06 F6 | 	mov	local08, #0
1f6f4     00 2E 06 F6 | 	mov	local09, #0
1f6f8     11 15 02 F6 | 	mov	arg02, local03
1f6fc     01 14 06 F1 | 	add	arg02, #1
1f700     13 13 02 F6 | 	mov	arg01, local05
1f704     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f708     10 FB 09 F2 | 	cmp	result1, local02 wz
1f70c     00 2E 26 56 |  if_ne	not	local09, #0
1f710     00 2E 0E F2 | 	cmp	local09, #0 wz
1f714     00 2C 26 56 |  if_ne	not	local08, #0
1f718     16 29 CA F7 | 	test	local06, local08 wz
1f71c                 | '       spanbelow := 0
1f71c     00 32 06 56 |  if_ne	mov	local11, #0
1f720                 | LR__2506
1f720                 | '     x1++
1f720     01 26 06 F1 | 	add	local05, #1
1f724     3C FE 9F FD | 	jmp	#LR__2502
1f728                 | LR__2507
1f728                 | '   y:=fillpop()
1f728     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f72c     FD 22 02 F6 | 	mov	local03, result1
1f730                 | '   x:=fillpop()
1f730     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f734     FD 24 02 F6 | 	mov	local04, result1
1f738     C8 FD 9F FD | 	jmp	#LR__2500
1f73c                 | LR__2508
1f73c                 | LR__2509
1f73c     A7 F0 03 F6 | 	mov	ptra, fp
1f740     B2 00 A0 FD | 	call	#popregs_
1f744                 | _hg010b_spin2_fill_ret
1f744     2D 00 64 FD | 	ret
1f748                 | 
1f748                 | ' 'pinlow(38)    
1f748                 | ' 
1f748                 | ' '-- A filled circle -----------------------------------------------------
1f748                 | ' 
1f748                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1f748                 | _hg010b_spin2_fcircle
1f748     08 4A 05 F6 | 	mov	COUNT_, #8
1f74c     A8 00 A0 FD | 	call	#pushregs_
1f750     0B 1F 02 F6 | 	mov	local01, arg03
1f754     FF FF 7F FF 
1f758     FE 1F 06 FD | 	qmul	local01, ##-2
1f75c     09 21 02 F6 | 	mov	local02, arg01
1f760     0A 23 02 F6 | 	mov	local03, arg02
1f764     0C 25 02 F6 | 	mov	local04, arg04
1f768                 | ' 
1f768                 | ' d:=5-4*r
1f768     0F 19 02 F6 | 	mov	arg04, local01
1f76c     02 18 66 F0 | 	shl	arg04, #2
1f770     05 26 06 F6 | 	mov	local05, #5
1f774     0C 27 82 F1 | 	sub	local05, arg04
1f778                 | ' x:=0
1f778     00 28 06 F6 | 	mov	local06, #0
1f77c                 | ' y:=r
1f77c                 | ' da:=(-2*r+5)*4
1f77c                 | ' db:=3*4
1f77c     0C 2A 06 F6 | 	mov	local07, #12
1f780                 | ' repeat while (x<=y) 
1f780     18 2C 62 FD | 	getqx	local08
1f784     05 2C 06 F1 | 	add	local08, #5
1f788     02 2C 66 F0 | 	shl	local08, #2
1f78c                 | LR__2510
1f78c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f790     B4 00 90 1D |  if_a	jmp	#LR__2512
1f794                 | '   fastline(x0-x,x0+x,y0-y,c)
1f794     10 13 02 F6 | 	mov	arg01, local02
1f798     14 13 82 F1 | 	sub	arg01, local06
1f79c     10 15 02 F6 | 	mov	arg02, local02
1f7a0     14 15 02 F1 | 	add	arg02, local06
1f7a4     11 17 02 F6 | 	mov	arg03, local03
1f7a8     0F 17 82 F1 | 	sub	arg03, local01
1f7ac     12 19 02 F6 | 	mov	arg04, local04
1f7b0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f7b4                 | '   fastline(x0-x,x0+x,y0+y,c)
1f7b4     10 13 02 F6 | 	mov	arg01, local02
1f7b8     14 13 82 F1 | 	sub	arg01, local06
1f7bc     10 15 02 F6 | 	mov	arg02, local02
1f7c0     14 15 02 F1 | 	add	arg02, local06
1f7c4     11 17 02 F6 | 	mov	arg03, local03
1f7c8     0F 17 02 F1 | 	add	arg03, local01
1f7cc     12 19 02 F6 | 	mov	arg04, local04
1f7d0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f7d4                 | '   fastline(x0-y,x0+y,y0-x,c)
1f7d4     10 13 02 F6 | 	mov	arg01, local02
1f7d8     0F 13 82 F1 | 	sub	arg01, local01
1f7dc     10 15 02 F6 | 	mov	arg02, local02
1f7e0     0F 15 02 F1 | 	add	arg02, local01
1f7e4     11 17 02 F6 | 	mov	arg03, local03
1f7e8     14 17 82 F1 | 	sub	arg03, local06
1f7ec     12 19 02 F6 | 	mov	arg04, local04
1f7f0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f7f4                 | '   fastline(x0-y,x0+y,y0+x,c)
1f7f4     10 13 02 F6 | 	mov	arg01, local02
1f7f8     0F 13 82 F1 | 	sub	arg01, local01
1f7fc     10 15 02 F6 | 	mov	arg02, local02
1f800     0F 15 02 F1 | 	add	arg02, local01
1f804     11 17 02 F6 | 	mov	arg03, local03
1f808     14 17 02 F1 | 	add	arg03, local06
1f80c     12 19 02 F6 | 	mov	arg04, local04
1f810     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f814                 | '   if d>0 
1f814     01 26 56 F2 | 	cmps	local05, #1 wc
1f818     18 00 90 CD |  if_b	jmp	#LR__2511
1f81c                 | '     d+=da
1f81c     16 27 02 F1 | 	add	local05, local08
1f820                 | '     y-=1
1f820     01 1E 86 F1 | 	sub	local01, #1
1f824                 | '     x+=1
1f824     01 28 06 F1 | 	add	local06, #1
1f828                 | '     da+=4*4
1f828     10 2C 06 F1 | 	add	local08, #16
1f82c                 | '     db+=2*4
1f82c     08 2A 06 F1 | 	add	local07, #8
1f830     58 FF 9F FD | 	jmp	#LR__2510
1f834                 | LR__2511
1f834                 | '   else
1f834                 | '     d+=db
1f834     15 27 02 F1 | 	add	local05, local07
1f838                 | '     x+=1
1f838     01 28 06 F1 | 	add	local06, #1
1f83c                 | '     da+=2*4
1f83c     08 2C 06 F1 | 	add	local08, #8
1f840                 | '     db+=2*4
1f840     08 2A 06 F1 | 	add	local07, #8
1f844     44 FF 9F FD | 	jmp	#LR__2510
1f848                 | LR__2512
1f848     A7 F0 03 F6 | 	mov	ptra, fp
1f84c     B2 00 A0 FD | 	call	#popregs_
1f850                 | _hg010b_spin2_fcircle_ret
1f850     2D 00 64 FD | 	ret
1f854                 | 
1f854                 | '  
1f854                 | ' '-- A circle ------------------------------------------------------------ 
1f854                 | '  
1f854                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1f854                 | _hg010b_spin2_circle
1f854     08 4A 05 F6 | 	mov	COUNT_, #8
1f858     A8 00 A0 FD | 	call	#pushregs_
1f85c     0B 1F 02 F6 | 	mov	local01, arg03
1f860     FF FF 7F FF 
1f864     FE 1F 06 FD | 	qmul	local01, ##-2
1f868     09 21 02 F6 | 	mov	local02, arg01
1f86c     0A 23 02 F6 | 	mov	local03, arg02
1f870     0C 25 02 F6 | 	mov	local04, arg04
1f874                 | ' 
1f874                 | '  
1f874                 | ' d:=5-4*r
1f874     0F 19 02 F6 | 	mov	arg04, local01
1f878     02 18 66 F0 | 	shl	arg04, #2
1f87c     05 26 06 F6 | 	mov	local05, #5
1f880     0C 27 82 F1 | 	sub	local05, arg04
1f884                 | ' x:=0
1f884     00 28 06 F6 | 	mov	local06, #0
1f888                 | ' y:=r
1f888                 | ' da:=(-2*r+5)*4
1f888                 | ' db:=3*4
1f888     0C 2A 06 F6 | 	mov	local07, #12
1f88c                 | ' repeat while (x<=y) 
1f88c     18 2C 62 FD | 	getqx	local08
1f890     05 2C 06 F1 | 	add	local08, #5
1f894     02 2C 66 F0 | 	shl	local08, #2
1f898                 | LR__2520
1f898     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f89c     F4 00 90 1D |  if_a	jmp	#LR__2522
1f8a0                 | '   putpixel(x0-x,y0-y,c)
1f8a0     10 13 02 F6 | 	mov	arg01, local02
1f8a4     14 13 82 F1 | 	sub	arg01, local06
1f8a8     11 15 02 F6 | 	mov	arg02, local03
1f8ac     0F 15 82 F1 | 	sub	arg02, local01
1f8b0     12 17 02 F6 | 	mov	arg03, local04
1f8b4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f8b8                 | '   putpixel(x0-x,y0+y,c)
1f8b8     10 13 02 F6 | 	mov	arg01, local02
1f8bc     14 13 82 F1 | 	sub	arg01, local06
1f8c0     11 15 02 F6 | 	mov	arg02, local03
1f8c4     0F 15 02 F1 | 	add	arg02, local01
1f8c8     12 17 02 F6 | 	mov	arg03, local04
1f8cc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f8d0                 | '   putpixel(x0+x,y0-y,c)
1f8d0     10 13 02 F6 | 	mov	arg01, local02
1f8d4     14 13 02 F1 | 	add	arg01, local06
1f8d8     11 15 02 F6 | 	mov	arg02, local03
1f8dc     0F 15 82 F1 | 	sub	arg02, local01
1f8e0     12 17 02 F6 | 	mov	arg03, local04
1f8e4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f8e8                 | '   putpixel(x0+x,y0+y,c)
1f8e8     10 13 02 F6 | 	mov	arg01, local02
1f8ec     14 13 02 F1 | 	add	arg01, local06
1f8f0     11 15 02 F6 | 	mov	arg02, local03
1f8f4     0F 15 02 F1 | 	add	arg02, local01
1f8f8     12 17 02 F6 | 	mov	arg03, local04
1f8fc     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f900                 | '   putpixel(x0-y,y0-x,c)
1f900     10 13 02 F6 | 	mov	arg01, local02
1f904     0F 13 82 F1 | 	sub	arg01, local01
1f908     11 15 02 F6 | 	mov	arg02, local03
1f90c     14 15 82 F1 | 	sub	arg02, local06
1f910     12 17 02 F6 | 	mov	arg03, local04
1f914     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f918                 | '   putpixel(x0-y,y0+x,c)
1f918     10 13 02 F6 | 	mov	arg01, local02
1f91c     0F 13 82 F1 | 	sub	arg01, local01
1f920     11 15 02 F6 | 	mov	arg02, local03
1f924     14 15 02 F1 | 	add	arg02, local06
1f928     12 17 02 F6 | 	mov	arg03, local04
1f92c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f930                 | '   putpixel(x0+y,y0-x,c)
1f930     10 13 02 F6 | 	mov	arg01, local02
1f934     0F 13 02 F1 | 	add	arg01, local01
1f938     11 15 02 F6 | 	mov	arg02, local03
1f93c     14 15 82 F1 | 	sub	arg02, local06
1f940     12 17 02 F6 | 	mov	arg03, local04
1f944     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f948                 | '   putpixel(x0+y,y0+x,c)
1f948     10 13 02 F6 | 	mov	arg01, local02
1f94c     0F 13 02 F1 | 	add	arg01, local01
1f950     11 15 02 F6 | 	mov	arg02, local03
1f954     14 15 02 F1 | 	add	arg02, local06
1f958     12 17 02 F6 | 	mov	arg03, local04
1f95c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f960                 | '   if d>0 
1f960     01 26 56 F2 | 	cmps	local05, #1 wc
1f964     18 00 90 CD |  if_b	jmp	#LR__2521
1f968                 | '     d+=da
1f968     16 27 02 F1 | 	add	local05, local08
1f96c                 | '     y-=1
1f96c     01 1E 86 F1 | 	sub	local01, #1
1f970                 | '     x+=1
1f970     01 28 06 F1 | 	add	local06, #1
1f974                 | '     da+=4*4
1f974     10 2C 06 F1 | 	add	local08, #16
1f978                 | '     db+=2*4
1f978     08 2A 06 F1 | 	add	local07, #8
1f97c     18 FF 9F FD | 	jmp	#LR__2520
1f980                 | LR__2521
1f980                 | '   else
1f980                 | '     d+=db
1f980     15 27 02 F1 | 	add	local05, local07
1f984                 | '     x+=1
1f984     01 28 06 F1 | 	add	local06, #1
1f988                 | '     da+=2*4
1f988     08 2C 06 F1 | 	add	local08, #8
1f98c                 | '     db+=2*4
1f98c     08 2A 06 F1 | 	add	local07, #8
1f990     04 FF 9F FD | 	jmp	#LR__2520
1f994                 | LR__2522
1f994     A7 F0 03 F6 | 	mov	ptra, fp
1f998     B2 00 A0 FD | 	call	#popregs_
1f99c                 | _hg010b_spin2_circle_ret
1f99c     2D 00 64 FD | 	ret
1f9a0                 | 
1f9a0                 | '     
1f9a0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1f9a0                 | ' 
1f9a0                 | ' pub frame(x1,y1,x2,y2,c)
1f9a0                 | _hg010b_spin2_frame
1f9a0     05 4A 05 F6 | 	mov	COUNT_, #5
1f9a4     A8 00 A0 FD | 	call	#pushregs_
1f9a8     09 1F 02 F6 | 	mov	local01, arg01
1f9ac     0A 21 02 F6 | 	mov	local02, arg02
1f9b0     0B 23 02 F6 | 	mov	local03, arg03
1f9b4     0C 25 02 F6 | 	mov	local04, arg04
1f9b8     0D 27 02 F6 | 	mov	local05, arg05
1f9bc                 | ' 
1f9bc                 | ' fastline(x1,x2,y1,c)
1f9bc     0F 13 02 F6 | 	mov	arg01, local01
1f9c0     11 15 02 F6 | 	mov	arg02, local03
1f9c4     10 17 02 F6 | 	mov	arg03, local02
1f9c8     13 19 02 F6 | 	mov	arg04, local05
1f9cc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1f9d0                 | ' fastline(x1,x2,y2,c)
1f9d0     0F 13 02 F6 | 	mov	arg01, local01
1f9d4     11 15 02 F6 | 	mov	arg02, local03
1f9d8     12 17 02 F6 | 	mov	arg03, local04
1f9dc     13 19 02 F6 | 	mov	arg04, local05
1f9e0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1f9e4                 | ' line(x1,y1,x1,y2,c)
1f9e4     0F 13 02 F6 | 	mov	arg01, local01
1f9e8     10 15 02 F6 | 	mov	arg02, local02
1f9ec     0F 17 02 F6 | 	mov	arg03, local01
1f9f0     12 19 02 F6 | 	mov	arg04, local04
1f9f4     13 1B 02 F6 | 	mov	arg05, local05
1f9f8                 | ' draw(x1,y1,x2,y2,c)
1f9f8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1f9fc                 | ' line(x2,y1,x2,y2,c)
1f9fc     11 13 02 F6 | 	mov	arg01, local03
1fa00     10 15 02 F6 | 	mov	arg02, local02
1fa04     11 17 02 F6 | 	mov	arg03, local03
1fa08     12 19 02 F6 | 	mov	arg04, local04
1fa0c     13 1B 02 F6 | 	mov	arg05, local05
1fa10                 | ' draw(x1,y1,x2,y2,c)
1fa10     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1fa14     A7 F0 03 F6 | 	mov	ptra, fp
1fa18     B2 00 A0 FD | 	call	#popregs_
1fa1c                 | _hg010b_spin2_frame_ret
1fa1c     2D 00 64 FD | 	ret
1fa20                 | 
1fa20                 | ' 
1fa20                 | ' '-- A box (a filled rectangle) ----------------------------------------
1fa20                 | ' 
1fa20                 | ' pub box(x1,y1,x2,y2,c) |yy
1fa20                 | _hg010b_spin2_box
1fa20     06 4A 05 F6 | 	mov	COUNT_, #6
1fa24     A8 00 A0 FD | 	call	#pushregs_
1fa28     09 1F 02 F6 | 	mov	local01, arg01
1fa2c     0A 21 02 F6 | 	mov	local02, arg02
1fa30     0B 23 02 F6 | 	mov	local03, arg03
1fa34     0C 25 02 F6 | 	mov	local04, arg04
1fa38     0D 27 02 F6 | 	mov	local05, arg05
1fa3c                 | ' 
1fa3c                 | ' repeat yy from y1 to y2
1fa3c     10 25 52 F2 | 	cmps	local04, local02 wc
1fa40     01 28 86 F6 | 	negc	local06, #1
1fa44     14 25 02 F1 | 	add	local04, local06
1fa48                 | LR__2530
1fa48                 | '   fastline(x1,x2,yy,c)
1fa48     0F 13 02 F6 | 	mov	arg01, local01
1fa4c     11 15 02 F6 | 	mov	arg02, local03
1fa50     13 19 02 F6 | 	mov	arg04, local05
1fa54     10 17 02 F6 | 	mov	arg03, local02
1fa58     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1fa5c     14 21 02 F1 | 	add	local02, local06
1fa60     12 21 0A F2 | 	cmp	local02, local04 wz
1fa64     E0 FF 9F 5D |  if_ne	jmp	#LR__2530
1fa68     A7 F0 03 F6 | 	mov	ptra, fp
1fa6c     B2 00 A0 FD | 	call	#popregs_
1fa70                 | _hg010b_spin2_box_ret
1fa70     2D 00 64 FD | 	ret
1fa74                 | 
1fa74                 | '       
1fa74                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1fa74                 | _hg010b_spin2_putcharxycgf
1fa74                 | ' 
1fa74                 | '  
1fa74                 | ' repeat yy from 0 to 15
1fa74     00 00 06 F6 | 	mov	_var01, #0
1fa78     97 8C 48 FB | 	callpa	#(@LR__2542-@LR__2540)>>2,fcache_load_ptr_
1fa7c                 | LR__2540
1fa7c                 | ' 
1fa7c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1fa7c     95 E4 05 F1 | 	add	objptr, #149
1fa80     F2 02 02 FB | 	rdlong	_var02, objptr
1fa84     0A 02 66 F0 | 	shl	_var02, #10
1fa88     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1fa8c     01 05 02 F1 | 	add	_var03, _var02
1fa90     0B 03 02 F6 | 	mov	_var02, arg03
1fa94     04 02 66 F0 | 	shl	_var02, #4
1fa98     01 05 02 F1 | 	add	_var03, _var02
1fa9c     00 05 02 F1 | 	add	_var03, _var01
1faa0     02 05 C2 FA | 	rdbyte	_var03, _var03
1faa4                 | '   asm
1faa4     00 04 0E F4 | 	testb	_var03, #0 wz
1faa8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1faac     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1fab0     01 04 0E F4 | 	testb	_var03, #1 wz
1fab4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1fab8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1fabc     02 04 0E F4 | 	testb	_var03, #2 wz
1fac0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1fac4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1fac8     03 04 0E F4 | 	testb	_var03, #3 wz
1facc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1fad0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1fad4     04 04 0E F4 | 	testb	_var03, #4 wz
1fad8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1fadc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1fae0     05 04 0E F4 | 	testb	_var03, #5 wz
1fae4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1fae8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1faec     06 04 0E F4 | 	testb	_var03, #6 wz
1faf0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1faf4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1faf8     07 04 0E F4 | 	testb	_var03, #7 wz
1fafc     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1fb00     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1fb04                 | '   
1fb04                 | '   ccc[0]:=c1
1fb04     99 E5 05 F1 | 	add	objptr, #409
1fb08     F2 06 62 FC | 	wrlong	_var04, objptr
1fb0c                 | '   ccc[1]:=c2 
1fb0c     04 E4 05 F1 | 	add	objptr, #4
1fb10     F2 08 62 FC | 	wrlong	_var05, objptr
1fb14                 | '   long[mailbox0][2]:=8
1fb14     49 E4 85 F1 | 	sub	objptr, #73
1fb18     F2 04 02 FB | 	rdlong	_var03, objptr
1fb1c     08 04 06 F1 | 	add	_var03, #8
1fb20     02 11 68 FC | 	wrlong	#8, _var03
1fb24                 | '   long[mailbox0][1]:=@ccc
1fb24     45 E4 05 F1 | 	add	objptr, #69
1fb28     F2 04 02 F6 | 	mov	_var03, objptr
1fb2c     45 E4 85 F1 | 	sub	objptr, #69
1fb30     F2 02 02 FB | 	rdlong	_var02, objptr
1fb34     04 02 06 F1 | 	add	_var02, #4
1fb38     01 05 62 FC | 	wrlong	_var03, _var02
1fb3c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1fb3c     0C E5 85 F1 | 	sub	objptr, #268
1fb40     F2 04 02 FB | 	rdlong	_var03, objptr
1fb44     0A 03 02 F6 | 	mov	_var02, arg02
1fb48     00 03 02 F1 | 	add	_var02, _var01
1fb4c     0A 02 66 F0 | 	shl	_var02, #10
1fb50     09 0B 02 F6 | 	mov	_var06, arg01
1fb54     02 0A 66 F0 | 	shl	_var06, #2
1fb58     05 03 02 F1 | 	add	_var02, _var06
1fb5c     01 05 02 F1 | 	add	_var03, _var02
1fb60     00 00 78 FF 
1fb64     00 04 06 F1 | 	add	_var03, ##-268435456
1fb68     0C E5 05 F1 | 	add	objptr, #268
1fb6c     F2 0A 02 FB | 	rdlong	_var06, objptr
1fb70     05 05 62 FC | 	wrlong	_var03, _var06
1fb74                 | '   repeat
1fb74                 | LR__2541
1fb74     F2 04 02 FB | 	rdlong	_var03, objptr
1fb78     02 03 02 FB | 	rdlong	_var02, _var03
1fb7c     00 02 56 F2 | 	cmps	_var02, #0 wc
1fb80     F0 FF 9F CD |  if_b	jmp	#LR__2541
1fb84     E9 E5 85 F1 | 	sub	objptr, #489
1fb88     01 00 06 F1 | 	add	_var01, #1
1fb8c     10 00 56 F2 | 	cmps	_var01, #16 wc
1fb90     E8 FE 9F CD |  if_b	jmp	#LR__2540
1fb94                 | LR__2542
1fb94                 | _hg010b_spin2_putcharxycgf_ret
1fb94     2D 00 64 FD | 	ret
1fb98                 | 
1fb98                 | ' 
1fb98                 | ' 
1fb98                 | ' '**********************************************************************r***
1fb98                 | ' '                                                                        *
1fb98                 | ' ' Font related functions                                                 *
1fb98                 | ' '                                                                        *
1fb98                 | ' '*************************************************************************
1fb98                 | ' 
1fb98                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1fb98                 | ' 
1fb98                 | ' pub setfontfamily(afontnum)
1fb98                 | _hg010b_spin2_setfontfamily
1fb98                 | ' 
1fb98                 | ' font_family:=afontnum
1fb98     95 E4 05 F1 | 	add	objptr, #149
1fb9c     F2 12 62 FC | 	wrlong	arg01, objptr
1fba0     95 E4 85 F1 | 	sub	objptr, #149
1fba4                 | ' 'if afontnum==8
1fba4                 | ' '  font_ptr:=@amiga_font
1fba4                 | ' 
1fba4                 | ' if afontnum==4
1fba4     04 12 0E F2 | 	cmp	arg01, #4 wz
1fba8                 | '   font_ptr:=@st_font
1fba8     08 00 00 AF 
1fbac     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1fbb0     08 E4 05 A1 |  if_e	add	objptr, #8
1fbb4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1fbb8     08 E4 85 A1 |  if_e	sub	objptr, #8
1fbbc     08 00 00 AF 
1fbc0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1fbc4                 | ' if afontnum==0
1fbc4     00 12 0E F2 | 	cmp	arg01, #0 wz
1fbc8                 | '   font_ptr:=@vga_font
1fbc8     08 E4 05 A1 |  if_e	add	objptr, #8
1fbcc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1fbd0     08 E4 85 A1 |  if_e	sub	objptr, #8
1fbd4                 | _hg010b_spin2_setfontfamily_ret
1fbd4     2D 00 64 FD | 	ret
1fbd8                 | 
1fbd8                 | ' 
1fbd8                 | ' '*************************************************************************
1fbd8                 | ' '                                                                        *
1fbd8                 | ' '  Cursor functions                                                      *
1fbd8                 | ' '                                                                        *
1fbd8                 | ' '*************************************************************************
1fbd8                 | ' 
1fbd8                 | ' 
1fbd8                 | ' pub setcursorpos(x,y)
1fbd8                 | _hg010b_spin2_setcursorpos
1fbd8                 | ' 
1fbd8                 | ' ''---------- Set the (x,y) position of cursor
1fbd8                 | ' 
1fbd8                 | ' cursor_x:=x
1fbd8     3C E4 05 F1 | 	add	objptr, #60
1fbdc     F2 12 52 FC | 	wrword	arg01, objptr
1fbe0                 | ' cursor_y:=y
1fbe0     02 E4 05 F1 | 	add	objptr, #2
1fbe4     F2 14 42 FC | 	wrbyte	arg02, objptr
1fbe8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fbe8     02 E4 85 F1 | 	sub	objptr, #2
1fbec     F2 14 E2 FA | 	rdword	arg02, objptr
1fbf0     02 14 66 F0 | 	shl	arg02, #2
1fbf4     02 E4 05 F1 | 	add	objptr, #2
1fbf8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fbfc     3E E4 85 F1 | 	sub	objptr, #62
1fc00     04 16 66 F0 | 	shl	arg03, #4
1fc04     04 16 06 F1 | 	add	arg03, #4
1fc08     11 12 06 F6 | 	mov	arg01, #17
1fc0c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1fc10                 | _hg010b_spin2_setcursorpos_ret
1fc10     2D 00 64 FD | 	ret
1fc14                 | 
1fc14                 | ' 
1fc14                 | ' pub setcursorx(x)
1fc14                 | _hg010b_spin2_setcursorx
1fc14                 | ' cursor_x:=x
1fc14     3C E4 05 F1 | 	add	objptr, #60
1fc18     F2 12 52 FC | 	wrword	arg01, objptr
1fc1c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fc1c     F2 14 E2 FA | 	rdword	arg02, objptr
1fc20     02 14 66 F0 | 	shl	arg02, #2
1fc24     02 E4 05 F1 | 	add	objptr, #2
1fc28     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fc2c     3E E4 85 F1 | 	sub	objptr, #62
1fc30     04 16 66 F0 | 	shl	arg03, #4
1fc34     04 16 06 F1 | 	add	arg03, #4
1fc38     11 12 06 F6 | 	mov	arg01, #17
1fc3c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1fc40                 | _hg010b_spin2_setcursorx_ret
1fc40     2D 00 64 FD | 	ret
1fc44                 | 
1fc44                 | ' 
1fc44                 | ' pub setcursory(y) 
1fc44                 | _hg010b_spin2_setcursory
1fc44                 | ' cursor_y:=y
1fc44     3E E4 05 F1 | 	add	objptr, #62
1fc48     F2 12 42 FC | 	wrbyte	arg01, objptr
1fc4c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1fc4c     02 E4 85 F1 | 	sub	objptr, #2
1fc50     F2 14 E2 FA | 	rdword	arg02, objptr
1fc54     02 14 66 F0 | 	shl	arg02, #2
1fc58     02 E4 05 F1 | 	add	objptr, #2
1fc5c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fc60     3E E4 85 F1 | 	sub	objptr, #62
1fc64     04 16 66 F0 | 	shl	arg03, #4
1fc68     04 16 06 F1 | 	add	arg03, #4
1fc6c     11 12 06 F6 | 	mov	arg01, #17
1fc70     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1fc74                 | _hg010b_spin2_setcursory_ret
1fc74     2D 00 64 FD | 	ret
1fc78                 | 
1fc78                 | ' 
1fc78                 | ' '*************************************************************************
1fc78                 | ' '                                                                        *
1fc78                 | ' '  VBlank functions                                                      *
1fc78                 | ' '                                                                        *
1fc78                 | ' '*************************************************************************
1fc78                 | ' 
1fc78                 | ' pub waitvbl(amount) | i
1fc78                 | _hg010b_spin2_waitvbl
1fc78     03 4A 05 F6 | 	mov	COUNT_, #3
1fc7c     A8 00 A0 FD | 	call	#pushregs_
1fc80     09 1F 02 F6 | 	mov	local01, arg01
1fc84                 | ' 
1fc84                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1fc84                 | ' 
1fc84                 | ' repeat i from 1 to amount
1fc84     01 20 06 F6 | 	mov	local02, #1
1fc88     01 1E 56 F2 | 	cmps	local01, #1 wc
1fc8c     01 22 86 F6 | 	negc	local03, #1
1fc90     11 1F 02 F1 | 	add	local01, local03
1fc94                 | LR__2550
1fc94                 | '   repeat until vblank==0
1fc94                 | LR__2551
1fc94     49 E4 05 F1 | 	add	objptr, #73
1fc98     F2 12 0A FB | 	rdlong	arg01, objptr wz
1fc9c     49 E4 85 F1 | 	sub	objptr, #73
1fca0     0C 00 90 AD |  if_e	jmp	#LR__2552
1fca4                 | '     waitus(100)
1fca4     64 12 06 F6 | 	mov	arg01, #100
1fca8     78 1C B0 FD | 	call	#__system___waitus
1fcac     E4 FF 9F FD | 	jmp	#LR__2551
1fcb0                 | LR__2552
1fcb0                 | '   repeat until vblank==1
1fcb0                 | LR__2553
1fcb0     49 E4 05 F1 | 	add	objptr, #73
1fcb4     F2 12 02 FB | 	rdlong	arg01, objptr
1fcb8     49 E4 85 F1 | 	sub	objptr, #73
1fcbc     01 12 0E F2 | 	cmp	arg01, #1 wz
1fcc0     0C 00 90 AD |  if_e	jmp	#LR__2554
1fcc4                 | '     waitus(100)
1fcc4     64 12 06 F6 | 	mov	arg01, #100
1fcc8     58 1C B0 FD | 	call	#__system___waitus
1fccc     E0 FF 9F FD | 	jmp	#LR__2553
1fcd0                 | LR__2554
1fcd0     11 21 02 F1 | 	add	local02, local03
1fcd4     0F 21 0A F2 | 	cmp	local02, local01 wz
1fcd8     B8 FF 9F 5D |  if_ne	jmp	#LR__2550
1fcdc     A7 F0 03 F6 | 	mov	ptra, fp
1fce0     B2 00 A0 FD | 	call	#popregs_
1fce4                 | _hg010b_spin2_waitvbl_ret
1fce4     2D 00 64 FD | 	ret
1fce8                 | 
1fce8                 | ' 
1fce8                 | ' 
1fce8                 | ' pub cls(fc,bc)   :c,i
1fce8                 | _hg010b_spin2_cls
1fce8     02 4A 05 F6 | 	mov	COUNT_, #2
1fcec     A8 00 A0 FD | 	call	#pushregs_
1fcf0     09 1F 02 F6 | 	mov	local01, arg01
1fcf4     0A 21 02 F6 | 	mov	local02, arg02
1fcf8                 | ' 
1fcf8                 | ' c:=bc
1fcf8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1fcf8     DD E4 05 F1 | 	add	objptr, #221
1fcfc     F2 12 02 FB | 	rdlong	arg01, objptr
1fd00     A5 E4 85 F1 | 	sub	objptr, #165
1fd04     F2 16 02 FB | 	rdlong	arg03, objptr
1fd08     02 16 66 F0 | 	shl	arg03, #2
1fd0c     10 15 02 F6 | 	mov	arg02, local02
1fd10     00 18 06 F6 | 	mov	arg04, #0
1fd14     01 1A 06 F6 | 	mov	arg05, #1
1fd18     0B 00 00 FF 
1fd1c     94 E4 05 F1 | 	add	objptr, ##5780
1fd20     98 0D B0 FD | 	call	#_psram_spin2_fill
1fd24                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1fd24     0B 00 00 FF 
1fd28     C8 E4 85 F1 | 	sub	objptr, ##5832
1fd2c     F2 12 02 FB | 	rdlong	arg01, objptr
1fd30     04 E4 85 F1 | 	sub	objptr, #4
1fd34     F2 16 02 FB | 	rdlong	arg03, objptr
1fd38     09 17 82 F1 | 	sub	arg03, arg01
1fd3c     20 14 06 F6 | 	mov	arg02, #32
1fd40     00 18 06 F6 | 	mov	arg04, #0
1fd44     01 1A 06 F6 | 	mov	arg05, #1
1fd48     0B 00 00 FF 
1fd4c     CC E4 05 F1 | 	add	objptr, ##5836
1fd50     68 0D B0 FD | 	call	#_psram_spin2_fill
1fd54                 | ' setwritecolors(fc,bc)
1fd54                 | ' 
1fd54                 | ' write_color:=ff
1fd54     0B 00 00 FF 
1fd58     8B E4 85 F1 | 	sub	objptr, ##5771
1fd5c     F2 1E 62 FC | 	wrlong	local01, objptr
1fd60                 | ' write_background:=bb
1fd60     04 E4 05 F1 | 	add	objptr, #4
1fd64     F2 20 62 FC | 	wrlong	local02, objptr
1fd68                 | ' cursor_x:=0
1fd68     09 E4 85 F1 | 	sub	objptr, #9
1fd6c     F2 00 58 FC | 	wrword	#0, objptr
1fd70                 | ' cursor_y:=0
1fd70     02 E4 05 F1 | 	add	objptr, #2
1fd74     F2 00 48 FC | 	wrbyte	#0, objptr
1fd78                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fd78     02 E4 85 F1 | 	sub	objptr, #2
1fd7c     F2 14 E2 FA | 	rdword	arg02, objptr
1fd80     02 14 66 F0 | 	shl	arg02, #2
1fd84     02 E4 05 F1 | 	add	objptr, #2
1fd88     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fd8c     3E E4 85 F1 | 	sub	objptr, #62
1fd90     04 16 66 F0 | 	shl	arg03, #4
1fd94     04 16 06 F1 | 	add	arg03, #4
1fd98     11 12 06 F6 | 	mov	arg01, #17
1fd9c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1fda0                 | ' setcursorcolor(fc)
1fda0     0F 13 02 F6 | 	mov	arg01, local01
1fda4     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1fda8     10 FB 01 F6 | 	mov	result1, local02
1fdac     00 FC 05 F6 | 	mov	result2, #0
1fdb0     A7 F0 03 F6 | 	mov	ptra, fp
1fdb4     B2 00 A0 FD | 	call	#popregs_
1fdb8                 | _hg010b_spin2_cls_ret
1fdb8     2D 00 64 FD | 	ret
1fdbc                 | 
1fdbc                 | ' 
1fdbc                 | ' ''---------- Output a char at the cursor position, move the cursor 
1fdbc                 | ' 
1fdbc                 | ' pub putchar(achar) | c,x,y,l,newcpl
1fdbc                 | _hg010b_spin2_putchar
1fdbc     02 4A 05 F6 | 	mov	COUNT_, #2
1fdc0     A8 00 A0 FD | 	call	#pushregs_
1fdc4     09 1F 02 F6 | 	mov	local01, arg01
1fdc8                 | ' 
1fdc8                 | ' if achar==10
1fdc8     0A 1E 0E F2 | 	cmp	local01, #10 wz
1fdcc                 | '   crlf()
1fdcc     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1fdd0                 | ' if achar==9
1fdd0     09 1E 0E F2 | 	cmp	local01, #9 wz
1fdd4     18 00 90 5D |  if_ne	jmp	#LR__2560
1fdd8                 | '   cursor_x:=(cursor_x& %11110000)+16
1fdd8     3C E4 05 F1 | 	add	objptr, #60
1fddc     F2 16 E2 FA | 	rdword	arg03, objptr
1fde0     F0 16 06 F5 | 	and	arg03, #240
1fde4     10 16 06 F1 | 	add	arg03, #16
1fde8     F2 16 52 FC | 	wrword	arg03, objptr
1fdec     3C E4 85 F1 | 	sub	objptr, #60
1fdf0                 | LR__2560
1fdf0                 | '   
1fdf0                 | ' if (achar<>9) && (achar<>10) 
1fdf0     09 1E 0E F2 | 	cmp	local01, #9 wz
1fdf4     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1fdf8     A8 00 90 AD |  if_e	jmp	#LR__2561
1fdfc                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1fdfc     3C E4 05 F1 | 	add	objptr, #60
1fe00     F2 12 E2 FA | 	rdword	arg01, objptr
1fe04     02 E4 05 F1 | 	add	objptr, #2
1fe08     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fe0c     04 14 66 F0 | 	shl	arg02, #4
1fe10     04 14 06 F1 | 	add	arg02, #4
1fe14     03 E4 05 F1 | 	add	objptr, #3
1fe18     F2 18 02 FB | 	rdlong	arg04, objptr
1fe1c     04 E4 05 F1 | 	add	objptr, #4
1fe20     F2 1A 02 FB | 	rdlong	arg05, objptr
1fe24     45 E4 85 F1 | 	sub	objptr, #69
1fe28     0F 17 02 F6 | 	mov	arg03, local01
1fe2c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1fe30     04 E4 05 F1 | 	add	objptr, #4
1fe34     F2 12 02 FB | 	rdlong	arg01, objptr
1fe38     10 00 00 FF 
1fe3c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fe40     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1fe44     3A E4 05 F1 | 	add	objptr, #58
1fe48     F2 1A C2 FA | 	rdbyte	arg05, objptr
1fe4c     0D 17 02 FD | 	qmul	arg03, arg05
1fe50                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1fe50     10 00 00 FF 
1fe54     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fe58     02 E4 85 F1 | 	sub	objptr, #2
1fe5c     F2 20 E2 FA | 	rdword	local02, objptr
1fe60     01 20 46 F0 | 	shr	local02, #1
1fe64     0F 15 02 F6 | 	mov	arg02, local01
1fe68     01 16 06 F6 | 	mov	arg03, #1
1fe6c     00 18 06 F6 | 	mov	arg04, #0
1fe70     01 1A 06 F6 | 	mov	arg05, #1
1fe74     0B 00 00 FF 
1fe78     90 E4 05 F1 | 	add	objptr, ##5776
1fe7c     18 1E 62 FD | 	getqx	local01
1fe80     10 1F 02 F1 | 	add	local01, local02
1fe84     0F 13 02 F1 | 	add	arg01, local01
1fe88     30 0C B0 FD | 	call	#_psram_spin2_fill
1fe8c                 | '   cursor_x+=2
1fe8c     0B 00 00 FF 
1fe90     90 E4 85 F1 | 	sub	objptr, ##5776
1fe94     F2 20 E2 FA | 	rdword	local02, objptr
1fe98     02 20 06 F1 | 	add	local02, #2
1fe9c     F2 20 52 FC | 	wrword	local02, objptr
1fea0     3C E4 85 F1 | 	sub	objptr, #60
1fea4                 | LR__2561
1fea4                 | ' 
1fea4                 | ' if cursor_x>=256
1fea4     3C E4 05 F1 | 	add	objptr, #60
1fea8     F2 20 E2 FA | 	rdword	local02, objptr
1feac     3C E4 85 F1 | 	sub	objptr, #60
1feb0     00 21 56 F2 | 	cmps	local02, #256 wc
1feb4     64 00 90 CD |  if_b	jmp	#LR__2563
1feb8                 | '   cursor_x:=0
1feb8     3C E4 05 F1 | 	add	objptr, #60
1febc     F2 00 58 FC | 	wrword	#0, objptr
1fec0                 | '   cursor_y+=1
1fec0     02 E4 05 F1 | 	add	objptr, #2
1fec4     F2 20 C2 FA | 	rdbyte	local02, objptr
1fec8     01 20 06 F1 | 	add	local02, #1
1fecc     F2 20 42 FC | 	wrbyte	local02, objptr
1fed0                 | '   if cursor_y>st_lines-1
1fed0     C3 E4 05 F1 | 	add	objptr, #195
1fed4     F2 20 02 FB | 	rdlong	local02, objptr
1fed8     01 20 86 F1 | 	sub	local02, #1
1fedc     C3 E4 85 F1 | 	sub	objptr, #195
1fee0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fee4     3E E4 85 F1 | 	sub	objptr, #62
1fee8     10 17 5A F2 | 	cmps	arg03, local02 wcz
1feec     2C 00 90 ED |  if_be	jmp	#LR__2562
1fef0                 | '     scrollup2()
1fef0     00 12 06 F6 | 	mov	arg01, #0
1fef4     01 00 00 FF 
1fef8     58 14 06 F6 | 	mov	arg02, ##600
1fefc     10 16 06 F6 | 	mov	arg03, #16
1ff00     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1ff04                 | '     cursor_y:=st_lines-1
1ff04     01 E5 05 F1 | 	add	objptr, #257
1ff08     F2 20 02 FB | 	rdlong	local02, objptr
1ff0c     01 20 86 F1 | 	sub	local02, #1
1ff10     C3 E4 85 F1 | 	sub	objptr, #195
1ff14     F2 20 42 FC | 	wrbyte	local02, objptr
1ff18     3E E4 85 F1 | 	sub	objptr, #62
1ff1c                 | LR__2562
1ff1c                 | LR__2563
1ff1c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ff1c     3C E4 05 F1 | 	add	objptr, #60
1ff20     F2 14 E2 FA | 	rdword	arg02, objptr
1ff24     02 14 66 F0 | 	shl	arg02, #2
1ff28     02 E4 05 F1 | 	add	objptr, #2
1ff2c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ff30     3E E4 85 F1 | 	sub	objptr, #62
1ff34     04 16 66 F0 | 	shl	arg03, #4
1ff38     04 16 06 F1 | 	add	arg03, #4
1ff3c     11 12 06 F6 | 	mov	arg01, #17
1ff40     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1ff44     A7 F0 03 F6 | 	mov	ptra, fp
1ff48     B2 00 A0 FD | 	call	#popregs_
1ff4c                 | _hg010b_spin2_putchar_ret
1ff4c     2D 00 64 FD | 	ret
1ff50                 | 
1ff50                 | '     
1ff50                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1ff50                 | ' 
1ff50                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1ff50                 | _hg010b_spin2_putchar2
1ff50     02 4A 05 F6 | 	mov	COUNT_, #2
1ff54     A8 00 A0 FD | 	call	#pushregs_
1ff58     09 1F 02 F6 | 	mov	local01, arg01
1ff5c                 | ' 
1ff5c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1ff5c     3C E4 05 F1 | 	add	objptr, #60
1ff60     F2 12 E2 FA | 	rdword	arg01, objptr
1ff64     02 E4 05 F1 | 	add	objptr, #2
1ff68     F2 14 C2 FA | 	rdbyte	arg02, objptr
1ff6c     04 14 66 F0 | 	shl	arg02, #4
1ff70     04 14 06 F1 | 	add	arg02, #4
1ff74     03 E4 05 F1 | 	add	objptr, #3
1ff78     F2 18 02 FB | 	rdlong	arg04, objptr
1ff7c     04 E4 05 F1 | 	add	objptr, #4
1ff80     F2 1A 02 FB | 	rdlong	arg05, objptr
1ff84     45 E4 85 F1 | 	sub	objptr, #69
1ff88     0F 17 02 F6 | 	mov	arg03, local01
1ff8c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1ff90     04 E4 05 F1 | 	add	objptr, #4
1ff94     F2 12 02 FB | 	rdlong	arg01, objptr
1ff98     10 00 00 FF 
1ff9c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1ffa0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1ffa4     3A E4 05 F1 | 	add	objptr, #58
1ffa8     F2 1A C2 FA | 	rdbyte	arg05, objptr
1ffac     0D 17 02 FD | 	qmul	arg03, arg05
1ffb0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1ffb0     10 00 00 FF 
1ffb4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1ffb8     02 E4 85 F1 | 	sub	objptr, #2
1ffbc     F2 20 E2 FA | 	rdword	local02, objptr
1ffc0     01 20 46 F0 | 	shr	local02, #1
1ffc4     0F 15 02 F6 | 	mov	arg02, local01
1ffc8     01 16 06 F6 | 	mov	arg03, #1
1ffcc     00 18 06 F6 | 	mov	arg04, #0
1ffd0     01 1A 06 F6 | 	mov	arg05, #1
1ffd4     0B 00 00 FF 
1ffd8     90 E4 05 F1 | 	add	objptr, ##5776
1ffdc     18 1E 62 FD | 	getqx	local01
1ffe0     10 1F 02 F1 | 	add	local01, local02
1ffe4     0F 13 02 F1 | 	add	arg01, local01
1ffe8     D0 0A B0 FD | 	call	#_psram_spin2_fill
1ffec                 | ' 
1ffec                 | ' cursor_x+=2
1ffec     0B 00 00 FF 
1fff0     90 E4 85 F1 | 	sub	objptr, ##5776
1fff4     F2 20 E2 FA | 	rdword	local02, objptr
1fff8     02 20 06 F1 | 	add	local02, #2
1fffc     F2 20 52 FC | 	wrword	local02, objptr
20000                 | ' if cursor_x>=256
20000     F2 20 E2 FA | 	rdword	local02, objptr
20004     3C E4 85 F1 | 	sub	objptr, #60
20008     00 21 56 F2 | 	cmps	local02, #256 wc
2000c     64 00 90 CD |  if_b	jmp	#LR__2571
20010                 | '   cursor_x:=0
20010     3C E4 05 F1 | 	add	objptr, #60
20014     F2 00 58 FC | 	wrword	#0, objptr
20018                 | '   cursor_y+=1
20018     02 E4 05 F1 | 	add	objptr, #2
2001c     F2 20 C2 FA | 	rdbyte	local02, objptr
20020     01 20 06 F1 | 	add	local02, #1
20024     F2 20 42 FC | 	wrbyte	local02, objptr
20028                 | '   if cursor_y>st_lines-1
20028     C3 E4 05 F1 | 	add	objptr, #195
2002c     F2 20 02 FB | 	rdlong	local02, objptr
20030     01 20 86 F1 | 	sub	local02, #1
20034     C3 E4 85 F1 | 	sub	objptr, #195
20038     F2 16 C2 FA | 	rdbyte	arg03, objptr
2003c     3E E4 85 F1 | 	sub	objptr, #62
20040     10 17 5A F2 | 	cmps	arg03, local02 wcz
20044     2C 00 90 ED |  if_be	jmp	#LR__2570
20048                 | '     scrollup2()
20048     00 12 06 F6 | 	mov	arg01, #0
2004c     01 00 00 FF 
20050     58 14 06 F6 | 	mov	arg02, ##600
20054     10 16 06 F6 | 	mov	arg03, #16
20058     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2005c                 | '     cursor_y:=st_lines-1
2005c     01 E5 05 F1 | 	add	objptr, #257
20060     F2 20 02 FB | 	rdlong	local02, objptr
20064     01 20 86 F1 | 	sub	local02, #1
20068     C3 E4 85 F1 | 	sub	objptr, #195
2006c     F2 20 42 FC | 	wrbyte	local02, objptr
20070     3E E4 85 F1 | 	sub	objptr, #62
20074                 | LR__2570
20074                 | LR__2571
20074                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
20074     3C E4 05 F1 | 	add	objptr, #60
20078     F2 14 E2 FA | 	rdword	arg02, objptr
2007c     02 14 66 F0 | 	shl	arg02, #2
20080     02 E4 05 F1 | 	add	objptr, #2
20084     F2 16 C2 FA | 	rdbyte	arg03, objptr
20088     3E E4 85 F1 | 	sub	objptr, #62
2008c     04 16 66 F0 | 	shl	arg03, #4
20090     04 16 06 F1 | 	add	arg03, #4
20094     11 12 06 F6 | 	mov	arg01, #17
20098     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2009c     A7 F0 03 F6 | 	mov	ptra, fp
200a0     B2 00 A0 FD | 	call	#popregs_
200a4                 | _hg010b_spin2_putchar2_ret
200a4     2D 00 64 FD | 	ret
200a8                 | 
200a8                 | ' ''--------- Output a string at the cursor position, move the cursor  
200a8                 | ' 
200a8                 | ' pub write(text) | iii,c,ncx,ncy
200a8                 | _hg010b_spin2_write
200a8     04 4A 05 F6 | 	mov	COUNT_, #4
200ac     A8 00 A0 FD | 	call	#pushregs_
200b0     09 1F 02 F6 | 	mov	local01, arg01
200b4                 | ' 
200b4                 | ' repeat iii from 0 to strsize(text)-1
200b4     00 20 06 F6 | 	mov	local02, #0
200b8     0F 13 02 F6 | 	mov	arg01, local01
200bc     09 23 02 F6 | 	mov	local03, arg01
200c0     97 06 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
200c4                 | LR__2580
200c4     11 FB C9 FA | 	rdbyte	result1, local03 wz
200c8     01 22 06 51 |  if_ne	add	local03, #1
200cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2580
200d0                 | LR__2581
200d0     09 23 82 F1 | 	sub	local03, arg01
200d4     01 22 86 F1 | 	sub	local03, #1
200d8     00 22 56 F2 | 	cmps	local03, #0 wc
200dc     01 24 86 F6 | 	negc	local04, #1
200e0     12 23 02 F1 | 	add	local03, local04
200e4                 | LR__2582
200e4                 | '   putchar2(byte[text+iii])
200e4     0F 13 02 F6 | 	mov	arg01, local01
200e8     10 13 02 F1 | 	add	arg01, local02
200ec     09 13 C2 FA | 	rdbyte	arg01, arg01
200f0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
200f4     12 21 02 F1 | 	add	local02, local04
200f8     11 21 0A F2 | 	cmp	local02, local03 wz
200fc     E4 FF 9F 5D |  if_ne	jmp	#LR__2582
20100     A7 F0 03 F6 | 	mov	ptra, fp
20104     B2 00 A0 FD | 	call	#popregs_
20108                 | _hg010b_spin2_write_ret
20108     2D 00 64 FD | 	ret
2010c                 | 
2010c                 | '    
2010c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
2010c                 | ' 
2010c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
2010c                 | _hg010b_spin2_scrollup2
2010c     03 4A 05 F6 | 	mov	COUNT_, #3
20110     A8 00 A0 FD | 	call	#pushregs_
20114                 | ' 	
20114                 | ' repeat i from 4 to 579 
20114     04 1E 06 F6 | 	mov	local01, #4
20118                 | LR__2590
20118     F9 E4 05 F1 | 	add	objptr, #249
2011c     F2 1A 02 FB | 	rdlong	arg05, objptr
20120     1C E4 85 F1 | 	sub	objptr, #28
20124     F2 14 02 FB | 	rdlong	arg02, objptr
20128     0F 19 02 F6 | 	mov	arg04, local01
2012c     10 18 06 F1 | 	add	arg04, #16
20130     02 18 66 F0 | 	shl	arg04, #2
20134     14 E4 05 F1 | 	add	objptr, #20
20138     F2 16 02 FB | 	rdlong	arg03, objptr
2013c     0B 19 02 FD | 	qmul	arg04, arg03
20140                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
20140     F6 03 00 FF 
20144     00 12 06 F6 | 	mov	arg01, ##519168
20148     0D 13 82 F1 | 	sub	arg01, arg05
2014c     02 16 66 F0 | 	shl	arg03, #2
20150     0A 00 00 FF 
20154     DB E5 05 F1 | 	add	objptr, ##5595
20158     18 1A 62 FD | 	getqx	arg05
2015c     0D 15 02 F1 | 	add	arg02, arg05
20160     20 08 B0 FD | 	call	#_psram_spin2_read1
20164     0A 00 00 FF 
20168     D3 E5 85 F1 | 	sub	objptr, ##5587
2016c     F2 1A 02 FB | 	rdlong	arg05, objptr
20170     1C E4 85 F1 | 	sub	objptr, #28
20174     F2 14 02 FB | 	rdlong	arg02, objptr
20178     0F 19 02 F6 | 	mov	arg04, local01
2017c     02 18 66 F0 | 	shl	arg04, #2
20180     14 E4 05 F1 | 	add	objptr, #20
20184     F2 16 02 FB | 	rdlong	arg03, objptr
20188     0B 19 02 FD | 	qmul	arg04, arg03
2018c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2018c     F6 03 00 FF 
20190     00 12 06 F6 | 	mov	arg01, ##519168
20194     0D 13 82 F1 | 	sub	arg01, arg05
20198     02 16 66 F0 | 	shl	arg03, #2
2019c     0A 00 00 FF 
201a0     DB E5 05 F1 | 	add	objptr, ##5595
201a4     18 1A 62 FD | 	getqx	arg05
201a8     0D 15 02 F1 | 	add	arg02, arg05
201ac     70 08 B0 FD | 	call	#_psram_spin2_write
201b0     0B 00 00 FF 
201b4     CC E4 85 F1 | 	sub	objptr, ##5836
201b8     01 1E 06 F1 | 	add	local01, #1
201bc     01 00 00 FF 
201c0     44 1E 16 F2 | 	cmp	local01, ##580 wc
201c4     50 FF 9F CD |  if_b	jmp	#LR__2590
201c8                 | ' 
201c8                 | ' repeat i from 580 to 599
201c8     01 00 00 FF 
201cc     44 1E 06 F6 | 	mov	local01, ##580
201d0                 | LR__2591
201d0                 | '    fastline(0,1023,i,write_background)   
201d0     45 E4 05 F1 | 	add	objptr, #69
201d4     F2 18 02 FB | 	rdlong	arg04, objptr
201d8     45 E4 85 F1 | 	sub	objptr, #69
201dc     00 12 06 F6 | 	mov	arg01, #0
201e0     09 14 CE F9 | 	bmask	arg02, #9
201e4     0F 17 02 F6 | 	mov	arg03, local01
201e8     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
201ec     01 1E 06 F1 | 	add	local01, #1
201f0     01 00 00 FF 
201f4     58 1E 16 F2 | 	cmp	local01, ##600 wc
201f8     D4 FF 9F CD |  if_b	jmp	#LR__2591
201fc                 | ' repeat i from 0 to 3
201fc     00 1E 06 F6 | 	mov	local01, #0
20200                 | LR__2592
20200                 | '    fastline(0,1023,i,write_background)      
20200     45 E4 05 F1 | 	add	objptr, #69
20204     F2 18 02 FB | 	rdlong	arg04, objptr
20208     45 E4 85 F1 | 	sub	objptr, #69
2020c     00 12 06 F6 | 	mov	arg01, #0
20210     09 14 CE F9 | 	bmask	arg02, #9
20214     0F 17 02 F6 | 	mov	arg03, local01
20218     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2021c     01 1E 06 F1 | 	add	local01, #1
20220     04 1E 56 F2 | 	cmps	local01, #4 wc
20224     D8 FF 9F CD |  if_b	jmp	#LR__2592
20228                 | ' 
20228                 | ' repeat i from 0 to 35
20228     00 1E 06 F6 | 	mov	local01, #0
2022c                 | LR__2593
2022c     0F 1B 02 F6 | 	mov	arg05, local01
20230     01 1A 06 F1 | 	add	arg05, #1
20234     10 00 00 FF 
20238     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2023c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20240     0B 1B 02 FD | 	qmul	arg05, arg03
20244                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
20244     F6 03 00 FF 
20248     00 12 06 F6 | 	mov	arg01, ##519168
2024c     F9 E4 05 F1 | 	add	objptr, #249
20250     F2 1A 02 FB | 	rdlong	arg05, objptr
20254     0D 13 82 F1 | 	sub	arg01, arg05
20258     F5 E4 85 F1 | 	sub	objptr, #245
2025c     F2 14 02 FB | 	rdlong	arg02, objptr
20260     10 00 00 FF 
20264     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20268     0B 00 00 FF 
2026c     C8 E4 05 F1 | 	add	objptr, ##5832
20270     18 1A 62 FD | 	getqx	arg05
20274     0D 15 02 F1 | 	add	arg02, arg05
20278     08 07 B0 FD | 	call	#_psram_spin2_read1
2027c     10 00 00 FF 
20280     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20284     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20288     0B 1F 02 FD | 	qmul	local01, arg03
2028c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2028c     F6 03 00 FF 
20290     00 12 06 F6 | 	mov	arg01, ##519168
20294     0A 00 00 FF 
20298     D3 E5 85 F1 | 	sub	objptr, ##5587
2029c     F2 1A 02 FB | 	rdlong	arg05, objptr
202a0     0D 13 82 F1 | 	sub	arg01, arg05
202a4     F5 E4 85 F1 | 	sub	objptr, #245
202a8     F2 14 02 FB | 	rdlong	arg02, objptr
202ac     10 00 00 FF 
202b0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
202b4     0B 00 00 FF 
202b8     C8 E4 05 F1 | 	add	objptr, ##5832
202bc     18 1A 62 FD | 	getqx	arg05
202c0     0D 15 02 F1 | 	add	arg02, arg05
202c4     58 07 B0 FD | 	call	#_psram_spin2_write
202c8     0B 00 00 FF 
202cc     CC E4 85 F1 | 	sub	objptr, ##5836
202d0     01 1E 06 F1 | 	add	local01, #1
202d4     24 1E 56 F2 | 	cmps	local01, #36 wc
202d8     50 FF 9F CD |  if_b	jmp	#LR__2593
202dc                 | ' repeat i from 0 to timings[7]-1
202dc     00 1E 06 F6 | 	mov	local01, #0
202e0     10 00 00 FF 
202e4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
202e8     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
202ec     10 00 00 FF 
202f0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
202f4     01 20 86 F1 | 	sub	local02, #1
202f8     00 20 56 F2 | 	cmps	local02, #0 wc
202fc     01 22 86 F6 | 	negc	local03, #1
20300     11 21 02 F1 | 	add	local02, local03
20304                 | LR__2594
20304                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
20304     04 E4 05 F1 | 	add	objptr, #4
20308     F2 12 02 FB | 	rdlong	arg01, objptr
2030c     10 00 00 FF 
20310     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20314     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
20318     10 00 00 FF 
2031c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20320     0D 19 02 F6 | 	mov	arg04, arg05
20324     03 18 66 F0 | 	shl	arg04, #3
20328     0D 19 02 F1 | 	add	arg04, arg05
2032c     02 18 66 F0 | 	shl	arg04, #2
20330     0F 19 02 F1 | 	add	arg04, local01
20334     0C 13 02 F1 | 	add	arg01, arg04
20338     20 14 06 F6 | 	mov	arg02, #32
2033c     01 16 06 F6 | 	mov	arg03, #1
20340     00 18 06 F6 | 	mov	arg04, #0
20344     01 1A 06 F6 | 	mov	arg05, #1
20348     0B 00 00 FF 
2034c     C8 E4 05 F1 | 	add	objptr, ##5832
20350     68 07 B0 FD | 	call	#_psram_spin2_fill
20354     0B 00 00 FF 
20358     CC E4 85 F1 | 	sub	objptr, ##5836
2035c     11 1F 02 F1 | 	add	local01, local03
20360     10 1F 0A F2 | 	cmp	local01, local02 wz
20364     9C FF 9F 5D |  if_ne	jmp	#LR__2594
20368     A7 F0 03 F6 | 	mov	ptra, fp
2036c     B2 00 A0 FD | 	call	#popregs_
20370                 | _hg010b_spin2_scrollup2_ret
20370     2D 00 64 FD | 	ret
20374                 | 
20374                 | '  
20374                 | ' ''----------- Scroll the screen one line down 
20374                 | ' 
20374                 | ' pub scrolldown(start=0) | i
20374                 | _hg010b_spin2_scrolldown
20374     05 4A 05 F6 | 	mov	COUNT_, #5
20378     A8 00 A0 FD | 	call	#pushregs_
2037c     09 1F 02 F6 | 	mov	local01, arg01
20380                 | ' 
20380                 | ' repeat i from 579 to (start*16)+4
20380     01 00 00 FF 
20384     43 20 06 F6 | 	mov	local02, ##579
20388     0F 23 02 F6 | 	mov	local03, local01
2038c     04 22 66 F0 | 	shl	local03, #4
20390     04 22 06 F1 | 	add	local03, #4
20394     01 00 00 FF 
20398     43 22 56 F2 | 	cmps	local03, ##579 wc
2039c     01 24 86 F6 | 	negc	local04, #1
203a0     12 27 02 F6 | 	mov	local05, local04
203a4     12 23 02 F1 | 	add	local03, local04
203a8                 | LR__2600
203a8     F9 E4 05 F1 | 	add	objptr, #249
203ac     F2 24 02 FB | 	rdlong	local04, objptr
203b0     1C E4 85 F1 | 	sub	objptr, #28
203b4     F2 14 02 FB | 	rdlong	arg02, objptr
203b8     10 1B 02 F6 | 	mov	arg05, local02
203bc     02 1A 66 F0 | 	shl	arg05, #2
203c0     14 E4 05 F1 | 	add	objptr, #20
203c4     F2 16 02 FB | 	rdlong	arg03, objptr
203c8     0B 1B 02 FD | 	qmul	arg05, arg03
203cc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
203cc     F6 03 00 FF 
203d0     00 12 06 F6 | 	mov	arg01, ##519168
203d4     12 13 82 F1 | 	sub	arg01, local04
203d8     02 16 66 F0 | 	shl	arg03, #2
203dc     0A 00 00 FF 
203e0     DB E5 05 F1 | 	add	objptr, ##5595
203e4     18 24 62 FD | 	getqx	local04
203e8     12 15 02 F1 | 	add	arg02, local04
203ec     94 05 B0 FD | 	call	#_psram_spin2_read1
203f0     0A 00 00 FF 
203f4     D3 E5 85 F1 | 	sub	objptr, ##5587
203f8     F2 24 02 FB | 	rdlong	local04, objptr
203fc     1C E4 85 F1 | 	sub	objptr, #28
20400     F2 14 02 FB | 	rdlong	arg02, objptr
20404     10 1B 02 F6 | 	mov	arg05, local02
20408     10 1A 06 F1 | 	add	arg05, #16
2040c     02 1A 66 F0 | 	shl	arg05, #2
20410     14 E4 05 F1 | 	add	objptr, #20
20414     F2 16 02 FB | 	rdlong	arg03, objptr
20418     0B 1B 02 FD | 	qmul	arg05, arg03
2041c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2041c     F6 03 00 FF 
20420     00 12 06 F6 | 	mov	arg01, ##519168
20424     12 13 82 F1 | 	sub	arg01, local04
20428     02 16 66 F0 | 	shl	arg03, #2
2042c     0A 00 00 FF 
20430     DB E5 05 F1 | 	add	objptr, ##5595
20434     18 24 62 FD | 	getqx	local04
20438     12 15 02 F1 | 	add	arg02, local04
2043c     E0 05 B0 FD | 	call	#_psram_spin2_write
20440     0B 00 00 FF 
20444     CC E4 85 F1 | 	sub	objptr, ##5836
20448     13 21 02 F1 | 	add	local02, local05
2044c     11 21 0A F2 | 	cmp	local02, local03 wz
20450     54 FF 9F 5D |  if_ne	jmp	#LR__2600
20454                 | ' 
20454                 | ' repeat i from (start*16)+4 to (start*16)+19
20454     0F 21 02 F6 | 	mov	local02, local01
20458     04 20 66 F0 | 	shl	local02, #4
2045c     04 20 06 F1 | 	add	local02, #4
20460     0F 27 02 F6 | 	mov	local05, local01
20464     04 26 66 F0 | 	shl	local05, #4
20468     13 26 06 F1 | 	add	local05, #19
2046c     0F 25 02 F6 | 	mov	local04, local01
20470     04 24 66 F0 | 	shl	local04, #4
20474     04 24 06 F1 | 	add	local04, #4
20478     12 27 52 F2 | 	cmps	local05, local04 wc
2047c     01 24 86 F6 | 	negc	local04, #1
20480     12 23 02 F6 | 	mov	local03, local04
20484     12 27 02 F1 | 	add	local05, local04
20488                 | LR__2601
20488                 | '    fastline(0,1023,i,write_background)    
20488     45 E4 05 F1 | 	add	objptr, #69
2048c     F2 18 02 FB | 	rdlong	arg04, objptr
20490     45 E4 85 F1 | 	sub	objptr, #69
20494     00 12 06 F6 | 	mov	arg01, #0
20498     09 14 CE F9 | 	bmask	arg02, #9
2049c     10 17 02 F6 | 	mov	arg03, local02
204a0     08 ED BF FD | 	call	#_hg010b_spin2_fastline
204a4     11 21 02 F1 | 	add	local02, local03
204a8     13 21 0A F2 | 	cmp	local02, local05 wz
204ac     D8 FF 9F 5D |  if_ne	jmp	#LR__2601
204b0                 | '    
204b0                 | ' repeat i from 35 to start
204b0     23 20 06 F6 | 	mov	local02, #35
204b4     23 1E 56 F2 | 	cmps	local01, #35 wc
204b8     01 24 86 F6 | 	negc	local04, #1
204bc     0F 27 02 F6 | 	mov	local05, local01
204c0     12 27 02 F1 | 	add	local05, local04
204c4                 | LR__2602
204c4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
204c4     F6 03 00 FF 
204c8     00 12 06 F6 | 	mov	arg01, ##519168
204cc     F9 E4 05 F1 | 	add	objptr, #249
204d0     F2 22 02 FB | 	rdlong	local03, objptr
204d4     11 13 82 F1 | 	sub	arg01, local03
204d8     F5 E4 85 F1 | 	sub	objptr, #245
204dc     F2 14 02 FB | 	rdlong	arg02, objptr
204e0     10 23 02 F6 | 	mov	local03, local02
204e4     07 22 66 F0 | 	shl	local03, #7
204e8     11 15 02 F1 | 	add	arg02, local03
204ec     80 16 06 F6 | 	mov	arg03, #128
204f0     0B 00 00 FF 
204f4     C8 E4 05 F1 | 	add	objptr, ##5832
204f8     88 04 B0 FD | 	call	#_psram_spin2_read1
204fc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
204fc     F6 03 00 FF 
20500     00 12 06 F6 | 	mov	arg01, ##519168
20504     0A 00 00 FF 
20508     D3 E5 85 F1 | 	sub	objptr, ##5587
2050c     F2 22 02 FB | 	rdlong	local03, objptr
20510     11 13 82 F1 | 	sub	arg01, local03
20514     F5 E4 85 F1 | 	sub	objptr, #245
20518     F2 14 02 FB | 	rdlong	arg02, objptr
2051c     10 23 02 F6 | 	mov	local03, local02
20520     01 22 06 F1 | 	add	local03, #1
20524     07 22 66 F0 | 	shl	local03, #7
20528     11 15 02 F1 | 	add	arg02, local03
2052c     80 16 06 F6 | 	mov	arg03, #128
20530     0B 00 00 FF 
20534     C8 E4 05 F1 | 	add	objptr, ##5832
20538     E4 04 B0 FD | 	call	#_psram_spin2_write
2053c     0B 00 00 FF 
20540     CC E4 85 F1 | 	sub	objptr, ##5836
20544     12 21 02 F1 | 	add	local02, local04
20548     13 21 0A F2 | 	cmp	local02, local05 wz
2054c     74 FF 9F 5D |  if_ne	jmp	#LR__2602
20550                 | ' repeat i from 0 to 127
20550     00 20 06 F6 | 	mov	local02, #0
20554                 | LR__2603
20554                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
20554     04 E4 05 F1 | 	add	objptr, #4
20558     F2 12 02 FB | 	rdlong	arg01, objptr
2055c     0F 27 02 F6 | 	mov	local05, local01
20560     07 26 66 F0 | 	shl	local05, #7
20564     13 13 02 F1 | 	add	arg01, local05
20568     10 13 02 F1 | 	add	arg01, local02
2056c     20 14 06 F6 | 	mov	arg02, #32
20570     01 16 06 F6 | 	mov	arg03, #1
20574     00 18 06 F6 | 	mov	arg04, #0
20578     01 1A 06 F6 | 	mov	arg05, #1
2057c     0B 00 00 FF 
20580     C8 E4 05 F1 | 	add	objptr, ##5832
20584     34 05 B0 FD | 	call	#_psram_spin2_fill
20588     0B 00 00 FF 
2058c     CC E4 85 F1 | 	sub	objptr, ##5836
20590     01 20 06 F1 | 	add	local02, #1
20594     80 20 56 F2 | 	cmps	local02, #128 wc
20598     B8 FF 9F CD |  if_b	jmp	#LR__2603
2059c     A7 F0 03 F6 | 	mov	ptra, fp
205a0     B2 00 A0 FD | 	call	#popregs_
205a4                 | _hg010b_spin2_scrolldown_ret
205a4     2D 00 64 FD | 	ret
205a8                 | 
205a8                 | ' 
205a8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
205a8                 | ' 
205a8                 | ' pub crlf()
205a8                 | _hg010b_spin2_crlf
205a8                 | ' 
205a8                 | ' cursor_x:=leading_spaces*2
205a8     01 00 00 FF 
205ac     B6 E4 05 F1 | 	add	objptr, ##694
205b0     F2 16 02 FB | 	rdlong	arg03, objptr
205b4     01 16 66 F0 | 	shl	arg03, #1
205b8     01 00 00 FF 
205bc     7A E4 85 F1 | 	sub	objptr, ##634
205c0     F2 16 52 FC | 	wrword	arg03, objptr
205c4                 | ' cursor_y+=1
205c4     02 E4 05 F1 | 	add	objptr, #2
205c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
205cc     01 16 06 F1 | 	add	arg03, #1
205d0     F2 16 42 FC | 	wrbyte	arg03, objptr
205d4                 | ' if cursor_y>st_lines-1
205d4     C3 E4 05 F1 | 	add	objptr, #195
205d8     F2 16 02 FB | 	rdlong	arg03, objptr
205dc     01 16 86 F1 | 	sub	arg03, #1
205e0     C3 E4 85 F1 | 	sub	objptr, #195
205e4     F2 14 C2 FA | 	rdbyte	arg02, objptr
205e8     3E E4 85 F1 | 	sub	objptr, #62
205ec     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
205f0     2C 00 90 ED |  if_be	jmp	#LR__2610
205f4                 | '   scrollup2()
205f4     00 12 06 F6 | 	mov	arg01, #0
205f8     01 00 00 FF 
205fc     58 14 06 F6 | 	mov	arg02, ##600
20600     10 16 06 F6 | 	mov	arg03, #16
20604     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
20608                 | '   cursor_y:=st_lines-1
20608     01 E5 05 F1 | 	add	objptr, #257
2060c     F2 16 02 FB | 	rdlong	arg03, objptr
20610     01 16 86 F1 | 	sub	arg03, #1
20614     C3 E4 85 F1 | 	sub	objptr, #195
20618     F2 16 42 FC | 	wrbyte	arg03, objptr
2061c     3E E4 85 F1 | 	sub	objptr, #62
20620                 | LR__2610
20620                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
20620     3C E4 05 F1 | 	add	objptr, #60
20624     F2 14 E2 FA | 	rdword	arg02, objptr
20628     02 14 66 F0 | 	shl	arg02, #2
2062c     02 E4 05 F1 | 	add	objptr, #2
20630     F2 16 C2 FA | 	rdbyte	arg03, objptr
20634     3E E4 85 F1 | 	sub	objptr, #62
20638     04 16 66 F0 | 	shl	arg03, #4
2063c     04 16 06 F1 | 	add	arg03, #4
20640     11 12 06 F6 | 	mov	arg01, #17
20644     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
20648                 | _hg010b_spin2_crlf_ret
20648     2D 00 64 FD | 	ret
2064c                 | 
2064c                 | ' 
2064c                 | ' 
2064c                 | ' '*************************************************************************
2064c                 | ' '                                                                        *
2064c                 | ' '  Conversions                                                           *
2064c                 | ' '                                                                        *
2064c                 | ' '*************************************************************************
2064c                 | ' 
2064c                 | ' ''---------- Convert a integer to dec string, return a pointer
2064c                 | ' 
2064c                 | ' pub inttostr(i):result |q,pos,k,j
2064c                 | _hg010b_spin2_inttostr
2064c     03 4A 05 F6 | 	mov	COUNT_, #3
20650     A8 00 A0 FD | 	call	#pushregs_
20654     09 1F 0A F6 | 	mov	local01, arg01 wz
20658                 | ' 
20658                 | ' j:=i
20658                 | ' pos:=10
20658     0A 20 06 F6 | 	mov	local02, #10
2065c                 | ' k:=0
2065c     00 22 06 F6 | 	mov	local03, #0
20660                 | ' 
20660                 | ' if (j==0)
20660     18 00 90 5D |  if_ne	jmp	#LR__2620
20664                 | '   n_string[0]:=48
20664     4D E4 05 F1 | 	add	objptr, #77
20668     F2 60 48 FC | 	wrbyte	#48, objptr
2066c                 | '   n_string[1]:=0
2066c     01 E4 05 F1 | 	add	objptr, #1
20670     F2 00 48 FC | 	wrbyte	#0, objptr
20674     4E E4 85 F1 | 	sub	objptr, #78
20678     C4 00 90 FD | 	jmp	#LR__2627
2067c                 | LR__2620
2067c                 | ' 
2067c                 | ' else
2067c                 | '   if (j<0)
2067c     0F 1F 52 F6 | 	abs	local01, local01 wc
20680                 | '     j:=0-j
20680                 | '     k:=45
20680     2D 22 06 C6 |  if_b	mov	local03, #45
20684                 | ' 
20684                 | '   n_string[11]:=0
20684     58 E4 05 F1 | 	add	objptr, #88
20688     F2 00 48 FC | 	wrbyte	#0, objptr
2068c     58 E4 85 F1 | 	sub	objptr, #88
20690     97 24 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
20694                 | '   repeat while (pos>-1)
20694                 | LR__2621
20694     00 20 56 F2 | 	cmps	local02, #0 wc
20698     40 00 90 CD |  if_b	jmp	#LR__2623
2069c     0F FB 51 F6 | 	abs	result1, local01 wc
206a0     0A FA 15 FD | 	qdiv	result1, #10
206a4                 | '     q:=j//10
206a4     19 FA 61 FD | 	getqy	result1
206a8     FD FA 81 F6 | 	negc	result1, result1
206ac     0F 1F 52 F6 | 	abs	local01, local01 wc
206b0     0A 1E 16 FD | 	qdiv	local01, #10
206b4                 | '     q:=48+q
206b4     30 FA 05 F1 | 	add	result1, #48
206b8                 | '     n_string[pos]:=q
206b8     10 1F 02 F6 | 	mov	local01, local02
206bc     4D E4 05 F1 | 	add	objptr, #77
206c0     F2 1E 02 F1 | 	add	local01, objptr
206c4     0F FB 41 FC | 	wrbyte	result1, local01
206c8                 | '     j:=j/10
206c8     4D E4 85 F1 | 	sub	objptr, #77
206cc                 | '     pos-=1
206cc     01 20 86 F1 | 	sub	local02, #1
206d0     18 1E 62 FD | 	getqx	local01
206d4     0F 1F 82 F6 | 	negc	local01, local01
206d8     B8 FF 9F FD | 	jmp	#LR__2621
206dc                 | LR__2622
206dc                 | LR__2623
206dc                 | '   repeat while n_string[0]==48
206dc                 | LR__2624
206dc     4D E4 05 F1 | 	add	objptr, #77
206e0     F2 16 C2 FA | 	rdbyte	arg03, objptr
206e4     4D E4 85 F1 | 	sub	objptr, #77
206e8     30 16 0E F2 | 	cmp	arg03, #48 wz
206ec     20 00 90 5D |  if_ne	jmp	#LR__2625
206f0                 | '     bytemove(@n_string,@n_string+1,12)
206f0     4D E4 05 F1 | 	add	objptr, #77
206f4     F2 12 02 F6 | 	mov	arg01, objptr
206f8     F2 14 02 F6 | 	mov	arg02, objptr
206fc     4D E4 85 F1 | 	sub	objptr, #77
20700     01 14 06 F1 | 	add	arg02, #1
20704     0C 16 06 F6 | 	mov	arg03, #12
20708     D8 0D B0 FD | 	call	#__system____builtin_memmove
2070c     CC FF 9F FD | 	jmp	#LR__2624
20710                 | LR__2625
20710                 | ' 
20710                 | '   if k==45
20710     2D 22 0E F2 | 	cmp	local03, #45 wz
20714     28 00 90 5D |  if_ne	jmp	#LR__2626
20718                 | '      bytemove(@n_string+1,@n_string,12)
20718     4D E4 05 F1 | 	add	objptr, #77
2071c     F2 12 02 F6 | 	mov	arg01, objptr
20720     01 12 06 F1 | 	add	arg01, #1
20724     F2 14 02 F6 | 	mov	arg02, objptr
20728     4D E4 85 F1 | 	sub	objptr, #77
2072c     0C 16 06 F6 | 	mov	arg03, #12
20730     B0 0D B0 FD | 	call	#__system____builtin_memmove
20734                 | '      n_string[0]:=k
20734     4D E4 05 F1 | 	add	objptr, #77
20738     F2 22 42 FC | 	wrbyte	local03, objptr
2073c     4D E4 85 F1 | 	sub	objptr, #77
20740                 | LR__2626
20740                 | LR__2627
20740                 | ' 
20740                 | ' q:=@n_string
20740     4D E4 05 F1 | 	add	objptr, #77
20744     F2 FA 01 F6 | 	mov	result1, objptr
20748     4D E4 85 F1 | 	sub	objptr, #77
2074c                 | ' return q
2074c     A7 F0 03 F6 | 	mov	ptra, fp
20750     B2 00 A0 FD | 	call	#popregs_
20754                 | _hg010b_spin2_inttostr_ret
20754     2D 00 64 FD | 	ret
20758                 | 
20758                 | ' 
20758                 | ' '..............................................................................
20758                 | ' 
20758                 | ' {{
20758                 | ' }}
20758                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
20758                 | _psram_spin2_startx
20758     04 4A 05 F6 | 	mov	COUNT_, #4
2075c     A8 00 A0 FD | 	call	#pushregs_
20760     09 1F 02 F6 | 	mov	local01, arg01
20764     0B 21 02 F6 | 	mov	local02, arg03
20768     0C 23 02 F6 | 	mov	local03, arg04
2076c                 | '     stop() ' restart driver if required
2076c     54 01 B0 FD | 	call	#_psram_spin2_stop
20770     00 1E 0E F2 | 	cmp	local01, #0 wz
20774     14 1E 06 AB |  if_e	rdlong	local01, #20
20778     0F 15 52 F6 | 	abs	arg02, local01 wc
2077c     A1 07 00 FF 
20780     40 14 16 FD | 	qdiv	arg02, ##1000000
20784                 | ' 
20784                 | '     ' use current frequency if none specified
20784                 | ' 
20784                 | '     if freq == 0 
20784                 | '         freq := clkfreq 
20784                 | ' 
20784                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
20784                 | ' 
20784                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
20784                 | '     if burst < 0
20784                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
20784     18 14 62 FD | 	getqx	arg02
20788     0A 19 82 F6 | 	negc	arg04, arg02
2078c     03 18 66 F0 | 	shl	arg04, #3
20790     84 18 86 F1 | 	sub	arg04, #132
20794     04 18 46 F0 | 	shr	arg04, #4
20798     04 18 66 F0 | 	shl	arg04, #4
2079c     00 18 56 F2 | 	cmps	arg04, #0 wc
207a0     0E FA 65 C6 |  if_b	neg	result1, #14
207a4     10 01 90 CD |  if_b	jmp	#LR__2633
207a8                 | ' 
207a8                 | '     ' compute the input delay
207a8                 | ' 
207a8                 | '     if delay <= 0
207a8     01 20 56 F2 | 	cmps	local02, #1 wc
207ac     10 00 90 3D |  if_ae	jmp	#LR__2630
207b0                 | '         delay := lookupDelay(freq)
207b0     0F 13 02 F6 | 	mov	arg01, local01
207b4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
207b8     FD 20 02 F6 | 	mov	local02, result1
207bc     04 00 90 FD | 	jmp	#LR__2631
207c0                 | LR__2630
207c0                 | '     else
207c0                 | '         delay <#= $f ' limit to 15
207c0     0F 20 66 F3 | 	fles	local02, #15
207c4                 | LR__2631
207c4                 | ' 
207c4                 | '     ' create our lock
207c4                 | ' 
207c4                 | '     driverlock := LOCKNEW()  
207c4     00 FA 05 F6 | 	mov	result1, #0
207c8     04 FA 61 FD | 	locknew	result1
207cc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
207d0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
207d4                 | '     if driverlock == -1
207d4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
207d8     FF FF 7F FF 
207dc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
207e0                 | '         return ERR_NO_LOCK
207e0     1A FA 65 A6 |  if_e	neg	result1, #26
207e4     D0 00 90 AD |  if_e	jmp	#LR__2633
207e8                 | ' 
207e8                 | '     ' patch in the proper data and HUB addresses to the startup structure
207e8                 | ' 
207e8                 | '     long[@startupData][0]:=clkfreq
207e8     14 1E 06 FB | 	rdlong	local01, #20
207ec     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
207f0     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
207f4                 | ' '    long[@startupData][1]:=$1000_0000
207f4                 | '     long[@startupData][5]:=@deviceData
207f4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
207f8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
207fc     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
20800     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
20804     14 14 06 F1 | 	add	arg02, #20
20808     0A 1F 62 FC | 	wrlong	local01, arg02
2080c                 | '     long[@startupData][6]:=@qosData
2080c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
20810     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20814     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20818     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
2081c     18 14 06 F1 | 	add	arg02, #24
20820     0A 1F 62 FC | 	wrlong	local01, arg02
20824                 | '     long[@startupData][7]:=$7FF00
20824     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20828     1C 1E 06 F1 | 	add	local01, #28
2082c     FF 03 80 FF 
20830     0F 01 6A FC | 	wrlong	##524032, local01
20834                 | ' 
20834                 | '     ' setup some default bank and QoS parameter values
20834                 | ' 
20834                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
20834     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
20838     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
2083c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
20840     10 18 66 F0 | 	shl	arg04, #16
20844     0C 20 66 F0 | 	shl	local02, #12
20848     10 19 42 F5 | 	or	arg04, local02
2084c     18 18 46 F5 | 	or	arg04, #24
20850     0C 15 02 F6 | 	mov	arg02, arg04
20854     02 16 06 F6 | 	mov	arg03, #2
20858     A0 00 A0 FD | 	call	#\builtin_longfill_
2085c                 | '     longfill(@qosData, $FFFF0000, 8)
2085c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20860     07 16 06 F6 | 	mov	arg03, #7
20864     28 16 62 FD | 	setq	arg03
20868     80 FF FF FF 
2086c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
20870                 | ' 
20870                 | '     ' get the address of the PSRAM memory driver so we can start it
20870                 | ' 
20870                 | '     driverAddr:= driver.getDriverAddr()
20870                 | '     return @driver_start
20870     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
20874     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
20878     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2087c                 | ' 
2087c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2087c                 | ' 
2087c                 | '     if desiredcog < 0
2087c     00 22 56 F2 | 	cmps	local03, #0 wc
20880                 | '         desiredcog := NEWCOG
20880     10 22 06 C6 |  if_b	mov	local03, #16
20884                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
20884     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20888     11 25 02 F6 | 	mov	local04, local03
2088c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
20890     0A 25 F2 FC | 	coginit	local04, arg02 wc
20894     01 24 66 C6 |  if_b	neg	local04, #1
20898     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2089c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
208a0                 | '     repeat until long[@startupData] == 0 
208a0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
208a4                 | LR__2632
208a4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
208a8     F8 FF 9F 5D |  if_ne	jmp	#LR__2632
208ac                 | ' 
208ac                 | '     return drivercog
208ac     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
208b0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
208b4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
208b8                 | LR__2633
208b8     A7 F0 03 F6 | 	mov	ptra, fp
208bc     B2 00 A0 FD | 	call	#popregs_
208c0                 | _psram_spin2_startx_ret
208c0     2D 00 64 FD | 	ret
208c4                 | 
208c4                 | ' 
208c4                 | ' '..............................................................................
208c4                 | ' 
208c4                 | ' {{
208c4                 | ' }}
208c4                 | ' PUB stop() : i
208c4                 | _psram_spin2_stop
208c4     00 00 06 F6 | 	mov	_var01, #0
208c8                 | '     if drivercog <> -1
208c8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
208cc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
208d0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
208d4     FF FF 7F FF 
208d8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
208dc     70 00 90 AD |  if_e	jmp	#LR__2643
208e0                 | '         cogstop(drivercog) ' a rather brutal stop
208e0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
208e4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
208e8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
208ec     03 12 62 FD | 	cogstop	arg01
208f0     97 26 48 FB | 	callpa	#(@LR__2642-@LR__2640)>>2,fcache_load_ptr_
208f4                 | '         repeat i from 0 to 7
208f4                 | LR__2640
208f4                 | '             if long[$7FF00][i*3] < 0
208f4     00 FB 01 F6 | 	mov	result1, _var01
208f8     01 FA 65 F0 | 	shl	result1, #1
208fc     00 FB 01 F1 | 	add	result1, _var01
20900     02 FA 65 F0 | 	shl	result1, #2
20904     FF 03 00 FF 
20908     00 FB 05 F1 | 	add	result1, ##524032
2090c     FD FA 01 FB | 	rdlong	result1, result1
20910     00 FA 55 F2 | 	cmps	result1, #0 wc
20914     1C 00 90 3D |  if_ae	jmp	#LR__2641
20918                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
20918     00 FB 01 F6 | 	mov	result1, _var01
2091c     01 FA 65 F0 | 	shl	result1, #1
20920     00 FB 01 F1 | 	add	result1, _var01
20924     02 FA 65 F0 | 	shl	result1, #2
20928     FF 03 00 FF 
2092c     00 FB 05 F1 | 	add	result1, ##524032
20930     FD 20 68 FC | 	wrlong	#16, result1
20934                 | LR__2641
20934     01 00 06 F1 | 	add	_var01, #1
20938     08 00 56 F2 | 	cmps	_var01, #8 wc
2093c     B4 FF 9F CD |  if_b	jmp	#LR__2640
20940                 | LR__2642
20940                 | '         drivercog := -1
20940     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20944     FF FF FF FF 
20948     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2094c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20950                 | LR__2643
20950                 | '     if driverlock <> -1
20950     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20954     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20958     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2095c     FF FF 7F FF 
20960     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20964                 | '         LOCKRET(driverlock)
20964     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
20968     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
2096c     05 12 62 5D |  if_ne	lockret	arg01
20970                 | '         driverlock := -1
20970     FF FF FF 5F 
20974     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
20978     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2097c     00 FB 01 F6 | 	mov	result1, _var01
20980                 | _psram_spin2_stop_ret
20980     2D 00 64 FD | 	ret
20984                 | 
20984                 | ' 
20984                 | ' '..............................................................................
20984                 | ' 
20984                 | ' {{
20984                 | ' }}
20984                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
20984                 | _psram_spin2_read1
20984                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
20984                 | '     if drivercog == -1 ' driver must be running
20984     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20988     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2098c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20990     FF FF 7F FF 
20994     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
20998                 | '         return ERR_INACTIVE
20998     0F FA 65 A6 |  if_e	neg	result1, #15
2099c     7C 00 90 AD |  if_e	jmp	#LR__2651
209a0                 | '     if count == 0 ' don't even bother reading
209a0     00 16 0E F2 | 	cmp	arg03, #0 wz
209a4                 | '         return 0
209a4     00 FA 05 A6 |  if_e	mov	result1, #0
209a8     70 00 90 AD |  if_e	jmp	#LR__2651
209ac                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
209ac     00 FA 05 F6 | 	mov	result1, #0
209b0     01 FA 61 FD | 	cogid	result1
209b4     FD 00 02 F6 | 	mov	_var01, result1
209b8     01 00 66 F0 | 	shl	_var01, #1
209bc     FD 00 02 F1 | 	add	_var01, result1
209c0     02 00 66 F0 | 	shl	_var01, #2
209c4     FF 03 00 FF 
209c8     00 03 06 F6 | 	mov	_var02, ##524032
209cc     00 03 02 F1 | 	add	_var02, _var01
209d0                 | '     if long[mailbox] < 0
209d0     01 01 02 FB | 	rdlong	_var01, _var02
209d4     00 00 56 F2 | 	cmps	_var01, #0 wc
209d8                 | '         return ERR_MAILBOX_BUSY
209d8     1C FA 65 C6 |  if_b	neg	result1, #28
209dc     3C 00 90 CD |  if_b	jmp	#LR__2651
209e0                 | '     long[mailbox][2] := count
209e0     08 02 06 F1 | 	add	_var02, #8
209e4     01 17 62 FC | 	wrlong	arg03, _var02
209e8                 | '     long[mailbox][1] := dstHubAddr
209e8     04 02 86 F1 | 	sub	_var02, #4
209ec     01 13 62 FC | 	wrlong	arg01, _var02
209f0     04 02 86 F1 | 	sub	_var02, #4
209f4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
209f4     0A 05 02 F6 | 	mov	_var03, arg02
209f8     D9 04 06 F4 | 	bitl	_var03, #217
209fc     00 00 58 FF 
20a00     00 00 06 F6 | 	mov	_var01, ##-1342177280
20a04     02 01 02 F1 | 	add	_var01, _var03
20a08     01 01 62 FC | 	wrlong	_var01, _var02
20a0c                 | '     repeat
20a0c                 | LR__2650
20a0c                 | '         result := long[mailbox]    
20a0c     01 05 02 FB | 	rdlong	_var03, _var02
20a10     00 04 56 F2 | 	cmps	_var03, #0 wc
20a14     F4 FF 9F CD |  if_b	jmp	#LR__2650
20a18                 | '     while result < 0   
20a18                 | '     return -result                       'return success or error
20a18     02 FB 61 F6 | 	neg	result1, _var03
20a1c                 | LR__2651
20a1c                 | _psram_spin2_read1_ret
20a1c     2D 00 64 FD | 	ret
20a20                 | 
20a20                 | ' 
20a20                 | ' '..............................................................................
20a20                 | ' 
20a20                 | ' {{
20a20                 | ' }}
20a20                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
20a20                 | _psram_spin2_write
20a20                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
20a20                 | '     if drivercog == -1 ' driver must be running
20a20     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20a24     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
20a28     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20a2c     FF FF 7F FF 
20a30     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
20a34                 | '         return ERR_INACTIVE
20a34     0F FA 65 A6 |  if_e	neg	result1, #15
20a38     7C 00 90 AD |  if_e	jmp	#LR__2661
20a3c                 | '     if count == 0 ' don't even bother writing
20a3c     00 16 0E F2 | 	cmp	arg03, #0 wz
20a40                 | '         return 0
20a40     00 FA 05 A6 |  if_e	mov	result1, #0
20a44     70 00 90 AD |  if_e	jmp	#LR__2661
20a48                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
20a48     00 FA 05 F6 | 	mov	result1, #0
20a4c     01 FA 61 FD | 	cogid	result1
20a50     FD 00 02 F6 | 	mov	_var01, result1
20a54     01 00 66 F0 | 	shl	_var01, #1
20a58     FD 00 02 F1 | 	add	_var01, result1
20a5c     02 00 66 F0 | 	shl	_var01, #2
20a60     FF 03 00 FF 
20a64     00 03 06 F6 | 	mov	_var02, ##524032
20a68     00 03 02 F1 | 	add	_var02, _var01
20a6c                 | '     if long[mailbox] < 0
20a6c     01 01 02 FB | 	rdlong	_var01, _var02
20a70     00 00 56 F2 | 	cmps	_var01, #0 wc
20a74                 | '         return ERR_MAILBOX_BUSY
20a74     1C FA 65 C6 |  if_b	neg	result1, #28
20a78     3C 00 90 CD |  if_b	jmp	#LR__2661
20a7c                 | '     long[mailbox][2] := count
20a7c     08 02 06 F1 | 	add	_var02, #8
20a80     01 17 62 FC | 	wrlong	arg03, _var02
20a84                 | '     long[mailbox][1] := srcHubAddr
20a84     04 02 86 F1 | 	sub	_var02, #4
20a88     01 13 62 FC | 	wrlong	arg01, _var02
20a8c     04 02 86 F1 | 	sub	_var02, #4
20a90                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
20a90     0A 05 02 F6 | 	mov	_var03, arg02
20a94     D9 04 06 F4 | 	bitl	_var03, #217
20a98     00 00 78 FF 
20a9c     00 00 06 F6 | 	mov	_var01, ##-268435456
20aa0     02 01 02 F1 | 	add	_var01, _var03
20aa4     01 01 62 FC | 	wrlong	_var01, _var02
20aa8                 | '     repeat
20aa8                 | LR__2660
20aa8                 | '         result := long[mailbox]    
20aa8     01 05 02 FB | 	rdlong	_var03, _var02
20aac     00 04 56 F2 | 	cmps	_var03, #0 wc
20ab0     F4 FF 9F CD |  if_b	jmp	#LR__2660
20ab4                 | '     while result < 0   
20ab4                 | '     return -result                       'return success or error
20ab4     02 FB 61 F6 | 	neg	result1, _var03
20ab8                 | LR__2661
20ab8                 | _psram_spin2_write_ret
20ab8     2D 00 64 FD | 	ret
20abc                 | 
20abc                 | ' 
20abc                 | ' ' generalized fill
20abc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
20abc                 | _psram_spin2_fill
20abc     09 01 02 F6 | 	mov	_var01, arg01
20ac0     0A 03 02 F6 | 	mov	_var02, arg02
20ac4     0B 05 02 F6 | 	mov	_var03, arg03
20ac8     0D 07 02 F6 | 	mov	_var04, arg05
20acc                 | '     case datasize 
20acc     01 06 86 F1 | 	sub	_var04, #1
20ad0     04 06 26 F3 | 	fle	_var04, #4
20ad4     30 06 62 FD | 	jmprel	_var04
20ad8                 | LR__2670
20ad8     10 00 90 FD | 	jmp	#LR__2671
20adc     18 00 90 FD | 	jmp	#LR__2672
20ae0     2C 00 90 FD | 	jmp	#LR__2674
20ae4     1C 00 90 FD | 	jmp	#LR__2673
20ae8     24 00 90 FD | 	jmp	#LR__2674
20aec                 | LR__2671
20aec                 | '         1: req := driver.R_WRITEBYTE
20aec     00 00 60 FF 
20af0     00 08 06 F6 | 	mov	_var05, ##-1073741824
20af4     20 00 90 FD | 	jmp	#LR__2675
20af8                 | LR__2672
20af8                 | '         2: req := driver.R_WRITEWORD
20af8     00 00 68 FF 
20afc     00 08 06 F6 | 	mov	_var05, ##-805306368
20b00     14 00 90 FD | 	jmp	#LR__2675
20b04                 | LR__2673
20b04                 | '         4: req := driver.R_WRITELONG
20b04     00 00 70 FF 
20b08     00 08 06 F6 | 	mov	_var05, ##-536870912
20b0c     08 00 90 FD | 	jmp	#LR__2675
20b10                 | LR__2674
20b10                 | '         other : return ERR_INVALID
20b10     06 FA 65 F6 | 	neg	result1, #6
20b14     94 00 90 FD | 	jmp	#LR__2677
20b18                 | LR__2675
20b18                 | '     if count == 0   ' nothing to do
20b18     00 04 0E F2 | 	cmp	_var03, #0 wz
20b1c                 | '         return 0
20b1c     00 FA 05 A6 |  if_e	mov	result1, #0
20b20     88 00 90 AD |  if_e	jmp	#LR__2677
20b24                 | '     if drivercog == -1
20b24     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20b28     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
20b2c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20b30     FF FF 7F FF 
20b34     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
20b38                 | '         return ERR_INACTIVE
20b38     0F FA 65 A6 |  if_e	neg	result1, #15
20b3c     6C 00 90 AD |  if_e	jmp	#LR__2677
20b40                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
20b40     00 FA 05 F6 | 	mov	result1, #0
20b44     01 FA 61 FD | 	cogid	result1
20b48     FD 06 02 F6 | 	mov	_var04, result1
20b4c     01 06 66 F0 | 	shl	_var04, #1
20b50     FD 06 02 F1 | 	add	_var04, result1
20b54     02 06 66 F0 | 	shl	_var04, #2
20b58     FF 03 00 FF 
20b5c     00 0B 06 F6 | 	mov	_var06, ##524032
20b60     03 0B 02 F1 | 	add	_var06, _var04
20b64                 | '     if long[mailbox] < 0
20b64     05 07 02 FB | 	rdlong	_var04, _var06
20b68     00 06 56 F2 | 	cmps	_var04, #0 wc
20b6c                 | '         return ERR_MAILBOX_BUSY
20b6c     1C FA 65 C6 |  if_b	neg	result1, #28
20b70     38 00 90 CD |  if_b	jmp	#LR__2677
20b74                 | '     long[mailbox][2] := count
20b74     08 0A 06 F1 | 	add	_var06, #8
20b78     05 05 62 FC | 	wrlong	_var03, _var06
20b7c                 | '     long[mailbox][1] := pattern
20b7c     04 0A 86 F1 | 	sub	_var06, #4
20b80     05 03 62 FC | 	wrlong	_var02, _var06
20b84     04 0A 86 F1 | 	sub	_var06, #4
20b88                 | '     long[mailbox] := req + (addr & $1ffffff)
20b88     04 0D 02 F6 | 	mov	_var07, _var05
20b8c     00 0F 02 F6 | 	mov	_var08, _var01
20b90     D9 0E 06 F4 | 	bitl	_var08, #217
20b94     07 0D 02 F1 | 	add	_var07, _var08
20b98     05 0D 62 FC | 	wrlong	_var07, _var06
20b9c                 | '     repeat
20b9c                 | LR__2676
20b9c                 | '         r := long[mailbox]
20b9c     05 0F 02 FB | 	rdlong	_var08, _var06
20ba0     00 0E 56 F2 | 	cmps	_var08, #0 wc
20ba4     F4 FF 9F CD |  if_b	jmp	#LR__2676
20ba8                 | '     while r < 0
20ba8                 | '     return -r                  ' return 0 for success or negated error code
20ba8     07 FB 61 F6 | 	neg	result1, _var08
20bac                 | LR__2677
20bac                 | _psram_spin2_fill_ret
20bac     2D 00 64 FD | 	ret
20bb0                 | 
20bb0                 | ' 
20bb0                 | ' '..............................................................................
20bb0                 | ' 
20bb0                 | ' {{
20bb0                 | ' }}
20bb0                 | ' PUB setQos(cog, qos) : result | mailbox
20bb0                 | _psram_spin2_setQos
20bb0     09 01 02 F6 | 	mov	_var01, arg01
20bb4                 | '     if drivercog == -1 ' driver must be running
20bb4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20bb8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20bbc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20bc0     FF FF 7F FF 
20bc4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20bc8                 | '         return ERR_INACTIVE
20bc8     0F FA 65 A6 |  if_e	neg	result1, #15
20bcc     9C 00 90 AD |  if_e	jmp	#LR__2684
20bd0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
20bd0     00 00 56 F2 | 	cmps	_var01, #0 wc
20bd4     08 00 90 CD |  if_b	jmp	#LR__2680
20bd8     08 00 56 F2 | 	cmps	_var01, #8 wc
20bdc     08 00 90 CD |  if_b	jmp	#LR__2681
20be0                 | LR__2680
20be0                 | '         return ERR_INVALID
20be0     06 FA 65 F6 | 	neg	result1, #6
20be4     84 00 90 FD | 	jmp	#LR__2684
20be8                 | LR__2681
20be8                 | '     long[@qosData][cog] := qos & !$1ff
20be8     FF 15 26 F5 | 	andn	arg02, #511
20bec     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20bf0     02 00 66 F0 | 	shl	_var01, #2
20bf4     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
20bf8     00 15 62 FC | 	wrlong	arg02, _var01
20bfc                 | '     mailbox := $7FF00 + drivercog*12
20bfc     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
20c00     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
20c04     02 07 02 F6 | 	mov	_var04, _var03
20c08     01 06 66 F0 | 	shl	_var04, #1
20c0c     02 07 02 F1 | 	add	_var04, _var03
20c10     02 06 66 F0 | 	shl	_var04, #2
20c14     FF 03 00 FF 
20c18     00 09 06 F6 | 	mov	_var05, ##524032
20c1c     03 09 02 F1 | 	add	_var05, _var04
20c20                 | '     repeat until LOCKTRY(driverlock)
20c20     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
20c24                 | LR__2682
20c24     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20c28     06 12 72 FD | 	locktry	arg01 wc
20c2c     F4 FF 9F 3D |  if_ae	jmp	#LR__2682
20c30     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20c34                 | '     long[mailbox] := driver.R_CONFIG + cogid()
20c34     00 06 06 F6 | 	mov	_var04, #0
20c38     01 06 62 FD | 	cogid	_var04
20c3c     00 00 78 FF 
20c40     00 02 06 F6 | 	mov	_var02, ##-268435456
20c44     03 03 02 F1 | 	add	_var02, _var04
20c48     04 03 62 FC | 	wrlong	_var02, _var05
20c4c                 | '     repeat while long[mailbox] < 0
20c4c                 | LR__2683
20c4c     04 03 02 FB | 	rdlong	_var02, _var05
20c50     00 02 56 F2 | 	cmps	_var02, #0 wc
20c54     F4 FF 9F CD |  if_b	jmp	#LR__2683
20c58                 | '     LOCKREL(driverlock)
20c58     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20c5c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20c60     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20c64     07 12 72 FD | 	lockrel	arg01 wc
20c68     00 FA 05 F6 | 	mov	result1, #0
20c6c                 | LR__2684
20c6c                 | _psram_spin2_setQos_ret
20c6c     2D 00 64 FD | 	ret
20c70                 | 
20c70                 | ' 
20c70                 | ' '..............................................................................
20c70                 | ' 
20c70                 | ' {{
20c70                 | ' }}
20c70                 | ' PRI lookupDelay(freq) : delay | profile
20c70                 | _psram_spin2_lookupDelay
20c70                 | '     profile := @delayTable
20c70     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
20c74     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
20c78                 | '     delay := long[profile][0]
20c78     00 03 02 FB | 	rdlong	_var02, _var01
20c7c                 | '     repeat while long[profile][1] 
20c7c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
20c80     97 16 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
20c84                 | LR__2690
20c84     04 00 06 F1 | 	add	_var01, #4
20c88     00 FB 09 FB | 	rdlong	result1, _var01 wz
20c8c     04 00 86 F1 | 	sub	_var01, #4
20c90     1C 00 90 AD |  if_e	jmp	#LR__2692
20c94                 | '         if freq +< long[profile][1] 
20c94     04 00 06 F1 | 	add	_var01, #4
20c98     00 FB 01 FB | 	rdlong	result1, _var01
20c9c     04 00 86 F1 | 	sub	_var01, #4
20ca0     FD 12 12 F2 | 	cmp	arg01, result1 wc
20ca4                 | '             quit
20ca4                 | '         profile += 4
20ca4     04 00 06 31 |  if_ae	add	_var01, #4
20ca8                 | '         delay++
20ca8     01 02 06 31 |  if_ae	add	_var02, #1
20cac     D4 FF 9F 3D |  if_ae	jmp	#LR__2690
20cb0                 | LR__2691
20cb0                 | LR__2692
20cb0     01 FB 01 F6 | 	mov	result1, _var02
20cb4                 | _psram_spin2_lookupDelay_ret
20cb4     2D 00 64 FD | 	ret
20cb8                 | 
20cb8                 | ' 
20cb8                 | ' PUB start() : r
20cb8                 | _usbnew_spin2_start
20cb8     00 00 06 F6 | 	mov	_var01, #0
20cbc                 | '   ifnot driver_cog
20cbc     15 00 00 FF 
20cc0     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
20cc4     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20cc8     15 00 00 FF 
20ccc     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
20cd0     38 00 90 5D |  if_ne	jmp	#LR__2700
20cd4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
20cd4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20cd8     10 00 06 F6 | 	mov	_var01, #16
20cdc     00 16 06 F6 | 	mov	arg03, #0
20ce0     28 16 62 FD | 	setq	arg03
20ce4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
20ce8     01 00 66 C6 |  if_b	neg	_var01, #1
20cec                 | '     if r >= 0
20cec     00 00 56 F2 | 	cmps	_var01, #0 wc
20cf0                 | '       driver_cog := r+1
20cf0     00 03 02 36 |  if_ae	mov	_var02, _var01
20cf4     01 02 06 31 |  if_ae	add	_var02, #1
20cf8     15 00 00 3F 
20cfc     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
20d00     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
20d04     15 00 00 3F 
20d08     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
20d0c                 | LR__2700
20d0c     00 FB 01 F6 | 	mov	result1, _var01
20d10                 | _usbnew_spin2_start_ret
20d10     2D 00 64 FD | 	ret
20d14                 | 
20d14                 | '     '' (Always enabled)
20d14                 | ' 
20d14                 | ' '' Get current pressed state of a keyboard key
20d14                 | ' PUB keystate(key) : r | buf[2],tmp
20d14                 | _usbnew_spin2_keystate
20d14     00 04 06 F6 | 	mov	_var03, #0
20d18                 | '   if key >= $E0 && key < $E8
20d18     E0 12 56 F2 | 	cmps	arg01, #224 wc
20d1c     34 00 90 CD |  if_b	jmp	#LR__2710
20d20     E8 12 56 F2 | 	cmps	arg01, #232 wc
20d24     2C 00 90 3D |  if_ae	jmp	#LR__2710
20d28                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
20d28     00 FA 05 F6 | 	mov	result1, #0
20d2c     13 00 00 FF 
20d30     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20d34     09 07 02 F6 | 	mov	_var04, arg01
20d38     E0 06 86 F1 | 	sub	_var04, #224
20d3c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
20d40     03 09 4A F0 | 	shr	_var05, _var04 wz
20d44     13 00 00 FF 
20d48     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20d4c     01 FA 65 56 |  if_ne	neg	result1, #1
20d50     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
20d54                 | LR__2710
20d54                 | '   else
20d54                 | '     '' Do this in inline ASM to ensure atomicity
20d54                 | '     tmp := @hkbd_report
20d54     13 00 00 FF 
20d58     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20d5c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
20d60                 | '     org
20d60     13 00 00 FF 
20d64     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20d68     97 1E 48 FB | 	callpa	#(@LR__2712-@LR__2711)>>2,fcache_load_ptr_
20d6c                 | LR__2711
20d6c 000             | 	org	0
20d6c 000 28 02 64 FD | 	setq	#1
20d70 001 04 01 02 FB | 	rdlong	_var01, _var05
20d74 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
20d78 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
20d7c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
20d80 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d84 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20d88 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d8c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20d90 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d94 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20d98 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d9c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20da0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20da4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20da8 00f             | LR__2712
20da8                 | 	orgh
20da8     02 FB 01 F6 | 	mov	result1, _var03
20dac                 | _usbnew_spin2_keystate_ret
20dac     2D 00 64 FD | 	ret
20db0                 | 
20db0                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20db0                 | ' 
20db0                 | ' '' Return key event from buffer if there is one
20db0                 | ' PUB get_key() : r | tail
20db0                 | _usbnew_spin2_get_key
20db0                 | '   tail := keyq_tail
20db0     0F 00 00 FF 
20db4     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20db8     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20dbc                 | '   if keyq_head == tail
20dbc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20dc0     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20dc4     0F 00 00 FF 
20dc8     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20dcc     00 03 0A F2 | 	cmp	_var02, _var01 wz
20dd0                 | '     return 0 ' No event
20dd0     00 FA 05 A6 |  if_e	mov	result1, #0
20dd4     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20dd8                 | '   r := keyq_data[tail]
20dd8     00 03 02 F6 | 	mov	_var02, _var01
20ddc     02 02 66 F0 | 	shl	_var02, #2
20de0     0F 00 00 FF 
20de4     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20de8     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20dec     01 FB 01 FB | 	rdlong	result1, _var02
20df0                 | '   if ++tail == KEYQUEUE_SIZE
20df0     01 00 06 F1 | 	add	_var01, #1
20df4     80 00 0E F2 | 	cmp	_var01, #128 wz
20df8                 | '     tail := 0
20df8     00 00 06 A6 |  if_e	mov	_var01, #0
20dfc                 | '   keyq_tail := tail
20dfc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20e00     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20e04     0F 00 00 FF 
20e08     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20e0c                 | _usbnew_spin2_get_key_ret
20e0c     2D 00 64 FD | 	ret
20e10                 | 
20e10                 | ' 
20e10                 | ' '' Emulate mouse movement
20e10                 | ' PUB mouse_move(x,y)
20e10                 | _usbnew_spin2_mouse_move
20e10     02 4A 05 F6 | 	mov	COUNT_, #2
20e14     A8 00 A0 FD | 	call	#pushregs_
20e18     09 1F 02 F6 | 	mov	local01, arg01
20e1c     0A 21 02 F6 | 	mov	local02, arg02
20e20                 | '   mouse_lock := 1
20e20     14 00 00 FF 
20e24     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20e28     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20e2c     14 00 00 FF 
20e30     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20e34                 | '   waitus(2) ' hope driver is now done
20e34     02 12 06 F6 | 	mov	arg01, #2
20e38     E8 0A B0 FD | 	call	#__system___waitus
20e3c                 | '   mouse_xacc := x
20e3c     14 00 00 FF 
20e40     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
20e44     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
20e48                 | '   mouse_yacc := y
20e48     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20e4c     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
20e50                 | '   if mouse_outptr
20e50     04 00 00 FF 
20e54     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
20e58     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
20e5c     0F 00 00 FF 
20e60     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20e64     24 00 90 AD |  if_e	jmp	#LR__2720
20e68                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
20e68     10 20 66 F0 | 	shl	local02, #16
20e6c     0F 1F 32 F9 | 	getword	local01, local01, #0
20e70     0F 21 42 F5 | 	or	local02, local01
20e74     0F 00 00 FF 
20e78     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
20e7c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
20e80     0F 00 00 FF 
20e84     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20e88     0F 21 62 FC | 	wrlong	local02, local01
20e8c                 | LR__2720
20e8c                 | '   mouse_lock := 0
20e8c     14 00 00 FF 
20e90     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20e94     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20e98     14 00 00 FF 
20e9c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20ea0     A7 F0 03 F6 | 	mov	ptra, fp
20ea4     B2 00 A0 FD | 	call	#popregs_
20ea8                 | _usbnew_spin2_mouse_move_ret
20ea8     2D 00 64 FD | 	ret
20eac                 | 
20eac                 | '     '' Set HAVE_HIDPAD to enable.
20eac                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20eac                 | ' 
20eac                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20eac                 | ' PUB hidpad_id(dev) : r
20eac                 | _usbnew_spin2_hidpad_id
20eac                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20eac     13 00 00 FF 
20eb0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20eb4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20eb8     09 01 02 F6 | 	mov	_var01, arg01
20ebc     03 00 66 F0 | 	shl	_var01, #3
20ec0     09 01 82 F1 | 	sub	_var01, arg01
20ec4     02 00 66 F0 | 	shl	_var01, #2
20ec8     00 FB 01 F1 | 	add	result1, _var01
20ecc     FD FA 01 FB | 	rdlong	result1, result1
20ed0     13 00 00 FF 
20ed4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20ed8                 | _usbnew_spin2_hidpad_id_ret
20ed8     2D 00 64 FD | 	ret
20edc                 | 
20edc                 | ' 
20edc                 | ' '' Get all button states for a device
20edc                 | ' PUB hidpad_buttons(dev) : r 
20edc                 | _usbnew_spin2_hidpad_buttons
20edc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20edc     13 00 00 FF 
20ee0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20ee4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20ee8     09 01 02 F6 | 	mov	_var01, arg01
20eec     03 00 66 F0 | 	shl	_var01, #3
20ef0     09 01 82 F1 | 	sub	_var01, arg01
20ef4     02 00 66 F0 | 	shl	_var01, #2
20ef8     00 FB 01 F1 | 	add	result1, _var01
20efc     14 FA 05 F1 | 	add	result1, #20
20f00     FD FA 01 FB | 	rdlong	result1, result1
20f04     13 00 00 FF 
20f08     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20f0c                 | _usbnew_spin2_hidpad_buttons_ret
20f0c     2D 00 64 FD | 	ret
20f10                 | 
20f10                 | ' 
20f10                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20f10                 | ' PUB hidpad_axis(dev,axnum) : r
20f10                 | _usbnew_spin2_hidpad_axis
20f10                 | '   if axnum +>= 6
20f10     06 14 16 F2 | 	cmp	arg02, #6 wc
20f14                 | '     return 0
20f14     00 FA 05 36 |  if_ae	mov	result1, #0
20f18     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20f1c                 | '   else 
20f1c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20f1c     13 00 00 FF 
20f20     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20f24     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20f28     09 01 02 F6 | 	mov	_var01, arg01
20f2c     03 00 66 F0 | 	shl	_var01, #3
20f30     09 01 82 F1 | 	sub	_var01, arg01
20f34     02 00 66 F0 | 	shl	_var01, #2
20f38     00 FB 01 F1 | 	add	result1, _var01
20f3c     04 00 06 F6 | 	mov	_var01, #4
20f40     0A 01 02 F1 | 	add	_var01, arg02
20f44     01 00 66 F0 | 	shl	_var01, #1
20f48     FD 00 02 F1 | 	add	_var01, result1
20f4c     00 FB E1 FA | 	rdword	result1, _var01
20f50     0F FA 65 F7 | 	signx	result1, #15
20f54     13 00 00 FF 
20f58     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20f5c                 | _usbnew_spin2_hidpad_axis_ret
20f5c     2D 00 64 FD | 	ret
20f60                 | 
20f60                 | ' 
20f60                 | ' 
20f60                 | ' '--------------------------------------------------------------
20f60                 | ' '---------- Init the variables, start the cog. ----------------
20f60                 | ' '--------------------------------------------------------------
20f60                 | ' 
20f60                 | ' pub start(mbox,scope,cache) :cog,base | iii
20f60                 | _audio096_spin2_start
20f60     04 4A 05 F6 | 	mov	COUNT_, #4
20f64     A8 00 A0 FD | 	call	#pushregs_
20f68     09 1F 02 F6 | 	mov	local01, arg01
20f6c                 | ' 
20f6c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
20f6c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
20f6c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
20f6c                 | ' 
20f6c                 | ' mailboxaddr:=mbox 
20f6c     F2 1E 62 FC | 	wrlong	local01, objptr
20f70                 | ' scope_ptr:=scope
20f70     04 E4 05 F1 | 	add	objptr, #4
20f74     F2 14 62 FC | 	wrlong	arg02, objptr
20f78                 | ' cache_ptr:=cache
20f78     04 E4 05 F1 | 	add	objptr, #4
20f7c     F2 16 62 FC | 	wrlong	arg03, objptr
20f80                 | ' base:=@channel1[0]
20f80     04 E4 05 F1 | 	add	objptr, #4
20f84     F2 20 02 F6 | 	mov	local02, objptr
20f88                 | ' long[$40]:=mbox
20f88     40 1E 66 FC | 	wrlong	local01, #64
20f8c                 | ' repeat iii from 0 to 7
20f8c     00 22 06 F6 | 	mov	local03, #0
20f90     02 00 00 FF 
20f94     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20f98     0C E4 85 F1 | 	sub	objptr, #12
20f9c     97 BC 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
20fa0                 | LR__2730
20fa0                 | '   long[base+64*iii]:=0
20fa0     10 1F 02 F6 | 	mov	local01, local02
20fa4     11 FD 01 F6 | 	mov	result2, local03
20fa8     06 FC 65 F0 | 	shl	result2, #6
20fac     FE 1E 02 F1 | 	add	local01, result2
20fb0     0F 01 68 FC | 	wrlong	#0, local01
20fb4                 | '   long[base+64*iii+4]:=0
20fb4     10 1F 02 F6 | 	mov	local01, local02
20fb8     11 FD 01 F6 | 	mov	result2, local03
20fbc     06 FC 65 F0 | 	shl	result2, #6
20fc0     FE 1E 02 F1 | 	add	local01, result2
20fc4     04 1E 06 F1 | 	add	local01, #4
20fc8     0F 01 68 FC | 	wrlong	#0, local01
20fcc                 | '   long[base+64*iii+12]:=0
20fcc     10 25 02 F6 | 	mov	local04, local02
20fd0     11 1F 02 F6 | 	mov	local01, local03
20fd4     06 1E 66 F0 | 	shl	local01, #6
20fd8     0F 25 02 F1 | 	add	local04, local01
20fdc     0C 24 06 F1 | 	add	local04, #12
20fe0     12 01 68 FC | 	wrlong	#0, local04
20fe4                 | '   long[base+64*iii+16]:=2 
20fe4     10 25 02 F6 | 	mov	local04, local02
20fe8     11 1F 02 F6 | 	mov	local01, local03
20fec     06 1E 66 F0 | 	shl	local01, #6
20ff0     0F 25 02 F1 | 	add	local04, local01
20ff4     10 24 06 F1 | 	add	local04, #16
20ff8     12 05 68 FC | 	wrlong	#2, local04
20ffc                 | '   word[base+64*iii+20]:=0
20ffc     10 25 02 F6 | 	mov	local04, local02
21000     11 1F 02 F6 | 	mov	local01, local03
21004     06 1E 66 F0 | 	shl	local01, #6
21008     0F 25 02 F1 | 	add	local04, local01
2100c     14 24 06 F1 | 	add	local04, #20
21010     12 01 58 FC | 	wrword	#0, local04
21014                 | '   word[base+64*iii+22]:=8192
21014     10 25 02 F6 | 	mov	local04, local02
21018     11 1F 02 F6 | 	mov	local01, local03
2101c     06 1E 66 F0 | 	shl	local01, #6
21020     0F 25 02 F1 | 	add	local04, local01
21024     16 24 06 F1 | 	add	local04, #22
21028     10 00 80 FF 
2102c     12 01 58 FC | 	wrword	##8192, local04
21030                 | '   word[base+64*iii+24]:=4000+2*iii
21030     11 25 02 F6 | 	mov	local04, local03
21034     01 24 66 F0 | 	shl	local04, #1
21038     07 00 00 FF 
2103c     A0 1F 06 F6 | 	mov	local01, ##4000
21040     12 1F 02 F1 | 	add	local01, local04
21044     10 25 02 F6 | 	mov	local04, local02
21048     11 FD 01 F6 | 	mov	result2, local03
2104c     06 FC 65 F0 | 	shl	result2, #6
21050     FE 24 02 F1 | 	add	local04, result2
21054     18 24 06 F1 | 	add	local04, #24
21058     12 1F 52 FC | 	wrword	local01, local04
2105c                 | '   word[base+64*iii+26]:=2
2105c     10 25 02 F6 | 	mov	local04, local02
21060     11 1F 02 F6 | 	mov	local01, local03
21064     06 1E 66 F0 | 	shl	local01, #6
21068     0F 25 02 F1 | 	add	local04, local01
2106c     1A 24 06 F1 | 	add	local04, #26
21070     12 05 58 FC | 	wrword	#2, local04
21074                 | '   long [base+64*iii+8]:=@null | $C0000000
21074     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
21078     3E 1E 26 F4 | 	bith	local01, #62
2107c     10 25 02 F6 | 	mov	local04, local02
21080     11 17 02 F6 | 	mov	arg03, local03
21084     06 16 66 F0 | 	shl	arg03, #6
21088     0B 25 02 F1 | 	add	local04, arg03
2108c     08 24 06 F1 | 	add	local04, #8
21090     12 1F 62 FC | 	wrlong	local01, local04
21094                 | '   long[base+64*iii+32]:=0
21094     10 25 02 F6 | 	mov	local04, local02
21098     11 1F 02 F6 | 	mov	local01, local03
2109c     06 1E 66 F0 | 	shl	local01, #6
210a0     0F 25 02 F1 | 	add	local04, local01
210a4     20 24 06 F1 | 	add	local04, #32
210a8     12 01 68 FC | 	wrlong	#0, local04
210ac                 | '   long[base+64*iii+36]:=0
210ac     10 25 02 F6 | 	mov	local04, local02
210b0     11 1F 02 F6 | 	mov	local01, local03
210b4     06 1E 66 F0 | 	shl	local01, #6
210b8     0F 25 02 F1 | 	add	local04, local01
210bc     24 24 06 F1 | 	add	local04, #36
210c0     12 01 68 FC | 	wrlong	#0, local04
210c4                 | '   long[base+64*iii+40]:=0
210c4     10 25 02 F6 | 	mov	local04, local02
210c8     11 1F 02 F6 | 	mov	local01, local03
210cc     06 1E 66 F0 | 	shl	local01, #6
210d0     0F 25 02 F1 | 	add	local04, local01
210d4     28 24 06 F1 | 	add	local04, #40
210d8     12 01 68 FC | 	wrlong	#0, local04
210dc                 | '   long[base+64*iii+44]:=0
210dc     10 25 02 F6 | 	mov	local04, local02
210e0     11 1F 02 F6 | 	mov	local01, local03
210e4     06 1E 66 F0 | 	shl	local01, #6
210e8     0F 25 02 F1 | 	add	local04, local01
210ec     2C 24 06 F1 | 	add	local04, #44
210f0     12 01 68 FC | 	wrlong	#0, local04
210f4                 | '   long[base+64*iii+28]:=0
210f4     10 25 02 F6 | 	mov	local04, local02
210f8     11 1F 02 F6 | 	mov	local01, local03
210fc     06 1E 66 F0 | 	shl	local01, #6
21100     0F 25 02 F1 | 	add	local04, local01
21104     1C 24 06 F1 | 	add	local04, #28
21108     12 01 68 FC | 	wrlong	#0, local04
2110c     01 22 06 F1 | 	add	local03, #1
21110     08 22 56 F2 | 	cmps	local03, #8 wc
21114     88 FE 9F CD |  if_b	jmp	#LR__2730
21118                 | LR__2731
21118     02 00 00 FF 
2111c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
21120                 | '   
21120                 | ' cog:=coginit(16,@audio,@mailboxaddr)
21120     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
21124     F2 16 02 F6 | 	mov	arg03, objptr
21128     10 24 06 F6 | 	mov	local04, #16
2112c     28 16 62 FD | 	setq	arg03
21130     0A 25 F2 FC | 	coginit	local04, arg02 wc
21134     01 24 66 C6 |  if_b	neg	local04, #1
21138                 | ' waitms(100)
21138     64 12 06 F6 | 	mov	arg01, #100
2113c     78 07 B0 FD | 	call	#__system___waitms
21140                 | ' return cog,base
21140     10 FD 01 F6 | 	mov	result2, local02
21144     12 FB 01 F6 | 	mov	result1, local04
21148     A7 F0 03 F6 | 	mov	ptra, fp
2114c     B2 00 A0 FD | 	call	#popregs_
21150                 | _audio096_spin2_start_ret
21150     2D 00 64 FD | 	ret
21154                 | 
21154                 | ' 
21154                 | ' ' a simple play procedure to not poke everything. 
21154                 | ' 
21154                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
21154                 | _audio096_spin2_play
21154     0C E4 05 F1 | 	add	objptr, #12
21158     F2 00 02 F6 | 	mov	_var01, objptr
2115c     06 12 66 F0 | 	shl	arg01, #6
21160     09 01 02 F1 | 	add	_var01, arg01
21164     00 13 02 F6 | 	mov	arg01, _var01
21168     0C 12 06 F1 | 	add	arg01, #12
2116c     09 1B 62 FC | 	wrlong	arg05, arg01
21170     00 1C 56 F2 | 	cmps	arg06, #0 wc
21174     00 13 02 36 |  if_ae	mov	arg01, _var01
21178     10 12 06 31 |  if_ae	add	arg01, #16
2117c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
21180     02 1A 06 C1 |  if_b	add	arg05, #2
21184     00 13 02 C6 |  if_b	mov	arg01, _var01
21188     10 12 06 C1 |  if_b	add	arg01, #16
2118c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
21190     0B 13 52 F6 | 	abs	arg01, arg03 wc
21194     0F 1B 80 FF 
21198     09 1F 1A FD | 	qdiv	##3546895, arg01
2119c                 | ' 
2119c                 | ' base2:=@channel1[0]+64*channel
2119c                 | ' 
2119c                 | ' 
2119c                 | ' long[base2+12]:= len
2119c                 | ' if loop >=0 
2119c                 | '   long[base2+16]:= loop
2119c     0C E4 85 F1 | 	sub	objptr, #12
211a0                 | ' else
211a0                 | '   long[base2+16]:= len+2
211a0                 | ' word[base2+20]:=vol
211a0     00 13 02 F6 | 	mov	arg01, _var01
211a4     14 12 06 F1 | 	add	arg01, #20
211a8     09 19 52 FC | 	wrword	arg04, arg01
211ac                 | ' word[base2+24]:= 3546895/splfreq 
211ac     00 19 02 F6 | 	mov	arg04, _var01
211b0     18 18 06 F1 | 	add	arg04, #24
211b4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
211b4                 | ' long[base2+28]:=$40000000    
211b4                 | ' long[base2+32]:=0    
211b4                 | ' long[base2+36]:=0    
211b4                 | ' long[base2+40]:=0    
211b4                 | ' long[base2+44]:=0    
211b4                 | ' long[base2+8]:=sample+$C0000000     
211b4     00 00 60 FF 
211b8     00 14 06 F1 | 	add	arg02, ##-1073741824
211bc     18 12 62 FD | 	getqx	arg01
211c0     09 13 82 F6 | 	negc	arg01, arg01
211c4     0C 13 52 FC | 	wrword	arg01, arg04
211c8     00 13 02 F6 | 	mov	arg01, _var01
211cc     1A 12 06 F1 | 	add	arg01, #26
211d0     09 01 5A FC | 	wrword	#256, arg01
211d4     00 13 02 F6 | 	mov	arg01, _var01
211d8     1C 12 06 F1 | 	add	arg01, #28
211dc     00 00 A0 FF 
211e0     09 01 68 FC | 	wrlong	##1073741824, arg01
211e4     00 13 02 F6 | 	mov	arg01, _var01
211e8     20 12 06 F1 | 	add	arg01, #32
211ec     09 01 68 FC | 	wrlong	#0, arg01
211f0     00 13 02 F6 | 	mov	arg01, _var01
211f4     24 12 06 F1 | 	add	arg01, #36
211f8     09 01 68 FC | 	wrlong	#0, arg01
211fc     00 13 02 F6 | 	mov	arg01, _var01
21200     28 12 06 F1 | 	add	arg01, #40
21204     09 01 68 FC | 	wrlong	#0, arg01
21208     00 13 02 F6 | 	mov	arg01, _var01
2120c     2C 12 06 F1 | 	add	arg01, #44
21210     09 01 68 FC | 	wrlong	#0, arg01
21214     08 00 06 F1 | 	add	_var01, #8
21218     00 15 62 FC | 	wrlong	arg02, _var01
2121c                 | _audio096_spin2_play_ret
2121c     2D 00 64 FD | 	ret
21220                 | 
21220                 | ' 
21220                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
21220                 | _audio096_spin2_play8
21220                 | ' 
21220                 | ' base2:=@channel1[0]+64*channel
21220     0C E4 05 F1 | 	add	objptr, #12
21224     F2 00 02 F6 | 	mov	_var01, objptr
21228     06 12 66 F0 | 	shl	arg01, #6
2122c     09 01 02 F1 | 	add	_var01, arg01
21230                 | ' long[base2]:=0
21230     00 01 68 FC | 	wrlong	#0, _var01
21234                 | ' long[base2+8]:=sample+$40000000 
21234     00 00 20 FF 
21238     00 14 06 F1 | 	add	arg02, ##1073741824
2123c     00 13 02 F6 | 	mov	arg01, _var01
21240     08 12 06 F1 | 	add	arg01, #8
21244     09 15 62 FC | 	wrlong	arg02, arg01
21248                 | ' if loop>=0
21248     00 1C 56 F2 | 	cmps	arg06, #0 wc
2124c     0C E4 85 F1 | 	sub	objptr, #12
21250     1C 00 90 CD |  if_b	jmp	#LR__2740
21254                 | '   long[base2+12]:=loop
21254     00 15 02 F6 | 	mov	arg02, _var01
21258     0C 14 06 F1 | 	add	arg02, #12
2125c     0A 1D 62 FC | 	wrlong	arg06, arg02
21260                 | '   long[base2+16]:= len
21260     00 1D 02 F6 | 	mov	arg06, _var01
21264     10 1C 06 F1 | 	add	arg06, #16
21268     0E 1B 62 FC | 	wrlong	arg05, arg06
2126c     1C 00 90 FD | 	jmp	#LR__2741
21270                 | LR__2740
21270                 | ' else
21270                 | '   long[base2+12]:= len
21270     00 1D 02 F6 | 	mov	arg06, _var01
21274     0C 1C 06 F1 | 	add	arg06, #12
21278     0E 1B 62 FC | 	wrlong	arg05, arg06
2127c                 | '   long[base2+16]:= len+1
2127c     01 1A 06 F1 | 	add	arg05, #1
21280     00 13 02 F6 | 	mov	arg01, _var01
21284     10 12 06 F1 | 	add	arg01, #16
21288     09 1B 62 FC | 	wrlong	arg05, arg01
2128c                 | LR__2741
2128c     0B 17 52 F6 | 	abs	arg03, arg03 wc
21290     0F 1B 80 FF 
21294     0B 1F 1A FD | 	qdiv	##3546895, arg03
21298                 | ' word[base2+20]:=vol
21298     00 17 02 F6 | 	mov	arg03, _var01
2129c     14 16 06 F1 | 	add	arg03, #20
212a0     0B 19 52 FC | 	wrword	arg04, arg03
212a4                 | ' word[base2+24]:= 3546895 /splfreq 
212a4     00 13 02 F6 | 	mov	arg01, _var01
212a8     18 12 06 F1 | 	add	arg01, #24
212ac                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
212ac     1A 00 06 F1 | 	add	_var01, #26
212b0     18 18 62 FD | 	getqx	arg04
212b4     0C 19 82 F6 | 	negc	arg04, arg04
212b8     09 19 52 FC | 	wrword	arg04, arg01
212bc     00 01 5A FC | 	wrword	#256, _var01
212c0                 | _audio096_spin2_play8_ret
212c0     2D 00 64 FD | 	ret
212c4                 | 
212c4                 | ' 'long[base2+28]:=$40000000
212c4                 | ' 
212c4                 | '     
212c4                 | ' pub stop(channel) 'silence it
212c4                 | _audio096_spin2_stop
212c4                 | ' 
212c4                 | ' word[@channel1[0]+64*channel+20]:=0
212c4     0C E4 05 F1 | 	add	objptr, #12
212c8     F2 00 02 F6 | 	mov	_var01, objptr
212cc     09 03 02 F6 | 	mov	_var02, arg01
212d0     06 02 66 F0 | 	shl	_var02, #6
212d4     01 01 02 F1 | 	add	_var01, _var02
212d8     14 00 06 F1 | 	add	_var01, #20
212dc     00 01 58 FC | 	wrword	#0, _var01
212e0                 | ' word[@channel1[0]+64*channel+20]:=0
212e0     F2 00 02 F6 | 	mov	_var01, objptr
212e4     06 12 66 F0 | 	shl	arg01, #6
212e8     09 01 02 F1 | 	add	_var01, arg01
212ec     14 00 06 F1 | 	add	_var01, #20
212f0     00 01 58 FC | 	wrword	#0, _var01
212f4     0C E4 85 F1 | 	sub	objptr, #12
212f8                 | _audio096_spin2_stop_ret
212f8     2D 00 64 FD | 	ret
212fc                 | hubexit
212fc     81 00 80 FD | 	jmp	#cogexit
21300                 | 
21300                 | __system___setbaud
21300     14 80 06 FB | 	rdlong	muldiva_, #20
21304     09 83 02 F6 | 	mov	muldivb_, arg01
21308     BA 00 A0 FD | 	call	#divide_
2130c     97 06 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
21310                 | LR__2750
21310     3E FA 9D FA | 	rdpin	result1, #62 wc
21314     FE FC A1 F1 | 	subx	result2, result2
21318     F4 FF 9F CD |  if_b	jmp	#LR__2750
2131c                 | LR__2751
2131c     40 7C 64 FD | 	dirl	#62
21320     40 7E 64 FD | 	dirl	#63
21324     F3 82 62 FC | 	wrlong	muldivb_, ptr___system__dat__
21328     10 82 66 F0 | 	shl	muldivb_, #16
2132c     07 14 06 F6 | 	mov	arg02, #7
21330     41 15 02 F1 | 	add	arg02, muldivb_
21334     3E F8 0C FC | 	wrpin	#124, #62
21338     3E 14 16 FC | 	wxpin	arg02, #62
2133c     3F 7C 0C FC | 	wrpin	#62, #63
21340     14 14 06 F1 | 	add	arg02, #20
21344     3F 14 16 FC | 	wxpin	arg02, #63
21348     41 7C 64 FD | 	dirh	#62
2134c     41 7E 64 FD | 	dirh	#63
21350                 | __system___setbaud_ret
21350     2D 00 64 FD | 	ret
21354                 | 
21354                 | __system___txraw
21354     01 4A 05 F6 | 	mov	COUNT_, #1
21358     A8 00 A0 FD | 	call	#pushregs_
2135c     09 1F 02 F6 | 	mov	local01, arg01
21360     97 06 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
21364                 | LR__2760
21364     3E FA 9D FA | 	rdpin	result1, #62 wc
21368     FE FC A1 F1 | 	subx	result2, result2
2136c     F4 FF 9F CD |  if_b	jmp	#LR__2760
21370                 | LR__2761
21370     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
21374     C2 01 00 AF 
21378     00 12 06 A6 |  if_e	mov	arg01, ##230400
2137c     80 FF BF AD |  if_e	call	#__system___setbaud
21380     58 7C 64 FD | 	drvl	#62
21384     3E 1E 26 FC | 	wypin	local01, #62
21388     01 FA 05 F6 | 	mov	result1, #1
2138c     A7 F0 03 F6 | 	mov	ptra, fp
21390     B2 00 A0 FD | 	call	#popregs_
21394                 | __system___txraw_ret
21394     2D 00 64 FD | 	ret
21398                 | 
21398                 | __system___rxraw
21398     0D 4A 05 F6 | 	mov	COUNT_, #13
2139c     A8 00 A0 FD | 	call	#pushregs_
213a0     09 1F 02 F6 | 	mov	local01, arg01
213a4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
213a8     C2 01 00 AF 
213ac     00 12 06 A6 |  if_e	mov	arg01, ##230400
213b0     4C FF BF AD |  if_e	call	#__system___setbaud
213b4     00 1E 0E F2 | 	cmp	local01, #0 wz
213b8     20 00 90 AD |  if_e	jmp	#LR__2770
213bc     14 22 06 FB | 	rdlong	local03, #20
213c0     0A 22 46 F0 | 	shr	local03, #10
213c4     11 1F 02 FD | 	qmul	local01, local03
213c8     1A FA 61 FD | 	getct	result1
213cc     18 24 62 FD | 	getqx	local04
213d0     12 FB 01 F1 | 	add	result1, local04
213d4     FD 26 02 F6 | 	mov	local05, result1
213d8     04 00 90 FD | 	jmp	#LR__2771
213dc                 | LR__2770
213dc     00 26 06 F6 | 	mov	local05, #0
213e0                 | LR__2771
213e0     01 28 66 F6 | 	neg	local06, #1
213e4     3F 2A 06 F6 | 	mov	local07, #63
213e8     00 2C 06 F6 | 	mov	local08, #0
213ec     04 E6 05 F1 | 	add	ptr___system__dat__, #4
213f0     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
213f4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
213f8                 | LR__2772
213f8     08 2E 16 F4 | 	testb	local09, #8 wc
213fc     09 2E 76 F4 | 	testbn	local09, #9 andc
21400     0A 2E 46 F0 | 	shr	local09, #10
21404     01 2C 06 C6 |  if_b	mov	local08, #1
21408     40 7E 6C 3D |  if_ae	testp	#63 wz
2140c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
21410     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
21414     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
21418                 | LR__2773
21418     00 20 06 F6 | 	mov	local02, #0
2141c     00 2C 0E F2 | 	cmp	local08, #0 wz
21420     01 20 66 56 |  if_ne	neg	local02, #1
21424     00 30 06 F6 | 	mov	local10, #0
21428     00 22 06 F6 | 	mov	local03, #0
2142c     00 1E 0E F2 | 	cmp	local01, #0 wz
21430     01 22 66 56 |  if_ne	neg	local03, #1
21434     00 24 06 F6 | 	mov	local04, #0
21438     00 32 06 F6 | 	mov	local11, #0
2143c     13 35 02 F6 | 	mov	local12, local05
21440     1A FA 61 FD | 	getct	result1
21444     FD 36 02 F6 | 	mov	local13, result1
21448     1B 35 82 F1 | 	sub	local12, local13
2144c     00 34 56 F2 | 	cmps	local12, #0 wc
21450     00 32 26 C6 |  if_b	not	local11, #0
21454     00 32 0E F2 | 	cmp	local11, #0 wz
21458     00 24 26 56 |  if_ne	not	local04, #0
2145c     12 23 CA F7 | 	test	local03, local04 wz
21460     00 30 26 56 |  if_ne	not	local10, #0
21464     18 21 4A F5 | 	or	local02, local10 wz
21468     8C FF 9F AD |  if_e	jmp	#LR__2772
2146c     00 2C 0E F2 | 	cmp	local08, #0 wz
21470     17 29 02 56 |  if_ne	mov	local06, local09
21474     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
21478     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2147c     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
21480     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
21484     14 FB 01 F6 | 	mov	result1, local06
21488     A7 F0 03 F6 | 	mov	ptra, fp
2148c     B2 00 A0 FD | 	call	#popregs_
21490                 | __system___rxraw_ret
21490     2D 00 64 FD | 	ret
21494                 | 
21494                 | __system___getus
21494     1A FC 71 FD | 	getct	result2 wc
21498     1A 00 62 FD | 	getct	_var01
2149c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
214a0     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
214a4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
214a8     20 00 90 5D |  if_ne	jmp	#LR__2780
214ac     14 02 06 FB | 	rdlong	_var02, #20
214b0     A1 07 00 FF 
214b4     40 02 16 FD | 	qdiv	_var02, ##1000000
214b8     10 E6 05 F1 | 	add	ptr___system__dat__, #16
214bc     18 FA 61 FD | 	getqx	result1
214c0     FD 02 02 F6 | 	mov	_var02, result1
214c4     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
214c8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
214cc                 | LR__2780
214cc     01 FD 11 FD | 	qdiv	result2, _var02
214d0     19 FC 61 FD | 	getqy	result2
214d4     28 FC 61 FD | 	setq	result2
214d8     01 01 12 FD | 	qdiv	_var01, _var02
214dc     18 FA 61 FD | 	getqx	result1
214e0                 | __system___getus_ret
214e0     2D 00 64 FD | 	ret
214e4                 | 
214e4                 | __system____builtin_memmove
214e4     09 01 02 F6 | 	mov	_var01, arg01
214e8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
214ec     10 00 90 CD |  if_b	jmp	#LR__2790
214f0     0A 03 02 F6 | 	mov	_var02, arg02
214f4     0B 03 02 F1 | 	add	_var02, arg03
214f8     01 13 52 F2 | 	cmps	arg01, _var02 wc
214fc     48 00 90 CD |  if_b	jmp	#LR__2796
21500                 | LR__2790
21500     0B 05 02 F6 | 	mov	_var03, arg03
21504     02 04 4E F0 | 	shr	_var03, #2 wz
21508     18 00 90 AD |  if_e	jmp	#LR__2795
2150c     97 0A 48 FB | 	callpa	#(@LR__2793-@LR__2791)>>2,fcache_load_ptr_
21510                 | LR__2791
21510     02 09 D8 FC | 	rep	@LR__2794, _var03
21514                 | LR__2792
21514     0A 05 02 FB | 	rdlong	_var03, arg02
21518     09 05 62 FC | 	wrlong	_var03, arg01
2151c     04 12 06 F1 | 	add	arg01, #4
21520     04 14 06 F1 | 	add	arg02, #4
21524                 | LR__2793
21524                 | LR__2794
21524                 | LR__2795
21524     02 16 CE F7 | 	test	arg03, #2 wz
21528     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
2152c     09 03 52 5C |  if_ne	wrword	_var02, arg01
21530     02 12 06 51 |  if_ne	add	arg01, #2
21534     02 14 06 51 |  if_ne	add	arg02, #2
21538     01 16 CE F7 | 	test	arg03, #1 wz
2153c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
21540     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
21544     28 00 90 FD | 	jmp	#LR__2802
21548                 | LR__2796
21548     0B 13 02 F1 | 	add	arg01, arg03
2154c     0B 15 02 F1 | 	add	arg02, arg03
21550     0B 07 0A F6 | 	mov	_var04, arg03 wz
21554     18 00 90 AD |  if_e	jmp	#LR__2801
21558     97 0A 48 FB | 	callpa	#(@LR__2799-@LR__2797)>>2,fcache_load_ptr_
2155c                 | LR__2797
2155c     03 09 D8 FC | 	rep	@LR__2800, _var04
21560                 | LR__2798
21560     01 12 86 F1 | 	sub	arg01, #1
21564     01 14 86 F1 | 	sub	arg02, #1
21568     0A 03 C2 FA | 	rdbyte	_var02, arg02
2156c     09 03 42 FC | 	wrbyte	_var02, arg01
21570                 | LR__2799
21570                 | LR__2800
21570                 | LR__2801
21570                 | LR__2802
21570     00 FB 01 F6 | 	mov	result1, _var01
21574                 | __system____builtin_memmove_ret
21574     2D 00 64 FD | 	ret
21578                 | 
21578                 | __system____builtin_strcpy
21578     09 01 02 F6 | 	mov	_var01, arg01
2157c     97 0A 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
21580                 | LR__2810
21580     0A FB C9 FA | 	rdbyte	result1, arg02 wz
21584     09 FB 41 FC | 	wrbyte	result1, arg01
21588     01 14 06 F1 | 	add	arg02, #1
2158c     01 12 06 F1 | 	add	arg01, #1
21590     EC FF 9F 5D |  if_ne	jmp	#LR__2810
21594                 | LR__2811
21594     00 FB 01 F6 | 	mov	result1, _var01
21598                 | __system____builtin_strcpy_ret
21598     2D 00 64 FD | 	ret
2159c                 | 
2159c                 | __system____topofstack
2159c     00 4A 05 F6 | 	mov	COUNT_, #0
215a0     A8 00 A0 FD | 	call	#pushregs_
215a4     08 F0 07 F1 | 	add	ptra, #8
215a8     04 4E 05 F1 | 	add	fp, #4
215ac     A7 12 62 FC | 	wrlong	arg01, fp
215b0     A7 FA 01 F6 | 	mov	result1, fp
215b4     04 4E 85 F1 | 	sub	fp, #4
215b8     A7 F0 03 F6 | 	mov	ptra, fp
215bc     B2 00 A0 FD | 	call	#popregs_
215c0                 | __system____topofstack_ret
215c0     2D 00 64 FD | 	ret
215c4                 | 
215c4                 | __system___lockmem
215c4     00 FA 05 F6 | 	mov	result1, #0
215c8     01 FA 61 FD | 	cogid	result1
215cc     00 FB 05 F1 | 	add	result1, #256
215d0                 | LR__2820
215d0     09 01 0A FB | 	rdlong	_var01, arg01 wz
215d4     09 FB 61 AC |  if_e	wrlong	result1, arg01
215d8     09 01 02 AB |  if_e	rdlong	_var01, arg01
215dc     09 01 02 AB |  if_e	rdlong	_var01, arg01
215e0     FD 00 0A F2 | 	cmp	_var01, result1 wz
215e4     E8 FF 9F 5D |  if_ne	jmp	#LR__2820
215e8                 | __system___lockmem_ret
215e8     2D 00 64 FD | 	ret
215ec                 | 
215ec                 | __system___string_cmp
215ec     97 14 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
215f0                 | LR__2830
215f0     09 01 C2 FA | 	rdbyte	_var01, arg01
215f4     0A 03 C2 FA | 	rdbyte	_var02, arg02
215f8     00 05 02 F6 | 	mov	_var03, _var01
215fc     01 05 8A F1 | 	sub	_var03, _var02 wz
21600     01 12 06 F1 | 	add	arg01, #1
21604     01 14 06 F1 | 	add	arg02, #1
21608     0C 00 90 5D |  if_ne	jmp	#LR__2832
2160c     00 00 0E F2 | 	cmp	_var01, #0 wz
21610     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
21614     D8 FF 9F 5D |  if_ne	jmp	#LR__2830
21618                 | LR__2831
21618                 | LR__2832
21618     02 FB 01 F6 | 	mov	result1, _var03
2161c                 | __system___string_cmp_ret
2161c     2D 00 64 FD | 	ret
21620                 | 
21620                 | __system___string_concat
21620     05 4A 05 F6 | 	mov	COUNT_, #5
21624     A8 00 A0 FD | 	call	#pushregs_
21628     09 1F 02 F6 | 	mov	local01, arg01
2162c     0A 21 02 F6 | 	mov	local02, arg02
21630     0F 13 02 F6 | 	mov	arg01, local01
21634     09 23 02 F6 | 	mov	local03, arg01
21638     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
2163c                 | LR__2840
2163c     11 FB C9 FA | 	rdbyte	result1, local03 wz
21640     01 22 06 51 |  if_ne	add	local03, #1
21644     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
21648                 | LR__2841
21648     09 23 82 F1 | 	sub	local03, arg01
2164c     11 25 02 F6 | 	mov	local04, local03
21650     10 13 02 F6 | 	mov	arg01, local02
21654     09 23 02 F6 | 	mov	local03, arg01
21658     97 06 48 FB | 	callpa	#(@LR__2843-@LR__2842)>>2,fcache_load_ptr_
2165c                 | LR__2842
2165c     11 FB C9 FA | 	rdbyte	result1, local03 wz
21660     01 22 06 51 |  if_ne	add	local03, #1
21664     F4 FF 9F 5D |  if_ne	jmp	#LR__2842
21668                 | LR__2843
21668     09 23 82 F1 | 	sub	local03, arg01
2166c     12 13 02 F6 | 	mov	arg01, local04
21670     11 13 02 F1 | 	add	arg01, local03
21674     01 12 06 F1 | 	add	arg01, #1
21678     2C 40 B0 FD | 	call	#__system___gc_alloc_managed
2167c     FD 26 0A F6 | 	mov	local05, result1 wz
21680     28 00 90 AD |  if_e	jmp	#LR__2844
21684     13 13 02 F6 | 	mov	arg01, local05
21688     0F 15 02 F6 | 	mov	arg02, local01
2168c     12 17 02 F6 | 	mov	arg03, local04
21690     50 FE BF FD | 	call	#__system____builtin_memmove
21694     13 13 02 F6 | 	mov	arg01, local05
21698     12 13 02 F1 | 	add	arg01, local04
2169c     01 22 06 F1 | 	add	local03, #1
216a0     10 15 02 F6 | 	mov	arg02, local02
216a4     11 17 02 F6 | 	mov	arg03, local03
216a8     38 FE BF FD | 	call	#__system____builtin_memmove
216ac                 | LR__2844
216ac     13 FB 01 F6 | 	mov	result1, local05
216b0     A7 F0 03 F6 | 	mov	ptra, fp
216b4     B2 00 A0 FD | 	call	#popregs_
216b8                 | __system___string_concat_ret
216b8     2D 00 64 FD | 	ret
216bc                 | 
216bc                 | __system___tx
216bc     02 4A 05 F6 | 	mov	COUNT_, #2
216c0     A8 00 A0 FD | 	call	#pushregs_
216c4     09 1F 02 F6 | 	mov	local01, arg01
216c8     0A 1E 0E F2 | 	cmp	local01, #10 wz
216cc     18 00 90 5D |  if_ne	jmp	#LR__2850
216d0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
216d4     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
216d8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
216dc     02 20 CE F7 | 	test	local02, #2 wz
216e0     0D 12 06 56 |  if_ne	mov	arg01, #13
216e4     6C FC BF 5D |  if_ne	call	#__system___txraw
216e8                 | LR__2850
216e8     0F 13 02 F6 | 	mov	arg01, local01
216ec     64 FC BF FD | 	call	#__system___txraw
216f0     A7 F0 03 F6 | 	mov	ptra, fp
216f4     B2 00 A0 FD | 	call	#popregs_
216f8                 | __system___tx_ret
216f8     2D 00 64 FD | 	ret
216fc                 | 
216fc                 | __system___rx
216fc     01 4A 05 F6 | 	mov	COUNT_, #1
21700     A8 00 A0 FD | 	call	#pushregs_
21704                 | LR__2860
21704     00 12 06 F6 | 	mov	arg01, #0
21708     8C FC BF FD | 	call	#__system___rxraw
2170c     FD 1E 02 F6 | 	mov	local01, result1
21710     FF FF 7F FF 
21714     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
21718     E8 FF 9F AD |  if_e	jmp	#LR__2860
2171c     0D 1E 0E F2 | 	cmp	local01, #13 wz
21720     14 00 90 5D |  if_ne	jmp	#LR__2861
21724     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21728     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2172c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21730     02 FA CD F7 | 	test	result1, #2 wz
21734     0A 1E 06 56 |  if_ne	mov	local01, #10
21738                 | LR__2861
21738     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2173c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21740     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21744     01 12 CE F7 | 	test	arg01, #1 wz
21748     1C 00 90 AD |  if_e	jmp	#LR__2864
2174c     7F 1E 0E F2 | 	cmp	local01, #127 wz
21750     0C 00 90 5D |  if_ne	jmp	#LR__2862
21754     08 12 06 F6 | 	mov	arg01, #8
21758     60 FF BF FD | 	call	#__system___tx
2175c     08 00 90 FD | 	jmp	#LR__2863
21760                 | LR__2862
21760     0F 13 02 F6 | 	mov	arg01, local01
21764     54 FF BF FD | 	call	#__system___tx
21768                 | LR__2863
21768                 | LR__2864
21768     0F FB 01 F6 | 	mov	result1, local01
2176c     A7 F0 03 F6 | 	mov	ptra, fp
21770     B2 00 A0 FD | 	call	#popregs_
21774                 | __system___rx_ret
21774     2D 00 64 FD | 	ret
21778                 | 
21778                 | __system___pinwrite
21778     09 01 02 F6 | 	mov	_var01, arg01
2177c     1F 00 06 F5 | 	and	_var01, #31
21780     20 12 CE F7 | 	test	arg01, #32 wz
21784     06 12 46 F0 | 	shr	arg01, #6
21788     09 13 CA F9 | 	bmask	arg01, arg01
2178c     00 13 62 F0 | 	shl	arg01, _var01
21790     00 15 62 F0 | 	shl	arg02, _var01
21794     1C 00 90 AD |  if_e	jmp	#LR__2870
21798     09 F7 43 F5 | 	or	dirb, arg01
2179c     FD 01 02 F6 | 	mov	_var01, outb
217a0     09 01 22 F5 | 	andn	_var01, arg01
217a4     09 15 02 F5 | 	and	arg02, arg01
217a8     0A 01 42 F5 | 	or	_var01, arg02
217ac     00 FB 03 F6 | 	mov	outb, _var01
217b0     18 00 90 FD | 	jmp	#LR__2871
217b4                 | LR__2870
217b4     09 F5 43 F5 | 	or	dira, arg01
217b8     FC 01 02 F6 | 	mov	_var01, outa
217bc     09 01 22 F5 | 	andn	_var01, arg01
217c0     09 15 02 F5 | 	and	arg02, arg01
217c4     0A 01 42 F5 | 	or	_var01, arg02
217c8     00 F9 03 F6 | 	mov	outa, _var01
217cc                 | LR__2871
217cc                 | __system___pinwrite_ret
217cc     2D 00 64 FD | 	ret
217d0                 | 
217d0                 | __system___basic_read_line
217d0     06 4A 05 F6 | 	mov	COUNT_, #6
217d4     A8 00 A0 FD | 	call	#pushregs_
217d8     09 1F 02 F6 | 	mov	local01, arg01
217dc     00 20 06 F6 | 	mov	local02, #0
217e0     18 22 06 F6 | 	mov	local03, #24
217e4     00 24 06 F6 | 	mov	local04, #0
217e8     18 12 06 F6 | 	mov	arg01, #24
217ec     B8 3E B0 FD | 	call	#__system___gc_alloc_managed
217f0     FD 26 0A F6 | 	mov	local05, result1 wz
217f4     13 FB 01 A6 |  if_e	mov	result1, local05
217f8     B0 00 90 AD |  if_e	jmp	#LR__2883
217fc                 | LR__2880
217fc     0F 13 02 F6 | 	mov	arg01, local01
21800     78 0B B0 FD | 	call	#__system___basic_get_char
21804     FD 28 02 F6 | 	mov	local06, result1
21808     01 28 56 F2 | 	cmps	local06, #1 wc
2180c     8C 00 90 CD |  if_b	jmp	#LR__2882
21810     0A 28 0E F2 | 	cmp	local06, #10 wz
21814     10 00 90 5D |  if_ne	jmp	#LR__2881
21818     00 24 0E F2 | 	cmp	local04, #0 wz
2181c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
21820     01 20 86 11 |  if_a	sub	local02, #1
21824     74 00 90 FD | 	jmp	#LR__2882
21828                 | LR__2881
21828     0D 28 0E F2 | 	cmp	local06, #13 wz
2182c     01 24 06 A6 |  if_e	mov	local04, #1
21830     00 24 06 56 |  if_ne	mov	local04, #0
21834     08 28 0E F2 | 	cmp	local06, #8 wz
21838     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
2183c     01 20 56 A2 |  if_e	cmps	local02, #1 wc
21840     01 20 86 21 |  if_nc_and_z	sub	local02, #1
21844     B4 FF 9F AD |  if_e	jmp	#LR__2880
21848     13 17 02 F6 | 	mov	arg03, local05
2184c     10 17 02 F1 | 	add	arg03, local02
21850     0B 29 42 FC | 	wrbyte	local06, arg03
21854     01 20 06 F1 | 	add	local02, #1
21858     11 21 0A F2 | 	cmp	local02, local03 wz
2185c     9C FF 9F 5D |  if_ne	jmp	#LR__2880
21860     11 13 02 F6 | 	mov	arg01, local03
21864     20 12 06 F1 | 	add	arg01, #32
21868     3C 3E B0 FD | 	call	#__system___gc_alloc_managed
2186c     FD 28 0A F6 | 	mov	local06, result1 wz
21870     14 FB 01 A6 |  if_e	mov	result1, local06
21874     34 00 90 AD |  if_e	jmp	#LR__2883
21878     14 13 02 F6 | 	mov	arg01, local06
2187c     13 15 02 F6 | 	mov	arg02, local05
21880     11 17 02 F6 | 	mov	arg03, local03
21884     5C FC BF FD | 	call	#__system____builtin_memmove
21888     20 22 06 F1 | 	add	local03, #32
2188c     13 13 02 F6 | 	mov	arg01, local05
21890     50 3F B0 FD | 	call	#__system___gc_free
21894     14 27 02 F6 | 	mov	local05, local06
21898     60 FF 9F FD | 	jmp	#LR__2880
2189c                 | LR__2882
2189c     13 29 02 F6 | 	mov	local06, local05
218a0     10 29 02 F1 | 	add	local06, local02
218a4     14 01 48 FC | 	wrbyte	#0, local06
218a8     13 FB 01 F6 | 	mov	result1, local05
218ac                 | LR__2883
218ac     A7 F0 03 F6 | 	mov	ptra, fp
218b0     B2 00 A0 FD | 	call	#popregs_
218b4                 | __system___basic_read_line_ret
218b4     2D 00 64 FD | 	ret
218b8                 | 
218b8                 | __system___waitms
218b8     09 01 02 F6 | 	mov	_var01, arg01
218bc     1A 02 62 FD | 	getct	_var02
218c0     14 04 06 FB | 	rdlong	_var03, #20
218c4     97 14 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
218c8                 | LR__2890
218c8     01 00 00 FF 
218cc     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
218d0     1C 00 90 CD |  if_b	jmp	#LR__2892
218d4     02 03 02 F1 | 	add	_var02, _var03
218d8     01 13 02 F6 | 	mov	arg01, _var02
218dc     00 12 66 FA | 	addct1	arg01, #0
218e0     24 22 60 FD | 	waitct1
218e4     01 00 00 FF 
218e8     E8 01 86 F1 | 	sub	_var01, ##1000
218ec     D8 FF 9F FD | 	jmp	#LR__2890
218f0                 | LR__2891
218f0                 | LR__2892
218f0     01 00 56 F2 | 	cmps	_var01, #1 wc
218f4     28 00 90 CD |  if_b	jmp	#LR__2893
218f8     02 01 02 FD | 	qmul	_var01, _var03
218fc     01 00 00 FF 
21900     E8 17 06 F6 | 	mov	arg03, ##1000
21904     19 FA 61 FD | 	getqy	result1
21908     18 12 62 FD | 	getqx	arg01
2190c     28 FA 61 FD | 	setq	result1
21910     0B 13 12 FD | 	qdiv	arg01, arg03
21914     18 12 62 FD | 	getqx	arg01
21918     01 13 62 FA | 	addct1	arg01, _var02
2191c     24 22 60 FD | 	waitct1
21920                 | LR__2893
21920                 | __system___waitms_ret
21920     2D 00 64 FD | 	ret
21924                 | 
21924                 | __system___waitus
21924     09 01 02 F6 | 	mov	_var01, arg01
21928     1A 02 62 FD | 	getct	_var02
2192c     14 04 06 FB | 	rdlong	_var03, #20
21930     97 14 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
21934                 | LR__2900
21934     A1 07 00 FF 
21938     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
2193c     1C 00 90 CD |  if_b	jmp	#LR__2902
21940     02 03 02 F1 | 	add	_var02, _var03
21944     01 13 02 F6 | 	mov	arg01, _var02
21948     00 12 66 FA | 	addct1	arg01, #0
2194c     24 22 60 FD | 	waitct1
21950     A1 07 00 FF 
21954     40 00 86 F1 | 	sub	_var01, ##1000000
21958     D8 FF 9F FD | 	jmp	#LR__2900
2195c                 | LR__2901
2195c                 | LR__2902
2195c     01 00 56 F2 | 	cmps	_var01, #1 wc
21960     28 00 90 CD |  if_b	jmp	#LR__2903
21964     02 01 02 FD | 	qmul	_var01, _var03
21968     A1 07 00 FF 
2196c     40 16 06 F6 | 	mov	arg03, ##1000000
21970     19 FA 61 FD | 	getqy	result1
21974     18 12 62 FD | 	getqx	arg01
21978     28 FA 61 FD | 	setq	result1
2197c     0B 13 12 FD | 	qdiv	arg01, arg03
21980     18 FA 61 FD | 	getqx	result1
21984     FD 02 62 FA | 	addct1	_var02, result1
21988     24 22 60 FD | 	waitct1
2198c                 | LR__2903
2198c                 | __system___waitus_ret
2198c     2D 00 64 FD | 	ret
21990                 | 
21990                 | __system___mount
21990     0B 4A 05 F6 | 	mov	COUNT_, #11
21994     A8 00 A0 FD | 	call	#pushregs_
21998     09 1F 02 F6 | 	mov	local01, arg01
2199c     0A 21 0A F6 | 	mov	local02, arg02 wz
219a0     01 22 66 F6 | 	neg	local03, #1
219a4     01 FA 65 A6 |  if_e	neg	result1, #1
219a8     98 02 90 AD |  if_e	jmp	#LR__2925
219ac     0F FB C1 FA | 	rdbyte	result1, local01
219b0     2F FA 0D F2 | 	cmp	result1, #47 wz
219b4     28 00 90 5D |  if_ne	jmp	#LR__2912
219b8     0F 13 02 F6 | 	mov	arg01, local01
219bc     09 25 02 F6 | 	mov	local04, arg01
219c0     97 06 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
219c4                 | LR__2910
219c4     12 FB C9 FA | 	rdbyte	result1, local04 wz
219c8     01 24 06 51 |  if_ne	add	local04, #1
219cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2910
219d0                 | LR__2911
219d0     09 25 82 F1 | 	sub	local04, arg01
219d4     12 FB 01 F6 | 	mov	result1, local04
219d8     10 FA 55 F2 | 	cmps	result1, #16 wc
219dc     14 00 90 CD |  if_b	jmp	#LR__2913
219e0                 | LR__2912
219e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
219e4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
219e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
219ec     01 FA 65 F6 | 	neg	result1, #1
219f0     50 02 90 FD | 	jmp	#LR__2925
219f4                 | LR__2913
219f4     00 26 06 F6 | 	mov	local05, #0
219f8                 | LR__2914
219f8     04 26 56 F2 | 	cmps	local05, #4 wc
219fc     B0 00 90 3D |  if_ae	jmp	#LR__2919
21a00     13 13 02 F6 | 	mov	arg01, local05
21a04     02 12 66 F0 | 	shl	arg01, #2
21a08     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21a0c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21a10     09 FB 09 FB | 	rdlong	result1, arg01 wz
21a14     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21a18     00 22 56 A2 |  if_e	cmps	local03, #0 wc
21a1c     13 23 02 86 |  if_c_and_z	mov	local03, local05
21a20     84 00 90 8D |  if_c_and_z	jmp	#LR__2918
21a24     13 13 02 F6 | 	mov	arg01, local05
21a28     02 12 66 F0 | 	shl	arg01, #2
21a2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21a30     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21a34     09 13 02 FB | 	rdlong	arg01, arg01
21a38     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21a3c     09 25 02 F6 | 	mov	local04, arg01
21a40     97 06 48 FB | 	callpa	#(@LR__2916-@LR__2915)>>2,fcache_load_ptr_
21a44                 | LR__2915
21a44     12 FB C9 FA | 	rdbyte	result1, local04 wz
21a48     01 24 06 51 |  if_ne	add	local04, #1
21a4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2915
21a50                 | LR__2916
21a50     09 25 82 F1 | 	sub	local04, arg01
21a54     12 29 02 F6 | 	mov	local06, local04
21a58     14 13 02 F6 | 	mov	arg01, local06
21a5c     0F 13 02 F1 | 	add	arg01, local01
21a60     09 FB C1 FA | 	rdbyte	result1, arg01
21a64     2F FA 0D F2 | 	cmp	result1, #47 wz
21a68     14 2B 02 56 |  if_ne	mov	local07, local06
21a6c     0F 2B 02 51 |  if_ne	add	local07, local01
21a70     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
21a74     30 00 90 5D |  if_ne	jmp	#LR__2917
21a78     13 17 02 F6 | 	mov	arg03, local05
21a7c     02 16 66 F0 | 	shl	arg03, #2
21a80     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21a84     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21a88     0B 15 02 FB | 	rdlong	arg02, arg03
21a8c     0F 13 02 F6 | 	mov	arg01, local01
21a90     14 17 02 F6 | 	mov	arg03, local06
21a94     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21a98     4C 51 B0 FD | 	call	#__system__strncmp
21a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
21aa0     13 23 02 A6 |  if_e	mov	local03, local05
21aa4     08 00 90 AD |  if_e	jmp	#LR__2919
21aa8                 | LR__2917
21aa8                 | LR__2918
21aa8     01 26 06 F1 | 	add	local05, #1
21aac     48 FF 9F FD | 	jmp	#LR__2914
21ab0                 | LR__2919
21ab0     FF FF 7F FF 
21ab4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
21ab8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21abc     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
21ac0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21ac4     01 FA 65 A6 |  if_e	neg	result1, #1
21ac8     78 01 90 AD |  if_e	jmp	#LR__2925
21acc     11 27 02 F6 | 	mov	local05, local03
21ad0     13 2B 02 F6 | 	mov	local07, local05
21ad4     02 2A 66 F0 | 	shl	local07, #2
21ad8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21adc     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
21ae0     15 29 0A FB | 	rdlong	local06, local07 wz
21ae4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21ae8     58 00 90 AD |  if_e	jmp	#LR__2920
21aec     4C 28 06 F1 | 	add	local06, #76
21af0     14 2B 0A FB | 	rdlong	local07, local06 wz
21af4     4C 28 86 F1 | 	sub	local06, #76
21af8     48 00 90 AD |  if_e	jmp	#LR__2920
21afc     4C 28 06 F1 | 	add	local06, #76
21b00     14 2B 02 FB | 	rdlong	local07, local06
21b04     15 23 02 F6 | 	mov	local03, local07
21b08     13 2A 46 F7 | 	zerox	local07, #19
21b0c     14 22 46 F0 | 	shr	local03, #20
21b10     02 22 66 F0 | 	shl	local03, #2
21b14     ED 22 02 F1 | 	add	local03, __methods__
21b18     11 23 02 FB | 	rdlong	local03, local03
21b1c     13 29 02 F6 | 	mov	local06, local05
21b20     02 28 66 F0 | 	shl	local06, #2
21b24     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21b28     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21b2c     14 13 02 FB | 	rdlong	arg01, local06
21b30     F2 28 02 F6 | 	mov	local06, objptr
21b34     15 E5 01 F6 | 	mov	objptr, local07
21b38     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21b3c     2D 22 62 FD | 	call	local03
21b40     14 E5 01 F6 | 	mov	objptr, local06
21b44                 | LR__2920
21b44     13 2D 02 F6 | 	mov	local08, local05
21b48     02 2C 66 F0 | 	shl	local08, #2
21b4c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21b50     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21b54     16 21 62 FC | 	wrlong	local02, local08
21b58     00 20 0E F2 | 	cmp	local02, #0 wz
21b5c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21b60     18 00 90 5D |  if_ne	jmp	#LR__2921
21b64     02 26 66 F0 | 	shl	local05, #2
21b68     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21b6c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21b70     13 01 68 FC | 	wrlong	#0, local05
21b74     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21b78     C4 00 90 FD | 	jmp	#LR__2924
21b7c                 | LR__2921
21b7c     13 2F 02 F6 | 	mov	local09, local05
21b80     04 2E 66 F0 | 	shl	local09, #4
21b84     24 E6 05 F1 | 	add	ptr___system__dat__, #36
21b88     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
21b8c     17 13 02 F6 | 	mov	arg01, local09
21b90     0F 15 02 F6 | 	mov	arg02, local01
21b94     10 16 06 F6 | 	mov	arg03, #16
21b98     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
21b9c     9C 4F B0 FD | 	call	#__system__strncpy
21ba0     48 20 06 F1 | 	add	local02, #72
21ba4     10 2D 0A FB | 	rdlong	local08, local02 wz
21ba8     48 20 86 F1 | 	sub	local02, #72
21bac     7C 00 90 AD |  if_e	jmp	#LR__2923
21bb0     48 20 06 F1 | 	add	local02, #72
21bb4     10 2D 02 FB | 	rdlong	local08, local02
21bb8     16 31 02 F6 | 	mov	local10, local08
21bbc     13 2C 46 F7 | 	zerox	local08, #19
21bc0     14 30 46 F0 | 	shr	local10, #20
21bc4     02 30 66 F0 | 	shl	local10, #2
21bc8     ED 30 02 F1 | 	add	local10, __methods__
21bcc     18 31 02 FB | 	rdlong	local10, local10
21bd0     17 13 02 F6 | 	mov	arg01, local09
21bd4     F2 32 02 F6 | 	mov	local11, objptr
21bd8     16 E5 01 F6 | 	mov	objptr, local08
21bdc     2D 30 62 FD | 	call	local10
21be0     19 E5 01 F6 | 	mov	objptr, local11
21be4     FD 12 0A F6 | 	mov	arg01, result1 wz
21be8     40 00 90 AD |  if_e	jmp	#LR__2922
21bec     13 2D 02 F6 | 	mov	local08, local05
21bf0     02 2C 66 F0 | 	shl	local08, #2
21bf4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21bf8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21bfc     16 01 68 FC | 	wrlong	#0, local08
21c00     02 26 66 F0 | 	shl	local05, #2
21c04     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21c08     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21c0c     13 01 68 FC | 	wrlong	#0, local05
21c10     09 13 6A F6 | 	neg	arg01, arg01 wz
21c14     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
21c18     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21c1c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21c20     01 FA 65 56 |  if_ne	neg	result1, #1
21c24     00 FA 05 A6 |  if_e	mov	result1, #0
21c28     18 00 90 FD | 	jmp	#LR__2925
21c2c                 | LR__2922
21c2c                 | LR__2923
21c2c     02 26 66 F0 | 	shl	local05, #2
21c30     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21c34     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21c38     13 2F 62 FC | 	wrlong	local09, local05
21c3c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21c40                 | LR__2924
21c40     00 FA 05 F6 | 	mov	result1, #0
21c44                 | LR__2925
21c44     A7 F0 03 F6 | 	mov	ptra, fp
21c48     B2 00 A0 FD | 	call	#popregs_
21c4c                 | __system___mount_ret
21c4c     2D 00 64 FD | 	ret
21c50                 | 
21c50                 | __system___chdir
21c50     00 4A 05 F6 | 	mov	COUNT_, #0
21c54     A8 00 A0 FD | 	call	#pushregs_
21c58     40 F0 07 F1 | 	add	ptra, #64
21c5c     04 4E 05 F1 | 	add	fp, #4
21c60     A7 12 62 FC | 	wrlong	arg01, fp
21c64     04 4E 05 F1 | 	add	fp, #4
21c68     A7 14 02 F6 | 	mov	arg02, fp
21c6c     08 4E 85 F1 | 	sub	fp, #8
21c70     AC 4A B0 FD | 	call	#__system__stat
21c74     3C 4E 05 F1 | 	add	fp, #60
21c78     A7 FA 61 FC | 	wrlong	result1, fp
21c7c     3C 4E 85 F1 | 	sub	fp, #60
21c80     00 FA 0D F2 | 	cmp	result1, #0 wz
21c84     3C 4E 05 51 |  if_ne	add	fp, #60
21c88     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21c8c     3C 4E 85 51 |  if_ne	sub	fp, #60
21c90     BC 00 90 5D |  if_ne	jmp	#LR__2932
21c94     10 4E 05 F1 | 	add	fp, #16
21c98     A7 12 02 FB | 	rdlong	arg01, fp
21c9c     10 4E 85 F1 | 	sub	fp, #16
21ca0     78 00 00 FF 
21ca4     00 12 06 F5 | 	and	arg01, ##61440
21ca8     08 00 00 FF 
21cac     00 12 0E F2 | 	cmp	arg01, ##4096 wz
21cb0     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
21cb4     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21cb8     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21cbc     01 FA 65 56 |  if_ne	neg	result1, #1
21cc0     8C 00 90 5D |  if_ne	jmp	#LR__2932
21cc4     04 4E 05 F1 | 	add	fp, #4
21cc8     A7 16 02 FB | 	rdlong	arg03, fp
21ccc     04 4E 85 F1 | 	sub	fp, #4
21cd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
21cd4     2F 16 0E F2 | 	cmp	arg03, #47 wz
21cd8     24 00 90 5D |  if_ne	jmp	#LR__2930
21cdc     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21ce0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21ce4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21ce8     04 4E 05 F1 | 	add	fp, #4
21cec     A7 14 02 FB | 	rdlong	arg02, fp
21cf0     04 4E 85 F1 | 	sub	fp, #4
21cf4     00 17 06 F6 | 	mov	arg03, #256
21cf8     40 4E B0 FD | 	call	#__system__strncpy
21cfc     4C 00 90 FD | 	jmp	#LR__2931
21d00                 | LR__2930
21d00     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21d04     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21d08     38 4E 05 F1 | 	add	fp, #56
21d0c     A7 12 62 FC | 	wrlong	arg01, fp
21d10     38 4E 85 F1 | 	sub	fp, #56
21d14     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
21d18     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21d1c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21d20     00 17 06 F6 | 	mov	arg03, #256
21d24     14 4E B0 FD | 	call	#__system__strncpy
21d28     38 4E 05 F1 | 	add	fp, #56
21d2c     A7 12 02 FB | 	rdlong	arg01, fp
21d30     34 4E 85 F1 | 	sub	fp, #52
21d34     A7 14 02 FB | 	rdlong	arg02, fp
21d38     04 4E 85 F1 | 	sub	fp, #4
21d3c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21d40     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
21d44     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21d48     10 00 B0 FD | 	call	#__system____getvfsforfile
21d4c                 | LR__2931
21d4c     00 FA 05 F6 | 	mov	result1, #0
21d50                 | LR__2932
21d50     A7 F0 03 F6 | 	mov	ptra, fp
21d54     B2 00 A0 FD | 	call	#popregs_
21d58                 | __system___chdir_ret
21d58     2D 00 64 FD | 	ret
21d5c                 | 
21d5c                 | __system____getvfsforfile
21d5c     0E 4A 05 F6 | 	mov	COUNT_, #14
21d60     A8 00 A0 FD | 	call	#pushregs_
21d64     09 1F 02 F6 | 	mov	local01, arg01
21d68     0A 21 02 F6 | 	mov	local02, arg02
21d6c     0B 23 02 F6 | 	mov	local03, arg03
21d70     97 10 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
21d74                 | LR__2940
21d74     10 FB C1 FA | 	rdbyte	result1, local02
21d78     2F FA 0D F2 | 	cmp	result1, #47 wz
21d7c     01 20 06 A1 |  if_e	add	local02, #1
21d80     10 25 C2 AA |  if_e	rdbyte	local04, local02
21d84     01 20 86 A1 |  if_e	sub	local02, #1
21d88     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
21d8c     01 20 06 A1 |  if_e	add	local02, #1
21d90     E0 FF 9F AD |  if_e	jmp	#LR__2940
21d94                 | LR__2941
21d94     10 25 C2 FA | 	rdbyte	local04, local02
21d98     2F 24 0E F2 | 	cmp	local04, #47 wz
21d9c     14 00 90 5D |  if_ne	jmp	#LR__2942
21da0     0F 13 02 F6 | 	mov	arg01, local01
21da4     10 15 02 F6 | 	mov	arg02, local02
21da8     00 17 06 F6 | 	mov	arg03, #256
21dac     8C 4D B0 FD | 	call	#__system__strncpy
21db0     7C 00 90 FD | 	jmp	#LR__2944
21db4                 | LR__2942
21db4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21db8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21dbc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21dc0     0F 13 02 F6 | 	mov	arg01, local01
21dc4     00 17 06 F6 | 	mov	arg03, #256
21dc8     70 4D B0 FD | 	call	#__system__strncpy
21dcc     10 25 CA FA | 	rdbyte	local04, local02 wz
21dd0     5C 00 90 AD |  if_e	jmp	#LR__2943
21dd4     10 25 C2 FA | 	rdbyte	local04, local02
21dd8     2E 24 0E F2 | 	cmp	local04, #46 wz
21ddc     01 20 06 A1 |  if_e	add	local02, #1
21de0     10 27 C2 AA |  if_e	rdbyte	local05, local02
21de4     01 20 86 A1 |  if_e	sub	local02, #1
21de8     13 29 02 A6 |  if_e	mov	local06, local05
21dec     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21df0     3C 00 90 AD |  if_e	jmp	#LR__2943
21df4     0F 27 C2 FA | 	rdbyte	local05, local01
21df8     2F 26 0E F2 | 	cmp	local05, #47 wz
21dfc     01 1E 06 A1 |  if_e	add	local01, #1
21e00     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21e04     01 1E 86 A1 |  if_e	sub	local01, #1
21e08     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21e0c     88 01 00 5F 
21e10     D4 14 06 56 |  if_ne	mov	arg02, ##@LR__5070
21e14     0F 13 02 56 |  if_ne	mov	arg01, local01
21e18     00 17 06 56 |  if_ne	mov	arg03, #256
21e1c     68 4D B0 5D |  if_ne	call	#__system__strncat
21e20     0F 13 02 F6 | 	mov	arg01, local01
21e24     10 15 02 F6 | 	mov	arg02, local02
21e28     00 17 06 F6 | 	mov	arg03, #256
21e2c     58 4D B0 FD | 	call	#__system__strncat
21e30                 | LR__2943
21e30                 | LR__2944
21e30     0F 13 02 F6 | 	mov	arg01, local01
21e34     10 4F B0 FD | 	call	#__system___normalizeName
21e38     0F 25 CA FA | 	rdbyte	local04, local01 wz
21e3c     1C 00 90 AD |  if_e	jmp	#LR__2945
21e40     0F 25 C2 FA | 	rdbyte	local04, local01
21e44     2F 24 0E F2 | 	cmp	local04, #47 wz
21e48     01 1E 06 A1 |  if_e	add	local01, #1
21e4c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
21e50     01 1E 86 A1 |  if_e	sub	local01, #1
21e54     00 28 4E A2 |  if_e	cmps	local06, #0 wz
21e58     18 00 90 5D |  if_ne	jmp	#LR__2946
21e5c                 | LR__2945
21e5c     01 00 00 FF 
21e60     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
21e64     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21e68     01 00 00 FF 
21e6c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
21e70     EC 01 90 FD | 	jmp	#LR__2960
21e74                 | LR__2946
21e74     00 2A 06 F6 | 	mov	local07, #0
21e78                 | LR__2947
21e78     04 2A 56 F2 | 	cmps	local07, #4 wc
21e7c     CC 01 90 3D |  if_ae	jmp	#LR__2959
21e80     15 29 02 F6 | 	mov	local06, local07
21e84     02 28 66 F0 | 	shl	local06, #2
21e88     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21e8c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21e90     14 29 0A FB | 	rdlong	local06, local06 wz
21e94     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21e98     A8 01 90 AD |  if_e	jmp	#LR__2958
21e9c     15 25 02 F6 | 	mov	local04, local07
21ea0     02 24 66 F0 | 	shl	local04, #2
21ea4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21ea8     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21eac     12 13 02 FB | 	rdlong	arg01, local04
21eb0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21eb4     09 2D 02 F6 | 	mov	local08, arg01
21eb8     97 06 48 FB | 	callpa	#(@LR__2949-@LR__2948)>>2,fcache_load_ptr_
21ebc                 | LR__2948
21ebc     16 FB C9 FA | 	rdbyte	result1, local08 wz
21ec0     01 2C 06 51 |  if_ne	add	local08, #1
21ec4     F4 FF 9F 5D |  if_ne	jmp	#LR__2948
21ec8                 | LR__2949
21ec8     09 2D 82 F1 | 	sub	local08, arg01
21ecc     16 2F 02 F6 | 	mov	local09, local08
21ed0     17 25 02 F6 | 	mov	local04, local09
21ed4     0F 25 02 F1 | 	add	local04, local01
21ed8     12 29 C2 FA | 	rdbyte	local06, local04
21edc     2F 28 0E F2 | 	cmp	local06, #47 wz
21ee0     17 31 02 56 |  if_ne	mov	local10, local09
21ee4     0F 31 02 51 |  if_ne	add	local10, local01
21ee8     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21eec     54 01 90 5D |  if_ne	jmp	#LR__2957
21ef0     15 17 02 F6 | 	mov	arg03, local07
21ef4     02 16 66 F0 | 	shl	arg03, #2
21ef8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21efc     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21f00     0B 15 02 FB | 	rdlong	arg02, arg03
21f04     17 17 02 F6 | 	mov	arg03, local09
21f08     0F 13 02 F6 | 	mov	arg01, local01
21f0c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21f10     D4 4C B0 FD | 	call	#__system__strncmp
21f14     00 FA 4D F2 | 	cmps	result1, #0 wz
21f18     28 01 90 5D |  if_ne	jmp	#LR__2957
21f1c     15 33 02 F6 | 	mov	local11, local07
21f20     02 32 66 F0 | 	shl	local11, #2
21f24     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21f28     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21f2c     19 35 02 FB | 	rdlong	local12, local11
21f30     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21f34     97 22 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
21f38                 | LR__2950
21f38     17 29 02 F6 | 	mov	local06, local09
21f3c     01 28 06 F1 | 	add	local06, #1
21f40     0F 29 02 F1 | 	add	local06, local01
21f44     14 33 C2 FA | 	rdbyte	local11, local06
21f48     2E 32 0E F2 | 	cmp	local11, #46 wz
21f4c     2C 00 90 5D |  if_ne	jmp	#LR__2952
21f50     17 33 02 F6 | 	mov	local11, local09
21f54     02 32 06 F1 | 	add	local11, #2
21f58     0F 33 02 F1 | 	add	local11, local01
21f5c     19 31 C2 FA | 	rdbyte	local10, local11
21f60     2F 30 0E F2 | 	cmp	local10, #47 wz
21f64     17 37 02 56 |  if_ne	mov	local13, local09
21f68     02 36 06 51 |  if_ne	add	local13, #2
21f6c     0F 37 02 51 |  if_ne	add	local13, local01
21f70     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
21f74     01 2E 06 A1 |  if_e	add	local09, #1
21f78     BC FF 9F AD |  if_e	jmp	#LR__2950
21f7c                 | LR__2951
21f7c                 | LR__2952
21f7c     00 22 0E F2 | 	cmp	local03, #0 wz
21f80     11 13 02 56 |  if_ne	mov	arg01, local03
21f84     0F 15 02 56 |  if_ne	mov	arg02, local01
21f88     00 17 06 56 |  if_ne	mov	arg03, #256
21f8c     AC 4B B0 5D |  if_ne	call	#__system__strncpy
21f90     0F 15 02 F6 | 	mov	arg02, local01
21f94     17 15 02 F1 | 	add	arg02, local09
21f98     01 14 06 F1 | 	add	arg02, #1
21f9c     0F 13 02 F6 | 	mov	arg01, local01
21fa0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21fa4     0F 13 02 F6 | 	mov	arg01, local01
21fa8     09 2D 02 F6 | 	mov	local08, arg01
21fac     97 06 48 FB | 	callpa	#(@LR__2954-@LR__2953)>>2,fcache_load_ptr_
21fb0                 | LR__2953
21fb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
21fb4     01 2C 06 51 |  if_ne	add	local08, #1
21fb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2953
21fbc                 | LR__2954
21fbc     09 2D 82 F1 | 	sub	local08, arg01
21fc0     16 2F 02 F6 | 	mov	local09, local08
21fc4                 | LR__2955
21fc4     01 2E 56 F2 | 	cmps	local09, #1 wc
21fc8     70 00 90 CD |  if_b	jmp	#LR__2956
21fcc     17 25 02 F6 | 	mov	local04, local09
21fd0     0F 25 02 F1 | 	add	local04, local01
21fd4     12 33 C2 FA | 	rdbyte	local11, local04
21fd8     2F 32 0E F2 | 	cmp	local11, #47 wz
21fdc     17 33 02 A6 |  if_e	mov	local11, local09
21fe0     0F 33 02 A1 |  if_e	add	local11, local01
21fe4     19 01 48 AC |  if_e	wrbyte	#0, local11
21fe8     01 2E 86 A1 |  if_e	sub	local09, #1
21fec     D4 FF 9F AD |  if_e	jmp	#LR__2955
21ff0     17 25 02 F6 | 	mov	local04, local09
21ff4     0F 25 02 F1 | 	add	local04, local01
21ff8     12 33 C2 FA | 	rdbyte	local11, local04
21ffc     2E 32 0E F2 | 	cmp	local11, #46 wz
22000     38 00 90 5D |  if_ne	jmp	#LR__2956
22004     02 2E 56 F2 | 	cmps	local09, #2 wc
22008     30 00 90 CD |  if_b	jmp	#LR__2956
2200c     17 39 02 F6 | 	mov	local14, local09
22010     01 38 86 F1 | 	sub	local14, #1
22014     0F 39 02 F1 | 	add	local14, local01
22018     1C 27 C2 FA | 	rdbyte	local05, local14
2201c     2F 26 0E F2 | 	cmp	local05, #47 wz
22020     18 00 90 5D |  if_ne	jmp	#LR__2956
22024     17 25 02 F6 | 	mov	local04, local09
22028     01 24 86 F1 | 	sub	local04, #1
2202c     0F 25 02 F1 | 	add	local04, local01
22030     12 01 48 FC | 	wrbyte	#0, local04
22034     02 2E 86 F1 | 	sub	local09, #2
22038     88 FF 9F FD | 	jmp	#LR__2955
2203c                 | LR__2956
2203c     1A FB 01 F6 | 	mov	result1, local12
22040     1C 00 90 FD | 	jmp	#LR__2960
22044                 | LR__2957
22044                 | LR__2958
22044     01 2A 06 F1 | 	add	local07, #1
22048     2C FE 9F FD | 	jmp	#LR__2947
2204c                 | LR__2959
2204c     02 00 00 FF 
22050     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
22054     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22058     02 00 00 FF 
2205c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22060                 | LR__2960
22060     A7 F0 03 F6 | 	mov	ptra, fp
22064     B2 00 A0 FD | 	call	#popregs_
22068                 | __system____getvfsforfile_ret
22068     2D 00 64 FD | 	ret
2206c                 | 
2206c                 | __system___basic_open
2206c     05 4A 05 F6 | 	mov	COUNT_, #5
22070     A8 00 A0 FD | 	call	#pushregs_
22074     0A 1F 02 F6 | 	mov	local01, arg02
22078     0B 21 02 F6 | 	mov	local02, arg03
2207c     0C 23 02 F6 | 	mov	local03, arg04
22080     00 24 06 F6 | 	mov	local04, #0
22084     8C 4A B0 FD | 	call	#__system____getftab
22088     FD 26 0A F6 | 	mov	local05, result1 wz
2208c     18 00 90 5D |  if_ne	jmp	#LR__2970
22090     EE 12 02 F6 | 	mov	arg01, abortchain
22094     0C 14 06 F6 | 	mov	arg02, #12
22098     01 16 06 F6 | 	mov	arg03, #1
2209c     DA 00 A0 FD | 	call	#__longjmp
220a0     01 FA 65 F6 | 	neg	result1, #1
220a4     14 01 90 FD | 	jmp	#LR__2979
220a8                 | LR__2970
220a8     08 26 06 F1 | 	add	local05, #8
220ac     13 FB 09 FB | 	rdlong	result1, local05 wz
220b0     08 26 86 F1 | 	sub	local05, #8
220b4     13 13 02 56 |  if_ne	mov	arg01, local05
220b8     EC 40 B0 5D |  if_ne	call	#__system___closeraw
220bc     00 1E 0E F2 | 	cmp	local01, #0 wz
220c0     00 20 0E A2 |  if_e	cmp	local02, #0 wz
220c4     00 22 0E A2 |  if_e	cmp	local03, #0 wz
220c8     3C 00 90 AD |  if_e	jmp	#LR__2972
220cc     0C 12 06 F6 | 	mov	arg01, #12
220d0     D4 35 B0 FD | 	call	#__system___gc_alloc_managed
220d4     FD 24 0A F6 | 	mov	local04, result1 wz
220d8     18 00 90 5D |  if_ne	jmp	#LR__2971
220dc     EE 12 02 F6 | 	mov	arg01, abortchain
220e0     07 14 06 F6 | 	mov	arg02, #7
220e4     01 16 06 F6 | 	mov	arg03, #1
220e8     DA 00 A0 FD | 	call	#__longjmp
220ec     01 FA 65 F6 | 	neg	result1, #1
220f0     C8 00 90 FD | 	jmp	#LR__2979
220f4                 | LR__2971
220f4     12 01 68 FC | 	wrlong	#0, local04
220f8     04 24 06 F1 | 	add	local04, #4
220fc     12 01 68 FC | 	wrlong	#0, local04
22100     04 24 86 F1 | 	sub	local04, #4
22104     13 25 62 FC | 	wrlong	local04, local05
22108                 | LR__2972
22108     00 1E 0E F2 | 	cmp	local01, #0 wz
2210c     20 00 90 AD |  if_e	jmp	#LR__2973
22110     12 1F 62 FC | 	wrlong	local01, local04
22114     12 FB 01 F6 | 	mov	result1, local04
22118     00 90 04 FF 
2211c     00 FA 45 F5 | 	or	result1, ##153092096
22120     1C 26 06 F1 | 	add	local05, #28
22124     13 FB 61 FC | 	wrlong	result1, local05
22128     1C 26 86 F1 | 	sub	local05, #28
2212c     0C 00 90 FD | 	jmp	#LR__2974
22130                 | LR__2973
22130     1C 26 06 F1 | 	add	local05, #28
22134     13 01 68 FC | 	wrlong	#0, local05
22138     1C 26 86 F1 | 	sub	local05, #28
2213c                 | LR__2974
2213c     00 20 0E F2 | 	cmp	local02, #0 wz
22140     28 00 90 AD |  if_e	jmp	#LR__2975
22144     04 24 06 F1 | 	add	local04, #4
22148     12 21 62 FC | 	wrlong	local02, local04
2214c     04 24 86 F1 | 	sub	local04, #4
22150     12 FB 01 F6 | 	mov	result1, local04
22154     00 98 04 FF 
22158     00 FA 45 F5 | 	or	result1, ##154140672
2215c     20 26 06 F1 | 	add	local05, #32
22160     13 FB 61 FC | 	wrlong	result1, local05
22164     20 26 86 F1 | 	sub	local05, #32
22168     0C 00 90 FD | 	jmp	#LR__2976
2216c                 | LR__2975
2216c     20 26 06 F1 | 	add	local05, #32
22170     13 01 68 FC | 	wrlong	#0, local05
22174     20 26 86 F1 | 	sub	local05, #32
22178                 | LR__2976
22178     00 22 0E F2 | 	cmp	local03, #0 wz
2217c     24 00 90 AD |  if_e	jmp	#LR__2977
22180     08 24 06 F1 | 	add	local04, #8
22184     12 23 62 FC | 	wrlong	local03, local04
22188     08 24 86 F1 | 	sub	local04, #8
2218c     00 A0 04 FF 
22190     00 24 46 F5 | 	or	local04, ##155189248
22194     24 26 06 F1 | 	add	local05, #36
22198     13 25 62 FC | 	wrlong	local04, local05
2219c     24 26 86 F1 | 	sub	local05, #36
221a0     0C 00 90 FD | 	jmp	#LR__2978
221a4                 | LR__2977
221a4     24 26 06 F1 | 	add	local05, #36
221a8     13 01 68 FC | 	wrlong	#0, local05
221ac     24 26 86 F1 | 	sub	local05, #36
221b0                 | LR__2978
221b0     08 26 06 F1 | 	add	local05, #8
221b4     13 0F 68 FC | 	wrlong	#7, local05
221b8     00 FA 05 F6 | 	mov	result1, #0
221bc                 | LR__2979
221bc     A7 F0 03 F6 | 	mov	ptra, fp
221c0     B2 00 A0 FD | 	call	#popregs_
221c4                 | __system___basic_open_ret
221c4     2D 00 64 FD | 	ret
221c8                 | 
221c8                 | __system___basic_open_string
221c8     04 4A 05 F6 | 	mov	COUNT_, #4
221cc     A8 00 A0 FD | 	call	#pushregs_
221d0     0A 1F 02 F6 | 	mov	local01, arg02
221d4     0B 21 02 F6 | 	mov	local02, arg03
221d8     38 49 B0 FD | 	call	#__system____getftab
221dc     FD 22 0A F6 | 	mov	local03, result1 wz
221e0     18 00 90 5D |  if_ne	jmp	#LR__2980
221e4     EE 12 02 F6 | 	mov	arg01, abortchain
221e8     0C 14 06 F6 | 	mov	arg02, #12
221ec     01 16 06 F6 | 	mov	arg03, #1
221f0     DA 00 A0 FD | 	call	#__longjmp
221f4     01 FA 65 F6 | 	neg	result1, #1
221f8     58 00 90 FD | 	jmp	#LR__2982
221fc                 | LR__2980
221fc     08 22 06 F1 | 	add	local03, #8
22200     11 19 0A FB | 	rdlong	arg04, local03 wz
22204     08 22 86 F1 | 	sub	local03, #8
22208     11 13 02 56 |  if_ne	mov	arg01, local03
2220c     98 3F B0 5D |  if_ne	call	#__system___closeraw
22210     0F 15 02 F6 | 	mov	arg02, local01
22214     10 17 02 F6 | 	mov	arg03, local02
22218     11 13 02 F6 | 	mov	arg01, local03
2221c     B6 19 06 F6 | 	mov	arg04, #438
22220     80 3C B0 FD | 	call	#__system___openraw
22224     FD 24 02 F6 | 	mov	local04, result1
22228     00 24 56 F2 | 	cmps	local04, #0 wc
2222c     20 00 90 3D |  if_ae	jmp	#LR__2981
22230     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22234     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
22238     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2223c     EE 12 02 F6 | 	mov	arg01, abortchain
22240     01 16 06 F6 | 	mov	arg03, #1
22244     DA 00 A0 FD | 	call	#__longjmp
22248     01 FA 65 F6 | 	neg	result1, #1
2224c     04 00 90 FD | 	jmp	#LR__2982
22250                 | LR__2981
22250     12 FB 01 F6 | 	mov	result1, local04
22254                 | LR__2982
22254     A7 F0 03 F6 | 	mov	ptra, fp
22258     B2 00 A0 FD | 	call	#popregs_
2225c                 | __system___basic_open_string_ret
2225c     2D 00 64 FD | 	ret
22260                 | 
22260                 | __system___basic_print_char
22260     03 4A 05 F6 | 	mov	COUNT_, #3
22264     A8 00 A0 FD | 	call	#pushregs_
22268     0A 1F 02 F6 | 	mov	local01, arg02
2226c     F8 4F B0 FD | 	call	#__system___gettxfunc
22270     FD 20 0A F6 | 	mov	local02, result1 wz
22274     00 FA 05 A6 |  if_e	mov	result1, #0
22278     30 00 90 AD |  if_e	jmp	#LR__2990
2227c     10 23 02 F6 | 	mov	local03, local02
22280     13 20 46 F7 | 	zerox	local02, #19
22284     14 22 46 F0 | 	shr	local03, #20
22288     02 22 66 F0 | 	shl	local03, #2
2228c     ED 22 02 F1 | 	add	local03, __methods__
22290     11 23 02 FB | 	rdlong	local03, local03
22294     0F 13 02 F6 | 	mov	arg01, local01
22298     F2 1E 02 F6 | 	mov	local01, objptr
2229c     10 E5 01 F6 | 	mov	objptr, local02
222a0     2D 22 62 FD | 	call	local03
222a4     0F E5 01 F6 | 	mov	objptr, local01
222a8     01 FA 05 F6 | 	mov	result1, #1
222ac                 | LR__2990
222ac     A7 F0 03 F6 | 	mov	ptra, fp
222b0     B2 00 A0 FD | 	call	#popregs_
222b4                 | __system___basic_print_char_ret
222b4     2D 00 64 FD | 	ret
222b8                 | 
222b8                 | __system___basic_print_string
222b8     03 4A 05 F6 | 	mov	COUNT_, #3
222bc     A8 00 A0 FD | 	call	#pushregs_
222c0     0A 1F 02 F6 | 	mov	local01, arg02
222c4     0B 21 02 F6 | 	mov	local02, arg03
222c8     9C 4F B0 FD | 	call	#__system___gettxfunc
222cc     FD 22 0A F6 | 	mov	local03, result1 wz
222d0     00 FA 05 A6 |  if_e	mov	result1, #0
222d4     18 00 90 AD |  if_e	jmp	#LR__3000
222d8     00 1E 0E F2 | 	cmp	local01, #0 wz
222dc     00 FA 05 A6 |  if_e	mov	result1, #0
222e0     11 13 02 56 |  if_ne	mov	arg01, local03
222e4     10 15 02 56 |  if_ne	mov	arg02, local02
222e8     0F 17 02 56 |  if_ne	mov	arg03, local01
222ec     08 02 B0 5D |  if_ne	call	#__system___fmtstr
222f0                 | LR__3000
222f0     A7 F0 03 F6 | 	mov	ptra, fp
222f4     B2 00 A0 FD | 	call	#popregs_
222f8                 | __system___basic_print_string_ret
222f8     2D 00 64 FD | 	ret
222fc                 | 
222fc                 | __system___basic_print_integer
222fc     04 4A 05 F6 | 	mov	COUNT_, #4
22300     A8 00 A0 FD | 	call	#pushregs_
22304     0A 1F 02 F6 | 	mov	local01, arg02
22308     0B 21 02 F6 | 	mov	local02, arg03
2230c     0C 23 02 F6 | 	mov	local03, arg04
22310     54 4F B0 FD | 	call	#__system___gettxfunc
22314     FD 24 0A F6 | 	mov	local04, result1 wz
22318     00 FA 05 A6 |  if_e	mov	result1, #0
2231c     12 13 02 56 |  if_ne	mov	arg01, local04
22320     10 15 02 56 |  if_ne	mov	arg02, local02
22324     0F 17 02 56 |  if_ne	mov	arg03, local01
22328     11 19 02 56 |  if_ne	mov	arg04, local03
2232c     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
22330     A7 F0 03 F6 | 	mov	ptra, fp
22334     B2 00 A0 FD | 	call	#popregs_
22338                 | __system___basic_print_integer_ret
22338     2D 00 64 FD | 	ret
2233c                 | 
2233c                 | __system___basic_print_unsigned
2233c     03 4A 05 F6 | 	mov	COUNT_, #3
22340     A8 00 A0 FD | 	call	#pushregs_
22344     0A 1F 02 F6 | 	mov	local01, arg02
22348     0B 21 02 F6 | 	mov	local02, arg03
2234c     0C 23 02 F6 | 	mov	local03, arg04
22350     14 4F B0 FD | 	call	#__system___gettxfunc
22354     FD 12 0A F6 | 	mov	arg01, result1 wz
22358     00 FA 05 A6 |  if_e	mov	result1, #0
2235c     3A 20 26 54 |  if_ne	bith	local02, #58
22360     10 15 02 56 |  if_ne	mov	arg02, local02
22364     0F 17 02 56 |  if_ne	mov	arg03, local01
22368     11 19 02 56 |  if_ne	mov	arg04, local03
2236c     74 02 B0 5D |  if_ne	call	#__system___fmtnum
22370     A7 F0 03 F6 | 	mov	ptra, fp
22374     B2 00 A0 FD | 	call	#popregs_
22378                 | __system___basic_print_unsigned_ret
22378     2D 00 64 FD | 	ret
2237c                 | 
2237c                 | __system___basic_get_char
2237c     03 4A 05 F6 | 	mov	COUNT_, #3
22380     A8 00 A0 FD | 	call	#pushregs_
22384     24 4F B0 FD | 	call	#__system___getrxfunc
22388     FD 1E 0A F6 | 	mov	local01, result1 wz
2238c     01 FA 65 A6 |  if_e	neg	result1, #1
22390     28 00 90 AD |  if_e	jmp	#LR__3010
22394     0F 21 02 F6 | 	mov	local02, local01
22398     13 1E 46 F7 | 	zerox	local01, #19
2239c     14 20 46 F0 | 	shr	local02, #20
223a0     02 20 66 F0 | 	shl	local02, #2
223a4     ED 20 02 F1 | 	add	local02, __methods__
223a8     10 21 02 FB | 	rdlong	local02, local02
223ac     F2 22 02 F6 | 	mov	local03, objptr
223b0     0F E5 01 F6 | 	mov	objptr, local01
223b4     2D 20 62 FD | 	call	local02
223b8     11 E5 01 F6 | 	mov	objptr, local03
223bc                 | LR__3010
223bc     A7 F0 03 F6 | 	mov	ptra, fp
223c0     B2 00 A0 FD | 	call	#popregs_
223c4                 | __system___basic_get_char_ret
223c4     2D 00 64 FD | 	ret
223c8                 | 
223c8                 | __system___basic_put
223c8     04 4A 05 F6 | 	mov	COUNT_, #4
223cc     A8 00 A0 FD | 	call	#pushregs_
223d0     0D 1F 02 F6 | 	mov	local01, arg05
223d4     0F 19 02 FD | 	qmul	arg04, local01
223d8     09 21 02 F6 | 	mov	local02, arg01
223dc     0B 23 02 F6 | 	mov	local03, arg03
223e0     00 14 0E F2 | 	cmp	arg02, #0 wz
223e4     01 14 86 51 |  if_ne	sub	arg02, #1
223e8     10 13 02 56 |  if_ne	mov	arg01, local02
223ec     00 16 06 56 |  if_ne	mov	arg03, #0
223f0     18 24 62 FD | 	getqx	local04
223f4     A4 44 B0 5D |  if_ne	call	#__system__lseek
223f8     11 15 02 F6 | 	mov	arg02, local03
223fc     12 17 02 F6 | 	mov	arg03, local04
22400     10 13 02 F6 | 	mov	arg01, local02
22404     E0 43 B0 FD | 	call	#__system__write
22408     FD 24 02 F6 | 	mov	local04, result1
2240c     01 24 56 F2 | 	cmps	local04, #1 wc
22410     10 00 90 CD |  if_b	jmp	#LR__3020
22414     12 81 02 F6 | 	mov	muldiva_, local04
22418     0F 83 02 F6 | 	mov	muldivb_, local01
2241c     BA 00 A0 FD | 	call	#divide_
22420     41 25 02 F6 | 	mov	local04, muldivb_
22424                 | LR__3020
22424     12 FB 01 F6 | 	mov	result1, local04
22428     A7 F0 03 F6 | 	mov	ptra, fp
2242c     B2 00 A0 FD | 	call	#popregs_
22430                 | __system___basic_put_ret
22430     2D 00 64 FD | 	ret
22434                 | 
22434                 | __system___basic_get
22434     04 4A 05 F6 | 	mov	COUNT_, #4
22438     A8 00 A0 FD | 	call	#pushregs_
2243c     0D 1F 02 F6 | 	mov	local01, arg05
22440     0F 19 02 FD | 	qmul	arg04, local01
22444     09 21 02 F6 | 	mov	local02, arg01
22448     0B 23 02 F6 | 	mov	local03, arg03
2244c     00 14 0E F2 | 	cmp	arg02, #0 wz
22450     01 14 86 51 |  if_ne	sub	arg02, #1
22454     10 13 02 56 |  if_ne	mov	arg01, local02
22458     00 16 06 56 |  if_ne	mov	arg03, #0
2245c     18 24 62 FD | 	getqx	local04
22460     38 44 B0 5D |  if_ne	call	#__system__lseek
22464     11 15 02 F6 | 	mov	arg02, local03
22468     12 17 02 F6 | 	mov	arg03, local04
2246c     10 13 02 F6 | 	mov	arg01, local02
22470     B0 43 B0 FD | 	call	#__system__read
22474     FD 24 02 F6 | 	mov	local04, result1
22478     01 24 56 F2 | 	cmps	local04, #1 wc
2247c     10 00 90 CD |  if_b	jmp	#LR__3030
22480     12 81 02 F6 | 	mov	muldiva_, local04
22484     0F 83 02 F6 | 	mov	muldivb_, local01
22488     BA 00 A0 FD | 	call	#divide_
2248c     41 25 02 F6 | 	mov	local04, muldivb_
22490                 | LR__3030
22490     12 FB 01 F6 | 	mov	result1, local04
22494     A7 F0 03 F6 | 	mov	ptra, fp
22498     B2 00 A0 FD | 	call	#popregs_
2249c                 | __system___basic_get_ret
2249c     2D 00 64 FD | 	ret
224a0                 | 
224a0                 | __system___fmtchar
224a0     00 4A 05 F6 | 	mov	COUNT_, #0
224a4     A8 00 A0 FD | 	call	#pushregs_
224a8     10 F0 07 F1 | 	add	ptra, #16
224ac     04 4E 05 F1 | 	add	fp, #4
224b0     A7 12 62 FC | 	wrlong	arg01, fp
224b4     04 4E 05 F1 | 	add	fp, #4
224b8     A7 14 62 FC | 	wrlong	arg02, fp
224bc     04 4E 05 F1 | 	add	fp, #4
224c0     A7 16 62 FC | 	wrlong	arg03, fp
224c4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
224c8     A7 16 62 FC | 	wrlong	arg03, fp
224cc     08 4E 85 F1 | 	sub	fp, #8
224d0     A7 12 02 FB | 	rdlong	arg01, fp
224d4     04 4E 05 F1 | 	add	fp, #4
224d8     A7 14 02 FB | 	rdlong	arg02, fp
224dc     04 4E 05 F1 | 	add	fp, #4
224e0     A7 16 02 F6 | 	mov	arg03, fp
224e4     0C 4E 85 F1 | 	sub	fp, #12
224e8     0C 00 B0 FD | 	call	#__system___fmtstr
224ec     A7 F0 03 F6 | 	mov	ptra, fp
224f0     B2 00 A0 FD | 	call	#popregs_
224f4                 | __system___fmtchar_ret
224f4     2D 00 64 FD | 	ret
224f8                 | 
224f8                 | __system___fmtstr
224f8     09 4A 05 F6 | 	mov	COUNT_, #9
224fc     A8 00 A0 FD | 	call	#pushregs_
22500     09 1F 02 F6 | 	mov	local01, arg01
22504     0A 21 02 F6 | 	mov	local02, arg02
22508     0B 23 02 F6 | 	mov	local03, arg03
2250c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
22510     11 13 02 F6 | 	mov	arg01, local03
22514     09 25 02 F6 | 	mov	local04, arg01
22518     97 06 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
2251c                 | LR__3040
2251c     12 FB C9 FA | 	rdbyte	result1, local04 wz
22520     01 24 06 51 |  if_ne	add	local04, #1
22524     F4 FF 9F 5D |  if_ne	jmp	#LR__3040
22528                 | LR__3041
22528     09 25 82 F1 | 	sub	local04, arg01
2252c     00 18 0E F2 | 	cmp	arg04, #0 wz
22530     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
22534     10 15 02 F6 | 	mov	arg02, local02
22538     12 17 02 F6 | 	mov	arg03, local04
2253c     0F 13 02 F6 | 	mov	arg01, local01
22540     02 18 06 F6 | 	mov	arg04, #2
22544     C0 49 B0 FD | 	call	#__system___fmtpad
22548     FD 26 02 F6 | 	mov	local05, result1
2254c     00 26 56 F2 | 	cmps	local05, #0 wc
22550     13 FB 01 C6 |  if_b	mov	result1, local05
22554     80 00 90 CD |  if_b	jmp	#LR__3044
22558     01 24 56 F2 | 	cmps	local04, #1 wc
2255c     50 00 90 CD |  if_b	jmp	#LR__3043
22560     12 29 02 F6 | 	mov	local06, local04
22564                 | LR__3042
22564     0F 2B 02 F6 | 	mov	local07, local01
22568     0F 2D 02 F6 | 	mov	local08, local01
2256c     13 2A 46 F7 | 	zerox	local07, #19
22570     14 2C 46 F0 | 	shr	local08, #20
22574     02 2C 66 F0 | 	shl	local08, #2
22578     ED 2C 02 F1 | 	add	local08, __methods__
2257c     16 2D 02 FB | 	rdlong	local08, local08
22580     11 13 C2 FA | 	rdbyte	arg01, local03
22584     F2 2E 02 F6 | 	mov	local09, objptr
22588     15 E5 01 F6 | 	mov	objptr, local07
2258c     01 22 06 F1 | 	add	local03, #1
22590     2D 2C 62 FD | 	call	local08
22594     17 E5 01 F6 | 	mov	objptr, local09
22598     FD 2E 02 F6 | 	mov	local09, result1
2259c     00 2E 56 F2 | 	cmps	local09, #0 wc
225a0     17 FB 01 C6 |  if_b	mov	result1, local09
225a4     30 00 90 CD |  if_b	jmp	#LR__3044
225a8     17 27 02 F1 | 	add	local05, local09
225ac     ED 29 6E FB | 	djnz	local06, #LR__3042
225b0                 | LR__3043
225b0     10 15 02 F6 | 	mov	arg02, local02
225b4     12 17 02 F6 | 	mov	arg03, local04
225b8     0F 13 02 F6 | 	mov	arg01, local01
225bc     01 18 06 F6 | 	mov	arg04, #1
225c0     44 49 B0 FD | 	call	#__system___fmtpad
225c4     FD 2E 02 F6 | 	mov	local09, result1
225c8     00 2E 56 F2 | 	cmps	local09, #0 wc
225cc     17 FB 01 C6 |  if_b	mov	result1, local09
225d0     17 27 02 31 |  if_ae	add	local05, local09
225d4     13 FB 01 36 |  if_ae	mov	result1, local05
225d8                 | LR__3044
225d8     A7 F0 03 F6 | 	mov	ptra, fp
225dc     B2 00 A0 FD | 	call	#popregs_
225e0                 | __system___fmtstr_ret
225e0     2D 00 64 FD | 	ret
225e4                 | 
225e4                 | __system___fmtnum
225e4     0B 4A 05 F6 | 	mov	COUNT_, #11
225e8     A8 00 A0 FD | 	call	#pushregs_
225ec     09 1F 02 F6 | 	mov	local01, arg01
225f0     0A 21 02 F6 | 	mov	local02, arg02
225f4     0B 23 02 F6 | 	mov	local03, arg03
225f8     0C 25 02 F6 | 	mov	local04, arg04
225fc     F8 27 02 F6 | 	mov	local05, ptra
22600     13 29 02 F6 | 	mov	local06, local05
22604     00 2A 06 F6 | 	mov	local07, #0
22608     10 2D 02 F6 | 	mov	local08, local02
2260c     10 2C 46 F0 | 	shr	local08, #16
22610     3F 2C 06 F5 | 	and	local08, #63
22614     10 2F E2 F8 | 	getbyte	local09, local02, #0
22618     10 31 02 F6 | 	mov	local10, local02
2261c     1A 30 46 F0 | 	shr	local10, #26
22620     03 30 06 F5 | 	and	local10, #3
22624     18 33 02 F6 | 	mov	local11, local10
22628     01 2C 56 F2 | 	cmps	local08, #1 wc
2262c     44 F0 07 F1 | 	add	ptra, #68
22630     01 2C 86 31 |  if_ae	sub	local08, #1
22634     41 2E 56 F2 | 	cmps	local09, #65 wc
22638     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
2263c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
22640     03 32 0E F2 | 	cmp	local11, #3 wz
22644     00 32 06 A6 |  if_e	mov	local11, #0
22648     00 22 56 52 |  if_ne	cmps	local03, #0 wc
2264c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
22650     11 23 62 46 |  if_c_and_nz	neg	local03, local03
22654     00 32 0E F2 | 	cmp	local11, #0 wz
22658     4C 00 90 AD |  if_e	jmp	#LR__3053
2265c     01 2A 06 F6 | 	mov	local07, #1
22660     17 2D 0A F2 | 	cmp	local08, local09 wz
22664     18 00 90 5D |  if_ne	jmp	#LR__3051
22668     05 2C 6E FB | 	djnz	local08, #LR__3050
2266c     0F 13 02 F6 | 	mov	arg01, local01
22670     10 15 02 F6 | 	mov	arg02, local02
22674     23 16 06 F6 | 	mov	arg03, #35
22678     24 FE BF FD | 	call	#__system___fmtchar
2267c     88 00 90 FD | 	jmp	#LR__3057
22680                 | LR__3050
22680                 | LR__3051
22680     02 32 0E F2 | 	cmp	local11, #2 wz
22684     14 31 02 A6 |  if_e	mov	local10, local06
22688     01 28 06 A1 |  if_e	add	local06, #1
2268c     18 41 48 AC |  if_e	wrbyte	#32, local10
22690     14 00 90 AD |  if_e	jmp	#LR__3052
22694     04 32 0E F2 | 	cmp	local11, #4 wz
22698     14 5B 48 AC |  if_e	wrbyte	#45, local06
2269c     01 28 06 A1 |  if_e	add	local06, #1
226a0     14 57 48 5C |  if_ne	wrbyte	#43, local06
226a4     01 28 06 51 |  if_ne	add	local06, #1
226a8                 | LR__3052
226a8                 | LR__3053
226a8     14 13 02 F6 | 	mov	arg01, local06
226ac     11 15 02 F6 | 	mov	arg02, local03
226b0     12 17 02 F6 | 	mov	arg03, local04
226b4     16 19 02 F6 | 	mov	arg04, local08
226b8     00 1A 06 F6 | 	mov	arg05, #0
226bc     1D 20 2E F4 | 	testbn	local02, #29 wz
226c0     01 1A 06 56 |  if_ne	mov	arg05, #1
226c4     08 49 B0 FD | 	call	#__system___uitoa
226c8     FD 2A 02 F1 | 	add	local07, result1
226cc     17 2B 5A F2 | 	cmps	local07, local09 wcz
226d0     24 00 90 ED |  if_be	jmp	#LR__3056
226d4     97 0E 48 FB | 	callpa	#(@LR__3055-@LR__3054)>>2,fcache_load_ptr_
226d8                 | LR__3054
226d8     17 31 02 F6 | 	mov	local10, local09
226dc     01 30 56 F2 | 	cmps	local10, #1 wc
226e0     01 2E 86 F1 | 	sub	local09, #1
226e4     14 31 02 36 |  if_ae	mov	local10, local06
226e8     01 28 06 31 |  if_ae	add	local06, #1
226ec     18 47 48 3C |  if_ae	wrbyte	#35, local10
226f0     E4 FF 9F 3D |  if_ae	jmp	#LR__3054
226f4                 | LR__3055
226f4     14 01 48 FC | 	wrbyte	#0, local06
226f8                 | LR__3056
226f8     0F 13 02 F6 | 	mov	arg01, local01
226fc     10 15 02 F6 | 	mov	arg02, local02
22700     13 17 02 F6 | 	mov	arg03, local05
22704     F0 FD BF FD | 	call	#__system___fmtstr
22708                 | LR__3057
22708     A7 F0 03 F6 | 	mov	ptra, fp
2270c     B2 00 A0 FD | 	call	#popregs_
22710                 | __system___fmtnum_ret
22710     2D 00 64 FD | 	ret
22714                 | 
22714                 | __system___fmtfloat
22714     10 4A 05 F6 | 	mov	COUNT_, #16
22718     A8 00 A0 FD | 	call	#pushregs_
2271c     24 F1 07 F1 | 	add	ptra, #292
22720     04 4E 05 F1 | 	add	fp, #4
22724     A7 12 62 FC | 	wrlong	arg01, fp
22728     04 4E 05 F1 | 	add	fp, #4
2272c     A7 14 62 FC | 	wrlong	arg02, fp
22730     04 4E 05 F1 | 	add	fp, #4
22734     A7 16 62 FC | 	wrlong	arg03, fp
22738     04 4E 05 F1 | 	add	fp, #4
2273c     A7 18 62 FC | 	wrlong	arg04, fp
22740     0C 4E 05 F1 | 	add	fp, #12
22744     A7 14 68 FC | 	wrlong	#10, fp
22748     08 4E 05 F1 | 	add	fp, #8
2274c     A7 00 68 FC | 	wrlong	#0, fp
22750     08 4E 05 F1 | 	add	fp, #8
22754     A7 00 68 FC | 	wrlong	#0, fp
22758     08 4E 05 F1 | 	add	fp, #8
2275c     A7 00 68 FC | 	wrlong	#0, fp
22760     04 4E 05 F1 | 	add	fp, #4
22764     A7 04 68 FC | 	wrlong	#2, fp
22768     04 4E 05 F1 | 	add	fp, #4
2276c     A7 00 68 FC | 	wrlong	#0, fp
22770     04 4E 05 F1 | 	add	fp, #4
22774     A7 00 68 FC | 	wrlong	#0, fp
22778     04 4E 05 F1 | 	add	fp, #4
2277c     A7 00 68 FC | 	wrlong	#0, fp
22780     04 4E 05 F1 | 	add	fp, #4
22784     A7 00 68 FC | 	wrlong	#0, fp
22788     18 4E 05 F1 | 	add	fp, #24
2278c     A7 00 68 FC | 	wrlong	#0, fp
22790     68 4E 05 F1 | 	add	fp, #104
22794     A7 1E 02 F6 | 	mov	local01, fp
22798     08 4E 85 F1 | 	sub	fp, #8
2279c     A7 1E 62 FC | 	wrlong	local01, fp
227a0     04 4E 05 F1 | 	add	fp, #4
227a4     A7 1E 62 FC | 	wrlong	local01, fp
227a8     BC 4E 85 F1 | 	sub	fp, #188
227ac     A7 1E 02 FB | 	rdlong	local01, fp
227b0     10 1E 46 F0 | 	shr	local01, #16
227b4     3F 1E 06 F5 | 	and	local01, #63
227b8     B0 4E 05 F1 | 	add	fp, #176
227bc     A7 1E 62 FC | 	wrlong	local01, fp
227c0     B0 4E 85 F1 | 	sub	fp, #176
227c4     A7 1E 02 FB | 	rdlong	local01, fp
227c8     1C 1E 46 F0 | 	shr	local01, #28
227cc     01 1E 06 F5 | 	and	local01, #1
227d0     08 4F 05 F1 | 	add	fp, #264
227d4     A7 1E 62 FC | 	wrlong	local01, fp
227d8     58 4E 85 F1 | 	sub	fp, #88
227dc     A7 1E 0A FB | 	rdlong	local01, fp wz
227e0     B8 4E 85 F1 | 	sub	fp, #184
227e4     3C 00 90 5D |  if_ne	jmp	#LR__3061
227e8     10 4E 05 F1 | 	add	fp, #16
227ec     A7 1E 02 FB | 	rdlong	local01, fp
227f0     10 4E 85 F1 | 	sub	fp, #16
227f4     61 1E 0E F2 | 	cmp	local01, #97 wz
227f8     18 00 90 5D |  if_ne	jmp	#LR__3060
227fc     B8 4E 05 F1 | 	add	fp, #184
22800     A7 1A 68 FC | 	wrlong	#13, fp
22804     84 4E 85 F1 | 	sub	fp, #132
22808     A7 02 68 FC | 	wrlong	#1, fp
2280c     34 4E 85 F1 | 	sub	fp, #52
22810     24 00 90 FD | 	jmp	#LR__3062
22814                 | LR__3060
22814     B8 4E 05 F1 | 	add	fp, #184
22818     A7 0C 68 FC | 	wrlong	#6, fp
2281c     B8 4E 85 F1 | 	sub	fp, #184
22820     14 00 90 FD | 	jmp	#LR__3062
22824                 | LR__3061
22824     B8 4E 05 F1 | 	add	fp, #184
22828     A7 1E 02 FB | 	rdlong	local01, fp
2282c     01 1E 86 F1 | 	sub	local01, #1
22830     A7 1E 62 FC | 	wrlong	local01, fp
22834     B8 4E 85 F1 | 	sub	fp, #184
22838                 | LR__3062
22838     08 4E 05 F1 | 	add	fp, #8
2283c     A7 1E 02 FB | 	rdlong	local01, fp
22840     16 1E 46 F0 | 	shr	local01, #22
22844     03 1E 06 F5 | 	and	local01, #3
22848     04 4F 05 F1 | 	add	fp, #260
2284c     A7 1E 62 FC | 	wrlong	local01, fp
22850     04 4F 85 F1 | 	sub	fp, #260
22854     A7 1E 02 FB | 	rdlong	local01, fp
22858     1D 1E 46 F0 | 	shr	local01, #29
2285c     01 1E 06 F5 | 	and	local01, #1
22860     B4 4E 05 F1 | 	add	fp, #180
22864     A7 1E 62 FC | 	wrlong	local01, fp
22868     B4 4E 85 F1 | 	sub	fp, #180
2286c     A7 1E 02 FB | 	rdlong	local01, fp
22870     0F 1F EA F8 | 	getbyte	local01, local01, #1
22874     60 4E 05 F1 | 	add	fp, #96
22878     A7 1E 62 FC | 	wrlong	local01, fp
2287c     60 4E 85 F1 | 	sub	fp, #96
22880     A7 1E 02 FB | 	rdlong	local01, fp
22884     0F 1F E2 F8 | 	getbyte	local01, local01, #0
22888     64 4E 05 F1 | 	add	fp, #100
2288c     A7 1E 62 FC | 	wrlong	local01, fp
22890     00 1E 06 F6 | 	mov	local01, #0
22894     5C 4E 85 F1 | 	sub	fp, #92
22898     A7 1A 02 FB | 	rdlong	arg05, fp
2289c     65 1A 0E F2 | 	cmp	arg05, #101 wz
228a0     01 1E 06 A6 |  if_e	mov	local01, #1
228a4     14 4E 05 F1 | 	add	fp, #20
228a8     A7 1E 62 FC | 	wrlong	local01, fp
228ac     98 4E 05 F1 | 	add	fp, #152
228b0     A7 20 0A FB | 	rdlong	local02, fp wz
228b4     45 1E 06 56 |  if_ne	mov	local01, #69
228b8     65 1E 06 A6 |  if_e	mov	local01, #101
228bc     8C 4E 85 F1 | 	sub	fp, #140
228c0     A7 1E 62 FC | 	wrlong	local01, fp
228c4     20 4E 85 F1 | 	sub	fp, #32
228c8     A7 1E 02 FB | 	rdlong	local01, fp
228cc     10 4E 85 F1 | 	sub	fp, #16
228d0     61 1E 0E F2 | 	cmp	local01, #97 wz
228d4     4C 00 90 5D |  if_ne	jmp	#LR__3063
228d8     24 4E 05 F1 | 	add	fp, #36
228dc     A7 02 68 FC | 	wrlong	#1, fp
228e0     98 4E 05 F1 | 	add	fp, #152
228e4     A7 20 0A FB | 	rdlong	local02, fp wz
228e8     50 1E 06 56 |  if_ne	mov	local01, #80
228ec     70 1E 06 A6 |  if_e	mov	local01, #112
228f0     8C 4E 85 F1 | 	sub	fp, #140
228f4     A7 1E 62 FC | 	wrlong	local01, fp
228f8     14 4E 85 F1 | 	sub	fp, #20
228fc     A7 04 68 FC | 	wrlong	#2, fp
22900     1C 4E 05 F1 | 	add	fp, #28
22904     A7 02 68 FC | 	wrlong	#1, fp
22908     84 4E 05 F1 | 	add	fp, #132
2290c     A7 20 0A FB | 	rdlong	local02, fp wz
22910     58 1E 06 56 |  if_ne	mov	local01, #88
22914     78 1E 06 A6 |  if_e	mov	local01, #120
22918     7C 4E 85 F1 | 	sub	fp, #124
2291c     A7 1E 62 FC | 	wrlong	local01, fp
22920     40 4E 85 F1 | 	sub	fp, #64
22924                 | LR__3063
22924     10 4E 05 F1 | 	add	fp, #16
22928     A7 1E 02 FB | 	rdlong	local01, fp
2292c     10 4E 85 F1 | 	sub	fp, #16
22930     23 1E 0E F2 | 	cmp	local01, #35 wz
22934     3C 00 90 5D |  if_ne	jmp	#LR__3066
22938     48 4E 05 F1 | 	add	fp, #72
2293c     A7 02 68 FC | 	wrlong	#1, fp
22940     C8 4E 05 F1 | 	add	fp, #200
22944     A7 1E 0A FB | 	rdlong	local01, fp wz
22948     10 4F 85 F1 | 	sub	fp, #272
2294c     18 00 90 AD |  if_e	jmp	#LR__3064
22950     10 4E 05 F1 | 	add	fp, #16
22954     A7 CC 68 FC | 	wrlong	#102, fp
22958     00 4F 05 F1 | 	add	fp, #256
2295c     A7 00 68 FC | 	wrlong	#0, fp
22960     10 4F 85 F1 | 	sub	fp, #272
22964     0C 00 90 FD | 	jmp	#LR__3065
22968                 | LR__3064
22968     10 4F 05 F1 | 	add	fp, #272
2296c     A7 02 68 FC | 	wrlong	#1, fp
22970     10 4F 85 F1 | 	sub	fp, #272
22974                 | LR__3065
22974                 | LR__3066
22974     08 4E 05 F1 | 	add	fp, #8
22978     A7 1E 02 FB | 	rdlong	local01, fp
2297c     1A 1E 46 F0 | 	shr	local01, #26
22980     03 1E 06 F5 | 	and	local01, #3
22984     5C 4E 05 F1 | 	add	fp, #92
22988     A7 1E 62 FC | 	wrlong	local01, fp
2298c     58 4E 85 F1 | 	sub	fp, #88
22990     A7 FA 01 FB | 	rdlong	result1, fp
22994     0C 4E 85 F1 | 	sub	fp, #12
22998     1F FA 4D F0 | 	shr	result1, #31 wz
2299c     20 00 90 AD |  if_e	jmp	#LR__3067
229a0     2C 4E 05 F1 | 	add	fp, #44
229a4     A7 5A 68 FC | 	wrlong	#45, fp
229a8     20 4E 85 F1 | 	sub	fp, #32
229ac     A7 FA 01 FB | 	rdlong	result1, fp
229b0     1F FA E5 F4 | 	bitnot	result1, #31
229b4     A7 FA 61 FC | 	wrlong	result1, fp
229b8     0C 4E 85 F1 | 	sub	fp, #12
229bc     3C 00 90 FD | 	jmp	#LR__3069
229c0                 | LR__3067
229c0     64 4E 05 F1 | 	add	fp, #100
229c4     A7 1E 02 FB | 	rdlong	local01, fp
229c8     64 4E 85 F1 | 	sub	fp, #100
229cc     01 1E 0E F2 | 	cmp	local01, #1 wz
229d0     2C 4E 05 A1 |  if_e	add	fp, #44
229d4     A7 56 68 AC |  if_e	wrlong	#43, fp
229d8     2C 4E 85 A1 |  if_e	sub	fp, #44
229dc     1C 00 90 AD |  if_e	jmp	#LR__3068
229e0     64 4E 05 F1 | 	add	fp, #100
229e4     A7 1E 02 FB | 	rdlong	local01, fp
229e8     64 4E 85 F1 | 	sub	fp, #100
229ec     02 1E 0E F2 | 	cmp	local01, #2 wz
229f0     2C 4E 05 A1 |  if_e	add	fp, #44
229f4     A7 40 68 AC |  if_e	wrlong	#32, fp
229f8     2C 4E 85 A1 |  if_e	sub	fp, #44
229fc                 | LR__3068
229fc                 | LR__3069
229fc     08 4E 05 F1 | 	add	fp, #8
22a00     A7 1E 02 FB | 	rdlong	local01, fp
22a04     18 1E 46 F0 | 	shr	local01, #24
22a08     03 1E 06 F5 | 	and	local01, #3
22a0c     3C 4E 05 F1 | 	add	fp, #60
22a10     A7 1E 62 FC | 	wrlong	local01, fp
22a14     00 1E 06 F6 | 	mov	local01, #0
22a18     18 4E 85 F1 | 	sub	fp, #24
22a1c     A7 22 0A FB | 	rdlong	local03, fp wz
22a20     2C 4E 85 F1 | 	sub	fp, #44
22a24     18 00 90 5D |  if_ne	jmp	#LR__3070
22a28     1C 4E 05 F1 | 	add	fp, #28
22a2c     A7 24 02 FB | 	rdlong	local04, fp
22a30     1C 4E 85 F1 | 	sub	fp, #28
22a34     12 27 02 F6 | 	mov	local05, local04
22a38     0A 26 0E F2 | 	cmp	local05, #10 wz
22a3c     04 00 90 AD |  if_e	jmp	#LR__3071
22a40                 | LR__3070
22a40     01 1E 66 F5 | 	xor	local01, #1
22a44                 | LR__3071
22a44     3C 4E 05 F1 | 	add	fp, #60
22a48     A7 1E 62 FC | 	wrlong	local01, fp
22a4c     3C 4E 85 F1 | 	sub	fp, #60
22a50     00 1E 0E F2 | 	cmp	local01, #0 wz
22a54     0C 01 90 AD |  if_e	jmp	#LR__3073
22a58     44 4E 05 F1 | 	add	fp, #68
22a5c     A7 26 02 FB | 	rdlong	local05, fp
22a60     44 4E 85 F1 | 	sub	fp, #68
22a64     13 23 02 F6 | 	mov	local03, local05
22a68     02 22 0E F2 | 	cmp	local03, #2 wz
22a6c     F4 00 90 5D |  if_ne	jmp	#LR__3073
22a70     0C 4F 05 F1 | 	add	fp, #268
22a74     A7 28 02 FB | 	rdlong	local06, fp
22a78     0C 4F 85 F1 | 	sub	fp, #268
22a7c     14 25 02 F6 | 	mov	local04, local06
22a80     02 24 0E F2 | 	cmp	local04, #2 wz
22a84     DC 00 90 AD |  if_e	jmp	#LR__3073
22a88     C0 4E 05 F1 | 	add	fp, #192
22a8c     A7 12 02 FB | 	rdlong	arg01, fp
22a90     94 4E 85 F1 | 	sub	fp, #148
22a94     A7 14 02 FB | 	rdlong	arg02, fp
22a98     14 4E 05 F1 | 	add	fp, #20
22a9c     A7 16 02 FB | 	rdlong	arg03, fp
22aa0     40 4E 85 F1 | 	sub	fp, #64
22aa4     90 47 B0 FD | 	call	#__system__emitsign_0530
22aa8     14 4F 05 F1 | 	add	fp, #276
22aac     A7 FA 61 FC | 	wrlong	result1, fp
22ab0     14 4F 85 F1 | 	sub	fp, #276
22ab4     00 FA 55 F2 | 	cmps	result1, #0 wc
22ab8     14 4F 05 C1 |  if_b	add	fp, #276
22abc     A7 FA 01 CB |  if_b	rdlong	result1, fp
22ac0     14 4F 85 C1 |  if_b	sub	fp, #276
22ac4     6C 0B 90 CD |  if_b	jmp	#LR__3123
22ac8     C0 4E 05 F1 | 	add	fp, #192
22acc     A7 1E 02 FB | 	rdlong	local01, fp
22ad0     54 4E 05 F1 | 	add	fp, #84
22ad4     A7 26 02 FB | 	rdlong	local05, fp
22ad8     13 23 02 F6 | 	mov	local03, local05
22adc     13 1F 02 F1 | 	add	local01, local05
22ae0     54 4E 85 F1 | 	sub	fp, #84
22ae4     A7 1E 62 FC | 	wrlong	local01, fp
22ae8     58 4E 85 F1 | 	sub	fp, #88
22aec     A7 1E 0A FB | 	rdlong	local01, fp wz
22af0     68 4E 85 F1 | 	sub	fp, #104
22af4     60 00 90 AD |  if_e	jmp	#LR__3072
22af8     68 4E 05 F1 | 	add	fp, #104
22afc     A7 1E 02 FB | 	rdlong	local01, fp
22b00     AC 4E 05 F1 | 	add	fp, #172
22b04     A7 22 02 FB | 	rdlong	local03, fp
22b08     11 1F 82 F1 | 	sub	local01, local03
22b0c     AC 4E 85 F1 | 	sub	fp, #172
22b10     A7 1E 62 FC | 	wrlong	local01, fp
22b14     68 4E 85 F1 | 	sub	fp, #104
22b18     00 1E 56 F2 | 	cmps	local01, #0 wc
22b1c     68 4E 05 C1 |  if_b	add	fp, #104
22b20     A7 00 68 CC |  if_b	wrlong	#0, fp
22b24     68 4E 85 C1 |  if_b	sub	fp, #104
22b28     08 4E 05 F1 | 	add	fp, #8
22b2c     A7 1E 02 FB | 	rdlong	local01, fp
22b30     E8 1E 06 F4 | 	bitl	local01, #232
22b34     A7 1E 62 FC | 	wrlong	local01, fp
22b38     60 4E 05 F1 | 	add	fp, #96
22b3c     A7 26 02 FB | 	rdlong	local05, fp
22b40     13 23 02 F6 | 	mov	local03, local05
22b44     08 22 66 F0 | 	shl	local03, #8
22b48     11 1F 42 F5 | 	or	local01, local03
22b4c     60 4E 85 F1 | 	sub	fp, #96
22b50     A7 1E 62 FC | 	wrlong	local01, fp
22b54     08 4E 85 F1 | 	sub	fp, #8
22b58                 | LR__3072
22b58     3C 4E 05 F1 | 	add	fp, #60
22b5c     A7 00 68 FC | 	wrlong	#0, fp
22b60     3C 4E 85 F1 | 	sub	fp, #60
22b64                 | LR__3073
22b64     0C 4E 05 F1 | 	add	fp, #12
22b68     A7 12 02 FB | 	rdlong	arg01, fp
22b6c     0C 4E 85 F1 | 	sub	fp, #12
22b70     30 21 B0 FD | 	call	#__system____builtin_ilogb
22b74     FF FF 3F FF 
22b78     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
22b7c     50 00 90 5D |  if_ne	jmp	#LR__3075
22b80     2C 4E 05 F1 | 	add	fp, #44
22b84     A7 1E 0A FB | 	rdlong	local01, fp wz
22b88     2C 4E 85 F1 | 	sub	fp, #44
22b8c     24 00 90 AD |  if_e	jmp	#LR__3074
22b90     C0 4E 05 F1 | 	add	fp, #192
22b94     A7 20 02 FB | 	rdlong	local02, fp
22b98     10 23 02 F6 | 	mov	local03, local02
22b9c     01 22 06 F1 | 	add	local03, #1
22ba0     A7 22 62 FC | 	wrlong	local03, fp
22ba4     94 4E 85 F1 | 	sub	fp, #148
22ba8     A7 24 02 FB | 	rdlong	local04, fp
22bac     2C 4E 85 F1 | 	sub	fp, #44
22bb0     10 25 42 FC | 	wrbyte	local04, local02
22bb4                 | LR__3074
22bb4     C0 4E 05 F1 | 	add	fp, #192
22bb8     A7 12 02 FB | 	rdlong	arg01, fp
22bbc     C0 4E 85 F1 | 	sub	fp, #192
22bc0     88 01 00 FF 
22bc4     D6 14 06 F6 | 	mov	arg02, ##@LR__5071
22bc8     AC E9 BF FD | 	call	#__system____builtin_strcpy
22bcc     A4 08 90 FD | 	jmp	#LR__3111
22bd0                 | LR__3075
22bd0     0C 4E 05 F1 | 	add	fp, #12
22bd4     A7 20 02 FB | 	rdlong	local02, fp
22bd8     0C 4E 85 F1 | 	sub	fp, #12
22bdc     10 13 02 F6 | 	mov	arg01, local02
22be0     C0 20 B0 FD | 	call	#__system____builtin_ilogb
22be4     00 00 40 FF 
22be8     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
22bec     50 00 90 5D |  if_ne	jmp	#LR__3077
22bf0     2C 4E 05 F1 | 	add	fp, #44
22bf4     A7 1E 0A FB | 	rdlong	local01, fp wz
22bf8     2C 4E 85 F1 | 	sub	fp, #44
22bfc     24 00 90 AD |  if_e	jmp	#LR__3076
22c00     C0 4E 05 F1 | 	add	fp, #192
22c04     A7 20 02 FB | 	rdlong	local02, fp
22c08     10 23 02 F6 | 	mov	local03, local02
22c0c     01 22 06 F1 | 	add	local03, #1
22c10     A7 22 62 FC | 	wrlong	local03, fp
22c14     94 4E 85 F1 | 	sub	fp, #148
22c18     A7 24 02 FB | 	rdlong	local04, fp
22c1c     2C 4E 85 F1 | 	sub	fp, #44
22c20     10 25 42 FC | 	wrbyte	local04, local02
22c24                 | LR__3076
22c24     C0 4E 05 F1 | 	add	fp, #192
22c28     A7 12 02 FB | 	rdlong	arg01, fp
22c2c     C0 4E 85 F1 | 	sub	fp, #192
22c30     88 01 00 FF 
22c34     DA 14 06 F6 | 	mov	arg02, ##@LR__5072
22c38     3C E9 BF FD | 	call	#__system____builtin_strcpy
22c3c     34 08 90 FD | 	jmp	#LR__3111
22c40                 | LR__3077
22c40     10 4E 05 F1 | 	add	fp, #16
22c44     A7 1E 02 FB | 	rdlong	local01, fp
22c48     10 4E 85 F1 | 	sub	fp, #16
22c4c     67 1E 0E F2 | 	cmp	local01, #103 wz
22c50     10 4E 05 51 |  if_ne	add	fp, #16
22c54     A7 22 02 5B |  if_ne	rdlong	local03, fp
22c58     10 4E 85 51 |  if_ne	sub	fp, #16
22c5c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
22c60     94 01 90 5D |  if_ne	jmp	#LR__3082
22c64     0C 4E 05 F1 | 	add	fp, #12
22c68     A7 12 02 FB | 	rdlong	arg01, fp
22c6c     08 4E 05 F1 | 	add	fp, #8
22c70     A7 14 02 F6 | 	mov	arg02, fp
22c74     0C 4E 05 F1 | 	add	fp, #12
22c78     A7 16 02 F6 | 	mov	arg03, fp
22c7c     98 4E 05 F1 | 	add	fp, #152
22c80     A7 18 02 FB | 	rdlong	arg04, fp
22c84     9C 4E 85 F1 | 	sub	fp, #156
22c88     A7 1A 02 FB | 	rdlong	arg05, fp
22c8c     1C 4E 85 F1 | 	sub	fp, #28
22c90     B0 43 B0 FD | 	call	#__system__disassemble_0528
22c94     10 4E 05 F1 | 	add	fp, #16
22c98     A7 1E 02 FB | 	rdlong	local01, fp
22c9c     10 4E 85 F1 | 	sub	fp, #16
22ca0     23 1E 0E F2 | 	cmp	local01, #35 wz
22ca4     A0 00 90 5D |  if_ne	jmp	#LR__3079
22ca8     20 4E 05 F1 | 	add	fp, #32
22cac     A7 1E 02 FB | 	rdlong	local01, fp
22cb0     98 4E 05 F1 | 	add	fp, #152
22cb4     A7 22 02 FB | 	rdlong	local03, fp
22cb8     B8 4E 85 F1 | 	sub	fp, #184
22cbc     11 1F 5A F2 | 	cmps	local01, local03 wcz
22cc0     24 4E 05 11 |  if_a	add	fp, #36
22cc4     A7 02 68 1C |  if_a	wrlong	#1, fp
22cc8     24 4E 85 11 |  if_a	sub	fp, #36
22ccc     A4 01 90 1D |  if_a	jmp	#LR__3085
22cd0     20 4E 05 F1 | 	add	fp, #32
22cd4     A7 1E 02 FB | 	rdlong	local01, fp
22cd8     20 4E 85 F1 | 	sub	fp, #32
22cdc     00 1E 56 F2 | 	cmps	local01, #0 wc
22ce0     2C 00 90 3D |  if_ae	jmp	#LR__3078
22ce4     B8 4E 05 F1 | 	add	fp, #184
22ce8     A7 1E 02 FB | 	rdlong	local01, fp
22cec     0F 1F 62 F6 | 	neg	local01, local01
22cf0     98 4E 85 F1 | 	sub	fp, #152
22cf4     A7 22 02 FB | 	rdlong	local03, fp
22cf8     20 4E 85 F1 | 	sub	fp, #32
22cfc     0F 23 5A F2 | 	cmps	local03, local01 wcz
22d00     24 4E 05 E1 |  if_be	add	fp, #36
22d04     A7 02 68 EC |  if_be	wrlong	#1, fp
22d08     24 4E 85 E1 |  if_be	sub	fp, #36
22d0c     64 01 90 FD | 	jmp	#LR__3085
22d10                 | LR__3078
22d10     20 4E 05 F1 | 	add	fp, #32
22d14     A7 1E 02 FB | 	rdlong	local01, fp
22d18     20 4E 85 F1 | 	sub	fp, #32
22d1c     01 1E 56 F2 | 	cmps	local01, #1 wc
22d20     50 01 90 CD |  if_b	jmp	#LR__3085
22d24     B8 4E 05 F1 | 	add	fp, #184
22d28     A7 1E 02 FB | 	rdlong	local01, fp
22d2c     98 4E 85 F1 | 	sub	fp, #152
22d30     A7 22 02 FB | 	rdlong	local03, fp
22d34     11 1F 82 F1 | 	sub	local01, local03
22d38     98 4E 05 F1 | 	add	fp, #152
22d3c     A7 1E 62 FC | 	wrlong	local01, fp
22d40     B8 4E 85 F1 | 	sub	fp, #184
22d44     2C 01 90 FD | 	jmp	#LR__3085
22d48                 | LR__3079
22d48     00 1E 06 F6 | 	mov	local01, #0
22d4c     08 4E 05 F1 | 	add	fp, #8
22d50     A7 20 02 FB | 	rdlong	local02, fp
22d54     1C 20 46 F0 | 	shr	local02, #28
22d58     01 20 0E F5 | 	and	local02, #1 wz
22d5c     01 1E 06 A6 |  if_e	mov	local01, #1
22d60     2C 4E 05 F1 | 	add	fp, #44
22d64     A7 1E 62 FC | 	wrlong	local01, fp
22d68     14 4E 85 F1 | 	sub	fp, #20
22d6c     A7 1E 02 FB | 	rdlong	local01, fp
22d70     98 4E 05 F1 | 	add	fp, #152
22d74     A7 22 02 FB | 	rdlong	local03, fp
22d78     B8 4E 85 F1 | 	sub	fp, #184
22d7c     11 1F 52 F2 | 	cmps	local01, local03 wc
22d80     18 00 90 3D |  if_ae	jmp	#LR__3080
22d84     20 4E 05 F1 | 	add	fp, #32
22d88     A7 24 02 FB | 	rdlong	local04, fp
22d8c     20 4E 85 F1 | 	sub	fp, #32
22d90     FF FF 7F FF 
22d94     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22d98     10 00 90 3D |  if_ae	jmp	#LR__3081
22d9c                 | LR__3080
22d9c     24 4E 05 F1 | 	add	fp, #36
22da0     A7 02 68 FC | 	wrlong	#1, fp
22da4     24 4E 85 F1 | 	sub	fp, #36
22da8     C8 00 90 FD | 	jmp	#LR__3085
22dac                 | LR__3081
22dac     B8 4E 05 F1 | 	add	fp, #184
22db0     A7 24 02 FB | 	rdlong	local04, fp
22db4     98 4E 85 F1 | 	sub	fp, #152
22db8     A7 22 02 FB | 	rdlong	local03, fp
22dbc     11 25 82 F1 | 	sub	local04, local03
22dc0     98 4E 05 F1 | 	add	fp, #152
22dc4     A7 24 62 FC | 	wrlong	local04, fp
22dc8     AC 4E 85 F1 | 	sub	fp, #172
22dcc     A7 12 02 FB | 	rdlong	arg01, fp
22dd0     08 4E 05 F1 | 	add	fp, #8
22dd4     A7 14 02 F6 | 	mov	arg02, fp
22dd8     0C 4E 05 F1 | 	add	fp, #12
22ddc     A7 16 02 F6 | 	mov	arg03, fp
22de0     12 19 62 F6 | 	neg	arg04, local04
22de4     04 4E 85 F1 | 	sub	fp, #4
22de8     A7 1A 02 FB | 	rdlong	arg05, fp
22dec     1C 4E 85 F1 | 	sub	fp, #28
22df0     50 42 B0 FD | 	call	#__system__disassemble_0528
22df4     7C 00 90 FD | 	jmp	#LR__3085
22df8                 | LR__3082
22df8     24 4E 05 F1 | 	add	fp, #36
22dfc     A7 1E 0A FB | 	rdlong	local01, fp wz
22e00     24 4E 85 F1 | 	sub	fp, #36
22e04     34 00 90 AD |  if_e	jmp	#LR__3083
22e08     0C 4E 05 F1 | 	add	fp, #12
22e0c     A7 12 02 FB | 	rdlong	arg01, fp
22e10     08 4E 05 F1 | 	add	fp, #8
22e14     A7 14 02 F6 | 	mov	arg02, fp
22e18     0C 4E 05 F1 | 	add	fp, #12
22e1c     A7 16 02 F6 | 	mov	arg03, fp
22e20     98 4E 05 F1 | 	add	fp, #152
22e24     A7 18 02 FB | 	rdlong	arg04, fp
22e28     9C 4E 85 F1 | 	sub	fp, #156
22e2c     A7 1A 02 FB | 	rdlong	arg05, fp
22e30     1C 4E 85 F1 | 	sub	fp, #28
22e34     0C 42 B0 FD | 	call	#__system__disassemble_0528
22e38     38 00 90 FD | 	jmp	#LR__3084
22e3c                 | LR__3083
22e3c     0C 4E 05 F1 | 	add	fp, #12
22e40     A7 12 02 FB | 	rdlong	arg01, fp
22e44     08 4E 05 F1 | 	add	fp, #8
22e48     A7 14 02 F6 | 	mov	arg02, fp
22e4c     0C 4E 05 F1 | 	add	fp, #12
22e50     A7 16 02 F6 | 	mov	arg03, fp
22e54     98 4E 05 F1 | 	add	fp, #152
22e58     A7 24 02 FB | 	rdlong	local04, fp
22e5c     01 24 06 F1 | 	add	local04, #1
22e60     12 19 62 F6 | 	neg	arg04, local04
22e64     9C 4E 85 F1 | 	sub	fp, #156
22e68     A7 1A 02 FB | 	rdlong	arg05, fp
22e6c     1C 4E 85 F1 | 	sub	fp, #28
22e70     D0 41 B0 FD | 	call	#__system__disassemble_0528
22e74                 | LR__3084
22e74                 | LR__3085
22e74     1C 4E 05 F1 | 	add	fp, #28
22e78     A7 1E 02 FB | 	rdlong	local01, fp
22e7c     1C 4E 85 F1 | 	sub	fp, #28
22e80     02 1E 0E F2 | 	cmp	local01, #2 wz
22e84     4C 00 90 5D |  if_ne	jmp	#LR__3088
22e88     1C 4E 05 F1 | 	add	fp, #28
22e8c     A7 20 68 FC | 	wrlong	#16, fp
22e90     1C 4E 85 F1 | 	sub	fp, #28
22e94                 | LR__3086
22e94     14 4E 05 F1 | 	add	fp, #20
22e98     A7 1E 0A FB | 	rdlong	local01, fp wz
22e9c     14 4E 85 F1 | 	sub	fp, #20
22ea0     30 00 90 AD |  if_e	jmp	#LR__3087
22ea4     14 4E 05 F1 | 	add	fp, #20
22ea8     A7 22 02 FB | 	rdlong	local03, fp
22eac     14 4E 85 F1 | 	sub	fp, #20
22eb0     00 80 00 FF 
22eb4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22eb8     18 00 90 3D |  if_ae	jmp	#LR__3087
22ebc     14 4E 05 F1 | 	add	fp, #20
22ec0     A7 1E 02 FB | 	rdlong	local01, fp
22ec4     01 1E 66 F0 | 	shl	local01, #1
22ec8     A7 1E 62 FC | 	wrlong	local01, fp
22ecc     14 4E 85 F1 | 	sub	fp, #20
22ed0     C0 FF 9F FD | 	jmp	#LR__3086
22ed4                 | LR__3087
22ed4                 | LR__3088
22ed4     70 4E 05 F1 | 	add	fp, #112
22ed8     A7 12 02 F6 | 	mov	arg01, fp
22edc     5C 4E 85 F1 | 	sub	fp, #92
22ee0     A7 14 02 FB | 	rdlong	arg02, fp
22ee4     08 4E 05 F1 | 	add	fp, #8
22ee8     A7 16 02 FB | 	rdlong	arg03, fp
22eec     A0 4E 05 F1 | 	add	fp, #160
22ef0     A7 1A 02 FB | 	rdlong	arg05, fp
22ef4     BC 4E 85 F1 | 	sub	fp, #188
22ef8     01 18 06 F6 | 	mov	arg04, #1
22efc     D0 40 B0 FD | 	call	#__system___uitoa
22f00     58 4E 05 F1 | 	add	fp, #88
22f04     A7 FA 61 FC | 	wrlong	result1, fp
22f08     38 4E 85 F1 | 	sub	fp, #56
22f0c     A7 1E 02 FB | 	rdlong	local01, fp
22f10     20 4E 85 F1 | 	sub	fp, #32
22f14     00 1E 56 F2 | 	cmps	local01, #0 wc
22f18     50 00 90 3D |  if_ae	jmp	#LR__3089
22f1c     60 4E 05 F1 | 	add	fp, #96
22f20     A7 5A 68 FC | 	wrlong	#45, fp
22f24     50 4E 05 F1 | 	add	fp, #80
22f28     A7 12 02 F6 | 	mov	arg01, fp
22f2c     90 4E 85 F1 | 	sub	fp, #144
22f30     A7 22 02 FB | 	rdlong	local03, fp
22f34     11 15 62 F6 | 	neg	arg02, local03
22f38     18 4E 05 F1 | 	add	fp, #24
22f3c     A7 18 02 FB | 	rdlong	arg04, fp
22f40     84 4E 05 F1 | 	add	fp, #132
22f44     A7 28 02 FB | 	rdlong	local06, fp
22f48     BC 4E 85 F1 | 	sub	fp, #188
22f4c     14 25 02 F6 | 	mov	local04, local06
22f50     0A 16 06 F6 | 	mov	arg03, #10
22f54     12 1B 02 F6 | 	mov	arg05, local04
22f58     74 40 B0 FD | 	call	#__system___uitoa
22f5c     5C 4E 05 F1 | 	add	fp, #92
22f60     A7 FA 61 FC | 	wrlong	result1, fp
22f64     5C 4E 85 F1 | 	sub	fp, #92
22f68     48 00 90 FD | 	jmp	#LR__3090
22f6c                 | LR__3089
22f6c     60 4E 05 F1 | 	add	fp, #96
22f70     A7 56 68 FC | 	wrlong	#43, fp
22f74     50 4E 05 F1 | 	add	fp, #80
22f78     A7 12 02 F6 | 	mov	arg01, fp
22f7c     90 4E 85 F1 | 	sub	fp, #144
22f80     A7 14 02 FB | 	rdlong	arg02, fp
22f84     18 4E 05 F1 | 	add	fp, #24
22f88     A7 18 02 FB | 	rdlong	arg04, fp
22f8c     84 4E 05 F1 | 	add	fp, #132
22f90     A7 28 02 FB | 	rdlong	local06, fp
22f94     BC 4E 85 F1 | 	sub	fp, #188
22f98     14 25 02 F6 | 	mov	local04, local06
22f9c     0A 16 06 F6 | 	mov	arg03, #10
22fa0     12 1B 02 F6 | 	mov	arg05, local04
22fa4     28 40 B0 FD | 	call	#__system___uitoa
22fa8     5C 4E 05 F1 | 	add	fp, #92
22fac     A7 FA 61 FC | 	wrlong	result1, fp
22fb0     5C 4E 85 F1 | 	sub	fp, #92
22fb4                 | LR__3090
22fb4     24 4E 05 F1 | 	add	fp, #36
22fb8     A7 1E 0A FB | 	rdlong	local01, fp wz
22fbc     24 4E 85 F1 | 	sub	fp, #36
22fc0     2C 00 90 AD |  if_e	jmp	#LR__3091
22fc4     50 4E 05 F1 | 	add	fp, #80
22fc8     A7 00 68 FC | 	wrlong	#0, fp
22fcc     04 4E 85 F1 | 	sub	fp, #4
22fd0     A7 00 68 FC | 	wrlong	#0, fp
22fd4     6C 4E 05 F1 | 	add	fp, #108
22fd8     A7 1E 02 FB | 	rdlong	local01, fp
22fdc     01 1E 06 F1 | 	add	local01, #1
22fe0     64 4E 85 F1 | 	sub	fp, #100
22fe4     A7 1E 62 FC | 	wrlong	local01, fp
22fe8     54 4E 85 F1 | 	sub	fp, #84
22fec     88 00 90 FD | 	jmp	#LR__3094
22ff0                 | LR__3091
22ff0     20 4E 05 F1 | 	add	fp, #32
22ff4     A7 1E 02 FB | 	rdlong	local01, fp
22ff8     20 4E 85 F1 | 	sub	fp, #32
22ffc     00 1E 56 F2 | 	cmps	local01, #0 wc
23000     40 00 90 3D |  if_ae	jmp	#LR__3092
23004     20 4E 05 F1 | 	add	fp, #32
23008     A7 20 02 FB | 	rdlong	local02, fp
2300c     30 4E 05 F1 | 	add	fp, #48
23010     A7 20 62 FC | 	wrlong	local02, fp
23014     04 4E 85 F1 | 	sub	fp, #4
23018     A7 20 62 FC | 	wrlong	local02, fp
2301c     2C 4E 85 F1 | 	sub	fp, #44
23020     A7 1E 02 FB | 	rdlong	local01, fp
23024     98 4E 05 F1 | 	add	fp, #152
23028     A7 22 02 FB | 	rdlong	local03, fp
2302c     11 1F 02 F1 | 	add	local01, local03
23030     01 1E 06 F1 | 	add	local01, #1
23034     64 4E 85 F1 | 	sub	fp, #100
23038     A7 1E 62 FC | 	wrlong	local01, fp
2303c     54 4E 85 F1 | 	sub	fp, #84
23040     34 00 90 FD | 	jmp	#LR__3093
23044                 | LR__3092
23044     4C 4E 05 F1 | 	add	fp, #76
23048     A7 00 68 FC | 	wrlong	#0, fp
2304c     2C 4E 85 F1 | 	sub	fp, #44
23050     A7 1E 02 FB | 	rdlong	local01, fp
23054     30 4E 05 F1 | 	add	fp, #48
23058     A7 1E 62 FC | 	wrlong	local01, fp
2305c     68 4E 05 F1 | 	add	fp, #104
23060     A7 22 02 FB | 	rdlong	local03, fp
23064     11 1F 02 F1 | 	add	local01, local03
23068     01 1E 06 F1 | 	add	local01, #1
2306c     64 4E 85 F1 | 	sub	fp, #100
23070     A7 1E 62 FC | 	wrlong	local01, fp
23074     54 4E 85 F1 | 	sub	fp, #84
23078                 | LR__3093
23078                 | LR__3094
23078     54 4E 05 F1 | 	add	fp, #84
2307c     A7 1E 02 FB | 	rdlong	local01, fp
23080     08 4E 85 F1 | 	sub	fp, #8
23084     A7 22 02 FB | 	rdlong	local03, fp
23088     11 1F 82 F1 | 	sub	local01, local03
2308c     01 1E 06 F1 | 	add	local01, #1
23090     24 4E 85 F1 | 	sub	fp, #36
23094     A7 1E 62 FC | 	wrlong	local01, fp
23098     04 4E 05 F1 | 	add	fp, #4
2309c     A7 1E 0A FB | 	rdlong	local01, fp wz
230a0     2C 4E 85 F1 | 	sub	fp, #44
230a4     28 4E 05 51 |  if_ne	add	fp, #40
230a8     A7 22 02 5B |  if_ne	rdlong	local03, fp
230ac     01 22 06 51 |  if_ne	add	local03, #1
230b0     A7 22 62 5C |  if_ne	wrlong	local03, fp
230b4     28 4E 85 51 |  if_ne	sub	fp, #40
230b8     1C 4E 05 F1 | 	add	fp, #28
230bc     A7 1E 02 FB | 	rdlong	local01, fp
230c0     1C 4E 85 F1 | 	sub	fp, #28
230c4     10 1E 0E F2 | 	cmp	local01, #16 wz
230c8     28 4E 05 A1 |  if_e	add	fp, #40
230cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
230d0     02 1E 06 A1 |  if_e	add	local01, #2
230d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
230d8     28 4E 85 A1 |  if_e	sub	fp, #40
230dc     24 4E 05 F1 | 	add	fp, #36
230e0     A7 1E 0A FB | 	rdlong	local01, fp wz
230e4     24 4E 85 F1 | 	sub	fp, #36
230e8     28 00 90 AD |  if_e	jmp	#LR__3095
230ec     28 4E 05 F1 | 	add	fp, #40
230f0     A7 1E 02 FB | 	rdlong	local01, fp
230f4     02 22 06 F6 | 	mov	local03, #2
230f8     34 4E 05 F1 | 	add	fp, #52
230fc     A7 26 02 FB | 	rdlong	local05, fp
23100     13 23 02 F1 | 	add	local03, local05
23104     11 1F 02 F1 | 	add	local01, local03
23108     34 4E 85 F1 | 	sub	fp, #52
2310c     A7 1E 62 FC | 	wrlong	local01, fp
23110     28 4E 85 F1 | 	sub	fp, #40
23114                 | LR__3095
23114     28 4E 05 F1 | 	add	fp, #40
23118     A7 1E 02 FB | 	rdlong	local01, fp
2311c     28 4E 85 F1 | 	sub	fp, #40
23120     41 1E 56 F2 | 	cmps	local01, #65 wc
23124     01 FA 65 36 |  if_ae	neg	result1, #1
23128     08 05 90 3D |  if_ae	jmp	#LR__3123
2312c     3C 4E 05 F1 | 	add	fp, #60
23130     A7 1E 0A FB | 	rdlong	local01, fp wz
23134     3C 4E 85 F1 | 	sub	fp, #60
23138     60 00 90 AD |  if_e	jmp	#LR__3096
2313c     C0 4E 05 F1 | 	add	fp, #192
23140     A7 12 02 FB | 	rdlong	arg01, fp
23144     94 4E 85 F1 | 	sub	fp, #148
23148     A7 14 02 FB | 	rdlong	arg02, fp
2314c     14 4E 05 F1 | 	add	fp, #20
23150     A7 16 02 FB | 	rdlong	arg03, fp
23154     40 4E 85 F1 | 	sub	fp, #64
23158     DC 40 B0 FD | 	call	#__system__emitsign_0530
2315c     18 4F 05 F1 | 	add	fp, #280
23160     A7 FA 61 FC | 	wrlong	result1, fp
23164     18 4F 85 F1 | 	sub	fp, #280
23168     00 FA 55 F2 | 	cmps	result1, #0 wc
2316c     18 4F 05 C1 |  if_b	add	fp, #280
23170     A7 FA 01 CB |  if_b	rdlong	result1, fp
23174     18 4F 85 C1 |  if_b	sub	fp, #280
23178     B8 04 90 CD |  if_b	jmp	#LR__3123
2317c     C0 4E 05 F1 | 	add	fp, #192
23180     A7 1E 02 FB | 	rdlong	local01, fp
23184     58 4E 05 F1 | 	add	fp, #88
23188     A7 22 02 FB | 	rdlong	local03, fp
2318c     11 1F 02 F1 | 	add	local01, local03
23190     58 4E 85 F1 | 	sub	fp, #88
23194     A7 1E 62 FC | 	wrlong	local01, fp
23198     C0 4E 85 F1 | 	sub	fp, #192
2319c                 | LR__3096
2319c     4C 4E 05 F1 | 	add	fp, #76
231a0     A7 1E 02 FB | 	rdlong	local01, fp
231a4     34 4E 85 F1 | 	sub	fp, #52
231a8     A7 1E 62 FC | 	wrlong	local01, fp
231ac     18 4E 85 F1 | 	sub	fp, #24
231b0     97 9E 48 FB | 	callpa	#(@LR__3102-@LR__3097)>>2,fcache_load_ptr_
231b4                 | LR__3097
231b4     18 4E 05 F1 | 	add	fp, #24
231b8     A7 20 02 FB | 	rdlong	local02, fp
231bc     3C 4E 05 F1 | 	add	fp, #60
231c0     A7 26 02 FB | 	rdlong	local05, fp
231c4     54 4E 85 F1 | 	sub	fp, #84
231c8     13 21 52 F2 | 	cmps	local02, local05 wc
231cc     20 01 90 3D |  if_ae	jmp	#LR__3103
231d0     18 4E 05 F1 | 	add	fp, #24
231d4     A7 28 02 FB | 	rdlong	local06, fp
231d8     18 4E 85 F1 | 	sub	fp, #24
231dc     00 28 56 F2 | 	cmps	local06, #0 wc
231e0     58 00 90 CD |  if_b	jmp	#LR__3098
231e4     18 4E 05 F1 | 	add	fp, #24
231e8     A7 28 02 FB | 	rdlong	local06, fp
231ec     40 4E 05 F1 | 	add	fp, #64
231f0     A7 2A 02 FB | 	rdlong	local07, fp
231f4     58 4E 85 F1 | 	sub	fp, #88
231f8     15 29 52 F2 | 	cmps	local06, local07 wc
231fc     3C 00 90 3D |  if_ae	jmp	#LR__3098
23200     C0 4E 05 F1 | 	add	fp, #192
23204     A7 2C 02 FB | 	rdlong	local08, fp
23208     16 2B 02 F6 | 	mov	local07, local08
2320c     01 2A 06 F1 | 	add	local07, #1
23210     A7 2A 62 FC | 	wrlong	local07, fp
23214     A8 4E 85 F1 | 	sub	fp, #168
23218     A7 2A 02 FB | 	rdlong	local07, fp
2321c     15 2F 02 F6 | 	mov	local09, local07
23220     58 4E 05 F1 | 	add	fp, #88
23224     A7 30 02 F6 | 	mov	local10, fp
23228     A7 2E 02 F1 | 	add	local09, fp
2322c     17 33 C2 FA | 	rdbyte	local11, local09
23230     16 33 42 FC | 	wrbyte	local11, local08
23234     70 4E 85 F1 | 	sub	fp, #112
23238     20 00 90 FD | 	jmp	#LR__3099
2323c                 | LR__3098
2323c     C0 4E 05 F1 | 	add	fp, #192
23240     A7 2C 02 FB | 	rdlong	local08, fp
23244     16 2F 02 F6 | 	mov	local09, local08
23248     01 2E 06 F1 | 	add	local09, #1
2324c     A7 2E 62 FC | 	wrlong	local09, fp
23250     C0 4E 85 F1 | 	sub	fp, #192
23254     30 2E 06 F6 | 	mov	local09, #48
23258     16 61 48 FC | 	wrbyte	#48, local08
2325c                 | LR__3099
2325c     18 4E 05 F1 | 	add	fp, #24
23260     A7 28 02 FB | 	rdlong	local06, fp
23264     38 4E 05 F1 | 	add	fp, #56
23268     A7 34 02 FB | 	rdlong	local12, fp
2326c     50 4E 85 F1 | 	sub	fp, #80
23270     1A 29 0A F2 | 	cmp	local06, local12 wz
23274     5C 00 90 5D |  if_ne	jmp	#LR__3101
23278     10 4F 05 F1 | 	add	fp, #272
2327c     A7 2A 02 FB | 	rdlong	local07, fp
23280     10 4F 85 F1 | 	sub	fp, #272
23284     15 2F 0A F6 | 	mov	local09, local07 wz
23288     28 00 90 5D |  if_ne	jmp	#LR__3100
2328c     54 4E 05 F1 | 	add	fp, #84
23290     A7 32 02 FB | 	rdlong	local11, fp
23294     19 31 02 F6 | 	mov	local10, local11
23298     01 30 86 F1 | 	sub	local10, #1
2329c     3C 4E 85 F1 | 	sub	fp, #60
232a0     A7 36 02 FB | 	rdlong	local13, fp
232a4     18 4E 85 F1 | 	sub	fp, #24
232a8     1B 39 02 F6 | 	mov	local14, local13
232ac     18 39 52 F2 | 	cmps	local14, local10 wc
232b0     20 00 90 3D |  if_ae	jmp	#LR__3101
232b4                 | LR__3100
232b4     C0 4E 05 F1 | 	add	fp, #192
232b8     A7 2C 02 FB | 	rdlong	local08, fp
232bc     16 35 02 F6 | 	mov	local12, local08
232c0     01 34 06 F1 | 	add	local12, #1
232c4     A7 34 62 FC | 	wrlong	local12, fp
232c8     C0 4E 85 F1 | 	sub	fp, #192
232cc     2E 2E 06 F6 | 	mov	local09, #46
232d0     16 5D 48 FC | 	wrbyte	#46, local08
232d4                 | LR__3101
232d4     18 4E 05 F1 | 	add	fp, #24
232d8     A7 3A 02 FB | 	rdlong	local15, fp
232dc     1D 35 02 F6 | 	mov	local12, local15
232e0     01 34 06 F1 | 	add	local12, #1
232e4     A7 34 62 FC | 	wrlong	local12, fp
232e8     18 4E 85 F1 | 	sub	fp, #24
232ec     C4 FE 9F FD | 	jmp	#LR__3097
232f0                 | LR__3102
232f0                 | LR__3103
232f0     34 4E 05 F1 | 	add	fp, #52
232f4     A7 1E 0A FB | 	rdlong	local01, fp wz
232f8     34 4E 85 F1 | 	sub	fp, #52
232fc     A0 00 90 AD |  if_e	jmp	#LR__3107
23300     C0 4E 05 F1 | 	add	fp, #192
23304     A7 1E 02 FB | 	rdlong	local01, fp
23308     01 1E 86 F1 | 	sub	local01, #1
2330c     A7 1E 62 FC | 	wrlong	local01, fp
23310     C0 4E 85 F1 | 	sub	fp, #192
23314     97 26 48 FB | 	callpa	#(@LR__3105-@LR__3104)>>2,fcache_load_ptr_
23318                 | LR__3104
23318     C0 4E 05 F1 | 	add	fp, #192
2331c     A7 1E 02 FB | 	rdlong	local01, fp
23320     04 4E 05 F1 | 	add	fp, #4
23324     A7 22 02 FB | 	rdlong	local03, fp
23328     C4 4E 85 F1 | 	sub	fp, #196
2332c     11 1F 5A F2 | 	cmps	local01, local03 wcz
23330     30 00 90 ED |  if_be	jmp	#LR__3106
23334     C0 4E 05 F1 | 	add	fp, #192
23338     A7 28 02 FB | 	rdlong	local06, fp
2333c     C0 4E 85 F1 | 	sub	fp, #192
23340     14 25 C2 FA | 	rdbyte	local04, local06
23344     30 24 0E F2 | 	cmp	local04, #48 wz
23348     18 00 90 5D |  if_ne	jmp	#LR__3106
2334c     C0 4E 05 F1 | 	add	fp, #192
23350     A7 1E 02 FB | 	rdlong	local01, fp
23354     01 1E 86 F1 | 	sub	local01, #1
23358     A7 1E 62 FC | 	wrlong	local01, fp
2335c     C0 4E 85 F1 | 	sub	fp, #192
23360     B4 FF 9F FD | 	jmp	#LR__3104
23364                 | LR__3105
23364                 | LR__3106
23364     C0 4E 05 F1 | 	add	fp, #192
23368     A7 20 02 FB | 	rdlong	local02, fp
2336c     C0 4E 85 F1 | 	sub	fp, #192
23370     10 1F C2 FA | 	rdbyte	local01, local02
23374     2E 1E 0E F2 | 	cmp	local01, #46 wz
23378     C0 4E 05 A1 |  if_e	add	fp, #192
2337c     A7 1E 02 AB |  if_e	rdlong	local01, fp
23380     01 1E 86 A1 |  if_e	sub	local01, #1
23384     A7 1E 62 AC |  if_e	wrlong	local01, fp
23388     C0 4E 85 A1 |  if_e	sub	fp, #192
2338c     C0 4E 05 F1 | 	add	fp, #192
23390     A7 22 02 FB | 	rdlong	local03, fp
23394     01 22 06 F1 | 	add	local03, #1
23398     A7 22 62 FC | 	wrlong	local03, fp
2339c     C0 4E 85 F1 | 	sub	fp, #192
233a0                 | LR__3107
233a0     24 4E 05 F1 | 	add	fp, #36
233a4     A7 1E 0A FB | 	rdlong	local01, fp wz
233a8     24 4E 85 F1 | 	sub	fp, #36
233ac     B4 00 90 AD |  if_e	jmp	#LR__3110
233b0     C0 4E 05 F1 | 	add	fp, #192
233b4     A7 20 02 FB | 	rdlong	local02, fp
233b8     10 23 02 F6 | 	mov	local03, local02
233bc     01 22 06 F1 | 	add	local03, #1
233c0     A7 22 62 FC | 	wrlong	local03, fp
233c4     90 4E 85 F1 | 	sub	fp, #144
233c8     A7 24 02 FB | 	rdlong	local04, fp
233cc     10 25 42 FC | 	wrbyte	local04, local02
233d0     90 4E 05 F1 | 	add	fp, #144
233d4     A7 20 02 FB | 	rdlong	local02, fp
233d8     10 23 02 F6 | 	mov	local03, local02
233dc     01 22 06 F1 | 	add	local03, #1
233e0     A7 22 62 FC | 	wrlong	local03, fp
233e4     60 4E 85 F1 | 	sub	fp, #96
233e8     A7 24 02 FB | 	rdlong	local04, fp
233ec     10 25 42 FC | 	wrbyte	local04, local02
233f0     48 4E 85 F1 | 	sub	fp, #72
233f4     A7 00 68 FC | 	wrlong	#0, fp
233f8     18 4E 85 F1 | 	sub	fp, #24
233fc                 | LR__3108
233fc     18 4E 05 F1 | 	add	fp, #24
23400     A7 20 02 FB | 	rdlong	local02, fp
23404     44 4E 05 F1 | 	add	fp, #68
23408     A7 26 02 FB | 	rdlong	local05, fp
2340c     5C 4E 85 F1 | 	sub	fp, #92
23410     13 21 52 F2 | 	cmps	local02, local05 wc
23414     4C 00 90 3D |  if_ae	jmp	#LR__3109
23418     C0 4E 05 F1 | 	add	fp, #192
2341c     A7 2C 02 FB | 	rdlong	local08, fp
23420     16 35 02 F6 | 	mov	local12, local08
23424     01 34 06 F1 | 	add	local12, #1
23428     A7 34 62 FC | 	wrlong	local12, fp
2342c     A8 4E 85 F1 | 	sub	fp, #168
23430     A7 2A 02 FB | 	rdlong	local07, fp
23434     15 2F 02 F6 | 	mov	local09, local07
23438     98 4E 05 F1 | 	add	fp, #152
2343c     A7 30 02 F6 | 	mov	local10, fp
23440     A7 2E 02 F1 | 	add	local09, fp
23444     17 33 C2 FA | 	rdbyte	local11, local09
23448     16 33 42 FC | 	wrbyte	local11, local08
2344c     98 4E 85 F1 | 	sub	fp, #152
23450     A7 34 02 FB | 	rdlong	local12, fp
23454     01 34 06 F1 | 	add	local12, #1
23458     A7 34 62 FC | 	wrlong	local12, fp
2345c     18 4E 85 F1 | 	sub	fp, #24
23460     98 FF 9F FD | 	jmp	#LR__3108
23464                 | LR__3109
23464                 | LR__3110
23464     C0 4E 05 F1 | 	add	fp, #192
23468     A7 1E 02 FB | 	rdlong	local01, fp
2346c     C0 4E 85 F1 | 	sub	fp, #192
23470     0F 01 48 FC | 	wrbyte	#0, local01
23474                 | LR__3111
23474     6C 4E 05 F1 | 	add	fp, #108
23478     A7 1E 0A FB | 	rdlong	local01, fp wz
2347c     6C 4E 85 F1 | 	sub	fp, #108
23480     90 01 90 AD |  if_e	jmp	#LR__3122
23484     48 4E 05 F1 | 	add	fp, #72
23488     A7 22 0A FB | 	rdlong	local03, fp wz
2348c     48 4E 85 F1 | 	sub	fp, #72
23490     80 01 90 AD |  if_e	jmp	#LR__3122
23494     C4 4E 05 F1 | 	add	fp, #196
23498     A7 12 02 FB | 	rdlong	arg01, fp
2349c     C4 4E 85 F1 | 	sub	fp, #196
234a0     09 3D 02 F6 | 	mov	local16, arg01
234a4     97 06 48 FB | 	callpa	#(@LR__3113-@LR__3112)>>2,fcache_load_ptr_
234a8                 | LR__3112
234a8     1E FB C9 FA | 	rdbyte	result1, local16 wz
234ac     01 3C 06 51 |  if_ne	add	local16, #1
234b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3112
234b4                 | LR__3113
234b4     09 3D 82 F1 | 	sub	local16, arg01
234b8     1E 25 02 F6 | 	mov	local04, local16
234bc     6C 4E 05 F1 | 	add	fp, #108
234c0     A7 28 02 FB | 	rdlong	local06, fp
234c4     6C 4E 85 F1 | 	sub	fp, #108
234c8     14 25 5A F2 | 	cmps	local04, local06 wcz
234cc     44 01 90 ED |  if_be	jmp	#LR__3122
234d0     C4 4E 05 F1 | 	add	fp, #196
234d4     A7 1E 02 FB | 	rdlong	local01, fp
234d8     5C 4E 05 F1 | 	add	fp, #92
234dc     A7 1E 62 FC | 	wrlong	local01, fp
234e0     FC 4E 85 F1 | 	sub	fp, #252
234e4     A7 1E 0A FB | 	rdlong	local01, fp wz
234e8     24 4E 85 F1 | 	sub	fp, #36
234ec     20 00 90 AD |  if_e	jmp	#LR__3114
234f0     B8 4E 05 F1 | 	add	fp, #184
234f4     A7 00 68 FC | 	wrlong	#0, fp
234f8     4C 4E 85 F1 | 	sub	fp, #76
234fc     A7 1E 02 FB | 	rdlong	local01, fp
23500     B0 4E 05 F1 | 	add	fp, #176
23504     A7 1E 62 FC | 	wrlong	local01, fp
23508     1C 4F 85 F1 | 	sub	fp, #284
2350c     24 00 90 FD | 	jmp	#LR__3115
23510                 | LR__3114
23510     6C 4E 05 F1 | 	add	fp, #108
23514     A7 1E 02 FB | 	rdlong	local01, fp
23518     01 1E 86 F1 | 	sub	local01, #1
2351c     4C 4E 05 F1 | 	add	fp, #76
23520     A7 22 02 FB | 	rdlong	local03, fp
23524     11 1F 82 F1 | 	sub	local01, local03
23528     64 4E 05 F1 | 	add	fp, #100
2352c     A7 1E 62 FC | 	wrlong	local01, fp
23530     1C 4F 85 F1 | 	sub	fp, #284
23534                 | LR__3115
23534     97 20 48 FB | 	callpa	#(@LR__3117-@LR__3116)>>2,fcache_load_ptr_
23538                 | LR__3116
23538     1C 4F 05 F1 | 	add	fp, #284
2353c     A7 1E 0A FB | 	rdlong	local01, fp wz
23540     1C 4F 85 F1 | 	sub	fp, #284
23544     30 00 90 AD |  if_e	jmp	#LR__3118
23548     20 4F 05 F1 | 	add	fp, #288
2354c     A7 20 02 FB | 	rdlong	local02, fp
23550     10 23 02 F6 | 	mov	local03, local02
23554     01 22 06 F1 | 	add	local03, #1
23558     A7 22 62 FC | 	wrlong	local03, fp
2355c     10 55 48 FC | 	wrbyte	#42, local02
23560     04 4E 85 F1 | 	sub	fp, #4
23564     A7 1E 02 FB | 	rdlong	local01, fp
23568     01 1E 86 F1 | 	sub	local01, #1
2356c     A7 1E 62 FC | 	wrlong	local01, fp
23570     1C 4F 85 F1 | 	sub	fp, #284
23574     C0 FF 9F FD | 	jmp	#LR__3116
23578                 | LR__3117
23578                 | LR__3118
23578     B8 4E 05 F1 | 	add	fp, #184
2357c     A7 1E 0A FB | 	rdlong	local01, fp wz
23580     B8 4E 85 F1 | 	sub	fp, #184
23584     70 00 90 AD |  if_e	jmp	#LR__3121
23588     20 4F 05 F1 | 	add	fp, #288
2358c     A7 20 02 FB | 	rdlong	local02, fp
23590     10 23 02 F6 | 	mov	local03, local02
23594     01 22 06 F1 | 	add	local03, #1
23598     A7 22 62 FC | 	wrlong	local03, fp
2359c     10 5D 48 FC | 	wrbyte	#46, local02
235a0     04 4E 85 F1 | 	sub	fp, #4
235a4     A7 00 68 FC | 	wrlong	#0, fp
235a8     1C 4F 85 F1 | 	sub	fp, #284
235ac                 | LR__3119
235ac     1C 4F 05 F1 | 	add	fp, #284
235b0     A7 20 02 FB | 	rdlong	local02, fp
235b4     64 4E 85 F1 | 	sub	fp, #100
235b8     A7 26 02 FB | 	rdlong	local05, fp
235bc     B8 4E 85 F1 | 	sub	fp, #184
235c0     13 21 52 F2 | 	cmps	local02, local05 wc
235c4     30 00 90 3D |  if_ae	jmp	#LR__3120
235c8     20 4F 05 F1 | 	add	fp, #288
235cc     A7 2C 02 FB | 	rdlong	local08, fp
235d0     16 35 02 F6 | 	mov	local12, local08
235d4     01 34 06 F1 | 	add	local12, #1
235d8     A7 34 62 FC | 	wrlong	local12, fp
235dc     16 55 48 FC | 	wrbyte	#42, local08
235e0     04 4E 85 F1 | 	sub	fp, #4
235e4     A7 34 02 FB | 	rdlong	local12, fp
235e8     01 34 06 F1 | 	add	local12, #1
235ec     A7 34 62 FC | 	wrlong	local12, fp
235f0     1C 4F 85 F1 | 	sub	fp, #284
235f4     B4 FF 9F FD | 	jmp	#LR__3119
235f8                 | LR__3120
235f8                 | LR__3121
235f8     20 4F 05 F1 | 	add	fp, #288
235fc     A7 20 02 FB | 	rdlong	local02, fp
23600     10 23 02 F6 | 	mov	local03, local02
23604     01 22 06 F1 | 	add	local03, #1
23608     A7 22 62 FC | 	wrlong	local03, fp
2360c     20 4F 85 F1 | 	sub	fp, #288
23610     10 01 48 FC | 	wrbyte	#0, local02
23614                 | LR__3122
23614     04 4E 05 F1 | 	add	fp, #4
23618     A7 12 02 FB | 	rdlong	arg01, fp
2361c     04 4E 05 F1 | 	add	fp, #4
23620     A7 14 02 FB | 	rdlong	arg02, fp
23624     BC 4E 05 F1 | 	add	fp, #188
23628     A7 16 02 FB | 	rdlong	arg03, fp
2362c     C4 4E 85 F1 | 	sub	fp, #196
23630     C4 EE BF FD | 	call	#__system___fmtstr
23634                 | LR__3123
23634     A7 F0 03 F6 | 	mov	ptra, fp
23638     B2 00 A0 FD | 	call	#popregs_
2363c                 | __system___fmtfloat_ret
2363c     2D 00 64 FD | 	ret
23640                 | 
23640                 | __system__Left_S
23640     04 4A 05 F6 | 	mov	COUNT_, #4
23644     A8 00 A0 FD | 	call	#pushregs_
23648     09 1F 02 F6 | 	mov	local01, arg01
2364c     0A 21 02 F6 | 	mov	local02, arg02
23650     01 20 56 F2 | 	cmps	local02, #1 wc
23654     88 01 00 CF 
23658     DE FA 05 C6 |  if_b	mov	result1, ##@LR__5073
2365c     5C 00 90 CD |  if_b	jmp	#LR__3133
23660     0F 13 02 F6 | 	mov	arg01, local01
23664     09 23 02 F6 | 	mov	local03, arg01
23668     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
2366c                 | LR__3130
2366c     11 FB C9 FA | 	rdbyte	result1, local03 wz
23670     01 22 06 51 |  if_ne	add	local03, #1
23674     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
23678                 | LR__3131
23678     09 23 82 F1 | 	sub	local03, arg01
2367c     11 FB 01 F6 | 	mov	result1, local03
23680     10 FB 59 F2 | 	cmps	result1, local02 wcz
23684     0F FB 01 E6 |  if_be	mov	result1, local01
23688     30 00 90 ED |  if_be	jmp	#LR__3133
2368c     10 13 02 F6 | 	mov	arg01, local02
23690     02 12 06 F1 | 	add	arg01, #2
23694     10 20 B0 FD | 	call	#__system___gc_alloc_managed
23698     FD 24 0A F6 | 	mov	local04, result1 wz
2369c     18 00 90 AD |  if_e	jmp	#LR__3132
236a0     12 13 02 F6 | 	mov	arg01, local04
236a4     0F 15 02 F6 | 	mov	arg02, local01
236a8     10 17 02 F6 | 	mov	arg03, local02
236ac     34 DE BF FD | 	call	#__system____builtin_memmove
236b0     12 21 02 F1 | 	add	local02, local04
236b4     10 01 48 FC | 	wrbyte	#0, local02
236b8                 | LR__3132
236b8     12 FB 01 F6 | 	mov	result1, local04
236bc                 | LR__3133
236bc     A7 F0 03 F6 | 	mov	ptra, fp
236c0     B2 00 A0 FD | 	call	#popregs_
236c4                 | __system__Left_S_ret
236c4     2D 00 64 FD | 	ret
236c8                 | 
236c8                 | __system__Right_S
236c8     05 4A 05 F6 | 	mov	COUNT_, #5
236cc     A8 00 A0 FD | 	call	#pushregs_
236d0     09 1F 02 F6 | 	mov	local01, arg01
236d4     0A 21 02 F6 | 	mov	local02, arg02
236d8     01 20 56 F2 | 	cmps	local02, #1 wc
236dc     88 01 00 CF 
236e0     DF FA 05 C6 |  if_b	mov	result1, ##@LR__5074
236e4     64 00 90 CD |  if_b	jmp	#LR__3143
236e8     0F 13 02 F6 | 	mov	arg01, local01
236ec     09 23 02 F6 | 	mov	local03, arg01
236f0     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
236f4                 | LR__3140
236f4     11 FB C9 FA | 	rdbyte	result1, local03 wz
236f8     01 22 06 51 |  if_ne	add	local03, #1
236fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
23700                 | LR__3141
23700     09 23 82 F1 | 	sub	local03, arg01
23704     11 FB 01 F6 | 	mov	result1, local03
23708     FD 24 02 F6 | 	mov	local04, result1
2370c     10 25 5A F2 | 	cmps	local04, local02 wcz
23710     0F FB 01 E6 |  if_be	mov	result1, local01
23714     34 00 90 ED |  if_be	jmp	#LR__3143
23718     10 13 02 F6 | 	mov	arg01, local02
2371c     02 12 06 F1 | 	add	arg01, #2
23720     84 1F B0 FD | 	call	#__system___gc_alloc_managed
23724     FD 26 0A F6 | 	mov	local05, result1 wz
23728     1C 00 90 AD |  if_e	jmp	#LR__3142
2372c     10 25 82 F1 | 	sub	local04, local02
23730     0F 25 02 F1 | 	add	local04, local01
23734     01 20 06 F1 | 	add	local02, #1
23738     13 13 02 F6 | 	mov	arg01, local05
2373c     12 15 02 F6 | 	mov	arg02, local04
23740     10 17 02 F6 | 	mov	arg03, local02
23744     9C DD BF FD | 	call	#__system____builtin_memmove
23748                 | LR__3142
23748     13 FB 01 F6 | 	mov	result1, local05
2374c                 | LR__3143
2374c     A7 F0 03 F6 | 	mov	ptra, fp
23750     B2 00 A0 FD | 	call	#popregs_
23754                 | __system__Right_S_ret
23754     2D 00 64 FD | 	ret
23758                 | 
23758                 | __system__Mid_S
23758     05 4A 05 F6 | 	mov	COUNT_, #5
2375c     A8 00 A0 FD | 	call	#pushregs_
23760     09 1F 02 F6 | 	mov	local01, arg01
23764     0A 21 02 F6 | 	mov	local02, arg02
23768     01 16 56 F2 | 	cmps	arg03, #1 wc
2376c     88 01 00 CF 
23770     E0 FA 05 C6 |  if_b	mov	result1, ##@LR__5075
23774     80 00 90 CD |  if_b	jmp	#LR__3153
23778     01 20 86 F1 | 	sub	local02, #1
2377c     00 20 56 F3 | 	fges	local02, #0 wc
23780     0F 13 02 F6 | 	mov	arg01, local01
23784     09 23 02 F6 | 	mov	local03, arg01
23788     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
2378c                 | LR__3150
2378c     11 FB C9 FA | 	rdbyte	result1, local03 wz
23790     01 22 06 51 |  if_ne	add	local03, #1
23794     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
23798                 | LR__3151
23798     09 23 82 F1 | 	sub	local03, arg01
2379c     11 FB 01 F6 | 	mov	result1, local03
237a0     FD 14 02 F6 | 	mov	arg02, result1
237a4     10 15 52 F2 | 	cmps	arg02, local02 wc
237a8     88 01 00 CF 
237ac     E1 FA 05 C6 |  if_b	mov	result1, ##@LR__5076
237b0     44 00 90 CD |  if_b	jmp	#LR__3153
237b4     0A 25 02 F6 | 	mov	local04, arg02
237b8     10 25 82 F1 | 	sub	local04, local02
237bc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
237c0     0B 25 02 16 |  if_a	mov	local04, arg03
237c4     12 13 02 F6 | 	mov	arg01, local04
237c8     02 12 06 F1 | 	add	arg01, #2
237cc     D8 1E B0 FD | 	call	#__system___gc_alloc_managed
237d0     FD 26 0A F6 | 	mov	local05, result1 wz
237d4     1C 00 90 AD |  if_e	jmp	#LR__3152
237d8     0F 21 02 F1 | 	add	local02, local01
237dc     13 13 02 F6 | 	mov	arg01, local05
237e0     10 15 02 F6 | 	mov	arg02, local02
237e4     12 17 02 F6 | 	mov	arg03, local04
237e8     F8 DC BF FD | 	call	#__system____builtin_memmove
237ec     13 25 02 F1 | 	add	local04, local05
237f0     12 01 48 FC | 	wrbyte	#0, local04
237f4                 | LR__3152
237f4     13 FB 01 F6 | 	mov	result1, local05
237f8                 | LR__3153
237f8     A7 F0 03 F6 | 	mov	ptra, fp
237fc     B2 00 A0 FD | 	call	#popregs_
23800                 | __system__Mid_S_ret
23800     2D 00 64 FD | 	ret
23804                 | 
23804                 | __system__Chr_S
23804     01 4A 05 F6 | 	mov	COUNT_, #1
23808     A8 00 A0 FD | 	call	#pushregs_
2380c     09 1F 02 F6 | 	mov	local01, arg01
23810     03 12 06 F6 | 	mov	arg01, #3
23814     90 1E B0 FD | 	call	#__system___gc_alloc_managed
23818     00 FA 4D F2 | 	cmps	result1, #0 wz
2381c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
23820     01 FA 05 51 |  if_ne	add	result1, #1
23824     FD 00 48 5C |  if_ne	wrbyte	#0, result1
23828     01 FA 85 51 |  if_ne	sub	result1, #1
2382c     A7 F0 03 F6 | 	mov	ptra, fp
23830     B2 00 A0 FD | 	call	#popregs_
23834                 | __system__Chr_S_ret
23834     2D 00 64 FD | 	ret
23838                 | 
23838                 | __system__str_S
23838     02 4A 05 F6 | 	mov	COUNT_, #2
2383c     A8 00 A0 FD | 	call	#pushregs_
23840     09 1F 02 F6 | 	mov	local01, arg01
23844     10 12 06 F6 | 	mov	arg01, #16
23848     5C 1E B0 FD | 	call	#__system___gc_alloc_managed
2384c     FD 20 0A F6 | 	mov	local02, result1 wz
23850     30 00 90 AD |  if_e	jmp	#LR__3160
23854     F8 13 02 F6 | 	mov	arg01, ptra
23858     08 F0 07 F1 | 	add	ptra, #8
2385c     09 21 62 FC | 	wrlong	local02, arg01
23860     04 12 06 F1 | 	add	arg01, #4
23864     09 01 68 FC | 	wrlong	#0, arg01
23868     04 12 86 F1 | 	sub	arg01, #4
2386c     00 B8 04 FF 
23870     00 12 46 F5 | 	or	arg01, ##158334976
23874     00 14 06 F6 | 	mov	arg02, #0
23878     0F 17 02 F6 | 	mov	arg03, local01
2387c     67 18 06 F6 | 	mov	arg04, #103
23880     90 EE BF FD | 	call	#__system___fmtfloat
23884                 | LR__3160
23884     10 FB 01 F6 | 	mov	result1, local02
23888     A7 F0 03 F6 | 	mov	ptra, fp
2388c     B2 00 A0 FD | 	call	#popregs_
23890                 | __system__str_S_ret
23890     2D 00 64 FD | 	ret
23894                 | 
23894                 | __system__Number_S
23894     08 4A 05 F6 | 	mov	COUNT_, #8
23898     A8 00 A0 FD | 	call	#pushregs_
2389c     09 1F 02 F6 | 	mov	local01, arg01
238a0     0A 21 0A F6 | 	mov	local02, arg02 wz
238a4     0B 23 02 F6 | 	mov	local03, arg03
238a8     3C 00 90 5D |  if_ne	jmp	#LR__3172
238ac     01 20 06 F6 | 	mov	local02, #1
238b0     11 25 02 F6 | 	mov	local04, local03
238b4     01 26 06 F6 | 	mov	local05, #1
238b8     97 16 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
238bc                 | LR__3170
238bc     00 28 06 F6 | 	mov	local06, #0
238c0     0F 25 1A F2 | 	cmp	local04, local01 wcz
238c4     01 28 66 E6 |  if_be	neg	local06, #1
238c8     12 27 12 F2 | 	cmp	local05, local04 wc
238cc     15 2B A2 F1 | 	subx	local07, local07
238d0     15 29 CA F7 | 	test	local06, local07 wz
238d4     11 25 02 5D |  if_ne	qmul	local04, local03
238d8     12 27 02 56 |  if_ne	mov	local05, local04
238dc     01 20 06 51 |  if_ne	add	local02, #1
238e0     18 24 62 5D |  if_ne	getqx	local04
238e4     D4 FF 9F 5D |  if_ne	jmp	#LR__3170
238e8                 | LR__3171
238e8                 | LR__3172
238e8     20 20 36 F3 | 	fle	local02, #32 wc
238ec     10 13 02 F6 | 	mov	arg01, local02
238f0     02 12 06 F1 | 	add	arg01, #2
238f4     B0 1D B0 FD | 	call	#__system___gc_alloc_managed
238f8     FD 28 02 F6 | 	mov	local06, result1
238fc     10 2B 02 F6 | 	mov	local07, local02
23900     14 2B 02 F1 | 	add	local07, local06
23904     15 01 48 FC | 	wrbyte	#0, local07
23908     97 1A 48 FB | 	callpa	#(@LR__3174-@LR__3173)>>2,fcache_load_ptr_
2390c                 | LR__3173
2390c     01 20 16 F2 | 	cmp	local02, #1 wc
23910     2C 00 90 CD |  if_b	jmp	#LR__3175
23914     11 1F 12 FD | 	qdiv	local01, local03
23918     01 20 86 F1 | 	sub	local02, #1
2391c     10 2B 02 F6 | 	mov	local07, local02
23920     14 2B 02 F1 | 	add	local07, local06
23924     19 2C 62 FD | 	getqy	local08
23928     0A 2C 16 F2 | 	cmp	local08, #10 wc
2392c     30 2C 06 C1 |  if_b	add	local08, #48
23930     37 2C 06 31 |  if_ae	add	local08, #55
23934     15 2D 42 FC | 	wrbyte	local08, local07
23938     18 1E 62 FD | 	getqx	local01
2393c     CC FF 9F FD | 	jmp	#LR__3173
23940                 | LR__3174
23940                 | LR__3175
23940     14 FB 01 F6 | 	mov	result1, local06
23944     A7 F0 03 F6 | 	mov	ptra, fp
23948     B2 00 A0 FD | 	call	#popregs_
2394c                 | __system__Number_S_ret
2394c     2D 00 64 FD | 	ret
23950                 | 
23950                 | __system__LCase_S
23950     07 4A 05 F6 | 	mov	COUNT_, #7
23954     A8 00 A0 FD | 	call	#pushregs_
23958     09 1F 02 F6 | 	mov	local01, arg01
2395c     09 21 02 F6 | 	mov	local02, arg01
23960     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
23964                 | LR__3180
23964     10 FB C9 FA | 	rdbyte	result1, local02 wz
23968     01 20 06 51 |  if_ne	add	local02, #1
2396c     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
23970                 | LR__3181
23970     09 21 82 F1 | 	sub	local02, arg01
23974     10 FB 01 F6 | 	mov	result1, local02
23978     FD 20 0A F6 | 	mov	local02, result1 wz
2397c     88 01 00 AF 
23980     E2 FA 05 A6 |  if_e	mov	result1, ##@LR__5077
23984     7C 00 90 AD |  if_e	jmp	#LR__3187
23988     10 13 02 F6 | 	mov	arg01, local02
2398c     02 12 06 F1 | 	add	arg01, #2
23990     14 1D B0 FD | 	call	#__system___gc_alloc_managed
23994     FD 22 0A F6 | 	mov	local03, result1 wz
23998     64 00 90 AD |  if_e	jmp	#LR__3186
2399c     01 24 66 F6 | 	neg	local04, #1
239a0     97 26 48 FB | 	callpa	#(@LR__3185-@LR__3182)>>2,fcache_load_ptr_
239a4                 | LR__3182
239a4     01 24 06 F1 | 	add	local04, #1
239a8     12 27 02 F6 | 	mov	local05, local04
239ac     0F 27 02 F1 | 	add	local05, local01
239b0     13 29 C2 FA | 	rdbyte	local06, local05
239b4     41 28 56 F2 | 	cmps	local06, #65 wc
239b8     18 00 90 CD |  if_b	jmp	#LR__3183
239bc     5B 28 56 F2 | 	cmps	local06, #91 wc
239c0     12 2B 02 C6 |  if_b	mov	local07, local04
239c4     11 2B 02 C1 |  if_b	add	local07, local03
239c8     20 28 06 C1 |  if_b	add	local06, #32
239cc     15 29 42 CC |  if_b	wrbyte	local06, local07
239d0     0C 00 90 CD |  if_b	jmp	#LR__3184
239d4                 | LR__3183
239d4     12 2B 02 F6 | 	mov	local07, local04
239d8     11 2B 02 F1 | 	add	local07, local03
239dc     15 29 42 FC | 	wrbyte	local06, local07
239e0                 | LR__3184
239e0     10 29 02 F6 | 	mov	local06, local02
239e4     01 28 86 F1 | 	sub	local06, #1
239e8     14 25 0A F2 | 	cmp	local04, local06 wz
239ec     B4 FF 9F 5D |  if_ne	jmp	#LR__3182
239f0                 | LR__3185
239f0     11 21 02 F1 | 	add	local02, local03
239f4     10 01 48 FC | 	wrbyte	#0, local02
239f8     11 FB 01 F6 | 	mov	result1, local03
239fc     04 00 90 FD | 	jmp	#LR__3187
23a00                 | LR__3186
23a00     11 FB 01 F6 | 	mov	result1, local03
23a04                 | LR__3187
23a04     A7 F0 03 F6 | 	mov	ptra, fp
23a08     B2 00 A0 FD | 	call	#popregs_
23a0c                 | __system__LCase_S_ret
23a0c     2D 00 64 FD | 	ret
23a10                 | 
23a10                 | __system__LTrim_S
23a10     05 4A 05 F6 | 	mov	COUNT_, #5
23a14     A8 00 A0 FD | 	call	#pushregs_
23a18     09 1F 02 F6 | 	mov	local01, arg01
23a1c     09 21 02 F6 | 	mov	local02, arg01
23a20     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
23a24                 | LR__3190
23a24     10 FB C9 FA | 	rdbyte	result1, local02 wz
23a28     01 20 06 51 |  if_ne	add	local02, #1
23a2c     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
23a30                 | LR__3191
23a30     09 21 82 F1 | 	sub	local02, arg01
23a34     10 FB 01 F6 | 	mov	result1, local02
23a38     FD 20 0A F6 | 	mov	local02, result1 wz
23a3c     88 01 00 AF 
23a40     E3 FA 05 A6 |  if_e	mov	result1, ##@LR__5078
23a44     7C 00 90 AD |  if_e	jmp	#LR__3196
23a48     00 22 06 F6 | 	mov	local03, #0
23a4c     10 25 02 F6 | 	mov	local04, local02
23a50                 | LR__3192
23a50     12 23 52 F2 | 	cmps	local03, local04 wc
23a54     68 00 90 3D |  if_ae	jmp	#LR__3195
23a58     11 17 02 F6 | 	mov	arg03, local03
23a5c     0F 17 02 F1 | 	add	arg03, local01
23a60     0B 17 C2 FA | 	rdbyte	arg03, arg03
23a64     20 16 0E F2 | 	cmp	arg03, #32 wz
23a68     4C 00 90 AD |  if_e	jmp	#LR__3194
23a6c     10 13 02 F6 | 	mov	arg01, local02
23a70     11 13 82 F1 | 	sub	arg01, local03
23a74     02 12 06 F1 | 	add	arg01, #2
23a78     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
23a7c     FD 26 0A F6 | 	mov	local05, result1 wz
23a80     2C 00 90 AD |  if_e	jmp	#LR__3193
23a84     11 15 02 F6 | 	mov	arg02, local03
23a88     0F 15 02 F1 | 	add	arg02, local01
23a8c     10 17 02 F6 | 	mov	arg03, local02
23a90     11 17 82 F1 | 	sub	arg03, local03
23a94     13 13 02 F6 | 	mov	arg01, local05
23a98     48 DA BF FD | 	call	#__system____builtin_memmove
23a9c     11 21 82 F1 | 	sub	local02, local03
23aa0     13 21 02 F1 | 	add	local02, local05
23aa4     10 01 48 FC | 	wrbyte	#0, local02
23aa8     13 FB 01 F6 | 	mov	result1, local05
23aac     14 00 90 FD | 	jmp	#LR__3196
23ab0                 | LR__3193
23ab0     13 FB 01 F6 | 	mov	result1, local05
23ab4     0C 00 90 FD | 	jmp	#LR__3196
23ab8                 | LR__3194
23ab8     01 22 06 F1 | 	add	local03, #1
23abc     90 FF 9F FD | 	jmp	#LR__3192
23ac0                 | LR__3195
23ac0     0F FB 01 F6 | 	mov	result1, local01
23ac4                 | LR__3196
23ac4     A7 F0 03 F6 | 	mov	ptra, fp
23ac8     B2 00 A0 FD | 	call	#popregs_
23acc                 | __system__LTrim_S_ret
23acc     2D 00 64 FD | 	ret
23ad0                 | 
23ad0                 | __system__RTrim_S
23ad0     04 4A 05 F6 | 	mov	COUNT_, #4
23ad4     A8 00 A0 FD | 	call	#pushregs_
23ad8     09 1F 02 F6 | 	mov	local01, arg01
23adc     09 21 02 F6 | 	mov	local02, arg01
23ae0     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
23ae4                 | LR__3200
23ae4     10 FB C9 FA | 	rdbyte	result1, local02 wz
23ae8     01 20 06 51 |  if_ne	add	local02, #1
23aec     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
23af0                 | LR__3201
23af0     09 21 82 F1 | 	sub	local02, arg01
23af4     10 FB 01 F6 | 	mov	result1, local02
23af8     FD 20 0A F6 | 	mov	local02, result1 wz
23afc     88 01 00 AF 
23b00     E4 FA 05 A6 |  if_e	mov	result1, ##@LR__5079
23b04     74 00 90 AD |  if_e	jmp	#LR__3205
23b08     10 23 02 F6 | 	mov	local03, local02
23b0c     01 22 86 F1 | 	sub	local03, #1
23b10                 | LR__3202
23b10     11 15 02 F6 | 	mov	arg02, local03
23b14     0F 15 02 F1 | 	add	arg02, local01
23b18     0A 21 C2 FA | 	rdbyte	local02, arg02
23b1c     20 20 0E F2 | 	cmp	local02, #32 wz
23b20     44 00 90 AD |  if_e	jmp	#LR__3204
23b24     11 13 02 F6 | 	mov	arg01, local03
23b28     02 12 06 F1 | 	add	arg01, #2
23b2c     78 1B B0 FD | 	call	#__system___gc_alloc_managed
23b30     FD 24 0A F6 | 	mov	local04, result1 wz
23b34     28 00 90 AD |  if_e	jmp	#LR__3203
23b38     11 17 02 F6 | 	mov	arg03, local03
23b3c     01 16 06 F1 | 	add	arg03, #1
23b40     12 13 02 F6 | 	mov	arg01, local04
23b44     0F 15 02 F6 | 	mov	arg02, local01
23b48     98 D9 BF FD | 	call	#__system____builtin_memmove
23b4c     01 22 06 F1 | 	add	local03, #1
23b50     12 23 02 F1 | 	add	local03, local04
23b54     11 01 48 FC | 	wrbyte	#0, local03
23b58     12 FB 01 F6 | 	mov	result1, local04
23b5c     1C 00 90 FD | 	jmp	#LR__3205
23b60                 | LR__3203
23b60     12 FB 01 F6 | 	mov	result1, local04
23b64     14 00 90 FD | 	jmp	#LR__3205
23b68                 | LR__3204
23b68     01 22 86 F1 | 	sub	local03, #1
23b6c     00 22 56 F2 | 	cmps	local03, #0 wc
23b70     9C FF 9F 3D |  if_ae	jmp	#LR__3202
23b74     88 01 00 FF 
23b78     E5 FA 05 F6 | 	mov	result1, ##@LR__5080
23b7c                 | LR__3205
23b7c     A7 F0 03 F6 | 	mov	ptra, fp
23b80     B2 00 A0 FD | 	call	#popregs_
23b84                 | __system__RTrim_S_ret
23b84     2D 00 64 FD | 	ret
23b88                 | 
23b88                 | __system__Instr
23b88     07 4A 05 F6 | 	mov	COUNT_, #7
23b8c     A8 00 A0 FD | 	call	#pushregs_
23b90     09 1F 02 F6 | 	mov	local01, arg01
23b94     0A 21 02 F6 | 	mov	local02, arg02
23b98     0B 23 02 F6 | 	mov	local03, arg03
23b9c     11 13 02 F6 | 	mov	arg01, local03
23ba0     09 25 02 F6 | 	mov	local04, arg01
23ba4     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
23ba8                 | LR__3210
23ba8     12 FB C9 FA | 	rdbyte	result1, local04 wz
23bac     01 24 06 51 |  if_ne	add	local04, #1
23bb0     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
23bb4                 | LR__3211
23bb4     09 25 82 F1 | 	sub	local04, arg01
23bb8     12 27 02 F6 | 	mov	local05, local04
23bbc     10 13 02 F6 | 	mov	arg01, local02
23bc0     09 25 02 F6 | 	mov	local04, arg01
23bc4     97 06 48 FB | 	callpa	#(@LR__3213-@LR__3212)>>2,fcache_load_ptr_
23bc8                 | LR__3212
23bc8     12 FB C9 FA | 	rdbyte	result1, local04 wz
23bcc     01 24 06 51 |  if_ne	add	local04, #1
23bd0     F4 FF 9F 5D |  if_ne	jmp	#LR__3212
23bd4                 | LR__3213
23bd4     09 25 82 F1 | 	sub	local04, arg01
23bd8     12 FB 01 F6 | 	mov	result1, local04
23bdc     FD 18 0A F6 | 	mov	arg04, result1 wz
23be0     00 FA 05 A6 |  if_e	mov	result1, #0
23be4     98 00 90 AD |  if_e	jmp	#LR__3217
23be8     00 26 0E F2 | 	cmp	local05, #0 wz
23bec     00 FA 05 A6 |  if_e	mov	result1, #0
23bf0     8C 00 90 AD |  if_e	jmp	#LR__3217
23bf4     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
23bf8     00 FA 05 16 |  if_a	mov	result1, #0
23bfc     80 00 90 1D |  if_a	jmp	#LR__3217
23c00     01 1E 56 F2 | 	cmps	local01, #1 wc
23c04     01 1E 06 C6 |  if_b	mov	local01, #1
23c08     11 29 C2 FA | 	rdbyte	local06, local03
23c0c     01 26 0E F2 | 	cmp	local05, #1 wz
23c10     18 00 90 5D |  if_ne	jmp	#LR__3214
23c14     10 13 02 F6 | 	mov	arg01, local02
23c18     14 15 02 F6 | 	mov	arg02, local06
23c1c     0F 17 02 F6 | 	mov	arg03, local01
23c20     00 18 06 F6 | 	mov	arg04, #0
23c24     18 37 B0 FD | 	call	#__system____ScanForChar
23c28     54 00 90 FD | 	jmp	#LR__3217
23c2c                 | LR__3214
23c2c     0F 2B 02 F6 | 	mov	local07, local01
23c30                 | LR__3215
23c30     10 13 02 F6 | 	mov	arg01, local02
23c34     14 15 02 F6 | 	mov	arg02, local06
23c38     15 17 02 F6 | 	mov	arg03, local07
23c3c     00 18 06 F6 | 	mov	arg04, #0
23c40     FC 36 B0 FD | 	call	#__system____ScanForChar
23c44     FD 2A 0A F6 | 	mov	local07, result1 wz
23c48     30 00 90 AD |  if_e	jmp	#LR__3216
23c4c     13 17 02 F6 | 	mov	arg03, local05
23c50     10 13 02 F6 | 	mov	arg01, local02
23c54     15 15 02 F6 | 	mov	arg02, local07
23c58     FC FA BF FD | 	call	#__system__Mid_S
23c5c     FD 12 02 F6 | 	mov	arg01, result1
23c60     11 15 02 F6 | 	mov	arg02, local03
23c64     84 D9 BF FD | 	call	#__system___string_cmp
23c68     00 FA 0D F2 | 	cmp	result1, #0 wz
23c6c     15 FB 01 A6 |  if_e	mov	result1, local07
23c70     0C 00 90 AD |  if_e	jmp	#LR__3217
23c74     13 2B 02 F1 | 	add	local07, local05
23c78     B4 FF 9F FD | 	jmp	#LR__3215
23c7c                 | LR__3216
23c7c     00 FA 05 F6 | 	mov	result1, #0
23c80                 | LR__3217
23c80     A7 F0 03 F6 | 	mov	ptra, fp
23c84     B2 00 A0 FD | 	call	#popregs_
23c88                 | __system__Instr_ret
23c88     2D 00 64 FD | 	ret
23c8c                 | 
23c8c                 | __system__InstrRev
23c8c     07 4A 05 F6 | 	mov	COUNT_, #7
23c90     A8 00 A0 FD | 	call	#pushregs_
23c94     09 1F 02 F6 | 	mov	local01, arg01
23c98     0A 21 02 F6 | 	mov	local02, arg02
23c9c     0B 23 02 F6 | 	mov	local03, arg03
23ca0     11 13 02 F6 | 	mov	arg01, local03
23ca4     09 25 02 F6 | 	mov	local04, arg01
23ca8     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
23cac                 | LR__3220
23cac     12 FB C9 FA | 	rdbyte	result1, local04 wz
23cb0     01 24 06 51 |  if_ne	add	local04, #1
23cb4     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
23cb8                 | LR__3221
23cb8     09 25 82 F1 | 	sub	local04, arg01
23cbc     12 27 02 F6 | 	mov	local05, local04
23cc0     10 13 02 F6 | 	mov	arg01, local02
23cc4     09 25 02 F6 | 	mov	local04, arg01
23cc8     97 06 48 FB | 	callpa	#(@LR__3223-@LR__3222)>>2,fcache_load_ptr_
23ccc                 | LR__3222
23ccc     12 FB C9 FA | 	rdbyte	result1, local04 wz
23cd0     01 24 06 51 |  if_ne	add	local04, #1
23cd4     F4 FF 9F 5D |  if_ne	jmp	#LR__3222
23cd8                 | LR__3223
23cd8     09 25 82 F1 | 	sub	local04, arg01
23cdc     12 FB 01 F6 | 	mov	result1, local04
23ce0     FD 18 0A F6 | 	mov	arg04, result1 wz
23ce4     00 FA 05 A6 |  if_e	mov	result1, #0
23ce8     98 00 90 AD |  if_e	jmp	#LR__3227
23cec     00 26 0E F2 | 	cmp	local05, #0 wz
23cf0     00 FA 05 A6 |  if_e	mov	result1, #0
23cf4     8C 00 90 AD |  if_e	jmp	#LR__3227
23cf8     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
23cfc     0C 1F 02 16 |  if_a	mov	local01, arg04
23d00     01 1E 56 F2 | 	cmps	local01, #1 wc
23d04     01 1E 06 C6 |  if_b	mov	local01, #1
23d08     11 29 C2 FA | 	rdbyte	local06, local03
23d0c     01 26 0E F2 | 	cmp	local05, #1 wz
23d10     18 00 90 5D |  if_ne	jmp	#LR__3224
23d14     10 13 02 F6 | 	mov	arg01, local02
23d18     14 15 02 F6 | 	mov	arg02, local06
23d1c     0F 17 02 F6 | 	mov	arg03, local01
23d20     01 18 06 F6 | 	mov	arg04, #1
23d24     18 36 B0 FD | 	call	#__system____ScanForChar
23d28     58 00 90 FD | 	jmp	#LR__3227
23d2c                 | LR__3224
23d2c     13 2B 02 F6 | 	mov	local07, local05
23d30     01 2A 86 F1 | 	sub	local07, #1
23d34                 | LR__3225
23d34     10 13 02 F6 | 	mov	arg01, local02
23d38     14 15 02 F6 | 	mov	arg02, local06
23d3c     15 17 02 F6 | 	mov	arg03, local07
23d40     01 18 06 F6 | 	mov	arg04, #1
23d44     F8 35 B0 FD | 	call	#__system____ScanForChar
23d48     FD 2A 0A F6 | 	mov	local07, result1 wz
23d4c     30 00 90 AD |  if_e	jmp	#LR__3226
23d50     13 17 02 F6 | 	mov	arg03, local05
23d54     10 13 02 F6 | 	mov	arg01, local02
23d58     15 15 02 F6 | 	mov	arg02, local07
23d5c     F8 F9 BF FD | 	call	#__system__Mid_S
23d60     FD 12 02 F6 | 	mov	arg01, result1
23d64     11 15 02 F6 | 	mov	arg02, local03
23d68     80 D8 BF FD | 	call	#__system___string_cmp
23d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
23d70     15 FB 01 A6 |  if_e	mov	result1, local07
23d74     0C 00 90 AD |  if_e	jmp	#LR__3227
23d78     13 2B 82 F1 | 	sub	local07, local05
23d7c     B4 FF 9F FD | 	jmp	#LR__3225
23d80                 | LR__3226
23d80     00 FA 05 F6 | 	mov	result1, #0
23d84                 | LR__3227
23d84     A7 F0 03 F6 | 	mov	ptra, fp
23d88     B2 00 A0 FD | 	call	#popregs_
23d8c                 | __system__InstrRev_ret
23d8c     2D 00 64 FD | 	ret
23d90                 | 
23d90                 | __system___remove
23d90     06 4A 05 F6 | 	mov	COUNT_, #6
23d94     A8 00 A0 FD | 	call	#pushregs_
23d98     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23d9c     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
23da0     09 15 02 F6 | 	mov	arg02, arg01
23da4     0F 13 02 F6 | 	mov	arg01, local01
23da8     00 16 06 F6 | 	mov	arg03, #0
23dac     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23db0     A8 DF BF FD | 	call	#__system____getvfsforfile
23db4     FD 20 0A F6 | 	mov	local02, result1 wz
23db8     10 00 90 AD |  if_e	jmp	#LR__3230
23dbc     20 20 06 F1 | 	add	local02, #32
23dc0     10 13 0A FB | 	rdlong	arg01, local02 wz
23dc4     20 20 86 F1 | 	sub	local02, #32
23dc8     14 00 90 5D |  if_ne	jmp	#LR__3231
23dcc                 | LR__3230
23dcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23dd0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23dd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23dd8     01 FA 65 F6 | 	neg	result1, #1
23ddc     A8 00 90 FD | 	jmp	#LR__3234
23de0                 | LR__3231
23de0     40 20 06 F1 | 	add	local02, #64
23de4     10 23 02 FB | 	rdlong	local03, local02
23de8     11 25 02 F6 | 	mov	local04, local03
23dec     40 20 86 F1 | 	sub	local02, #64
23df0     13 24 46 F7 | 	zerox	local04, #19
23df4     14 22 46 F0 | 	shr	local03, #20
23df8     02 22 66 F0 | 	shl	local03, #2
23dfc     ED 22 02 F1 | 	add	local03, __methods__
23e00     11 23 02 FB | 	rdlong	local03, local03
23e04     0F 13 02 F6 | 	mov	arg01, local01
23e08     F2 26 02 F6 | 	mov	local05, objptr
23e0c     12 E5 01 F6 | 	mov	objptr, local04
23e10     2D 22 62 FD | 	call	local03
23e14     13 E5 01 F6 | 	mov	objptr, local05
23e18     FD 28 02 F6 | 	mov	local06, result1
23e1c     FF FF 7F FF 
23e20     F2 29 0E F2 | 	cmp	local06, ##-14 wz
23e24     38 00 90 5D |  if_ne	jmp	#LR__3232
23e28     3C 20 06 F1 | 	add	local02, #60
23e2c     10 29 02 FB | 	rdlong	local06, local02
23e30     14 23 02 F6 | 	mov	local03, local06
23e34     13 28 46 F7 | 	zerox	local06, #19
23e38     14 22 46 F0 | 	shr	local03, #20
23e3c     02 22 66 F0 | 	shl	local03, #2
23e40     ED 22 02 F1 | 	add	local03, __methods__
23e44     11 23 02 FB | 	rdlong	local03, local03
23e48     0F 13 02 F6 | 	mov	arg01, local01
23e4c     F2 26 02 F6 | 	mov	local05, objptr
23e50     14 E5 01 F6 | 	mov	objptr, local06
23e54     2D 22 62 FD | 	call	local03
23e58     13 E5 01 F6 | 	mov	objptr, local05
23e5c     FD 28 02 F6 | 	mov	local06, result1
23e60                 | LR__3232
23e60     00 28 0E F2 | 	cmp	local06, #0 wz
23e64     1C 00 90 AD |  if_e	jmp	#LR__3233
23e68     14 13 6A F6 | 	neg	arg01, local06 wz
23e6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23e70     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23e74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23e78     01 FA 65 56 |  if_ne	neg	result1, #1
23e7c     00 FA 05 A6 |  if_e	mov	result1, #0
23e80     04 00 90 FD | 	jmp	#LR__3234
23e84                 | LR__3233
23e84     00 FA 05 F6 | 	mov	result1, #0
23e88                 | LR__3234
23e88     A7 F0 03 F6 | 	mov	ptra, fp
23e8c     B2 00 A0 FD | 	call	#popregs_
23e90                 | __system___remove_ret
23e90     2D 00 64 FD | 	ret
23e94                 | 
23e94                 | __system___strerror
23e94     00 12 56 F2 | 	cmps	arg01, #0 wc
23e98     08 00 90 CD |  if_b	jmp	#LR__3240
23e9c     1A 12 56 F2 | 	cmps	arg01, #26 wc
23ea0     04 00 90 CD |  if_b	jmp	#LR__3241
23ea4                 | LR__3240
23ea4     19 12 06 F6 | 	mov	arg01, #25
23ea8                 | LR__3241
23ea8     02 12 66 F0 | 	shl	arg01, #2
23eac     01 00 00 FF 
23eb0     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
23eb4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23eb8     09 FB 01 FB | 	rdlong	result1, arg01
23ebc     01 00 00 FF 
23ec0     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23ec4                 | __system___strerror_ret
23ec4     2D 00 64 FD | 	ret
23ec8                 | 
23ec8                 | __system___int64_shl
23ec8     20 16 CE F7 | 	test	arg03, #32 wz
23ecc     09 15 02 56 |  if_ne	mov	arg02, arg01
23ed0     00 12 06 56 |  if_ne	mov	arg01, #0
23ed4     1F 16 CE F7 | 	test	arg03, #31 wz
23ed8     18 00 90 AD |  if_e	jmp	#LR__3250
23edc     0B 15 62 F0 | 	shl	arg02, arg03
23ee0     09 FB 01 F6 | 	mov	result1, arg01
23ee4     0B FD 61 F6 | 	neg	result2, arg03
23ee8     FE FA 41 F0 | 	shr	result1, result2
23eec     FD 14 42 F5 | 	or	arg02, result1
23ef0     0B 13 62 F0 | 	shl	arg01, arg03
23ef4                 | LR__3250
23ef4     0A FD 01 F6 | 	mov	result2, arg02
23ef8     09 FB 01 F6 | 	mov	result1, arg01
23efc                 | __system___int64_shl_ret
23efc     2D 00 64 FD | 	ret
23f00                 | 
23f00                 | __system___usepins
23f00     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23f04     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23f08     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
23f0c     00 13 CA F7 | 	test	arg01, _var01 wz
23f10     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23f14     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23f18     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
23f1c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
23f20     00 FA 05 56 |  if_ne	mov	result1, #0
23f24     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23f28     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23f2c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23f30     09 03 42 F5 | 	or	_var02, arg01
23f34     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23f38     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23f3c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23f40     0A 03 42 F5 | 	or	_var02, arg02
23f44     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23f48     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23f4c     01 FA 65 F6 | 	neg	result1, #1
23f50                 | __system___usepins_ret
23f50     2D 00 64 FD | 	ret
23f54                 | 
23f54                 | __system___freepins
23f54     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23f58     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23f5c     09 01 22 F5 | 	andn	_var01, arg01
23f60     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23f64     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23f68     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23f6c     0A 01 22 F5 | 	andn	_var01, arg02
23f70     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23f74     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23f78                 | __system___freepins_ret
23f78     2D 00 64 FD | 	ret
23f7c                 | 
23f7c                 | __system___float_fromuns
23f7c     09 17 0A F6 | 	mov	arg03, arg01 wz
23f80     0B FB 01 A6 |  if_e	mov	result1, arg03
23f84     24 00 90 AD |  if_e	jmp	#LR__3260
23f88     0B 15 92 F7 | 	encod	arg02, arg03 wc
23f8c     01 14 06 C1 |  if_b	add	arg02, #1
23f90     01 14 86 F1 | 	sub	arg02, #1
23f94     1F 12 06 F6 | 	mov	arg01, #31
23f98     0A 13 82 F1 | 	sub	arg01, arg02
23f9c     09 17 62 F0 | 	shl	arg03, arg01
23fa0     02 16 46 F0 | 	shr	arg03, #2
23fa4     00 12 06 F6 | 	mov	arg01, #0
23fa8     4C 09 B0 FD | 	call	#__system___float_Pack
23fac                 | LR__3260
23fac                 | __system___float_fromuns_ret
23fac     2D 00 64 FD | 	ret
23fb0                 | 
23fb0                 | __system___float_add
23fb0     0F 4A 05 F6 | 	mov	COUNT_, #15
23fb4     A8 00 A0 FD | 	call	#pushregs_
23fb8     09 1F 02 F6 | 	mov	local01, arg01
23fbc     0A 21 02 F6 | 	mov	local02, arg02
23fc0     00 22 06 F6 | 	mov	local03, #0
23fc4     0F 25 02 F6 | 	mov	local04, local01
23fc8     12 27 02 F6 | 	mov	local05, local04
23fcc     16 26 46 F7 | 	zerox	local05, #22
23fd0     12 29 02 F6 | 	mov	local06, local04
23fd4     01 28 66 F0 | 	shl	local06, #1
23fd8     18 28 46 F0 | 	shr	local06, #24
23fdc     1F 24 46 F0 | 	shr	local04, #31
23fe0     10 13 02 F6 | 	mov	arg01, local02
23fe4     09 FB 01 F6 | 	mov	result1, arg01
23fe8     FD 2A 02 F6 | 	mov	local07, result1
23fec     15 2D 02 F6 | 	mov	local08, local07
23ff0     16 2C 46 F7 | 	zerox	local08, #22
23ff4     15 2F 02 F6 | 	mov	local09, local07
23ff8     01 2E 66 F0 | 	shl	local09, #1
23ffc     18 2E 46 F0 | 	shr	local09, #24
24000     17 31 02 F6 | 	mov	local10, local09
24004     1F 2A 46 F0 | 	shr	local07, #31
24008     00 32 06 F6 | 	mov	local11, #0
2400c     00 34 06 F6 | 	mov	local12, #0
24010     18 29 12 F2 | 	cmp	local06, local10 wc
24014     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
24018     2C 00 90 1D |  if_a	jmp	#LR__3270
2401c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
24020     24 00 90 3D |  if_ae	jmp	#LR__3270
24024     13 37 02 F6 | 	mov	local13, local05
24028     16 27 02 F6 | 	mov	local05, local08
2402c     1B 2D 02 F6 | 	mov	local08, local13
24030     14 37 02 F6 | 	mov	local13, local06
24034     18 29 02 F6 | 	mov	local06, local10
24038     1B 31 02 F6 | 	mov	local10, local13
2403c     12 37 02 F6 | 	mov	local13, local04
24040     15 25 02 F6 | 	mov	local04, local07
24044     1B 2B 02 F6 | 	mov	local07, local13
24048                 | LR__3270
24048     FF 28 0E F2 | 	cmp	local06, #255 wz
2404c     70 01 90 AD |  if_e	jmp	#LR__3285
24050     00 28 0E F2 | 	cmp	local06, #0 wz
24054     AC 01 90 AD |  if_e	jmp	#LR__3287
24058     17 26 26 F4 | 	bith	local05, #23
2405c                 | LR__3271
2405c     00 30 0E F2 | 	cmp	local10, #0 wz
24060     F0 01 90 AD |  if_e	jmp	#LR__3291
24064     17 2C 26 F4 | 	bith	local08, #23
24068                 | LR__3272
24068     7F 28 86 F1 | 	sub	local06, #127
2406c     7F 30 86 F1 | 	sub	local10, #127
24070     14 39 02 F6 | 	mov	local14, local06
24074     18 39 82 F1 | 	sub	local14, local10
24078     97 14 48 FB | 	callpa	#(@LR__3274-@LR__3273)>>2,fcache_load_ptr_
2407c                 | LR__3273
2407c     20 38 56 F2 | 	cmps	local14, #32 wc
24080     20 00 90 CD |  if_b	jmp	#LR__3275
24084     16 2F 02 F6 | 	mov	local09, local08
24088     00 32 0E F2 | 	cmp	local11, #0 wz
2408c     6F 32 62 FD | 	wrnz	local11
24090     19 2F 42 F5 | 	or	local09, local11
24094     17 33 02 F6 | 	mov	local11, local09
24098     00 2C 06 F6 | 	mov	local08, #0
2409c     20 38 86 F1 | 	sub	local14, #32
240a0     D8 FF 9F FD | 	jmp	#LR__3273
240a4                 | LR__3274
240a4                 | LR__3275
240a4     00 38 0E F2 | 	cmp	local14, #0 wz
240a8     38 00 90 AD |  if_e	jmp	#LR__3276
240ac     16 37 02 F6 | 	mov	local13, local08
240b0     20 30 06 F6 | 	mov	local10, #32
240b4     1C 31 82 F1 | 	sub	local10, local14
240b8     18 37 62 F0 | 	shl	local13, local10
240bc     19 31 02 F6 | 	mov	local10, local11
240c0     20 2E 06 F6 | 	mov	local09, #32
240c4     1C 2F 82 F1 | 	sub	local09, local14
240c8     17 31 6A F0 | 	shl	local10, local09 wz
240cc     1C 33 42 F0 | 	shr	local11, local14
240d0     1C 2D 42 F0 | 	shr	local08, local14
240d4     1B 33 42 F5 | 	or	local11, local13
240d8     00 3A 06 F6 | 	mov	local15, #0
240dc     01 3A 06 56 |  if_ne	mov	local15, #1
240e0     1D 33 42 F5 | 	or	local11, local15
240e4                 | LR__3276
240e4     12 3B 02 F6 | 	mov	local15, local04
240e8     15 3B 62 F5 | 	xor	local15, local07
240ec     01 3A CE F7 | 	test	local15, #1 wz
240f0     18 00 90 AD |  if_e	jmp	#LR__3277
240f4     16 2D 22 F6 | 	not	local08, local08
240f8     19 33 22 F6 | 	not	local11, local11
240fc     01 32 0E F1 | 	add	local11, #1 wz
24100     00 3A 06 F6 | 	mov	local15, #0
24104     01 3A 06 A6 |  if_e	mov	local15, #1
24108     1D 2D 02 F1 | 	add	local08, local15
2410c                 | LR__3277
2410c     19 35 12 F1 | 	add	local12, local11 wc
24110     16 27 22 F1 | 	addx	local05, local08
24114     00 26 56 F2 | 	cmps	local05, #0 wc
24118     1C 00 90 3D |  if_ae	jmp	#LR__3278
2411c     01 24 66 F5 | 	xor	local04, #1
24120     13 27 22 F6 | 	not	local05, local05
24124     1A 35 22 F6 | 	not	local12, local12
24128     01 34 0E F1 | 	add	local12, #1 wz
2412c     00 3A 06 F6 | 	mov	local15, #0
24130     01 3A 06 A6 |  if_e	mov	local15, #1
24134     1D 27 02 F1 | 	add	local05, local15
24138                 | LR__3278
24138     00 80 00 FF 
2413c     00 26 16 F2 | 	cmp	local05, ##16777216 wc
24140     28 00 90 CD |  if_b	jmp	#LR__3279
24144     01 28 06 F1 | 	add	local06, #1
24148     1A 39 02 F6 | 	mov	local14, local12
2414c     01 38 06 F5 | 	and	local14, #1
24150     01 34 46 F0 | 	shr	local12, #1
24154     13 3B 02 F6 | 	mov	local15, local05
24158     1F 3A 66 F0 | 	shl	local15, #31
2415c     1D 35 42 F5 | 	or	local12, local15
24160     1C 35 42 F5 | 	or	local12, local14
24164     01 26 46 F0 | 	shr	local05, #1
24168     3C 00 90 FD | 	jmp	#LR__3284
2416c                 | LR__3279
2416c     00 40 00 FF 
24170     00 26 16 F2 | 	cmp	local05, ##8388608 wc
24174     30 00 90 3D |  if_ae	jmp	#LR__3283
24178     00 26 0E F2 | 	cmp	local05, #0 wz
2417c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
24180     08 24 46 A5 |  if_e	or	local04, #8
24184     01 24 26 A5 |  if_e	andn	local04, #1
24188     1C 00 90 AD |  if_e	jmp	#LR__3282
2418c                 | LR__3280
2418c     00 40 00 FF 
24190     00 26 16 F2 | 	cmp	local05, ##8388608 wc
24194     10 00 90 3D |  if_ae	jmp	#LR__3281
24198     1A 35 12 F1 | 	add	local12, local12 wc
2419c     13 27 22 F1 | 	addx	local05, local05
241a0     01 28 86 F1 | 	sub	local06, #1
241a4     E4 FF 9F FD | 	jmp	#LR__3280
241a8                 | LR__3281
241a8                 | LR__3282
241a8                 | LR__3283
241a8                 | LR__3284
241a8     13 13 02 F6 | 	mov	arg01, local05
241ac     1A 15 02 F6 | 	mov	arg02, local12
241b0     14 17 02 F6 | 	mov	arg03, local06
241b4     12 19 02 F6 | 	mov	arg04, local04
241b8     C8 35 B0 FD | 	call	#__system__pack_0639
241bc     DC 00 90 FD | 	jmp	#LR__3295
241c0                 | LR__3285
241c0     FF 30 0E F2 | 	cmp	local10, #255 wz
241c4     10 00 90 5D |  if_ne	jmp	#LR__3286
241c8     12 2B 0A F2 | 	cmp	local07, local04 wz
241cc     00 F8 3F 5F 
241d0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
241d4     C4 00 90 5D |  if_ne	jmp	#LR__3295
241d8                 | LR__3286
241d8     00 26 0E F2 | 	cmp	local05, #0 wz
241dc     00 F8 3F 5F 
241e0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
241e4     B4 00 90 5D |  if_ne	jmp	#LR__3295
241e8     1A 15 02 F6 | 	mov	arg02, local12
241ec     14 17 02 F6 | 	mov	arg03, local06
241f0     12 19 02 F6 | 	mov	arg04, local04
241f4     02 18 46 F5 | 	or	arg04, #2
241f8     13 13 02 F6 | 	mov	arg01, local05
241fc     84 35 B0 FD | 	call	#__system__pack_0639
24200     98 00 90 FD | 	jmp	#LR__3295
24204                 | LR__3287
24204     00 26 0E F2 | 	cmp	local05, #0 wz
24208     28 00 90 AD |  if_e	jmp	#LR__3290
2420c     01 26 66 F0 | 	shl	local05, #1
24210     97 0E 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
24214                 | LR__3288
24214     00 40 00 FF 
24218     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2421c     14 3B 02 C6 |  if_b	mov	local15, local06
24220     01 3A 86 C1 |  if_b	sub	local15, #1
24224     1D 29 02 C6 |  if_b	mov	local06, local15
24228     01 26 66 C0 |  if_b	shl	local05, #1
2422c     E4 FF 9F CD |  if_b	jmp	#LR__3288
24230                 | LR__3289
24230     28 FE 9F FD | 	jmp	#LR__3271
24234                 | LR__3290
24234     15 25 02 F5 | 	and	local04, local07
24238     12 19 02 F6 | 	mov	arg04, local04
2423c     08 18 46 F5 | 	or	arg04, #8
24240     00 12 06 F6 | 	mov	arg01, #0
24244     00 14 06 F6 | 	mov	arg02, #0
24248     00 16 06 F6 | 	mov	arg03, #0
2424c     34 35 B0 FD | 	call	#__system__pack_0639
24250     48 00 90 FD | 	jmp	#LR__3295
24254                 | LR__3291
24254     00 2C 0E F2 | 	cmp	local08, #0 wz
24258     28 00 90 AD |  if_e	jmp	#LR__3294
2425c     01 2C 66 F0 | 	shl	local08, #1
24260     97 0E 48 FB | 	callpa	#(@LR__3293-@LR__3292)>>2,fcache_load_ptr_
24264                 | LR__3292
24264     00 40 00 FF 
24268     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
2426c     18 3B 02 C6 |  if_b	mov	local15, local10
24270     01 3A 86 C1 |  if_b	sub	local15, #1
24274     1D 31 02 C6 |  if_b	mov	local10, local15
24278     01 2C 66 C0 |  if_b	shl	local08, #1
2427c     E4 FF 9F CD |  if_b	jmp	#LR__3292
24280                 | LR__3293
24280     E4 FD 9F FD | 	jmp	#LR__3272
24284                 | LR__3294
24284     7F 28 86 F1 | 	sub	local06, #127
24288     13 13 02 F6 | 	mov	arg01, local05
2428c     1A 15 02 F6 | 	mov	arg02, local12
24290     14 17 02 F6 | 	mov	arg03, local06
24294     12 19 02 F6 | 	mov	arg04, local04
24298     E8 34 B0 FD | 	call	#__system__pack_0639
2429c                 | LR__3295
2429c     A7 F0 03 F6 | 	mov	ptra, fp
242a0     B2 00 A0 FD | 	call	#popregs_
242a4                 | __system___float_add_ret
242a4     2D 00 64 FD | 	ret
242a8                 | 
242a8                 | __system___float_sqrt
242a8     04 4A 05 F6 | 	mov	COUNT_, #4
242ac     A8 00 A0 FD | 	call	#pushregs_
242b0     09 1F 02 F6 | 	mov	local01, arg01
242b4     09 FB 01 F6 | 	mov	result1, arg01
242b8     FD 20 02 F6 | 	mov	local02, result1
242bc     10 23 02 F6 | 	mov	local03, local02
242c0     16 22 46 F7 | 	zerox	local03, #22
242c4     10 25 02 F6 | 	mov	local04, local02
242c8     01 24 66 F0 | 	shl	local04, #1
242cc     18 24 4E F0 | 	shr	local04, #24 wz
242d0     1F 20 46 F0 | 	shr	local02, #31
242d4     70 00 90 AD |  if_e	jmp	#LR__3301
242d8     17 22 26 F4 | 	bith	local03, #23
242dc                 | LR__3300
242dc     00 20 0E F2 | 	cmp	local02, #0 wz
242e0     00 F8 3F 5F 
242e4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
242e8     88 00 90 5D |  if_ne	jmp	#LR__3304
242ec     FF 24 0E F2 | 	cmp	local04, #255 wz
242f0     0F FB 01 A6 |  if_e	mov	result1, local01
242f4     7C 00 90 AD |  if_e	jmp	#LR__3304
242f8     7F 24 86 F1 | 	sub	local04, #127
242fc     01 24 CE F7 | 	test	local04, #1 wz
24300     01 22 66 50 |  if_ne	shl	local03, #1
24304     05 22 66 F0 | 	shl	local03, #5
24308     11 01 38 FD | 	qsqrt	#0, local03
2430c     01 24 86 51 |  if_ne	sub	local04, #1
24310     12 25 52 F6 | 	abs	local04, local04 wc
24314     01 24 46 F0 | 	shr	local04, #1
24318     12 17 82 F6 | 	negc	arg03, local04
2431c     10 19 02 F6 | 	mov	arg04, local02
24320     18 12 62 FD | 	getqx	arg01
24324     09 15 02 F6 | 	mov	arg02, arg01
24328     19 14 66 F0 | 	shl	arg02, #25
2432c     07 12 46 F0 | 	shr	arg01, #7
24330     00 80 00 FF 
24334     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
24338     01 16 06 31 |  if_ae	add	arg03, #1
2433c     01 12 46 30 |  if_ae	shr	arg01, #1
24340     40 34 B0 FD | 	call	#__system__pack_0639
24344     2C 00 90 FD | 	jmp	#LR__3304
24348                 | LR__3301
24348     00 22 0E F2 | 	cmp	local03, #0 wz
2434c     0F FB 01 A6 |  if_e	mov	result1, local01
24350     20 00 90 AD |  if_e	jmp	#LR__3304
24354     01 22 66 F0 | 	shl	local03, #1
24358     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
2435c                 | LR__3302
2435c     00 40 00 FF 
24360     00 22 16 F2 | 	cmp	local03, ##8388608 wc
24364     01 24 86 C1 |  if_b	sub	local04, #1
24368     01 22 66 C0 |  if_b	shl	local03, #1
2436c     EC FF 9F CD |  if_b	jmp	#LR__3302
24370                 | LR__3303
24370     68 FF 9F FD | 	jmp	#LR__3300
24374                 | LR__3304
24374     A7 F0 03 F6 | 	mov	ptra, fp
24378     B2 00 A0 FD | 	call	#popregs_
2437c                 | __system___float_sqrt_ret
2437c     2D 00 64 FD | 	ret
24380                 | 
24380                 | __system___float_mul
24380     0B 4A 05 F6 | 	mov	COUNT_, #11
24384     A8 00 A0 FD | 	call	#pushregs_
24388     09 1F 02 F6 | 	mov	local01, arg01
2438c     0A 21 02 F6 | 	mov	local02, arg02
24390     0F 23 02 F6 | 	mov	local03, local01
24394     11 25 02 F6 | 	mov	local04, local03
24398     16 24 46 F7 | 	zerox	local04, #22
2439c     11 27 02 F6 | 	mov	local05, local03
243a0     01 26 66 F0 | 	shl	local05, #1
243a4     18 26 46 F0 | 	shr	local05, #24
243a8     1F 22 46 F0 | 	shr	local03, #31
243ac     10 FB 01 F6 | 	mov	result1, local02
243b0     FD 28 02 F6 | 	mov	local06, result1
243b4     14 2B 02 F6 | 	mov	local07, local06
243b8     16 2A 46 F7 | 	zerox	local07, #22
243bc     14 2D 02 F6 | 	mov	local08, local06
243c0     01 2C 66 F0 | 	shl	local08, #1
243c4     18 2C 46 F0 | 	shr	local08, #24
243c8     1F 28 46 F0 | 	shr	local06, #31
243cc     14 23 62 F5 | 	xor	local03, local06
243d0     FF 26 0E F2 | 	cmp	local05, #255 wz
243d4     90 00 90 AD |  if_e	jmp	#LR__3313
243d8     FF 2C 0E F2 | 	cmp	local08, #255 wz
243dc     D8 00 90 AD |  if_e	jmp	#LR__3315
243e0     00 26 0E F2 | 	cmp	local05, #0 wz
243e4     0C 01 90 AD |  if_e	jmp	#LR__3316
243e8     17 24 26 F4 | 	bith	local04, #23
243ec                 | LR__3310
243ec     00 2C 0E F2 | 	cmp	local08, #0 wz
243f0     44 01 90 AD |  if_e	jmp	#LR__3320
243f4     17 2A 26 F4 | 	bith	local07, #23
243f8                 | LR__3311
243f8     12 21 02 F6 | 	mov	local02, local04
243fc     04 20 66 F0 | 	shl	local02, #4
24400     15 29 02 F6 | 	mov	local06, local07
24404     05 28 66 F0 | 	shl	local06, #5
24408     14 21 02 FD | 	qmul	local02, local06
2440c     16 27 02 F1 | 	add	local05, local08
24410     FE 26 86 F1 | 	sub	local05, #254
24414     13 2F 02 F6 | 	mov	local09, local05
24418     04 24 66 F0 | 	shl	local04, #4
2441c     05 2A 66 F0 | 	shl	local07, #5
24420     18 30 62 FD | 	getqx	local10
24424     15 25 02 FD | 	qmul	local04, local07
24428     19 32 62 FD | 	getqy	local11
2442c     00 80 00 FF 
24430     00 32 16 F2 | 	cmp	local11, ##16777216 wc
24434     18 00 90 CD |  if_b	jmp	#LR__3312
24438     01 2E 06 F1 | 	add	local09, #1
2443c     01 30 46 F0 | 	shr	local10, #1
24440     19 2D 02 F6 | 	mov	local08, local11
24444     1F 2C 66 F0 | 	shl	local08, #31
24448     16 31 42 F5 | 	or	local10, local08
2444c     01 32 46 F0 | 	shr	local11, #1
24450                 | LR__3312
24450     19 13 02 F6 | 	mov	arg01, local11
24454     18 15 02 F6 | 	mov	arg02, local10
24458     17 17 02 F6 | 	mov	arg03, local09
2445c     11 19 02 F6 | 	mov	arg04, local03
24460     20 33 B0 FD | 	call	#__system__pack_0639
24464     10 01 90 FD | 	jmp	#LR__3324
24468                 | LR__3313
24468     00 24 0E F2 | 	cmp	local04, #0 wz
2446c     0F FB 01 56 |  if_ne	mov	result1, local01
24470     04 01 90 5D |  if_ne	jmp	#LR__3324
24474     FF 2C 56 F2 | 	cmps	local08, #255 wc
24478     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
2447c     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
24480     18 00 90 4D |  if_c_and_nz	jmp	#LR__3314
24484     00 F8 3F CF 
24488     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2448c     E8 00 90 CD |  if_b	jmp	#LR__3324
24490     00 2A 0E F2 | 	cmp	local07, #0 wz
24494     10 FB 01 56 |  if_ne	mov	result1, local02
24498     DC 00 90 5D |  if_ne	jmp	#LR__3324
2449c                 | LR__3314
2449c     02 22 46 F5 | 	or	local03, #2
244a0     00 12 06 F6 | 	mov	arg01, #0
244a4     00 14 06 F6 | 	mov	arg02, #0
244a8     13 17 02 F6 | 	mov	arg03, local05
244ac     11 19 02 F6 | 	mov	arg04, local03
244b0     D0 32 B0 FD | 	call	#__system__pack_0639
244b4     C0 00 90 FD | 	jmp	#LR__3324
244b8                 | LR__3315
244b8     00 26 0E F2 | 	cmp	local05, #0 wz
244bc     00 24 0E A2 |  if_e	cmp	local04, #0 wz
244c0     00 F8 3F AF 
244c4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
244c8     AC 00 90 AD |  if_e	jmp	#LR__3324
244cc     00 2A 0E F2 | 	cmp	local07, #0 wz
244d0     10 FB 01 56 |  if_ne	mov	result1, local02
244d4     A0 00 90 5D |  if_ne	jmp	#LR__3324
244d8     16 17 02 F6 | 	mov	arg03, local08
244dc     11 19 02 F6 | 	mov	arg04, local03
244e0     02 18 46 F5 | 	or	arg04, #2
244e4     00 12 06 F6 | 	mov	arg01, #0
244e8     00 14 06 F6 | 	mov	arg02, #0
244ec     94 32 B0 FD | 	call	#__system__pack_0639
244f0     84 00 90 FD | 	jmp	#LR__3324
244f4                 | LR__3316
244f4     00 24 0E F2 | 	cmp	local04, #0 wz
244f8     20 00 90 AD |  if_e	jmp	#LR__3319
244fc     01 24 66 F0 | 	shl	local04, #1
24500     97 0A 48 FB | 	callpa	#(@LR__3318-@LR__3317)>>2,fcache_load_ptr_
24504                 | LR__3317
24504     00 40 00 FF 
24508     00 24 16 F2 | 	cmp	local04, ##8388608 wc
2450c     01 26 86 C1 |  if_b	sub	local05, #1
24510     01 24 66 C0 |  if_b	shl	local04, #1
24514     EC FF 9F CD |  if_b	jmp	#LR__3317
24518                 | LR__3318
24518     D0 FE 9F FD | 	jmp	#LR__3310
2451c                 | LR__3319
2451c     08 22 46 F5 | 	or	local03, #8
24520     00 12 06 F6 | 	mov	arg01, #0
24524     00 14 06 F6 | 	mov	arg02, #0
24528     00 16 06 F6 | 	mov	arg03, #0
2452c     11 19 02 F6 | 	mov	arg04, local03
24530     50 32 B0 FD | 	call	#__system__pack_0639
24534     40 00 90 FD | 	jmp	#LR__3324
24538                 | LR__3320
24538     00 2A 0E F2 | 	cmp	local07, #0 wz
2453c     20 00 90 AD |  if_e	jmp	#LR__3323
24540     01 2A 66 F0 | 	shl	local07, #1
24544     97 0A 48 FB | 	callpa	#(@LR__3322-@LR__3321)>>2,fcache_load_ptr_
24548                 | LR__3321
24548     00 40 00 FF 
2454c     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
24550     01 2C 86 C1 |  if_b	sub	local08, #1
24554     01 2A 66 C0 |  if_b	shl	local07, #1
24558     EC FF 9F CD |  if_b	jmp	#LR__3321
2455c                 | LR__3322
2455c     98 FE 9F FD | 	jmp	#LR__3311
24560                 | LR__3323
24560     08 22 46 F5 | 	or	local03, #8
24564     00 12 06 F6 | 	mov	arg01, #0
24568     00 14 06 F6 | 	mov	arg02, #0
2456c     00 16 06 F6 | 	mov	arg03, #0
24570     11 19 02 F6 | 	mov	arg04, local03
24574     0C 32 B0 FD | 	call	#__system__pack_0639
24578                 | LR__3324
24578     A7 F0 03 F6 | 	mov	ptra, fp
2457c     B2 00 A0 FD | 	call	#popregs_
24580                 | __system___float_mul_ret
24580     2D 00 64 FD | 	ret
24584                 | 
24584                 | __system___float_div
24584     0E 4A 05 F6 | 	mov	COUNT_, #14
24588     A8 00 A0 FD | 	call	#pushregs_
2458c     09 23 02 F6 | 	mov	local03, arg01
24590     0A 25 02 F6 | 	mov	local04, arg02
24594     11 27 02 F6 | 	mov	local05, local03
24598     13 29 02 F6 | 	mov	local06, local05
2459c     16 28 46 F7 | 	zerox	local06, #22
245a0     13 2B 02 F6 | 	mov	local07, local05
245a4     01 2A 66 F0 | 	shl	local07, #1
245a8     18 2A 46 F0 | 	shr	local07, #24
245ac     1F 26 46 F0 | 	shr	local05, #31
245b0     12 FB 01 F6 | 	mov	result1, local04
245b4     FD 2C 02 F6 | 	mov	local08, result1
245b8     16 2F 02 F6 | 	mov	local09, local08
245bc     16 2E 46 F7 | 	zerox	local09, #22
245c0     16 31 02 F6 | 	mov	local10, local08
245c4     01 30 66 F0 | 	shl	local10, #1
245c8     18 30 46 F0 | 	shr	local10, #24
245cc     1F 2C 46 F0 | 	shr	local08, #31
245d0     16 27 62 F5 | 	xor	local05, local08
245d4     FF 2A 0E F2 | 	cmp	local07, #255 wz
245d8     D4 00 90 AD |  if_e	jmp	#LR__3335
245dc     FF 30 0E F2 | 	cmp	local10, #255 wz
245e0     04 01 90 AD |  if_e	jmp	#LR__3336
245e4     00 2A 0E F2 | 	cmp	local07, #0 wz
245e8     24 01 90 AD |  if_e	jmp	#LR__3337
245ec     17 28 26 F4 | 	bith	local06, #23
245f0                 | LR__3330
245f0     00 30 0E F2 | 	cmp	local10, #0 wz
245f4     70 01 90 AD |  if_e	jmp	#LR__3341
245f8     17 2E 26 F4 | 	bith	local09, #23
245fc                 | LR__3331
245fc     18 2B 82 F1 | 	sub	local07, local10
24600     15 33 02 F6 | 	mov	local11, local07
24604     14 13 02 F6 | 	mov	arg01, local06
24608     02 12 46 F0 | 	shr	arg01, #2
2460c     1E 28 66 F0 | 	shl	local06, #30
24610     14 15 02 F6 | 	mov	arg02, local06
24614     17 17 02 F6 | 	mov	arg03, local09
24618     28 12 62 FD | 	setq	arg01
2461c     0B 15 12 FD | 	qdiv	arg02, arg03
24620     00 34 06 F6 | 	mov	local12, #0
24624     18 1E 62 FD | 	getqx	local01
24628     19 FC 61 FD | 	getqy	result2
2462c     FE 20 02 F6 | 	mov	local02, result2
24630     0F 37 02 F6 | 	mov	local13, local01
24634     00 20 4E F2 | 	cmps	local02, #0 wz
24638     1B 39 02 F6 | 	mov	local14, local13
2463c     19 38 66 F0 | 	shl	local14, #25
24640     01 34 06 56 |  if_ne	mov	local12, #1
24644     1A 39 42 F5 | 	or	local14, local12
24648     07 36 46 F0 | 	shr	local13, #7
2464c     00 80 00 FF 
24650     00 36 16 F2 | 	cmp	local13, ##16777216 wc
24654     1C 00 90 CD |  if_b	jmp	#LR__3332
24658     01 32 06 F1 | 	add	local11, #1
2465c     01 38 46 F0 | 	shr	local14, #1
24660     1B 35 02 F6 | 	mov	local12, local13
24664     1F 34 66 F0 | 	shl	local12, #31
24668     1A 39 42 F5 | 	or	local14, local12
2466c     01 36 46 F0 | 	shr	local13, #1
24670     24 00 90 FD | 	jmp	#LR__3334
24674                 | LR__3332
24674     00 40 00 FF 
24678     00 36 16 F2 | 	cmp	local13, ##8388608 wc
2467c     18 00 90 3D |  if_ae	jmp	#LR__3333
24680     01 32 86 F1 | 	sub	local11, #1
24684     01 36 66 F0 | 	shl	local13, #1
24688     1C 35 02 F6 | 	mov	local12, local14
2468c     1F 34 46 F0 | 	shr	local12, #31
24690     1A 37 42 F5 | 	or	local13, local12
24694     01 38 66 F0 | 	shl	local14, #1
24698                 | LR__3333
24698                 | LR__3334
24698     1B 13 02 F6 | 	mov	arg01, local13
2469c     1C 15 02 F6 | 	mov	arg02, local14
246a0     19 17 02 F6 | 	mov	arg03, local11
246a4     13 19 02 F6 | 	mov	arg04, local05
246a8     D8 30 B0 FD | 	call	#__system__pack_0639
246ac     F8 00 90 FD | 	jmp	#LR__3345
246b0                 | LR__3335
246b0     00 28 0E F2 | 	cmp	local06, #0 wz
246b4     11 FB 01 56 |  if_ne	mov	result1, local03
246b8     EC 00 90 5D |  if_ne	jmp	#LR__3345
246bc     FF 30 0E F2 | 	cmp	local10, #255 wz
246c0     00 F8 3F AF 
246c4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
246c8     DC 00 90 AD |  if_e	jmp	#LR__3345
246cc     02 26 46 F5 | 	or	local05, #2
246d0     00 12 06 F6 | 	mov	arg01, #0
246d4     00 14 06 F6 | 	mov	arg02, #0
246d8     15 17 02 F6 | 	mov	arg03, local07
246dc     13 19 02 F6 | 	mov	arg04, local05
246e0     A0 30 B0 FD | 	call	#__system__pack_0639
246e4     C0 00 90 FD | 	jmp	#LR__3345
246e8                 | LR__3336
246e8     00 2E 0E F2 | 	cmp	local09, #0 wz
246ec     12 FB 01 56 |  if_ne	mov	result1, local04
246f0     B4 00 90 5D |  if_ne	jmp	#LR__3345
246f4     13 19 02 F6 | 	mov	arg04, local05
246f8     08 18 46 F5 | 	or	arg04, #8
246fc     00 12 06 F6 | 	mov	arg01, #0
24700     00 14 06 F6 | 	mov	arg02, #0
24704     00 16 06 F6 | 	mov	arg03, #0
24708     78 30 B0 FD | 	call	#__system__pack_0639
2470c     98 00 90 FD | 	jmp	#LR__3345
24710                 | LR__3337
24710     00 28 0E F2 | 	cmp	local06, #0 wz
24714     20 00 90 AD |  if_e	jmp	#LR__3340
24718     01 28 66 F0 | 	shl	local06, #1
2471c     97 0A 48 FB | 	callpa	#(@LR__3339-@LR__3338)>>2,fcache_load_ptr_
24720                 | LR__3338
24720     00 40 00 FF 
24724     00 28 16 F2 | 	cmp	local06, ##8388608 wc
24728     01 2A 86 C1 |  if_b	sub	local07, #1
2472c     01 28 66 C0 |  if_b	shl	local06, #1
24730     EC FF 9F CD |  if_b	jmp	#LR__3338
24734                 | LR__3339
24734     B8 FE 9F FD | 	jmp	#LR__3330
24738                 | LR__3340
24738     00 30 0E F2 | 	cmp	local10, #0 wz
2473c     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
24740     00 F8 3F AF 
24744     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24748     5C 00 90 AD |  if_e	jmp	#LR__3345
2474c     13 19 02 F6 | 	mov	arg04, local05
24750     08 18 46 F5 | 	or	arg04, #8
24754     00 12 06 F6 | 	mov	arg01, #0
24758     00 14 06 F6 | 	mov	arg02, #0
2475c     00 16 06 F6 | 	mov	arg03, #0
24760     20 30 B0 FD | 	call	#__system__pack_0639
24764     40 00 90 FD | 	jmp	#LR__3345
24768                 | LR__3341
24768     00 2E 0E F2 | 	cmp	local09, #0 wz
2476c     20 00 90 AD |  if_e	jmp	#LR__3344
24770     01 2E 66 F0 | 	shl	local09, #1
24774     97 0A 48 FB | 	callpa	#(@LR__3343-@LR__3342)>>2,fcache_load_ptr_
24778                 | LR__3342
24778     00 40 00 FF 
2477c     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
24780     01 30 86 C1 |  if_b	sub	local10, #1
24784     01 2E 66 C0 |  if_b	shl	local09, #1
24788     EC FF 9F CD |  if_b	jmp	#LR__3342
2478c                 | LR__3343
2478c     6C FE 9F FD | 	jmp	#LR__3331
24790                 | LR__3344
24790     02 26 46 F5 | 	or	local05, #2
24794     00 12 06 F6 | 	mov	arg01, #0
24798     00 14 06 F6 | 	mov	arg02, #0
2479c     00 16 06 F6 | 	mov	arg03, #0
247a0     13 19 02 F6 | 	mov	arg04, local05
247a4     DC 2F B0 FD | 	call	#__system__pack_0639
247a8                 | LR__3345
247a8     A7 F0 03 F6 | 	mov	ptra, fp
247ac     B2 00 A0 FD | 	call	#popregs_
247b0                 | __system___float_div_ret
247b0     2D 00 64 FD | 	ret
247b4                 | 
247b4                 | __system___float_cmp
247b4     00 C0 3F FF 
247b8     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
247bc     00 C0 3F CF 
247c0     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
247c4     0B FB 01 36 |  if_ae	mov	result1, arg03
247c8     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
247cc     00 C0 7F FF 
247d0     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
247d4     00 C0 7F CF 
247d8     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
247dc     0B FB 01 36 |  if_ae	mov	result1, arg03
247e0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
247e4     00 12 56 F2 | 	cmps	arg01, #0 wc
247e8     2C 00 90 3D |  if_ae	jmp	#LR__3350
247ec     00 14 56 F2 | 	cmps	arg02, #0 wc
247f0     0A FB 01 C6 |  if_b	mov	result1, arg02
247f4     09 FB 81 C1 |  if_b	sub	result1, arg01
247f8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
247fc     00 14 0E F2 | 	cmp	arg02, #0 wz
24800     00 00 40 AF 
24804     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
24808     00 FA 05 A6 |  if_e	mov	result1, #0
2480c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
24810     01 FA 65 F6 | 	neg	result1, #1
24814     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
24818                 | LR__3350
24818     00 14 56 F2 | 	cmps	arg02, #0 wc
2481c     1C 00 90 3D |  if_ae	jmp	#LR__3351
24820     00 12 0E F2 | 	cmp	arg01, #0 wz
24824     00 00 40 AF 
24828     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2482c     00 FA 05 A6 |  if_e	mov	result1, #0
24830     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
24834     01 FA 05 F6 | 	mov	result1, #1
24838     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2483c                 | LR__3351
2483c     0A 13 82 F1 | 	sub	arg01, arg02
24840     09 FB 01 F6 | 	mov	result1, arg01
24844                 | __system___float_cmp_ret
24844     2D 00 64 FD | 	ret
24848                 | 
24848                 | __system___float_tointeger
24848     02 4A 05 F6 | 	mov	COUNT_, #2
2484c     A8 00 A0 FD | 	call	#pushregs_
24850     50 00 B0 FD | 	call	#__system___float_Unpack
24854     FF FF 7F FF 
24858     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2485c     34 00 90 CD |  if_b	jmp	#LR__3360
24860     1F FC 55 F2 | 	cmps	result2, #31 wc
24864     2C 00 90 3D |  if_ae	jmp	#LR__3360
24868     02 FE 65 F0 | 	shl	result3, #2
2486c     1E 1E 06 F6 | 	mov	local01, #30
24870     FE 1E 82 F1 | 	sub	local01, result2
24874     0F FF 41 F0 | 	shr	result3, local01
24878     FF 20 02 F6 | 	mov	local02, result3
2487c     0A 21 02 F1 | 	add	local02, arg02
24880     01 20 46 F0 | 	shr	local02, #1
24884     00 FA 0D F2 | 	cmp	result1, #0 wz
24888     10 21 62 56 |  if_ne	neg	local02, local02
2488c     10 FB 01 F6 | 	mov	result1, local02
24890     04 00 90 FD | 	jmp	#LR__3361
24894                 | LR__3360
24894     00 FA 05 F6 | 	mov	result1, #0
24898                 | LR__3361
24898     A7 F0 03 F6 | 	mov	ptra, fp
2489c     B2 00 A0 FD | 	call	#popregs_
248a0                 | __system___float_tointeger_ret
248a0     2D 00 64 FD | 	ret
248a4                 | 
248a4                 | __system___float_Unpack
248a4     09 01 02 F6 | 	mov	_var01, arg01
248a8     1F 00 46 F0 | 	shr	_var01, #31
248ac     09 03 02 F6 | 	mov	_var02, arg01
248b0     01 02 66 F0 | 	shl	_var02, #1
248b4     18 02 4E F0 | 	shr	_var02, #24 wz
248b8     17 13 06 F4 | 	bitl	arg01, #279
248bc     06 12 66 50 |  if_ne	shl	arg01, #6
248c0     1D 12 26 54 |  if_ne	bith	arg01, #29
248c4     1C 00 90 5D |  if_ne	jmp	#LR__3370
248c8     09 05 92 F7 | 	encod	_var03, arg01 wc
248cc     01 04 06 C1 |  if_b	add	_var03, #1
248d0     17 04 86 F1 | 	sub	_var03, #23
248d4     02 03 02 F6 | 	mov	_var02, _var03
248d8     07 FC 05 F6 | 	mov	result2, #7
248dc     02 FD 81 F1 | 	sub	result2, _var03
248e0     FE 12 62 F0 | 	shl	arg01, result2
248e4                 | LR__3370
248e4     7F 02 86 F1 | 	sub	_var02, #127
248e8     09 FF 01 F6 | 	mov	result3, arg01
248ec     00 FB 01 F6 | 	mov	result1, _var01
248f0     01 FD 01 F6 | 	mov	result2, _var02
248f4                 | __system___float_Unpack_ret
248f4     2D 00 64 FD | 	ret
248f8                 | 
248f8                 | __system___float_Pack
248f8     00 00 06 F6 | 	mov	_var01, #0
248fc     00 16 0E F2 | 	cmp	arg03, #0 wz
24900     8C 00 90 AD |  if_e	jmp	#LR__3381
24904     0B 03 92 F7 | 	encod	_var02, arg03 wc
24908     01 02 06 C1 |  if_b	add	_var02, #1
2490c     21 00 06 F6 | 	mov	_var01, #33
24910     01 01 82 F1 | 	sub	_var01, _var02
24914     00 17 62 F0 | 	shl	arg03, _var01
24918     03 02 06 F6 | 	mov	_var02, #3
2491c     00 03 82 F1 | 	sub	_var02, _var01
24920     01 15 02 F1 | 	add	arg02, _var02
24924     0A 05 02 F6 | 	mov	_var03, arg02
24928     00 17 06 F1 | 	add	arg03, #256
2492c     0B 03 02 F6 | 	mov	_var02, arg03
24930     FF 02 2E F5 | 	andn	_var02, #255 wz
24934     01 04 06 A1 |  if_e	add	_var03, #1
24938     7F 04 06 F1 | 	add	_var03, #127
2493c     FF FF 7F FF 
24940     E9 05 46 F3 | 	fges	_var03, ##-23
24944     FF 04 66 F3 | 	fles	_var03, #255
24948     01 04 56 F2 | 	cmps	_var03, #1 wc
2494c     1C 00 90 3D |  if_ae	jmp	#LR__3380
24950     01 16 46 F0 | 	shr	arg03, #1
24954     1F 02 C6 F9 | 	decod	_var02, #31
24958     0B 03 02 F1 | 	add	_var02, arg03
2495c     02 05 62 F6 | 	neg	_var03, _var03
24960     02 03 42 F0 | 	shr	_var02, _var03
24964     01 17 02 F6 | 	mov	arg03, _var02
24968     00 04 06 F6 | 	mov	_var03, #0
2496c                 | LR__3380
2496c     09 FB 01 F6 | 	mov	result1, arg01
24970     1F FA 65 F0 | 	shl	result1, #31
24974     02 03 02 F6 | 	mov	_var02, _var03
24978     17 02 66 F0 | 	shl	_var02, #23
2497c     01 FB 41 F5 | 	or	result1, _var02
24980     0B 07 02 F6 | 	mov	_var04, arg03
24984     09 06 46 F0 | 	shr	_var04, #9
24988     03 FB 41 F5 | 	or	result1, _var04
2498c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
24990                 | LR__3381
24990     00 FB 01 F6 | 	mov	result1, _var01
24994                 | __system___float_Pack_ret
24994     2D 00 64 FD | 	ret
24998                 | 
24998                 | __system___basic_print_float
24998     05 4A 05 F6 | 	mov	COUNT_, #5
2499c     A8 00 A0 FD | 	call	#pushregs_
249a0     09 1F 02 F6 | 	mov	local01, arg01
249a4     0A 21 02 F6 | 	mov	local02, arg02
249a8     0B 23 0A F6 | 	mov	local03, arg03 wz
249ac     0C 25 02 F6 | 	mov	local04, arg04
249b0     14 00 90 5D |  if_ne	jmp	#LR__3390
249b4     23 24 0E F2 | 	cmp	local04, #35 wz
249b8     80 02 10 AF 
249bc     00 26 06 A6 |  if_e	mov	local05, ##537198592
249c0     1D 26 C6 59 |  if_ne	decod	local05, #29
249c4     13 23 02 F6 | 	mov	local03, local05
249c8                 | LR__3390
249c8     0F 13 02 F6 | 	mov	arg01, local01
249cc     98 28 B0 FD | 	call	#__system___gettxfunc
249d0     FD 26 0A F6 | 	mov	local05, result1 wz
249d4     00 FA 05 A6 |  if_e	mov	result1, #0
249d8     13 13 02 56 |  if_ne	mov	arg01, local05
249dc     11 15 02 56 |  if_ne	mov	arg02, local03
249e0     10 17 02 56 |  if_ne	mov	arg03, local02
249e4     12 19 02 56 |  if_ne	mov	arg04, local04
249e8     28 DD BF 5D |  if_ne	call	#__system___fmtfloat
249ec     A7 F0 03 F6 | 	mov	ptra, fp
249f0     B2 00 A0 FD | 	call	#popregs_
249f4                 | __system___basic_print_float_ret
249f4     2D 00 64 FD | 	ret
249f8                 | 
249f8                 | __system____builtin_atoi
249f8     07 4A 05 F6 | 	mov	COUNT_, #7
249fc     A8 00 A0 FD | 	call	#pushregs_
24a00                 | __system____builtin_atoi_enter
24a00     09 1F 02 F6 | 	mov	local01, arg01
24a04     0A 21 02 F6 | 	mov	local02, arg02
24a08     00 22 06 F6 | 	mov	local03, #0
24a0c     00 24 06 F6 | 	mov	local04, #0
24a10     00 26 06 F6 | 	mov	local05, #0
24a14     97 1C 48 FB | 	callpa	#(@LR__3402-@LR__3400)>>2,fcache_load_ptr_
24a18                 | LR__3400
24a18     0F 29 C2 FA | 	rdbyte	local06, local01
24a1c     20 28 0E F2 | 	cmp	local06, #32 wz
24a20     01 1E 06 A1 |  if_e	add	local01, #1
24a24     F0 FF 9F AD |  if_e	jmp	#LR__3400
24a28     0F 2B C2 FA | 	rdbyte	local07, local01
24a2c                 | LR__3401
24a2c     2D 2A 0E F2 | 	cmp	local07, #45 wz
24a30     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
24a34     18 00 90 5D |  if_ne	jmp	#LR__3403
24a38     01 1E 06 F1 | 	add	local01, #1
24a3c     2D 2A 0E F2 | 	cmp	local07, #45 wz
24a40     01 28 06 A6 |  if_e	mov	local06, #1
24a44     14 27 C2 A2 |  if_e	subr	local05, local06
24a48     0F 2B C2 FA | 	rdbyte	local07, local01
24a4c     DC FF 9F FD | 	jmp	#LR__3401
24a50                 | LR__3402
24a50                 | LR__3403
24a50     00 20 0E F2 | 	cmp	local02, #0 wz
24a54     1C 00 90 5D |  if_ne	jmp	#LR__3405
24a58     24 2A 0E F2 | 	cmp	local07, #36 wz
24a5c     10 20 06 A6 |  if_e	mov	local02, #16
24a60     01 1E 06 A1 |  if_e	add	local01, #1
24a64     0C 00 90 AD |  if_e	jmp	#LR__3404
24a68     25 2A 0E F2 | 	cmp	local07, #37 wz
24a6c     02 20 06 A6 |  if_e	mov	local02, #2
24a70     01 1E 06 A1 |  if_e	add	local01, #1
24a74                 | LR__3404
24a74                 | LR__3405
24a74     97 48 48 FB | 	callpa	#(@LR__3413-@LR__3406)>>2,fcache_load_ptr_
24a78                 | LR__3406
24a78                 | LR__3407
24a78     0F 2B C2 FA | 	rdbyte	local07, local01
24a7c     5F 2A 0E F2 | 	cmp	local07, #95 wz
24a80     01 1E 06 F1 | 	add	local01, #1
24a84     F0 FF 9F AD |  if_e	jmp	#LR__3407
24a88     30 2A 0E F2 | 	cmp	local07, #48 wz
24a8c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
24a90     00 24 06 A6 |  if_e	mov	local04, #0
24a94     60 00 90 AD |  if_e	jmp	#LR__3412
24a98     31 2A 56 F2 | 	cmps	local07, #49 wc
24a9c     18 00 90 CD |  if_b	jmp	#LR__3408
24aa0     3A 2A 56 F2 | 	cmps	local07, #58 wc
24aa4     15 25 02 C6 |  if_b	mov	local04, local07
24aa8     30 24 86 C1 |  if_b	sub	local04, #48
24aac     00 20 0E C2 |  if_b	cmp	local02, #0 wz
24ab0     0A 20 06 86 |  if_c_and_z	mov	local02, #10
24ab4     40 00 90 CD |  if_b	jmp	#LR__3411
24ab8                 | LR__3408
24ab8     0B 20 56 F2 | 	cmps	local02, #11 wc
24abc     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
24ac0     14 00 90 CD |  if_b	jmp	#LR__3409
24ac4     67 2A 56 F2 | 	cmps	local07, #103 wc
24ac8     61 2A 86 C1 |  if_b	sub	local07, #97
24acc     0A 24 06 C6 |  if_b	mov	local04, #10
24ad0     15 25 02 C1 |  if_b	add	local04, local07
24ad4     20 00 90 CD |  if_b	jmp	#LR__3410
24ad8                 | LR__3409
24ad8     0B 20 56 F2 | 	cmps	local02, #11 wc
24adc     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
24ae0     24 00 90 CD |  if_b	jmp	#LR__3414
24ae4     47 2A 56 F2 | 	cmps	local07, #71 wc
24ae8     41 2A 86 C1 |  if_b	sub	local07, #65
24aec     0A 24 06 C6 |  if_b	mov	local04, #10
24af0     15 25 02 C1 |  if_b	add	local04, local07
24af4     10 00 90 3D |  if_ae	jmp	#LR__3414
24af8                 | LR__3410
24af8                 | LR__3411
24af8                 | LR__3412
24af8     11 21 02 FD | 	qmul	local02, local03
24afc     18 22 62 FD | 	getqx	local03
24b00     12 23 02 F1 | 	add	local03, local04
24b04     70 FF 9F FD | 	jmp	#LR__3406
24b08                 | LR__3413
24b08                 | LR__3414
24b08     00 20 0E F2 | 	cmp	local02, #0 wz
24b0c     64 00 90 5D |  if_ne	jmp	#LR__3420
24b10     78 2A 0E F2 | 	cmp	local07, #120 wz
24b14     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
24b18     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
24b1c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
24b20     14 00 90 5D |  if_ne	jmp	#LR__3415
24b24     0F 13 02 F6 | 	mov	arg01, local01
24b28     10 14 06 F6 | 	mov	arg02, #16
24b2c     C8 FE BF FD | 	call	#__system____builtin_atoi
24b30     FD 22 02 F6 | 	mov	local03, result1
24b34     3C 00 90 FD | 	jmp	#LR__3419
24b38                 | LR__3415
24b38     62 2A 0E F2 | 	cmp	local07, #98 wz
24b3c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
24b40     14 00 90 5D |  if_ne	jmp	#LR__3416
24b44     0F 13 02 F6 | 	mov	arg01, local01
24b48     02 14 06 F6 | 	mov	arg02, #2
24b4c     A8 FE BF FD | 	call	#__system____builtin_atoi
24b50     FD 22 02 F6 | 	mov	local03, result1
24b54     1C 00 90 FD | 	jmp	#LR__3418
24b58                 | LR__3416
24b58     6F 2A 0E F2 | 	cmp	local07, #111 wz
24b5c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
24b60     10 00 90 5D |  if_ne	jmp	#LR__3417
24b64     0F 13 02 F6 | 	mov	arg01, local01
24b68     08 14 06 F6 | 	mov	arg02, #8
24b6c     88 FE BF FD | 	call	#__system____builtin_atoi
24b70     FD 22 02 F6 | 	mov	local03, result1
24b74                 | LR__3417
24b74                 | LR__3418
24b74                 | LR__3419
24b74                 | LR__3420
24b74     00 26 0E F2 | 	cmp	local05, #0 wz
24b78     11 23 62 56 |  if_ne	neg	local03, local03
24b7c     11 FB 01 F6 | 	mov	result1, local03
24b80     A7 F0 03 F6 | 	mov	ptra, fp
24b84     B2 00 A0 FD | 	call	#popregs_
24b88                 | __system____builtin_atoi_ret
24b88     2D 00 64 FD | 	ret
24b8c                 | 
24b8c                 | __system____builtin_atof
24b8c     07 4A 05 F6 | 	mov	COUNT_, #7
24b90     A8 00 A0 FD | 	call	#pushregs_
24b94     09 1F 02 F6 | 	mov	local01, arg01
24b98     00 20 06 F6 | 	mov	local02, #0
24b9c     00 22 06 F6 | 	mov	local03, #0
24ba0     00 24 06 F6 | 	mov	local04, #0
24ba4     00 26 06 F6 | 	mov	local05, #0
24ba8     97 08 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
24bac                 | LR__3430
24bac     0F 17 C2 FA | 	rdbyte	arg03, local01
24bb0     20 16 0E F2 | 	cmp	arg03, #32 wz
24bb4     01 1E 06 A1 |  if_e	add	local01, #1
24bb8     F0 FF 9F AD |  if_e	jmp	#LR__3430
24bbc                 | LR__3431
24bbc     0F 29 C2 FA | 	rdbyte	local06, local01
24bc0                 | LR__3432
24bc0     2B 28 0E F2 | 	cmp	local06, #43 wz
24bc4     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
24bc8     14 00 90 5D |  if_ne	jmp	#LR__3433
24bcc     2D 28 0E F2 | 	cmp	local06, #45 wz
24bd0     1F 24 E6 A4 |  if_e	bitnot	local04, #31
24bd4     01 1E 06 F1 | 	add	local01, #1
24bd8     0F 29 C2 FA | 	rdbyte	local06, local01
24bdc     E0 FF 9F FD | 	jmp	#LR__3432
24be0                 | LR__3433
24be0                 | LR__3434
24be0     97 08 48 FB | 	callpa	#(@LR__3436-@LR__3435)>>2,fcache_load_ptr_
24be4                 | LR__3435
24be4     0F 29 C2 FA | 	rdbyte	local06, local01
24be8     5F 28 0E F2 | 	cmp	local06, #95 wz
24bec     01 1E 06 F1 | 	add	local01, #1
24bf0     F0 FF 9F AD |  if_e	jmp	#LR__3435
24bf4                 | LR__3436
24bf4     00 28 0E F2 | 	cmp	local06, #0 wz
24bf8     5C 00 90 AD |  if_e	jmp	#LR__3438
24bfc     30 28 56 F2 | 	cmps	local06, #48 wc
24c00     44 00 90 CD |  if_b	jmp	#LR__3437
24c04     3A 28 56 F2 | 	cmps	local06, #58 wc
24c08     3C 00 90 3D |  if_ae	jmp	#LR__3437
24c0c     10 13 02 F6 | 	mov	arg01, local02
24c10     00 90 20 FF 
24c14     00 14 06 F6 | 	mov	arg02, ##1092616192
24c18     64 F7 BF FD | 	call	#__system___float_mul
24c1c     FD 20 02 F6 | 	mov	local02, result1
24c20     30 28 86 F1 | 	sub	local06, #48
24c24     14 13 02 F6 | 	mov	arg01, local06
24c28     50 F3 BF FD | 	call	#__system___float_fromuns
24c2c     FD 14 02 F6 | 	mov	arg02, result1
24c30     10 13 02 F6 | 	mov	arg01, local02
24c34     78 F3 BF FD | 	call	#__system___float_add
24c38     FD 20 02 F6 | 	mov	local02, result1
24c3c     00 26 0E F2 | 	cmp	local05, #0 wz
24c40     01 22 86 51 |  if_ne	sub	local03, #1
24c44     98 FF 9F FD | 	jmp	#LR__3434
24c48                 | LR__3437
24c48     2E 28 0E F2 | 	cmp	local06, #46 wz
24c4c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
24c50     01 26 06 A6 |  if_e	mov	local05, #1
24c54     88 FF 9F AD |  if_e	jmp	#LR__3434
24c58                 | LR__3438
24c58     45 28 0E F2 | 	cmp	local06, #69 wz
24c5c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
24c60     18 00 90 5D |  if_ne	jmp	#LR__3439
24c64     0F 13 02 F6 | 	mov	arg01, local01
24c68     00 14 06 F6 | 	mov	arg02, #0
24c6c     88 FD BF FD | 	call	#__system____builtin_atoi
24c70     11 FB 01 F1 | 	add	result1, local03
24c74     FD 2A 02 F6 | 	mov	local07, result1
24c78     04 00 90 FD | 	jmp	#LR__3440
24c7c                 | LR__3439
24c7c     11 2B 02 F6 | 	mov	local07, local03
24c80                 | LR__3440
24c80     15 17 02 F6 | 	mov	arg03, local07
24c84     10 13 02 F6 | 	mov	arg01, local02
24c88     00 90 20 FF 
24c8c     00 14 06 F6 | 	mov	arg02, ##1092616192
24c90     F4 06 B0 FD | 	call	#__system___float_pow_n
24c94     12 FB 61 F5 | 	xor	result1, local04
24c98     A7 F0 03 F6 | 	mov	ptra, fp
24c9c     B2 00 A0 FD | 	call	#popregs_
24ca0                 | __system____builtin_atof_ret
24ca0     2D 00 64 FD | 	ret
24ca4                 | 
24ca4                 | __system____builtin_ilogb
24ca4     FC FB BF FD | 	call	#__system___float_Unpack
24ca8     00 FE 0D F2 | 	cmp	result3, #0 wz
24cac     00 00 40 AF 
24cb0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
24cb4     24 00 90 AD |  if_e	jmp	#LR__3451
24cb8     80 FC 0D F2 | 	cmp	result2, #128 wz
24cbc     18 00 90 5D |  if_ne	jmp	#LR__3450
24cc0     00 00 10 FF 
24cc4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
24cc8     1E FA CD A9 |  if_e	bmask	result1, #30
24ccc     0C 00 90 AD |  if_e	jmp	#LR__3451
24cd0     1F FA C5 F9 | 	decod	result1, #31
24cd4     04 00 90 FD | 	jmp	#LR__3451
24cd8                 | LR__3450
24cd8     FE FA 01 F6 | 	mov	result1, result2
24cdc                 | LR__3451
24cdc                 | __system____builtin_ilogb_ret
24cdc     2D 00 64 FD | 	ret
24ce0                 | 
24ce0                 | __system____builtin_sinf
24ce0     03 4A 05 F6 | 	mov	COUNT_, #3
24ce4     A8 00 A0 FD | 	call	#pushregs_
24ce8     09 1F 02 F6 | 	mov	local01, arg01
24cec     87 64 20 FF 
24cf0     DB 15 06 F6 | 	mov	arg02, ##1086918619
24cf4     8C F8 BF FD | 	call	#__system___float_div
24cf8     FD 12 02 F6 | 	mov	arg01, result1
24cfc     00 14 06 F6 | 	mov	arg02, #0
24d00     44 FB BF FD | 	call	#__system___float_tointeger
24d04     FD 16 0A F6 | 	mov	arg03, result1 wz
24d08     44 00 90 AD |  if_e	jmp	#LR__3460
24d0c     0B 13 52 F6 | 	abs	arg01, arg03 wc
24d10     1F 20 C6 C9 |  if_b	decod	local02, #31
24d14     00 20 06 36 |  if_ae	mov	local02, #0
24d18     60 F2 BF FD | 	call	#__system___float_fromuns
24d1c     10 FB 61 F5 | 	xor	result1, local02
24d20     FD 12 02 F6 | 	mov	arg01, result1
24d24     1E 14 C6 F9 | 	decod	arg02, #30
24d28     54 F6 BF FD | 	call	#__system___float_mul
24d2c     FD 12 02 F6 | 	mov	arg01, result1
24d30     87 24 20 FF 
24d34     DB 15 06 F6 | 	mov	arg02, ##1078530011
24d38     44 F6 BF FD | 	call	#__system___float_mul
24d3c     FD 14 02 F6 | 	mov	arg02, result1
24d40     0F 13 02 F6 | 	mov	arg01, local01
24d44     1F 14 E6 F4 | 	bitnot	arg02, #31
24d48     64 F2 BF FD | 	call	#__system___float_add
24d4c     FD 1E 02 F6 | 	mov	local01, result1
24d50                 | LR__3460
24d50     0F 13 02 F6 | 	mov	arg01, local01
24d54     66 E6 1E FF 
24d58     CD 14 06 F6 | 	mov	arg02, ##1036831949
24d5c     01 16 06 F6 | 	mov	arg03, #1
24d60     50 FA BF FD | 	call	#__system___float_cmp
24d64     00 FA 55 F2 | 	cmps	result1, #0 wc
24d68     5C 00 90 3D |  if_ae	jmp	#LR__3461
24d6c     0F 13 02 F6 | 	mov	arg01, local01
24d70     66 E6 5E FF 
24d74     CD 14 06 F6 | 	mov	arg02, ##-1110651699
24d78     01 16 66 F6 | 	neg	arg03, #1
24d7c     34 FA BF FD | 	call	#__system___float_cmp
24d80     01 FA 55 F2 | 	cmps	result1, #1 wc
24d84     40 00 90 CD |  if_b	jmp	#LR__3461
24d88     0F 13 02 F6 | 	mov	arg01, local01
24d8c     0F 15 02 F6 | 	mov	arg02, local01
24d90     EC F5 BF FD | 	call	#__system___float_mul
24d94     FD 12 02 F6 | 	mov	arg01, result1
24d98     0F 15 02 F6 | 	mov	arg02, local01
24d9c     E0 F5 BF FD | 	call	#__system___float_mul
24da0     FD 12 02 F6 | 	mov	arg01, result1
24da4     00 60 20 FF 
24da8     00 14 06 F6 | 	mov	arg02, ##1086324736
24dac     D4 F7 BF FD | 	call	#__system___float_div
24db0     FD 14 02 F6 | 	mov	arg02, result1
24db4     0F 13 02 F6 | 	mov	arg01, local01
24db8     1F 14 E6 F4 | 	bitnot	arg02, #31
24dbc     F0 F1 BF FD | 	call	#__system___float_add
24dc0     FD 22 02 F6 | 	mov	local03, result1
24dc4     54 00 90 FD | 	jmp	#LR__3462
24dc8                 | LR__3461
24dc8     0F 13 02 F6 | 	mov	arg01, local01
24dcc     7C 91 26 FF 
24dd0     83 15 06 F6 | 	mov	arg02, ##1294137731
24dd4     A8 F5 BF FD | 	call	#__system___float_mul
24dd8     FD 12 02 F6 | 	mov	arg01, result1
24ddc     00 14 06 F6 | 	mov	arg02, #0
24de0     64 FA BF FD | 	call	#__system___float_tointeger
24de4     02 FA 65 F0 | 	shl	result1, #2
24de8     00 00 A0 FF 
24dec     FD 00 48 FD | 	qrotate	##1073741824, result1
24df0     19 12 62 FD | 	getqy	arg01
24df4     09 13 52 F6 | 	abs	arg01, arg01 wc
24df8     1F 20 C6 C9 |  if_b	decod	local02, #31
24dfc     00 20 06 36 |  if_ae	mov	local02, #0
24e00     78 F1 BF FD | 	call	#__system___float_fromuns
24e04     10 FB 61 F5 | 	xor	result1, local02
24e08     FD 12 02 F6 | 	mov	arg01, result1
24e0c     00 40 27 FF 
24e10     00 14 06 F6 | 	mov	arg02, ##1317011456
24e14     6C F7 BF FD | 	call	#__system___float_div
24e18     FD 22 02 F6 | 	mov	local03, result1
24e1c                 | LR__3462
24e1c     11 FB 01 F6 | 	mov	result1, local03
24e20     A7 F0 03 F6 | 	mov	ptra, fp
24e24     B2 00 A0 FD | 	call	#popregs_
24e28                 | __system____builtin_sinf_ret
24e28     2D 00 64 FD | 	ret
24e2c                 | 
24e2c                 | __system____builtin_tanf
24e2c     02 4A 05 F6 | 	mov	COUNT_, #2
24e30     A8 00 A0 FD | 	call	#pushregs_
24e34     09 1F 02 F6 | 	mov	local01, arg01
24e38     A4 FE BF FD | 	call	#__system____builtin_sinf
24e3c     FD 20 02 F6 | 	mov	local02, result1
24e40     0F 15 02 F6 | 	mov	arg02, local01
24e44     87 E4 1F FF 
24e48     DB 13 06 F6 | 	mov	arg01, ##1070141403
24e4c     1F 14 E6 F4 | 	bitnot	arg02, #31
24e50     5C F1 BF FD | 	call	#__system___float_add
24e54     FD 12 02 F6 | 	mov	arg01, result1
24e58     84 FE BF FD | 	call	#__system____builtin_sinf
24e5c     FD 14 02 F6 | 	mov	arg02, result1
24e60     10 13 02 F6 | 	mov	arg01, local02
24e64     1C F7 BF FD | 	call	#__system___float_div
24e68     A7 F0 03 F6 | 	mov	ptra, fp
24e6c     B2 00 A0 FD | 	call	#popregs_
24e70                 | __system____builtin_tanf_ret
24e70     2D 00 64 FD | 	ret
24e74                 | 
24e74                 | __system____builtin_asinf
24e74     01 4A 05 F6 | 	mov	COUNT_, #1
24e78     A8 00 A0 FD | 	call	#pushregs_
24e7c     09 1F 02 F6 | 	mov	local01, arg01
24e80     0F 15 02 F6 | 	mov	arg02, local01
24e84     0F 13 02 F6 | 	mov	arg01, local01
24e88     F4 F4 BF FD | 	call	#__system___float_mul
24e8c     FD 14 02 F6 | 	mov	arg02, result1
24e90     00 C0 1F FF 
24e94     00 12 06 F6 | 	mov	arg01, ##1065353216
24e98     1F 14 E6 F4 | 	bitnot	arg02, #31
24e9c     10 F1 BF FD | 	call	#__system___float_add
24ea0     FD 12 02 F6 | 	mov	arg01, result1
24ea4     00 F4 BF FD | 	call	#__system___float_sqrt
24ea8     FD 14 02 F6 | 	mov	arg02, result1
24eac     0F 13 02 F6 | 	mov	arg01, local01
24eb0     58 00 B0 FD | 	call	#__system____builtin_atan2f
24eb4     A7 F0 03 F6 | 	mov	ptra, fp
24eb8     B2 00 A0 FD | 	call	#popregs_
24ebc                 | __system____builtin_asinf_ret
24ebc     2D 00 64 FD | 	ret
24ec0                 | 
24ec0                 | __system____builtin_acosf
24ec0     01 4A 05 F6 | 	mov	COUNT_, #1
24ec4     A8 00 A0 FD | 	call	#pushregs_
24ec8     09 1F 02 F6 | 	mov	local01, arg01
24ecc     0F 15 02 F6 | 	mov	arg02, local01
24ed0     0F 13 02 F6 | 	mov	arg01, local01
24ed4     A8 F4 BF FD | 	call	#__system___float_mul
24ed8     FD 14 02 F6 | 	mov	arg02, result1
24edc     00 C0 1F FF 
24ee0     00 12 06 F6 | 	mov	arg01, ##1065353216
24ee4     1F 14 E6 F4 | 	bitnot	arg02, #31
24ee8     C4 F0 BF FD | 	call	#__system___float_add
24eec     FD 12 02 F6 | 	mov	arg01, result1
24ef0     B4 F3 BF FD | 	call	#__system___float_sqrt
24ef4     FD 12 02 F6 | 	mov	arg01, result1
24ef8     0F 15 02 F6 | 	mov	arg02, local01
24efc     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24f00     A7 F0 03 F6 | 	mov	ptra, fp
24f04     B2 00 A0 FD | 	call	#popregs_
24f08                 | __system____builtin_acosf_ret
24f08     2D 00 64 FD | 	ret
24f0c                 | 
24f0c                 | __system____builtin_atan2f
24f0c     04 4A 05 F6 | 	mov	COUNT_, #4
24f10     A8 00 A0 FD | 	call	#pushregs_
24f14     09 1F 02 F6 | 	mov	local01, arg01
24f18     0A 21 02 F6 | 	mov	local02, arg02
24f1c     0F 13 02 F6 | 	mov	arg01, local01
24f20     00 14 06 F6 | 	mov	arg02, #0
24f24     01 16 06 F6 | 	mov	arg03, #1
24f28     88 F8 BF FD | 	call	#__system___float_cmp
24f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
24f30     28 00 90 5D |  if_ne	jmp	#LR__3470
24f34     10 13 02 F6 | 	mov	arg01, local02
24f38     00 14 06 F6 | 	mov	arg02, #0
24f3c     01 16 06 F6 | 	mov	arg03, #1
24f40     70 F8 BF FD | 	call	#__system___float_cmp
24f44     00 FA 55 F2 | 	cmps	result1, #0 wc
24f48     87 24 60 CF 
24f4c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
24f50     DC 00 90 CD |  if_b	jmp	#LR__3471
24f54     00 FA 05 F6 | 	mov	result1, #0
24f58     D4 00 90 FD | 	jmp	#LR__3471
24f5c                 | LR__3470
24f5c     10 13 02 F6 | 	mov	arg01, local02
24f60     10 15 02 F6 | 	mov	arg02, local02
24f64     18 F4 BF FD | 	call	#__system___float_mul
24f68     FD 22 02 F6 | 	mov	local03, result1
24f6c     0F 13 02 F6 | 	mov	arg01, local01
24f70     0F 15 02 F6 | 	mov	arg02, local01
24f74     08 F4 BF FD | 	call	#__system___float_mul
24f78     FD 14 02 F6 | 	mov	arg02, result1
24f7c     11 13 02 F6 | 	mov	arg01, local03
24f80     2C F0 BF FD | 	call	#__system___float_add
24f84     FD 12 02 F6 | 	mov	arg01, result1
24f88     1C F3 BF FD | 	call	#__system___float_sqrt
24f8c     FD 22 02 F6 | 	mov	local03, result1
24f90     10 13 02 F6 | 	mov	arg01, local02
24f94     11 15 02 F6 | 	mov	arg02, local03
24f98     E8 F5 BF FD | 	call	#__system___float_div
24f9c     FD 20 02 F6 | 	mov	local02, result1
24fa0     0F 13 02 F6 | 	mov	arg01, local01
24fa4     11 15 02 F6 | 	mov	arg02, local03
24fa8     D8 F5 BF FD | 	call	#__system___float_div
24fac     FD 1E 02 F6 | 	mov	local01, result1
24fb0     00 40 27 FF 
24fb4     00 12 06 F6 | 	mov	arg01, ##1317011456
24fb8     10 15 02 F6 | 	mov	arg02, local02
24fbc     C0 F3 BF FD | 	call	#__system___float_mul
24fc0     FD 12 02 F6 | 	mov	arg01, result1
24fc4     00 14 06 F6 | 	mov	arg02, #0
24fc8     7C F8 BF FD | 	call	#__system___float_tointeger
24fcc     FD 22 02 F6 | 	mov	local03, result1
24fd0     00 40 27 FF 
24fd4     00 12 06 F6 | 	mov	arg01, ##1317011456
24fd8     0F 15 02 F6 | 	mov	arg02, local01
24fdc     A0 F3 BF FD | 	call	#__system___float_mul
24fe0     FD 12 02 F6 | 	mov	arg01, result1
24fe4     00 14 06 F6 | 	mov	arg02, #0
24fe8     5C F8 BF FD | 	call	#__system___float_tointeger
24fec     FD 22 52 FD | 	qvector	local03, result1
24ff0     87 24 20 FF 
24ff4     DB 23 06 F6 | 	mov	local03, ##1078530011
24ff8     19 12 62 FD | 	getqy	arg01
24ffc     01 12 C6 F0 | 	sar	arg01, #1
25000     09 13 52 F6 | 	abs	arg01, arg01 wc
25004     1F 24 C6 C9 |  if_b	decod	local04, #31
25008     00 24 06 36 |  if_ae	mov	local04, #0
2500c     6C EF BF FD | 	call	#__system___float_fromuns
25010     12 FB 61 F5 | 	xor	result1, local04
25014     FD 12 02 F6 | 	mov	arg01, result1
25018     00 40 27 FF 
2501c     00 14 06 F6 | 	mov	arg02, ##1317011456
25020     60 F5 BF FD | 	call	#__system___float_div
25024     FD 14 02 F6 | 	mov	arg02, result1
25028     11 13 02 F6 | 	mov	arg01, local03
2502c     50 F3 BF FD | 	call	#__system___float_mul
25030                 | LR__3471
25030     A7 F0 03 F6 | 	mov	ptra, fp
25034     B2 00 A0 FD | 	call	#popregs_
25038                 | __system____builtin_atan2f_ret
25038     2D 00 64 FD | 	ret
2503c                 | 
2503c                 | __system____builtin_exp2f
2503c     04 4A 05 F6 | 	mov	COUNT_, #4
25040     A8 00 A0 FD | 	call	#pushregs_
25044     09 1F 02 F6 | 	mov	local01, arg01
25048     00 7F 21 FF 
2504c     00 14 06 F6 | 	mov	arg02, ##1123942400
25050     01 16 66 F6 | 	neg	arg03, #1
25054     5C F7 BF FD | 	call	#__system___float_cmp
25058     00 FA 55 F2 | 	cmps	result1, #0 wc
2505c     00 C0 3F 3F 
25060     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
25064     DC 00 90 3D |  if_ae	jmp	#LR__3481
25068     0F 13 02 F6 | 	mov	arg01, local01
2506c     00 7F 61 FF 
25070     00 14 06 F6 | 	mov	arg02, ##-1023541248
25074     01 16 06 F6 | 	mov	arg03, #1
25078     38 F7 BF FD | 	call	#__system___float_cmp
2507c     00 FA 55 F2 | 	cmps	result1, #0 wc
25080     00 FA 05 C6 |  if_b	mov	result1, #0
25084     BC 00 90 CD |  if_b	jmp	#LR__3481
25088     0F 13 02 F6 | 	mov	arg01, local01
2508c     00 14 06 F6 | 	mov	arg02, #0
25090     B4 F7 BF FD | 	call	#__system___float_tointeger
25094     FD 20 02 F6 | 	mov	local02, result1
25098     10 13 52 F6 | 	abs	arg01, local02 wc
2509c     1F 22 C6 C9 |  if_b	decod	local03, #31
250a0     00 22 06 36 |  if_ae	mov	local03, #0
250a4     D4 EE BF FD | 	call	#__system___float_fromuns
250a8     11 FB 61 F5 | 	xor	result1, local03
250ac     FD 14 02 F6 | 	mov	arg02, result1
250b0     0F 13 02 F6 | 	mov	arg01, local01
250b4     1F 14 E6 F4 | 	bitnot	arg02, #31
250b8     F4 EE BF FD | 	call	#__system___float_add
250bc     FD 24 02 F6 | 	mov	local04, result1
250c0     12 13 02 F6 | 	mov	arg01, local04
250c4     00 14 06 F6 | 	mov	arg02, #0
250c8     01 16 06 F6 | 	mov	arg03, #1
250cc     E4 F6 BF FD | 	call	#__system___float_cmp
250d0     00 FA 55 F2 | 	cmps	result1, #0 wc
250d4     18 00 90 3D |  if_ae	jmp	#LR__3480
250d8     12 13 02 F6 | 	mov	arg01, local04
250dc     00 C0 1F FF 
250e0     00 14 06 F6 | 	mov	arg02, ##1065353216
250e4     C8 EE BF FD | 	call	#__system___float_add
250e8     FD 24 02 F6 | 	mov	local04, result1
250ec     01 20 86 F1 | 	sub	local02, #1
250f0                 | LR__3480
250f0     7F 20 06 F1 | 	add	local02, #127
250f4     17 20 66 F0 | 	shl	local02, #23
250f8     12 13 02 F6 | 	mov	arg01, local04
250fc     00 80 26 FF 
25100     00 14 06 F6 | 	mov	arg02, ##1291845632
25104     78 F2 BF FD | 	call	#__system___float_mul
25108     FD 12 02 F6 | 	mov	arg01, result1
2510c     00 14 06 F6 | 	mov	arg02, #0
25110     34 F7 BF FD | 	call	#__system___float_tointeger
25114     FD 24 0A F6 | 	mov	local04, result1 wz
25118     10 FB 01 A6 |  if_e	mov	result1, local02
2511c     24 00 90 AD |  if_e	jmp	#LR__3481
25120     3E 24 26 F4 | 	bith	local04, #62
25124     0F 24 62 FD | 	qexp	local04
25128     10 13 02 F6 | 	mov	arg01, local02
2512c     18 14 62 FD | 	getqx	arg02
25130     01 14 06 F1 | 	add	arg02, #1
25134     01 14 46 F0 | 	shr	arg02, #1
25138     00 80 1F FF 
2513c     00 14 06 F1 | 	add	arg02, ##1056964608
25140     3C F2 BF FD | 	call	#__system___float_mul
25144                 | LR__3481
25144     A7 F0 03 F6 | 	mov	ptra, fp
25148     B2 00 A0 FD | 	call	#popregs_
2514c                 | __system____builtin_exp2f_ret
2514c     2D 00 64 FD | 	ret
25150                 | 
25150                 | __system____builtin_log2f
25150     06 4A 05 F6 | 	mov	COUNT_, #6
25154     A8 00 A0 FD | 	call	#pushregs_
25158     09 1F 02 F6 | 	mov	local01, arg01
2515c     09 21 0A F6 | 	mov	local02, arg01 wz
25160     00 00 40 5F 
25164     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
25168     00 40 00 AF 
2516c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
25170     08 01 90 AD |  if_e	jmp	#LR__3494
25174     00 20 56 F2 | 	cmps	local02, #0 wc
25178     00 E0 3F CF 
2517c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
25180     F8 00 90 CD |  if_b	jmp	#LR__3494
25184     0F 13 02 F6 | 	mov	arg01, local01
25188     00 90 20 FF 
2518c     00 14 06 F6 | 	mov	arg02, ##1092616192
25190     01 16 06 F6 | 	mov	arg03, #1
25194     1C F6 BF FD | 	call	#__system___float_cmp
25198     00 FA 0D F2 | 	cmp	result1, #0 wz
2519c     4D 2A 20 AF 
251a0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
251a4     D4 00 90 AD |  if_e	jmp	#LR__3494
251a8     0F 13 02 F6 | 	mov	arg01, local01
251ac     FC 16 20 FF 
251b0     54 14 06 F6 | 	mov	arg02, ##1076754516
251b4     01 16 06 F6 | 	mov	arg03, #1
251b8     F8 F5 BF FD | 	call	#__system___float_cmp
251bc     00 FA 0D F2 | 	cmp	result1, #0 wz
251c0     55 DC 1F AF 
251c4     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
251c8     B0 00 90 AD |  if_e	jmp	#LR__3494
251cc     10 23 02 F6 | 	mov	local03, local02
251d0     17 22 46 F0 | 	shr	local03, #23
251d4     11 23 E2 F8 | 	getbyte	local03, local03, #0
251d8     17 21 06 F4 | 	bitl	local02, #279
251dc     10 25 02 F6 | 	mov	local04, local02
251e0     FF 22 0E F2 | 	cmp	local03, #255 wz
251e4     1C 00 90 5D |  if_ne	jmp	#LR__3490
251e8     00 24 0E F2 | 	cmp	local04, #0 wz
251ec     00 C0 3F 5F 
251f0     00 26 06 56 |  if_ne	mov	local05, ##2139095040
251f4     00 E0 3F AF 
251f8     00 26 06 A6 |  if_e	mov	local05, ##2143289344
251fc     13 FB 01 F6 | 	mov	result1, local05
25200     78 00 90 FD | 	jmp	#LR__3494
25204                 | LR__3490
25204     00 22 0E F2 | 	cmp	local03, #0 wz
25208     17 24 26 54 |  if_ne	bith	local04, #23
2520c     7F 22 86 51 |  if_ne	sub	local03, #127
25210     28 00 90 5D |  if_ne	jmp	#LR__3493
25214     00 24 0E F2 | 	cmp	local04, #0 wz
25218     00 40 00 AF 
2521c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
25220     58 00 90 AD |  if_e	jmp	#LR__3494
25224     7E 22 66 F6 | 	neg	local03, #126
25228     97 08 48 FB | 	callpa	#(@LR__3492-@LR__3491)>>2,fcache_load_ptr_
2522c                 | LR__3491
2522c     17 24 2E F4 | 	testbn	local04, #23 wz
25230     01 24 66 A0 |  if_e	shl	local04, #1
25234     01 22 06 A1 |  if_e	add	local03, #1
25238     F0 FF 9F AD |  if_e	jmp	#LR__3491
2523c                 | LR__3492
2523c                 | LR__3493
2523c     0E 24 62 FD | 	qlog	local04
25240     01 22 86 F1 | 	sub	local03, #1
25244     11 13 52 F6 | 	abs	arg01, local03 wc
25248     1F 28 C6 C9 |  if_b	decod	local06, #31
2524c     00 28 06 36 |  if_ae	mov	local06, #0
25250     18 26 62 FD | 	getqx	local05
25254     9B 26 06 F4 | 	bitl	local05, #155
25258     08 26 06 F1 | 	add	local05, #8
2525c     04 26 46 F0 | 	shr	local05, #4
25260     00 C0 1F FF 
25264     00 26 06 F1 | 	add	local05, ##1065353216
25268     10 ED BF FD | 	call	#__system___float_fromuns
2526c     14 FB 61 F5 | 	xor	result1, local06
25270     FD 14 02 F6 | 	mov	arg02, result1
25274     13 13 02 F6 | 	mov	arg01, local05
25278     34 ED BF FD | 	call	#__system___float_add
2527c                 | LR__3494
2527c     A7 F0 03 F6 | 	mov	ptra, fp
25280     B2 00 A0 FD | 	call	#popregs_
25284                 | __system____builtin_log2f_ret
25284     2D 00 64 FD | 	ret
25288                 | 
25288                 | __system____builtin_powf
25288     04 4A 05 F6 | 	mov	COUNT_, #4
2528c     A8 00 A0 FD | 	call	#pushregs_
25290     09 1F 02 F6 | 	mov	local01, arg01
25294     0A 21 02 F6 | 	mov	local02, arg02
25298     10 13 02 F6 | 	mov	arg01, local02
2529c     00 14 06 F6 | 	mov	arg02, #0
252a0     A4 F5 BF FD | 	call	#__system___float_tointeger
252a4     FD 22 02 F6 | 	mov	local03, result1
252a8     11 13 52 F6 | 	abs	arg01, local03 wc
252ac     1F 24 C6 C9 |  if_b	decod	local04, #31
252b0     00 24 06 36 |  if_ae	mov	local04, #0
252b4     C4 EC BF FD | 	call	#__system___float_fromuns
252b8     12 FB 61 F5 | 	xor	result1, local04
252bc     FD 12 02 F6 | 	mov	arg01, result1
252c0     10 15 02 F6 | 	mov	arg02, local02
252c4     01 16 06 F6 | 	mov	arg03, #1
252c8     E8 F4 BF FD | 	call	#__system___float_cmp
252cc     00 FA 0D F2 | 	cmp	result1, #0 wz
252d0     18 00 90 5D |  if_ne	jmp	#LR__3500
252d4     00 C0 1F FF 
252d8     00 12 06 F6 | 	mov	arg01, ##1065353216
252dc     0F 15 02 F6 | 	mov	arg02, local01
252e0     11 17 02 F6 | 	mov	arg03, local03
252e4     A0 00 B0 FD | 	call	#__system___float_pow_n
252e8     58 00 90 FD | 	jmp	#LR__3501
252ec                 | LR__3500
252ec     0F 13 02 F6 | 	mov	arg01, local01
252f0     00 14 06 F6 | 	mov	arg02, #0
252f4     01 16 06 F6 | 	mov	arg03, #1
252f8     B8 F4 BF FD | 	call	#__system___float_cmp
252fc     00 FA 55 F2 | 	cmps	result1, #0 wc
25300     00 E0 3F CF 
25304     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
25308     38 00 90 CD |  if_b	jmp	#LR__3501
2530c     0F 13 02 F6 | 	mov	arg01, local01
25310     00 14 06 F6 | 	mov	arg02, #0
25314     01 16 06 F6 | 	mov	arg03, #1
25318     98 F4 BF FD | 	call	#__system___float_cmp
2531c     00 FA 0D F2 | 	cmp	result1, #0 wz
25320     00 FA 05 A6 |  if_e	mov	result1, #0
25324     1C 00 90 AD |  if_e	jmp	#LR__3501
25328     0F 13 02 F6 | 	mov	arg01, local01
2532c     20 FE BF FD | 	call	#__system____builtin_log2f
25330     FD 12 02 F6 | 	mov	arg01, result1
25334     10 15 02 F6 | 	mov	arg02, local02
25338     44 F0 BF FD | 	call	#__system___float_mul
2533c     FD 12 02 F6 | 	mov	arg01, result1
25340     F8 FC BF FD | 	call	#__system____builtin_exp2f
25344                 | LR__3501
25344     A7 F0 03 F6 | 	mov	ptra, fp
25348     B2 00 A0 FD | 	call	#popregs_
2534c                 | __system____builtin_powf_ret
2534c     2D 00 64 FD | 	ret
25350                 | 
25350                 | __system____builtin_logbase
25350     02 4A 05 F6 | 	mov	COUNT_, #2
25354     A8 00 A0 FD | 	call	#pushregs_
25358     09 1F 02 F6 | 	mov	local01, arg01
2535c     0A 13 02 F6 | 	mov	arg01, arg02
25360     EC FD BF FD | 	call	#__system____builtin_log2f
25364     FD 20 02 F6 | 	mov	local02, result1
25368     0F 13 02 F6 | 	mov	arg01, local01
2536c     E0 FD BF FD | 	call	#__system____builtin_log2f
25370     FD 14 02 F6 | 	mov	arg02, result1
25374     10 13 02 F6 | 	mov	arg01, local02
25378     08 F2 BF FD | 	call	#__system___float_div
2537c     A7 F0 03 F6 | 	mov	ptra, fp
25380     B2 00 A0 FD | 	call	#popregs_
25384                 | __system____builtin_logbase_ret
25384     2D 00 64 FD | 	ret
25388                 | 
25388                 | __system___float_pow_n
25388     05 4A 05 F6 | 	mov	COUNT_, #5
2538c     A8 00 A0 FD | 	call	#pushregs_
25390     09 1F 02 F6 | 	mov	local01, arg01
25394     0A 21 02 F6 | 	mov	local02, arg02
25398     0B 23 02 F6 | 	mov	local03, arg03
2539c     00 22 56 F2 | 	cmps	local03, #0 wc
253a0     18 00 90 3D |  if_ae	jmp	#LR__3510
253a4     01 24 06 F6 | 	mov	local04, #1
253a8     11 23 62 F6 | 	neg	local03, local03
253ac     00 22 56 F2 | 	cmps	local03, #0 wc
253b0     00 FA 05 C6 |  if_b	mov	result1, #0
253b4     94 00 90 CD |  if_b	jmp	#LR__3518
253b8     04 00 90 FD | 	jmp	#LR__3511
253bc                 | LR__3510
253bc     00 24 06 F6 | 	mov	local04, #0
253c0                 | LR__3511
253c0     00 C0 1F FF 
253c4     00 26 06 F6 | 	mov	local05, ##1065353216
253c8                 | LR__3512
253c8     01 22 56 F2 | 	cmps	local03, #1 wc
253cc     30 00 90 CD |  if_b	jmp	#LR__3514
253d0     01 22 CE F7 | 	test	local03, #1 wz
253d4     10 00 90 AD |  if_e	jmp	#LR__3513
253d8     13 13 02 F6 | 	mov	arg01, local05
253dc     10 15 02 F6 | 	mov	arg02, local02
253e0     9C EF BF FD | 	call	#__system___float_mul
253e4     FD 26 02 F6 | 	mov	local05, result1
253e8                 | LR__3513
253e8     01 22 C6 F0 | 	sar	local03, #1
253ec     10 13 02 F6 | 	mov	arg01, local02
253f0     10 15 02 F6 | 	mov	arg02, local02
253f4     88 EF BF FD | 	call	#__system___float_mul
253f8     FD 20 02 F6 | 	mov	local02, result1
253fc     C8 FF 9F FD | 	jmp	#LR__3512
25400                 | LR__3514
25400     00 24 0E F2 | 	cmp	local04, #0 wz
25404     14 00 90 AD |  if_e	jmp	#LR__3515
25408     0F 13 02 F6 | 	mov	arg01, local01
2540c     13 15 02 F6 | 	mov	arg02, local05
25410     70 F1 BF FD | 	call	#__system___float_div
25414     FD 26 02 F6 | 	mov	local05, result1
25418     2C 00 90 FD | 	jmp	#LR__3517
2541c                 | LR__3515
2541c     0F 13 02 F6 | 	mov	arg01, local01
25420     00 C0 1F FF 
25424     00 14 06 F6 | 	mov	arg02, ##1065353216
25428     01 16 06 F6 | 	mov	arg03, #1
2542c     84 F3 BF FD | 	call	#__system___float_cmp
25430     00 FA 0D F2 | 	cmp	result1, #0 wz
25434     10 00 90 AD |  if_e	jmp	#LR__3516
25438     0F 13 02 F6 | 	mov	arg01, local01
2543c     13 15 02 F6 | 	mov	arg02, local05
25440     3C EF BF FD | 	call	#__system___float_mul
25444     FD 26 02 F6 | 	mov	local05, result1
25448                 | LR__3516
25448                 | LR__3517
25448     13 FB 01 F6 | 	mov	result1, local05
2544c                 | LR__3518
2544c     A7 F0 03 F6 | 	mov	ptra, fp
25450     B2 00 A0 FD | 	call	#popregs_
25454                 | __system___float_pow_n_ret
25454     2D 00 64 FD | 	ret
25458                 | 
25458                 | __system___gc_ptrs
25458     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2545c     00 03 02 F6 | 	mov	_var02, _var01
25460     76 01 00 FF 
25464     F8 03 06 F1 | 	add	_var02, ##191992
25468     00 FD 09 FB | 	rdlong	result2, _var01 wz
2546c     74 00 90 5D |  if_ne	jmp	#LR__3520
25470     01 FD 01 F6 | 	mov	result2, _var02
25474     00 FD 81 F1 | 	sub	result2, _var01
25478     00 03 58 FC | 	wrword	#1, _var01
2547c     00 FB 01 F6 | 	mov	result1, _var01
25480     02 FA 05 F1 | 	add	result1, #2
25484     36 00 80 FF 
25488     FD 20 59 FC | 	wrword	##27792, result1
2548c     00 FB 01 F6 | 	mov	result1, _var01
25490     04 FA 05 F1 | 	add	result1, #4
25494     FD 00 58 FC | 	wrword	#0, result1
25498     00 FB 01 F6 | 	mov	result1, _var01
2549c     06 FA 05 F1 | 	add	result1, #6
254a0     FD 02 58 FC | 	wrword	#1, result1
254a4     10 00 06 F1 | 	add	_var01, #16
254a8     FE FC 51 F6 | 	abs	result2, result2 wc
254ac     04 FC 45 F0 | 	shr	result2, #4
254b0     FE FC 81 F6 | 	negc	result2, result2
254b4     00 FD 51 FC | 	wrword	result2, _var01
254b8     00 FD 01 F6 | 	mov	result2, _var01
254bc     02 FC 05 F1 | 	add	result2, #2
254c0     36 00 80 FF 
254c4     FE 1E 59 FC | 	wrword	##27791, result2
254c8     00 FD 01 F6 | 	mov	result2, _var01
254cc     04 FC 05 F1 | 	add	result2, #4
254d0     FE 00 58 FC | 	wrword	#0, result2
254d4     00 FD 01 F6 | 	mov	result2, _var01
254d8     06 FC 05 F1 | 	add	result2, #6
254dc     FE 00 58 FC | 	wrword	#0, result2
254e0     10 00 86 F1 | 	sub	_var01, #16
254e4                 | LR__3520
254e4     00 FB 01 F6 | 	mov	result1, _var01
254e8     01 FD 01 F6 | 	mov	result2, _var02
254ec                 | __system___gc_ptrs_ret
254ec     2D 00 64 FD | 	ret
254f0                 | 
254f0                 | __system___gc_tryalloc
254f0     0B 4A 05 F6 | 	mov	COUNT_, #11
254f4     A8 00 A0 FD | 	call	#pushregs_
254f8     09 1F 02 F6 | 	mov	local01, arg01
254fc     0A 21 02 F6 | 	mov	local02, arg02
25500     54 FF BF FD | 	call	#__system___gc_ptrs
25504     FD 22 02 F6 | 	mov	local03, result1
25508     FE 24 02 F6 | 	mov	local04, result2
2550c     11 27 02 F6 | 	mov	local05, local03
25510     00 28 06 F6 | 	mov	local06, #0
25514     97 1E 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
25518                 | LR__3530
25518     13 2B 02 F6 | 	mov	local07, local05
2551c     06 26 06 F1 | 	add	local05, #6
25520     13 15 EA FA | 	rdword	arg02, local05 wz
25524     11 13 02 F6 | 	mov	arg01, local03
25528     00 FA 05 A6 |  if_e	mov	result1, #0
2552c     04 14 66 50 |  if_ne	shl	arg02, #4
25530     0A 13 02 51 |  if_ne	add	arg01, arg02
25534     09 FB 01 56 |  if_ne	mov	result1, arg01
25538     FD 26 0A F6 | 	mov	local05, result1 wz
2553c     13 29 E2 5A |  if_ne	rdword	local06, local05
25540     00 26 0E F2 | 	cmp	local05, #0 wz
25544     12 27 52 52 |  if_ne	cmps	local05, local04 wc
25548     08 00 90 1D |  if_a	jmp	#LR__3532
2554c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
25550     C4 FF 9F 1D |  if_a	jmp	#LR__3530
25554                 | LR__3531
25554                 | LR__3532
25554     00 26 0E F2 | 	cmp	local05, #0 wz
25558     13 FB 01 A6 |  if_e	mov	result1, local05
2555c     3C 01 90 AD |  if_e	jmp	#LR__3535
25560     13 FD 01 F6 | 	mov	result2, local05
25564     06 FC 05 F1 | 	add	result2, #6
25568     FE 2C E2 FA | 	rdword	local08, result2
2556c     14 1F 52 F2 | 	cmps	local01, local06 wc
25570     C0 00 90 3D |  if_ae	jmp	#LR__3534
25574     13 1F 52 FC | 	wrword	local01, local05
25578     13 13 02 F6 | 	mov	arg01, local05
2557c     0F 2D 02 F6 | 	mov	local08, local01
25580     04 2C 66 F0 | 	shl	local08, #4
25584     16 13 02 F1 | 	add	arg01, local08
25588     0F 29 82 F1 | 	sub	local06, local01
2558c     09 29 52 FC | 	wrword	local06, arg01
25590     09 2D 02 F6 | 	mov	local08, arg01
25594     02 2C 06 F1 | 	add	local08, #2
25598     36 00 80 FF 
2559c     16 1F 59 FC | 	wrword	##27791, local08
255a0     13 15 0A F6 | 	mov	arg02, local05 wz
255a4     00 FA 05 A6 |  if_e	mov	result1, #0
255a8     11 15 82 51 |  if_ne	sub	arg02, local03
255ac     04 14 46 50 |  if_ne	shr	arg02, #4
255b0     0A FB 01 56 |  if_ne	mov	result1, arg02
255b4     09 2D 02 F6 | 	mov	local08, arg01
255b8     04 2C 06 F1 | 	add	local08, #4
255bc     16 FB 51 FC | 	wrword	result1, local08
255c0     13 2D 02 F6 | 	mov	local08, local05
255c4     06 2C 06 F1 | 	add	local08, #6
255c8     09 15 02 F6 | 	mov	arg02, arg01
255cc     16 2D E2 FA | 	rdword	local08, local08
255d0     06 14 06 F1 | 	add	arg02, #6
255d4     0A 2D 52 FC | 	wrword	local08, arg02
255d8     09 2F 02 F6 | 	mov	local09, arg01
255dc     17 15 0A F6 | 	mov	arg02, local09 wz
255e0     00 FA 05 A6 |  if_e	mov	result1, #0
255e4     11 15 82 51 |  if_ne	sub	arg02, local03
255e8     04 14 46 50 |  if_ne	shr	arg02, #4
255ec     0A FB 01 56 |  if_ne	mov	result1, arg02
255f0     FD 2C 02 F6 | 	mov	local08, result1
255f4     09 31 EA FA | 	rdword	local10, arg01 wz
255f8     00 FA 05 A6 |  if_e	mov	result1, #0
255fc     04 30 66 50 |  if_ne	shl	local10, #4
25600     18 13 02 51 |  if_ne	add	arg01, local10
25604     09 FB 01 56 |  if_ne	mov	result1, arg01
25608     FD 32 0A F6 | 	mov	local11, result1 wz
2560c     24 00 90 AD |  if_e	jmp	#LR__3533
25610     12 33 52 F2 | 	cmps	local11, local04 wc
25614     1C 00 90 3D |  if_ae	jmp	#LR__3533
25618     17 15 0A F6 | 	mov	arg02, local09 wz
2561c     00 FA 05 A6 |  if_e	mov	result1, #0
25620     11 15 82 51 |  if_ne	sub	arg02, local03
25624     04 14 46 50 |  if_ne	shr	arg02, #4
25628     0A FB 01 56 |  if_ne	mov	result1, arg02
2562c     04 32 06 F1 | 	add	local11, #4
25630     19 FB 51 FC | 	wrword	result1, local11
25634                 | LR__3533
25634                 | LR__3534
25634     06 2A 06 F1 | 	add	local07, #6
25638     15 2D 52 FC | 	wrword	local08, local07
2563c     36 00 00 FF 
25640     80 2E 06 F6 | 	mov	local09, ##27776
25644     10 2F 42 F5 | 	or	local09, local02
25648     00 FA 05 F6 | 	mov	result1, #0
2564c     01 FA 61 FD | 	cogid	result1
25650     FD 2E 42 F5 | 	or	local09, result1
25654     13 33 02 F6 | 	mov	local11, local05
25658     02 32 06 F1 | 	add	local11, #2
2565c     19 2F 52 FC | 	wrword	local09, local11
25660     11 2F 02 F6 | 	mov	local09, local03
25664     08 2E 06 F1 | 	add	local09, #8
25668     13 33 02 F6 | 	mov	local11, local05
2566c     17 2F E2 FA | 	rdword	local09, local09
25670     06 32 06 F1 | 	add	local11, #6
25674     19 2F 52 FC | 	wrword	local09, local11
25678     13 15 0A F6 | 	mov	arg02, local05 wz
2567c     00 FA 05 A6 |  if_e	mov	result1, #0
25680     11 15 82 51 |  if_ne	sub	arg02, local03
25684     04 14 46 50 |  if_ne	shr	arg02, #4
25688     0A FB 01 56 |  if_ne	mov	result1, arg02
2568c     08 22 06 F1 | 	add	local03, #8
25690     11 FB 51 FC | 	wrword	result1, local03
25694     08 26 06 F1 | 	add	local05, #8
25698     13 FB 01 F6 | 	mov	result1, local05
2569c                 | LR__3535
2569c     A7 F0 03 F6 | 	mov	ptra, fp
256a0     B2 00 A0 FD | 	call	#popregs_
256a4                 | __system___gc_tryalloc_ret
256a4     2D 00 64 FD | 	ret
256a8                 | 
256a8                 | __system___gc_alloc_managed
256a8     01 4A 05 F6 | 	mov	COUNT_, #1
256ac     A8 00 A0 FD | 	call	#pushregs_
256b0     09 1F 02 F6 | 	mov	local01, arg01
256b4     00 14 06 F6 | 	mov	arg02, #0
256b8     1C 00 B0 FD | 	call	#__system___gc_doalloc
256bc     FD 14 0A F6 | 	mov	arg02, result1 wz
256c0     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
256c4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
256c8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
256cc     A7 F0 03 F6 | 	mov	ptra, fp
256d0     B2 00 A0 FD | 	call	#popregs_
256d4                 | __system___gc_alloc_managed_ret
256d4     2D 00 64 FD | 	ret
256d8                 | 
256d8                 | __system___gc_doalloc
256d8     06 4A 05 F6 | 	mov	COUNT_, #6
256dc     A8 00 A0 FD | 	call	#pushregs_
256e0     09 1F 0A F6 | 	mov	local01, arg01 wz
256e4     0A 21 02 F6 | 	mov	local02, arg02
256e8     00 FA 05 A6 |  if_e	mov	result1, #0
256ec     8C 00 90 AD |  if_e	jmp	#LR__3547
256f0     17 1E 06 F1 | 	add	local01, #23
256f4     0F 1E 26 F5 | 	andn	local01, #15
256f8     04 1E 46 F0 | 	shr	local01, #4
256fc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25700     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25704     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25708     B8 BE BF FD | 	call	#__system___lockmem
2570c     0F 13 02 F6 | 	mov	arg01, local01
25710     10 15 02 F6 | 	mov	arg02, local02
25714     D8 FD BF FD | 	call	#__system___gc_tryalloc
25718     FD 22 0A F6 | 	mov	local03, result1 wz
2571c     14 00 90 5D |  if_ne	jmp	#LR__3540
25720     70 03 B0 FD | 	call	#__system___gc_docollect
25724     0F 13 02 F6 | 	mov	arg01, local01
25728     10 15 02 F6 | 	mov	arg02, local02
2572c     C0 FD BF FD | 	call	#__system___gc_tryalloc
25730     FD 22 02 F6 | 	mov	local03, result1
25734                 | LR__3540
25734     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25738     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2573c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25740     09 01 68 FC | 	wrlong	#0, arg01
25744     00 22 0E F2 | 	cmp	local03, #0 wz
25748     2C 00 90 AD |  if_e	jmp	#LR__3546
2574c     04 1E 66 F0 | 	shl	local01, #4
25750     08 1E 86 F1 | 	sub	local01, #8
25754     0F 25 52 F6 | 	abs	local04, local01 wc
25758     02 24 46 F0 | 	shr	local04, #2
2575c     12 27 8A F6 | 	negc	local05, local04 wz
25760     11 29 02 F6 | 	mov	local06, local03
25764     10 00 90 AD |  if_e	jmp	#LR__3545
25768     97 06 48 FB | 	callpa	#(@LR__3543-@LR__3541)>>2,fcache_load_ptr_
2576c                 | LR__3541
2576c     13 05 D8 FC | 	rep	@LR__3544, local05
25770                 | LR__3542
25770     14 01 68 FC | 	wrlong	#0, local06
25774     04 28 06 F1 | 	add	local06, #4
25778                 | LR__3543
25778                 | LR__3544
25778                 | LR__3545
25778                 | LR__3546
25778     11 FB 01 F6 | 	mov	result1, local03
2577c                 | LR__3547
2577c     A7 F0 03 F6 | 	mov	ptra, fp
25780     B2 00 A0 FD | 	call	#popregs_
25784                 | __system___gc_doalloc_ret
25784     2D 00 64 FD | 	ret
25788                 | 
25788                 | __system___gc_isvalidptr
25788     F8 16 06 F4 | 	bitl	arg03, #248
2578c     08 16 86 F1 | 	sub	arg03, #8
25790     09 17 52 F2 | 	cmps	arg03, arg01 wc
25794     08 00 90 CD |  if_b	jmp	#LR__3550
25798     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2579c     08 00 90 CD |  if_b	jmp	#LR__3551
257a0                 | LR__3550
257a0     00 FA 05 F6 | 	mov	result1, #0
257a4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
257a8                 | LR__3551
257a8     0B 01 02 F6 | 	mov	_var01, arg03
257ac     09 01 62 F5 | 	xor	_var01, arg01
257b0     0F 00 CE F7 | 	test	_var01, #15 wz
257b4     00 FA 05 56 |  if_ne	mov	result1, #0
257b8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
257bc     0B 01 02 F6 | 	mov	_var01, arg03
257c0     02 00 06 F1 | 	add	_var01, #2
257c4     00 01 E2 FA | 	rdword	_var01, _var01
257c8     7F 00 00 FF 
257cc     C0 01 06 F5 | 	and	_var01, ##65472
257d0     36 00 00 FF 
257d4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
257d8     00 FA 05 56 |  if_ne	mov	result1, #0
257dc     0B FB 01 A6 |  if_e	mov	result1, arg03
257e0                 | __system___gc_isvalidptr_ret
257e0     2D 00 64 FD | 	ret
257e4                 | 
257e4                 | __system___gc_free
257e4     09 17 02 F6 | 	mov	arg03, arg01
257e8     6C FC BF FD | 	call	#__system___gc_ptrs
257ec     FD 12 02 F6 | 	mov	arg01, result1
257f0     FE 14 02 F6 | 	mov	arg02, result2
257f4     90 FF BF FD | 	call	#__system___gc_isvalidptr
257f8     FD 14 0A F6 | 	mov	arg02, result1 wz
257fc     28 00 90 AD |  if_e	jmp	#LR__3560
25800     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25804     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25808     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2580c     B4 BD BF FD | 	call	#__system___lockmem
25810     0A 13 02 F6 | 	mov	arg01, arg02
25814     14 00 B0 FD | 	call	#__system___gc_dofree
25818     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2581c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25820     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25824     09 01 68 FC | 	wrlong	#0, arg01
25828                 | LR__3560
25828                 | __system___gc_free_ret
25828     2D 00 64 FD | 	ret
2582c                 | 
2582c                 | __system___gc_dofree
2582c     06 4A 05 F6 | 	mov	COUNT_, #6
25830     A8 00 A0 FD | 	call	#pushregs_
25834     09 1F 02 F6 | 	mov	local01, arg01
25838     1C FC BF FD | 	call	#__system___gc_ptrs
2583c     FD 20 02 F6 | 	mov	local02, result1
25840     FE 22 02 F6 | 	mov	local03, result2
25844     0F 15 02 F6 | 	mov	arg02, local01
25848     02 14 06 F1 | 	add	arg02, #2
2584c     36 00 80 FF 
25850     0A 1F 59 FC | 	wrword	##27791, arg02
25854     0F 25 02 F6 | 	mov	local04, local01
25858     0F 13 02 F6 | 	mov	arg01, local01
2585c     09 27 EA FA | 	rdword	local05, arg01 wz
25860     00 FA 05 A6 |  if_e	mov	result1, #0
25864     04 26 66 50 |  if_ne	shl	local05, #4
25868     13 13 02 51 |  if_ne	add	arg01, local05
2586c     09 FB 01 56 |  if_ne	mov	result1, arg01
25870     FD 28 02 F6 | 	mov	local06, result1
25874     97 24 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
25878                 | LR__3570
25878     04 24 06 F1 | 	add	local04, #4
2587c     12 15 EA FA | 	rdword	arg02, local04 wz
25880     10 13 02 F6 | 	mov	arg01, local02
25884     00 FA 05 A6 |  if_e	mov	result1, #0
25888     04 14 66 50 |  if_ne	shl	arg02, #4
2588c     0A 13 02 51 |  if_ne	add	arg01, arg02
25890     09 FB 01 56 |  if_ne	mov	result1, arg01
25894     FD 24 0A F6 | 	mov	local04, result1 wz
25898     24 00 90 AD |  if_e	jmp	#LR__3572
2589c     12 13 02 F6 | 	mov	arg01, local04
258a0     00 FA 05 F6 | 	mov	result1, #0
258a4     02 12 06 F1 | 	add	arg01, #2
258a8     09 13 E2 FA | 	rdword	arg01, arg01
258ac     36 00 00 FF 
258b0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
258b4     01 FA 65 A6 |  if_e	neg	result1, #1
258b8     00 FA 0D F2 | 	cmp	result1, #0 wz
258bc     B8 FF 9F AD |  if_e	jmp	#LR__3570
258c0                 | LR__3571
258c0                 | LR__3572
258c0     00 24 0E F2 | 	cmp	local04, #0 wz
258c4     10 25 02 A6 |  if_e	mov	local04, local02
258c8     12 15 02 F6 | 	mov	arg02, local04
258cc     06 14 06 F1 | 	add	arg02, #6
258d0     0F 13 02 F6 | 	mov	arg01, local01
258d4     0A 15 E2 FA | 	rdword	arg02, arg02
258d8     06 12 06 F1 | 	add	arg01, #6
258dc     09 15 52 FC | 	wrword	arg02, arg01
258e0     0F 15 0A F6 | 	mov	arg02, local01 wz
258e4     00 FA 05 A6 |  if_e	mov	result1, #0
258e8     10 15 82 51 |  if_ne	sub	arg02, local02
258ec     04 14 46 50 |  if_ne	shr	arg02, #4
258f0     0A FB 01 56 |  if_ne	mov	result1, arg02
258f4     12 15 02 F6 | 	mov	arg02, local04
258f8     06 14 06 F1 | 	add	arg02, #6
258fc     0A FB 51 FC | 	wrword	result1, arg02
25900     10 25 0A F2 | 	cmp	local04, local02 wz
25904     A4 00 90 AD |  if_e	jmp	#LR__3575
25908     12 13 02 F6 | 	mov	arg01, local04
2590c     09 27 EA FA | 	rdword	local05, arg01 wz
25910     00 FA 05 A6 |  if_e	mov	result1, #0
25914     04 26 66 50 |  if_ne	shl	local05, #4
25918     13 13 02 51 |  if_ne	add	arg01, local05
2591c     09 FB 01 56 |  if_ne	mov	result1, arg01
25920     0F FB 09 F2 | 	cmp	result1, local01 wz
25924     84 00 90 5D |  if_ne	jmp	#LR__3574
25928     12 29 E2 FA | 	rdword	local06, local04
2592c     0F 15 E2 FA | 	rdword	arg02, local01
25930     0A 29 02 F1 | 	add	local06, arg02
25934     12 29 52 FC | 	wrword	local06, local04
25938     0F 29 02 F6 | 	mov	local06, local01
2593c     02 28 06 F1 | 	add	local06, #2
25940     14 01 58 FC | 	wrword	#0, local06
25944     0F 13 02 F6 | 	mov	arg01, local01
25948     09 27 EA FA | 	rdword	local05, arg01 wz
2594c     00 FA 05 A6 |  if_e	mov	result1, #0
25950     04 26 66 50 |  if_ne	shl	local05, #4
25954     13 13 02 51 |  if_ne	add	arg01, local05
25958     09 FB 01 56 |  if_ne	mov	result1, arg01
2595c     FD 28 02 F6 | 	mov	local06, result1
25960     11 29 52 F2 | 	cmps	local06, local03 wc
25964     20 00 90 3D |  if_ae	jmp	#LR__3573
25968     12 15 0A F6 | 	mov	arg02, local04 wz
2596c     00 FA 05 A6 |  if_e	mov	result1, #0
25970     10 15 82 51 |  if_ne	sub	arg02, local02
25974     04 14 46 50 |  if_ne	shr	arg02, #4
25978     0A FB 01 56 |  if_ne	mov	result1, arg02
2597c     14 15 02 F6 | 	mov	arg02, local06
25980     04 14 06 F1 | 	add	arg02, #4
25984     0A FB 51 FC | 	wrword	result1, arg02
25988                 | LR__3573
25988     0F 15 02 F6 | 	mov	arg02, local01
2598c     06 14 06 F1 | 	add	arg02, #6
25990     12 FD 01 F6 | 	mov	result2, local04
25994     0A 15 E2 FA | 	rdword	arg02, arg02
25998     06 FC 05 F1 | 	add	result2, #6
2599c     FE 14 52 FC | 	wrword	arg02, result2
259a0     06 1E 06 F1 | 	add	local01, #6
259a4     0F 01 58 FC | 	wrword	#0, local01
259a8     12 1F 02 F6 | 	mov	local01, local04
259ac                 | LR__3574
259ac                 | LR__3575
259ac     0F 13 02 F6 | 	mov	arg01, local01
259b0     09 27 EA FA | 	rdword	local05, arg01 wz
259b4     00 FA 05 A6 |  if_e	mov	result1, #0
259b8     04 26 66 50 |  if_ne	shl	local05, #4
259bc     13 13 02 51 |  if_ne	add	arg01, local05
259c0     09 FB 01 56 |  if_ne	mov	result1, arg01
259c4     FD 14 0A F6 | 	mov	arg02, result1 wz
259c8     B8 00 90 AD |  if_e	jmp	#LR__3577
259cc     11 15 52 F2 | 	cmps	arg02, local03 wc
259d0     B0 00 90 3D |  if_ae	jmp	#LR__3577
259d4     0A 13 02 F6 | 	mov	arg01, arg02
259d8     00 FA 05 F6 | 	mov	result1, #0
259dc     02 12 06 F1 | 	add	arg01, #2
259e0     09 13 E2 FA | 	rdword	arg01, arg01
259e4     36 00 00 FF 
259e8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
259ec     01 FA 65 A6 |  if_e	neg	result1, #1
259f0     00 FA 0D F2 | 	cmp	result1, #0 wz
259f4     8C 00 90 AD |  if_e	jmp	#LR__3577
259f8     0F 25 02 F6 | 	mov	local04, local01
259fc     12 29 E2 FA | 	rdword	local06, local04
25a00     0A 13 02 F6 | 	mov	arg01, arg02
25a04     09 1F E2 FA | 	rdword	local01, arg01
25a08     0F 29 02 F1 | 	add	local06, local01
25a0c     12 29 52 FC | 	wrword	local06, local04
25a10     09 29 02 F6 | 	mov	local06, arg01
25a14     06 28 06 F1 | 	add	local06, #6
25a18     12 1F 02 F6 | 	mov	local01, local04
25a1c     14 29 E2 FA | 	rdword	local06, local06
25a20     06 1E 06 F1 | 	add	local01, #6
25a24     0F 29 52 FC | 	wrword	local06, local01
25a28     09 29 02 F6 | 	mov	local06, arg01
25a2c     02 28 06 F1 | 	add	local06, #2
25a30     14 55 59 FC | 	wrword	#170, local06
25a34     09 29 02 F6 | 	mov	local06, arg01
25a38     06 28 06 F1 | 	add	local06, #6
25a3c     14 01 58 FC | 	wrword	#0, local06
25a40     09 27 EA FA | 	rdword	local05, arg01 wz
25a44     00 FA 05 A6 |  if_e	mov	result1, #0
25a48     04 26 66 50 |  if_ne	shl	local05, #4
25a4c     13 13 02 51 |  if_ne	add	arg01, local05
25a50     09 FB 01 56 |  if_ne	mov	result1, arg01
25a54     FD 28 0A F6 | 	mov	local06, result1 wz
25a58     28 00 90 AD |  if_e	jmp	#LR__3576
25a5c     11 29 52 F2 | 	cmps	local06, local03 wc
25a60     20 00 90 3D |  if_ae	jmp	#LR__3576
25a64     12 15 0A F6 | 	mov	arg02, local04 wz
25a68     00 FA 05 A6 |  if_e	mov	result1, #0
25a6c     10 15 82 51 |  if_ne	sub	arg02, local02
25a70     04 14 46 50 |  if_ne	shr	arg02, #4
25a74     0A FB 01 56 |  if_ne	mov	result1, arg02
25a78     14 25 02 F6 | 	mov	local04, local06
25a7c     04 24 06 F1 | 	add	local04, #4
25a80     12 FB 51 FC | 	wrword	result1, local04
25a84                 | LR__3576
25a84                 | LR__3577
25a84     14 FB 01 F6 | 	mov	result1, local06
25a88     A7 F0 03 F6 | 	mov	ptra, fp
25a8c     B2 00 A0 FD | 	call	#popregs_
25a90                 | __system___gc_dofree_ret
25a90     2D 00 64 FD | 	ret
25a94                 | 
25a94                 | __system___gc_docollect
25a94     05 4A 05 F6 | 	mov	COUNT_, #5
25a98     A8 00 A0 FD | 	call	#pushregs_
25a9c     B8 F9 BF FD | 	call	#__system___gc_ptrs
25aa0     FE 1E 02 F6 | 	mov	local01, result2
25aa4     FD 20 02 F6 | 	mov	local02, result1
25aa8     10 13 02 F6 | 	mov	arg01, local02
25aac     09 23 EA FA | 	rdword	local03, arg01 wz
25ab0     00 FA 05 A6 |  if_e	mov	result1, #0
25ab4     04 22 66 50 |  if_ne	shl	local03, #4
25ab8     11 13 02 51 |  if_ne	add	arg01, local03
25abc     09 FB 01 56 |  if_ne	mov	result1, arg01
25ac0     FD 24 0A F6 | 	mov	local04, result1 wz
25ac4     00 FA 05 F6 | 	mov	result1, #0
25ac8     01 FA 61 FD | 	cogid	result1
25acc     FD 26 02 F6 | 	mov	local05, result1
25ad0     48 00 90 AD |  if_e	jmp	#LR__3582
25ad4     97 22 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
25ad8                 | LR__3580
25ad8     0F 25 52 F2 | 	cmps	local04, local01 wc
25adc     3C 00 90 3D |  if_ae	jmp	#LR__3582
25ae0     12 15 02 F6 | 	mov	arg02, local04
25ae4     02 14 06 F1 | 	add	arg02, #2
25ae8     0A 15 E2 FA | 	rdword	arg02, arg02
25aec     20 14 26 F5 | 	andn	arg02, #32
25af0     12 13 02 F6 | 	mov	arg01, local04
25af4     02 12 06 F1 | 	add	arg01, #2
25af8     09 15 52 FC | 	wrword	arg02, arg01
25afc     12 13 02 F6 | 	mov	arg01, local04
25b00     09 23 EA FA | 	rdword	local03, arg01 wz
25b04     00 FA 05 A6 |  if_e	mov	result1, #0
25b08     04 22 66 50 |  if_ne	shl	local03, #4
25b0c     11 13 02 51 |  if_ne	add	arg01, local03
25b10     09 FB 01 56 |  if_ne	mov	result1, arg01
25b14     FD 24 0A F6 | 	mov	local04, result1 wz
25b18     BC FF 9F 5D |  if_ne	jmp	#LR__3580
25b1c                 | LR__3581
25b1c                 | LR__3582
25b1c     00 22 06 F6 | 	mov	local03, #0
25b20     00 12 06 F6 | 	mov	arg01, #0
25b24     74 BA BF FD | 	call	#__system____topofstack
25b28     FD 14 02 F6 | 	mov	arg02, result1
25b2c     11 13 02 F6 | 	mov	arg01, local03
25b30     90 00 B0 FD | 	call	#__system___gc_markhub
25b34     1C 01 B0 FD | 	call	#__system___gc_markcog
25b38     10 13 02 F6 | 	mov	arg01, local02
25b3c     09 23 EA FA | 	rdword	local03, arg01 wz
25b40     00 FA 05 A6 |  if_e	mov	result1, #0
25b44     04 22 66 50 |  if_ne	shl	local03, #4
25b48     11 13 02 51 |  if_ne	add	arg01, local03
25b4c     09 FB 01 56 |  if_ne	mov	result1, arg01
25b50     FD 20 0A F6 | 	mov	local02, result1 wz
25b54     60 00 90 AD |  if_e	jmp	#LR__3586
25b58                 | LR__3583
25b58     10 25 02 F6 | 	mov	local04, local02
25b5c     12 13 02 F6 | 	mov	arg01, local04
25b60     09 23 EA FA | 	rdword	local03, arg01 wz
25b64     00 FA 05 A6 |  if_e	mov	result1, #0
25b68     04 22 66 50 |  if_ne	shl	local03, #4
25b6c     11 13 02 51 |  if_ne	add	arg01, local03
25b70     09 FB 01 56 |  if_ne	mov	result1, arg01
25b74     FD 20 02 F6 | 	mov	local02, result1
25b78     12 15 02 F6 | 	mov	arg02, local04
25b7c     02 14 06 F1 | 	add	arg02, #2
25b80     0A 15 E2 FA | 	rdword	arg02, arg02
25b84     20 14 CE F7 | 	test	arg02, #32 wz
25b88     10 14 CE A7 |  if_e	test	arg02, #16 wz
25b8c     1C 00 90 5D |  if_ne	jmp	#LR__3585
25b90     0A 15 42 F8 | 	getnib	arg02, arg02, #0
25b94     13 15 0A F2 | 	cmp	arg02, local05 wz
25b98     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
25b9c     0C 00 90 5D |  if_ne	jmp	#LR__3584
25ba0     12 13 02 F6 | 	mov	arg01, local04
25ba4     84 FC BF FD | 	call	#__system___gc_dofree
25ba8     FD 20 02 F6 | 	mov	local02, result1
25bac                 | LR__3584
25bac                 | LR__3585
25bac     00 20 0E F2 | 	cmp	local02, #0 wz
25bb0     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
25bb4     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3583
25bb8                 | LR__3586
25bb8     A7 F0 03 F6 | 	mov	ptra, fp
25bbc     B2 00 A0 FD | 	call	#popregs_
25bc0                 | __system___gc_docollect_ret
25bc0     2D 00 64 FD | 	ret
25bc4                 | 
25bc4                 | __system___gc_markhub
25bc4     04 4A 05 F6 | 	mov	COUNT_, #4
25bc8     A8 00 A0 FD | 	call	#pushregs_
25bcc     09 1F 02 F6 | 	mov	local01, arg01
25bd0     0A 21 02 F6 | 	mov	local02, arg02
25bd4     80 F8 BF FD | 	call	#__system___gc_ptrs
25bd8     FD 22 02 F6 | 	mov	local03, result1
25bdc     FE 24 02 F6 | 	mov	local04, result2
25be0                 | LR__3590
25be0     10 1F 52 F2 | 	cmps	local01, local02 wc
25be4     60 00 90 3D |  if_ae	jmp	#LR__3591
25be8     0F 17 02 FB | 	rdlong	arg03, local01
25bec     04 1E 06 F1 | 	add	local01, #4
25bf0     12 15 02 F6 | 	mov	arg02, local04
25bf4     11 13 02 F6 | 	mov	arg01, local03
25bf8     8C FB BF FD | 	call	#__system___gc_isvalidptr
25bfc     FD 16 0A F6 | 	mov	arg03, result1 wz
25c00     DC FF 9F AD |  if_e	jmp	#LR__3590
25c04     0B 13 02 F6 | 	mov	arg01, arg03
25c08     00 FA 05 F6 | 	mov	result1, #0
25c0c     02 12 06 F1 | 	add	arg01, #2
25c10     09 13 E2 FA | 	rdword	arg01, arg01
25c14     36 00 00 FF 
25c18     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
25c1c     01 FA 65 A6 |  if_e	neg	result1, #1
25c20     00 FA 0D F2 | 	cmp	result1, #0 wz
25c24     B8 FF 9F 5D |  if_ne	jmp	#LR__3590
25c28     0B FD 01 F6 | 	mov	result2, arg03
25c2c     02 FC 05 F1 | 	add	result2, #2
25c30     FE FC E1 FA | 	rdword	result2, result2
25c34     0F FC 25 F5 | 	andn	result2, #15
25c38     2E FC 45 F5 | 	or	result2, #46
25c3c     02 16 06 F1 | 	add	arg03, #2
25c40     0B FD 51 FC | 	wrword	result2, arg03
25c44     98 FF 9F FD | 	jmp	#LR__3590
25c48                 | LR__3591
25c48     A7 F0 03 F6 | 	mov	ptra, fp
25c4c     B2 00 A0 FD | 	call	#popregs_
25c50                 | __system___gc_markhub_ret
25c50     2D 00 64 FD | 	ret
25c54                 | 
25c54                 | __system___gc_markcog
25c54     04 4A 05 F6 | 	mov	COUNT_, #4
25c58     A8 00 A0 FD | 	call	#pushregs_
25c5c     F8 F7 BF FD | 	call	#__system___gc_ptrs
25c60     FD 1E 02 F6 | 	mov	local01, result1
25c64     FE 20 02 F6 | 	mov	local02, result2
25c68     EF 23 06 F6 | 	mov	local03, #495
25c6c                 | LR__3600
25c6c                 | 	'.live	local03
25c6c     00 22 96 F9 | 	alts	local03, #0
25c70     11 25 02 F6 | 	mov	local04, local03
25c74     0F 13 02 F6 | 	mov	arg01, local01
25c78     10 15 02 F6 | 	mov	arg02, local02
25c7c     12 17 02 F6 | 	mov	arg03, local04
25c80     04 FB BF FD | 	call	#__system___gc_isvalidptr
25c84     00 FA 0D F2 | 	cmp	result1, #0 wz
25c88     18 00 90 AD |  if_e	jmp	#LR__3601
25c8c     FD 24 02 F6 | 	mov	local04, result1
25c90     02 24 06 F1 | 	add	local04, #2
25c94     12 25 E2 FA | 	rdword	local04, local04
25c98     20 24 46 F5 | 	or	local04, #32
25c9c     02 FA 05 F1 | 	add	result1, #2
25ca0     FD 24 52 FC | 	wrword	local04, result1
25ca4                 | LR__3601
25ca4     01 22 86 F1 | 	sub	local03, #1
25ca8     00 22 56 F2 | 	cmps	local03, #0 wc
25cac     BC FF 9F 3D |  if_ae	jmp	#LR__3600
25cb0     A7 F0 03 F6 | 	mov	ptra, fp
25cb4     B2 00 A0 FD | 	call	#popregs_
25cb8                 | __system___gc_markcog_ret
25cb8     2D 00 64 FD | 	ret
25cbc                 | 
25cbc                 | __system__opendir
25cbc     06 4A 05 F6 | 	mov	COUNT_, #6
25cc0     A8 00 A0 FD | 	call	#pushregs_
25cc4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25cc8     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
25ccc     09 15 02 F6 | 	mov	arg02, arg01
25cd0     0F 13 02 F6 | 	mov	arg01, local01
25cd4     00 16 06 F6 | 	mov	arg03, #0
25cd8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25cdc     7C C0 BF FD | 	call	#__system____getvfsforfile
25ce0     FD 20 0A F6 | 	mov	local02, result1 wz
25ce4     10 00 90 AD |  if_e	jmp	#LR__3610
25ce8     28 20 06 F1 | 	add	local02, #40
25cec     10 17 0A FB | 	rdlong	arg03, local02 wz
25cf0     28 20 86 F1 | 	sub	local02, #40
25cf4     14 00 90 5D |  if_ne	jmp	#LR__3611
25cf8                 | LR__3610
25cf8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25cfc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25d00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25d04     00 FA 05 F6 | 	mov	result1, #0
25d08     90 00 90 FD | 	jmp	#LR__3613
25d0c                 | LR__3611
25d0c     5C 12 06 F6 | 	mov	arg01, #92
25d10     10 14 06 F6 | 	mov	arg02, #16
25d14     C0 F9 BF FD | 	call	#__system___gc_doalloc
25d18     FD 22 0A F6 | 	mov	local03, result1 wz
25d1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25d20     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
25d24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25d28     00 FA 05 A6 |  if_e	mov	result1, #0
25d2c     6C 00 90 AD |  if_e	jmp	#LR__3613
25d30     28 20 06 F1 | 	add	local02, #40
25d34     10 25 02 FB | 	rdlong	local04, local02
25d38     12 27 02 F6 | 	mov	local05, local04
25d3c     28 20 86 F1 | 	sub	local02, #40
25d40     13 26 46 F7 | 	zerox	local05, #19
25d44     14 24 46 F0 | 	shr	local04, #20
25d48     02 24 66 F0 | 	shl	local04, #2
25d4c     ED 24 02 F1 | 	add	local04, __methods__
25d50     12 25 02 FB | 	rdlong	local04, local04
25d54     11 13 02 F6 | 	mov	arg01, local03
25d58     0F 15 02 F6 | 	mov	arg02, local01
25d5c     F2 28 02 F6 | 	mov	local06, objptr
25d60     13 E5 01 F6 | 	mov	objptr, local05
25d64     2D 24 62 FD | 	call	local04
25d68     14 E5 01 F6 | 	mov	objptr, local06
25d6c     FD 16 0A F6 | 	mov	arg03, result1 wz
25d70     20 00 90 AD |  if_e	jmp	#LR__3612
25d74     00 16 4E F2 | 	cmps	arg03, #0 wz
25d78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25d7c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
25d80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25d84     11 13 02 F6 | 	mov	arg01, local03
25d88     58 FA BF FD | 	call	#__system___gc_free
25d8c     00 FA 05 F6 | 	mov	result1, #0
25d90     08 00 90 FD | 	jmp	#LR__3613
25d94                 | LR__3612
25d94     11 21 62 FC | 	wrlong	local02, local03
25d98     11 FB 01 F6 | 	mov	result1, local03
25d9c                 | LR__3613
25d9c     A7 F0 03 F6 | 	mov	ptra, fp
25da0     B2 00 A0 FD | 	call	#popregs_
25da4                 | __system__opendir_ret
25da4     2D 00 64 FD | 	ret
25da8                 | 
25da8                 | __system__closedir
25da8     04 4A 05 F6 | 	mov	COUNT_, #4
25dac     A8 00 A0 FD | 	call	#pushregs_
25db0     09 1F 02 F6 | 	mov	local01, arg01
25db4     0F 13 02 FB | 	rdlong	arg01, local01
25db8     2C 12 06 F1 | 	add	arg01, #44
25dbc     09 21 02 FB | 	rdlong	local02, arg01
25dc0     10 23 02 F6 | 	mov	local03, local02
25dc4     13 22 46 F7 | 	zerox	local03, #19
25dc8     14 20 46 F0 | 	shr	local02, #20
25dcc     02 20 66 F0 | 	shl	local02, #2
25dd0     ED 20 02 F1 | 	add	local02, __methods__
25dd4     10 21 02 FB | 	rdlong	local02, local02
25dd8     0F 13 02 F6 | 	mov	arg01, local01
25ddc     F2 24 02 F6 | 	mov	local04, objptr
25de0     11 E5 01 F6 | 	mov	objptr, local03
25de4     2D 20 62 FD | 	call	local02
25de8     12 E5 01 F6 | 	mov	objptr, local04
25dec     FD 24 02 F6 | 	mov	local04, result1
25df0     0F 13 02 F6 | 	mov	arg01, local01
25df4     EC F9 BF FD | 	call	#__system___gc_free
25df8     00 24 4E F2 | 	cmps	local04, #0 wz
25dfc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25e00     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
25e04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25e08     01 FA 65 56 |  if_ne	neg	result1, #1
25e0c     00 FA 05 A6 |  if_e	mov	result1, #0
25e10     A7 F0 03 F6 | 	mov	ptra, fp
25e14     B2 00 A0 FD | 	call	#popregs_
25e18                 | __system__closedir_ret
25e18     2D 00 64 FD | 	ret
25e1c                 | 
25e1c                 | __system__readdir
25e1c     04 4A 05 F6 | 	mov	COUNT_, #4
25e20     A8 00 A0 FD | 	call	#pushregs_
25e24     09 15 0A FB | 	rdlong	arg02, arg01 wz
25e28     08 12 06 F1 | 	add	arg01, #8
25e2c     09 1F 02 F6 | 	mov	local01, arg01
25e30     08 12 86 F1 | 	sub	arg01, #8
25e34     00 FA 05 A6 |  if_e	mov	result1, #0
25e38     5C 00 90 AD |  if_e	jmp	#LR__3621
25e3c     30 14 06 F1 | 	add	arg02, #48
25e40     0A 21 02 FB | 	rdlong	local02, arg02
25e44     10 23 02 F6 | 	mov	local03, local02
25e48     13 22 46 F7 | 	zerox	local03, #19
25e4c     14 20 46 F0 | 	shr	local02, #20
25e50     02 20 66 F0 | 	shl	local02, #2
25e54     ED 20 02 F1 | 	add	local02, __methods__
25e58     10 21 02 FB | 	rdlong	local02, local02
25e5c     0F 15 02 F6 | 	mov	arg02, local01
25e60     F2 24 02 F6 | 	mov	local04, objptr
25e64     11 E5 01 F6 | 	mov	objptr, local03
25e68     2D 20 62 FD | 	call	local02
25e6c     12 E5 01 F6 | 	mov	objptr, local04
25e70     00 FA 4D F2 | 	cmps	result1, #0 wz
25e74     1C 00 90 AD |  if_e	jmp	#LR__3620
25e78     01 FA 55 F2 | 	cmps	result1, #1 wc
25e7c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
25e80     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25e84     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
25e88     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25e8c     00 FA 05 F6 | 	mov	result1, #0
25e90     04 00 90 FD | 	jmp	#LR__3621
25e94                 | LR__3620
25e94     0F FB 01 F6 | 	mov	result1, local01
25e98                 | LR__3621
25e98     A7 F0 03 F6 | 	mov	ptra, fp
25e9c     B2 00 A0 FD | 	call	#popregs_
25ea0                 | __system__readdir_ret
25ea0     2D 00 64 FD | 	ret
25ea4                 | 
25ea4                 | __system___openraw
25ea4     15 4A 05 F6 | 	mov	COUNT_, #21
25ea8     A8 00 A0 FD | 	call	#pushregs_
25eac     09 1F 02 F6 | 	mov	local01, arg01
25eb0     0A 21 02 F6 | 	mov	local02, arg02
25eb4     0B 23 02 F6 | 	mov	local03, arg03
25eb8     0C 25 02 F6 | 	mov	local04, arg04
25ebc     04 26 06 F6 | 	mov	local05, #4
25ec0     0F 29 02 F6 | 	mov	local06, local01
25ec4     00 2A 06 F6 | 	mov	local07, #0
25ec8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25ecc     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
25ed0     16 13 02 F6 | 	mov	arg01, local08
25ed4     10 15 02 F6 | 	mov	arg02, local02
25ed8     00 16 06 F6 | 	mov	arg03, #0
25edc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25ee0     78 BE BF FD | 	call	#__system____getvfsforfile
25ee4     FD 2E 0A F6 | 	mov	local09, result1 wz
25ee8     10 00 90 AD |  if_e	jmp	#LR__3630
25eec     20 2E 06 F1 | 	add	local09, #32
25ef0     17 FB 09 FB | 	rdlong	result1, local09 wz
25ef4     20 2E 86 F1 | 	sub	local09, #32
25ef8     14 00 90 5D |  if_ne	jmp	#LR__3631
25efc                 | LR__3630
25efc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25f00     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25f04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25f08     01 FA 65 F6 | 	neg	result1, #1
25f0c     8C 02 90 FD | 	jmp	#LR__3644
25f10                 | LR__3631
25f10     14 13 02 F6 | 	mov	arg01, local06
25f14     00 14 06 F6 | 	mov	arg02, #0
25f18     34 16 06 F6 | 	mov	arg03, #52
25f1c     09 31 02 F6 | 	mov	local10, arg01
25f20     98 00 A0 FD | 	call	#\builtin_bytefill_
25f24     20 2E 06 F1 | 	add	local09, #32
25f28     17 33 02 FB | 	rdlong	local11, local09
25f2c     19 35 02 F6 | 	mov	local12, local11
25f30     19 37 02 F6 | 	mov	local13, local11
25f34     20 2E 86 F1 | 	sub	local09, #32
25f38     1B 39 02 F6 | 	mov	local14, local13
25f3c     13 34 46 F7 | 	zerox	local12, #19
25f40     14 38 46 F0 | 	shr	local14, #20
25f44     02 38 66 F0 | 	shl	local14, #2
25f48     ED 38 02 F1 | 	add	local14, __methods__
25f4c     1C 39 02 FB | 	rdlong	local14, local14
25f50     14 3B 02 F6 | 	mov	local15, local06
25f54     16 3D 02 F6 | 	mov	local16, local08
25f58     11 3F 02 F6 | 	mov	local17, local03
25f5c     1D 13 02 F6 | 	mov	arg01, local15
25f60     1E 15 02 F6 | 	mov	arg02, local16
25f64     1F 17 02 F6 | 	mov	arg03, local17
25f68     F2 40 02 F6 | 	mov	local18, objptr
25f6c     1A E5 01 F6 | 	mov	objptr, local12
25f70     2D 38 62 FD | 	call	local14
25f74     20 E5 01 F6 | 	mov	objptr, local18
25f78     FD 42 0A F6 | 	mov	local19, result1 wz
25f7c     04 22 CE 57 |  if_ne	test	local03, #4 wz
25f80     58 00 90 AD |  if_e	jmp	#LR__3632
25f84     24 2E 06 F1 | 	add	local09, #36
25f88     17 33 02 FB | 	rdlong	local11, local09
25f8c     19 35 02 F6 | 	mov	local12, local11
25f90     19 37 02 F6 | 	mov	local13, local11
25f94     24 2E 86 F1 | 	sub	local09, #36
25f98     1B 39 02 F6 | 	mov	local14, local13
25f9c     13 34 46 F7 | 	zerox	local12, #19
25fa0     14 38 46 F0 | 	shr	local14, #20
25fa4     02 38 66 F0 | 	shl	local14, #2
25fa8     ED 38 02 F1 | 	add	local14, __methods__
25fac     1C 39 02 FB | 	rdlong	local14, local14
25fb0     14 3B 02 F6 | 	mov	local15, local06
25fb4     16 3D 02 F6 | 	mov	local16, local08
25fb8     12 3F 02 F6 | 	mov	local17, local04
25fbc     1D 13 02 F6 | 	mov	arg01, local15
25fc0     1E 15 02 F6 | 	mov	arg02, local16
25fc4     1F 17 02 F6 | 	mov	arg03, local17
25fc8     F2 40 02 F6 | 	mov	local18, objptr
25fcc     1A E5 01 F6 | 	mov	objptr, local12
25fd0     2D 38 62 FD | 	call	local14
25fd4     20 E5 01 F6 | 	mov	objptr, local18
25fd8     FD 42 02 F6 | 	mov	local19, result1
25fdc                 | LR__3632
25fdc     00 42 0E F2 | 	cmp	local19, #0 wz
25fe0     8C 01 90 5D |  if_ne	jmp	#LR__3642
25fe4     11 45 02 F6 | 	mov	local20, local03
25fe8     03 44 0E F5 | 	and	local20, #3 wz
25fec     02 26 46 55 |  if_ne	or	local05, #2
25ff0     01 44 0E F2 | 	cmp	local20, #1 wz
25ff4     01 26 46 55 |  if_ne	or	local05, #1
25ff8     20 22 CE F7 | 	test	local03, #32 wz
25ffc     C0 26 46 55 |  if_ne	or	local05, #192
26000     08 28 06 F1 | 	add	local06, #8
26004     14 27 62 FC | 	wrlong	local05, local06
26008     0C 28 06 F1 | 	add	local06, #12
2600c     14 47 0A FB | 	rdlong	local21, local06 wz
26010     14 28 86 F1 | 	sub	local06, #20
26014     18 00 90 5D |  if_ne	jmp	#LR__3633
26018     04 2E 06 F1 | 	add	local09, #4
2601c     17 47 02 FB | 	rdlong	local21, local09
26020     04 2E 86 F1 | 	sub	local09, #4
26024     14 28 06 F1 | 	add	local06, #20
26028     14 47 62 FC | 	wrlong	local21, local06
2602c     14 28 86 F1 | 	sub	local06, #20
26030                 | LR__3633
26030     18 28 06 F1 | 	add	local06, #24
26034     14 47 0A FB | 	rdlong	local21, local06 wz
26038     18 28 86 F1 | 	sub	local06, #24
2603c     18 00 90 5D |  if_ne	jmp	#LR__3634
26040     08 2E 06 F1 | 	add	local09, #8
26044     17 47 02 FB | 	rdlong	local21, local09
26048     08 2E 86 F1 | 	sub	local09, #8
2604c     18 28 06 F1 | 	add	local06, #24
26050     14 47 62 FC | 	wrlong	local21, local06
26054     18 28 86 F1 | 	sub	local06, #24
26058                 | LR__3634
26058     24 28 06 F1 | 	add	local06, #36
2605c     14 47 0A FB | 	rdlong	local21, local06 wz
26060     24 28 86 F1 | 	sub	local06, #36
26064     17 47 02 AB |  if_e	rdlong	local21, local09
26068     24 28 06 A1 |  if_e	add	local06, #36
2606c     14 47 62 AC |  if_e	wrlong	local21, local06
26070     24 28 86 A1 |  if_e	sub	local06, #36
26074     28 28 06 F1 | 	add	local06, #40
26078     14 47 0A FB | 	rdlong	local21, local06 wz
2607c     28 28 86 F1 | 	sub	local06, #40
26080     18 00 90 5D |  if_ne	jmp	#LR__3635
26084     10 2E 06 F1 | 	add	local09, #16
26088     17 47 02 FB | 	rdlong	local21, local09
2608c     10 2E 86 F1 | 	sub	local09, #16
26090     28 28 06 F1 | 	add	local06, #40
26094     14 47 62 FC | 	wrlong	local21, local06
26098     28 28 86 F1 | 	sub	local06, #40
2609c                 | LR__3635
2609c     30 28 06 F1 | 	add	local06, #48
260a0     14 47 0A FB | 	rdlong	local21, local06 wz
260a4     30 28 86 F1 | 	sub	local06, #48
260a8     18 00 90 5D |  if_ne	jmp	#LR__3636
260ac     0C 2E 06 F1 | 	add	local09, #12
260b0     17 47 02 FB | 	rdlong	local21, local09
260b4     0C 2E 86 F1 | 	sub	local09, #12
260b8     30 28 06 F1 | 	add	local06, #48
260bc     14 47 62 FC | 	wrlong	local21, local06
260c0     30 28 86 F1 | 	sub	local06, #48
260c4                 | LR__3636
260c4     1C 28 06 F1 | 	add	local06, #28
260c8     14 47 0A FB | 	rdlong	local21, local06 wz
260cc     1C 28 86 F1 | 	sub	local06, #28
260d0     1C 00 90 5D |  if_ne	jmp	#LR__3637
260d4     01 2A 06 F6 | 	mov	local07, #1
260d8     F2 12 02 F6 | 	mov	arg01, objptr
260dc     00 E0 04 FF 
260e0     00 12 46 F5 | 	or	arg01, ##163577856
260e4     1C 28 06 F1 | 	add	local06, #28
260e8     14 13 62 FC | 	wrlong	arg01, local06
260ec     1C 28 86 F1 | 	sub	local06, #28
260f0                 | LR__3637
260f0     20 28 06 F1 | 	add	local06, #32
260f4     14 47 0A FB | 	rdlong	local21, local06 wz
260f8     20 28 86 F1 | 	sub	local06, #32
260fc     1C 00 90 5D |  if_ne	jmp	#LR__3638
26100     01 2A 06 F6 | 	mov	local07, #1
26104     F2 12 02 F6 | 	mov	arg01, objptr
26108     00 E8 04 FF 
2610c     00 12 46 F5 | 	or	arg01, ##164626432
26110     20 28 06 F1 | 	add	local06, #32
26114     14 13 62 FC | 	wrlong	arg01, local06
26118     20 28 86 F1 | 	sub	local06, #32
2611c                 | LR__3638
2611c     2C 28 06 F1 | 	add	local06, #44
26120     14 47 0A FB | 	rdlong	local21, local06 wz
26124     2C 28 86 F1 | 	sub	local06, #44
26128     44 00 90 5D |  if_ne	jmp	#LR__3641
2612c     14 2E 06 F1 | 	add	local09, #20
26130     17 47 0A FB | 	rdlong	local21, local09 wz
26134     14 2E 86 F1 | 	sub	local09, #20
26138     18 00 90 AD |  if_e	jmp	#LR__3639
2613c     14 2E 06 F1 | 	add	local09, #20
26140     17 47 02 FB | 	rdlong	local21, local09
26144     2C 28 06 F1 | 	add	local06, #44
26148     14 47 62 FC | 	wrlong	local21, local06
2614c     2C 28 86 F1 | 	sub	local06, #44
26150     1C 00 90 FD | 	jmp	#LR__3640
26154                 | LR__3639
26154     01 2A 06 F6 | 	mov	local07, #1
26158     F2 12 02 F6 | 	mov	arg01, objptr
2615c     00 F0 04 FF 
26160     00 12 46 F5 | 	or	arg01, ##165675008
26164     2C 28 06 F1 | 	add	local06, #44
26168     14 13 62 FC | 	wrlong	arg01, local06
2616c     2C 28 86 F1 | 	sub	local06, #44
26170                 | LR__3640
26170                 | LR__3641
26170                 | LR__3642
26170     00 2A 0E F2 | 	cmp	local07, #0 wz
26174     14 13 02 56 |  if_ne	mov	arg01, local06
26178     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2617c     00 42 0E F2 | 	cmp	local19, #0 wz
26180     00 12 06 A6 |  if_e	mov	arg01, #0
26184     10 00 90 5D |  if_ne	jmp	#LR__3643
26188     00 12 4E F2 | 	cmps	arg01, #0 wz
2618c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26190     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26194     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26198                 | LR__3643
26198     21 FB 01 F6 | 	mov	result1, local19
2619c                 | LR__3644
2619c     A7 F0 03 F6 | 	mov	ptra, fp
261a0     B2 00 A0 FD | 	call	#popregs_
261a4                 | __system___openraw_ret
261a4     2D 00 64 FD | 	ret
261a8                 | 
261a8                 | __system___closeraw
261a8     05 4A 05 F6 | 	mov	COUNT_, #5
261ac     A8 00 A0 FD | 	call	#pushregs_
261b0     09 1F 02 F6 | 	mov	local01, arg01
261b4     00 20 06 F6 | 	mov	local02, #0
261b8     08 1E 06 F1 | 	add	local01, #8
261bc     0F FB 09 FB | 	rdlong	result1, local01 wz
261c0     08 1E 86 F1 | 	sub	local01, #8
261c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
261c8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
261cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
261d0     01 FA 65 A6 |  if_e	neg	result1, #1
261d4     A8 00 90 AD |  if_e	jmp	#LR__3652
261d8     2C 1E 06 F1 | 	add	local01, #44
261dc     0F FB 09 FB | 	rdlong	result1, local01 wz
261e0     2C 1E 86 F1 | 	sub	local01, #44
261e4     38 00 90 AD |  if_e	jmp	#LR__3650
261e8     2C 1E 06 F1 | 	add	local01, #44
261ec     0F 23 02 FB | 	rdlong	local03, local01
261f0     11 25 02 F6 | 	mov	local04, local03
261f4     2C 1E 86 F1 | 	sub	local01, #44
261f8     13 24 46 F7 | 	zerox	local04, #19
261fc     14 22 46 F0 | 	shr	local03, #20
26200     02 22 66 F0 | 	shl	local03, #2
26204     ED 22 02 F1 | 	add	local03, __methods__
26208     11 23 02 FB | 	rdlong	local03, local03
2620c     0F 13 02 F6 | 	mov	arg01, local01
26210     F2 26 02 F6 | 	mov	local05, objptr
26214     12 E5 01 F6 | 	mov	objptr, local04
26218     2D 22 62 FD | 	call	local03
2621c     13 E5 01 F6 | 	mov	objptr, local05
26220                 | LR__3650
26220     24 1E 06 F1 | 	add	local01, #36
26224     0F 27 0A FB | 	rdlong	local05, local01 wz
26228     24 1E 86 F1 | 	sub	local01, #36
2622c     3C 00 90 AD |  if_e	jmp	#LR__3651
26230     24 1E 06 F1 | 	add	local01, #36
26234     0F 23 02 FB | 	rdlong	local03, local01
26238     11 25 02 F6 | 	mov	local04, local03
2623c     24 1E 86 F1 | 	sub	local01, #36
26240     13 24 46 F7 | 	zerox	local04, #19
26244     14 22 46 F0 | 	shr	local03, #20
26248     02 22 66 F0 | 	shl	local03, #2
2624c     ED 22 02 F1 | 	add	local03, __methods__
26250     11 23 02 FB | 	rdlong	local03, local03
26254     0F 13 02 F6 | 	mov	arg01, local01
26258     F2 26 02 F6 | 	mov	local05, objptr
2625c     12 E5 01 F6 | 	mov	objptr, local04
26260     2D 22 62 FD | 	call	local03
26264     13 E5 01 F6 | 	mov	objptr, local05
26268     FD 20 02 F6 | 	mov	local02, result1
2626c                 | LR__3651
2626c     0F 13 02 F6 | 	mov	arg01, local01
26270     00 14 06 F6 | 	mov	arg02, #0
26274     34 16 06 F6 | 	mov	arg03, #52
26278     98 00 A0 FD | 	call	#\builtin_bytefill_
2627c     10 FB 01 F6 | 	mov	result1, local02
26280                 | LR__3652
26280     A7 F0 03 F6 | 	mov	ptra, fp
26284     B2 00 A0 FD | 	call	#popregs_
26288                 | __system___closeraw_ret
26288     2D 00 64 FD | 	ret
2628c                 | 
2628c                 | __system___vfs_open_sdcardx
2628c     0B 4A 05 F6 | 	mov	COUNT_, #11
26290     A8 00 A0 FD | 	call	#pushregs_
26294     09 23 02 F6 | 	mov	local03, arg01
26298     0A 25 02 F6 | 	mov	local04, arg02
2629c     0B 27 02 F6 | 	mov	local05, arg03
262a0     0C 29 02 F6 | 	mov	local06, arg04
262a4     01 00 00 FF 
262a8     24 12 06 F6 | 	mov	arg01, ##548
262ac     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
262b0     FD 2A 02 F6 | 	mov	local07, result1
262b4     01 00 00 FF 
262b8     34 12 06 F6 | 	mov	arg01, ##564
262bc     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
262c0     FD 2C 02 F6 | 	mov	local08, result1
262c4     11 19 02 F6 | 	mov	arg04, local03
262c8     1F 18 C6 F0 | 	sar	arg04, #31
262cc     11 17 02 F6 | 	mov	arg03, local03
262d0     01 12 06 F6 | 	mov	arg01, #1
262d4     00 14 06 F6 | 	mov	arg02, #0
262d8     EC DB BF FD | 	call	#__system___int64_shl
262dc     FD 1E 02 F6 | 	mov	local01, result1
262e0     FE 2E 02 F6 | 	mov	local09, result2
262e4     12 19 02 F6 | 	mov	arg04, local04
262e8     1F 18 C6 F0 | 	sar	arg04, #31
262ec     12 17 02 F6 | 	mov	arg03, local04
262f0     01 12 06 F6 | 	mov	arg01, #1
262f4     00 14 06 F6 | 	mov	arg02, #0
262f8     CC DB BF FD | 	call	#__system___int64_shl
262fc     FD 1E 42 F5 | 	or	local01, result1
26300     FE 2E 42 F5 | 	or	local09, result2
26304     13 19 02 F6 | 	mov	arg04, local05
26308     1F 18 C6 F0 | 	sar	arg04, #31
2630c     13 17 02 F6 | 	mov	arg03, local05
26310     01 12 06 F6 | 	mov	arg01, #1
26314     00 14 06 F6 | 	mov	arg02, #0
26318     AC DB BF FD | 	call	#__system___int64_shl
2631c     FD 1E 42 F5 | 	or	local01, result1
26320     FE 2E 42 F5 | 	or	local09, result2
26324     14 19 02 F6 | 	mov	arg04, local06
26328     1F 18 C6 F0 | 	sar	arg04, #31
2632c     14 17 02 F6 | 	mov	arg03, local06
26330     01 12 06 F6 | 	mov	arg01, #1
26334     00 14 06 F6 | 	mov	arg02, #0
26338     8C DB BF FD | 	call	#__system___int64_shl
2633c     17 15 02 F6 | 	mov	arg02, local09
26340     FD 1E 42 F5 | 	or	local01, result1
26344     0A FD 41 F5 | 	or	result2, arg02
26348     FE 20 02 F6 | 	mov	local02, result2
2634c     0F 13 02 F6 | 	mov	arg01, local01
26350     10 15 02 F6 | 	mov	arg02, local02
26354     A8 DB BF FD | 	call	#__system___usepins
26358     00 FA 0D F2 | 	cmp	result1, #0 wz
2635c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26360     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
26364     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26368     00 FA 05 A6 |  if_e	mov	result1, #0
2636c     B4 00 90 AD |  if_e	jmp	#LR__3662
26370     0F 31 02 F6 | 	mov	local10, local01
26374     10 2F 02 F6 | 	mov	local09, local02
26378     01 00 00 FF 
2637c     08 2A 06 F1 | 	add	local07, ##520
26380     15 31 62 FC | 	wrlong	local10, local07
26384     04 2A 06 F1 | 	add	local07, #4
26388     15 2F 62 FC | 	wrlong	local09, local07
2638c     01 00 00 FF 
26390     0C 2A 86 F1 | 	sub	local07, ##524
26394     14 1B 02 F6 | 	mov	arg05, local06
26398     00 12 06 F6 | 	mov	arg01, #0
2639c     11 15 02 F6 | 	mov	arg02, local03
263a0     12 17 02 F6 | 	mov	arg03, local04
263a4     13 19 02 F6 | 	mov	arg04, local05
263a8     F2 30 02 F6 | 	mov	local10, objptr
263ac     15 E5 01 F6 | 	mov	objptr, local07
263b0     40 2A B0 FD | 	call	#_fatfs_cc_disk_setpins
263b4     18 E5 01 F6 | 	mov	objptr, local10
263b8     FD 32 0A F6 | 	mov	local11, result1 wz
263bc     24 00 90 5D |  if_ne	jmp	#LR__3660
263c0     88 01 00 FF 
263c4     3E 15 06 F6 | 	mov	arg02, ##@LR__5087
263c8     16 13 02 F6 | 	mov	arg01, local08
263cc     00 16 06 F6 | 	mov	arg03, #0
263d0     F2 32 02 F6 | 	mov	local11, objptr
263d4     15 E5 01 F6 | 	mov	objptr, local07
263d8     70 61 B0 FD | 	call	#_fatfs_cc_f_mount
263dc     19 E5 01 F6 | 	mov	objptr, local11
263e0     FD 32 02 F6 | 	mov	local11, result1
263e4                 | LR__3660
263e4     00 32 0E F2 | 	cmp	local11, #0 wz
263e8     24 00 90 AD |  if_e	jmp	#LR__3661
263ec     0F 13 02 F6 | 	mov	arg01, local01
263f0     10 15 02 F6 | 	mov	arg02, local02
263f4     5C DB BF FD | 	call	#__system___freepins
263f8     19 13 6A F6 | 	neg	arg01, local11 wz
263fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26400     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26404     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26408     00 FA 05 F6 | 	mov	result1, #0
2640c     14 00 90 FD | 	jmp	#LR__3662
26410                 | LR__3661
26410     15 13 02 F6 | 	mov	arg01, local07
26414     F2 32 02 F6 | 	mov	local11, objptr
26418     15 E5 01 F6 | 	mov	objptr, local07
2641c     0C 9E B0 FD | 	call	#_fatfs_cc_get_vfs
26420     19 E5 01 F6 | 	mov	objptr, local11
26424                 | LR__3662
26424     A7 F0 03 F6 | 	mov	ptra, fp
26428     B2 00 A0 FD | 	call	#popregs_
2642c                 | __system___vfs_open_sdcardx_ret
2642c     2D 00 64 FD | 	ret
26430                 | 
26430                 | __system____default_getc
26430     03 4A 05 F6 | 	mov	COUNT_, #3
26434     A8 00 A0 FD | 	call	#pushregs_
26438     09 1F 02 F6 | 	mov	local01, arg01
2643c     0F 21 02 FB | 	rdlong	local02, local01
26440     08 20 06 F1 | 	add	local02, #8
26444     10 23 02 FB | 	rdlong	local03, local02
26448     02 22 CE F7 | 	test	local03, #2 wz
2644c     0F 13 02 56 |  if_ne	mov	arg01, local01
26450     00 01 B0 5D |  if_ne	call	#__system____default_flush
26454     10 23 02 FB | 	rdlong	local03, local02
26458     01 22 46 F5 | 	or	local03, #1
2645c     10 23 62 FC | 	wrlong	local03, local02
26460     08 20 86 F1 | 	sub	local02, #8
26464     10 23 0A FB | 	rdlong	local03, local02 wz
26468     0C 00 90 5D |  if_ne	jmp	#LR__3670
2646c     0F 13 02 F6 | 	mov	arg01, local01
26470     28 19 B0 FD | 	call	#__system____default_filbuf
26474     FD 22 02 F6 | 	mov	local03, result1
26478                 | LR__3670
26478     01 22 56 F2 | 	cmps	local03, #1 wc
2647c     01 FA 65 C6 |  if_b	neg	result1, #1
26480     1C 00 90 CD |  if_b	jmp	#LR__3671
26484     01 22 86 F1 | 	sub	local03, #1
26488     10 23 62 FC | 	wrlong	local03, local02
2648c     04 20 06 F1 | 	add	local02, #4
26490     10 23 02 FB | 	rdlong	local03, local02
26494     11 FB C1 FA | 	rdbyte	result1, local03
26498     01 22 06 F1 | 	add	local03, #1
2649c     10 23 62 FC | 	wrlong	local03, local02
264a0                 | LR__3671
264a0     A7 F0 03 F6 | 	mov	ptra, fp
264a4     B2 00 A0 FD | 	call	#popregs_
264a8                 | __system____default_getc_ret
264a8     2D 00 64 FD | 	ret
264ac                 | 
264ac                 | __system____default_putc
264ac     06 4A 05 F6 | 	mov	COUNT_, #6
264b0     A8 00 A0 FD | 	call	#pushregs_
264b4     09 1F 02 F6 | 	mov	local01, arg01
264b8     0A 21 02 F6 | 	mov	local02, arg02
264bc     10 23 02 FB | 	rdlong	local03, local02
264c0     08 22 06 F1 | 	add	local03, #8
264c4     11 FB 01 FB | 	rdlong	result1, local03
264c8     01 FA CD F7 | 	test	result1, #1 wz
264cc     10 13 02 56 |  if_ne	mov	arg01, local02
264d0     80 00 B0 5D |  if_ne	call	#__system____default_flush
264d4     11 25 02 FB | 	rdlong	local04, local03
264d8     02 24 46 F5 | 	or	local04, #2
264dc     11 25 62 FC | 	wrlong	local04, local03
264e0     08 22 86 F1 | 	sub	local03, #8
264e4     11 27 02 FB | 	rdlong	local05, local03
264e8     10 22 06 F1 | 	add	local03, #16
264ec     11 15 02 FB | 	rdlong	arg02, local03
264f0     10 22 86 F1 | 	sub	local03, #16
264f4     13 FB 01 F6 | 	mov	result1, local05
264f8     0A FB 01 F1 | 	add	result1, arg02
264fc     FD 1E 42 FC | 	wrbyte	local01, result1
26500     0F 1F E2 F8 | 	getbyte	local01, local01, #0
26504     01 26 06 F1 | 	add	local05, #1
26508     11 27 62 FC | 	wrlong	local05, local03
2650c     06 20 06 F1 | 	add	local02, #6
26510     10 29 EA FA | 	rdword	local06, local02 wz
26514     06 20 86 F1 | 	sub	local02, #6
26518     0C 22 06 51 |  if_ne	add	local03, #12
2651c     11 25 02 5B |  if_ne	rdlong	local04, local03
26520     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
26524     0C 00 90 AD |  if_e	jmp	#LR__3680
26528     0A 1E 0E F2 | 	cmp	local01, #10 wz
2652c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
26530     10 00 90 5D |  if_ne	jmp	#LR__3681
26534                 | LR__3680
26534     10 13 02 F6 | 	mov	arg01, local02
26538     18 00 B0 FD | 	call	#__system____default_flush
2653c     00 FA 0D F2 | 	cmp	result1, #0 wz
26540     01 1E 66 56 |  if_ne	neg	local01, #1
26544                 | LR__3681
26544     0F FB 01 F6 | 	mov	result1, local01
26548     A7 F0 03 F6 | 	mov	ptra, fp
2654c     B2 00 A0 FD | 	call	#popregs_
26550                 | __system____default_putc_ret
26550     2D 00 64 FD | 	ret
26554                 | 
26554                 | __system____default_flush
26554     06 4A 05 F6 | 	mov	COUNT_, #6
26558     A8 00 A0 FD | 	call	#pushregs_
2655c     09 1F 02 F6 | 	mov	local01, arg01
26560     0F 21 02 FB | 	rdlong	local02, local01
26564     10 23 02 FB | 	rdlong	local03, local02
26568     08 20 06 F1 | 	add	local02, #8
2656c     10 FB 01 FB | 	rdlong	result1, local02
26570     08 20 86 F1 | 	sub	local02, #8
26574     02 FA CD F7 | 	test	result1, #2 wz
26578     D0 00 90 AD |  if_e	jmp	#LR__3692
2657c     01 22 56 F2 | 	cmps	local03, #1 wc
26580     20 01 90 CD |  if_b	jmp	#LR__3694
26584     08 1E 06 F1 | 	add	local01, #8
26588     0F FB 01 FB | 	rdlong	result1, local01
2658c     08 1E 86 F1 | 	sub	local01, #8
26590     40 FA CD F7 | 	test	result1, #64 wz
26594     68 00 90 AD |  if_e	jmp	#LR__3691
26598     08 1E 06 F1 | 	add	local01, #8
2659c     0F 17 02 FB | 	rdlong	arg03, local01
265a0     08 1E 86 F1 | 	sub	local01, #8
265a4     80 16 CE F7 | 	test	arg03, #128 wz
265a8     54 00 90 AD |  if_e	jmp	#LR__3690
265ac     30 1E 06 F1 | 	add	local01, #48
265b0     0F 25 02 FB | 	rdlong	local04, local01
265b4     12 27 02 F6 | 	mov	local05, local04
265b8     30 1E 86 F1 | 	sub	local01, #48
265bc     13 26 46 F7 | 	zerox	local05, #19
265c0     14 24 46 F0 | 	shr	local04, #20
265c4     02 24 66 F0 | 	shl	local04, #2
265c8     ED 24 02 F1 | 	add	local04, __methods__
265cc     12 25 02 FB | 	rdlong	local04, local04
265d0     0F 13 02 F6 | 	mov	arg01, local01
265d4     00 14 06 F6 | 	mov	arg02, #0
265d8     02 16 06 F6 | 	mov	arg03, #2
265dc     F2 28 02 F6 | 	mov	local06, objptr
265e0     13 E5 01 F6 | 	mov	objptr, local05
265e4     2D 24 62 FD | 	call	local04
265e8     14 E5 01 F6 | 	mov	objptr, local06
265ec     08 1E 06 F1 | 	add	local01, #8
265f0     0F 29 02 FB | 	rdlong	local06, local01
265f4     80 28 26 F5 | 	andn	local06, #128
265f8     0F 29 62 FC | 	wrlong	local06, local01
265fc     08 1E 86 F1 | 	sub	local01, #8
26600                 | LR__3690
26600                 | LR__3691
26600     18 1E 06 F1 | 	add	local01, #24
26604     0F 25 02 FB | 	rdlong	local04, local01
26608     12 27 02 F6 | 	mov	local05, local04
2660c     18 1E 86 F1 | 	sub	local01, #24
26610     13 26 46 F7 | 	zerox	local05, #19
26614     14 24 46 F0 | 	shr	local04, #20
26618     02 24 66 F0 | 	shl	local04, #2
2661c     ED 24 02 F1 | 	add	local04, __methods__
26620     12 25 02 FB | 	rdlong	local04, local04
26624     10 20 06 F1 | 	add	local02, #16
26628     10 15 02 FB | 	rdlong	arg02, local02
2662c     10 20 86 F1 | 	sub	local02, #16
26630     0F 13 02 F6 | 	mov	arg01, local01
26634     11 17 02 F6 | 	mov	arg03, local03
26638     F2 28 02 F6 | 	mov	local06, objptr
2663c     13 E5 01 F6 | 	mov	objptr, local05
26640     2D 24 62 FD | 	call	local04
26644     14 E5 01 F6 | 	mov	objptr, local06
26648     58 00 90 FD | 	jmp	#LR__3694
2664c                 | LR__3692
2664c     08 20 06 F1 | 	add	local02, #8
26650     10 29 02 FB | 	rdlong	local06, local02
26654     08 20 86 F1 | 	sub	local02, #8
26658     01 28 CE F7 | 	test	local06, #1 wz
2665c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
26660     40 00 90 AD |  if_e	jmp	#LR__3693
26664     30 1E 06 F1 | 	add	local01, #48
26668     0F 25 02 FB | 	rdlong	local04, local01
2666c     12 27 02 F6 | 	mov	local05, local04
26670     30 1E 86 F1 | 	sub	local01, #48
26674     13 26 46 F7 | 	zerox	local05, #19
26678     14 24 46 F0 | 	shr	local04, #20
2667c     02 24 66 F0 | 	shl	local04, #2
26680     ED 24 02 F1 | 	add	local04, __methods__
26684     12 25 02 FB | 	rdlong	local04, local04
26688     0F 13 02 F6 | 	mov	arg01, local01
2668c     11 15 62 F6 | 	neg	arg02, local03
26690     01 16 06 F6 | 	mov	arg03, #1
26694     F2 28 02 F6 | 	mov	local06, objptr
26698     13 E5 01 F6 | 	mov	objptr, local05
2669c     2D 24 62 FD | 	call	local04
266a0     14 E5 01 F6 | 	mov	objptr, local06
266a4                 | LR__3693
266a4                 | LR__3694
266a4     10 01 68 FC | 	wrlong	#0, local02
266a8     04 20 06 F1 | 	add	local02, #4
266ac     10 01 68 FC | 	wrlong	#0, local02
266b0     04 20 06 F1 | 	add	local02, #4
266b4     10 01 68 FC | 	wrlong	#0, local02
266b8     00 FA 05 F6 | 	mov	result1, #0
266bc     A7 F0 03 F6 | 	mov	ptra, fp
266c0     B2 00 A0 FD | 	call	#popregs_
266c4                 | __system____default_flush_ret
266c4     2D 00 64 FD | 	ret
266c8                 | 
266c8                 | __system____default_buffer_init
266c8     02 4A 05 F6 | 	mov	COUNT_, #2
266cc     A8 00 A0 FD | 	call	#pushregs_
266d0     09 1F 02 F6 | 	mov	local01, arg01
266d4     0F 21 02 FB | 	rdlong	local02, local01
266d8     0F 13 02 F6 | 	mov	arg01, local01
266dc     34 03 B0 FD | 	call	#__system___isatty
266e0     00 FA 0D F2 | 	cmp	result1, #0 wz
266e4     06 1E 06 51 |  if_ne	add	local01, #6
266e8     0F 0B 58 5C |  if_ne	wrword	#5, local01
266ec     06 1E 06 A1 |  if_e	add	local01, #6
266f0     0F 0D 58 AC |  if_e	wrword	#6, local01
266f4     14 20 06 F1 | 	add	local02, #20
266f8     10 1F 02 F6 | 	mov	local01, local02
266fc     04 20 86 F1 | 	sub	local02, #4
26700     10 1F 62 FC | 	wrlong	local01, local02
26704     04 20 86 F1 | 	sub	local02, #4
26708     02 00 80 FF 
2670c     10 01 68 FC | 	wrlong	##1024, local02
26710     00 FA 05 F6 | 	mov	result1, #0
26714     A7 F0 03 F6 | 	mov	ptra, fp
26718     B2 00 A0 FD | 	call	#popregs_
2671c                 | __system____default_buffer_init_ret
2671c     2D 00 64 FD | 	ret
26720                 | 
26720                 | __system__stat
26720     04 4A 05 F6 | 	mov	COUNT_, #4
26724     A8 00 A0 FD | 	call	#pushregs_
26728     0A 1F 02 F6 | 	mov	local01, arg02
2672c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26730     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
26734     09 15 02 F6 | 	mov	arg02, arg01
26738     10 13 02 F6 | 	mov	arg01, local02
2673c     00 16 06 F6 | 	mov	arg03, #0
26740     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26744     14 B6 BF FD | 	call	#__system____getvfsforfile
26748     FD 22 0A F6 | 	mov	local03, result1 wz
2674c     10 00 90 AD |  if_e	jmp	#LR__3700
26750     34 22 06 F1 | 	add	local03, #52
26754     11 17 0A FB | 	rdlong	arg03, local03 wz
26758     34 22 86 F1 | 	sub	local03, #52
2675c     14 00 90 5D |  if_ne	jmp	#LR__3701
26760                 | LR__3700
26760     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26764     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26768     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2676c     01 FA 65 F6 | 	neg	result1, #1
26770     68 00 90 FD | 	jmp	#LR__3702
26774                 | LR__3701
26774     0F 13 02 F6 | 	mov	arg01, local01
26778     00 14 06 F6 | 	mov	arg02, #0
2677c     30 16 06 F6 | 	mov	arg03, #48
26780     09 25 02 F6 | 	mov	local04, arg01
26784     98 00 A0 FD | 	call	#\builtin_bytefill_
26788     12 FB 01 F6 | 	mov	result1, local04
2678c     10 13 CA FA | 	rdbyte	arg01, local02 wz
26790     08 1E 06 A1 |  if_e	add	local01, #8
26794     08 00 80 AF 
26798     0F FF 6B AC |  if_e	wrlong	##4607, local01
2679c     00 FA 05 A6 |  if_e	mov	result1, #0
267a0     38 00 90 AD |  if_e	jmp	#LR__3702
267a4     34 22 06 F1 | 	add	local03, #52
267a8     11 23 02 FB | 	rdlong	local03, local03
267ac     11 25 02 F6 | 	mov	local04, local03
267b0     13 22 46 F7 | 	zerox	local03, #19
267b4     14 24 46 F0 | 	shr	local04, #20
267b8     02 24 66 F0 | 	shl	local04, #2
267bc     ED 24 02 F1 | 	add	local04, __methods__
267c0     12 25 02 FB | 	rdlong	local04, local04
267c4     10 13 02 F6 | 	mov	arg01, local02
267c8     0F 15 02 F6 | 	mov	arg02, local01
267cc     F2 20 02 F6 | 	mov	local02, objptr
267d0     11 E5 01 F6 | 	mov	objptr, local03
267d4     2D 24 62 FD | 	call	local04
267d8     10 E5 01 F6 | 	mov	objptr, local02
267dc                 | LR__3702
267dc     A7 F0 03 F6 | 	mov	ptra, fp
267e0     B2 00 A0 FD | 	call	#popregs_
267e4                 | __system__stat_ret
267e4     2D 00 64 FD | 	ret
267e8                 | 
267e8                 | __system__write
267e8     0A 12 16 F2 | 	cmp	arg01, #10 wc
267ec     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
267f0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
267f4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
267f8     01 FA 65 36 |  if_ae	neg	result1, #1
267fc     20 00 90 3D |  if_ae	jmp	#LR__3710
26800     34 12 06 FD | 	qmul	arg01, #52
26804     02 00 00 FF 
26808     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2680c     18 12 62 FD | 	getqx	arg01
26810     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26814     02 00 00 FF 
26818     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2681c     CC 10 B0 FD | 	call	#__system___vfswrite
26820                 | LR__3710
26820                 | __system__write_ret
26820     2D 00 64 FD | 	ret
26824                 | 
26824                 | __system__read
26824     0A 12 16 F2 | 	cmp	arg01, #10 wc
26828     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2682c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26830     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26834     01 FA 65 36 |  if_ae	neg	result1, #1
26838     20 00 90 3D |  if_ae	jmp	#LR__3720
2683c     34 12 06 FD | 	qmul	arg01, #52
26840     02 00 00 FF 
26844     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26848     18 12 62 FD | 	getqx	arg01
2684c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26850     02 00 00 FF 
26854     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26858     58 12 B0 FD | 	call	#__system___vfsread
2685c                 | LR__3720
2685c                 | __system__read_ret
2685c     2D 00 64 FD | 	ret
26860                 | 
26860                 | __system__close
26860     0A 12 16 F2 | 	cmp	arg01, #10 wc
26864     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26868     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2686c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26870     01 FA 65 36 |  if_ae	neg	result1, #1
26874     20 00 90 3D |  if_ae	jmp	#LR__3730
26878     34 12 06 FD | 	qmul	arg01, #52
2687c     02 00 00 FF 
26880     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26884     18 12 62 FD | 	getqx	arg01
26888     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2688c     02 00 00 FF 
26890     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26894     10 F9 BF FD | 	call	#__system___closeraw
26898                 | LR__3730
26898                 | __system__close_ret
26898     2D 00 64 FD | 	ret
2689c                 | 
2689c                 | __system__lseek
2689c     06 4A 05 F6 | 	mov	COUNT_, #6
268a0     A8 00 A0 FD | 	call	#pushregs_
268a4     0A 12 16 F2 | 	cmp	arg01, #10 wc
268a8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
268ac     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
268b0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
268b4     01 FA 65 36 |  if_ae	neg	result1, #1
268b8     C4 00 90 3D |  if_ae	jmp	#LR__3741
268bc     34 12 06 FD | 	qmul	arg01, #52
268c0     02 00 00 FF 
268c4     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
268c8     18 1E 62 FD | 	getqx	local01
268cc     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
268d0     30 1E 06 F1 | 	add	local01, #48
268d4     0F 13 0A FB | 	rdlong	arg01, local01 wz
268d8     30 1E 86 F1 | 	sub	local01, #48
268dc     02 00 00 FF 
268e0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
268e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
268e8     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
268ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
268f0     01 FA 65 A6 |  if_e	neg	result1, #1
268f4     88 00 90 AD |  if_e	jmp	#LR__3741
268f8     08 1E 06 F1 | 	add	local01, #8
268fc     0F 21 02 FB | 	rdlong	local02, local01
26900     08 1E 86 F1 | 	sub	local01, #8
26904     40 20 CE F7 | 	test	local02, #64 wz
26908     08 1E 06 51 |  if_ne	add	local01, #8
2690c     0F 21 02 5B |  if_ne	rdlong	local02, local01
26910     80 20 46 55 |  if_ne	or	local02, #128
26914     0F 21 62 5C |  if_ne	wrlong	local02, local01
26918     08 1E 86 51 |  if_ne	sub	local01, #8
2691c     30 1E 06 F1 | 	add	local01, #48
26920     0F 23 02 FB | 	rdlong	local03, local01
26924     11 25 02 F6 | 	mov	local04, local03
26928     30 1E 86 F1 | 	sub	local01, #48
2692c     13 24 46 F7 | 	zerox	local04, #19
26930     14 22 46 F0 | 	shr	local03, #20
26934     02 22 66 F0 | 	shl	local03, #2
26938     ED 22 02 F1 | 	add	local03, __methods__
2693c     11 23 02 FB | 	rdlong	local03, local03
26940     0F 13 02 F6 | 	mov	arg01, local01
26944     F2 26 02 F6 | 	mov	local05, objptr
26948     12 E5 01 F6 | 	mov	objptr, local04
2694c     2D 22 62 FD | 	call	local03
26950     13 E5 01 F6 | 	mov	objptr, local05
26954     FD 28 02 F6 | 	mov	local06, result1
26958     00 28 56 F2 | 	cmps	local06, #0 wc
2695c     1C 00 90 3D |  if_ae	jmp	#LR__3740
26960     14 13 6A F6 | 	neg	arg01, local06 wz
26964     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26968     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2696c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26970     01 FA 65 56 |  if_ne	neg	result1, #1
26974     00 FA 05 A6 |  if_e	mov	result1, #0
26978     04 00 90 FD | 	jmp	#LR__3741
2697c                 | LR__3740
2697c     14 FB 01 F6 | 	mov	result1, local06
26980                 | LR__3741
26980     A7 F0 03 F6 | 	mov	ptra, fp
26984     B2 00 A0 FD | 	call	#popregs_
26988                 | __system__lseek_ret
26988     2D 00 64 FD | 	ret
2698c                 | 
2698c                 | __system___ioctl
2698c     03 4A 05 F6 | 	mov	COUNT_, #3
26990     A8 00 A0 FD | 	call	#pushregs_
26994     00 12 4E F2 | 	cmps	arg01, #0 wz
26998     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2699c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
269a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
269a4     01 FA 65 A6 |  if_e	neg	result1, #1
269a8     5C 00 90 AD |  if_e	jmp	#LR__3751
269ac     28 12 06 F1 | 	add	arg01, #40
269b0     09 1F 02 FB | 	rdlong	local01, arg01
269b4     0F 21 02 F6 | 	mov	local02, local01
269b8     28 12 86 F1 | 	sub	arg01, #40
269bc     13 20 46 F7 | 	zerox	local02, #19
269c0     14 1E 46 F0 | 	shr	local01, #20
269c4     02 1E 66 F0 | 	shl	local01, #2
269c8     ED 1E 02 F1 | 	add	local01, __methods__
269cc     0F 1F 02 FB | 	rdlong	local01, local01
269d0     F2 22 02 F6 | 	mov	local03, objptr
269d4     10 E5 01 F6 | 	mov	objptr, local02
269d8     2D 1E 62 FD | 	call	local01
269dc     11 E5 01 F6 | 	mov	objptr, local03
269e0     FD 12 0A F6 | 	mov	arg01, result1 wz
269e4     1C 00 90 AD |  if_e	jmp	#LR__3750
269e8     00 12 4E F2 | 	cmps	arg01, #0 wz
269ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
269f0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
269f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
269f8     01 FA 65 56 |  if_ne	neg	result1, #1
269fc     00 FA 05 A6 |  if_e	mov	result1, #0
26a00     04 00 90 FD | 	jmp	#LR__3751
26a04                 | LR__3750
26a04     00 FA 05 F6 | 	mov	result1, #0
26a08                 | LR__3751
26a08     A7 F0 03 F6 | 	mov	ptra, fp
26a0c     B2 00 A0 FD | 	call	#popregs_
26a10                 | __system___ioctl_ret
26a10     2D 00 64 FD | 	ret
26a14                 | 
26a14                 | __system___isatty
26a14     00 4A 05 F6 | 	mov	COUNT_, #0
26a18     A8 00 A0 FD | 	call	#pushregs_
26a1c     0C F0 07 F1 | 	add	ptra, #12
26a20     04 4E 05 F1 | 	add	fp, #4
26a24     A7 12 62 FC | 	wrlong	arg01, fp
26a28     04 4E 05 F1 | 	add	fp, #4
26a2c     A7 16 02 F6 | 	mov	arg03, fp
26a30     08 4E 85 F1 | 	sub	fp, #8
26a34     00 15 06 F6 | 	mov	arg02, #256
26a38     50 FF BF FD | 	call	#__system___ioctl
26a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
26a40     01 FA 05 A6 |  if_e	mov	result1, #1
26a44     00 FA 05 56 |  if_ne	mov	result1, #0
26a48     A7 F0 03 F6 | 	mov	ptra, fp
26a4c     B2 00 A0 FD | 	call	#popregs_
26a50                 | __system___isatty_ret
26a50     2D 00 64 FD | 	ret
26a54                 | 
26a54                 | __system__mkdir
26a54     07 4A 05 F6 | 	mov	COUNT_, #7
26a58     A8 00 A0 FD | 	call	#pushregs_
26a5c     0A 1F 02 F6 | 	mov	local01, arg02
26a60     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26a64     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
26a68     09 15 02 F6 | 	mov	arg02, arg01
26a6c     10 13 02 F6 | 	mov	arg01, local02
26a70     00 16 06 F6 | 	mov	arg03, #0
26a74     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26a78     E0 B2 BF FD | 	call	#__system____getvfsforfile
26a7c     FD 22 0A F6 | 	mov	local03, result1 wz
26a80     10 00 90 AD |  if_e	jmp	#LR__3760
26a84     20 22 06 F1 | 	add	local03, #32
26a88     11 13 0A FB | 	rdlong	arg01, local03 wz
26a8c     20 22 86 F1 | 	sub	local03, #32
26a90     14 00 90 5D |  if_ne	jmp	#LR__3761
26a94                 | LR__3760
26a94     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26a98     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26a9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26aa0     01 FA 65 F6 | 	neg	result1, #1
26aa4     60 00 90 FD | 	jmp	#LR__3763
26aa8                 | LR__3761
26aa8     38 22 06 F1 | 	add	local03, #56
26aac     11 25 02 FB | 	rdlong	local04, local03
26ab0     12 27 02 F6 | 	mov	local05, local04
26ab4     13 24 46 F7 | 	zerox	local04, #19
26ab8     14 26 46 F0 | 	shr	local05, #20
26abc     02 26 66 F0 | 	shl	local05, #2
26ac0     ED 26 02 F1 | 	add	local05, __methods__
26ac4     13 27 02 FB | 	rdlong	local05, local05
26ac8     10 13 02 F6 | 	mov	arg01, local02
26acc     0F 15 02 F6 | 	mov	arg02, local01
26ad0     F2 28 02 F6 | 	mov	local06, objptr
26ad4     12 E5 01 F6 | 	mov	objptr, local04
26ad8     2D 26 62 FD | 	call	local05
26adc     14 E5 01 F6 | 	mov	objptr, local06
26ae0     FD 2A 0A F6 | 	mov	local07, result1 wz
26ae4     1C 00 90 AD |  if_e	jmp	#LR__3762
26ae8     15 13 6A F6 | 	neg	arg01, local07 wz
26aec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26af0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26af4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26af8     01 FA 65 56 |  if_ne	neg	result1, #1
26afc     00 FA 05 A6 |  if_e	mov	result1, #0
26b00     04 00 90 FD | 	jmp	#LR__3763
26b04                 | LR__3762
26b04     15 FB 01 F6 | 	mov	result1, local07
26b08                 | LR__3763
26b08     A7 F0 03 F6 | 	mov	ptra, fp
26b0c     B2 00 A0 FD | 	call	#popregs_
26b10                 | __system__mkdir_ret
26b10     2D 00 64 FD | 	ret
26b14                 | 
26b14                 | __system____getftab
26b14     0A 12 16 F2 | 	cmp	arg01, #10 wc
26b18     34 12 06 CD |  if_b	qmul	arg01, #52
26b1c     00 FA 05 36 |  if_ae	mov	result1, #0
26b20     02 00 00 CF 
26b24     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
26b28     18 FA 61 CD |  if_b	getqx	result1
26b2c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
26b30     02 00 00 CF 
26b34     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
26b38                 | __system____getftab_ret
26b38     2D 00 64 FD | 	ret
26b3c                 | 
26b3c                 | __system__strncpy
26b3c     09 01 02 F6 | 	mov	_var01, arg01
26b40                 | LR__3770
26b40     01 16 86 F1 | 	sub	arg03, #1
26b44     00 16 56 F2 | 	cmps	arg03, #0 wc
26b48     18 00 90 CD |  if_b	jmp	#LR__3771
26b4c     0A FB C1 FA | 	rdbyte	result1, arg02
26b50     00 FB 41 FC | 	wrbyte	result1, _var01
26b54     01 14 06 F1 | 	add	arg02, #1
26b58     00 FB C9 FA | 	rdbyte	result1, _var01 wz
26b5c     01 00 06 F1 | 	add	_var01, #1
26b60     DC FF 9F 5D |  if_ne	jmp	#LR__3770
26b64                 | LR__3771
26b64     97 0C 48 FB | 	callpa	#(@LR__3773-@LR__3772)>>2,fcache_load_ptr_
26b68                 | LR__3772
26b68     01 16 86 F1 | 	sub	arg03, #1
26b6c     00 16 56 F2 | 	cmps	arg03, #0 wc
26b70     00 03 02 36 |  if_ae	mov	_var02, _var01
26b74     01 00 06 31 |  if_ae	add	_var01, #1
26b78     01 01 48 3C |  if_ae	wrbyte	#0, _var02
26b7c     E8 FF 9F 3D |  if_ae	jmp	#LR__3772
26b80                 | LR__3773
26b80     09 FB 01 F6 | 	mov	result1, arg01
26b84                 | __system__strncpy_ret
26b84     2D 00 64 FD | 	ret
26b88                 | 
26b88                 | __system__strncat
26b88     00 14 4E F2 | 	cmps	arg02, #0 wz
26b8c     50 00 90 AD |  if_e	jmp	#LR__3784
26b90     01 16 16 F2 | 	cmp	arg03, #1 wc
26b94     48 00 90 CD |  if_b	jmp	#LR__3784
26b98     09 01 02 F6 | 	mov	_var01, arg01
26b9c     97 1E 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
26ba0                 | LR__3780
26ba0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
26ba4     01 00 06 51 |  if_ne	add	_var01, #1
26ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
26bac     0B 03 02 F6 | 	mov	_var02, arg03
26bb0                 | LR__3781
26bb0     0A 05 C2 FA | 	rdbyte	_var03, arg02
26bb4     02 07 02 F6 | 	mov	_var04, _var03
26bb8     07 06 4E F7 | 	zerox	_var04, #7 wz
26bbc     01 14 06 F1 | 	add	arg02, #1
26bc0     18 00 90 AD |  if_e	jmp	#LR__3783
26bc4     01 02 86 F1 | 	sub	_var02, #1
26bc8     00 02 56 F2 | 	cmps	_var02, #0 wc
26bcc     00 07 02 36 |  if_ae	mov	_var04, _var01
26bd0     01 00 06 31 |  if_ae	add	_var01, #1
26bd4     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
26bd8     D4 FF 9F 3D |  if_ae	jmp	#LR__3781
26bdc                 | LR__3782
26bdc                 | LR__3783
26bdc     00 01 48 FC | 	wrbyte	#0, _var01
26be0                 | LR__3784
26be0     09 FB 01 F6 | 	mov	result1, arg01
26be4                 | __system__strncat_ret
26be4     2D 00 64 FD | 	ret
26be8                 | 
26be8                 | __system__strncmp
26be8     09 01 0A F6 | 	mov	_var01, arg01 wz
26bec     14 00 90 5D |  if_ne	jmp	#LR__3790
26bf0     00 14 0E F2 | 	cmp	arg02, #0 wz
26bf4     01 02 66 56 |  if_ne	neg	_var02, #1
26bf8     00 02 06 A6 |  if_e	mov	_var02, #0
26bfc     01 FB 01 F6 | 	mov	result1, _var02
26c00     74 00 90 FD | 	jmp	#__system__strncmp_ret
26c04                 | LR__3790
26c04     00 14 0E F2 | 	cmp	arg02, #0 wz
26c08     01 FA 05 A6 |  if_e	mov	result1, #1
26c0c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26c10     0B 05 02 F6 | 	mov	_var03, arg03
26c14     97 16 48 FB | 	callpa	#(@LR__3792-@LR__3791)>>2,fcache_load_ptr_
26c18                 | LR__3791
26c18     00 07 C2 FA | 	rdbyte	_var04, _var01
26c1c     0A 09 02 F6 | 	mov	_var05, arg02
26c20     04 0B C2 FA | 	rdbyte	_var06, _var05
26c24     01 04 86 F1 | 	sub	_var03, #1
26c28     00 04 56 F2 | 	cmps	_var03, #0 wc
26c2c     01 00 06 F1 | 	add	_var01, #1
26c30     01 14 06 F1 | 	add	arg02, #1
26c34     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
26c38     08 00 90 2D |  if_nc_and_z	jmp	#LR__3793
26c3c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
26c40     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3791
26c44                 | LR__3792
26c44                 | LR__3793
26c44     00 04 56 F2 | 	cmps	_var03, #0 wc
26c48     00 FA 05 C6 |  if_b	mov	result1, #0
26c4c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
26c50     05 07 0A F2 | 	cmp	_var04, _var06 wz
26c54     00 FA 05 A6 |  if_e	mov	result1, #0
26c58     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26c5c     00 06 0E F2 | 	cmp	_var04, #0 wz
26c60     01 FA 65 A6 |  if_e	neg	result1, #1
26c64     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26c68     00 0A 0E F2 | 	cmp	_var06, #0 wz
26c6c     01 FA 05 A6 |  if_e	mov	result1, #1
26c70     03 FB 01 56 |  if_ne	mov	result1, _var04
26c74     05 FB 81 51 |  if_ne	sub	result1, _var06
26c78                 | __system__strncmp_ret
26c78     2D 00 64 FD | 	ret
26c7c                 | 
26c7c                 | __system____root_opendir
26c7c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26c80     04 12 06 F1 | 	add	arg01, #4
26c84     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
26c88     00 FA 05 F6 | 	mov	result1, #0
26c8c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26c90                 | __system____root_opendir_ret
26c90     2D 00 64 FD | 	ret
26c94                 | 
26c94                 | __system____root_readdir
26c94     03 4A 05 F6 | 	mov	COUNT_, #3
26c98     A8 00 A0 FD | 	call	#pushregs_
26c9c     09 1F 02 F6 | 	mov	local01, arg01
26ca0     0A 21 02 F6 | 	mov	local02, arg02
26ca4     04 1E 06 F1 | 	add	local01, #4
26ca8     0F 23 02 FB | 	rdlong	local03, local01
26cac     04 1E 86 F1 | 	sub	local01, #4
26cb0                 | LR__3800
26cb0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26cb4     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
26cb8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26cbc     01 FA 65 A6 |  if_e	neg	result1, #1
26cc0     48 00 90 AD |  if_e	jmp	#LR__3801
26cc4     11 17 0A FB | 	rdlong	arg03, local03 wz
26cc8     04 22 06 A1 |  if_e	add	local03, #4
26ccc     E0 FF 9F AD |  if_e	jmp	#LR__3800
26cd0     11 15 02 FB | 	rdlong	arg02, local03
26cd4     01 14 06 F1 | 	add	arg02, #1
26cd8     10 13 02 F6 | 	mov	arg01, local02
26cdc     40 16 06 F6 | 	mov	arg03, #64
26ce0     58 FE BF FD | 	call	#__system__strncpy
26ce4     50 20 06 F1 | 	add	local02, #80
26ce8     10 03 48 FC | 	wrbyte	#1, local02
26cec     08 20 86 F1 | 	sub	local02, #8
26cf0     10 01 68 FC | 	wrlong	#0, local02
26cf4     04 20 06 F1 | 	add	local02, #4
26cf8     10 01 68 FC | 	wrlong	#0, local02
26cfc     04 22 06 F1 | 	add	local03, #4
26d00     04 1E 06 F1 | 	add	local01, #4
26d04     0F 23 62 FC | 	wrlong	local03, local01
26d08     00 FA 05 F6 | 	mov	result1, #0
26d0c                 | LR__3801
26d0c     A7 F0 03 F6 | 	mov	ptra, fp
26d10     B2 00 A0 FD | 	call	#popregs_
26d14                 | __system____root_readdir_ret
26d14     2D 00 64 FD | 	ret
26d18                 | 
26d18                 | __system____root_closedir
26d18     00 FA 05 F6 | 	mov	result1, #0
26d1c                 | __system____root_closedir_ret
26d1c     2D 00 64 FD | 	ret
26d20                 | 
26d20                 | __system____root_stat
26d20     0A 01 02 F6 | 	mov	_var01, arg02
26d24     00 13 02 F6 | 	mov	arg01, _var01
26d28     00 14 06 F6 | 	mov	arg02, #0
26d2c     30 16 06 F6 | 	mov	arg03, #48
26d30     98 00 A0 FD | 	call	#\builtin_bytefill_
26d34     08 00 06 F1 | 	add	_var01, #8
26d38     08 00 80 FF 
26d3c     00 FF 6B FC | 	wrlong	##4607, _var01
26d40     00 FA 05 F6 | 	mov	result1, #0
26d44                 | __system____root_stat_ret
26d44     2D 00 64 FD | 	ret
26d48                 | 
26d48                 | __system___normalizeName
26d48     00 00 06 F6 | 	mov	_var01, #0
26d4c     09 03 02 F6 | 	mov	_var02, arg01
26d50     01 05 02 F6 | 	mov	_var03, _var02
26d54                 | LR__3810
26d54     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26d58     5C 01 90 AD |  if_e	jmp	#LR__3829
26d5c     00 00 0E F2 | 	cmp	_var01, #0 wz
26d60     02 07 02 56 |  if_ne	mov	_var04, _var03
26d64     01 04 06 51 |  if_ne	add	_var03, #1
26d68     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
26d6c     00 00 06 56 |  if_ne	mov	_var01, #0
26d70     01 07 C2 FA | 	rdbyte	_var04, _var02
26d74     2E 06 0E F2 | 	cmp	_var04, #46 wz
26d78     D8 00 90 5D |  if_ne	jmp	#LR__3822
26d7c     01 02 06 F1 | 	add	_var02, #1
26d80     01 07 C2 FA | 	rdbyte	_var04, _var02
26d84     01 02 86 F1 | 	sub	_var02, #1
26d88     2F 06 0E F2 | 	cmp	_var04, #47 wz
26d8c     18 00 90 AD |  if_e	jmp	#LR__3811
26d90     01 02 06 F1 | 	add	_var02, #1
26d94     01 09 C2 FA | 	rdbyte	_var05, _var02
26d98     01 02 86 F1 | 	sub	_var02, #1
26d9c     04 0B 02 F6 | 	mov	_var06, _var05
26da0     07 0A 4E F7 | 	zerox	_var06, #7 wz
26da4     10 00 90 5D |  if_ne	jmp	#LR__3812
26da8                 | LR__3811
26da8     01 0D 02 F6 | 	mov	_var07, _var02
26dac     01 0C 06 F1 | 	add	_var07, #1
26db0     06 03 02 F6 | 	mov	_var02, _var07
26db4     E0 00 90 FD | 	jmp	#LR__3826
26db8                 | LR__3812
26db8     01 02 06 F1 | 	add	_var02, #1
26dbc     01 0D C2 FA | 	rdbyte	_var07, _var02
26dc0     01 02 86 F1 | 	sub	_var02, #1
26dc4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26dc8     2E 06 0E F2 | 	cmp	_var04, #46 wz
26dcc     84 00 90 5D |  if_ne	jmp	#LR__3821
26dd0     02 02 06 F1 | 	add	_var02, #2
26dd4     01 0D C2 FA | 	rdbyte	_var07, _var02
26dd8     02 02 86 F1 | 	sub	_var02, #2
26ddc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26de0     2F 06 0E F2 | 	cmp	_var04, #47 wz
26de4     18 00 90 AD |  if_e	jmp	#LR__3813
26de8     02 02 06 F1 | 	add	_var02, #2
26dec     01 09 C2 FA | 	rdbyte	_var05, _var02
26df0     02 02 86 F1 | 	sub	_var02, #2
26df4     04 0B 02 F6 | 	mov	_var06, _var05
26df8     07 0A 4E F7 | 	zerox	_var06, #7 wz
26dfc     54 00 90 5D |  if_ne	jmp	#LR__3820
26e00                 | LR__3813
26e00     02 02 06 F1 | 	add	_var02, #2
26e04     09 05 5A F2 | 	cmps	_var03, arg01 wcz
26e08     40 00 90 ED |  if_be	jmp	#LR__3819
26e0c     02 0F 02 F6 | 	mov	_var08, _var03
26e10     01 0E 86 F1 | 	sub	_var08, #1
26e14                 | LR__3814
26e14     07 07 C2 FA | 	rdbyte	_var04, _var08
26e18     2F 06 0E F2 | 	cmp	_var04, #47 wz
26e1c     0C 00 90 5D |  if_ne	jmp	#LR__3815
26e20     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26e24     01 0E 86 11 |  if_a	sub	_var08, #1
26e28     E8 FF 9F 1D |  if_a	jmp	#LR__3814
26e2c                 | LR__3815
26e2c     97 0C 48 FB | 	callpa	#(@LR__3817-@LR__3816)>>2,fcache_load_ptr_
26e30                 | LR__3816
26e30     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26e34     10 00 90 ED |  if_be	jmp	#LR__3818
26e38     07 07 C2 FA | 	rdbyte	_var04, _var08
26e3c     2F 06 0E F2 | 	cmp	_var04, #47 wz
26e40     01 0E 86 51 |  if_ne	sub	_var08, #1
26e44     E8 FF 9F 5D |  if_ne	jmp	#LR__3816
26e48                 | LR__3817
26e48                 | LR__3818
26e48     07 05 02 F6 | 	mov	_var03, _var08
26e4c                 | LR__3819
26e4c     01 00 06 F6 | 	mov	_var01, #1
26e50     44 00 90 FD | 	jmp	#LR__3826
26e54                 | LR__3820
26e54                 | LR__3821
26e54                 | LR__3822
26e54     97 18 48 FB | 	callpa	#(@LR__3824-@LR__3823)>>2,fcache_load_ptr_
26e58                 | LR__3823
26e58     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26e5c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
26e60     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
26e64     20 00 90 AD |  if_e	jmp	#LR__3825
26e68     01 0B 02 F6 | 	mov	_var06, _var02
26e6c     01 09 02 F6 | 	mov	_var05, _var02
26e70     01 08 06 F1 | 	add	_var05, #1
26e74     05 11 C2 FA | 	rdbyte	_var09, _var06
26e78     04 03 02 F6 | 	mov	_var02, _var05
26e7c     02 11 42 FC | 	wrbyte	_var09, _var03
26e80     01 04 06 F1 | 	add	_var03, #1
26e84     D0 FF 9F FD | 	jmp	#LR__3823
26e88                 | LR__3824
26e88                 | LR__3825
26e88     01 07 C2 FA | 	rdbyte	_var04, _var02
26e8c     2F 06 0E F2 | 	cmp	_var04, #47 wz
26e90     C0 FE 9F 5D |  if_ne	jmp	#LR__3810
26e94     01 00 06 F6 | 	mov	_var01, #1
26e98                 | LR__3826
26e98     97 0C 48 FB | 	callpa	#(@LR__3828-@LR__3827)>>2,fcache_load_ptr_
26e9c                 | LR__3827
26e9c     01 07 C2 FA | 	rdbyte	_var04, _var02
26ea0     2F 06 0E F2 | 	cmp	_var04, #47 wz
26ea4     01 0D 02 A6 |  if_e	mov	_var07, _var02
26ea8     01 0C 06 A1 |  if_e	add	_var07, #1
26eac     06 03 02 A6 |  if_e	mov	_var02, _var07
26eb0     E8 FF 9F AD |  if_e	jmp	#LR__3827
26eb4                 | LR__3828
26eb4     9C FE 9F FD | 	jmp	#LR__3810
26eb8                 | LR__3829
26eb8     02 01 48 FC | 	wrbyte	#0, _var03
26ebc                 | __system___normalizeName_ret
26ebc     2D 00 64 FD | 	ret
26ec0                 | 
26ec0                 | __system___strrev
26ec0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
26ec4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
26ec8     09 03 02 F6 | 	mov	_var02, arg01
26ecc     97 1A 48 FB | 	callpa	#(@LR__3832-@LR__3830)>>2,fcache_load_ptr_
26ed0                 | LR__3830
26ed0     01 01 CA FA | 	rdbyte	_var01, _var02 wz
26ed4     01 02 06 51 |  if_ne	add	_var02, #1
26ed8     F4 FF 9F 5D |  if_ne	jmp	#LR__3830
26edc     01 02 86 F1 | 	sub	_var02, #1
26ee0                 | LR__3831
26ee0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
26ee4     1C 00 90 ED |  if_be	jmp	#LR__3833
26ee8     09 01 C2 FA | 	rdbyte	_var01, arg01
26eec     01 05 C2 FA | 	rdbyte	_var03, _var02
26ef0     09 05 42 FC | 	wrbyte	_var03, arg01
26ef4     01 01 42 FC | 	wrbyte	_var01, _var02
26ef8     01 12 06 F1 | 	add	arg01, #1
26efc     01 02 86 F1 | 	sub	_var02, #1
26f00     DC FF 9F FD | 	jmp	#LR__3831
26f04                 | LR__3832
26f04                 | LR__3833
26f04                 | __system___strrev_ret
26f04     2D 00 64 FD | 	ret
26f08                 | 
26f08                 | __system___fmtpad
26f08     06 4A 05 F6 | 	mov	COUNT_, #6
26f0c     A8 00 A0 FD | 	call	#pushregs_
26f10     09 1F 02 F6 | 	mov	local01, arg01
26f14     0A 21 02 F6 | 	mov	local02, arg02
26f18     0B 23 02 F6 | 	mov	local03, arg03
26f1c     10 13 EA F8 | 	getbyte	arg01, local02, #1
26f20     16 20 46 F0 | 	shr	local02, #22
26f24     03 20 0E F5 | 	and	local02, #3 wz
26f28     00 24 06 F6 | 	mov	local04, #0
26f2c     01 20 06 A6 |  if_e	mov	local02, #1
26f30     0C 21 CA F7 | 	test	local02, arg04 wz
26f34     00 FA 05 A6 |  if_e	mov	result1, #0
26f38     88 00 90 AD |  if_e	jmp	#LR__3843
26f3c     09 23 C2 F2 | 	subr	local03, arg01
26f40     01 22 56 F2 | 	cmps	local03, #1 wc
26f44     00 FA 05 C6 |  if_b	mov	result1, #0
26f48     78 00 90 CD |  if_b	jmp	#LR__3843
26f4c     03 20 0E F2 | 	cmp	local02, #3 wz
26f50     18 00 90 5D |  if_ne	jmp	#LR__3840
26f54     01 18 0E F2 | 	cmp	arg04, #1 wz
26f58     6E 20 62 FD | 	wrz	local02
26f5c     10 23 02 F1 | 	add	local03, local02
26f60     11 23 52 F6 | 	abs	local03, local03 wc
26f64     01 22 46 F0 | 	shr	local03, #1
26f68     11 23 82 F6 | 	negc	local03, local03
26f6c                 | LR__3840
26f6c     01 22 56 F2 | 	cmps	local03, #1 wc
26f70     4C 00 90 CD |  if_b	jmp	#LR__3842
26f74     11 27 02 F6 | 	mov	local05, local03
26f78                 | LR__3841
26f78     0F 21 02 F6 | 	mov	local02, local01
26f7c     0F 29 02 F6 | 	mov	local06, local01
26f80     13 20 46 F7 | 	zerox	local02, #19
26f84     14 28 46 F0 | 	shr	local06, #20
26f88     02 28 66 F0 | 	shl	local06, #2
26f8c     ED 28 02 F1 | 	add	local06, __methods__
26f90     14 29 02 FB | 	rdlong	local06, local06
26f94     20 12 06 F6 | 	mov	arg01, #32
26f98     F2 22 02 F6 | 	mov	local03, objptr
26f9c     10 E5 01 F6 | 	mov	objptr, local02
26fa0     2D 28 62 FD | 	call	local06
26fa4     11 E5 01 F6 | 	mov	objptr, local03
26fa8     FD 28 02 F6 | 	mov	local06, result1
26fac     00 28 56 F2 | 	cmps	local06, #0 wc
26fb0     14 FB 01 C6 |  if_b	mov	result1, local06
26fb4     0C 00 90 CD |  if_b	jmp	#LR__3843
26fb8     14 25 02 F1 | 	add	local04, local06
26fbc     EE 27 6E FB | 	djnz	local05, #LR__3841
26fc0                 | LR__3842
26fc0     12 FB 01 F6 | 	mov	result1, local04
26fc4                 | LR__3843
26fc4     A7 F0 03 F6 | 	mov	ptra, fp
26fc8     B2 00 A0 FD | 	call	#popregs_
26fcc                 | __system___fmtpad_ret
26fcc     2D 00 64 FD | 	ret
26fd0                 | 
26fd0                 | __system___uitoa
26fd0     04 4A 05 F6 | 	mov	COUNT_, #4
26fd4     A8 00 A0 FD | 	call	#pushregs_
26fd8     09 1F 02 F6 | 	mov	local01, arg01
26fdc     00 1A 4E F2 | 	cmps	arg05, #0 wz
26fe0     0F 1B 02 F6 | 	mov	arg05, local01
26fe4     00 20 06 F6 | 	mov	local02, #0
26fe8     37 22 06 56 |  if_ne	mov	local03, #55
26fec     57 22 06 A6 |  if_e	mov	local03, #87
26ff0                 | LR__3850
26ff0     0B 15 12 FD | 	qdiv	arg02, arg03
26ff4     19 24 62 FD | 	getqy	local04
26ff8     0B 15 12 FD | 	qdiv	arg02, arg03
26ffc     0A 24 16 F2 | 	cmp	local04, #10 wc
27000     30 24 06 C1 |  if_b	add	local04, #48
27004     11 25 02 31 |  if_ae	add	local04, local03
27008     0D 25 42 FC | 	wrbyte	local04, arg05
2700c     01 1A 06 F1 | 	add	arg05, #1
27010     01 20 06 F1 | 	add	local02, #1
27014     18 14 62 FD | 	getqx	arg02
27018     00 14 0E F2 | 	cmp	arg02, #0 wz
2701c     D0 FF 9F 5D |  if_ne	jmp	#LR__3850
27020     0C 21 12 F2 | 	cmp	local02, arg04 wc
27024     C8 FF 9F CD |  if_b	jmp	#LR__3850
27028     0D 01 48 FC | 	wrbyte	#0, arg05
2702c     0F 13 02 F6 | 	mov	arg01, local01
27030     8C FE BF FD | 	call	#__system___strrev
27034     10 FB 01 F6 | 	mov	result1, local02
27038     A7 F0 03 F6 | 	mov	ptra, fp
2703c     B2 00 A0 FD | 	call	#popregs_
27040                 | __system___uitoa_ret
27040     2D 00 64 FD | 	ret
27044                 | 
27044                 | __system__disassemble_0528
27044     10 4A 05 F6 | 	mov	COUNT_, #16
27048     A8 00 A0 FD | 	call	#pushregs_
2704c     09 1F 02 F6 | 	mov	local01, arg01
27050     0A 21 02 F6 | 	mov	local02, arg02
27054     0B 23 02 F6 | 	mov	local03, arg03
27058     0C 25 02 F6 | 	mov	local04, arg04
2705c     0D 27 02 F6 | 	mov	local05, arg05
27060     13 13 52 F6 | 	abs	arg01, local05 wc
27064     1F 28 C6 C9 |  if_b	decod	local06, #31
27068     00 28 06 36 |  if_ae	mov	local06, #0
2706c     0C CF BF FD | 	call	#__system___float_fromuns
27070     14 FB 61 F5 | 	xor	result1, local06
27074     FD 2A 02 F6 | 	mov	local07, result1
27078     00 2C 06 F6 | 	mov	local08, #0
2707c     0F 13 02 F6 | 	mov	arg01, local01
27080     00 14 06 F6 | 	mov	arg02, #0
27084     01 16 06 F6 | 	mov	arg03, #1
27088     28 D7 BF FD | 	call	#__system___float_cmp
2708c     00 FA 0D F2 | 	cmp	result1, #0 wz
27090     00 2E 06 A6 |  if_e	mov	local09, #0
27094     10 01 68 AC |  if_e	wrlong	#0, local02
27098     11 2F 62 AC |  if_e	wrlong	local09, local03
2709c     8C 01 90 AD |  if_e	jmp	#LR__3872
270a0     0F 13 02 F6 | 	mov	arg01, local01
270a4     FC DB BF FD | 	call	#__system____builtin_ilogb
270a8     FD 30 02 F6 | 	mov	local10, result1
270ac     0A 26 0E F2 | 	cmp	local05, #10 wz
270b0     24 00 90 5D |  if_ne	jmp	#LR__3860
270b4     18 2F 02 F6 | 	mov	local09, local10
270b8     01 2E 66 F0 | 	shl	local09, #1
270bc     18 2F 02 F1 | 	add	local09, local10
270c0     17 31 52 F6 | 	abs	local10, local09 wc
270c4     0A 30 16 FD | 	qdiv	local10, #10
270c8     09 32 06 F6 | 	mov	local11, #9
270cc     18 30 62 FD | 	getqx	local10
270d0     18 31 82 F6 | 	negc	local10, local10
270d4     04 00 90 FD | 	jmp	#LR__3861
270d8                 | LR__3860
270d8     18 32 06 F6 | 	mov	local11, #24
270dc                 | LR__3861
270dc                 | LR__3862
270dc     08 2C 56 F2 | 	cmps	local08, #8 wc
270e0     01 2C 06 F1 | 	add	local08, #1
270e4     60 00 90 3D |  if_ae	jmp	#LR__3863
270e8     00 C0 1F FF 
270ec     00 12 06 F6 | 	mov	arg01, ##1065353216
270f0     15 15 02 F6 | 	mov	arg02, local07
270f4     18 17 02 F6 | 	mov	arg03, local10
270f8     8C E2 BF FD | 	call	#__system___float_pow_n
270fc     FD 14 02 F6 | 	mov	arg02, result1
27100     0F 13 02 F6 | 	mov	arg01, local01
27104     7C D4 BF FD | 	call	#__system___float_div
27108     FD 34 02 F6 | 	mov	local12, result1
2710c     1A 13 02 F6 | 	mov	arg01, local12
27110     00 C0 1F FF 
27114     00 14 06 F6 | 	mov	arg02, ##1065353216
27118     01 16 06 F6 | 	mov	arg03, #1
2711c     94 D6 BF FD | 	call	#__system___float_cmp
27120     00 FA 55 F2 | 	cmps	result1, #0 wc
27124     01 30 86 C1 |  if_b	sub	local10, #1
27128     B0 FF 9F CD |  if_b	jmp	#LR__3862
2712c     15 15 02 F6 | 	mov	arg02, local07
27130     1A 13 02 F6 | 	mov	arg01, local12
27134     01 16 66 F6 | 	neg	arg03, #1
27138     78 D6 BF FD | 	call	#__system___float_cmp
2713c     00 FA 55 F2 | 	cmps	result1, #0 wc
27140     01 30 06 31 |  if_ae	add	local10, #1
27144     94 FF 9F 3D |  if_ae	jmp	#LR__3862
27148                 | LR__3863
27148     1A 13 02 F6 | 	mov	arg01, local12
2714c     54 DB BF FD | 	call	#__system____builtin_ilogb
27150     FD 36 02 F6 | 	mov	local13, result1
27154     1A 39 02 F6 | 	mov	local14, local12
27158     17 39 06 F4 | 	bitl	local14, #279
2715c     17 38 26 F4 | 	bith	local14, #23
27160     1B 39 62 F0 | 	shl	local14, local13
27164     02 26 0E F2 | 	cmp	local05, #2 wz
27168     02 24 66 A0 |  if_e	shl	local04, #2
2716c     00 3A 06 F6 | 	mov	local15, #0
27170     00 24 56 F2 | 	cmps	local04, #0 wc
27174     10 00 90 3D |  if_ae	jmp	#LR__3864
27178     18 25 C2 F2 | 	subr	local04, local10
2717c     00 24 56 F2 | 	cmps	local04, #0 wc
27180     A0 00 90 CD |  if_b	jmp	#LR__3871
27184     04 00 90 FD | 	jmp	#LR__3865
27188                 | LR__3864
27188     01 24 06 F1 | 	add	local04, #1
2718c                 | LR__3865
2718c     19 25 7A F3 | 	fles	local04, local11 wcz
27190     01 3C 06 F6 | 	mov	local16, #1
27194     97 22 48 FB | 	callpa	#(@LR__3867-@LR__3866)>>2,fcache_load_ptr_
27198                 | LR__3866
27198     00 40 00 FF 
2719c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
271a0     38 00 90 3D |  if_ae	jmp	#LR__3868
271a4     01 24 56 F2 | 	cmps	local04, #1 wc
271a8     01 24 86 F1 | 	sub	local04, #1
271ac     2C 00 90 CD |  if_b	jmp	#LR__3868
271b0     13 3B 02 FD | 	qmul	local15, local05
271b4     1C 37 02 F6 | 	mov	local13, local14
271b8     17 36 46 F0 | 	shr	local13, #23
271bc     17 39 06 F4 | 	bitl	local14, #279
271c0     18 3A 62 FD | 	getqx	local15
271c4     13 3D 02 FD | 	qmul	local16, local05
271c8     18 3C 62 FD | 	getqx	local16
271cc     13 39 02 FD | 	qmul	local14, local05
271d0     1B 3B 02 F1 | 	add	local15, local13
271d4     18 38 62 FD | 	getqx	local14
271d8     BC FF 9F FD | 	jmp	#LR__3866
271dc                 | LR__3867
271dc                 | LR__3868
271dc     13 2F 02 F6 | 	mov	local09, local05
271e0     17 2E 66 F0 | 	shl	local09, #23
271e4     17 37 52 F6 | 	abs	local13, local09 wc
271e8     01 36 46 F0 | 	shr	local13, #1
271ec     1B 37 82 F6 | 	negc	local13, local13
271f0     1B 39 1A F2 | 	cmp	local14, local13 wcz
271f4     20 00 90 1D |  if_a	jmp	#LR__3869
271f8     17 26 66 F0 | 	shl	local05, #23
271fc     13 37 52 F6 | 	abs	local13, local05 wc
27200     01 36 46 F0 | 	shr	local13, #1
27204     1B 37 82 F6 | 	negc	local13, local13
27208     1B 39 0A F2 | 	cmp	local14, local13 wz
2720c     14 00 90 5D |  if_ne	jmp	#LR__3870
27210     01 3A CE F7 | 	test	local15, #1 wz
27214     0C 00 90 AD |  if_e	jmp	#LR__3870
27218                 | LR__3869
27218     01 3A 06 F1 | 	add	local15, #1
2721c     1E 3B 0A F2 | 	cmp	local15, local16 wz
27220     01 30 06 A1 |  if_e	add	local10, #1
27224                 | LR__3870
27224                 | LR__3871
27224     10 3B 62 FC | 	wrlong	local15, local02
27228     11 31 62 FC | 	wrlong	local10, local03
2722c                 | LR__3872
2722c     A7 F0 03 F6 | 	mov	ptra, fp
27230     B2 00 A0 FD | 	call	#popregs_
27234                 | __system__disassemble_0528_ret
27234     2D 00 64 FD | 	ret
27238                 | 
27238                 | __system__emitsign_0530
27238     00 FA 05 F6 | 	mov	result1, #0
2723c     00 14 0E F2 | 	cmp	arg02, #0 wz
27240     09 01 02 56 |  if_ne	mov	_var01, arg01
27244     01 12 06 51 |  if_ne	add	arg01, #1
27248     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2724c     01 FA 05 56 |  if_ne	mov	result1, #1
27250     00 16 0E F2 | 	cmp	arg03, #0 wz
27254     09 61 48 5C |  if_ne	wrbyte	#48, arg01
27258     01 12 06 51 |  if_ne	add	arg01, #1
2725c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
27260     02 FA 05 51 |  if_ne	add	result1, #2
27264                 | __system__emitsign_0530_ret
27264     2D 00 64 FD | 	ret
27268                 | 
27268                 | __system___gettxfunc
27268     01 4A 05 F6 | 	mov	COUNT_, #1
2726c     A8 00 A0 FD | 	call	#pushregs_
27270     A0 F8 BF FD | 	call	#__system____getftab
27274     FD 1E 0A F6 | 	mov	local01, result1 wz
27278     10 00 90 AD |  if_e	jmp	#LR__3880
2727c     08 1E 06 F1 | 	add	local01, #8
27280     0F 15 0A FB | 	rdlong	arg02, local01 wz
27284     08 1E 86 F1 | 	sub	local01, #8
27288     08 00 90 5D |  if_ne	jmp	#LR__3881
2728c                 | LR__3880
2728c     00 FA 05 F6 | 	mov	result1, #0
27290     0C 00 90 FD | 	jmp	#LR__3882
27294                 | LR__3881
27294     00 A8 04 FF 
27298     00 1E 46 F5 | 	or	local01, ##156237824
2729c     0F FB 01 F6 | 	mov	result1, local01
272a0                 | LR__3882
272a0     A7 F0 03 F6 | 	mov	ptra, fp
272a4     B2 00 A0 FD | 	call	#popregs_
272a8                 | __system___gettxfunc_ret
272a8     2D 00 64 FD | 	ret
272ac                 | 
272ac                 | __system___getrxfunc
272ac     01 4A 05 F6 | 	mov	COUNT_, #1
272b0     A8 00 A0 FD | 	call	#pushregs_
272b4     5C F8 BF FD | 	call	#__system____getftab
272b8     FD 1E 0A F6 | 	mov	local01, result1 wz
272bc     10 00 90 AD |  if_e	jmp	#LR__3890
272c0     08 1E 06 F1 | 	add	local01, #8
272c4     0F 15 0A FB | 	rdlong	arg02, local01 wz
272c8     08 1E 86 F1 | 	sub	local01, #8
272cc     08 00 90 5D |  if_ne	jmp	#LR__3891
272d0                 | LR__3890
272d0     00 FA 05 F6 | 	mov	result1, #0
272d4     0C 00 90 FD | 	jmp	#LR__3892
272d8                 | LR__3891
272d8     00 B0 04 FF 
272dc     00 1E 46 F5 | 	or	local01, ##157286400
272e0     0F FB 01 F6 | 	mov	result1, local01
272e4                 | LR__3892
272e4     A7 F0 03 F6 | 	mov	ptra, fp
272e8     B2 00 A0 FD | 	call	#popregs_
272ec                 | __system___getrxfunc_ret
272ec     2D 00 64 FD | 	ret
272f0                 | 
272f0                 | __system___getiolock_0570
272f0     01 4A 05 F6 | 	mov	COUNT_, #1
272f4     A8 00 A0 FD | 	call	#pushregs_
272f8     18 F8 BF FD | 	call	#__system____getftab
272fc     FD 1E 0A F6 | 	mov	local01, result1 wz
27300     10 00 90 AD |  if_e	jmp	#LR__3900
27304     08 1E 06 F1 | 	add	local01, #8
27308     0F FB 09 FB | 	rdlong	result1, local01 wz
2730c     08 1E 86 F1 | 	sub	local01, #8
27310     18 00 90 5D |  if_ne	jmp	#LR__3901
27314                 | LR__3900
27314     01 00 00 FF 
27318     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2731c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27320     01 00 00 FF 
27324     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
27328     08 00 90 FD | 	jmp	#LR__3902
2732c                 | LR__3901
2732c     0C 1E 06 F1 | 	add	local01, #12
27330     0F FB 01 F6 | 	mov	result1, local01
27334                 | LR__3902
27334     A7 F0 03 F6 | 	mov	ptra, fp
27338     B2 00 A0 FD | 	call	#popregs_
2733c                 | __system___getiolock_0570_ret
2733c     2D 00 64 FD | 	ret
27340                 | 
27340                 | __system____ScanForChar
27340     09 01 02 F6 | 	mov	_var01, arg01
27344     09 03 02 F6 | 	mov	_var02, arg01
27348     97 06 48 FB | 	callpa	#(@LR__3911-@LR__3910)>>2,fcache_load_ptr_
2734c                 | LR__3910
2734c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
27350     01 02 06 51 |  if_ne	add	_var02, #1
27354     F4 FF 9F 5D |  if_ne	jmp	#LR__3910
27358                 | LR__3911
27358     09 03 82 F1 | 	sub	_var02, arg01
2735c     01 FB 01 F6 | 	mov	result1, _var02
27360     FD 12 0A F6 | 	mov	arg01, result1 wz
27364     00 FA 05 A6 |  if_e	mov	result1, #0
27368     B8 00 90 AD |  if_e	jmp	#LR__3918
2736c     0A 05 02 F6 | 	mov	_var03, arg02
27370     07 04 4E F7 | 	zerox	_var03, #7 wz
27374     00 FA 05 A6 |  if_e	mov	result1, #0
27378     A8 00 90 AD |  if_e	jmp	#LR__3918
2737c     01 16 16 F2 | 	cmp	arg03, #1 wc
27380     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
27384     01 16 06 86 |  if_c_and_z	mov	arg03, #1
27388     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2738c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3918
27390     09 17 1A F2 | 	cmp	arg03, arg01 wcz
27394     10 00 90 ED |  if_be	jmp	#LR__3912
27398     00 18 0E F2 | 	cmp	arg04, #0 wz
2739c     00 FA 05 A6 |  if_e	mov	result1, #0
273a0     80 00 90 AD |  if_e	jmp	#LR__3918
273a4     09 17 02 F6 | 	mov	arg03, arg01
273a8                 | LR__3912
273a8     01 16 86 F1 | 	sub	arg03, #1
273ac     00 18 0E F2 | 	cmp	arg04, #0 wz
273b0     38 00 90 5D |  if_ne	jmp	#LR__3914
273b4     0B 07 02 F6 | 	mov	_var04, arg03
273b8     09 09 02 F6 | 	mov	_var05, arg01
273bc                 | LR__3913
273bc     04 07 12 F2 | 	cmp	_var04, _var05 wc
273c0     5C 00 90 3D |  if_ae	jmp	#LR__3917
273c4     03 05 02 F6 | 	mov	_var03, _var04
273c8     00 05 02 F1 | 	add	_var03, _var01
273cc     02 05 C2 FA | 	rdbyte	_var03, _var03
273d0     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
273d4     0C 05 0A F2 | 	cmp	_var03, arg04 wz
273d8     01 06 06 A1 |  if_e	add	_var04, #1
273dc     03 FB 01 A6 |  if_e	mov	result1, _var04
273e0     40 00 90 AD |  if_e	jmp	#LR__3918
273e4     01 06 06 F1 | 	add	_var04, #1
273e8     D0 FF 9F FD | 	jmp	#LR__3913
273ec                 | LR__3914
273ec     0B 07 02 F6 | 	mov	_var04, arg03
273f0                 | LR__3915
273f0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
273f4     28 00 90 1D |  if_a	jmp	#LR__3916
273f8     03 09 02 F6 | 	mov	_var05, _var04
273fc     00 09 02 F1 | 	add	_var05, _var01
27400     04 05 C2 FA | 	rdbyte	_var03, _var05
27404     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
27408     04 05 0A F2 | 	cmp	_var03, _var05 wz
2740c     01 06 06 A1 |  if_e	add	_var04, #1
27410     03 FB 01 A6 |  if_e	mov	result1, _var04
27414     0C 00 90 AD |  if_e	jmp	#LR__3918
27418     01 06 86 F1 | 	sub	_var04, #1
2741c     D0 FF 9F FD | 	jmp	#LR__3915
27420                 | LR__3916
27420                 | LR__3917
27420     00 FA 05 F6 | 	mov	result1, #0
27424                 | LR__3918
27424                 | __system____ScanForChar_ret
27424     2D 00 64 FD | 	ret
27428                 | 
27428                 | __system___basic_dir
27428     05 4A 05 F6 | 	mov	COUNT_, #5
2742c     A8 00 A0 FD | 	call	#pushregs_
27430     4C F0 07 F1 | 	add	ptra, #76
27434     04 4E 05 F1 | 	add	fp, #4
27438     A7 12 62 FC | 	wrlong	arg01, fp
2743c     04 4E 05 F1 | 	add	fp, #4
27440     A7 14 62 FC | 	wrlong	arg02, fp
27444     04 4E 85 F1 | 	sub	fp, #4
27448     A7 14 0A FB | 	rdlong	arg02, fp wz
2744c     04 4E 85 F1 | 	sub	fp, #4
27450     04 4E 05 51 |  if_ne	add	fp, #4
27454     A7 1E 02 5B |  if_ne	rdlong	local01, fp
27458     04 4E 85 51 |  if_ne	sub	fp, #4
2745c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
27460     70 00 90 AD |  if_e	jmp	#LR__3920
27464     03 00 00 FF 
27468     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2746c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27470     03 00 00 FF 
27474     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27478     03 00 00 5F 
2747c     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
27480     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
27484     03 00 00 5F 
27488     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2748c     18 E9 BF 5D |  if_ne	call	#__system__closedir
27490     88 01 00 FF 
27494     40 13 06 F6 | 	mov	arg01, ##@LR__5088
27498     20 E8 BF FD | 	call	#__system__opendir
2749c     03 00 00 FF 
274a0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
274a4     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
274a8     08 4E 05 F1 | 	add	fp, #8
274ac     A7 20 02 FB | 	rdlong	local02, fp
274b0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
274b4     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
274b8     04 4E 85 F1 | 	sub	fp, #4
274bc     A7 20 02 FB | 	rdlong	local02, fp
274c0     04 4E 85 F1 | 	sub	fp, #4
274c4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
274c8     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
274cc     03 00 00 FF 
274d0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
274d4                 | LR__3920
274d4     03 00 00 FF 
274d8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
274dc     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
274e0     03 00 00 FF 
274e4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
274e8     88 01 00 AF 
274ec     42 FB 05 A6 |  if_e	mov	result1, ##@LR__5089
274f0     84 02 90 AD |  if_e	jmp	#LR__3933
274f4                 | LR__3921
274f4     03 00 00 FF 
274f8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
274fc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27500     03 00 00 FF 
27504     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27508     10 E9 BF FD | 	call	#__system__readdir
2750c     0C 4E 05 F1 | 	add	fp, #12
27510     A7 FA 61 FC | 	wrlong	result1, fp
27514     0C 4E 85 F1 | 	sub	fp, #12
27518     00 FA 0D F2 | 	cmp	result1, #0 wz
2751c     38 00 90 5D |  if_ne	jmp	#LR__3922
27520     03 00 00 FF 
27524     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27528     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2752c     03 00 00 FF 
27530     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27534     70 E8 BF FD | 	call	#__system__closedir
27538     03 00 00 FF 
2753c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27540     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
27544     03 00 00 FF 
27548     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2754c     88 01 00 FF 
27550     44 FB 05 F6 | 	mov	result1, ##@LR__5090
27554     20 02 90 FD | 	jmp	#LR__3933
27558                 | LR__3922
27558     0C 4E 05 F1 | 	add	fp, #12
2755c     A7 12 02 FB | 	rdlong	arg01, fp
27560     0C 4E 85 F1 | 	sub	fp, #12
27564     03 00 00 FF 
27568     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2756c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
27570     03 00 00 FF 
27574     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27578     10 09 B0 FD | 	call	#__system___pat_match
2757c     00 FA 0D F2 | 	cmp	result1, #0 wz
27580     70 FF 9F AD |  if_e	jmp	#LR__3921
27584     03 00 00 FF 
27588     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2758c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27590     03 00 00 FF 
27594     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
27598     78 01 90 AD |  if_e	jmp	#LR__3929
2759c     0C 4E 05 F1 | 	add	fp, #12
275a0     A7 12 02 FB | 	rdlong	arg01, fp
275a4     04 4E 05 F1 | 	add	fp, #4
275a8     A7 14 02 F6 | 	mov	arg02, fp
275ac     10 4E 85 F1 | 	sub	fp, #16
275b0     6C F1 BF FD | 	call	#__system__stat
275b4     40 4E 05 F1 | 	add	fp, #64
275b8     A7 FA 61 FC | 	wrlong	result1, fp
275bc     40 4E 85 F1 | 	sub	fp, #64
275c0     00 FA 0D F2 | 	cmp	result1, #0 wz
275c4     88 01 00 5F 
275c8     46 FB 05 56 |  if_ne	mov	result1, ##@LR__5091
275cc     A8 01 90 5D |  if_ne	jmp	#LR__3933
275d0     18 4E 05 F1 | 	add	fp, #24
275d4     A7 20 02 FB | 	rdlong	local02, fp
275d8     78 00 00 FF 
275dc     00 20 06 F5 | 	and	local02, ##61440
275e0     2C 4E 05 F1 | 	add	fp, #44
275e4     A7 20 62 FC | 	wrlong	local02, fp
275e8     38 4E 85 F1 | 	sub	fp, #56
275ec     A7 20 02 FB | 	rdlong	local02, fp
275f0     0C 4E 85 F1 | 	sub	fp, #12
275f4     10 21 C2 FA | 	rdbyte	local02, local02
275f8     2E 20 0E F2 | 	cmp	local02, #46 wz
275fc     08 4E 05 A1 |  if_e	add	fp, #8
27600     A7 04 68 AC |  if_e	wrlong	#2, fp
27604     08 4E C5 F3 | 	sumz	fp, #8
27608     A7 00 68 5C |  if_ne	wrlong	#0, fp
2760c     08 4E 85 51 |  if_ne	sub	fp, #8
27610     44 4E 05 F1 | 	add	fp, #68
27614     A7 20 02 FB | 	rdlong	local02, fp
27618     44 4E 85 F1 | 	sub	fp, #68
2761c     08 00 00 FF 
27620     00 20 0E F2 | 	cmp	local02, ##4096 wz
27624     18 00 90 5D |  if_ne	jmp	#LR__3923
27628     08 4E 05 F1 | 	add	fp, #8
2762c     A7 20 02 FB | 	rdlong	local02, fp
27630     10 20 46 F5 | 	or	local02, #16
27634     A7 20 62 FC | 	wrlong	local02, fp
27638     08 4E 85 F1 | 	sub	fp, #8
2763c     AC 00 90 FD | 	jmp	#LR__3928
27640                 | LR__3923
27640     44 4E 05 F1 | 	add	fp, #68
27644     A7 20 02 FB | 	rdlong	local02, fp
27648     44 4E 85 F1 | 	sub	fp, #68
2764c     10 00 00 FF 
27650     00 20 0E F2 | 	cmp	local02, ##8192 wz
27654     44 4E 05 51 |  if_ne	add	fp, #68
27658     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2765c     44 4E 85 51 |  if_ne	sub	fp, #68
27660     18 00 00 5F 
27664     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
27668     44 4E 05 51 |  if_ne	add	fp, #68
2766c     0F 23 02 56 |  if_ne	mov	local03, local01
27670     44 4E 85 51 |  if_ne	sub	fp, #68
27674     20 00 00 5F 
27678     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
2767c     18 00 90 5D |  if_ne	jmp	#LR__3924
27680     08 4E 05 F1 | 	add	fp, #8
27684     A7 20 02 FB | 	rdlong	local02, fp
27688     04 20 46 F5 | 	or	local02, #4
2768c     A7 20 62 FC | 	wrlong	local02, fp
27690     08 4E 85 F1 | 	sub	fp, #8
27694     54 00 90 FD | 	jmp	#LR__3927
27698                 | LR__3924
27698     18 4E 05 F1 | 	add	fp, #24
2769c     A7 20 02 FB | 	rdlong	local02, fp
276a0     18 4E 85 F1 | 	sub	fp, #24
276a4     92 20 CE F7 | 	test	local02, #146 wz
276a8     18 00 90 5D |  if_ne	jmp	#LR__3925
276ac     08 4E 05 F1 | 	add	fp, #8
276b0     A7 20 02 FB | 	rdlong	local02, fp
276b4     01 20 46 F5 | 	or	local02, #1
276b8     A7 20 62 FC | 	wrlong	local02, fp
276bc     08 4E 85 F1 | 	sub	fp, #8
276c0     28 00 90 FD | 	jmp	#LR__3926
276c4                 | LR__3925
276c4     44 4E 05 F1 | 	add	fp, #68
276c8     A7 24 02 FB | 	rdlong	local04, fp
276cc     44 4E 85 F1 | 	sub	fp, #68
276d0     08 00 00 FF 
276d4     00 24 0E F2 | 	cmp	local04, ##4096 wz
276d8     08 4E 05 51 |  if_ne	add	fp, #8
276dc     A7 24 02 5B |  if_ne	rdlong	local04, fp
276e0     20 24 46 55 |  if_ne	or	local04, #32
276e4     A7 24 62 5C |  if_ne	wrlong	local04, fp
276e8     08 4E 85 51 |  if_ne	sub	fp, #8
276ec                 | LR__3926
276ec                 | LR__3927
276ec                 | LR__3928
276ec     08 4E 05 F1 | 	add	fp, #8
276f0     A7 24 02 FB | 	rdlong	local04, fp
276f4     08 4E 85 F1 | 	sub	fp, #8
276f8     03 00 00 FF 
276fc     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
27700     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
27704     03 00 00 FF 
27708     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2770c     0F 25 CA F7 | 	test	local04, local01 wz
27710     E0 FD 9F AD |  if_e	jmp	#LR__3921
27714                 | LR__3929
27714     0C 4E 05 F1 | 	add	fp, #12
27718     A7 12 02 FB | 	rdlong	arg01, fp
2771c     0C 4E 85 F1 | 	sub	fp, #12
27720     09 27 02 F6 | 	mov	local05, arg01
27724     97 06 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
27728                 | LR__3930
27728     13 FB C9 FA | 	rdbyte	result1, local05 wz
2772c     01 26 06 51 |  if_ne	add	local05, #1
27730     F4 FF 9F 5D |  if_ne	jmp	#LR__3930
27734                 | LR__3931
27734     13 13 C2 F2 | 	subr	arg01, local05
27738     01 12 06 F1 | 	add	arg01, #1
2773c     68 DF BF FD | 	call	#__system___gc_alloc_managed
27740     48 4E 05 F1 | 	add	fp, #72
27744     A7 FA 61 FC | 	wrlong	result1, fp
27748     48 4E 85 F1 | 	sub	fp, #72
2774c     00 FA 0D F2 | 	cmp	result1, #0 wz
27750     18 00 90 AD |  if_e	jmp	#LR__3932
27754     48 4E 05 F1 | 	add	fp, #72
27758     A7 12 02 FB | 	rdlong	arg01, fp
2775c     3C 4E 85 F1 | 	sub	fp, #60
27760     A7 14 02 FB | 	rdlong	arg02, fp
27764     0C 4E 85 F1 | 	sub	fp, #12
27768     0C 9E BF FD | 	call	#__system____builtin_strcpy
2776c                 | LR__3932
2776c     48 4E 05 F1 | 	add	fp, #72
27770     A7 FA 01 FB | 	rdlong	result1, fp
27774     48 4E 85 F1 | 	sub	fp, #72
27778                 | LR__3933
27778     A7 F0 03 F6 | 	mov	ptra, fp
2777c     B2 00 A0 FD | 	call	#popregs_
27780                 | __system___basic_dir_ret
27780     2D 00 64 FD | 	ret
27784                 | 
27784                 | __system__pack_0639
27784     09 01 02 F6 | 	mov	_var01, arg01
27788     7F 16 06 F1 | 	add	arg03, #127
2778c     04 18 CE F7 | 	test	arg04, #4 wz
27790     10 00 90 AD |  if_e	jmp	#LR__3940
27794     00 00 0E F2 | 	cmp	_var01, #0 wz
27798     16 00 C6 A9 |  if_e	decod	_var01, #22
2779c     F7 00 26 F4 | 	bith	_var01, #247
277a0     B4 00 90 FD | 	jmp	#LR__3949
277a4                 | LR__3940
277a4     02 18 CE F7 | 	test	arg04, #2 wz
277a8     00 C0 3F 5F 
277ac     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
277b0     00 14 06 56 |  if_ne	mov	arg02, #0
277b4     A0 00 90 5D |  if_ne	jmp	#LR__3948
277b8     08 18 CE F7 | 	test	arg04, #8 wz
277bc     00 00 06 56 |  if_ne	mov	_var01, #0
277c0     94 00 90 5D |  if_ne	jmp	#LR__3947
277c4     FF 16 56 F2 | 	cmps	arg03, #255 wc
277c8     00 C0 3F 3F 
277cc     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
277d0     00 14 06 36 |  if_ae	mov	arg02, #0
277d4     80 00 90 3D |  if_ae	jmp	#LR__3946
277d8     01 16 56 F2 | 	cmps	arg03, #1 wc
277dc     6C 00 90 3D |  if_ae	jmp	#LR__3944
277e0     01 14 46 F0 | 	shr	arg02, #1
277e4     00 03 02 F6 | 	mov	_var02, _var01
277e8     01 02 06 F5 | 	and	_var02, #1
277ec     1F 02 66 F0 | 	shl	_var02, #31
277f0     01 15 42 F5 | 	or	arg02, _var02
277f4     01 00 46 F0 | 	shr	_var01, #1
277f8     97 1E 48 FB | 	callpa	#(@LR__3942-@LR__3941)>>2,fcache_load_ptr_
277fc                 | LR__3941
277fc     00 16 56 F2 | 	cmps	arg03, #0 wc
27800     34 00 90 3D |  if_ae	jmp	#LR__3943
27804     00 00 0E F2 | 	cmp	_var01, #0 wz
27808     2C 00 90 AD |  if_e	jmp	#LR__3943
2780c     0A 13 02 F6 | 	mov	arg01, arg02
27810     01 12 06 F5 | 	and	arg01, #1
27814     01 16 06 F1 | 	add	arg03, #1
27818     01 14 46 F0 | 	shr	arg02, #1
2781c     00 03 02 F6 | 	mov	_var02, _var01
27820     01 02 06 F5 | 	and	_var02, #1
27824     1F 02 66 F0 | 	shl	_var02, #31
27828     01 15 42 F5 | 	or	arg02, _var02
2782c     09 15 42 F5 | 	or	arg02, arg01
27830     01 00 46 F0 | 	shr	_var01, #1
27834     C4 FF 9F FD | 	jmp	#LR__3941
27838                 | LR__3942
27838                 | LR__3943
27838     00 16 56 F2 | 	cmps	arg03, #0 wc
2783c     18 00 90 3D |  if_ae	jmp	#LR__3945
27840     00 14 0E F2 | 	cmp	arg02, #0 wz
27844     6F 14 62 FD | 	wrnz	arg02
27848     0C 00 90 FD | 	jmp	#LR__3945
2784c                 | LR__3944
2784c     17 01 06 F4 | 	bitl	_var01, #279
27850     17 16 66 F0 | 	shl	arg03, #23
27854     0B 01 42 F5 | 	or	_var01, arg03
27858                 | LR__3945
27858                 | LR__3946
27858                 | LR__3947
27858                 | LR__3948
27858                 | LR__3949
27858     01 00 CE F7 | 	test	_var01, #1 wz
2785c     01 14 46 55 |  if_ne	or	arg02, #1
27860     0A 17 02 F6 | 	mov	arg03, arg02
27864     00 02 06 F6 | 	mov	_var02, #0
27868     FF FF 3F FF 
2786c     FF 15 06 F1 | 	add	arg02, ##2147483647
27870     0B 15 12 F2 | 	cmp	arg02, arg03 wc
27874     01 02 06 C6 |  if_b	mov	_var02, #1
27878     01 01 02 F1 | 	add	_var01, _var02
2787c     01 18 CE F7 | 	test	arg04, #1 wz
27880     1F 00 26 54 |  if_ne	bith	_var01, #31
27884     00 FB 01 F6 | 	mov	result1, _var01
27888                 | __system__pack_0639_ret
27888     2D 00 64 FD | 	ret
2788c                 | 
2788c                 | __system___rxtxioctl_0729
2788c     00 15 0E F2 | 	cmp	arg02, #256 wz
27890     0C 00 90 AD |  if_e	jmp	#LR__3950
27894     01 15 0E F2 | 	cmp	arg02, #257 wz
27898     1C 00 90 AD |  if_e	jmp	#LR__3951
2789c     30 00 90 FD | 	jmp	#LR__3952
278a0                 | LR__3950
278a0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
278a4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
278a8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
278ac     0B FB 61 FC | 	wrlong	result1, arg03
278b0     00 FA 05 F6 | 	mov	result1, #0
278b4     28 00 90 FD | 	jmp	#LR__3953
278b8                 | LR__3951
278b8     0B 13 02 FB | 	rdlong	arg01, arg03
278bc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
278c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
278c4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
278c8     00 FA 05 F6 | 	mov	result1, #0
278cc     10 00 90 FD | 	jmp	#LR__3953
278d0                 | LR__3952
278d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
278d4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
278d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
278dc     01 FA 65 F6 | 	neg	result1, #1
278e0                 | LR__3953
278e0                 | __system___rxtxioctl_0729_ret
278e0     2D 00 64 FD | 	ret
278e4                 | 
278e4                 | __system____dummy_flush_0730
278e4     00 FA 05 F6 | 	mov	result1, #0
278e8                 | __system____dummy_flush_0730_ret
278e8     2D 00 64 FD | 	ret
278ec                 | 
278ec                 | __system___vfswrite
278ec     09 4A 05 F6 | 	mov	COUNT_, #9
278f0     A8 00 A0 FD | 	call	#pushregs_
278f4     09 1F 02 F6 | 	mov	local01, arg01
278f8     0A 21 02 F6 | 	mov	local02, arg02
278fc     0B 23 02 F6 | 	mov	local03, arg03
27900     10 25 02 F6 | 	mov	local04, local02
27904     08 1E 06 F1 | 	add	local01, #8
27908     0F 13 02 FB | 	rdlong	arg01, local01
2790c     08 1E 86 F1 | 	sub	local01, #8
27910     02 12 CE F7 | 	test	arg01, #2 wz
27914     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27918     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2791c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27920     01 FA 65 A6 |  if_e	neg	result1, #1
27924     80 01 90 AD |  if_e	jmp	#LR__3966
27928     08 1E 06 F1 | 	add	local01, #8
2792c     0F FB 01 FB | 	rdlong	result1, local01
27930     08 1E 86 F1 | 	sub	local01, #8
27934     40 FA CD F7 | 	test	result1, #64 wz
27938     68 00 90 AD |  if_e	jmp	#LR__3961
2793c     08 1E 06 F1 | 	add	local01, #8
27940     0F 15 02 FB | 	rdlong	arg02, local01
27944     08 1E 86 F1 | 	sub	local01, #8
27948     80 14 CE F7 | 	test	arg02, #128 wz
2794c     54 00 90 AD |  if_e	jmp	#LR__3960
27950     30 1E 06 F1 | 	add	local01, #48
27954     0F 27 02 FB | 	rdlong	local05, local01
27958     13 29 02 F6 | 	mov	local06, local05
2795c     30 1E 86 F1 | 	sub	local01, #48
27960     13 28 46 F7 | 	zerox	local06, #19
27964     14 26 46 F0 | 	shr	local05, #20
27968     02 26 66 F0 | 	shl	local05, #2
2796c     ED 26 02 F1 | 	add	local05, __methods__
27970     13 27 02 FB | 	rdlong	local05, local05
27974     0F 13 02 F6 | 	mov	arg01, local01
27978     00 14 06 F6 | 	mov	arg02, #0
2797c     02 16 06 F6 | 	mov	arg03, #2
27980     F2 2A 02 F6 | 	mov	local07, objptr
27984     14 E5 01 F6 | 	mov	objptr, local06
27988     2D 26 62 FD | 	call	local05
2798c     15 E5 01 F6 | 	mov	objptr, local07
27990     08 1E 06 F1 | 	add	local01, #8
27994     0F 2B 02 FB | 	rdlong	local07, local01
27998     80 2A 26 F5 | 	andn	local07, #128
2799c     0F 2B 62 FC | 	wrlong	local07, local01
279a0     08 1E 86 F1 | 	sub	local01, #8
279a4                 | LR__3960
279a4                 | LR__3961
279a4     18 1E 06 F1 | 	add	local01, #24
279a8     0F 2B 0A FB | 	rdlong	local07, local01 wz
279ac     18 1E 86 F1 | 	sub	local01, #24
279b0     80 00 90 AD |  if_e	jmp	#LR__3963
279b4     18 1E 06 F1 | 	add	local01, #24
279b8     0F 27 02 FB | 	rdlong	local05, local01
279bc     13 29 02 F6 | 	mov	local06, local05
279c0     18 1E 86 F1 | 	sub	local01, #24
279c4     13 28 46 F7 | 	zerox	local06, #19
279c8     14 26 46 F0 | 	shr	local05, #20
279cc     02 26 66 F0 | 	shl	local05, #2
279d0     ED 26 02 F1 | 	add	local05, __methods__
279d4     13 27 02 FB | 	rdlong	local05, local05
279d8     10 15 02 F6 | 	mov	arg02, local02
279dc     11 17 02 F6 | 	mov	arg03, local03
279e0     0F 13 02 F6 | 	mov	arg01, local01
279e4     F2 2A 02 F6 | 	mov	local07, objptr
279e8     14 E5 01 F6 | 	mov	objptr, local06
279ec     2D 26 62 FD | 	call	local05
279f0     15 E5 01 F6 | 	mov	objptr, local07
279f4     FD 2C 02 F6 | 	mov	local08, result1
279f8     00 2C 56 F2 | 	cmps	local08, #0 wc
279fc     2C 00 90 3D |  if_ae	jmp	#LR__3962
27a00     08 1E 06 F1 | 	add	local01, #8
27a04     0F 2B 02 FB | 	rdlong	local07, local01
27a08     20 2A 46 F5 | 	or	local07, #32
27a0c     0F 2B 62 FC | 	wrlong	local07, local01
27a10     00 2C 4E F2 | 	cmps	local08, #0 wz
27a14     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27a18     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
27a1c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27a20     01 FA 65 56 |  if_ne	neg	result1, #1
27a24     00 FA 05 A6 |  if_e	mov	result1, #0
27a28     7C 00 90 FD | 	jmp	#LR__3966
27a2c                 | LR__3962
27a2c     16 FB 01 F6 | 	mov	result1, local08
27a30     74 00 90 FD | 	jmp	#LR__3966
27a34                 | LR__3963
27a34     1C 1E 06 F1 | 	add	local01, #28
27a38     0F 2F 0A FB | 	rdlong	local09, local01 wz
27a3c     1C 1E 86 F1 | 	sub	local01, #28
27a40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27a44     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27a48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27a4c     01 FA 65 A6 |  if_e	neg	result1, #1
27a50     54 00 90 AD |  if_e	jmp	#LR__3966
27a54     00 2C 06 F6 | 	mov	local08, #0
27a58                 | LR__3964
27a58     01 22 16 F2 | 	cmp	local03, #1 wc
27a5c     44 00 90 CD |  if_b	jmp	#LR__3965
27a60     17 29 02 F6 | 	mov	local06, local09
27a64     17 27 02 F6 | 	mov	local05, local09
27a68     13 28 46 F7 | 	zerox	local06, #19
27a6c     14 26 46 F0 | 	shr	local05, #20
27a70     02 26 66 F0 | 	shl	local05, #2
27a74     ED 26 02 F1 | 	add	local05, __methods__
27a78     13 27 02 FB | 	rdlong	local05, local05
27a7c     12 13 C2 FA | 	rdbyte	arg01, local04
27a80     0F 15 02 F6 | 	mov	arg02, local01
27a84     F2 2A 02 F6 | 	mov	local07, objptr
27a88     14 E5 01 F6 | 	mov	objptr, local06
27a8c     01 24 06 F1 | 	add	local04, #1
27a90     2D 26 62 FD | 	call	local05
27a94     15 E5 01 F6 | 	mov	objptr, local07
27a98     FD 2C 02 F1 | 	add	local08, result1
27a9c     01 22 86 F1 | 	sub	local03, #1
27aa0     B4 FF 9F FD | 	jmp	#LR__3964
27aa4                 | LR__3965
27aa4     16 FB 01 F6 | 	mov	result1, local08
27aa8                 | LR__3966
27aa8     A7 F0 03 F6 | 	mov	ptra, fp
27aac     B2 00 A0 FD | 	call	#popregs_
27ab0                 | __system___vfswrite_ret
27ab0     2D 00 64 FD | 	ret
27ab4                 | 
27ab4                 | __system___vfsread
27ab4     03 4A 05 F6 | 	mov	COUNT_, #3
27ab8     A8 00 A0 FD | 	call	#pushregs_
27abc     28 F0 07 F1 | 	add	ptra, #40
27ac0     04 4E 05 F1 | 	add	fp, #4
27ac4     A7 12 62 FC | 	wrlong	arg01, fp
27ac8     04 4E 05 F1 | 	add	fp, #4
27acc     A7 14 62 FC | 	wrlong	arg02, fp
27ad0     04 4E 05 F1 | 	add	fp, #4
27ad4     A7 16 62 FC | 	wrlong	arg03, fp
27ad8     04 4E 85 F1 | 	sub	fp, #4
27adc     A7 FA 01 FB | 	rdlong	result1, fp
27ae0     14 4E 05 F1 | 	add	fp, #20
27ae4     A7 FA 61 FC | 	wrlong	result1, fp
27ae8     04 4E 05 F1 | 	add	fp, #4
27aec     A7 00 68 FC | 	wrlong	#0, fp
27af0     1C 4E 85 F1 | 	sub	fp, #28
27af4     A7 12 02 FB | 	rdlong	arg01, fp
27af8     04 4E 85 F1 | 	sub	fp, #4
27afc     08 12 06 F1 | 	add	arg01, #8
27b00     09 FB 01 FB | 	rdlong	result1, arg01
27b04     01 FA CD F7 | 	test	result1, #1 wz
27b08     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27b0c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27b10     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27b14     01 FA 65 A6 |  if_e	neg	result1, #1
27b18     74 02 90 AD |  if_e	jmp	#LR__3976
27b1c     04 4E 05 F1 | 	add	fp, #4
27b20     A7 12 02 FB | 	rdlong	arg01, fp
27b24     04 4E 85 F1 | 	sub	fp, #4
27b28     14 12 06 F1 | 	add	arg01, #20
27b2c     09 FB 09 FB | 	rdlong	result1, arg01 wz
27b30     B8 00 90 AD |  if_e	jmp	#LR__3971
27b34     04 4E 05 F1 | 	add	fp, #4
27b38     A7 12 02 FB | 	rdlong	arg01, fp
27b3c     09 17 02 F6 | 	mov	arg03, arg01
27b40     14 16 06 F1 | 	add	arg03, #20
27b44     0B 1F 02 FB | 	rdlong	local01, arg03
27b48     0F 21 02 F6 | 	mov	local02, local01
27b4c     13 1E 46 F7 | 	zerox	local01, #19
27b50     14 20 46 F0 | 	shr	local02, #20
27b54     02 20 66 F0 | 	shl	local02, #2
27b58     ED 20 02 F1 | 	add	local02, __methods__
27b5c     10 21 02 FB | 	rdlong	local02, local02
27b60     04 4E 05 F1 | 	add	fp, #4
27b64     A7 14 02 FB | 	rdlong	arg02, fp
27b68     04 4E 05 F1 | 	add	fp, #4
27b6c     A7 16 02 FB | 	rdlong	arg03, fp
27b70     0C 4E 85 F1 | 	sub	fp, #12
27b74     F2 22 02 F6 | 	mov	local03, objptr
27b78     0F E5 01 F6 | 	mov	objptr, local01
27b7c     2D 20 62 FD | 	call	local02
27b80     11 E5 01 F6 | 	mov	objptr, local03
27b84     10 4E 05 F1 | 	add	fp, #16
27b88     A7 FA 61 FC | 	wrlong	result1, fp
27b8c     10 4E 85 F1 | 	sub	fp, #16
27b90     00 FA 55 F2 | 	cmps	result1, #0 wc
27b94     44 00 90 3D |  if_ae	jmp	#LR__3970
27b98     04 4E 05 F1 | 	add	fp, #4
27b9c     A7 22 02 FB | 	rdlong	local03, fp
27ba0     11 1F 02 F6 | 	mov	local01, local03
27ba4     08 22 06 F1 | 	add	local03, #8
27ba8     11 21 02 FB | 	rdlong	local02, local03
27bac     20 20 46 F5 | 	or	local02, #32
27bb0     08 1E 06 F1 | 	add	local01, #8
27bb4     0F 21 62 FC | 	wrlong	local02, local01
27bb8     0C 4E 05 F1 | 	add	fp, #12
27bbc     A7 12 0A FB | 	rdlong	arg01, fp wz
27bc0     10 4E 85 F1 | 	sub	fp, #16
27bc4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27bc8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27bcc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27bd0     01 FA 65 56 |  if_ne	neg	result1, #1
27bd4     00 FA 05 A6 |  if_e	mov	result1, #0
27bd8     B4 01 90 FD | 	jmp	#LR__3976
27bdc                 | LR__3970
27bdc     10 4E 05 F1 | 	add	fp, #16
27be0     A7 FA 01 FB | 	rdlong	result1, fp
27be4     10 4E 85 F1 | 	sub	fp, #16
27be8     A4 01 90 FD | 	jmp	#LR__3976
27bec                 | LR__3971
27bec     04 4E 05 F1 | 	add	fp, #4
27bf0     A7 12 02 FB | 	rdlong	arg01, fp
27bf4     20 12 06 F1 | 	add	arg01, #32
27bf8     09 13 0A FB | 	rdlong	arg01, arg01 wz
27bfc     14 4E 05 F1 | 	add	fp, #20
27c00     A7 12 62 FC | 	wrlong	arg01, fp
27c04     18 4E 85 F1 | 	sub	fp, #24
27c08     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27c0c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27c10     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27c14     01 FA 65 A6 |  if_e	neg	result1, #1
27c18     74 01 90 AD |  if_e	jmp	#LR__3976
27c1c     04 4E 05 F1 | 	add	fp, #4
27c20     A7 22 02 FB | 	rdlong	local03, fp
27c24     04 4E 85 F1 | 	sub	fp, #4
27c28     28 22 06 F1 | 	add	local03, #40
27c2c     11 21 0A FB | 	rdlong	local02, local03 wz
27c30     7C 00 90 AD |  if_e	jmp	#LR__3973
27c34     04 4E 05 F1 | 	add	fp, #4
27c38     A7 12 02 FB | 	rdlong	arg01, fp
27c3c     09 23 02 F6 | 	mov	local03, arg01
27c40     28 22 06 F1 | 	add	local03, #40
27c44     11 1F 02 FB | 	rdlong	local01, local03
27c48     0F 21 02 F6 | 	mov	local02, local01
27c4c     13 1E 46 F7 | 	zerox	local01, #19
27c50     14 20 46 F0 | 	shr	local02, #20
27c54     02 20 66 F0 | 	shl	local02, #2
27c58     ED 20 02 F1 | 	add	local02, __methods__
27c5c     10 21 02 FB | 	rdlong	local02, local02
27c60     20 4E 05 F1 | 	add	fp, #32
27c64     A7 16 02 F6 | 	mov	arg03, fp
27c68     24 4E 85 F1 | 	sub	fp, #36
27c6c     00 15 06 F6 | 	mov	arg02, #256
27c70     F2 22 02 F6 | 	mov	local03, objptr
27c74     0F E5 01 F6 | 	mov	objptr, local01
27c78     2D 20 62 FD | 	call	local02
27c7c     11 E5 01 F6 | 	mov	objptr, local03
27c80     10 4E 05 F1 | 	add	fp, #16
27c84     A7 FA 61 FC | 	wrlong	result1, fp
27c88     00 FA 4D F2 | 	cmps	result1, #0 wz
27c8c     10 4E 85 F1 | 	sub	fp, #16
27c90     1C 00 90 5D |  if_ne	jmp	#LR__3972
27c94     24 4E 05 F1 | 	add	fp, #36
27c98     A7 20 02 FB | 	rdlong	local02, fp
27c9c     24 4E 85 F1 | 	sub	fp, #36
27ca0     02 20 CE F7 | 	test	local02, #2 wz
27ca4     20 4E 05 51 |  if_ne	add	fp, #32
27ca8     A7 02 68 5C |  if_ne	wrlong	#1, fp
27cac     20 4E 85 51 |  if_ne	sub	fp, #32
27cb0                 | LR__3972
27cb0                 | LR__3973
27cb0     10 4E 05 F1 | 	add	fp, #16
27cb4     A7 00 68 FC | 	wrlong	#0, fp
27cb8     10 4E 85 F1 | 	sub	fp, #16
27cbc                 | LR__3974
27cbc     0C 4E 05 F1 | 	add	fp, #12
27cc0     A7 22 02 FB | 	rdlong	local03, fp
27cc4     0C 4E 85 F1 | 	sub	fp, #12
27cc8     01 22 16 F2 | 	cmp	local03, #1 wc
27ccc     B4 00 90 CD |  if_b	jmp	#LR__3975
27cd0     18 4E 05 F1 | 	add	fp, #24
27cd4     A7 20 02 FB | 	rdlong	local02, fp
27cd8     10 23 02 F6 | 	mov	local03, local02
27cdc     13 22 46 F7 | 	zerox	local03, #19
27ce0     14 20 46 F0 | 	shr	local02, #20
27ce4     02 20 66 F0 | 	shl	local02, #2
27ce8     ED 20 02 F1 | 	add	local02, __methods__
27cec     10 21 02 FB | 	rdlong	local02, local02
27cf0     14 4E 85 F1 | 	sub	fp, #20
27cf4     A7 12 02 FB | 	rdlong	arg01, fp
27cf8     04 4E 85 F1 | 	sub	fp, #4
27cfc     F2 1E 02 F6 | 	mov	local01, objptr
27d00     11 E5 01 F6 | 	mov	objptr, local03
27d04     2D 20 62 FD | 	call	local02
27d08     0F E5 01 F6 | 	mov	objptr, local01
27d0c     14 4E 05 F1 | 	add	fp, #20
27d10     A7 FA 61 FC | 	wrlong	result1, fp
27d14     14 4E 85 F1 | 	sub	fp, #20
27d18     00 FA 55 F2 | 	cmps	result1, #0 wc
27d1c     64 00 90 CD |  if_b	jmp	#LR__3975
27d20     1C 4E 05 F1 | 	add	fp, #28
27d24     A7 22 02 FB | 	rdlong	local03, fp
27d28     11 21 02 F6 | 	mov	local02, local03
27d2c     01 20 06 F1 | 	add	local02, #1
27d30     A7 20 62 FC | 	wrlong	local02, fp
27d34     08 4E 85 F1 | 	sub	fp, #8
27d38     A7 20 02 FB | 	rdlong	local02, fp
27d3c     11 21 42 FC | 	wrbyte	local02, local03
27d40     04 4E 85 F1 | 	sub	fp, #4
27d44     A7 22 02 FB | 	rdlong	local03, fp
27d48     01 22 06 F1 | 	add	local03, #1
27d4c     A7 22 62 FC | 	wrlong	local03, fp
27d50     04 4E 85 F1 | 	sub	fp, #4
27d54     A7 22 02 FB | 	rdlong	local03, fp
27d58     01 22 86 F1 | 	sub	local03, #1
27d5c     A7 22 62 FC | 	wrlong	local03, fp
27d60     14 4E 05 F1 | 	add	fp, #20
27d64     A7 22 0A FB | 	rdlong	local03, fp wz
27d68     20 4E 85 F1 | 	sub	fp, #32
27d6c     4C FF 9F AD |  if_e	jmp	#LR__3974
27d70     14 4E 05 F1 | 	add	fp, #20
27d74     A7 20 02 FB | 	rdlong	local02, fp
27d78     14 4E 85 F1 | 	sub	fp, #20
27d7c     0A 20 0E F2 | 	cmp	local02, #10 wz
27d80     38 FF 9F 5D |  if_ne	jmp	#LR__3974
27d84                 | LR__3975
27d84     10 4E 05 F1 | 	add	fp, #16
27d88     A7 FA 01 FB | 	rdlong	result1, fp
27d8c     10 4E 85 F1 | 	sub	fp, #16
27d90                 | LR__3976
27d90     A7 F0 03 F6 | 	mov	ptra, fp
27d94     B2 00 A0 FD | 	call	#popregs_
27d98                 | __system___vfsread_ret
27d98     2D 00 64 FD | 	ret
27d9c                 | 
27d9c                 | __system____default_filbuf
27d9c     04 4A 05 F6 | 	mov	COUNT_, #4
27da0     A8 00 A0 FD | 	call	#pushregs_
27da4     09 1F 02 F6 | 	mov	local01, arg01
27da8     0F 21 02 FB | 	rdlong	local02, local01
27dac     0C 20 06 F1 | 	add	local02, #12
27db0     10 FB 09 FB | 	rdlong	result1, local02 wz
27db4     0C 20 86 F1 | 	sub	local02, #12
27db8     20 00 90 5D |  if_ne	jmp	#LR__3980
27dbc     14 20 06 F1 | 	add	local02, #20
27dc0     10 FB 01 F6 | 	mov	result1, local02
27dc4     04 20 86 F1 | 	sub	local02, #4
27dc8     10 FB 61 FC | 	wrlong	result1, local02
27dcc     04 20 86 F1 | 	sub	local02, #4
27dd0     02 00 80 FF 
27dd4     10 01 68 FC | 	wrlong	##1024, local02
27dd8     0C 20 86 F1 | 	sub	local02, #12
27ddc                 | LR__3980
27ddc     14 1E 06 F1 | 	add	local01, #20
27de0     0F 23 02 FB | 	rdlong	local03, local01
27de4     11 25 02 F6 | 	mov	local04, local03
27de8     14 1E 86 F1 | 	sub	local01, #20
27dec     13 24 46 F7 | 	zerox	local04, #19
27df0     14 22 46 F0 | 	shr	local03, #20
27df4     02 22 66 F0 | 	shl	local03, #2
27df8     ED 22 02 F1 | 	add	local03, __methods__
27dfc     11 23 02 FB | 	rdlong	local03, local03
27e00     10 20 06 F1 | 	add	local02, #16
27e04     10 15 02 FB | 	rdlong	arg02, local02
27e08     04 20 86 F1 | 	sub	local02, #4
27e0c     10 17 02 FB | 	rdlong	arg03, local02
27e10     0C 20 86 F1 | 	sub	local02, #12
27e14     0F 13 02 F6 | 	mov	arg01, local01
27e18     F2 1E 02 F6 | 	mov	local01, objptr
27e1c     12 E5 01 F6 | 	mov	objptr, local04
27e20     2D 22 62 FD | 	call	local03
27e24     0F E5 01 F6 | 	mov	objptr, local01
27e28     FD 24 02 F6 | 	mov	local04, result1
27e2c     00 24 56 F2 | 	cmps	local04, #0 wc
27e30     01 FA 65 C6 |  if_b	neg	result1, #1
27e34     28 00 90 CD |  if_b	jmp	#LR__3981
27e38     10 25 62 FC | 	wrlong	local04, local02
27e3c     10 20 06 F1 | 	add	local02, #16
27e40     10 23 02 FB | 	rdlong	local03, local02
27e44     0C 20 86 F1 | 	sub	local02, #12
27e48     10 23 62 FC | 	wrlong	local03, local02
27e4c     04 20 06 F1 | 	add	local02, #4
27e50     10 23 02 FB | 	rdlong	local03, local02
27e54     01 22 46 F5 | 	or	local03, #1
27e58     10 23 62 FC | 	wrlong	local03, local02
27e5c     12 FB 01 F6 | 	mov	result1, local04
27e60                 | LR__3981
27e60     A7 F0 03 F6 | 	mov	ptra, fp
27e64     B2 00 A0 FD | 	call	#popregs_
27e68                 | __system____default_filbuf_ret
27e68     2D 00 64 FD | 	ret
27e6c                 | 
27e6c                 | __system__getlower_1119
27e6c     41 12 56 F2 | 	cmps	arg01, #65 wc
27e70     10 00 90 CD |  if_b	jmp	#LR__3990
27e74     5B 12 56 F2 | 	cmps	arg01, #91 wc
27e78     09 FB 01 C6 |  if_b	mov	result1, arg01
27e7c     20 FA 05 C1 |  if_b	add	result1, #32
27e80     04 00 90 CD |  if_b	jmp	#__system__getlower_1119_ret
27e84                 | LR__3990
27e84     09 FB 01 F6 | 	mov	result1, arg01
27e88                 | __system__getlower_1119_ret
27e88     2D 00 64 FD | 	ret
27e8c                 | 
27e8c                 | __system___pat_match
27e8c     08 4A 05 F6 | 	mov	COUNT_, #8
27e90     A8 00 A0 FD | 	call	#pushregs_
27e94     09 1F 02 F6 | 	mov	local01, arg01
27e98                 | LR__4000
27e98     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
27e9c     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
27ea0     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
27ea4     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
27ea8     2C 00 90 AD |  if_e	jmp	#LR__4001
27eac     0A 13 C2 FA | 	rdbyte	arg01, arg02
27eb0     B8 FF BF FD | 	call	#__system__getlower_1119
27eb4     FD 22 02 F6 | 	mov	local03, result1
27eb8     0F 13 C2 FA | 	rdbyte	arg01, local01
27ebc     AC FF BF FD | 	call	#__system__getlower_1119
27ec0     11 FB 09 F2 | 	cmp	result1, local03 wz
27ec4     00 FA 05 56 |  if_ne	mov	result1, #0
27ec8     FC 00 90 5D |  if_ne	jmp	#LR__4009
27ecc     01 1E 06 F1 | 	add	local01, #1
27ed0     01 14 06 F1 | 	add	arg02, #1
27ed4     C0 FF 9F FD | 	jmp	#LR__4000
27ed8                 | LR__4001
27ed8     0A 23 C2 FA | 	rdbyte	local03, arg02
27edc     2A 22 0E F2 | 	cmp	local03, #42 wz
27ee0     D4 00 90 5D |  if_ne	jmp	#LR__4008
27ee4     01 14 06 F1 | 	add	arg02, #1
27ee8     0A 21 C2 FA | 	rdbyte	local02, arg02
27eec     01 14 86 F1 | 	sub	arg02, #1
27ef0     2E 20 0E F2 | 	cmp	local02, #46 wz
27ef4     28 00 90 5D |  if_ne	jmp	#LR__4002
27ef8     02 14 06 F1 | 	add	arg02, #2
27efc     0A 21 C2 FA | 	rdbyte	local02, arg02
27f00     02 14 86 F1 | 	sub	arg02, #2
27f04     2A 20 0E F2 | 	cmp	local02, #42 wz
27f08     03 14 06 A1 |  if_e	add	arg02, #3
27f0c     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
27f10     03 14 86 A1 |  if_e	sub	arg02, #3
27f14     12 27 0A A6 |  if_e	mov	local05, local04 wz
27f18     01 FA 05 A6 |  if_e	mov	result1, #1
27f1c     A8 00 90 AD |  if_e	jmp	#LR__4009
27f20                 | LR__4002
27f20     01 14 06 F1 | 	add	arg02, #1
27f24     00 28 06 F6 | 	mov	local06, #0
27f28     97 1E 48 FB | 	callpa	#(@LR__4005-@LR__4003)>>2,fcache_load_ptr_
27f2c                 | LR__4003
27f2c     14 2B 02 F6 | 	mov	local07, local06
27f30     0A 2B 02 F1 | 	add	local07, arg02
27f34     15 2B CA FA | 	rdbyte	local07, local07 wz
27f38     14 27 02 56 |  if_ne	mov	local05, local06
27f3c     01 26 06 51 |  if_ne	add	local05, #1
27f40     13 29 02 56 |  if_ne	mov	local06, local05
27f44     E4 FF 9F 5D |  if_ne	jmp	#LR__4003
27f48     00 2C 06 F6 | 	mov	local08, #0
27f4c                 | LR__4004
27f4c     16 2B 02 F6 | 	mov	local07, local08
27f50     0F 2B 02 F1 | 	add	local07, local01
27f54     15 2B CA FA | 	rdbyte	local07, local07 wz
27f58     16 27 02 56 |  if_ne	mov	local05, local08
27f5c     01 26 06 51 |  if_ne	add	local05, #1
27f60     13 2D 02 56 |  if_ne	mov	local08, local05
27f64     E4 FF 9F 5D |  if_ne	jmp	#LR__4004
27f68                 | LR__4005
27f68     14 2D 52 F2 | 	cmps	local08, local06 wc
27f6c     00 FA 05 C6 |  if_b	mov	result1, #0
27f70     54 00 90 CD |  if_b	jmp	#LR__4009
27f74     16 21 02 F6 | 	mov	local02, local08
27f78     14 21 82 F1 | 	sub	local02, local06
27f7c     10 1F 02 F1 | 	add	local01, local02
27f80                 | LR__4006
27f80     01 28 56 F2 | 	cmps	local06, #1 wc
27f84     30 00 90 CD |  if_b	jmp	#LR__4007
27f88     0F 13 C2 FA | 	rdbyte	arg01, local01
27f8c     DC FE BF FD | 	call	#__system__getlower_1119
27f90     FD 2C 02 F6 | 	mov	local08, result1
27f94     0A 13 C2 FA | 	rdbyte	arg01, arg02
27f98     D0 FE BF FD | 	call	#__system__getlower_1119
27f9c     FD 2C 0A F2 | 	cmp	local08, result1 wz
27fa0     00 FA 05 56 |  if_ne	mov	result1, #0
27fa4     20 00 90 5D |  if_ne	jmp	#LR__4009
27fa8     01 1E 06 F1 | 	add	local01, #1
27fac     01 14 06 F1 | 	add	arg02, #1
27fb0     01 28 86 F1 | 	sub	local06, #1
27fb4     C8 FF 9F FD | 	jmp	#LR__4006
27fb8                 | LR__4007
27fb8                 | LR__4008
27fb8     0A 2D CA FA | 	rdbyte	local08, arg02 wz
27fbc     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27fc0     01 FA 05 A6 |  if_e	mov	result1, #1
27fc4     00 FA 05 56 |  if_ne	mov	result1, #0
27fc8                 | LR__4009
27fc8     A7 F0 03 F6 | 	mov	ptra, fp
27fcc     B2 00 A0 FD | 	call	#popregs_
27fd0                 | __system___pat_match_ret
27fd0     2D 00 64 FD | 	ret
27fd4                 | 
27fd4                 | _fatfs_cc_ff_uni2oem
27fd4     00 00 06 F6 | 	mov	_var01, #0
27fd8     80 12 16 F2 | 	cmp	arg01, #128 wc
27fdc     09 01 02 C6 |  if_b	mov	_var01, arg01
27fe0     58 00 90 CD |  if_b	jmp	#LR__4014
27fe4     80 00 00 FF 
27fe8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27fec     4C 00 90 3D |  if_ae	jmp	#LR__4013
27ff0     0A FB 31 F9 | 	getword	result1, arg02, #0
27ff4     01 00 00 FF 
27ff8     52 FB 0D F2 | 	cmp	result1, ##850 wz
27ffc     3C 00 90 5D |  if_ne	jmp	#LR__4013
28000                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
28000     00 00 06 F6 | 	mov	_var01, #0
28004     97 14 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
28008                 | LR__4010
28008     00 FB 31 F9 | 	getword	result1, _var01, #0
2800c     80 FA 15 F2 | 	cmp	result1, #128 wc
28010     1C 00 90 3D |  if_ae	jmp	#LR__4012
28014     00 FB 31 F9 | 	getword	result1, _var01, #0
28018     01 FA 65 F0 | 	shl	result1, #1
2801c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
28020     FD FA E1 FA | 	rdword	result1, result1
28024     FD 12 0A F2 | 	cmp	arg01, result1 wz
28028     01 00 06 51 |  if_ne	add	_var01, #1
2802c     D8 FF 9F 5D |  if_ne	jmp	#LR__4010
28030                 | LR__4011
28030                 | LR__4012
28030     00 01 32 F9 | 	getword	_var01, _var01, #0
28034     80 00 06 F1 | 	add	_var01, #128
28038     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2803c                 | LR__4013
2803c                 | LR__4014
2803c                 | ' 			c = (c + 0x80) & 0xFF;
2803c                 | ' 		}
2803c                 | ' 	}
2803c                 | ' 
2803c                 | ' 	return c;
2803c     00 FB 01 F6 | 	mov	result1, _var01
28040                 | _fatfs_cc_ff_uni2oem_ret
28040     2D 00 64 FD | 	ret
28044                 | 
28044                 | _fatfs_cc_ff_oem2uni
28044     00 00 06 F6 | 	mov	_var01, #0
28048     09 FB 31 F9 | 	getword	result1, arg01, #0
2804c     80 FA 15 F2 | 	cmp	result1, #128 wc
28050     09 01 02 C6 |  if_b	mov	_var01, arg01
28054     2C 00 90 CD |  if_b	jmp	#LR__4021
28058     0A 15 32 F9 | 	getword	arg02, arg02, #0
2805c     01 00 00 FF 
28060     52 15 0E F2 | 	cmp	arg02, ##850 wz
28064     1C 00 90 5D |  if_ne	jmp	#LR__4020
28068     09 FB 31 F9 | 	getword	result1, arg01, #0
2806c     00 FB 15 F2 | 	cmp	result1, #256 wc
28070     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
28074     80 12 86 C1 |  if_b	sub	arg01, #128
28078     01 12 66 C0 |  if_b	shl	arg01, #1
2807c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
28080     09 01 E2 CA |  if_b	rdword	_var01, arg01
28084                 | LR__4020
28084                 | LR__4021
28084                 | ' 		}
28084                 | ' 	}
28084                 | ' 
28084                 | ' 	return c;
28084     00 FB 01 F6 | 	mov	result1, _var01
28088                 | _fatfs_cc_ff_oem2uni_ret
28088     2D 00 64 FD | 	ret
2808c                 | 
2808c                 | _fatfs_cc_ff_wtoupper
2808c     09 01 02 F6 | 	mov	_var01, arg01
28090     80 00 00 FF 
28094     00 00 16 F2 | 	cmp	_var01, ##65536 wc
28098     60 01 90 3D |  if_ae	jmp	#LR__4043
2809c     00 03 02 F6 | 	mov	_var02, _var01
280a0     01 01 32 F9 | 	getword	_var01, _var02, #0
280a4     08 00 00 FF 
280a8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
280ac     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
280b0     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
280b4     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
280b8     01 00 00 3F 
280bc     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
280c0     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
280c4     01 00 00 3F 
280c8     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
280cc     02 07 02 F6 | 	mov	_var04, _var03
280d0                 | ' 		uc = (WORD)uni;
280d0                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
280d0                 | ' 		for (;;) {
280d0                 | LR__4030
280d0     03 09 E2 FA | 	rdword	_var05, _var04
280d4     04 05 02 F6 | 	mov	_var03, _var05
280d8     0F 04 4E F7 | 	zerox	_var03, #15 wz
280dc     02 06 06 F1 | 	add	_var04, #2
280e0     14 01 90 AD |  if_e	jmp	#LR__4042
280e4     01 05 32 F9 | 	getword	_var03, _var02, #0
280e8     04 01 32 F9 | 	getword	_var01, _var05, #0
280ec     00 05 12 F2 | 	cmp	_var03, _var01 wc
280f0     04 01 90 CD |  if_b	jmp	#LR__4042
280f4     03 0B E2 FA | 	rdword	_var06, _var04
280f8     05 0D 32 F9 | 	getword	_var07, _var06, #0
280fc     08 0C 46 F0 | 	shr	_var07, #8
28100     05 0B 32 F9 | 	getword	_var06, _var06, #0
28104     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
28108     01 05 32 F9 | 	getword	_var03, _var02, #0
2810c     04 0F 32 F9 | 	getword	_var08, _var05, #0
28110     05 01 32 F9 | 	getword	_var01, _var06, #0
28114     00 0F 02 F1 | 	add	_var08, _var01
28118     07 05 52 F2 | 	cmps	_var03, _var08 wc
2811c     02 06 06 F1 | 	add	_var04, #2
28120     C4 00 90 3D |  if_ae	jmp	#LR__4041
28124                 | ' 				switch (cmd) {
28124     06 11 32 F9 | 	getword	_var09, _var07, #0
28128     09 10 26 F3 | 	fle	_var09, #9
2812c     30 10 62 FD | 	jmprel	_var09
28130                 | LR__4031
28130     24 00 90 FD | 	jmp	#LR__4032
28134     3C 00 90 FD | 	jmp	#LR__4033
28138     54 00 90 FD | 	jmp	#LR__4034
2813c     5C 00 90 FD | 	jmp	#LR__4035
28140     64 00 90 FD | 	jmp	#LR__4036
28144     6C 00 90 FD | 	jmp	#LR__4037
28148     74 00 90 FD | 	jmp	#LR__4038
2814c     7C 00 90 FD | 	jmp	#LR__4039
28150     84 00 90 FD | 	jmp	#LR__4040
28154     A0 00 90 FD | 	jmp	#LR__4042
28158                 | LR__4032
28158     01 03 32 F9 | 	getword	_var02, _var02, #0
2815c     04 09 32 F9 | 	getword	_var05, _var05, #0
28160     04 03 82 F1 | 	sub	_var02, _var05
28164     01 02 66 F0 | 	shl	_var02, #1
28168     03 03 02 F1 | 	add	_var02, _var04
2816c     01 03 E2 FA | 	rdword	_var02, _var02
28170     84 00 90 FD | 	jmp	#LR__4042
28174                 | LR__4033
28174     01 05 32 F9 | 	getword	_var03, _var02, #0
28178     01 03 32 F9 | 	getword	_var02, _var02, #0
2817c     04 09 32 F9 | 	getword	_var05, _var05, #0
28180     04 03 82 F1 | 	sub	_var02, _var05
28184     01 02 06 F5 | 	and	_var02, #1
28188     02 03 C2 F2 | 	subr	_var02, _var03
2818c     68 00 90 FD | 	jmp	#LR__4042
28190                 | LR__4034
28190     01 03 32 F9 | 	getword	_var02, _var02, #0
28194     10 02 86 F1 | 	sub	_var02, #16
28198     5C 00 90 FD | 	jmp	#LR__4042
2819c                 | LR__4035
2819c     01 03 32 F9 | 	getword	_var02, _var02, #0
281a0     20 02 86 F1 | 	sub	_var02, #32
281a4     50 00 90 FD | 	jmp	#LR__4042
281a8                 | LR__4036
281a8     01 03 32 F9 | 	getword	_var02, _var02, #0
281ac     30 02 86 F1 | 	sub	_var02, #48
281b0     44 00 90 FD | 	jmp	#LR__4042
281b4                 | LR__4037
281b4     01 03 32 F9 | 	getword	_var02, _var02, #0
281b8     1A 02 86 F1 | 	sub	_var02, #26
281bc     38 00 90 FD | 	jmp	#LR__4042
281c0                 | LR__4038
281c0     01 03 32 F9 | 	getword	_var02, _var02, #0
281c4     08 02 06 F1 | 	add	_var02, #8
281c8     2C 00 90 FD | 	jmp	#LR__4042
281cc                 | LR__4039
281cc     01 03 32 F9 | 	getword	_var02, _var02, #0
281d0     50 02 86 F1 | 	sub	_var02, #80
281d4     20 00 90 FD | 	jmp	#LR__4042
281d8                 | LR__4040
281d8     01 03 32 F9 | 	getword	_var02, _var02, #0
281dc     0E 00 00 FF 
281e0     60 02 86 F1 | 	sub	_var02, ##7264
281e4                 | ' 				}
281e4                 | ' 				break;
281e4     10 00 90 FD | 	jmp	#LR__4042
281e8                 | LR__4041
281e8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
281ec     02 0A 06 AA |  if_e	mul	_var06, #2
281f0     05 07 02 A1 |  if_e	add	_var04, _var06
281f4     D8 FE 9F FD | 	jmp	#LR__4030
281f8                 | LR__4042
281f8     01 01 32 F9 | 	getword	_var01, _var02, #0
281fc                 | LR__4043
281fc                 | ' 		}
281fc                 | ' 		uni = uc;
281fc                 | ' 	}
281fc                 | ' 
281fc                 | ' 	return uni;
281fc     00 FB 01 F6 | 	mov	result1, _var01
28200                 | _fatfs_cc_ff_wtoupper_ret
28200     2D 00 64 FD | 	ret
28204                 | 
28204                 | _fatfs_cc_strncpy
28204     09 01 02 F6 | 	mov	_var01, arg01
28208     97 12 48 FB | 	callpa	#(@LR__4051-@LR__4050)>>2,fcache_load_ptr_
2820c                 | ' 
2820c                 | ' 	dscan = dst;
2820c                 | ' 	sscan = src;
2820c                 | ' 	count = n;
2820c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2820c                 | LR__4050
2820c     01 16 86 F1 | 	sub	arg03, #1
28210     00 16 56 F2 | 	cmps	arg03, #0 wc
28214     18 00 90 CD |  if_b	jmp	#LR__4052
28218     0A FB C1 FA | 	rdbyte	result1, arg02
2821c     00 FB 41 FC | 	wrbyte	result1, _var01
28220     01 14 06 F1 | 	add	arg02, #1
28224     00 FB C9 FA | 	rdbyte	result1, _var01 wz
28228                 | ' 		continue;
28228     01 00 06 F1 | 	add	_var01, #1
2822c     DC FF 9F 5D |  if_ne	jmp	#LR__4050
28230                 | LR__4051
28230                 | LR__4052
28230     97 0C 48 FB | 	callpa	#(@LR__4054-@LR__4053)>>2,fcache_load_ptr_
28234                 | ' 	while (--count >= 0)
28234                 | LR__4053
28234     01 16 86 F1 | 	sub	arg03, #1
28238     00 16 56 F2 | 	cmps	arg03, #0 wc
2823c     00 03 02 36 |  if_ae	mov	_var02, _var01
28240     01 00 06 31 |  if_ae	add	_var01, #1
28244     01 01 48 3C |  if_ae	wrbyte	#0, _var02
28248     E8 FF 9F 3D |  if_ae	jmp	#LR__4053
2824c                 | LR__4054
2824c                 | ' 		*dscan++ = '\0';
2824c                 | ' 	return(dst);
2824c     09 FB 01 F6 | 	mov	result1, arg01
28250                 | _fatfs_cc_strncpy_ret
28250     2D 00 64 FD | 	ret
28254                 | 
28254                 | _fatfs_cc_memcmp
28254                 | ' 	for (n = size; n > 0; n--)
28254     00 16 0E F2 | 	cmp	arg03, #0 wz
28258     28 00 90 AD |  if_e	jmp	#LR__4061
2825c                 | LR__4060
2825c     09 01 C2 FA | 	rdbyte	_var01, arg01
28260     0A 03 C2 FA | 	rdbyte	_var02, arg02
28264     01 01 0A F2 | 	cmp	_var01, _var02 wz
28268     01 12 06 A1 |  if_e	add	arg01, #1
2826c     01 14 06 A1 |  if_e	add	arg02, #1
28270                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
28270     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
28274     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
28278     01 FB 81 51 |  if_ne	sub	result1, _var02
2827c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
28280     F6 17 6E FB | 	djnz	arg03, #LR__4060
28284                 | LR__4061
28284                 | ' 
28284                 | ' 	return(0);
28284     00 FA 05 F6 | 	mov	result1, #0
28288                 | _fatfs_cc_memcmp_ret
28288     2D 00 64 FD | 	ret
2828c                 | 
2828c                 | _fatfs_cc_strncmp
2828c     09 01 0A F6 | 	mov	_var01, arg01 wz
28290     14 00 90 5D |  if_ne	jmp	#LR__4070
28294                 | ' 		return scan2 ? -1 : 0;
28294     00 14 0E F2 | 	cmp	arg02, #0 wz
28298     01 02 66 56 |  if_ne	neg	_var02, #1
2829c     00 02 06 A6 |  if_e	mov	_var02, #0
282a0     01 FB 01 F6 | 	mov	result1, _var02
282a4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
282a8                 | LR__4070
282a8     00 14 0E F2 | 	cmp	arg02, #0 wz
282ac     01 FA 05 A6 |  if_e	mov	result1, #1
282b0     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
282b4     0B 05 02 F6 | 	mov	_var03, arg03
282b8     97 16 48 FB | 	callpa	#(@LR__4072-@LR__4071)>>2,fcache_load_ptr_
282bc                 | ' 	count = n;
282bc                 | ' 	do {
282bc                 | LR__4071
282bc     00 07 C2 FA | 	rdbyte	_var04, _var01
282c0     0A 09 02 F6 | 	mov	_var05, arg02
282c4     04 0B C2 FA | 	rdbyte	_var06, _var05
282c8     01 04 86 F1 | 	sub	_var03, #1
282cc     00 04 56 F2 | 	cmps	_var03, #0 wc
282d0     01 00 06 F1 | 	add	_var01, #1
282d4     01 14 06 F1 | 	add	arg02, #1
282d8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
282dc     08 00 90 2D |  if_nc_and_z	jmp	#LR__4073
282e0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
282e4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4071
282e8                 | LR__4072
282e8                 | LR__4073
282e8     00 04 56 F2 | 	cmps	_var03, #0 wc
282ec                 | ' 		return(0);
282ec     00 FA 05 C6 |  if_b	mov	result1, #0
282f0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
282f4     05 07 0A F2 | 	cmp	_var04, _var06 wz
282f8                 | ' 		return(0);
282f8     00 FA 05 A6 |  if_e	mov	result1, #0
282fc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
28300     00 06 0E F2 | 	cmp	_var04, #0 wz
28304                 | ' 		return(-1);
28304     01 FA 65 A6 |  if_e	neg	result1, #1
28308     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2830c     00 0A 0E F2 | 	cmp	_var06, #0 wz
28310                 | ' 		return(1);
28310     01 FA 05 A6 |  if_e	mov	result1, #1
28314                 | ' 		return(c1 - c2);
28314     03 FB 01 56 |  if_ne	mov	result1, _var04
28318     05 FB 81 51 |  if_ne	sub	result1, _var06
2831c                 | _fatfs_cc_strncmp_ret
2831c     2D 00 64 FD | 	ret
28320                 | 
28320                 | _fatfs_cc_strchr
28320                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
28320                 | ' 	while ((c = *s++) != (char) charwanted)
28320                 | LR__4080
28320     09 01 02 F6 | 	mov	_var01, arg01
28324     00 03 C2 FA | 	rdbyte	_var02, _var01
28328     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2832c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
28330     03 05 0A F2 | 	cmp	_var03, _var04 wz
28334     01 12 06 F1 | 	add	arg01, #1
28338     14 00 90 AD |  if_e	jmp	#LR__4081
2833c     01 05 02 F6 | 	mov	_var03, _var02
28340     07 04 4E F7 | 	zerox	_var03, #7 wz
28344     00 FA 05 A6 |  if_e	mov	result1, #0
28348     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2834c     D0 FF 9F FD | 	jmp	#LR__4080
28350                 | LR__4081
28350                 | ' 	return((char *)--s);
28350     01 12 86 F1 | 	sub	arg01, #1
28354     09 FB 01 F6 | 	mov	result1, arg01
28358                 | _fatfs_cc_strchr_ret
28358     2D 00 64 FD | 	ret
2835c                 | 
2835c                 | _fatfs_cc_disk_initialize
2835c     04 4A 05 F6 | 	mov	COUNT_, #4
28360     A8 00 A0 FD | 	call	#pushregs_
28364     40 F0 07 F1 | 	add	ptra, #64
28368     04 4E 05 F1 | 	add	fp, #4
2836c     A7 12 42 FC | 	wrbyte	arg01, fp
28370     01 00 00 FF 
28374     14 E4 05 F1 | 	add	objptr, ##532
28378     F2 18 02 FB | 	rdlong	arg04, objptr
2837c     2C 4E 05 F1 | 	add	fp, #44
28380     A7 18 62 FC | 	wrlong	arg04, fp
28384     04 E4 85 F1 | 	sub	objptr, #4
28388     F2 18 02 FB | 	rdlong	arg04, objptr
2838c     04 4E 05 F1 | 	add	fp, #4
28390     A7 18 62 FC | 	wrlong	arg04, fp
28394     08 E4 05 F1 | 	add	objptr, #8
28398     F2 18 02 FB | 	rdlong	arg04, objptr
2839c     04 4E 05 F1 | 	add	fp, #4
283a0     A7 18 62 FC | 	wrlong	arg04, fp
283a4     04 E4 05 F1 | 	add	objptr, #4
283a8     F2 18 02 FB | 	rdlong	arg04, objptr
283ac     04 4E 05 F1 | 	add	fp, #4
283b0     A7 18 62 FC | 	wrlong	arg04, fp
283b4     04 E4 05 F1 | 	add	objptr, #4
283b8     F2 02 48 FC | 	wrbyte	#1, objptr
283bc     01 00 00 FF 
283c0     20 E4 85 F1 | 	sub	objptr, ##544
283c4     38 4E 85 F1 | 	sub	fp, #56
283c8     A7 18 CA FA | 	rdbyte	arg04, fp wz
283cc     04 4E 85 F1 | 	sub	fp, #4
283d0                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
283d0                 | '             return RES_NOTRDY;
283d0     03 FA 05 56 |  if_ne	mov	result1, #3
283d4     D8 05 90 5D |  if_ne	jmp	#LR__4108
283d8     13 00 00 FF 
283dc     10 13 06 F6 | 	mov	arg01, ##10000
283e0     40 95 BF FD | 	call	#__system___waitus
283e4     30 4E 05 F1 | 	add	fp, #48
283e8     A7 12 02 FB | 	rdlong	arg01, fp
283ec     09 01 08 FC | 	wrpin	#0, arg01
283f0     04 4E 05 F1 | 	add	fp, #4
283f4     A7 12 02 FB | 	rdlong	arg01, fp
283f8     09 01 08 FC | 	wrpin	#0, arg01
283fc     04 4E 05 F1 | 	add	fp, #4
28400     A7 12 02 FB | 	rdlong	arg01, fp
28404     09 01 08 FC | 	wrpin	#0, arg01
28408     04 4E 05 F1 | 	add	fp, #4
2840c     A7 12 02 FB | 	rdlong	arg01, fp
28410     09 00 80 FF 
28414     09 01 08 FC | 	wrpin	##4608, arg01
28418     0C 4E 85 F1 | 	sub	fp, #12
2841c     A7 12 02 FB | 	rdlong	arg01, fp
28420     59 12 62 FD | 	drvh	arg01
28424     04 4E 05 F1 | 	add	fp, #4
28428     A7 12 02 FB | 	rdlong	arg01, fp
2842c     59 12 62 FD | 	drvh	arg01
28430     04 4E 05 F1 | 	add	fp, #4
28434     A7 12 02 FB | 	rdlong	arg01, fp
28438     59 12 62 FD | 	drvh	arg01
2843c     04 4E 05 F1 | 	add	fp, #4
28440     A7 12 02 FB | 	rdlong	arg01, fp
28444     59 12 62 FD | 	drvh	arg01
28448     20 4E 85 F1 | 	sub	fp, #32
2844c     00 04 80 FF 
28450     A7 20 68 FC | 	wrlong	##524304, fp
28454     04 4E 05 F1 | 	add	fp, #4
28458     20 03 80 FF 
2845c     A7 90 68 FC | 	wrlong	##409672, fp
28460     14 4E 05 F1 | 	add	fp, #20
28464     A7 1E 02 FB | 	rdlong	local01, fp
28468     18 4E 85 F1 | 	sub	fp, #24
2846c     A7 16 02 FB | 	rdlong	arg03, fp
28470     40 1E 62 FD | 	dirl	local01
28474     A0 03 80 FF 
28478     0F 91 08 FC | 	wrpin	##475208, local01
2847c     0F 17 12 FC | 	wxpin	arg03, local01
28480     0F 01 28 FC | 	wypin	#0, local01
28484     41 1E 62 FD | 	dirh	local01
28488     1C 4E 05 F1 | 	add	fp, #28
2848c     A7 20 02 FB | 	rdlong	local02, fp
28490     10 1F 82 F1 | 	sub	local01, local02
28494     07 1E 06 F5 | 	and	local01, #7
28498     18 1E 66 F0 | 	shl	local01, #24
2849c     78 14 06 F6 | 	mov	arg02, #120
284a0     0F 15 42 F5 | 	or	arg02, local01
284a4     14 4E 85 F1 | 	sub	fp, #20
284a8     A7 14 62 FC | 	wrlong	arg02, fp
284ac     14 4E 05 F1 | 	add	fp, #20
284b0     A7 12 02 FB | 	rdlong	arg01, fp
284b4     10 14 26 F4 | 	bith	arg02, #16
284b8     40 12 62 FD | 	dirl	arg01
284bc     09 15 02 FC | 	wrpin	arg02, arg01
284c0     09 3F 18 FC | 	wxpin	#31, arg01
284c4     FF FF FF FF 
284c8     09 FF 2B FC | 	wypin	##-1, arg01
284cc     41 12 62 FD | 	dirh	arg01
284d0     04 4E 85 F1 | 	sub	fp, #4
284d4     A7 14 02 FB | 	rdlong	arg02, fp
284d8     08 4E 05 F1 | 	add	fp, #8
284dc     A7 22 02 FB | 	rdlong	local03, fp
284e0     11 15 82 F1 | 	sub	arg02, local03
284e4     07 14 06 F5 | 	and	arg02, #7
284e8     18 14 66 F0 | 	shl	arg02, #24
284ec     14 4E 85 F1 | 	sub	fp, #20
284f0     A7 14 62 FC | 	wrlong	arg02, fp
284f4     29 00 00 FF 
284f8     7A 14 46 F5 | 	or	arg02, ##21114
284fc     A7 14 62 FC | 	wrlong	arg02, fp
28500     14 4E 05 F1 | 	add	fp, #20
28504     A7 12 02 FB | 	rdlong	arg01, fp
28508     40 12 62 FD | 	dirl	arg01
2850c     09 15 02 FC | 	wrpin	arg02, arg01
28510     09 4F 18 FC | 	wxpin	#39, arg01
28514     09 01 28 FC | 	wypin	#0, arg01
28518     41 12 62 FD | 	dirh	arg01
2851c     28 4E 85 F1 | 	sub	fp, #40
28520     A7 12 02 F6 | 	mov	arg01, fp
28524     14 4E 85 F1 | 	sub	fp, #20
28528     0A 14 06 F6 | 	mov	arg02, #10
2852c     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1153
28530     00 12 06 F6 | 	mov	arg01, #0
28534     00 14 06 F6 | 	mov	arg02, #0
28538     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
2853c     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1163
28540     64 12 06 F6 | 	mov	arg01, #100
28544     DC 93 BF FD | 	call	#__system___waitus
28548     14 4E 05 F1 | 	add	fp, #20
2854c     A7 12 02 F6 | 	mov	arg01, fp
28550     14 4E 85 F1 | 	sub	fp, #20
28554     0A 14 06 F6 | 	mov	arg02, #10
28558     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1153
2855c     0C 4E 05 F1 | 	add	fp, #12
28560     A7 00 48 FC | 	wrbyte	#0, fp
28564     0C 4E 85 F1 | 	sub	fp, #12
28568     00 12 06 F6 | 	mov	arg01, #0
2856c     00 14 06 F6 | 	mov	arg02, #0
28570     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
28574     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
28578     01 18 0E F2 | 	cmp	arg04, #1 wz
2857c     B8 03 90 5D |  if_ne	jmp	#LR__4107
28580     08 12 06 F6 | 	mov	arg01, #8
28584     AA 15 06 F6 | 	mov	arg02, #426
28588     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
2858c     FD FA E1 F8 | 	getbyte	result1, result1, #0
28590     01 FA 0D F2 | 	cmp	result1, #1 wz
28594     98 01 90 5D |  if_ne	jmp	#LR__4093
28598     14 4E 05 F1 | 	add	fp, #20
2859c     A7 12 02 F6 | 	mov	arg01, fp
285a0     14 4E 85 F1 | 	sub	fp, #20
285a4     04 14 06 F6 | 	mov	arg02, #4
285a8     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1153
285ac     16 4E 05 F1 | 	add	fp, #22
285b0     A7 24 C2 FA | 	rdbyte	local04, fp
285b4     16 4E 85 F1 | 	sub	fp, #22
285b8     01 24 0E F2 | 	cmp	local04, #1 wz
285bc     17 4E 05 A1 |  if_e	add	fp, #23
285c0     A7 22 C2 AA |  if_e	rdbyte	local03, fp
285c4     17 4E 85 A1 |  if_e	sub	fp, #23
285c8     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
285cc     68 03 90 5D |  if_ne	jmp	#LR__4106
285d0                 | ' 				for (tmr = 1000; tmr; tmr--) {
285d0     18 4E 05 F1 | 	add	fp, #24
285d4     01 00 80 FF 
285d8     A7 D0 6B FC | 	wrlong	##1000, fp
285dc     18 4E 85 F1 | 	sub	fp, #24
285e0                 | LR__4090
285e0     18 4E 05 F1 | 	add	fp, #24
285e4     A7 1E 0A FB | 	rdlong	local01, fp wz
285e8     18 4E 85 F1 | 	sub	fp, #24
285ec     3C 00 90 AD |  if_e	jmp	#LR__4091
285f0     A9 12 06 F6 | 	mov	arg01, #169
285f4     1E 14 C6 F9 | 	decod	arg02, #30
285f8     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
285fc     FD 24 02 F6 | 	mov	local04, result1
28600     07 24 4E F7 | 	zerox	local04, #7 wz
28604     24 00 90 AD |  if_e	jmp	#LR__4091
28608     01 00 00 FF 
2860c     E8 13 06 F6 | 	mov	arg01, ##1000
28610     10 93 BF FD | 	call	#__system___waitus
28614     18 4E 05 F1 | 	add	fp, #24
28618     A7 24 02 FB | 	rdlong	local04, fp
2861c     01 24 86 F1 | 	sub	local04, #1
28620     A7 24 62 FC | 	wrlong	local04, fp
28624     18 4E 85 F1 | 	sub	fp, #24
28628     B4 FF 9F FD | 	jmp	#LR__4090
2862c                 | LR__4091
2862c     18 4E 05 F1 | 	add	fp, #24
28630     A7 24 0A FB | 	rdlong	local04, fp wz
28634     18 4E 85 F1 | 	sub	fp, #24
28638     4C 00 90 AD |  if_e	jmp	#LR__4092
2863c     3A 12 06 F6 | 	mov	arg01, #58
28640     00 14 06 F6 | 	mov	arg02, #0
28644     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
28648     FD 22 02 F6 | 	mov	local03, result1
2864c     07 22 4E F7 | 	zerox	local03, #7 wz
28650     34 00 90 5D |  if_ne	jmp	#LR__4092
28654     14 4E 05 F1 | 	add	fp, #20
28658     A7 12 02 F6 | 	mov	arg01, fp
2865c     14 4E 85 F1 | 	sub	fp, #20
28660     04 14 06 F6 | 	mov	arg02, #4
28664     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1153
28668     14 4E 05 F1 | 	add	fp, #20
2866c     A7 1E C2 FA | 	rdbyte	local01, fp
28670     40 1E CE F7 | 	test	local01, #64 wz
28674     0C 24 06 56 |  if_ne	mov	local04, #12
28678     04 24 06 A6 |  if_e	mov	local04, #4
2867c     08 4E 85 F1 | 	sub	fp, #8
28680     A7 24 42 FC | 	wrbyte	local04, fp
28684     0C 4E 85 F1 | 	sub	fp, #12
28688                 | LR__4092
28688     14 24 06 FB | 	rdlong	local04, #20
2868c     18 4E 05 F1 | 	add	fp, #24
28690     A7 24 62 FC | 	wrlong	local04, fp
28694     0C 4E 05 F1 | 	add	fp, #12
28698     A7 24 02 FB | 	rdlong	local04, fp
2869c     1B 24 26 F4 | 	bith	local04, #27
286a0     A7 24 62 FC | 	wrlong	local04, fp
286a4     0C 4E 85 F1 | 	sub	fp, #12
286a8     A7 24 02 FB | 	rdlong	local04, fp
286ac     18 4E 85 F1 | 	sub	fp, #24
286b0     68 78 04 FF 
286b4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
286b8     1C 4E 05 C1 |  if_b	add	fp, #28
286bc     00 01 80 CF 
286c0     A7 08 68 CC |  if_b	wrlong	##131076, fp
286c4     1C 4E 85 C1 |  if_b	sub	fp, #28
286c8     6C 02 90 CD |  if_b	jmp	#LR__4106
286cc     18 4E 05 F1 | 	add	fp, #24
286d0     A7 24 02 FB | 	rdlong	local04, fp
286d4     18 4E 85 F1 | 	sub	fp, #24
286d8     E1 F5 05 FF 
286dc     01 24 16 F2 | 	cmp	local04, ##200000001 wc
286e0     1C 4E 05 C1 |  if_b	add	fp, #28
286e4     00 01 80 CF 
286e8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
286ec     1C 4E 85 C1 |  if_b	sub	fp, #28
286f0     44 02 90 CD |  if_b	jmp	#LR__4106
286f4     18 4E 05 F1 | 	add	fp, #24
286f8     A7 24 02 FB | 	rdlong	local04, fp
286fc     18 4E 85 F1 | 	sub	fp, #24
28700     3B 58 08 FF 
28704     01 24 16 F2 | 	cmp	local04, ##280000001 wc
28708     1C 4E 05 C1 |  if_b	add	fp, #28
2870c     00 01 80 CF 
28710     A7 0C 68 CC |  if_b	wrlong	##131078, fp
28714     1C 4E 85 C1 |  if_b	sub	fp, #28
28718     1C 02 90 CD |  if_b	jmp	#LR__4106
2871c     1C 4E 05 F1 | 	add	fp, #28
28720     80 01 80 FF 
28724     A7 10 68 FC | 	wrlong	##196616, fp
28728     1C 4E 85 F1 | 	sub	fp, #28
2872c     08 02 90 FD | 	jmp	#LR__4106
28730                 | LR__4093
28730     A9 12 06 F6 | 	mov	arg01, #169
28734     00 14 06 F6 | 	mov	arg02, #0
28738     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
2873c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
28740     02 24 16 F2 | 	cmp	local04, #2 wc
28744     18 00 90 3D |  if_ae	jmp	#LR__4094
28748     0C 4E 05 F1 | 	add	fp, #12
2874c     A7 04 48 FC | 	wrbyte	#2, fp
28750     04 4E 05 F1 | 	add	fp, #4
28754     A7 52 49 FC | 	wrbyte	#169, fp
28758     10 4E 85 F1 | 	sub	fp, #16
2875c     14 00 90 FD | 	jmp	#LR__4095
28760                 | LR__4094
28760     0C 4E 05 F1 | 	add	fp, #12
28764     A7 02 48 FC | 	wrbyte	#1, fp
28768     04 4E 05 F1 | 	add	fp, #4
2876c     A7 02 48 FC | 	wrbyte	#1, fp
28770     10 4E 85 F1 | 	sub	fp, #16
28774                 | LR__4095
28774                 | ' 				ty =  0x01 ; cmd =  (1) ;
28774                 | ' 			}
28774                 | ' 			for (tmr = 1000; tmr; tmr--) {
28774     18 4E 05 F1 | 	add	fp, #24
28778     01 00 80 FF 
2877c     A7 D0 6B FC | 	wrlong	##1000, fp
28780     18 4E 85 F1 | 	sub	fp, #24
28784                 | LR__4096
28784     18 4E 05 F1 | 	add	fp, #24
28788     A7 22 0A FB | 	rdlong	local03, fp wz
2878c     18 4E 85 F1 | 	sub	fp, #24
28790     44 00 90 AD |  if_e	jmp	#LR__4097
28794     10 4E 05 F1 | 	add	fp, #16
28798     A7 12 C2 FA | 	rdbyte	arg01, fp
2879c     10 4E 85 F1 | 	sub	fp, #16
287a0     00 14 06 F6 | 	mov	arg02, #0
287a4     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
287a8     FD 24 02 F6 | 	mov	local04, result1
287ac     07 24 4E F7 | 	zerox	local04, #7 wz
287b0     24 00 90 AD |  if_e	jmp	#LR__4097
287b4     01 00 00 FF 
287b8     E8 13 06 F6 | 	mov	arg01, ##1000
287bc     64 91 BF FD | 	call	#__system___waitus
287c0     18 4E 05 F1 | 	add	fp, #24
287c4     A7 24 02 FB | 	rdlong	local04, fp
287c8     01 24 86 F1 | 	sub	local04, #1
287cc     A7 24 62 FC | 	wrlong	local04, fp
287d0     18 4E 85 F1 | 	sub	fp, #24
287d4     AC FF 9F FD | 	jmp	#LR__4096
287d8                 | LR__4097
287d8     18 4E 05 F1 | 	add	fp, #24
287dc     A7 24 0A FB | 	rdlong	local04, fp wz
287e0     18 4E 85 F1 | 	sub	fp, #24
287e4     14 00 90 AD |  if_e	jmp	#LR__4098
287e8     10 12 06 F6 | 	mov	arg01, #16
287ec     09 14 C6 F9 | 	decod	arg02, #9
287f0     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1177
287f4     07 FA 4D F7 | 	zerox	result1, #7 wz
287f8     0C 00 90 AD |  if_e	jmp	#LR__4099
287fc                 | LR__4098
287fc     0C 4E 05 F1 | 	add	fp, #12
28800     A7 00 48 FC | 	wrbyte	#0, fp
28804     0C 4E 85 F1 | 	sub	fp, #12
28808                 | LR__4099
28808     14 24 06 FB | 	rdlong	local04, #20
2880c     18 4E 05 F1 | 	add	fp, #24
28810     A7 24 62 FC | 	wrlong	local04, fp
28814     18 4E 85 F1 | 	sub	fp, #24
28818     F0 FA 02 FF 
2881c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
28820     18 00 90 3D |  if_ae	jmp	#LR__4100
28824     24 4E 05 F1 | 	add	fp, #36
28828     A7 24 02 FB | 	rdlong	local04, fp
2882c     1B 24 26 F4 | 	bith	local04, #27
28830     A7 24 62 FC | 	wrlong	local04, fp
28834     24 4E 85 F1 | 	sub	fp, #36
28838     2C 00 90 FD | 	jmp	#LR__4101
2883c                 | LR__4100
2883c     18 4E 05 F1 | 	add	fp, #24
28840     A7 24 02 FB | 	rdlong	local04, fp
28844     18 4E 85 F1 | 	sub	fp, #24
28848     E1 F5 05 FF 
2884c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
28850     24 4E 05 C1 |  if_b	add	fp, #36
28854     A7 24 02 CB |  if_b	rdlong	local04, fp
28858     80 00 04 CF 
2885c     00 24 46 C5 |  if_b	or	local04, ##134283264
28860     A7 24 62 CC |  if_b	wrlong	local04, fp
28864     24 4E 85 C1 |  if_b	sub	fp, #36
28868                 | LR__4101
28868     18 4E 05 F1 | 	add	fp, #24
2886c     A7 24 02 FB | 	rdlong	local04, fp
28870     18 4E 85 F1 | 	sub	fp, #24
28874     F0 FA 02 FF 
28878     01 25 16 F2 | 	cmp	local04, ##100000001 wc
2887c     1C 4E 05 C1 |  if_b	add	fp, #28
28880     00 01 80 CF 
28884     A7 08 68 CC |  if_b	wrlong	##131076, fp
28888     1C 4E 85 C1 |  if_b	sub	fp, #28
2888c     A8 00 90 CD |  if_b	jmp	#LR__4105
28890     18 4E 05 F1 | 	add	fp, #24
28894     A7 24 02 FB | 	rdlong	local04, fp
28898     18 4E 85 F1 | 	sub	fp, #24
2889c     68 78 04 FF 
288a0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
288a4     1C 4E 05 C1 |  if_b	add	fp, #28
288a8     80 01 80 CF 
288ac     A7 0C 68 CC |  if_b	wrlong	##196614, fp
288b0     1C 4E 85 C1 |  if_b	sub	fp, #28
288b4     80 00 90 CD |  if_b	jmp	#LR__4104
288b8     18 4E 05 F1 | 	add	fp, #24
288bc     A7 24 02 FB | 	rdlong	local04, fp
288c0     18 4E 85 F1 | 	sub	fp, #24
288c4     E1 F5 05 FF 
288c8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
288cc     1C 4E 05 C1 |  if_b	add	fp, #28
288d0     00 02 80 CF 
288d4     A7 10 68 CC |  if_b	wrlong	##262152, fp
288d8     1C 4E 85 C1 |  if_b	sub	fp, #28
288dc     58 00 90 CD |  if_b	jmp	#LR__4103
288e0     18 4E 05 F1 | 	add	fp, #24
288e4     A7 24 02 FB | 	rdlong	local04, fp
288e8     18 4E 85 F1 | 	sub	fp, #24
288ec     59 73 07 FF 
288f0     81 24 16 F2 | 	cmp	local04, ##250000001 wc
288f4     1C 4E 05 C1 |  if_b	add	fp, #28
288f8     80 02 80 CF 
288fc     A7 14 68 CC |  if_b	wrlong	##327690, fp
28900     1C 4E 85 C1 |  if_b	sub	fp, #28
28904     30 00 90 CD |  if_b	jmp	#LR__4102
28908     18 4E 05 F1 | 	add	fp, #24
2890c     A7 24 02 FB | 	rdlong	local04, fp
28910     18 4E 85 F1 | 	sub	fp, #24
28914     D1 F0 08 FF 
28918     01 25 16 F2 | 	cmp	local04, ##300000001 wc
2891c     1C 4E 05 C1 |  if_b	add	fp, #28
28920     00 03 80 CF 
28924     A7 18 68 CC |  if_b	wrlong	##393228, fp
28928     1C 4E 85 F3 | 	sumc	fp, #28
2892c     80 03 80 3F 
28930     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
28934     1C 4E 85 31 |  if_ae	sub	fp, #28
28938                 | LR__4102
28938                 | LR__4103
28938                 | LR__4104
28938                 | LR__4105
28938                 | LR__4106
28938                 | LR__4107
28938     0C 4E 05 F1 | 	add	fp, #12
2893c     A7 24 C2 FA | 	rdbyte	local04, fp
28940     01 00 00 FF 
28944     21 E4 05 F1 | 	add	objptr, ##545
28948     F2 24 42 FC | 	wrbyte	local04, objptr
2894c     A7 1E CA FA | 	rdbyte	local01, fp wz
28950     00 24 06 56 |  if_ne	mov	local04, #0
28954     01 24 06 A6 |  if_e	mov	local04, #1
28958     20 4E 05 F1 | 	add	fp, #32
2895c     A7 24 42 FC | 	wrbyte	local04, fp
28960     A7 24 C2 FA | 	rdbyte	local04, fp
28964     2C 4E 85 F1 | 	sub	fp, #44
28968     01 E4 85 F1 | 	sub	objptr, #1
2896c     F2 24 42 FC | 	wrbyte	local04, objptr
28970     01 00 00 FF 
28974     20 E4 85 F1 | 	sub	objptr, ##544
28978     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1163
2897c     34 4E 05 F1 | 	add	fp, #52
28980     A7 12 02 FB | 	rdlong	arg01, fp
28984     18 4E 85 F1 | 	sub	fp, #24
28988     A7 14 02 FB | 	rdlong	arg02, fp
2898c     09 15 12 FC | 	wxpin	arg02, arg01
28990     1C 4E 05 F1 | 	add	fp, #28
28994     A7 12 02 FB | 	rdlong	arg01, fp
28998     14 4E 85 F1 | 	sub	fp, #20
2899c     A7 14 02 FB | 	rdlong	arg02, fp
289a0     09 15 02 FC | 	wrpin	arg02, arg01
289a4                 | ' 
289a4                 | ' 		}
289a4                 | ' 	}
289a4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
289a4                 | ' 	CardType = ty;
289a4                 | ' 	s = ty ? 0 :  0x01 ;
289a4                 | ' 	Stat = s;
289a4                 | ' 
289a4                 | ' 	deselect();
289a4                 | ' 
289a4                 | ' 
289a4                 | ' 	_wxpin( PIN_CLK, ck_div );
289a4                 | ' 	_wrpin( PIN_DI, spm_tx );
289a4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
289a4                 | ' 	return s;
289a4     08 4E 05 F1 | 	add	fp, #8
289a8     A7 FA C1 FA | 	rdbyte	result1, fp
289ac     2C 4E 85 F1 | 	sub	fp, #44
289b0                 | LR__4108
289b0     A7 F0 03 F6 | 	mov	ptra, fp
289b4     B2 00 A0 FD | 	call	#popregs_
289b8                 | _fatfs_cc_disk_initialize_ret
289b8     2D 00 64 FD | 	ret
289bc                 | 
289bc                 | _fatfs_cc_disk_read
289bc     05 4A 05 F6 | 	mov	COUNT_, #5
289c0     A8 00 A0 FD | 	call	#pushregs_
289c4     0A 1F 02 F6 | 	mov	local01, arg02
289c8     0B 21 02 F6 | 	mov	local02, arg03
289cc     0C 23 02 F6 | 	mov	local03, arg04
289d0     00 12 0E F2 | 	cmp	arg01, #0 wz
289d4     01 FA 05 56 |  if_ne	mov	result1, #1
289d8                 | ' 
289d8                 | ' 	return Stat;
289d8     01 00 00 AF 
289dc     20 E4 05 A1 |  if_e	add	objptr, ##544
289e0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
289e4     01 00 00 AF 
289e8     20 E4 85 A1 |  if_e	sub	objptr, ##544
289ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
289f0     01 FA CD F7 | 	test	result1, #1 wz
289f4     03 FA 05 56 |  if_ne	mov	result1, #3
289f8     84 00 90 5D |  if_ne	jmp	#LR__4112
289fc     01 00 00 FF 
28a00     21 E4 05 F1 | 	add	objptr, ##545
28a04     F2 24 C2 FA | 	rdbyte	local04, objptr
28a08     01 00 00 FF 
28a0c     21 E4 85 F1 | 	sub	objptr, ##545
28a10     08 24 CE F7 | 	test	local04, #8 wz
28a14     09 20 66 A0 |  if_e	shl	local02, #9
28a18     02 22 16 F2 | 	cmp	local03, #2 wc
28a1c     12 24 06 36 |  if_ae	mov	local04, #18
28a20     11 24 06 C6 |  if_b	mov	local04, #17
28a24     10 15 02 F6 | 	mov	arg02, local02
28a28     12 13 02 F6 | 	mov	arg01, local04
28a2c     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1177
28a30     FD 26 02 F6 | 	mov	local05, result1
28a34     07 26 4E F7 | 	zerox	local05, #7 wz
28a38     30 00 90 5D |  if_ne	jmp	#LR__4111
28a3c                 | ' 		do {
28a3c                 | LR__4110
28a3c     0F 13 02 F6 | 	mov	arg01, local01
28a40     09 14 C6 F9 | 	decod	arg02, #9
28a44     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1171
28a48     00 FA 0D F2 | 	cmp	result1, #0 wz
28a4c     01 00 00 5F 
28a50     00 1E 06 51 |  if_ne	add	local01, ##512
28a54     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4110
28a58     12 25 E2 F8 | 	getbyte	local04, local04, #0
28a5c     12 24 0E F2 | 	cmp	local04, #18 wz
28a60     0C 12 06 A6 |  if_e	mov	arg01, #12
28a64     00 14 06 A6 |  if_e	mov	arg02, #0
28a68     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1177
28a6c                 | LR__4111
28a6c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1163
28a70                 | ' 	}
28a70                 | ' 	deselect();
28a70                 | ' 
28a70                 | ' 	return count ? RES_ERROR : RES_OK;
28a70     00 22 0E F2 | 	cmp	local03, #0 wz
28a74     01 26 06 56 |  if_ne	mov	local05, #1
28a78     00 26 06 A6 |  if_e	mov	local05, #0
28a7c     13 FB 01 F6 | 	mov	result1, local05
28a80                 | LR__4112
28a80     A7 F0 03 F6 | 	mov	ptra, fp
28a84     B2 00 A0 FD | 	call	#popregs_
28a88                 | _fatfs_cc_disk_read_ret
28a88     2D 00 64 FD | 	ret
28a8c                 | 
28a8c                 | _fatfs_cc_disk_write
28a8c     04 4A 05 F6 | 	mov	COUNT_, #4
28a90     A8 00 A0 FD | 	call	#pushregs_
28a94     0A 1F 02 F6 | 	mov	local01, arg02
28a98     0C 21 02 F6 | 	mov	local02, arg04
28a9c     0B 23 02 F6 | 	mov	local03, arg03
28aa0     00 12 0E F2 | 	cmp	arg01, #0 wz
28aa4     01 FA 05 56 |  if_ne	mov	result1, #1
28aa8                 | ' 
28aa8                 | ' 	return Stat;
28aa8     01 00 00 AF 
28aac     20 E4 05 A1 |  if_e	add	objptr, ##544
28ab0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28ab4     01 00 00 AF 
28ab8     20 E4 85 A1 |  if_e	sub	objptr, ##544
28abc     FD FA E1 F8 | 	getbyte	result1, result1, #0
28ac0     01 FA CD F7 | 	test	result1, #1 wz
28ac4     03 FA 05 56 |  if_ne	mov	result1, #3
28ac8     D4 00 90 5D |  if_ne	jmp	#LR__4124
28acc     01 00 00 FF 
28ad0     21 E4 05 F1 | 	add	objptr, ##545
28ad4     F2 16 C2 FA | 	rdbyte	arg03, objptr
28ad8     01 00 00 FF 
28adc     21 E4 85 F1 | 	sub	objptr, ##545
28ae0     08 16 CE F7 | 	test	arg03, #8 wz
28ae4     09 22 66 A0 |  if_e	shl	local03, #9
28ae8     01 20 0E F2 | 	cmp	local02, #1 wz
28aec     30 00 90 5D |  if_ne	jmp	#LR__4120
28af0     18 12 06 F6 | 	mov	arg01, #24
28af4     11 15 02 F6 | 	mov	arg02, local03
28af8     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1177
28afc     FD 24 02 F6 | 	mov	local04, result1
28b00     07 24 4E F7 | 	zerox	local04, #7 wz
28b04     84 00 90 5D |  if_ne	jmp	#LR__4123
28b08     0F 13 02 F6 | 	mov	arg01, local01
28b0c     FE 14 06 F6 | 	mov	arg02, #254
28b10     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1173
28b14     00 FA 0D F2 | 	cmp	result1, #0 wz
28b18     00 20 06 56 |  if_ne	mov	local02, #0
28b1c     6C 00 90 FD | 	jmp	#LR__4123
28b20                 | LR__4120
28b20     01 00 00 FF 
28b24     21 E4 05 F1 | 	add	objptr, ##545
28b28     F2 24 C2 FA | 	rdbyte	local04, objptr
28b2c     01 00 00 FF 
28b30     21 E4 85 F1 | 	sub	objptr, ##545
28b34     06 24 CE F7 | 	test	local04, #6 wz
28b38     97 12 06 56 |  if_ne	mov	arg01, #151
28b3c     10 15 02 56 |  if_ne	mov	arg02, local02
28b40     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1177
28b44     11 15 02 F6 | 	mov	arg02, local03
28b48     19 12 06 F6 | 	mov	arg01, #25
28b4c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1177
28b50     FD 24 02 F6 | 	mov	local04, result1
28b54     07 24 4E F7 | 	zerox	local04, #7 wz
28b58     30 00 90 5D |  if_ne	jmp	#LR__4122
28b5c                 | ' 			do {
28b5c                 | LR__4121
28b5c     0F 13 02 F6 | 	mov	arg01, local01
28b60     FC 14 06 F6 | 	mov	arg02, #252
28b64     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1173
28b68     00 FA 0D F2 | 	cmp	result1, #0 wz
28b6c     01 00 00 5F 
28b70     00 1E 06 51 |  if_ne	add	local01, ##512
28b74     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4121
28b78     00 12 06 F6 | 	mov	arg01, #0
28b7c     FD 14 06 F6 | 	mov	arg02, #253
28b80     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1173
28b84     00 FA 0D F2 | 	cmp	result1, #0 wz
28b88     01 20 06 A6 |  if_e	mov	local02, #1
28b8c                 | LR__4122
28b8c                 | LR__4123
28b8c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1163
28b90                 | ' 				count = 1;
28b90                 | ' 		}
28b90                 | ' 	}
28b90                 | ' 	deselect();
28b90                 | ' 
28b90                 | ' 	return count ? RES_ERROR : RES_OK;
28b90     00 20 0E F2 | 	cmp	local02, #0 wz
28b94     01 24 06 56 |  if_ne	mov	local04, #1
28b98     00 24 06 A6 |  if_e	mov	local04, #0
28b9c     12 FB 01 F6 | 	mov	result1, local04
28ba0                 | LR__4124
28ba0     A7 F0 03 F6 | 	mov	ptra, fp
28ba4     B2 00 A0 FD | 	call	#popregs_
28ba8                 | _fatfs_cc_disk_write_ret
28ba8     2D 00 64 FD | 	ret
28bac                 | 
28bac                 | _fatfs_cc_disk_ioctl
28bac     01 4A 05 F6 | 	mov	COUNT_, #1
28bb0     A8 00 A0 FD | 	call	#pushregs_
28bb4     30 F0 07 F1 | 	add	ptra, #48
28bb8     04 4E 05 F1 | 	add	fp, #4
28bbc     A7 12 42 FC | 	wrbyte	arg01, fp
28bc0     04 4E 05 F1 | 	add	fp, #4
28bc4     A7 14 42 FC | 	wrbyte	arg02, fp
28bc8     04 4E 05 F1 | 	add	fp, #4
28bcc     A7 16 62 FC | 	wrlong	arg03, fp
28bd0     08 4E 85 F1 | 	sub	fp, #8
28bd4     A7 12 CA FA | 	rdbyte	arg01, fp wz
28bd8     04 4E 85 F1 | 	sub	fp, #4
28bdc     01 FA 05 56 |  if_ne	mov	result1, #1
28be0                 | ' 
28be0                 | ' 	return Stat;
28be0     01 00 00 AF 
28be4     20 E4 05 A1 |  if_e	add	objptr, ##544
28be8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28bec     01 00 00 AF 
28bf0     20 E4 85 A1 |  if_e	sub	objptr, ##544
28bf4     FD FA E1 F8 | 	getbyte	result1, result1, #0
28bf8     01 FA CD F7 | 	test	result1, #1 wz
28bfc     03 FA 05 56 |  if_ne	mov	result1, #3
28c00     E4 01 90 5D |  if_ne	jmp	#LR__4138
28c04     10 4E 05 F1 | 	add	fp, #16
28c08     A7 02 68 FC | 	wrlong	#1, fp
28c0c                 | ' 
28c0c                 | ' 	res = RES_ERROR;
28c0c                 | ' 	switch (ctrl) {
28c0c     08 4E 85 F1 | 	sub	fp, #8
28c10     A7 1E C2 FA | 	rdbyte	local01, fp
28c14     08 4E 85 F1 | 	sub	fp, #8
28c18     04 1E 26 F3 | 	fle	local01, #4
28c1c     30 1E 62 FD | 	jmprel	local01
28c20                 | LR__4130
28c20     10 00 90 FD | 	jmp	#LR__4131
28c24     24 00 90 FD | 	jmp	#LR__4132
28c28     A0 01 90 FD | 	jmp	#LR__4136
28c2c     80 01 90 FD | 	jmp	#LR__4135
28c30     98 01 90 FD | 	jmp	#LR__4136
28c34                 | LR__4131
28c34     B4 79 B0 FD | 	call	#_fatfs_cc_select_1167
28c38     00 FA 0D F2 | 	cmp	result1, #0 wz
28c3c     10 4E 05 51 |  if_ne	add	fp, #16
28c40     A7 00 68 5C |  if_ne	wrlong	#0, fp
28c44     10 4E 85 51 |  if_ne	sub	fp, #16
28c48                 | ' 			break;
28c48     8C 01 90 FD | 	jmp	#LR__4137
28c4c                 | LR__4132
28c4c     09 12 06 F6 | 	mov	arg01, #9
28c50     00 14 06 F6 | 	mov	arg02, #0
28c54     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1177
28c58     FD 1E 02 F6 | 	mov	local01, result1
28c5c     07 1E 4E F7 | 	zerox	local01, #7 wz
28c60     74 01 90 5D |  if_ne	jmp	#LR__4137
28c64     18 4E 05 F1 | 	add	fp, #24
28c68     A7 12 02 F6 | 	mov	arg01, fp
28c6c     18 4E 85 F1 | 	sub	fp, #24
28c70     10 14 06 F6 | 	mov	arg02, #16
28c74     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1171
28c78     00 FA 0D F2 | 	cmp	result1, #0 wz
28c7c     58 01 90 AD |  if_e	jmp	#LR__4137
28c80     18 4E 05 F1 | 	add	fp, #24
28c84     A7 1E C2 FA | 	rdbyte	local01, fp
28c88     18 4E 85 F1 | 	sub	fp, #24
28c8c     06 1E 46 F0 | 	shr	local01, #6
28c90     01 1E 0E F2 | 	cmp	local01, #1 wz
28c94     5C 00 90 5D |  if_ne	jmp	#LR__4133
28c98     21 4E 05 F1 | 	add	fp, #33
28c9c     A7 1E C2 FA | 	rdbyte	local01, fp
28ca0     01 4E 85 F1 | 	sub	fp, #1
28ca4     A7 FA C1 FA | 	rdbyte	result1, fp
28ca8     FD FA 31 F9 | 	getword	result1, result1, #0
28cac     08 FA 65 F0 | 	shl	result1, #8
28cb0     FD 1E 02 F1 | 	add	local01, result1
28cb4     01 4E 85 F1 | 	sub	fp, #1
28cb8     A7 FA C1 FA | 	rdbyte	result1, fp
28cbc     3F FA 05 F5 | 	and	result1, #63
28cc0     10 FA 65 F0 | 	shl	result1, #16
28cc4     FD 1E 02 F1 | 	add	local01, result1
28cc8     01 1E 06 F1 | 	add	local01, #1
28ccc     09 4E 05 F1 | 	add	fp, #9
28cd0     A7 1E 62 FC | 	wrlong	local01, fp
28cd4     1C 4E 85 F1 | 	sub	fp, #28
28cd8     A7 1E 02 FB | 	rdlong	local01, fp
28cdc     1C 4E 05 F1 | 	add	fp, #28
28ce0     A7 FA 01 FB | 	rdlong	result1, fp
28ce4     28 4E 85 F1 | 	sub	fp, #40
28ce8     0A FA 65 F0 | 	shl	result1, #10
28cec     0F FB 61 FC | 	wrlong	result1, local01
28cf0     AC 00 90 FD | 	jmp	#LR__4134
28cf4                 | LR__4133
28cf4     1D 4E 05 F1 | 	add	fp, #29
28cf8     A7 1E C2 FA | 	rdbyte	local01, fp
28cfc     0F 1F 42 F8 | 	getnib	local01, local01, #0
28d00     05 4E 05 F1 | 	add	fp, #5
28d04     A7 FA C1 FA | 	rdbyte	result1, fp
28d08     80 FA 05 F5 | 	and	result1, #128
28d0c     07 FA C5 F0 | 	sar	result1, #7
28d10     FD 1E 02 F1 | 	add	local01, result1
28d14     01 4E 85 F1 | 	sub	fp, #1
28d18     A7 FA C1 FA | 	rdbyte	result1, fp
28d1c     03 FA 05 F5 | 	and	result1, #3
28d20     01 FA 65 F0 | 	shl	result1, #1
28d24     FD 1E 02 F1 | 	add	local01, result1
28d28     02 1E 06 F1 | 	add	local01, #2
28d2c     0D 4E 85 F1 | 	sub	fp, #13
28d30     A7 1E 42 FC | 	wrbyte	local01, fp
28d34     0C 4E 05 F1 | 	add	fp, #12
28d38     A7 1E C2 FA | 	rdbyte	local01, fp
28d3c     06 1E 46 F0 | 	shr	local01, #6
28d40     01 4E 85 F1 | 	sub	fp, #1
28d44     A7 FA C1 FA | 	rdbyte	result1, fp
28d48     FD FA 31 F9 | 	getword	result1, result1, #0
28d4c     02 FA 65 F0 | 	shl	result1, #2
28d50     FD 1E 02 F1 | 	add	local01, result1
28d54     01 4E 85 F1 | 	sub	fp, #1
28d58     A7 FA C1 FA | 	rdbyte	result1, fp
28d5c     03 FA 05 F5 | 	and	result1, #3
28d60     FD FA 31 F9 | 	getword	result1, result1, #0
28d64     0A FA 65 F0 | 	shl	result1, #10
28d68     FD 1E 02 F1 | 	add	local01, result1
28d6c     01 1E 06 F1 | 	add	local01, #1
28d70     0A 4E 05 F1 | 	add	fp, #10
28d74     A7 1E 62 FC | 	wrlong	local01, fp
28d78     1C 4E 85 F1 | 	sub	fp, #28
28d7c     A7 1E 02 FB | 	rdlong	local01, fp
28d80     1C 4E 05 F1 | 	add	fp, #28
28d84     A7 FA 01 FB | 	rdlong	result1, fp
28d88     14 4E 85 F1 | 	sub	fp, #20
28d8c     A7 16 C2 FA | 	rdbyte	arg03, fp
28d90     14 4E 85 F1 | 	sub	fp, #20
28d94     09 16 86 F1 | 	sub	arg03, #9
28d98     0B FB 61 F0 | 	shl	result1, arg03
28d9c     0F FB 61 FC | 	wrlong	result1, local01
28da0                 | LR__4134
28da0     10 4E 05 F1 | 	add	fp, #16
28da4     A7 00 68 FC | 	wrlong	#0, fp
28da8     10 4E 85 F1 | 	sub	fp, #16
28dac                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
28dac                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
28dac                 | ' 					*(LBA_t*)buff = cs << (n - 9);
28dac                 | ' 				}
28dac                 | ' 				res = RES_OK;
28dac                 | ' 			}
28dac                 | ' 			break;
28dac     28 00 90 FD | 	jmp	#LR__4137
28db0                 | LR__4135
28db0     0C 4E 05 F1 | 	add	fp, #12
28db4     A7 1E 02 FB | 	rdlong	local01, fp
28db8     0F 01 69 FC | 	wrlong	#128, local01
28dbc     04 4E 05 F1 | 	add	fp, #4
28dc0     A7 00 68 FC | 	wrlong	#0, fp
28dc4     10 4E 85 F1 | 	sub	fp, #16
28dc8                 | ' 			*(DWORD*)buff = 128;
28dc8                 | ' 			res = RES_OK;
28dc8                 | ' 			break;
28dc8     0C 00 90 FD | 	jmp	#LR__4137
28dcc                 | LR__4136
28dcc     10 4E 05 F1 | 	add	fp, #16
28dd0     A7 08 68 FC | 	wrlong	#4, fp
28dd4     10 4E 85 F1 | 	sub	fp, #16
28dd8                 | LR__4137
28dd8     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1163
28ddc                 | ' 			res = RES_PARERR;
28ddc                 | ' 	}
28ddc                 | ' 
28ddc                 | ' 	deselect();
28ddc                 | ' 
28ddc                 | ' 	return res;
28ddc     10 4E 05 F1 | 	add	fp, #16
28de0     A7 FA 01 FB | 	rdlong	result1, fp
28de4     10 4E 85 F1 | 	sub	fp, #16
28de8                 | LR__4138
28de8     A7 F0 03 F6 | 	mov	ptra, fp
28dec     B2 00 A0 FD | 	call	#popregs_
28df0                 | _fatfs_cc_disk_ioctl_ret
28df0     2D 00 64 FD | 	ret
28df4                 | 
28df4                 | _fatfs_cc_disk_setpins
28df4     00 12 0E F2 | 	cmp	arg01, #0 wz
28df8     01 FA 65 56 |  if_ne	neg	result1, #1
28dfc     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
28e00     01 00 00 FF 
28e04     10 E4 05 F1 | 	add	objptr, ##528
28e08     F2 14 62 FC | 	wrlong	arg02, objptr
28e0c     04 E4 05 F1 | 	add	objptr, #4
28e10     F2 16 62 FC | 	wrlong	arg03, objptr
28e14     04 E4 05 F1 | 	add	objptr, #4
28e18     F2 18 62 FC | 	wrlong	arg04, objptr
28e1c     04 E4 05 F1 | 	add	objptr, #4
28e20     F2 1A 62 FC | 	wrlong	arg05, objptr
28e24     01 00 00 FF 
28e28     1C E4 85 F1 | 	sub	objptr, ##540
28e2c     00 FA 05 F6 | 	mov	result1, #0
28e30                 | _fatfs_cc_disk_setpins_ret
28e30     2D 00 64 FD | 	ret
28e34                 | 
28e34                 | _fatfs_cc_tchar2uni
28e34     09 01 02 FB | 	rdlong	_var01, arg01
28e38     00 03 02 F6 | 	mov	_var02, _var01
28e3c     01 00 06 F1 | 	add	_var01, #1
28e40     00 05 02 F6 | 	mov	_var03, _var01
28e44     01 07 C2 FA | 	rdbyte	_var04, _var02
28e48     80 06 CE F7 | 	test	_var04, #128 wz
28e4c     E8 00 90 AD |  if_e	jmp	#LR__4147
28e50     03 09 02 F6 | 	mov	_var05, _var04
28e54     E0 08 06 F5 | 	and	_var05, #224
28e58     C0 08 0E F2 | 	cmp	_var05, #192 wz
28e5c     1F 06 06 A5 |  if_e	and	_var04, #31
28e60     01 0A 06 A6 |  if_e	mov	_var06, #1
28e64     34 00 90 AD |  if_e	jmp	#LR__4141
28e68     03 09 02 F6 | 	mov	_var05, _var04
28e6c     F0 08 06 F5 | 	and	_var05, #240
28e70     E0 08 0E F2 | 	cmp	_var05, #224 wz
28e74     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
28e78     02 0A 06 A6 |  if_e	mov	_var06, #2
28e7c     1C 00 90 AD |  if_e	jmp	#LR__4140
28e80     03 09 02 F6 | 	mov	_var05, _var04
28e84     F8 08 06 F5 | 	and	_var05, #248
28e88     F0 08 0E F2 | 	cmp	_var05, #240 wz
28e8c     07 06 06 A5 |  if_e	and	_var04, #7
28e90     03 0A 06 A6 |  if_e	mov	_var06, #3
28e94                 | ' 			return 0xFFFFFFFF;
28e94     01 FA 65 56 |  if_ne	neg	result1, #1
28e98     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28e9c                 | LR__4140
28e9c                 | LR__4141
28e9c                 | ' 		}
28e9c                 | ' 		do {
28e9c                 | LR__4142
28e9c     02 0D C2 FA | 	rdbyte	_var07, _var03
28ea0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
28ea4     C0 08 06 F5 | 	and	_var05, #192
28ea8     80 08 0E F2 | 	cmp	_var05, #128 wz
28eac     01 04 06 F1 | 	add	_var03, #1
28eb0     01 FA 65 56 |  if_ne	neg	result1, #1
28eb4     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28eb8     06 06 66 F0 | 	shl	_var04, #6
28ebc     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
28ec0     3F 02 06 F5 | 	and	_var02, #63
28ec4     01 07 42 F5 | 	or	_var04, _var02
28ec8     F4 0B 6E FB | 	djnz	_var06, #LR__4142
28ecc     80 06 16 F2 | 	cmp	_var04, #128 wc
28ed0     24 00 90 CD |  if_b	jmp	#LR__4144
28ed4     6C 00 00 FF 
28ed8     00 06 16 F2 | 	cmp	_var04, ##55296 wc
28edc     0C 00 90 CD |  if_b	jmp	#LR__4143
28ee0     70 00 00 FF 
28ee4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
28ee8     0C 00 90 CD |  if_b	jmp	#LR__4144
28eec                 | LR__4143
28eec     80 08 00 FF 
28ef0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
28ef4     08 00 90 CD |  if_b	jmp	#LR__4145
28ef8                 | LR__4144
28ef8     01 FA 65 F6 | 	neg	result1, #1
28efc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
28f00                 | LR__4145
28f00     80 00 00 FF 
28f04     00 06 16 F2 | 	cmp	_var04, ##65536 wc
28f08     2C 00 90 CD |  if_b	jmp	#LR__4146
28f0c     03 03 02 F6 | 	mov	_var02, _var04
28f10     80 00 00 FF 
28f14     00 02 86 F1 | 	sub	_var02, ##65536
28f18     06 02 66 F0 | 	shl	_var02, #6
28f1c     80 FF 01 FF 
28f20     00 02 06 F5 | 	and	_var02, ##67043328
28f24     6E 00 6C FF 
28f28     00 08 06 F6 | 	mov	_var05, ##-671032320
28f2c     01 09 42 F5 | 	or	_var05, _var02
28f30     09 06 46 F7 | 	zerox	_var04, #9
28f34     04 07 42 F5 | 	or	_var04, _var05
28f38                 | LR__4146
28f38                 | LR__4147
28f38     09 05 62 FC | 	wrlong	_var03, arg01
28f3c                 | ' 	}
28f3c                 | ' #line 811 "ff.c"
28f3c                 | ' 	*str = p;
28f3c                 | ' 	return uc;
28f3c     03 FB 01 F6 | 	mov	result1, _var04
28f40                 | _fatfs_cc_tchar2uni_ret
28f40     2D 00 64 FD | 	ret
28f44                 | 
28f44                 | _fatfs_cc_put_utf
28f44     80 12 16 F2 | 	cmp	arg01, #128 wc
28f48     18 00 90 3D |  if_ae	jmp	#LR__4150
28f4c     01 16 16 F2 | 	cmp	arg03, #1 wc
28f50     00 FA 05 C6 |  if_b	mov	result1, #0
28f54     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28f58     0A 13 42 FC | 	wrbyte	arg01, arg02
28f5c                 | ' 		*buf = (TCHAR)chr;
28f5c                 | ' 		return 1;
28f5c     01 FA 05 F6 | 	mov	result1, #1
28f60     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28f64                 | LR__4150
28f64     04 00 00 FF 
28f68     00 12 16 F2 | 	cmp	arg01, ##2048 wc
28f6c     40 00 90 3D |  if_ae	jmp	#LR__4151
28f70     02 16 16 F2 | 	cmp	arg03, #2 wc
28f74     00 FA 05 C6 |  if_b	mov	result1, #0
28f78     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28f7c     09 FB 01 F6 | 	mov	result1, arg01
28f80     06 FA 45 F0 | 	shr	result1, #6
28f84     1F FA 05 F5 | 	and	result1, #31
28f88     C0 16 06 F6 | 	mov	arg03, #192
28f8c     FD 16 42 F5 | 	or	arg03, result1
28f90     0A 17 42 FC | 	wrbyte	arg03, arg02
28f94     01 14 06 F1 | 	add	arg02, #1
28f98     3F 12 06 F5 | 	and	arg01, #63
28f9c     80 FA 05 F6 | 	mov	result1, #128
28fa0     09 FB 41 F5 | 	or	result1, arg01
28fa4     0A FB 41 FC | 	wrbyte	result1, arg02
28fa8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28fa8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28fa8                 | ' 		return 2;
28fa8     02 FA 05 F6 | 	mov	result1, #2
28fac     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28fb0                 | LR__4151
28fb0     80 00 00 FF 
28fb4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28fb8     70 00 90 3D |  if_ae	jmp	#LR__4154
28fbc     03 16 16 F2 | 	cmp	arg03, #3 wc
28fc0     18 00 90 CD |  if_b	jmp	#LR__4152
28fc4     6C 00 00 FF 
28fc8     00 12 16 F2 | 	cmp	arg01, ##55296 wc
28fcc     14 00 90 CD |  if_b	jmp	#LR__4153
28fd0     70 00 00 FF 
28fd4     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28fd8     08 00 90 3D |  if_ae	jmp	#LR__4153
28fdc                 | LR__4152
28fdc     00 FA 05 F6 | 	mov	result1, #0
28fe0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28fe4                 | LR__4153
28fe4     09 FB 59 F8 | 	getnib	result1, arg01, #3
28fe8     E0 16 06 F6 | 	mov	arg03, #224
28fec     FD 16 42 F5 | 	or	arg03, result1
28ff0     0A 17 42 FC | 	wrbyte	arg03, arg02
28ff4     01 14 06 F1 | 	add	arg02, #1
28ff8     09 FB 01 F6 | 	mov	result1, arg01
28ffc     06 FA 45 F0 | 	shr	result1, #6
29000     3F FA 05 F5 | 	and	result1, #63
29004     80 16 06 F6 | 	mov	arg03, #128
29008     FD 16 42 F5 | 	or	arg03, result1
2900c     0A 17 42 FC | 	wrbyte	arg03, arg02
29010     01 14 06 F1 | 	add	arg02, #1
29014     3F 12 06 F5 | 	and	arg01, #63
29018     80 FA 05 F6 | 	mov	result1, #128
2901c     09 FB 41 F5 | 	or	result1, arg01
29020     0A FB 41 FC | 	wrbyte	result1, arg02
29024                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
29024                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
29024                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
29024                 | ' 		return 3;
29024     03 FA 05 F6 | 	mov	result1, #3
29028     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2902c                 | LR__4154
2902c     04 16 16 F2 | 	cmp	arg03, #4 wc
29030     00 FA 05 C6 |  if_b	mov	result1, #0
29034     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
29038     09 01 02 F6 | 	mov	_var01, arg01
2903c     E0 01 06 F4 | 	bitl	_var01, #480
29040     00 00 6C FF 
29044     00 00 86 F1 | 	sub	_var01, ##-671088640
29048     06 00 46 F0 | 	shr	_var01, #6
2904c     09 13 32 F9 | 	getword	arg01, arg01, #0
29050     6E 00 00 FF 
29054     00 12 86 F1 | 	sub	arg01, ##56320
29058     00 08 00 FF 
2905c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
29060     02 00 00 CF 
29064     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
29068     00 FA 05 36 |  if_ae	mov	result1, #0
2906c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
29070     09 01 42 F5 | 	or	_var01, arg01
29074     80 00 00 FF 
29078     00 00 06 F1 | 	add	_var01, ##65536
2907c     00 FB 01 F6 | 	mov	result1, _var01
29080     12 FA 45 F0 | 	shr	result1, #18
29084     07 FA 05 F5 | 	and	result1, #7
29088     F0 16 06 F6 | 	mov	arg03, #240
2908c     FD 16 42 F5 | 	or	arg03, result1
29090     0A 17 42 FC | 	wrbyte	arg03, arg02
29094     01 14 06 F1 | 	add	arg02, #1
29098     00 FB 01 F6 | 	mov	result1, _var01
2909c     0C FA 45 F0 | 	shr	result1, #12
290a0     3F FA 05 F5 | 	and	result1, #63
290a4     80 16 06 F6 | 	mov	arg03, #128
290a8     FD 16 42 F5 | 	or	arg03, result1
290ac     0A 17 42 FC | 	wrbyte	arg03, arg02
290b0     01 14 06 F1 | 	add	arg02, #1
290b4     00 FB 01 F6 | 	mov	result1, _var01
290b8     06 FA 45 F0 | 	shr	result1, #6
290bc     3F FA 05 F5 | 	and	result1, #63
290c0     80 16 06 F6 | 	mov	arg03, #128
290c4     FD 16 42 F5 | 	or	arg03, result1
290c8     0A 17 42 FC | 	wrbyte	arg03, arg02
290cc     01 14 06 F1 | 	add	arg02, #1
290d0     3F 00 06 F5 | 	and	_var01, #63
290d4     80 FA 05 F6 | 	mov	result1, #128
290d8     00 FB 41 F5 | 	or	result1, _var01
290dc     0A FB 41 FC | 	wrbyte	result1, arg02
290e0                 | ' 	chr = (hc | chr) + 0x10000;
290e0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
290e0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
290e0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
290e0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
290e0                 | ' 	return 4;
290e0     04 FA 05 F6 | 	mov	result1, #4
290e4                 | _fatfs_cc_put_utf_ret
290e4     2D 00 64 FD | 	ret
290e8                 | 
290e8                 | _fatfs_cc_sync_window
290e8     02 4A 05 F6 | 	mov	COUNT_, #2
290ec     A8 00 A0 FD | 	call	#pushregs_
290f0     09 1F 02 F6 | 	mov	local01, arg01
290f4     00 20 06 F6 | 	mov	local02, #0
290f8     03 1E 06 F1 | 	add	local01, #3
290fc     0F FB C9 FA | 	rdbyte	result1, local01 wz
29100     03 1E 86 F1 | 	sub	local01, #3
29104     A4 00 90 AD |  if_e	jmp	#LR__4162
29108     01 1E 06 F1 | 	add	local01, #1
2910c     0F 13 C2 FA | 	rdbyte	arg01, local01
29110     33 1E 06 F1 | 	add	local01, #51
29114     0F 15 02 F6 | 	mov	arg02, local01
29118     04 1E 86 F1 | 	sub	local01, #4
2911c     0F 17 02 FB | 	rdlong	arg03, local01
29120     30 1E 86 F1 | 	sub	local01, #48
29124     01 18 06 F6 | 	mov	arg04, #1
29128     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2912c     00 FA 0D F2 | 	cmp	result1, #0 wz
29130     74 00 90 5D |  if_ne	jmp	#LR__4160
29134     03 1E 06 F1 | 	add	local01, #3
29138     0F 01 48 FC | 	wrbyte	#0, local01
2913c     2D 1E 06 F1 | 	add	local01, #45
29140     0F FB 01 FB | 	rdlong	result1, local01
29144     0C 1E 86 F1 | 	sub	local01, #12
29148     0F 19 02 FB | 	rdlong	arg04, local01
2914c     0C FB 81 F1 | 	sub	result1, arg04
29150     08 1E 86 F1 | 	sub	local01, #8
29154     0F 19 02 FB | 	rdlong	arg04, local01
29158     1C 1E 86 F1 | 	sub	local01, #28
2915c     0C FB 11 F2 | 	cmp	result1, arg04 wc
29160     48 00 90 3D |  if_ae	jmp	#LR__4161
29164     02 1E 06 F1 | 	add	local01, #2
29168     0F 19 C2 FA | 	rdbyte	arg04, local01
2916c     02 1E 86 F1 | 	sub	local01, #2
29170     02 18 0E F2 | 	cmp	arg04, #2 wz
29174     34 00 90 5D |  if_ne	jmp	#LR__4161
29178     01 1E 06 F1 | 	add	local01, #1
2917c     0F 13 C2 FA | 	rdbyte	arg01, local01
29180     33 1E 06 F1 | 	add	local01, #51
29184     0F 15 02 F6 | 	mov	arg02, local01
29188     04 1E 86 F1 | 	sub	local01, #4
2918c     0F 17 02 FB | 	rdlong	arg03, local01
29190     14 1E 86 F1 | 	sub	local01, #20
29194     0F 1F 02 FB | 	rdlong	local01, local01
29198     0F 17 02 F1 | 	add	arg03, local01
2919c     01 18 06 F6 | 	mov	arg04, #1
291a0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
291a4     04 00 90 FD | 	jmp	#LR__4161
291a8                 | LR__4160
291a8     01 20 06 F6 | 	mov	local02, #1
291ac                 | LR__4161
291ac                 | LR__4162
291ac                 | ' 			res = FR_DISK_ERR;
291ac                 | ' 		}
291ac                 | ' 	}
291ac                 | ' 	return res;
291ac     10 FB 01 F6 | 	mov	result1, local02
291b0     A7 F0 03 F6 | 	mov	ptra, fp
291b4     B2 00 A0 FD | 	call	#popregs_
291b8                 | _fatfs_cc_sync_window_ret
291b8     2D 00 64 FD | 	ret
291bc                 | 
291bc                 | _fatfs_cc_move_window
291bc     03 4A 05 F6 | 	mov	COUNT_, #3
291c0     A8 00 A0 FD | 	call	#pushregs_
291c4     09 1F 02 F6 | 	mov	local01, arg01
291c8     0A 21 02 F6 | 	mov	local02, arg02
291cc     00 22 06 F6 | 	mov	local03, #0
291d0     30 1E 06 F1 | 	add	local01, #48
291d4     0F 19 02 FB | 	rdlong	arg04, local01
291d8     30 1E 86 F1 | 	sub	local01, #48
291dc     0C 21 0A F2 | 	cmp	local02, arg04 wz
291e0     40 00 90 AD |  if_e	jmp	#LR__4171
291e4     0F 13 02 F6 | 	mov	arg01, local01
291e8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
291ec     FD 22 0A F6 | 	mov	local03, result1 wz
291f0     30 00 90 5D |  if_ne	jmp	#LR__4170
291f4     01 1E 06 F1 | 	add	local01, #1
291f8     0F 13 C2 FA | 	rdbyte	arg01, local01
291fc     33 1E 06 F1 | 	add	local01, #51
29200     0F 15 02 F6 | 	mov	arg02, local01
29204     10 17 02 F6 | 	mov	arg03, local02
29208     01 18 06 F6 | 	mov	arg04, #1
2920c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
29210     00 FA 0D F2 | 	cmp	result1, #0 wz
29214     01 20 66 56 |  if_ne	neg	local02, #1
29218     01 22 06 56 |  if_ne	mov	local03, #1
2921c     04 1E 86 F1 | 	sub	local01, #4
29220     0F 21 62 FC | 	wrlong	local02, local01
29224                 | LR__4170
29224                 | LR__4171
29224                 | ' 				sect = (LBA_t)0 - 1;
29224                 | ' 				res = FR_DISK_ERR;
29224                 | ' 			}
29224                 | ' 			fs->winsect = sect;
29224                 | ' 		}
29224                 | ' 	}
29224                 | ' 	return res;
29224     11 FB 01 F6 | 	mov	result1, local03
29228     A7 F0 03 F6 | 	mov	ptra, fp
2922c     B2 00 A0 FD | 	call	#popregs_
29230                 | _fatfs_cc_move_window_ret
29230     2D 00 64 FD | 	ret
29234                 | 
29234                 | _fatfs_cc_sync_fs
29234     02 4A 05 F6 | 	mov	COUNT_, #2
29238     A8 00 A0 FD | 	call	#pushregs_
2923c     09 1F 02 F6 | 	mov	local01, arg01
29240     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
29244     FD 20 0A F6 | 	mov	local02, result1 wz
29248     D8 00 90 5D |  if_ne	jmp	#LR__4181
2924c     0F 19 C2 FA | 	rdbyte	arg04, local01
29250     03 18 0E F2 | 	cmp	arg04, #3 wz
29254     04 1E 06 A1 |  if_e	add	local01, #4
29258     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
2925c     04 1E 86 A1 |  if_e	sub	local01, #4
29260     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
29264     A0 00 90 5D |  if_ne	jmp	#LR__4180
29268     34 1E 06 F1 | 	add	local01, #52
2926c     0F 13 02 F6 | 	mov	arg01, local01
29270     00 14 06 F6 | 	mov	arg02, #0
29274     09 16 C6 F9 | 	decod	arg03, #9
29278     98 00 A0 FD | 	call	#\builtin_bytefill_
2927c     0F 13 02 F6 | 	mov	arg01, local01
29280     FE 13 06 F1 | 	add	arg01, #510
29284     55 00 80 FF 
29288     09 AB 58 FC | 	wrword	##43605, arg01
2928c     A9 B0 A0 FF 
29290     0F A5 68 FC | 	wrlong	##1096897106, local01
29294     0F 13 02 F6 | 	mov	arg01, local01
29298     E4 13 06 F1 | 	add	arg01, #484
2929c     B9 A0 B0 FF 
292a0     09 E5 68 FC | 	wrlong	##1631679090, arg01
292a4     0F 13 02 F6 | 	mov	arg01, local01
292a8     E8 13 06 F1 | 	add	arg01, #488
292ac     20 1E 86 F1 | 	sub	local01, #32
292b0     0F 15 02 FB | 	rdlong	arg02, local01
292b4     09 15 62 FC | 	wrlong	arg02, arg01
292b8     20 1E 06 F1 | 	add	local01, #32
292bc     0F 13 02 F6 | 	mov	arg01, local01
292c0     EC 13 06 F1 | 	add	arg01, #492
292c4     24 1E 86 F1 | 	sub	local01, #36
292c8     0F 15 02 FB | 	rdlong	arg02, local01
292cc     09 15 62 FC | 	wrlong	arg02, arg01
292d0     10 1E 06 F1 | 	add	local01, #16
292d4     0F 17 02 FB | 	rdlong	arg03, local01
292d8     01 16 06 F1 | 	add	arg03, #1
292dc     10 1E 06 F1 | 	add	local01, #16
292e0     0F 17 62 FC | 	wrlong	arg03, local01
292e4     2F 1E 86 F1 | 	sub	local01, #47
292e8     0F 13 C2 FA | 	rdbyte	arg01, local01
292ec     33 1E 06 F1 | 	add	local01, #51
292f0     0F 15 02 F6 | 	mov	arg02, local01
292f4     01 18 06 F6 | 	mov	arg04, #1
292f8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
292fc     30 1E 86 F1 | 	sub	local01, #48
29300     0F 01 48 FC | 	wrbyte	#0, local01
29304     04 1E 86 F1 | 	sub	local01, #4
29308                 | LR__4180
29308     01 1E 06 F1 | 	add	local01, #1
2930c     0F 13 C2 FA | 	rdbyte	arg01, local01
29310     00 14 06 F6 | 	mov	arg02, #0
29314     00 16 06 F6 | 	mov	arg03, #0
29318     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2931c     00 FA 0D F2 | 	cmp	result1, #0 wz
29320     01 20 06 56 |  if_ne	mov	local02, #1
29324                 | LR__4181
29324                 | ' 	}
29324                 | ' 
29324                 | ' 	return res;
29324     10 FB 01 F6 | 	mov	result1, local02
29328     A7 F0 03 F6 | 	mov	ptra, fp
2932c     B2 00 A0 FD | 	call	#popregs_
29330                 | _fatfs_cc_sync_fs_ret
29330     2D 00 64 FD | 	ret
29334                 | 
29334                 | _fatfs_cc_clst2sect
29334     02 14 86 F1 | 	sub	arg02, #2
29338     18 12 06 F1 | 	add	arg01, #24
2933c     09 01 02 FB | 	rdlong	_var01, arg01
29340     18 12 86 F1 | 	sub	arg01, #24
29344     02 00 86 F1 | 	sub	_var01, #2
29348     00 15 12 F2 | 	cmp	arg02, _var01 wc
2934c     00 FA 05 36 |  if_ae	mov	result1, #0
29350     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
29354     0A 12 06 F1 | 	add	arg01, #10
29358     09 01 E2 FA | 	rdword	_var01, arg01
2935c     0A 01 02 FD | 	qmul	_var01, arg02
29360                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
29360     22 12 06 F1 | 	add	arg01, #34
29364     09 FB 01 FB | 	rdlong	result1, arg01
29368     18 00 62 FD | 	getqx	_var01
2936c     00 FB 01 F1 | 	add	result1, _var01
29370                 | _fatfs_cc_clst2sect_ret
29370     2D 00 64 FD | 	ret
29374                 | 
29374                 | _fatfs_cc_get_fat
29374     07 4A 05 F6 | 	mov	COUNT_, #7
29378     A8 00 A0 FD | 	call	#pushregs_
2937c     0A 1F 02 F6 | 	mov	local01, arg02
29380     09 21 02 FB | 	rdlong	local02, arg01
29384     02 1E 16 F2 | 	cmp	local01, #2 wc
29388     14 00 90 CD |  if_b	jmp	#LR__4190
2938c     18 20 06 F1 | 	add	local02, #24
29390     10 23 02 FB | 	rdlong	local03, local02
29394     18 20 86 F1 | 	sub	local02, #24
29398     11 1F 12 F2 | 	cmp	local01, local03 wc
2939c     08 00 90 CD |  if_b	jmp	#LR__4191
293a0                 | LR__4190
293a0     01 24 06 F6 | 	mov	local04, #1
293a4     60 01 90 FD | 	jmp	#LR__4198
293a8                 | LR__4191
293a8     01 24 66 F6 | 	neg	local04, #1
293ac                 | ' 		val = 0xFFFFFFFF;
293ac                 | ' 
293ac                 | ' 		switch (fs->fs_type) {
293ac     10 27 C2 FA | 	rdbyte	local05, local02
293b0     01 26 86 F1 | 	sub	local05, #1
293b4     03 26 26 F3 | 	fle	local05, #3
293b8     30 26 62 FD | 	jmprel	local05
293bc                 | LR__4192
293bc     0C 00 90 FD | 	jmp	#LR__4193
293c0     B8 00 90 FD | 	jmp	#LR__4194
293c4     F8 00 90 FD | 	jmp	#LR__4195
293c8     38 01 90 FD | 	jmp	#LR__4196
293cc                 | LR__4193
293cc     0F 27 02 F6 | 	mov	local05, local01
293d0     0F 13 02 F6 | 	mov	arg01, local01
293d4     01 12 46 F0 | 	shr	arg01, #1
293d8     09 27 02 F1 | 	add	local05, arg01
293dc     10 13 02 F6 | 	mov	arg01, local02
293e0     13 29 02 F6 | 	mov	local06, local05
293e4     09 28 46 F0 | 	shr	local06, #9
293e8     24 20 06 F1 | 	add	local02, #36
293ec     10 15 02 FB | 	rdlong	arg02, local02
293f0     24 20 86 F1 | 	sub	local02, #36
293f4     14 15 02 F1 | 	add	arg02, local06
293f8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
293fc     00 FA 0D F2 | 	cmp	result1, #0 wz
29400     04 01 90 5D |  if_ne	jmp	#LR__4197
29404     13 29 02 F6 | 	mov	local06, local05
29408     FF 29 06 F5 | 	and	local06, #511
2940c     34 20 06 F1 | 	add	local02, #52
29410     10 29 02 F1 | 	add	local06, local02
29414     14 2B C2 FA | 	rdbyte	local07, local06
29418     34 20 86 F1 | 	sub	local02, #52
2941c     10 13 02 F6 | 	mov	arg01, local02
29420     01 26 06 F1 | 	add	local05, #1
29424     13 29 02 F6 | 	mov	local06, local05
29428     09 28 46 F0 | 	shr	local06, #9
2942c     24 20 06 F1 | 	add	local02, #36
29430     10 15 02 FB | 	rdlong	arg02, local02
29434     24 20 86 F1 | 	sub	local02, #36
29438     14 15 02 F1 | 	add	arg02, local06
2943c     7C FD BF FD | 	call	#_fatfs_cc_move_window
29440     00 FA 0D F2 | 	cmp	result1, #0 wz
29444     C0 00 90 5D |  if_ne	jmp	#LR__4197
29448     FF 27 06 F5 | 	and	local05, #511
2944c     34 20 06 F1 | 	add	local02, #52
29450     10 27 02 F1 | 	add	local05, local02
29454     13 29 C2 FA | 	rdbyte	local06, local05
29458     08 28 66 F0 | 	shl	local06, #8
2945c     14 2B 42 F5 | 	or	local07, local06
29460     01 1E CE F7 | 	test	local01, #1 wz
29464     04 2A 46 50 |  if_ne	shr	local07, #4
29468     15 23 02 56 |  if_ne	mov	local03, local07
2946c     0B 2A 46 A7 |  if_e	zerox	local07, #11
29470     15 23 02 A6 |  if_e	mov	local03, local07
29474     11 25 02 F6 | 	mov	local04, local03
29478                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
29478                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
29478                 | ' 			break;
29478     8C 00 90 FD | 	jmp	#LR__4197
2947c                 | LR__4194
2947c     10 13 02 F6 | 	mov	arg01, local02
29480     0F 29 02 F6 | 	mov	local06, local01
29484     08 28 46 F0 | 	shr	local06, #8
29488     24 20 06 F1 | 	add	local02, #36
2948c     10 15 02 FB | 	rdlong	arg02, local02
29490     24 20 86 F1 | 	sub	local02, #36
29494     14 15 02 F1 | 	add	arg02, local06
29498     20 FD BF FD | 	call	#_fatfs_cc_move_window
2949c     00 FA 0D F2 | 	cmp	result1, #0 wz
294a0     64 00 90 5D |  if_ne	jmp	#LR__4197
294a4     34 20 06 F1 | 	add	local02, #52
294a8     01 1E 66 F0 | 	shl	local01, #1
294ac     FF 1F 06 F5 | 	and	local01, #511
294b0     0F 21 02 F1 | 	add	local02, local01
294b4                 | ' {
294b4                 | ' 
294b4                 | ' 	return *((WORD*)ptr);
294b4     10 FB E1 FA | 	rdword	result1, local02
294b8     FD 24 32 F9 | 	getword	local04, result1, #0
294bc                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
294bc                 | ' 			break;
294bc     48 00 90 FD | 	jmp	#LR__4197
294c0                 | LR__4195
294c0     10 13 02 F6 | 	mov	arg01, local02
294c4     0F 29 02 F6 | 	mov	local06, local01
294c8     07 28 46 F0 | 	shr	local06, #7
294cc     24 20 06 F1 | 	add	local02, #36
294d0     10 15 02 FB | 	rdlong	arg02, local02
294d4     24 20 86 F1 | 	sub	local02, #36
294d8     14 15 02 F1 | 	add	arg02, local06
294dc     DC FC BF FD | 	call	#_fatfs_cc_move_window
294e0     00 FA 0D F2 | 	cmp	result1, #0 wz
294e4     20 00 90 5D |  if_ne	jmp	#LR__4197
294e8     34 20 06 F1 | 	add	local02, #52
294ec     02 1E 66 F0 | 	shl	local01, #2
294f0     FF 1F 06 F5 | 	and	local01, #511
294f4     0F 21 02 F1 | 	add	local02, local01
294f8                 | ' {
294f8                 | ' 
294f8                 | ' 	return *((DWORD*)ptr);
294f8     10 25 02 FB | 	rdlong	local04, local02
294fc     7C 24 06 F4 | 	bitl	local04, #124
29500                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
29500                 | ' 			break;
29500     04 00 90 FD | 	jmp	#LR__4197
29504                 | LR__4196
29504     01 24 06 F6 | 	mov	local04, #1
29508                 | LR__4197
29508                 | LR__4198
29508                 | ' 			val = 1;
29508                 | ' 		}
29508                 | ' 	}
29508                 | ' 
29508                 | ' 	return val;
29508     12 FB 01 F6 | 	mov	result1, local04
2950c     A7 F0 03 F6 | 	mov	ptra, fp
29510     B2 00 A0 FD | 	call	#popregs_
29514                 | _fatfs_cc_get_fat_ret
29514     2D 00 64 FD | 	ret
29518                 | 
29518                 | _fatfs_cc_put_fat
29518     08 4A 05 F6 | 	mov	COUNT_, #8
2951c     A8 00 A0 FD | 	call	#pushregs_
29520     09 1F 02 F6 | 	mov	local01, arg01
29524     0A 21 02 F6 | 	mov	local02, arg02
29528     0B 23 02 F6 | 	mov	local03, arg03
2952c     02 24 06 F6 | 	mov	local04, #2
29530     02 20 16 F2 | 	cmp	local02, #2 wc
29534     E0 01 90 CD |  if_b	jmp	#LR__4207
29538     18 1E 06 F1 | 	add	local01, #24
2953c     0F 27 02 FB | 	rdlong	local05, local01
29540     18 1E 86 F1 | 	sub	local01, #24
29544     13 21 12 F2 | 	cmp	local02, local05 wc
29548     CC 01 90 3D |  if_ae	jmp	#LR__4207
2954c                 | ' 		switch (fs->fs_type) {
2954c     0F 29 C2 FA | 	rdbyte	local06, local01
29550     01 28 86 F1 | 	sub	local06, #1
29554     03 28 26 F3 | 	fle	local06, #3
29558     30 28 62 FD | 	jmprel	local06
2955c                 | LR__4200
2955c     0C 00 90 FD | 	jmp	#LR__4201
29560     F8 00 90 FD | 	jmp	#LR__4204
29564     40 01 90 FD | 	jmp	#LR__4205
29568     AC 01 90 FD | 	jmp	#LR__4206
2956c                 | LR__4201
2956c     10 2B 02 F6 | 	mov	local07, local02
29570     10 27 02 F6 | 	mov	local05, local02
29574     01 26 46 F0 | 	shr	local05, #1
29578     13 2B 02 F1 | 	add	local07, local05
2957c     0F 13 02 F6 | 	mov	arg01, local01
29580     15 29 02 F6 | 	mov	local06, local07
29584     09 28 46 F0 | 	shr	local06, #9
29588     24 1E 06 F1 | 	add	local01, #36
2958c     0F 15 02 FB | 	rdlong	arg02, local01
29590     24 1E 86 F1 | 	sub	local01, #36
29594     14 15 02 F1 | 	add	arg02, local06
29598     20 FC BF FD | 	call	#_fatfs_cc_move_window
2959c     FD 24 0A F6 | 	mov	local04, result1 wz
295a0     74 01 90 5D |  if_ne	jmp	#LR__4206
295a4     34 1E 06 F1 | 	add	local01, #52
295a8     0F 2D 02 F6 | 	mov	local08, local01
295ac     15 27 02 F6 | 	mov	local05, local07
295b0     FF 27 06 F5 | 	and	local05, #511
295b4     13 2D 02 F1 | 	add	local08, local05
295b8     01 20 CE F7 | 	test	local02, #1 wz
295bc     34 1E 86 F1 | 	sub	local01, #52
295c0     01 2A 06 F1 | 	add	local07, #1
295c4     18 00 90 AD |  if_e	jmp	#LR__4202
295c8     16 27 C2 FA | 	rdbyte	local05, local08
295cc     13 27 42 F8 | 	getnib	local05, local05, #0
295d0     11 29 E2 F8 | 	getbyte	local06, local03, #0
295d4     04 28 66 F0 | 	shl	local06, #4
295d8     14 27 42 F5 | 	or	local05, local06
295dc     04 00 90 FD | 	jmp	#LR__4203
295e0                 | LR__4202
295e0     11 27 02 F6 | 	mov	local05, local03
295e4                 | LR__4203
295e4     16 27 42 FC | 	wrbyte	local05, local08
295e8     03 1E 06 F1 | 	add	local01, #3
295ec     0F 03 48 FC | 	wrbyte	#1, local01
295f0     03 1E 86 F1 | 	sub	local01, #3
295f4     0F 13 02 F6 | 	mov	arg01, local01
295f8     15 2D 02 F6 | 	mov	local08, local07
295fc     09 2C 46 F0 | 	shr	local08, #9
29600     24 1E 06 F1 | 	add	local01, #36
29604     0F 15 02 FB | 	rdlong	arg02, local01
29608     24 1E 86 F1 | 	sub	local01, #36
2960c     16 15 02 F1 | 	add	arg02, local08
29610     A8 FB BF FD | 	call	#_fatfs_cc_move_window
29614     FD 24 0A F6 | 	mov	local04, result1 wz
29618     FC 00 90 5D |  if_ne	jmp	#LR__4206
2961c     34 1E 06 F1 | 	add	local01, #52
29620     0F 2D 02 F6 | 	mov	local08, local01
29624     FF 2B 06 F5 | 	and	local07, #511
29628     15 2D 02 F1 | 	add	local08, local07
2962c     01 20 CE F7 | 	test	local02, #1 wz
29630     04 22 46 50 |  if_ne	shr	local03, #4
29634     11 27 02 56 |  if_ne	mov	local05, local03
29638     16 27 C2 AA |  if_e	rdbyte	local05, local08
2963c     F0 26 06 A5 |  if_e	and	local05, #240
29640     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
29644     11 23 42 A8 |  if_e	getnib	local03, local03, #0
29648     11 27 42 A5 |  if_e	or	local05, local03
2964c     16 27 42 FC | 	wrbyte	local05, local08
29650     31 1E 86 F1 | 	sub	local01, #49
29654     0F 03 48 FC | 	wrbyte	#1, local01
29658                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
29658                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
29658                 | ' 			fs->wflag = 1;
29658                 | ' 			break;
29658     BC 00 90 FD | 	jmp	#LR__4206
2965c                 | LR__4204
2965c     0F 13 02 F6 | 	mov	arg01, local01
29660     10 2D 02 F6 | 	mov	local08, local02
29664     08 2C 46 F0 | 	shr	local08, #8
29668     24 1E 06 F1 | 	add	local01, #36
2966c     0F 15 02 FB | 	rdlong	arg02, local01
29670     24 1E 86 F1 | 	sub	local01, #36
29674     16 15 02 F1 | 	add	arg02, local08
29678     40 FB BF FD | 	call	#_fatfs_cc_move_window
2967c     FD 24 0A F6 | 	mov	local04, result1 wz
29680     94 00 90 5D |  if_ne	jmp	#LR__4206
29684     34 1E 06 F1 | 	add	local01, #52
29688     0F 13 02 F6 | 	mov	arg01, local01
2968c     01 20 66 F0 | 	shl	local02, #1
29690     FF 21 06 F5 | 	and	local02, #511
29694     10 13 02 F1 | 	add	arg01, local02
29698     09 23 52 FC | 	wrword	local03, arg01
2969c     31 1E 86 F1 | 	sub	local01, #49
296a0     0F 03 48 FC | 	wrbyte	#1, local01
296a4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
296a4                 | ' 			fs->wflag = 1;
296a4                 | ' 			break;
296a4     70 00 90 FD | 	jmp	#LR__4206
296a8                 | LR__4205
296a8     0F 13 02 F6 | 	mov	arg01, local01
296ac     10 2D 02 F6 | 	mov	local08, local02
296b0     07 2C 46 F0 | 	shr	local08, #7
296b4     24 1E 06 F1 | 	add	local01, #36
296b8     0F 15 02 FB | 	rdlong	arg02, local01
296bc     24 1E 86 F1 | 	sub	local01, #36
296c0     16 15 02 F1 | 	add	arg02, local08
296c4     F4 FA BF FD | 	call	#_fatfs_cc_move_window
296c8     FD 24 0A F6 | 	mov	local04, result1 wz
296cc     48 00 90 5D |  if_ne	jmp	#LR__4206
296d0     7C 22 06 F4 | 	bitl	local03, #124
296d4     34 1E 06 F1 | 	add	local01, #52
296d8     10 2D 02 F6 | 	mov	local08, local02
296dc     02 2C 66 F0 | 	shl	local08, #2
296e0     FF 2D 06 F5 | 	and	local08, #511
296e4     0F 13 02 F6 | 	mov	arg01, local01
296e8     16 13 02 F1 | 	add	arg01, local08
296ec                 | ' {
296ec                 | ' 
296ec                 | ' 	return *((DWORD*)ptr);
296ec     09 2D 02 FB | 	rdlong	local08, arg01
296f0     00 00 78 FF 
296f4     00 2C 06 F5 | 	and	local08, ##-268435456
296f8     16 23 42 F5 | 	or	local03, local08
296fc     0F 13 02 F6 | 	mov	arg01, local01
29700     02 20 66 F0 | 	shl	local02, #2
29704     FF 21 06 F5 | 	and	local02, #511
29708     10 13 02 F1 | 	add	arg01, local02
2970c     09 23 62 FC | 	wrlong	local03, arg01
29710     31 1E 86 F1 | 	sub	local01, #49
29714     0F 03 48 FC | 	wrbyte	#1, local01
29718                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
29718                 | ' 			}
29718                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
29718                 | ' 			fs->wflag = 1;
29718                 | ' 			break;
29718                 | LR__4206
29718                 | LR__4207
29718                 | ' 		}
29718                 | ' 	}
29718                 | ' 	return res;
29718     12 FB 01 F6 | 	mov	result1, local04
2971c     A7 F0 03 F6 | 	mov	ptra, fp
29720     B2 00 A0 FD | 	call	#popregs_
29724                 | _fatfs_cc_put_fat_ret
29724     2D 00 64 FD | 	ret
29728                 | 
29728                 | _fatfs_cc_remove_chain
29728     05 4A 05 F6 | 	mov	COUNT_, #5
2972c     A8 00 A0 FD | 	call	#pushregs_
29730     09 1F 02 F6 | 	mov	local01, arg01
29734     0A 21 02 F6 | 	mov	local02, arg02
29738     0B 23 02 F6 | 	mov	local03, arg03
2973c     0F 25 02 FB | 	rdlong	local04, local01
29740     02 20 16 F2 | 	cmp	local02, #2 wc
29744     14 00 90 CD |  if_b	jmp	#LR__4210
29748     18 24 06 F1 | 	add	local04, #24
2974c     12 FB 01 FB | 	rdlong	result1, local04
29750     18 24 86 F1 | 	sub	local04, #24
29754     FD 20 12 F2 | 	cmp	local02, result1 wc
29758     08 00 90 CD |  if_b	jmp	#LR__4211
2975c                 | LR__4210
2975c     02 FA 05 F6 | 	mov	result1, #2
29760     CC 00 90 FD | 	jmp	#LR__4216
29764                 | LR__4211
29764     00 22 0E F2 | 	cmp	local03, #0 wz
29768     18 00 90 AD |  if_e	jmp	#LR__4212
2976c     11 15 02 F6 | 	mov	arg02, local03
29770     12 13 02 F6 | 	mov	arg01, local04
29774     01 16 66 F6 | 	neg	arg03, #1
29778     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2977c     00 FA 0D F2 | 	cmp	result1, #0 wz
29780     AC 00 90 5D |  if_ne	jmp	#LR__4216
29784                 | LR__4212
29784                 | ' 	}
29784                 | ' 
29784                 | ' 
29784                 | ' 	do {
29784                 | LR__4213
29784     10 15 02 F6 | 	mov	arg02, local02
29788     0F 13 02 F6 | 	mov	arg01, local01
2978c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
29790     FD 26 0A F6 | 	mov	local05, result1 wz
29794     94 00 90 AD |  if_e	jmp	#LR__4215
29798     01 26 0E F2 | 	cmp	local05, #1 wz
2979c     02 FA 05 A6 |  if_e	mov	result1, #2
297a0     8C 00 90 AD |  if_e	jmp	#LR__4216
297a4     FF FF 7F FF 
297a8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
297ac     01 FA 05 A6 |  if_e	mov	result1, #1
297b0     7C 00 90 AD |  if_e	jmp	#LR__4216
297b4     10 15 02 F6 | 	mov	arg02, local02
297b8     12 13 02 F6 | 	mov	arg01, local04
297bc     00 16 06 F6 | 	mov	arg03, #0
297c0     54 FD BF FD | 	call	#_fatfs_cc_put_fat
297c4     FD 22 0A F6 | 	mov	local03, result1 wz
297c8     11 FB 01 56 |  if_ne	mov	result1, local03
297cc     60 00 90 5D |  if_ne	jmp	#LR__4216
297d0     18 24 06 F1 | 	add	local04, #24
297d4     12 23 02 FB | 	rdlong	local03, local04
297d8     02 22 86 F1 | 	sub	local03, #2
297dc     04 24 86 F1 | 	sub	local04, #4
297e0     12 21 02 FB | 	rdlong	local02, local04
297e4     14 24 86 F1 | 	sub	local04, #20
297e8     11 21 12 F2 | 	cmp	local02, local03 wc
297ec     24 00 90 3D |  if_ae	jmp	#LR__4214
297f0     14 24 06 F1 | 	add	local04, #20
297f4     12 23 02 FB | 	rdlong	local03, local04
297f8     01 22 06 F1 | 	add	local03, #1
297fc     12 23 62 FC | 	wrlong	local03, local04
29800     10 24 86 F1 | 	sub	local04, #16
29804     12 23 C2 FA | 	rdbyte	local03, local04
29808     01 22 46 F5 | 	or	local03, #1
2980c     12 23 42 FC | 	wrbyte	local03, local04
29810     04 24 86 F1 | 	sub	local04, #4
29814                 | LR__4214
29814     13 21 02 F6 | 	mov	local02, local05
29818     18 24 06 F1 | 	add	local04, #24
2981c     12 27 02 FB | 	rdlong	local05, local04
29820     18 24 86 F1 | 	sub	local04, #24
29824     13 21 12 F2 | 	cmp	local02, local05 wc
29828     58 FF 9F CD |  if_b	jmp	#LR__4213
2982c                 | LR__4215
2982c                 | ' #line 1500 "ff.c"
2982c                 | ' 	return FR_OK;
2982c     00 FA 05 F6 | 	mov	result1, #0
29830                 | LR__4216
29830     A7 F0 03 F6 | 	mov	ptra, fp
29834     B2 00 A0 FD | 	call	#popregs_
29838                 | _fatfs_cc_remove_chain_ret
29838     2D 00 64 FD | 	ret
2983c                 | 
2983c                 | _fatfs_cc_create_chain
2983c     09 4A 05 F6 | 	mov	COUNT_, #9
29840     A8 00 A0 FD | 	call	#pushregs_
29844     09 1F 02 F6 | 	mov	local01, arg01
29848     0A 21 0A F6 | 	mov	local02, arg02 wz
2984c     0F 23 02 FB | 	rdlong	local03, local01
29850     28 00 90 5D |  if_ne	jmp	#LR__4220
29854     10 22 06 F1 | 	add	local03, #16
29858     11 25 0A FB | 	rdlong	local04, local03 wz
2985c     10 22 86 F1 | 	sub	local03, #16
29860     18 22 06 51 |  if_ne	add	local03, #24
29864     11 27 02 5B |  if_ne	rdlong	local05, local03
29868     18 22 86 51 |  if_ne	sub	local03, #24
2986c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
29870     50 00 90 4D |  if_c_and_nz	jmp	#LR__4221
29874     01 24 06 F6 | 	mov	local04, #1
29878     48 00 90 FD | 	jmp	#LR__4221
2987c                 | LR__4220
2987c     10 15 02 F6 | 	mov	arg02, local02
29880     0F 13 02 F6 | 	mov	arg01, local01
29884     EC FA BF FD | 	call	#_fatfs_cc_get_fat
29888     FD 24 02 F6 | 	mov	local04, result1
2988c     02 24 16 F2 | 	cmp	local04, #2 wc
29890     01 FA 05 C6 |  if_b	mov	result1, #1
29894     BC 01 90 CD |  if_b	jmp	#LR__4231
29898     FF FF 7F FF 
2989c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
298a0     12 FB 01 A6 |  if_e	mov	result1, local04
298a4     AC 01 90 AD |  if_e	jmp	#LR__4231
298a8     18 22 06 F1 | 	add	local03, #24
298ac     11 27 02 FB | 	rdlong	local05, local03
298b0     18 22 86 F1 | 	sub	local03, #24
298b4     13 25 12 F2 | 	cmp	local04, local05 wc
298b8     12 FB 01 C6 |  if_b	mov	result1, local04
298bc     94 01 90 CD |  if_b	jmp	#LR__4231
298c0     10 25 02 F6 | 	mov	local04, local02
298c4                 | LR__4221
298c4     14 22 06 F1 | 	add	local03, #20
298c8     11 27 0A FB | 	rdlong	local05, local03 wz
298cc     14 22 86 F1 | 	sub	local03, #20
298d0     00 FA 05 A6 |  if_e	mov	result1, #0
298d4     7C 01 90 AD |  if_e	jmp	#LR__4231
298d8     00 28 06 F6 | 	mov	local06, #0
298dc     10 25 0A F2 | 	cmp	local04, local02 wz
298e0     74 00 90 5D |  if_ne	jmp	#LR__4224
298e4     12 29 02 F6 | 	mov	local06, local04
298e8     01 28 06 F1 | 	add	local06, #1
298ec     18 22 06 F1 | 	add	local03, #24
298f0     11 27 02 FB | 	rdlong	local05, local03
298f4     18 22 86 F1 | 	sub	local03, #24
298f8     13 29 12 F2 | 	cmp	local06, local05 wc
298fc     02 28 06 36 |  if_ae	mov	local06, #2
29900     14 15 02 F6 | 	mov	arg02, local06
29904     0F 13 02 F6 | 	mov	arg01, local01
29908     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2990c     FD 26 02 F6 | 	mov	local05, result1
29910     01 26 0E F2 | 	cmp	local05, #1 wz
29914     FF FF 7F 5F 
29918     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
2991c     13 FB 01 A6 |  if_e	mov	result1, local05
29920     30 01 90 AD |  if_e	jmp	#LR__4231
29924     00 26 0E F2 | 	cmp	local05, #0 wz
29928     2C 00 90 AD |  if_e	jmp	#LR__4223
2992c     10 22 06 F1 | 	add	local03, #16
29930     11 2B 02 FB | 	rdlong	local07, local03
29934     10 22 86 F1 | 	sub	local03, #16
29938     02 2A 16 F2 | 	cmp	local07, #2 wc
2993c     14 00 90 CD |  if_b	jmp	#LR__4222
29940     18 22 06 F1 | 	add	local03, #24
29944     11 27 02 FB | 	rdlong	local05, local03
29948     18 22 86 F1 | 	sub	local03, #24
2994c     13 2B 12 F2 | 	cmp	local07, local05 wc
29950     15 25 02 C6 |  if_b	mov	local04, local07
29954                 | LR__4222
29954     00 28 06 F6 | 	mov	local06, #0
29958                 | LR__4223
29958                 | LR__4224
29958     00 28 0E F2 | 	cmp	local06, #0 wz
2995c     60 00 90 5D |  if_ne	jmp	#LR__4227
29960     12 29 02 F6 | 	mov	local06, local04
29964                 | ' 			ncl = scl;
29964                 | ' 			for (;;) {
29964                 | LR__4225
29964     01 28 06 F1 | 	add	local06, #1
29968     18 22 06 F1 | 	add	local03, #24
2996c     11 27 02 FB | 	rdlong	local05, local03
29970     18 22 86 F1 | 	sub	local03, #24
29974     13 29 12 F2 | 	cmp	local06, local05 wc
29978     02 28 06 36 |  if_ae	mov	local06, #2
2997c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
29980     00 FA 05 16 |  if_a	mov	result1, #0
29984     CC 00 90 1D |  if_a	jmp	#LR__4231
29988     14 15 02 F6 | 	mov	arg02, local06
2998c     0F 13 02 F6 | 	mov	arg01, local01
29990     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
29994     FD 2A 0A F6 | 	mov	local07, result1 wz
29998     24 00 90 AD |  if_e	jmp	#LR__4226
2999c     01 2A 0E F2 | 	cmp	local07, #1 wz
299a0     FF FF 7F 5F 
299a4     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
299a8     15 FB 01 A6 |  if_e	mov	result1, local07
299ac     A4 00 90 AD |  if_e	jmp	#LR__4231
299b0     12 29 0A F2 | 	cmp	local06, local04 wz
299b4     00 FA 05 A6 |  if_e	mov	result1, #0
299b8     98 00 90 AD |  if_e	jmp	#LR__4231
299bc     A4 FF 9F FD | 	jmp	#LR__4225
299c0                 | LR__4226
299c0                 | LR__4227
299c0     11 13 02 F6 | 	mov	arg01, local03
299c4     14 15 02 F6 | 	mov	arg02, local06
299c8     01 16 66 F6 | 	neg	arg03, #1
299cc     48 FB BF FD | 	call	#_fatfs_cc_put_fat
299d0     FD 2C 0A F6 | 	mov	local08, result1 wz
299d4     1C 00 90 5D |  if_ne	jmp	#LR__4228
299d8     00 20 0E F2 | 	cmp	local02, #0 wz
299dc     14 00 90 AD |  if_e	jmp	#LR__4228
299e0     11 13 02 F6 | 	mov	arg01, local03
299e4     10 15 02 F6 | 	mov	arg02, local02
299e8     14 17 02 F6 | 	mov	arg03, local06
299ec     28 FB BF FD | 	call	#_fatfs_cc_put_fat
299f0     FD 2C 02 F6 | 	mov	local08, result1
299f4                 | LR__4228
299f4     00 2C 0E F2 | 	cmp	local08, #0 wz
299f8     4C 00 90 5D |  if_ne	jmp	#LR__4229
299fc     10 22 06 F1 | 	add	local03, #16
29a00     11 29 62 FC | 	wrlong	local06, local03
29a04     08 22 06 F1 | 	add	local03, #8
29a08     11 27 02 FB | 	rdlong	local05, local03
29a0c     02 26 86 F1 | 	sub	local05, #2
29a10     04 22 86 F1 | 	sub	local03, #4
29a14     11 2F 02 FB | 	rdlong	local09, local03
29a18     14 22 86 F1 | 	sub	local03, #20
29a1c     13 2F 1A F2 | 	cmp	local09, local05 wcz
29a20     14 22 06 E1 |  if_be	add	local03, #20
29a24     11 2F 02 EB |  if_be	rdlong	local09, local03
29a28     01 2E 86 E1 |  if_be	sub	local09, #1
29a2c     11 2F 62 EC |  if_be	wrlong	local09, local03
29a30     14 22 86 E1 |  if_be	sub	local03, #20
29a34     04 22 06 F1 | 	add	local03, #4
29a38     11 27 C2 FA | 	rdbyte	local05, local03
29a3c     01 26 46 F5 | 	or	local05, #1
29a40     11 27 42 FC | 	wrbyte	local05, local03
29a44     08 00 90 FD | 	jmp	#LR__4230
29a48                 | LR__4229
29a48     01 2C 0E F2 | 	cmp	local08, #1 wz
29a4c     01 28 C6 F6 | 	negz	local06, #1
29a50                 | LR__4230
29a50                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
29a50                 | ' 	}
29a50                 | ' 
29a50                 | ' 	return ncl;
29a50     14 FB 01 F6 | 	mov	result1, local06
29a54                 | LR__4231
29a54     A7 F0 03 F6 | 	mov	ptra, fp
29a58     B2 00 A0 FD | 	call	#popregs_
29a5c                 | _fatfs_cc_create_chain_ret
29a5c     2D 00 64 FD | 	ret
29a60                 | 
29a60                 | _fatfs_cc_dir_clear
29a60     06 4A 05 F6 | 	mov	COUNT_, #6
29a64     A8 00 A0 FD | 	call	#pushregs_
29a68     09 1F 02 F6 | 	mov	local01, arg01
29a6c     0A 21 02 F6 | 	mov	local02, arg02
29a70     0F 13 02 F6 | 	mov	arg01, local01
29a74     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
29a78     00 FA 0D F2 | 	cmp	result1, #0 wz
29a7c     01 FA 05 56 |  if_ne	mov	result1, #1
29a80     90 00 90 5D |  if_ne	jmp	#LR__4242
29a84     0F 13 02 F6 | 	mov	arg01, local01
29a88     10 15 02 F6 | 	mov	arg02, local02
29a8c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
29a90     FD 22 02 F6 | 	mov	local03, result1
29a94     30 1E 06 F1 | 	add	local01, #48
29a98     0F 23 62 FC | 	wrlong	local03, local01
29a9c     04 1E 06 F1 | 	add	local01, #4
29aa0     0F 13 02 F6 | 	mov	arg01, local01
29aa4     00 14 06 F6 | 	mov	arg02, #0
29aa8     09 16 C6 F9 | 	decod	arg03, #9
29aac     98 00 A0 FD | 	call	#\builtin_bytefill_
29ab0     0F 25 02 F6 | 	mov	local04, local01
29ab4                 | ' #line 1667 "ff.c"
29ab4                 | ' 	{
29ab4                 | ' 		ibuf = fs->win; szb = 1;
29ab4                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
29ab4     00 26 06 F6 | 	mov	local05, #0
29ab8     34 1E 86 F1 | 	sub	local01, #52
29abc                 | LR__4240
29abc     0A 1E 06 F1 | 	add	local01, #10
29ac0     0F 29 E2 FA | 	rdword	local06, local01
29ac4     0A 1E 86 F1 | 	sub	local01, #10
29ac8     14 27 12 F2 | 	cmp	local05, local06 wc
29acc     2C 00 90 3D |  if_ae	jmp	#LR__4241
29ad0     01 1E 06 F1 | 	add	local01, #1
29ad4     0F 13 C2 FA | 	rdbyte	arg01, local01
29ad8     01 1E 86 F1 | 	sub	local01, #1
29adc     12 15 02 F6 | 	mov	arg02, local04
29ae0     11 17 02 F6 | 	mov	arg03, local03
29ae4     13 17 02 F1 | 	add	arg03, local05
29ae8     01 18 06 F6 | 	mov	arg04, #1
29aec     9C EF BF FD | 	call	#_fatfs_cc_disk_write
29af0     00 FA 0D F2 | 	cmp	result1, #0 wz
29af4     01 26 06 A1 |  if_e	add	local05, #1
29af8     C0 FF 9F AD |  if_e	jmp	#LR__4240
29afc                 | LR__4241
29afc                 | ' 	}
29afc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
29afc     0A 1E 06 F1 | 	add	local01, #10
29b00     0F 25 E2 FA | 	rdword	local04, local01
29b04     12 27 0A F2 | 	cmp	local05, local04 wz
29b08     00 28 06 A6 |  if_e	mov	local06, #0
29b0c     01 28 06 56 |  if_ne	mov	local06, #1
29b10     14 FB 01 F6 | 	mov	result1, local06
29b14                 | LR__4242
29b14     A7 F0 03 F6 | 	mov	ptra, fp
29b18     B2 00 A0 FD | 	call	#popregs_
29b1c                 | _fatfs_cc_dir_clear_ret
29b1c     2D 00 64 FD | 	ret
29b20                 | 
29b20                 | _fatfs_cc_dir_sdi
29b20     06 4A 05 F6 | 	mov	COUNT_, #6
29b24     A8 00 A0 FD | 	call	#pushregs_
29b28     09 1F 02 F6 | 	mov	local01, arg01
29b2c     0A 21 02 F6 | 	mov	local02, arg02
29b30     0F 23 02 FB | 	rdlong	local03, local01
29b34     00 10 00 FF 
29b38     00 20 16 F2 | 	cmp	local02, ##2097152 wc
29b3c     1F 20 CE C7 |  if_b	test	local02, #31 wz
29b40                 | ' 		return FR_INT_ERR;
29b40     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
29b44     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4256
29b48     10 1E 06 F1 | 	add	local01, #16
29b4c     0F 21 62 FC | 	wrlong	local02, local01
29b50     08 1E 86 F1 | 	sub	local01, #8
29b54     0F 25 0A FB | 	rdlong	local04, local01 wz
29b58     08 1E 86 F1 | 	sub	local01, #8
29b5c     11 27 C2 AA |  if_e	rdbyte	local05, local03
29b60     03 26 16 A2 |  if_e	cmp	local05, #3 wc
29b64     28 22 06 21 |  if_nc_and_z	add	local03, #40
29b68     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
29b6c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
29b70     00 24 0E F2 | 	cmp	local04, #0 wz
29b74     3C 00 90 5D |  if_ne	jmp	#LR__4250
29b78     10 27 02 F6 | 	mov	local05, local02
29b7c     05 26 46 F0 | 	shr	local05, #5
29b80     08 22 06 F1 | 	add	local03, #8
29b84     11 15 E2 FA | 	rdword	arg02, local03
29b88     08 22 86 F1 | 	sub	local03, #8
29b8c     0A 27 12 F2 | 	cmp	local05, arg02 wc
29b90     02 FA 05 36 |  if_ae	mov	result1, #2
29b94     E4 00 90 3D |  if_ae	jmp	#LR__4256
29b98     28 22 06 F1 | 	add	local03, #40
29b9c     11 27 02 FB | 	rdlong	local05, local03
29ba0     28 22 86 F1 | 	sub	local03, #40
29ba4     18 1E 06 F1 | 	add	local01, #24
29ba8     0F 27 62 FC | 	wrlong	local05, local01
29bac     18 1E 86 F1 | 	sub	local01, #24
29bb0     7C 00 90 FD | 	jmp	#LR__4255
29bb4                 | LR__4250
29bb4     0A 22 06 F1 | 	add	local03, #10
29bb8     11 29 E2 FA | 	rdword	local06, local03
29bbc     0A 22 86 F1 | 	sub	local03, #10
29bc0     09 28 66 F0 | 	shl	local06, #9
29bc4                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
29bc4                 | ' 		while (ofs >= csz) {
29bc4                 | LR__4251
29bc4     14 21 12 F2 | 	cmp	local02, local06 wc
29bc8     4C 00 90 CD |  if_b	jmp	#LR__4254
29bcc     0F 13 02 F6 | 	mov	arg01, local01
29bd0     12 15 02 F6 | 	mov	arg02, local04
29bd4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
29bd8     FD 24 02 F6 | 	mov	local04, result1
29bdc     FF FF 7F FF 
29be0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29be4     01 FA 05 A6 |  if_e	mov	result1, #1
29be8     90 00 90 AD |  if_e	jmp	#LR__4256
29bec     02 24 16 F2 | 	cmp	local04, #2 wc
29bf0     14 00 90 CD |  if_b	jmp	#LR__4252
29bf4     18 22 06 F1 | 	add	local03, #24
29bf8     11 27 02 FB | 	rdlong	local05, local03
29bfc     18 22 86 F1 | 	sub	local03, #24
29c00     13 25 12 F2 | 	cmp	local04, local05 wc
29c04     08 00 90 CD |  if_b	jmp	#LR__4253
29c08                 | LR__4252
29c08     02 FA 05 F6 | 	mov	result1, #2
29c0c     6C 00 90 FD | 	jmp	#LR__4256
29c10                 | LR__4253
29c10     14 21 82 F1 | 	sub	local02, local06
29c14     AC FF 9F FD | 	jmp	#LR__4251
29c18                 | LR__4254
29c18     11 13 02 F6 | 	mov	arg01, local03
29c1c     12 15 02 F6 | 	mov	arg02, local04
29c20     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
29c24     18 1E 06 F1 | 	add	local01, #24
29c28     0F FB 61 FC | 	wrlong	result1, local01
29c2c     18 1E 86 F1 | 	sub	local01, #24
29c30                 | LR__4255
29c30     14 1E 06 F1 | 	add	local01, #20
29c34     0F 25 62 FC | 	wrlong	local04, local01
29c38     04 1E 06 F1 | 	add	local01, #4
29c3c     0F 27 0A FB | 	rdlong	local05, local01 wz
29c40     18 1E 86 F1 | 	sub	local01, #24
29c44     02 FA 05 A6 |  if_e	mov	result1, #2
29c48     30 00 90 AD |  if_e	jmp	#LR__4256
29c4c     10 29 02 F6 | 	mov	local06, local02
29c50     09 28 46 F0 | 	shr	local06, #9
29c54     18 1E 06 F1 | 	add	local01, #24
29c58     0F 27 02 FB | 	rdlong	local05, local01
29c5c     14 27 02 F1 | 	add	local05, local06
29c60     0F 27 62 FC | 	wrlong	local05, local01
29c64     34 22 06 F1 | 	add	local03, #52
29c68     FF 21 06 F5 | 	and	local02, #511
29c6c     10 23 02 F1 | 	add	local03, local02
29c70     04 1E 06 F1 | 	add	local01, #4
29c74     0F 23 62 FC | 	wrlong	local03, local01
29c78                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
29c78                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
29c78                 | ' 
29c78                 | ' 	return FR_OK;
29c78     00 FA 05 F6 | 	mov	result1, #0
29c7c                 | LR__4256
29c7c     A7 F0 03 F6 | 	mov	ptra, fp
29c80     B2 00 A0 FD | 	call	#popregs_
29c84                 | _fatfs_cc_dir_sdi_ret
29c84     2D 00 64 FD | 	ret
29c88                 | 
29c88                 | _fatfs_cc_dir_next
29c88     05 4A 05 F6 | 	mov	COUNT_, #5
29c8c     A8 00 A0 FD | 	call	#pushregs_
29c90     09 1F 02 F6 | 	mov	local01, arg01
29c94     0A 21 02 F6 | 	mov	local02, arg02
29c98     0F 23 02 FB | 	rdlong	local03, local01
29c9c     10 1E 06 F1 | 	add	local01, #16
29ca0     0F 25 02 FB | 	rdlong	local04, local01
29ca4     10 1E 86 F1 | 	sub	local01, #16
29ca8     20 24 06 F1 | 	add	local04, #32
29cac     00 10 00 FF 
29cb0     00 24 16 F2 | 	cmp	local04, ##2097152 wc
29cb4     18 1E 06 31 |  if_ae	add	local01, #24
29cb8     0F 01 68 3C |  if_ae	wrlong	#0, local01
29cbc     18 1E 86 31 |  if_ae	sub	local01, #24
29cc0     18 1E 06 F1 | 	add	local01, #24
29cc4     0F 15 0A FB | 	rdlong	arg02, local01 wz
29cc8     18 1E 86 F1 | 	sub	local01, #24
29ccc     04 FA 05 A6 |  if_e	mov	result1, #4
29cd0     64 01 90 AD |  if_e	jmp	#LR__4265
29cd4     FF 25 CE F7 | 	test	local04, #511 wz
29cd8     3C 01 90 5D |  if_ne	jmp	#LR__4264
29cdc     18 1E 06 F1 | 	add	local01, #24
29ce0     0F 15 02 FB | 	rdlong	arg02, local01
29ce4     01 14 06 F1 | 	add	arg02, #1
29ce8     0F 15 62 FC | 	wrlong	arg02, local01
29cec     04 1E 86 F1 | 	sub	local01, #4
29cf0     0F 15 0A FB | 	rdlong	arg02, local01 wz
29cf4     14 1E 86 F1 | 	sub	local01, #20
29cf8     2C 00 90 5D |  if_ne	jmp	#LR__4260
29cfc     12 15 02 F6 | 	mov	arg02, local04
29d00     05 14 46 F0 | 	shr	arg02, #5
29d04     08 22 06 F1 | 	add	local03, #8
29d08     11 21 E2 FA | 	rdword	local02, local03
29d0c     08 22 86 F1 | 	sub	local03, #8
29d10     10 15 12 F2 | 	cmp	arg02, local02 wc
29d14     18 1E 06 31 |  if_ae	add	local01, #24
29d18     0F 01 68 3C |  if_ae	wrlong	#0, local01
29d1c                 | ' 				dp->sect = 0; return FR_NO_FILE;
29d1c     04 FA 05 36 |  if_ae	mov	result1, #4
29d20     14 01 90 3D |  if_ae	jmp	#LR__4265
29d24     F0 00 90 FD | 	jmp	#LR__4263
29d28                 | LR__4260
29d28     12 13 02 F6 | 	mov	arg01, local04
29d2c     09 12 46 F0 | 	shr	arg01, #9
29d30     0A 22 06 F1 | 	add	local03, #10
29d34     11 15 E2 FA | 	rdword	arg02, local03
29d38     0A 22 86 F1 | 	sub	local03, #10
29d3c     01 14 86 F1 | 	sub	arg02, #1
29d40     0A 13 CA F7 | 	test	arg01, arg02 wz
29d44     D0 00 90 5D |  if_ne	jmp	#LR__4262
29d48     0F 13 02 F6 | 	mov	arg01, local01
29d4c     14 1E 06 F1 | 	add	local01, #20
29d50     0F 15 02 FB | 	rdlong	arg02, local01
29d54     14 1E 86 F1 | 	sub	local01, #20
29d58     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
29d5c     FD 26 02 F6 | 	mov	local05, result1
29d60     02 26 16 F2 | 	cmp	local05, #2 wc
29d64     02 FA 05 C6 |  if_b	mov	result1, #2
29d68     CC 00 90 CD |  if_b	jmp	#LR__4265
29d6c     FF FF 7F FF 
29d70     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29d74     01 FA 05 A6 |  if_e	mov	result1, #1
29d78     BC 00 90 AD |  if_e	jmp	#LR__4265
29d7c     18 22 06 F1 | 	add	local03, #24
29d80     11 15 02 FB | 	rdlong	arg02, local03
29d84     18 22 86 F1 | 	sub	local03, #24
29d88     0A 27 12 F2 | 	cmp	local05, arg02 wc
29d8c     68 00 90 CD |  if_b	jmp	#LR__4261
29d90     00 20 0E F2 | 	cmp	local02, #0 wz
29d94     18 1E 06 A1 |  if_e	add	local01, #24
29d98     0F 01 68 AC |  if_e	wrlong	#0, local01
29d9c                 | ' 						dp->sect = 0; return FR_NO_FILE;
29d9c     04 FA 05 A6 |  if_e	mov	result1, #4
29da0     94 00 90 AD |  if_e	jmp	#LR__4265
29da4     0F 13 02 F6 | 	mov	arg01, local01
29da8     14 1E 06 F1 | 	add	local01, #20
29dac     0F 15 02 FB | 	rdlong	arg02, local01
29db0     14 1E 86 F1 | 	sub	local01, #20
29db4     84 FA BF FD | 	call	#_fatfs_cc_create_chain
29db8     FD 26 0A F6 | 	mov	local05, result1 wz
29dbc     07 FA 05 A6 |  if_e	mov	result1, #7
29dc0     74 00 90 AD |  if_e	jmp	#LR__4265
29dc4     01 26 0E F2 | 	cmp	local05, #1 wz
29dc8     02 FA 05 A6 |  if_e	mov	result1, #2
29dcc     68 00 90 AD |  if_e	jmp	#LR__4265
29dd0     FF FF 7F FF 
29dd4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29dd8     01 FA 05 A6 |  if_e	mov	result1, #1
29ddc     58 00 90 AD |  if_e	jmp	#LR__4265
29de0     13 15 02 F6 | 	mov	arg02, local05
29de4     11 13 02 F6 | 	mov	arg01, local03
29de8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
29dec     00 FA 0D F2 | 	cmp	result1, #0 wz
29df0     01 FA 05 56 |  if_ne	mov	result1, #1
29df4     40 00 90 5D |  if_ne	jmp	#LR__4265
29df8                 | LR__4261
29df8     14 1E 06 F1 | 	add	local01, #20
29dfc     0F 27 62 FC | 	wrlong	local05, local01
29e00     11 13 02 F6 | 	mov	arg01, local03
29e04     13 15 02 F6 | 	mov	arg02, local05
29e08     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
29e0c     04 1E 06 F1 | 	add	local01, #4
29e10     0F FB 61 FC | 	wrlong	result1, local01
29e14     18 1E 86 F1 | 	sub	local01, #24
29e18                 | LR__4262
29e18                 | LR__4263
29e18                 | LR__4264
29e18     10 1E 06 F1 | 	add	local01, #16
29e1c     0F 25 62 FC | 	wrlong	local04, local01
29e20     34 22 06 F1 | 	add	local03, #52
29e24     FF 25 06 F5 | 	and	local04, #511
29e28     12 23 02 F1 | 	add	local03, local04
29e2c     0C 1E 06 F1 | 	add	local01, #12
29e30     0F 23 62 FC | 	wrlong	local03, local01
29e34                 | ' #line 1771 "ff.c"
29e34                 | ' 				}
29e34                 | ' 				dp->clust = clst;
29e34                 | ' 				dp->sect = clst2sect(fs, clst);
29e34                 | ' 			}
29e34                 | ' 		}
29e34                 | ' 	}
29e34                 | ' 	dp->dptr = ofs;
29e34                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
29e34                 | ' 
29e34                 | ' 	return FR_OK;
29e34     00 FA 05 F6 | 	mov	result1, #0
29e38                 | LR__4265
29e38     A7 F0 03 F6 | 	mov	ptra, fp
29e3c     B2 00 A0 FD | 	call	#popregs_
29e40                 | _fatfs_cc_dir_next_ret
29e40     2D 00 64 FD | 	ret
29e44                 | 
29e44                 | _fatfs_cc_dir_alloc
29e44     08 4A 05 F6 | 	mov	COUNT_, #8
29e48     A8 00 A0 FD | 	call	#pushregs_
29e4c     09 1F 02 F6 | 	mov	local01, arg01
29e50     0A 21 02 F6 | 	mov	local02, arg02
29e54     0F 23 02 FB | 	rdlong	local03, local01
29e58     0F 13 02 F6 | 	mov	arg01, local01
29e5c     00 14 06 F6 | 	mov	arg02, #0
29e60     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
29e64     FD 24 0A F6 | 	mov	local04, result1 wz
29e68     70 00 90 5D |  if_ne	jmp	#LR__4274
29e6c     00 26 06 F6 | 	mov	local05, #0
29e70                 | ' 		n = 0;
29e70                 | ' 		do {
29e70                 | LR__4270
29e70     18 1E 06 F1 | 	add	local01, #24
29e74     0F 15 02 FB | 	rdlong	arg02, local01
29e78     18 1E 86 F1 | 	sub	local01, #24
29e7c     11 13 02 F6 | 	mov	arg01, local03
29e80     38 F3 BF FD | 	call	#_fatfs_cc_move_window
29e84     FD 24 0A F6 | 	mov	local04, result1 wz
29e88     50 00 90 5D |  if_ne	jmp	#LR__4273
29e8c     1C 1E 06 F1 | 	add	local01, #28
29e90     0F 29 02 FB | 	rdlong	local06, local01
29e94     1C 1E 86 F1 | 	sub	local01, #28
29e98     14 29 C2 FA | 	rdbyte	local06, local06
29e9c     E5 28 0E F2 | 	cmp	local06, #229 wz
29ea0     1C 1E 06 51 |  if_ne	add	local01, #28
29ea4     0F 2B 02 5B |  if_ne	rdlong	local07, local01
29ea8     1C 1E 86 51 |  if_ne	sub	local01, #28
29eac     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
29eb0     10 00 90 5D |  if_ne	jmp	#LR__4271
29eb4     01 26 06 F1 | 	add	local05, #1
29eb8     10 27 0A F2 | 	cmp	local05, local02 wz
29ebc     1C 00 90 AD |  if_e	jmp	#LR__4273
29ec0     04 00 90 FD | 	jmp	#LR__4272
29ec4                 | LR__4271
29ec4     00 26 06 F6 | 	mov	local05, #0
29ec8                 | LR__4272
29ec8     0F 13 02 F6 | 	mov	arg01, local01
29ecc     01 14 06 F6 | 	mov	arg02, #1
29ed0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
29ed4     FD 24 0A F6 | 	mov	local04, result1 wz
29ed8     94 FF 9F AD |  if_e	jmp	#LR__4270
29edc                 | LR__4273
29edc                 | LR__4274
29edc     04 24 0E F2 | 	cmp	local04, #4 wz
29ee0     07 24 06 A6 |  if_e	mov	local04, #7
29ee4                 | ' 	return res;
29ee4     12 FB 01 F6 | 	mov	result1, local04
29ee8     A7 F0 03 F6 | 	mov	ptra, fp
29eec     B2 00 A0 FD | 	call	#popregs_
29ef0                 | _fatfs_cc_dir_alloc_ret
29ef0     2D 00 64 FD | 	ret
29ef4                 | 
29ef4                 | _fatfs_cc_ld_clust
29ef4     09 01 02 F6 | 	mov	_var01, arg01
29ef8     0A 13 02 F6 | 	mov	arg01, arg02
29efc     1A 12 06 F1 | 	add	arg01, #26
29f00                 | ' {
29f00                 | ' 
29f00                 | ' 	return *((WORD*)ptr);
29f00     09 FB E1 FA | 	rdword	result1, arg01
29f04     FD 12 32 F9 | 	getword	arg01, result1, #0
29f08     00 01 C2 FA | 	rdbyte	_var01, _var01
29f0c     03 00 0E F2 | 	cmp	_var01, #3 wz
29f10     14 14 06 A1 |  if_e	add	arg02, #20
29f14                 | ' {
29f14                 | ' 
29f14                 | ' 	return *((WORD*)ptr);
29f14     0A FB E1 AA |  if_e	rdword	result1, arg02
29f18     10 FA 65 A0 |  if_e	shl	result1, #16
29f1c     FD 12 42 A5 |  if_e	or	arg01, result1
29f20                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
29f20                 | ' 	}
29f20                 | ' 
29f20                 | ' 	return cl;
29f20     09 FB 01 F6 | 	mov	result1, arg01
29f24                 | _fatfs_cc_ld_clust_ret
29f24     2D 00 64 FD | 	ret
29f28                 | 
29f28                 | _fatfs_cc_st_clust
29f28     09 01 02 F6 | 	mov	_var01, arg01
29f2c     0A 13 02 F6 | 	mov	arg01, arg02
29f30     1A 12 06 F1 | 	add	arg01, #26
29f34     09 17 52 FC | 	wrword	arg03, arg01
29f38     00 01 C2 FA | 	rdbyte	_var01, _var01
29f3c     03 00 0E F2 | 	cmp	_var01, #3 wz
29f40     14 14 06 A1 |  if_e	add	arg02, #20
29f44     10 16 46 A0 |  if_e	shr	arg03, #16
29f48     0A 17 52 AC |  if_e	wrword	arg03, arg02
29f4c                 | _fatfs_cc_st_clust_ret
29f4c     2D 00 64 FD | 	ret
29f50                 | 
29f50                 | _fatfs_cc_cmp_lfn
29f50     07 4A 05 F6 | 	mov	COUNT_, #7
29f54     A8 00 A0 FD | 	call	#pushregs_
29f58     09 1F 02 F6 | 	mov	local01, arg01
29f5c     0A 13 02 F6 | 	mov	arg01, arg02
29f60     1A 12 06 F1 | 	add	arg01, #26
29f64                 | ' {
29f64                 | ' 
29f64                 | ' 	return *((WORD*)ptr);
29f64     09 FB E9 FA | 	rdword	result1, arg01 wz
29f68     00 FA 05 56 |  if_ne	mov	result1, #0
29f6c     E0 00 90 5D |  if_ne	jmp	#LR__4286
29f70     0A 21 C2 FA | 	rdbyte	local02, arg02
29f74     3F 20 06 F5 | 	and	local02, #63
29f78     01 20 86 F1 | 	sub	local02, #1
29f7c     0D 20 06 FD | 	qmul	local02, #13
29f80                 | ' 
29f80                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
29f80                 | ' 
29f80                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29f80     01 22 06 F6 | 	mov	local03, #1
29f84     00 24 06 F6 | 	mov	local04, #0
29f88     18 26 62 FD | 	getqx	local05
29f8c                 | LR__4280
29f8c     0D 24 16 F2 | 	cmp	local04, #13 wc
29f90     9C 00 90 3D |  if_ae	jmp	#LR__4285
29f94     0A 13 02 F6 | 	mov	arg01, arg02
29f98     12 21 02 F6 | 	mov	local02, local04
29f9c     01 00 00 FF 
29fa0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29fa4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29fa8     10 21 C2 FA | 	rdbyte	local02, local02
29fac     01 20 06 FA | 	mul	local02, #1
29fb0     10 13 02 F1 | 	add	arg01, local02
29fb4     01 00 00 FF 
29fb8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29fbc                 | ' {
29fbc                 | ' 
29fbc                 | ' 	return *((WORD*)ptr);
29fbc     09 FB E1 FA | 	rdword	result1, arg01
29fc0     FD 28 02 F6 | 	mov	local06, result1
29fc4     11 21 02 F6 | 	mov	local02, local03
29fc8     0F 20 4E F7 | 	zerox	local02, #15 wz
29fcc     44 00 90 AD |  if_e	jmp	#LR__4283
29fd0     00 27 16 F2 | 	cmp	local05, #256 wc
29fd4     2C 00 90 3D |  if_ae	jmp	#LR__4281
29fd8     14 13 32 F9 | 	getword	arg01, local06, #0
29fdc     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29fe0     FD 20 02 F6 | 	mov	local02, result1
29fe4     13 23 02 F6 | 	mov	local03, local05
29fe8     01 22 66 F0 | 	shl	local03, #1
29fec     0F 23 02 F1 | 	add	local03, local01
29ff0     11 13 E2 FA | 	rdword	arg01, local03
29ff4     01 26 06 F1 | 	add	local05, #1
29ff8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29ffc     FD 20 0A F2 | 	cmp	local02, result1 wz
2a000     08 00 90 AD |  if_e	jmp	#LR__4282
2a004                 | LR__4281
2a004                 | ' 				return 0;
2a004     00 FA 05 F6 | 	mov	result1, #0
2a008     44 00 90 FD | 	jmp	#LR__4286
2a00c                 | LR__4282
2a00c     14 23 02 F6 | 	mov	local03, local06
2a010     14 00 90 FD | 	jmp	#LR__4284
2a014                 | LR__4283
2a014     14 29 32 F9 | 	getword	local06, local06, #0
2a018     7F 00 00 FF 
2a01c     FF 29 0E F2 | 	cmp	local06, ##65535 wz
2a020     00 FA 05 56 |  if_ne	mov	result1, #0
2a024     28 00 90 5D |  if_ne	jmp	#LR__4286
2a028                 | LR__4284
2a028     01 24 06 F1 | 	add	local04, #1
2a02c     5C FF 9F FD | 	jmp	#LR__4280
2a030                 | LR__4285
2a030     0A 21 C2 FA | 	rdbyte	local02, arg02
2a034     40 20 CE F7 | 	test	local02, #64 wz
2a038     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2a03c     01 26 66 50 |  if_ne	shl	local05, #1
2a040     0F 27 02 51 |  if_ne	add	local05, local01
2a044     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2a048     00 FA 05 56 |  if_ne	mov	result1, #0
2a04c                 | ' 
2a04c                 | ' 	return 1;
2a04c     01 FA 05 A6 |  if_e	mov	result1, #1
2a050                 | LR__4286
2a050     A7 F0 03 F6 | 	mov	ptra, fp
2a054     B2 00 A0 FD | 	call	#popregs_
2a058                 | _fatfs_cc_cmp_lfn_ret
2a058     2D 00 64 FD | 	ret
2a05c                 | 
2a05c                 | _fatfs_cc_pick_lfn
2a05c     09 01 02 F6 | 	mov	_var01, arg01
2a060     0A 13 02 F6 | 	mov	arg01, arg02
2a064     1A 12 06 F1 | 	add	arg01, #26
2a068                 | ' {
2a068                 | ' 
2a068                 | ' 	return *((WORD*)ptr);
2a068     09 FB E9 FA | 	rdword	result1, arg01 wz
2a06c     00 FA 05 56 |  if_ne	mov	result1, #0
2a070     D4 00 90 5D |  if_ne	jmp	#LR__4295
2a074     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a078     40 02 26 F5 | 	andn	_var02, #64
2a07c     01 02 86 F1 | 	sub	_var02, #1
2a080     0D 02 06 FD | 	qmul	_var02, #13
2a084                 | ' 
2a084                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2a084                 | ' 
2a084                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2a084     01 04 06 F6 | 	mov	_var03, #1
2a088     00 06 06 F6 | 	mov	_var04, #0
2a08c     18 08 62 FD | 	getqx	_var05
2a090                 | LR__4290
2a090     0D 06 16 F2 | 	cmp	_var04, #13 wc
2a094     80 00 90 3D |  if_ae	jmp	#LR__4293
2a098     0A 13 02 F6 | 	mov	arg01, arg02
2a09c     03 03 02 F6 | 	mov	_var02, _var04
2a0a0     01 00 00 FF 
2a0a4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a0a8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2a0ac     01 03 C2 FA | 	rdbyte	_var02, _var02
2a0b0     01 02 06 FA | 	mul	_var02, #1
2a0b4     01 13 02 F1 | 	add	arg01, _var02
2a0b8     01 00 00 FF 
2a0bc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a0c0                 | ' {
2a0c0                 | ' 
2a0c0                 | ' 	return *((WORD*)ptr);
2a0c0     09 FB E1 FA | 	rdword	result1, arg01
2a0c4     FD 0A 02 F6 | 	mov	_var06, result1
2a0c8     02 03 02 F6 | 	mov	_var02, _var03
2a0cc     0F 02 4E F7 | 	zerox	_var02, #15 wz
2a0d0     28 00 90 AD |  if_e	jmp	#LR__4291
2a0d4     00 09 16 F2 | 	cmp	_var05, #256 wc
2a0d8     00 FA 05 36 |  if_ae	mov	result1, #0
2a0dc     68 00 90 3D |  if_ae	jmp	#LR__4295
2a0e0     04 03 02 F6 | 	mov	_var02, _var05
2a0e4     01 02 66 F0 | 	shl	_var02, #1
2a0e8     00 03 02 F1 | 	add	_var02, _var01
2a0ec     05 05 02 F6 | 	mov	_var03, _var06
2a0f0     01 05 52 FC | 	wrword	_var03, _var02
2a0f4     01 08 06 F1 | 	add	_var05, #1
2a0f8     14 00 90 FD | 	jmp	#LR__4292
2a0fc                 | LR__4291
2a0fc     05 0B 32 F9 | 	getword	_var06, _var06, #0
2a100     7F 00 00 FF 
2a104     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2a108     00 FA 05 56 |  if_ne	mov	result1, #0
2a10c     38 00 90 5D |  if_ne	jmp	#LR__4295
2a110                 | LR__4292
2a110     01 06 06 F1 | 	add	_var04, #1
2a114     78 FF 9F FD | 	jmp	#LR__4290
2a118                 | LR__4293
2a118     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a11c     40 02 CE F7 | 	test	_var02, #64 wz
2a120     02 0D 02 56 |  if_ne	mov	_var07, _var03
2a124     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2a128     18 00 90 AD |  if_e	jmp	#LR__4294
2a12c     00 09 16 F2 | 	cmp	_var05, #256 wc
2a130     00 FA 05 36 |  if_ae	mov	result1, #0
2a134     10 00 90 3D |  if_ae	jmp	#LR__4295
2a138     01 08 66 F0 | 	shl	_var05, #1
2a13c     00 09 02 F1 | 	add	_var05, _var01
2a140     04 01 58 FC | 	wrword	#0, _var05
2a144                 | LR__4294
2a144                 | ' 		lfnbuf[i] = 0;
2a144                 | ' 	}
2a144                 | ' 
2a144                 | ' 	return 1;
2a144     01 FA 05 F6 | 	mov	result1, #1
2a148                 | LR__4295
2a148                 | _fatfs_cc_pick_lfn_ret
2a148     2D 00 64 FD | 	ret
2a14c                 | 
2a14c                 | _fatfs_cc_put_lfn
2a14c     0D 14 06 F1 | 	add	arg02, #13
2a150     0A 19 42 FC | 	wrbyte	arg04, arg02
2a154     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2a158     01 18 86 F1 | 	sub	arg04, #1
2a15c     0D 18 06 FD | 	qmul	arg04, #13
2a160     09 01 02 F6 | 	mov	_var01, arg01
2a164     02 14 86 F1 | 	sub	arg02, #2
2a168     0A 1F 48 FC | 	wrbyte	#15, arg02
2a16c     01 14 06 F1 | 	add	arg02, #1
2a170     0A 01 48 FC | 	wrbyte	#0, arg02
2a174     0C 14 86 F1 | 	sub	arg02, #12
2a178     0A 13 02 F6 | 	mov	arg01, arg02
2a17c     1A 12 06 F1 | 	add	arg01, #26
2a180     09 01 58 FC | 	wrword	#0, arg01
2a184     00 02 06 F6 | 	mov	_var02, #0
2a188     00 04 06 F6 | 	mov	_var03, #0
2a18c                 | ' 	BYTE* dir,
2a18c                 | ' 	BYTE ord,
2a18c                 | ' 	BYTE sum
2a18c                 | ' )
2a18c                 | ' {
2a18c                 | ' 	UINT i, s;
2a18c                 | ' 	WCHAR wc;
2a18c                 | ' 
2a18c                 | ' 
2a18c                 | ' 	dir[ 13 ] = sum;
2a18c                 | ' 	dir[ 11 ] =  0x0F ;
2a18c                 | ' 	dir[ 12 ] = 0;
2a18c                 | ' 	st_word(dir +  26 , 0);
2a18c                 | ' 
2a18c                 | ' 	i = (ord - 1) * 13;
2a18c                 | ' 	s = wc = 0;
2a18c                 | ' 	do {
2a18c     01 00 00 FF 
2a190     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a194     18 06 62 FD | 	getqx	_var04
2a198     97 2A 48 FB | 	callpa	#(@LR__4301-@LR__4300)>>2,fcache_load_ptr_
2a19c                 | LR__4300
2a19c     01 19 32 F9 | 	getword	arg04, _var02, #0
2a1a0     7F 00 00 FF 
2a1a4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2a1a8     03 13 02 56 |  if_ne	mov	arg01, _var04
2a1ac     01 06 06 51 |  if_ne	add	_var04, #1
2a1b0     01 12 66 50 |  if_ne	shl	arg01, #1
2a1b4     00 13 02 51 |  if_ne	add	arg01, _var01
2a1b8     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2a1bc     0A 13 02 F6 | 	mov	arg01, arg02
2a1c0     02 19 02 F6 | 	mov	arg04, _var03
2a1c4     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2a1c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a1cc     01 18 06 FA | 	mul	arg04, #1
2a1d0     0C 13 02 F1 | 	add	arg01, arg04
2a1d4     09 03 52 FC | 	wrword	_var02, arg01
2a1d8     01 19 02 F6 | 	mov	arg04, _var02
2a1dc     0F 18 4E F7 | 	zerox	arg04, #15 wz
2a1e0     0F 02 CE A9 |  if_e	bmask	_var02, #15
2a1e4     01 04 06 F1 | 	add	_var03, #1
2a1e8     0D 04 16 F2 | 	cmp	_var03, #13 wc
2a1ec     AC FF 9F CD |  if_b	jmp	#LR__4300
2a1f0                 | LR__4301
2a1f0     01 00 00 FF 
2a1f4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a1f8     01 03 32 F9 | 	getword	_var02, _var02, #0
2a1fc     7F 00 00 FF 
2a200     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2a204     01 06 66 50 |  if_ne	shl	_var04, #1
2a208     00 07 02 51 |  if_ne	add	_var04, _var01
2a20c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2a210     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2a214     40 16 46 A5 |  if_e	or	arg03, #64
2a218     0A 17 42 FC | 	wrbyte	arg03, arg02
2a21c                 | _fatfs_cc_put_lfn_ret
2a21c     2D 00 64 FD | 	ret
2a220                 | 
2a220                 | _fatfs_cc_gen_numname
2a220     08 4A 05 F6 | 	mov	COUNT_, #8
2a224     A8 00 A0 FD | 	call	#pushregs_
2a228     2C F0 07 F1 | 	add	ptra, #44
2a22c     09 1F 02 F6 | 	mov	local01, arg01
2a230     0A 21 02 F6 | 	mov	local02, arg02
2a234     0B 23 02 F6 | 	mov	local03, arg03
2a238     0C 25 02 F6 | 	mov	local04, arg04
2a23c     0F 13 02 F6 | 	mov	arg01, local01
2a240     10 15 02 F6 | 	mov	arg02, local02
2a244     0B 16 06 F6 | 	mov	arg03, #11
2a248     98 72 BF FD | 	call	#__system____builtin_memmove
2a24c     06 24 16 F2 | 	cmp	local04, #6 wc
2a250     48 00 90 CD |  if_b	jmp	#LR__4315
2a254     12 27 02 F6 | 	mov	local05, local04
2a258     97 1E 48 FB | 	callpa	#(@LR__4313-@LR__4310)>>2,fcache_load_ptr_
2a25c                 | ' 		sreg = seq;
2a25c                 | ' 		while (*lfn) {
2a25c                 | LR__4310
2a25c     11 29 EA FA | 	rdword	local06, local03 wz
2a260     34 00 90 AD |  if_e	jmp	#LR__4314
2a264     11 2B E2 FA | 	rdword	local07, local03
2a268                 | ' 			wc = *lfn++;
2a268                 | ' 			for (i = 0; i < 16; i++) {
2a268     02 22 06 F1 | 	add	local03, #2
2a26c     10 12 DC FC | 	rep	@LR__4312, #16
2a270                 | LR__4311
2a270     01 26 66 F0 | 	shl	local05, #1
2a274     15 29 32 F9 | 	getword	local06, local07, #0
2a278     01 28 06 F5 | 	and	local06, #1
2a27c     14 27 02 F1 | 	add	local05, local06
2a280     15 2B 32 F9 | 	getword	local07, local07, #0
2a284     01 2A 46 F0 | 	shr	local07, #1
2a288     10 26 2E F4 | 	testbn	local05, #16 wz
2a28c     88 00 00 5F 
2a290     21 26 66 55 |  if_ne	xor	local05, ##69665
2a294                 | LR__4312
2a294     C4 FF 9F FD | 	jmp	#LR__4310
2a298                 | LR__4313
2a298                 | LR__4314
2a298     13 25 02 F6 | 	mov	local04, local05
2a29c                 | LR__4315
2a29c     07 2A 06 F6 | 	mov	local07, #7
2a2a0                 | ' 			}
2a2a0                 | ' 		}
2a2a0                 | ' 		seq = (UINT)sreg;
2a2a0                 | ' 	}
2a2a0                 | ' 
2a2a0                 | ' 
2a2a0                 | ' 	i = 7;
2a2a0                 | ' 	do {
2a2a0     10 4E 05 F1 | 	add	fp, #16
2a2a4     97 1A 48 FB | 	callpa	#(@LR__4317-@LR__4316)>>2,fcache_load_ptr_
2a2a8                 | LR__4316
2a2a8     12 27 42 F8 | 	getnib	local05, local04, #0
2a2ac     30 26 06 F1 | 	add	local05, #48
2a2b0     04 24 46 F0 | 	shr	local04, #4
2a2b4     13 29 E2 F8 | 	getbyte	local06, local05, #0
2a2b8     3A 28 16 F2 | 	cmp	local06, #58 wc
2a2bc     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
2a2c0     07 26 06 31 |  if_ae	add	local05, #7
2a2c4     15 29 02 F6 | 	mov	local06, local07
2a2c8     01 2A 8E F1 | 	sub	local07, #1 wz
2a2cc     A7 28 02 F1 | 	add	local06, fp
2a2d0     14 27 42 FC | 	wrbyte	local05, local06
2a2d4     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
2a2d8     CC FF 9F 5D |  if_ne	jmp	#LR__4316
2a2dc                 | LR__4317
2a2dc     15 29 02 F6 | 	mov	local06, local07
2a2e0     A7 28 02 F1 | 	add	local06, fp
2a2e4     14 FD 48 FC | 	wrbyte	#126, local06
2a2e8                 | ' 	ns[i] = '~';
2a2e8                 | ' 
2a2e8                 | ' 
2a2e8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2a2e8     00 26 06 F6 | 	mov	local05, #0
2a2ec     10 4E 85 F1 | 	sub	fp, #16
2a2f0     97 2A 48 FB | 	callpa	#(@LR__4320-@LR__4318)>>2,fcache_load_ptr_
2a2f4                 | LR__4318
2a2f4     15 27 12 F2 | 	cmp	local05, local07 wc
2a2f8     4C 00 90 3D |  if_ae	jmp	#LR__4321
2a2fc     13 29 02 F6 | 	mov	local06, local05
2a300     0F 29 02 F1 | 	add	local06, local01
2a304     14 29 C2 FA | 	rdbyte	local06, local06
2a308     20 28 0E F2 | 	cmp	local06, #32 wz
2a30c     38 00 90 AD |  if_e	jmp	#LR__4321
2a310     13 13 02 F6 | 	mov	arg01, local05
2a314     0F 13 02 F1 | 	add	arg01, local01
2a318     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2a31c     00 FA 05 56 |  if_ne	mov	result1, #0
2a320                 | ' 
2a320                 | ' 	return 0;
2a320     00 FA 05 A6 |  if_e	mov	result1, #0
2a324     00 FA 0D F2 | 	cmp	result1, #0 wz
2a328     14 00 90 AD |  if_e	jmp	#LR__4319
2a32c     15 29 02 F6 | 	mov	local06, local07
2a330     01 28 86 F1 | 	sub	local06, #1
2a334     14 27 0A F2 | 	cmp	local05, local06 wz
2a338     0C 00 90 AD |  if_e	jmp	#LR__4321
2a33c     01 26 06 F1 | 	add	local05, #1
2a340                 | LR__4319
2a340     01 26 06 F1 | 	add	local05, #1
2a344     AC FF 9F FD | 	jmp	#LR__4318
2a348                 | LR__4320
2a348                 | LR__4321
2a348     97 20 48 FB | 	callpa	#(@LR__4325-@LR__4322)>>2,fcache_load_ptr_
2a34c                 | ' 			j++;
2a34c                 | ' 		}
2a34c                 | ' 	}
2a34c                 | ' 	do {
2a34c                 | LR__4322
2a34c     13 29 02 F6 | 	mov	local06, local05
2a350     0F 29 02 F1 | 	add	local06, local01
2a354     08 2A 16 F2 | 	cmp	local07, #8 wc
2a358     01 26 06 F1 | 	add	local05, #1
2a35c     1C 00 90 3D |  if_ae	jmp	#LR__4323
2a360     15 25 02 F6 | 	mov	local04, local07
2a364     10 4E 05 F1 | 	add	fp, #16
2a368     A7 24 02 F1 | 	add	local04, fp
2a36c     12 2D C2 FA | 	rdbyte	local08, local04
2a370     01 2A 06 F1 | 	add	local07, #1
2a374     10 4E 85 F1 | 	sub	fp, #16
2a378     04 00 90 FD | 	jmp	#LR__4324
2a37c                 | LR__4323
2a37c     20 2C 06 F6 | 	mov	local08, #32
2a380                 | LR__4324
2a380     14 2D 42 FC | 	wrbyte	local08, local06
2a384     08 26 16 F2 | 	cmp	local05, #8 wc
2a388     C0 FF 9F CD |  if_b	jmp	#LR__4322
2a38c                 | LR__4325
2a38c     A7 F0 03 F6 | 	mov	ptra, fp
2a390     B2 00 A0 FD | 	call	#popregs_
2a394                 | _fatfs_cc_gen_numname_ret
2a394     2D 00 64 FD | 	ret
2a398                 | 
2a398                 | _fatfs_cc_sum_sfn
2a398     00 00 06 F6 | 	mov	_var01, #0
2a39c                 | ' )
2a39c                 | ' {
2a39c                 | ' 	BYTE sum = 0;
2a39c                 | ' 	UINT n = 11;
2a39c                 | ' 
2a39c                 | ' 	do {
2a39c     97 12 48 FB | 	callpa	#(@LR__4332-@LR__4330)>>2,fcache_load_ptr_
2a3a0                 | LR__4330
2a3a0     0B 10 DC FC | 	rep	@LR__4333, #11
2a3a4                 | LR__4331
2a3a4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2a3a8     01 FA 45 F0 | 	shr	result1, #1
2a3ac     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2a3b0     07 00 66 F0 | 	shl	_var01, #7
2a3b4     00 FB 01 F1 | 	add	result1, _var01
2a3b8     09 01 C2 FA | 	rdbyte	_var01, arg01
2a3bc     FD 00 02 F1 | 	add	_var01, result1
2a3c0     01 12 06 F1 | 	add	arg01, #1
2a3c4                 | LR__4332
2a3c4                 | LR__4333
2a3c4                 | ' 	return sum;
2a3c4     00 FB 01 F6 | 	mov	result1, _var01
2a3c8                 | _fatfs_cc_sum_sfn_ret
2a3c8     2D 00 64 FD | 	ret
2a3cc                 | 
2a3cc                 | _fatfs_cc_dir_read
2a3cc     0C 4A 05 F6 | 	mov	COUNT_, #12
2a3d0     A8 00 A0 FD | 	call	#pushregs_
2a3d4     09 1F 02 F6 | 	mov	local01, arg01
2a3d8     0A 21 02 F6 | 	mov	local02, arg02
2a3dc     04 22 06 F6 | 	mov	local03, #4
2a3e0     0F 25 02 FB | 	rdlong	local04, local01
2a3e4     FF 26 06 F6 | 	mov	local05, #255
2a3e8     FF 28 06 F6 | 	mov	local06, #255
2a3ec                 | ' )
2a3ec                 | ' {
2a3ec                 | ' 	FRESULT res = FR_NO_FILE;
2a3ec                 | ' 	FATFS *fs = dp->obj.fs;
2a3ec                 | ' 	BYTE attr, b;
2a3ec                 | ' 
2a3ec                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2a3ec                 | ' 
2a3ec                 | ' 
2a3ec                 | ' 	while (dp->sect) {
2a3ec                 | LR__4340
2a3ec     18 1E 06 F1 | 	add	local01, #24
2a3f0     0F FB 09 FB | 	rdlong	result1, local01 wz
2a3f4     18 1E 86 F1 | 	sub	local01, #24
2a3f8     AC 01 90 AD |  if_e	jmp	#LR__4350
2a3fc     18 1E 06 F1 | 	add	local01, #24
2a400     0F 15 02 FB | 	rdlong	arg02, local01
2a404     18 1E 86 F1 | 	sub	local01, #24
2a408     12 13 02 F6 | 	mov	arg01, local04
2a40c     AC ED BF FD | 	call	#_fatfs_cc_move_window
2a410     FD 22 0A F6 | 	mov	local03, result1 wz
2a414     90 01 90 5D |  if_ne	jmp	#LR__4350
2a418     1C 1E 06 F1 | 	add	local01, #28
2a41c     0F FB 01 FB | 	rdlong	result1, local01
2a420     1C 1E 86 F1 | 	sub	local01, #28
2a424     FD 2A C2 FA | 	rdbyte	local07, result1
2a428     15 FB 01 F6 | 	mov	result1, local07
2a42c     07 FA 4D F7 | 	zerox	result1, #7 wz
2a430     04 22 06 A6 |  if_e	mov	local03, #4
2a434                 | ' 			res = FR_NO_FILE; break;
2a434     70 01 90 AD |  if_e	jmp	#LR__4350
2a438     1C 1E 06 F1 | 	add	local01, #28
2a43c     0F 2D 02 FB | 	rdlong	local08, local01
2a440     0B 2C 06 F1 | 	add	local08, #11
2a444     16 2F C2 FA | 	rdbyte	local09, local08
2a448     3F 2E 06 F5 | 	and	local09, #63
2a44c     16 1E 86 F1 | 	sub	local01, #22
2a450     0F 2F 42 FC | 	wrbyte	local09, local01
2a454     06 1E 86 F1 | 	sub	local01, #6
2a458     15 FB E1 F8 | 	getbyte	result1, local07, #0
2a45c     E5 FA 0D F2 | 	cmp	result1, #229 wz
2a460     15 2D 02 56 |  if_ne	mov	local08, local07
2a464     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
2a468     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
2a46c     1C 00 90 AD |  if_e	jmp	#LR__4341
2a470     00 30 06 F6 | 	mov	local10, #0
2a474     17 2D E2 F8 | 	getbyte	local08, local09, #0
2a478     20 2C 26 F5 | 	andn	local08, #32
2a47c     08 2C 0E F2 | 	cmp	local08, #8 wz
2a480     01 30 06 A6 |  if_e	mov	local10, #1
2a484     10 31 0A F2 | 	cmp	local10, local02 wz
2a488     08 00 90 AD |  if_e	jmp	#LR__4342
2a48c                 | LR__4341
2a48c     FF 26 06 F6 | 	mov	local05, #255
2a490     00 01 90 FD | 	jmp	#LR__4349
2a494                 | LR__4342
2a494     17 2F E2 F8 | 	getbyte	local09, local09, #0
2a498     0F 2E 0E F2 | 	cmp	local09, #15 wz
2a49c     B4 00 90 5D |  if_ne	jmp	#LR__4346
2a4a0     15 33 E2 F8 | 	getbyte	local11, local07, #0
2a4a4     40 32 CE F7 | 	test	local11, #64 wz
2a4a8     30 00 90 AD |  if_e	jmp	#LR__4343
2a4ac     1C 1E 06 F1 | 	add	local01, #28
2a4b0     0F 33 02 FB | 	rdlong	local11, local01
2a4b4     0D 32 06 F1 | 	add	local11, #13
2a4b8     19 29 C2 FA | 	rdbyte	local06, local11
2a4bc     15 2B E2 F8 | 	getbyte	local07, local07, #0
2a4c0     BF 2A 06 F5 | 	and	local07, #191
2a4c4     15 27 02 F6 | 	mov	local05, local07
2a4c8     0C 1E 86 F1 | 	sub	local01, #12
2a4cc     0F 33 02 FB | 	rdlong	local11, local01
2a4d0     1C 1E 06 F1 | 	add	local01, #28
2a4d4     0F 33 62 FC | 	wrlong	local11, local01
2a4d8     2C 1E 86 F1 | 	sub	local01, #44
2a4dc                 | LR__4343
2a4dc     15 2D E2 F8 | 	getbyte	local08, local07, #0
2a4e0     13 31 E2 F8 | 	getbyte	local10, local05, #0
2a4e4     18 2D 0A F2 | 	cmp	local08, local10 wz
2a4e8     5C 00 90 5D |  if_ne	jmp	#LR__4344
2a4ec     14 31 E2 F8 | 	getbyte	local10, local06, #0
2a4f0     1C 1E 06 F1 | 	add	local01, #28
2a4f4     0F 2F 02 FB | 	rdlong	local09, local01
2a4f8     1C 1E 86 F1 | 	sub	local01, #28
2a4fc     0D 2E 06 F1 | 	add	local09, #13
2a500     17 2D C2 FA | 	rdbyte	local08, local09
2a504     16 2F E2 F8 | 	getbyte	local09, local08, #0
2a508     17 31 0A F2 | 	cmp	local10, local09 wz
2a50c     38 00 90 5D |  if_ne	jmp	#LR__4344
2a510     0C 24 06 F1 | 	add	local04, #12
2a514     12 13 02 FB | 	rdlong	arg01, local04
2a518     0C 24 86 F1 | 	sub	local04, #12
2a51c     1C 1E 06 F1 | 	add	local01, #28
2a520     0F 35 02 FB | 	rdlong	local12, local01
2a524     1C 1E 86 F1 | 	sub	local01, #28
2a528     1A 15 02 F6 | 	mov	arg02, local12
2a52c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2a530     00 FA 4D F2 | 	cmps	result1, #0 wz
2a534     13 35 02 56 |  if_ne	mov	local12, local05
2a538     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
2a53c     01 34 86 51 |  if_ne	sub	local12, #1
2a540     1A 33 02 56 |  if_ne	mov	local11, local12
2a544     04 00 90 5D |  if_ne	jmp	#LR__4345
2a548                 | LR__4344
2a548     FF 32 06 F6 | 	mov	local11, #255
2a54c                 | LR__4345
2a54c     19 27 02 F6 | 	mov	local05, local11
2a550     40 00 90 FD | 	jmp	#LR__4348
2a554                 | LR__4346
2a554     13 33 02 F6 | 	mov	local11, local05
2a558     07 32 4E F7 | 	zerox	local11, #7 wz
2a55c     20 00 90 5D |  if_ne	jmp	#LR__4347
2a560     14 29 E2 F8 | 	getbyte	local06, local06, #0
2a564     1C 1E 06 F1 | 	add	local01, #28
2a568     0F 13 02 FB | 	rdlong	arg01, local01
2a56c     1C 1E 86 F1 | 	sub	local01, #28
2a570     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2a574     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a578     FD 28 0A F2 | 	cmp	local06, result1 wz
2a57c     28 00 90 AD |  if_e	jmp	#LR__4350
2a580                 | LR__4347
2a580     2C 1E 06 F1 | 	add	local01, #44
2a584     FF FF FF FF 
2a588     0F FF 6B FC | 	wrlong	##-1, local01
2a58c     2C 1E 86 F1 | 	sub	local01, #44
2a590                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2a590                 | ' 					}
2a590                 | ' 					break;
2a590     14 00 90 FD | 	jmp	#LR__4350
2a594                 | LR__4348
2a594                 | LR__4349
2a594     0F 13 02 F6 | 	mov	arg01, local01
2a598     00 14 06 F6 | 	mov	arg02, #0
2a59c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2a5a0     FD 22 0A F6 | 	mov	local03, result1 wz
2a5a4     44 FE 9F AD |  if_e	jmp	#LR__4340
2a5a8                 | LR__4350
2a5a8     00 22 0E F2 | 	cmp	local03, #0 wz
2a5ac     18 1E 06 51 |  if_ne	add	local01, #24
2a5b0     0F 01 68 5C |  if_ne	wrlong	#0, local01
2a5b4                 | ' 	return res;
2a5b4     11 FB 01 F6 | 	mov	result1, local03
2a5b8     A7 F0 03 F6 | 	mov	ptra, fp
2a5bc     B2 00 A0 FD | 	call	#popregs_
2a5c0                 | _fatfs_cc_dir_read_ret
2a5c0     2D 00 64 FD | 	ret
2a5c4                 | 
2a5c4                 | _fatfs_cc_dir_find
2a5c4     0B 4A 05 F6 | 	mov	COUNT_, #11
2a5c8     A8 00 A0 FD | 	call	#pushregs_
2a5cc     09 1F 02 F6 | 	mov	local01, arg01
2a5d0     0F 21 02 FB | 	rdlong	local02, local01
2a5d4     0F 13 02 F6 | 	mov	arg01, local01
2a5d8     00 14 06 F6 | 	mov	arg02, #0
2a5dc     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2a5e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a5e4     18 02 90 5D |  if_ne	jmp	#LR__4372
2a5e8     FF 22 06 F6 | 	mov	local03, #255
2a5ec     FF 24 06 F6 | 	mov	local04, #255
2a5f0     2C 1E 06 F1 | 	add	local01, #44
2a5f4     FF FF FF FF 
2a5f8     0F FF 6B FC | 	wrlong	##-1, local01
2a5fc     2C 1E 86 F1 | 	sub	local01, #44
2a600                 | ' #line 2404 "ff.c"
2a600                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2a600                 | ' 
2a600                 | ' 	do {
2a600                 | LR__4360
2a600     18 1E 06 F1 | 	add	local01, #24
2a604     0F 15 02 FB | 	rdlong	arg02, local01
2a608     18 1E 86 F1 | 	sub	local01, #24
2a60c     10 13 02 F6 | 	mov	arg01, local02
2a610     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2a614     FD 26 0A F6 | 	mov	local05, result1 wz
2a618     E0 01 90 5D |  if_ne	jmp	#LR__4371
2a61c     1C 1E 06 F1 | 	add	local01, #28
2a620     0F 17 02 FB | 	rdlong	arg03, local01
2a624     1C 1E 86 F1 | 	sub	local01, #28
2a628     0B 29 C2 FA | 	rdbyte	local06, arg03
2a62c     14 17 02 F6 | 	mov	arg03, local06
2a630     07 16 4E F7 | 	zerox	arg03, #7 wz
2a634     04 26 06 A6 |  if_e	mov	local05, #4
2a638     C0 01 90 AD |  if_e	jmp	#LR__4371
2a63c     1C 1E 06 F1 | 	add	local01, #28
2a640     0F 2B 02 FB | 	rdlong	local07, local01
2a644     15 17 02 F6 | 	mov	arg03, local07
2a648     0B 16 06 F1 | 	add	arg03, #11
2a64c     0B 2D C2 FA | 	rdbyte	local08, arg03
2a650     3F 2C 06 F5 | 	and	local08, #63
2a654     16 1E 86 F1 | 	sub	local01, #22
2a658     0F 2D 42 FC | 	wrbyte	local08, local01
2a65c     06 1E 86 F1 | 	sub	local01, #6
2a660     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2a664     E5 16 0E F2 | 	cmp	arg03, #229 wz
2a668     18 00 90 AD |  if_e	jmp	#LR__4361
2a66c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2a670     08 16 CE F7 | 	test	arg03, #8 wz
2a674     16 2B 02 56 |  if_ne	mov	local07, local08
2a678     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
2a67c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2a680     18 00 90 AD |  if_e	jmp	#LR__4362
2a684                 | LR__4361
2a684     FF 24 06 F6 | 	mov	local04, #255
2a688     2C 1E 06 F1 | 	add	local01, #44
2a68c     FF FF FF FF 
2a690     0F FF 6B FC | 	wrlong	##-1, local01
2a694     2C 1E 86 F1 | 	sub	local01, #44
2a698     4C 01 90 FD | 	jmp	#LR__4370
2a69c                 | LR__4362
2a69c     16 2D E2 F8 | 	getbyte	local08, local08, #0
2a6a0     0F 2C 0E F2 | 	cmp	local08, #15 wz
2a6a4     C8 00 90 5D |  if_ne	jmp	#LR__4366
2a6a8     2B 1E 06 F1 | 	add	local01, #43
2a6ac     0F 2D C2 FA | 	rdbyte	local08, local01
2a6b0     2B 1E 86 F1 | 	sub	local01, #43
2a6b4     40 2C CE F7 | 	test	local08, #64 wz
2a6b8     2C 01 90 5D |  if_ne	jmp	#LR__4369
2a6bc     14 2F E2 F8 | 	getbyte	local09, local06, #0
2a6c0     40 2E CE F7 | 	test	local09, #64 wz
2a6c4     30 00 90 AD |  if_e	jmp	#LR__4363
2a6c8     1C 1E 06 F1 | 	add	local01, #28
2a6cc     0F 2F 02 FB | 	rdlong	local09, local01
2a6d0     0D 2E 06 F1 | 	add	local09, #13
2a6d4     17 23 C2 FA | 	rdbyte	local03, local09
2a6d8     14 29 E2 F8 | 	getbyte	local06, local06, #0
2a6dc     BF 28 06 F5 | 	and	local06, #191
2a6e0     14 25 02 F6 | 	mov	local04, local06
2a6e4     0C 1E 86 F1 | 	sub	local01, #12
2a6e8     0F 2F 02 FB | 	rdlong	local09, local01
2a6ec     1C 1E 06 F1 | 	add	local01, #28
2a6f0     0F 2F 62 FC | 	wrlong	local09, local01
2a6f4     2C 1E 86 F1 | 	sub	local01, #44
2a6f8                 | LR__4363
2a6f8     14 31 E2 F8 | 	getbyte	local10, local06, #0
2a6fc     12 2B E2 F8 | 	getbyte	local07, local04, #0
2a700     15 31 0A F2 | 	cmp	local10, local07 wz
2a704     5C 00 90 5D |  if_ne	jmp	#LR__4364
2a708     11 2D E2 F8 | 	getbyte	local08, local03, #0
2a70c     1C 1E 06 F1 | 	add	local01, #28
2a710     0F 2B 02 FB | 	rdlong	local07, local01
2a714     1C 1E 86 F1 | 	sub	local01, #28
2a718     0D 2A 06 F1 | 	add	local07, #13
2a71c     15 29 C2 FA | 	rdbyte	local06, local07
2a720     14 2B E2 F8 | 	getbyte	local07, local06, #0
2a724     15 2D 0A F2 | 	cmp	local08, local07 wz
2a728     38 00 90 5D |  if_ne	jmp	#LR__4364
2a72c     0C 20 06 F1 | 	add	local02, #12
2a730     10 13 02 FB | 	rdlong	arg01, local02
2a734     0C 20 86 F1 | 	sub	local02, #12
2a738     1C 1E 06 F1 | 	add	local01, #28
2a73c     0F 33 02 FB | 	rdlong	local11, local01
2a740     1C 1E 86 F1 | 	sub	local01, #28
2a744     19 15 02 F6 | 	mov	arg02, local11
2a748     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2a74c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a750     12 33 02 56 |  if_ne	mov	local11, local04
2a754     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2a758     01 32 86 51 |  if_ne	sub	local11, #1
2a75c     19 2F 02 56 |  if_ne	mov	local09, local11
2a760     04 00 90 5D |  if_ne	jmp	#LR__4365
2a764                 | LR__4364
2a764     FF 2E 06 F6 | 	mov	local09, #255
2a768                 | LR__4365
2a768     17 25 02 F6 | 	mov	local04, local09
2a76c     78 00 90 FD | 	jmp	#LR__4369
2a770                 | LR__4366
2a770     12 2F 02 F6 | 	mov	local09, local04
2a774     07 2E 4E F7 | 	zerox	local09, #7 wz
2a778     20 00 90 5D |  if_ne	jmp	#LR__4367
2a77c     11 31 E2 F8 | 	getbyte	local10, local03, #0
2a780     1C 1E 06 F1 | 	add	local01, #28
2a784     0F 13 02 FB | 	rdlong	arg01, local01
2a788     1C 1E 86 F1 | 	sub	local01, #28
2a78c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2a790     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a794     FD 30 0A F2 | 	cmp	local10, result1 wz
2a798     60 00 90 AD |  if_e	jmp	#LR__4371
2a79c                 | LR__4367
2a79c     2B 1E 06 F1 | 	add	local01, #43
2a7a0     0F 2F C2 FA | 	rdbyte	local09, local01
2a7a4     2B 1E 86 F1 | 	sub	local01, #43
2a7a8     01 2E CE F7 | 	test	local09, #1 wz
2a7ac     24 00 90 5D |  if_ne	jmp	#LR__4368
2a7b0     1C 1E 06 F1 | 	add	local01, #28
2a7b4     0F 13 02 FB | 	rdlong	arg01, local01
2a7b8     04 1E 06 F1 | 	add	local01, #4
2a7bc     0F 15 02 F6 | 	mov	arg02, local01
2a7c0     20 1E 86 F1 | 	sub	local01, #32
2a7c4     0B 16 06 F6 | 	mov	arg03, #11
2a7c8     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2a7cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7d0     28 00 90 AD |  if_e	jmp	#LR__4371
2a7d4                 | LR__4368
2a7d4     FF 24 06 F6 | 	mov	local04, #255
2a7d8     2C 1E 06 F1 | 	add	local01, #44
2a7dc     FF FF FF FF 
2a7e0     0F FF 6B FC | 	wrlong	##-1, local01
2a7e4     2C 1E 86 F1 | 	sub	local01, #44
2a7e8                 | LR__4369
2a7e8                 | LR__4370
2a7e8     0F 13 02 F6 | 	mov	arg01, local01
2a7ec     00 14 06 F6 | 	mov	arg02, #0
2a7f0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2a7f4     FD 26 0A F6 | 	mov	local05, result1 wz
2a7f8     04 FE 9F AD |  if_e	jmp	#LR__4360
2a7fc                 | LR__4371
2a7fc                 | ' 
2a7fc                 | ' 	return res;
2a7fc     13 FB 01 F6 | 	mov	result1, local05
2a800                 | LR__4372
2a800     A7 F0 03 F6 | 	mov	ptra, fp
2a804     B2 00 A0 FD | 	call	#popregs_
2a808                 | _fatfs_cc_dir_find_ret
2a808     2D 00 64 FD | 	ret
2a80c                 | 
2a80c                 | _fatfs_cc_dir_register
2a80c     0A 4A 05 F6 | 	mov	COUNT_, #10
2a810     A8 00 A0 FD | 	call	#pushregs_
2a814     2C F0 07 F1 | 	add	ptra, #44
2a818     04 4E 05 F1 | 	add	fp, #4
2a81c     A7 12 62 FC | 	wrlong	arg01, fp
2a820     09 1F 02 FB | 	rdlong	local01, arg01
2a824     08 4E 05 F1 | 	add	fp, #8
2a828     A7 1E 62 FC | 	wrlong	local01, fp
2a82c     08 4E 85 F1 | 	sub	fp, #8
2a830     A7 20 02 FB | 	rdlong	local02, fp
2a834     04 4E 85 F1 | 	sub	fp, #4
2a838     2B 20 06 F1 | 	add	local02, #43
2a83c     10 21 C2 FA | 	rdbyte	local02, local02
2a840     A0 20 CE F7 | 	test	local02, #160 wz
2a844     06 FA 05 56 |  if_ne	mov	result1, #6
2a848     F8 03 90 5D |  if_ne	jmp	#LR__4395
2a84c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2a84c     14 4E 05 F1 | 	add	fp, #20
2a850     A7 00 68 FC | 	wrlong	#0, fp
2a854     14 4E 85 F1 | 	sub	fp, #20
2a858     97 28 48 FB | 	callpa	#(@LR__4381-@LR__4380)>>2,fcache_load_ptr_
2a85c                 | LR__4380
2a85c     0C 4E 05 F1 | 	add	fp, #12
2a860     A7 20 02 FB | 	rdlong	local02, fp
2a864     0C 20 06 F1 | 	add	local02, #12
2a868     10 23 02 FB | 	rdlong	local03, local02
2a86c     08 4E 05 F1 | 	add	fp, #8
2a870     A7 24 02 FB | 	rdlong	local04, fp
2a874     14 4E 85 F1 | 	sub	fp, #20
2a878     01 24 66 F0 | 	shl	local04, #1
2a87c     11 25 02 F1 | 	add	local04, local03
2a880     12 21 EA FA | 	rdword	local02, local04 wz
2a884     24 00 90 AD |  if_e	jmp	#LR__4382
2a888     14 4E 05 F1 | 	add	fp, #20
2a88c     A7 26 02 FB | 	rdlong	local05, fp
2a890     13 29 02 F6 | 	mov	local06, local05
2a894     13 2B 02 F6 | 	mov	local07, local05
2a898     15 2D 02 F6 | 	mov	local08, local07
2a89c     01 2C 06 F1 | 	add	local08, #1
2a8a0     A7 2C 62 FC | 	wrlong	local08, fp
2a8a4     14 4E 85 F1 | 	sub	fp, #20
2a8a8     B0 FF 9F FD | 	jmp	#LR__4380
2a8ac                 | LR__4381
2a8ac                 | LR__4382
2a8ac     1C 4E 05 F1 | 	add	fp, #28
2a8b0     A7 12 02 F6 | 	mov	arg01, fp
2a8b4     18 4E 85 F1 | 	sub	fp, #24
2a8b8     A7 14 02 FB | 	rdlong	arg02, fp
2a8bc     04 4E 85 F1 | 	sub	fp, #4
2a8c0     20 14 06 F1 | 	add	arg02, #32
2a8c4     0C 16 06 F6 | 	mov	arg03, #12
2a8c8     18 6C BF FD | 	call	#__system____builtin_memmove
2a8cc     27 4E 05 F1 | 	add	fp, #39
2a8d0     A7 2E C2 FA | 	rdbyte	local09, fp
2a8d4     27 4E 85 F1 | 	sub	fp, #39
2a8d8     01 2E CE F7 | 	test	local09, #1 wz
2a8dc     F4 00 90 AD |  if_e	jmp	#LR__4385
2a8e0     04 4E 05 F1 | 	add	fp, #4
2a8e4     A7 30 02 FB | 	rdlong	local10, fp
2a8e8     2B 30 06 F1 | 	add	local10, #43
2a8ec     18 81 48 FC | 	wrbyte	#64, local10
2a8f0                 | ' 		dp->fn[ 11 ] =  0x40 ;
2a8f0                 | ' 		for (n = 1; n < 100; n++) {
2a8f0     0C 4E 05 F1 | 	add	fp, #12
2a8f4     A7 02 68 FC | 	wrlong	#1, fp
2a8f8     10 4E 85 F1 | 	sub	fp, #16
2a8fc                 | LR__4383
2a8fc     10 4E 05 F1 | 	add	fp, #16
2a900     A7 20 02 FB | 	rdlong	local02, fp
2a904     10 4E 85 F1 | 	sub	fp, #16
2a908     64 20 16 F2 | 	cmp	local02, #100 wc
2a90c     70 00 90 3D |  if_ae	jmp	#LR__4384
2a910     04 4E 05 F1 | 	add	fp, #4
2a914     A7 12 02 FB | 	rdlong	arg01, fp
2a918     20 12 06 F1 | 	add	arg01, #32
2a91c     18 4E 05 F1 | 	add	fp, #24
2a920     A7 14 02 F6 | 	mov	arg02, fp
2a924     10 4E 85 F1 | 	sub	fp, #16
2a928     A7 30 02 FB | 	rdlong	local10, fp
2a92c     0C 30 06 F1 | 	add	local10, #12
2a930     18 17 02 FB | 	rdlong	arg03, local10
2a934     04 4E 05 F1 | 	add	fp, #4
2a938     A7 18 02 FB | 	rdlong	arg04, fp
2a93c     10 4E 85 F1 | 	sub	fp, #16
2a940     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2a944     04 4E 05 F1 | 	add	fp, #4
2a948     A7 12 02 FB | 	rdlong	arg01, fp
2a94c     04 4E 85 F1 | 	sub	fp, #4
2a950     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2a954     08 4E 05 F1 | 	add	fp, #8
2a958     A7 FA 61 FC | 	wrlong	result1, fp
2a95c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a960     08 4E 85 F1 | 	sub	fp, #8
2a964     18 00 90 5D |  if_ne	jmp	#LR__4384
2a968     10 4E 05 F1 | 	add	fp, #16
2a96c     A7 30 02 FB | 	rdlong	local10, fp
2a970     01 30 06 F1 | 	add	local10, #1
2a974     A7 30 62 FC | 	wrlong	local10, fp
2a978     10 4E 85 F1 | 	sub	fp, #16
2a97c     7C FF 9F FD | 	jmp	#LR__4383
2a980                 | LR__4384
2a980     10 4E 05 F1 | 	add	fp, #16
2a984     A7 30 02 FB | 	rdlong	local10, fp
2a988     10 4E 85 F1 | 	sub	fp, #16
2a98c     64 30 0E F2 | 	cmp	local10, #100 wz
2a990     07 FA 05 A6 |  if_e	mov	result1, #7
2a994     AC 02 90 AD |  if_e	jmp	#LR__4395
2a998     08 4E 05 F1 | 	add	fp, #8
2a99c     A7 30 02 FB | 	rdlong	local10, fp
2a9a0     08 4E 85 F1 | 	sub	fp, #8
2a9a4     04 30 0E F2 | 	cmp	local10, #4 wz
2a9a8     08 4E 05 51 |  if_ne	add	fp, #8
2a9ac     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2a9b0     08 4E 85 51 |  if_ne	sub	fp, #8
2a9b4     8C 02 90 5D |  if_ne	jmp	#LR__4395
2a9b8     04 4E 05 F1 | 	add	fp, #4
2a9bc     A7 30 02 FB | 	rdlong	local10, fp
2a9c0     23 4E 05 F1 | 	add	fp, #35
2a9c4     A7 1E C2 FA | 	rdbyte	local01, fp
2a9c8     27 4E 85 F1 | 	sub	fp, #39
2a9cc     2B 30 06 F1 | 	add	local10, #43
2a9d0     18 1F 42 FC | 	wrbyte	local01, local10
2a9d4                 | LR__4385
2a9d4     27 4E 05 F1 | 	add	fp, #39
2a9d8     A7 20 C2 FA | 	rdbyte	local02, fp
2a9dc     27 4E 85 F1 | 	sub	fp, #39
2a9e0     02 20 CE F7 | 	test	local02, #2 wz
2a9e4     20 00 90 AD |  if_e	jmp	#LR__4386
2a9e8     14 4E 05 F1 | 	add	fp, #20
2a9ec     A7 30 02 FB | 	rdlong	local10, fp
2a9f0     0C 30 06 F1 | 	add	local10, #12
2a9f4     0D 30 16 FD | 	qdiv	local10, #13
2a9f8     14 4E 85 F1 | 	sub	fp, #20
2a9fc     18 30 62 FD | 	getqx	local10
2aa00     01 30 06 F1 | 	add	local10, #1
2aa04     04 00 90 FD | 	jmp	#LR__4387
2aa08                 | LR__4386
2aa08     01 30 06 F6 | 	mov	local10, #1
2aa0c                 | LR__4387
2aa0c     18 4E 05 F1 | 	add	fp, #24
2aa10     A7 30 62 FC | 	wrlong	local10, fp
2aa14     14 4E 85 F1 | 	sub	fp, #20
2aa18     A7 12 02 FB | 	rdlong	arg01, fp
2aa1c     18 15 02 F6 | 	mov	arg02, local10
2aa20     04 4E 85 F1 | 	sub	fp, #4
2aa24     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2aa28     08 4E 05 F1 | 	add	fp, #8
2aa2c     A7 FA 61 FC | 	wrlong	result1, fp
2aa30     08 4E 85 F1 | 	sub	fp, #8
2aa34     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa38     38 01 90 5D |  if_ne	jmp	#LR__4392
2aa3c     18 4E 05 F1 | 	add	fp, #24
2aa40     A7 30 02 FB | 	rdlong	local10, fp
2aa44     01 30 8E F1 | 	sub	local10, #1 wz
2aa48     A7 30 62 FC | 	wrlong	local10, fp
2aa4c     18 4E 85 F1 | 	sub	fp, #24
2aa50     20 01 90 AD |  if_e	jmp	#LR__4392
2aa54     04 4E 05 F1 | 	add	fp, #4
2aa58     A7 30 02 FB | 	rdlong	local10, fp
2aa5c     18 13 02 F6 | 	mov	arg01, local10
2aa60     14 4E 05 F1 | 	add	fp, #20
2aa64     A7 18 02 FB | 	rdlong	arg04, fp
2aa68     18 4E 85 F1 | 	sub	fp, #24
2aa6c     05 18 66 F0 | 	shl	arg04, #5
2aa70     10 30 06 F1 | 	add	local10, #16
2aa74     18 15 02 FB | 	rdlong	arg02, local10
2aa78     0C 15 82 F1 | 	sub	arg02, arg04
2aa7c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2aa80     08 4E 05 F1 | 	add	fp, #8
2aa84     A7 FA 61 FC | 	wrlong	result1, fp
2aa88     08 4E 85 F1 | 	sub	fp, #8
2aa8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa90     E0 00 90 5D |  if_ne	jmp	#LR__4391
2aa94     04 4E 05 F1 | 	add	fp, #4
2aa98     A7 12 02 FB | 	rdlong	arg01, fp
2aa9c     04 4E 85 F1 | 	sub	fp, #4
2aaa0     20 12 06 F1 | 	add	arg01, #32
2aaa4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2aaa8     FD 30 02 F6 | 	mov	local10, result1
2aaac     28 4E 05 F1 | 	add	fp, #40
2aab0     A7 30 42 FC | 	wrbyte	local10, fp
2aab4     28 4E 85 F1 | 	sub	fp, #40
2aab8                 | ' 			sum = sum_sfn(dp->fn);
2aab8                 | ' 			do {
2aab8                 | LR__4388
2aab8     0C 4E 05 F1 | 	add	fp, #12
2aabc     A7 12 02 FB | 	rdlong	arg01, fp
2aac0     08 4E 85 F1 | 	sub	fp, #8
2aac4     A7 1E 02 FB | 	rdlong	local01, fp
2aac8     04 4E 85 F1 | 	sub	fp, #4
2aacc     18 1E 06 F1 | 	add	local01, #24
2aad0     0F 15 02 FB | 	rdlong	arg02, local01
2aad4     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2aad8     08 4E 05 F1 | 	add	fp, #8
2aadc     A7 FA 61 FC | 	wrlong	result1, fp
2aae0     00 FA 4D F2 | 	cmps	result1, #0 wz
2aae4     08 4E 85 F1 | 	sub	fp, #8
2aae8     88 00 90 5D |  if_ne	jmp	#LR__4390
2aaec     0C 4E 05 F1 | 	add	fp, #12
2aaf0     A7 20 02 FB | 	rdlong	local02, fp
2aaf4     0C 20 06 F1 | 	add	local02, #12
2aaf8     10 13 02 FB | 	rdlong	arg01, local02
2aafc     08 4E 85 F1 | 	sub	fp, #8
2ab00     A7 1E 02 FB | 	rdlong	local01, fp
2ab04     1C 1E 06 F1 | 	add	local01, #28
2ab08     0F 15 02 FB | 	rdlong	arg02, local01
2ab0c     14 4E 05 F1 | 	add	fp, #20
2ab10     A7 16 02 FB | 	rdlong	arg03, fp
2ab14     10 4E 05 F1 | 	add	fp, #16
2ab18     A7 18 C2 FA | 	rdbyte	arg04, fp
2ab1c     28 4E 85 F1 | 	sub	fp, #40
2ab20     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2ab24     0C 4E 05 F1 | 	add	fp, #12
2ab28     A7 30 02 FB | 	rdlong	local10, fp
2ab2c     03 30 06 F1 | 	add	local10, #3
2ab30     18 03 48 FC | 	wrbyte	#1, local10
2ab34     08 4E 85 F1 | 	sub	fp, #8
2ab38     A7 12 02 FB | 	rdlong	arg01, fp
2ab3c     04 4E 85 F1 | 	sub	fp, #4
2ab40     00 14 06 F6 | 	mov	arg02, #0
2ab44     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2ab48     08 4E 05 F1 | 	add	fp, #8
2ab4c     A7 FA 61 FC | 	wrlong	result1, fp
2ab50     00 FA 4D F2 | 	cmps	result1, #0 wz
2ab54     08 4E 85 F1 | 	sub	fp, #8
2ab58     18 00 90 5D |  if_ne	jmp	#LR__4389
2ab5c     18 4E 05 F1 | 	add	fp, #24
2ab60     A7 30 02 FB | 	rdlong	local10, fp
2ab64     01 30 8E F1 | 	sub	local10, #1 wz
2ab68     A7 30 62 FC | 	wrlong	local10, fp
2ab6c     18 4E 85 F1 | 	sub	fp, #24
2ab70     44 FF 9F 5D |  if_ne	jmp	#LR__4388
2ab74                 | LR__4389
2ab74                 | LR__4390
2ab74                 | LR__4391
2ab74                 | LR__4392
2ab74     08 4E 05 F1 | 	add	fp, #8
2ab78     A7 30 0A FB | 	rdlong	local10, fp wz
2ab7c     08 4E 85 F1 | 	sub	fp, #8
2ab80     B4 00 90 5D |  if_ne	jmp	#LR__4394
2ab84     0C 4E 05 F1 | 	add	fp, #12
2ab88     A7 12 02 FB | 	rdlong	arg01, fp
2ab8c     08 4E 85 F1 | 	sub	fp, #8
2ab90     A7 1E 02 FB | 	rdlong	local01, fp
2ab94     04 4E 85 F1 | 	sub	fp, #4
2ab98     18 1E 06 F1 | 	add	local01, #24
2ab9c     0F 15 02 FB | 	rdlong	arg02, local01
2aba0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2aba4     08 4E 05 F1 | 	add	fp, #8
2aba8     A7 FA 61 FC | 	wrlong	result1, fp
2abac     08 4E 85 F1 | 	sub	fp, #8
2abb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2abb4     80 00 90 5D |  if_ne	jmp	#LR__4393
2abb8     04 4E 05 F1 | 	add	fp, #4
2abbc     A7 20 02 FB | 	rdlong	local02, fp
2abc0     04 4E 85 F1 | 	sub	fp, #4
2abc4     1C 20 06 F1 | 	add	local02, #28
2abc8     10 13 02 FB | 	rdlong	arg01, local02
2abcc     00 14 06 F6 | 	mov	arg02, #0
2abd0     20 16 06 F6 | 	mov	arg03, #32
2abd4     98 00 A0 FD | 	call	#\builtin_bytefill_
2abd8     04 4E 05 F1 | 	add	fp, #4
2abdc     A7 14 02 FB | 	rdlong	arg02, fp
2abe0     0A 1F 02 F6 | 	mov	local01, arg02
2abe4     1C 1E 06 F1 | 	add	local01, #28
2abe8     0F 13 02 FB | 	rdlong	arg01, local01
2abec     04 4E 85 F1 | 	sub	fp, #4
2abf0     20 14 06 F1 | 	add	arg02, #32
2abf4     0B 16 06 F6 | 	mov	arg03, #11
2abf8     E8 68 BF FD | 	call	#__system____builtin_memmove
2abfc     04 4E 05 F1 | 	add	fp, #4
2ac00     A7 2E 02 FB | 	rdlong	local09, fp
2ac04     17 31 02 F6 | 	mov	local10, local09
2ac08     1C 30 06 F1 | 	add	local10, #28
2ac0c     18 1F 02 FB | 	rdlong	local01, local10
2ac10     2B 2E 06 F1 | 	add	local09, #43
2ac14     17 31 C2 FA | 	rdbyte	local10, local09
2ac18     18 30 06 F5 | 	and	local10, #24
2ac1c     0C 1E 06 F1 | 	add	local01, #12
2ac20     0F 31 42 FC | 	wrbyte	local10, local01
2ac24     08 4E 05 F1 | 	add	fp, #8
2ac28     A7 30 02 FB | 	rdlong	local10, fp
2ac2c     0C 4E 85 F1 | 	sub	fp, #12
2ac30     03 30 06 F1 | 	add	local10, #3
2ac34     18 03 48 FC | 	wrbyte	#1, local10
2ac38                 | LR__4393
2ac38                 | LR__4394
2ac38                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2ac38                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2ac38                 | ' 
2ac38                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2ac38                 | ' 
2ac38                 | ' 			fs->wflag = 1;
2ac38                 | ' 		}
2ac38                 | ' 	}
2ac38                 | ' 
2ac38                 | ' 	return res;
2ac38     08 4E 05 F1 | 	add	fp, #8
2ac3c     A7 FA 01 FB | 	rdlong	result1, fp
2ac40     08 4E 85 F1 | 	sub	fp, #8
2ac44                 | LR__4395
2ac44     A7 F0 03 F6 | 	mov	ptra, fp
2ac48     B2 00 A0 FD | 	call	#popregs_
2ac4c                 | _fatfs_cc_dir_register_ret
2ac4c     2D 00 64 FD | 	ret
2ac50                 | 
2ac50                 | _fatfs_cc_dir_remove
2ac50     05 4A 05 F6 | 	mov	COUNT_, #5
2ac54     A8 00 A0 FD | 	call	#pushregs_
2ac58     09 1F 02 F6 | 	mov	local01, arg01
2ac5c     0F 21 02 FB | 	rdlong	local02, local01
2ac60     10 1E 06 F1 | 	add	local01, #16
2ac64     0F 23 02 FB | 	rdlong	local03, local01
2ac68     1C 1E 06 F1 | 	add	local01, #28
2ac6c     0F 15 02 FB | 	rdlong	arg02, local01
2ac70     2C 1E 86 F1 | 	sub	local01, #44
2ac74     FF FF 7F FF 
2ac78     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2ac7c     00 24 06 A6 |  if_e	mov	local04, #0
2ac80     18 00 90 AD |  if_e	jmp	#LR__4400
2ac84     0F 13 02 F6 | 	mov	arg01, local01
2ac88     2C 1E 06 F1 | 	add	local01, #44
2ac8c     0F 15 02 FB | 	rdlong	arg02, local01
2ac90     2C 1E 86 F1 | 	sub	local01, #44
2ac94     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2ac98     FD 24 02 F6 | 	mov	local04, result1
2ac9c                 | LR__4400
2ac9c     12 27 0A F6 | 	mov	local05, local04 wz
2aca0     64 00 90 5D |  if_ne	jmp	#LR__4403
2aca4                 | ' 		do {
2aca4                 | LR__4401
2aca4     18 1E 06 F1 | 	add	local01, #24
2aca8     0F 15 02 FB | 	rdlong	arg02, local01
2acac     18 1E 86 F1 | 	sub	local01, #24
2acb0     10 13 02 F6 | 	mov	arg01, local02
2acb4     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2acb8     FD 26 0A F6 | 	mov	local05, result1 wz
2acbc     40 00 90 5D |  if_ne	jmp	#LR__4402
2acc0     1C 1E 06 F1 | 	add	local01, #28
2acc4     0F 25 02 FB | 	rdlong	local04, local01
2acc8     12 CB 49 FC | 	wrbyte	#229, local04
2accc     03 20 06 F1 | 	add	local02, #3
2acd0     10 03 48 FC | 	wrbyte	#1, local02
2acd4     03 20 86 F1 | 	sub	local02, #3
2acd8     0C 1E 86 F1 | 	sub	local01, #12
2acdc     0F 25 02 FB | 	rdlong	local04, local01
2ace0     10 1E 86 F1 | 	sub	local01, #16
2ace4     11 25 12 F2 | 	cmp	local04, local03 wc
2ace8     14 00 90 3D |  if_ae	jmp	#LR__4402
2acec     0F 13 02 F6 | 	mov	arg01, local01
2acf0     00 14 06 F6 | 	mov	arg02, #0
2acf4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2acf8     FD 26 0A F6 | 	mov	local05, result1 wz
2acfc     A4 FF 9F AD |  if_e	jmp	#LR__4401
2ad00                 | LR__4402
2ad00     04 26 0E F2 | 	cmp	local05, #4 wz
2ad04     02 26 06 A6 |  if_e	mov	local05, #2
2ad08                 | LR__4403
2ad08                 | ' 	}
2ad08                 | ' #line 2590 "ff.c"
2ad08                 | ' 	return res;
2ad08     13 FB 01 F6 | 	mov	result1, local05
2ad0c     A7 F0 03 F6 | 	mov	ptra, fp
2ad10     B2 00 A0 FD | 	call	#popregs_
2ad14                 | _fatfs_cc_dir_remove_ret
2ad14     2D 00 64 FD | 	ret
2ad18                 | 
2ad18                 | _fatfs_cc_get_fileinfo
2ad18     0F 4A 05 F6 | 	mov	COUNT_, #15
2ad1c     A8 00 A0 FD | 	call	#pushregs_
2ad20     09 1F 02 F6 | 	mov	local01, arg01
2ad24     0A 21 02 F6 | 	mov	local02, arg02
2ad28     0F 23 02 FB | 	rdlong	local03, local01
2ad2c     1C 20 06 F1 | 	add	local02, #28
2ad30     10 01 48 FC | 	wrbyte	#0, local02
2ad34     1C 20 86 F1 | 	sub	local02, #28
2ad38     18 1E 06 F1 | 	add	local01, #24
2ad3c     0F 25 0A FB | 	rdlong	local04, local01 wz
2ad40     18 1E 86 F1 | 	sub	local01, #24
2ad44     90 03 90 AD |  if_e	jmp	#LR__4424
2ad48     2C 1E 06 F1 | 	add	local01, #44
2ad4c     0F 25 02 FB | 	rdlong	local04, local01
2ad50     2C 1E 86 F1 | 	sub	local01, #44
2ad54     FF FF 7F FF 
2ad58     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2ad5c     D8 00 90 AD |  if_e	jmp	#LR__4413
2ad60     00 26 06 F6 | 	mov	local05, #0
2ad64     00 28 06 F6 | 	mov	local06, #0
2ad68     00 2A 06 F6 | 	mov	local07, #0
2ad6c                 | ' 			si = di = 0;
2ad6c                 | ' 			hs = 0;
2ad6c                 | ' 			while (fs->lfnbuf[si] != 0) {
2ad6c                 | LR__4410
2ad6c     0C 22 06 F1 | 	add	local03, #12
2ad70     11 25 02 FB | 	rdlong	local04, local03
2ad74     0C 22 86 F1 | 	sub	local03, #12
2ad78     14 2D 02 F6 | 	mov	local08, local06
2ad7c     01 2C 66 F0 | 	shl	local08, #1
2ad80     12 2D 02 F1 | 	add	local08, local04
2ad84     16 25 EA FA | 	rdword	local04, local08 wz
2ad88     90 00 90 AD |  if_e	jmp	#LR__4412
2ad8c     0C 22 06 F1 | 	add	local03, #12
2ad90     11 2F 02 FB | 	rdlong	local09, local03
2ad94     0C 22 86 F1 | 	sub	local03, #12
2ad98     14 31 02 F6 | 	mov	local10, local06
2ad9c     01 30 66 F0 | 	shl	local10, #1
2ada0     17 31 02 F1 | 	add	local10, local09
2ada4     18 33 E2 FA | 	rdword	local11, local10
2ada8     15 25 02 F6 | 	mov	local04, local07
2adac     0F 24 4E F7 | 	zerox	local04, #15 wz
2adb0     01 28 06 F1 | 	add	local06, #1
2adb4     24 00 90 5D |  if_ne	jmp	#LR__4411
2adb8     19 35 32 F9 | 	getword	local12, local11, #0
2adbc     6C 00 00 FF 
2adc0     00 34 16 F2 | 	cmp	local12, ##55296 wc
2adc4     14 00 90 CD |  if_b	jmp	#LR__4411
2adc8     19 37 32 F9 | 	getword	local13, local11, #0
2adcc     70 00 00 FF 
2add0     00 36 16 F2 | 	cmp	local13, ##57344 wc
2add4     19 2B 02 C6 |  if_b	mov	local07, local11
2add8                 | ' 					hs = wc; continue;
2add8     90 FF 9F CD |  if_b	jmp	#LR__4410
2addc                 | LR__4411
2addc     15 13 32 F9 | 	getword	arg01, local07, #0
2ade0     10 12 66 F0 | 	shl	arg01, #16
2ade4     19 33 32 F9 | 	getword	local11, local11, #0
2ade8     19 13 42 F5 | 	or	arg01, local11
2adec     13 15 02 F6 | 	mov	arg02, local05
2adf0     1C 20 06 F1 | 	add	local02, #28
2adf4     10 15 02 F1 | 	add	arg02, local02
2adf8     FF 16 06 F6 | 	mov	arg03, #255
2adfc     13 17 82 F1 | 	sub	arg03, local05
2ae00     1C 20 86 F1 | 	sub	local02, #28
2ae04     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2ae08     FD 38 0A F6 | 	mov	local14, result1 wz
2ae0c     00 26 06 A6 |  if_e	mov	local05, #0
2ae10     1C 27 02 51 |  if_ne	add	local05, local14
2ae14     00 2A 06 56 |  if_ne	mov	local07, #0
2ae18     50 FF 9F 5D |  if_ne	jmp	#LR__4410
2ae1c                 | LR__4412
2ae1c     15 25 02 F6 | 	mov	local04, local07
2ae20     0F 24 4E F7 | 	zerox	local04, #15 wz
2ae24     00 26 06 56 |  if_ne	mov	local05, #0
2ae28     1C 20 06 F1 | 	add	local02, #28
2ae2c     10 27 02 F1 | 	add	local05, local02
2ae30     13 01 48 FC | 	wrbyte	#0, local05
2ae34     1C 20 86 F1 | 	sub	local02, #28
2ae38                 | LR__4413
2ae38     00 26 06 F6 | 	mov	local05, #0
2ae3c     00 28 06 F6 | 	mov	local06, #0
2ae40                 | ' 			fno->fname[di] = 0;
2ae40                 | ' 		}
2ae40                 | ' 	}
2ae40                 | ' 
2ae40                 | ' 	si = di = 0;
2ae40                 | ' 	while (si < 11) {
2ae40                 | LR__4414
2ae40     0B 28 16 F2 | 	cmp	local06, #11 wc
2ae44     20 01 90 3D |  if_ae	jmp	#LR__4417
2ae48     1C 1E 06 F1 | 	add	local01, #28
2ae4c     0F 2F 02 FB | 	rdlong	local09, local01
2ae50     1C 1E 86 F1 | 	sub	local01, #28
2ae54     14 31 02 F6 | 	mov	local10, local06
2ae58     17 31 02 F1 | 	add	local10, local09
2ae5c     18 33 C2 FA | 	rdbyte	local11, local10
2ae60     19 25 32 F9 | 	getword	local04, local11, #0
2ae64     20 24 0E F2 | 	cmp	local04, #32 wz
2ae68     01 28 06 F1 | 	add	local06, #1
2ae6c     D0 FF 9F AD |  if_e	jmp	#LR__4414
2ae70     19 25 32 F9 | 	getword	local04, local11, #0
2ae74     05 24 0E F2 | 	cmp	local04, #5 wz
2ae78     E5 32 06 A6 |  if_e	mov	local11, #229
2ae7c     09 28 0E F2 | 	cmp	local06, #9 wz
2ae80     20 00 90 5D |  if_ne	jmp	#LR__4415
2ae84     0C 26 16 F2 | 	cmp	local05, #12 wc
2ae88     18 00 90 3D |  if_ae	jmp	#LR__4415
2ae8c     13 37 02 F6 | 	mov	local13, local05
2ae90     0C 20 06 F1 | 	add	local02, #12
2ae94     10 37 02 F1 | 	add	local13, local02
2ae98     1B 5D 48 FC | 	wrbyte	#46, local13
2ae9c     01 26 06 F1 | 	add	local05, #1
2aea0     0C 20 86 F1 | 	sub	local02, #12
2aea4                 | LR__4415
2aea4     19 13 32 F9 | 	getword	arg01, local11, #0
2aea8     07 12 4E F7 | 	zerox	arg01, #7 wz
2aeac     00 FA 05 56 |  if_ne	mov	result1, #0
2aeb0                 | ' 
2aeb0                 | ' 	return 0;
2aeb0     00 FA 05 A6 |  if_e	mov	result1, #0
2aeb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aeb8     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2aebc     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2aec0     50 00 90 AD |  if_e	jmp	#LR__4416
2aec4     1C 1E 06 F1 | 	add	local01, #28
2aec8     0F 31 02 FB | 	rdlong	local10, local01
2aecc     1C 1E 86 F1 | 	sub	local01, #28
2aed0     14 2D 02 F6 | 	mov	local08, local06
2aed4     18 2D 02 F1 | 	add	local08, local10
2aed8     16 13 CA FA | 	rdbyte	arg01, local08 wz
2aedc     00 FA 05 56 |  if_ne	mov	result1, #0
2aee0                 | ' 
2aee0                 | ' 	return 0;
2aee0     00 FA 05 A6 |  if_e	mov	result1, #0
2aee4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aee8     28 00 90 AD |  if_e	jmp	#LR__4416
2aeec     19 33 32 F9 | 	getword	local11, local11, #0
2aef0     08 32 66 F0 | 	shl	local11, #8
2aef4     1C 1E 06 F1 | 	add	local01, #28
2aef8     0F 39 02 FB | 	rdlong	local14, local01
2aefc     1C 1E 86 F1 | 	sub	local01, #28
2af00     14 2F 02 F6 | 	mov	local09, local06
2af04     1C 2F 02 F1 | 	add	local09, local14
2af08     17 35 C2 FA | 	rdbyte	local12, local09
2af0c     1A 33 42 F5 | 	or	local11, local12
2af10     01 28 06 F1 | 	add	local06, #1
2af14                 | LR__4416
2af14     19 13 02 F6 | 	mov	arg01, local11
2af18     01 00 00 FF 
2af1c     52 15 06 F6 | 	mov	arg02, ##850
2af20     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2af24     FD 32 02 F6 | 	mov	local11, result1
2af28     19 25 02 F6 | 	mov	local04, local11
2af2c     0F 24 4E F7 | 	zerox	local04, #15 wz
2af30     00 26 06 A6 |  if_e	mov	local05, #0
2af34     30 00 90 AD |  if_e	jmp	#LR__4417
2af38     19 13 32 F9 | 	getword	arg01, local11, #0
2af3c     13 15 02 F6 | 	mov	arg02, local05
2af40     0C 20 06 F1 | 	add	local02, #12
2af44     10 15 02 F1 | 	add	arg02, local02
2af48     0C 16 06 F6 | 	mov	arg03, #12
2af4c     13 17 82 F1 | 	sub	arg03, local05
2af50     0C 20 86 F1 | 	sub	local02, #12
2af54     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2af58     FD 38 0A F6 | 	mov	local14, result1 wz
2af5c     00 26 06 A6 |  if_e	mov	local05, #0
2af60     1C 27 02 51 |  if_ne	add	local05, local14
2af64     D8 FE 9F 5D |  if_ne	jmp	#LR__4414
2af68                 | LR__4417
2af68     13 25 02 F6 | 	mov	local04, local05
2af6c     0C 20 06 F1 | 	add	local02, #12
2af70     10 25 02 F1 | 	add	local04, local02
2af74     12 01 48 FC | 	wrbyte	#0, local04
2af78     10 20 06 F1 | 	add	local02, #16
2af7c     10 25 CA FA | 	rdbyte	local04, local02 wz
2af80     1C 20 86 F1 | 	sub	local02, #28
2af84     F8 00 90 5D |  if_ne	jmp	#LR__4423
2af88     00 26 0E F2 | 	cmp	local05, #0 wz
2af8c     1C 00 90 5D |  if_ne	jmp	#LR__4418
2af90     13 37 02 F6 | 	mov	local13, local05
2af94     1C 20 06 F1 | 	add	local02, #28
2af98     10 37 02 F1 | 	add	local13, local02
2af9c     1B 7F 48 FC | 	wrbyte	#63, local13
2afa0     01 26 06 F1 | 	add	local05, #1
2afa4     1C 20 86 F1 | 	sub	local02, #28
2afa8     A4 00 90 FD | 	jmp	#LR__4422
2afac                 | LR__4418
2afac                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2afac     00 26 06 F6 | 	mov	local05, #0
2afb0     00 28 06 F6 | 	mov	local06, #0
2afb4     08 3A 06 F6 | 	mov	local15, #8
2afb8                 | LR__4419
2afb8     14 25 02 F6 | 	mov	local04, local06
2afbc     0C 20 06 F1 | 	add	local02, #12
2afc0     10 25 02 F1 | 	add	local04, local02
2afc4     12 37 CA FA | 	rdbyte	local13, local04 wz
2afc8     0C 20 86 F1 | 	sub	local02, #12
2afcc     80 00 90 AD |  if_e	jmp	#LR__4421
2afd0     14 2D 02 F6 | 	mov	local08, local06
2afd4     0C 20 06 F1 | 	add	local02, #12
2afd8     10 2D 02 F1 | 	add	local08, local02
2afdc     16 33 C2 FA | 	rdbyte	local11, local08
2afe0     19 39 32 F9 | 	getword	local14, local11, #0
2afe4     2E 38 0E F2 | 	cmp	local14, #46 wz
2afe8     0C 20 86 F1 | 	sub	local02, #12
2afec     10 3A 06 A6 |  if_e	mov	local15, #16
2aff0     19 39 32 F9 | 	getword	local14, local11, #0
2aff4     41 38 16 F2 | 	cmp	local14, #65 wc
2aff8     30 00 90 CD |  if_b	jmp	#LR__4420
2affc     19 2D 32 F9 | 	getword	local08, local11, #0
2b000     5B 2C 16 F2 | 	cmp	local08, #91 wc
2b004     24 00 90 3D |  if_ae	jmp	#LR__4420
2b008     1C 1E 06 F1 | 	add	local01, #28
2b00c     0F 2F 02 FB | 	rdlong	local09, local01
2b010     1C 1E 86 F1 | 	sub	local01, #28
2b014     0C 2E 06 F1 | 	add	local09, #12
2b018     17 31 C2 FA | 	rdbyte	local10, local09
2b01c     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2b020     1C 31 CA F7 | 	test	local10, local14 wz
2b024     19 33 32 59 |  if_ne	getword	local11, local11, #0
2b028     20 32 06 51 |  if_ne	add	local11, #32
2b02c                 | LR__4420
2b02c     13 39 02 F6 | 	mov	local14, local05
2b030     1C 20 06 F1 | 	add	local02, #28
2b034     10 39 02 F1 | 	add	local14, local02
2b038     19 33 32 F9 | 	getword	local11, local11, #0
2b03c     1C 33 42 FC | 	wrbyte	local11, local14
2b040     01 28 06 F1 | 	add	local06, #1
2b044     01 26 06 F1 | 	add	local05, #1
2b048     1C 20 86 F1 | 	sub	local02, #28
2b04c     68 FF 9F FD | 	jmp	#LR__4419
2b050                 | LR__4421
2b050                 | LR__4422
2b050     1C 20 06 F1 | 	add	local02, #28
2b054     10 27 02 F1 | 	add	local05, local02
2b058     13 01 48 FC | 	wrbyte	#0, local05
2b05c     1C 1E 06 F1 | 	add	local01, #28
2b060     0F 25 02 FB | 	rdlong	local04, local01
2b064     1C 1E 86 F1 | 	sub	local01, #28
2b068     0C 24 06 F1 | 	add	local04, #12
2b06c     12 37 CA FA | 	rdbyte	local13, local04 wz
2b070     1C 20 86 F1 | 	sub	local02, #28
2b074     0C 20 06 A1 |  if_e	add	local02, #12
2b078     10 01 48 AC |  if_e	wrbyte	#0, local02
2b07c     0C 20 86 A1 |  if_e	sub	local02, #12
2b080                 | LR__4423
2b080     1C 1E 06 F1 | 	add	local01, #28
2b084     0F 35 02 FB | 	rdlong	local12, local01
2b088     0B 34 06 F1 | 	add	local12, #11
2b08c     1A 25 C2 FA | 	rdbyte	local04, local12
2b090     3F 24 06 F5 | 	and	local04, #63
2b094     08 20 06 F1 | 	add	local02, #8
2b098     10 25 42 FC | 	wrbyte	local04, local02
2b09c     08 20 86 F1 | 	sub	local02, #8
2b0a0     0F 13 02 FB | 	rdlong	arg01, local01
2b0a4     1C 12 06 F1 | 	add	arg01, #28
2b0a8                 | ' {
2b0a8                 | ' 
2b0a8                 | ' 	return *((DWORD*)ptr);
2b0a8     09 FB 01 FB | 	rdlong	result1, arg01
2b0ac     10 FB 61 FC | 	wrlong	result1, local02
2b0b0     0F 13 02 FB | 	rdlong	arg01, local01
2b0b4     16 12 06 F1 | 	add	arg01, #22
2b0b8                 | ' {
2b0b8                 | ' 
2b0b8                 | ' 	return *((WORD*)ptr);
2b0b8     09 FB E1 FA | 	rdword	result1, arg01
2b0bc     06 20 06 F1 | 	add	local02, #6
2b0c0     10 FB 51 FC | 	wrword	result1, local02
2b0c4     0F 13 02 FB | 	rdlong	arg01, local01
2b0c8     18 12 06 F1 | 	add	arg01, #24
2b0cc                 | ' {
2b0cc                 | ' 
2b0cc                 | ' 	return *((WORD*)ptr);
2b0cc     09 FB E1 FA | 	rdword	result1, arg01
2b0d0     02 20 86 F1 | 	sub	local02, #2
2b0d4     10 FB 51 FC | 	wrword	result1, local02
2b0d8                 | LR__4424
2b0d8     A7 F0 03 F6 | 	mov	ptra, fp
2b0dc     B2 00 A0 FD | 	call	#popregs_
2b0e0                 | _fatfs_cc_get_fileinfo_ret
2b0e0     2D 00 64 FD | 	ret
2b0e4                 | 
2b0e4                 | _fatfs_cc_create_name
2b0e4     0D 4A 05 F6 | 	mov	COUNT_, #13
2b0e8     A8 00 A0 FD | 	call	#pushregs_
2b0ec     34 F0 07 F1 | 	add	ptra, #52
2b0f0     04 4E 05 F1 | 	add	fp, #4
2b0f4     A7 12 62 FC | 	wrlong	arg01, fp
2b0f8     04 4E 05 F1 | 	add	fp, #4
2b0fc     A7 14 62 FC | 	wrlong	arg02, fp
2b100     0A FB 01 FB | 	rdlong	result1, arg02
2b104     28 4E 05 F1 | 	add	fp, #40
2b108     A7 FA 61 FC | 	wrlong	result1, fp
2b10c     2C 4E 85 F1 | 	sub	fp, #44
2b110     A7 FA 01 FB | 	rdlong	result1, fp
2b114     FD 1E 02 FB | 	rdlong	local01, result1
2b118     0C 1E 06 F1 | 	add	local01, #12
2b11c     0F 21 02 FB | 	rdlong	local02, local01
2b120     14 4E 05 F1 | 	add	fp, #20
2b124     A7 20 62 FC | 	wrlong	local02, fp
2b128     14 4E 05 F1 | 	add	fp, #20
2b12c     A7 00 68 FC | 	wrlong	#0, fp
2b130     2C 4E 85 F1 | 	sub	fp, #44
2b134                 | ' 
2b134                 | ' 
2b134                 | ' 
2b134                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2b134                 | ' 	for (;;) {
2b134                 | LR__4430
2b134     30 4E 05 F1 | 	add	fp, #48
2b138     A7 12 02 F6 | 	mov	arg01, fp
2b13c     30 4E 85 F1 | 	sub	fp, #48
2b140     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2b144     1C 4E 05 F1 | 	add	fp, #28
2b148     A7 FA 61 FC | 	wrlong	result1, fp
2b14c     1C 4E 85 F1 | 	sub	fp, #28
2b150     FF FF 7F FF 
2b154     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b158     06 FA 05 A6 |  if_e	mov	result1, #6
2b15c     74 08 90 AD |  if_e	jmp	#LR__4470
2b160     1C 4E 05 F1 | 	add	fp, #28
2b164     A7 1E 02 FB | 	rdlong	local01, fp
2b168     1C 4E 85 F1 | 	sub	fp, #28
2b16c     80 00 00 FF 
2b170     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2b174     3C 00 90 CD |  if_b	jmp	#LR__4431
2b178     18 4E 05 F1 | 	add	fp, #24
2b17c     A7 22 02 FB | 	rdlong	local03, fp
2b180     14 4E 05 F1 | 	add	fp, #20
2b184     A7 1E 02 FB | 	rdlong	local01, fp
2b188     0F 25 02 F6 | 	mov	local04, local01
2b18c     01 24 06 F1 | 	add	local04, #1
2b190     A7 24 62 FC | 	wrlong	local04, fp
2b194     01 1E 66 F0 | 	shl	local01, #1
2b198     11 1F 02 F1 | 	add	local01, local03
2b19c     10 4E 85 F1 | 	sub	fp, #16
2b1a0     A7 26 02 FB | 	rdlong	local05, fp
2b1a4     1C 4E 85 F1 | 	sub	fp, #28
2b1a8     13 29 02 F6 | 	mov	local06, local05
2b1ac     10 28 46 F0 | 	shr	local06, #16
2b1b0     0F 29 52 FC | 	wrword	local06, local01
2b1b4                 | LR__4431
2b1b4     1C 4E 05 F1 | 	add	fp, #28
2b1b8     A7 1E 02 FB | 	rdlong	local01, fp
2b1bc     08 4E 85 F1 | 	sub	fp, #8
2b1c0     A7 1E 52 FC | 	wrword	local01, fp
2b1c4     A7 1E E2 FA | 	rdword	local01, fp
2b1c8     14 4E 85 F1 | 	sub	fp, #20
2b1cc     20 1E 16 F2 | 	cmp	local01, #32 wc
2b1d0     B0 00 90 CD |  if_b	jmp	#LR__4433
2b1d4     14 4E 05 F1 | 	add	fp, #20
2b1d8     A7 1E E2 FA | 	rdword	local01, fp
2b1dc     14 4E 85 F1 | 	sub	fp, #20
2b1e0     2F 1E 0E F2 | 	cmp	local01, #47 wz
2b1e4     14 4E 05 51 |  if_ne	add	fp, #20
2b1e8     A7 24 E2 5A |  if_ne	rdword	local04, fp
2b1ec     14 4E 85 51 |  if_ne	sub	fp, #20
2b1f0     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2b1f4     8C 00 90 AD |  if_e	jmp	#LR__4433
2b1f8     14 4E 05 F1 | 	add	fp, #20
2b1fc     A7 12 E2 FA | 	rdword	arg01, fp
2b200     14 4E 85 F1 | 	sub	fp, #20
2b204     80 12 16 F2 | 	cmp	arg01, #128 wc
2b208     24 00 90 3D |  if_ae	jmp	#LR__4432
2b20c     88 01 00 FF 
2b210     48 13 06 F6 | 	mov	arg01, ##@LR__5092
2b214     14 4E 05 F1 | 	add	fp, #20
2b218     A7 14 E2 FA | 	rdword	arg02, fp
2b21c     14 4E 85 F1 | 	sub	fp, #20
2b220     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2b224     00 FA 0D F2 | 	cmp	result1, #0 wz
2b228     06 FA 05 56 |  if_ne	mov	result1, #6
2b22c     A4 07 90 5D |  if_ne	jmp	#LR__4470
2b230                 | LR__4432
2b230     2C 4E 05 F1 | 	add	fp, #44
2b234     A7 28 02 FB | 	rdlong	local06, fp
2b238     2C 4E 85 F1 | 	sub	fp, #44
2b23c     FF 28 16 F2 | 	cmp	local06, #255 wc
2b240     06 FA 05 36 |  if_ae	mov	result1, #6
2b244     8C 07 90 3D |  if_ae	jmp	#LR__4470
2b248     18 4E 05 F1 | 	add	fp, #24
2b24c     A7 22 02 FB | 	rdlong	local03, fp
2b250     14 4E 05 F1 | 	add	fp, #20
2b254     A7 20 02 FB | 	rdlong	local02, fp
2b258     10 25 02 F6 | 	mov	local04, local02
2b25c     01 24 06 F1 | 	add	local04, #1
2b260     A7 24 62 FC | 	wrlong	local04, fp
2b264     10 1F 02 F6 | 	mov	local01, local02
2b268     01 1E 66 F0 | 	shl	local01, #1
2b26c     11 1F 02 F1 | 	add	local01, local03
2b270     18 4E 85 F1 | 	sub	fp, #24
2b274     A7 28 E2 FA | 	rdword	local06, fp
2b278     14 4E 85 F1 | 	sub	fp, #20
2b27c     0F 29 52 FC | 	wrword	local06, local01
2b280     B0 FE 9F FD | 	jmp	#LR__4430
2b284                 | LR__4433
2b284     14 4E 05 F1 | 	add	fp, #20
2b288     A7 2A E2 FA | 	rdword	local07, fp
2b28c     14 4E 85 F1 | 	sub	fp, #20
2b290     20 2A 16 F2 | 	cmp	local07, #32 wc
2b294     10 4E 05 C1 |  if_b	add	fp, #16
2b298     A7 08 48 CC |  if_b	wrbyte	#4, fp
2b29c     10 4E 85 C1 |  if_b	sub	fp, #16
2b2a0     74 00 90 CD |  if_b	jmp	#LR__4438
2b2a4     97 24 48 FB | 	callpa	#(@LR__4436-@LR__4434)>>2,fcache_load_ptr_
2b2a8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2b2a8                 | LR__4434
2b2a8     30 4E 05 F1 | 	add	fp, #48
2b2ac     A7 24 02 FB | 	rdlong	local04, fp
2b2b0     30 4E 85 F1 | 	sub	fp, #48
2b2b4     12 2B C2 FA | 	rdbyte	local07, local04
2b2b8     2F 2A 0E F2 | 	cmp	local07, #47 wz
2b2bc     18 00 90 AD |  if_e	jmp	#LR__4435
2b2c0     30 4E 05 F1 | 	add	fp, #48
2b2c4     A7 24 02 FB | 	rdlong	local04, fp
2b2c8     30 4E 85 F1 | 	sub	fp, #48
2b2cc     12 21 C2 FA | 	rdbyte	local02, local04
2b2d0     5C 20 0E F2 | 	cmp	local02, #92 wz
2b2d4     18 00 90 5D |  if_ne	jmp	#LR__4437
2b2d8                 | LR__4435
2b2d8     30 4E 05 F1 | 	add	fp, #48
2b2dc     A7 1E 02 FB | 	rdlong	local01, fp
2b2e0     01 1E 06 F1 | 	add	local01, #1
2b2e4     A7 1E 62 FC | 	wrlong	local01, fp
2b2e8     30 4E 85 F1 | 	sub	fp, #48
2b2ec     B8 FF 9F FD | 	jmp	#LR__4434
2b2f0                 | LR__4436
2b2f0                 | LR__4437
2b2f0     10 4E 05 F1 | 	add	fp, #16
2b2f4     A7 00 48 FC | 	wrbyte	#0, fp
2b2f8     20 4E 05 F1 | 	add	fp, #32
2b2fc     A7 28 02 FB | 	rdlong	local06, fp
2b300     30 4E 85 F1 | 	sub	fp, #48
2b304     14 2B C2 FA | 	rdbyte	local07, local06
2b308     20 2A 16 F2 | 	cmp	local07, #32 wc
2b30c     10 4E 05 C1 |  if_b	add	fp, #16
2b310     A7 08 48 CC |  if_b	wrbyte	#4, fp
2b314     10 4E 85 C1 |  if_b	sub	fp, #16
2b318                 | LR__4438
2b318     08 4E 05 F1 | 	add	fp, #8
2b31c     A7 2A 02 FB | 	rdlong	local07, fp
2b320     28 4E 05 F1 | 	add	fp, #40
2b324     A7 1E 02 FB | 	rdlong	local01, fp
2b328     30 4E 85 F1 | 	sub	fp, #48
2b32c     15 1F 62 FC | 	wrlong	local01, local07
2b330     97 38 48 FB | 	callpa	#(@LR__4440-@LR__4439)>>2,fcache_load_ptr_
2b334                 | ' 	}
2b334                 | ' 	*path = p;
2b334                 | ' #line 2862 "ff.c"
2b334                 | ' 	while (di) {
2b334                 | LR__4439
2b334     2C 4E 05 F1 | 	add	fp, #44
2b338     A7 2A 0A FB | 	rdlong	local07, fp wz
2b33c     2C 4E 85 F1 | 	sub	fp, #44
2b340     60 00 90 AD |  if_e	jmp	#LR__4441
2b344     18 4E 05 F1 | 	add	fp, #24
2b348     A7 28 02 FB | 	rdlong	local06, fp
2b34c     14 4E 05 F1 | 	add	fp, #20
2b350     A7 24 02 FB | 	rdlong	local04, fp
2b354     01 24 86 F1 | 	sub	local04, #1
2b358     01 24 66 F0 | 	shl	local04, #1
2b35c     14 25 02 F1 | 	add	local04, local06
2b360     12 29 E2 FA | 	rdword	local06, local04
2b364     18 4E 85 F1 | 	sub	fp, #24
2b368     A7 28 52 FC | 	wrword	local06, fp
2b36c     A7 2A E2 FA | 	rdword	local07, fp
2b370     14 4E 85 F1 | 	sub	fp, #20
2b374     20 2A 0E F2 | 	cmp	local07, #32 wz
2b378     14 4E 05 51 |  if_ne	add	fp, #20
2b37c     A7 1E E2 5A |  if_ne	rdword	local01, fp
2b380     14 4E 85 51 |  if_ne	sub	fp, #20
2b384     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2b388     18 00 90 5D |  if_ne	jmp	#LR__4441
2b38c     2C 4E 05 F1 | 	add	fp, #44
2b390     A7 1E 02 FB | 	rdlong	local01, fp
2b394     01 1E 86 F1 | 	sub	local01, #1
2b398     A7 1E 62 FC | 	wrlong	local01, fp
2b39c     2C 4E 85 F1 | 	sub	fp, #44
2b3a0     90 FF 9F FD | 	jmp	#LR__4439
2b3a4                 | LR__4440
2b3a4                 | LR__4441
2b3a4     18 4E 05 F1 | 	add	fp, #24
2b3a8     A7 2C 02 FB | 	rdlong	local08, fp
2b3ac     14 4E 05 F1 | 	add	fp, #20
2b3b0     A7 24 02 FB | 	rdlong	local04, fp
2b3b4     01 24 66 F0 | 	shl	local04, #1
2b3b8     16 25 02 F1 | 	add	local04, local08
2b3bc     12 01 58 FC | 	wrword	#0, local04
2b3c0     A7 2A 0A FB | 	rdlong	local07, fp wz
2b3c4     2C 4E 85 F1 | 	sub	fp, #44
2b3c8     06 FA 05 A6 |  if_e	mov	result1, #6
2b3cc     04 06 90 AD |  if_e	jmp	#LR__4470
2b3d0                 | ' 
2b3d0                 | ' 
2b3d0                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2b3d0     28 4E 05 F1 | 	add	fp, #40
2b3d4     A7 00 68 FC | 	wrlong	#0, fp
2b3d8     28 4E 85 F1 | 	sub	fp, #40
2b3dc     97 22 48 FB | 	callpa	#(@LR__4443-@LR__4442)>>2,fcache_load_ptr_
2b3e0                 | LR__4442
2b3e0     18 4E 05 F1 | 	add	fp, #24
2b3e4     A7 2E 02 FB | 	rdlong	local09, fp
2b3e8     10 4E 05 F1 | 	add	fp, #16
2b3ec     A7 30 02 FB | 	rdlong	local10, fp
2b3f0     28 4E 85 F1 | 	sub	fp, #40
2b3f4     01 30 66 F0 | 	shl	local10, #1
2b3f8     17 31 02 F1 | 	add	local10, local09
2b3fc     18 33 E2 FA | 	rdword	local11, local10
2b400     20 32 0E F2 | 	cmp	local11, #32 wz
2b404     1C 00 90 5D |  if_ne	jmp	#LR__4444
2b408     28 4E 05 F1 | 	add	fp, #40
2b40c     A7 34 02 FB | 	rdlong	local12, fp
2b410     1A 27 02 F6 | 	mov	local05, local12
2b414     01 26 06 F1 | 	add	local05, #1
2b418     A7 26 62 FC | 	wrlong	local05, fp
2b41c     28 4E 85 F1 | 	sub	fp, #40
2b420     BC FF 9F FD | 	jmp	#LR__4442
2b424                 | LR__4443
2b424                 | LR__4444
2b424     28 4E 05 F1 | 	add	fp, #40
2b428     A7 2A 02 FB | 	rdlong	local07, fp
2b42c     28 4E 85 F1 | 	sub	fp, #40
2b430     01 2A 16 F2 | 	cmp	local07, #1 wc
2b434     28 00 90 3D |  if_ae	jmp	#LR__4445
2b438     18 4E 05 F1 | 	add	fp, #24
2b43c     A7 22 02 FB | 	rdlong	local03, fp
2b440     10 4E 05 F1 | 	add	fp, #16
2b444     A7 2E 02 FB | 	rdlong	local09, fp
2b448     28 4E 85 F1 | 	sub	fp, #40
2b44c     01 2E 66 F0 | 	shl	local09, #1
2b450     11 2F 02 F1 | 	add	local09, local03
2b454     17 1F E2 FA | 	rdword	local01, local09
2b458     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b45c     14 00 90 5D |  if_ne	jmp	#LR__4446
2b460                 | LR__4445
2b460     10 4E 05 F1 | 	add	fp, #16
2b464     A7 2A C2 FA | 	rdbyte	local07, fp
2b468     03 2A 46 F5 | 	or	local07, #3
2b46c     A7 2A 42 FC | 	wrbyte	local07, fp
2b470     10 4E 85 F1 | 	sub	fp, #16
2b474                 | LR__4446
2b474     97 2C 48 FB | 	callpa	#(@LR__4448-@LR__4447)>>2,fcache_load_ptr_
2b478                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2b478                 | LR__4447
2b478     2C 4E 05 F1 | 	add	fp, #44
2b47c     A7 2A 02 FB | 	rdlong	local07, fp
2b480     2C 4E 85 F1 | 	sub	fp, #44
2b484     01 2A 16 F2 | 	cmp	local07, #1 wc
2b488     44 00 90 CD |  if_b	jmp	#LR__4449
2b48c     18 4E 05 F1 | 	add	fp, #24
2b490     A7 28 02 FB | 	rdlong	local06, fp
2b494     14 4E 05 F1 | 	add	fp, #20
2b498     A7 22 02 FB | 	rdlong	local03, fp
2b49c     2C 4E 85 F1 | 	sub	fp, #44
2b4a0     01 22 86 F1 | 	sub	local03, #1
2b4a4     01 22 66 F0 | 	shl	local03, #1
2b4a8     14 23 02 F1 | 	add	local03, local06
2b4ac     11 1F E2 FA | 	rdword	local01, local03
2b4b0     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b4b4     18 00 90 AD |  if_e	jmp	#LR__4449
2b4b8     2C 4E 05 F1 | 	add	fp, #44
2b4bc     A7 1E 02 FB | 	rdlong	local01, fp
2b4c0     01 1E 86 F1 | 	sub	local01, #1
2b4c4     A7 1E 62 FC | 	wrlong	local01, fp
2b4c8     2C 4E 85 F1 | 	sub	fp, #44
2b4cc     A8 FF 9F FD | 	jmp	#LR__4447
2b4d0                 | LR__4448
2b4d0                 | LR__4449
2b4d0     04 4E 05 F1 | 	add	fp, #4
2b4d4     A7 12 02 FB | 	rdlong	arg01, fp
2b4d8     04 4E 85 F1 | 	sub	fp, #4
2b4dc     20 12 06 F1 | 	add	arg01, #32
2b4e0     20 14 06 F6 | 	mov	arg02, #32
2b4e4     0B 16 06 F6 | 	mov	arg03, #11
2b4e8     09 37 02 F6 | 	mov	local13, arg01
2b4ec     98 00 A0 FD | 	call	#\builtin_bytefill_
2b4f0     1B FB 01 F6 | 	mov	result1, local13
2b4f4     0C 4E 05 F1 | 	add	fp, #12
2b4f8     A7 00 48 FC | 	wrbyte	#0, fp
2b4fc     A7 2A C2 FA | 	rdbyte	local07, fp
2b500     14 4E 05 F1 | 	add	fp, #20
2b504     A7 2A 62 FC | 	wrlong	local07, fp
2b508     04 4E 05 F1 | 	add	fp, #4
2b50c     A7 10 68 FC | 	wrlong	#8, fp
2b510     24 4E 85 F1 | 	sub	fp, #36
2b514                 | ' 
2b514                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2b514                 | ' 	i = b = 0; ni = 8;
2b514                 | ' 	for (;;) {
2b514                 | LR__4450
2b514     18 4E 05 F1 | 	add	fp, #24
2b518     A7 22 02 FB | 	rdlong	local03, fp
2b51c     10 4E 05 F1 | 	add	fp, #16
2b520     A7 2E 02 FB | 	rdlong	local09, fp
2b524     17 25 02 F6 | 	mov	local04, local09
2b528     01 24 06 F1 | 	add	local04, #1
2b52c     A7 24 62 FC | 	wrlong	local04, fp
2b530     01 2E 66 F0 | 	shl	local09, #1
2b534     11 2F 02 F1 | 	add	local09, local03
2b538     17 29 E2 FA | 	rdword	local06, local09
2b53c     14 4E 85 F1 | 	sub	fp, #20
2b540     A7 28 52 FC | 	wrword	local06, fp
2b544     A7 2A EA FA | 	rdword	local07, fp wz
2b548     14 4E 85 F1 | 	sub	fp, #20
2b54c     74 03 90 AD |  if_e	jmp	#LR__4466
2b550     14 4E 05 F1 | 	add	fp, #20
2b554     A7 2A E2 FA | 	rdword	local07, fp
2b558     14 4E 85 F1 | 	sub	fp, #20
2b55c     20 2A 0E F2 | 	cmp	local07, #32 wz
2b560     30 00 90 AD |  if_e	jmp	#LR__4451
2b564     14 4E 05 F1 | 	add	fp, #20
2b568     A7 1E E2 FA | 	rdword	local01, fp
2b56c     14 4E 85 F1 | 	sub	fp, #20
2b570     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b574     34 00 90 5D |  if_ne	jmp	#LR__4452
2b578     28 4E 05 F1 | 	add	fp, #40
2b57c     A7 24 02 FB | 	rdlong	local04, fp
2b580     04 4E 05 F1 | 	add	fp, #4
2b584     A7 30 02 FB | 	rdlong	local10, fp
2b588     2C 4E 85 F1 | 	sub	fp, #44
2b58c     18 25 0A F2 | 	cmp	local04, local10 wz
2b590     18 00 90 AD |  if_e	jmp	#LR__4452
2b594                 | LR__4451
2b594     10 4E 05 F1 | 	add	fp, #16
2b598     A7 2A C2 FA | 	rdbyte	local07, fp
2b59c     03 2A 46 F5 | 	or	local07, #3
2b5a0     A7 2A 42 FC | 	wrbyte	local07, fp
2b5a4     10 4E 85 F1 | 	sub	fp, #16
2b5a8                 | ' 			cf |=  0x01  |  0x02 ;
2b5a8                 | ' 			continue;
2b5a8     68 FF 9F FD | 	jmp	#LR__4450
2b5ac                 | LR__4452
2b5ac     20 4E 05 F1 | 	add	fp, #32
2b5b0     A7 2A 02 FB | 	rdlong	local07, fp
2b5b4     04 4E 05 F1 | 	add	fp, #4
2b5b8     A7 1E 02 FB | 	rdlong	local01, fp
2b5bc     24 4E 85 F1 | 	sub	fp, #36
2b5c0     0F 2B 12 F2 | 	cmp	local07, local01 wc
2b5c4     1C 00 90 3D |  if_ae	jmp	#LR__4453
2b5c8     28 4E 05 F1 | 	add	fp, #40
2b5cc     A7 2C 02 FB | 	rdlong	local08, fp
2b5d0     04 4E 05 F1 | 	add	fp, #4
2b5d4     A7 30 02 FB | 	rdlong	local10, fp
2b5d8     2C 4E 85 F1 | 	sub	fp, #44
2b5dc     18 2D 0A F2 | 	cmp	local08, local10 wz
2b5e0     B0 00 90 5D |  if_ne	jmp	#LR__4455
2b5e4                 | LR__4453
2b5e4     24 4E 05 F1 | 	add	fp, #36
2b5e8     A7 2A 02 FB | 	rdlong	local07, fp
2b5ec     24 4E 85 F1 | 	sub	fp, #36
2b5f0     0B 2A 0E F2 | 	cmp	local07, #11 wz
2b5f4     18 00 90 5D |  if_ne	jmp	#LR__4454
2b5f8     10 4E 05 F1 | 	add	fp, #16
2b5fc     A7 2A C2 FA | 	rdbyte	local07, fp
2b600     03 2A 46 F5 | 	or	local07, #3
2b604     A7 2A 42 FC | 	wrbyte	local07, fp
2b608     10 4E 85 F1 | 	sub	fp, #16
2b60c                 | ' 				cf |=  0x01  |  0x02 ;
2b60c                 | ' 				break;
2b60c     B4 02 90 FD | 	jmp	#LR__4466
2b610                 | LR__4454
2b610     28 4E 05 F1 | 	add	fp, #40
2b614     A7 2A 02 FB | 	rdlong	local07, fp
2b618     04 4E 05 F1 | 	add	fp, #4
2b61c     A7 1E 02 FB | 	rdlong	local01, fp
2b620     2C 4E 85 F1 | 	sub	fp, #44
2b624     0F 2B 0A F2 | 	cmp	local07, local01 wz
2b628     10 4E 05 51 |  if_ne	add	fp, #16
2b62c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b630     03 2A 46 55 |  if_ne	or	local07, #3
2b634     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b638     10 4E 85 51 |  if_ne	sub	fp, #16
2b63c     28 4E 05 F1 | 	add	fp, #40
2b640     A7 2A 02 FB | 	rdlong	local07, fp
2b644     04 4E 05 F1 | 	add	fp, #4
2b648     A7 20 02 FB | 	rdlong	local02, fp
2b64c     2C 4E 85 F1 | 	sub	fp, #44
2b650     10 2B 1A F2 | 	cmp	local07, local02 wcz
2b654     6C 02 90 1D |  if_a	jmp	#LR__4466
2b658     2C 4E 05 F1 | 	add	fp, #44
2b65c     A7 2A 02 FB | 	rdlong	local07, fp
2b660     04 4E 85 F1 | 	sub	fp, #4
2b664     A7 2A 62 FC | 	wrlong	local07, fp
2b668     08 4E 85 F1 | 	sub	fp, #8
2b66c     A7 10 68 FC | 	wrlong	#8, fp
2b670     04 4E 05 F1 | 	add	fp, #4
2b674     A7 16 68 FC | 	wrlong	#11, fp
2b678     18 4E 85 F1 | 	sub	fp, #24
2b67c     A7 32 C2 FA | 	rdbyte	local11, fp
2b680     19 2B E2 F8 | 	getbyte	local07, local11, #0
2b684     02 2A 66 F0 | 	shl	local07, #2
2b688     A7 2A 42 FC | 	wrbyte	local07, fp
2b68c     0C 4E 85 F1 | 	sub	fp, #12
2b690                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2b690                 | ' 			continue;
2b690     80 FE 9F FD | 	jmp	#LR__4450
2b694                 | LR__4455
2b694     14 4E 05 F1 | 	add	fp, #20
2b698     A7 2A E2 FA | 	rdword	local07, fp
2b69c     14 4E 85 F1 | 	sub	fp, #20
2b6a0     80 2A 16 F2 | 	cmp	local07, #128 wc
2b6a4     6C 00 90 CD |  if_b	jmp	#LR__4457
2b6a8     10 4E 05 F1 | 	add	fp, #16
2b6ac     A7 2A C2 FA | 	rdbyte	local07, fp
2b6b0     02 2A 46 F5 | 	or	local07, #2
2b6b4     A7 2A 42 FC | 	wrbyte	local07, fp
2b6b8     04 4E 05 F1 | 	add	fp, #4
2b6bc     A7 12 E2 FA | 	rdword	arg01, fp
2b6c0     14 4E 85 F1 | 	sub	fp, #20
2b6c4     01 00 00 FF 
2b6c8     52 15 06 F6 | 	mov	arg02, ##850
2b6cc     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2b6d0     14 4E 05 F1 | 	add	fp, #20
2b6d4     A7 FA 51 FC | 	wrword	result1, fp
2b6d8     A7 2A E2 FA | 	rdword	local07, fp
2b6dc     14 4E 85 F1 | 	sub	fp, #20
2b6e0     80 2A CE F7 | 	test	local07, #128 wz
2b6e4     2C 00 90 AD |  if_e	jmp	#LR__4456
2b6e8     14 4E 05 F1 | 	add	fp, #20
2b6ec     A7 20 E2 FA | 	rdword	local02, fp
2b6f0     7F 20 06 F5 | 	and	local02, #127
2b6f4     01 00 00 FF 
2b6f8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2b6fc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2b700     10 2B C2 FA | 	rdbyte	local07, local02
2b704     A7 2A 52 FC | 	wrword	local07, fp
2b708     14 4E 85 F1 | 	sub	fp, #20
2b70c     01 00 00 FF 
2b710     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2b714                 | LR__4456
2b714                 | LR__4457
2b714     14 4E 05 F1 | 	add	fp, #20
2b718     A7 2A E2 FA | 	rdword	local07, fp
2b71c     14 4E 85 F1 | 	sub	fp, #20
2b720     00 2B 16 F2 | 	cmp	local07, #256 wc
2b724     88 00 90 CD |  if_b	jmp	#LR__4459
2b728     24 4E 05 F1 | 	add	fp, #36
2b72c     A7 2A 02 FB | 	rdlong	local07, fp
2b730     01 2A 86 F1 | 	sub	local07, #1
2b734     04 4E 85 F1 | 	sub	fp, #4
2b738     A7 20 02 FB | 	rdlong	local02, fp
2b73c     20 4E 85 F1 | 	sub	fp, #32
2b740     15 21 12 F2 | 	cmp	local02, local07 wc
2b744     2C 00 90 CD |  if_b	jmp	#LR__4458
2b748     10 4E 05 F1 | 	add	fp, #16
2b74c     A7 32 C2 FA | 	rdbyte	local11, fp
2b750     19 2B E2 F8 | 	getbyte	local07, local11, #0
2b754     03 2A 46 F5 | 	or	local07, #3
2b758     A7 2A 42 FC | 	wrbyte	local07, fp
2b75c     14 4E 05 F1 | 	add	fp, #20
2b760     A7 2A 02 FB | 	rdlong	local07, fp
2b764     04 4E 85 F1 | 	sub	fp, #4
2b768     A7 2A 62 FC | 	wrlong	local07, fp
2b76c     20 4E 85 F1 | 	sub	fp, #32
2b770                 | ' 				cf |=  0x01  |  0x02 ;
2b770                 | ' 				i = ni; continue;
2b770     A0 FD 9F FD | 	jmp	#LR__4450
2b774                 | LR__4458
2b774     04 4E 05 F1 | 	add	fp, #4
2b778     A7 2E 02 FB | 	rdlong	local09, fp
2b77c     1C 4E 05 F1 | 	add	fp, #28
2b780     A7 30 02 FB | 	rdlong	local10, fp
2b784     18 25 02 F6 | 	mov	local04, local10
2b788     01 24 06 F1 | 	add	local04, #1
2b78c     A7 24 62 FC | 	wrlong	local04, fp
2b790     20 2E 06 F1 | 	add	local09, #32
2b794     17 31 02 F1 | 	add	local10, local09
2b798     0C 4E 85 F1 | 	sub	fp, #12
2b79c     A7 22 E2 FA | 	rdword	local03, fp
2b7a0     14 4E 85 F1 | 	sub	fp, #20
2b7a4     08 22 46 F0 | 	shr	local03, #8
2b7a8     18 23 42 FC | 	wrbyte	local03, local10
2b7ac     D4 00 90 FD | 	jmp	#LR__4465
2b7b0                 | LR__4459
2b7b0     14 4E 05 F1 | 	add	fp, #20
2b7b4     A7 2A EA FA | 	rdword	local07, fp wz
2b7b8     14 4E 85 F1 | 	sub	fp, #20
2b7bc     20 00 90 AD |  if_e	jmp	#LR__4460
2b7c0     88 01 00 FF 
2b7c4     51 13 06 F6 | 	mov	arg01, ##@LR__5093
2b7c8     14 4E 05 F1 | 	add	fp, #20
2b7cc     A7 14 E2 FA | 	rdword	arg02, fp
2b7d0     14 4E 85 F1 | 	sub	fp, #20
2b7d4     48 CB BF FD | 	call	#_fatfs_cc_strchr
2b7d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7dc     20 00 90 AD |  if_e	jmp	#LR__4461
2b7e0                 | LR__4460
2b7e0     14 4E 05 F1 | 	add	fp, #20
2b7e4     A7 BE 58 FC | 	wrword	#95, fp
2b7e8     04 4E 85 F1 | 	sub	fp, #4
2b7ec     A7 2A C2 FA | 	rdbyte	local07, fp
2b7f0     03 2A 46 F5 | 	or	local07, #3
2b7f4     A7 2A 42 FC | 	wrbyte	local07, fp
2b7f8     10 4E 85 F1 | 	sub	fp, #16
2b7fc     84 00 90 FD | 	jmp	#LR__4464
2b800                 | LR__4461
2b800     14 4E 05 F1 | 	add	fp, #20
2b804     A7 2A E2 FA | 	rdword	local07, fp
2b808     14 4E 85 F1 | 	sub	fp, #20
2b80c     41 2A 16 F2 | 	cmp	local07, #65 wc
2b810     24 00 90 CD |  if_b	jmp	#LR__4462
2b814     14 4E 05 F1 | 	add	fp, #20
2b818     A7 1E E2 FA | 	rdword	local01, fp
2b81c     14 4E 85 F1 | 	sub	fp, #20
2b820     5B 1E 16 F2 | 	cmp	local01, #91 wc
2b824     0C 4E 05 C1 |  if_b	add	fp, #12
2b828     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2b82c     02 2A 46 C5 |  if_b	or	local07, #2
2b830     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2b834     0C 4E 85 C1 |  if_b	sub	fp, #12
2b838                 | LR__4462
2b838     14 4E 05 F1 | 	add	fp, #20
2b83c     A7 2A E2 FA | 	rdword	local07, fp
2b840     14 4E 85 F1 | 	sub	fp, #20
2b844     61 2A 16 F2 | 	cmp	local07, #97 wc
2b848     38 00 90 CD |  if_b	jmp	#LR__4463
2b84c     14 4E 05 F1 | 	add	fp, #20
2b850     A7 1E E2 FA | 	rdword	local01, fp
2b854     14 4E 85 F1 | 	sub	fp, #20
2b858     7B 1E 16 F2 | 	cmp	local01, #123 wc
2b85c     24 00 90 3D |  if_ae	jmp	#LR__4463
2b860     0C 4E 05 F1 | 	add	fp, #12
2b864     A7 2A C2 FA | 	rdbyte	local07, fp
2b868     01 2A 46 F5 | 	or	local07, #1
2b86c     A7 2A 42 FC | 	wrbyte	local07, fp
2b870     08 4E 05 F1 | 	add	fp, #8
2b874     A7 2A E2 FA | 	rdword	local07, fp
2b878     20 2A 86 F1 | 	sub	local07, #32
2b87c     A7 2A 52 FC | 	wrword	local07, fp
2b880     14 4E 85 F1 | 	sub	fp, #20
2b884                 | LR__4463
2b884                 | LR__4464
2b884                 | LR__4465
2b884     04 4E 05 F1 | 	add	fp, #4
2b888     A7 32 02 FB | 	rdlong	local11, fp
2b88c     19 2F 02 F6 | 	mov	local09, local11
2b890     1C 4E 05 F1 | 	add	fp, #28
2b894     A7 20 02 FB | 	rdlong	local02, fp
2b898     10 25 02 F6 | 	mov	local04, local02
2b89c     01 24 06 F1 | 	add	local04, #1
2b8a0     A7 24 62 FC | 	wrlong	local04, fp
2b8a4     10 31 02 F6 | 	mov	local10, local02
2b8a8     20 2E 06 F1 | 	add	local09, #32
2b8ac     17 31 02 F1 | 	add	local10, local09
2b8b0     0C 4E 85 F1 | 	sub	fp, #12
2b8b4     A7 22 E2 FA | 	rdword	local03, fp
2b8b8     14 4E 85 F1 | 	sub	fp, #20
2b8bc     18 23 42 FC | 	wrbyte	local03, local10
2b8c0     50 FC 9F FD | 	jmp	#LR__4450
2b8c4                 | LR__4466
2b8c4     04 4E 05 F1 | 	add	fp, #4
2b8c8     A7 32 02 FB | 	rdlong	local11, fp
2b8cc     04 4E 85 F1 | 	sub	fp, #4
2b8d0     20 32 06 F1 | 	add	local11, #32
2b8d4     19 2B C2 FA | 	rdbyte	local07, local11
2b8d8     E5 2A 0E F2 | 	cmp	local07, #229 wz
2b8dc     04 4E 05 A1 |  if_e	add	fp, #4
2b8e0     A7 2A 02 AB |  if_e	rdlong	local07, fp
2b8e4     04 4E 85 A1 |  if_e	sub	fp, #4
2b8e8     20 2A 06 A1 |  if_e	add	local07, #32
2b8ec     15 0B 48 AC |  if_e	wrbyte	#5, local07
2b8f0     24 4E 05 F1 | 	add	fp, #36
2b8f4     A7 2A 02 FB | 	rdlong	local07, fp
2b8f8     24 4E 85 F1 | 	sub	fp, #36
2b8fc     08 2A 0E F2 | 	cmp	local07, #8 wz
2b900     0C 4E 05 A1 |  if_e	add	fp, #12
2b904     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2b908     02 2A 66 A0 |  if_e	shl	local07, #2
2b90c     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2b910     0C 4E 85 A1 |  if_e	sub	fp, #12
2b914     0C 4E 05 F1 | 	add	fp, #12
2b918     A7 2A C2 FA | 	rdbyte	local07, fp
2b91c     0C 4E 85 F1 | 	sub	fp, #12
2b920     0C 2A 06 F5 | 	and	local07, #12
2b924     0C 2A 0E F2 | 	cmp	local07, #12 wz
2b928     18 00 90 AD |  if_e	jmp	#LR__4467
2b92c     0C 4E 05 F1 | 	add	fp, #12
2b930     A7 1E C2 FA | 	rdbyte	local01, fp
2b934     0C 4E 85 F1 | 	sub	fp, #12
2b938     03 1E 06 F5 | 	and	local01, #3
2b93c     03 1E 0E F2 | 	cmp	local01, #3 wz
2b940     14 00 90 5D |  if_ne	jmp	#LR__4468
2b944                 | LR__4467
2b944     10 4E 05 F1 | 	add	fp, #16
2b948     A7 2A C2 FA | 	rdbyte	local07, fp
2b94c     02 2A 46 F5 | 	or	local07, #2
2b950     A7 2A 42 FC | 	wrbyte	local07, fp
2b954     10 4E 85 F1 | 	sub	fp, #16
2b958                 | LR__4468
2b958     10 4E 05 F1 | 	add	fp, #16
2b95c     A7 2A C2 FA | 	rdbyte	local07, fp
2b960     10 4E 85 F1 | 	sub	fp, #16
2b964     02 2A CE F7 | 	test	local07, #2 wz
2b968     48 00 90 5D |  if_ne	jmp	#LR__4469
2b96c     0C 4E 05 F1 | 	add	fp, #12
2b970     A7 2A C2 FA | 	rdbyte	local07, fp
2b974     0C 4E 85 F1 | 	sub	fp, #12
2b978     01 2A CE F7 | 	test	local07, #1 wz
2b97c     10 4E 05 51 |  if_ne	add	fp, #16
2b980     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b984     10 2A 46 55 |  if_ne	or	local07, #16
2b988     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b98c     10 4E 85 51 |  if_ne	sub	fp, #16
2b990     0C 4E 05 F1 | 	add	fp, #12
2b994     A7 2A C2 FA | 	rdbyte	local07, fp
2b998     0C 4E 85 F1 | 	sub	fp, #12
2b99c     04 2A CE F7 | 	test	local07, #4 wz
2b9a0     10 4E 05 51 |  if_ne	add	fp, #16
2b9a4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b9a8     08 2A 46 55 |  if_ne	or	local07, #8
2b9ac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b9b0     10 4E 85 51 |  if_ne	sub	fp, #16
2b9b4                 | LR__4469
2b9b4     04 4E 05 F1 | 	add	fp, #4
2b9b8     A7 2A 02 FB | 	rdlong	local07, fp
2b9bc     0C 4E 05 F1 | 	add	fp, #12
2b9c0     A7 1E C2 FA | 	rdbyte	local01, fp
2b9c4     10 4E 85 F1 | 	sub	fp, #16
2b9c8     2B 2A 06 F1 | 	add	local07, #43
2b9cc     15 1F 42 FC | 	wrbyte	local01, local07
2b9d0                 | ' 	}
2b9d0                 | ' 
2b9d0                 | ' 	dp->fn[ 11 ] = cf;
2b9d0                 | ' 
2b9d0                 | ' 	return FR_OK;
2b9d0     00 FA 05 F6 | 	mov	result1, #0
2b9d4                 | LR__4470
2b9d4     A7 F0 03 F6 | 	mov	ptra, fp
2b9d8     B2 00 A0 FD | 	call	#popregs_
2b9dc                 | _fatfs_cc_create_name_ret
2b9dc     2D 00 64 FD | 	ret
2b9e0                 | 
2b9e0                 | _fatfs_cc_follow_path
2b9e0     02 4A 05 F6 | 	mov	COUNT_, #2
2b9e4     A8 00 A0 FD | 	call	#pushregs_
2b9e8     18 F0 07 F1 | 	add	ptra, #24
2b9ec     04 4E 05 F1 | 	add	fp, #4
2b9f0     A7 12 62 FC | 	wrlong	arg01, fp
2b9f4     04 4E 05 F1 | 	add	fp, #4
2b9f8     A7 14 62 FC | 	wrlong	arg02, fp
2b9fc     04 4E 85 F1 | 	sub	fp, #4
2ba00     A7 FA 01 FB | 	rdlong	result1, fp
2ba04     FD 1E 02 FB | 	rdlong	local01, result1
2ba08     10 4E 05 F1 | 	add	fp, #16
2ba0c     A7 1E 62 FC | 	wrlong	local01, fp
2ba10     14 4E 85 F1 | 	sub	fp, #20
2ba14     97 24 48 FB | 	callpa	#(@LR__4482-@LR__4480)>>2,fcache_load_ptr_
2ba18                 | ' )
2ba18                 | ' {
2ba18                 | ' 	FRESULT res;
2ba18                 | ' 	BYTE ns;
2ba18                 | ' 	FATFS *fs = dp->obj.fs;
2ba18                 | ' #line 3034 "ff.c"
2ba18                 | ' 	{
2ba18                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ba18                 | LR__4480
2ba18     08 4E 05 F1 | 	add	fp, #8
2ba1c     A7 1E 02 FB | 	rdlong	local01, fp
2ba20     08 4E 85 F1 | 	sub	fp, #8
2ba24     0F 1F C2 FA | 	rdbyte	local01, local01
2ba28     2F 1E 0E F2 | 	cmp	local01, #47 wz
2ba2c     18 00 90 AD |  if_e	jmp	#LR__4481
2ba30     08 4E 05 F1 | 	add	fp, #8
2ba34     A7 1E 02 FB | 	rdlong	local01, fp
2ba38     08 4E 85 F1 | 	sub	fp, #8
2ba3c     0F 1F C2 FA | 	rdbyte	local01, local01
2ba40     5C 1E 0E F2 | 	cmp	local01, #92 wz
2ba44     18 00 90 5D |  if_ne	jmp	#LR__4483
2ba48                 | LR__4481
2ba48     08 4E 05 F1 | 	add	fp, #8
2ba4c     A7 1E 02 FB | 	rdlong	local01, fp
2ba50     01 1E 06 F1 | 	add	local01, #1
2ba54     A7 1E 62 FC | 	wrlong	local01, fp
2ba58     08 4E 85 F1 | 	sub	fp, #8
2ba5c     B8 FF 9F FD | 	jmp	#LR__4480
2ba60                 | LR__4482
2ba60                 | LR__4483
2ba60     04 4E 05 F1 | 	add	fp, #4
2ba64     A7 1E 02 FB | 	rdlong	local01, fp
2ba68     08 1E 06 F1 | 	add	local01, #8
2ba6c     0F 01 68 FC | 	wrlong	#0, local01
2ba70     04 4E 05 F1 | 	add	fp, #4
2ba74     A7 1E 02 FB | 	rdlong	local01, fp
2ba78     08 4E 85 F1 | 	sub	fp, #8
2ba7c     0F 1F C2 FA | 	rdbyte	local01, local01
2ba80     20 1E 16 F2 | 	cmp	local01, #32 wc
2ba84     30 00 90 3D |  if_ae	jmp	#LR__4484
2ba88     04 4E 05 F1 | 	add	fp, #4
2ba8c     A7 1E 02 FB | 	rdlong	local01, fp
2ba90     2B 1E 06 F1 | 	add	local01, #43
2ba94     0F 01 49 FC | 	wrbyte	#128, local01
2ba98     A7 12 02 FB | 	rdlong	arg01, fp
2ba9c     04 4E 85 F1 | 	sub	fp, #4
2baa0     00 14 06 F6 | 	mov	arg02, #0
2baa4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2baa8     0C 4E 05 F1 | 	add	fp, #12
2baac     A7 FA 61 FC | 	wrlong	result1, fp
2bab0     0C 4E 85 F1 | 	sub	fp, #12
2bab4     1C 01 90 FD | 	jmp	#LR__4488
2bab8                 | LR__4484
2bab8                 | ' 		for (;;) {
2bab8                 | LR__4485
2bab8     04 4E 05 F1 | 	add	fp, #4
2babc     A7 12 02 FB | 	rdlong	arg01, fp
2bac0     04 4E 05 F1 | 	add	fp, #4
2bac4     A7 14 02 F6 | 	mov	arg02, fp
2bac8     08 4E 85 F1 | 	sub	fp, #8
2bacc     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2bad0     0C 4E 05 F1 | 	add	fp, #12
2bad4     A7 FA 61 FC | 	wrlong	result1, fp
2bad8     00 FA 4D F2 | 	cmps	result1, #0 wz
2badc     0C 4E 85 F1 | 	sub	fp, #12
2bae0     F0 00 90 5D |  if_ne	jmp	#LR__4487
2bae4     04 4E 05 F1 | 	add	fp, #4
2bae8     A7 12 02 FB | 	rdlong	arg01, fp
2baec     04 4E 85 F1 | 	sub	fp, #4
2baf0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2baf4     0C 4E 05 F1 | 	add	fp, #12
2baf8     A7 FA 61 FC | 	wrlong	result1, fp
2bafc     08 4E 85 F1 | 	sub	fp, #8
2bb00     A7 1E 02 FB | 	rdlong	local01, fp
2bb04     2B 1E 06 F1 | 	add	local01, #43
2bb08     0F 1F C2 FA | 	rdbyte	local01, local01
2bb0c     0C 4E 05 F1 | 	add	fp, #12
2bb10     A7 1E 42 FC | 	wrbyte	local01, fp
2bb14     04 4E 85 F1 | 	sub	fp, #4
2bb18     A7 1E 0A FB | 	rdlong	local01, fp wz
2bb1c     0C 4E 85 F1 | 	sub	fp, #12
2bb20     34 00 90 AD |  if_e	jmp	#LR__4486
2bb24     0C 4E 05 F1 | 	add	fp, #12
2bb28     A7 1E 02 FB | 	rdlong	local01, fp
2bb2c     0C 4E 85 F1 | 	sub	fp, #12
2bb30     04 1E 0E F2 | 	cmp	local01, #4 wz
2bb34     9C 00 90 5D |  if_ne	jmp	#LR__4487
2bb38     10 4E 05 F1 | 	add	fp, #16
2bb3c     A7 1E C2 FA | 	rdbyte	local01, fp
2bb40     10 4E 85 F1 | 	sub	fp, #16
2bb44     04 1E CE F7 | 	test	local01, #4 wz
2bb48     0C 4E 05 A1 |  if_e	add	fp, #12
2bb4c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2bb50     0C 4E 85 A1 |  if_e	sub	fp, #12
2bb54                 | ' 					}
2bb54                 | ' 				}
2bb54                 | ' 				break;
2bb54     7C 00 90 FD | 	jmp	#LR__4487
2bb58                 | LR__4486
2bb58     10 4E 05 F1 | 	add	fp, #16
2bb5c     A7 1E C2 FA | 	rdbyte	local01, fp
2bb60     10 4E 85 F1 | 	sub	fp, #16
2bb64     04 1E CE F7 | 	test	local01, #4 wz
2bb68     68 00 90 5D |  if_ne	jmp	#LR__4487
2bb6c     04 4E 05 F1 | 	add	fp, #4
2bb70     A7 1E 02 FB | 	rdlong	local01, fp
2bb74     04 4E 85 F1 | 	sub	fp, #4
2bb78     06 1E 06 F1 | 	add	local01, #6
2bb7c     0F 1F C2 FA | 	rdbyte	local01, local01
2bb80     10 1E CE F7 | 	test	local01, #16 wz
2bb84     0C 4E 05 A1 |  if_e	add	fp, #12
2bb88     A7 0A 68 AC |  if_e	wrlong	#5, fp
2bb8c     0C 4E 85 A1 |  if_e	sub	fp, #12
2bb90                 | ' 				res = FR_NO_PATH; break;
2bb90     40 00 90 AD |  if_e	jmp	#LR__4487
2bb94     04 4E 05 F1 | 	add	fp, #4
2bb98     A7 20 02 FB | 	rdlong	local02, fp
2bb9c     10 1F 02 F6 | 	mov	local01, local02
2bba0     10 4E 05 F1 | 	add	fp, #16
2bba4     A7 14 02 FB | 	rdlong	arg02, fp
2bba8     0A 13 02 F6 | 	mov	arg01, arg02
2bbac     34 14 06 F1 | 	add	arg02, #52
2bbb0     14 4E 85 F1 | 	sub	fp, #20
2bbb4     10 20 06 F1 | 	add	local02, #16
2bbb8     10 21 02 FB | 	rdlong	local02, local02
2bbbc     FF 21 06 F5 | 	and	local02, #511
2bbc0     10 15 02 F1 | 	add	arg02, local02
2bbc4     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2bbc8     08 1E 06 F1 | 	add	local01, #8
2bbcc     0F FB 61 FC | 	wrlong	result1, local01
2bbd0     E4 FE 9F FD | 	jmp	#LR__4485
2bbd4                 | LR__4487
2bbd4                 | LR__4488
2bbd4                 | ' 			}
2bbd4                 | ' #line 3090 "ff.c"
2bbd4                 | ' 			{
2bbd4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2bbd4                 | ' 			}
2bbd4                 | ' 		}
2bbd4                 | ' 	}
2bbd4                 | ' 
2bbd4                 | ' 	return res;
2bbd4     0C 4E 05 F1 | 	add	fp, #12
2bbd8     A7 FA 01 FB | 	rdlong	result1, fp
2bbdc     0C 4E 85 F1 | 	sub	fp, #12
2bbe0     A7 F0 03 F6 | 	mov	ptra, fp
2bbe4     B2 00 A0 FD | 	call	#popregs_
2bbe8                 | _fatfs_cc_follow_path_ret
2bbe8     2D 00 64 FD | 	ret
2bbec                 | 
2bbec                 | _fatfs_cc_get_ldnumber
2bbec     01 00 66 F6 | 	neg	_var01, #1
2bbf0     09 03 0A FB | 	rdlong	_var02, arg01 wz
2bbf4     01 05 02 F6 | 	mov	_var03, _var02
2bbf8     01 FA 65 A6 |  if_e	neg	result1, #1
2bbfc     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2bc00     97 10 48 FB | 	callpa	#(@LR__4491-@LR__4490)>>2,fcache_load_ptr_
2bc04                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2bc04                 | LR__4490
2bc04     02 07 C2 FA | 	rdbyte	_var04, _var03
2bc08     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2bc0c     20 FA 15 F2 | 	cmp	result1, #32 wc
2bc10     01 04 06 F1 | 	add	_var03, #1
2bc14     03 09 02 36 |  if_ae	mov	_var05, _var04
2bc18     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2bc1c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2bc20     E0 FF 9F 1D |  if_a	jmp	#LR__4490
2bc24                 | LR__4491
2bc24     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2bc28     3A 06 0E F2 | 	cmp	_var04, #58 wz
2bc2c     40 00 90 5D |  if_ne	jmp	#LR__4493
2bc30     01 0A 06 F6 | 	mov	_var06, #1
2bc34     01 09 C2 FA | 	rdbyte	_var05, _var02
2bc38     30 08 16 F2 | 	cmp	_var05, #48 wc
2bc3c     1C 00 90 CD |  if_b	jmp	#LR__4492
2bc40     01 09 C2 FA | 	rdbyte	_var05, _var02
2bc44     3A 08 16 F2 | 	cmp	_var05, #58 wc
2bc48     01 0D 02 C6 |  if_b	mov	_var07, _var02
2bc4c     02 0C 06 C1 |  if_b	add	_var07, #2
2bc50     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2bc54     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2bc58     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2bc5c                 | LR__4492
2bc5c     01 0A 56 F2 | 	cmps	_var06, #1 wc
2bc60     05 01 02 C6 |  if_b	mov	_var01, _var06
2bc64     09 05 62 CC |  if_b	wrlong	_var03, arg01
2bc68                 | ' 			vol = i;
2bc68                 | ' 			*path = tt;
2bc68                 | ' 		}
2bc68                 | ' 		return vol;
2bc68     00 FB 01 F6 | 	mov	result1, _var01
2bc6c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2bc70                 | LR__4493
2bc70                 | ' 	}
2bc70                 | ' #line 3170 "ff.c"
2bc70                 | ' 	vol = 0;
2bc70                 | ' 
2bc70                 | ' 	return vol;
2bc70     00 FA 05 F6 | 	mov	result1, #0
2bc74                 | _fatfs_cc_get_ldnumber_ret
2bc74     2D 00 64 FD | 	ret
2bc78                 | 
2bc78                 | _fatfs_cc_check_fs
2bc78     04 4A 05 F6 | 	mov	COUNT_, #4
2bc7c     A8 00 A0 FD | 	call	#pushregs_
2bc80     09 1F 02 F6 | 	mov	local01, arg01
2bc84     03 1E 06 F1 | 	add	local01, #3
2bc88     0F 01 48 FC | 	wrbyte	#0, local01
2bc8c     2D 1E 06 F1 | 	add	local01, #45
2bc90     FF FF FF FF 
2bc94     0F FF 6B FC | 	wrlong	##-1, local01
2bc98     30 1E 86 F1 | 	sub	local01, #48
2bc9c     0F 13 02 F6 | 	mov	arg01, local01
2bca0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2bca4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bca8     04 FA 05 56 |  if_ne	mov	result1, #4
2bcac     94 01 90 5D |  if_ne	jmp	#LR__4504
2bcb0     34 1E 06 F1 | 	add	local01, #52
2bcb4     0F 13 02 F6 | 	mov	arg01, local01
2bcb8     FE 13 06 F1 | 	add	arg01, #510
2bcbc                 | ' {
2bcbc                 | ' 
2bcbc                 | ' 	return *((WORD*)ptr);
2bcbc     09 21 E2 FA | 	rdword	local02, arg01
2bcc0     0F 23 C2 FA | 	rdbyte	local03, local01
2bcc4     34 1E 86 F1 | 	sub	local01, #52
2bcc8     11 25 E2 F8 | 	getbyte	local04, local03, #0
2bccc     EB 24 0E F2 | 	cmp	local04, #235 wz
2bcd0     11 17 02 56 |  if_ne	mov	arg03, local03
2bcd4     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2bcd8     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2bcdc     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2bce0     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2bce4     44 01 90 5D |  if_ne	jmp	#LR__4503
2bce8     10 25 32 F9 | 	getword	local04, local02, #0
2bcec     55 00 00 FF 
2bcf0     55 24 0E F2 | 	cmp	local04, ##43605 wz
2bcf4     2C 00 90 5D |  if_ne	jmp	#LR__4500
2bcf8     34 1E 06 F1 | 	add	local01, #52
2bcfc     0F 13 02 F6 | 	mov	arg01, local01
2bd00     34 1E 86 F1 | 	sub	local01, #52
2bd04     52 12 06 F1 | 	add	arg01, #82
2bd08     88 01 00 FF 
2bd0c     58 15 06 F6 | 	mov	arg02, ##@LR__5094
2bd10     08 16 06 F6 | 	mov	arg03, #8
2bd14     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2bd18     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd1c                 | ' 			return 0;
2bd1c     00 FA 05 A6 |  if_e	mov	result1, #0
2bd20     20 01 90 AD |  if_e	jmp	#LR__4504
2bd24                 | LR__4500
2bd24     34 1E 06 F1 | 	add	local01, #52
2bd28     0F 13 02 F6 | 	mov	arg01, local01
2bd2c     0B 12 06 F1 | 	add	arg01, #11
2bd30                 | ' {
2bd30                 | ' 
2bd30                 | ' 	return *((WORD*)ptr);
2bd30     09 FB E1 FA | 	rdword	result1, arg01
2bd34     0D 1E 06 F1 | 	add	local01, #13
2bd38     0F 23 C2 FA | 	rdbyte	local03, local01
2bd3c     41 1E 86 F1 | 	sub	local01, #65
2bd40     FD 24 32 F9 | 	getword	local04, result1, #0
2bd44     FD 14 32 F9 | 	getword	arg02, result1, #0
2bd48     01 14 86 F1 | 	sub	arg02, #1
2bd4c     0A 25 CA F7 | 	test	local04, arg02 wz
2bd50     D8 00 90 5D |  if_ne	jmp	#LR__4502
2bd54     FD 14 32 F9 | 	getword	arg02, result1, #0
2bd58     01 00 00 FF 
2bd5c     00 14 16 F2 | 	cmp	arg02, ##512 wc
2bd60     C8 00 90 CD |  if_b	jmp	#LR__4502
2bd64     FD 14 32 F9 | 	getword	arg02, result1, #0
2bd68     01 00 00 FF 
2bd6c     01 14 16 F2 | 	cmp	arg02, ##513 wc
2bd70     B8 00 90 3D |  if_ae	jmp	#LR__4502
2bd74     11 13 02 F6 | 	mov	arg01, local03
2bd78     07 12 4E F7 | 	zerox	arg01, #7 wz
2bd7c     AC 00 90 AD |  if_e	jmp	#LR__4502
2bd80     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2bd84     11 23 E2 F8 | 	getbyte	local03, local03, #0
2bd88     01 22 86 F1 | 	sub	local03, #1
2bd8c     11 13 CA F7 | 	test	arg01, local03 wz
2bd90     98 00 90 5D |  if_ne	jmp	#LR__4502
2bd94     34 1E 06 F1 | 	add	local01, #52
2bd98     0F 13 02 F6 | 	mov	arg01, local01
2bd9c     34 1E 86 F1 | 	sub	local01, #52
2bda0     0E 12 06 F1 | 	add	arg01, #14
2bda4                 | ' {
2bda4                 | ' 
2bda4                 | ' 	return *((WORD*)ptr);
2bda4     09 FB E9 FA | 	rdword	result1, arg01 wz
2bda8     80 00 90 AD |  if_e	jmp	#LR__4502
2bdac     44 1E 06 F1 | 	add	local01, #68
2bdb0     0F 13 C2 FA | 	rdbyte	arg01, local01
2bdb4     44 1E 86 F1 | 	sub	local01, #68
2bdb8     01 12 86 F1 | 	sub	arg01, #1
2bdbc     02 12 16 F2 | 	cmp	arg01, #2 wc
2bdc0     68 00 90 3D |  if_ae	jmp	#LR__4502
2bdc4     34 1E 06 F1 | 	add	local01, #52
2bdc8     0F 13 02 F6 | 	mov	arg01, local01
2bdcc     34 1E 86 F1 | 	sub	local01, #52
2bdd0     11 12 06 F1 | 	add	arg01, #17
2bdd4                 | ' {
2bdd4                 | ' 
2bdd4                 | ' 	return *((WORD*)ptr);
2bdd4     09 FB E9 FA | 	rdword	result1, arg01 wz
2bdd8     50 00 90 AD |  if_e	jmp	#LR__4502
2bddc     34 1E 06 F1 | 	add	local01, #52
2bde0     0F 13 02 F6 | 	mov	arg01, local01
2bde4     34 1E 86 F1 | 	sub	local01, #52
2bde8     13 12 06 F1 | 	add	arg01, #19
2bdec                 | ' {
2bdec                 | ' 
2bdec                 | ' 	return *((WORD*)ptr);
2bdec     09 FB E1 FA | 	rdword	result1, arg01
2bdf0     FD 22 32 F9 | 	getword	local03, result1, #0
2bdf4     80 22 16 F2 | 	cmp	local03, #128 wc
2bdf8     20 00 90 3D |  if_ae	jmp	#LR__4501
2bdfc     34 1E 06 F1 | 	add	local01, #52
2be00     0F 13 02 F6 | 	mov	arg01, local01
2be04     34 1E 86 F1 | 	sub	local01, #52
2be08     20 12 06 F1 | 	add	arg01, #32
2be0c                 | ' {
2be0c                 | ' 
2be0c                 | ' 	return *((DWORD*)ptr);
2be0c     09 FB 01 FB | 	rdlong	result1, arg01
2be10     80 00 00 FF 
2be14     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2be18     10 00 90 CD |  if_b	jmp	#LR__4502
2be1c                 | LR__4501
2be1c     4A 1E 06 F1 | 	add	local01, #74
2be20                 | ' {
2be20                 | ' 
2be20                 | ' 	return *((WORD*)ptr);
2be20     0F FB E9 FA | 	rdword	result1, local01 wz
2be24                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2be24                 | ' 			&& ld_word(fs->win +  14 ) != 0
2be24                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2be24                 | ' 			&& ld_word(fs->win +  17 ) != 0
2be24                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2be24                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2be24                 | ' 				return 0;
2be24     00 FA 05 56 |  if_ne	mov	result1, #0
2be28     18 00 90 5D |  if_ne	jmp	#LR__4504
2be2c                 | LR__4502
2be2c                 | LR__4503
2be2c                 | ' 		}
2be2c                 | ' 	}
2be2c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2be2c     10 23 32 F9 | 	getword	local03, local02, #0
2be30     55 00 00 FF 
2be34     55 22 0E F2 | 	cmp	local03, ##43605 wz
2be38     02 24 06 A6 |  if_e	mov	local04, #2
2be3c     03 24 06 56 |  if_ne	mov	local04, #3
2be40     12 FB 01 F6 | 	mov	result1, local04
2be44                 | LR__4504
2be44     A7 F0 03 F6 | 	mov	ptra, fp
2be48     B2 00 A0 FD | 	call	#popregs_
2be4c                 | _fatfs_cc_check_fs_ret
2be4c     2D 00 64 FD | 	ret
2be50                 | 
2be50                 | _fatfs_cc_find_volume
2be50     05 4A 05 F6 | 	mov	COUNT_, #5
2be54     A8 00 A0 FD | 	call	#pushregs_
2be58     24 F0 07 F1 | 	add	ptra, #36
2be5c     09 1F 02 F6 | 	mov	local01, arg01
2be60     0A 21 02 F6 | 	mov	local02, arg02
2be64     0F 13 02 F6 | 	mov	arg01, local01
2be68     00 14 06 F6 | 	mov	arg02, #0
2be6c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2be70     02 FA 0D F2 | 	cmp	result1, #2 wz
2be74     0C 00 90 AD |  if_e	jmp	#LR__4510
2be78     03 FA 15 F2 | 	cmp	result1, #3 wc
2be7c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2be80     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4518
2be84                 | LR__4510
2be84                 | ' 	for (i = 0; i < 4; i++) {
2be84     00 22 06 F6 | 	mov	local03, #0
2be88     97 26 48 FB | 	callpa	#(@LR__4512-@LR__4511)>>2,fcache_load_ptr_
2be8c                 | LR__4511
2be8c     04 22 16 F2 | 	cmp	local03, #4 wc
2be90     44 00 90 3D |  if_ae	jmp	#LR__4513
2be94     11 25 02 F6 | 	mov	local04, local03
2be98     02 24 66 F0 | 	shl	local04, #2
2be9c     14 4E 05 F1 | 	add	fp, #20
2bea0     A7 24 02 F1 | 	add	local04, fp
2bea4     34 1E 06 F1 | 	add	local01, #52
2bea8     0F 13 02 F6 | 	mov	arg01, local01
2beac     34 1E 86 F1 | 	sub	local01, #52
2beb0     BE 13 06 F1 | 	add	arg01, #446
2beb4     11 15 02 F6 | 	mov	arg02, local03
2beb8     04 14 66 F0 | 	shl	arg02, #4
2bebc     0A 13 02 F1 | 	add	arg01, arg02
2bec0     08 12 06 F1 | 	add	arg01, #8
2bec4                 | ' {
2bec4                 | ' 
2bec4                 | ' 	return *((DWORD*)ptr);
2bec4     09 FB 01 FB | 	rdlong	result1, arg01
2bec8     14 4E 85 F1 | 	sub	fp, #20
2becc     12 FB 61 FC | 	wrlong	result1, local04
2bed0     01 22 06 F1 | 	add	local03, #1
2bed4     B4 FF 9F FD | 	jmp	#LR__4511
2bed8                 | LR__4512
2bed8                 | LR__4513
2bed8     00 20 0E F2 | 	cmp	local02, #0 wz
2bedc     10 25 02 56 |  if_ne	mov	local04, local02
2bee0     01 24 86 51 |  if_ne	sub	local04, #1
2bee4     00 24 06 A6 |  if_e	mov	local04, #0
2bee8     12 23 02 F6 | 	mov	local03, local04
2beec                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2beec                 | ' 	}
2beec                 | ' 	i = part ? part - 1 : 0;
2beec                 | ' 	do {
2beec                 | LR__4514
2beec     11 25 02 F6 | 	mov	local04, local03
2bef0     02 24 66 F0 | 	shl	local04, #2
2bef4     14 4E 05 F1 | 	add	fp, #20
2bef8     A7 24 02 F1 | 	add	local04, fp
2befc     12 25 0A FB | 	rdlong	local04, local04 wz
2bf00     14 4E 85 F1 | 	sub	fp, #20
2bf04     28 00 90 AD |  if_e	jmp	#LR__4515
2bf08     11 25 02 F6 | 	mov	local04, local03
2bf0c     02 24 66 F0 | 	shl	local04, #2
2bf10     14 4E 05 F1 | 	add	fp, #20
2bf14     A7 24 02 F1 | 	add	local04, fp
2bf18     12 15 02 FB | 	rdlong	arg02, local04
2bf1c     0F 13 02 F6 | 	mov	arg01, local01
2bf20     14 4E 85 F1 | 	sub	fp, #20
2bf24     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2bf28     FD 24 02 F6 | 	mov	local04, result1
2bf2c     04 00 90 FD | 	jmp	#LR__4516
2bf30                 | LR__4515
2bf30     03 24 06 F6 | 	mov	local04, #3
2bf34                 | LR__4516
2bf34     12 27 02 F6 | 	mov	local05, local04
2bf38     00 20 0E F2 | 	cmp	local02, #0 wz
2bf3c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2bf40     0C 00 90 8D |  if_c_and_z	jmp	#LR__4517
2bf44     01 22 06 A1 |  if_e	add	local03, #1
2bf48     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2bf4c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4514
2bf50                 | LR__4517
2bf50                 | ' 	return fmt;
2bf50     13 FB 01 F6 | 	mov	result1, local05
2bf54                 | LR__4518
2bf54     A7 F0 03 F6 | 	mov	ptra, fp
2bf58     B2 00 A0 FD | 	call	#popregs_
2bf5c                 | _fatfs_cc_find_volume_ret
2bf5c     2D 00 64 FD | 	ret
2bf60                 | 
2bf60                 | _fatfs_cc_mount_volume
2bf60     0B 4A 05 F6 | 	mov	COUNT_, #11
2bf64     A8 00 A0 FD | 	call	#pushregs_
2bf68     0A 1F 02 F6 | 	mov	local01, arg02
2bf6c     0B 21 02 F6 | 	mov	local02, arg03
2bf70     0F 01 68 FC | 	wrlong	#0, local01
2bf74     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2bf78     FD 22 02 F6 | 	mov	local03, result1
2bf7c     00 22 56 F2 | 	cmps	local03, #0 wc
2bf80     0B FA 05 C6 |  if_b	mov	result1, #11
2bf84     3C 05 90 CD |  if_b	jmp	#LR__4530
2bf88     11 17 02 F6 | 	mov	arg03, local03
2bf8c     02 16 66 F0 | 	shl	arg03, #2
2bf90     F2 16 02 F1 | 	add	arg03, objptr
2bf94     0B 25 0A FB | 	rdlong	local04, arg03 wz
2bf98     0C FA 05 A6 |  if_e	mov	result1, #12
2bf9c     24 05 90 AD |  if_e	jmp	#LR__4530
2bfa0     0F 25 62 FC | 	wrlong	local04, local01
2bfa4     10 21 E2 F8 | 	getbyte	local02, local02, #0
2bfa8     FE 20 06 F5 | 	and	local02, #254
2bfac     12 17 CA FA | 	rdbyte	arg03, local04 wz
2bfb0     4C 00 90 AD |  if_e	jmp	#LR__4521
2bfb4     01 24 06 F1 | 	add	local04, #1
2bfb8     12 13 CA FA | 	rdbyte	arg01, local04 wz
2bfbc     01 24 86 F1 | 	sub	local04, #1
2bfc0     01 FA 05 56 |  if_ne	mov	result1, #1
2bfc4                 | ' 
2bfc4                 | ' 	return Stat;
2bfc4     01 00 00 AF 
2bfc8     20 E4 05 A1 |  if_e	add	objptr, ##544
2bfcc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2bfd0     01 00 00 AF 
2bfd4     20 E4 85 A1 |  if_e	sub	objptr, ##544
2bfd8     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2bfdc     01 16 CE F7 | 	test	arg03, #1 wz
2bfe0     1C 00 90 5D |  if_ne	jmp	#LR__4520
2bfe4     00 20 0E F2 | 	cmp	local02, #0 wz
2bfe8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2bfec     04 FA CD 57 |  if_ne	test	result1, #4 wz
2bff0                 | ' 				return FR_WRITE_PROTECTED;
2bff0     0A FA 05 56 |  if_ne	mov	result1, #10
2bff4     CC 04 90 5D |  if_ne	jmp	#LR__4530
2bff8                 | ' 			}
2bff8                 | ' 			return FR_OK;
2bff8     00 FA 05 F6 | 	mov	result1, #0
2bffc     C4 04 90 FD | 	jmp	#LR__4530
2c000                 | LR__4520
2c000                 | LR__4521
2c000     12 01 48 FC | 	wrbyte	#0, local04
2c004     01 24 06 F1 | 	add	local04, #1
2c008     12 23 42 FC | 	wrbyte	local03, local04
2c00c     12 13 C2 FA | 	rdbyte	arg01, local04
2c010     01 24 86 F1 | 	sub	local04, #1
2c014     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2c018     FD 16 02 F6 | 	mov	arg03, result1
2c01c     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2c020     01 26 CE F7 | 	test	local05, #1 wz
2c024                 | ' 		return FR_NOT_READY;
2c024     03 FA 05 56 |  if_ne	mov	result1, #3
2c028     98 04 90 5D |  if_ne	jmp	#LR__4530
2c02c     00 20 0E F2 | 	cmp	local02, #0 wz
2c030     0B 27 02 56 |  if_ne	mov	local05, arg03
2c034     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2c038     04 26 CE 57 |  if_ne	test	local05, #4 wz
2c03c                 | ' 		return FR_WRITE_PROTECTED;
2c03c     0A FA 05 56 |  if_ne	mov	result1, #10
2c040     80 04 90 5D |  if_ne	jmp	#LR__4530
2c044     12 13 02 F6 | 	mov	arg01, local04
2c048     00 14 06 F6 | 	mov	arg02, #0
2c04c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2c050     FD 12 02 F6 | 	mov	arg01, result1
2c054     04 12 0E F2 | 	cmp	arg01, #4 wz
2c058     01 FA 05 A6 |  if_e	mov	result1, #1
2c05c     64 04 90 AD |  if_e	jmp	#LR__4530
2c060     02 12 16 F2 | 	cmp	arg01, #2 wc
2c064     0D FA 05 36 |  if_ae	mov	result1, #13
2c068     58 04 90 3D |  if_ae	jmp	#LR__4530
2c06c     30 24 06 F1 | 	add	local04, #48
2c070     12 29 02 FB | 	rdlong	local06, local04
2c074     04 24 06 F1 | 	add	local04, #4
2c078     12 13 02 F6 | 	mov	arg01, local04
2c07c     34 24 86 F1 | 	sub	local04, #52
2c080     0B 12 06 F1 | 	add	arg01, #11
2c084                 | ' {
2c084                 | ' 
2c084                 | ' 	return *((WORD*)ptr);
2c084     09 FB E1 FA | 	rdword	result1, arg01
2c088     01 00 00 FF 
2c08c     00 FA 0D F2 | 	cmp	result1, ##512 wz
2c090     0D FA 05 56 |  if_ne	mov	result1, #13
2c094     2C 04 90 5D |  if_ne	jmp	#LR__4530
2c098     34 24 06 F1 | 	add	local04, #52
2c09c     12 13 02 F6 | 	mov	arg01, local04
2c0a0     34 24 86 F1 | 	sub	local04, #52
2c0a4     16 12 06 F1 | 	add	arg01, #22
2c0a8                 | ' {
2c0a8                 | ' 
2c0a8                 | ' 	return *((WORD*)ptr);
2c0a8     09 FB E1 FA | 	rdword	result1, arg01
2c0ac     FD 2A 0A F6 | 	mov	local07, result1 wz
2c0b0     18 00 90 5D |  if_ne	jmp	#LR__4522
2c0b4     34 24 06 F1 | 	add	local04, #52
2c0b8     12 13 02 F6 | 	mov	arg01, local04
2c0bc     34 24 86 F1 | 	sub	local04, #52
2c0c0     24 12 06 F1 | 	add	arg01, #36
2c0c4                 | ' {
2c0c4                 | ' 
2c0c4                 | ' 	return *((DWORD*)ptr);
2c0c4     09 FB 01 FB | 	rdlong	result1, arg01
2c0c8     FD 2A 02 F6 | 	mov	local07, result1
2c0cc                 | LR__4522
2c0cc     1C 24 06 F1 | 	add	local04, #28
2c0d0     12 2B 62 FC | 	wrlong	local07, local04
2c0d4     28 24 06 F1 | 	add	local04, #40
2c0d8     12 27 C2 FA | 	rdbyte	local05, local04
2c0dc     42 24 86 F1 | 	sub	local04, #66
2c0e0     12 27 42 FC | 	wrbyte	local05, local04
2c0e4     12 27 C2 FA | 	rdbyte	local05, local04
2c0e8     02 24 86 F1 | 	sub	local04, #2
2c0ec     01 26 0E F2 | 	cmp	local05, #1 wz
2c0f0     02 24 06 51 |  if_ne	add	local04, #2
2c0f4     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2c0f8     02 24 86 51 |  if_ne	sub	local04, #2
2c0fc     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2c100     0D FA 05 56 |  if_ne	mov	result1, #13
2c104     BC 03 90 5D |  if_ne	jmp	#LR__4530
2c108     02 24 06 F1 | 	add	local04, #2
2c10c     12 27 C2 FA | 	rdbyte	local05, local04
2c110     13 2B 02 FD | 	qmul	local07, local05
2c114     3F 24 06 F1 | 	add	local04, #63
2c118     12 27 C2 FA | 	rdbyte	local05, local04
2c11c     37 24 86 F1 | 	sub	local04, #55
2c120     12 27 52 FC | 	wrword	local05, local04
2c124     12 27 EA FA | 	rdword	local05, local04 wz
2c128     0A 24 86 F1 | 	sub	local04, #10
2c12c     18 2A 62 FD | 	getqx	local07
2c130     20 00 90 AD |  if_e	jmp	#LR__4523
2c134     0A 24 06 F1 | 	add	local04, #10
2c138     12 27 E2 FA | 	rdword	local05, local04
2c13c     13 23 32 F9 | 	getword	local03, local05, #0
2c140     0A 24 86 F1 | 	sub	local04, #10
2c144     13 27 32 F9 | 	getword	local05, local05, #0
2c148     01 26 86 F1 | 	sub	local05, #1
2c14c     13 23 CA F7 | 	test	local03, local05 wz
2c150     08 00 90 AD |  if_e	jmp	#LR__4524
2c154                 | LR__4523
2c154     0D FA 05 F6 | 	mov	result1, #13
2c158     68 03 90 FD | 	jmp	#LR__4530
2c15c                 | LR__4524
2c15c     34 24 06 F1 | 	add	local04, #52
2c160     12 13 02 F6 | 	mov	arg01, local04
2c164     11 12 06 F1 | 	add	arg01, #17
2c168                 | ' {
2c168                 | ' 
2c168                 | ' 	return *((WORD*)ptr);
2c168     09 FB E1 FA | 	rdword	result1, arg01
2c16c     2C 24 86 F1 | 	sub	local04, #44
2c170     12 FB 51 FC | 	wrword	result1, local04
2c174     12 27 E2 FA | 	rdword	local05, local04
2c178     08 24 86 F1 | 	sub	local04, #8
2c17c     13 13 52 F6 | 	abs	arg01, local05 wc
2c180     09 13 42 F8 | 	getnib	arg01, arg01, #0
2c184     09 13 8A F6 | 	negc	arg01, arg01 wz
2c188     0D FA 05 56 |  if_ne	mov	result1, #13
2c18c     34 03 90 5D |  if_ne	jmp	#LR__4530
2c190     34 24 06 F1 | 	add	local04, #52
2c194     12 13 02 F6 | 	mov	arg01, local04
2c198     34 24 86 F1 | 	sub	local04, #52
2c19c     13 12 06 F1 | 	add	arg01, #19
2c1a0                 | ' {
2c1a0                 | ' 
2c1a0                 | ' 	return *((WORD*)ptr);
2c1a0     09 FB E1 FA | 	rdword	result1, arg01
2c1a4     FD 2C 0A F6 | 	mov	local08, result1 wz
2c1a8     34 24 06 A1 |  if_e	add	local04, #52
2c1ac     12 13 02 A6 |  if_e	mov	arg01, local04
2c1b0     34 24 86 A1 |  if_e	sub	local04, #52
2c1b4     20 12 06 A1 |  if_e	add	arg01, #32
2c1b8                 | ' {
2c1b8                 | ' 
2c1b8                 | ' 	return *((DWORD*)ptr);
2c1b8     09 2D 02 AB |  if_e	rdlong	local08, arg01
2c1bc     34 24 06 F1 | 	add	local04, #52
2c1c0     12 13 02 F6 | 	mov	arg01, local04
2c1c4     34 24 86 F1 | 	sub	local04, #52
2c1c8     0E 12 06 F1 | 	add	arg01, #14
2c1cc                 | ' {
2c1cc                 | ' 
2c1cc                 | ' 	return *((WORD*)ptr);
2c1cc     09 FB E1 FA | 	rdword	result1, arg01
2c1d0     FD 12 02 F6 | 	mov	arg01, result1
2c1d4     09 27 02 F6 | 	mov	local05, arg01
2c1d8     0F 26 4E F7 | 	zerox	local05, #15 wz
2c1dc     0D FA 05 A6 |  if_e	mov	result1, #13
2c1e0     E0 02 90 AD |  if_e	jmp	#LR__4530
2c1e4     09 2F 32 F9 | 	getword	local09, arg01, #0
2c1e8     15 2F 02 F1 | 	add	local09, local07
2c1ec     08 24 06 F1 | 	add	local04, #8
2c1f0     12 27 E2 FA | 	rdword	local05, local04
2c1f4     08 24 86 F1 | 	sub	local04, #8
2c1f8     13 27 52 F6 | 	abs	local05, local05 wc
2c1fc     04 26 46 F0 | 	shr	local05, #4
2c200     13 2F 82 F3 | 	sumc	local09, local05
2c204     17 2D 12 F2 | 	cmp	local08, local09 wc
2c208     0D FA 05 C6 |  if_b	mov	result1, #13
2c20c     B4 02 90 CD |  if_b	jmp	#LR__4530
2c210     17 2D 82 F1 | 	sub	local08, local09
2c214     0A 24 06 F1 | 	add	local04, #10
2c218     12 27 E2 FA | 	rdword	local05, local04
2c21c     13 2D 12 FD | 	qdiv	local08, local05
2c220     0A 24 86 F1 | 	sub	local04, #10
2c224     18 26 62 FD | 	getqx	local05
2c228     00 26 0E F2 | 	cmp	local05, #0 wz
2c22c     0D FA 05 A6 |  if_e	mov	result1, #13
2c230     90 02 90 AD |  if_e	jmp	#LR__4530
2c234     00 30 06 F6 | 	mov	local10, #0
2c238     FF FF 07 FF 
2c23c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2c240     03 30 06 C6 |  if_b	mov	local10, #3
2c244     7F 00 00 FF 
2c248     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2c24c     02 30 06 C6 |  if_b	mov	local10, #2
2c250     07 00 00 FF 
2c254     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2c258     01 30 06 C6 |  if_b	mov	local10, #1
2c25c     00 30 0E F2 | 	cmp	local10, #0 wz
2c260     0D FA 05 A6 |  if_e	mov	result1, #13
2c264     5C 02 90 AD |  if_e	jmp	#LR__4530
2c268     02 26 06 F1 | 	add	local05, #2
2c26c     18 24 06 F1 | 	add	local04, #24
2c270     12 27 62 FC | 	wrlong	local05, local04
2c274     08 24 06 F1 | 	add	local04, #8
2c278     12 29 62 FC | 	wrlong	local06, local04
2c27c     14 27 02 F6 | 	mov	local05, local06
2c280     09 13 32 F9 | 	getword	arg01, arg01, #0
2c284     09 27 02 F1 | 	add	local05, arg01
2c288     04 24 06 F1 | 	add	local04, #4
2c28c     12 27 62 FC | 	wrlong	local05, local04
2c290     14 27 02 F6 | 	mov	local05, local06
2c294     17 27 02 F1 | 	add	local05, local09
2c298     08 24 06 F1 | 	add	local04, #8
2c29c     12 27 62 FC | 	wrlong	local05, local04
2c2a0     2C 24 86 F1 | 	sub	local04, #44
2c2a4     03 30 0E F2 | 	cmp	local10, #3 wz
2c2a8     5C 00 90 5D |  if_ne	jmp	#LR__4525
2c2ac     34 24 06 F1 | 	add	local04, #52
2c2b0     12 13 02 F6 | 	mov	arg01, local04
2c2b4     34 24 86 F1 | 	sub	local04, #52
2c2b8     2A 12 06 F1 | 	add	arg01, #42
2c2bc                 | ' {
2c2bc                 | ' 
2c2bc                 | ' 	return *((WORD*)ptr);
2c2bc     09 FB E9 FA | 	rdword	result1, arg01 wz
2c2c0     0D FA 05 56 |  if_ne	mov	result1, #13
2c2c4     FC 01 90 5D |  if_ne	jmp	#LR__4530
2c2c8     08 24 06 F1 | 	add	local04, #8
2c2cc     12 27 EA FA | 	rdword	local05, local04 wz
2c2d0     08 24 86 F1 | 	sub	local04, #8
2c2d4     0D FA 05 56 |  if_ne	mov	result1, #13
2c2d8     E8 01 90 5D |  if_ne	jmp	#LR__4530
2c2dc     34 24 06 F1 | 	add	local04, #52
2c2e0     12 13 02 F6 | 	mov	arg01, local04
2c2e4     2C 12 06 F1 | 	add	arg01, #44
2c2e8                 | ' {
2c2e8                 | ' 
2c2e8                 | ' 	return *((DWORD*)ptr);
2c2e8     09 FB 01 FB | 	rdlong	result1, arg01
2c2ec     0C 24 86 F1 | 	sub	local04, #12
2c2f0     12 FB 61 FC | 	wrlong	result1, local04
2c2f4     10 24 86 F1 | 	sub	local04, #16
2c2f8     12 33 02 FB | 	rdlong	local11, local04
2c2fc     18 24 86 F1 | 	sub	local04, #24
2c300     02 32 66 F0 | 	shl	local11, #2
2c304     6C 00 90 FD | 	jmp	#LR__4527
2c308                 | LR__4525
2c308     08 24 06 F1 | 	add	local04, #8
2c30c     12 27 EA FA | 	rdword	local05, local04 wz
2c310     08 24 86 F1 | 	sub	local04, #8
2c314     0D FA 05 A6 |  if_e	mov	result1, #13
2c318     A8 01 90 AD |  if_e	jmp	#LR__4530
2c31c     24 24 06 F1 | 	add	local04, #36
2c320     12 27 02 FB | 	rdlong	local05, local04
2c324     15 27 02 F1 | 	add	local05, local07
2c328     04 24 06 F1 | 	add	local04, #4
2c32c     12 27 62 FC | 	wrlong	local05, local04
2c330     28 24 86 F1 | 	sub	local04, #40
2c334     02 30 0E F2 | 	cmp	local10, #2 wz
2c338     18 24 06 A1 |  if_e	add	local04, #24
2c33c     12 27 02 AB |  if_e	rdlong	local05, local04
2c340     18 24 86 A1 |  if_e	sub	local04, #24
2c344     01 26 66 A0 |  if_e	shl	local05, #1
2c348     24 00 90 AD |  if_e	jmp	#LR__4526
2c34c     18 24 06 F1 | 	add	local04, #24
2c350     12 33 02 FB | 	rdlong	local11, local04
2c354     19 27 02 F6 | 	mov	local05, local11
2c358     01 26 66 F0 | 	shl	local05, #1
2c35c     19 27 02 F1 | 	add	local05, local11
2c360     01 26 46 F0 | 	shr	local05, #1
2c364     18 24 86 F1 | 	sub	local04, #24
2c368     01 32 06 F5 | 	and	local11, #1
2c36c     19 27 02 F1 | 	add	local05, local11
2c370                 | LR__4526
2c370     13 33 02 F6 | 	mov	local11, local05
2c374                 | LR__4527
2c374     FF 33 06 F1 | 	add	local11, #511
2c378     09 32 46 F0 | 	shr	local11, #9
2c37c     1C 24 06 F1 | 	add	local04, #28
2c380     12 17 02 FB | 	rdlong	arg03, local04
2c384     1C 24 86 F1 | 	sub	local04, #28
2c388     19 17 12 F2 | 	cmp	arg03, local11 wc
2c38c     0D FA 05 C6 |  if_b	mov	result1, #13
2c390     30 01 90 CD |  if_b	jmp	#LR__4530
2c394     14 24 06 F1 | 	add	local04, #20
2c398     FF FF FF FF 
2c39c     12 FF 6B FC | 	wrlong	##-1, local04
2c3a0     04 24 86 F1 | 	sub	local04, #4
2c3a4     FF FF FF FF 
2c3a8     12 FF 6B FC | 	wrlong	##-1, local04
2c3ac     0C 24 86 F1 | 	sub	local04, #12
2c3b0     12 01 49 FC | 	wrbyte	#128, local04
2c3b4     04 24 86 F1 | 	sub	local04, #4
2c3b8     03 30 0E F2 | 	cmp	local10, #3 wz
2c3bc     D0 00 90 5D |  if_ne	jmp	#LR__4529
2c3c0     34 24 06 F1 | 	add	local04, #52
2c3c4     12 13 02 F6 | 	mov	arg01, local04
2c3c8     34 24 86 F1 | 	sub	local04, #52
2c3cc     30 12 06 F1 | 	add	arg01, #48
2c3d0                 | ' {
2c3d0                 | ' 
2c3d0                 | ' 	return *((WORD*)ptr);
2c3d0     09 FB E1 FA | 	rdword	result1, arg01
2c3d4     FD 26 32 F9 | 	getword	local05, result1, #0
2c3d8     01 26 0E F2 | 	cmp	local05, #1 wz
2c3dc     B0 00 90 5D |  if_ne	jmp	#LR__4529
2c3e0     01 28 06 F1 | 	add	local06, #1
2c3e4     12 13 02 F6 | 	mov	arg01, local04
2c3e8     14 15 02 F6 | 	mov	arg02, local06
2c3ec     CC CD BF FD | 	call	#_fatfs_cc_move_window
2c3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3f4     98 00 90 5D |  if_ne	jmp	#LR__4529
2c3f8     04 24 06 F1 | 	add	local04, #4
2c3fc     12 01 48 FC | 	wrbyte	#0, local04
2c400     30 24 06 F1 | 	add	local04, #48
2c404     12 13 02 F6 | 	mov	arg01, local04
2c408     34 24 86 F1 | 	sub	local04, #52
2c40c     FE 13 06 F1 | 	add	arg01, #510
2c410                 | ' {
2c410                 | ' 
2c410                 | ' 	return *((WORD*)ptr);
2c410     09 FB E1 FA | 	rdword	result1, arg01
2c414     FD 26 32 F9 | 	getword	local05, result1, #0
2c418     55 00 00 FF 
2c41c     55 26 0E F2 | 	cmp	local05, ##43605 wz
2c420     34 24 06 A1 |  if_e	add	local04, #52
2c424     12 13 02 A6 |  if_e	mov	arg01, local04
2c428     34 24 86 A1 |  if_e	sub	local04, #52
2c42c                 | ' {
2c42c                 | ' 
2c42c                 | ' 	return *((DWORD*)ptr);
2c42c     09 FB 01 AB |  if_e	rdlong	result1, arg01
2c430     A9 B0 20 AF 
2c434     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2c438     54 00 90 5D |  if_ne	jmp	#LR__4528
2c43c     34 24 06 F1 | 	add	local04, #52
2c440     12 13 02 F6 | 	mov	arg01, local04
2c444     34 24 86 F1 | 	sub	local04, #52
2c448     E4 13 06 F1 | 	add	arg01, #484
2c44c                 | ' {
2c44c                 | ' 
2c44c                 | ' 	return *((DWORD*)ptr);
2c44c     09 FB 01 FB | 	rdlong	result1, arg01
2c450     B9 A0 30 FF 
2c454     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2c458     34 00 90 5D |  if_ne	jmp	#LR__4528
2c45c     34 24 06 F1 | 	add	local04, #52
2c460     12 13 02 F6 | 	mov	arg01, local04
2c464     E8 13 06 F1 | 	add	arg01, #488
2c468                 | ' {
2c468                 | ' 
2c468                 | ' 	return *((DWORD*)ptr);
2c468     09 FB 01 FB | 	rdlong	result1, arg01
2c46c     20 24 86 F1 | 	sub	local04, #32
2c470     12 FB 61 FC | 	wrlong	result1, local04
2c474     20 24 06 F1 | 	add	local04, #32
2c478     12 13 02 F6 | 	mov	arg01, local04
2c47c     EC 13 06 F1 | 	add	arg01, #492
2c480                 | ' {
2c480                 | ' 
2c480                 | ' 	return *((DWORD*)ptr);
2c480     09 FB 01 FB | 	rdlong	result1, arg01
2c484     24 24 86 F1 | 	sub	local04, #36
2c488     12 FB 61 FC | 	wrlong	result1, local04
2c48c     10 24 86 F1 | 	sub	local04, #16
2c490                 | LR__4528
2c490                 | LR__4529
2c490     12 31 42 FC | 	wrbyte	local10, local04
2c494     04 E4 05 F1 | 	add	objptr, #4
2c498     F2 26 E2 FA | 	rdword	local05, objptr
2c49c     01 26 06 F1 | 	add	local05, #1
2c4a0     F2 26 52 FC | 	wrword	local05, objptr
2c4a4     F2 32 E2 FA | 	rdword	local11, objptr
2c4a8     06 24 06 F1 | 	add	local04, #6
2c4ac     12 33 52 FC | 	wrword	local11, local04
2c4b0     04 E4 05 F1 | 	add	objptr, #4
2c4b4     06 24 06 F1 | 	add	local04, #6
2c4b8     12 E5 61 FC | 	wrlong	objptr, local04
2c4bc                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2c4bc                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2c4bc                 | ' 			{
2c4bc                 | ' 
2c4bc                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2c4bc                 | ' 
2c4bc                 | ' 
2c4bc                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2c4bc                 | ' 
2c4bc                 | ' 			}
2c4bc                 | ' 		}
2c4bc                 | ' 
2c4bc                 | ' 
2c4bc                 | ' 	}
2c4bc                 | ' 
2c4bc                 | ' 	fs->fs_type = (BYTE)fmt;
2c4bc                 | ' 	fs->id = ++Fsid;
2c4bc                 | ' 
2c4bc                 | ' 	fs->lfnbuf = LfnBuf;
2c4bc                 | ' #line 3567 "ff.c"
2c4bc                 | ' 	return FR_OK;
2c4bc     00 FA 05 F6 | 	mov	result1, #0
2c4c0     08 E4 85 F1 | 	sub	objptr, #8
2c4c4                 | LR__4530
2c4c4     A7 F0 03 F6 | 	mov	ptra, fp
2c4c8     B2 00 A0 FD | 	call	#popregs_
2c4cc                 | _fatfs_cc_mount_volume_ret
2c4cc     2D 00 64 FD | 	ret
2c4d0                 | 
2c4d0                 | _fatfs_cc_validate
2c4d0     09 01 0A F6 | 	mov	_var01, arg01 wz
2c4d4     09 02 06 F6 | 	mov	_var02, #9
2c4d8     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2c4dc     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2c4e0     50 00 90 AD |  if_e	jmp	#LR__4540
2c4e4     04 00 06 F1 | 	add	_var01, #4
2c4e8     00 07 E2 FA | 	rdword	_var04, _var01
2c4ec     04 00 86 F1 | 	sub	_var01, #4
2c4f0     00 13 02 FB | 	rdlong	arg01, _var01
2c4f4     06 12 06 F1 | 	add	arg01, #6
2c4f8     09 FB E1 FA | 	rdword	result1, arg01
2c4fc     FD 06 0A F2 | 	cmp	_var04, result1 wz
2c500     30 00 90 5D |  if_ne	jmp	#LR__4540
2c504     00 07 02 FB | 	rdlong	_var04, _var01
2c508     01 06 06 F1 | 	add	_var04, #1
2c50c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2c510     01 FA 05 56 |  if_ne	mov	result1, #1
2c514                 | ' 
2c514                 | ' 	return Stat;
2c514     01 00 00 AF 
2c518     20 E4 05 A1 |  if_e	add	objptr, ##544
2c51c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c520     01 00 00 AF 
2c524     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c528     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2c52c     01 04 CE F7 | 	test	_var03, #1 wz
2c530     00 02 06 A6 |  if_e	mov	_var02, #0
2c534                 | LR__4540
2c534     00 02 0E F2 | 	cmp	_var02, #0 wz
2c538     00 05 02 AB |  if_e	rdlong	_var03, _var01
2c53c     00 04 06 56 |  if_ne	mov	_var03, #0
2c540     0A 05 62 FC | 	wrlong	_var03, arg02
2c544                 | ' 			res = FR_OK;
2c544                 | ' 		}
2c544                 | ' 
2c544                 | ' 	}
2c544                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2c544                 | ' 	return res;
2c544     01 FB 01 F6 | 	mov	result1, _var02
2c548                 | _fatfs_cc_validate_ret
2c548     2D 00 64 FD | 	ret
2c54c                 | 
2c54c                 | _fatfs_cc_f_mount
2c54c     01 4A 05 F6 | 	mov	COUNT_, #1
2c550     A8 00 A0 FD | 	call	#pushregs_
2c554     20 F0 07 F1 | 	add	ptra, #32
2c558     04 4E 05 F1 | 	add	fp, #4
2c55c     A7 12 62 FC | 	wrlong	arg01, fp
2c560     04 4E 05 F1 | 	add	fp, #4
2c564     A7 14 62 FC | 	wrlong	arg02, fp
2c568     04 4E 05 F1 | 	add	fp, #4
2c56c     A7 16 42 FC | 	wrbyte	arg03, fp
2c570     04 4E 85 F1 | 	sub	fp, #4
2c574     A7 16 02 FB | 	rdlong	arg03, fp
2c578     14 4E 05 F1 | 	add	fp, #20
2c57c     A7 16 62 FC | 	wrlong	arg03, fp
2c580     A7 12 02 F6 | 	mov	arg01, fp
2c584     1C 4E 85 F1 | 	sub	fp, #28
2c588     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2c58c     14 4E 05 F1 | 	add	fp, #20
2c590     A7 FA 61 FC | 	wrlong	result1, fp
2c594     14 4E 85 F1 | 	sub	fp, #20
2c598     00 FA 55 F2 | 	cmps	result1, #0 wc
2c59c     0B FA 05 C6 |  if_b	mov	result1, #11
2c5a0     C0 00 90 CD |  if_b	jmp	#LR__4551
2c5a4     14 4E 05 F1 | 	add	fp, #20
2c5a8     A7 16 02 FB | 	rdlong	arg03, fp
2c5ac     02 16 66 F0 | 	shl	arg03, #2
2c5b0     F2 16 02 F1 | 	add	arg03, objptr
2c5b4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2c5b8     04 4E 85 F1 | 	sub	fp, #4
2c5bc     A7 16 62 FC | 	wrlong	arg03, fp
2c5c0     10 4E 85 F1 | 	sub	fp, #16
2c5c4     28 00 90 AD |  if_e	jmp	#LR__4550
2c5c8     10 4E 05 F1 | 	add	fp, #16
2c5cc     A7 16 02 FB | 	rdlong	arg03, fp
2c5d0     10 4E 85 F1 | 	sub	fp, #16
2c5d4     01 16 06 F1 | 	add	arg03, #1
2c5d8     0B 13 C2 FA | 	rdbyte	arg01, arg03
2c5dc     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2c5e0     10 4E 05 F1 | 	add	fp, #16
2c5e4     A7 16 02 FB | 	rdlong	arg03, fp
2c5e8     10 4E 85 F1 | 	sub	fp, #16
2c5ec     0B 01 48 FC | 	wrbyte	#0, arg03
2c5f0                 | LR__4550
2c5f0     04 4E 05 F1 | 	add	fp, #4
2c5f4     A7 1E 0A FB | 	rdlong	local01, fp wz
2c5f8     04 4E 85 F1 | 	sub	fp, #4
2c5fc     04 4E 05 51 |  if_ne	add	fp, #4
2c600     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2c604     04 4E 85 51 |  if_ne	sub	fp, #4
2c608     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2c60c     14 4E 05 F1 | 	add	fp, #20
2c610     A7 1E 02 FB | 	rdlong	local01, fp
2c614     02 1E 66 F0 | 	shl	local01, #2
2c618     F2 1E 02 F1 | 	add	local01, objptr
2c61c     10 4E 85 F1 | 	sub	fp, #16
2c620     A7 16 02 FB | 	rdlong	arg03, fp
2c624     0F 17 62 FC | 	wrlong	arg03, local01
2c628     08 4E 05 F1 | 	add	fp, #8
2c62c     A7 1E CA FA | 	rdbyte	local01, fp wz
2c630     0C 4E 85 F1 | 	sub	fp, #12
2c634     00 FA 05 A6 |  if_e	mov	result1, #0
2c638     28 00 90 AD |  if_e	jmp	#LR__4551
2c63c     08 4E 05 F1 | 	add	fp, #8
2c640     A7 12 02 F6 | 	mov	arg01, fp
2c644     04 4E 85 F1 | 	sub	fp, #4
2c648     A7 14 02 F6 | 	mov	arg02, fp
2c64c     04 4E 85 F1 | 	sub	fp, #4
2c650     00 16 06 F6 | 	mov	arg03, #0
2c654     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2c658     18 4E 05 F1 | 	add	fp, #24
2c65c     A7 FA 61 FC | 	wrlong	result1, fp
2c660                 | ' 
2c660                 | ' 	res = mount_volume(&path, &fs, 0);
2c660                 | ' 	return res ;
2c660     18 4E 85 F1 | 	sub	fp, #24
2c664                 | LR__4551
2c664     A7 F0 03 F6 | 	mov	ptra, fp
2c668     B2 00 A0 FD | 	call	#popregs_
2c66c                 | _fatfs_cc_f_mount_ret
2c66c     2D 00 64 FD | 	ret
2c670                 | 
2c670                 | _fatfs_cc_f_open
2c670     02 4A 05 F6 | 	mov	COUNT_, #2
2c674     A8 00 A0 FD | 	call	#pushregs_
2c678     60 F0 07 F1 | 	add	ptra, #96
2c67c     04 4E 05 F1 | 	add	fp, #4
2c680     A7 12 62 FC | 	wrlong	arg01, fp
2c684     04 4E 05 F1 | 	add	fp, #4
2c688     A7 14 62 FC | 	wrlong	arg02, fp
2c68c     04 4E 05 F1 | 	add	fp, #4
2c690     A7 16 42 FC | 	wrbyte	arg03, fp
2c694     08 4E 85 F1 | 	sub	fp, #8
2c698     A7 18 0A FB | 	rdlong	arg04, fp wz
2c69c     04 4E 85 F1 | 	sub	fp, #4
2c6a0     09 FA 05 A6 |  if_e	mov	result1, #9
2c6a4     98 06 90 AD |  if_e	jmp	#LR__4577
2c6a8     0C 4E 05 F1 | 	add	fp, #12
2c6ac     A7 18 C2 FA | 	rdbyte	arg04, fp
2c6b0     3F 18 06 F5 | 	and	arg04, #63
2c6b4     A7 18 42 FC | 	wrbyte	arg04, fp
2c6b8     04 4E 85 F1 | 	sub	fp, #4
2c6bc     A7 12 02 F6 | 	mov	arg01, fp
2c6c0     3C 4E 05 F1 | 	add	fp, #60
2c6c4     A7 14 02 F6 | 	mov	arg02, fp
2c6c8     38 4E 85 F1 | 	sub	fp, #56
2c6cc     A7 16 C2 FA | 	rdbyte	arg03, fp
2c6d0     0C 4E 85 F1 | 	sub	fp, #12
2c6d4     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2c6d8     10 4E 05 F1 | 	add	fp, #16
2c6dc     A7 FA 61 FC | 	wrlong	result1, fp
2c6e0     10 4E 85 F1 | 	sub	fp, #16
2c6e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6e8     2C 06 90 5D |  if_ne	jmp	#LR__4576
2c6ec     44 4E 05 F1 | 	add	fp, #68
2c6f0     A7 18 02 FB | 	rdlong	arg04, fp
2c6f4     30 4E 85 F1 | 	sub	fp, #48
2c6f8     A7 18 62 FC | 	wrlong	arg04, fp
2c6fc     A7 12 02 F6 | 	mov	arg01, fp
2c700     0C 4E 85 F1 | 	sub	fp, #12
2c704     A7 1E 02 FB | 	rdlong	local01, fp
2c708     08 4E 85 F1 | 	sub	fp, #8
2c70c     0F 15 02 F6 | 	mov	arg02, local01
2c710     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2c714     10 4E 05 F1 | 	add	fp, #16
2c718     A7 FA 61 FC | 	wrlong	result1, fp
2c71c     10 4E 85 F1 | 	sub	fp, #16
2c720     00 FA 0D F2 | 	cmp	result1, #0 wz
2c724     1C 00 90 5D |  if_ne	jmp	#LR__4560
2c728     3F 4E 05 F1 | 	add	fp, #63
2c72c     A7 18 C2 FA | 	rdbyte	arg04, fp
2c730     3F 4E 85 F1 | 	sub	fp, #63
2c734     80 18 CE F7 | 	test	arg04, #128 wz
2c738     10 4E 05 51 |  if_ne	add	fp, #16
2c73c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2c740     10 4E 85 51 |  if_ne	sub	fp, #16
2c744                 | LR__4560
2c744     0C 4E 05 F1 | 	add	fp, #12
2c748     A7 18 C2 FA | 	rdbyte	arg04, fp
2c74c     0C 4E 85 F1 | 	sub	fp, #12
2c750     1C 18 CE F7 | 	test	arg04, #28 wz
2c754     F0 01 90 AD |  if_e	jmp	#LR__4565
2c758     10 4E 05 F1 | 	add	fp, #16
2c75c     A7 1E 0A FB | 	rdlong	local01, fp wz
2c760     10 4E 85 F1 | 	sub	fp, #16
2c764     48 00 90 AD |  if_e	jmp	#LR__4562
2c768     10 4E 05 F1 | 	add	fp, #16
2c76c     A7 18 02 FB | 	rdlong	arg04, fp
2c770     10 4E 85 F1 | 	sub	fp, #16
2c774     04 18 0E F2 | 	cmp	arg04, #4 wz
2c778     1C 00 90 5D |  if_ne	jmp	#LR__4561
2c77c     14 4E 05 F1 | 	add	fp, #20
2c780     A7 12 02 F6 | 	mov	arg01, fp
2c784     14 4E 85 F1 | 	sub	fp, #20
2c788     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2c78c     10 4E 05 F1 | 	add	fp, #16
2c790     A7 FA 61 FC | 	wrlong	result1, fp
2c794     10 4E 85 F1 | 	sub	fp, #16
2c798                 | LR__4561
2c798     0C 4E 05 F1 | 	add	fp, #12
2c79c     A7 1E C2 FA | 	rdbyte	local01, fp
2c7a0     08 1E 46 F5 | 	or	local01, #8
2c7a4     A7 1E 42 FC | 	wrbyte	local01, fp
2c7a8     0C 4E 85 F1 | 	sub	fp, #12
2c7ac     3C 00 90 FD | 	jmp	#LR__4564
2c7b0                 | LR__4562
2c7b0     1A 4E 05 F1 | 	add	fp, #26
2c7b4     A7 1E C2 FA | 	rdbyte	local01, fp
2c7b8     1A 4E 85 F1 | 	sub	fp, #26
2c7bc     11 1E CE F7 | 	test	local01, #17 wz
2c7c0     10 4E 05 51 |  if_ne	add	fp, #16
2c7c4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2c7c8     10 4E 85 51 |  if_ne	sub	fp, #16
2c7cc     1C 00 90 5D |  if_ne	jmp	#LR__4563
2c7d0     0C 4E 05 F1 | 	add	fp, #12
2c7d4     A7 1E C2 FA | 	rdbyte	local01, fp
2c7d8     0C 4E 85 F1 | 	sub	fp, #12
2c7dc     04 1E CE F7 | 	test	local01, #4 wz
2c7e0     10 4E 05 51 |  if_ne	add	fp, #16
2c7e4     A7 10 68 5C |  if_ne	wrlong	#8, fp
2c7e8     10 4E 85 51 |  if_ne	sub	fp, #16
2c7ec                 | LR__4563
2c7ec                 | LR__4564
2c7ec     10 4E 05 F1 | 	add	fp, #16
2c7f0     A7 1E 0A FB | 	rdlong	local01, fp wz
2c7f4     10 4E 85 F1 | 	sub	fp, #16
2c7f8     A8 01 90 5D |  if_ne	jmp	#LR__4568
2c7fc     0C 4E 05 F1 | 	add	fp, #12
2c800     A7 1E C2 FA | 	rdbyte	local01, fp
2c804     0C 4E 85 F1 | 	sub	fp, #12
2c808     08 1E CE F7 | 	test	local01, #8 wz
2c80c     94 01 90 AD |  if_e	jmp	#LR__4568
2c810     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2c814     54 4E 05 F1 | 	add	fp, #84
2c818     A7 FA 61 FC | 	wrlong	result1, fp
2c81c     24 4E 85 F1 | 	sub	fp, #36
2c820     A7 12 02 FB | 	rdlong	arg01, fp
2c824     0E 12 06 F1 | 	add	arg01, #14
2c828     09 FB 61 FC | 	wrlong	result1, arg01
2c82c     A7 12 02 FB | 	rdlong	arg01, fp
2c830     16 12 06 F1 | 	add	arg01, #22
2c834     24 4E 05 F1 | 	add	fp, #36
2c838     A7 14 02 FB | 	rdlong	arg02, fp
2c83c     09 15 62 FC | 	wrlong	arg02, arg01
2c840     10 4E 85 F1 | 	sub	fp, #16
2c844     A7 12 02 FB | 	rdlong	arg01, fp
2c848     14 4E 85 F1 | 	sub	fp, #20
2c84c     A7 14 02 FB | 	rdlong	arg02, fp
2c850     30 4E 85 F1 | 	sub	fp, #48
2c854     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2c858     48 4E 05 F1 | 	add	fp, #72
2c85c     A7 FA 61 FC | 	wrlong	result1, fp
2c860     18 4E 85 F1 | 	sub	fp, #24
2c864     A7 1E 02 FB | 	rdlong	local01, fp
2c868     0B 1E 06 F1 | 	add	local01, #11
2c86c     0F 41 48 FC | 	wrbyte	#32, local01
2c870     14 4E 05 F1 | 	add	fp, #20
2c874     A7 12 02 FB | 	rdlong	arg01, fp
2c878     14 4E 85 F1 | 	sub	fp, #20
2c87c     A7 14 02 FB | 	rdlong	arg02, fp
2c880     30 4E 85 F1 | 	sub	fp, #48
2c884     00 16 06 F6 | 	mov	arg03, #0
2c888     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2c88c     30 4E 05 F1 | 	add	fp, #48
2c890     A7 12 02 FB | 	rdlong	arg01, fp
2c894     1C 12 06 F1 | 	add	arg01, #28
2c898     09 01 68 FC | 	wrlong	#0, arg01
2c89c     14 4E 05 F1 | 	add	fp, #20
2c8a0     A7 1E 02 FB | 	rdlong	local01, fp
2c8a4     03 1E 06 F1 | 	add	local01, #3
2c8a8     0F 03 48 FC | 	wrbyte	#1, local01
2c8ac     04 4E 05 F1 | 	add	fp, #4
2c8b0     A7 1E 0A FB | 	rdlong	local01, fp wz
2c8b4     48 4E 85 F1 | 	sub	fp, #72
2c8b8     E8 00 90 AD |  if_e	jmp	#LR__4568
2c8bc     44 4E 05 F1 | 	add	fp, #68
2c8c0     A7 1E 02 FB | 	rdlong	local01, fp
2c8c4     30 1E 06 F1 | 	add	local01, #48
2c8c8     0F 1F 02 FB | 	rdlong	local01, local01
2c8cc     14 4E 05 F1 | 	add	fp, #20
2c8d0     A7 1E 62 FC | 	wrlong	local01, fp
2c8d4     44 4E 85 F1 | 	sub	fp, #68
2c8d8     A7 12 02 F6 | 	mov	arg01, fp
2c8dc     34 4E 05 F1 | 	add	fp, #52
2c8e0     A7 14 02 FB | 	rdlong	arg02, fp
2c8e4     48 4E 85 F1 | 	sub	fp, #72
2c8e8     00 16 06 F6 | 	mov	arg03, #0
2c8ec     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2c8f0     10 4E 05 F1 | 	add	fp, #16
2c8f4     A7 FA 61 FC | 	wrlong	result1, fp
2c8f8     10 4E 85 F1 | 	sub	fp, #16
2c8fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c900     A0 00 90 5D |  if_ne	jmp	#LR__4568
2c904     44 4E 05 F1 | 	add	fp, #68
2c908     A7 12 02 FB | 	rdlong	arg01, fp
2c90c     14 4E 05 F1 | 	add	fp, #20
2c910     A7 14 02 FB | 	rdlong	arg02, fp
2c914     58 4E 85 F1 | 	sub	fp, #88
2c918     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2c91c     10 4E 05 F1 | 	add	fp, #16
2c920     A7 FA 61 FC | 	wrlong	result1, fp
2c924     34 4E 05 F1 | 	add	fp, #52
2c928     A7 18 02 FB | 	rdlong	arg04, fp
2c92c     04 4E 05 F1 | 	add	fp, #4
2c930     A7 1E 02 FB | 	rdlong	local01, fp
2c934     48 4E 85 F1 | 	sub	fp, #72
2c938     01 1E 86 F1 | 	sub	local01, #1
2c93c     10 18 06 F1 | 	add	arg04, #16
2c940     0C 1F 62 FC | 	wrlong	local01, arg04
2c944     5C 00 90 FD | 	jmp	#LR__4568
2c948                 | LR__4565
2c948     10 4E 05 F1 | 	add	fp, #16
2c94c     A7 18 0A FB | 	rdlong	arg04, fp wz
2c950     10 4E 85 F1 | 	sub	fp, #16
2c954     4C 00 90 5D |  if_ne	jmp	#LR__4567
2c958     1A 4E 05 F1 | 	add	fp, #26
2c95c     A7 18 C2 FA | 	rdbyte	arg04, fp
2c960     1A 4E 85 F1 | 	sub	fp, #26
2c964     10 18 CE F7 | 	test	arg04, #16 wz
2c968     10 4E 05 51 |  if_ne	add	fp, #16
2c96c     A7 08 68 5C |  if_ne	wrlong	#4, fp
2c970     10 4E 85 51 |  if_ne	sub	fp, #16
2c974     2C 00 90 5D |  if_ne	jmp	#LR__4566
2c978     0C 4E 05 F1 | 	add	fp, #12
2c97c     A7 18 C2 FA | 	rdbyte	arg04, fp
2c980     0C 4E 85 F1 | 	sub	fp, #12
2c984     02 18 CE F7 | 	test	arg04, #2 wz
2c988     1A 4E 05 51 |  if_ne	add	fp, #26
2c98c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2c990     1A 4E 85 51 |  if_ne	sub	fp, #26
2c994     01 1E CE 57 |  if_ne	test	local01, #1 wz
2c998     10 4E 05 51 |  if_ne	add	fp, #16
2c99c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2c9a0     10 4E 85 51 |  if_ne	sub	fp, #16
2c9a4                 | LR__4566
2c9a4                 | LR__4567
2c9a4                 | LR__4568
2c9a4     10 4E 05 F1 | 	add	fp, #16
2c9a8     A7 1E 0A FB | 	rdlong	local01, fp wz
2c9ac     10 4E 85 F1 | 	sub	fp, #16
2c9b0     60 00 90 5D |  if_ne	jmp	#LR__4569
2c9b4     0C 4E 05 F1 | 	add	fp, #12
2c9b8     A7 20 C2 FA | 	rdbyte	local02, fp
2c9bc     0C 4E 85 F1 | 	sub	fp, #12
2c9c0     08 20 CE F7 | 	test	local02, #8 wz
2c9c4     0C 4E 05 51 |  if_ne	add	fp, #12
2c9c8     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2c9cc     40 20 46 55 |  if_ne	or	local02, #64
2c9d0     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2c9d4     0C 4E 85 51 |  if_ne	sub	fp, #12
2c9d8     04 4E 05 F1 | 	add	fp, #4
2c9dc     A7 20 02 FB | 	rdlong	local02, fp
2c9e0     40 4E 05 F1 | 	add	fp, #64
2c9e4     A7 1E 02 FB | 	rdlong	local01, fp
2c9e8     30 1E 06 F1 | 	add	local01, #48
2c9ec     0F 1F 02 FB | 	rdlong	local01, local01
2c9f0     20 20 06 F1 | 	add	local02, #32
2c9f4     10 1F 62 FC | 	wrlong	local01, local02
2c9f8     40 4E 85 F1 | 	sub	fp, #64
2c9fc     A7 20 02 FB | 	rdlong	local02, fp
2ca00     2C 4E 05 F1 | 	add	fp, #44
2ca04     A7 1E 02 FB | 	rdlong	local01, fp
2ca08     30 4E 85 F1 | 	sub	fp, #48
2ca0c     24 20 06 F1 | 	add	local02, #36
2ca10     10 1F 62 FC | 	wrlong	local01, local02
2ca14                 | LR__4569
2ca14     10 4E 05 F1 | 	add	fp, #16
2ca18     A7 20 0A FB | 	rdlong	local02, fp wz
2ca1c     10 4E 85 F1 | 	sub	fp, #16
2ca20     F4 02 90 5D |  if_ne	jmp	#LR__4575
2ca24     04 4E 05 F1 | 	add	fp, #4
2ca28     A7 20 02 FB | 	rdlong	local02, fp
2ca2c     40 4E 05 F1 | 	add	fp, #64
2ca30     A7 12 02 FB | 	rdlong	arg01, fp
2ca34     14 4E 85 F1 | 	sub	fp, #20
2ca38     A7 14 02 FB | 	rdlong	arg02, fp
2ca3c     30 4E 85 F1 | 	sub	fp, #48
2ca40     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2ca44     08 20 06 F1 | 	add	local02, #8
2ca48     10 FB 61 FC | 	wrlong	result1, local02
2ca4c     04 4E 05 F1 | 	add	fp, #4
2ca50     A7 20 02 FB | 	rdlong	local02, fp
2ca54     2C 4E 05 F1 | 	add	fp, #44
2ca58     A7 12 02 FB | 	rdlong	arg01, fp
2ca5c     1C 12 06 F1 | 	add	arg01, #28
2ca60                 | ' {
2ca60                 | ' 
2ca60                 | ' 	return *((DWORD*)ptr);
2ca60     09 FB 01 FB | 	rdlong	result1, arg01
2ca64     0C 20 06 F1 | 	add	local02, #12
2ca68     10 FB 61 FC | 	wrlong	result1, local02
2ca6c     2C 4E 85 F1 | 	sub	fp, #44
2ca70     A7 20 02 FB | 	rdlong	local02, fp
2ca74     40 4E 05 F1 | 	add	fp, #64
2ca78     A7 1E 02 FB | 	rdlong	local01, fp
2ca7c     10 1F 62 FC | 	wrlong	local01, local02
2ca80     40 4E 85 F1 | 	sub	fp, #64
2ca84     A7 20 02 FB | 	rdlong	local02, fp
2ca88     40 4E 05 F1 | 	add	fp, #64
2ca8c     A7 1E 02 FB | 	rdlong	local01, fp
2ca90     06 1E 06 F1 | 	add	local01, #6
2ca94     0F 1F E2 FA | 	rdword	local01, local01
2ca98     04 20 06 F1 | 	add	local02, #4
2ca9c     10 1F 52 FC | 	wrword	local01, local02
2caa0     40 4E 85 F1 | 	sub	fp, #64
2caa4     A7 20 02 FB | 	rdlong	local02, fp
2caa8     08 4E 05 F1 | 	add	fp, #8
2caac     A7 1E C2 FA | 	rdbyte	local01, fp
2cab0     10 20 06 F1 | 	add	local02, #16
2cab4     10 1F 42 FC | 	wrbyte	local01, local02
2cab8     08 4E 85 F1 | 	sub	fp, #8
2cabc     A7 20 02 FB | 	rdlong	local02, fp
2cac0     11 20 06 F1 | 	add	local02, #17
2cac4     10 01 48 FC | 	wrbyte	#0, local02
2cac8     A7 20 02 FB | 	rdlong	local02, fp
2cacc     1C 20 06 F1 | 	add	local02, #28
2cad0     10 01 68 FC | 	wrlong	#0, local02
2cad4     A7 20 02 FB | 	rdlong	local02, fp
2cad8     14 20 06 F1 | 	add	local02, #20
2cadc     10 01 68 FC | 	wrlong	#0, local02
2cae0     A7 12 02 FB | 	rdlong	arg01, fp
2cae4     04 4E 85 F1 | 	sub	fp, #4
2cae8     28 12 06 F1 | 	add	arg01, #40
2caec     00 14 06 F6 | 	mov	arg02, #0
2caf0     09 16 C6 F9 | 	decod	arg03, #9
2caf4     98 00 A0 FD | 	call	#\builtin_bytefill_
2caf8     0C 4E 05 F1 | 	add	fp, #12
2cafc     A7 20 C2 FA | 	rdbyte	local02, fp
2cb00     0C 4E 85 F1 | 	sub	fp, #12
2cb04     20 20 CE F7 | 	test	local02, #32 wz
2cb08     0C 02 90 AD |  if_e	jmp	#LR__4574
2cb0c     04 4E 05 F1 | 	add	fp, #4
2cb10     A7 1E 02 FB | 	rdlong	local01, fp
2cb14     04 4E 85 F1 | 	sub	fp, #4
2cb18     0C 1E 06 F1 | 	add	local01, #12
2cb1c     0F 21 02 FB | 	rdlong	local02, local01
2cb20     01 20 16 F2 | 	cmp	local02, #1 wc
2cb24     F0 01 90 CD |  if_b	jmp	#LR__4574
2cb28     04 4E 05 F1 | 	add	fp, #4
2cb2c     A7 1E 02 FB | 	rdlong	local01, fp
2cb30     0F 21 02 F6 | 	mov	local02, local01
2cb34     0C 1E 06 F1 | 	add	local01, #12
2cb38     0F 1F 02 FB | 	rdlong	local01, local01
2cb3c     14 20 06 F1 | 	add	local02, #20
2cb40     10 1F 62 FC | 	wrlong	local01, local02
2cb44     40 4E 05 F1 | 	add	fp, #64
2cb48     A7 20 02 FB | 	rdlong	local02, fp
2cb4c     0A 20 06 F1 | 	add	local02, #10
2cb50     10 21 E2 FA | 	rdword	local02, local02
2cb54     09 20 66 F0 | 	shl	local02, #9
2cb58     08 4E 05 F1 | 	add	fp, #8
2cb5c     A7 20 62 FC | 	wrlong	local02, fp
2cb60     48 4E 85 F1 | 	sub	fp, #72
2cb64     A7 20 02 FB | 	rdlong	local02, fp
2cb68     08 20 06 F1 | 	add	local02, #8
2cb6c     10 1F 02 FB | 	rdlong	local01, local02
2cb70     4C 4E 05 F1 | 	add	fp, #76
2cb74     A7 1E 62 FC | 	wrlong	local01, fp
2cb78                 | ' 				fp->fptr = fp->obj.objsize;
2cb78                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2cb78                 | ' 				clst = fp->obj.sclust;
2cb78                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2cb78     4C 4E 85 F1 | 	sub	fp, #76
2cb7c     A7 20 02 FB | 	rdlong	local02, fp
2cb80     0C 20 06 F1 | 	add	local02, #12
2cb84     10 1F 02 FB | 	rdlong	local01, local02
2cb88     58 4E 05 F1 | 	add	fp, #88
2cb8c     A7 1E 62 FC | 	wrlong	local01, fp
2cb90     5C 4E 85 F1 | 	sub	fp, #92
2cb94                 | LR__4570
2cb94     10 4E 05 F1 | 	add	fp, #16
2cb98     A7 20 0A FB | 	rdlong	local02, fp wz
2cb9c     10 4E 85 F1 | 	sub	fp, #16
2cba0     94 00 90 5D |  if_ne	jmp	#LR__4571
2cba4     5C 4E 05 F1 | 	add	fp, #92
2cba8     A7 20 02 FB | 	rdlong	local02, fp
2cbac     10 4E 85 F1 | 	sub	fp, #16
2cbb0     A7 1E 02 FB | 	rdlong	local01, fp
2cbb4     4C 4E 85 F1 | 	sub	fp, #76
2cbb8     0F 21 1A F2 | 	cmp	local02, local01 wcz
2cbbc     78 00 90 ED |  if_be	jmp	#LR__4571
2cbc0     04 4E 05 F1 | 	add	fp, #4
2cbc4     A7 12 02 FB | 	rdlong	arg01, fp
2cbc8     4C 4E 05 F1 | 	add	fp, #76
2cbcc     A7 14 02 FB | 	rdlong	arg02, fp
2cbd0     50 4E 85 F1 | 	sub	fp, #80
2cbd4     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2cbd8     50 4E 05 F1 | 	add	fp, #80
2cbdc     A7 FA 61 FC | 	wrlong	result1, fp
2cbe0     50 4E 85 F1 | 	sub	fp, #80
2cbe4     02 FA 15 F2 | 	cmp	result1, #2 wc
2cbe8     10 4E 05 C1 |  if_b	add	fp, #16
2cbec     A7 04 68 CC |  if_b	wrlong	#2, fp
2cbf0     10 4E 85 C1 |  if_b	sub	fp, #16
2cbf4     50 4E 05 F1 | 	add	fp, #80
2cbf8     A7 20 02 FB | 	rdlong	local02, fp
2cbfc     50 4E 85 F1 | 	sub	fp, #80
2cc00     FF FF 7F FF 
2cc04     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2cc08     10 4E 05 A1 |  if_e	add	fp, #16
2cc0c     A7 02 68 AC |  if_e	wrlong	#1, fp
2cc10     10 4E 85 A1 |  if_e	sub	fp, #16
2cc14     5C 4E 05 F1 | 	add	fp, #92
2cc18     A7 20 02 FB | 	rdlong	local02, fp
2cc1c     10 4E 85 F1 | 	sub	fp, #16
2cc20     A7 1E 02 FB | 	rdlong	local01, fp
2cc24     0F 21 82 F1 | 	sub	local02, local01
2cc28     10 4E 05 F1 | 	add	fp, #16
2cc2c     A7 20 62 FC | 	wrlong	local02, fp
2cc30     5C 4E 85 F1 | 	sub	fp, #92
2cc34     5C FF 9F FD | 	jmp	#LR__4570
2cc38                 | LR__4571
2cc38     04 4E 05 F1 | 	add	fp, #4
2cc3c     A7 20 02 FB | 	rdlong	local02, fp
2cc40     4C 4E 05 F1 | 	add	fp, #76
2cc44     A7 1E 02 FB | 	rdlong	local01, fp
2cc48     18 20 06 F1 | 	add	local02, #24
2cc4c     10 1F 62 FC | 	wrlong	local01, local02
2cc50     40 4E 85 F1 | 	sub	fp, #64
2cc54     A7 20 0A FB | 	rdlong	local02, fp wz
2cc58     10 4E 85 F1 | 	sub	fp, #16
2cc5c     B8 00 90 5D |  if_ne	jmp	#LR__4573
2cc60     5C 4E 05 F1 | 	add	fp, #92
2cc64     A7 1E 02 FB | 	rdlong	local01, fp
2cc68     5C 4E 85 F1 | 	sub	fp, #92
2cc6c     FF 1F CE F7 | 	test	local01, #511 wz
2cc70     A4 00 90 AD |  if_e	jmp	#LR__4573
2cc74     44 4E 05 F1 | 	add	fp, #68
2cc78     A7 12 02 FB | 	rdlong	arg01, fp
2cc7c     0C 4E 05 F1 | 	add	fp, #12
2cc80     A7 14 02 FB | 	rdlong	arg02, fp
2cc84     50 4E 85 F1 | 	sub	fp, #80
2cc88     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2cc8c     58 4E 05 F1 | 	add	fp, #88
2cc90     A7 FA 61 FC | 	wrlong	result1, fp
2cc94     00 FA 4D F2 | 	cmps	result1, #0 wz
2cc98     58 4E 85 F1 | 	sub	fp, #88
2cc9c     10 4E 05 A1 |  if_e	add	fp, #16
2cca0     A7 04 68 AC |  if_e	wrlong	#2, fp
2cca4     10 4E 85 A1 |  if_e	sub	fp, #16
2cca8     6C 00 90 AD |  if_e	jmp	#LR__4572
2ccac     04 4E 05 F1 | 	add	fp, #4
2ccb0     A7 20 02 FB | 	rdlong	local02, fp
2ccb4     54 4E 05 F1 | 	add	fp, #84
2ccb8     A7 1E 02 FB | 	rdlong	local01, fp
2ccbc     04 4E 05 F1 | 	add	fp, #4
2ccc0     A7 18 02 FB | 	rdlong	arg04, fp
2ccc4     09 18 46 F0 | 	shr	arg04, #9
2ccc8     0C 1F 02 F1 | 	add	local01, arg04
2cccc     1C 20 06 F1 | 	add	local02, #28
2ccd0     10 1F 62 FC | 	wrlong	local01, local02
2ccd4     18 4E 85 F1 | 	sub	fp, #24
2ccd8     A7 20 02 FB | 	rdlong	local02, fp
2ccdc     01 20 06 F1 | 	add	local02, #1
2cce0     10 13 C2 FA | 	rdbyte	arg01, local02
2cce4     40 4E 85 F1 | 	sub	fp, #64
2cce8     A7 20 02 FB | 	rdlong	local02, fp
2ccec     10 15 02 F6 | 	mov	arg02, local02
2ccf0     28 14 06 F1 | 	add	arg02, #40
2ccf4     04 4E 85 F1 | 	sub	fp, #4
2ccf8     1C 20 06 F1 | 	add	local02, #28
2ccfc     10 17 02 FB | 	rdlong	arg03, local02
2cd00     01 18 06 F6 | 	mov	arg04, #1
2cd04     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2cd08     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd0c     10 4E 05 51 |  if_ne	add	fp, #16
2cd10     A7 02 68 5C |  if_ne	wrlong	#1, fp
2cd14     10 4E 85 51 |  if_ne	sub	fp, #16
2cd18                 | LR__4572
2cd18                 | LR__4573
2cd18                 | LR__4574
2cd18                 | LR__4575
2cd18                 | LR__4576
2cd18     10 4E 05 F1 | 	add	fp, #16
2cd1c     A7 20 0A FB | 	rdlong	local02, fp wz
2cd20     10 4E 85 F1 | 	sub	fp, #16
2cd24     04 4E 05 51 |  if_ne	add	fp, #4
2cd28     A7 20 02 5B |  if_ne	rdlong	local02, fp
2cd2c     04 4E 85 51 |  if_ne	sub	fp, #4
2cd30     10 01 68 5C |  if_ne	wrlong	#0, local02
2cd34                 | ' 
2cd34                 | ' 	return res ;
2cd34     10 4E 05 F1 | 	add	fp, #16
2cd38     A7 FA 01 FB | 	rdlong	result1, fp
2cd3c     10 4E 85 F1 | 	sub	fp, #16
2cd40                 | LR__4577
2cd40     A7 F0 03 F6 | 	mov	ptra, fp
2cd44     B2 00 A0 FD | 	call	#popregs_
2cd48                 | _fatfs_cc_f_open_ret
2cd48     2D 00 64 FD | 	ret
2cd4c                 | 
2cd4c                 | _fatfs_cc_f_read
2cd4c     0E 4A 05 F6 | 	mov	COUNT_, #14
2cd50     A8 00 A0 FD | 	call	#pushregs_
2cd54     38 F0 07 F1 | 	add	ptra, #56
2cd58     04 4E 05 F1 | 	add	fp, #4
2cd5c     A7 12 62 FC | 	wrlong	arg01, fp
2cd60     04 4E 05 F1 | 	add	fp, #4
2cd64     A7 14 62 FC | 	wrlong	arg02, fp
2cd68     04 4E 05 F1 | 	add	fp, #4
2cd6c     A7 16 62 FC | 	wrlong	arg03, fp
2cd70     04 4E 05 F1 | 	add	fp, #4
2cd74     A7 18 62 FC | 	wrlong	arg04, fp
2cd78     08 4E 85 F1 | 	sub	fp, #8
2cd7c     A7 FA 01 FB | 	rdlong	result1, fp
2cd80     2C 4E 05 F1 | 	add	fp, #44
2cd84     A7 FA 61 FC | 	wrlong	result1, fp
2cd88     24 4E 85 F1 | 	sub	fp, #36
2cd8c     A7 FA 01 FB | 	rdlong	result1, fp
2cd90     FD 00 68 FC | 	wrlong	#0, result1
2cd94     0C 4E 85 F1 | 	sub	fp, #12
2cd98     A7 12 02 FB | 	rdlong	arg01, fp
2cd9c     14 4E 05 F1 | 	add	fp, #20
2cda0     A7 14 02 F6 | 	mov	arg02, fp
2cda4     18 4E 85 F1 | 	sub	fp, #24
2cda8     24 F7 BF FD | 	call	#_fatfs_cc_validate
2cdac     14 4E 05 F1 | 	add	fp, #20
2cdb0     A7 FA 61 FC | 	wrlong	result1, fp
2cdb4     00 FA 4D F2 | 	cmps	result1, #0 wz
2cdb8     14 4E 85 F1 | 	sub	fp, #20
2cdbc     20 00 90 5D |  if_ne	jmp	#LR__4580
2cdc0     04 4E 05 F1 | 	add	fp, #4
2cdc4     A7 14 02 FB | 	rdlong	arg02, fp
2cdc8     11 14 06 F1 | 	add	arg02, #17
2cdcc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2cdd0     10 4E 05 F1 | 	add	fp, #16
2cdd4     A7 14 62 FC | 	wrlong	arg02, fp
2cdd8     14 4E 85 F1 | 	sub	fp, #20
2cddc     10 00 90 AD |  if_e	jmp	#LR__4581
2cde0                 | LR__4580
2cde0     14 4E 05 F1 | 	add	fp, #20
2cde4     A7 FA 01 FB | 	rdlong	result1, fp
2cde8     14 4E 85 F1 | 	sub	fp, #20
2cdec     EC 05 90 FD | 	jmp	#LR__4600
2cdf0                 | LR__4581
2cdf0     04 4E 05 F1 | 	add	fp, #4
2cdf4     A7 18 02 FB | 	rdlong	arg04, fp
2cdf8     04 4E 85 F1 | 	sub	fp, #4
2cdfc     10 18 06 F1 | 	add	arg04, #16
2ce00     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce04     01 18 CE F7 | 	test	arg04, #1 wz
2ce08     07 FA 05 A6 |  if_e	mov	result1, #7
2ce0c     CC 05 90 AD |  if_e	jmp	#LR__4600
2ce10     04 4E 05 F1 | 	add	fp, #4
2ce14     A7 1E 02 FB | 	rdlong	local01, fp
2ce18     0F 21 02 F6 | 	mov	local02, local01
2ce1c     0C 20 06 F1 | 	add	local02, #12
2ce20     10 23 02 FB | 	rdlong	local03, local02
2ce24     14 1E 06 F1 | 	add	local01, #20
2ce28     0F 1F 02 FB | 	rdlong	local01, local01
2ce2c     0F 23 82 F1 | 	sub	local03, local01
2ce30     20 4E 05 F1 | 	add	fp, #32
2ce34     A7 22 62 FC | 	wrlong	local03, fp
2ce38     18 4E 85 F1 | 	sub	fp, #24
2ce3c     A7 24 02 FB | 	rdlong	local04, fp
2ce40     0C 4E 85 F1 | 	sub	fp, #12
2ce44     11 25 1A F2 | 	cmp	local04, local03 wcz
2ce48     24 4E 05 11 |  if_a	add	fp, #36
2ce4c     A7 24 02 1B |  if_a	rdlong	local04, fp
2ce50     18 4E 85 11 |  if_a	sub	fp, #24
2ce54     A7 24 62 1C |  if_a	wrlong	local04, fp
2ce58     0C 4E 85 11 |  if_a	sub	fp, #12
2ce5c                 | ' 
2ce5c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2ce5c                 | LR__4582
2ce5c     0C 4E 05 F1 | 	add	fp, #12
2ce60     A7 20 02 FB | 	rdlong	local02, fp
2ce64     0C 4E 85 F1 | 	sub	fp, #12
2ce68     10 25 02 F6 | 	mov	local04, local02
2ce6c     01 24 16 F2 | 	cmp	local04, #1 wc
2ce70     64 05 90 CD |  if_b	jmp	#LR__4599
2ce74     04 4E 05 F1 | 	add	fp, #4
2ce78     A7 22 02 FB | 	rdlong	local03, fp
2ce7c     04 4E 85 F1 | 	sub	fp, #4
2ce80     14 22 06 F1 | 	add	local03, #20
2ce84     11 23 02 FB | 	rdlong	local03, local03
2ce88     FF 23 CE F7 | 	test	local03, #511 wz
2ce8c     3C 04 90 5D |  if_ne	jmp	#LR__4597
2ce90     04 4E 05 F1 | 	add	fp, #4
2ce94     A7 1E 02 FB | 	rdlong	local01, fp
2ce98     14 1E 06 F1 | 	add	local01, #20
2ce9c     0F 23 02 FB | 	rdlong	local03, local01
2cea0     09 22 46 F0 | 	shr	local03, #9
2cea4     14 4E 05 F1 | 	add	fp, #20
2cea8     A7 26 02 FB | 	rdlong	local05, fp
2ceac     13 29 02 F6 | 	mov	local06, local05
2ceb0     0A 28 06 F1 | 	add	local06, #10
2ceb4     14 2B E2 FA | 	rdword	local07, local06
2ceb8     0A 28 86 F1 | 	sub	local06, #10
2cebc     15 2D 32 F9 | 	getword	local08, local07, #0
2cec0     01 2C 86 F1 | 	sub	local08, #1
2cec4     16 23 0A F5 | 	and	local03, local08 wz
2cec8     18 4E 05 F1 | 	add	fp, #24
2cecc     A7 22 62 FC | 	wrlong	local03, fp
2ced0     30 4E 85 F1 | 	sub	fp, #48
2ced4     E0 00 90 5D |  if_ne	jmp	#LR__4587
2ced8     04 4E 05 F1 | 	add	fp, #4
2cedc     A7 22 02 FB | 	rdlong	local03, fp
2cee0     04 4E 85 F1 | 	sub	fp, #4
2cee4     14 22 06 F1 | 	add	local03, #20
2cee8     11 23 0A FB | 	rdlong	local03, local03 wz
2ceec     20 00 90 5D |  if_ne	jmp	#LR__4583
2cef0     04 4E 05 F1 | 	add	fp, #4
2cef4     A7 22 02 FB | 	rdlong	local03, fp
2cef8     08 22 06 F1 | 	add	local03, #8
2cefc     11 23 02 FB | 	rdlong	local03, local03
2cf00     18 4E 05 F1 | 	add	fp, #24
2cf04     A7 22 62 FC | 	wrlong	local03, fp
2cf08     1C 4E 85 F1 | 	sub	fp, #28
2cf0c     28 00 90 FD | 	jmp	#LR__4584
2cf10                 | LR__4583
2cf10     04 4E 05 F1 | 	add	fp, #4
2cf14     A7 2C 02 FB | 	rdlong	local08, fp
2cf18     16 13 02 F6 | 	mov	arg01, local08
2cf1c     04 4E 85 F1 | 	sub	fp, #4
2cf20     18 2C 06 F1 | 	add	local08, #24
2cf24     16 15 02 FB | 	rdlong	arg02, local08
2cf28     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2cf2c     1C 4E 05 F1 | 	add	fp, #28
2cf30     A7 FA 61 FC | 	wrlong	result1, fp
2cf34     1C 4E 85 F1 | 	sub	fp, #28
2cf38                 | LR__4584
2cf38     1C 4E 05 F1 | 	add	fp, #28
2cf3c     A7 22 02 FB | 	rdlong	local03, fp
2cf40     1C 4E 85 F1 | 	sub	fp, #28
2cf44     02 22 16 F2 | 	cmp	local03, #2 wc
2cf48     1C 00 90 3D |  if_ae	jmp	#LR__4585
2cf4c     04 4E 05 F1 | 	add	fp, #4
2cf50     A7 22 02 FB | 	rdlong	local03, fp
2cf54     04 4E 85 F1 | 	sub	fp, #4
2cf58     11 22 06 F1 | 	add	local03, #17
2cf5c     11 05 48 FC | 	wrbyte	#2, local03
2cf60     02 FA 05 F6 | 	mov	result1, #2
2cf64     74 04 90 FD | 	jmp	#LR__4600
2cf68                 | LR__4585
2cf68     1C 4E 05 F1 | 	add	fp, #28
2cf6c     A7 22 02 FB | 	rdlong	local03, fp
2cf70     1C 4E 85 F1 | 	sub	fp, #28
2cf74     FF FF 7F FF 
2cf78     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2cf7c     1C 00 90 5D |  if_ne	jmp	#LR__4586
2cf80     04 4E 05 F1 | 	add	fp, #4
2cf84     A7 22 02 FB | 	rdlong	local03, fp
2cf88     04 4E 85 F1 | 	sub	fp, #4
2cf8c     11 22 06 F1 | 	add	local03, #17
2cf90     11 03 48 FC | 	wrbyte	#1, local03
2cf94     01 FA 05 F6 | 	mov	result1, #1
2cf98     40 04 90 FD | 	jmp	#LR__4600
2cf9c                 | LR__4586
2cf9c     04 4E 05 F1 | 	add	fp, #4
2cfa0     A7 22 02 FB | 	rdlong	local03, fp
2cfa4     18 4E 05 F1 | 	add	fp, #24
2cfa8     A7 2C 02 FB | 	rdlong	local08, fp
2cfac     1C 4E 85 F1 | 	sub	fp, #28
2cfb0     18 22 06 F1 | 	add	local03, #24
2cfb4     11 2D 62 FC | 	wrlong	local08, local03
2cfb8                 | LR__4587
2cfb8     18 4E 05 F1 | 	add	fp, #24
2cfbc     A7 12 02 FB | 	rdlong	arg01, fp
2cfc0     14 4E 85 F1 | 	sub	fp, #20
2cfc4     A7 22 02 FB | 	rdlong	local03, fp
2cfc8     04 4E 85 F1 | 	sub	fp, #4
2cfcc     18 22 06 F1 | 	add	local03, #24
2cfd0     11 15 02 FB | 	rdlong	arg02, local03
2cfd4     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2cfd8     20 4E 05 F1 | 	add	fp, #32
2cfdc     A7 FA 61 FC | 	wrlong	result1, fp
2cfe0     20 4E 85 F1 | 	sub	fp, #32
2cfe4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfe8     1C 00 90 5D |  if_ne	jmp	#LR__4588
2cfec     04 4E 05 F1 | 	add	fp, #4
2cff0     A7 22 02 FB | 	rdlong	local03, fp
2cff4     04 4E 85 F1 | 	sub	fp, #4
2cff8     11 22 06 F1 | 	add	local03, #17
2cffc     11 05 48 FC | 	wrbyte	#2, local03
2d000     02 FA 05 F6 | 	mov	result1, #2
2d004     D4 03 90 FD | 	jmp	#LR__4600
2d008                 | LR__4588
2d008     20 4E 05 F1 | 	add	fp, #32
2d00c     A7 22 02 FB | 	rdlong	local03, fp
2d010     10 4E 05 F1 | 	add	fp, #16
2d014     A7 2C 02 FB | 	rdlong	local08, fp
2d018     16 23 02 F1 | 	add	local03, local08
2d01c     10 4E 85 F1 | 	sub	fp, #16
2d020     A7 22 62 FC | 	wrlong	local03, fp
2d024     14 4E 85 F1 | 	sub	fp, #20
2d028     A7 22 02 FB | 	rdlong	local03, fp
2d02c     09 22 46 F0 | 	shr	local03, #9
2d030     20 4E 05 F1 | 	add	fp, #32
2d034     A7 22 62 FC | 	wrlong	local03, fp
2d038     2C 4E 85 F1 | 	sub	fp, #44
2d03c     01 22 16 F2 | 	cmp	local03, #1 wc
2d040     5C 01 90 CD |  if_b	jmp	#LR__4592
2d044     30 4E 05 F1 | 	add	fp, #48
2d048     A7 22 02 FB | 	rdlong	local03, fp
2d04c     04 4E 85 F1 | 	sub	fp, #4
2d050     A7 2C 02 FB | 	rdlong	local08, fp
2d054     16 23 02 F1 | 	add	local03, local08
2d058     14 4E 85 F1 | 	sub	fp, #20
2d05c     A7 2C 02 FB | 	rdlong	local08, fp
2d060     18 4E 85 F1 | 	sub	fp, #24
2d064     0A 2C 06 F1 | 	add	local08, #10
2d068     16 2D E2 FA | 	rdword	local08, local08
2d06c     16 23 1A F2 | 	cmp	local03, local08 wcz
2d070     28 00 90 ED |  if_be	jmp	#LR__4589
2d074     18 4E 05 F1 | 	add	fp, #24
2d078     A7 1E 02 FB | 	rdlong	local01, fp
2d07c     0A 1E 06 F1 | 	add	local01, #10
2d080     0F 23 E2 FA | 	rdword	local03, local01
2d084     18 4E 05 F1 | 	add	fp, #24
2d088     A7 2C 02 FB | 	rdlong	local08, fp
2d08c     16 23 82 F1 | 	sub	local03, local08
2d090     04 4E 85 F1 | 	sub	fp, #4
2d094     A7 22 62 FC | 	wrlong	local03, fp
2d098     2C 4E 85 F1 | 	sub	fp, #44
2d09c                 | LR__4589
2d09c     18 4E 05 F1 | 	add	fp, #24
2d0a0     A7 1E 02 FB | 	rdlong	local01, fp
2d0a4     01 1E 06 F1 | 	add	local01, #1
2d0a8     0F 13 C2 FA | 	rdbyte	arg01, local01
2d0ac     1C 4E 05 F1 | 	add	fp, #28
2d0b0     A7 14 02 FB | 	rdlong	arg02, fp
2d0b4     14 4E 85 F1 | 	sub	fp, #20
2d0b8     A7 16 02 FB | 	rdlong	arg03, fp
2d0bc     0C 4E 05 F1 | 	add	fp, #12
2d0c0     A7 18 02 FB | 	rdlong	arg04, fp
2d0c4     2C 4E 85 F1 | 	sub	fp, #44
2d0c8     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2d0cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d0d0     1C 00 90 AD |  if_e	jmp	#LR__4590
2d0d4     04 4E 05 F1 | 	add	fp, #4
2d0d8     A7 22 02 FB | 	rdlong	local03, fp
2d0dc     04 4E 85 F1 | 	sub	fp, #4
2d0e0     11 22 06 F1 | 	add	local03, #17
2d0e4     11 03 48 FC | 	wrbyte	#1, local03
2d0e8     01 FA 05 F6 | 	mov	result1, #1
2d0ec     EC 02 90 FD | 	jmp	#LR__4600
2d0f0                 | LR__4590
2d0f0     04 4E 05 F1 | 	add	fp, #4
2d0f4     A7 1E 02 FB | 	rdlong	local01, fp
2d0f8     04 4E 85 F1 | 	sub	fp, #4
2d0fc     10 1E 06 F1 | 	add	local01, #16
2d100     0F 23 C2 FA | 	rdbyte	local03, local01
2d104     80 22 CE F7 | 	test	local03, #128 wz
2d108     78 00 90 AD |  if_e	jmp	#LR__4591
2d10c     04 4E 05 F1 | 	add	fp, #4
2d110     A7 2C 02 FB | 	rdlong	local08, fp
2d114     1C 2C 06 F1 | 	add	local08, #28
2d118     16 2D 02 FB | 	rdlong	local08, local08
2d11c     1C 4E 05 F1 | 	add	fp, #28
2d120     A7 2E 02 FB | 	rdlong	local09, fp
2d124     17 2D 82 F1 | 	sub	local08, local09
2d128     0C 4E 05 F1 | 	add	fp, #12
2d12c     A7 30 02 FB | 	rdlong	local10, fp
2d130     2C 4E 85 F1 | 	sub	fp, #44
2d134     18 33 02 F6 | 	mov	local11, local10
2d138     19 2D 12 F2 | 	cmp	local08, local11 wc
2d13c     44 00 90 3D |  if_ae	jmp	#LR__4591
2d140     34 4E 05 F1 | 	add	fp, #52
2d144     A7 12 02 FB | 	rdlong	arg01, fp
2d148     30 4E 85 F1 | 	sub	fp, #48
2d14c     A7 14 02 FB | 	rdlong	arg02, fp
2d150     0A 33 02 F6 | 	mov	local11, arg02
2d154     1C 32 06 F1 | 	add	local11, #28
2d158     19 2F 02 FB | 	rdlong	local09, local11
2d15c     1C 4E 05 F1 | 	add	fp, #28
2d160     A7 26 02 FB | 	rdlong	local05, fp
2d164     13 2F 82 F1 | 	sub	local09, local05
2d168     09 2E 66 F0 | 	shl	local09, #9
2d16c     17 33 02 F6 | 	mov	local11, local09
2d170     17 13 02 F1 | 	add	arg01, local09
2d174     20 4E 85 F1 | 	sub	fp, #32
2d178     28 14 06 F1 | 	add	arg02, #40
2d17c     09 16 C6 F9 | 	decod	arg03, #9
2d180     60 43 BF FD | 	call	#__system____builtin_memmove
2d184                 | LR__4591
2d184     2C 4E 05 F1 | 	add	fp, #44
2d188     A7 22 02 FB | 	rdlong	local03, fp
2d18c     09 22 66 F0 | 	shl	local03, #9
2d190     04 4E 85 F1 | 	sub	fp, #4
2d194     A7 22 62 FC | 	wrlong	local03, fp
2d198     28 4E 85 F1 | 	sub	fp, #40
2d19c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2d19c                 | ' 				}
2d19c                 | ' 
2d19c                 | ' 
2d19c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2d19c                 | ' 				continue;
2d19c     B4 01 90 FD | 	jmp	#LR__4598
2d1a0                 | LR__4592
2d1a0     04 4E 05 F1 | 	add	fp, #4
2d1a4     A7 22 02 FB | 	rdlong	local03, fp
2d1a8     1C 22 06 F1 | 	add	local03, #28
2d1ac     11 23 02 FB | 	rdlong	local03, local03
2d1b0     1C 4E 05 F1 | 	add	fp, #28
2d1b4     A7 1E 02 FB | 	rdlong	local01, fp
2d1b8     20 4E 85 F1 | 	sub	fp, #32
2d1bc     0F 23 0A F2 | 	cmp	local03, local01 wz
2d1c0     EC 00 90 AD |  if_e	jmp	#LR__4596
2d1c4     04 4E 05 F1 | 	add	fp, #4
2d1c8     A7 1E 02 FB | 	rdlong	local01, fp
2d1cc     04 4E 85 F1 | 	sub	fp, #4
2d1d0     10 1E 06 F1 | 	add	local01, #16
2d1d4     0F 23 C2 FA | 	rdbyte	local03, local01
2d1d8     80 22 CE F7 | 	test	local03, #128 wz
2d1dc     7C 00 90 AD |  if_e	jmp	#LR__4594
2d1e0     18 4E 05 F1 | 	add	fp, #24
2d1e4     A7 1E 02 FB | 	rdlong	local01, fp
2d1e8     01 1E 06 F1 | 	add	local01, #1
2d1ec     0F 13 C2 FA | 	rdbyte	arg01, local01
2d1f0     14 4E 85 F1 | 	sub	fp, #20
2d1f4     A7 22 02 FB | 	rdlong	local03, fp
2d1f8     11 15 02 F6 | 	mov	arg02, local03
2d1fc     28 14 06 F1 | 	add	arg02, #40
2d200     04 4E 85 F1 | 	sub	fp, #4
2d204     1C 22 06 F1 | 	add	local03, #28
2d208     11 17 02 FB | 	rdlong	arg03, local03
2d20c     01 18 06 F6 | 	mov	arg04, #1
2d210     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2d214     00 FA 0D F2 | 	cmp	result1, #0 wz
2d218     1C 00 90 AD |  if_e	jmp	#LR__4593
2d21c     04 4E 05 F1 | 	add	fp, #4
2d220     A7 22 02 FB | 	rdlong	local03, fp
2d224     04 4E 85 F1 | 	sub	fp, #4
2d228     11 22 06 F1 | 	add	local03, #17
2d22c     11 03 48 FC | 	wrbyte	#1, local03
2d230     01 FA 05 F6 | 	mov	result1, #1
2d234     A4 01 90 FD | 	jmp	#LR__4600
2d238                 | LR__4593
2d238     04 4E 05 F1 | 	add	fp, #4
2d23c     A7 32 02 FB | 	rdlong	local11, fp
2d240     19 23 02 F6 | 	mov	local03, local11
2d244     04 4E 85 F1 | 	sub	fp, #4
2d248     10 32 06 F1 | 	add	local11, #16
2d24c     19 33 C2 FA | 	rdbyte	local11, local11
2d250     7F 32 06 F5 | 	and	local11, #127
2d254     10 22 06 F1 | 	add	local03, #16
2d258     11 33 42 FC | 	wrbyte	local11, local03
2d25c                 | LR__4594
2d25c     18 4E 05 F1 | 	add	fp, #24
2d260     A7 1E 02 FB | 	rdlong	local01, fp
2d264     01 1E 06 F1 | 	add	local01, #1
2d268     0F 13 C2 FA | 	rdbyte	arg01, local01
2d26c     14 4E 85 F1 | 	sub	fp, #20
2d270     A7 14 02 FB | 	rdlong	arg02, fp
2d274     28 14 06 F1 | 	add	arg02, #40
2d278     1C 4E 05 F1 | 	add	fp, #28
2d27c     A7 16 02 FB | 	rdlong	arg03, fp
2d280     20 4E 85 F1 | 	sub	fp, #32
2d284     01 18 06 F6 | 	mov	arg04, #1
2d288     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2d28c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d290     1C 00 90 AD |  if_e	jmp	#LR__4595
2d294     04 4E 05 F1 | 	add	fp, #4
2d298     A7 22 02 FB | 	rdlong	local03, fp
2d29c     04 4E 85 F1 | 	sub	fp, #4
2d2a0     11 22 06 F1 | 	add	local03, #17
2d2a4     11 03 48 FC | 	wrbyte	#1, local03
2d2a8     01 FA 05 F6 | 	mov	result1, #1
2d2ac     2C 01 90 FD | 	jmp	#LR__4600
2d2b0                 | LR__4595
2d2b0                 | LR__4596
2d2b0     04 4E 05 F1 | 	add	fp, #4
2d2b4     A7 22 02 FB | 	rdlong	local03, fp
2d2b8     1C 4E 05 F1 | 	add	fp, #28
2d2bc     A7 32 02 FB | 	rdlong	local11, fp
2d2c0     20 4E 85 F1 | 	sub	fp, #32
2d2c4     1C 22 06 F1 | 	add	local03, #28
2d2c8     11 33 62 FC | 	wrlong	local11, local03
2d2cc                 | LR__4597
2d2cc     04 4E 05 F1 | 	add	fp, #4
2d2d0     A7 1E 02 FB | 	rdlong	local01, fp
2d2d4     14 1E 06 F1 | 	add	local01, #20
2d2d8     0F 33 02 FB | 	rdlong	local11, local01
2d2dc     FF 33 06 F5 | 	and	local11, #511
2d2e0     09 22 C6 F9 | 	decod	local03, #9
2d2e4     19 23 82 F1 | 	sub	local03, local11
2d2e8     24 4E 05 F1 | 	add	fp, #36
2d2ec     A7 22 62 FC | 	wrlong	local03, fp
2d2f0     1C 4E 85 F1 | 	sub	fp, #28
2d2f4     A7 32 02 FB | 	rdlong	local11, fp
2d2f8     0C 4E 85 F1 | 	sub	fp, #12
2d2fc     19 23 1A F2 | 	cmp	local03, local11 wcz
2d300     0C 4E 05 11 |  if_a	add	fp, #12
2d304     A7 22 02 1B |  if_a	rdlong	local03, fp
2d308     1C 4E 05 11 |  if_a	add	fp, #28
2d30c     A7 22 62 1C |  if_a	wrlong	local03, fp
2d310     28 4E 85 11 |  if_a	sub	fp, #40
2d314     34 4E 05 F1 | 	add	fp, #52
2d318     A7 12 02 FB | 	rdlong	arg01, fp
2d31c     30 4E 85 F1 | 	sub	fp, #48
2d320     A7 28 02 FB | 	rdlong	local06, fp
2d324     14 15 02 F6 | 	mov	arg02, local06
2d328     28 14 06 F1 | 	add	arg02, #40
2d32c     14 28 06 F1 | 	add	local06, #20
2d330     14 33 02 FB | 	rdlong	local11, local06
2d334     19 2F 02 F6 | 	mov	local09, local11
2d338     17 31 02 F6 | 	mov	local10, local09
2d33c     FF 31 06 F5 | 	and	local10, #511
2d340     18 15 02 F1 | 	add	arg02, local10
2d344     24 4E 05 F1 | 	add	fp, #36
2d348     A7 16 02 FB | 	rdlong	arg03, fp
2d34c     28 4E 85 F1 | 	sub	fp, #40
2d350     90 41 BF FD | 	call	#__system____builtin_memmove
2d354                 | LR__4598
2d354     0C 4E 05 F1 | 	add	fp, #12
2d358     A7 22 02 FB | 	rdlong	local03, fp
2d35c     1C 4E 05 F1 | 	add	fp, #28
2d360     A7 2C 02 FB | 	rdlong	local08, fp
2d364     16 23 82 F1 | 	sub	local03, local08
2d368     1C 4E 85 F1 | 	sub	fp, #28
2d36c     A7 22 62 FC | 	wrlong	local03, fp
2d370     04 4E 05 F1 | 	add	fp, #4
2d374     A7 1E 02 FB | 	rdlong	local01, fp
2d378     0F 2B 02 FB | 	rdlong	local07, local01
2d37c     18 4E 05 F1 | 	add	fp, #24
2d380     A7 2C 02 FB | 	rdlong	local08, fp
2d384     16 2B 02 F1 | 	add	local07, local08
2d388     0F 2B 62 FC | 	wrlong	local07, local01
2d38c     0C 4E 05 F1 | 	add	fp, #12
2d390     A7 22 02 FB | 	rdlong	local03, fp
2d394     0C 4E 85 F1 | 	sub	fp, #12
2d398     A7 34 02 FB | 	rdlong	local12, fp
2d39c     1A 23 02 F1 | 	add	local03, local12
2d3a0     0C 4E 05 F1 | 	add	fp, #12
2d3a4     A7 22 62 FC | 	wrlong	local03, fp
2d3a8     30 4E 85 F1 | 	sub	fp, #48
2d3ac     A7 36 02 FB | 	rdlong	local13, fp
2d3b0     1B 23 02 F6 | 	mov	local03, local13
2d3b4     14 36 06 F1 | 	add	local13, #20
2d3b8     1B 39 02 FB | 	rdlong	local14, local13
2d3bc     24 4E 05 F1 | 	add	fp, #36
2d3c0     A7 28 02 FB | 	rdlong	local06, fp
2d3c4     28 4E 85 F1 | 	sub	fp, #40
2d3c8     14 39 02 F1 | 	add	local14, local06
2d3cc     14 22 06 F1 | 	add	local03, #20
2d3d0     11 39 62 FC | 	wrlong	local14, local03
2d3d4     84 FA 9F FD | 	jmp	#LR__4582
2d3d8                 | LR__4599
2d3d8                 | ' 
2d3d8                 | ' 
2d3d8                 | ' 
2d3d8                 | ' 
2d3d8                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2d3d8                 | ' 
2d3d8                 | ' 	}
2d3d8                 | ' 
2d3d8                 | ' 	return FR_OK ;
2d3d8     00 FA 05 F6 | 	mov	result1, #0
2d3dc                 | LR__4600
2d3dc     A7 F0 03 F6 | 	mov	ptra, fp
2d3e0     B2 00 A0 FD | 	call	#popregs_
2d3e4                 | _fatfs_cc_f_read_ret
2d3e4     2D 00 64 FD | 	ret
2d3e8                 | 
2d3e8                 | _fatfs_cc_f_write
2d3e8     15 4A 05 F6 | 	mov	COUNT_, #21
2d3ec     A8 00 A0 FD | 	call	#pushregs_
2d3f0     34 F0 07 F1 | 	add	ptra, #52
2d3f4     04 4E 05 F1 | 	add	fp, #4
2d3f8     A7 12 62 FC | 	wrlong	arg01, fp
2d3fc     04 4E 05 F1 | 	add	fp, #4
2d400     A7 14 62 FC | 	wrlong	arg02, fp
2d404     04 4E 05 F1 | 	add	fp, #4
2d408     A7 16 62 FC | 	wrlong	arg03, fp
2d40c     04 4E 05 F1 | 	add	fp, #4
2d410     A7 18 62 FC | 	wrlong	arg04, fp
2d414     08 4E 85 F1 | 	sub	fp, #8
2d418     A7 FA 01 FB | 	rdlong	result1, fp
2d41c     28 4E 05 F1 | 	add	fp, #40
2d420     A7 FA 61 FC | 	wrlong	result1, fp
2d424     20 4E 85 F1 | 	sub	fp, #32
2d428     A7 FA 01 FB | 	rdlong	result1, fp
2d42c     FD 00 68 FC | 	wrlong	#0, result1
2d430     0C 4E 85 F1 | 	sub	fp, #12
2d434     A7 12 02 FB | 	rdlong	arg01, fp
2d438     14 4E 05 F1 | 	add	fp, #20
2d43c     A7 14 02 F6 | 	mov	arg02, fp
2d440     18 4E 85 F1 | 	sub	fp, #24
2d444     88 F0 BF FD | 	call	#_fatfs_cc_validate
2d448     14 4E 05 F1 | 	add	fp, #20
2d44c     A7 FA 61 FC | 	wrlong	result1, fp
2d450     00 FA 4D F2 | 	cmps	result1, #0 wz
2d454     14 4E 85 F1 | 	sub	fp, #20
2d458     20 00 90 5D |  if_ne	jmp	#LR__4610
2d45c     04 4E 05 F1 | 	add	fp, #4
2d460     A7 14 02 FB | 	rdlong	arg02, fp
2d464     11 14 06 F1 | 	add	arg02, #17
2d468     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2d46c     10 4E 05 F1 | 	add	fp, #16
2d470     A7 14 62 FC | 	wrlong	arg02, fp
2d474     14 4E 85 F1 | 	sub	fp, #20
2d478     10 00 90 AD |  if_e	jmp	#LR__4611
2d47c                 | LR__4610
2d47c     14 4E 05 F1 | 	add	fp, #20
2d480     A7 FA 01 FB | 	rdlong	result1, fp
2d484     14 4E 85 F1 | 	sub	fp, #20
2d488     44 07 90 FD | 	jmp	#LR__4633
2d48c                 | LR__4611
2d48c     04 4E 05 F1 | 	add	fp, #4
2d490     A7 14 02 FB | 	rdlong	arg02, fp
2d494     04 4E 85 F1 | 	sub	fp, #4
2d498     10 14 06 F1 | 	add	arg02, #16
2d49c     0A 15 C2 FA | 	rdbyte	arg02, arg02
2d4a0     02 14 CE F7 | 	test	arg02, #2 wz
2d4a4     07 FA 05 A6 |  if_e	mov	result1, #7
2d4a8     24 07 90 AD |  if_e	jmp	#LR__4633
2d4ac     04 4E 05 F1 | 	add	fp, #4
2d4b0     A7 14 02 FB | 	rdlong	arg02, fp
2d4b4     0A 13 02 F6 | 	mov	arg01, arg02
2d4b8     14 12 06 F1 | 	add	arg01, #20
2d4bc     09 13 02 FB | 	rdlong	arg01, arg01
2d4c0     08 4E 05 F1 | 	add	fp, #8
2d4c4     A7 FA 01 FB | 	rdlong	result1, fp
2d4c8     FD 12 02 F1 | 	add	arg01, result1
2d4cc     0C 4E 85 F1 | 	sub	fp, #12
2d4d0     14 14 06 F1 | 	add	arg02, #20
2d4d4     0A FB 01 FB | 	rdlong	result1, arg02
2d4d8     FD 12 12 F2 | 	cmp	arg01, result1 wc
2d4dc     24 00 90 3D |  if_ae	jmp	#LR__4612
2d4e0     04 4E 05 F1 | 	add	fp, #4
2d4e4     A7 14 02 FB | 	rdlong	arg02, fp
2d4e8     01 FA 65 F6 | 	neg	result1, #1
2d4ec     14 14 06 F1 | 	add	arg02, #20
2d4f0     0A 15 02 FB | 	rdlong	arg02, arg02
2d4f4     0A FB 81 F1 | 	sub	result1, arg02
2d4f8     08 4E 05 F1 | 	add	fp, #8
2d4fc     A7 FA 61 FC | 	wrlong	result1, fp
2d500     0C 4E 85 F1 | 	sub	fp, #12
2d504                 | LR__4612
2d504                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2d504                 | ' 	}
2d504                 | ' 
2d504                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2d504                 | LR__4613
2d504     0C 4E 05 F1 | 	add	fp, #12
2d508     A7 FA 01 FB | 	rdlong	result1, fp
2d50c     0C 4E 85 F1 | 	sub	fp, #12
2d510     01 FA 15 F2 | 	cmp	result1, #1 wc
2d514     90 06 90 CD |  if_b	jmp	#LR__4632
2d518     04 4E 05 F1 | 	add	fp, #4
2d51c     A7 FA 01 FB | 	rdlong	result1, fp
2d520     04 4E 85 F1 | 	sub	fp, #4
2d524     14 FA 05 F1 | 	add	result1, #20
2d528     FD FA 01 FB | 	rdlong	result1, result1
2d52c     FF FB CD F7 | 	test	result1, #511 wz
2d530     D8 04 90 5D |  if_ne	jmp	#LR__4628
2d534     04 4E 05 F1 | 	add	fp, #4
2d538     A7 FA 01 FB | 	rdlong	result1, fp
2d53c     14 FA 05 F1 | 	add	result1, #20
2d540     FD FA 01 FB | 	rdlong	result1, result1
2d544     09 FA 45 F0 | 	shr	result1, #9
2d548     14 4E 05 F1 | 	add	fp, #20
2d54c     A7 14 02 FB | 	rdlong	arg02, fp
2d550     0A 14 06 F1 | 	add	arg02, #10
2d554     0A 19 E2 FA | 	rdword	arg04, arg02
2d558     0C 15 32 F9 | 	getword	arg02, arg04, #0
2d55c     01 14 86 F1 | 	sub	arg02, #1
2d560     0A FB 09 F5 | 	and	result1, arg02 wz
2d564     14 4E 05 F1 | 	add	fp, #20
2d568     A7 FA 61 FC | 	wrlong	result1, fp
2d56c     2C 4E 85 F1 | 	sub	fp, #44
2d570     44 01 90 5D |  if_ne	jmp	#LR__4619
2d574     04 4E 05 F1 | 	add	fp, #4
2d578     A7 FA 01 FB | 	rdlong	result1, fp
2d57c     04 4E 85 F1 | 	sub	fp, #4
2d580     14 FA 05 F1 | 	add	result1, #20
2d584     FD 14 0A FB | 	rdlong	arg02, result1 wz
2d588     44 00 90 5D |  if_ne	jmp	#LR__4614
2d58c     04 4E 05 F1 | 	add	fp, #4
2d590     A7 14 02 FB | 	rdlong	arg02, fp
2d594     08 14 06 F1 | 	add	arg02, #8
2d598     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2d59c     18 4E 05 F1 | 	add	fp, #24
2d5a0     A7 14 62 FC | 	wrlong	arg02, fp
2d5a4     1C 4E 85 F1 | 	sub	fp, #28
2d5a8     4C 00 90 5D |  if_ne	jmp	#LR__4615
2d5ac     04 4E 05 F1 | 	add	fp, #4
2d5b0     A7 12 02 FB | 	rdlong	arg01, fp
2d5b4     04 4E 85 F1 | 	sub	fp, #4
2d5b8     00 14 06 F6 | 	mov	arg02, #0
2d5bc     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2d5c0     1C 4E 05 F1 | 	add	fp, #28
2d5c4     A7 FA 61 FC | 	wrlong	result1, fp
2d5c8     1C 4E 85 F1 | 	sub	fp, #28
2d5cc     28 00 90 FD | 	jmp	#LR__4615
2d5d0                 | LR__4614
2d5d0     04 4E 05 F1 | 	add	fp, #4
2d5d4     A7 18 02 FB | 	rdlong	arg04, fp
2d5d8     0C 13 02 F6 | 	mov	arg01, arg04
2d5dc     04 4E 85 F1 | 	sub	fp, #4
2d5e0     18 18 06 F1 | 	add	arg04, #24
2d5e4     0C 15 02 FB | 	rdlong	arg02, arg04
2d5e8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2d5ec     1C 4E 05 F1 | 	add	fp, #28
2d5f0     A7 FA 61 FC | 	wrlong	result1, fp
2d5f4     1C 4E 85 F1 | 	sub	fp, #28
2d5f8                 | LR__4615
2d5f8     1C 4E 05 F1 | 	add	fp, #28
2d5fc     A7 FA 09 FB | 	rdlong	result1, fp wz
2d600     1C 4E 85 F1 | 	sub	fp, #28
2d604     A0 05 90 AD |  if_e	jmp	#LR__4632
2d608     1C 4E 05 F1 | 	add	fp, #28
2d60c     A7 FA 01 FB | 	rdlong	result1, fp
2d610     1C 4E 85 F1 | 	sub	fp, #28
2d614     01 FA 0D F2 | 	cmp	result1, #1 wz
2d618     1C 00 90 5D |  if_ne	jmp	#LR__4616
2d61c     04 4E 05 F1 | 	add	fp, #4
2d620     A7 FA 01 FB | 	rdlong	result1, fp
2d624     04 4E 85 F1 | 	sub	fp, #4
2d628     11 FA 05 F1 | 	add	result1, #17
2d62c     FD 04 48 FC | 	wrbyte	#2, result1
2d630     02 FA 05 F6 | 	mov	result1, #2
2d634     98 05 90 FD | 	jmp	#LR__4633
2d638                 | LR__4616
2d638     1C 4E 05 F1 | 	add	fp, #28
2d63c     A7 FA 01 FB | 	rdlong	result1, fp
2d640     1C 4E 85 F1 | 	sub	fp, #28
2d644     FF FF 7F FF 
2d648     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d64c     1C 00 90 5D |  if_ne	jmp	#LR__4617
2d650     04 4E 05 F1 | 	add	fp, #4
2d654     A7 FA 01 FB | 	rdlong	result1, fp
2d658     04 4E 85 F1 | 	sub	fp, #4
2d65c     11 FA 05 F1 | 	add	result1, #17
2d660     FD 02 48 FC | 	wrbyte	#1, result1
2d664     01 FA 05 F6 | 	mov	result1, #1
2d668     64 05 90 FD | 	jmp	#LR__4633
2d66c                 | LR__4617
2d66c     04 4E 05 F1 | 	add	fp, #4
2d670     A7 FA 01 FB | 	rdlong	result1, fp
2d674     18 4E 05 F1 | 	add	fp, #24
2d678     A7 18 02 FB | 	rdlong	arg04, fp
2d67c     18 FA 05 F1 | 	add	result1, #24
2d680     FD 18 62 FC | 	wrlong	arg04, result1
2d684     18 4E 85 F1 | 	sub	fp, #24
2d688     A7 FA 01 FB | 	rdlong	result1, fp
2d68c     04 4E 85 F1 | 	sub	fp, #4
2d690     08 FA 05 F1 | 	add	result1, #8
2d694     FD FA 09 FB | 	rdlong	result1, result1 wz
2d698     1C 00 90 5D |  if_ne	jmp	#LR__4618
2d69c     04 4E 05 F1 | 	add	fp, #4
2d6a0     A7 18 02 FB | 	rdlong	arg04, fp
2d6a4     18 4E 05 F1 | 	add	fp, #24
2d6a8     A7 FA 01 FB | 	rdlong	result1, fp
2d6ac     1C 4E 85 F1 | 	sub	fp, #28
2d6b0     08 18 06 F1 | 	add	arg04, #8
2d6b4     0C FB 61 FC | 	wrlong	result1, arg04
2d6b8                 | LR__4618
2d6b8                 | LR__4619
2d6b8     04 4E 05 F1 | 	add	fp, #4
2d6bc     A7 18 02 FB | 	rdlong	arg04, fp
2d6c0     04 4E 85 F1 | 	sub	fp, #4
2d6c4     10 18 06 F1 | 	add	arg04, #16
2d6c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d6cc     80 18 CE F7 | 	test	arg04, #128 wz
2d6d0     7C 00 90 AD |  if_e	jmp	#LR__4621
2d6d4     18 4E 05 F1 | 	add	fp, #24
2d6d8     A7 18 02 FB | 	rdlong	arg04, fp
2d6dc     01 18 06 F1 | 	add	arg04, #1
2d6e0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d6e4     14 4E 85 F1 | 	sub	fp, #20
2d6e8     A7 18 02 FB | 	rdlong	arg04, fp
2d6ec     0C 15 02 F6 | 	mov	arg02, arg04
2d6f0     28 14 06 F1 | 	add	arg02, #40
2d6f4     04 4E 85 F1 | 	sub	fp, #4
2d6f8     1C 18 06 F1 | 	add	arg04, #28
2d6fc     0C 17 02 FB | 	rdlong	arg03, arg04
2d700     01 18 06 F6 | 	mov	arg04, #1
2d704     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2d708     00 FA 0D F2 | 	cmp	result1, #0 wz
2d70c     1C 00 90 AD |  if_e	jmp	#LR__4620
2d710     04 4E 05 F1 | 	add	fp, #4
2d714     A7 FA 01 FB | 	rdlong	result1, fp
2d718     04 4E 85 F1 | 	sub	fp, #4
2d71c     11 FA 05 F1 | 	add	result1, #17
2d720     FD 02 48 FC | 	wrbyte	#1, result1
2d724     01 FA 05 F6 | 	mov	result1, #1
2d728     A4 04 90 FD | 	jmp	#LR__4633
2d72c                 | LR__4620
2d72c     04 4E 05 F1 | 	add	fp, #4
2d730     A7 18 02 FB | 	rdlong	arg04, fp
2d734     0C FB 01 F6 | 	mov	result1, arg04
2d738     04 4E 85 F1 | 	sub	fp, #4
2d73c     10 18 06 F1 | 	add	arg04, #16
2d740     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d744     7F 18 06 F5 | 	and	arg04, #127
2d748     10 FA 05 F1 | 	add	result1, #16
2d74c     FD 18 42 FC | 	wrbyte	arg04, result1
2d750                 | LR__4621
2d750     18 4E 05 F1 | 	add	fp, #24
2d754     A7 12 02 FB | 	rdlong	arg01, fp
2d758     14 4E 85 F1 | 	sub	fp, #20
2d75c     A7 14 02 FB | 	rdlong	arg02, fp
2d760     04 4E 85 F1 | 	sub	fp, #4
2d764     18 14 06 F1 | 	add	arg02, #24
2d768     0A 15 02 FB | 	rdlong	arg02, arg02
2d76c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2d770     20 4E 05 F1 | 	add	fp, #32
2d774     A7 FA 61 FC | 	wrlong	result1, fp
2d778     20 4E 85 F1 | 	sub	fp, #32
2d77c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d780     1C 00 90 5D |  if_ne	jmp	#LR__4622
2d784     04 4E 05 F1 | 	add	fp, #4
2d788     A7 FA 01 FB | 	rdlong	result1, fp
2d78c     04 4E 85 F1 | 	sub	fp, #4
2d790     11 FA 05 F1 | 	add	result1, #17
2d794     FD 04 48 FC | 	wrbyte	#2, result1
2d798     02 FA 05 F6 | 	mov	result1, #2
2d79c     30 04 90 FD | 	jmp	#LR__4633
2d7a0                 | LR__4622
2d7a0     20 4E 05 F1 | 	add	fp, #32
2d7a4     A7 FA 01 FB | 	rdlong	result1, fp
2d7a8     0C 4E 05 F1 | 	add	fp, #12
2d7ac     A7 1E 02 FB | 	rdlong	local01, fp
2d7b0     0F FB 01 F1 | 	add	result1, local01
2d7b4     0C 4E 85 F1 | 	sub	fp, #12
2d7b8     A7 FA 61 FC | 	wrlong	result1, fp
2d7bc     14 4E 85 F1 | 	sub	fp, #20
2d7c0     A7 FA 01 FB | 	rdlong	result1, fp
2d7c4     09 FA 45 F0 | 	shr	result1, #9
2d7c8     1C 4E 05 F1 | 	add	fp, #28
2d7cc     A7 FA 61 FC | 	wrlong	result1, fp
2d7d0     28 4E 85 F1 | 	sub	fp, #40
2d7d4     01 FA 15 F2 | 	cmp	result1, #1 wc
2d7d8     60 01 90 CD |  if_b	jmp	#LR__4626
2d7dc     2C 4E 05 F1 | 	add	fp, #44
2d7e0     A7 FA 01 FB | 	rdlong	result1, fp
2d7e4     04 4E 85 F1 | 	sub	fp, #4
2d7e8     A7 18 02 FB | 	rdlong	arg04, fp
2d7ec     0C FB 01 F1 | 	add	result1, arg04
2d7f0     10 4E 85 F1 | 	sub	fp, #16
2d7f4     A7 18 02 FB | 	rdlong	arg04, fp
2d7f8     18 4E 85 F1 | 	sub	fp, #24
2d7fc     0A 18 06 F1 | 	add	arg04, #10
2d800     0C 19 E2 FA | 	rdword	arg04, arg04
2d804     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2d808     28 00 90 ED |  if_be	jmp	#LR__4623
2d80c     18 4E 05 F1 | 	add	fp, #24
2d810     A7 FA 01 FB | 	rdlong	result1, fp
2d814     0A FA 05 F1 | 	add	result1, #10
2d818     FD FA E1 FA | 	rdword	result1, result1
2d81c     14 4E 05 F1 | 	add	fp, #20
2d820     A7 18 02 FB | 	rdlong	arg04, fp
2d824     0C FB 81 F1 | 	sub	result1, arg04
2d828     04 4E 85 F1 | 	sub	fp, #4
2d82c     A7 FA 61 FC | 	wrlong	result1, fp
2d830     28 4E 85 F1 | 	sub	fp, #40
2d834                 | LR__4623
2d834     18 4E 05 F1 | 	add	fp, #24
2d838     A7 18 02 FB | 	rdlong	arg04, fp
2d83c     01 18 06 F1 | 	add	arg04, #1
2d840     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d844     18 4E 05 F1 | 	add	fp, #24
2d848     A7 14 02 FB | 	rdlong	arg02, fp
2d84c     10 4E 85 F1 | 	sub	fp, #16
2d850     A7 16 02 FB | 	rdlong	arg03, fp
2d854     08 4E 05 F1 | 	add	fp, #8
2d858     A7 18 02 FB | 	rdlong	arg04, fp
2d85c     28 4E 85 F1 | 	sub	fp, #40
2d860     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2d864     00 FA 0D F2 | 	cmp	result1, #0 wz
2d868     1C 00 90 AD |  if_e	jmp	#LR__4624
2d86c     04 4E 05 F1 | 	add	fp, #4
2d870     A7 1E 02 FB | 	rdlong	local01, fp
2d874     04 4E 85 F1 | 	sub	fp, #4
2d878     11 1E 06 F1 | 	add	local01, #17
2d87c     0F 03 48 FC | 	wrbyte	#1, local01
2d880     01 FA 05 F6 | 	mov	result1, #1
2d884     48 03 90 FD | 	jmp	#LR__4633
2d888                 | LR__4624
2d888     04 4E 05 F1 | 	add	fp, #4
2d88c     A7 FA 01 FB | 	rdlong	result1, fp
2d890     1C FA 05 F1 | 	add	result1, #28
2d894     FD FA 01 FB | 	rdlong	result1, result1
2d898     1C 4E 05 F1 | 	add	fp, #28
2d89c     A7 20 02 FB | 	rdlong	local02, fp
2d8a0     10 FB 81 F1 | 	sub	result1, local02
2d8a4     08 4E 05 F1 | 	add	fp, #8
2d8a8     A7 18 02 FB | 	rdlong	arg04, fp
2d8ac     28 4E 85 F1 | 	sub	fp, #40
2d8b0     0C FB 11 F2 | 	cmp	result1, arg04 wc
2d8b4     68 00 90 3D |  if_ae	jmp	#LR__4625
2d8b8     04 4E 05 F1 | 	add	fp, #4
2d8bc     A7 12 02 FB | 	rdlong	arg01, fp
2d8c0     28 12 06 F1 | 	add	arg01, #40
2d8c4     2C 4E 05 F1 | 	add	fp, #44
2d8c8     A7 14 02 FB | 	rdlong	arg02, fp
2d8cc     2C 4E 85 F1 | 	sub	fp, #44
2d8d0     A7 FA 01 FB | 	rdlong	result1, fp
2d8d4     1C FA 05 F1 | 	add	result1, #28
2d8d8     FD 22 02 FB | 	rdlong	local03, result1
2d8dc     1C 4E 05 F1 | 	add	fp, #28
2d8e0     A7 18 02 FB | 	rdlong	arg04, fp
2d8e4     20 4E 85 F1 | 	sub	fp, #32
2d8e8     0C 23 82 F1 | 	sub	local03, arg04
2d8ec     09 22 66 F0 | 	shl	local03, #9
2d8f0     11 15 02 F1 | 	add	arg02, local03
2d8f4     09 16 C6 F9 | 	decod	arg03, #9
2d8f8     E8 3B BF FD | 	call	#__system____builtin_memmove
2d8fc     04 4E 05 F1 | 	add	fp, #4
2d900     A7 18 02 FB | 	rdlong	arg04, fp
2d904     0C FB 01 F6 | 	mov	result1, arg04
2d908     04 4E 85 F1 | 	sub	fp, #4
2d90c     10 18 06 F1 | 	add	arg04, #16
2d910     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d914     7F 18 06 F5 | 	and	arg04, #127
2d918     10 FA 05 F1 | 	add	result1, #16
2d91c     FD 18 42 FC | 	wrbyte	arg04, result1
2d920                 | LR__4625
2d920     28 4E 05 F1 | 	add	fp, #40
2d924     A7 FA 01 FB | 	rdlong	result1, fp
2d928     09 FA 65 F0 | 	shl	result1, #9
2d92c     04 4E 85 F1 | 	sub	fp, #4
2d930     A7 FA 61 FC | 	wrlong	result1, fp
2d934     24 4E 85 F1 | 	sub	fp, #36
2d938                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2d938                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2d938                 | ' 				}
2d938                 | ' 
2d938                 | ' 
2d938                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2d938                 | ' 				continue;
2d938     74 01 90 FD | 	jmp	#LR__4629
2d93c                 | LR__4626
2d93c     04 4E 05 F1 | 	add	fp, #4
2d940     A7 20 02 FB | 	rdlong	local02, fp
2d944     1C 20 06 F1 | 	add	local02, #28
2d948     10 FB 01 FB | 	rdlong	result1, local02
2d94c     1C 4E 05 F1 | 	add	fp, #28
2d950     A7 20 02 FB | 	rdlong	local02, fp
2d954     20 4E 85 F1 | 	sub	fp, #32
2d958     10 FB 09 F2 | 	cmp	result1, local02 wz
2d95c     90 00 90 AD |  if_e	jmp	#LR__4627
2d960     04 4E 05 F1 | 	add	fp, #4
2d964     A7 FA 01 FB | 	rdlong	result1, fp
2d968     FD 22 02 F6 | 	mov	local03, result1
2d96c     04 4E 85 F1 | 	sub	fp, #4
2d970     14 22 06 F1 | 	add	local03, #20
2d974     11 23 02 FB | 	rdlong	local03, local03
2d978     0C FA 05 F1 | 	add	result1, #12
2d97c     FD 24 02 FB | 	rdlong	local04, result1
2d980     12 27 02 F6 | 	mov	local05, local04
2d984     13 23 12 F2 | 	cmp	local03, local05 wc
2d988     64 00 90 3D |  if_ae	jmp	#LR__4627
2d98c     18 4E 05 F1 | 	add	fp, #24
2d990     A7 18 02 FB | 	rdlong	arg04, fp
2d994     01 18 06 F1 | 	add	arg04, #1
2d998     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d99c     14 4E 85 F1 | 	sub	fp, #20
2d9a0     A7 28 02 FB | 	rdlong	local06, fp
2d9a4     28 28 06 F1 | 	add	local06, #40
2d9a8     14 2B 02 F6 | 	mov	local07, local06
2d9ac     1C 4E 05 F1 | 	add	fp, #28
2d9b0     A7 2C 02 FB | 	rdlong	local08, fp
2d9b4     20 4E 85 F1 | 	sub	fp, #32
2d9b8     01 2E 06 F6 | 	mov	local09, #1
2d9bc     15 15 02 F6 | 	mov	arg02, local07
2d9c0     16 17 02 F6 | 	mov	arg03, local08
2d9c4     01 18 06 F6 | 	mov	arg04, #1
2d9c8     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2d9cc     FD 30 0A F6 | 	mov	local10, result1 wz
2d9d0     1C 00 90 AD |  if_e	jmp	#LR__4627
2d9d4     04 4E 05 F1 | 	add	fp, #4
2d9d8     A7 30 02 FB | 	rdlong	local10, fp
2d9dc     04 4E 85 F1 | 	sub	fp, #4
2d9e0     11 30 06 F1 | 	add	local10, #17
2d9e4     18 03 48 FC | 	wrbyte	#1, local10
2d9e8                 | ' 				fp->fptr < fp->obj.objsize &&
2d9e8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2d9e8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2d9e8     01 FA 05 F6 | 	mov	result1, #1
2d9ec     E0 01 90 FD | 	jmp	#LR__4633
2d9f0                 | LR__4627
2d9f0     04 4E 05 F1 | 	add	fp, #4
2d9f4     A7 18 02 FB | 	rdlong	arg04, fp
2d9f8     1C 4E 05 F1 | 	add	fp, #28
2d9fc     A7 FA 01 FB | 	rdlong	result1, fp
2da00     20 4E 85 F1 | 	sub	fp, #32
2da04     1C 18 06 F1 | 	add	arg04, #28
2da08     0C FB 61 FC | 	wrlong	result1, arg04
2da0c                 | LR__4628
2da0c     04 4E 05 F1 | 	add	fp, #4
2da10     A7 FA 01 FB | 	rdlong	result1, fp
2da14     14 FA 05 F1 | 	add	result1, #20
2da18     FD FA 01 FB | 	rdlong	result1, result1
2da1c     FF FB 05 F5 | 	and	result1, #511
2da20     09 32 C6 F9 | 	decod	local11, #9
2da24     FD 32 82 F1 | 	sub	local11, result1
2da28     20 4E 05 F1 | 	add	fp, #32
2da2c     A7 32 62 FC | 	wrlong	local11, fp
2da30     18 4E 85 F1 | 	sub	fp, #24
2da34     A7 FA 01 FB | 	rdlong	result1, fp
2da38     0C 4E 85 F1 | 	sub	fp, #12
2da3c     FD 32 1A F2 | 	cmp	local11, result1 wcz
2da40     0C 4E 05 11 |  if_a	add	fp, #12
2da44     A7 32 02 1B |  if_a	rdlong	local11, fp
2da48     18 4E 05 11 |  if_a	add	fp, #24
2da4c     A7 32 62 1C |  if_a	wrlong	local11, fp
2da50     24 4E 85 11 |  if_a	sub	fp, #36
2da54     04 4E 05 F1 | 	add	fp, #4
2da58     A7 32 02 FB | 	rdlong	local11, fp
2da5c     19 13 02 F6 | 	mov	arg01, local11
2da60     28 12 06 F1 | 	add	arg01, #40
2da64     14 32 06 F1 | 	add	local11, #20
2da68     19 33 02 FB | 	rdlong	local11, local11
2da6c     FF 33 06 F5 | 	and	local11, #511
2da70     19 13 02 F1 | 	add	arg01, local11
2da74     2C 4E 05 F1 | 	add	fp, #44
2da78     A7 14 02 FB | 	rdlong	arg02, fp
2da7c     0C 4E 85 F1 | 	sub	fp, #12
2da80     A7 16 02 FB | 	rdlong	arg03, fp
2da84     24 4E 85 F1 | 	sub	fp, #36
2da88     58 3A BF FD | 	call	#__system____builtin_memmove
2da8c     04 4E 05 F1 | 	add	fp, #4
2da90     A7 FA 01 FB | 	rdlong	result1, fp
2da94     FD 32 02 F6 | 	mov	local11, result1
2da98     04 4E 85 F1 | 	sub	fp, #4
2da9c     10 FA 05 F1 | 	add	result1, #16
2daa0     FD FA C1 FA | 	rdbyte	result1, result1
2daa4     80 FA 45 F5 | 	or	result1, #128
2daa8     10 32 06 F1 | 	add	local11, #16
2daac     19 FB 41 FC | 	wrbyte	result1, local11
2dab0                 | LR__4629
2dab0     0C 4E 05 F1 | 	add	fp, #12
2dab4     A7 32 02 FB | 	rdlong	local11, fp
2dab8     18 4E 05 F1 | 	add	fp, #24
2dabc     A7 FA 01 FB | 	rdlong	result1, fp
2dac0     FD 32 82 F1 | 	sub	local11, result1
2dac4     18 4E 85 F1 | 	sub	fp, #24
2dac8     A7 32 62 FC | 	wrlong	local11, fp
2dacc     04 4E 05 F1 | 	add	fp, #4
2dad0     A7 34 02 FB | 	rdlong	local12, fp
2dad4     1A 33 02 FB | 	rdlong	local11, local12
2dad8     14 4E 05 F1 | 	add	fp, #20
2dadc     A7 36 02 FB | 	rdlong	local13, fp
2dae0     1B 33 02 F1 | 	add	local11, local13
2dae4     1A 33 62 FC | 	wrlong	local11, local12
2dae8     0C 4E 05 F1 | 	add	fp, #12
2daec     A7 32 02 FB | 	rdlong	local11, fp
2daf0     0C 4E 85 F1 | 	sub	fp, #12
2daf4     A7 38 02 FB | 	rdlong	local14, fp
2daf8     1C 33 02 F1 | 	add	local11, local14
2dafc     0C 4E 05 F1 | 	add	fp, #12
2db00     A7 32 62 FC | 	wrlong	local11, fp
2db04     2C 4E 85 F1 | 	sub	fp, #44
2db08     A7 3A 02 FB | 	rdlong	local15, fp
2db0c     1D 33 02 F6 | 	mov	local11, local15
2db10     14 3A 06 F1 | 	add	local15, #20
2db14     1D 3B 02 FB | 	rdlong	local15, local15
2db18     20 4E 05 F1 | 	add	fp, #32
2db1c     A7 3C 02 FB | 	rdlong	local16, fp
2db20     1E 3B 02 F1 | 	add	local15, local16
2db24     14 32 06 F1 | 	add	local11, #20
2db28     19 3B 62 FC | 	wrlong	local15, local11
2db2c     20 4E 85 F1 | 	sub	fp, #32
2db30     A7 3E 02 FB | 	rdlong	local17, fp
2db34     1F 33 02 F6 | 	mov	local11, local17
2db38     1F 41 02 F6 | 	mov	local18, local17
2db3c     04 4E 85 F1 | 	sub	fp, #4
2db40     14 3E 06 F1 | 	add	local17, #20
2db44     1F 43 02 FB | 	rdlong	local19, local17
2db48     0C 40 06 F1 | 	add	local18, #12
2db4c     20 45 02 FB | 	rdlong	local20, local18
2db50     22 43 1A F2 | 	cmp	local19, local20 wcz
2db54     24 00 90 ED |  if_be	jmp	#LR__4630
2db58     04 4E 05 F1 | 	add	fp, #4
2db5c     A7 26 02 FB | 	rdlong	local05, fp
2db60     04 4E 85 F1 | 	sub	fp, #4
2db64     13 23 02 F6 | 	mov	local03, local05
2db68     14 22 06 F1 | 	add	local03, #20
2db6c     11 25 02 FB | 	rdlong	local04, local03
2db70     14 22 86 F1 | 	sub	local03, #20
2db74     12 47 02 F6 | 	mov	local21, local04
2db78     20 00 90 FD | 	jmp	#LR__4631
2db7c                 | LR__4630
2db7c     04 4E 05 F1 | 	add	fp, #4
2db80     A7 2A 02 FB | 	rdlong	local07, fp
2db84     04 4E 85 F1 | 	sub	fp, #4
2db88     15 31 02 F6 | 	mov	local10, local07
2db8c     0C 30 06 F1 | 	add	local10, #12
2db90     18 2D 02 FB | 	rdlong	local08, local10
2db94     0C 30 86 F1 | 	sub	local10, #12
2db98     16 47 02 F6 | 	mov	local21, local08
2db9c                 | LR__4631
2db9c     0C 32 06 F1 | 	add	local11, #12
2dba0     19 47 62 FC | 	wrlong	local21, local11
2dba4     5C F9 9F FD | 	jmp	#LR__4613
2dba8                 | LR__4632
2dba8     04 4E 05 F1 | 	add	fp, #4
2dbac     A7 34 02 FB | 	rdlong	local12, fp
2dbb0     1A 1F 02 F6 | 	mov	local01, local12
2dbb4     04 4E 85 F1 | 	sub	fp, #4
2dbb8     10 34 06 F1 | 	add	local12, #16
2dbbc     1A 33 C2 FA | 	rdbyte	local11, local12
2dbc0     40 32 46 F5 | 	or	local11, #64
2dbc4     10 1E 06 F1 | 	add	local01, #16
2dbc8     0F 33 42 FC | 	wrbyte	local11, local01
2dbcc                 | ' 
2dbcc                 | ' 
2dbcc                 | ' 
2dbcc                 | ' 
2dbcc                 | ' 
2dbcc                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2dbcc                 | ' 		fp->flag |=  0x80 ;
2dbcc                 | ' 
2dbcc                 | ' 	}
2dbcc                 | ' 
2dbcc                 | ' 	fp->flag |=  0x40 ;
2dbcc                 | ' 
2dbcc                 | ' 	return FR_OK ;
2dbcc     00 FA 05 F6 | 	mov	result1, #0
2dbd0                 | LR__4633
2dbd0     A7 F0 03 F6 | 	mov	ptra, fp
2dbd4     B2 00 A0 FD | 	call	#popregs_
2dbd8                 | _fatfs_cc_f_write_ret
2dbd8     2D 00 64 FD | 	ret
2dbdc                 | 
2dbdc                 | _fatfs_cc_f_sync
2dbdc     00 4A 05 F6 | 	mov	COUNT_, #0
2dbe0     A8 00 A0 FD | 	call	#pushregs_
2dbe4     18 F0 07 F1 | 	add	ptra, #24
2dbe8     04 4E 05 F1 | 	add	fp, #4
2dbec     A7 12 62 FC | 	wrlong	arg01, fp
2dbf0     08 4E 05 F1 | 	add	fp, #8
2dbf4     A7 14 02 F6 | 	mov	arg02, fp
2dbf8     0C 4E 85 F1 | 	sub	fp, #12
2dbfc     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2dc00     08 4E 05 F1 | 	add	fp, #8
2dc04     A7 FA 61 FC | 	wrlong	result1, fp
2dc08     08 4E 85 F1 | 	sub	fp, #8
2dc0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc10     C0 01 90 5D |  if_ne	jmp	#LR__4643
2dc14     04 4E 05 F1 | 	add	fp, #4
2dc18     A7 18 02 FB | 	rdlong	arg04, fp
2dc1c     04 4E 85 F1 | 	sub	fp, #4
2dc20     10 18 06 F1 | 	add	arg04, #16
2dc24     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dc28     40 18 CE F7 | 	test	arg04, #64 wz
2dc2c     A4 01 90 AD |  if_e	jmp	#LR__4642
2dc30     04 4E 05 F1 | 	add	fp, #4
2dc34     A7 18 02 FB | 	rdlong	arg04, fp
2dc38     04 4E 85 F1 | 	sub	fp, #4
2dc3c     10 18 06 F1 | 	add	arg04, #16
2dc40     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dc44     80 18 CE F7 | 	test	arg04, #128 wz
2dc48     64 00 90 AD |  if_e	jmp	#LR__4640
2dc4c     0C 4E 05 F1 | 	add	fp, #12
2dc50     A7 18 02 FB | 	rdlong	arg04, fp
2dc54     01 18 06 F1 | 	add	arg04, #1
2dc58     0C 13 C2 FA | 	rdbyte	arg01, arg04
2dc5c     08 4E 85 F1 | 	sub	fp, #8
2dc60     A7 18 02 FB | 	rdlong	arg04, fp
2dc64     0C 15 02 F6 | 	mov	arg02, arg04
2dc68     28 14 06 F1 | 	add	arg02, #40
2dc6c     04 4E 85 F1 | 	sub	fp, #4
2dc70     1C 18 06 F1 | 	add	arg04, #28
2dc74     0C 17 02 FB | 	rdlong	arg03, arg04
2dc78     01 18 06 F6 | 	mov	arg04, #1
2dc7c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2dc80     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc84     01 FA 05 56 |  if_ne	mov	result1, #1
2dc88     54 01 90 5D |  if_ne	jmp	#LR__4644
2dc8c     04 4E 05 F1 | 	add	fp, #4
2dc90     A7 18 02 FB | 	rdlong	arg04, fp
2dc94     0C 17 02 F6 | 	mov	arg03, arg04
2dc98     04 4E 85 F1 | 	sub	fp, #4
2dc9c     10 18 06 F1 | 	add	arg04, #16
2dca0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dca4     7F 18 06 F5 | 	and	arg04, #127
2dca8     10 16 06 F1 | 	add	arg03, #16
2dcac     0B 19 42 FC | 	wrbyte	arg04, arg03
2dcb0                 | LR__4640
2dcb0     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2dcb4     10 4E 05 F1 | 	add	fp, #16
2dcb8     A7 FA 61 FC | 	wrlong	result1, fp
2dcbc     04 4E 85 F1 | 	sub	fp, #4
2dcc0     A7 12 02 FB | 	rdlong	arg01, fp
2dcc4     08 4E 85 F1 | 	sub	fp, #8
2dcc8     A7 18 02 FB | 	rdlong	arg04, fp
2dccc     04 4E 85 F1 | 	sub	fp, #4
2dcd0     20 18 06 F1 | 	add	arg04, #32
2dcd4     0C 15 02 FB | 	rdlong	arg02, arg04
2dcd8     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2dcdc     08 4E 05 F1 | 	add	fp, #8
2dce0     A7 FA 61 FC | 	wrlong	result1, fp
2dce4     08 4E 85 F1 | 	sub	fp, #8
2dce8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcec     E4 00 90 5D |  if_ne	jmp	#LR__4641
2dcf0     04 4E 05 F1 | 	add	fp, #4
2dcf4     A7 18 02 FB | 	rdlong	arg04, fp
2dcf8     24 18 06 F1 | 	add	arg04, #36
2dcfc     0C 19 02 FB | 	rdlong	arg04, arg04
2dd00     10 4E 05 F1 | 	add	fp, #16
2dd04     A7 18 62 FC | 	wrlong	arg04, fp
2dd08     0C 17 02 F6 | 	mov	arg03, arg04
2dd0c     0B 16 06 F1 | 	add	arg03, #11
2dd10     0B 17 C2 FA | 	rdbyte	arg03, arg03
2dd14     20 16 46 F5 | 	or	arg03, #32
2dd18     0B 18 06 F1 | 	add	arg04, #11
2dd1c     0C 17 42 FC | 	wrbyte	arg03, arg04
2dd20     10 4E 85 F1 | 	sub	fp, #16
2dd24     A7 18 02 FB | 	rdlong	arg04, fp
2dd28     0C 13 02 FB | 	rdlong	arg01, arg04
2dd2c     10 4E 05 F1 | 	add	fp, #16
2dd30     A7 14 02 FB | 	rdlong	arg02, fp
2dd34     14 4E 85 F1 | 	sub	fp, #20
2dd38     08 18 06 F1 | 	add	arg04, #8
2dd3c     0C 17 02 FB | 	rdlong	arg03, arg04
2dd40     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2dd44     14 4E 05 F1 | 	add	fp, #20
2dd48     A7 12 02 FB | 	rdlong	arg01, fp
2dd4c     1C 12 06 F1 | 	add	arg01, #28
2dd50     10 4E 85 F1 | 	sub	fp, #16
2dd54     A7 18 02 FB | 	rdlong	arg04, fp
2dd58     0C 18 06 F1 | 	add	arg04, #12
2dd5c     0C 15 02 FB | 	rdlong	arg02, arg04
2dd60     09 15 62 FC | 	wrlong	arg02, arg01
2dd64     10 4E 05 F1 | 	add	fp, #16
2dd68     A7 12 02 FB | 	rdlong	arg01, fp
2dd6c     16 12 06 F1 | 	add	arg01, #22
2dd70     04 4E 85 F1 | 	sub	fp, #4
2dd74     A7 14 02 FB | 	rdlong	arg02, fp
2dd78     09 15 62 FC | 	wrlong	arg02, arg01
2dd7c     04 4E 05 F1 | 	add	fp, #4
2dd80     A7 12 02 FB | 	rdlong	arg01, fp
2dd84     12 12 06 F1 | 	add	arg01, #18
2dd88     09 01 58 FC | 	wrword	#0, arg01
2dd8c     08 4E 85 F1 | 	sub	fp, #8
2dd90     A7 18 02 FB | 	rdlong	arg04, fp
2dd94     03 18 06 F1 | 	add	arg04, #3
2dd98     0C 03 48 FC | 	wrbyte	#1, arg04
2dd9c     A7 12 02 FB | 	rdlong	arg01, fp
2dda0     0C 4E 85 F1 | 	sub	fp, #12
2dda4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2dda8     08 4E 05 F1 | 	add	fp, #8
2ddac     A7 FA 61 FC | 	wrlong	result1, fp
2ddb0     04 4E 85 F1 | 	sub	fp, #4
2ddb4     A7 18 02 FB | 	rdlong	arg04, fp
2ddb8     0C 17 02 F6 | 	mov	arg03, arg04
2ddbc     04 4E 85 F1 | 	sub	fp, #4
2ddc0     10 18 06 F1 | 	add	arg04, #16
2ddc4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ddc8     BF 18 06 F5 | 	and	arg04, #191
2ddcc     10 16 06 F1 | 	add	arg03, #16
2ddd0     0B 19 42 FC | 	wrbyte	arg04, arg03
2ddd4                 | LR__4641
2ddd4                 | LR__4642
2ddd4                 | LR__4643
2ddd4                 | ' 					dir = fp->dir_ptr;
2ddd4                 | ' 					dir[ 11 ] |=  0x20 ;
2ddd4                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2ddd4                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2ddd4                 | ' 					st_dword(dir +  22 , tm);
2ddd4                 | ' 					st_word(dir +  18 , 0);
2ddd4                 | ' 					fs->wflag = 1;
2ddd4                 | ' 					res = sync_fs(fs);
2ddd4                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2ddd4                 | ' 				}
2ddd4                 | ' 			}
2ddd4                 | ' 		}
2ddd4                 | ' 	}
2ddd4                 | ' 
2ddd4                 | ' 	return res ;
2ddd4     08 4E 05 F1 | 	add	fp, #8
2ddd8     A7 FA 01 FB | 	rdlong	result1, fp
2dddc     08 4E 85 F1 | 	sub	fp, #8
2dde0                 | LR__4644
2dde0     A7 F0 03 F6 | 	mov	ptra, fp
2dde4     B2 00 A0 FD | 	call	#popregs_
2dde8                 | _fatfs_cc_f_sync_ret
2dde8     2D 00 64 FD | 	ret
2ddec                 | 
2ddec                 | _fatfs_cc_f_close
2ddec     01 4A 05 F6 | 	mov	COUNT_, #1
2ddf0     A8 00 A0 FD | 	call	#pushregs_
2ddf4     10 F0 07 F1 | 	add	ptra, #16
2ddf8     04 4E 05 F1 | 	add	fp, #4
2ddfc     A7 12 62 FC | 	wrlong	arg01, fp
2de00     04 4E 85 F1 | 	sub	fp, #4
2de04     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2de08     08 4E 05 F1 | 	add	fp, #8
2de0c     A7 FA 61 FC | 	wrlong	result1, fp
2de10     08 4E 85 F1 | 	sub	fp, #8
2de14     00 FA 0D F2 | 	cmp	result1, #0 wz
2de18     38 00 90 5D |  if_ne	jmp	#LR__4650
2de1c     04 4E 05 F1 | 	add	fp, #4
2de20     A7 12 02 FB | 	rdlong	arg01, fp
2de24     08 4E 05 F1 | 	add	fp, #8
2de28     A7 14 02 F6 | 	mov	arg02, fp
2de2c     0C 4E 85 F1 | 	sub	fp, #12
2de30     9C E6 BF FD | 	call	#_fatfs_cc_validate
2de34     08 4E 05 F1 | 	add	fp, #8
2de38     A7 FA 61 FC | 	wrlong	result1, fp
2de3c     08 4E 85 F1 | 	sub	fp, #8
2de40     00 FA 0D F2 | 	cmp	result1, #0 wz
2de44     04 4E 05 A1 |  if_e	add	fp, #4
2de48     A7 1E 02 AB |  if_e	rdlong	local01, fp
2de4c     04 4E 85 A1 |  if_e	sub	fp, #4
2de50     0F 01 68 AC |  if_e	wrlong	#0, local01
2de54                 | LR__4650
2de54                 | ' 
2de54                 | ' 
2de54                 | ' 
2de54                 | ' 
2de54                 | ' 			fp->obj.fs = 0;
2de54                 | ' #line 4192 "ff.c"
2de54                 | ' 		}
2de54                 | ' 	}
2de54                 | ' 	return res;
2de54     08 4E 05 F1 | 	add	fp, #8
2de58     A7 FA 01 FB | 	rdlong	result1, fp
2de5c     08 4E 85 F1 | 	sub	fp, #8
2de60     A7 F0 03 F6 | 	mov	ptra, fp
2de64     B2 00 A0 FD | 	call	#popregs_
2de68                 | _fatfs_cc_f_close_ret
2de68     2D 00 64 FD | 	ret
2de6c                 | 
2de6c                 | _fatfs_cc_f_lseek
2de6c     00 4A 05 F6 | 	mov	COUNT_, #0
2de70     A8 00 A0 FD | 	call	#pushregs_
2de74     24 F0 07 F1 | 	add	ptra, #36
2de78     04 4E 05 F1 | 	add	fp, #4
2de7c     A7 12 62 FC | 	wrlong	arg01, fp
2de80     04 4E 05 F1 | 	add	fp, #4
2de84     A7 14 62 FC | 	wrlong	arg02, fp
2de88     04 4E 85 F1 | 	sub	fp, #4
2de8c     A7 12 02 FB | 	rdlong	arg01, fp
2de90     0C 4E 05 F1 | 	add	fp, #12
2de94     A7 14 02 F6 | 	mov	arg02, fp
2de98     10 4E 85 F1 | 	sub	fp, #16
2de9c     30 E6 BF FD | 	call	#_fatfs_cc_validate
2dea0     0C 4E 05 F1 | 	add	fp, #12
2dea4     A7 FA 61 FC | 	wrlong	result1, fp
2dea8     0C 4E 85 F1 | 	sub	fp, #12
2deac     00 FA 0D F2 | 	cmp	result1, #0 wz
2deb0     1C 00 90 5D |  if_ne	jmp	#LR__4660
2deb4     04 4E 05 F1 | 	add	fp, #4
2deb8     A7 18 02 FB | 	rdlong	arg04, fp
2debc     11 18 06 F1 | 	add	arg04, #17
2dec0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dec4     08 4E 05 F1 | 	add	fp, #8
2dec8     A7 18 62 FC | 	wrlong	arg04, fp
2decc     0C 4E 85 F1 | 	sub	fp, #12
2ded0                 | LR__4660
2ded0     0C 4E 05 F1 | 	add	fp, #12
2ded4     A7 18 0A FB | 	rdlong	arg04, fp wz
2ded8     0C 4E 85 F1 | 	sub	fp, #12
2dedc     0C 4E 05 51 |  if_ne	add	fp, #12
2dee0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2dee4     0C 4E 85 51 |  if_ne	sub	fp, #12
2dee8     40 06 90 5D |  if_ne	jmp	#LR__4683
2deec     04 4E 05 F1 | 	add	fp, #4
2def0     A7 18 02 FB | 	rdlong	arg04, fp
2def4     04 4E 05 F1 | 	add	fp, #4
2def8     A7 16 02 FB | 	rdlong	arg03, fp
2defc     08 4E 85 F1 | 	sub	fp, #8
2df00     0C 18 06 F1 | 	add	arg04, #12
2df04     0C 19 02 FB | 	rdlong	arg04, arg04
2df08     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2df0c     3C 00 90 ED |  if_be	jmp	#LR__4661
2df10     04 4E 05 F1 | 	add	fp, #4
2df14     A7 16 02 FB | 	rdlong	arg03, fp
2df18     04 4E 85 F1 | 	sub	fp, #4
2df1c     10 16 06 F1 | 	add	arg03, #16
2df20     0B 17 C2 FA | 	rdbyte	arg03, arg03
2df24     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2df28     02 16 CE F7 | 	test	arg03, #2 wz
2df2c     1C 00 90 5D |  if_ne	jmp	#LR__4661
2df30     04 4E 05 F1 | 	add	fp, #4
2df34     A7 16 02 FB | 	rdlong	arg03, fp
2df38     0C 16 06 F1 | 	add	arg03, #12
2df3c     0B 17 02 FB | 	rdlong	arg03, arg03
2df40     04 4E 05 F1 | 	add	fp, #4
2df44     A7 16 62 FC | 	wrlong	arg03, fp
2df48     08 4E 85 F1 | 	sub	fp, #8
2df4c                 | LR__4661
2df4c     04 4E 05 F1 | 	add	fp, #4
2df50     A7 16 02 FB | 	rdlong	arg03, fp
2df54     14 16 06 F1 | 	add	arg03, #20
2df58     0B 17 02 FB | 	rdlong	arg03, arg03
2df5c     1C 4E 05 F1 | 	add	fp, #28
2df60     A7 16 62 FC | 	wrlong	arg03, fp
2df64     1C 4E 85 F1 | 	sub	fp, #28
2df68     A7 16 02 FB | 	rdlong	arg03, fp
2df6c     18 4E 05 F1 | 	add	fp, #24
2df70     A7 00 68 FC | 	wrlong	#0, fp
2df74     14 16 06 F1 | 	add	arg03, #20
2df78     0B 01 68 FC | 	wrlong	#0, arg03
2df7c     14 4E 85 F1 | 	sub	fp, #20
2df80     A7 16 02 FB | 	rdlong	arg03, fp
2df84     08 4E 85 F1 | 	sub	fp, #8
2df88     01 16 16 F2 | 	cmp	arg03, #1 wc
2df8c     E4 03 90 CD |  if_b	jmp	#LR__4677
2df90     10 4E 05 F1 | 	add	fp, #16
2df94     A7 16 02 FB | 	rdlong	arg03, fp
2df98     0A 16 06 F1 | 	add	arg03, #10
2df9c     0B 19 E2 FA | 	rdword	arg04, arg03
2dfa0     09 18 66 F0 | 	shl	arg04, #9
2dfa4     08 4E 05 F1 | 	add	fp, #8
2dfa8     A7 18 62 FC | 	wrlong	arg04, fp
2dfac     08 4E 05 F1 | 	add	fp, #8
2dfb0     A7 18 02 FB | 	rdlong	arg04, fp
2dfb4     20 4E 85 F1 | 	sub	fp, #32
2dfb8     01 18 16 F2 | 	cmp	arg04, #1 wc
2dfbc     AC 00 90 CD |  if_b	jmp	#LR__4662
2dfc0     08 4E 05 F1 | 	add	fp, #8
2dfc4     A7 18 02 FB | 	rdlong	arg04, fp
2dfc8     01 18 86 F1 | 	sub	arg04, #1
2dfcc     10 4E 05 F1 | 	add	fp, #16
2dfd0     A7 16 02 FB | 	rdlong	arg03, fp
2dfd4     0B 19 12 FD | 	qdiv	arg04, arg03
2dfd8     08 4E 05 F1 | 	add	fp, #8
2dfdc     A7 FA 01 FB | 	rdlong	result1, fp
2dfe0     01 FA 85 F1 | 	sub	result1, #1
2dfe4     18 18 62 FD | 	getqx	arg04
2dfe8     0B FB 11 FD | 	qdiv	result1, arg03
2dfec     20 4E 85 F1 | 	sub	fp, #32
2dff0     18 16 62 FD | 	getqx	arg03
2dff4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2dff8     70 00 90 CD |  if_b	jmp	#LR__4662
2dffc     04 4E 05 F1 | 	add	fp, #4
2e000     A7 16 02 FB | 	rdlong	arg03, fp
2e004     1C 4E 05 F1 | 	add	fp, #28
2e008     A7 FA 01 FB | 	rdlong	result1, fp
2e00c     01 FA 85 F1 | 	sub	result1, #1
2e010     08 4E 85 F1 | 	sub	fp, #8
2e014     A7 18 02 FB | 	rdlong	arg04, fp
2e018     01 18 86 F1 | 	sub	arg04, #1
2e01c     0C FB 21 F5 | 	andn	result1, arg04
2e020     14 16 06 F1 | 	add	arg03, #20
2e024     0B FB 61 FC | 	wrlong	result1, arg03
2e028     10 4E 85 F1 | 	sub	fp, #16
2e02c     A7 16 02 FB | 	rdlong	arg03, fp
2e030     04 4E 85 F1 | 	sub	fp, #4
2e034     A7 18 02 FB | 	rdlong	arg04, fp
2e038     14 18 06 F1 | 	add	arg04, #20
2e03c     0C 19 02 FB | 	rdlong	arg04, arg04
2e040     0C 17 82 F1 | 	sub	arg03, arg04
2e044     04 4E 05 F1 | 	add	fp, #4
2e048     A7 16 62 FC | 	wrlong	arg03, fp
2e04c     04 4E 85 F1 | 	sub	fp, #4
2e050     A7 16 02 FB | 	rdlong	arg03, fp
2e054     18 16 06 F1 | 	add	arg03, #24
2e058     0B 17 02 FB | 	rdlong	arg03, arg03
2e05c     10 4E 05 F1 | 	add	fp, #16
2e060     A7 16 62 FC | 	wrlong	arg03, fp
2e064     14 4E 85 F1 | 	sub	fp, #20
2e068     D0 00 90 FD | 	jmp	#LR__4666
2e06c                 | LR__4662
2e06c     04 4E 05 F1 | 	add	fp, #4
2e070     A7 16 02 FB | 	rdlong	arg03, fp
2e074     08 16 06 F1 | 	add	arg03, #8
2e078     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2e07c     10 4E 05 F1 | 	add	fp, #16
2e080     A7 16 62 FC | 	wrlong	arg03, fp
2e084     14 4E 85 F1 | 	sub	fp, #20
2e088     94 00 90 5D |  if_ne	jmp	#LR__4665
2e08c     04 4E 05 F1 | 	add	fp, #4
2e090     A7 12 02 FB | 	rdlong	arg01, fp
2e094     04 4E 85 F1 | 	sub	fp, #4
2e098     00 14 06 F6 | 	mov	arg02, #0
2e09c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2e0a0     14 4E 05 F1 | 	add	fp, #20
2e0a4     A7 FA 61 FC | 	wrlong	result1, fp
2e0a8     14 4E 85 F1 | 	sub	fp, #20
2e0ac     01 FA 0D F2 | 	cmp	result1, #1 wz
2e0b0     1C 00 90 5D |  if_ne	jmp	#LR__4663
2e0b4     04 4E 05 F1 | 	add	fp, #4
2e0b8     A7 16 02 FB | 	rdlong	arg03, fp
2e0bc     04 4E 85 F1 | 	sub	fp, #4
2e0c0     11 16 06 F1 | 	add	arg03, #17
2e0c4     0B 05 48 FC | 	wrbyte	#2, arg03
2e0c8     02 FA 05 F6 | 	mov	result1, #2
2e0cc     5C 04 90 FD | 	jmp	#LR__4683
2e0d0                 | LR__4663
2e0d0     14 4E 05 F1 | 	add	fp, #20
2e0d4     A7 FA 01 FB | 	rdlong	result1, fp
2e0d8     14 4E 85 F1 | 	sub	fp, #20
2e0dc     FF FF 7F FF 
2e0e0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2e0e4     1C 00 90 5D |  if_ne	jmp	#LR__4664
2e0e8     04 4E 05 F1 | 	add	fp, #4
2e0ec     A7 16 02 FB | 	rdlong	arg03, fp
2e0f0     04 4E 85 F1 | 	sub	fp, #4
2e0f4     11 16 06 F1 | 	add	arg03, #17
2e0f8     0B 03 48 FC | 	wrbyte	#1, arg03
2e0fc     01 FA 05 F6 | 	mov	result1, #1
2e100     28 04 90 FD | 	jmp	#LR__4683
2e104                 | LR__4664
2e104     04 4E 05 F1 | 	add	fp, #4
2e108     A7 16 02 FB | 	rdlong	arg03, fp
2e10c     10 4E 05 F1 | 	add	fp, #16
2e110     A7 18 02 FB | 	rdlong	arg04, fp
2e114     14 4E 85 F1 | 	sub	fp, #20
2e118     08 16 06 F1 | 	add	arg03, #8
2e11c     0B 19 62 FC | 	wrlong	arg04, arg03
2e120                 | LR__4665
2e120     04 4E 05 F1 | 	add	fp, #4
2e124     A7 16 02 FB | 	rdlong	arg03, fp
2e128     10 4E 05 F1 | 	add	fp, #16
2e12c     A7 18 02 FB | 	rdlong	arg04, fp
2e130     14 4E 85 F1 | 	sub	fp, #20
2e134     18 16 06 F1 | 	add	arg03, #24
2e138     0B 19 62 FC | 	wrlong	arg04, arg03
2e13c                 | LR__4666
2e13c     14 4E 05 F1 | 	add	fp, #20
2e140     A7 16 0A FB | 	rdlong	arg03, fp wz
2e144     14 4E 85 F1 | 	sub	fp, #20
2e148     28 02 90 AD |  if_e	jmp	#LR__4676
2e14c                 | ' 				while (ofs > bcs) {
2e14c                 | LR__4667
2e14c     08 4E 05 F1 | 	add	fp, #8
2e150     A7 18 02 FB | 	rdlong	arg04, fp
2e154     10 4E 05 F1 | 	add	fp, #16
2e158     A7 16 02 FB | 	rdlong	arg03, fp
2e15c     18 4E 85 F1 | 	sub	fp, #24
2e160     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2e164     68 01 90 ED |  if_be	jmp	#LR__4673
2e168     08 4E 05 F1 | 	add	fp, #8
2e16c     A7 18 02 FB | 	rdlong	arg04, fp
2e170     10 4E 05 F1 | 	add	fp, #16
2e174     A7 16 02 FB | 	rdlong	arg03, fp
2e178     0B 19 82 F1 | 	sub	arg04, arg03
2e17c     10 4E 85 F1 | 	sub	fp, #16
2e180     A7 18 62 FC | 	wrlong	arg04, fp
2e184     04 4E 85 F1 | 	sub	fp, #4
2e188     A7 18 02 FB | 	rdlong	arg04, fp
2e18c     0C FB 01 F6 | 	mov	result1, arg04
2e190     14 18 06 F1 | 	add	arg04, #20
2e194     0C 19 02 FB | 	rdlong	arg04, arg04
2e198     14 4E 05 F1 | 	add	fp, #20
2e19c     A7 16 02 FB | 	rdlong	arg03, fp
2e1a0     0B 19 02 F1 | 	add	arg04, arg03
2e1a4     14 FA 05 F1 | 	add	result1, #20
2e1a8     FD 18 62 FC | 	wrlong	arg04, result1
2e1ac     14 4E 85 F1 | 	sub	fp, #20
2e1b0     A7 16 02 FB | 	rdlong	arg03, fp
2e1b4     04 4E 85 F1 | 	sub	fp, #4
2e1b8     10 16 06 F1 | 	add	arg03, #16
2e1bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e1c0     02 16 CE F7 | 	test	arg03, #2 wz
2e1c4     3C 00 90 AD |  if_e	jmp	#LR__4668
2e1c8     04 4E 05 F1 | 	add	fp, #4
2e1cc     A7 12 02 FB | 	rdlong	arg01, fp
2e1d0     10 4E 05 F1 | 	add	fp, #16
2e1d4     A7 14 02 FB | 	rdlong	arg02, fp
2e1d8     14 4E 85 F1 | 	sub	fp, #20
2e1dc     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2e1e0     14 4E 05 F1 | 	add	fp, #20
2e1e4     A7 FA 61 FC | 	wrlong	result1, fp
2e1e8     00 FA 4D F2 | 	cmps	result1, #0 wz
2e1ec     14 4E 85 F1 | 	sub	fp, #20
2e1f0     08 4E 05 A1 |  if_e	add	fp, #8
2e1f4     A7 00 68 AC |  if_e	wrlong	#0, fp
2e1f8     08 4E 85 A1 |  if_e	sub	fp, #8
2e1fc                 | ' 							ofs = 0; break;
2e1fc     D0 00 90 AD |  if_e	jmp	#LR__4673
2e200     24 00 90 FD | 	jmp	#LR__4669
2e204                 | LR__4668
2e204     04 4E 05 F1 | 	add	fp, #4
2e208     A7 12 02 FB | 	rdlong	arg01, fp
2e20c     10 4E 05 F1 | 	add	fp, #16
2e210     A7 14 02 FB | 	rdlong	arg02, fp
2e214     14 4E 85 F1 | 	sub	fp, #20
2e218     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2e21c     14 4E 05 F1 | 	add	fp, #20
2e220     A7 FA 61 FC | 	wrlong	result1, fp
2e224     14 4E 85 F1 | 	sub	fp, #20
2e228                 | LR__4669
2e228     14 4E 05 F1 | 	add	fp, #20
2e22c     A7 16 02 FB | 	rdlong	arg03, fp
2e230     14 4E 85 F1 | 	sub	fp, #20
2e234     FF FF 7F FF 
2e238     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2e23c     1C 00 90 5D |  if_ne	jmp	#LR__4670
2e240     04 4E 05 F1 | 	add	fp, #4
2e244     A7 16 02 FB | 	rdlong	arg03, fp
2e248     04 4E 85 F1 | 	sub	fp, #4
2e24c     11 16 06 F1 | 	add	arg03, #17
2e250     0B 03 48 FC | 	wrbyte	#1, arg03
2e254     01 FA 05 F6 | 	mov	result1, #1
2e258     D0 02 90 FD | 	jmp	#LR__4683
2e25c                 | LR__4670
2e25c     14 4E 05 F1 | 	add	fp, #20
2e260     A7 16 02 FB | 	rdlong	arg03, fp
2e264     14 4E 85 F1 | 	sub	fp, #20
2e268     02 16 16 F2 | 	cmp	arg03, #2 wc
2e26c     24 00 90 CD |  if_b	jmp	#LR__4671
2e270     10 4E 05 F1 | 	add	fp, #16
2e274     A7 18 02 FB | 	rdlong	arg04, fp
2e278     04 4E 05 F1 | 	add	fp, #4
2e27c     A7 16 02 FB | 	rdlong	arg03, fp
2e280     14 4E 85 F1 | 	sub	fp, #20
2e284     18 18 06 F1 | 	add	arg04, #24
2e288     0C 19 02 FB | 	rdlong	arg04, arg04
2e28c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2e290     1C 00 90 CD |  if_b	jmp	#LR__4672
2e294                 | LR__4671
2e294     04 4E 05 F1 | 	add	fp, #4
2e298     A7 16 02 FB | 	rdlong	arg03, fp
2e29c     04 4E 85 F1 | 	sub	fp, #4
2e2a0     11 16 06 F1 | 	add	arg03, #17
2e2a4     0B 05 48 FC | 	wrbyte	#2, arg03
2e2a8     02 FA 05 F6 | 	mov	result1, #2
2e2ac     7C 02 90 FD | 	jmp	#LR__4683
2e2b0                 | LR__4672
2e2b0     04 4E 05 F1 | 	add	fp, #4
2e2b4     A7 18 02 FB | 	rdlong	arg04, fp
2e2b8     10 4E 05 F1 | 	add	fp, #16
2e2bc     A7 16 02 FB | 	rdlong	arg03, fp
2e2c0     14 4E 85 F1 | 	sub	fp, #20
2e2c4     18 18 06 F1 | 	add	arg04, #24
2e2c8     0C 17 62 FC | 	wrlong	arg03, arg04
2e2cc     7C FE 9F FD | 	jmp	#LR__4667
2e2d0                 | LR__4673
2e2d0     04 4E 05 F1 | 	add	fp, #4
2e2d4     A7 16 02 FB | 	rdlong	arg03, fp
2e2d8     0B 13 02 F6 | 	mov	arg01, arg03
2e2dc     14 16 06 F1 | 	add	arg03, #20
2e2e0     0B 15 02 FB | 	rdlong	arg02, arg03
2e2e4     04 4E 05 F1 | 	add	fp, #4
2e2e8     A7 16 02 FB | 	rdlong	arg03, fp
2e2ec     0B 15 02 F1 | 	add	arg02, arg03
2e2f0     14 12 06 F1 | 	add	arg01, #20
2e2f4     09 15 62 FC | 	wrlong	arg02, arg01
2e2f8     A7 16 02 FB | 	rdlong	arg03, fp
2e2fc     08 4E 85 F1 | 	sub	fp, #8
2e300     FF 17 CE F7 | 	test	arg03, #511 wz
2e304     6C 00 90 AD |  if_e	jmp	#LR__4675
2e308     10 4E 05 F1 | 	add	fp, #16
2e30c     A7 12 02 FB | 	rdlong	arg01, fp
2e310     04 4E 05 F1 | 	add	fp, #4
2e314     A7 14 02 FB | 	rdlong	arg02, fp
2e318     14 4E 85 F1 | 	sub	fp, #20
2e31c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2e320     1C 4E 05 F1 | 	add	fp, #28
2e324     A7 FA 61 FC | 	wrlong	result1, fp
2e328     1C 4E 85 F1 | 	sub	fp, #28
2e32c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e330     1C 00 90 5D |  if_ne	jmp	#LR__4674
2e334     04 4E 05 F1 | 	add	fp, #4
2e338     A7 16 02 FB | 	rdlong	arg03, fp
2e33c     04 4E 85 F1 | 	sub	fp, #4
2e340     11 16 06 F1 | 	add	arg03, #17
2e344     0B 05 48 FC | 	wrbyte	#2, arg03
2e348     02 FA 05 F6 | 	mov	result1, #2
2e34c     DC 01 90 FD | 	jmp	#LR__4683
2e350                 | LR__4674
2e350     1C 4E 05 F1 | 	add	fp, #28
2e354     A7 18 02 FB | 	rdlong	arg04, fp
2e358     14 4E 85 F1 | 	sub	fp, #20
2e35c     A7 16 02 FB | 	rdlong	arg03, fp
2e360     09 16 46 F0 | 	shr	arg03, #9
2e364     0B 19 02 F1 | 	add	arg04, arg03
2e368     14 4E 05 F1 | 	add	fp, #20
2e36c     A7 18 62 FC | 	wrlong	arg04, fp
2e370     1C 4E 85 F1 | 	sub	fp, #28
2e374                 | LR__4675
2e374                 | LR__4676
2e374                 | LR__4677
2e374     04 4E 05 F1 | 	add	fp, #4
2e378     A7 18 02 FB | 	rdlong	arg04, fp
2e37c     0C 17 02 F6 | 	mov	arg03, arg04
2e380     04 4E 85 F1 | 	sub	fp, #4
2e384     14 16 06 F1 | 	add	arg03, #20
2e388     0B 17 02 FB | 	rdlong	arg03, arg03
2e38c     0C 18 06 F1 | 	add	arg04, #12
2e390     0C 19 02 FB | 	rdlong	arg04, arg04
2e394     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2e398     3C 00 90 ED |  if_be	jmp	#LR__4678
2e39c     04 4E 05 F1 | 	add	fp, #4
2e3a0     A7 18 02 FB | 	rdlong	arg04, fp
2e3a4     0C 17 02 F6 | 	mov	arg03, arg04
2e3a8     14 18 06 F1 | 	add	arg04, #20
2e3ac     0C 19 02 FB | 	rdlong	arg04, arg04
2e3b0     0C 16 06 F1 | 	add	arg03, #12
2e3b4     0B 19 62 FC | 	wrlong	arg04, arg03
2e3b8     A7 18 02 FB | 	rdlong	arg04, fp
2e3bc     0C 17 02 F6 | 	mov	arg03, arg04
2e3c0     04 4E 85 F1 | 	sub	fp, #4
2e3c4     10 18 06 F1 | 	add	arg04, #16
2e3c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e3cc     40 18 46 F5 | 	or	arg04, #64
2e3d0     10 16 06 F1 | 	add	arg03, #16
2e3d4     0B 19 42 FC | 	wrbyte	arg04, arg03
2e3d8                 | LR__4678
2e3d8     04 4E 05 F1 | 	add	fp, #4
2e3dc     A7 16 02 FB | 	rdlong	arg03, fp
2e3e0     04 4E 85 F1 | 	sub	fp, #4
2e3e4     14 16 06 F1 | 	add	arg03, #20
2e3e8     0B 17 02 FB | 	rdlong	arg03, arg03
2e3ec     FF 17 CE F7 | 	test	arg03, #511 wz
2e3f0     2C 01 90 AD |  if_e	jmp	#LR__4682
2e3f4     04 4E 05 F1 | 	add	fp, #4
2e3f8     A7 18 02 FB | 	rdlong	arg04, fp
2e3fc     18 4E 05 F1 | 	add	fp, #24
2e400     A7 16 02 FB | 	rdlong	arg03, fp
2e404     1C 4E 85 F1 | 	sub	fp, #28
2e408     1C 18 06 F1 | 	add	arg04, #28
2e40c     0C 19 02 FB | 	rdlong	arg04, arg04
2e410     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2e414     08 01 90 AD |  if_e	jmp	#LR__4682
2e418     04 4E 05 F1 | 	add	fp, #4
2e41c     A7 16 02 FB | 	rdlong	arg03, fp
2e420     04 4E 85 F1 | 	sub	fp, #4
2e424     10 16 06 F1 | 	add	arg03, #16
2e428     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e42c     80 16 CE F7 | 	test	arg03, #128 wz
2e430     7C 00 90 AD |  if_e	jmp	#LR__4680
2e434     10 4E 05 F1 | 	add	fp, #16
2e438     A7 16 02 FB | 	rdlong	arg03, fp
2e43c     01 16 06 F1 | 	add	arg03, #1
2e440     0B 13 C2 FA | 	rdbyte	arg01, arg03
2e444     0C 4E 85 F1 | 	sub	fp, #12
2e448     A7 16 02 FB | 	rdlong	arg03, fp
2e44c     0B 15 02 F6 | 	mov	arg02, arg03
2e450     28 14 06 F1 | 	add	arg02, #40
2e454     04 4E 85 F1 | 	sub	fp, #4
2e458     1C 16 06 F1 | 	add	arg03, #28
2e45c     0B 17 02 FB | 	rdlong	arg03, arg03
2e460     01 18 06 F6 | 	mov	arg04, #1
2e464     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2e468     00 FA 0D F2 | 	cmp	result1, #0 wz
2e46c     1C 00 90 AD |  if_e	jmp	#LR__4679
2e470     04 4E 05 F1 | 	add	fp, #4
2e474     A7 16 02 FB | 	rdlong	arg03, fp
2e478     04 4E 85 F1 | 	sub	fp, #4
2e47c     11 16 06 F1 | 	add	arg03, #17
2e480     0B 03 48 FC | 	wrbyte	#1, arg03
2e484     01 FA 05 F6 | 	mov	result1, #1
2e488     A0 00 90 FD | 	jmp	#LR__4683
2e48c                 | LR__4679
2e48c     04 4E 05 F1 | 	add	fp, #4
2e490     A7 18 02 FB | 	rdlong	arg04, fp
2e494     0C 17 02 F6 | 	mov	arg03, arg04
2e498     04 4E 85 F1 | 	sub	fp, #4
2e49c     10 18 06 F1 | 	add	arg04, #16
2e4a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e4a4     7F 18 06 F5 | 	and	arg04, #127
2e4a8     10 16 06 F1 | 	add	arg03, #16
2e4ac     0B 19 42 FC | 	wrbyte	arg04, arg03
2e4b0                 | LR__4680
2e4b0     10 4E 05 F1 | 	add	fp, #16
2e4b4     A7 16 02 FB | 	rdlong	arg03, fp
2e4b8     01 16 06 F1 | 	add	arg03, #1
2e4bc     0B 13 C2 FA | 	rdbyte	arg01, arg03
2e4c0     0C 4E 85 F1 | 	sub	fp, #12
2e4c4     A7 14 02 FB | 	rdlong	arg02, fp
2e4c8     28 14 06 F1 | 	add	arg02, #40
2e4cc     18 4E 05 F1 | 	add	fp, #24
2e4d0     A7 16 02 FB | 	rdlong	arg03, fp
2e4d4     1C 4E 85 F1 | 	sub	fp, #28
2e4d8     01 18 06 F6 | 	mov	arg04, #1
2e4dc     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2e4e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4e4     1C 00 90 AD |  if_e	jmp	#LR__4681
2e4e8     04 4E 05 F1 | 	add	fp, #4
2e4ec     A7 16 02 FB | 	rdlong	arg03, fp
2e4f0     04 4E 85 F1 | 	sub	fp, #4
2e4f4     11 16 06 F1 | 	add	arg03, #17
2e4f8     0B 03 48 FC | 	wrbyte	#1, arg03
2e4fc     01 FA 05 F6 | 	mov	result1, #1
2e500     28 00 90 FD | 	jmp	#LR__4683
2e504                 | LR__4681
2e504     04 4E 05 F1 | 	add	fp, #4
2e508     A7 18 02 FB | 	rdlong	arg04, fp
2e50c     18 4E 05 F1 | 	add	fp, #24
2e510     A7 16 02 FB | 	rdlong	arg03, fp
2e514     1C 4E 85 F1 | 	sub	fp, #28
2e518     1C 18 06 F1 | 	add	arg04, #28
2e51c     0C 17 62 FC | 	wrlong	arg03, arg04
2e520                 | LR__4682
2e520                 | ' 
2e520                 | ' 			fp->sect = nsect;
2e520                 | ' 		}
2e520                 | ' 	}
2e520                 | ' 
2e520                 | ' 	return res ;
2e520     0C 4E 05 F1 | 	add	fp, #12
2e524     A7 FA 01 FB | 	rdlong	result1, fp
2e528     0C 4E 85 F1 | 	sub	fp, #12
2e52c                 | LR__4683
2e52c     A7 F0 03 F6 | 	mov	ptra, fp
2e530     B2 00 A0 FD | 	call	#popregs_
2e534                 | _fatfs_cc_f_lseek_ret
2e534     2D 00 64 FD | 	ret
2e538                 | 
2e538                 | _fatfs_cc_f_opendir
2e538     01 4A 05 F6 | 	mov	COUNT_, #1
2e53c     A8 00 A0 FD | 	call	#pushregs_
2e540     14 F0 07 F1 | 	add	ptra, #20
2e544     04 4E 05 F1 | 	add	fp, #4
2e548     A7 12 62 FC | 	wrlong	arg01, fp
2e54c     04 4E 05 F1 | 	add	fp, #4
2e550     A7 14 62 FC | 	wrlong	arg02, fp
2e554     04 4E 85 F1 | 	sub	fp, #4
2e558     A7 16 0A FB | 	rdlong	arg03, fp wz
2e55c     04 4E 85 F1 | 	sub	fp, #4
2e560     09 FA 05 A6 |  if_e	mov	result1, #9
2e564     78 01 90 AD |  if_e	jmp	#LR__4696
2e568     08 4E 05 F1 | 	add	fp, #8
2e56c     A7 12 02 F6 | 	mov	arg01, fp
2e570     08 4E 05 F1 | 	add	fp, #8
2e574     A7 14 02 F6 | 	mov	arg02, fp
2e578     10 4E 85 F1 | 	sub	fp, #16
2e57c     00 16 06 F6 | 	mov	arg03, #0
2e580     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2e584     0C 4E 05 F1 | 	add	fp, #12
2e588     A7 FA 61 FC | 	wrlong	result1, fp
2e58c     0C 4E 85 F1 | 	sub	fp, #12
2e590     00 FA 0D F2 | 	cmp	result1, #0 wz
2e594     20 01 90 5D |  if_ne	jmp	#LR__4695
2e598     04 4E 05 F1 | 	add	fp, #4
2e59c     A7 16 02 FB | 	rdlong	arg03, fp
2e5a0     0C 4E 05 F1 | 	add	fp, #12
2e5a4     A7 FA 01 FB | 	rdlong	result1, fp
2e5a8     0B FB 61 FC | 	wrlong	result1, arg03
2e5ac     0C 4E 85 F1 | 	sub	fp, #12
2e5b0     A7 12 02 FB | 	rdlong	arg01, fp
2e5b4     04 4E 05 F1 | 	add	fp, #4
2e5b8     A7 14 02 FB | 	rdlong	arg02, fp
2e5bc     08 4E 85 F1 | 	sub	fp, #8
2e5c0     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2e5c4     0C 4E 05 F1 | 	add	fp, #12
2e5c8     A7 FA 61 FC | 	wrlong	result1, fp
2e5cc     0C 4E 85 F1 | 	sub	fp, #12
2e5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5d4     C4 00 90 5D |  if_ne	jmp	#LR__4694
2e5d8     04 4E 05 F1 | 	add	fp, #4
2e5dc     A7 16 02 FB | 	rdlong	arg03, fp
2e5e0     04 4E 85 F1 | 	sub	fp, #4
2e5e4     2B 16 06 F1 | 	add	arg03, #43
2e5e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e5ec     80 16 CE F7 | 	test	arg03, #128 wz
2e5f0     58 00 90 5D |  if_ne	jmp	#LR__4692
2e5f4     04 4E 05 F1 | 	add	fp, #4
2e5f8     A7 16 02 FB | 	rdlong	arg03, fp
2e5fc     04 4E 85 F1 | 	sub	fp, #4
2e600     06 16 06 F1 | 	add	arg03, #6
2e604     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e608     10 16 CE F7 | 	test	arg03, #16 wz
2e60c     30 00 90 AD |  if_e	jmp	#LR__4690
2e610     04 4E 05 F1 | 	add	fp, #4
2e614     A7 16 02 FB | 	rdlong	arg03, fp
2e618     0B 1F 02 F6 | 	mov	local01, arg03
2e61c     0C 4E 05 F1 | 	add	fp, #12
2e620     A7 12 02 FB | 	rdlong	arg01, fp
2e624     10 4E 85 F1 | 	sub	fp, #16
2e628     1C 16 06 F1 | 	add	arg03, #28
2e62c     0B 15 02 FB | 	rdlong	arg02, arg03
2e630     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2e634     08 1E 06 F1 | 	add	local01, #8
2e638     0F FB 61 FC | 	wrlong	result1, local01
2e63c     0C 00 90 FD | 	jmp	#LR__4691
2e640                 | LR__4690
2e640     0C 4E 05 F1 | 	add	fp, #12
2e644     A7 0A 68 FC | 	wrlong	#5, fp
2e648     0C 4E 85 F1 | 	sub	fp, #12
2e64c                 | LR__4691
2e64c                 | LR__4692
2e64c     0C 4E 05 F1 | 	add	fp, #12
2e650     A7 1E 0A FB | 	rdlong	local01, fp wz
2e654     0C 4E 85 F1 | 	sub	fp, #12
2e658     40 00 90 5D |  if_ne	jmp	#LR__4693
2e65c     04 4E 05 F1 | 	add	fp, #4
2e660     A7 1E 02 FB | 	rdlong	local01, fp
2e664     0C 4E 05 F1 | 	add	fp, #12
2e668     A7 16 02 FB | 	rdlong	arg03, fp
2e66c     06 16 06 F1 | 	add	arg03, #6
2e670     0B 17 E2 FA | 	rdword	arg03, arg03
2e674     04 1E 06 F1 | 	add	local01, #4
2e678     0F 17 52 FC | 	wrword	arg03, local01
2e67c     0C 4E 85 F1 | 	sub	fp, #12
2e680     A7 12 02 FB | 	rdlong	arg01, fp
2e684     04 4E 85 F1 | 	sub	fp, #4
2e688     00 14 06 F6 | 	mov	arg02, #0
2e68c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2e690     0C 4E 05 F1 | 	add	fp, #12
2e694     A7 FA 61 FC | 	wrlong	result1, fp
2e698     0C 4E 85 F1 | 	sub	fp, #12
2e69c                 | LR__4693
2e69c                 | LR__4694
2e69c     0C 4E 05 F1 | 	add	fp, #12
2e6a0     A7 1E 02 FB | 	rdlong	local01, fp
2e6a4     0C 4E 85 F1 | 	sub	fp, #12
2e6a8     04 1E 0E F2 | 	cmp	local01, #4 wz
2e6ac     0C 4E 05 A1 |  if_e	add	fp, #12
2e6b0     A7 0A 68 AC |  if_e	wrlong	#5, fp
2e6b4     0C 4E 85 A1 |  if_e	sub	fp, #12
2e6b8                 | LR__4695
2e6b8     0C 4E 05 F1 | 	add	fp, #12
2e6bc     A7 1E 0A FB | 	rdlong	local01, fp wz
2e6c0     0C 4E 85 F1 | 	sub	fp, #12
2e6c4     04 4E 05 51 |  if_ne	add	fp, #4
2e6c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2e6cc     04 4E 85 51 |  if_ne	sub	fp, #4
2e6d0     0F 01 68 5C |  if_ne	wrlong	#0, local01
2e6d4                 | ' 
2e6d4                 | ' 	return res ;
2e6d4     0C 4E 05 F1 | 	add	fp, #12
2e6d8     A7 FA 01 FB | 	rdlong	result1, fp
2e6dc     0C 4E 85 F1 | 	sub	fp, #12
2e6e0                 | LR__4696
2e6e0     A7 F0 03 F6 | 	mov	ptra, fp
2e6e4     B2 00 A0 FD | 	call	#popregs_
2e6e8                 | _fatfs_cc_f_opendir_ret
2e6e8     2D 00 64 FD | 	ret
2e6ec                 | 
2e6ec                 | _fatfs_cc_f_closedir
2e6ec     00 4A 05 F6 | 	mov	COUNT_, #0
2e6f0     A8 00 A0 FD | 	call	#pushregs_
2e6f4     10 F0 07 F1 | 	add	ptra, #16
2e6f8     04 4E 05 F1 | 	add	fp, #4
2e6fc     A7 12 62 FC | 	wrlong	arg01, fp
2e700     08 4E 05 F1 | 	add	fp, #8
2e704     A7 14 02 F6 | 	mov	arg02, fp
2e708     0C 4E 85 F1 | 	sub	fp, #12
2e70c     C0 DD BF FD | 	call	#_fatfs_cc_validate
2e710     08 4E 05 F1 | 	add	fp, #8
2e714     A7 FA 61 FC | 	wrlong	result1, fp
2e718     08 4E 85 F1 | 	sub	fp, #8
2e71c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e720     04 4E 05 A1 |  if_e	add	fp, #4
2e724     A7 FA 01 AB |  if_e	rdlong	result1, fp
2e728     04 4E 85 A1 |  if_e	sub	fp, #4
2e72c     FD 00 68 AC |  if_e	wrlong	#0, result1
2e730                 | ' 
2e730                 | ' 
2e730                 | ' 
2e730                 | ' 
2e730                 | ' 		dp->obj.fs = 0;
2e730                 | ' #line 4633 "ff.c"
2e730                 | ' 	}
2e730                 | ' 	return res;
2e730     08 4E 05 F1 | 	add	fp, #8
2e734     A7 FA 01 FB | 	rdlong	result1, fp
2e738     08 4E 85 F1 | 	sub	fp, #8
2e73c     A7 F0 03 F6 | 	mov	ptra, fp
2e740     B2 00 A0 FD | 	call	#popregs_
2e744                 | _fatfs_cc_f_closedir_ret
2e744     2D 00 64 FD | 	ret
2e748                 | 
2e748                 | _fatfs_cc_f_readdir
2e748     00 4A 05 F6 | 	mov	COUNT_, #0
2e74c     A8 00 A0 FD | 	call	#pushregs_
2e750     14 F0 07 F1 | 	add	ptra, #20
2e754     04 4E 05 F1 | 	add	fp, #4
2e758     A7 12 62 FC | 	wrlong	arg01, fp
2e75c     04 4E 05 F1 | 	add	fp, #4
2e760     A7 14 62 FC | 	wrlong	arg02, fp
2e764     04 4E 85 F1 | 	sub	fp, #4
2e768     A7 12 02 FB | 	rdlong	arg01, fp
2e76c     0C 4E 05 F1 | 	add	fp, #12
2e770     A7 14 02 F6 | 	mov	arg02, fp
2e774     10 4E 85 F1 | 	sub	fp, #16
2e778     54 DD BF FD | 	call	#_fatfs_cc_validate
2e77c     0C 4E 05 F1 | 	add	fp, #12
2e780     A7 FA 61 FC | 	wrlong	result1, fp
2e784     0C 4E 85 F1 | 	sub	fp, #12
2e788     00 FA 0D F2 | 	cmp	result1, #0 wz
2e78c     BC 00 90 5D |  if_ne	jmp	#LR__4703
2e790     08 4E 05 F1 | 	add	fp, #8
2e794     A7 FA 09 FB | 	rdlong	result1, fp wz
2e798     08 4E 85 F1 | 	sub	fp, #8
2e79c     24 00 90 5D |  if_ne	jmp	#LR__4700
2e7a0     04 4E 05 F1 | 	add	fp, #4
2e7a4     A7 12 02 FB | 	rdlong	arg01, fp
2e7a8     04 4E 85 F1 | 	sub	fp, #4
2e7ac     00 14 06 F6 | 	mov	arg02, #0
2e7b0     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2e7b4     0C 4E 05 F1 | 	add	fp, #12
2e7b8     A7 FA 61 FC | 	wrlong	result1, fp
2e7bc     0C 4E 85 F1 | 	sub	fp, #12
2e7c0     88 00 90 FD | 	jmp	#LR__4702
2e7c4                 | LR__4700
2e7c4     04 4E 05 F1 | 	add	fp, #4
2e7c8     A7 12 02 FB | 	rdlong	arg01, fp
2e7cc     04 4E 85 F1 | 	sub	fp, #4
2e7d0     00 14 06 F6 | 	mov	arg02, #0
2e7d4     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2e7d8     0C 4E 05 F1 | 	add	fp, #12
2e7dc     A7 FA 61 FC | 	wrlong	result1, fp
2e7e0     0C 4E 85 F1 | 	sub	fp, #12
2e7e4     04 FA 0D F2 | 	cmp	result1, #4 wz
2e7e8     0C 4E 05 A1 |  if_e	add	fp, #12
2e7ec     A7 00 68 AC |  if_e	wrlong	#0, fp
2e7f0     0C 4E 85 A1 |  if_e	sub	fp, #12
2e7f4     0C 4E 05 F1 | 	add	fp, #12
2e7f8     A7 FA 09 FB | 	rdlong	result1, fp wz
2e7fc     0C 4E 85 F1 | 	sub	fp, #12
2e800     48 00 90 5D |  if_ne	jmp	#LR__4701
2e804     04 4E 05 F1 | 	add	fp, #4
2e808     A7 12 02 FB | 	rdlong	arg01, fp
2e80c     04 4E 05 F1 | 	add	fp, #4
2e810     A7 14 02 FB | 	rdlong	arg02, fp
2e814     08 4E 85 F1 | 	sub	fp, #8
2e818     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2e81c     04 4E 05 F1 | 	add	fp, #4
2e820     A7 12 02 FB | 	rdlong	arg01, fp
2e824     04 4E 85 F1 | 	sub	fp, #4
2e828     00 14 06 F6 | 	mov	arg02, #0
2e82c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2e830     0C 4E 05 F1 | 	add	fp, #12
2e834     A7 FA 61 FC | 	wrlong	result1, fp
2e838     0C 4E 85 F1 | 	sub	fp, #12
2e83c     04 FA 0D F2 | 	cmp	result1, #4 wz
2e840     0C 4E 05 A1 |  if_e	add	fp, #12
2e844     A7 00 68 AC |  if_e	wrlong	#0, fp
2e848     0C 4E 85 A1 |  if_e	sub	fp, #12
2e84c                 | LR__4701
2e84c                 | LR__4702
2e84c                 | LR__4703
2e84c                 | ' 			}
2e84c                 | ' 			;
2e84c                 | ' 		}
2e84c                 | ' 	}
2e84c                 | ' 	return res ;
2e84c     0C 4E 05 F1 | 	add	fp, #12
2e850     A7 FA 01 FB | 	rdlong	result1, fp
2e854     0C 4E 85 F1 | 	sub	fp, #12
2e858     A7 F0 03 F6 | 	mov	ptra, fp
2e85c     B2 00 A0 FD | 	call	#popregs_
2e860                 | _fatfs_cc_f_readdir_ret
2e860     2D 00 64 FD | 	ret
2e864                 | 
2e864                 | _fatfs_cc_f_stat
2e864     00 4A 05 F6 | 	mov	COUNT_, #0
2e868     A8 00 A0 FD | 	call	#pushregs_
2e86c     40 F0 07 F1 | 	add	ptra, #64
2e870     04 4E 05 F1 | 	add	fp, #4
2e874     A7 12 62 FC | 	wrlong	arg01, fp
2e878     04 4E 05 F1 | 	add	fp, #4
2e87c     A7 14 62 FC | 	wrlong	arg02, fp
2e880     04 4E 85 F1 | 	sub	fp, #4
2e884     A7 12 02 F6 | 	mov	arg01, fp
2e888     0C 4E 05 F1 | 	add	fp, #12
2e88c     A7 14 02 F6 | 	mov	arg02, fp
2e890     10 4E 85 F1 | 	sub	fp, #16
2e894     00 16 06 F6 | 	mov	arg03, #0
2e898     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2e89c     0C 4E 05 F1 | 	add	fp, #12
2e8a0     A7 FA 61 FC | 	wrlong	result1, fp
2e8a4     0C 4E 85 F1 | 	sub	fp, #12
2e8a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e8ac     74 00 90 5D |  if_ne	jmp	#LR__4713
2e8b0     10 4E 05 F1 | 	add	fp, #16
2e8b4     A7 12 02 F6 | 	mov	arg01, fp
2e8b8     0C 4E 85 F1 | 	sub	fp, #12
2e8bc     A7 14 02 FB | 	rdlong	arg02, fp
2e8c0     04 4E 85 F1 | 	sub	fp, #4
2e8c4     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2e8c8     0C 4E 05 F1 | 	add	fp, #12
2e8cc     A7 FA 61 FC | 	wrlong	result1, fp
2e8d0     0C 4E 85 F1 | 	sub	fp, #12
2e8d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e8d8     48 00 90 5D |  if_ne	jmp	#LR__4712
2e8dc     3B 4E 05 F1 | 	add	fp, #59
2e8e0     A7 FA C1 FA | 	rdbyte	result1, fp
2e8e4     3B 4E 85 F1 | 	sub	fp, #59
2e8e8     80 FA CD F7 | 	test	result1, #128 wz
2e8ec     0C 4E 05 51 |  if_ne	add	fp, #12
2e8f0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e8f4     0C 4E 85 51 |  if_ne	sub	fp, #12
2e8f8     28 00 90 5D |  if_ne	jmp	#LR__4711
2e8fc     08 4E 05 F1 | 	add	fp, #8
2e900     A7 FA 09 FB | 	rdlong	result1, fp wz
2e904     08 4E 85 F1 | 	sub	fp, #8
2e908     18 00 90 AD |  if_e	jmp	#LR__4710
2e90c     10 4E 05 F1 | 	add	fp, #16
2e910     A7 12 02 F6 | 	mov	arg01, fp
2e914     08 4E 85 F1 | 	sub	fp, #8
2e918     A7 14 02 FB | 	rdlong	arg02, fp
2e91c     08 4E 85 F1 | 	sub	fp, #8
2e920     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2e924                 | LR__4710
2e924                 | LR__4711
2e924                 | LR__4712
2e924                 | LR__4713
2e924                 | ' 			}
2e924                 | ' 		}
2e924                 | ' 		;
2e924                 | ' 	}
2e924                 | ' 
2e924                 | ' 	return res ;
2e924     0C 4E 05 F1 | 	add	fp, #12
2e928     A7 FA 01 FB | 	rdlong	result1, fp
2e92c     0C 4E 85 F1 | 	sub	fp, #12
2e930     A7 F0 03 F6 | 	mov	ptra, fp
2e934     B2 00 A0 FD | 	call	#popregs_
2e938                 | _fatfs_cc_f_stat_ret
2e938     2D 00 64 FD | 	ret
2e93c                 | 
2e93c                 | _fatfs_cc_f_unlink
2e93c     00 4A 05 F6 | 	mov	COUNT_, #0
2e940     A8 00 A0 FD | 	call	#pushregs_
2e944     74 F0 07 F1 | 	add	ptra, #116
2e948     04 4E 05 F1 | 	add	fp, #4
2e94c     A7 12 62 FC | 	wrlong	arg01, fp
2e950     68 4E 05 F1 | 	add	fp, #104
2e954     A7 00 68 FC | 	wrlong	#0, fp
2e958     68 4E 85 F1 | 	sub	fp, #104
2e95c     A7 12 02 F6 | 	mov	arg01, fp
2e960     6C 4E 05 F1 | 	add	fp, #108
2e964     A7 14 02 F6 | 	mov	arg02, fp
2e968     70 4E 85 F1 | 	sub	fp, #112
2e96c     02 16 06 F6 | 	mov	arg03, #2
2e970     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2e974     08 4E 05 F1 | 	add	fp, #8
2e978     A7 FA 61 FC | 	wrlong	result1, fp
2e97c     08 4E 85 F1 | 	sub	fp, #8
2e980     00 FA 0D F2 | 	cmp	result1, #0 wz
2e984     E4 01 90 5D |  if_ne	jmp	#LR__4728
2e988     70 4E 05 F1 | 	add	fp, #112
2e98c     A7 16 02 FB | 	rdlong	arg03, fp
2e990     64 4E 85 F1 | 	sub	fp, #100
2e994     A7 16 62 FC | 	wrlong	arg03, fp
2e998     A7 12 02 F6 | 	mov	arg01, fp
2e99c     08 4E 85 F1 | 	sub	fp, #8
2e9a0     A7 14 02 FB | 	rdlong	arg02, fp
2e9a4     04 4E 85 F1 | 	sub	fp, #4
2e9a8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2e9ac     08 4E 05 F1 | 	add	fp, #8
2e9b0     A7 FA 61 FC | 	wrlong	result1, fp
2e9b4     00 FA 4D F2 | 	cmps	result1, #0 wz
2e9b8     08 4E 85 F1 | 	sub	fp, #8
2e9bc     AC 01 90 5D |  if_ne	jmp	#LR__4727
2e9c0     37 4E 05 F1 | 	add	fp, #55
2e9c4     A7 FA C1 FA | 	rdbyte	result1, fp
2e9c8     37 4E 85 F1 | 	sub	fp, #55
2e9cc     80 FA CD F7 | 	test	result1, #128 wz
2e9d0     08 4E 05 51 |  if_ne	add	fp, #8
2e9d4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e9d8     08 4E 85 51 |  if_ne	sub	fp, #8
2e9dc     1C 00 90 5D |  if_ne	jmp	#LR__4720
2e9e0     12 4E 05 F1 | 	add	fp, #18
2e9e4     A7 FA C1 FA | 	rdbyte	result1, fp
2e9e8     12 4E 85 F1 | 	sub	fp, #18
2e9ec     01 FA CD F7 | 	test	result1, #1 wz
2e9f0     08 4E 05 51 |  if_ne	add	fp, #8
2e9f4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2e9f8     08 4E 85 51 |  if_ne	sub	fp, #8
2e9fc                 | LR__4720
2e9fc     08 4E 05 F1 | 	add	fp, #8
2ea00     A7 FA 09 FB | 	rdlong	result1, fp wz
2ea04     08 4E 85 F1 | 	sub	fp, #8
2ea08     C8 00 90 5D |  if_ne	jmp	#LR__4723
2ea0c     70 4E 05 F1 | 	add	fp, #112
2ea10     A7 12 02 FB | 	rdlong	arg01, fp
2ea14     48 4E 85 F1 | 	sub	fp, #72
2ea18     A7 14 02 FB | 	rdlong	arg02, fp
2ea1c     28 4E 85 F1 | 	sub	fp, #40
2ea20     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2ea24     6C 4E 05 F1 | 	add	fp, #108
2ea28     A7 FA 61 FC | 	wrlong	result1, fp
2ea2c     5A 4E 85 F1 | 	sub	fp, #90
2ea30     A7 FA C1 FA | 	rdbyte	result1, fp
2ea34     12 4E 85 F1 | 	sub	fp, #18
2ea38     10 FA CD F7 | 	test	result1, #16 wz
2ea3c     94 00 90 AD |  if_e	jmp	#LR__4722
2ea40     70 4E 05 F1 | 	add	fp, #112
2ea44     A7 FA 01 FB | 	rdlong	result1, fp
2ea48     34 4E 85 F1 | 	sub	fp, #52
2ea4c     A7 FA 61 FC | 	wrlong	result1, fp
2ea50     30 4E 05 F1 | 	add	fp, #48
2ea54     A7 16 02 FB | 	rdlong	arg03, fp
2ea58     28 4E 85 F1 | 	sub	fp, #40
2ea5c     A7 16 62 FC | 	wrlong	arg03, fp
2ea60     08 4E 85 F1 | 	sub	fp, #8
2ea64     A7 12 02 F6 | 	mov	arg01, fp
2ea68     3C 4E 85 F1 | 	sub	fp, #60
2ea6c     00 14 06 F6 | 	mov	arg02, #0
2ea70     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ea74     08 4E 05 F1 | 	add	fp, #8
2ea78     A7 FA 61 FC | 	wrlong	result1, fp
2ea7c     08 4E 85 F1 | 	sub	fp, #8
2ea80     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea84     4C 00 90 5D |  if_ne	jmp	#LR__4721
2ea88     3C 4E 05 F1 | 	add	fp, #60
2ea8c     A7 12 02 F6 | 	mov	arg01, fp
2ea90     3C 4E 85 F1 | 	sub	fp, #60
2ea94     00 14 06 F6 | 	mov	arg02, #0
2ea98     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2ea9c     08 4E 05 F1 | 	add	fp, #8
2eaa0     A7 FA 61 FC | 	wrlong	result1, fp
2eaa4     00 FA 4D F2 | 	cmps	result1, #0 wz
2eaa8     08 4E 85 F1 | 	sub	fp, #8
2eaac     08 4E 05 A1 |  if_e	add	fp, #8
2eab0     A7 0E 68 AC |  if_e	wrlong	#7, fp
2eab4     08 4E 85 A1 |  if_e	sub	fp, #8
2eab8     08 4E 05 F1 | 	add	fp, #8
2eabc     A7 FA 01 FB | 	rdlong	result1, fp
2eac0     08 4E 85 F1 | 	sub	fp, #8
2eac4     04 FA 0D F2 | 	cmp	result1, #4 wz
2eac8     08 4E 05 A1 |  if_e	add	fp, #8
2eacc     A7 00 68 AC |  if_e	wrlong	#0, fp
2ead0     08 4E 85 A1 |  if_e	sub	fp, #8
2ead4                 | LR__4721
2ead4                 | LR__4722
2ead4                 | LR__4723
2ead4     08 4E 05 F1 | 	add	fp, #8
2ead8     A7 FA 09 FB | 	rdlong	result1, fp wz
2eadc     08 4E 85 F1 | 	sub	fp, #8
2eae0     88 00 90 5D |  if_ne	jmp	#LR__4726
2eae4     0C 4E 05 F1 | 	add	fp, #12
2eae8     A7 12 02 F6 | 	mov	arg01, fp
2eaec     0C 4E 85 F1 | 	sub	fp, #12
2eaf0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2eaf4     08 4E 05 F1 | 	add	fp, #8
2eaf8     A7 FA 61 FC | 	wrlong	result1, fp
2eafc     08 4E 85 F1 | 	sub	fp, #8
2eb00     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb04     38 00 90 5D |  if_ne	jmp	#LR__4724
2eb08     6C 4E 05 F1 | 	add	fp, #108
2eb0c     A7 FA 09 FB | 	rdlong	result1, fp wz
2eb10     6C 4E 85 F1 | 	sub	fp, #108
2eb14     28 00 90 AD |  if_e	jmp	#LR__4724
2eb18     0C 4E 05 F1 | 	add	fp, #12
2eb1c     A7 12 02 F6 | 	mov	arg01, fp
2eb20     60 4E 05 F1 | 	add	fp, #96
2eb24     A7 14 02 FB | 	rdlong	arg02, fp
2eb28     6C 4E 85 F1 | 	sub	fp, #108
2eb2c     00 16 06 F6 | 	mov	arg03, #0
2eb30     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2eb34     08 4E 05 F1 | 	add	fp, #8
2eb38     A7 FA 61 FC | 	wrlong	result1, fp
2eb3c     08 4E 85 F1 | 	sub	fp, #8
2eb40                 | LR__4724
2eb40     08 4E 05 F1 | 	add	fp, #8
2eb44     A7 FA 09 FB | 	rdlong	result1, fp wz
2eb48     08 4E 85 F1 | 	sub	fp, #8
2eb4c     1C 00 90 5D |  if_ne	jmp	#LR__4725
2eb50     70 4E 05 F1 | 	add	fp, #112
2eb54     A7 12 02 FB | 	rdlong	arg01, fp
2eb58     70 4E 85 F1 | 	sub	fp, #112
2eb5c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2eb60     08 4E 05 F1 | 	add	fp, #8
2eb64     A7 FA 61 FC | 	wrlong	result1, fp
2eb68     08 4E 85 F1 | 	sub	fp, #8
2eb6c                 | LR__4725
2eb6c                 | LR__4726
2eb6c                 | LR__4727
2eb6c                 | LR__4728
2eb6c                 | ' 			}
2eb6c                 | ' 		}
2eb6c                 | ' 		;
2eb6c                 | ' 	}
2eb6c                 | ' 
2eb6c                 | ' 	return res ;
2eb6c     08 4E 05 F1 | 	add	fp, #8
2eb70     A7 FA 01 FB | 	rdlong	result1, fp
2eb74     08 4E 85 F1 | 	sub	fp, #8
2eb78     A7 F0 03 F6 | 	mov	ptra, fp
2eb7c     B2 00 A0 FD | 	call	#popregs_
2eb80                 | _fatfs_cc_f_unlink_ret
2eb80     2D 00 64 FD | 	ret
2eb84                 | 
2eb84                 | _fatfs_cc_f_mkdir
2eb84     00 4A 05 F6 | 	mov	COUNT_, #0
2eb88     A8 00 A0 FD | 	call	#pushregs_
2eb8c     5C F0 07 F1 | 	add	ptra, #92
2eb90     04 4E 05 F1 | 	add	fp, #4
2eb94     A7 12 62 FC | 	wrlong	arg01, fp
2eb98     A7 12 02 F6 | 	mov	arg01, fp
2eb9c     48 4E 05 F1 | 	add	fp, #72
2eba0     A7 14 02 F6 | 	mov	arg02, fp
2eba4     4C 4E 85 F1 | 	sub	fp, #76
2eba8     02 16 06 F6 | 	mov	arg03, #2
2ebac     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2ebb0     08 4E 05 F1 | 	add	fp, #8
2ebb4     A7 FA 61 FC | 	wrlong	result1, fp
2ebb8     08 4E 85 F1 | 	sub	fp, #8
2ebbc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebc0     C4 02 90 5D |  if_ne	jmp	#LR__4735
2ebc4     4C 4E 05 F1 | 	add	fp, #76
2ebc8     A7 16 02 FB | 	rdlong	arg03, fp
2ebcc     40 4E 85 F1 | 	sub	fp, #64
2ebd0     A7 16 62 FC | 	wrlong	arg03, fp
2ebd4     A7 12 02 F6 | 	mov	arg01, fp
2ebd8     08 4E 85 F1 | 	sub	fp, #8
2ebdc     A7 14 02 FB | 	rdlong	arg02, fp
2ebe0     04 4E 85 F1 | 	sub	fp, #4
2ebe4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2ebe8     08 4E 05 F1 | 	add	fp, #8
2ebec     A7 FA 61 FC | 	wrlong	result1, fp
2ebf0     00 FA 4D F2 | 	cmps	result1, #0 wz
2ebf4     08 4E 85 F1 | 	sub	fp, #8
2ebf8     08 4E 05 A1 |  if_e	add	fp, #8
2ebfc     A7 10 68 AC |  if_e	wrlong	#8, fp
2ec00     08 4E 85 A1 |  if_e	sub	fp, #8
2ec04     08 4E 05 F1 | 	add	fp, #8
2ec08     A7 FA 01 FB | 	rdlong	result1, fp
2ec0c     08 4E 85 F1 | 	sub	fp, #8
2ec10     04 FA 0D F2 | 	cmp	result1, #4 wz
2ec14     70 02 90 5D |  if_ne	jmp	#LR__4734
2ec18     4C 4E 05 F1 | 	add	fp, #76
2ec1c     A7 16 02 FB | 	rdlong	arg03, fp
2ec20     10 4E 85 F1 | 	sub	fp, #16
2ec24     A7 16 62 FC | 	wrlong	arg03, fp
2ec28     A7 12 02 F6 | 	mov	arg01, fp
2ec2c     3C 4E 85 F1 | 	sub	fp, #60
2ec30     00 14 06 F6 | 	mov	arg02, #0
2ec34     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2ec38     50 4E 05 F1 | 	add	fp, #80
2ec3c     A7 FA 61 FC | 	wrlong	result1, fp
2ec40     48 4E 85 F1 | 	sub	fp, #72
2ec44     A7 00 68 FC | 	wrlong	#0, fp
2ec48     48 4E 05 F1 | 	add	fp, #72
2ec4c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ec50     50 4E 85 F1 | 	sub	fp, #80
2ec54     08 4E 05 A1 |  if_e	add	fp, #8
2ec58     A7 0E 68 AC |  if_e	wrlong	#7, fp
2ec5c     08 4E 85 A1 |  if_e	sub	fp, #8
2ec60     50 4E 05 F1 | 	add	fp, #80
2ec64     A7 FA 01 FB | 	rdlong	result1, fp
2ec68     50 4E 85 F1 | 	sub	fp, #80
2ec6c     01 FA 0D F2 | 	cmp	result1, #1 wz
2ec70     08 4E 05 A1 |  if_e	add	fp, #8
2ec74     A7 04 68 AC |  if_e	wrlong	#2, fp
2ec78     08 4E 85 A1 |  if_e	sub	fp, #8
2ec7c     50 4E 05 F1 | 	add	fp, #80
2ec80     A7 16 02 FB | 	rdlong	arg03, fp
2ec84     50 4E 85 F1 | 	sub	fp, #80
2ec88     FF FF 7F FF 
2ec8c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2ec90     08 4E 05 A1 |  if_e	add	fp, #8
2ec94     A7 02 68 AC |  if_e	wrlong	#1, fp
2ec98     08 4E 85 A1 |  if_e	sub	fp, #8
2ec9c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2eca0     58 4E 05 F1 | 	add	fp, #88
2eca4     A7 FA 61 FC | 	wrlong	result1, fp
2eca8     50 4E 85 F1 | 	sub	fp, #80
2ecac     A7 FA 09 FB | 	rdlong	result1, fp wz
2ecb0     08 4E 85 F1 | 	sub	fp, #8
2ecb4     1C 01 90 5D |  if_ne	jmp	#LR__4731
2ecb8     4C 4E 05 F1 | 	add	fp, #76
2ecbc     A7 12 02 FB | 	rdlong	arg01, fp
2ecc0     04 4E 05 F1 | 	add	fp, #4
2ecc4     A7 14 02 FB | 	rdlong	arg02, fp
2ecc8     50 4E 85 F1 | 	sub	fp, #80
2eccc     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2ecd0     08 4E 05 F1 | 	add	fp, #8
2ecd4     A7 FA 61 FC | 	wrlong	result1, fp
2ecd8     00 FA 4D F2 | 	cmps	result1, #0 wz
2ecdc     08 4E 85 F1 | 	sub	fp, #8
2ece0     F0 00 90 5D |  if_ne	jmp	#LR__4730
2ece4     4C 4E 05 F1 | 	add	fp, #76
2ece8     A7 12 02 FB | 	rdlong	arg01, fp
2ecec     4C 4E 85 F1 | 	sub	fp, #76
2ecf0     34 12 06 F1 | 	add	arg01, #52
2ecf4     20 14 06 F6 | 	mov	arg02, #32
2ecf8     0B 16 06 F6 | 	mov	arg03, #11
2ecfc     98 00 A0 FD | 	call	#\builtin_bytefill_
2ed00     4C 4E 05 F1 | 	add	fp, #76
2ed04     A7 FA 01 FB | 	rdlong	result1, fp
2ed08     34 FA 05 F1 | 	add	result1, #52
2ed0c     FD 5C 48 FC | 	wrbyte	#46, result1
2ed10     A7 16 02 FB | 	rdlong	arg03, fp
2ed14     3F 16 06 F1 | 	add	arg03, #63
2ed18     0B 21 48 FC | 	wrbyte	#16, arg03
2ed1c     A7 12 02 FB | 	rdlong	arg01, fp
2ed20     4A 12 06 F1 | 	add	arg01, #74
2ed24     0C 4E 05 F1 | 	add	fp, #12
2ed28     A7 14 02 FB | 	rdlong	arg02, fp
2ed2c     09 15 62 FC | 	wrlong	arg02, arg01
2ed30     0C 4E 85 F1 | 	sub	fp, #12
2ed34     A7 14 02 FB | 	rdlong	arg02, fp
2ed38     0A 13 02 F6 | 	mov	arg01, arg02
2ed3c     34 14 06 F1 | 	add	arg02, #52
2ed40     04 4E 05 F1 | 	add	fp, #4
2ed44     A7 16 02 FB | 	rdlong	arg03, fp
2ed48     50 4E 85 F1 | 	sub	fp, #80
2ed4c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ed50     4C 4E 05 F1 | 	add	fp, #76
2ed54     A7 14 02 FB | 	rdlong	arg02, fp
2ed58     0A 13 02 F6 | 	mov	arg01, arg02
2ed5c     54 12 06 F1 | 	add	arg01, #84
2ed60     4C 4E 85 F1 | 	sub	fp, #76
2ed64     34 14 06 F1 | 	add	arg02, #52
2ed68     20 16 06 F6 | 	mov	arg03, #32
2ed6c     74 27 BF FD | 	call	#__system____builtin_memmove
2ed70     4C 4E 05 F1 | 	add	fp, #76
2ed74     A7 16 02 FB | 	rdlong	arg03, fp
2ed78     55 16 06 F1 | 	add	arg03, #85
2ed7c     0B 5D 48 FC | 	wrbyte	#46, arg03
2ed80     38 4E 85 F1 | 	sub	fp, #56
2ed84     A7 16 02 FB | 	rdlong	arg03, fp
2ed88     40 4E 05 F1 | 	add	fp, #64
2ed8c     A7 16 62 FC | 	wrlong	arg03, fp
2ed90     08 4E 85 F1 | 	sub	fp, #8
2ed94     A7 14 02 FB | 	rdlong	arg02, fp
2ed98     0A 13 02 F6 | 	mov	arg01, arg02
2ed9c     54 14 06 F1 | 	add	arg02, #84
2eda0     4C 4E 85 F1 | 	sub	fp, #76
2eda4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2eda8     4C 4E 05 F1 | 	add	fp, #76
2edac     A7 16 02 FB | 	rdlong	arg03, fp
2edb0     03 16 06 F1 | 	add	arg03, #3
2edb4     0B 03 48 FC | 	wrbyte	#1, arg03
2edb8     40 4E 85 F1 | 	sub	fp, #64
2edbc     A7 12 02 F6 | 	mov	arg01, fp
2edc0     0C 4E 85 F1 | 	sub	fp, #12
2edc4     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2edc8     08 4E 05 F1 | 	add	fp, #8
2edcc     A7 FA 61 FC | 	wrlong	result1, fp
2edd0     08 4E 85 F1 | 	sub	fp, #8
2edd4                 | LR__4730
2edd4                 | LR__4731
2edd4     08 4E 05 F1 | 	add	fp, #8
2edd8     A7 FA 09 FB | 	rdlong	result1, fp wz
2eddc     08 4E 85 F1 | 	sub	fp, #8
2ede0     88 00 90 5D |  if_ne	jmp	#LR__4732
2ede4     28 4E 05 F1 | 	add	fp, #40
2ede8     A7 12 02 FB | 	rdlong	arg01, fp
2edec     16 12 06 F1 | 	add	arg01, #22
2edf0     30 4E 05 F1 | 	add	fp, #48
2edf4     A7 14 02 FB | 	rdlong	arg02, fp
2edf8     09 15 62 FC | 	wrlong	arg02, arg01
2edfc     0C 4E 85 F1 | 	sub	fp, #12
2ee00     A7 12 02 FB | 	rdlong	arg01, fp
2ee04     24 4E 85 F1 | 	sub	fp, #36
2ee08     A7 14 02 FB | 	rdlong	arg02, fp
2ee0c     28 4E 05 F1 | 	add	fp, #40
2ee10     A7 16 02 FB | 	rdlong	arg03, fp
2ee14     50 4E 85 F1 | 	sub	fp, #80
2ee18     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2ee1c     28 4E 05 F1 | 	add	fp, #40
2ee20     A7 FA 01 FB | 	rdlong	result1, fp
2ee24     0B FA 05 F1 | 	add	result1, #11
2ee28     FD 20 48 FC | 	wrbyte	#16, result1
2ee2c     24 4E 05 F1 | 	add	fp, #36
2ee30     A7 FA 01 FB | 	rdlong	result1, fp
2ee34     03 FA 05 F1 | 	add	result1, #3
2ee38     FD 02 48 FC | 	wrbyte	#1, result1
2ee3c     44 4E 85 F1 | 	sub	fp, #68
2ee40     A7 FA 09 FB | 	rdlong	result1, fp wz
2ee44     08 4E 85 F1 | 	sub	fp, #8
2ee48     3C 00 90 5D |  if_ne	jmp	#LR__4733
2ee4c     4C 4E 05 F1 | 	add	fp, #76
2ee50     A7 12 02 FB | 	rdlong	arg01, fp
2ee54     4C 4E 85 F1 | 	sub	fp, #76
2ee58     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2ee5c     08 4E 05 F1 | 	add	fp, #8
2ee60     A7 FA 61 FC | 	wrlong	result1, fp
2ee64     08 4E 85 F1 | 	sub	fp, #8
2ee68     1C 00 90 FD | 	jmp	#LR__4733
2ee6c                 | LR__4732
2ee6c     3C 4E 05 F1 | 	add	fp, #60
2ee70     A7 12 02 F6 | 	mov	arg01, fp
2ee74     14 4E 05 F1 | 	add	fp, #20
2ee78     A7 14 02 FB | 	rdlong	arg02, fp
2ee7c     50 4E 85 F1 | 	sub	fp, #80
2ee80     00 16 06 F6 | 	mov	arg03, #0
2ee84     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2ee88                 | LR__4733
2ee88                 | LR__4734
2ee88                 | LR__4735
2ee88                 | ' 				remove_chain(&sobj, dcl, 0);
2ee88                 | ' 			}
2ee88                 | ' 		}
2ee88                 | ' 		;
2ee88                 | ' 	}
2ee88                 | ' 
2ee88                 | ' 	return res ;
2ee88     08 4E 05 F1 | 	add	fp, #8
2ee8c     A7 FA 01 FB | 	rdlong	result1, fp
2ee90     08 4E 85 F1 | 	sub	fp, #8
2ee94     A7 F0 03 F6 | 	mov	ptra, fp
2ee98     B2 00 A0 FD | 	call	#popregs_
2ee9c                 | _fatfs_cc_f_mkdir_ret
2ee9c     2D 00 64 FD | 	ret
2eea0                 | 
2eea0                 | _fatfs_cc_f_rename
2eea0     01 4A 05 F6 | 	mov	COUNT_, #1
2eea4     A8 00 A0 FD | 	call	#pushregs_
2eea8     9C F0 07 F1 | 	add	ptra, #156
2eeac     04 4E 05 F1 | 	add	fp, #4
2eeb0     A7 12 62 FC | 	wrlong	arg01, fp
2eeb4     04 4E 05 F1 | 	add	fp, #4
2eeb8     A7 14 62 FC | 	wrlong	arg02, fp
2eebc     A7 12 02 F6 | 	mov	arg01, fp
2eec0     08 4E 85 F1 | 	sub	fp, #8
2eec4     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2eec8     04 4E 05 F1 | 	add	fp, #4
2eecc     A7 12 02 F6 | 	mov	arg01, fp
2eed0     6C 4E 05 F1 | 	add	fp, #108
2eed4     A7 14 02 F6 | 	mov	arg02, fp
2eed8     70 4E 85 F1 | 	sub	fp, #112
2eedc     02 16 06 F6 | 	mov	arg03, #2
2eee0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2eee4     0C 4E 05 F1 | 	add	fp, #12
2eee8     A7 FA 61 FC | 	wrlong	result1, fp
2eeec     0C 4E 85 F1 | 	sub	fp, #12
2eef0     00 FA 0D F2 | 	cmp	result1, #0 wz
2eef4     44 03 90 5D |  if_ne	jmp	#LR__4753
2eef8     70 4E 05 F1 | 	add	fp, #112
2eefc     A7 16 02 FB | 	rdlong	arg03, fp
2ef00     60 4E 85 F1 | 	sub	fp, #96
2ef04     A7 16 62 FC | 	wrlong	arg03, fp
2ef08     A7 12 02 F6 | 	mov	arg01, fp
2ef0c     0C 4E 85 F1 | 	sub	fp, #12
2ef10     A7 14 02 FB | 	rdlong	arg02, fp
2ef14     04 4E 85 F1 | 	sub	fp, #4
2ef18     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2ef1c     0C 4E 05 F1 | 	add	fp, #12
2ef20     A7 FA 61 FC | 	wrlong	result1, fp
2ef24     00 FA 4D F2 | 	cmps	result1, #0 wz
2ef28     0C 4E 85 F1 | 	sub	fp, #12
2ef2c     1C 00 90 5D |  if_ne	jmp	#LR__4740
2ef30     3B 4E 05 F1 | 	add	fp, #59
2ef34     A7 FA C1 FA | 	rdbyte	result1, fp
2ef38     3B 4E 85 F1 | 	sub	fp, #59
2ef3c     A0 FA CD F7 | 	test	result1, #160 wz
2ef40     0C 4E 05 51 |  if_ne	add	fp, #12
2ef44     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ef48     0C 4E 85 51 |  if_ne	sub	fp, #12
2ef4c                 | LR__4740
2ef4c     0C 4E 05 F1 | 	add	fp, #12
2ef50     A7 1E 0A FB | 	rdlong	local01, fp wz
2ef54     0C 4E 85 F1 | 	sub	fp, #12
2ef58     E0 02 90 5D |  if_ne	jmp	#LR__4752
2ef5c     74 4E 05 F1 | 	add	fp, #116
2ef60     A7 12 02 F6 | 	mov	arg01, fp
2ef64     48 4E 85 F1 | 	sub	fp, #72
2ef68     A7 14 02 FB | 	rdlong	arg02, fp
2ef6c     2C 4E 85 F1 | 	sub	fp, #44
2ef70     20 16 06 F6 | 	mov	arg03, #32
2ef74     6C 25 BF FD | 	call	#__system____builtin_memmove
2ef78     40 4E 05 F1 | 	add	fp, #64
2ef7c     A7 12 02 F6 | 	mov	arg01, fp
2ef80     30 4E 85 F1 | 	sub	fp, #48
2ef84     A7 14 02 F6 | 	mov	arg02, fp
2ef88     10 4E 85 F1 | 	sub	fp, #16
2ef8c     30 16 06 F6 | 	mov	arg03, #48
2ef90     50 25 BF FD | 	call	#__system____builtin_memmove
2ef94     40 4E 05 F1 | 	add	fp, #64
2ef98     A7 12 02 F6 | 	mov	arg01, fp
2ef9c     38 4E 85 F1 | 	sub	fp, #56
2efa0     A7 14 02 FB | 	rdlong	arg02, fp
2efa4     08 4E 85 F1 | 	sub	fp, #8
2efa8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2efac     0C 4E 05 F1 | 	add	fp, #12
2efb0     A7 FA 61 FC | 	wrlong	result1, fp
2efb4     0C 4E 85 F1 | 	sub	fp, #12
2efb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2efbc     4C 00 90 5D |  if_ne	jmp	#LR__4743
2efc0     48 4E 05 F1 | 	add	fp, #72
2efc4     A7 FA 01 FB | 	rdlong	result1, fp
2efc8     30 4E 85 F1 | 	sub	fp, #48
2efcc     A7 16 02 FB | 	rdlong	arg03, fp
2efd0     18 4E 85 F1 | 	sub	fp, #24
2efd4     0B FB 09 F2 | 	cmp	result1, arg03 wz
2efd8     20 00 90 5D |  if_ne	jmp	#LR__4741
2efdc     50 4E 05 F1 | 	add	fp, #80
2efe0     A7 FA 01 FB | 	rdlong	result1, fp
2efe4     30 4E 85 F1 | 	sub	fp, #48
2efe8     A7 16 02 FB | 	rdlong	arg03, fp
2efec     20 4E 85 F1 | 	sub	fp, #32
2eff0     0B FB 09 F2 | 	cmp	result1, arg03 wz
2eff4     04 1E 06 A6 |  if_e	mov	local01, #4
2eff8     04 00 90 AD |  if_e	jmp	#LR__4742
2effc                 | LR__4741
2effc     08 1E 06 F6 | 	mov	local01, #8
2f000                 | LR__4742
2f000     0C 4E 05 F1 | 	add	fp, #12
2f004     A7 1E 62 FC | 	wrlong	local01, fp
2f008     0C 4E 85 F1 | 	sub	fp, #12
2f00c                 | LR__4743
2f00c     0C 4E 05 F1 | 	add	fp, #12
2f010     A7 1E 02 FB | 	rdlong	local01, fp
2f014     0C 4E 85 F1 | 	sub	fp, #12
2f018     04 1E 0E F2 | 	cmp	local01, #4 wz
2f01c     CC 01 90 5D |  if_ne	jmp	#LR__4749
2f020     40 4E 05 F1 | 	add	fp, #64
2f024     A7 12 02 F6 | 	mov	arg01, fp
2f028     40 4E 85 F1 | 	sub	fp, #64
2f02c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2f030     0C 4E 05 F1 | 	add	fp, #12
2f034     A7 FA 61 FC | 	wrlong	result1, fp
2f038     0C 4E 85 F1 | 	sub	fp, #12
2f03c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f040     A8 01 90 5D |  if_ne	jmp	#LR__4748
2f044     5C 4E 05 F1 | 	add	fp, #92
2f048     A7 12 02 FB | 	rdlong	arg01, fp
2f04c     38 4E 05 F1 | 	add	fp, #56
2f050     A7 12 62 FC | 	wrlong	arg01, fp
2f054     0D 12 06 F1 | 	add	arg01, #13
2f058     20 4E 85 F1 | 	sub	fp, #32
2f05c     A7 14 02 F6 | 	mov	arg02, fp
2f060     74 4E 85 F1 | 	sub	fp, #116
2f064     0D 14 06 F1 | 	add	arg02, #13
2f068     13 16 06 F6 | 	mov	arg03, #19
2f06c     74 24 BF FD | 	call	#__system____builtin_memmove
2f070     94 4E 05 F1 | 	add	fp, #148
2f074     A7 1E 02 FB | 	rdlong	local01, fp
2f078     15 4E 85 F1 | 	sub	fp, #21
2f07c     A7 FA C1 FA | 	rdbyte	result1, fp
2f080     0B 1E 06 F1 | 	add	local01, #11
2f084     0F FB 41 FC | 	wrbyte	result1, local01
2f088     15 4E 05 F1 | 	add	fp, #21
2f08c     A7 1E 02 FB | 	rdlong	local01, fp
2f090     94 4E 85 F1 | 	sub	fp, #148
2f094     0B 1E 06 F1 | 	add	local01, #11
2f098     0F 1F C2 FA | 	rdbyte	local01, local01
2f09c     10 1E CE F7 | 	test	local01, #16 wz
2f0a0     24 00 90 5D |  if_ne	jmp	#LR__4744
2f0a4     94 4E 05 F1 | 	add	fp, #148
2f0a8     A7 FA 01 FB | 	rdlong	result1, fp
2f0ac     FD 1E 02 F6 | 	mov	local01, result1
2f0b0     94 4E 85 F1 | 	sub	fp, #148
2f0b4     0B FA 05 F1 | 	add	result1, #11
2f0b8     FD FA C1 FA | 	rdbyte	result1, result1
2f0bc     20 FA 45 F5 | 	or	result1, #32
2f0c0     0B 1E 06 F1 | 	add	local01, #11
2f0c4     0F FB 41 FC | 	wrbyte	result1, local01
2f0c8                 | LR__4744
2f0c8     70 4E 05 F1 | 	add	fp, #112
2f0cc     A7 1E 02 FB | 	rdlong	local01, fp
2f0d0     03 1E 06 F1 | 	add	local01, #3
2f0d4     0F 03 48 FC | 	wrbyte	#1, local01
2f0d8     24 4E 05 F1 | 	add	fp, #36
2f0dc     A7 1E 02 FB | 	rdlong	local01, fp
2f0e0     94 4E 85 F1 | 	sub	fp, #148
2f0e4     0B 1E 06 F1 | 	add	local01, #11
2f0e8     0F 1F C2 FA | 	rdbyte	local01, local01
2f0ec     10 1E CE F7 | 	test	local01, #16 wz
2f0f0     F8 00 90 AD |  if_e	jmp	#LR__4747
2f0f4     18 4E 05 F1 | 	add	fp, #24
2f0f8     A7 16 02 FB | 	rdlong	arg03, fp
2f0fc     30 4E 05 F1 | 	add	fp, #48
2f100     A7 1E 02 FB | 	rdlong	local01, fp
2f104     48 4E 85 F1 | 	sub	fp, #72
2f108     0F 17 0A F2 | 	cmp	arg03, local01 wz
2f10c     DC 00 90 AD |  if_e	jmp	#LR__4747
2f110     70 4E 05 F1 | 	add	fp, #112
2f114     A7 12 02 FB | 	rdlong	arg01, fp
2f118     09 1F 02 F6 | 	mov	local01, arg01
2f11c     24 4E 05 F1 | 	add	fp, #36
2f120     A7 14 02 FB | 	rdlong	arg02, fp
2f124     94 4E 85 F1 | 	sub	fp, #148
2f128     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2f12c     FD 14 02 F6 | 	mov	arg02, result1
2f130     0F 13 02 F6 | 	mov	arg01, local01
2f134     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2f138     98 4E 05 F1 | 	add	fp, #152
2f13c     A7 FA 61 FC | 	wrlong	result1, fp
2f140     00 FA 4D F2 | 	cmps	result1, #0 wz
2f144     98 4E 85 F1 | 	sub	fp, #152
2f148     0C 4E 05 A1 |  if_e	add	fp, #12
2f14c     A7 04 68 AC |  if_e	wrlong	#2, fp
2f150     0C 4E 85 A1 |  if_e	sub	fp, #12
2f154     94 00 90 AD |  if_e	jmp	#LR__4746
2f158     70 4E 05 F1 | 	add	fp, #112
2f15c     A7 12 02 FB | 	rdlong	arg01, fp
2f160     28 4E 05 F1 | 	add	fp, #40
2f164     A7 14 02 FB | 	rdlong	arg02, fp
2f168     98 4E 85 F1 | 	sub	fp, #152
2f16c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2f170     0C 4E 05 F1 | 	add	fp, #12
2f174     A7 FA 61 FC | 	wrlong	result1, fp
2f178     64 4E 05 F1 | 	add	fp, #100
2f17c     A7 1E 02 FB | 	rdlong	local01, fp
2f180     54 1E 06 F1 | 	add	local01, #84
2f184     24 4E 05 F1 | 	add	fp, #36
2f188     A7 1E 62 FC | 	wrlong	local01, fp
2f18c     88 4E 85 F1 | 	sub	fp, #136
2f190     A7 1E 0A FB | 	rdlong	local01, fp wz
2f194     0C 4E 85 F1 | 	sub	fp, #12
2f198     50 00 90 5D |  if_ne	jmp	#LR__4745
2f19c     94 4E 05 F1 | 	add	fp, #148
2f1a0     A7 1E 02 FB | 	rdlong	local01, fp
2f1a4     94 4E 85 F1 | 	sub	fp, #148
2f1a8     01 1E 06 F1 | 	add	local01, #1
2f1ac     0F 1F C2 FA | 	rdbyte	local01, local01
2f1b0     2E 1E 0E F2 | 	cmp	local01, #46 wz
2f1b4     34 00 90 5D |  if_ne	jmp	#LR__4745
2f1b8     70 4E 05 F1 | 	add	fp, #112
2f1bc     A7 12 02 FB | 	rdlong	arg01, fp
2f1c0     24 4E 05 F1 | 	add	fp, #36
2f1c4     A7 14 02 FB | 	rdlong	arg02, fp
2f1c8     4C 4E 85 F1 | 	sub	fp, #76
2f1cc     A7 16 02 FB | 	rdlong	arg03, fp
2f1d0     48 4E 85 F1 | 	sub	fp, #72
2f1d4     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2f1d8     70 4E 05 F1 | 	add	fp, #112
2f1dc     A7 1E 02 FB | 	rdlong	local01, fp
2f1e0     70 4E 85 F1 | 	sub	fp, #112
2f1e4     03 1E 06 F1 | 	add	local01, #3
2f1e8     0F 03 48 FC | 	wrbyte	#1, local01
2f1ec                 | LR__4745
2f1ec                 | LR__4746
2f1ec                 | LR__4747
2f1ec                 | LR__4748
2f1ec                 | LR__4749
2f1ec     0C 4E 05 F1 | 	add	fp, #12
2f1f0     A7 1E 0A FB | 	rdlong	local01, fp wz
2f1f4     0C 4E 85 F1 | 	sub	fp, #12
2f1f8     40 00 90 5D |  if_ne	jmp	#LR__4751
2f1fc     10 4E 05 F1 | 	add	fp, #16
2f200     A7 12 02 F6 | 	mov	arg01, fp
2f204     10 4E 85 F1 | 	sub	fp, #16
2f208     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2f20c     0C 4E 05 F1 | 	add	fp, #12
2f210     A7 FA 61 FC | 	wrlong	result1, fp
2f214     0C 4E 85 F1 | 	sub	fp, #12
2f218     00 FA 0D F2 | 	cmp	result1, #0 wz
2f21c     1C 00 90 5D |  if_ne	jmp	#LR__4750
2f220     70 4E 05 F1 | 	add	fp, #112
2f224     A7 12 02 FB | 	rdlong	arg01, fp
2f228     70 4E 85 F1 | 	sub	fp, #112
2f22c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2f230     0C 4E 05 F1 | 	add	fp, #12
2f234     A7 FA 61 FC | 	wrlong	result1, fp
2f238     0C 4E 85 F1 | 	sub	fp, #12
2f23c                 | LR__4750
2f23c                 | LR__4751
2f23c                 | LR__4752
2f23c                 | LR__4753
2f23c                 | ' 					res = sync_fs(fs);
2f23c                 | ' 				}
2f23c                 | ' 			}
2f23c                 | ' 
2f23c                 | ' 		}
2f23c                 | ' 		;
2f23c                 | ' 	}
2f23c                 | ' 
2f23c                 | ' 	return res ;
2f23c     0C 4E 05 F1 | 	add	fp, #12
2f240     A7 FA 01 FB | 	rdlong	result1, fp
2f244     0C 4E 85 F1 | 	sub	fp, #12
2f248     A7 F0 03 F6 | 	mov	ptra, fp
2f24c     B2 00 A0 FD | 	call	#popregs_
2f250                 | _fatfs_cc_f_rename_ret
2f250     2D 00 64 FD | 	ret
2f254                 | 
2f254                 | _fatfs_cc_time
2f254     00 4A 05 F6 | 	mov	COUNT_, #0
2f258     A8 00 A0 FD | 	call	#pushregs_
2f25c     14 F0 07 F1 | 	add	ptra, #20
2f260     04 4E 05 F1 | 	add	fp, #4
2f264     A7 12 62 FC | 	wrlong	arg01, fp
2f268     04 4E 05 F1 | 	add	fp, #4
2f26c     A7 12 02 F6 | 	mov	arg01, fp
2f270     08 4E 85 F1 | 	sub	fp, #8
2f274     00 14 06 F6 | 	mov	arg02, #0
2f278     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2f27c     08 4E 05 F1 | 	add	fp, #8
2f280     A7 FA 01 FB | 	rdlong	result1, fp
2f284     08 4E 05 F1 | 	add	fp, #8
2f288     A7 FA 61 FC | 	wrlong	result1, fp
2f28c     0C 4E 85 F1 | 	sub	fp, #12
2f290     A7 FA 09 FB | 	rdlong	result1, fp wz
2f294     04 4E 85 F1 | 	sub	fp, #4
2f298     18 00 90 AD |  if_e	jmp	#LR__4760
2f29c     04 4E 05 F1 | 	add	fp, #4
2f2a0     A7 FA 01 FB | 	rdlong	result1, fp
2f2a4     0C 4E 05 F1 | 	add	fp, #12
2f2a8     A7 14 02 FB | 	rdlong	arg02, fp
2f2ac     10 4E 85 F1 | 	sub	fp, #16
2f2b0     FD 14 62 FC | 	wrlong	arg02, result1
2f2b4                 | LR__4760
2f2b4                 | '         *tp = now;
2f2b4                 | '     return now;
2f2b4     10 4E 05 F1 | 	add	fp, #16
2f2b8     A7 FA 01 FB | 	rdlong	result1, fp
2f2bc     10 4E 85 F1 | 	sub	fp, #16
2f2c0     A7 F0 03 F6 | 	mov	ptra, fp
2f2c4     B2 00 A0 FD | 	call	#popregs_
2f2c8                 | _fatfs_cc_time_ret
2f2c8     2D 00 64 FD | 	ret
2f2cc                 | 
2f2cc                 | _fatfs_cc_mktime
2f2cc     06 4A 05 F6 | 	mov	COUNT_, #6
2f2d0     A8 00 A0 FD | 	call	#pushregs_
2f2d4     09 1F 02 F6 | 	mov	local01, arg01
2f2d8     14 1E 06 F1 | 	add	local01, #20
2f2dc     0F 13 02 FB | 	rdlong	arg01, local01
2f2e0     14 1E 86 F1 | 	sub	local01, #20
2f2e4     46 12 56 F2 | 	cmps	arg01, #70 wc
2f2e8                 | '                 return (time_t) -1;
2f2e8     01 FA 65 C6 |  if_b	neg	result1, #1
2f2ec     7C 01 90 CD |  if_b	jmp	#LR__4774
2f2f0     03 00 00 FF 
2f2f4     6C 21 06 F6 | 	mov	local02, ##1900
2f2f8     14 1E 06 F1 | 	add	local01, #20
2f2fc     0F FB 01 FB | 	rdlong	result1, local01
2f300     FD 20 02 F1 | 	add	local02, result1
2f304     08 1E 86 F1 | 	sub	local01, #8
2f308     0F 23 02 FB | 	rdlong	local03, local01
2f30c     01 22 86 F1 | 	sub	local03, #1
2f310     04 1E 06 F1 | 	add	local01, #4
2f314     0F 13 02 FB | 	rdlong	arg01, local01
2f318     10 1E 86 F1 | 	sub	local01, #16
2f31c     02 12 66 F0 | 	shl	arg01, #2
2f320     02 00 00 FF 
2f324     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2f328     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2f32c     09 FB 01 FB | 	rdlong	result1, arg01
2f330     FD 22 02 F1 | 	add	local03, result1
2f334     10 13 02 F6 | 	mov	arg01, local02
2f338     02 00 00 FF 
2f33c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2f340     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f344     00 FA 0D F2 | 	cmp	result1, #0 wz
2f348     1C 00 90 AD |  if_e	jmp	#LR__4770
2f34c     00 24 06 F6 | 	mov	local04, #0
2f350     10 1E 06 F1 | 	add	local01, #16
2f354     0F FB 01 FB | 	rdlong	result1, local01
2f358     10 1E 86 F1 | 	sub	local01, #16
2f35c     02 FA 55 F2 | 	cmps	result1, #2 wc
2f360     01 24 06 36 |  if_ae	mov	local04, #1
2f364     04 00 90 FD | 	jmp	#LR__4771
2f368                 | LR__4770
2f368     00 24 06 F6 | 	mov	local04, #0
2f36c                 | LR__4771
2f36c     04 1E 06 F1 | 	add	local01, #4
2f370     0F FB 01 FB | 	rdlong	result1, local01
2f374     04 1E 86 F1 | 	sub	local01, #4
2f378     0F 27 02 FB | 	rdlong	local05, local01
2f37c     08 1E 06 F1 | 	add	local01, #8
2f380     0F 13 02 FB | 	rdlong	arg01, local01
2f384     07 00 00 FF 
2f388     10 12 06 FD | 	qmul	arg01, ##3600
2f38c     12 23 02 F1 | 	add	local03, local04
2f390     FD 24 02 F6 | 	mov	local04, result1
2f394     04 24 66 F0 | 	shl	local04, #4
2f398     FD 24 82 F1 | 	sub	local04, result1
2f39c     02 24 66 F0 | 	shl	local04, #2
2f3a0     12 27 02 F1 | 	add	local05, local04
2f3a4     08 1E 86 F1 | 	sub	local01, #8
2f3a8     18 24 62 FD | 	getqx	local04
2f3ac     A8 00 00 FF 
2f3b0     80 23 06 FD | 	qmul	local03, ##86400
2f3b4     12 27 02 F1 | 	add	local05, local04
2f3b8     10 23 02 F6 | 	mov	local03, local02
2f3bc     03 00 00 FF 
2f3c0     B2 23 86 F1 | 	sub	local03, ##1970
2f3c4     18 24 62 FD | 	getqx	local04
2f3c8     99 F0 00 FF 
2f3cc     80 23 06 FD | 	qmul	local03, ##31536000
2f3d0     12 27 02 F1 | 	add	local05, local04
2f3d4     10 23 02 F6 | 	mov	local03, local02
2f3d8     03 00 00 FF 
2f3dc     B1 23 86 F1 | 	sub	local03, ##1969
2f3e0     11 29 52 F6 | 	abs	local06, local03 wc
2f3e4     02 28 46 F0 | 	shr	local06, #2
2f3e8     14 29 82 F6 | 	negc	local06, local06
2f3ec     03 00 00 FF 
2f3f0     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2f3f4     18 24 62 FD | 	getqx	local04
2f3f8     12 27 02 F1 | 	add	local05, local04
2f3fc     18 00 90 CD |  if_b	jmp	#LR__4772
2f400     03 00 00 FF 
2f404     D0 21 86 F1 | 	sub	local02, ##2000
2f408     10 25 52 F6 | 	abs	local04, local02 wc
2f40c     64 24 16 FD | 	qdiv	local04, #100
2f410     18 24 62 FD | 	getqx	local04
2f414     12 29 A2 F3 | 	sumnc	local06, local04
2f418                 | LR__4772
2f418     A8 00 00 FF 
2f41c     80 29 06 FD | 	qmul	local06, ##86400
2f420     18 28 62 FD | 	getqx	local06
2f424     14 27 02 F1 | 	add	local05, local06
2f428     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2f42c     02 00 00 FF 
2f430     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2f434     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2f438     14 27 02 F1 | 	add	local05, local06
2f43c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2f440     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2f444     02 00 00 FF 
2f448     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2f44c     01 22 0E F2 | 	cmp	local03, #1 wz
2f450     14 00 90 5D |  if_ne	jmp	#LR__4773
2f454     0F 13 02 F6 | 	mov	arg01, local01
2f458     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2f45c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f460     07 00 00 5F 
2f464     10 26 86 51 |  if_ne	sub	local05, ##3600
2f468                 | LR__4773
2f468                 | '                 s -=  (3600L) ;
2f468                 | ' 
2f468                 | '         return s;
2f468     13 FB 01 F6 | 	mov	result1, local05
2f46c                 | LR__4774
2f46c     A7 F0 03 F6 | 	mov	ptra, fp
2f470     B2 00 A0 FD | 	call	#popregs_
2f474                 | _fatfs_cc_mktime_ret
2f474     2D 00 64 FD | 	ret
2f478                 | 
2f478                 | _fatfs_cc__gmtime_r
2f478     03 4A 05 F6 | 	mov	COUNT_, #3
2f47c     A8 00 A0 FD | 	call	#pushregs_
2f480     09 1F 02 FB | 	rdlong	local01, arg01
2f484     A8 00 00 FF 
2f488     80 1F 16 FD | 	qdiv	local01, ##86400
2f48c     18 FA 61 FD | 	getqx	result1
2f490     04 FA 05 F1 | 	add	result1, #4
2f494     07 FA 15 FD | 	qdiv	result1, #7
2f498     18 14 06 F1 | 	add	arg02, #24
2f49c     D1 7F 27 FF 
2f4a0     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2f4a4     D1 7F 27 3F 
2f4a8     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2f4ac     03 00 00 3F 
2f4b0     DC 21 06 36 |  if_ae	mov	local02, ##2012
2f4b4     03 00 00 CF 
2f4b8     B2 21 06 C6 |  if_b	mov	local02, ##1970
2f4bc                 | ' 	  year = 1970;
2f4bc                 | ' 	}
2f4bc                 | ' 
2f4bc                 | ' 	for(;;) {
2f4bc     19 FA 61 FD | 	getqy	result1
2f4c0     0A FB 61 FC | 	wrlong	result1, arg02
2f4c4     18 14 86 F1 | 	sub	arg02, #24
2f4c8                 | LR__4780
2f4c8     10 13 02 F6 | 	mov	arg01, local02
2f4cc     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f4d4     42 F1 00 5F 
2f4d8     00 23 06 56 |  if_ne	mov	local03, ##31622400
2f4dc     99 F0 00 AF 
2f4e0     80 23 06 A6 |  if_e	mov	local03, ##31536000
2f4e4     11 1F 12 F2 | 	cmp	local01, local03 wc
2f4e8                 | ' 	    break;
2f4e8     01 20 06 31 |  if_ae	add	local02, #1
2f4ec     11 1F 82 31 |  if_ae	sub	local01, local03
2f4f0     D4 FF 9F 3D |  if_ae	jmp	#LR__4780
2f4f4     A8 00 00 FF 
2f4f8     80 1F 16 FD | 	qdiv	local01, ##86400
2f4fc     10 23 02 F6 | 	mov	local03, local02
2f500     03 00 00 FF 
2f504     6C 23 86 F1 | 	sub	local03, ##1900
2f508     14 14 06 F1 | 	add	arg02, #20
2f50c     0A 23 62 FC | 	wrlong	local03, arg02
2f510     08 14 06 F1 | 	add	arg02, #8
2f514     10 13 02 F6 | 	mov	arg01, local02
2f518     18 20 62 FD | 	getqx	local02
2f51c     0A 21 62 FC | 	wrlong	local02, arg02
2f520     1C 14 86 F1 | 	sub	arg02, #28
2f524     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f528     00 FA 0D F2 | 	cmp	result1, #0 wz
2f52c     1D 22 06 56 |  if_ne	mov	local03, #29
2f530     1C 22 06 A6 |  if_e	mov	local03, #28
2f534     02 00 00 FF 
2f538     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2f53c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2f540     02 00 00 FF 
2f544     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2f548                 | ' 
2f548                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2f548                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2f548     00 12 06 F6 | 	mov	arg01, #0
2f54c     97 2A 48 FB | 	callpa	#(@LR__4782-@LR__4781)>>2,fcache_load_ptr_
2f550                 | LR__4781
2f550     09 23 02 F6 | 	mov	local03, arg01
2f554     02 22 66 F0 | 	shl	local03, #2
2f558     02 00 00 FF 
2f55c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2f560     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2f564     11 23 02 FB | 	rdlong	local03, local03
2f568     11 21 52 F2 | 	cmps	local02, local03 wc
2f56c     02 00 00 FF 
2f570     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2f574     2C 00 90 CD |  if_b	jmp	#LR__4783
2f578     09 23 02 F6 | 	mov	local03, arg01
2f57c     02 22 66 F0 | 	shl	local03, #2
2f580     02 00 00 FF 
2f584     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2f588     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2f58c     11 23 02 FB | 	rdlong	local03, local03
2f590     11 21 82 F1 | 	sub	local02, local03
2f594     01 12 06 F1 | 	add	arg01, #1
2f598     02 00 00 FF 
2f59c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2f5a0     AC FF 9F FD | 	jmp	#LR__4781
2f5a4                 | LR__4782
2f5a4                 | LR__4783
2f5a4     A8 00 00 FF 
2f5a8     80 1F 16 FD | 	qdiv	local01, ##86400
2f5ac     10 14 06 F1 | 	add	arg02, #16
2f5b0     0A 13 62 FC | 	wrlong	arg01, arg02
2f5b4     01 20 06 F1 | 	add	local02, #1
2f5b8     04 14 86 F1 | 	sub	arg02, #4
2f5bc     0A 21 62 FC | 	wrlong	local02, arg02
2f5c0     19 1E 62 FD | 	getqy	local01
2f5c4     07 00 00 FF 
2f5c8     10 1E 16 FD | 	qdiv	local01, ##3600
2f5cc     18 22 62 FD | 	getqx	local03
2f5d0     07 00 00 FF 
2f5d4     10 1E 16 FD | 	qdiv	local01, ##3600
2f5d8     04 14 86 F1 | 	sub	arg02, #4
2f5dc     0A 23 62 FC | 	wrlong	local03, arg02
2f5e0     19 1E 62 FD | 	getqy	local01
2f5e4     3C 1E 16 FD | 	qdiv	local01, #60
2f5e8     18 22 62 FD | 	getqx	local03
2f5ec     3C 1E 16 FD | 	qdiv	local01, #60
2f5f0     04 14 86 F1 | 	sub	arg02, #4
2f5f4     0A 23 62 FC | 	wrlong	local03, arg02
2f5f8     04 14 86 F1 | 	sub	arg02, #4
2f5fc                 | '         stm->tm_isdst = 0;
2f5fc                 | ' 
2f5fc                 | ' ;
2f5fc                 | '         return stm;
2f5fc     0A FB 01 F6 | 	mov	result1, arg02
2f600     19 22 62 FD | 	getqy	local03
2f604     0A 23 62 FC | 	wrlong	local03, arg02
2f608     20 14 06 F1 | 	add	arg02, #32
2f60c     0A 01 68 FC | 	wrlong	#0, arg02
2f610     A7 F0 03 F6 | 	mov	ptra, fp
2f614     B2 00 A0 FD | 	call	#popregs_
2f618                 | _fatfs_cc__gmtime_r_ret
2f618     2D 00 64 FD | 	ret
2f61c                 | 
2f61c                 | _fatfs_cc__tzset
2f61c     88 01 00 FF 
2f620     61 13 06 F6 | 	mov	arg01, ##@LR__5095
2f624     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2f628     FD 12 02 F6 | 	mov	arg01, result1
2f62c     02 00 00 FF 
2f630     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2f634     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2f638     02 00 00 FF 
2f63c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2f640     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2f644     02 00 00 FF 
2f648     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2f64c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2f650     02 00 00 FF 
2f654     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2f658                 | _fatfs_cc__tzset_ret
2f658     2D 00 64 FD | 	ret
2f65c                 | 
2f65c                 | _fatfs_cc_getenv
2f65c     06 4A 05 F6 | 	mov	COUNT_, #6
2f660     A8 00 A0 FD | 	call	#pushregs_
2f664     09 1F 02 F6 | 	mov	local01, arg01
2f668     09 21 02 F6 | 	mov	local02, arg01
2f66c     97 06 48 FB | 	callpa	#(@LR__4791-@LR__4790)>>2,fcache_load_ptr_
2f670                 | LR__4790
2f670     10 FB C9 FA | 	rdbyte	result1, local02 wz
2f674     01 20 06 51 |  if_ne	add	local02, #1
2f678     F4 FF 9F 5D |  if_ne	jmp	#LR__4790
2f67c                 | LR__4791
2f67c     09 21 82 F1 | 	sub	local02, arg01
2f680     10 FB 01 F6 | 	mov	result1, local02
2f684     02 00 00 FF 
2f688     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2f68c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2f690     02 00 00 FF 
2f694     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2f698                 | '             return 0;
2f698     00 FA 05 A6 |  if_e	mov	result1, #0
2f69c     5C 00 90 AD |  if_e	jmp	#LR__4794
2f6a0                 | ' 
2f6a0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2f6a0     02 00 00 FF 
2f6a4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2f6a8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2f6ac     02 00 00 FF 
2f6b0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2f6b4                 | LR__4792
2f6b4     11 25 0A FB | 	rdlong	local04, local03 wz
2f6b8     3C 00 90 AD |  if_e	jmp	#LR__4793
2f6bc     12 13 02 F6 | 	mov	arg01, local04
2f6c0     0F 15 02 F6 | 	mov	arg02, local01
2f6c4     10 17 02 F6 | 	mov	arg03, local02
2f6c8     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2f6cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6d0     10 27 02 A6 |  if_e	mov	local05, local02
2f6d4     12 27 02 A1 |  if_e	add	local05, local04
2f6d8     13 29 C2 AA |  if_e	rdbyte	local06, local05
2f6dc     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2f6e0                 | ' 			return name+len+1;
2f6e0     10 25 02 A1 |  if_e	add	local04, local02
2f6e4     01 24 06 A1 |  if_e	add	local04, #1
2f6e8     12 FB 01 A6 |  if_e	mov	result1, local04
2f6ec     0C 00 90 AD |  if_e	jmp	#LR__4794
2f6f0     04 22 06 F1 | 	add	local03, #4
2f6f4     BC FF 9F FD | 	jmp	#LR__4792
2f6f8                 | LR__4793
2f6f8                 | ' 	}
2f6f8                 | ' 	return 0;
2f6f8     00 FA 05 F6 | 	mov	result1, #0
2f6fc                 | LR__4794
2f6fc     A7 F0 03 F6 | 	mov	ptra, fp
2f700     B2 00 A0 FD | 	call	#popregs_
2f704                 | _fatfs_cc_getenv_ret
2f704     2D 00 64 FD | 	ret
2f708                 | 
2f708                 | _fatfs_cc__get_fattime
2f708     00 4A 05 F6 | 	mov	COUNT_, #0
2f70c     A8 00 A0 FD | 	call	#pushregs_
2f710     34 F0 07 F1 | 	add	ptra, #52
2f714     00 12 06 F6 | 	mov	arg01, #0
2f718     38 FB BF FD | 	call	#_fatfs_cc_time
2f71c     04 4E 05 F1 | 	add	fp, #4
2f720     A7 FA 61 FC | 	wrlong	result1, fp
2f724     A7 12 02 F6 | 	mov	arg01, fp
2f728     0C 4E 05 F1 | 	add	fp, #12
2f72c     A7 14 02 F6 | 	mov	arg02, fp
2f730     10 4E 85 F1 | 	sub	fp, #16
2f734     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2f738     24 4E 05 F1 | 	add	fp, #36
2f73c     A7 14 02 FB | 	rdlong	arg02, fp
2f740     50 14 86 F1 | 	sub	arg02, #80
2f744     09 14 66 F0 | 	shl	arg02, #9
2f748     04 4E 85 F1 | 	sub	fp, #4
2f74c     A7 FA 01 FB | 	rdlong	result1, fp
2f750     01 FA 05 F1 | 	add	result1, #1
2f754     05 FA 65 F0 | 	shl	result1, #5
2f758     FD 14 42 F5 | 	or	arg02, result1
2f75c     04 4E 85 F1 | 	sub	fp, #4
2f760     A7 FA 01 FB | 	rdlong	result1, fp
2f764     FD 14 42 F5 | 	or	arg02, result1
2f768     14 4E 85 F1 | 	sub	fp, #20
2f76c     A7 14 62 FC | 	wrlong	arg02, fp
2f770     10 4E 05 F1 | 	add	fp, #16
2f774     A7 14 02 FB | 	rdlong	arg02, fp
2f778     0B 14 66 F0 | 	shl	arg02, #11
2f77c     04 4E 85 F1 | 	sub	fp, #4
2f780     A7 FA 01 FB | 	rdlong	result1, fp
2f784     05 FA 65 F0 | 	shl	result1, #5
2f788     FD 14 42 F5 | 	or	arg02, result1
2f78c     04 4E 85 F1 | 	sub	fp, #4
2f790     A7 FA 01 FB | 	rdlong	result1, fp
2f794     FD 14 42 F5 | 	or	arg02, result1
2f798     04 4E 85 F1 | 	sub	fp, #4
2f79c     A7 14 62 FC | 	wrlong	arg02, fp
2f7a0                 | ' 
2f7a0                 | '     now = time(0);
2f7a0                 | '     _gmtime_r (&now, &date);
2f7a0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2f7a0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2f7a0                 | '     return (ffdate << 16) | fftime;
2f7a0     04 4E 85 F1 | 	sub	fp, #4
2f7a4     A7 FA 01 FB | 	rdlong	result1, fp
2f7a8     10 FA 65 F0 | 	shl	result1, #16
2f7ac     08 4E 85 F1 | 	sub	fp, #8
2f7b0     0A FB 41 F5 | 	or	result1, arg02
2f7b4     A7 F0 03 F6 | 	mov	ptra, fp
2f7b8     B2 00 A0 FD | 	call	#popregs_
2f7bc                 | _fatfs_cc__get_fattime_ret
2f7bc     2D 00 64 FD | 	ret
2f7c0                 | 
2f7c0                 | _fatfs_cc_unixtime_0993
2f7c0     00 4A 05 F6 | 	mov	COUNT_, #0
2f7c4     A8 00 A0 FD | 	call	#pushregs_
2f7c8     34 F0 07 F1 | 	add	ptra, #52
2f7cc     04 4E 05 F1 | 	add	fp, #4
2f7d0     A7 12 62 FC | 	wrlong	arg01, fp
2f7d4     04 4E 05 F1 | 	add	fp, #4
2f7d8     A7 14 62 FC | 	wrlong	arg02, fp
2f7dc     04 4E 85 F1 | 	sub	fp, #4
2f7e0     A7 14 02 FB | 	rdlong	arg02, fp
2f7e4     09 14 46 F0 | 	shr	arg02, #9
2f7e8     7F 14 06 F5 | 	and	arg02, #127
2f7ec     50 FA 05 F6 | 	mov	result1, #80
2f7f0     0A FB 01 F1 | 	add	result1, arg02
2f7f4     20 4E 05 F1 | 	add	fp, #32
2f7f8     A7 FA 61 FC | 	wrlong	result1, fp
2f7fc     20 4E 85 F1 | 	sub	fp, #32
2f800     A7 FA 01 FB | 	rdlong	result1, fp
2f804     05 FA 45 F0 | 	shr	result1, #5
2f808     FD FA 41 F8 | 	getnib	result1, result1, #0
2f80c     01 FA 85 F1 | 	sub	result1, #1
2f810     1C 4E 05 F1 | 	add	fp, #28
2f814     A7 FA 61 FC | 	wrlong	result1, fp
2f818     1C 4E 85 F1 | 	sub	fp, #28
2f81c     A7 FA 01 FB | 	rdlong	result1, fp
2f820     1F FA 05 F5 | 	and	result1, #31
2f824     18 4E 05 F1 | 	add	fp, #24
2f828     A7 FA 61 FC | 	wrlong	result1, fp
2f82c     14 4E 85 F1 | 	sub	fp, #20
2f830     A7 FA 01 FB | 	rdlong	result1, fp
2f834     0B FA 45 F0 | 	shr	result1, #11
2f838     1F FA 05 F5 | 	and	result1, #31
2f83c     10 4E 05 F1 | 	add	fp, #16
2f840     A7 FA 61 FC | 	wrlong	result1, fp
2f844     10 4E 85 F1 | 	sub	fp, #16
2f848     A7 FA 01 FB | 	rdlong	result1, fp
2f84c     05 FA 45 F0 | 	shr	result1, #5
2f850     3F FA 05 F5 | 	and	result1, #63
2f854     0C 4E 05 F1 | 	add	fp, #12
2f858     A7 FA 61 FC | 	wrlong	result1, fp
2f85c     0C 4E 85 F1 | 	sub	fp, #12
2f860     A7 14 02 FB | 	rdlong	arg02, fp
2f864     1F 14 06 F5 | 	and	arg02, #31
2f868     01 14 66 F0 | 	shl	arg02, #1
2f86c     08 4E 05 F1 | 	add	fp, #8
2f870     A7 14 62 FC | 	wrlong	arg02, fp
2f874     A7 12 02 F6 | 	mov	arg01, fp
2f878     10 4E 85 F1 | 	sub	fp, #16
2f87c     4C FA BF FD | 	call	#_fatfs_cc_mktime
2f880     0C 4E 05 F1 | 	add	fp, #12
2f884     A7 FA 61 FC | 	wrlong	result1, fp
2f888                 | ' 
2f888                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2f888                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2f888                 | '     date.tm_mday = (dosdate & 0x1f);
2f888                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2f888                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2f888                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2f888                 | ' 
2f888                 | '     t = mktime(&date);
2f888                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f888                 | '     return t;
2f888     0C 4E 85 F1 | 	sub	fp, #12
2f88c     A7 F0 03 F6 | 	mov	ptra, fp
2f890     B2 00 A0 FD | 	call	#popregs_
2f894                 | _fatfs_cc_unixtime_0993_ret
2f894     2D 00 64 FD | 	ret
2f898                 | 
2f898                 | _fatfs_cc__set_dos_error_0995
2f898     09 01 02 F6 | 	mov	_var01, arg01
2f89c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f89c                 | '     switch (derr) {
2f89c     14 00 26 F3 | 	fle	_var01, #20
2f8a0     30 00 62 FD | 	jmprel	_var01
2f8a4                 | LR__4800
2f8a4     50 00 90 FD | 	jmp	#LR__4801
2f8a8     84 00 90 FD | 	jmp	#LR__4815
2f8ac     80 00 90 FD | 	jmp	#LR__4816
2f8b0     7C 00 90 FD | 	jmp	#LR__4817
2f8b4     48 00 90 FD | 	jmp	#LR__4802
2f8b8     44 00 90 FD | 	jmp	#LR__4803
2f8bc     40 00 90 FD | 	jmp	#LR__4804
2f8c0     44 00 90 FD | 	jmp	#LR__4805
2f8c4     48 00 90 FD | 	jmp	#LR__4807
2f8c8     54 00 90 FD | 	jmp	#LR__4810
2f8cc     38 00 90 FD | 	jmp	#LR__4806
2f8d0     4C 00 90 FD | 	jmp	#LR__4811
2f8d4     48 00 90 FD | 	jmp	#LR__4812
2f8d8     44 00 90 FD | 	jmp	#LR__4813
2f8dc     50 00 90 FD | 	jmp	#LR__4818
2f8e0     4C 00 90 FD | 	jmp	#LR__4818
2f8e4     48 00 90 FD | 	jmp	#LR__4818
2f8e8     2C 00 90 FD | 	jmp	#LR__4808
2f8ec     38 00 90 FD | 	jmp	#LR__4814
2f8f0     2C 00 90 FD | 	jmp	#LR__4809
2f8f4     38 00 90 FD | 	jmp	#LR__4818
2f8f8                 | LR__4801
2f8f8     00 02 06 F6 | 	mov	_var02, #0
2f8fc                 | '         r = 0;
2f8fc                 | '         break;
2f8fc     34 00 90 FD | 	jmp	#LR__4819
2f900                 | LR__4802
2f900                 | LR__4803
2f900                 | LR__4804
2f900     04 02 06 F6 | 	mov	_var02, #4
2f904                 | '         r =  4 ;
2f904                 | '         break;
2f904     2C 00 90 FD | 	jmp	#LR__4819
2f908                 | LR__4805
2f908                 | LR__4806
2f908     06 02 06 F6 | 	mov	_var02, #6
2f90c                 | '         r =  6 ;
2f90c                 | '         break;
2f90c     24 00 90 FD | 	jmp	#LR__4819
2f910                 | LR__4807
2f910     09 02 06 F6 | 	mov	_var02, #9
2f914                 | '         r =  9 ;
2f914                 | '         break;
2f914     1C 00 90 FD | 	jmp	#LR__4819
2f918                 | LR__4808
2f918     07 02 06 F6 | 	mov	_var02, #7
2f91c                 | '         r =  7 ;
2f91c                 | '         break;
2f91c     14 00 90 FD | 	jmp	#LR__4819
2f920                 | LR__4809
2f920                 | LR__4810
2f920                 | LR__4811
2f920                 | LR__4812
2f920                 | LR__4813
2f920     0A 02 06 F6 | 	mov	_var02, #10
2f924                 | '         r =  10 ;
2f924                 | '         break;
2f924     0C 00 90 FD | 	jmp	#LR__4819
2f928                 | LR__4814
2f928     0B 02 06 F6 | 	mov	_var02, #11
2f92c                 | '         r =  11 ;
2f92c                 | '         break;
2f92c     04 00 90 FD | 	jmp	#LR__4819
2f930                 | LR__4815
2f930                 | LR__4816
2f930                 | LR__4817
2f930                 | LR__4818
2f930     0C 02 06 F6 | 	mov	_var02, #12
2f934                 | '         r =  12 ;
2f934                 | '         break;
2f934                 | LR__4819
2f934                 | '     }
2f934                 | '     return _seterror(r);
2f934     00 02 4E F2 | 	cmps	_var02, #0 wz
2f938     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f93c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2f940     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f944     01 FA 65 56 |  if_ne	neg	result1, #1
2f948     00 FA 05 A6 |  if_e	mov	result1, #0
2f94c                 | _fatfs_cc__set_dos_error_0995_ret
2f94c     2D 00 64 FD | 	ret
2f950                 | 
2f950                 | _fatfs_cc_v_creat
2f950     04 4A 05 F6 | 	mov	COUNT_, #4
2f954     A8 00 A0 FD | 	call	#pushregs_
2f958     09 1F 02 F6 | 	mov	local01, arg01
2f95c     0A 21 02 F6 | 	mov	local02, arg02
2f960     03 00 00 FF 
2f964     3C 12 06 F6 | 	mov	arg01, ##1596
2f968                 | '     return _gc_alloc(size);
2f968     10 14 06 F6 | 	mov	arg02, #16
2f96c     68 5D BF FD | 	call	#__system___gc_doalloc
2f970     FD 22 0A F6 | 	mov	local03, result1 wz
2f974                 | '       return _seterror( 7 );
2f974     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f978     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f97c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f980     01 FA 65 A6 |  if_e	neg	result1, #1
2f984     58 00 90 AD |  if_e	jmp	#LR__4821
2f988     11 13 02 F6 | 	mov	arg01, local03
2f98c     00 14 06 F6 | 	mov	arg02, #0
2f990     03 00 00 FF 
2f994     3C 16 06 F6 | 	mov	arg03, ##1596
2f998     98 00 A0 FD | 	call	#\builtin_bytefill_
2f99c     02 00 00 FF 
2f9a0     14 22 06 F1 | 	add	local03, ##1044
2f9a4     11 13 02 F6 | 	mov	arg01, local03
2f9a8     02 00 00 FF 
2f9ac     14 22 86 F1 | 	sub	local03, ##1044
2f9b0     10 15 02 F6 | 	mov	arg02, local02
2f9b4     07 16 06 F6 | 	mov	arg03, #7
2f9b8     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2f9bc     FD 24 0A F6 | 	mov	local04, result1 wz
2f9c0     14 00 90 AD |  if_e	jmp	#LR__4820
2f9c4     11 13 02 F6 | 	mov	arg01, local03
2f9c8                 | '     return _gc_free(ptr);
2f9c8     18 5E BF FD | 	call	#__system___gc_free
2f9cc                 | '     free(f);
2f9cc                 | '     return _set_dos_error(r);
2f9cc     12 13 02 F6 | 	mov	arg01, local04
2f9d0     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0995
2f9d4     08 00 90 FD | 	jmp	#LR__4821
2f9d8                 | LR__4820
2f9d8     0F 23 62 FC | 	wrlong	local03, local01
2f9dc                 | '   }
2f9dc                 | '   fil->vfsdata = f;
2f9dc                 | '   return 0;
2f9dc     00 FA 05 F6 | 	mov	result1, #0
2f9e0                 | LR__4821
2f9e0     A7 F0 03 F6 | 	mov	ptra, fp
2f9e4     B2 00 A0 FD | 	call	#popregs_
2f9e8                 | _fatfs_cc_v_creat_ret
2f9e8     2D 00 64 FD | 	ret
2f9ec                 | 
2f9ec                 | _fatfs_cc_v_close
2f9ec     02 4A 05 F6 | 	mov	COUNT_, #2
2f9f0     A8 00 A0 FD | 	call	#pushregs_
2f9f4     09 1F 02 FB | 	rdlong	local01, arg01
2f9f8     02 00 00 FF 
2f9fc     14 1E 06 F1 | 	add	local01, ##1044
2fa00     0F 13 02 F6 | 	mov	arg01, local01
2fa04     02 00 00 FF 
2fa08     14 1E 86 F1 | 	sub	local01, ##1044
2fa0c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2fa10     FD 20 02 F6 | 	mov	local02, result1
2fa14     0F 13 02 F6 | 	mov	arg01, local01
2fa18                 | '     return _gc_free(ptr);
2fa18     C8 5D BF FD | 	call	#__system___gc_free
2fa1c                 | '     FAT_FIL *f = fil->vfsdata;
2fa1c                 | '     r=f_close(&f->fil);
2fa1c                 | '     free(f);
2fa1c                 | '     return _set_dos_error(r);
2fa1c     10 13 02 F6 | 	mov	arg01, local02
2fa20     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0995
2fa24     A7 F0 03 F6 | 	mov	ptra, fp
2fa28     B2 00 A0 FD | 	call	#popregs_
2fa2c                 | _fatfs_cc_v_close_ret
2fa2c     2D 00 64 FD | 	ret
2fa30                 | 
2fa30                 | _fatfs_cc_v_opendir
2fa30     04 4A 05 F6 | 	mov	COUNT_, #4
2fa34     A8 00 A0 FD | 	call	#pushregs_
2fa38     09 1F 02 F6 | 	mov	local01, arg01
2fa3c     0A 21 02 F6 | 	mov	local02, arg02
2fa40     30 12 06 F6 | 	mov	arg01, #48
2fa44                 | '     return _gc_alloc(size);
2fa44     10 14 06 F6 | 	mov	arg02, #16
2fa48     8C 5C BF FD | 	call	#__system___gc_doalloc
2fa4c     FD 22 0A F6 | 	mov	local03, result1 wz
2fa50                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fa50                 | '       return _seterror( 7 );
2fa50     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fa54     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2fa58     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fa5c     01 FA 65 A6 |  if_e	neg	result1, #1
2fa60     34 00 90 AD |  if_e	jmp	#LR__4831
2fa64     10 15 02 F6 | 	mov	arg02, local02
2fa68     11 13 02 F6 | 	mov	arg01, local03
2fa6c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2fa70     FD 24 0A F6 | 	mov	local04, result1 wz
2fa74     14 00 90 AD |  if_e	jmp	#LR__4830
2fa78     11 13 02 F6 | 	mov	arg01, local03
2fa7c                 | '     return _gc_free(ptr);
2fa7c     64 5D BF FD | 	call	#__system___gc_free
2fa80                 | '         free(f);
2fa80                 | '         return _set_dos_error(r);
2fa80     12 13 02 F6 | 	mov	arg01, local04
2fa84     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0995
2fa88     0C 00 90 FD | 	jmp	#LR__4831
2fa8c                 | LR__4830
2fa8c     04 1E 06 F1 | 	add	local01, #4
2fa90     0F 23 62 FC | 	wrlong	local03, local01
2fa94                 | '     }
2fa94                 | '     dir->vfsdata = f;
2fa94                 | '     return 0;
2fa94     00 FA 05 F6 | 	mov	result1, #0
2fa98                 | LR__4831
2fa98     A7 F0 03 F6 | 	mov	ptra, fp
2fa9c     B2 00 A0 FD | 	call	#popregs_
2faa0                 | _fatfs_cc_v_opendir_ret
2faa0     2D 00 64 FD | 	ret
2faa4                 | 
2faa4                 | _fatfs_cc_v_closedir
2faa4     02 4A 05 F6 | 	mov	COUNT_, #2
2faa8     A8 00 A0 FD | 	call	#pushregs_
2faac     04 12 06 F1 | 	add	arg01, #4
2fab0     09 1F 02 FB | 	rdlong	local01, arg01
2fab4     0F 13 02 F6 | 	mov	arg01, local01
2fab8     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2fabc     FD 20 02 F6 | 	mov	local02, result1
2fac0     0F 13 02 F6 | 	mov	arg01, local01
2fac4                 | '     return _gc_free(ptr);
2fac4     1C 5D BF FD | 	call	#__system___gc_free
2fac8     00 20 0E F2 | 	cmp	local02, #0 wz
2facc     10 13 02 56 |  if_ne	mov	arg01, local02
2fad0     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0995
2fad4                 | '     return r;
2fad4     10 FB 01 F6 | 	mov	result1, local02
2fad8     A7 F0 03 F6 | 	mov	ptra, fp
2fadc     B2 00 A0 FD | 	call	#popregs_
2fae0                 | _fatfs_cc_v_closedir_ret
2fae0     2D 00 64 FD | 	ret
2fae4                 | 
2fae4                 | _fatfs_cc_v_readdir
2fae4     01 4A 05 F6 | 	mov	COUNT_, #1
2fae8     A8 00 A0 FD | 	call	#pushregs_
2faec     2C F1 07 F1 | 	add	ptra, #300
2faf0     04 4E 05 F1 | 	add	fp, #4
2faf4     A7 12 62 FC | 	wrlong	arg01, fp
2faf8     04 4E 05 F1 | 	add	fp, #4
2fafc     A7 14 62 FC | 	wrlong	arg02, fp
2fb00     04 4E 85 F1 | 	sub	fp, #4
2fb04     A7 16 02 FB | 	rdlong	arg03, fp
2fb08     04 16 06 F1 | 	add	arg03, #4
2fb0c     0B 13 02 FB | 	rdlong	arg01, arg03
2fb10     08 4E 05 F1 | 	add	fp, #8
2fb14     A7 14 02 F6 | 	mov	arg02, fp
2fb18     0C 4E 85 F1 | 	sub	fp, #12
2fb1c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2fb20     28 4F 05 F1 | 	add	fp, #296
2fb24     A7 FA 61 FC | 	wrlong	result1, fp
2fb28     28 4F 85 F1 | 	sub	fp, #296
2fb2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb30     14 00 90 AD |  if_e	jmp	#LR__4840
2fb34                 | '         return _set_dos_error(r);
2fb34     28 4F 05 F1 | 	add	fp, #296
2fb38     A7 12 02 FB | 	rdlong	arg01, fp
2fb3c     28 4F 85 F1 | 	sub	fp, #296
2fb40     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0995
2fb44     C4 00 90 FD | 	jmp	#LR__4843
2fb48                 | LR__4840
2fb48     28 4E 05 F1 | 	add	fp, #40
2fb4c     A7 16 CA FA | 	rdbyte	arg03, fp wz
2fb50     28 4E 85 F1 | 	sub	fp, #40
2fb54                 | '         return -1;
2fb54     01 FA 65 A6 |  if_e	neg	result1, #1
2fb58     B0 00 90 AD |  if_e	jmp	#LR__4843
2fb5c     08 4E 05 F1 | 	add	fp, #8
2fb60     A7 12 02 FB | 	rdlong	arg01, fp
2fb64     20 4E 05 F1 | 	add	fp, #32
2fb68     A7 14 02 F6 | 	mov	arg02, fp
2fb6c     28 4E 85 F1 | 	sub	fp, #40
2fb70     3F 16 06 F6 | 	mov	arg03, #63
2fb74     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2fb78     08 4E 05 F1 | 	add	fp, #8
2fb7c     A7 16 02 FB | 	rdlong	arg03, fp
2fb80     3F 16 06 F1 | 	add	arg03, #63
2fb84     0B 01 48 FC | 	wrbyte	#0, arg03
2fb88     0C 4E 05 F1 | 	add	fp, #12
2fb8c     A7 16 C2 FA | 	rdbyte	arg03, fp
2fb90     14 4E 85 F1 | 	sub	fp, #20
2fb94     10 16 CE F7 | 	test	arg03, #16 wz
2fb98     18 00 90 AD |  if_e	jmp	#LR__4841
2fb9c     08 4E 05 F1 | 	add	fp, #8
2fba0     A7 16 02 FB | 	rdlong	arg03, fp
2fba4     08 4E 85 F1 | 	sub	fp, #8
2fba8     50 16 06 F1 | 	add	arg03, #80
2fbac     0B 03 48 FC | 	wrbyte	#1, arg03
2fbb0     14 00 90 FD | 	jmp	#LR__4842
2fbb4                 | LR__4841
2fbb4     08 4E 05 F1 | 	add	fp, #8
2fbb8     A7 16 02 FB | 	rdlong	arg03, fp
2fbbc     08 4E 85 F1 | 	sub	fp, #8
2fbc0     50 16 06 F1 | 	add	arg03, #80
2fbc4     0B 01 48 FC | 	wrbyte	#0, arg03
2fbc8                 | LR__4842
2fbc8     08 4E 05 F1 | 	add	fp, #8
2fbcc     A7 16 02 FB | 	rdlong	arg03, fp
2fbd0     04 4E 05 F1 | 	add	fp, #4
2fbd4     A7 14 02 FB | 	rdlong	arg02, fp
2fbd8     48 16 06 F1 | 	add	arg03, #72
2fbdc     0B 15 62 FC | 	wrlong	arg02, arg03
2fbe0     04 4E 85 F1 | 	sub	fp, #4
2fbe4     A7 1E 02 FB | 	rdlong	local01, fp
2fbe8     08 4E 05 F1 | 	add	fp, #8
2fbec     A7 12 E2 FA | 	rdword	arg01, fp
2fbf0     02 4E 05 F1 | 	add	fp, #2
2fbf4     A7 14 E2 FA | 	rdword	arg02, fp
2fbf8     12 4E 85 F1 | 	sub	fp, #18
2fbfc     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0993
2fc00     4C 1E 06 F1 | 	add	local01, #76
2fc04     0F FB 61 FC | 	wrlong	result1, local01
2fc08                 | '         ent->d_type =  (0) ;
2fc08                 | '     }
2fc08                 | '     ent->d_size = finfo.fsize;
2fc08                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2fc08                 | '     return 0;
2fc08     00 FA 05 F6 | 	mov	result1, #0
2fc0c                 | LR__4843
2fc0c     A7 F0 03 F6 | 	mov	ptra, fp
2fc10     B2 00 A0 FD | 	call	#popregs_
2fc14                 | _fatfs_cc_v_readdir_ret
2fc14     2D 00 64 FD | 	ret
2fc18                 | 
2fc18                 | _fatfs_cc_v_stat
2fc18     03 4A 05 F6 | 	mov	COUNT_, #3
2fc1c     A8 00 A0 FD | 	call	#pushregs_
2fc20     30 F1 07 F1 | 	add	ptra, #304
2fc24     04 4E 05 F1 | 	add	fp, #4
2fc28     A7 12 62 FC | 	wrlong	arg01, fp
2fc2c     04 4E 05 F1 | 	add	fp, #4
2fc30     A7 14 62 FC | 	wrlong	arg02, fp
2fc34     08 4E 85 F1 | 	sub	fp, #8
2fc38     0A 13 02 F6 | 	mov	arg01, arg02
2fc3c     00 14 06 F6 | 	mov	arg02, #0
2fc40     30 16 06 F6 | 	mov	arg03, #48
2fc44     98 00 A0 FD | 	call	#\builtin_bytefill_
2fc48     04 4E 05 F1 | 	add	fp, #4
2fc4c     A7 FA 01 FB | 	rdlong	result1, fp
2fc50     04 4E 85 F1 | 	sub	fp, #4
2fc54     FD FA C9 FA | 	rdbyte	result1, result1 wz
2fc58     2C 00 90 AD |  if_e	jmp	#LR__4850
2fc5c     04 4E 05 F1 | 	add	fp, #4
2fc60     A7 FA 01 FB | 	rdlong	result1, fp
2fc64     04 4E 85 F1 | 	sub	fp, #4
2fc68     FD FA C1 FA | 	rdbyte	result1, result1
2fc6c     2E FA 0D F2 | 	cmp	result1, #46 wz
2fc70     04 4E 05 A1 |  if_e	add	fp, #4
2fc74     A7 1E 02 AB |  if_e	rdlong	local01, fp
2fc78     04 4E 85 A1 |  if_e	sub	fp, #4
2fc7c     01 1E 06 A1 |  if_e	add	local01, #1
2fc80     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2fc84     18 00 90 5D |  if_ne	jmp	#LR__4851
2fc88                 | LR__4850
2fc88     18 4E 05 F1 | 	add	fp, #24
2fc8c     A7 20 48 FC | 	wrbyte	#16, fp
2fc90     0C 4E 85 F1 | 	sub	fp, #12
2fc94     A7 00 68 FC | 	wrlong	#0, fp
2fc98     0C 4E 85 F1 | 	sub	fp, #12
2fc9c     24 00 90 FD | 	jmp	#LR__4852
2fca0                 | LR__4851
2fca0     04 4E 05 F1 | 	add	fp, #4
2fca4     A7 12 02 FB | 	rdlong	arg01, fp
2fca8     0C 4E 05 F1 | 	add	fp, #12
2fcac     A7 14 02 F6 | 	mov	arg02, fp
2fcb0     10 4E 85 F1 | 	sub	fp, #16
2fcb4     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2fcb8     0C 4E 05 F1 | 	add	fp, #12
2fcbc     A7 FA 61 FC | 	wrlong	result1, fp
2fcc0     0C 4E 85 F1 | 	sub	fp, #12
2fcc4                 | LR__4852
2fcc4     0C 4E 05 F1 | 	add	fp, #12
2fcc8     A7 20 0A FB | 	rdlong	local02, fp wz
2fccc     0C 4E 85 F1 | 	sub	fp, #12
2fcd0     14 00 90 AD |  if_e	jmp	#LR__4853
2fcd4                 | '         return _set_dos_error(r);
2fcd4     0C 4E 05 F1 | 	add	fp, #12
2fcd8     A7 12 02 FB | 	rdlong	arg01, fp
2fcdc     0C 4E 85 F1 | 	sub	fp, #12
2fce0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0995
2fce4     14 01 90 FD | 	jmp	#LR__4854
2fce8                 | LR__4853
2fce8     2C 4F 05 F1 | 	add	fp, #300
2fcec     A7 48 6A FC | 	wrlong	#292, fp
2fcf0     14 4F 85 F1 | 	sub	fp, #276
2fcf4     A7 22 C2 FA | 	rdbyte	local03, fp
2fcf8     18 4E 85 F1 | 	sub	fp, #24
2fcfc     01 22 CE F7 | 	test	local03, #1 wz
2fd00     2C 4F 05 A1 |  if_e	add	fp, #300
2fd04     A7 22 02 AB |  if_e	rdlong	local03, fp
2fd08     92 22 46 A5 |  if_e	or	local03, #146
2fd0c     A7 22 62 AC |  if_e	wrlong	local03, fp
2fd10     2C 4F 85 A1 |  if_e	sub	fp, #300
2fd14     18 4E 05 F1 | 	add	fp, #24
2fd18     A7 22 C2 FA | 	rdbyte	local03, fp
2fd1c     18 4E 85 F1 | 	sub	fp, #24
2fd20     10 22 CE F7 | 	test	local03, #16 wz
2fd24     2C 4F 05 51 |  if_ne	add	fp, #300
2fd28     A7 22 02 5B |  if_ne	rdlong	local03, fp
2fd2c     08 00 00 5F 
2fd30     49 22 46 55 |  if_ne	or	local03, ##4169
2fd34     A7 22 62 5C |  if_ne	wrlong	local03, fp
2fd38     2C 4F 85 51 |  if_ne	sub	fp, #300
2fd3c     08 4E 05 F1 | 	add	fp, #8
2fd40     A7 22 02 FB | 	rdlong	local03, fp
2fd44     24 4F 05 F1 | 	add	fp, #292
2fd48     A7 20 02 FB | 	rdlong	local02, fp
2fd4c     08 22 06 F1 | 	add	local03, #8
2fd50     11 21 62 FC | 	wrlong	local02, local03
2fd54     24 4F 85 F1 | 	sub	fp, #292
2fd58     A7 22 02 FB | 	rdlong	local03, fp
2fd5c     0C 22 06 F1 | 	add	local03, #12
2fd60     11 03 68 FC | 	wrlong	#1, local03
2fd64     A7 22 02 FB | 	rdlong	local03, fp
2fd68     08 4E 05 F1 | 	add	fp, #8
2fd6c     A7 20 02 FB | 	rdlong	local02, fp
2fd70     18 22 06 F1 | 	add	local03, #24
2fd74     11 21 62 FC | 	wrlong	local02, local03
2fd78     08 4E 85 F1 | 	sub	fp, #8
2fd7c     A7 22 02 FB | 	rdlong	local03, fp
2fd80     1C 22 06 F1 | 	add	local03, #28
2fd84     01 00 80 FF 
2fd88     11 01 68 FC | 	wrlong	##512, local03
2fd8c     A7 20 02 FB | 	rdlong	local02, fp
2fd90     10 23 02 F6 | 	mov	local03, local02
2fd94     18 20 06 F1 | 	add	local02, #24
2fd98     10 21 02 FB | 	rdlong	local02, local02
2fd9c     FF 21 06 F1 | 	add	local02, #511
2fda0     10 21 52 F6 | 	abs	local02, local02 wc
2fda4     09 20 46 F0 | 	shr	local02, #9
2fda8     10 21 82 F6 | 	negc	local02, local02
2fdac     20 22 06 F1 | 	add	local03, #32
2fdb0     11 21 62 FC | 	wrlong	local02, local03
2fdb4     A7 20 02 FB | 	rdlong	local02, fp
2fdb8     10 23 02 F6 | 	mov	local03, local02
2fdbc     10 1F 02 F6 | 	mov	local01, local02
2fdc0     0C 4E 05 F1 | 	add	fp, #12
2fdc4     A7 12 E2 FA | 	rdword	arg01, fp
2fdc8     02 4E 05 F1 | 	add	fp, #2
2fdcc     A7 14 E2 FA | 	rdword	arg02, fp
2fdd0     16 4E 85 F1 | 	sub	fp, #22
2fdd4     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0993
2fdd8     2C 1E 06 F1 | 	add	local01, #44
2fddc     0F FB 61 FC | 	wrlong	result1, local01
2fde0     28 20 06 F1 | 	add	local02, #40
2fde4     10 FB 61 FC | 	wrlong	result1, local02
2fde8     24 22 06 F1 | 	add	local03, #36
2fdec     11 FB 61 FC | 	wrlong	result1, local03
2fdf0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2fdf0                 | '     }
2fdf0                 | '     buf->st_mode = mode;
2fdf0                 | '     buf->st_nlink = 1;
2fdf0                 | '     buf->st_size = finfo.fsize;
2fdf0                 | '     buf->st_blksize = 512;
2fdf0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2fdf0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2fdf0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fdf0                 | '     return r;
2fdf0     0C 4E 05 F1 | 	add	fp, #12
2fdf4     A7 FA 01 FB | 	rdlong	result1, fp
2fdf8     0C 4E 85 F1 | 	sub	fp, #12
2fdfc                 | LR__4854
2fdfc     A7 F0 03 F6 | 	mov	ptra, fp
2fe00     B2 00 A0 FD | 	call	#popregs_
2fe04                 | _fatfs_cc_v_stat_ret
2fe04     2D 00 64 FD | 	ret
2fe08                 | 
2fe08                 | _fatfs_cc_v_read
2fe08     00 4A 05 F6 | 	mov	COUNT_, #0
2fe0c     A8 00 A0 FD | 	call	#pushregs_
2fe10     1C F0 07 F1 | 	add	ptra, #28
2fe14     04 4E 05 F1 | 	add	fp, #4
2fe18     A7 12 62 FC | 	wrlong	arg01, fp
2fe1c     04 4E 05 F1 | 	add	fp, #4
2fe20     A7 14 62 FC | 	wrlong	arg02, fp
2fe24     04 4E 05 F1 | 	add	fp, #4
2fe28     A7 16 62 FC | 	wrlong	arg03, fp
2fe2c     08 4E 85 F1 | 	sub	fp, #8
2fe30     A7 12 02 FB | 	rdlong	arg01, fp
2fe34     09 13 0A FB | 	rdlong	arg01, arg01 wz
2fe38     0C 4E 05 F1 | 	add	fp, #12
2fe3c     A7 12 62 FC | 	wrlong	arg01, fp
2fe40     10 4E 85 F1 | 	sub	fp, #16
2fe44                 | '         return _seterror( 5 );
2fe44     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fe48     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2fe4c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fe50     01 FA 65 A6 |  if_e	neg	result1, #1
2fe54     B8 00 90 AD |  if_e	jmp	#LR__4862
2fe58     10 4E 05 F1 | 	add	fp, #16
2fe5c     A7 12 02 FB | 	rdlong	arg01, fp
2fe60     02 00 00 FF 
2fe64     14 12 06 F1 | 	add	arg01, ##1044
2fe68     08 4E 85 F1 | 	sub	fp, #8
2fe6c     A7 14 02 FB | 	rdlong	arg02, fp
2fe70     04 4E 05 F1 | 	add	fp, #4
2fe74     A7 16 02 FB | 	rdlong	arg03, fp
2fe78     0C 4E 05 F1 | 	add	fp, #12
2fe7c     A7 18 02 F6 | 	mov	arg04, fp
2fe80     18 4E 85 F1 | 	sub	fp, #24
2fe84     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2fe88     14 4E 05 F1 | 	add	fp, #20
2fe8c     A7 FA 61 FC | 	wrlong	result1, fp
2fe90     14 4E 85 F1 | 	sub	fp, #20
2fe94     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe98     34 00 90 AD |  if_e	jmp	#LR__4860
2fe9c     04 4E 05 F1 | 	add	fp, #4
2fea0     A7 18 02 FB | 	rdlong	arg04, fp
2fea4     0C 17 02 F6 | 	mov	arg03, arg04
2fea8     08 18 06 F1 | 	add	arg04, #8
2feac     0C 19 02 FB | 	rdlong	arg04, arg04
2feb0     20 18 46 F5 | 	or	arg04, #32
2feb4     08 16 06 F1 | 	add	arg03, #8
2feb8     0B 19 62 FC | 	wrlong	arg04, arg03
2febc                 | '         fil->state |=  (0x20) ;
2febc                 | '         return _set_dos_error(r);
2febc     10 4E 05 F1 | 	add	fp, #16
2fec0     A7 12 02 FB | 	rdlong	arg01, fp
2fec4     14 4E 85 F1 | 	sub	fp, #20
2fec8     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
2fecc     40 00 90 FD | 	jmp	#LR__4862
2fed0                 | LR__4860
2fed0     18 4E 05 F1 | 	add	fp, #24
2fed4     A7 FA 09 FB | 	rdlong	result1, fp wz
2fed8     18 4E 85 F1 | 	sub	fp, #24
2fedc     24 00 90 5D |  if_ne	jmp	#LR__4861
2fee0     04 4E 05 F1 | 	add	fp, #4
2fee4     A7 FA 01 FB | 	rdlong	result1, fp
2fee8     FD 18 02 F6 | 	mov	arg04, result1
2feec     04 4E 85 F1 | 	sub	fp, #4
2fef0     08 FA 05 F1 | 	add	result1, #8
2fef4     FD FA 01 FB | 	rdlong	result1, result1
2fef8     10 FA 45 F5 | 	or	result1, #16
2fefc     08 18 06 F1 | 	add	arg04, #8
2ff00     0C FB 61 FC | 	wrlong	result1, arg04
2ff04                 | LR__4861
2ff04                 | '         fil->state |=  (0x10) ;
2ff04                 | '     }
2ff04                 | '     return x;
2ff04     18 4E 05 F1 | 	add	fp, #24
2ff08     A7 FA 01 FB | 	rdlong	result1, fp
2ff0c     18 4E 85 F1 | 	sub	fp, #24
2ff10                 | LR__4862
2ff10     A7 F0 03 F6 | 	mov	ptra, fp
2ff14     B2 00 A0 FD | 	call	#popregs_
2ff18                 | _fatfs_cc_v_read_ret
2ff18     2D 00 64 FD | 	ret
2ff1c                 | 
2ff1c                 | _fatfs_cc_v_write
2ff1c     00 4A 05 F6 | 	mov	COUNT_, #0
2ff20     A8 00 A0 FD | 	call	#pushregs_
2ff24     1C F0 07 F1 | 	add	ptra, #28
2ff28     04 4E 05 F1 | 	add	fp, #4
2ff2c     A7 12 62 FC | 	wrlong	arg01, fp
2ff30     04 4E 05 F1 | 	add	fp, #4
2ff34     A7 14 62 FC | 	wrlong	arg02, fp
2ff38     04 4E 05 F1 | 	add	fp, #4
2ff3c     A7 16 62 FC | 	wrlong	arg03, fp
2ff40     08 4E 85 F1 | 	sub	fp, #8
2ff44     A7 12 02 FB | 	rdlong	arg01, fp
2ff48     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ff4c     0C 4E 05 F1 | 	add	fp, #12
2ff50     A7 12 62 FC | 	wrlong	arg01, fp
2ff54     10 4E 85 F1 | 	sub	fp, #16
2ff58                 | '         return _seterror( 5 );
2ff58     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ff5c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ff60     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ff64     01 FA 65 A6 |  if_e	neg	result1, #1
2ff68     84 00 90 AD |  if_e	jmp	#LR__4871
2ff6c     10 4E 05 F1 | 	add	fp, #16
2ff70     A7 12 02 FB | 	rdlong	arg01, fp
2ff74     02 00 00 FF 
2ff78     14 12 06 F1 | 	add	arg01, ##1044
2ff7c     08 4E 85 F1 | 	sub	fp, #8
2ff80     A7 14 02 FB | 	rdlong	arg02, fp
2ff84     04 4E 05 F1 | 	add	fp, #4
2ff88     A7 16 02 FB | 	rdlong	arg03, fp
2ff8c     0C 4E 05 F1 | 	add	fp, #12
2ff90     A7 18 02 F6 | 	mov	arg04, fp
2ff94     18 4E 85 F1 | 	sub	fp, #24
2ff98     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2ff9c     14 4E 05 F1 | 	add	fp, #20
2ffa0     A7 FA 61 FC | 	wrlong	result1, fp
2ffa4     14 4E 85 F1 | 	sub	fp, #20
2ffa8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ffac     34 00 90 AD |  if_e	jmp	#LR__4870
2ffb0     04 4E 05 F1 | 	add	fp, #4
2ffb4     A7 18 02 FB | 	rdlong	arg04, fp
2ffb8     0C 17 02 F6 | 	mov	arg03, arg04
2ffbc     08 18 06 F1 | 	add	arg04, #8
2ffc0     0C 19 02 FB | 	rdlong	arg04, arg04
2ffc4     20 18 46 F5 | 	or	arg04, #32
2ffc8     08 16 06 F1 | 	add	arg03, #8
2ffcc     0B 19 62 FC | 	wrlong	arg04, arg03
2ffd0                 | '         fil->state |=  (0x20) ;
2ffd0                 | '         return _set_dos_error(r);
2ffd0     10 4E 05 F1 | 	add	fp, #16
2ffd4     A7 12 02 FB | 	rdlong	arg01, fp
2ffd8     14 4E 85 F1 | 	sub	fp, #20
2ffdc     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
2ffe0     0C 00 90 FD | 	jmp	#LR__4871
2ffe4                 | LR__4870
2ffe4                 | '     }
2ffe4                 | '     return x;
2ffe4     18 4E 05 F1 | 	add	fp, #24
2ffe8     A7 FA 01 FB | 	rdlong	result1, fp
2ffec     18 4E 85 F1 | 	sub	fp, #24
2fff0                 | LR__4871
2fff0     A7 F0 03 F6 | 	mov	ptra, fp
2fff4     B2 00 A0 FD | 	call	#popregs_
2fff8                 | _fatfs_cc_v_write_ret
2fff8     2D 00 64 FD | 	ret
2fffc                 | 
2fffc                 | _fatfs_cc_v_lseek
2fffc     04 4A 05 F6 | 	mov	COUNT_, #4
30000     A8 00 A0 FD | 	call	#pushregs_
30004     0A 1F 02 F6 | 	mov	local01, arg02
30008     0B 21 02 F6 | 	mov	local02, arg03
3000c     09 23 02 FB | 	rdlong	local03, arg01
30010     02 00 00 FF 
30014     14 22 0E F1 | 	add	local03, ##1044 wz
30018                 | '         return _seterror( 5 );
30018     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3001c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30020     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30024     01 FA 65 A6 |  if_e	neg	result1, #1
30028     4C 00 90 AD |  if_e	jmp	#LR__4882
3002c     00 20 0E F2 | 	cmp	local02, #0 wz
30030     24 00 90 AD |  if_e	jmp	#LR__4880
30034     01 20 0E F2 | 	cmp	local02, #1 wz
30038     14 22 06 A1 |  if_e	add	local03, #20
3003c     11 25 02 AB |  if_e	rdlong	local04, local03
30040     14 22 86 A1 |  if_e	sub	local03, #20
30044     12 1F 02 A1 |  if_e	add	local01, local04
30048     0C 22 06 51 |  if_ne	add	local03, #12
3004c     11 25 02 5B |  if_ne	rdlong	local04, local03
30050     0C 22 86 51 |  if_ne	sub	local03, #12
30054     12 1F 02 51 |  if_ne	add	local01, local04
30058                 | LR__4880
30058     0F 15 02 F6 | 	mov	arg02, local01
3005c     11 13 02 F6 | 	mov	arg01, local03
30060     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
30064     FD 12 0A F6 | 	mov	arg01, result1 wz
30068     08 00 90 AD |  if_e	jmp	#LR__4881
3006c                 | '         return _set_dos_error(result);
3006c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
30070     04 00 90 FD | 	jmp	#LR__4882
30074                 | LR__4881
30074                 | '     }
30074                 | '     return offset;
30074     0F FB 01 F6 | 	mov	result1, local01
30078                 | LR__4882
30078     A7 F0 03 F6 | 	mov	ptra, fp
3007c     B2 00 A0 FD | 	call	#popregs_
30080                 | _fatfs_cc_v_lseek_ret
30080     2D 00 64 FD | 	ret
30084                 | 
30084                 | _fatfs_cc_v_ioctl
30084                 | ' {
30084                 | '     return _seterror( 10 );
30084     20 E6 05 F1 | 	add	ptr___system__dat__, #32
30088     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
3008c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
30090     01 FA 65 F6 | 	neg	result1, #1
30094                 | _fatfs_cc_v_ioctl_ret
30094     2D 00 64 FD | 	ret
30098                 | 
30098                 | _fatfs_cc_v_mkdir
30098     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
3009c     FD 12 02 F6 | 	mov	arg01, result1
300a0                 | ' 
300a0                 | '     r = f_mkdir(name);
300a0                 | '     return _set_dos_error(r);
300a0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
300a4                 | _fatfs_cc_v_mkdir_ret
300a4     2D 00 64 FD | 	ret
300a8                 | 
300a8                 | _fatfs_cc_v_remove
300a8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
300ac     FD 12 02 F6 | 	mov	arg01, result1
300b0                 | ' 
300b0                 | '     r = f_unlink(name);
300b0                 | '     return _set_dos_error(r);
300b0     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
300b4                 | _fatfs_cc_v_remove_ret
300b4     2D 00 64 FD | 	ret
300b8                 | 
300b8                 | _fatfs_cc_v_rmdir
300b8     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
300bc     FD 12 02 F6 | 	mov	arg01, result1
300c0                 | ' 
300c0                 | '     r = f_unlink(name);
300c0                 | '     return _set_dos_error(r);
300c0     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
300c4                 | _fatfs_cc_v_rmdir_ret
300c4     2D 00 64 FD | 	ret
300c8                 | 
300c8                 | _fatfs_cc_v_rename
300c8     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
300cc     FD 12 02 F6 | 	mov	arg01, result1
300d0                 | '     return _set_dos_error(r);
300d0     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
300d4                 | _fatfs_cc_v_rename_ret
300d4     2D 00 64 FD | 	ret
300d8                 | 
300d8                 | _fatfs_cc_v_open
300d8     07 4A 05 F6 | 	mov	COUNT_, #7
300dc     A8 00 A0 FD | 	call	#pushregs_
300e0     09 1F 02 F6 | 	mov	local01, arg01
300e4     0A 21 02 F6 | 	mov	local02, arg02
300e8     0B 23 02 F6 | 	mov	local03, arg03
300ec     03 00 00 FF 
300f0     3C 12 06 F6 | 	mov	arg01, ##1596
300f4                 | '     return _gc_alloc(size);
300f4     10 14 06 F6 | 	mov	arg02, #16
300f8     DC 55 BF FD | 	call	#__system___gc_doalloc
300fc     FD 24 0A F6 | 	mov	local04, result1 wz
30100                 | '       return _seterror( 7 );
30100     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30104     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
30108     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3010c     01 FA 65 A6 |  if_e	neg	result1, #1
30110     98 00 90 AD |  if_e	jmp	#LR__4896
30114     12 13 02 F6 | 	mov	arg01, local04
30118     00 14 06 F6 | 	mov	arg02, #0
3011c     03 00 00 FF 
30120     3C 16 06 F6 | 	mov	arg03, ##1596
30124     98 00 A0 FD | 	call	#\builtin_bytefill_
30128                 | '   switch (flags & 3) {
30128     11 27 02 F6 | 	mov	local05, local03
3012c     03 26 0E F5 | 	and	local05, #3 wz
30130     0C 00 90 AD |  if_e	jmp	#LR__4890
30134     01 26 0E F2 | 	cmp	local05, #1 wz
30138     0C 00 90 AD |  if_e	jmp	#LR__4891
3013c     10 00 90 FD | 	jmp	#LR__4892
30140                 | LR__4890
30140     01 28 06 F6 | 	mov	local06, #1
30144                 | '       fs_flags =  0x01 ;
30144                 | '       break;
30144     0C 00 90 FD | 	jmp	#LR__4893
30148                 | LR__4891
30148     02 28 06 F6 | 	mov	local06, #2
3014c                 | '       fs_flags =  0x02 ;
3014c                 | '       break;
3014c     04 00 90 FD | 	jmp	#LR__4893
30150                 | LR__4892
30150     03 28 06 F6 | 	mov	local06, #3
30154                 | '       fs_flags =  0x01  |  0x02 ;
30154                 | '       break;
30154                 | LR__4893
30154     08 22 CE F7 | 	test	local03, #8 wz
30158     18 28 46 55 |  if_ne	or	local06, #24
3015c     08 00 90 5D |  if_ne	jmp	#LR__4894
30160     20 22 CE F7 | 	test	local03, #32 wz
30164     30 28 46 55 |  if_ne	or	local06, #48
30168                 | LR__4894
30168     02 00 00 FF 
3016c     14 24 06 F1 | 	add	local04, ##1044
30170     12 13 02 F6 | 	mov	arg01, local04
30174     02 00 00 FF 
30178     14 24 86 F1 | 	sub	local04, ##1044
3017c     10 15 02 F6 | 	mov	arg02, local02
30180     14 17 02 F6 | 	mov	arg03, local06
30184     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
30188     FD 2A 0A F6 | 	mov	local07, result1 wz
3018c     14 00 90 AD |  if_e	jmp	#LR__4895
30190     12 13 02 F6 | 	mov	arg01, local04
30194                 | '     return _gc_free(ptr);
30194     4C 56 BF FD | 	call	#__system___gc_free
30198                 | '     free(f);
30198                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30198                 | '     return _set_dos_error(r);
30198     15 13 02 F6 | 	mov	arg01, local07
3019c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
301a0     08 00 90 FD | 	jmp	#LR__4896
301a4                 | LR__4895
301a4     0F 25 62 FC | 	wrlong	local04, local01
301a8                 | '   }
301a8                 | '   fil->vfsdata = f;
301a8                 | '   return 0;
301a8     00 FA 05 F6 | 	mov	result1, #0
301ac                 | LR__4896
301ac     A7 F0 03 F6 | 	mov	ptra, fp
301b0     B2 00 A0 FD | 	call	#popregs_
301b4                 | _fatfs_cc_v_open_ret
301b4     2D 00 64 FD | 	ret
301b8                 | 
301b8                 | _fatfs_cc_v_flush
301b8     09 13 02 FB | 	rdlong	arg01, arg01
301bc     02 00 00 FF 
301c0     14 12 0E F1 | 	add	arg01, ##1044 wz
301c4                 | '         return _seterror( 5 );
301c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
301c8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
301cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
301d0     01 FA 65 A6 |  if_e	neg	result1, #1
301d4     0C 00 90 AD |  if_e	jmp	#LR__4900
301d8     00 DA BF FD | 	call	#_fatfs_cc_f_sync
301dc     FD 12 02 F6 | 	mov	arg01, result1
301e0                 | '     }
301e0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
301e0                 | '     result = f_sync(f);
301e0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
301e0                 | '     return _set_dos_error(result);
301e0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0995
301e4                 | LR__4900
301e4                 | _fatfs_cc_v_flush_ret
301e4     2D 00 64 FD | 	ret
301e8                 | 
301e8                 | _fatfs_cc_v_init
301e8                 | ' {
301e8                 | '     return 0;
301e8     00 FA 05 F6 | 	mov	result1, #0
301ec                 | _fatfs_cc_v_init_ret
301ec     2D 00 64 FD | 	ret
301f0                 | 
301f0                 | _fatfs_cc_v_deinit
301f0     88 01 00 FF 
301f4     64 15 06 F6 | 	mov	arg02, ##@LR__5096
301f8     00 12 06 F6 | 	mov	arg01, #0
301fc     00 16 06 F6 | 	mov	arg03, #0
30200     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
30204     01 00 00 FF 
30208     08 E4 05 F1 | 	add	objptr, ##520
3020c     F2 12 02 FB | 	rdlong	arg01, objptr
30210     04 E4 05 F1 | 	add	objptr, #4
30214     F2 14 02 FB | 	rdlong	arg02, objptr
30218     01 00 00 FF 
3021c     0C E4 85 F1 | 	sub	objptr, ##524
30220     30 3D BF FD | 	call	#__system___freepins
30224                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30224                 | '     _freepins(f_pinmask);
30224                 | '     return 0;
30224     00 FA 05 F6 | 	mov	result1, #0
30228                 | _fatfs_cc_v_deinit_ret
30228     2D 00 64 FD | 	ret
3022c                 | 
3022c                 | _fatfs_cc_get_vfs
3022c     01 4A 05 F6 | 	mov	COUNT_, #1
30230     A8 00 A0 FD | 	call	#pushregs_
30234     09 1F 02 F6 | 	mov	local01, arg01
30238     50 12 06 F6 | 	mov	arg01, #80
3023c     68 54 BF FD | 	call	#__system___gc_alloc_managed
30240     FD 12 02 F6 | 	mov	arg01, result1
30244     F2 FA 01 F6 | 	mov	result1, objptr
30248     00 F8 04 FF 
3024c     00 FA 45 F5 | 	or	result1, ##166723584
30250     09 FB 61 FC | 	wrlong	result1, arg01
30254     F2 FA 01 F6 | 	mov	result1, objptr
30258     00 00 05 FF 
3025c     00 FA 45 F5 | 	or	result1, ##167772160
30260     04 12 06 F1 | 	add	arg01, #4
30264     09 FB 61 FC | 	wrlong	result1, arg01
30268     F2 FA 01 F6 | 	mov	result1, objptr
3026c     00 08 05 FF 
30270     00 FA 45 F5 | 	or	result1, ##168820736
30274     04 12 06 F1 | 	add	arg01, #4
30278     09 FB 61 FC | 	wrlong	result1, arg01
3027c     F2 FA 01 F6 | 	mov	result1, objptr
30280     00 10 05 FF 
30284     00 FA 45 F5 | 	or	result1, ##169869312
30288     04 12 06 F1 | 	add	arg01, #4
3028c     09 FB 61 FC | 	wrlong	result1, arg01
30290     F2 FA 01 F6 | 	mov	result1, objptr
30294     00 18 05 FF 
30298     00 FA 45 F5 | 	or	result1, ##170917888
3029c     04 12 06 F1 | 	add	arg01, #4
302a0     09 FB 61 FC | 	wrlong	result1, arg01
302a4     04 12 06 F1 | 	add	arg01, #4
302a8     09 01 68 FC | 	wrlong	#0, arg01
302ac     04 12 06 F1 | 	add	arg01, #4
302b0     09 1F 62 FC | 	wrlong	local01, arg01
302b4     04 12 06 F1 | 	add	arg01, #4
302b8     09 01 68 FC | 	wrlong	#0, arg01
302bc     F2 FA 01 F6 | 	mov	result1, objptr
302c0     00 20 05 FF 
302c4     00 FA 45 F5 | 	or	result1, ##171966464
302c8     04 12 06 F1 | 	add	arg01, #4
302cc     09 FB 61 FC | 	wrlong	result1, arg01
302d0     F2 FA 01 F6 | 	mov	result1, objptr
302d4     00 28 05 FF 
302d8     00 FA 45 F5 | 	or	result1, ##173015040
302dc     04 12 06 F1 | 	add	arg01, #4
302e0     09 FB 61 FC | 	wrlong	result1, arg01
302e4     F2 FA 01 F6 | 	mov	result1, objptr
302e8     00 30 05 FF 
302ec     00 FA 45 F5 | 	or	result1, ##174063616
302f0     04 12 06 F1 | 	add	arg01, #4
302f4     09 FB 61 FC | 	wrlong	result1, arg01
302f8     F2 FA 01 F6 | 	mov	result1, objptr
302fc     00 38 05 FF 
30300     00 FA 45 F5 | 	or	result1, ##175112192
30304     04 12 06 F1 | 	add	arg01, #4
30308     09 FB 61 FC | 	wrlong	result1, arg01
3030c     F2 FA 01 F6 | 	mov	result1, objptr
30310     00 40 05 FF 
30314     00 FA 45 F5 | 	or	result1, ##176160768
30318     04 12 06 F1 | 	add	arg01, #4
3031c     09 FB 61 FC | 	wrlong	result1, arg01
30320     F2 FA 01 F6 | 	mov	result1, objptr
30324     00 48 05 FF 
30328     00 FA 45 F5 | 	or	result1, ##177209344
3032c     04 12 06 F1 | 	add	arg01, #4
30330     09 FB 61 FC | 	wrlong	result1, arg01
30334     F2 FA 01 F6 | 	mov	result1, objptr
30338     00 50 05 FF 
3033c     00 FA 45 F5 | 	or	result1, ##178257920
30340     04 12 06 F1 | 	add	arg01, #4
30344     09 FB 61 FC | 	wrlong	result1, arg01
30348     F2 FA 01 F6 | 	mov	result1, objptr
3034c     00 58 05 FF 
30350     00 FA 45 F5 | 	or	result1, ##179306496
30354     04 12 06 F1 | 	add	arg01, #4
30358     09 FB 61 FC | 	wrlong	result1, arg01
3035c     F2 FA 01 F6 | 	mov	result1, objptr
30360     00 60 05 FF 
30364     00 FA 45 F5 | 	or	result1, ##180355072
30368     04 12 06 F1 | 	add	arg01, #4
3036c     09 FB 61 FC | 	wrlong	result1, arg01
30370     F2 FA 01 F6 | 	mov	result1, objptr
30374     00 68 05 FF 
30378     00 FA 45 F5 | 	or	result1, ##181403648
3037c     04 12 06 F1 | 	add	arg01, #4
30380     09 FB 61 FC | 	wrlong	result1, arg01
30384     F2 FA 01 F6 | 	mov	result1, objptr
30388     00 70 05 FF 
3038c     00 FA 45 F5 | 	or	result1, ##182452224
30390     04 12 06 F1 | 	add	arg01, #4
30394     09 FB 61 FC | 	wrlong	result1, arg01
30398     F2 FA 01 F6 | 	mov	result1, objptr
3039c     00 78 05 FF 
303a0     00 FA 45 F5 | 	or	result1, ##183500800
303a4     04 12 06 F1 | 	add	arg01, #4
303a8     09 FB 61 FC | 	wrlong	result1, arg01
303ac     4C 12 86 F1 | 	sub	arg01, #76
303b0                 | ' 
303b0                 | '     v->close = &v_close;
303b0                 | '     v->read = &v_read;
303b0                 | '     v->write = &v_write;
303b0                 | '     v->lseek = &v_lseek;
303b0                 | '     v->ioctl = &v_ioctl;
303b0                 | '     v->flush = 0;
303b0                 | '     v->vfs_data = ptr;
303b0                 | '     v->reserved = 0;
303b0                 | ' 
303b0                 | '     v->open = &v_open;
303b0                 | '     v->creat = &v_creat;
303b0                 | '     v->opendir = &v_opendir;
303b0                 | '     v->closedir = &v_closedir;
303b0                 | '     v->readdir = &v_readdir;
303b0                 | '     v->stat = &v_stat;
303b0                 | ' 
303b0                 | '     v->mkdir = &v_mkdir;
303b0                 | '     v->rmdir = &v_rmdir;
303b0                 | ' 
303b0                 | '     v->remove = &v_remove;
303b0                 | '     v->rename = &v_rename;
303b0                 | ' 
303b0                 | '     v->init = &v_init;
303b0                 | '     v->deinit = &v_deinit;
303b0                 | ' 
303b0                 | '     return v;
303b0     09 FB 01 F6 | 	mov	result1, arg01
303b4     A7 F0 03 F6 | 	mov	ptra, fp
303b8     B2 00 A0 FD | 	call	#popregs_
303bc                 | _fatfs_cc_get_vfs_ret
303bc     2D 00 64 FD | 	ret
303c0                 | 
303c0                 | _fatfs_cc_xmit_mmc_1146
303c0     01 00 00 FF 
303c4     10 E4 05 F1 | 	add	objptr, ##528
303c8     F2 00 02 FB | 	rdlong	_var01, objptr
303cc     08 E4 05 F1 | 	add	objptr, #8
303d0     F2 02 02 FB | 	rdlong	_var02, objptr
303d4     01 00 00 FF 
303d8     18 E4 85 F1 | 	sub	objptr, ##536
303dc     40 02 62 FD | 	dirl	_var02
303e0     28 02 64 FD | 	setq	#1
303e4     09 05 02 FB | 	rdlong	_var03, arg01
303e8     69 04 62 FD | 	rev	_var03
303ec     1B 04 FE F9 | 	movbyts	_var03, #27
303f0     01 05 22 FC | 	wypin	_var03, _var02
303f4     0A 05 02 F6 | 	mov	_var03, arg02
303f8     02 14 4E F0 | 	shr	arg02, #2 wz
303fc     03 04 66 F0 | 	shl	_var03, #3
30400     00 05 22 FC | 	wypin	_var03, _var01
30404     41 02 62 FD | 	dirh	_var02
30408     08 12 06 F1 | 	add	arg01, #8
3040c     69 06 62 FD | 	rev	_var04
30410     1B 06 FE F9 | 	movbyts	_var04, #27
30414                 | LR__4910
30414     01 07 22 5C |  if_ne	wypin	_var04, _var02
30418     09 07 02 5B |  if_ne	rdlong	_var04, arg01
3041c     04 12 06 51 |  if_ne	add	arg01, #4
30420     69 06 62 5D |  if_ne	rev	_var04
30424     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
30428                 | LR__4911
30428     40 02 72 5D |  if_ne	testp	_var02 wc
3042c     F8 FF 9F 1D |  if_a	jmp	#LR__4911
30430     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4910
30434                 | LR__4912
30434     40 00 72 FD | 	testp	_var01 wc
30438     F8 FF 9F 3D |  if_ae	jmp	#LR__4912
3043c     40 02 62 FD | 	dirl	_var02
30440     FF FF FF FF 
30444     01 FF 2B FC | 	wypin	##-1, _var02
30448     41 02 62 FD | 	dirh	_var02
3044c                 | _fatfs_cc_xmit_mmc_1146_ret
3044c     2D 00 64 FD | 	ret
30450                 | 
30450                 | _fatfs_cc_rcvr_mmc_1153
30450     01 00 00 FF 
30454     10 E4 05 F1 | 	add	objptr, ##528
30458     F2 00 02 FB | 	rdlong	_var01, objptr
3045c     0C E4 05 F1 | 	add	objptr, #12
30460     F2 02 02 FB | 	rdlong	_var02, objptr
30464     01 00 00 FF 
30468     1C E4 85 F1 | 	sub	objptr, ##540
3046c     01 03 08 FC | 	akpin	_var02
30470     0A 05 0A F6 | 	mov	_var03, arg02 wz
30474     02 04 4E F0 | 	shr	_var03, #2 wz
30478     30 00 90 AD |  if_e	jmp	#LR__4922
3047c     02 07 02 F6 | 	mov	_var04, _var03
30480     05 06 66 F0 | 	shl	_var04, #5
30484     00 07 22 FC | 	wypin	_var04, _var01
30488     01 7F 18 FC | 	wxpin	#63, _var02
3048c                 | LR__4920
3048c                 | LR__4921
3048c     40 02 72 FD | 	testp	_var02 wc
30490     F8 FF 9F 3D |  if_ae	jmp	#LR__4921
30494     01 07 8A FA | 	rdpin	_var04, _var02
30498     69 06 62 FD | 	rev	_var04
3049c     1B 06 FE F9 | 	movbyts	_var04, #27
304a0     09 07 62 FC | 	wrlong	_var04, arg01
304a4     04 12 06 F1 | 	add	arg01, #4
304a8     F8 05 6E FB | 	djnz	_var03, #LR__4920
304ac                 | LR__4922
304ac     03 14 0E F5 | 	and	arg02, #3 wz
304b0     24 00 90 AD |  if_e	jmp	#LR__4925
304b4     01 4F 18 FC | 	wxpin	#39, _var02
304b8                 | LR__4923
304b8     00 11 28 FC | 	wypin	#8, _var01
304bc                 | LR__4924
304bc     40 02 72 FD | 	testp	_var02 wc
304c0     F8 FF 9F 3D |  if_ae	jmp	#LR__4924
304c4     01 07 8A FA | 	rdpin	_var04, _var02
304c8     69 06 62 FD | 	rev	_var04
304cc     09 07 42 FC | 	wrbyte	_var04, arg01
304d0     01 12 06 F1 | 	add	arg01, #1
304d4     F8 15 6E FB | 	djnz	arg02, #LR__4923
304d8                 | LR__4925
304d8                 | _fatfs_cc_rcvr_mmc_1153_ret
304d8     2D 00 64 FD | 	ret
304dc                 | 
304dc                 | _fatfs_cc_wait_ready_1157
304dc     01 4A 05 F6 | 	mov	COUNT_, #1
304e0     A8 00 A0 FD | 	call	#pushregs_
304e4     10 F0 07 F1 | 	add	ptra, #16
304e8     1A FA 61 FD | 	getct	result1
304ec     08 4E 05 F1 | 	add	fp, #8
304f0     A7 FA 61 FC | 	wrlong	result1, fp
304f4     14 1E 06 FB | 	rdlong	local01, #20
304f8     01 1E 46 F0 | 	shr	local01, #1
304fc     04 4E 05 F1 | 	add	fp, #4
30500     A7 1E 62 FC | 	wrlong	local01, fp
30504     0C 4E 85 F1 | 	sub	fp, #12
30508                 | ' {
30508                 | ' 	BYTE d;
30508                 | ' 	UINT tmr, tmout;
30508                 | ' 
30508                 | ' 	tmr = _cnt();
30508                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
30508                 | ' 	for(;;) {
30508                 | LR__4930
30508     04 4E 05 F1 | 	add	fp, #4
3050c     A7 12 02 F6 | 	mov	arg01, fp
30510     04 4E 85 F1 | 	sub	fp, #4
30514     01 14 06 F6 | 	mov	arg02, #1
30518     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
3051c     04 4E 05 F1 | 	add	fp, #4
30520     A7 1E C2 FA | 	rdbyte	local01, fp
30524     04 4E 85 F1 | 	sub	fp, #4
30528     FF 1E 0E F2 | 	cmp	local01, #255 wz
3052c     01 FA 05 A6 |  if_e	mov	result1, #1
30530     28 00 90 AD |  if_e	jmp	#LR__4931
30534     1A FA 61 FD | 	getct	result1
30538     08 4E 05 F1 | 	add	fp, #8
3053c     A7 1E 02 FB | 	rdlong	local01, fp
30540     0F FB 81 F1 | 	sub	result1, local01
30544     04 4E 05 F1 | 	add	fp, #4
30548     A7 1E 02 FB | 	rdlong	local01, fp
3054c     0C 4E 85 F1 | 	sub	fp, #12
30550     0F FB 11 F2 | 	cmp	result1, local01 wc
30554     00 FA 05 36 |  if_ae	mov	result1, #0
30558     AC FF 9F CD |  if_b	jmp	#LR__4930
3055c                 | LR__4931
3055c     A7 F0 03 F6 | 	mov	ptra, fp
30560     B2 00 A0 FD | 	call	#popregs_
30564                 | _fatfs_cc_wait_ready_1157_ret
30564     2D 00 64 FD | 	ret
30568                 | 
30568                 | _fatfs_cc_deselect_1163
30568     00 4A 05 F6 | 	mov	COUNT_, #0
3056c     A8 00 A0 FD | 	call	#pushregs_
30570     14 F0 07 F1 | 	add	ptra, #20
30574     01 00 00 FF 
30578     14 E4 05 F1 | 	add	objptr, ##532
3057c     F2 14 02 FB | 	rdlong	arg02, objptr
30580     04 4E 05 F1 | 	add	fp, #4
30584     A7 14 62 FC | 	wrlong	arg02, fp
30588     04 E4 85 F1 | 	sub	objptr, #4
3058c     F2 14 02 FB | 	rdlong	arg02, objptr
30590     04 4E 05 F1 | 	add	fp, #4
30594     A7 14 62 FC | 	wrlong	arg02, fp
30598     08 E4 05 F1 | 	add	objptr, #8
3059c     F2 14 02 FB | 	rdlong	arg02, objptr
305a0     04 4E 05 F1 | 	add	fp, #4
305a4     A7 14 62 FC | 	wrlong	arg02, fp
305a8     04 E4 05 F1 | 	add	objptr, #4
305ac     F2 14 02 FB | 	rdlong	arg02, objptr
305b0     01 00 00 FF 
305b4     1C E4 85 F1 | 	sub	objptr, ##540
305b8     04 4E 05 F1 | 	add	fp, #4
305bc     A7 14 62 FC | 	wrlong	arg02, fp
305c0     0C 4E 85 F1 | 	sub	fp, #12
305c4     A7 12 02 FB | 	rdlong	arg01, fp
305c8     04 4E 85 F1 | 	sub	fp, #4
305cc     59 12 62 FD | 	drvh	arg01
305d0     1F 20 64 FD | 	waitx	#16
305d4     A7 12 02 F6 | 	mov	arg01, fp
305d8     01 14 06 F6 | 	mov	arg02, #1
305dc     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
305e0     A7 F0 03 F6 | 	mov	ptra, fp
305e4     B2 00 A0 FD | 	call	#popregs_
305e8                 | _fatfs_cc_deselect_1163_ret
305e8     2D 00 64 FD | 	ret
305ec                 | 
305ec                 | _fatfs_cc_select_1167
305ec     00 4A 05 F6 | 	mov	COUNT_, #0
305f0     A8 00 A0 FD | 	call	#pushregs_
305f4     10 F0 07 F1 | 	add	ptra, #16
305f8     01 00 00 FF 
305fc     14 E4 05 F1 | 	add	objptr, ##532
30600     F2 14 02 FB | 	rdlong	arg02, objptr
30604     08 4E 05 F1 | 	add	fp, #8
30608     A7 14 62 FC | 	wrlong	arg02, fp
3060c     08 E4 05 F1 | 	add	objptr, #8
30610     F2 12 02 FB | 	rdlong	arg01, objptr
30614     01 00 00 FF 
30618     1C E4 85 F1 | 	sub	objptr, ##540
3061c     04 4E 05 F1 | 	add	fp, #4
30620     A7 12 62 FC | 	wrlong	arg01, fp
30624     50 12 62 FD | 	fltl	arg01
30628     04 4E 85 F1 | 	sub	fp, #4
3062c     A7 12 02 FB | 	rdlong	arg01, fp
30630     58 12 62 FD | 	drvl	arg01
30634     1F 20 64 FD | 	waitx	#16
30638     04 4E 05 F1 | 	add	fp, #4
3063c     A7 12 02 FB | 	rdlong	arg01, fp
30640     41 12 62 FD | 	dirh	arg01
30644     08 4E 85 F1 | 	sub	fp, #8
30648     A7 12 02 F6 | 	mov	arg01, fp
3064c     04 4E 85 F1 | 	sub	fp, #4
30650     01 14 06 F6 | 	mov	arg02, #1
30654     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
30658     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1157
3065c     00 FA 0D F2 | 	cmp	result1, #0 wz
30660     01 FA 05 56 |  if_ne	mov	result1, #1
30664     08 00 90 5D |  if_ne	jmp	#LR__4940
30668     FC FE BF FD | 	call	#_fatfs_cc_deselect_1163
3066c                 | ' 
3066c                 | ' 	deselect();
3066c                 | ' 	return 0;
3066c     00 FA 05 F6 | 	mov	result1, #0
30670                 | LR__4940
30670     A7 F0 03 F6 | 	mov	ptra, fp
30674     B2 00 A0 FD | 	call	#popregs_
30678                 | _fatfs_cc_select_1167_ret
30678     2D 00 64 FD | 	ret
3067c                 | 
3067c                 | _fatfs_cc_rcvr_datablock_1171
3067c     01 4A 05 F6 | 	mov	COUNT_, #1
30680     A8 00 A0 FD | 	call	#pushregs_
30684     18 F0 07 F1 | 	add	ptra, #24
30688     04 4E 05 F1 | 	add	fp, #4
3068c     A7 12 62 FC | 	wrlong	arg01, fp
30690     04 4E 05 F1 | 	add	fp, #4
30694     A7 14 62 FC | 	wrlong	arg02, fp
30698     1A FA 61 FD | 	getct	result1
3069c     08 4E 05 F1 | 	add	fp, #8
306a0     A7 FA 61 FC | 	wrlong	result1, fp
306a4     14 1E 06 FB | 	rdlong	local01, #20
306a8     03 1E 46 F0 | 	shr	local01, #3
306ac     04 4E 05 F1 | 	add	fp, #4
306b0     A7 1E 62 FC | 	wrlong	local01, fp
306b4     14 4E 85 F1 | 	sub	fp, #20
306b8                 | ' 	BYTE *buff,
306b8                 | ' 	UINT btr
306b8                 | ' )
306b8                 | ' {
306b8                 | ' 	BYTE d[2];
306b8                 | ' 	UINT tmr, tmout;
306b8                 | ' 
306b8                 | ' 	tmr = _cnt();
306b8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
306b8                 | ' 	for(;;) {
306b8                 | LR__4950
306b8     0C 4E 05 F1 | 	add	fp, #12
306bc     A7 12 02 F6 | 	mov	arg01, fp
306c0     0C 4E 85 F1 | 	sub	fp, #12
306c4     01 14 06 F6 | 	mov	arg02, #1
306c8     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
306cc     0C 4E 05 F1 | 	add	fp, #12
306d0     A7 1E C2 FA | 	rdbyte	local01, fp
306d4     0C 4E 85 F1 | 	sub	fp, #12
306d8     FF 1E 0E F2 | 	cmp	local01, #255 wz
306dc     28 00 90 5D |  if_ne	jmp	#LR__4951
306e0     1A FA 61 FD | 	getct	result1
306e4     FD 1E 02 F6 | 	mov	local01, result1
306e8     10 4E 05 F1 | 	add	fp, #16
306ec     A7 14 02 FB | 	rdlong	arg02, fp
306f0     0A 1F 82 F1 | 	sub	local01, arg02
306f4     04 4E 05 F1 | 	add	fp, #4
306f8     A7 14 02 FB | 	rdlong	arg02, fp
306fc     14 4E 85 F1 | 	sub	fp, #20
30700     0A 1F 12 F2 | 	cmp	local01, arg02 wc
30704     B0 FF 9F CD |  if_b	jmp	#LR__4950
30708                 | LR__4951
30708     0C 4E 05 F1 | 	add	fp, #12
3070c     A7 1E C2 FA | 	rdbyte	local01, fp
30710     0C 4E 85 F1 | 	sub	fp, #12
30714     FE 1E 0E F2 | 	cmp	local01, #254 wz
30718     00 FA 05 56 |  if_ne	mov	result1, #0
3071c     30 00 90 5D |  if_ne	jmp	#LR__4952
30720     04 4E 05 F1 | 	add	fp, #4
30724     A7 12 02 FB | 	rdlong	arg01, fp
30728     04 4E 05 F1 | 	add	fp, #4
3072c     A7 14 02 FB | 	rdlong	arg02, fp
30730     08 4E 85 F1 | 	sub	fp, #8
30734     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
30738     0C 4E 05 F1 | 	add	fp, #12
3073c     A7 12 02 F6 | 	mov	arg01, fp
30740     0C 4E 85 F1 | 	sub	fp, #12
30744     02 14 06 F6 | 	mov	arg02, #2
30748     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
3074c                 | ' 
3074c                 | ' 	rcvr_mmc(buff, btr);
3074c                 | ' 	rcvr_mmc(d, 2);
3074c                 | ' 
3074c                 | ' 	return 1;
3074c     01 FA 05 F6 | 	mov	result1, #1
30750                 | LR__4952
30750     A7 F0 03 F6 | 	mov	ptra, fp
30754     B2 00 A0 FD | 	call	#popregs_
30758                 | _fatfs_cc_rcvr_datablock_1171_ret
30758     2D 00 64 FD | 	ret
3075c                 | 
3075c                 | _fatfs_cc_xmit_datablock_1173
3075c     00 4A 05 F6 | 	mov	COUNT_, #0
30760     A8 00 A0 FD | 	call	#pushregs_
30764     10 F0 07 F1 | 	add	ptra, #16
30768     04 4E 05 F1 | 	add	fp, #4
3076c     A7 12 62 FC | 	wrlong	arg01, fp
30770     04 4E 05 F1 | 	add	fp, #4
30774     A7 14 42 FC | 	wrbyte	arg02, fp
30778     08 4E 85 F1 | 	sub	fp, #8
3077c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1157
30780     00 FA 0D F2 | 	cmp	result1, #0 wz
30784     00 FA 05 A6 |  if_e	mov	result1, #0
30788     90 00 90 AD |  if_e	jmp	#LR__4961
3078c     08 4E 05 F1 | 	add	fp, #8
30790     A7 14 C2 FA | 	rdbyte	arg02, fp
30794     04 4E 05 F1 | 	add	fp, #4
30798     A7 14 42 FC | 	wrbyte	arg02, fp
3079c     A7 12 02 F6 | 	mov	arg01, fp
307a0     0C 4E 85 F1 | 	sub	fp, #12
307a4     01 14 06 F6 | 	mov	arg02, #1
307a8     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1146
307ac     08 4E 05 F1 | 	add	fp, #8
307b0     A7 14 C2 FA | 	rdbyte	arg02, fp
307b4     08 4E 85 F1 | 	sub	fp, #8
307b8     FD 14 0E F2 | 	cmp	arg02, #253 wz
307bc     58 00 90 AD |  if_e	jmp	#LR__4960
307c0     04 4E 05 F1 | 	add	fp, #4
307c4     A7 12 02 FB | 	rdlong	arg01, fp
307c8     04 4E 85 F1 | 	sub	fp, #4
307cc     09 14 C6 F9 | 	decod	arg02, #9
307d0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1146
307d4     0C 4E 05 F1 | 	add	fp, #12
307d8     A7 12 02 F6 | 	mov	arg01, fp
307dc     0C 4E 85 F1 | 	sub	fp, #12
307e0     02 14 06 F6 | 	mov	arg02, #2
307e4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
307e8     0C 4E 05 F1 | 	add	fp, #12
307ec     A7 12 02 F6 | 	mov	arg01, fp
307f0     0C 4E 85 F1 | 	sub	fp, #12
307f4     01 14 06 F6 | 	mov	arg02, #1
307f8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
307fc     0C 4E 05 F1 | 	add	fp, #12
30800     A7 14 C2 FA | 	rdbyte	arg02, fp
30804     0C 4E 85 F1 | 	sub	fp, #12
30808     1F 14 06 F5 | 	and	arg02, #31
3080c     05 14 0E F2 | 	cmp	arg02, #5 wz
30810                 | ' 			return 0;
30810     00 FA 05 56 |  if_ne	mov	result1, #0
30814     04 00 90 5D |  if_ne	jmp	#LR__4961
30818                 | LR__4960
30818                 | ' 	}
30818                 | ' 
30818                 | ' 	return 1;
30818     01 FA 05 F6 | 	mov	result1, #1
3081c                 | LR__4961
3081c     A7 F0 03 F6 | 	mov	ptra, fp
30820     B2 00 A0 FD | 	call	#popregs_
30824                 | _fatfs_cc_xmit_datablock_1173_ret
30824     2D 00 64 FD | 	ret
30828                 | 
30828                 | _fatfs_cc_send_cmd_1177
30828     01 4A 05 F6 | 	mov	COUNT_, #1
3082c     A8 00 A0 FD | 	call	#pushregs_
30830     1C F0 07 F1 | 	add	ptra, #28
30834                 | _fatfs_cc_send_cmd_1177_enter
30834     04 4E 05 F1 | 	add	fp, #4
30838     A7 12 42 FC | 	wrbyte	arg01, fp
3083c     04 4E 05 F1 | 	add	fp, #4
30840     A7 14 62 FC | 	wrlong	arg02, fp
30844     04 4E 85 F1 | 	sub	fp, #4
30848     A7 FA C1 FA | 	rdbyte	result1, fp
3084c     04 4E 85 F1 | 	sub	fp, #4
30850     80 FA CD F7 | 	test	result1, #128 wz
30854     44 00 90 AD |  if_e	jmp	#LR__4970
30858     04 4E 05 F1 | 	add	fp, #4
3085c     A7 14 C2 FA | 	rdbyte	arg02, fp
30860     7F 14 06 F5 | 	and	arg02, #127
30864     A7 14 42 FC | 	wrbyte	arg02, fp
30868     04 4E 85 F1 | 	sub	fp, #4
3086c     37 12 06 F6 | 	mov	arg01, #55
30870     00 14 06 F6 | 	mov	arg02, #0
30874     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1177
30878     0C 4E 05 F1 | 	add	fp, #12
3087c     A7 FA 41 FC | 	wrbyte	result1, fp
30880     A7 14 C2 FA | 	rdbyte	arg02, fp
30884     0C 4E 85 F1 | 	sub	fp, #12
30888     02 14 16 F2 | 	cmp	arg02, #2 wc
3088c     0C 4E 05 31 |  if_ae	add	fp, #12
30890     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
30894     0C 4E 85 31 |  if_ae	sub	fp, #12
30898     6C 01 90 3D |  if_ae	jmp	#LR__4974
3089c                 | LR__4970
3089c     04 4E 05 F1 | 	add	fp, #4
308a0     A7 14 C2 FA | 	rdbyte	arg02, fp
308a4     04 4E 85 F1 | 	sub	fp, #4
308a8     0C 14 0E F2 | 	cmp	arg02, #12 wz
308ac     14 00 90 AD |  if_e	jmp	#LR__4971
308b0     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1163
308b4     34 FD BF FD | 	call	#_fatfs_cc_select_1167
308b8     00 FA 0D F2 | 	cmp	result1, #0 wz
308bc     FF FA 05 A6 |  if_e	mov	result1, #255
308c0     44 01 90 AD |  if_e	jmp	#LR__4974
308c4                 | LR__4971
308c4     04 4E 05 F1 | 	add	fp, #4
308c8     A7 14 C2 FA | 	rdbyte	arg02, fp
308cc     40 FA 05 F6 | 	mov	result1, #64
308d0     0A FB 41 F5 | 	or	result1, arg02
308d4     10 4E 05 F1 | 	add	fp, #16
308d8     A7 FA 41 FC | 	wrbyte	result1, fp
308dc     0C 4E 85 F1 | 	sub	fp, #12
308e0     A7 FA 01 FB | 	rdlong	result1, fp
308e4     18 FA 45 F0 | 	shr	result1, #24
308e8     0D 4E 05 F1 | 	add	fp, #13
308ec     A7 FA 41 FC | 	wrbyte	result1, fp
308f0     0D 4E 85 F1 | 	sub	fp, #13
308f4     A7 FA 01 FB | 	rdlong	result1, fp
308f8     10 FA 45 F0 | 	shr	result1, #16
308fc     0E 4E 05 F1 | 	add	fp, #14
30900     A7 FA 41 FC | 	wrbyte	result1, fp
30904     0E 4E 85 F1 | 	sub	fp, #14
30908     A7 FA 01 FB | 	rdlong	result1, fp
3090c     08 FA 45 F0 | 	shr	result1, #8
30910     0F 4E 05 F1 | 	add	fp, #15
30914     A7 FA 41 FC | 	wrbyte	result1, fp
30918     0F 4E 85 F1 | 	sub	fp, #15
3091c     A7 FA 01 FB | 	rdlong	result1, fp
30920     10 4E 05 F1 | 	add	fp, #16
30924     A7 FA 41 FC | 	wrbyte	result1, fp
30928     0C 4E 85 F1 | 	sub	fp, #12
3092c     A7 02 48 FC | 	wrbyte	#1, fp
30930     08 4E 85 F1 | 	sub	fp, #8
30934     A7 FA C9 FA | 	rdbyte	result1, fp wz
30938     04 4E 85 F1 | 	sub	fp, #4
3093c     0C 4E 05 A1 |  if_e	add	fp, #12
30940     A7 2A 49 AC |  if_e	wrbyte	#149, fp
30944     0C 4E 85 A1 |  if_e	sub	fp, #12
30948     04 4E 05 F1 | 	add	fp, #4
3094c     A7 FA C1 FA | 	rdbyte	result1, fp
30950     04 4E 85 F1 | 	sub	fp, #4
30954     08 FA 0D F2 | 	cmp	result1, #8 wz
30958     0C 4E 05 A1 |  if_e	add	fp, #12
3095c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
30960     0C 4E 85 A1 |  if_e	sub	fp, #12
30964     0C 4E 05 F1 | 	add	fp, #12
30968     A7 14 C2 FA | 	rdbyte	arg02, fp
3096c     0D 4E 05 F1 | 	add	fp, #13
30970     A7 14 42 FC | 	wrbyte	arg02, fp
30974     05 4E 85 F1 | 	sub	fp, #5
30978     A7 12 02 F6 | 	mov	arg01, fp
3097c     14 4E 85 F1 | 	sub	fp, #20
30980     06 14 06 F6 | 	mov	arg02, #6
30984     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1146
30988     04 4E 05 F1 | 	add	fp, #4
3098c     A7 1E C2 FA | 	rdbyte	local01, fp
30990     04 4E 85 F1 | 	sub	fp, #4
30994     0C 1E 0E F2 | 	cmp	local01, #12 wz
30998     10 4E 05 A1 |  if_e	add	fp, #16
3099c     A7 12 02 A6 |  if_e	mov	arg01, fp
309a0     10 4E 85 A1 |  if_e	sub	fp, #16
309a4     01 14 06 A6 |  if_e	mov	arg02, #1
309a8     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1153
309ac     0C 4E 05 F1 | 	add	fp, #12
309b0     A7 14 48 FC | 	wrbyte	#10, fp
309b4     0C 4E 85 F1 | 	sub	fp, #12
309b8                 | ' 	n = 10;
309b8                 | ' 	do
309b8                 | LR__4972
309b8     10 4E 05 F1 | 	add	fp, #16
309bc     A7 12 02 F6 | 	mov	arg01, fp
309c0     10 4E 85 F1 | 	sub	fp, #16
309c4     01 14 06 F6 | 	mov	arg02, #1
309c8     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1153
309cc     10 4E 05 F1 | 	add	fp, #16
309d0     A7 1E C2 FA | 	rdbyte	local01, fp
309d4     10 4E 85 F1 | 	sub	fp, #16
309d8     80 1E CE F7 | 	test	local01, #128 wz
309dc     1C 00 90 AD |  if_e	jmp	#LR__4973
309e0     0C 4E 05 F1 | 	add	fp, #12
309e4     A7 1E C2 FA | 	rdbyte	local01, fp
309e8     01 1E 86 F1 | 	sub	local01, #1
309ec     A7 1E 42 FC | 	wrbyte	local01, fp
309f0     A7 1E CA FA | 	rdbyte	local01, fp wz
309f4     0C 4E 85 F1 | 	sub	fp, #12
309f8     BC FF 9F 5D |  if_ne	jmp	#LR__4972
309fc                 | LR__4973
309fc                 | ' 
309fc                 | ' 	return d;
309fc     10 4E 05 F1 | 	add	fp, #16
30a00     A7 FA C1 FA | 	rdbyte	result1, fp
30a04     10 4E 85 F1 | 	sub	fp, #16
30a08                 | LR__4974
30a08     A7 F0 03 F6 | 	mov	ptra, fp
30a0c     B2 00 A0 FD | 	call	#popregs_
30a10                 | _fatfs_cc_send_cmd_1177_ret
30a10     2D 00 64 FD | 	ret
30a14                 | 
30a14                 | _fatfs_cc_disk_deinitialize
30a14     03 4A 05 F6 | 	mov	COUNT_, #3
30a18     A8 00 A0 FD | 	call	#pushregs_
30a1c     00 12 4E F2 | 	cmps	arg01, #0 wz
30a20     01 00 00 FF 
30a24     14 E4 05 F1 | 	add	objptr, ##532
30a28     F2 12 02 FB | 	rdlong	arg01, objptr
30a2c     04 E4 85 F1 | 	sub	objptr, #4
30a30     F2 1E 02 FB | 	rdlong	local01, objptr
30a34     08 E4 05 F1 | 	add	objptr, #8
30a38     F2 20 02 FB | 	rdlong	local02, objptr
30a3c     04 E4 05 F1 | 	add	objptr, #4
30a40     F2 22 02 FB | 	rdlong	local03, objptr
30a44     01 00 00 FF 
30a48     1C E4 85 F1 | 	sub	objptr, ##540
30a4c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
30a4c                 | '         return RES_NOTRDY;
30a4c     03 FA 05 56 |  if_ne	mov	result1, #3
30a50     2C 00 90 5D |  if_ne	jmp	#LR__4980
30a54     50 12 62 FD | 	fltl	arg01
30a58     09 01 08 FC | 	wrpin	#0, arg01
30a5c     50 1E 62 FD | 	fltl	local01
30a60     0F 01 08 FC | 	wrpin	#0, local01
30a64     50 20 62 FD | 	fltl	local02
30a68     10 01 08 FC | 	wrpin	#0, local02
30a6c     50 22 62 FD | 	fltl	local03
30a70     11 01 08 FC | 	wrpin	#0, local03
30a74     0A 12 06 F6 | 	mov	arg01, #10
30a78     3C 0E BF FD | 	call	#__system___waitms
30a7c                 | '     }
30a7c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
30a7c                 | '     _pinclear(PIN_SS);
30a7c                 | '     _pinclear(PIN_CLK);
30a7c                 | '     _pinclear(PIN_DI);
30a7c                 | '     _pinclear(PIN_DO);
30a7c                 | ' 
30a7c                 | '     _waitms(10);
30a7c                 | ' 
30a7c                 | '     return 0;
30a7c     00 FA 05 F6 | 	mov	result1, #0
30a80                 | LR__4980
30a80     A7 F0 03 F6 | 	mov	ptra, fp
30a84     B2 00 A0 FD | 	call	#popregs_
30a88                 | _fatfs_cc_disk_deinitialize_ret
30a88     2D 00 64 FD | 	ret
30a8c                 | 
30a8c                 | _fatfs_cc_gettimeofday
30a8c     04 4A 05 F6 | 	mov	COUNT_, #4
30a90     A8 00 A0 FD | 	call	#pushregs_
30a94     09 1F 02 F6 | 	mov	local01, arg01
30a98     F8 09 BF FD | 	call	#__system___getus
30a9c     FD 12 02 F6 | 	mov	arg01, result1
30aa0     02 00 00 FF 
30aa4     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
30aa8     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
30aac     09 FB 01 F6 | 	mov	result1, arg01
30ab0     10 FB 81 F1 | 	sub	result1, local02
30ab4     A1 07 00 FF 
30ab8     40 FA 15 FD | 	qdiv	result1, ##1000000
30abc     02 00 00 FF 
30ac0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
30ac4     18 20 62 FD | 	getqx	local02
30ac8     A1 07 00 FF 
30acc     40 FA 15 FD | 	qdiv	result1, ##1000000
30ad0     00 20 0E F2 | 	cmp	local02, #0 wz
30ad4     19 22 62 FD | 	getqy	local03
30ad8     28 00 90 AD |  if_e	jmp	#LR__4990
30adc     02 00 00 FF 
30ae0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
30ae4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
30ae8     10 25 02 F1 | 	add	local04, local02
30aec     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
30af0     11 13 82 F1 | 	sub	arg01, local03
30af4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
30af8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
30afc     02 00 00 FF 
30b00     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
30b04                 | LR__4990
30b04     02 00 00 FF 
30b08     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
30b0c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
30b10     02 00 00 FF 
30b14     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
30b18     0F 25 62 FC | 	wrlong	local04, local01
30b1c     04 1E 06 F1 | 	add	local01, #4
30b20     0F 23 62 FC | 	wrlong	local03, local01
30b24                 | '         lastsec += secs;
30b24                 | '         lastus = now - leftover;
30b24                 | '     }
30b24                 | '     tv->tv_sec = lastsec;
30b24                 | '     tv->tv_usec = leftover;
30b24                 | '     return 0;
30b24     00 FA 05 F6 | 	mov	result1, #0
30b28     A7 F0 03 F6 | 	mov	ptra, fp
30b2c     B2 00 A0 FD | 	call	#popregs_
30b30                 | _fatfs_cc_gettimeofday_ret
30b30     2D 00 64 FD | 	ret
30b34                 | 
30b34                 | _fatfs_cc__is_leap_year
30b34     09 FB 51 F6 | 	abs	result1, arg01 wc
30b38     03 FA 05 F5 | 	and	result1, #3
30b3c     FD FA 89 F6 | 	negc	result1, result1 wz
30b40     38 00 90 5D |  if_ne	jmp	#LR__5001
30b44     09 FB 51 F6 | 	abs	result1, arg01 wc
30b48     64 FA 15 FD | 	qdiv	result1, #100
30b4c     19 FA 61 FD | 	getqy	result1
30b50     FD FA 89 F6 | 	negc	result1, result1 wz
30b54     1C 00 90 5D |  if_ne	jmp	#LR__5000
30b58     09 FB 51 F6 | 	abs	result1, arg01 wc
30b5c     90 FB 15 FD | 	qdiv	result1, #400
30b60                 | '       return (0 == y % 400);
30b60     00 FA 05 F6 | 	mov	result1, #0
30b64     19 00 62 FD | 	getqy	_var01
30b68     00 01 8A F6 | 	negc	_var01, _var01 wz
30b6c     01 FA 05 A6 |  if_e	mov	result1, #1
30b70     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
30b74                 | LR__5000
30b74                 | '     return 1;
30b74     01 FA 05 F6 | 	mov	result1, #1
30b78     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
30b7c                 | LR__5001
30b7c                 | '   }
30b7c                 | '   return 0;
30b7c     00 FA 05 F6 | 	mov	result1, #0
30b80                 | _fatfs_cc__is_leap_year_ret
30b80     2D 00 64 FD | 	ret
30b84                 | 
30b84                 | _fatfs_cc___tzoffset
30b84     09 01 0A F6 | 	mov	_var01, arg01 wz
30b88     FF FF FF FF 
30b8c     0A FF 6B FC | 	wrlong	##-1, arg02
30b90     01 02 06 F6 | 	mov	_var02, #1
30b94     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
30b98                 | '                 return 0;
30b98     00 FA 05 A6 |  if_e	mov	result1, #0
30b9c     94 02 90 AD |  if_e	jmp	#LR__5027
30ba0     0A 01 68 FC | 	wrlong	#0, arg02
30ba4     02 00 00 FF 
30ba8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30bac     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
30bb0                 | ' 
30bb0                 | '        *hasdst = 0;
30bb0                 | ' 
30bb0                 | ' 	n = stdname;
30bb0                 | '         while (*s && isalpha(*s)) {
30bb0     02 00 00 FF 
30bb4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30bb8     97 28 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
30bbc                 | LR__5010
30bbc     00 05 CA FA | 	rdbyte	_var03, _var01 wz
30bc0     48 00 90 AD |  if_e	jmp	#LR__5012
30bc4     00 13 C2 FA | 	rdbyte	arg01, _var01
30bc8                 | ' {
30bc8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30bc8     80 12 36 F3 | 	fle	arg01, #128 wc
30bcc                 | '     return __ctype[c];
30bcc     02 00 00 FF 
30bd0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30bd4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30bd8     09 FB C1 FA | 	rdbyte	result1, arg01
30bdc     02 00 00 FF 
30be0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30be4     0C FA CD F7 | 	test	result1, #12 wz
30be8     20 00 90 AD |  if_e	jmp	#LR__5012
30bec     00 09 02 F6 | 	mov	_var05, _var01
30bf0     00 0B 02 F6 | 	mov	_var06, _var01
30bf4     01 0A 06 F1 | 	add	_var06, #1
30bf8     04 0D C2 FA | 	rdbyte	_var07, _var05
30bfc     05 01 02 F6 | 	mov	_var01, _var06
30c00     03 0D 42 FC | 	wrbyte	_var07, _var04
30c04     01 06 06 F1 | 	add	_var04, #1
30c08     B0 FF 9F FD | 	jmp	#LR__5010
30c0c                 | LR__5011
30c0c                 | LR__5012
30c0c     03 01 48 FC | 	wrbyte	#0, _var04
30c10     00 0E 06 F6 | 	mov	_var08, #0
30c14     00 05 C2 FA | 	rdbyte	_var03, _var01
30c18     2D 04 0E F2 | 	cmp	_var03, #45 wz
30c1c     01 02 66 A6 |  if_e	neg	_var02, #1
30c20     01 00 06 A1 |  if_e	add	_var01, #1
30c24     97 28 48 FB | 	callpa	#(@LR__5014-@LR__5013)>>2,fcache_load_ptr_
30c28                 | '                 sgn = -1;
30c28                 | '                 s++;
30c28                 | '         }
30c28                 | '         while (isdigit(*s)) {
30c28                 | LR__5013
30c28     00 13 C2 FA | 	rdbyte	arg01, _var01
30c2c                 | ' {
30c2c                 | '   return  (__ctype_get(c) & 0x02 ) ;
30c2c     80 12 36 F3 | 	fle	arg01, #128 wc
30c30                 | '     return __ctype[c];
30c30     02 00 00 FF 
30c34     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30c38     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30c3c     09 FB C1 FA | 	rdbyte	result1, arg01
30c40     02 00 00 FF 
30c44     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30c48     02 FA CD F7 | 	test	result1, #2 wz
30c4c     28 00 90 AD |  if_e	jmp	#LR__5015
30c50     07 05 02 F6 | 	mov	_var03, _var08
30c54     02 04 66 F0 | 	shl	_var03, #2
30c58     07 05 02 F1 | 	add	_var03, _var08
30c5c     01 04 66 F0 | 	shl	_var03, #1
30c60     00 09 C2 FA | 	rdbyte	_var05, _var01
30c64     30 08 86 F1 | 	sub	_var05, #48
30c68     04 05 02 F1 | 	add	_var03, _var05
30c6c     02 0F 02 F6 | 	mov	_var08, _var03
30c70     01 00 06 F1 | 	add	_var01, #1
30c74     B0 FF 9F FD | 	jmp	#LR__5013
30c78                 | LR__5014
30c78                 | LR__5015
30c78     07 00 00 FF 
30c7c     10 0E 06 FD | 	qmul	_var08, ##3600
30c80     00 05 C2 FA | 	rdbyte	_var03, _var01
30c84     3A 04 0E F2 | 	cmp	_var03, #58 wz
30c88     18 10 62 FD | 	getqx	_var09
30c8c     70 00 90 5D |  if_ne	jmp	#LR__5019
30c90     00 0E 06 F6 | 	mov	_var08, #0
30c94     01 00 06 F1 | 	add	_var01, #1
30c98     97 28 48 FB | 	callpa	#(@LR__5017-@LR__5016)>>2,fcache_load_ptr_
30c9c                 | '                 x = 0;
30c9c                 | '                 s++;
30c9c                 | '                 while (isdigit(*s)) {
30c9c                 | LR__5016
30c9c     00 13 C2 FA | 	rdbyte	arg01, _var01
30ca0                 | ' {
30ca0                 | '   return  (__ctype_get(c) & 0x02 ) ;
30ca0     80 12 36 F3 | 	fle	arg01, #128 wc
30ca4                 | '     return __ctype[c];
30ca4     02 00 00 FF 
30ca8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30cac     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30cb0     09 FB C1 FA | 	rdbyte	result1, arg01
30cb4     02 00 00 FF 
30cb8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30cbc     02 FA CD F7 | 	test	result1, #2 wz
30cc0     28 00 90 AD |  if_e	jmp	#LR__5018
30cc4     07 05 02 F6 | 	mov	_var03, _var08
30cc8     02 04 66 F0 | 	shl	_var03, #2
30ccc     07 05 02 F1 | 	add	_var03, _var08
30cd0     01 04 66 F0 | 	shl	_var03, #1
30cd4     00 09 C2 FA | 	rdbyte	_var05, _var01
30cd8     30 08 86 F1 | 	sub	_var05, #48
30cdc     04 05 02 F1 | 	add	_var03, _var05
30ce0     02 0F 02 F6 | 	mov	_var08, _var03
30ce4     01 00 06 F1 | 	add	_var01, #1
30ce8     B0 FF 9F FD | 	jmp	#LR__5016
30cec                 | LR__5017
30cec                 | LR__5018
30cec     07 0D 02 F6 | 	mov	_var07, _var08
30cf0     04 0C 66 F0 | 	shl	_var07, #4
30cf4     07 0D 82 F1 | 	sub	_var07, _var08
30cf8     02 0C 66 F0 | 	shl	_var07, #2
30cfc     06 11 02 F1 | 	add	_var09, _var07
30d00                 | LR__5019
30d00     02 00 00 FF 
30d04     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30d08     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
30d0c     00 13 C2 FA | 	rdbyte	arg01, _var01
30d10                 | ' {
30d10                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30d10     80 12 36 F3 | 	fle	arg01, #128 wc
30d14                 | '     return __ctype[c];
30d14     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
30d18     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30d1c     09 FB C1 FA | 	rdbyte	result1, arg01
30d20     02 00 00 FF 
30d24     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30d28     0C FA CD F7 | 	test	result1, #12 wz
30d2c     50 00 90 AD |  if_e	jmp	#LR__5022
30d30     0A 03 68 FC | 	wrlong	#1, arg02
30d34                 | '                 *hasdst = 1;
30d34                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
30d34                 | LR__5020
30d34     00 05 CA FA | 	rdbyte	_var03, _var01 wz
30d38     44 00 90 AD |  if_e	jmp	#LR__5021
30d3c     00 13 C2 FA | 	rdbyte	arg01, _var01
30d40                 | ' {
30d40                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30d40     80 12 36 F3 | 	fle	arg01, #128 wc
30d44                 | '     return __ctype[c];
30d44     02 00 00 FF 
30d48     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30d4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30d50     09 FB C1 FA | 	rdbyte	result1, arg01
30d54     02 00 00 FF 
30d58     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30d5c     0C FA CD F7 | 	test	result1, #12 wz
30d60     1C 00 90 AD |  if_e	jmp	#LR__5021
30d64     00 0B 02 F6 | 	mov	_var06, _var01
30d68     01 0A 06 F1 | 	add	_var06, #1
30d6c     00 0D C2 FA | 	rdbyte	_var07, _var01
30d70     05 01 02 F6 | 	mov	_var01, _var06
30d74     03 0D 42 FC | 	wrbyte	_var07, _var04
30d78     01 06 06 F1 | 	add	_var04, #1
30d7c     B4 FF 9F FD | 	jmp	#LR__5020
30d80                 | LR__5021
30d80                 | LR__5022
30d80     03 01 48 FC | 	wrbyte	#0, _var04
30d84     02 00 00 FF 
30d88     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30d8c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30d90     02 00 00 FF 
30d94     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30d98     20 00 90 AD |  if_e	jmp	#LR__5023
30d9c     02 00 00 FF 
30da0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30da4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30da8     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
30dac     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30db0     02 00 00 FF 
30db4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30db8     1C 00 90 FD | 	jmp	#LR__5024
30dbc                 | LR__5023
30dbc     02 00 00 FF 
30dc0     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
30dc4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30dc8     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
30dcc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30dd0     02 00 00 FF 
30dd4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30dd8                 | LR__5024
30dd8     02 00 00 FF 
30ddc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30de0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30de4     02 00 00 FF 
30de8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
30dec     20 00 90 AD |  if_e	jmp	#LR__5025
30df0     02 00 00 FF 
30df4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30df8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30dfc     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
30e00     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30e04     02 00 00 FF 
30e08     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30e0c     1C 00 90 FD | 	jmp	#LR__5026
30e10                 | LR__5025
30e10     02 00 00 FF 
30e14     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30e18     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30e1c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
30e20     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30e24     02 00 00 FF 
30e28     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30e2c                 | LR__5026
30e2c     08 03 02 FD | 	qmul	_var02, _var09
30e30                 | ' 		_tzname[1] = stdname;
30e30                 | ' 
30e30                 | '         return sgn * off;
30e30     18 FA 61 FD | 	getqx	result1
30e34                 | LR__5027
30e34                 | _fatfs_cc___tzoffset_ret
30e34     2D 00 64 FD | 	ret
30e38                 | 
30e38                 | _fatfs_cc___indst
30e38     10 12 06 F1 | 	add	arg01, #16
30e3c     09 01 02 FB | 	rdlong	_var01, arg01
30e40     10 12 86 F1 | 	sub	arg01, #16
30e44     02 00 0E F2 | 	cmp	_var01, #2 wz
30e48     30 00 90 5D |  if_ne	jmp	#LR__5030
30e4c     07 00 06 F6 | 	mov	_var01, #7
30e50     18 12 06 F1 | 	add	arg01, #24
30e54     09 03 02 FB | 	rdlong	_var02, arg01
30e58     01 01 02 F1 | 	add	_var01, _var02
30e5c     0C 12 86 F1 | 	sub	arg01, #12
30e60     09 05 02 FB | 	rdlong	_var03, arg01
30e64     02 01 82 F1 | 	sub	_var01, _var03
30e68     00 00 56 F2 | 	cmps	_var01, #0 wc
30e6c                 | '                         return 1;
30e6c     01 FA 05 C6 |  if_b	mov	result1, #1
30e70     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30e74                 | '                 return 0;
30e74     00 FA 05 F6 | 	mov	result1, #0
30e78     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30e7c                 | LR__5030
30e7c     10 12 06 F1 | 	add	arg01, #16
30e80     09 01 02 FB | 	rdlong	_var01, arg01
30e84     10 12 86 F1 | 	sub	arg01, #16
30e88     0A 00 0E F2 | 	cmp	_var01, #10 wz
30e8c     28 00 90 5D |  if_ne	jmp	#LR__5031
30e90     18 12 06 F1 | 	add	arg01, #24
30e94     09 01 02 FB | 	rdlong	_var01, arg01
30e98     0C 12 86 F1 | 	sub	arg01, #12
30e9c     09 07 02 FB | 	rdlong	_var04, arg01
30ea0     03 01 82 F1 | 	sub	_var01, _var04
30ea4     00 00 56 F2 | 	cmps	_var01, #0 wc
30ea8                 | '                         return 0;
30ea8     00 FA 05 C6 |  if_b	mov	result1, #0
30eac     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30eb0                 | '                 return 1;
30eb0     01 FA 05 F6 | 	mov	result1, #1
30eb4     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30eb8                 | LR__5031
30eb8                 | '         }
30eb8                 | ' 
30eb8                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
30eb8     00 00 06 F6 | 	mov	_var01, #0
30ebc     10 12 06 F1 | 	add	arg01, #16
30ec0     09 03 02 FB | 	rdlong	_var02, arg01
30ec4     10 12 86 F1 | 	sub	arg01, #16
30ec8     03 02 56 F2 | 	cmps	_var02, #3 wc
30ecc     10 00 90 CD |  if_b	jmp	#LR__5032
30ed0     10 12 06 F1 | 	add	arg01, #16
30ed4     09 05 02 FB | 	rdlong	_var03, arg01
30ed8     0A 04 56 F2 | 	cmps	_var03, #10 wc
30edc     01 00 06 C6 |  if_b	mov	_var01, #1
30ee0                 | LR__5032
30ee0     00 FB 01 F6 | 	mov	result1, _var01
30ee4                 | _fatfs_cc___indst_ret
30ee4     2D 00 64 FD | 	ret
30ee8                 | 
30ee8                 | ' 	
30ee8                 | ' 	FUNCTION pfunc(c as integer) as integer
30ee8                 | ___strs_cl_pfunc
30ee8                 | ' 		if (i < 16) then
30ee8     04 E4 05 F1 | 	add	objptr, #4
30eec     F2 FA 01 FB | 	rdlong	result1, objptr
30ef0     04 E4 85 F1 | 	sub	objptr, #4
30ef4     10 FA 55 F2 | 	cmps	result1, #16 wc
30ef8     2C 00 90 3D |  if_ae	jmp	#LR__5040
30efc     F2 FA 01 FB | 	rdlong	result1, objptr
30f00     04 E4 05 F1 | 	add	objptr, #4
30f04     F2 00 02 FB | 	rdlong	_var01, objptr
30f08     FD 00 02 F1 | 	add	_var01, result1
30f0c     00 13 42 FC | 	wrbyte	arg01, _var01
30f10     F2 FA 01 FB | 	rdlong	result1, objptr
30f14     01 FA 05 F1 | 	add	result1, #1
30f18     F2 FA 61 FC | 	wrlong	result1, objptr
30f1c     04 E4 85 F1 | 	sub	objptr, #4
30f20                 | ' 			p(i) = c
30f20                 | ' 			i = i+1
30f20                 | ' 			return 1
30f20     01 FA 05 F6 | 	mov	result1, #1
30f24     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30f28                 | LR__5040
30f28                 | ' 			return -1
30f28     01 FA 65 F6 | 	neg	result1, #1
30f2c                 | ___strs_cl_pfunc_ret
30f2c     2D 00 64 FD | 	ret
30f30                 | 
30f30                 | __struct__s_vfs_file_t_putchar
30f30     04 4A 05 F6 | 	mov	COUNT_, #4
30f34     A8 00 A0 FD | 	call	#pushregs_
30f38     1C E4 05 F1 | 	add	objptr, #28
30f3c     F2 1E 0A FB | 	rdlong	local01, objptr wz
30f40     1C E4 85 F1 | 	sub	objptr, #28
30f44     00 FA 05 A6 |  if_e	mov	result1, #0
30f48     48 00 90 AD |  if_e	jmp	#LR__5050
30f4c     1C E4 05 F1 | 	add	objptr, #28
30f50     F2 20 02 FB | 	rdlong	local02, objptr
30f54     10 23 02 F6 | 	mov	local03, local02
30f58     1C E4 85 F1 | 	sub	objptr, #28
30f5c     13 22 46 F7 | 	zerox	local03, #19
30f60     14 20 46 F0 | 	shr	local02, #20
30f64     02 20 66 F0 | 	shl	local02, #2
30f68     ED 20 02 F1 | 	add	local02, __methods__
30f6c     10 21 02 FB | 	rdlong	local02, local02
30f70     F2 14 02 F6 | 	mov	arg02, objptr
30f74     F2 24 02 F6 | 	mov	local04, objptr
30f78     11 E5 01 F6 | 	mov	objptr, local03
30f7c     2D 20 62 FD | 	call	local02
30f80     12 E5 01 F6 | 	mov	objptr, local04
30f84                 | '     return (i < 0) ? 0 : 1;
30f84     00 FA 55 F2 | 	cmps	result1, #0 wc
30f88     00 1E 06 C6 |  if_b	mov	local01, #0
30f8c     01 1E 06 36 |  if_ae	mov	local01, #1
30f90     0F FB 01 F6 | 	mov	result1, local01
30f94                 | LR__5050
30f94     A7 F0 03 F6 | 	mov	ptra, fp
30f98     B2 00 A0 FD | 	call	#popregs_
30f9c                 | __struct__s_vfs_file_t_putchar_ret
30f9c     2D 00 64 FD | 	ret
30fa0                 | 
30fa0                 | __struct__s_vfs_file_t_getchar
30fa0     03 4A 05 F6 | 	mov	COUNT_, #3
30fa4     A8 00 A0 FD | 	call	#pushregs_
30fa8     20 E4 05 F1 | 	add	objptr, #32
30fac     F2 12 0A FB | 	rdlong	arg01, objptr wz
30fb0     20 E4 85 F1 | 	sub	objptr, #32
30fb4     01 FA 65 A6 |  if_e	neg	result1, #1
30fb8     38 00 90 AD |  if_e	jmp	#LR__5060
30fbc                 | '     return getcf(__this);
30fbc     20 E4 05 F1 | 	add	objptr, #32
30fc0     F2 1E 02 FB | 	rdlong	local01, objptr
30fc4     0F 21 02 F6 | 	mov	local02, local01
30fc8     20 E4 85 F1 | 	sub	objptr, #32
30fcc     13 20 46 F7 | 	zerox	local02, #19
30fd0     14 1E 46 F0 | 	shr	local01, #20
30fd4     02 1E 66 F0 | 	shl	local01, #2
30fd8     ED 1E 02 F1 | 	add	local01, __methods__
30fdc     0F 1F 02 FB | 	rdlong	local01, local01
30fe0     F2 12 02 F6 | 	mov	arg01, objptr
30fe4     F2 22 02 F6 | 	mov	local03, objptr
30fe8     10 E5 01 F6 | 	mov	objptr, local02
30fec     2D 1E 62 FD | 	call	local01
30ff0     11 E5 01 F6 | 	mov	objptr, local03
30ff4                 | LR__5060
30ff4     A7 F0 03 F6 | 	mov	ptra, fp
30ff8     B2 00 A0 FD | 	call	#popregs_
30ffc                 | __struct__s_vfs_file_t_getchar_ret
30ffc     2D 00 64 FD | 	ret
31000                 | 
31000                 | __struct___bas_wrap_sender_tx
31000     03 4A 05 F6 | 	mov	COUNT_, #3
31004     A8 00 A0 FD | 	call	#pushregs_
31008     F2 1E 02 FB | 	rdlong	local01, objptr
3100c     0F 21 02 F6 | 	mov	local02, local01
31010     13 1E 46 F7 | 	zerox	local01, #19
31014     14 20 46 F0 | 	shr	local02, #20
31018     02 20 66 F0 | 	shl	local02, #2
3101c     ED 20 02 F1 | 	add	local02, __methods__
31020     10 21 02 FB | 	rdlong	local02, local02
31024     F2 22 02 F6 | 	mov	local03, objptr
31028     0F E5 01 F6 | 	mov	objptr, local01
3102c     2D 20 62 FD | 	call	local02
31030     11 E5 01 F6 | 	mov	objptr, local03
31034     01 FA 05 F6 | 	mov	result1, #1
31038     A7 F0 03 F6 | 	mov	ptra, fp
3103c     B2 00 A0 FD | 	call	#popregs_
31040                 | __struct___bas_wrap_sender_tx_ret
31040     2D 00 64 FD | 	ret
31044                 | 
31044                 | __struct___bas_wrap_sender_rx
31044     03 4A 05 F6 | 	mov	COUNT_, #3
31048     A8 00 A0 FD | 	call	#pushregs_
3104c     04 E4 05 F1 | 	add	objptr, #4
31050     F2 1E 02 FB | 	rdlong	local01, objptr
31054     0F 21 02 F6 | 	mov	local02, local01
31058     04 E4 85 F1 | 	sub	objptr, #4
3105c     13 20 46 F7 | 	zerox	local02, #19
31060     14 1E 46 F0 | 	shr	local01, #20
31064     02 1E 66 F0 | 	shl	local01, #2
31068     ED 1E 02 F1 | 	add	local01, __methods__
3106c     0F 1F 02 FB | 	rdlong	local01, local01
31070     F2 22 02 F6 | 	mov	local03, objptr
31074     10 E5 01 F6 | 	mov	objptr, local02
31078     2D 1E 62 FD | 	call	local01
3107c     11 E5 01 F6 | 	mov	objptr, local03
31080     A7 F0 03 F6 | 	mov	ptra, fp
31084     B2 00 A0 FD | 	call	#popregs_
31088                 | __struct___bas_wrap_sender_rx_ret
31088     2D 00 64 FD | 	ret
3108c                 | 
3108c                 | __struct___bas_wrap_sender_close
3108c     03 4A 05 F6 | 	mov	COUNT_, #3
31090     A8 00 A0 FD | 	call	#pushregs_
31094     08 E4 05 F1 | 	add	objptr, #8
31098     F2 1E 02 FB | 	rdlong	local01, objptr
3109c     0F 21 02 F6 | 	mov	local02, local01
310a0     08 E4 85 F1 | 	sub	objptr, #8
310a4     13 20 46 F7 | 	zerox	local02, #19
310a8     14 1E 46 F0 | 	shr	local01, #20
310ac     02 1E 66 F0 | 	shl	local01, #2
310b0     ED 1E 02 F1 | 	add	local01, __methods__
310b4     0F 1F 02 FB | 	rdlong	local01, local01
310b8     F2 22 02 F6 | 	mov	local03, objptr
310bc     10 E5 01 F6 | 	mov	objptr, local02
310c0     2D 1E 62 FD | 	call	local01
310c4     11 E5 01 F6 | 	mov	objptr, local03
310c8     A7 F0 03 F6 | 	mov	ptra, fp
310cc     B2 00 A0 FD | 	call	#popregs_
310d0                 | __struct___bas_wrap_sender_close_ret
310d0     2D 00 64 FD | 	ret
310d4                 | 
310d4                 | LR__5070
310d4     2F          | 	byte	"/"
310d5     00          | 	byte	0
310d6                 | LR__5071
310d6     69 6E 66    | 	byte	"inf"
310d9     00          | 	byte	0
310da                 | LR__5072
310da     6E 61 6E    | 	byte	"nan"
310dd     00          | 	byte	0
310de                 | LR__5073
310de                 | 	byte	
310de     00          | 	byte	0
310df                 | LR__5074
310df                 | 	byte	
310df     00          | 	byte	0
310e0                 | LR__5075
310e0                 | 	byte	
310e0     00          | 	byte	0
310e1                 | LR__5076
310e1                 | 	byte	
310e1     00          | 	byte	0
310e2                 | LR__5077
310e2                 | 	byte	
310e2     00          | 	byte	0
310e3                 | LR__5078
310e3                 | 	byte	
310e3     00          | 	byte	0
310e4                 | LR__5079
310e4                 | 	byte	
310e4     00          | 	byte	0
310e5                 | LR__5080
310e5                 | 	byte	
310e5     00          | 	byte	0
310e6                 | LR__5081
310e6     00          | 	byte	0
310e7     00          | 	byte	0
310e8                 | LR__5082
310e8     00          | 	byte	0
310e9     00          | 	byte	0
310ea                 | LR__5083
310ea     00          | 	byte	0
310eb     00          | 	byte	0
310ec                 | LR__5084
310ec     20 21 21 21 
310f0     20 63 6F 72 
310f4     72 75 70 74 
310f8     65 64 20 68 
310fc     65 61 70 3F 
31100     3F 3F 20 21 
31104     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
31107     00          | 	byte	0
31108                 | LR__5085
31108     20 21 21 21 
3110c     20 6F 75 74 
31110     20 6F 66 20 
31114     68 65 61 70 
31118     20 6D 65 6D 
3111c     6F 72 79 20 
31120     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
31124     00          | 	byte	0
31125                 | LR__5086
31125     20 21 21 21 
31129     20 63 6F 72 
3112d     72 75 70 74 
31131     65 64 20 68 
31135     65 61 70 20 
31139     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
3113d     00          | 	byte	0
3113e                 | LR__5087
3113e     00          | 	byte	0
3113f     00          | 	byte	0
31140                 | LR__5088
31140     2E          | 	byte	"."
31141     00          | 	byte	0
31142                 | LR__5089
31142     00          | 	byte	0
31143     00          | 	byte	0
31144                 | LR__5090
31144     00          | 	byte	0
31145     00          | 	byte	0
31146                 | LR__5091
31146     00          | 	byte	0
31147     00          | 	byte	0
31148                 | LR__5092
31148     2A 3A 3C 3E 
3114c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
31150     00          | 	byte	0
31151                 | LR__5093
31151     2B 2C 3B 3D 
31155     5B 5D       | 	byte	"+,;=[]"
31157     00          | 	byte	0
31158                 | LR__5094
31158     46 41 54 33 
3115c     32 20 20 20 | 	byte	"FAT32   "
31160     00          | 	byte	0
31161                 | LR__5095
31161     54 5A       | 	byte	"TZ"
31163     00          | 	byte	0
31164                 | LR__5096
31164     00          | 	byte	0
31165     00          | 	byte	0
31166                 | LR__5097
31166                 | 	byte	
31166     00          | 	byte	0
31167                 | LR__5098
31167                 | 	byte	
31167     00          | 	byte	0
31168                 | LR__5099
31168                 | 	byte	
31168     00          | 	byte	0
31169                 | LR__5100
31169                 | 	byte	
31169     00          | 	byte	0
3116a                 | LR__5101
3116a     22          | 	byte	34
3116b     00          | 	byte	0
3116c                 | LR__5102
3116c     22          | 	byte	34
3116d     00          | 	byte	0
3116e                 | LR__5103
3116e     3A          | 	byte	":"
3116f     00          | 	byte	0
31170                 | LR__5104
31170                 | 	byte	
31170     00          | 	byte	0
31171                 | LR__5105
31171                 | 	byte	
31171     00          | 	byte	0
31172                 | LR__5106
31172                 | 	byte	
31172     00          | 	byte	0
31173                 | LR__5107
31173                 | 	byte	
31173     00          | 	byte	0
31174                 | LR__5108
31174                 | 	byte	
31174     00          | 	byte	0
31175                 | LR__5109
31175                 | 	byte	
31175     00          | 	byte	0
31176                 | LR__5110
31176                 | 	byte	
31176     00          | 	byte	0
31177                 | LR__5111
31177     30          | 	byte	"0"
31178     00          | 	byte	0
31179                 | LR__5112
31179     22          | 	byte	34
3117a     00          | 	byte	0
3117b                 | LR__5113
3117b     22          | 	byte	34
3117c     00          | 	byte	0
3117d                 | LR__5114
3117d     22          | 	byte	34
3117e     00          | 	byte	0
3117f                 | LR__5115
3117f     22          | 	byte	34
31180     00          | 	byte	0
31181                 | LR__5116
31181     22          | 	byte	34
31182     00          | 	byte	0
31183                 | LR__5117
31183     3E          | 	byte	">"
31184     00          | 	byte	0
31185                 | LR__5118
31185     3C          | 	byte	"<"
31186     00          | 	byte	0
31187                 | LR__5119
31187     2B          | 	byte	"+"
31188     00          | 	byte	0
31189                 | LR__5120
31189     2D          | 	byte	"-"
3118a     00          | 	byte	0
3118b                 | LR__5121
3118b     2A          | 	byte	"*"
3118c     00          | 	byte	0
3118d                 | LR__5122
3118d     2F          | 	byte	"/"
3118e     00          | 	byte	0
3118f                 | LR__5123
3118f     5E          | 	byte	"^"
31190     00          | 	byte	0
31191                 | LR__5124
31191     3D          | 	byte	"="
31192     00          | 	byte	0
31193                 | LR__5125
31193     2B          | 	byte	"+"
31194     00          | 	byte	0
31195                 | LR__5126
31195     2B          | 	byte	"+"
31196     00          | 	byte	0
31197                 | LR__5127
31197     2D          | 	byte	"-"
31198     00          | 	byte	0
31199                 | LR__5128
31199     2D          | 	byte	"-"
3119a     00          | 	byte	0
3119b                 | LR__5129
3119b     3C          | 	byte	"<"
3119c     00          | 	byte	0
3119d                 | LR__5130
3119d     3E          | 	byte	">"
3119e     00          | 	byte	0
3119f                 | LR__5131
3119f     22          | 	byte	34
311a0     00          | 	byte	0
311a1                 | LR__5132
311a1     22          | 	byte	34
311a2     00          | 	byte	0
311a3                 | LR__5133
311a3     65 6C 73 65 | 	byte	"else"
311a7     00          | 	byte	0
311a8                 | LR__5134
311a8     74 68 65 6E | 	byte	"then"
311ac     00          | 	byte	0
311ad                 | LR__5135
311ad     2E          | 	byte	"."
311ae     00          | 	byte	0
311af                 | LR__5136
311af     3F          | 	byte	"?"
311b0     00          | 	byte	0
311b1                 | LR__5137
311b1     3F          | 	byte	"?"
311b2     00          | 	byte	0
311b3                 | LR__5138
311b3     6D 6F 75 73 
311b7     65          | 	byte	"mouse"
311b8     00          | 	byte	0
311b9                 | LR__5139
311b9     63 75 72 73 
311bd     6F 72       | 	byte	"cursor"
311bf     00          | 	byte	0
311c0                 | LR__5140
311c0     63 6C 69 63 
311c4     6B          | 	byte	"click"
311c5     00          | 	byte	0
311c6                 | LR__5141
311c6     6F 6E       | 	byte	"on"
311c8     00          | 	byte	0
311c9                 | LR__5142
311c9     31          | 	byte	"1"
311ca     00          | 	byte	0
311cb                 | LR__5143
311cb     6F 66 66    | 	byte	"off"
311ce     00          | 	byte	0
311cf                 | LR__5144
311cf     30          | 	byte	"0"
311d0     00          | 	byte	0
311d1                 | LR__5145
311d1     6D 6F 64 65 | 	byte	"mode"
311d5     00          | 	byte	0
311d6                 | LR__5146
311d6     6D 2E       | 	byte	"m."
311d8     00          | 	byte	0
311d9                 | LR__5147
311d9     61 74 61 72 
311dd     69          | 	byte	"atari"
311de     00          | 	byte	0
311df                 | LR__5148
311df     30          | 	byte	"0"
311e0     00          | 	byte	0
311e1                 | LR__5149
311e1     70 63 5F 61 
311e5     6D 62 65 72 | 	byte	"pc_amber"
311e9     00          | 	byte	0
311ea                 | LR__5150
311ea     31          | 	byte	"1"
311eb     00          | 	byte	0
311ec                 | LR__5151
311ec     70 63 5F 67 
311f0     72 65 65 6E | 	byte	"pc_green"
311f4     00          | 	byte	0
311f5                 | LR__5152
311f5     32          | 	byte	"2"
311f6     00          | 	byte	0
311f7                 | LR__5153
311f7     70 63 5F 77 
311fb     68 69 74 65 | 	byte	"pc_white"
311ff     00          | 	byte	0
31200                 | LR__5154
31200     33          | 	byte	"3"
31201     00          | 	byte	0
31202                 | LR__5155
31202     73 74       | 	byte	"st"
31204     00          | 	byte	0
31205                 | LR__5156
31205     34          | 	byte	"4"
31206     00          | 	byte	0
31207                 | LR__5157
31207                 | 	byte	
31207     00          | 	byte	0
31208                 | LR__5158
31208     6C 6F 61 64 | 	byte	"load"
3120c     00          | 	byte	0
3120d                 | LR__5159
3120d     73 61 76 65 | 	byte	"save"
31211     00          | 	byte	0
31212                 | LR__5160
31212     62 72 75 6E | 	byte	"brun"
31216     00          | 	byte	0
31217                 | LR__5161
31217     72 75 6E    | 	byte	"run"
3121a     00          | 	byte	0
3121b                 | LR__5162
3121b     6C 6F 2E    | 	byte	"lo."
3121e     00          | 	byte	0
3121f                 | LR__5163
3121f     73 2E       | 	byte	"s."
31221     00          | 	byte	0
31222                 | LR__5164
31222     62 72 2E    | 	byte	"br."
31225     00          | 	byte	0
31226                 | LR__5165
31226     65 6E 74 65 
3122a     72          | 	byte	"enter"
3122b     00          | 	byte	0
3122c                 | LR__5166
3122c     65 2E       | 	byte	"e."
3122e     00          | 	byte	0
3122f                 | LR__5167
3122f     64 65 6C 65 
31233     74 65       | 	byte	"delete"
31235     00          | 	byte	0
31236                 | LR__5168
31236     6D 6B 64 69 
3123a     72          | 	byte	"mkdir"
3123b     00          | 	byte	0
3123c                 | LR__5169
3123c     63 64       | 	byte	"cd"
3123e     00          | 	byte	0
3123f                 | LR__5170
3123f     63 64 2E    | 	byte	"cd."
31242     00          | 	byte	0
31243                 | LR__5171
31243     2E          | 	byte	"."
31244     00          | 	byte	0
31245                 | LR__5172
31245     2E 2E       | 	byte	".."
31247     00          | 	byte	0
31248                 | LR__5173
31248     63 64       | 	byte	"cd"
3124a     00          | 	byte	0
3124b                 | LR__5174
3124b     2F          | 	byte	"/"
3124c     00          | 	byte	0
3124d                 | LR__5175
3124d                 | 	byte	
3124d     00          | 	byte	0
3124e                 | LR__5176
3124e                 | 	byte	
3124e     00          | 	byte	0
3124f                 | LR__5177
3124f                 | 	byte	
3124f     00          | 	byte	0
31250                 | LR__5178
31250                 | 	byte	
31250     00          | 	byte	0
31251                 | LR__5179
31251                 | 	byte	
31251     00          | 	byte	0
31252                 | LR__5180
31252     52 65 61 64 
31256     79          | 	byte	"Ready"
31257     00          | 	byte	0
31258                 | LR__5181
31258     2B          | 	byte	"+"
31259     00          | 	byte	0
3125a                 | LR__5182
3125a     2D          | 	byte	"-"
3125b     00          | 	byte	0
3125c                 | LR__5183
3125c     6F 72       | 	byte	"or"
3125e     00          | 	byte	0
3125f                 | LR__5184
3125f     78 6F 72    | 	byte	"xor"
31262     00          | 	byte	0
31263                 | LR__5185
31263     2A          | 	byte	"*"
31264     00          | 	byte	0
31265                 | LR__5186
31265     2F          | 	byte	"/"
31266     00          | 	byte	0
31267                 | LR__5187
31267     61 6E 64    | 	byte	"and"
3126a     00          | 	byte	0
3126b                 | LR__5188
3126b     64 69 76    | 	byte	"div"
3126e     00          | 	byte	0
3126f                 | LR__5189
3126f     6D 6F 64    | 	byte	"mod"
31272     00          | 	byte	0
31273                 | LR__5190
31273     73 68 6C    | 	byte	"shl"
31276     00          | 	byte	0
31277                 | LR__5191
31277     73 68 72    | 	byte	"shr"
3127a     00          | 	byte	0
3127b                 | LR__5192
3127b     5E          | 	byte	"^"
3127c     00          | 	byte	0
3127d                 | LR__5193
3127d     6E 6F 74    | 	byte	"not"
31280     00          | 	byte	0
31281                 | LR__5194
31281     40          | 	byte	"@"
31282     00          | 	byte	0
31283                 | LR__5195
31283     3D          | 	byte	"="
31284     00          | 	byte	0
31285                 | LR__5196
31285     3E 3D       | 	byte	">="
31287     00          | 	byte	0
31288                 | LR__5197
31288     3C 3D       | 	byte	"<="
3128a     00          | 	byte	0
3128b                 | LR__5198
3128b     3C          | 	byte	"<"
3128c     00          | 	byte	0
3128d                 | LR__5199
3128d     3E          | 	byte	">"
3128e     00          | 	byte	0
3128f                 | LR__5200
3128f     3C 3E       | 	byte	"<>"
31291     00          | 	byte	0
31292                 | LR__5201
31292     2B 2B       | 	byte	"++"
31294     00          | 	byte	0
31295                 | LR__5202
31295     2D 2D       | 	byte	"--"
31297     00          | 	byte	0
31298                 | LR__5203
31298     23          | 	byte	"#"
31299     00          | 	byte	0
3129a                 | LR__5204
3129a     30          | 	byte	"0"
3129b     00          | 	byte	0
3129c                 | LR__5205
3129c     39          | 	byte	"9"
3129d     00          | 	byte	0
3129e                 | LR__5206
3129e     23 72 65 61 
312a2     64          | 	byte	"#read"
312a3     00          | 	byte	0
312a4                 | LR__5207
312a4     23 77 72 69 
312a8     74 65       | 	byte	"#write"
312aa     00          | 	byte	0
312ab                 | LR__5208
312ab     23 61 70 70 
312af     65 6E 64    | 	byte	"#append"
312b2     00          | 	byte	0
312b3                 | LR__5209
312b3     23          | 	byte	"#"
312b4     00          | 	byte	0
312b5                 | LR__5210
312b5     23          | 	byte	"#"
312b6     00          | 	byte	0
312b7                 | LR__5211
312b7     2D          | 	byte	"-"
312b8     00          | 	byte	0
312b9                 | LR__5212
312b9     30          | 	byte	"0"
312ba     00          | 	byte	0
312bb                 | LR__5213
312bb     63          | 	byte	"c"
312bc     00          | 	byte	0
312bd                 | LR__5214
312bd     63 23       | 	byte	"c#"
312bf     00          | 	byte	0
312c0                 | LR__5215
312c0     64          | 	byte	"d"
312c1     00          | 	byte	0
312c2                 | LR__5216
312c2     64 23       | 	byte	"d#"
312c4     00          | 	byte	0
312c5                 | LR__5217
312c5     65          | 	byte	"e"
312c6     00          | 	byte	0
312c7                 | LR__5218
312c7     66          | 	byte	"f"
312c8     00          | 	byte	0
312c9                 | LR__5219
312c9     66 23       | 	byte	"f#"
312cb     00          | 	byte	0
312cc                 | LR__5220
312cc     67          | 	byte	"g"
312cd     00          | 	byte	0
312ce                 | LR__5221
312ce     67 23       | 	byte	"g#"
312d0     00          | 	byte	0
312d1                 | LR__5222
312d1     61          | 	byte	"a"
312d2     00          | 	byte	0
312d3                 | LR__5223
312d3     61 23       | 	byte	"a#"
312d5     00          | 	byte	0
312d6                 | LR__5224
312d6     68          | 	byte	"h"
312d7     00          | 	byte	0
312d8                 | LR__5225
312d8     62          | 	byte	"b"
312d9     00          | 	byte	0
312da                 | LR__5226
312da     2B          | 	byte	"+"
312db     00          | 	byte	0
312dc                 | LR__5227
312dc     2D          | 	byte	"-"
312dd     00          | 	byte	0
312de                 | LR__5228
312de     3D          | 	byte	"="
312df     00          | 	byte	0
312e0                 | LR__5229
312e0     2C          | 	byte	","
312e1     00          | 	byte	0
312e2                 | LR__5230
312e2     2A          | 	byte	"*"
312e3     00          | 	byte	0
312e4                 | LR__5231
312e4     2F          | 	byte	"/"
312e5     00          | 	byte	0
312e6                 | LR__5232
312e6     3B          | 	byte	";"
312e7     00          | 	byte	0
312e8                 | LR__5233
312e8     22          | 	byte	34
312e9     00          | 	byte	0
312ea                 | LR__5234
312ea     5E          | 	byte	"^"
312eb     00          | 	byte	0
312ec                 | LR__5235
312ec     29          | 	byte	")"
312ed     00          | 	byte	0
312ee                 | LR__5236
312ee     28          | 	byte	"("
312ef     00          | 	byte	0
312f0                 | LR__5237
312f0     3A          | 	byte	":"
312f1     00          | 	byte	0
312f2                 | LR__5238
312f2     20          | 	byte	" "
312f3     00          | 	byte	0
312f4                 | LR__5239
312f4     3E          | 	byte	">"
312f5     00          | 	byte	0
312f6                 | LR__5240
312f6     3C          | 	byte	"<"
312f7     00          | 	byte	0
312f8                 | LR__5241
312f8     3D          | 	byte	"="
312f9     00          | 	byte	0
312fa                 | LR__5242
312fa     62 65 65 70 | 	byte	"beep"
312fe     00          | 	byte	0
312ff                 | LR__5243
312ff     62 2E       | 	byte	"b."
31301     00          | 	byte	0
31302                 | LR__5244
31302     62 6F 78    | 	byte	"box"
31305     00          | 	byte	0
31306                 | LR__5245
31306     62 72 75 6E | 	byte	"brun"
3130a     00          | 	byte	0
3130b                 | LR__5246
3130b     62 72 2E    | 	byte	"br."
3130e     00          | 	byte	0
3130f                 | LR__5247
3130f     63 64       | 	byte	"cd"
31311     00          | 	byte	0
31312                 | LR__5248
31312     63 68 61 6E 
31316     67 65 66 72 
3131a     65 71       | 	byte	"changefreq"
3131c     00          | 	byte	0
3131d                 | LR__5249
3131d     63 66 2E    | 	byte	"cf."
31320     00          | 	byte	0
31321                 | LR__5250
31321     63 68 61 6E 
31325     67 65 70 61 
31329     6E          | 	byte	"changepan"
3132a     00          | 	byte	0
3132b                 | LR__5251
3132b     63 70 2E    | 	byte	"cp."
3132e     00          | 	byte	0
3132f                 | LR__5252
3132f     63 68 61 6E 
31333     67 65 76 6F 
31337     6C          | 	byte	"changevol"
31338     00          | 	byte	0
31339                 | LR__5253
31339     63 76 2E    | 	byte	"cv."
3133c     00          | 	byte	0
3133d                 | LR__5254
3133d     63 68 61 6E 
31341     67 65 77 61 
31345     76 65       | 	byte	"changewave"
31347     00          | 	byte	0
31348                 | LR__5255
31348     63 77 2E    | 	byte	"cw."
3134b     00          | 	byte	0
3134c                 | LR__5256
3134c     63 69 72 63 
31350     6C 65       | 	byte	"circle"
31352     00          | 	byte	0
31353                 | LR__5257
31353     63 69 2E    | 	byte	"ci."
31356     00          | 	byte	0
31357                 | LR__5258
31357     63 6C 69 63 
3135b     6B          | 	byte	"click"
3135c     00          | 	byte	0
3135d                 | LR__5259
3135d     63 6C 6F 73 
31361     65          | 	byte	"close"
31362     00          | 	byte	0
31363                 | LR__5260
31363     63 6C 73    | 	byte	"cls"
31366     00          | 	byte	0
31367                 | LR__5261
31367     63 6F 6C 6F 
3136b     72          | 	byte	"color"
3136c     00          | 	byte	0
3136d                 | LR__5262
3136d     63 2E       | 	byte	"c."
3136f     00          | 	byte	0
31370                 | LR__5263
31370     63 73 61 76 
31374     65          | 	byte	"csave"
31375     00          | 	byte	0
31376                 | LR__5264
31376     63 73 2E    | 	byte	"cs."
31379     00          | 	byte	0
3137a                 | LR__5265
3137a     63 75 72 73 
3137e     6F 72       | 	byte	"cursor"
31380     00          | 	byte	0
31381                 | LR__5266
31381     64 65 66 73 
31385     6E 64       | 	byte	"defsnd"
31387     00          | 	byte	0
31388                 | LR__5267
31388     64 65 66 65 
3138c     6E 76       | 	byte	"defenv"
3138e     00          | 	byte	0
3138f                 | LR__5268
3138f     64 65 66 73 
31393     70 72 69 74 
31397     65          | 	byte	"defsprite"
31398     00          | 	byte	0
31399                 | LR__5269
31399     64 73 2E    | 	byte	"ds."
3139c     00          | 	byte	0
3139d                 | LR__5270
3139d     64 65 67    | 	byte	"deg"
313a0     00          | 	byte	0
313a1                 | LR__5271
313a1     64 65 6C 65 
313a5     74 65       | 	byte	"delete"
313a7     00          | 	byte	0
313a8                 | LR__5272
313a8     64 69 6D    | 	byte	"dim"
313ab     00          | 	byte	0
313ac                 | LR__5273
313ac     64 69 72    | 	byte	"dir"
313af     00          | 	byte	0
313b0                 | LR__5274
313b0     64 70 6F 6B 
313b4     65          | 	byte	"dpoke"
313b5     00          | 	byte	0
313b6                 | LR__5275
313b6     64 72 61 77 | 	byte	"draw"
313ba     00          | 	byte	0
313bb                 | LR__5276
313bb     64 72 61 77 
313bf     74 6F       | 	byte	"drawto"
313c1     00          | 	byte	0
313c2                 | LR__5277
313c2     64 72 2E    | 	byte	"dr."
313c5     00          | 	byte	0
313c6                 | LR__5278
313c6     65 6C 73 65 | 	byte	"else"
313ca     00          | 	byte	0
313cb                 | LR__5279
313cb     65 6E 64    | 	byte	"end"
313ce     00          | 	byte	0
313cf                 | LR__5280
313cf     65 6E 74 65 
313d3     72          | 	byte	"enter"
313d4     00          | 	byte	0
313d5                 | LR__5281
313d5     65 2E       | 	byte	"e."
313d7     00          | 	byte	0
313d8                 | LR__5282
313d8     66 63 69 72 
313dc     63 6C 65    | 	byte	"fcircle"
313df     00          | 	byte	0
313e0                 | LR__5283
313e0     66 63 2E    | 	byte	"fc."
313e3     00          | 	byte	0
313e4                 | LR__5284
313e4     66 69 6C 6C | 	byte	"fill"
313e8     00          | 	byte	0
313e9                 | LR__5285
313e9     66 69 2E    | 	byte	"fi."
313ec     00          | 	byte	0
313ed                 | LR__5286
313ed     66 6F 6E 74 | 	byte	"font"
313f1     00          | 	byte	0
313f2                 | LR__5287
313f2     66 6F 72    | 	byte	"for"
313f5     00          | 	byte	0
313f6                 | LR__5288
313f6     66 2E       | 	byte	"f."
313f8     00          | 	byte	0
313f9                 | LR__5289
313f9     66 72 61 6D 
313fd     65          | 	byte	"frame"
313fe     00          | 	byte	0
313ff                 | LR__5290
313ff     66 72 2E    | 	byte	"fr."
31402     00          | 	byte	0
31403                 | LR__5291
31403     67 65 74    | 	byte	"get"
31406     00          | 	byte	0
31407                 | LR__5292
31407     67 6F 73 75 
3140b     62          | 	byte	"gosub"
3140c     00          | 	byte	0
3140d                 | LR__5293
3140d     67 6F 74 6F | 	byte	"goto"
31411     00          | 	byte	0
31412                 | LR__5294
31412     67 2E       | 	byte	"g."
31414     00          | 	byte	0
31415                 | LR__5295
31415     69 66       | 	byte	"if"
31417     00          | 	byte	0
31418                 | LR__5296
31418     69 6E 6B    | 	byte	"ink"
3141b     00          | 	byte	0
3141c                 | LR__5297
3141c     69 2E       | 	byte	"i."
3141e     00          | 	byte	0
3141f                 | LR__5298
3141f     6C 69 73 74 | 	byte	"list"
31423     00          | 	byte	0
31424                 | LR__5299
31424     6C 2E       | 	byte	"l."
31426     00          | 	byte	0
31427                 | LR__5300
31427     6C 6F 61 64 | 	byte	"load"
3142b     00          | 	byte	0
3142c                 | LR__5301
3142c     6C 6F 2E    | 	byte	"lo."
3142f     00          | 	byte	0
31430                 | LR__5302
31430     6C 70 6F 6B 
31434     65          | 	byte	"lpoke"
31435     00          | 	byte	0
31436                 | LR__5303
31436     6D 6B 64 69 
3143a     72          | 	byte	"mkdir"
3143b     00          | 	byte	0
3143c                 | LR__5304
3143c     6D 6F 64 65 | 	byte	"mode"
31440     00          | 	byte	0
31441                 | LR__5305
31441     6D 2E       | 	byte	"m."
31443     00          | 	byte	0
31444                 | LR__5306
31444     6D 6F 75 73 
31448     65          | 	byte	"mouse"
31449     00          | 	byte	0
3144a                 | LR__5307
3144a     6E 65 77    | 	byte	"new"
3144d     00          | 	byte	0
3144e                 | LR__5308
3144e     6E 65 78 74 | 	byte	"next"
31452     00          | 	byte	0
31453                 | LR__5309
31453     6E 2E       | 	byte	"n."
31455     00          | 	byte	0
31456                 | LR__5310
31456     6F 70 65 6E | 	byte	"open"
3145a     00          | 	byte	0
3145b                 | LR__5311
3145b     70 61 70 65 
3145f     72          | 	byte	"paper"
31460     00          | 	byte	0
31461                 | LR__5312
31461     70 61 2E    | 	byte	"pa."
31464     00          | 	byte	0
31465                 | LR__5313
31465     70 69 6E 66 
31469     6C 6F 61 74 | 	byte	"pinfloat"
3146d     00          | 	byte	0
3146e                 | LR__5314
3146e     70 69 6E 68 
31472     69          | 	byte	"pinhi"
31473     00          | 	byte	0
31474                 | LR__5315
31474     70 69 6E 6C 
31478     6F          | 	byte	"pinlo"
31479     00          | 	byte	0
3147a                 | LR__5316
3147a     70 69 6E 73 
3147e     74 61 72 74 | 	byte	"pinstart"
31482     00          | 	byte	0
31483                 | LR__5317
31483     70 69 6E 74 
31487     6F 67 67 6C 
3148b     65          | 	byte	"pintoggle"
3148c     00          | 	byte	0
3148d                 | LR__5318
3148d     70 69 6E 77 
31491     72 69 74 65 | 	byte	"pinwrite"
31495     00          | 	byte	0
31496                 | LR__5319
31496     70 6C 61 79 | 	byte	"play"
3149a     00          | 	byte	0
3149b                 | LR__5320
3149b     70 2E       | 	byte	"p."
3149d     00          | 	byte	0
3149e                 | LR__5321
3149e     70 6C 6F 74 | 	byte	"plot"
314a2     00          | 	byte	0
314a3                 | LR__5322
314a3     70 6C 2E    | 	byte	"pl."
314a6     00          | 	byte	0
314a7                 | LR__5323
314a7     70 6F 6B 65 | 	byte	"poke"
314ab     00          | 	byte	0
314ac                 | LR__5324
314ac     70 6F 70    | 	byte	"pop"
314af     00          | 	byte	0
314b0                 | LR__5325
314b0     70 6F 73 69 
314b4     74 69 6F 6E | 	byte	"position"
314b8     00          | 	byte	0
314b9                 | LR__5326
314b9     70 6F 73 2E | 	byte	"pos."
314bd     00          | 	byte	0
314be                 | LR__5327
314be     70 72 69 6E 
314c2     74          | 	byte	"print"
314c3     00          | 	byte	0
314c4                 | LR__5328
314c4     3F          | 	byte	"?"
314c5     00          | 	byte	0
314c6                 | LR__5329
314c6     70 75 74    | 	byte	"put"
314c9     00          | 	byte	0
314ca                 | LR__5330
314ca     72 61 64    | 	byte	"rad"
314cd     00          | 	byte	0
314ce                 | LR__5331
314ce     72 65 6C 65 
314d2     61 73 65    | 	byte	"release"
314d5     00          | 	byte	0
314d6                 | LR__5332
314d6     72 65 6D    | 	byte	"rem"
314d9     00          | 	byte	0
314da                 | LR__5333
314da     27          | 	byte	"'"
314db     00          | 	byte	0
314dc                 | LR__5334
314dc     72 65 74 75 
314e0     72 6E       | 	byte	"return"
314e2     00          | 	byte	0
314e3                 | LR__5335
314e3     72 75 6E    | 	byte	"run"
314e6     00          | 	byte	0
314e7                 | LR__5336
314e7     73 61 76 65 | 	byte	"save"
314eb     00          | 	byte	0
314ec                 | LR__5337
314ec     73 2E       | 	byte	"s."
314ee     00          | 	byte	0
314ef                 | LR__5338
314ef     73 65 74 64 
314f3     65 6C 61 79 | 	byte	"setdelay"
314f7     00          | 	byte	0
314f8                 | LR__5339
314f8     73 64 2E    | 	byte	"sd."
314fb     00          | 	byte	0
314fc                 | LR__5340
314fc     73 65 74 65 
31500     6E 76       | 	byte	"setenv"
31502     00          | 	byte	0
31503                 | LR__5341
31503     73 65 2E    | 	byte	"se."
31506     00          | 	byte	0
31507                 | LR__5342
31507     73 65 74 6C 
3150b     65 6E       | 	byte	"setlen"
3150d     00          | 	byte	0
3150e                 | LR__5343
3150e     73 6C 2E    | 	byte	"sl."
31511     00          | 	byte	0
31512                 | LR__5344
31512     73 65 74 70 
31516     61 6E       | 	byte	"setpan"
31518     00          | 	byte	0
31519                 | LR__5345
31519     73 70       | 	byte	"sp"
3151b     00          | 	byte	0
3151c                 | LR__5346
3151c     73 65 74 73 
31520     75 73 74 61 
31524     69 6E       | 	byte	"setsustain"
31526     00          | 	byte	0
31527                 | LR__5347
31527     73 73 2E    | 	byte	"ss."
3152a     00          | 	byte	0
3152b                 | LR__5348
3152b     73 65 74 76 
3152f     6F 6C       | 	byte	"setvol"
31531     00          | 	byte	0
31532                 | LR__5349
31532     73 76 2E    | 	byte	"sv."
31535     00          | 	byte	0
31536                 | LR__5350
31536     73 65 74 77 
3153a     61 76 65    | 	byte	"setwave"
3153d     00          | 	byte	0
3153e                 | LR__5351
3153e     73 77 2E    | 	byte	"sw."
31541     00          | 	byte	0
31542                 | LR__5352
31542     73 65 74 77 
31546     61 76       | 	byte	"setwav"
31548     00          | 	byte	0
31549                 | LR__5353
31549     73 68 75 74 
3154d     75 70       | 	byte	"shutup"
3154f     00          | 	byte	0
31550                 | LR__5354
31550     73 68 2E    | 	byte	"sh."
31553     00          | 	byte	0
31554                 | LR__5355
31554     73 6F 75 6E 
31558     64          | 	byte	"sound"
31559     00          | 	byte	0
3155a                 | LR__5356
3155a     73 6F 2E    | 	byte	"so."
3155d     00          | 	byte	0
3155e                 | LR__5357
3155e     73 70 72 69 
31562     74 65       | 	byte	"sprite"
31564     00          | 	byte	0
31565                 | LR__5358
31565     73 70 72 2E | 	byte	"spr."
31569     00          | 	byte	0
3156a                 | LR__5359
3156a     74 68 65 6E | 	byte	"then"
3156e     00          | 	byte	0
3156f                 | LR__5360
3156f     77 61 69 74 
31573     6D 73       | 	byte	"waitms"
31575     00          | 	byte	0
31576                 | LR__5361
31576     77 2E       | 	byte	"w."
31578     00          | 	byte	0
31579                 | LR__5362
31579     77 61 69 74 
3157d     63 6C 6F 63 
31581     6B          | 	byte	"waitclock"
31582     00          | 	byte	0
31583                 | LR__5363
31583     77 63 2E    | 	byte	"wc."
31586     00          | 	byte	0
31587                 | LR__5364
31587     77 61 69 74 
3158b     76 62 6C    | 	byte	"waitvbl"
3158e     00          | 	byte	0
3158f                 | LR__5365
3158f     77 76 2E    | 	byte	"wv."
31592     00          | 	byte	0
31593                 | LR__5366
31593     77 72 70 69 
31597     6E          | 	byte	"wrpin"
31598     00          | 	byte	0
31599                 | LR__5367
31599     77 78 70 69 
3159d     6E          | 	byte	"wxpin"
3159e     00          | 	byte	0
3159f                 | LR__5368
3159f     77 79 70 69 
315a3     6E          | 	byte	"wypin"
315a4     00          | 	byte	0
315a5                 | LR__5369
315a5     61 62 73    | 	byte	"abs"
315a8     00          | 	byte	0
315a9                 | LR__5370
315a9     61 63 6F 73 | 	byte	"acos"
315ad     00          | 	byte	0
315ae                 | LR__5371
315ae     61 64 72    | 	byte	"adr"
315b1     00          | 	byte	0
315b2                 | LR__5372
315b2     61 64 64 72 | 	byte	"addr"
315b6     00          | 	byte	0
315b7                 | LR__5373
315b7     61 73 63    | 	byte	"asc"
315ba     00          | 	byte	0
315bb                 | LR__5374
315bb     61 73 69 6E | 	byte	"asin"
315bf     00          | 	byte	0
315c0                 | LR__5375
315c0     61 74 6E    | 	byte	"atn"
315c3     00          | 	byte	0
315c4                 | LR__5376
315c4     62 69 6E 24 | 	byte	"bin$"
315c8     00          | 	byte	0
315c9                 | LR__5377
315c9     63 68 72 24 | 	byte	"chr$"
315cd     00          | 	byte	0
315ce                 | LR__5378
315ce     63 6F 73    | 	byte	"cos"
315d1     00          | 	byte	0
315d2                 | LR__5379
315d2     64 70 65 65 
315d6     6B          | 	byte	"dpeek"
315d7     00          | 	byte	0
315d8                 | LR__5380
315d8     66 72 65    | 	byte	"fre"
315db     00          | 	byte	0
315dc                 | LR__5381
315dc     67 65 74 70 
315e0     69 78 65 6C | 	byte	"getpixel"
315e4     00          | 	byte	0
315e5                 | LR__5382
315e5     67 65 2E    | 	byte	"ge."
315e8     00          | 	byte	0
315e9                 | LR__5383
315e9     67 65 74 65 
315ed     6E 76 73 75 
315f1     73 74 61 69 
315f5     6E          | 	byte	"getenvsustain"
315f6     00          | 	byte	0
315f7                 | LR__5384
315f7     67 65 74 6E 
315fb     6F 74 65 76 
315ff     61 6C 75 65 | 	byte	"getnotevalue"
31603     00          | 	byte	0
31604                 | LR__5385
31604     67 65 74 74 
31608     69 6D 65    | 	byte	"gettime"
3160b     00          | 	byte	0
3160c                 | LR__5386
3160c     68 65 78 24 | 	byte	"hex$"
31610     00          | 	byte	0
31611                 | LR__5387
31611     69 6E 6B 65 
31615     79 24       | 	byte	"inkey$"
31617     00          | 	byte	0
31618                 | LR__5388
31618     69 6E 74    | 	byte	"int"
3161b     00          | 	byte	0
3161c                 | LR__5389
3161c     6C 65 66 74 
31620     24          | 	byte	"left$"
31621     00          | 	byte	0
31622                 | LR__5390
31622     6C 65 6E    | 	byte	"len"
31625     00          | 	byte	0
31626                 | LR__5391
31626     6C 6F 67    | 	byte	"log"
31629     00          | 	byte	0
3162a                 | LR__5392
3162a     6C 70 65 65 
3162e     6B          | 	byte	"lpeek"
3162f     00          | 	byte	0
31630                 | LR__5393
31630     6D 69 64 24 | 	byte	"mid$"
31634     00          | 	byte	0
31635                 | LR__5394
31635     6D 6F 75 73 
31639     65 6B       | 	byte	"mousek"
3163b     00          | 	byte	0
3163c                 | LR__5395
3163c     6D 6F 75 73 
31640     65 77       | 	byte	"mousew"
31642     00          | 	byte	0
31643                 | LR__5396
31643     6D 6F 75 73 
31647     65 78       | 	byte	"mousex"
31649     00          | 	byte	0
3164a                 | LR__5397
3164a     6D 6F 75 73 
3164e     65 79       | 	byte	"mousey"
31650     00          | 	byte	0
31651                 | LR__5398
31651     70 65 65 6B | 	byte	"peek"
31655     00          | 	byte	0
31656                 | LR__5399
31656     70 69 6E 72 
3165a     65 61 64    | 	byte	"pinread"
3165d     00          | 	byte	0
3165e                 | LR__5400
3165e     72 64 70 69 
31662     6E          | 	byte	"rdpin"
31663     00          | 	byte	0
31664                 | LR__5401
31664     72 69 67 68 
31668     74 24       | 	byte	"right$"
3166a     00          | 	byte	0
3166b                 | LR__5402
3166b     72 71 70 69 
3166f     6E          | 	byte	"rqpin"
31670     00          | 	byte	0
31671                 | LR__5403
31671     72 6F 75 6E 
31675     64          | 	byte	"round"
31676     00          | 	byte	0
31677                 | LR__5404
31677     72 6E 64    | 	byte	"rnd"
3167a     00          | 	byte	0
3167b                 | LR__5405
3167b     73 69 6E    | 	byte	"sin"
3167e     00          | 	byte	0
3167f                 | LR__5406
3167f     73 71 72    | 	byte	"sqr"
31682     00          | 	byte	0
31683                 | LR__5407
31683     73 74 69 63 
31687     6B          | 	byte	"stick"
31688     00          | 	byte	0
31689                 | LR__5408
31689     73 74 72 69 
3168d     67          | 	byte	"strig"
3168e     00          | 	byte	0
3168f                 | LR__5409
3168f     73 74 72 24 | 	byte	"str$"
31693     00          | 	byte	0
31694                 | LR__5410
31694     74 61 6E    | 	byte	"tan"
31697     00          | 	byte	0
31698                 | LR__5411
31698     76 61 6C    | 	byte	"val"
3169b     00          | 	byte	0
3169c                 | LR__5412
3169c     76 61 72 70 
316a0     74 72       | 	byte	"varptr"
316a2     00          | 	byte	0
316a3                 | LR__5413
316a3     61          | 	byte	"a"
316a4     00          | 	byte	0
316a5                 | LR__5414
316a5     7A          | 	byte	"z"
316a6     00          | 	byte	0
316a7                 | LR__5415
316a7     5F          | 	byte	"_"
316a8     00          | 	byte	0
316a9                 | LR__5416
316a9     61          | 	byte	"a"
316aa     00          | 	byte	0
316ab                 | LR__5417
316ab     7A          | 	byte	"z"
316ac     00          | 	byte	0
316ad                 | LR__5418
316ad     30          | 	byte	"0"
316ae     00          | 	byte	0
316af                 | LR__5419
316af     39          | 	byte	"9"
316b0     00          | 	byte	0
316b1                 | LR__5420
316b1     5F          | 	byte	"_"
316b2     00          | 	byte	0
316b3                 | LR__5421
316b3     2E          | 	byte	"."
316b4     00          | 	byte	0
316b5                 | LR__5422
316b5     61          | 	byte	"a"
316b6     00          | 	byte	0
316b7                 | LR__5423
316b7     7A          | 	byte	"z"
316b8     00          | 	byte	0
316b9                 | LR__5424
316b9     30          | 	byte	"0"
316ba     00          | 	byte	0
316bb                 | LR__5425
316bb     39          | 	byte	"9"
316bc     00          | 	byte	0
316bd                 | LR__5426
316bd     5F          | 	byte	"_"
316be     00          | 	byte	0
316bf                 | LR__5427
316bf     24          | 	byte	"$"
316c0     00          | 	byte	0
316c1                 | LR__5428
316c1     25          | 	byte	"%"
316c2     00          | 	byte	0
316c3                 | LR__5429
316c3     21          | 	byte	"!"
316c4     00          | 	byte	0
316c5                 | LR__5430
316c5     30          | 	byte	"0"
316c6     00          | 	byte	0
316c7                 | LR__5431
316c7     39          | 	byte	"9"
316c8     00          | 	byte	0
316c9                 | LR__5432
316c9     2E          | 	byte	"."
316ca     00          | 	byte	0
316cb                 | LR__5433
316cb     24          | 	byte	"$"
316cc     00          | 	byte	0
316cd                 | LR__5434
316cd     25          | 	byte	"%"
316ce     00          | 	byte	0
316cf                 | LR__5435
316cf     2D          | 	byte	"-"
316d0     00          | 	byte	0
316d1                 | LR__5436
316d1     2E          | 	byte	"."
316d2     00          | 	byte	0
316d3                 | LR__5437
316d3     24          | 	byte	"$"
316d4     00          | 	byte	0
316d5                 | LR__5438
316d5     25          | 	byte	"%"
316d6     00          | 	byte	0
316d7                 | LR__5439
316d7     30          | 	byte	"0"
316d8     00          | 	byte	0
316d9                 | LR__5440
316d9     39          | 	byte	"9"
316da     00          | 	byte	0
316db                 | LR__5441
316db     5F          | 	byte	"_"
316dc     00          | 	byte	0
316dd                 | LR__5442
316dd     2E          | 	byte	"."
316de     00          | 	byte	0
316df                 | LR__5443
316df     45          | 	byte	"E"
316e0     00          | 	byte	0
316e1                 | LR__5444
316e1     65          | 	byte	"e"
316e2     00          | 	byte	0
316e3                 | LR__5445
316e3     2D          | 	byte	"-"
316e4     00          | 	byte	0
316e5                 | LR__5446
316e5     61          | 	byte	"a"
316e6     00          | 	byte	0
316e7                 | LR__5447
316e7     66          | 	byte	"f"
316e8     00          | 	byte	0
316e9                 | LR__5448
316e9     30          | 	byte	"0"
316ea     00          | 	byte	0
316eb                 | LR__5449
316eb     31          | 	byte	"1"
316ec     00          | 	byte	0
316ed                 | LR__5450
316ed     5F          | 	byte	"_"
316ee     00          | 	byte	0
316ef                 | LR__5451
316ef     2D          | 	byte	"-"
316f0     00          | 	byte	0
316f1                 | LR__5452
316f1     65          | 	byte	"e"
316f2     00          | 	byte	0
316f3                 | LR__5453
316f3     2E          | 	byte	"."
316f4     00          | 	byte	0
316f5                 | LR__5454
316f5     45          | 	byte	"E"
316f6     00          | 	byte	0
316f7                 | LR__5455
316f7     65          | 	byte	"e"
316f8     00          | 	byte	0
316f9                 | LR__5456
316f9     30          | 	byte	"0"
316fa     00          | 	byte	0
316fb                 | LR__5457
316fb     39          | 	byte	"9"
316fc     00          | 	byte	0
316fd                 | LR__5458
316fd     24          | 	byte	"$"
316fe     00          | 	byte	0
316ff                 | LR__5459
316ff     25          | 	byte	"%"
31700     00          | 	byte	0
31701                 | LR__5460
31701     2D          | 	byte	"-"
31702     00          | 	byte	0
31703                 | LR__5461
31703     24          | 	byte	"$"
31704     00          | 	byte	0
31705                 | LR__5462
31705     25          | 	byte	"%"
31706     00          | 	byte	0
31707                 | LR__5463
31707     30          | 	byte	"0"
31708     00          | 	byte	0
31709                 | LR__5464
31709     39          | 	byte	"9"
3170a     00          | 	byte	0
3170b                 | LR__5465
3170b     5F          | 	byte	"_"
3170c     00          | 	byte	0
3170d                 | LR__5466
3170d     30          | 	byte	"0"
3170e     00          | 	byte	0
3170f                 | LR__5467
3170f     39          | 	byte	"9"
31710     00          | 	byte	0
31711                 | LR__5468
31711     61          | 	byte	"a"
31712     00          | 	byte	0
31713                 | LR__5469
31713     66          | 	byte	"f"
31714     00          | 	byte	0
31715                 | LR__5470
31715     5F          | 	byte	"_"
31716     00          | 	byte	0
31717                 | LR__5471
31717     30          | 	byte	"0"
31718     00          | 	byte	0
31719                 | LR__5472
31719     31          | 	byte	"1"
3171a     00          | 	byte	0
3171b                 | LR__5473
3171b     5F          | 	byte	"_"
3171c     00          | 	byte	0
3171d                 | LR__5474
3171d     30          | 	byte	"0"
3171e     00          | 	byte	0
3171f                 | LR__5475
3171f     39          | 	byte	"9"
31720     00          | 	byte	0
31721                 | LR__5476
31721     5F          | 	byte	"_"
31722     00          | 	byte	0
31723                 | LR__5477
31723     22          | 	byte	34
31724     00          | 	byte	0
31725                 | LR__5478
31725     22          | 	byte	34
31726     00          | 	byte	0
31727                 | LR__5479
31727     44 69 6D 3A 
3172b     20 61 74 20 
3172f     6C 69 6E 65 
31733     20          | 	byte	"Dim: at line "
31734     00          | 	byte	0
31735                 | LR__5480
31735     3A 20 77 61 
31739     72 6E 69 6E 
3173d     67 3A 20 74 
31741     68 65 20 76 
31745     61 72 69 61 
31749     62 6C 65 20 
3174d     65 78 69 73 
31751     74 65 64 2E | 	byte	": warning: the variable existed."
31755     00          | 	byte	0
31756                 | LR__5481
31756     28          | 	byte	"("
31757     00          | 	byte	0
31758                 | LR__5482
31758     61 73       | 	byte	"as"
3175a     00          | 	byte	0
3175b                 | LR__5483
3175b     61 73       | 	byte	"as"
3175d     00          | 	byte	0
3175e                 | LR__5484
3175e     2C          | 	byte	","
3175f     00          | 	byte	0
31760                 | LR__5485
31760     29          | 	byte	")"
31761     00          | 	byte	0
31762                 | LR__5486
31762     29          | 	byte	")"
31763     00          | 	byte	0
31764                 | LR__5487
31764     61 73       | 	byte	"as"
31766     00          | 	byte	0
31767                 | LR__5488
31767     62 79 74 65 | 	byte	"byte"
3176b     00          | 	byte	0
3176c                 | LR__5489
3176c     75 62 79 74 
31770     65          | 	byte	"ubyte"
31771     00          | 	byte	0
31772                 | LR__5490
31772     73 68 6F 72 
31776     74          | 	byte	"short"
31777     00          | 	byte	0
31778                 | LR__5491
31778     75 73 68 6F 
3177c     72 74       | 	byte	"ushort"
3177e     00          | 	byte	0
3177f                 | LR__5492
3177f     6C 6F 6E 67 | 	byte	"long"
31783     00          | 	byte	0
31784                 | LR__5493
31784     69 6E 74 65 
31788     67 65 72    | 	byte	"integer"
3178b     00          | 	byte	0
3178c                 | LR__5494
3178c     75 6C 6F 6E 
31790     67          | 	byte	"ulong"
31791     00          | 	byte	0
31792                 | LR__5495
31792     69 6E 74 36 
31796     34          | 	byte	"int64"
31797     00          | 	byte	0
31798                 | LR__5496
31798     75 69 6E 74 
3179c     36 34       | 	byte	"uint64"
3179e     00          | 	byte	0
3179f                 | LR__5497
3179f     73 69 6E 67 
317a3     6C 65       | 	byte	"single"
317a5     00          | 	byte	0
317a6                 | LR__5498
317a6     64 6F 75 62 
317aa     6C 65       | 	byte	"double"
317ac     00          | 	byte	0
317ad                 | LR__5499
317ad     73 74 72 69 
317b1     6E 67       | 	byte	"string"
317b3     00          | 	byte	0
317b4                 | LR__5500
317b4     74 6F       | 	byte	"to"
317b6     00          | 	byte	0
317b7                 | LR__5501
317b7     73 74 65 70 | 	byte	"step"
317bb     00          | 	byte	0
317bc                 | LR__5502
317bc     73 2E       | 	byte	"s."
317be     00          | 	byte	0
317bf                 | LR__5503
317bf     24          | 	byte	"$"
317c0     00          | 	byte	0
317c1                 | LR__5504
317c1     26 68       | 	byte	"&h"
317c3     00          | 	byte	0
317c4                 | LR__5505
317c4     25          | 	byte	"%"
317c5     00          | 	byte	0
317c6                 | LR__5506
317c6     26 62       | 	byte	"&b"
317c8     00          | 	byte	0
317c9                 | LR__5507
317c9                 | 	byte	
317c9     00          | 	byte	0
317ca                 | LR__5508
317ca     61 63 6F 73 
317ce     3A 20       | 	byte	"acos: "
317d0     00          | 	byte	0
317d1                 | LR__5509
317d1     61 73 63 3A 
317d5     20          | 	byte	"asc: "
317d6     00          | 	byte	0
317d7                 | LR__5510
317d7     61 73 63 3A 
317db     20          | 	byte	"asc: "
317dc     00          | 	byte	0
317dd                 | LR__5511
317dd     61 73 69 6E 
317e1     3A 20       | 	byte	"asin: "
317e3     00          | 	byte	0
317e4                 | LR__5512
317e4     61 74 6E 3A 
317e8     20          | 	byte	"atn: "
317e9     00          | 	byte	0
317ea                 | LR__5513
317ea     62 69 6E 24 
317ee     3A 20       | 	byte	"bin$: "
317f0     00          | 	byte	0
317f1                 | LR__5514
317f1     2F          | 	byte	"/"
317f2     00          | 	byte	0
317f3                 | LR__5515
317f3     2F 73 64 2F 
317f7     62 69 6E 2F | 	byte	"/sd/bin/"
317fb     00          | 	byte	0
317fc                 | LR__5516
317fc     53 79 73 74 
31800     65 6D 20 65 
31804     72 72 6F 72 
31808     20          | 	byte	"System error "
31809     00          | 	byte	0
3180a                 | LR__5517
3180a     3A 20       | 	byte	": "
3180c     00          | 	byte	0
3180d                 | LR__5518
3180d     2A          | 	byte	"*"
3180e     00          | 	byte	0
3180f                 | LR__5519
3180f     2E 2E       | 	byte	".."
31811     00          | 	byte	0
31812                 | LR__5520
31812     2F          | 	byte	"/"
31813     00          | 	byte	0
31814                 | LR__5521
31814     2F          | 	byte	"/"
31815     00          | 	byte	0
31816                 | LR__5522
31816     53 79 73 74 
3181a     65 6D 20 65 
3181e     72 72 6F 72 
31822     20          | 	byte	"System error "
31823     00          | 	byte	0
31824                 | LR__5523
31824     3A 20       | 	byte	": "
31826     00          | 	byte	0
31827                 | LR__5524
31827     43 75 72 72 
3182b     65 6E 74 20 
3182f     64 69 72 65 
31833     63 74 6F 72 
31837     79 3A 20    | 	byte	"Current directory: "
3183a     00          | 	byte	0
3183b                 | LR__5525
3183b     2F          | 	byte	"/"
3183c     00          | 	byte	0
3183d                 | LR__5526
3183d     53 79 73 74 
31841     65 6D 20 65 
31845     72 72 6F 72 
31849     20          | 	byte	"System error "
3184a     00          | 	byte	0
3184b                 | LR__5527
3184b     3A 20       | 	byte	": "
3184d     00          | 	byte	0
3184e                 | LR__5528
3184e     43 75 72 72 
31852     65 6E 74 20 
31856     64 69 72 65 
3185a     63 74 6F 72 
3185e     79 3A 20    | 	byte	"Current directory: "
31861     00          | 	byte	0
31862                 | LR__5529
31862     2F          | 	byte	"/"
31863     00          | 	byte	0
31864                 | LR__5530
31864     2F          | 	byte	"/"
31865     00          | 	byte	0
31866                 | LR__5531
31866     2F          | 	byte	"/"
31867     00          | 	byte	0
31868                 | LR__5532
31868     53 79 73 74 
3186c     65 6D 20 65 
31870     72 72 6F 72 
31874     20          | 	byte	"System error "
31875     00          | 	byte	0
31876                 | LR__5533
31876     3A 20       | 	byte	": "
31878     00          | 	byte	0
31879                 | LR__5534
31879     43 75 72 72 
3187d     65 6E 74 20 
31881     64 69 72 65 
31885     63 74 6F 72 
31889     79 3A 20    | 	byte	"Current directory: "
3188c     00          | 	byte	0
3188d                 | LR__5535
3188d     63 68 72 24 
31891     3A 20       | 	byte	"chr$: "
31893     00          | 	byte	0
31894                 | LR__5536
31894     63 68 61 6E 
31898     6E 65 6C 23 
3189c     20 65 78 70 
318a0     65 63 74 65 
318a4     64          | 	byte	"channel# expected"
318a5     00          | 	byte	0
318a6                 | LR__5537
318a6     63 6F 73 3A 
318aa     20          | 	byte	"cos: "
318ab     00          | 	byte	0
318ac                 | LR__5538
318ac                 | 	byte	
318ac     00          | 	byte	0
318ad                 | LR__5539
318ad                 | 	byte	
318ad     00          | 	byte	0
318ae                 | LR__5540
318ae     2F 73 64 2F 
318b2     6D 65 64 69 
318b6     61 2F 68 2F | 	byte	"/sd/media/h/"
318ba     00          | 	byte	0
318bb                 | LR__5541
318bb     53 79 73 74 
318bf     65 6D 20 65 
318c3     72 72 6F 72 
318c7     20          | 	byte	"System error "
318c8     00          | 	byte	0
318c9                 | LR__5542
318c9     3A 20       | 	byte	": "
318cb     00          | 	byte	0
318cc                 | LR__5543
318cc                 | 	byte	
318cc     00          | 	byte	0
318cd                 | LR__5544
318cd                 | 	byte	
318cd     00          | 	byte	0
318ce                 | LR__5545
318ce     2F 73 64 2F 
318d2     6D 65 64 69 
318d6     61 2F 73 2F | 	byte	"/sd/media/s/"
318da     00          | 	byte	0
318db                 | LR__5546
318db     53 79 73 74 
318df     65 6D 20 65 
318e3     72 72 6F 72 
318e7     20          | 	byte	"System error "
318e8     00          | 	byte	0
318e9                 | LR__5547
318e9     3A 20       | 	byte	": "
318eb     00          | 	byte	0
318ec                 | LR__5548
318ec     2F          | 	byte	"/"
318ed     00          | 	byte	0
318ee                 | LR__5549
318ee     2F          | 	byte	"/"
318ef     00          | 	byte	0
318f0                 | LR__5550
318f0     2F          | 	byte	"/"
318f1     00          | 	byte	0
318f2                 | LR__5551
318f2     43 61 6E 6E 
318f6     6F 74 20 64 
318fa     65 6C 65 74 
318fe     65 20 66 69 
31902     6C 65 20 6F 
31906     72 20 66 69 
3190a     6C 65 20 64 
3190e     6F 65 73 6E 
31912     27 74 20 65 
31916     78 69 73 74 
3191a     3A 20 73 79 
3191e     73 74 65 6D 
31922     20 65 72 72 
31926     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
31929     00          | 	byte	0
3192a                 | LR__5552
3192a     43 75 72 72 
3192e     65 6E 74 20 
31932     64 69 72 65 
31936     63 74 6F 72 
3193a     79 3A 20    | 	byte	"Current directory: "
3193d     00          | 	byte	0
3193e                 | LR__5553
3193e                 | 	byte	
3193e     00          | 	byte	0
3193f                 | LR__5554
3193f     2A          | 	byte	"*"
31940     00          | 	byte	0
31941                 | LR__5555
31941                 | 	byte	
31941     00          | 	byte	0
31942                 | LR__5556
31942     5B 64 69 72 
31946     5D 20       | 	byte	"[dir] "
31948     00          | 	byte	0
31949                 | LR__5557
31949     4D 6F 72 65 
3194d     20 74 68 61 
31951     6E 20 31 32 
31955     38 20 65 6E 
31959     74 72 69 65 
3195d     73 20 66 6F 
31961     75 6E 64 3A 
31965     20 63 6C 65 
31969     61 6E 20 79 
3196d     6F 75 72 20 
31971     64 69 72 65 
31975     63 74 6F 72 
31979     79          | 	byte	"More than 128 entries found: clean your directory"
3197a     00          | 	byte	0
3197b                 | LR__5558
3197b     2A          | 	byte	"*"
3197c     00          | 	byte	0
3197d                 | LR__5559
3197d                 | 	byte	
3197d     00          | 	byte	0
3197e                 | LR__5560
3197e     4D 6F 72 65 
31982     20 74 68 61 
31986     6E 20 31 32 
3198a     38 20 65 6E 
3198e     74 72 69 65 
31992     73 20 66 6F 
31996     75 6E 64 3A 
3199a     20 63 6C 65 
3199e     61 6E 20 79 
319a2     6F 75 72 20 
319a6     64 69 72 65 
319aa     63 74 6F 72 
319ae     79          | 	byte	"More than 128 entries found: clean your directory"
319af     00          | 	byte	0
319b0                 | LR__5561
319b0     45 72 72 6F 
319b4     72 20       | 	byte	"Error "
319b6     00          | 	byte	0
319b7                 | LR__5562
319b7     3A 20       | 	byte	": "
319b9     00          | 	byte	0
319ba                 | LR__5563
319ba     67 65 74 65 
319be     6E 76 73 75 
319c2     73 74 61 69 
319c6     6E 3A 20    | 	byte	"getenvsustain: "
319c9     00          | 	byte	0
319ca                 | LR__5564
319ca     67 65 74 70 
319ce     69 78 65 6C 
319d2     3A 20       | 	byte	"getpixel: "
319d4     00          | 	byte	0
319d5                 | LR__5565
319d5     68 65 78 24 
319d9     3A 20       | 	byte	"hex$: "
319db     00          | 	byte	0
319dc                 | LR__5566
319dc                 | 	byte	
319dc     00          | 	byte	0
319dd                 | LR__5567
319dd     6C 65 66 74 
319e1     24 3A 20    | 	byte	"left$: "
319e4     00          | 	byte	0
319e5                 | LR__5568
319e5     6C 65 66 74 
319e9     24 3A 20    | 	byte	"left$: "
319ec     00          | 	byte	0
319ed                 | LR__5569
319ed     6C 65 6E 3A 
319f1     20          | 	byte	"len: "
319f2     00          | 	byte	0
319f3                 | LR__5570
319f3     6C 65 6E 3A 
319f7     20          | 	byte	"len: "
319f8     00          | 	byte	0
319f9                 | LR__5571
319f9                 | 	byte	
319f9     00          | 	byte	0
319fa                 | LR__5572
319fa     2F          | 	byte	"/"
319fb     00          | 	byte	0
319fc                 | LR__5573
319fc     2F          | 	byte	"/"
319fd     00          | 	byte	0
319fe                 | LR__5574
319fe     2E 62 61 73 | 	byte	".bas"
31a02     00          | 	byte	0
31a03                 | LR__5575
31a03     53 79 73 74 
31a07     65 6D 20 65 
31a0b     72 72 6F 72 
31a0f     20          | 	byte	"System error "
31a10     00          | 	byte	0
31a11                 | LR__5576
31a11     3A 20       | 	byte	": "
31a13     00          | 	byte	0
31a14                 | LR__5577
31a14     2E 62 61 73 | 	byte	".bas"
31a18     00          | 	byte	0
31a19                 | LR__5578
31a19     2F          | 	byte	"/"
31a1a     00          | 	byte	0
31a1b                 | LR__5579
31a1b                 | 	byte	
31a1b     00          | 	byte	0
31a1c                 | LR__5580
31a1c     4C 6F 61 64 
31a20     65 64 20    | 	byte	"Loaded "
31a23     00          | 	byte	0
31a24                 | LR__5581
31a24     2F          | 	byte	"/"
31a25     00          | 	byte	0
31a26                 | LR__5582
31a26     6C 6F 67 3A 
31a2a     20          | 	byte	"log: "
31a2b     00          | 	byte	0
31a2c                 | LR__5583
31a2c     6D 69 64 24 
31a30     3A 20       | 	byte	"mid$: "
31a32     00          | 	byte	0
31a33                 | LR__5584
31a33     6D 69 64 24 
31a37     3A 20       | 	byte	"mid$: "
31a39     00          | 	byte	0
31a3a                 | LR__5585
31a3a     43 61 6E 6E 
31a3e     6F 74 20 63 
31a42     72 65 61 74 
31a46     65 20 61 20 
31a4a     64 69 72 65 
31a4e     63 74 6F 72 
31a52     79 3A 20 73 
31a56     79 73 74 65 
31a5a     6D 20 65 72 
31a5e     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
31a62     00          | 	byte	0
31a63                 | LR__5586
31a63     20 42 41 53 
31a67     49 43 20 62 
31a6b     79 74 65 73 
31a6f     20 66 72 65 
31a73     65          | 	byte	" BASIC bytes free"
31a74     00          | 	byte	0
31a75                 | LR__5587
31a75                 | 	byte	
31a75     00          | 	byte	0
31a76                 | LR__5588
31a76                 | 	byte	
31a76     00          | 	byte	0
31a77                 | LR__5589
31a77     6E 6F 6E 61 
31a7b     6D 65 2E 62 
31a7f     61 73       | 	byte	"noname.bas"
31a81     00          | 	byte	0
31a82                 | LR__5590
31a82     66 69 6C 65 
31a86     6E 61 6D 65 
31a8a     20 65 78 70 
31a8e     65 63 74 65 
31a92     64          | 	byte	"filename expected"
31a93     00          | 	byte	0
31a94                 | LR__5591
31a94     72 65 61 64 | 	byte	"read"
31a98     00          | 	byte	0
31a99                 | LR__5592
31a99     77 72 69 74 
31a9d     65          | 	byte	"write"
31a9e     00          | 	byte	0
31a9f                 | LR__5593
31a9f     61 70 70 65 
31aa3     6E 64       | 	byte	"append"
31aa5     00          | 	byte	0
31aa6                 | LR__5594
31aa6     63 68 61 6E 
31aaa     6E 65 6C 23 
31aae     20 65 78 70 
31ab2     65 63 74 65 
31ab6     64          | 	byte	"channel# expected"
31ab7     00          | 	byte	0
31ab8                 | LR__5595
31ab8     4F 70 65 6E 
31abc     3A 20 69 6E 
31ac0     76 61 6C 69 
31ac4     64 20 6D 6F 
31ac8     64 65       | 	byte	"Open: invalid mode"
31aca     00          | 	byte	0
31acb                 | LR__5596
31acb     50 72 69 6E 
31acf     74 20 74 6F 
31ad3     20 63 68 61 
31ad7     6E 6E 65 6C 
31adb     20 28 6E 6F 
31adf     74 20 79 65 
31ae3     74 20 69 6D 
31ae7     70 6C 65 6D 
31aeb     65 6E 74 65 
31aef     64 29       | 	byte	"Print to channel (not yet implemented)"
31af1     00          | 	byte	0
31af2                 | LR__5597
31af2     72 69 67 68 
31af6     74 24 3A 20 | 	byte	"right$: "
31afa     00          | 	byte	0
31afb                 | LR__5598
31afb     72 69 67 68 
31aff     74 24 3A 20 | 	byte	"right$: "
31b03     00          | 	byte	0
31b04                 | LR__5599
31b04     72 6E 64 3A 
31b08     20          | 	byte	"rnd: "
31b09     00          | 	byte	0
31b0a                 | LR__5600
31b0a     72 6E 64 3A 
31b0e     20          | 	byte	"rnd: "
31b0f     00          | 	byte	0
31b10                 | LR__5601
31b10     53 74 6F 70 
31b14     70 65 64 20 
31b18     61 74 20 6C 
31b1c     69 6E 65 20 | 	byte	"Stopped at line "
31b20     00          | 	byte	0
31b21                 | LR__5602
31b21                 | 	byte	
31b21     00          | 	byte	0
31b22                 | LR__5603
31b22     2F          | 	byte	"/"
31b23     00          | 	byte	0
31b24                 | LR__5604
31b24                 | 	byte	
31b24     00          | 	byte	0
31b25                 | LR__5605
31b25     53 61 76 65 
31b29     64 20 61 73 
31b2d     20          | 	byte	"Saved as "
31b2e     00          | 	byte	0
31b2f                 | LR__5606
31b2f     2F          | 	byte	"/"
31b30     00          | 	byte	0
31b31                 | LR__5607
31b31     73 69 6E 3A 
31b35     20          | 	byte	"sin: "
31b36     00          | 	byte	0
31b37                 | LR__5608
31b37     73 71 72 3A 
31b3b     20          | 	byte	"sqr: "
31b3c     00          | 	byte	0
31b3d                 | LR__5609
31b3d     73 74 69 63 
31b41     6B 3A 20    | 	byte	"stick: "
31b44     00          | 	byte	0
31b45                 | LR__5610
31b45     73 74 72 69 
31b49     67 3A 20    | 	byte	"strig: "
31b4c     00          | 	byte	0
31b4d                 | LR__5611
31b4d     74 61 6E 3A 
31b51     20          | 	byte	"tan: "
31b52     00          | 	byte	0
31b53                 | LR__5612
31b53     76 61 6C 3A 
31b57     20          | 	byte	"val: "
31b58     00          | 	byte	0
31b59                 | LR__5613
31b59     76 61 6C 3A 
31b5d     20          | 	byte	"val: "
31b5e     00          | 	byte	0
31b5f                 | LR__5614
31b5f     24          | 	byte	"$"
31b60     00          | 	byte	0
31b61                 | LR__5615
31b61     26 68       | 	byte	"&h"
31b63     00          | 	byte	0
31b64                 | LR__5616
31b64     25          | 	byte	"%"
31b65     00          | 	byte	0
31b66                 | LR__5617
31b66     26 62       | 	byte	"&b"
31b68     00          | 	byte	0
31b69                 | LR__5618
31b69                 | 	byte	
31b69     00          | 	byte	0
31b6a                 | LR__5619
31b6a     45 78 70 65 
31b6e     63 74 65 64 
31b72     20 6E 75 6D 
31b76     62 65 72 2C 
31b7a     20 67 6F 74 
31b7e     20 73 6F 6D 
31b82     65 74 68 69 
31b86     6E 67 20 65 
31b8a     6C 73 65    | 	byte	"Expected number, got something else"
31b8d     00          | 	byte	0
31b8e                 | LR__5620
31b8e     43 61 6E 6E 
31b92     6F 74 20 61 
31b96     64 64 20 61 
31b9a     20 6E 75 6D 
31b9e     62 65 72 20 
31ba2     74 6F 20 61 
31ba6     20 73 74 72 
31baa     69 6E 67    | 	byte	"Cannot add a number to a string"
31bad     00          | 	byte	0
31bae                 | LR__5621
31bae     43 61 6E 6E 
31bb2     6F 74 20 73 
31bb6     75 62 73 74 
31bba     72 61 63 74 
31bbe     20 73 74 72 
31bc2     69 6E 67 73 | 	byte	"Cannot substract strings"
31bc6     00          | 	byte	0
31bc7                 | LR__5622
31bc7     55 6E 6B 6E 
31bcb     6F 77 6E 20 
31bcf     65 72 72 6F 
31bd3     72 20 77 68 
31bd7     69 6C 65 20 
31bdb     61 64 64 69 
31bdf     6E 67       | 	byte	"Unknown error while adding"
31be1     00          | 	byte	0
31be2                 | LR__5623
31be2     55 6E 6B 6E 
31be6     6F 77 6E 20 
31bea     65 72 72 6F 
31bee     72 20 77 68 
31bf2     69 6C 65 20 
31bf6     73 75 62 73 
31bfa     74 72 61 63 
31bfe     74 69 6E 67 | 	byte	"Unknown error while substracting"
31c02     00          | 	byte	0
31c03                 | LR__5624
31c03     43 61 6E 6E 
31c07     6F 74 20 64 
31c0b     6F 20 6C 6F 
31c0f     67 69 63 20 
31c13     6F 70 65 72 
31c17     61 74 69 6F 
31c1b     6E 20 6F 6E 
31c1f     20 73 74 72 
31c23     69 6E 67 20 
31c27     6F 72 20 66 
31c2b     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
31c2f     00          | 	byte	0
31c30                 | LR__5625
31c30     55 6E 6B 6E 
31c34     6F 77 6E 20 
31c38     65 72 72 6F 
31c3c     72 20 77 68 
31c40     69 6C 65 20 
31c44     64 6F 69 6E 
31c48     67 20 6C 6F 
31c4c     67 69 63 20 
31c50     6F 70 65 72 
31c54     61 74 69 6F 
31c58     6E          | 	byte	"Unknown error while doing logic operation"
31c59     00          | 	byte	0
31c5a                 | LR__5626
31c5a     43 61 6E 6E 
31c5e     6F 74 20 6D 
31c62     75 6C 74 69 
31c66     70 6C 79 20 
31c6a     73 74 72 69 
31c6e     6E 67 73    | 	byte	"Cannot multiply strings"
31c71     00          | 	byte	0
31c72                 | LR__5627
31c72     55 6E 6B 6E 
31c76     6F 77 6E 20 
31c7a     65 72 72 6F 
31c7e     72 20 77 68 
31c82     69 6C 65 20 
31c86     6D 75 6C 74 
31c8a     69 70 6C 79 
31c8e     69 6E 67    | 	byte	"Unknown error while multiplying"
31c91     00          | 	byte	0
31c92                 | LR__5628
31c92     43 61 6E 6E 
31c96     6F 74 20 64 
31c9a     69 76 69 64 
31c9e     65 20 73 74 
31ca2     72 69 6E 67 
31ca6     73          | 	byte	"Cannot divide strings"
31ca7     00          | 	byte	0
31ca8                 | LR__5629
31ca8     55 6E 6B 6E 
31cac     6F 77 6E 20 
31cb0     65 72 72 6F 
31cb4     72 20 77 68 
31cb8     69 6C 65 20 
31cbc     64 69 76 69 
31cc0     64 69 6E 67 | 	byte	"Unknown error while dividing"
31cc4     00          | 	byte	0
31cc5                 | LR__5630
31cc5     43 61 6E 6E 
31cc9     6F 74 20 63 
31ccd     6F 6D 70 75 
31cd1     74 65 20 61 
31cd5     20 70 6F 77 
31cd9     65 72 20 6F 
31cdd     66 20 61 20 
31ce1     73 74 72 69 
31ce5     6E 67       | 	byte	"Cannot compute a power of a string"
31ce7     00          | 	byte	0
31ce8                 | LR__5631
31ce8     55 6E 6B 6E 
31cec     6F 77 6E 20 
31cf0     65 72 72 6F 
31cf4     72 20 77 68 
31cf8     69 6C 65 20 
31cfc     63 6F 6D 70 
31d00     75 74 69 6E 
31d04     67 20 61 20 
31d08     70 6F 77 65 
31d0c     72          | 	byte	"Unknown error while computing a power"
31d0d     00          | 	byte	0
31d0e                 | LR__5632
31d0e     52 69 67 68 
31d12     74 20 70 61 
31d16     72 65 6E 74 
31d1a     68 65 73 69 
31d1e     73 20 65 78 
31d22     70 65 63 74 
31d26     65 64       | 	byte	"Right parenthesis expected"
31d28     00          | 	byte	0
31d29                 | LR__5633
31d29     45 78 70 65 
31d2d     63 74 65 64 
31d31     20 73 74 72 
31d35     69 6E 67    | 	byte	"Expected string"
31d38     00          | 	byte	0
31d39                 | LR__5634
31d39     45 78 70 65 
31d3d     63 74 65 64 
31d41     20 66 6C 6F 
31d45     61 74       | 	byte	"Expected float"
31d47     00          | 	byte	0
31d48                 | LR__5635
31d48     45 78 70 65 
31d4c     63 74 65 64 
31d50     20 75 6E 73 
31d54     69 67 6E 65 
31d58     64 20 69 6E 
31d5c     74 65 67 65 
31d60     72          | 	byte	"Expected unsigned integer"
31d61     00          | 	byte	0
31d62                 | LR__5636
31d62     45 78 70 65 
31d66     63 74 65 64 
31d6a     20 69 6E 74 
31d6e     65 67 65 72 | 	byte	"Expected integer"
31d72     00          | 	byte	0
31d73                 | LR__5637
31d73     4E 6F 20 6D 
31d77     6F 72 65 20 
31d7b     76 61 72 69 
31d7f     61 62 6C 65 
31d83     20 73 6C 6F 
31d87     74 73       | 	byte	"No more variable slots"
31d89     00          | 	byte	0
31d8a                 | LR__5638
31d8a     56 61 72 69 
31d8e     61 62 6C 65 
31d92     20 6E 6F 74 
31d96     20 66 6F 75 
31d9a     6E 64       | 	byte	"Variable not found"
31d9c     00          | 	byte	0
31d9d                 | LR__5639
31d9d     43 6F 6D 6D 
31da1     61 20 65 78 
31da5     70 65 63 74 
31da9     65 64       | 	byte	"Comma expected"
31dab     00          | 	byte	0
31dac                 | LR__5640
31dac     43 6F 6D 6D 
31db0     61 20 6F 72 
31db4     20 73 65 6D 
31db8     69 63 6F 6C 
31dbc     6F 6E 20 65 
31dc0     78 70 65 63 
31dc4     74 65 64    | 	byte	"Comma or semicolon expected"
31dc7     00          | 	byte	0
31dc8                 | LR__5641
31dc8     55 6E 6B 6E 
31dcc     6F 77 6E 20 
31dd0     63 6F 6D 6D 
31dd4     61 6E 64    | 	byte	"Unknown command"
31dd7     00          | 	byte	0
31dd8                 | LR__5642
31dd8     53 74 61 63 
31ddc     6B 20 75 6E 
31de0     64 65 72 66 
31de4     6C 6F 77    | 	byte	"Stack underflow"
31de7     00          | 	byte	0
31de8                 | LR__5643
31de8     43 61 6E 6E 
31dec     6F 74 20 65 
31df0     78 65 63 75 
31df4     74 65 20 67 
31df8     6F 74 6F 20 
31dfc     6F 72 20 67 
31e00     6F 73 75 62 
31e04     20 69 6E 20 
31e08     74 68 65 20 
31e0c     69 6D 6D 65 
31e10     64 69 61 74 
31e14     65 20 6D 6F 
31e18     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
31e1a     00          | 	byte	0
31e1b                 | LR__5644
31e1b     43 61 6E 6E 
31e1f     6F 74 20 6C 
31e23     6F 61 64 20 
31e27     66 72 6F 6D 
31e2b     20 74 68 69 
31e2f     73 20 66 69 
31e33     6C 65       | 	byte	"Cannot load from this file"
31e35     00          | 	byte	0
31e36                 | LR__5645
31e36     54 68 65 20 
31e3a     70 72 6F 67 
31e3e     72 61 6D 20 
31e42     69 73 20 65 
31e46     6D 70 74 79 | 	byte	"The program is empty"
31e4a     00          | 	byte	0
31e4b                 | LR__5646
31e4b     49 66 20 61 
31e4f     66 74 65 72 
31e53     20 69 66    | 	byte	"If after if"
31e56     00          | 	byte	0
31e57                 | LR__5647
31e57     45 6D 70 74 
31e5b     79 20 65 78 
31e5f     70 72 65 73 
31e63     73 69 6F 6E | 	byte	"Empty expression"
31e67     00          | 	byte	0
31e68                 | LR__5648
31e68     53 74 72 69 
31e6c     6E 67 20 65 
31e70     78 70 65 63 
31e74     74 65 64    | 	byte	"String expected"
31e77     00          | 	byte	0
31e78                 | LR__5649
31e78     49 6E 74 65 
31e7c     72 70 72 65 
31e80     74 65 72 20 
31e84     69 6E 74 65 
31e88     72 6E 61 6C 
31e8c     20 65 72 72 
31e90     6F 72       | 	byte	"Interpreter internal error"
31e92     00          | 	byte	0
31e93                 | LR__5650
31e93     45 78 70 65 
31e97     63 74 65 64 
31e9b     20 61 73 73 
31e9f     69 67 6E    | 	byte	"Expected assign"
31ea2     00          | 	byte	0
31ea3                 | LR__5651
31ea3     45 78 70 65 
31ea7     63 74 65 64 
31eab     20 27 74 6F 
31eaf     27          | 	byte	"Expected 'to'"
31eb0     00          | 	byte	0
31eb1                 | LR__5652
31eb1     45 78 70 65 
31eb5     63 74 65 64 
31eb9     20 69 6E 74 
31ebd     65 67 65 72 
31ec1     20 76 61 72 
31ec5     69 61 62 6C 
31ec9     65          | 	byte	"Expected integer variable"
31eca     00          | 	byte	0
31ecb                 | LR__5653
31ecb     55 6E 69 6E 
31ecf     69 74 69 61 
31ed3     6C 69 7A 65 
31ed7     64 20 76 61 
31edb     72 69 61 62 
31edf     6C 65 20 69 
31ee3     6E 20 27 6E 
31ee7     65 78 74 27 
31eeb     2C 20 75 73 
31eef     65 20 27 66 
31ef3     6F 72 27 20 
31ef7     62 65 66 6F 
31efb     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
31efd     00          | 	byte	0
31efe                 | LR__5654
31efe     4E 6F 20 6D 
31f02     6F 72 65 20 
31f06     73 6C 6F 74 
31f0a     73 20 66 6F 
31f0e     72 20 27 66 
31f12     6F 72 27    | 	byte	"No more slots for 'for'"
31f15     00          | 	byte	0
31f16                 | LR__5655
31f16     27 4E 65 78 
31f1a     74 27 20 64 
31f1e     6F 65 73 6E 
31f22     27 74 20 6D 
31f26     61 74 63 68 
31f2a     20 27 66 6F 
31f2e     72 27       | 	byte	"'Next' doesn't match 'for'"
31f30     00          | 	byte	0
31f31                 | LR__5656
31f31     27 47 6F 74 
31f35     6F 27 20 74 
31f39     61 72 67 65 
31f3d     74 20 6C 69 
31f41     6E 65 20 6E 
31f45     6F 74 20 66 
31f49     6F 75 6E 64 | 	byte	"'Goto' target line not found"
31f4d     00          | 	byte	0
31f4e                 | LR__5657
31f4e     42 61 64 20 
31f52     6E 75 6D 62 
31f56     65 72 20 6F 
31f5a     66 20 70 61 
31f5e     72 61 6D 65 
31f62     74 65 72 73 | 	byte	"Bad number of parameters"
31f66     00          | 	byte	0
31f67                 | LR__5658
31f67     46 75 6E 63 
31f6b     74 69 6F 6E 
31f6f     20 75 6E 64 
31f73     65 66 69 6E 
31f77     65 64 20 66 
31f7b     6F 72 20 73 
31f7f     74 72 69 6E 
31f83     67 73       | 	byte	"Function undefined for strings"
31f85     00          | 	byte	0
31f86                 | LR__5659
31f86     42 61 64 20 
31f8a     70 61 72 61 
31f8e     6D 65 74 65 
31f92     72          | 	byte	"Bad parameter"
31f93     00          | 	byte	0
31f94                 | LR__5660
31f94     43 61 6E 6E 
31f98     6F 74 20 64 
31f9c     65 63 6C 61 
31fa0     72 65 20 61 
31fa4     6E 20 61 72 
31fa8     72 61 79 3A 
31fac     20 74 68 65 
31fb0     20 76 61 72 
31fb4     69 61 62 6C 
31fb8     65 20 65 78 
31fbc     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
31fc0     00          | 	byte	0
31fc1                 | LR__5661
31fc1     45 78 70 65 
31fc5     63 74 65 64 
31fc9     20 27 28 27 | 	byte	"Expected '('"
31fcd     00          | 	byte	0
31fce                 | LR__5662
31fce     45 78 70 65 
31fd2     63 74 65 64 
31fd6     20 27 29 27 
31fda     20 6F 72 20 
31fde     27 2C 27    | 	byte	"Expected ')' or ','"
31fe1     00          | 	byte	0
31fe2                 | LR__5663
31fe2     4E 6F 20 6D 
31fe6     6F 72 65 20 
31fea     74 68 61 6E 
31fee     20 33 20 64 
31ff2     69 6D 65 6E 
31ff6     73 69 6F 6E 
31ffa     73 20 73 75 
31ffe     70 70 6F 72 
32002     74 65 64    | 	byte	"No more than 3 dimensions supported"
32005     00          | 	byte	0
32006                 | LR__5664
32006     56 61 72 69 
3200a     61 62 6C 65 
3200e     20 6E 61 6D 
32012     65 20 65 78 
32016     70 65 63 74 
3201a     65 64       | 	byte	"Variable name expected"
3201c     00          | 	byte	0
3201d                 | LR__5665
3201d     54 79 70 65 
32021     20 6E 61 6D 
32025     65 20 65 78 
32029     70 65 63 74 
3202d     65 64       | 	byte	"Type name expected"
3202f     00          | 	byte	0
32030                 | LR__5666
32030     54 79 70 65 
32034     20 6E 6F 74 
32038     20 73 75 70 
3203c     70 6F 72 74 
32040     65 64 20 79 
32044     65 74       | 	byte	"Type not supported yet"
32046     00          | 	byte	0
32047                 | LR__5667
32047     41 72 72 61 
3204b     79 20 69 6E 
3204f     64 65 78 20 
32053     6F 75 74 20 
32057     6F 66 20 72 
3205b     61 6E 67 65 | 	byte	"Array index out of range"
3205f     00          | 	byte	0
32060                 | LR__5668
32060     42 61 64 20 
32064     74 79 70 65 
32068     20 77 68 69 
3206c     6C 65 20 61 
32070     73 73 69 67 
32074     6E 69 6E 67 
32078     20 74 6F 20 
3207c     61 72 72 61 
32080     79          | 	byte	"Bad type while assigning to array"
32081     00          | 	byte	0
32082                 | LR__5669
32082     54 6F 6F 20 
32086     6D 61 6E 79 
3208a     20 76 61 72 
3208e     69 61 62 6C 
32092     65 73       | 	byte	"Too many variables"
32094     00          | 	byte	0
32095                 | LR__5670
32095     27 54 68 65 
32099     6E 27 20 65 
3209d     78 70 65 63 
320a1     74 65 64    | 	byte	"'Then' expected"
320a4     00          | 	byte	0
320a5                 | LR__5671
320a5     44 69 72 65 
320a9     63 74 6F 72 
320ad     79 20 64 6F 
320b1     65 73 6E 27 
320b5     74 20 65 78 
320b9     69 73 74    | 	byte	"Directory doesn't exist"
320bc     00          | 	byte	0
320bd                 | LR__5672
320bd     45 72 72 6F 
320c1     72 20       | 	byte	"Error "
320c3     00          | 	byte	0
320c4                 | LR__5673
320c4     3A 20       | 	byte	": "
320c6     00          | 	byte	0
320c7                 | LR__5674
320c7     20 69 6E 20 
320cb     6C 69 6E 65 
320cf     20          | 	byte	" in line "
320d0     00          | 	byte	0
320d1                 | LR__5675
320d1     2F 73 64    | 	byte	"/sd"
320d4     00          | 	byte	0
320d5                 | LR__5676
320d5     2F 73 64 2F 
320d9     62 61 73    | 	byte	"/sd/bas"
320dc     00          | 	byte	0
320dd                 | LR__5677
320dd     2F 73 64 2F 
320e1     62 61 73    | 	byte	"/sd/bas"
320e4     00          | 	byte	0
320e5                 | LR__5678
320e5     20 42 41 53 
320e9     49 43 20 62 
320ed     79 74 65 73 
320f1     20 66 72 65 
320f5     65          | 	byte	" BASIC bytes free"
320f6     00          | 	byte	0
320f7                 | LR__5679
320f7     52 65 61 64 
320fb     79          | 	byte	"Ready"
320fc     00          | 	byte	0
320fd                 | LR__5680
320fd     6E 6F 6E 61 
32101     6D 65 2E 62 
32105     61 73       | 	byte	"noname.bas"
32107     00          | 	byte	0
32108                 | LR__5681
32108                 | 	byte	
32108     00          | 	byte	0
32109     00 00 00    | 	alignl
3210c                 | _dat_
3210c     00 00 00 00 
32110     00 00 00 00 
32114     00 00 00 00 
32118     00 00 00 00 | 	byte	$00[16]
3211c     61 41 17 0E 
32120     62 42 00 00 
32124     63 43 19 10 
32128     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
3212c     65 45 18 0F 
32130     66 46 00 00 
32134     67 47 00 00 
32138     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
3213c     69 49 00 00 
32140     6A 4A 00 00 
32144     6B 4B 00 00 
32148     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
3214c     6D 4D 00 00 
32150     6E 4E 1A 11 
32154     6F 4F 1E 15 
32158     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
3215c     71 51 00 00 
32160     72 52 00 00 
32164     73 53 1B 12 
32168     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3216c     75 55 00 00 
32170     76 56 00 00 
32174     77 57 00 00 
32178     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3217c     79 59 00 00 
32180     7A 5A 1D 14 
32184     31 21 04 00 
32188     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3218c     33 23 06 00 
32190     34 24 07 00 
32194     35 25 08 00 
32198     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3219c     37 26 0A 00 
321a0     38 2A 0B 00 
321a4     39 28 0C 00 
321a8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
321ac     8D 8D 00 00 
321b0     9B 9B 00 00 
321b4     88 88 00 00 
321b8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
321bc     20 20 00 00 
321c0     2D 5F 00 00 
321c4     3D 2B 00 00 
321c8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
321cc     5D 7D 00 00 
321d0     5C 7C 00 00 
321d4     23 7E 00 00 
321d8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
321dc     27 22 00 00 
321e0     60 7E 03 00 
321e4     2C 3C 00 00 
321e8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
321ec     2F 3F 00 00 
321f0     B9 B9 00 00 
321f4     BA 00 00 00 
321f8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
321fc     BC 00 00 00 
32200     BD 00 00 00 
32204     BE 00 00 00 
32208     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
3220c     C0 00 00 00 
32210     C1 00 00 00 
32214     C2 00 00 00 
32218     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
3221c     C4 00 00 00 
32220     C5 00 00 00 
32224     C6 00 00 00 
32228     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
3222c     C8 00 00 00 
32230     C9 00 00 00 
32234     CA 00 00 00 
32238     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
3223c     7F 7F 00 00 
32240     CC 00 00 00 
32244     CD 00 00 00 
32248     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
3224c     CF 00 00 00 
32250     D0 00 00 00 
32254     D1 00 00 00 
32258     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
3225c     2F 2F 00 00 
32260     2A 2A 00 00 
32264     2D 2D 00 00 
32268     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
3226c     8D 8D 00 00 
32270     31 31 00 00 
32274     32 32 00 00 
32278     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3227c     34 34 00 00 
32280     35 35 00 00 
32284     36 36 00 00 
32288     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3228c     38 38 00 00 
32290     39 39 00 00 
32294     30 30 00 00 
32298     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3229c     5C 7C 00 00 
322a0     00 00 00 00 
322a4     00 00 00 00 
322a8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
322ac     00 00 00 00 
      ...             
32304     00 00 00 00 
32308     00 00 00 00 | 	byte	$00[96]
3230c     2B 00 A6 F2 
32310     24 A7 09 80 
32314     5B 88 4D 89 
32318     80 88 A5 88 | atari_spl file "atari.spl"
3231c     6D 88 B8 88 
32320     80 88 CB 88 
32324     92 88 A5 88 
32328     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
3232c     A5 88 CA 88 
32330     A6 88 DD 88 
32334     B8 88 AB 89 
32338     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
3233c     C8 AD C6 F1 
32340     91 06 B6 FF 
32344     13 00 4A 00 
32348     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3234c     5D 00 5E 00 
32350     5D 00 5E 00 
32354     5E 00 5D 00 
32358     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3235c     38 00 83 00 
32360     25 00 83 00 
32364     C3 FE D1 04 
32368     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3236c     48 88 38 85 
32370     41 8A CB 88 
32374     28 89 B8 88 
32378     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3237c     15 89 03 89 
32380     02 89 15 89 
32384     16 89 15 89 
32388     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3238c     15 89 3A 89 
32390     72 89 E3 89 
32394     52 83 AD 97 
32398     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3239c     0C 02 B6 FF 
323a0     E1 00 A8 00 
323a4     F3 00 A8 00 
323a8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
323ac     CE 00 CD 00 
323b0     CD 00 BA 00 
323b4     E1 00 BB 00 
323b8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
323bc     DF 00 C9 FF 
323c0     E6 01 B6 06 
323c4     EE DD 8D 98 
323c8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
323cc     97 89 73 89 
323d0     3B 89 60 89 
323d4     60 89 60 89 
323d8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
323dc     73 89 72 89 
323e0     85 89 73 89 
323e4     AA 89 60 89 
323e8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
323ec     E8 8A 18 86 
323f0     92 88 A5 C2 
323f4     E0 00 C3 05 
323f8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
323fc     F2 00 64 01 
32400     06 01 3E 01 
32404     2B 01 2B 01 
32408     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
3240c     2B 01 2A 01 
32410     2B 01 2B 01 
32414     2B 01 18 01 
32418     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
3241c     39 07 61 F3 
32420     C0 AF 37 85 
32424     0F 88 8B 8A 
32428     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
3242c     AB 89 D0 89 
32430     AB 89 D0 89 
32434     D0 89 CF 89 
32438     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
3243c     D0 89 F5 89 
32440     BD 89 08 8A 
32444     CF 89 E8 8A 
32448     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3244c     53 B3 0D F8 
32450     F4 07 38 00 
32454     63 01 63 01 
32458     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3245c     88 01 88 01 
32460     76 01 88 01 
32464     88 01 89 01 
32468     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3246c     75 01 AE 01 
32470     76 01 88 01 
32474     4A 00 46 06 
32478     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3247c     08 8A 9A 86 
32480     33 8B 08 8A 
32484     2D 8A F5 89 
32488     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3248c     2D 8A 2D 8A 
32490     2E 8A 1B 8A 
32494     40 8A 2D 8A 
32498     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3249c     2E 8A 79 8A 
324a0     66 8A C8 8B 
324a4     72 82 2B 97 
324a8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
324ac     1D 02 05 01 
324b0     F8 01 C0 01 
324b4     0B 02 C0 01 
324b8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
324bc     F9 01 D3 01 
324c0     F8 01 D3 01 
324c4     F8 01 D2 01 
324c8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
324cc     E6 01 2B 01 
324d0     8E 02 5F 07 
324d4     F7 E2 ED 9C 
324d8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
324dc     E8 8A 78 8A 
324e0     78 8A 65 8A 
324e4     8B 8A 78 8A 
324e8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
324ec     8B 8A 9D 8A 
324f0     9D 8A 8B 8A 
324f4     C2 8A 78 8A 
324f8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
324fc     70 8C 18 86 
32500     8B 8A 23 C9 
32504     CB 03 C4 05 
32508     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
3250c     0B 02 7B 02 
32510     1E 02 55 02 
32514     30 02 43 02 
32518     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
3251c     43 02 44 02 
32520     43 02 30 02 
32524     68 02 31 02 
32528     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
3252c     07 08 3F F7 
32530     73 B2 13 85 
32534     15 89 ED 8B 
32538     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
3253c     B0 8A FB 8A 
32540     D5 8A FA 8A 
32544     E8 8A FB 8A 
32548     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
3254c     E8 8A 21 8B 
32550     E7 8A 33 8B 
32554     E8 8A 26 8C 
32558     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3255c     8D B0 27 F6 
32560     9C 08 AD 01 
32564     7B 02 8D 02 
32568     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3256c     A1 02 A0 02 
32570     A1 02 A0 02 
32574     A0 02 A0 02 
32578     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3257c     7B 02 D8 02 
32580     7B 02 C6 02 
32584     3E 01 C3 05 
32588     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3258c     00 8C 2A 86 
32590     E0 8C FA 8A 
32594     6A 8B FB 8A 
32598     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3259c     45 8B 45 8B 
325a0     45 8B 6B 8B 
325a4     46 8B 59 8B 
325a8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
325ac     6B 8B 6B 8B 
325b0     6B 8B 6B 8B 
325b4     7D 8B 7D 8B 
325b8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
325bc     90 8B 91 8B 
325c0     90 8B 90 8B 
325c4     A3 8B A3 8B 
325c8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
325cc     B5 8B B6 8B 
325d0     B5 8B B5 8B 
325d4     B6 8B C8 8B 
325d8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
325dc     C8 8B DA 8B 
325e0     DB 8B DB 8B 
325e4     DB 8B DC 8B 
325e8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
325ec     EE 8B EE 8B 
325f0     00 8C 01 8C 
325f4     00 8C 01 8C 
325f8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
325fc     12 8C 13 8C 
32600     13 8C 26 8C 
32604     26 8C 26 8C 
32608     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
3260c     38 8C 38 8C 
32610     38 8C 38 8C 
32614     4B 8C 4B 8C 
32618     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
3261c     5E 8C 5E 8C 
32620     5E 8C 5E 8C 
32624     70 8C 70 8C 
32628     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
3262c     70 8C 83 8C 
32630     83 8C 83 8C 
32634     83 8C 96 8C 
32638     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
3263c     95 8C A9 8C 
32640     A9 8C A8 8C 
32644     A8 8C A8 8C 
32648     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3264c     BB 8C BB 8C 
32650     BB 8C CE 8C 
32654     CE 8C CE 8C 
32658     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3265c     E0 8C E1 8C 
32660     E1 8C E0 8C 
32664     F4 8C F2 8C 
32668     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3266c     05 8D 05 8D 
32670     06 8D 06 8D 
32674     19 8D 19 8D 
32678     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3267c     18 8D 2B 8D 
32680     2B 8D 2B 8D 
32684     2A 8D 3E 8D 
32688     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3268c     3E 8D 51 8D 
32690     50 8D 50 8D 
32694     50 8D 51 8D 
32698     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3269c     63 8D 64 8D 
326a0     76 8D 75 8D 
326a4     75 8D 76 8D 
326a8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
326ac     88 8D 88 8D 
326b0     89 8D 9B 8D 
326b4     9A 8D 9B 8D 
326b8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
326bc     AD 8D AE 8D 
326c0     AD 8D AE 8D 
326c4     C1 8D C1 8D 
326c8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
326cc     D3 8D D3 8D 
326d0     D3 8D D3 8D 
326d4     D3 8D E6 8D 
326d8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
326dc     E6 8D E6 8D 
326e0     F9 8D F9 8D 
326e4     F9 8D F8 8D 
326e8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
326ec     0B 8E 0B 8E 
326f0     1D 8E 1D 8E 
326f4     1E 8E 1E 8E 
326f8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
326fc     31 8E 31 8E 
32700     31 8E 42 8E 
32704     43 8E 43 8E 
32708     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
3270c     56 8E 56 8E 
32710     55 8E 56 8E 
32714     68 8E 69 8E 
32718     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
3271c     69 8E 7B 8E 
32720     7C 8E 7B 8E 
32724     7B 8E 8D 8E 
32728     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
3272c     8D 8E A1 8E 
32730     A0 8E A1 8E 
32734     A1 8E A0 8E 
32738     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
3273c     B3 8E B3 8E 
32740     C6 8E C5 8E 
32744     C6 8E C6 8E 
32748     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3274c     D8 8E D9 8E 
32750     D8 8E EC 8E 
32754     EB 8E EC 8E 
32758     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3275c     FE 8E FE 8E 
32760     FE 8E FE 8E 
32764     10 8F 10 8F 
32768     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3276c     11 8F 23 8F 
32770     24 8F 23 8F 
32774     24 8F 37 8F 
32778     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3277c     36 8F 36 8F 
32780     48 8F 49 8F 
32784     49 8F 49 8F 
32788     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3278c     5B 8F 5C 8F 
32790     5B 8F 6E 8F 
32794     6E 8F 6E 8F 
32798     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3279c     81 8F 81 8F 
327a0     81 8F 81 8F 
327a4     93 8F 93 8F 
327a8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
327ac     93 8F A6 8F 
327b0     A6 8F A6 8F 
327b4     A6 8F B9 8F 
327b8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
327bc     B9 8F B9 8F 
327c0     CC 8F CB 8F 
327c4     CB 8F CC 8F 
327c8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
327cc     DF 8F DE 8F 
327d0     DE 8F F1 8F 
327d4     F1 8F F1 8F 
327d8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
327dc     03 90 04 90 
327e0     04 90 04 90 
327e4     16 90 17 90 
327e8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
327ec     29 90 28 90 
327f0     29 90 28 90 
327f4     29 90 3C 90 
327f8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
327fc     3C 90 4F 90 
32800     4E 90 4E 90 
32804     4E 90 4E 90 
32808     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
3280c     61 90 61 90 
32810     73 90 74 90 
32814     74 90 74 90 
32818     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
3281c     87 90 86 90 
32820     87 90 86 90 
32824     99 90 99 90 
32828     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3282c     AB 90 AB 90 
32830     AC 90 AB 90 
32834     AB 90 BF 90 
32838     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3283c     BE 90 D1 90 
32840     D0 90 D1 90 
32844     D1 90 D1 90 
32848     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3284c     E3 90 E4 90 
32850     F6 90 F6 90 
32854     F6 90 F6 90 
32858     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3285c     09 91 0A 91 
32860     0A 91 1C 91 
32864     1C 91 1C 91 
32868     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3286c     2F 91 2E 91 
32870     2F 91 2F 91 
32874     2E 91 41 91 
32878     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3287c     41 91 53 91 
32880     54 91 54 91 
32884     53 91 54 91 
32888     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3288c     67 91 67 91 
32890     79 91 7A 91 
32894     79 91 78 91 
32898     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3289c     8C 91 8B 91 
328a0     8C 91 8C 91 
328a4     9E 91 9E 91 
328a8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
328ac     B1 91 B1 91 
328b0     B2 91 B1 91 
328b4     B1 91 C4 91 
328b8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
328bc     C4 91 D6 91 
328c0     D7 91 D7 91 
328c4     D7 91 D6 91 
328c8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
328cc     EA 91 EA 91 
328d0     EA 91 FC 91 
328d4     FC 91 FB 91 
328d8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
328dc     0E 92 0F 92 
328e0     0F 92 0E 92 
328e4     21 92 21 92 
328e8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
328ec     21 92 34 92 
328f0     33 92 34 92 
328f4     34 92 47 92 
328f8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
328fc     46 92 47 92 
32900     59 92 59 92 
32904     59 92 59 92 
32908     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3290c     6C 92 6C 92 
32910     6B 92 7E 92 
32914     7E 92 7E 92 
32918     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
3291c     92 92 91 92 
32920     91 92 90 92 
32924     91 92 A4 92 
32928     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3292c     A3 92 B6 92 
32930     B6 92 B7 92 
32934     B7 92 B6 92 
32938     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3293c     CA 92 C9 92 
32940     CA 92 DC 92 
32944     DC 92 DC 92 
32948     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3294c     EF 92 EF 92 
32950     EF 92 EF 92 
32954     01 93 01 93 
32958     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3295c     15 93 14 93 
32960     14 93 14 93 
32964     14 93 27 93 
32968     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3296c     27 93 39 93 
32970     3A 93 39 93 
32974     39 93 39 93 
32978     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3297c     4B 93 4C 93 
32980     5F 93 5F 93 
32984     5F 93 5E 93 
32988     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3298c     5F 93 84 93 
32990     4C 93 96 93 
32994     5F 93 AE 94 
32998     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3299c     7B C1 00 00 
329a0     00 00 00 00 
329a4     00 00 00 00 
329a8     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
329ac     00 00 00 00 | 	byte	$00, $00, $00, $00
329b0     7A D7 00 80 
329b4     87 8A 48 8F 
329b8     EC 8C 76 8D 
329bc     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
329c0     3C 8D 82 8D 
329c4     42 8D 88 8D 
329c8     8C 8D 8E 8D 
329cc     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
329d0     97 8D DE 8D 
329d4     E1 8D F1 8E 
329d8     D8 8C A3 83 
329dc     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
329e0     65 71 C9 65 
329e4     FC 64 C4 65 
329e8     C1 65 BF 65 
329ec     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
329f0     B6 65 B4 65 
329f4     B2 65 AE 65 
329f8     AC 65 ED 65 
329fc     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
32a00     5E 65 25 66 
32a04     FA 62 23 6B 
32a08     B5 6C 61 0A 
32a0c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
32a10     5D 90 BE 8D 
32a14     47 8E C3 8D 
32a18     09 8E C9 8D 
32a1c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
32a20     15 8E 19 8E 
32a24     1B 8E 62 8E 
32a28     64 8E 68 8E 
32a2c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
32a30     B5 8E 4C 90 
32a34     FA 84 3C 9D 
32a38     98 13 79 6D 
32a3c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
32a40     D9 66 50 66 
32a44     D4 66 4B 66 
32a48     8C 66 46 66 
32a4c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
32a50     81 66 3A 66 
32a54     7C 66 36 66 
32a58     76 66 30 66 
32a5c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
32a60     6B 66 88 72 
32a64     BF 37 E7 B7 
32a68     75 83 8B 8E 
32a6c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
32a70     94 8E 96 8E 
32a74     DD 8E 9C 8E 
32a78     E2 8E A2 8E 
32a7c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
32a80     EE 8E AE 8E 
32a84     38 8F B5 8E 
32a88     3F 8F FD 8E 
32a8c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
32a90     A5 87 1E E3 
32a94     6D 5D FA 71 
32a98     41 64 25 67 
32a9c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
32aa0     D9 66 1A 67 
32aa4     18 67 15 67 
32aa8     12 67 0F 67 
32aac     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
32ab0     07 67 C0 66 
32ab4     01 67 BC 66 
32ab8     B8 66 DE 64 
32abc     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
32ac0     43 E5 1F 8B 
32ac4     14 8A F1 90 
32ac8     1C 8F 63 8F 
32acc     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
32ad0     29 8F 6E 8F 
32ad4     72 8F 75 8F 
32ad8     34 8F BE 8F 
32adc     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
32ae0     84 8F 87 8F 
32ae4     CC 8F 56 90 
32ae8     67 91 49 80 
32aec     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
32af0     46 77 A6 66 
32af4     E8 66 B0 67 
32af8     AD 67 ED 67 
32afc     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
32b00     A2 67 E3 67 
32b04     9D 67 9A 67 
32b08     98 67 94 67 
32b0c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
32b10     49 67 CD 67 
32b14     28 65 5F 6E 
32b18     82 67 3A 01 
32b1c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
32b20     C2 91 A9 8F 
32b24     EF 8F AE 8F 
32b28     F4 8F B5 8F 
32b2c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
32b30     01 90 03 90 
32b34     07 90 09 90 
32b38     0C 90 53 90 
32b3c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
32b40     18 90 44 93 
32b44     85 84 D6 9D 
32b48     87 1F 2F 75 
32b4c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
32b50     C4 68 F6 67 
32b54     BE 68 F1 67 
32b58     76 68 2E 68 
32b5c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
32b60     27 68 24 68 
32b64     64 68 1E 68 
32b68     5F 68 19 68 
32b6c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
32b70     DC 68 56 72 
32b74     7E 36 C2 B8 
32b78     D7 84 73 90 
32b7c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
32b80     7B 90 7F 90 
32b84     82 90 84 90 
32b88     CB 90 8B 90 
32b8c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
32b90     D7 90 96 90 
32b94     20 91 59 90 
32b98     25 91 A2 90 
32b9c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
32ba0     D0 89 40 EE 
32ba4     12 64 C4 71 
32ba8     29 66 0C 69 
32bac     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
32bb0     C0 68 02 69 
32bb4     FE 68 FB 68 
32bb8     F9 68 F6 68 
32bbc     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
32bc0     EE 68 A8 68 
32bc4     2C 69 5F 68 
32bc8     E2 68 81 66 
32bcc     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
32bd0     1E EB A6 8A 
32bd4     73 8B 5E 93 
32bd8     7B 90 48 91 
32bdc     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
32be0     0D 91 11 91 
32be4     14 91 16 91 
32be8     5C 91 1C 91 
32bec     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
32bf0     68 91 AF 91 
32bf4     2A 91 B5 91 
32bf8     75 91 1A 94 
32bfc     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
32c00     70 0E CB 6C 
32c04     5D 6E C4 67 
32c08     99 69 54 69 
32c0c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
32c10     D2 69 49 69 
32c14     89 69 86 69 
32c18     40 69 C4 69 
32c1c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
32c20     35 69 76 69 
32c24     58 67 EB 6D 
32c28     E9 6D 89 0F 
32c2c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
32c30     33 94 94 91 
32c34     D9 91 56 91 
32c38     E0 91 9F 91 
32c3c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
32c40     EC 91 EE 91 
32c44     F1 91 F4 91 
32c48     F7 91 3D 92 
32c4c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
32c50     46 92 21 94 
32c54     11 89 A4 9D 
32c58     FD 0E 8F 6C 
32c5c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
32c60     28 6A E1 69 
32c64     65 6A 1F 6A 
32c68     5F 6A 1A 6A 
32c6c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
32c70     54 6A 0F 6A 
32c74     4F 6A 09 6A 
32c78     06 6A 03 6A 
32c7c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
32c80     23 68 69 77 
32c84     3A 4D 38 CA 
32c88     38 86 4E 91 
32c8c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
32c90     64 92 24 92 
32c94     6A 92 2A 92 
32c98     70 92 30 92 
32c9c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
32ca0     7B 92 7E 92 
32ca4     C5 92 84 92 
32ca8     CB 92 8A 92 
32cac     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
32cb0     4D 8D F9 E2 
32cb4     97 59 FE 74 
32cb8     DB 68 6D 6A 
32cbc     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
32cc0     A8 6A A5 6A 
32cc4     A3 6A 9F 6A 
32cc8     9D 6A 9B 6A 
32ccc     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
32cd0     D6 6A 8F 6A 
32cd4     CF 6A 46 6A 
32cd8     CA 6A E1 67 
32cdc     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
32ce0     D3 F7 15 92 
32ce4     90 8C BF 94 
32ce8     A6 92 EB 92 
32cec     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
32cf0     B1 92 F7 92 
32cf4     FA 92 FD 92 
32cf8     00 93 02 93 
32cfc     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
32d00     4F 93 52 93 
32d04     54 93 22 94 
32d08     5A 93 8F 88 
32d0c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
32d10     1C 77 07 6C 
32d14     E8 69 7A 6B 
32d18     34 6B 75 6B 
32d1c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
32d20     29 6B 26 6B 
32d24     24 6B 21 6B 
32d28     1D 6B 5E 6B 
32d2c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
32d30     12 6B 52 6B 
32d34     34 69 34 6E 
32d38     BA 73 A4 24 
32d3c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
32d40     7A 94 B3 93 
32d44     72 93 31 93 
32d48     78 93 7A 93 
32d4c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
32d50     83 93 86 93 
32d54     89 93 D0 93 
32d58     D2 93 D5 93 
32d5c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
32d60     DD 93 40 96 
32d64     30 8B 99 9C 
32d68     52 10 94 71 
32d6c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
32d70     46 6C 79 6B 
32d74     40 6C B7 6B 
32d78     F7 6B B1 6B 
32d7c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
32d80     EC 6B A5 6B 
32d84     A2 6B 9F 6B 
32d88     9D 6B 9A 6B 
32d8c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
32d90     C8 6A E4 76 
32d94     20 4B F9 CE 
32d98     2E 8A 1A 92 
32d9c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
32da0     FB 93 BA 93 
32da4     01 94 03 94 
32da8     4A 94 09 94 
32dac     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
32db0     55 94 14 94 
32db4     9E 94 1A 94 
32db8     61 94 20 94 
32dbc     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
32dc0     3E 87 E5 CD 
32dc4     5F 50 6C 78 
32dc8     B5 6A 04 6C 
32dcc     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
32dd0     83 6C 7F 6C 
32dd4     7C 6C 36 6C 
32dd8     76 6C 74 6C 
32ddc     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
32de0     6B 6C 25 6C 
32de4     66 6C 1F 6C 
32de8     1D 6C 41 6A 
32dec     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
32df0     BA FA FC 94 
32df4     5B 8D 97 96 
32df8     3B 94 C5 94 
32dfc     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
32e00     89 94 8C 94 
32e04     8F 94 92 94 
32e08     94 94 DB 94 
32e0c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
32e10     E4 94 E7 94 
32e14     2D 95 74 95 
32e18     C8 96 15 89 
32e1c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
32e20     CB 75 31 6F 
32e24     7E 6B 10 6D 
32e28     C9 6C 0A 6D 
32e2c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
32e30     BD 6C FF 6C 
32e34     FB 6C F9 6C 
32e38     B2 6C F3 6C 
32e3c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
32e40     A7 6C E8 6C 
32e44     0D 6B 85 6F 
32e48     C7 74 10 28 
32e4c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
32e50     96 96 47 95 
32e54     06 95 0A 95 
32e58     0C 95 0F 95 
32e5c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
32e60     17 95 5E 95 
32e64     61 95 63 95 
32e68     22 95 AC 95 
32e6c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
32e70     72 95 17 98 
32e74     59 8E 01 96 
32e78     CF FC 5A 68 
32e7c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
32e80     96 6D 50 6D 
32e84     D5 6D 4A 6D 
32e88     8C 6D 89 6D 
32e8c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
32e90     80 6D 3A 6D 
32e94     7A 6D 77 6D 
32e98     75 6D 71 6D 
32e9c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
32ea0     18 6C BC 78 
32ea4     9A 4F 7E CF 
32ea8     1F 89 F1 93 
32eac     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
32eb0     D2 95 4E 95 
32eb4     D7 95 53 95 
32eb8     DD 95 E0 95 
32ebc     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
32ec0     A5 95 EB 95 
32ec4     EE 95 F0 95 
32ec8     37 96 B3 95 
32ecc     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
32ed0     1A 98 D5 8D 
32ed4     C5 9F CD 0F 
32ed8     0F 71 F3 73 
32edc     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
32ee0     D9 6D 5E 6E 
32ee4     D3 6D 58 6E 
32ee8     12 6E 0F 6E 
32eec     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
32ef0     49 6E BF 6D 
32ef4     87 6E 76 6D 
32ef8     81 6E 11 6B 
32efc     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
32f00     3F 09 44 95 
32f04     E5 8D 3F 99 
32f08     D4 95 A2 96 
32f0c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
32f10     23 96 69 96 
32f14     6B 96 6E 96 
32f18     71 96 74 96 
32f1c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
32f20     BF 96 3C 96 
32f24     C6 96 C8 96 
32f28     A3 98 51 8D 
32f2c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
32f30     CF 75 29 73 
32f34     90 6C EC 6E 
32f38     62 6E E7 6E 
32f3c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
32f40     9A 6E 98 6E 
32f44     95 6E 91 6E 
32f48     8E 6E CF 6E 
32f4c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
32f50     40 6E C3 6E 
32f54     E8 6C 45 6F 
32f58     A5 7B C9 35 
32f5c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
32f60     2D 98 23 97 
32f64     E1 96 A0 96 
32f68     A4 96 EA 96 
32f6c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
32f70     AF 96 F4 96 
32f74     F8 96 3E 97 
32f78     FD 96 43 97 
32f7c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
32f80     08 97 6B 99 
32f84     D6 92 88 91 
32f88     D8 EE 84 66 
32f8c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
32f90     2E 6F E7 6E 
32f94     6C 6F 24 6F 
32f98     21 6F 1F 6F 
32f9c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
32fa0     17 6F 13 6F 
32fa4     54 6F 0E 6F 
32fa8     0B 6F 4B 6F 
32fac     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
32fb0     27 6D 1C 7B 
32fb4     19 59 9F DB 
32fb8     66 8E BC 94 
32fbc     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
32fc0     67 97 26 97 
32fc4     6D 97 2B 97 
32fc8     72 97 32 97 
32fcc     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
32fd0     C1 97 7F 97 
32fd4     C6 97 85 97 
32fd8     CB 97 CE 97 
32fdc     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
32fe0     EC 8A C4 C6 
32fe4     68 4C F4 7D 
32fe8     63 6E E8 6E 
32fec     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
32ff0     ED 6F A7 6F 
32ff4     E7 6F A0 6F 
32ff8     E1 6F 9B 6F 
32ffc     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
33000     D5 6F 8F 6F 
33004     CE 6F 45 6F 
33008     86 6F 68 6D 
3300c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
33010     C0 13 AD A2 
33014     A7 8E 79 99 
33018     E6 97 E8 97 
3301c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
33020     F1 97 F3 97 
33024     F6 97 F9 97 
33028     FB 97 FE 97 
3302c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
33030     4A 98 0A 98 
33034     93 98 0F 98 
33038     7F 9B BF 8C 
3303c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
33040     91 7B 62 73 
33044     1A 6E B9 70 
33048     EB 6F B3 70 
3304c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
33050     25 70 20 70 
33054     1E 70 1B 70 
33058     18 70 15 70 
3305c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
33060     0D 70 09 70 
33064     07 70 03 70 
33068     01 70 FD 6F 
3306c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
33070     F6 6F F2 6F 
33074     EF 6F EC 6F 
33078     2C 70 E6 6F 
3307c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
33080     DD 6F 97 6F 
33084     D7 6F 84 6E 
33088     8F 6F 3F 7D 
3308c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3308e     FF FF FF FF 
33092     FF FF       | atarist_spl file "atarist.spl" '512
33094     00 00 00 00 
33098     00 00 00 00 
3309c     00 00       | 	byte	$00[10]
3309e     17 7F F2 7F 
330a2     B2 7F 72 7F 
330a6     33 7F F4 7E 
330aa     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
330ae     36 7E F5 7D 
330b2     E9 51 F2 0D 
330b6     8E 00 F3 FD 
330ba     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
330be     57 FD 58 FD 
330c2     5B FD 5C FD 
330c6     5C FD 60 7D 
330ca     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
330ce     D6 7C 98 7C 
330d2     59 7C 1A 7C 
330d6     DC 7B 9E 7B 
330da     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
330de     F3 05 00 FD 
330e2     41 FB EA FA 
330e6     D9 FA DB FA 
330ea     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
330ee     E4 FA 9B 36 
330f2     F8 7A C0 7A 
330f6     84 7A 45 7A 
330fa     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
330fe     8E 79 51 79 
33102     15 79 D7 78 
33106     3C 1F EB FF 
3310a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3310e     6D F8 65 F8 
33112     68 F8 6D F8 
33116     70 F8 74 F8 
3311a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3311e     AB 60 79 60 
33122     4B 60 1A 60 
33126     E9 5F B9 5F 
3312a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3312e     FB 59 B2 0B 
33132     92 FA 3A F7 
33136     96 F6 79 F6 
3313a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3313e     82 F6 86 F6 
33142     8C F6 DB 5D 
33146     F1 5E C1 5E 
3314a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3314e     34 5E 04 5E 
33152     D6 5D A6 5D 
33156     78 5D D4 3E 
3315a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3315e     27 F5 BA F4 
33162     AB F4 AD F4 
33166     B2 F4 B8 F4 
3316a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3316e     26 5D 2B 5D 
33172     FC 5C CD 5C 
33176     9F 5C 70 5C 
3317a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3317e     E5 5B B8 5B 
33182     DB 24 A7 FC 
33186     D1 F4 4D F3 
3318a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3318e     04 F3 0B F3 
33192     11 F3 16 F3 
33196     DE 18 98 5B 
3319a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3319e     4E 4A 29 48 
331a2     A0 47 6A 47 
331a6     43 47 20 47 
331aa     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
331ae     E2 F6 98 F2 
331b2     C5 F1 A3 F1 
331b6     A3 F1 A8 F1 
331ba     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
331be     BF F1 00 3D 
331c2     EF 46 CD 46 
331c6     AA 46 86 46 
331ca     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
331ce     1C 46 F9 45 
331d2     D7 45 EE 43 
331d6     DE 02 E8 F3 
331da     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
331de     61 F0 65 F0 
331e2     6D F0 74 F0 
331e6     7C F0 84 F0 
331ea     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
331ee     8E 45 6D 45 
331f2     49 45 27 45 
331f6     05 45 E1 44 
331fa     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
331fe     F1 2F A9 FB 
33202     8B F1 9B EF 
33206     40 EF 36 EF 
3320a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3320e     4D EF 56 EF 
33212     5E EF 7B 44 
33216     8C 44 69 44 
3321a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3321e     03 44 E1 43 
33222     C0 43 F5 37 
33226     69 33 0F 11 
3322a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3322e     66 EE 37 EE 
33232     38 EE 40 EE 
33236     48 EE 51 EE 
3323a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3323e     7D 32 6A 32 
33242     51 32 37 32 
33246     1F 32 05 32 
3324a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3324e     B9 31 A1 31 
33252     F1 04 F4 F1 
33256     50 EE A0 ED 
3325a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3325e     93 ED 9A ED 
33262     A4 ED AD ED 
33266     F4 27 C1 31 
3326a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3326e     78 31 5F 31 
33272     46 31 2E 31 
33276     15 31 FC 30 
3327a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3327e     C4 EF 4A ED 
33282     DC EC CB EC 
33286     D2 EC DA EC 
3328a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3328e     F9 EC 64 2F 
33292     0A 31 F1 30 
33296     D9 30 C0 30 
3329a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3329e     78 30 5F 30 
332a2     46 30 38 23 
332a6     A6 F6 19 EE 
332aa     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
332ae     20 EC 28 EC 
332b2     32 EC 3C EC 
332b6     47 EC 51 EC 
332ba     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
332be     A3 22 93 22 
332c2     7F 22 6E 22 
332c6     5D 22 4C 22 
332ca     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
332ce     77 09 76 F1 
332d2     CC EC F0 EB 
332d6     CD EB CE EB 
332da     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
332de     ED EB F5 EB 
332e2     3E F6 6B 22 
332e6     5F 22 4E 22 
332ea     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
332ee     1B 22 0B 22 
332f2     FA 21 E9 21 
332f6     D8 21 4D FF 
332fa     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
332fe     92 EB 7B EB 
33302     82 EB 8C EB 
33306     97 EB A1 EB 
3330a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3330e     15 22 04 22 
33312     F3 21 E3 21 
33316     D2 21 C0 21 
3331a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3331e     8E 21 7D 21 
33322     9A F8 A4 ED 
33326     8E EB 2F EB 
3332a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3332e     37 EB 42 EB 
33332     4C EB 57 EB 
33336     B2 17 22 19 
3333a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3333e     FD 18 EF 18 
33342     E3 18 D6 18 
33346     CA 18 BD 18 
3334a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3334e     60 EC 35 EB 
33352     01 EB 01 EB 
33356     0C EB 16 EB 
3335a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3335e     34 EB D0 18 
33362     00 19 F4 18 
33366     E8 18 DA 18 
3336a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3336e     B6 18 A9 18 
33372     9D 18 91 05 
33376     F0 EF CA EB 
3337a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3337e     E8 EA F2 EA 
33382     FE EA 07 EB 
33386     12 EB C2 EF 
3338a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3338e     D9 18 CD 18 
33392     C0 18 B3 18 
33396     A7 18 9B 18 
3339a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3339e     B8 FC 30 EE 
333a2     61 EB DC EA 
333a6     CD EA D2 EA 
333aa     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
333ae     F3 EA FE EA 
333b2     D2 09 D1 18 
333b6     C3 18 17 18 
333ba     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
333be     66 11 52 11 
333c2     49 11 41 11 
333c6     38 11 E0 F4 
333ca     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
333ce     C9 EA C5 EA 
333d2     CF EA DB EA 
333d6     E6 EA EF EA 
333da     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
333de     89 11 80 11 
333e2     78 11 6E 11 
333e6     67 11 5D 11 
333ea     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
333ee     43 11 32 0D 
333f2     9C F1 07 EC 
333f6     F8 EA CD EA 
333fa     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
333fe     E4 EA ED EA 
33402     F8 EA 02 EB 
33406     55 11 91 11 
3340a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3340e     75 11 6E 11 
33412     64 11 5E 11 
33416     54 11 4A 11 
3341a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3341e     A8 EB F1 EA 
33422     D9 EA DC EA 
33426     E8 EA F1 EA 
3342a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3342e     A6 EB 9E 11 
33432     A0 11 96 11 
33436     8D 11 85 11 
3343a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3343e     6A 11 CA 0D 
33442     36 0B 57 F8 
33446     6C ED 57 EB 
3344a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3344e     F4 EA FF EA 
33452     09 EB 15 EB 
33456     1E EB 1A FD 
3345a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3345e     ED 0A E8 0A 
33462     E2 0A DC 0A 
33466     D6 0A D1 0A 
3346a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3346e     F8 F3 BC EC 
33472     57 EB 1E EB 
33476     18 EB 24 EB 
3347a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3347e     42 EB 4D EB 
33482     08 09 20 0B 
33486     1A 0B 14 0B 
3348a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3348e     04 0B FE 0A 
33492     F9 0A F2 0A 
33496     84 08 3A F1 
3349a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3349e     42 EB 42 EB 
334a2     4E EB 57 EB 
334a6     62 EB 6B EB 
334aa     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
334ae     48 0B 43 0B 
334b2     3C 0B 36 0B 
334b6     31 0B 2C 0B 
334ba     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
334be     1B 0B 5C 00 
334c2     6A EF 1B EC 
334c6     81 EB 6A EB 
334ca     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
334ce     85 EB 8E EB 
334d2     99 EB A3 EB 
334d6     DD 05 E5 05 
334da     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
334de     DB 05 D8 05 
334e2     D5 05 D1 05 
334e6     D0 05 CB 05 
334ea     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
334ee     0C EC BB EB 
334f2     B3 EB BB EB 
334f6     C5 EB D0 EB 
334fa     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
334fe     E4 F7 2C 06 
33502     28 06 24 06 
33506     22 06 1F 06 
3350a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3350e     16 06 14 06 
33512     0F 06 D0 F3 
33516     65 ED 2D EC 
3351a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3351e     01 EC 0A EC 
33522     14 EC 1E EC 
33526     29 EC FB 03 
3352a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3352e     63 06 60 06 
33532     5E 06 59 06 
33536     58 06 54 06 
3353a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3353e     69 F1 21 ED 
33542     55 EC 33 EC 
33546     36 EC 40 EC 
3354a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3354e     5C EC 68 EC 
33552     92 02 D9 02 
33556     D7 02 D7 02 
3355a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3355e     D1 02 D1 02 
33562     CE 02 CD 02 
33566     5D FC 80 EF 
3356a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3356e     83 EC 8A EC 
33572     93 EC 9C EC 
33576     A5 EC B1 EC 
3357a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3357e     2B 03 2A 03 
33582     29 03 26 03 
33586     25 03 24 03 
3358a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3358e     1F 03 70 F7 
33592     D0 EE 27 ED 
33596     DB EC D4 EC 
3359a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3359e     F0 EC FA EC 
335a2     02 ED F9 F4 
335a6     7B 03 7C 03 
335aa     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
335ae     75 03 73 03 
335b2     72 03 70 03 
335b6     6D 03 6C 03 
335ba     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
335be     54 ED 22 ED 
335c2     22 ED 2C ED 
335c6     35 ED 3F ED 
335ca     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
335ce     14 01 C3 03 
335d2     C1 03 C0 03 
335d6     5F 01 A5 00 
335da     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
335de     7B 00 7C 00 
335e2     20 00 85 F1 
335e6     2A EE 89 ED 
335ea     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
335ee     80 ED 87 ED 
335f2     90 ED 9A ED 
335f6     A3 ED 73 00 
335fa     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
335fe     D0 00 D0 00 
33602     D0 00 D0 00 
33606     D0 00 CF 00 
3360a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3360e     80 F0 3D EE 
33612     D5 ED C7 ED 
33616     CD ED D6 ED 
3361a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3361e     F2 ED FA ED 
33622     1D 01 29 01 
33626     27 01 27 01 
3362a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3362e     25 01 26 01 
33632     26 01 23 01 
33636     D0 F7 EC EF 
3363a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3363e     1C EE 24 EE 
33642     2D EE 37 EE 
33646     40 EE 47 EE 
3364a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3364e     7D 01 7B 01 
33652     7A 01 7A 01 
33656     79 01 78 01 
3365a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3365e     84 FE DE F3 
33662     6C EF 93 EE 
33666     72 EE 72 EE 
3366a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3366e     8B EE 95 EE 
33672     9E EE 15 FC 
33676     67 FE 67 FE 
3367a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3367e     6B FE 6B FE 
33682     6D FE 6D FE 
33686     6D FE 6F FE 
3368a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3368e     DF EE CC EE 
33692     CF EE D9 EE 
33696     E1 EE EA EE 
3369a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3369e     5A FE C4 FE 
336a2     C3 FE C5 FE 
336a6     C6 FE C6 FE 
336aa     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
336ae     C8 FE C7 FE 
336b2     DA FB 85 F1 
336b6     8D EF 31 EF 
336ba     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
336be     34 EF 3E EF 
336c2     46 EF 4F EF 
336c6     57 EF 0D FF 
336ca     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
336ce     1F FF 1F FF 
336d2     21 FF 21 FF 
336d6     21 FF 21 FF 
336da     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
336de     15 F1 BE EF 
336e2     84 EF 7E EF 
336e6     88 EF 8F EF 
336ea     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
336ee     A9 EF 06 F2 
336f2     A6 FC AB FC 
336f6     AD FC AE FC 
336fa     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
336fe     B2 FC B4 FC 
33702     B6 FC B7 FC 
33706     8B F4 BD F0 
3370a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3370e     E4 EF EE EF 
33712     F6 EF FD EF 
33716     04 F0 0E F0 
3371a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3371e     0B FD 0D FD 
33722     0F FD 11 FD 
33726     11 FD 13 FD 
3372a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3372e     17 FD 64 F3 
33732     CD F0 52 F0 
33736     41 F0 45 F0 
3373a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3373e     5B F0 64 F0 
33742     6D F0 FB FC 
33746     65 FD 68 FD 
3374a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3374e     6C FD 6D FD 
33752     6F FD 70 FD 
33756     72 FD B3 FB 
3375a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3375e     A4 F0 99 F0 
33762     A0 F0 A8 F0 
33766     AE F0 B9 F0 
3376a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3376e     CB FB DD FB 
33772     DE FB E0 FB 
33776     E3 FB E3 FB 
3377a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3377e     E9 FB EC FB 
33782     62 F7 27 F2 
33786     2A F1 FF F0 
3378a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3378e     0C F1 13 F1 
33792     1B F1 23 F1 
33796     33 F2 3C FC 
3379a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3379e     42 FC 45 FC 
337a2     47 FC 48 FC 
337a6     4A FC 4C FC 
337aa     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
337ae     20 F2 77 F1 
337b2     5C F1 5F F1 
337b6     64 F1 6C F1 
337ba     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
337be     83 F1 DC F8 
337c2     9A FC 9A FC 
337c6     9B FC 9E FC 
337ca     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
337ce     A3 FC A4 FC 
337d2     A6 FC A9 FC 
337d6     90 F4 33 F2 
337da     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
337de     BA F1 BF F1 
337e2     C7 F1 CE F1 
337e6     D6 F1 DC F1 
337ea     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
337ee     F3 FC F5 FC 
337f2     FE FB 79 FB 
337f6     62 FB 5F FB 
337fa     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
337fe     6F FA AF F3 
33802     53 F2 12 F2 
33806     0F F2 15 F2 
3380a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3380e     2A F2 32 F2 
33812     38 F2 9A FB 
33816     AF FB B1 FB 
3381a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3381e     B7 FB B8 FB 
33822     BA FB BC FB 
33826     C1 FB 3B F8 
3382a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3382e     6E F2 6C F2 
33832     74 F2 7A F2 
33836     81 F2 87 F2 
3383a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3383e     06 FC 09 FC 
33842     0C FC 0E FC 
33846     0F FC 12 FC 
3384a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3384e     17 FC 1A FC 
33852     B2 F6 7B F3 
33856     DD F2 C5 F2 
3385a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3385e     D4 F2 DB F2 
33862     E0 F2 E8 F2 
33866     28 F8 60 FC 
3386a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3386e     64 FC 66 FC 
33872     68 FC 6A FC 
33876     6D FC 52 FC 
3387a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3387e     78 F3 24 F3 
33882     1A F3 1E F3 
33886     24 F3 2A F3 
3388a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3388e     3D F3 80 FA 
33892     0C FB 0F FB 
33896     10 FB 14 FB 
3389a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3389e     1B FB 1D FB 
338a2     1F FB 92 FA 
338a6     DE F4 AE F3 
338aa     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
338ae     79 F3 7E F3 
338b2     84 F3 8C F3 
338b6     92 F3 97 F3 
338ba     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
338be     67 FB 69 FB 
338c2     6B FB 6F FB 
338c6     71 FB 72 FB 
338ca     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
338ce     E3 F8 BA F4 
338d2     EE F3 CC F3 
338d6     CA F3 CF F3 
338da     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
338de     E2 F3 E8 F3 
338e2     ED F3 B7 FB 
338e6     BC FB BE FB 
338ea     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
338ee     C4 FB C6 FB 
338f2     C8 FB C9 FB 
338f6     CC FB 8F F7 
338fa     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
338fe     1E F4 1E F4 
33902     24 F4 2A F4 
33906     30 F4 38 F4 
3390a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3390e     AD FA B1 FA 
33912     B4 FA B6 FA 
33916     BA FA BB FA 
3391a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3391e     C2 FA C6 FA 
33922     55 F6 C6 F4 
33926     7D F4 72 F4 
3392a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3392e     83 F4 89 F4 
33932     8F F4 94 F4 
33936     66 FA 03 FB 
3393a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3393e     0A FB 0E FB 
33942     10 FB 11 FB 
33946     16 FB 18 FB 
3394a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3394e     F9 F4 CA F4 
33952     C5 F4 CB F4 
33956     D1 F4 D7 F4 
3395a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3395e     E8 F4 3F FB 
33962     56 FB 58 FB 
33966     5A FB 5E FB 
3396a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3396e     64 FB 64 FB 
33972     69 FB 99 F9 
33976     E9 F5 33 F5 
3397a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3397e     1D F5 22 F5 
33982     27 F5 2E F5 
33986     32 F5 37 F5 
3398a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3398e     BC FA BC FA 
33992     C1 FA C2 FA 
33996     C4 FA C8 FA 
3399a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3399e     F9 F7 DB F5 
339a2     78 F5 69 F5 
339a6     6A F5 70 F5 
339aa     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
339ae     7F F5 85 F5 
339b2     6E F7 06 FB 
339b6     0A FB 0B FB 
339ba     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
339be     14 FB 15 FB 
339c2     18 FB 1B FB 
339c6     1D FB 70 F7 
339ca     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
339ce     B6 F5 BB F5 
339d2     C0 F5 C6 F5 
339d6     CA F5 CF F5 
339da     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
339de     54 FB 56 FB 
339e2     5A FB 5B FB 
339e6     5E FB 5F FB 
339ea     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
339ee     67 FB 52 FB 
339f2     29 F7 33 F6 
339f6     06 F6 02 F6 
339fa     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
339fe     10 F6 16 F6 
33a02     1A F6 1F F6 
33a06     81 FB 9F FB 
33a0a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
33a0e     51 FB F2 FA 
33a12     E3 FA E3 FA 
33a16     E5 FA E9 FA 
33a1a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
33a1e     64 F6 4D F6 
33a22     4D F6 53 F6 
33a26     57 F6 5C F6 
33a2a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
33a2e     6A F6 19 FB 
33a32     1E FB 22 FB 
33a36     23 FB 24 FB 
33a3a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
33a3e     2C FB 2E FB 
33a42     32 FB F0 F8 
33a46     01 F7 A5 F6 
33a4a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
33a4e     9F F6 A3 F6 
33a52     A6 F6 AC F6 
33a56     B0 F6 EB F7 
33a5a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
33a5e     68 FB 6C FB 
33a62     6E FB 71 FB 
33a66     72 FB 74 FB 
33a6a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
33a6e     71 F8 21 F7 
33a72     E5 F6 DD F6 
33a76     E1 F6 E6 F6 
33a7a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
33a7e     F5 F6 F7 F6 
33a82     F7 FA AB FB 
33a86     AD FB AF FB 
33a8a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
33a8e     B6 FB B9 FB 
33a92     BB FB BC FB 
33a96     21 FB 07 F8 
33a9a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
33a9e     22 F7 26 F7 
33aa2     2B F7 2E F7 
33aa6     34 F7 38 F7 
33aaa     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
33aae     13 FB 16 FB 
33ab2     17 FB 1B FB 
33ab6     1E FB 20 FB 
33aba     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
33abe     26 FB 77 FA 
33ac2     F3 F7 7C F7 
33ac6     67 F7 6A F7 
33aca     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
33ace     74 F7 7A F7 
33ad2     7E F7 82 F7 
33ad6     53 FB 5A FB 
33ada     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
33ade     5F FB 63 FB 
33ae2     65 FB 67 FB 
33ae6     69 FB 6A FB 
33aea     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
33aee     B5 F7 A9 F7 
33af2     AD F7 B0 F7 
33af6     B5 F7 B8 F7 
33afa     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
33afe     6E F8 99 FB 
33b02     9C FB 9D FB 
33b06     9F FB A4 FB 
33b0a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
33b0e     A9 FB AB FB 
33b12     AD FB 46 F9 
33b16     26 F8 F0 F7 
33b1a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
33b1e     F4 F7 F8 F7 
33b22     FB F7 FF F7 
33b26     03 F8 65 FA 
33b2a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
33b2e     2B FB 2F FB 
33b32     30 FB 32 FB 
33b36     34 FB 38 FB 
33b3a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
33b3e     E9 F8 4A F8 
33b42     2E F8 2C F8 
33b46     2F F8 36 F8 
33b4a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
33b4e     41 F8 44 F8 
33b52     4A FB 67 FB 
33b56     68 FB 6B FB 
33b5a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
33b5e     73 FB 74 FB 
33b62     78 FB 7A FB 
33b66     14 FB E7 F8 
33b6a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
33b6e     6D F8 70 F8 
33b72     73 F8 78 F8 
33b76     7C F8 80 F8 
33b7a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
33b7e     A6 FB A7 FB 
33b82     A9 FB AC FB 
33b86     AF FB B1 FB 
33b8a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
33b8e     B7 FB 73 FA 
33b92     F8 F8 B4 F8 
33b96     A9 F8 AB F8 
33b9a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
33b9e     B4 F8 B8 F8 
33ba2     BB F8 FA F8 
33ba6     64 FB 65 FB 
33baa     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
33bae     6D FB 6F FB 
33bb2     70 FB 74 FB 
33bb6     77 FB 77 FB 
33bba     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
33bbe     E9 F8 E4 F8 
33bc2     E8 F8 EB F8 
33bc6     EE F8 F2 F8 
33bca     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
33bce     B5 FA 9F FB 
33bd2     A1 FB A4 FB 
33bd6     A5 FB A9 FB 
33bda     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
33bde     AE FB B1 FB 
33be2     B2 FB C7 F9 
33be6     39 F9 22 F9 
33bea     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
33bee     26 F9 2A F9 
33bf2     2E F9 32 F9 
33bf6     33 F9 BA FB 
33bfa     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
33bfe     DE FB E1 FB 
33c02     E2 FB E4 FB 
33c06     E5 FB E7 FB 
33c0a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
33c0e     C5 F9 67 F9 
33c12     57 F9 56 F9 
33c16     5B F9 5F F9 
33c1a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
33c1e     68 F9 6C F9 
33c22     0B FC 11 FC 
33c26     14 FC 15 FC 
33c2a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
33c2e     B5 FB B5 FB 
33c32     B6 FB B8 FB 
33c36     E9 FA C8 F9 
33c3a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
33c3e     90 F9 94 F9 
33c42     95 F9 99 F9 
33c46     9D F9 9F F9 
33c4a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
33c4e     DE FB DF FB 
33c52     E2 FB E4 FB 
33c56     E6 FB E8 FB 
33c5a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
33c5e     EF FB AC FA 
33c62     E9 F9 C7 F9 
33c66     C3 F9 C8 F9 
33c6a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
33c6e     D0 F9 D4 F9 
33c72     D6 F9 0E FB 
33c76     11 FC 13 FC 
33c7a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
33c7e     19 FC 1B FC 
33c82     1D FC 1E FC 
33c86     21 FC 22 FC 
33c8a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
33c8e     F7 F9 F7 F9 
33c92     FB F9 FE F9 
33c96     00 FA 03 FA 
33c9a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
33c9e     1B FC 45 FC 
33ca2     46 FC 48 FC 
33ca6     4A FC 4B FC 
33caa     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
33cae     52 FC 54 FC 
33cb2     F3 FB 82 FA 
33cb6     35 FA 28 FA 
33cba     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
33cbe     31 FA 32 FA 
33cc2     37 FA 37 FA 
33cc6     3C FA 00 FC 
33cca     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
33cce     09 FC 0B FC 
33cd2     0F FC 12 FC 
33cd6     12 FC 15 FC 
33cda     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
33cde     8D FA 60 FA 
33ce2     5B FA 5C FA 
33ce6     60 FA 61 FA 
33cea     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
33cee     6C FA 6D FA 
33cf2     37 FC 3A FC 
33cf6     3B FC 3D FC 
33cfa     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
33cfe     43 FC 44 FC 
33d02     45 FC 47 FC 
33d06     51 FB AB FA 
33d0a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
33d0e     8E FA 91 FA 
33d12     93 FA 95 FA 
33d16     98 FA 9B FA 
33d1a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
33d1e     68 FC 6A FC 
33d22     6C FC 6E FC 
33d26     70 FC 72 FC 
33d2a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
33d2e     76 FC 3B FB 
33d32     D0 FA BB FA 
33d36     B9 FA BD FA 
33d3a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
33d3e     C4 FA C6 FA 
33d42     CA FA 13 FC 
33d46     3A FC 3A FC 
33d4a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
33d4e     41 FC 43 FC 
33d52     44 FC 47 FC 
33d56     48 FC 3C FC 
33d5a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
33d5e     E6 FA E8 FA 
33d62     EB FA EE FA 
33d66     F0 FA F2 FA 
33d6a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
33d6e     61 FC 66 FC 
33d72     68 FC 6B FC 
33d76     6C FC 6E FC 
33d7a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
33d7e     73 FC 75 FC 
33d82     13 FC 3F FB 
33d86     17 FB 12 FB 
33d8a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
33d8e     1A FB 1D FB 
33d92     1F FB 20 FB 
33d96     23 FB 92 FC 
33d9a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
33d9e     96 FC 97 FC 
33da2     9A FC 9C FC 
33da6     9E FC 9F FC 
33daa     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
33dae     5A FB 41 FB 
33db2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
33db6     73 32 00 04 
33dba     00 00 10 00 
33dbe     00 00 00 00 
33dc2     00 00 00 00 | atari2 file "atari2.s2"
33dc6     43 87 43 87 
33dca     43 87 44 87 
33dce     43 87 44 87 
33dd2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33dd6     43 87 43 87 
33dda     43 87 44 87 
33dde     43 87 43 87 
33de2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33de6     44 87 43 87 
33dea     44 87 43 87 
33dee     43 87 43 87 
33df2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33df6     43 87 43 87 
33dfa     44 87 43 87 
33dfe     44 87 44 87 
33e02     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
33e06     43 87 43 87 
33e0a     44 87 43 87 
33e0e     43 87 42 87 
33e12     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33e16     43 87 43 87 
33e1a     43 87 43 87 
33e1e     44 87 43 87 
33e22     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33e26     44 87 44 87 
33e2a     43 87 44 87 
33e2e     43 87 44 87 
33e32     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
33e36     44 87 43 87 
33e3a     44 87 44 87 
33e3e     43 87 43 87 
33e42     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33e46     43 87 44 87 
33e4a     44 87 43 87 
33e4e     43 87 44 87 
33e52     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33e56     43 87 43 87 
33e5a     43 87 43 87 
33e5e     43 87 43 87 
33e62     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33e66     42 87 43 87 
33e6a     44 87 42 87 
33e6e     43 87 43 87 
33e72     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33e76     43 87 44 87 
33e7a     44 87 43 87 
33e7e     43 87 43 87 
33e82     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33e86     43 87 5C 87 
33e8a     EE 86 AC 87 
33e8e     4C 7C A3 78 
33e92     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33e96     BC 78 BB 78 
33e9a     BD 78 BC 78 
33e9e     BB 78 BD 78 
33ea2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33ea6     BB 78 BB 78 
33eaa     BC 78 BC 78 
33eae     BC 78 BB 78 
33eb2     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33eb6     BC 78 BC 78 
33eba     BC 78 BC 78 
33ebe     BC 78 BC 78 
33ec2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33ec6     BB 78 BC 78 
33eca     A0 78 4C 7C 
33ece     11 7A 29 89 
33ed2     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
33ed6     44 87 43 87 
33eda     44 87 43 87 
33ede     43 87 42 87 
33ee2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33ee6     43 87 43 87 
33eea     44 87 ED 85 
33eee     71 85 52 79 
33ef2     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
33ef6     BC 78 BC 78 
33efa     BC 78 BC 78 
33efe     BC 78 BC 78 
33f02     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33f06     BC 78 BC 78 
33f0a     BC 78 A0 78 
33f0e     CF 7A B9 81 
33f12     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
33f16     44 87 43 87 
33f1a     43 87 44 87 
33f1e     43 87 44 87 
33f22     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33f26     43 87 43 87 
33f2a     43 87 43 87 
33f2e     44 87 43 87 
33f32     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33f36     43 87 43 87 
33f3a     44 87 43 87 
33f3e     44 87 43 87 
33f42     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33f46     44 87 43 87 
33f4a     43 87 43 87 
33f4e     5A 87 39 81 
33f52     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33f56     A5 78 BC 78 
33f5a     BB 78 BC 78 
33f5e     BB 78 BC 78 
33f62     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33f66     BC 78 BC 78 
33f6a     BC 78 BC 78 
33f6e     BC 78 8F 79 
33f72     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33f76     09 85 47 87 
33f7a     43 87 43 87 
33f7e     42 87 42 87 
33f82     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33f86     43 87 43 87 
33f8a     43 87 43 87 
33f8e     43 87 44 87 
33f92     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33f96     43 87 43 87 
33f9a     44 87 43 87 
33f9e     42 87 43 87 
33fa2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33fa6     44 87 43 87 
33faa     43 87 43 87 
33fae     44 87 44 87 
33fb2     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
33fb6     94 78 55 7A 
33fba     B9 78 BC 78 
33fbe     BC 78 BC 78 
33fc2     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33fc6     BC 78 BB 78 
33fca     BC 78 BC 78 
33fce     BC 78 BC 78 
33fd2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33fd6     BB 78 BC 78 
33fda     BC 78 BC 78 
33fde     BB 78 BC 78 
33fe2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33fe6     BC 78 BC 78 
33fea     BD 78 BC 78 
33fee     BC 78 BB 78 
33ff2     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
33ff6     94 78 B3 84 
33ffa     36 84 4A 87 
33ffe     43 87 43 87 
34002     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
34006     43 87 44 87 
3400a     43 87 43 87 
3400e     43 87 43 87 
34012     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34016     43 87 44 87 
3401a     43 87 44 87 
3401e     43 87 43 87 
34022     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
34026     43 87 43 87 
3402a     43 87 45 87 
3402e     43 87 43 87 
34032     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
34036     43 87 44 87 
3403a     44 87 44 87 
3403e     43 87 43 87 
34042     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
34046     43 87 42 87 
3404a     43 87 43 87 
3404e     44 87 43 87 
34052     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34056     54 87 3C 82 
3405a     36 83 52 79 
3405e     C6 78 BC 78 
34062     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
34066     BB 78 BB 78 
3406a     BC 78 BC 78 
3406e     BC 78 BC 78 
34072     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34076     BD 78 ED 78 
3407a     1B 79 F4 83 
3407e     4D 83 4E 87 
34082     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
34086     44 87 43 87 
3408a     42 87 44 87 
3408e     43 87 42 87 
34092     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
34096     43 87 54 87 
3409a     26 82 B3 84 
3409e     D6 77 BB 78 
340a2     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
340a6     BC 78 BB 78 
340aa     BB 78 BB 78 
340ae     BB 78 BB 78 
340b2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
340b6     BC 78 BC 78 
340ba     26 79 18 75 
340be     36 83 1F 84 
340c2     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
340c6     43 87 43 87 
340ca     43 87 43 87 
340ce     43 87 44 87 
340d2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
340d6     43 87 44 87 
340da     44 87 43 87 
340de     43 87 43 87 
340e2     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
340e6     43 87 43 87 
340ea     43 87 43 87 
340ee     44 87 44 87 
340f2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
340f6     44 87 43 87 
340fa     43 87 43 87 
340fe     43 87 44 87 
34102     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34106     44 87 44 87 
3410a     44 87 43 87 
3410e     44 87 43 87 
34112     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34116     43 87 43 87 
3411a     43 87 44 87 
3411e     44 87 43 87 
34122     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
34126     43 87 43 87 
3412a     43 87 43 87 
3412e     43 87 44 87 
34132     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34136     43 87 44 87 
3413a     43 87 44 87 
3413e     19 87 7D 86 
34142     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
34146     B1 78 BC 78 
3414a     BC 78 BC 78 
3414e     BC 78 BC 78 
34152     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34156     BC 78 BC 78 
3415a     BD 78 BC 78 
3415e     B7 78 3B 7B 
34162     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
34166     96 86 44 87 
3416a     43 87 43 87 
3416e     43 87 43 87 
34172     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
34176     44 87 44 87 
3417a     43 87 44 87 
3417e     43 87 44 87 
34182     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
34186     43 87 44 87 
3418a     43 87 44 87 
3418e     43 87 44 87 
34192     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34196     43 87 44 87 
3419a     43 87 43 87 
3419e     44 87 43 87 
341a2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
341a6     44 87 44 87 
341aa     43 87 43 87 
341ae     43 87 44 87 
341b2     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
341b6     43 87 43 87 
341ba     43 87 43 87 
341be     44 87 44 87 
341c2     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
341c6     36 83 CF 7A 
341ca     AB 78 BB 78 
341ce     BC 78 BC 78 
341d2     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
341d6     BB 78 BC 78 
341da     BC 78 BC 78 
341de     BC 78 BC 78 
341e2     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
341e6     BC 78 BC 78 
341ea     BC 78 BB 78 
341ee     BC 78 BC 78 
341f2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
341f6     BB 78 BC 78 
341fa     BB 78 BC 78 
341fe     BC 78 BD 78 
34202     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
34206     BC 78 BC 78 
3420a     BC 78 BC 78 
3420e     BC 78 BD 78 
34212     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
34216     BC 78 BB 78 
3421a     BC 78 BB 78 
3421e     BB 78 BC 78 
34222     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
34226     BC 78 BC 78 
3422a     BC 78 BC 78 
3422e     BC 78 BB 78 
34232     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
34236     BC 78 BC 78 
3423a     BC 78 BD 78 
3423e     BB 78 BC 78 
34242     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
34246     BC 78 BC 78 
3424a     BC 78 BB 78 
3424e     BC 78 BB 78 
34252     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
34256     BB 78 BC 78 
3425a     BC 78 BC 78 
3425e     BC 78 BB 78 
34262     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34266     BC 78 BC 78 
3426a     BC 78 BB 78 
3426e     BC 78 BB 78 
34272     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34276     BC 78 BC 78 
3427a     BC 78 BC 78 
3427e     BB 78 BC 78 
34282     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
34286     BC 78 9F 78 
3428a     52 79 B3 84 
3428e     2F 86 60 87 
34292     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
34296     44 87 43 87 
3429a     43 87 43 87 
3429e     43 87 43 87 
342a2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
342a6     43 87 43 87 
342aa     43 87 44 87 
342ae     43 87 43 87 
342b2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
342b6     43 87 43 87 
342ba     43 87 43 87 
342be     43 87 44 87 
342c2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
342c6     44 87 44 87 
342ca     5E 87 BC 80 
342ce     FB 80 94 78 
342d2     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
342d6     BD 78 BC 78 
342da     BB 78 BC 78 
342de     BB 78 BB 78 
342e2     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
342e6     BC 78 BB 78 
342ea     BB 78 6B 79 
342ee     D6 77 AC 87 
342f2     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
342f6     43 87 44 87 
342fa     43 87 43 87 
342fe     44 87 43 87 
34302     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34306     43 87 44 87 
3430a     43 87 5C 87 
3430e     E7 80 00 80 
34312     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
34316     BC 78 BD 78 
3431a     BC 78 BC 78 
3431e     BC 78 BB 78 
34322     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34326     BC 78 BC 78 
3432a     BB 78 BC 78 
3432e     BB 78 BC 78 
34332     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34336     BB 78 BC 78 
3433a     BC 78 BC 78 
3433e     BC 78 BC 78 
34342     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34346     BC 78 BC 78 
3434a     BC 78 BC 78 
3434e     A0 78 8D 7B 
34352     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
34356     60 87 43 87 
3435a     44 87 44 87 
3435e     43 87 43 87 
34362     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
34366     44 87 43 87 
3436a     43 87 43 87 
3436e     44 87 73 86 
34372     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
34376     51 7B B6 78 
3437a     BC 78 BD 78 
3437e     BC 78 BC 78 
34382     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34386     BB 78 BC 78 
3438a     BD 78 BB 78 
3438e     BC 78 BB 78 
34392     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
34396     BC 78 BC 78 
3439a     BC 78 BC 78 
3439e     BB 78 BC 78 
343a2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
343a6     BC 78 BB 78 
343aa     BB 78 BC 78 
343ae     BC 78 BB 78 
343b2     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
343b6     22 8C AF 84 
343ba     48 87 43 87 
343be     44 87 43 87 
343c2     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
343c6     43 87 42 87 
343ca     43 87 43 87 
343ce     44 87 43 87 
343d2     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
343d6     43 87 43 87 
343da     44 87 44 87 
343de     43 87 43 87 
343e2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
343e6     43 87 43 87 
343ea     43 87 43 87 
343ee     44 87 43 87 
343f2     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
343f6     9F 8B D6 77 
343fa     16 7C B3 78 
343fe     BC 78 BB 78 
34402     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
34406     BB 78 BC 78 
3440a     BB 78 BC 78 
3440e     BC 78 BC 78 
34412     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34416     BC 78 BB 78 
3441a     BB 78 BC 78 
3441e     BB 78 BC 78 
34422     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
34426     BB 78 BB 78 
3442a     BC 78 BC 78 
3442e     BC 78 BB 78 
34432     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
34436     BC 78 BC 78 
3443a     BC 78 BD 78 
3443e     BB 78 BC 78 
34442     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
34446     BC 78 BC 78 
3444a     BC 78 BB 78 
3444e     BC 78 BC 78 
34452     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34456     A8 78 54 7E 
3445a     F4 83 17 82 
3445e     50 87 43 87 
34462     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
34466     44 87 43 87 
3446a     44 87 43 87 
3446e     43 87 44 87 
34472     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34476     43 87 28 87 
3447a     20 85 CF 7A 
3447e     70 7D AD 78 
34482     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
34486     BB 78 BC 78 
3448a     BC 78 BC 78 
3448e     BB 78 BB 78 
34492     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
34496     BB 78 B2 78 
3449a     9A 7C CF 7A 
3449e     4A 87 0D 87 
344a2     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
344a6     43 87 44 87 
344aa     43 87 44 87 
344ae     43 87 43 87 
344b2     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
344b6     44 87 43 87 
344ba     28 87 51 85 
344be     11 7A 1E 7D 
344c2     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
344c6     BC 78 BB 78 
344ca     BC 78 BC 78 
344ce     BC 78 BC 78 
344d2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
344d6     BB 78 BC 78 
344da     BB 78 BC 78 
344de     BC 78 BC 78 
344e2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
344e6     BB 78 BC 78 
344ea     BC 78 BC 78 
344ee     BD 78 BB 78 
344f2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
344f6     BC 78 BB 78 
344fa     BC 78 BC 78 
344fe     BC 78 BB 78 
34502     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34506     BC 78 BC 78 
3450a     BC 78 BC 78 
3450e     BB 78 BC 78 
34512     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34516     BC 78 BD 78 
3451a     BC 78 BC 78 
3451e     BC 78 BB 78 
34522     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34526     BC 78 BB 78 
3452a     BB 78 BC 78 
3452e     BC 78 BB 78 
34532     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34536     BB 78 BB 78 
3453a     BB 78 BC 78 
3453e     B6 78 48 7D 
34542     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
34546     56 87 43 87 
3454a     42 87 44 87 
3454e     44 87 43 87 
34552     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
34556     43 87 44 87 
3455a     43 87 44 87 
3455e     4C 87 7E 83 
34562     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
34566     F7 78 BC 78 
3456a     BC 78 BB 78 
3456e     BB 78 BC 78 
34572     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34576     BC 78 BB 78 
3457a     BC 78 BC 78 
3457e     BB 78 BC 78 
34582     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
34586     BB 78 BC 78 
3458a     BC 78 BC 78 
3458e     BC 78 BB 78 
34592     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34596     BC 78 BC 78 
3459a     BC 78 BC 78 
3459e     BC 78 BB 78 
345a2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
345a6     BC 78 BB 78 
345aa     BB 78 BC 78 
345ae     BC 78 BB 78 
345b2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
345b6     BC 78 BC 78 
345ba     BB 78 BC 78 
345be     BC 78 BC 78 
345c2     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
345c6     73 32 00 04 
345ca     00 00 10 00 
345ce     00 00 00 00 
345d2     00 00 00 00 | atari12 file "atari12.s2"
345d6     00 6D 00 6D 
345da     00 6D 00 6D 
345de     00 6D 00 6D 
345e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
345e6     00 6D 00 6D 
345ea     00 6D 00 6D 
345ee     00 6D 00 6D 
345f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
345f6     00 6D 00 6D 
345fa     00 6D 00 6D 
345fe     00 6D 00 6D 
34602     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34606     00 6D 00 6D 
3460a     00 6D 00 6D 
3460e     00 6D 00 6D 
34612     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34616     00 6D 00 6D 
3461a     00 6D 00 6D 
3461e     00 6D 00 6D 
34622     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
34626     00 6C 00 6C 
3462a     00 6C 00 6C 
3462e     00 6C 00 6C 
34632     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34636     00 6C 00 6C 
3463a     00 6C 00 6C 
3463e     00 6C 00 6C 
34642     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34646     00 6C 00 6C 
3464a     00 6C 00 6C 
3464e     00 6C 00 6C 
34652     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34656     00 6C 00 6C 
3465a     00 6C 00 6C 
3465e     00 6C 00 6C 
34662     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34666     00 6C 00 6C 
3466a     00 6C 00 6C 
3466e     00 6C 00 6C 
34672     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34676     00 6C 00 6C 
3467a     00 6C 00 6C 
3467e     00 6C 00 6C 
34682     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34686     00 6C 00 6C 
3468a     00 6C 00 6C 
3468e     00 6C 00 6C 
34692     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34696     00 6C 00 6C 
3469a     00 6C 00 6C 
3469e     00 6C 00 6C 
346a2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
346a6     00 6C 00 6C 
346aa     00 6C 00 6C 
346ae     00 6C 00 6C 
346b2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
346b6     00 6C 00 6C 
346ba     00 6C 00 6C 
346be     00 6C 00 6C 
346c2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
346c6     00 6C 00 6C 
346ca     00 6C 00 6C 
346ce     00 6C 00 6C 
346d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
346d6     00 6C 00 6B 
346da     00 6B 00 6B 
346de     00 6B 00 6B 
346e2     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346e6     00 6B 00 6B 
346ea     00 6B 00 6B 
346ee     00 6B 00 6B 
346f2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346f6     00 6B 00 6B 
346fa     00 6B 00 6B 
346fe     00 6B 00 6B 
34702     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34706     00 6B 00 6B 
3470a     00 6B 00 6B 
3470e     00 6B 00 6B 
34712     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34716     00 6B 00 6B 
3471a     00 6B 00 6B 
3471e     00 6B 00 6B 
34722     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34726     00 6B 00 6B 
3472a     00 6B 00 6B 
3472e     00 6B 00 6B 
34732     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34736     00 6B 00 6B 
3473a     00 6B 00 6B 
3473e     00 6B 00 6B 
34742     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34746     00 6B 00 6B 
3474a     00 6B 00 6B 
3474e     00 6B 00 6B 
34752     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34756     00 6B 00 6B 
3475a     00 6B 00 6B 
3475e     00 6B 00 6B 
34762     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34766     00 6B 00 6B 
3476a     00 6B 00 6B 
3476e     00 6A 00 9D 
34772     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
34776     00 9E 00 9E 
3477a     00 9E 00 9E 
3477e     00 9E 00 9E 
34782     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34786     00 9E 00 9E 
3478a     00 9E 00 9E 
3478e     00 9E 00 9E 
34792     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34796     00 9E 00 9E 
3479a     00 9E 00 9E 
3479e     00 9E 00 9E 
347a2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
347a6     00 9E 00 9E 
347aa     00 9E 00 9E 
347ae     00 9E 00 9E 
347b2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
347b6     00 9E 00 9E 
347ba     00 9E 00 9E 
347be     00 9E 00 9E 
347c2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
347c6     00 9E 00 9E 
347ca     00 9E 00 9E 
347ce     00 9E 00 9E 
347d2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
347d6     00 9E 00 9E 
347da     00 9E 00 9E 
347de     00 9E 00 9E 
347e2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
347e6     00 9E 00 9E 
347ea     00 9E 00 9E 
347ee     00 9E 00 9E 
347f2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
347f6     00 9E 00 9E 
347fa     00 9E 00 9E 
347fe     00 9E 00 9E 
34802     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
34806     00 9F 00 9F 
3480a     00 9F 00 9F 
3480e     00 9F 00 9F 
34812     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34816     00 9F 00 9F 
3481a     00 9F 00 9F 
3481e     00 9F 00 9F 
34822     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34826     00 9F 00 9F 
3482a     00 9F 00 9F 
3482e     00 9F 00 9F 
34832     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34836     00 9F 00 9F 
3483a     00 9F 00 9F 
3483e     00 9F 00 9F 
34842     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34846     00 9F 00 9F 
3484a     00 9F 00 9F 
3484e     00 9F 00 9F 
34852     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34856     00 9F 00 9F 
3485a     00 9F 00 9F 
3485e     00 9F 00 9F 
34862     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34866     00 9F 00 9F 
3486a     00 9F 00 9F 
3486e     00 9F 00 9F 
34872     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34876     00 9F 00 9F 
3487a     00 9F 00 9F 
3487e     00 9F 00 9F 
34882     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34886     00 9F 00 9F 
3488a     00 9F 00 9F 
3488e     00 9F 00 9F 
34892     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34896     00 9F 00 9F 
3489a     00 9F 00 9F 
3489e     00 9F 00 9F 
348a2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
348a6     00 9F 00 9F 
348aa     00 9F 00 9F 
348ae     00 9F 00 9F 
348b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
348b6     00 9F 00 9F 
348ba     00 9F 00 9F 
348be     00 9F 00 9F 
348c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
348c6     00 9F 00 9F 
348ca     00 9F 00 A0 
348ce     00 A0 00 A0 
348d2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348d6     00 A0 00 A0 
348da     00 A0 00 A0 
348de     00 A0 00 A0 
348e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348e6     00 A0 00 A0 
348ea     00 A0 00 A0 
348ee     00 A0 00 A0 
348f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348f6     00 A0 00 A0 
348fa     00 A0 00 A0 
348fe     00 A0 00 A0 
34902     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34906     00 A0 00 A0 
3490a     00 A0 00 A0 
3490e     00 A0 00 A0 
34912     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34916     00 A0 00 A0 
3491a     00 A0 00 A0 
3491e     00 A0 00 A0 
34922     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34926     00 A0 00 A0 
3492a     00 A0 00 A0 
3492e     00 A0 00 A0 
34932     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34936     00 A0 00 A0 
3493a     00 A0 00 A0 
3493e     00 A0 00 A0 
34942     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34946     00 A0 00 A0 
3494a     00 A0 00 A0 
3494e     00 A0 00 A0 
34952     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34956     00 A0 00 A0 
3495a     00 A0 00 A0 
3495e     00 A0 00 A0 
34962     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34966     00 A0 00 A0 
3496a     00 A0 00 A0 
3496e     00 A0 00 A0 
34972     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34976     00 A0 00 A0 
3497a     00 A0 00 A0 
3497e     00 A0 00 A0 
34982     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34986     00 A0 00 A0 
3498a     00 A0 00 A0 
3498e     00 A0 00 A0 
34992     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
34996     00 6D 00 6D 
3499a     00 6D 00 6D 
3499e     00 6D 00 6D 
349a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349a6     00 6D 00 6D 
349aa     00 6D 00 6D 
349ae     00 6D 00 6D 
349b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349b6     00 6D 00 6D 
349ba     00 6D 00 6D 
349be     00 6D 00 6D 
349c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349c6     00 6D 00 6D 
349ca     00 6D 00 6D 
349ce     00 6D 00 6D 
349d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349d6     00 6D 00 6D 
349da     00 6D 00 6D 
349de     00 6D 00 6D 
349e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349e6     00 6D 00 6D 
349ea     00 6D 00 6D 
349ee     00 6D 00 6D 
349f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349f6     00 6D 00 6D 
349fa     00 6D 00 6D 
349fe     00 6D 00 6D 
34a02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34a06     00 6D 00 6D 
34a0a     00 6D 00 6D 
34a0e     00 6D 00 6D 
34a12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34a16     00 6D 00 6D 
34a1a     00 A0 00 A0 
34a1e     00 A0 00 A0 
34a22     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a26     00 A0 00 A0 
34a2a     00 A0 00 A0 
34a2e     00 A0 00 A0 
34a32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a36     00 A0 00 A0 
34a3a     00 A0 00 A0 
34a3e     00 A0 00 A0 
34a42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a46     00 A0 00 A0 
34a4a     00 A0 00 A0 
34a4e     00 A0 00 A0 
34a52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a56     00 A0 00 A0 
34a5a     00 A0 00 A0 
34a5e     00 A0 00 A0 
34a62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a66     00 A0 00 A0 
34a6a     00 A0 00 A0 
34a6e     00 A0 00 A0 
34a72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a76     00 A0 00 A0 
34a7a     00 A0 00 A0 
34a7e     00 A0 00 A0 
34a82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a86     00 A0 00 A0 
34a8a     00 A0 00 A0 
34a8e     00 A0 00 A0 
34a92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a96     00 A0 00 A0 
34a9a     00 A0 00 A0 
34a9e     00 A0 00 A0 
34aa2     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
34aa6     00 6D 00 6D 
34aaa     00 6D 00 6D 
34aae     00 6D 00 6D 
34ab2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ab6     00 6D 00 6D 
34aba     00 6D 00 6D 
34abe     00 6D 00 6D 
34ac2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ac6     00 6D 00 6D 
34aca     00 6D 00 6D 
34ace     00 6D 00 6D 
34ad2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ad6     00 6D 00 6D 
34ada     00 6D 00 6D 
34ade     00 6D 00 6D 
34ae2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ae6     00 6D 00 6D 
34aea     00 6D 00 6D 
34aee     00 6D 00 6D 
34af2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34af6     00 6D 00 6D 
34afa     00 6D 00 6D 
34afe     00 6D 00 6D 
34b02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34b06     00 6D 00 6D 
34b0a     00 6D 00 6D 
34b0e     00 6D 00 6D 
34b12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34b16     00 6D 00 6D 
34b1a     00 6D 00 6D 
34b1e     00 6D 00 6D 
34b22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34b26     00 6D 00 6D 
34b2a     00 6C 00 A0 
34b2e     00 9F 00 A0 
34b32     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
34b36     00 A0 00 A0 
34b3a     00 A0 00 A0 
34b3e     00 A0 00 A0 
34b42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b46     00 A0 00 A0 
34b4a     00 A0 00 A0 
34b4e     00 A0 00 A0 
34b52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b56     00 A0 00 A0 
34b5a     00 A0 00 A0 
34b5e     00 A0 00 A0 
34b62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b66     00 A0 00 A0 
34b6a     00 A0 00 A0 
34b6e     00 A0 00 A0 
34b72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b76     00 A0 00 A0 
34b7a     00 A0 00 A0 
34b7e     00 A0 00 A0 
34b82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b86     00 A0 00 A0 
34b8a     00 A0 00 A0 
34b8e     00 A0 00 A0 
34b92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b96     00 A0 00 A0 
34b9a     00 A0 00 A0 
34b9e     00 A0 00 A0 
34ba2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34ba6     00 A0 00 A0 
34baa     00 A0 00 A0 
34bae     00 A0 00 A0 
34bb2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34bb6     00 A0 00 A0 
34bba     00 A0 00 A0 
34bbe     00 A0 00 A0 
34bc2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34bc6     00 A0 00 A0 
34bca     00 A0 00 A0 
34bce     00 A0 00 A0 
34bd2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34bd6     00 A0 00 A0 
34bda     00 A0 00 A0 
34bde     00 A0 00 A0 
34be2     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
34be6     00 A1 00 A1 
34bea     00 A1 00 A1 
34bee     00 A1 00 A1 
34bf2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34bf6     00 A1 00 A1 
34bfa     00 A1 00 A1 
34bfe     00 A1 00 A1 
34c02     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34c06     00 A1 00 A1 
34c0a     00 A1 00 A1 
34c0e     00 A1 00 A1 
34c12     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34c16     00 A1 00 A1 
34c1a     00 A1 00 A1 
34c1e     00 A1 00 A1 
34c22     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34c26     00 A1 00 A1 
34c2a     00 A1 00 A1 
34c2e     00 A1 00 A1 
34c32     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34c36     00 A1 00 A1 
34c3a     00 A1 00 A1 
34c3e     00 6E 00 6E 
34c42     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34c46     00 6E 00 6E 
34c4a     00 6E 00 6E 
34c4e     00 6E 00 6E 
34c52     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34c56     00 6E 00 6E 
34c5a     00 6E 00 6E 
34c5e     00 6E 00 6E 
34c62     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34c66     00 6E 00 6E 
34c6a     00 6E 00 6E 
34c6e     00 6E 00 6E 
34c72     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34c76     00 6E 00 6D 
34c7a     00 6D 00 6D 
34c7e     00 6D 00 6D 
34c82     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c86     00 6D 00 6D 
34c8a     00 6D 00 6D 
34c8e     00 6D 00 6D 
34c92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c96     00 6D 00 6D 
34c9a     00 6D 00 6D 
34c9e     00 6D 00 6D 
34ca2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ca6     00 6D 00 6D 
34caa     00 6D 00 6D 
34cae     00 6D 00 6D 
34cb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34cb6     00 6D 00 6D 
34cba     00 6D 00 6D 
34cbe     00 6D 00 6D 
34cc2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34cc6     00 6D 00 6D 
34cca     00 6D 00 6D 
34cce     00 6D 00 6D 
34cd2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34cd6     00 6D 00 6D 
34cda     00 6D 00 6D 
34cde     00 6D 00 6D 
34ce2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ce6     00 6D 00 6D 
34cea     00 6D 00 6D 
34cee     00 6D 00 6D 
34cf2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34cf6     00 6D 00 6D 
34cfa     00 6D 00 6D 
34cfe     00 6D 00 6D 
34d02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34d06     00 6D 00 6D 
34d0a     00 6D 00 6D 
34d0e     00 6D 00 6D 
34d12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34d16     00 6D 00 6D 
34d1a     00 6D 00 6D 
34d1e     00 6D 00 6D 
34d22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34d26     00 6D 00 6D 
34d2a     00 6C 00 6C 
34d2e     00 6C 00 6C 
34d32     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34d36     00 6C 00 6C 
34d3a     00 6C 00 6C 
34d3e     00 6C 00 6C 
34d42     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34d46     00 6C 00 6C 
34d4a     00 6C 00 6C 
34d4e     00 9D 00 9F 
34d52     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
34d56     00 9F 00 9F 
34d5a     00 9F 00 9F 
34d5e     00 A0 00 A0 
34d62     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d66     00 A0 00 A0 
34d6a     00 A0 00 A0 
34d6e     00 A0 00 A0 
34d72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d76     00 A0 00 A0 
34d7a     00 A0 00 A0 
34d7e     00 A0 00 A0 
34d82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d86     00 A0 00 A0 
34d8a     00 A0 00 A0 
34d8e     00 A0 00 A0 
34d92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d96     00 A0 00 A0 
34d9a     00 A0 00 A0 
34d9e     00 A0 00 A0 
34da2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34da6     00 A0 00 A0 
34daa     00 A0 00 A0 
34dae     00 A0 00 A0 
34db2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34db6     00 A0 00 A0 
34dba     00 A0 00 A0 
34dbe     00 A0 00 A0 
34dc2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34dc6     00 A0 00 A0 
34dca     00 A0 00 A0 
34dce     00 A0 00 A0 
34dd2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34dd6     01 00 00 00 
34dda     00 00 00 00 
34dde     00 00 00 00 
34de2     00 00 00 00 | mouse  file "mouse2.def"
34de6     00 00 00 00 
34dea     00 00 00 00 
34dee     00 00 00 00 
34df2     00 00 00 00 | 	byte	$00[16]
34df6     01 01 00 00 
34dfa     00 00 00 00 
34dfe     00 00 00 00 
34e02     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e06     00 00 00 00 
34e0a     00 00 00 00 
34e0e     00 00 00 00 
34e12     00 00 00 00 | 	byte	$00[16]
34e16     01 0D 01 00 
34e1a     00 00 00 00 
34e1e     00 00 00 00 
34e22     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e26     00 00 00 00 
34e2a     00 00 00 00 
34e2e     00 00 00 00 
34e32     00 00 00 00 | 	byte	$00[16]
34e36     01 0D 0D 01 
34e3a     00 00 00 00 
34e3e     00 00 00 00 
34e42     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e46     00 00 00 00 
34e4a     00 00 00 00 
34e4e     00 00 00 00 
34e52     00 00 00 00 | 	byte	$00[16]
34e56     01 0D 0D 0D 
34e5a     01 00 00 00 
34e5e     00 00 00 00 
34e62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e66     00 00 00 00 
34e6a     00 00 00 00 
34e6e     00 00 00 00 
34e72     00 00 00 00 | 	byte	$00[16]
34e76     01 0D 0D 0D 
34e7a     0D 01 00 00 
34e7e     00 00 00 00 
34e82     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e86     00 00 00 00 
34e8a     00 00 00 00 
34e8e     00 00 00 00 
34e92     00 00 00 00 | 	byte	$00[16]
34e96     01 0D 0D 0D 
34e9a     0D 0D 01 00 
34e9e     00 00 00 00 
34ea2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ea6     00 00 00 00 
34eaa     00 00 00 00 
34eae     00 00 00 00 
34eb2     00 00 00 00 | 	byte	$00[16]
34eb6     01 0D 0D 0D 
34eba     0D 0D 0D 01 
34ebe     00 00 00 00 
34ec2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
34ec6     00 00 00 00 
34eca     00 00 00 00 
34ece     00 00 00 00 
34ed2     00 00 00 00 | 	byte	$00[16]
34ed6     01 0D 0D 0D 
34eda     0D 0D 0D 0C 
34ede     01 00 00 00 
34ee2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
34ee6     00 00 00 00 
34eea     00 00 00 00 
34eee     00 00 00 00 
34ef2     00 00 00 00 | 	byte	$00[16]
34ef6     01 0D 0D 0D 
34efa     0D 0D 0D 0D 
34efe     0C 01 00 00 
34f02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
34f06     00 00 00 00 
34f0a     00 00 00 00 
34f0e     00 00 00 00 
34f12     00 00 00 00 | 	byte	$00[16]
34f16     01 0D 0D 0D 
34f1a     0D 0D 0D 0D 
34f1e     0D 0C 01 00 
34f22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
34f26     00 00 00 00 
34f2a     00 00 00 00 
34f2e     00 00 00 00 
34f32     00 00 00 00 | 	byte	$00[16]
34f36     01 0D 0D 0D 
34f3a     0D 0D 0D 0D 
34f3e     0D 0D 0B 01 
34f42     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
34f46     00 00 00 00 
34f4a     00 00 00 00 
34f4e     00 00 00 00 
34f52     00 00 00 00 | 	byte	$00[16]
34f56     01 0D 0D 0D 
34f5a     0C 0D 0D 03 
34f5e     01 01 01 01 
34f62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
34f66     00 00 00 00 
34f6a     00 00 00 00 
34f6e     00 00 00 00 
34f72     00 00 00 00 | 	byte	$00[16]
34f76     01 0D 0D 0C 
34f7a     01 09 0D 03 
34f7e     00 00 00 00 
34f82     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
34f86     00 00 00 00 
34f8a     00 00 00 00 
34f8e     00 00 00 00 
34f92     00 00 00 00 | 	byte	$00[16]
34f96     01 0D 0C 01 
34f9a     00 01 0D 0B 
34f9e     01 00 00 00 
34fa2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
34fa6     00 00 00 00 
34faa     00 00 00 00 
34fae     00 00 00 00 
34fb2     00 00 00 00 | 	byte	$00[16]
34fb6     01 0C 01 00 
34fba     00 01 0A 0D 
34fbe     01 00 00 00 
34fc2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
34fc6     00 00 00 00 
34fca     00 00 00 00 
34fce     00 00 00 00 
34fd2     00 00 00 00 | 	byte	$00[16]
34fd6     01 01 00 00 
34fda     00 00 01 0D 
34fde     0B 01 00 00 
34fe2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
34fe6     00 00 00 00 
34fea     00 00 00 00 
34fee     00 00 00 00 
34ff2     00 00 00 00 
34ff6     00 00 00 00 
34ffa     00 00       | 	byte	$00[22]
34ffc     01 0B 0D 01 
35000     00 00 00 00 
35004     00 00 00 00 
35008     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3500c     00 00 00 00 
35010     00 00 00 00 
35014     00 00 00 00 
35018     00 00 00 00 
3501c     00          | 	byte	$00[17]
3501d     01 01 00 00 
35021     00 00 00 00 
35025     00 00 00 00 
35029     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3502d     00 00 00 00 
      ...             
351d1     00 00 00 00 
351d5     00          | 	byte	$00[425]
351d6                 | 
351d6     00 00       |              	org
351d8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
351dc 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
351e0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
351e4 003             | 
351e4 003 00 30 04 F6 |                 mov     psramaddr,#0
351e8 004             | 
351e8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
351ec 005 20 00 00 FF 
351f0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
351f4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
351f8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
351fc 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
35200 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
35204 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
35208 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3520c 00d             | 
3520c 00d 20 00 00 FF 
35210 00e 00 30 04 F1 |                 add 	psramaddr,##16384
35214 00f E0 03 00 FF 
35218 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3521c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
35220 012             | 
35220 012             |                 
35220 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
35224 013             |     
35224 013 01 2C 60 FD |                 cogid 	t11				' get id
35228 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3522c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
35230 016             | 
35230 016 00 00 00 00 | t11 		long 	0
35234 017 00 FF 07 00 | mailbox 	long 	$7FF00
35238 018 00 00 00 00 | psramaddr 	long 	0
3523c 019 00 00 00 00 | pslockval	long 	0
35240 01a 00 00 00 00 | cmd             long    0
35244 01b 00 00 00 00 | buf1            long    0
35248 01c 00 40 00 00 | buf2            long    16384
3524c 01d 50 52 03 00 | 	long	@@@_dat_ + 12612
35250 01e 50 32 20 52 
35254 01f 65 74 72 6F 
35258 020 6D 61 63 68 
3525c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
35260 022 42 41 53 49 
35264 023 43 20 76 65 
35268 024 72 73 69 6F 
3526c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
35270 026 33 32 00 00 | 	byte	$33, $32, $00, $00
35274 027             | 	alignl
35274 027             | _hg010b_spin2_dat_
35274 027             | 
35274 027 00 00 00 00 
35278 028 00 00 00 00 
3527c 029 00 00 00 00 
35280 02a 00 00 00 00 
35284 02b 00 00 00    | vga_font       file "vgafont.def"
35287 02b 7E 81 A5 81 
3528b 02c 81 BD 99 81 
3528f 02d 81 7E 00 00 
35293 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
35297 02f 7E FF DB FF 
3529b 030 FF C3 E7 FF 
3529f 031 FF 7E 00 00 
352a3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
352a7 033 00 36 7F 7F 
352ab 034 7F 7F 3E 1C 
352af 035 08 00 00 00 
352b3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
352b7 037 00 08 1C 3E 
352bb 038 7F 3E 1C 08 
352bf 039 00 00 00 00 
352c3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
352c7 03b 18 3C 3C E7 
352cb 03c E7 E7 18 18 
352cf 03d 3C 00 00 00 
352d3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
352d7 03f 18 3C 7E FF 
352db 040 FF 7E 18 18 
352df 041 3C 00 00 00 
352e3 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
352e7 043 00 00 00 18 
352eb 044 3C 3C 18 00 
352ef 045 00 00 00 00 
352f3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
352f7 047 FF FF FF E7 
352fb 048 C3 C3 E7 FF 
352ff 049 FF FF FF FF 
35303 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
35307 04b 00 00 3C 66 
3530b 04c 42 42 66 3C 
3530f 04d 00 00 00 00 
35313 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
35317 04f FF FF C3 99 
3531b 050 BD BD 99 C3 
3531f 051 FF FF FF FF 
35323 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
35327 053 78 70 58 4C 
3532b 054 1E 33 33 33 
3532f 055 33 1E 00 00 
35333 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
35337 057 3C 66 66 66 
3533b 058 66 3C 18 7E 
3533f 059 18 18 00 00 
35343 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
35347 05b FC CC FC 0C 
3534b 05c 0C 0C 0C 0E 
3534f 05d 0F 07 00 00 
35353 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
35357 05f FE C6 FE C6 
3535b 060 C6 C6 C6 E6 
3535f 061 E7 67 03 00 
35363 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
35367 063 18 18 DB 3C 
3536b 064 E7 3C DB 18 
3536f 065 18 00 00 00 
35373 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
35377 067 03 07 0F 1F 
3537b 068 7F 1F 0F 07 
3537f 069 03 01 00 00 
35383 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
35387 06b 60 70 78 7C 
3538b 06c 7F 7C 78 70 
3538f 06d 60 40 00 00 
35393 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
35397 06f 18 3C 7E 18 
3539b 070 18 18 7E 3C 
3539f 071 18 00 00 00 
353a3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
353a7 073 66 66 66 66 
353ab 074 66 66 66    | 	byte	$66[7]
353ae 075 00 66 66 00 
353b2 076 00 00 00 00 
353b6 077 00 FE DB DB 
353ba 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
353be 079 D8 D8 D8 00 
353c2 07a 00 00 00 3E 
353c6 07b 63 06 1C 36 
353ca 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
353ce 07d 30 63 3E 00 
353d2 07e 00 00 00 00 
353d6 07f 00 00 00 00 
353da 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
353de 081 7F 7F 7F 00 
353e2 082 00 00 00 00 
353e6 083 00 18 3C 7E 
353ea 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
353ee 085 3C 18 7E 00 
353f2 086 00 00 00 00 
353f6 087 00 18 3C 7E 
353fa 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
353fe 089 18 18 18 00 
35402 08a 00 00 00 00 
35406 08b 00 18 18 18 
3540a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3540e 08d 7E 3C 18 00 
35412 08e 00 00 00 00 
35416 08f 00 00 00 18 
3541a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3541e 091 00 00 00 00 
35422 092 00 00 00 00 
35426 093 00 00 00    | 	byte	$00[11]
35429 094 0C 06 7F 06 
3542d 095 0C 00 00 00 
35431 096 00 00 00 00 
35435 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35439 098 00 03 03 03 
3543d 099 7F 00 00 00 
35441 09a 00 00 00 00 
35445 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35449 09c 14 36 7F 36 
3544d 09d 14 00 00 00 
35451 09e 00 00 00 00 
35455 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
35459 0a0 1C 1C 3E 3E 
3545d 0a1 7F 7F 00 00 
35461 0a2 00 00 00 00 
35465 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
35469 0a4 7F 3E 3E 1C 
3546d 0a5 1C 08 00 00 
35471 0a6 00 00 00 00 
35475 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35479 0a8 00 00 00 00 
3547d 0a9 00 00 00 00 
35481 0aa 00 00 00 00 
35485 0ab 00 00       | 	byte	$00[14]
35487 0ab 18 3C 3C 3C 
3548b 0ac 18 18 18 00 
3548f 0ad 18 18 00 00 
35493 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
35497 0af 66 24 00 00 
3549b 0b0 00 00 00 00 
3549f 0b1 00 00 00 00 
354a3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354a7 0b3 00 36 36 7F 
354ab 0b4 36 36 36 7F 
354af 0b5 36 36 00 00 
354b3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
354b7 0b7 3E 63 43 03 
354bb 0b8 3E 60 60 61 
354bf 0b9 63 3E 18 18 
354c3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
354c7 0bb 00 00 43 63 
354cb 0bc 30 18 0C 06 
354cf 0bd 63 61 00 00 
354d3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
354d7 0bf 1C 36 36 1C 
354db 0c0 6E 3B 33 33 
354df 0c1 33 6E 00 00 
354e3 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
354e7 0c3 0C 0C 0C 06 
354eb 0c4 00 00 00 00 
354ef 0c5 00 00 00 00 
354f3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354f7 0c7 30 18 0C 0C 
354fb 0c8 0C 0C 0C 0C 
354ff 0c9 18 30 00 00 
35503 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
35507 0cb 0C 18 30 30 
3550b 0cc 30 30 30 30 
3550f 0cd 18 0C 00 00 
35513 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
35517 0cf 00 00 00 66 
3551b 0d0 3C FF 3C 66 
3551f 0d1 00 00 00 00 
35523 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
35527 0d3 00 00 00 18 
3552b 0d4 18 7E 18 18 
3552f 0d5 00 00 00 00 
35533 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
35537 0d7 00 00 00 00 
3553b 0d8 00 00 00 00 | 	byte	$00[8]
3553f 0d9 18 18 18 0C 
35543 0da 00 00 00 00 
35547 0db 00 00 00 00 
3554b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3554f 0dd 00 00 00 00 
35553 0de 00 00 00 00 
35557 0df 00 00 00 00 
3555b 0e0 00 00 00 00 | 	byte	$00[16]
3555f 0e1 18 18 00 00 
35563 0e2 00 00 00 00 
35567 0e3 00 00 40 60 
3556b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3556f 0e5 03 01 00 00 
35573 0e6 00 00 00 00 
35577 0e7 1C 36 63 63 
3557b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3557f 0e9 36 1C 00 00 
35583 0ea 00 00 00 00 
35587 0eb 18 1C 1E 18 
3558b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3558f 0ed 18 7E 00 00 
35593 0ee 00 00 00 00 
35597 0ef 3E 63 60 30 
3559b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3559f 0f1 63 7F 00 00 
355a3 0f2 00 00 00 00 
355a7 0f3 3E 63 60 60 
355ab 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
355af 0f5 63 3E 00 00 
355b3 0f6 00 00 00 00 
355b7 0f7 30 38 3C 36 
355bb 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
355bf 0f9 30 78 00 00 
355c3 0fa 00 00 00 00 
355c7 0fb 7F 03 03 03 
355cb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
355cf 0fd 63 3E 00 00 
355d3 0fe 00 00 00 00 
355d7 0ff 1C 06 03 03 
355db 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
355df 101 63 3E 00 00 
355e3 102 00 00 00 00 
355e7 103 7F 63 60 60 
355eb 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
355ef 105 0C 0C 00 00 
355f3 106 00 00 00 00 
355f7 107 3E 63 63 63 
355fb 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
355ff 109 63 3E 00 00 
35603 10a 00 00 00 00 
35607 10b 3E 63 63 63 
3560b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3560f 10d 30 1E 00 00 
35613 10e 00 00 00 00 
35617 10f 00 00 00 18 
3561b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3561f 111 18 18 00 00 
35623 112 00 00 00 00 
35627 113 00 00 00 18 
3562b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3562f 115 18 18 0C 00 
35633 116 00 00 00 00 
35637 117 00 60 30 18 
3563b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3563f 119 30 60 00 00 
35643 11a 00 00 00 00 
35647 11b 00 00 00 7E 
3564b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3564f 11d 00 00 00 00 
35653 11e 00 00 00 00 
35657 11f 00          | 	byte	$00[9]
35658 120 06 0C 18 30 
3565c 121 60 30 18 0C 
35660 122 06 00 00 00 
35664 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
35668 124 63 63 30 18 
3566c 125 18 18 00 18 
35670 126 18 00 00 00 
35674 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
35678 128 3E 63 63 7B 
3567c 129 7B 7B 3B 03 
35680 12a 3E 00 00 00 
35684 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
35688 12c 1C 36 63 63 
3568c 12d 7F 63 63 63 
35690 12e 63 00 00 00 
35694 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
35698 130 66 66 66 3E 
3569c 131 66 66 66 66 
356a0 132 3F 00 00 00 
356a4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
356a8 134 66 43 03 03 
356ac 135 03 03 43 66 
356b0 136 3C 00 00 00 
356b4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
356b8 138 36 66 66 66 
356bc 139 66 66 66 36 
356c0 13a 1F 00 00 00 
356c4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
356c8 13c 66 46 16 1E 
356cc 13d 16 06 46 66 
356d0 13e 7F 00 00 00 
356d4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
356d8 140 66 46 16 1E 
356dc 141 16 06 06 06 
356e0 142 0F 00 00 00 
356e4 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
356e8 144 66 43 03 03 
356ec 145 7B 63 63 66 
356f0 146 5C 00 00 00 
356f4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
356f8 148 63 63 63 7F 
356fc 149 63 63 63 63 
35700 14a 63 00 00 00 
35704 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
35708 14c 18 18 18 18 
3570c 14d 18 18 18 18 | 	byte	$18[8]
35710 14e 3C 00 00 00 
35714 14f 00 00 00 78 
35718 150 30 30 30 30 
3571c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
35720 152 1E 00 00 00 
35724 153 00 00 00 67 
35728 154 66 66 36 1E 
3572c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
35730 156 67 00 00 00 
35734 157 00 00 00 0F 
35738 158 06 06 06 06 
3573c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
35740 15a 7F 00 00 00 
35744 15b 00 00 00 63 
35748 15c 77 7F 7F 6B 
3574c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
35750 15e 63 00 00 00 
35754 15f 00 00 00 63 
35758 160 67 6F 7F 7B 
3575c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
35760 162 63 00 00 00 
35764 163 00 00 00 3E 
35768 164 63 63 63 63 
3576c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35770 166 3E 00 00 00 
35774 167 00 00 00 3F 
35778 168 66 66 66 3E 
3577c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
35780 16a 0F 00 00 00 
35784 16b 00 00 00 3E 
35788 16c 63 63 63 63 
3578c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
35790 16e 3E 30 70 00 
35794 16f 00 00 00 3F 
35798 170 66 66 66 3E 
3579c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
357a0 172 67 00 00 00 
357a4 173 00 00 00 3E 
357a8 174 63 63 06 1C 
357ac 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
357b0 176 3E 00 00 00 
357b4 177 00 00 00 7E 
357b8 178 7E 5A 18 18 
357bc 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
357c0 17a 3C 00 00 00 
357c4 17b 00 00 00 63 
357c8 17c 63 63 63 63 
357cc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
357d0 17e 3E 00 00 00 
357d4 17f 00 00 00 63 
357d8 180 63 63 63 63 
357dc 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
357e0 182 08 00 00 00 
357e4 183 00 00 00 63 
357e8 184 63 63 63 6B 
357ec 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
357f0 186 36 00 00 00 
357f4 187 00 00 00 63 
357f8 188 63 36 3E 1C 
357fc 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
35800 18a 63 00 00 00 
35804 18b 00 00 00 66 
35808 18c 66 66 66 3C 
3580c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
35810 18e 3C 00 00 00 
35814 18f 00 00 00 7F 
35818 190 63 61 30 18 
3581c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
35820 192 7F 00 00 00 
35824 193 00 00 00 3C 
35828 194 0C 0C 0C 0C 
3582c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
35830 196 3C 00 00 00 
35834 197 00 00 00 00 
35838 198 01 03 07 0E 
3583c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
35840 19a 40 00 00 00 
35844 19b 00 00 00 3C 
35848 19c 30 30 30 30 
3584c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
35850 19e 3C 00 00 00 
35854 19f 1C 36 00 00 
35858 1a0 00 00 00 00 
3585c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35860 1a2 00 00 00 00 
35864 1a3 00 00 00 00 
35868 1a4 00 00 00 00 
3586c 1a5 00 00 00 00 
35870 1a6 00          | 	byte	$00[17]
35871 1a6 FF 00 00 0C 
35875 1a7 18 00 00 00 
35879 1a8 00 00 00 00 
3587d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35881 1aa 00 00 00 00 
35885 1ab 00 00 00 00 
35889 1ac 00          | 	byte	$00[9]
3588a 1ac 1E 30 3E 33 
3588e 1ad 33 33 6E 00 
35892 1ae 00 00 00 00 
35896 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3589a 1b0 1E 36 66 66 
3589e 1b1 66 66 3E 00 
358a2 1b2 00 00 00 00 
358a6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
358aa 1b4 3E 63 03 03 
358ae 1b5 03 63 3E 00 
358b2 1b6 00 00 00 00 
358b6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
358ba 1b8 3C 36 33 33 
358be 1b9 33 33 6E 00 
358c2 1ba 00 00 00 00 
358c6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
358ca 1bc 3E 63 7F 03 
358ce 1bd 03 63 3E 00 
358d2 1be 00 00 00 00 
358d6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
358da 1c0 0C 1E 0C 0C 
358de 1c1 0C 0C 1E 00 
358e2 1c2 00 00 00 00 
358e6 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
358ea 1c4 6E 33 33 33 
358ee 1c5 33 33 3E 30 
358f2 1c6 33 1E 00 00 
358f6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
358fa 1c8 36 6E 66 66 
358fe 1c9 66 66 67 00 
35902 1ca 00 00 00 00 
35906 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3590a 1cc 1C 18 18 18 
3590e 1cd 18 18 3C 00 
35912 1ce 00 00 00 00 
35916 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3591a 1d0 70 60 60 60 
3591e 1d1 60 60 60 66 
35922 1d2 66 3C 00 00 
35926 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3592a 1d4 66 36 1E 1E 
3592e 1d5 36 66 67 00 
35932 1d6 00 00 00 00 
35936 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3593a 1d8 18 18 18 18 
3593e 1d9 18 18       | 	byte	$18[6]
35940 1da 3C 00 00 00 
35944 1db 00 00 00 00 
35948 1dc 00 00 37 7F 
3594c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
35950 1de 63 00 00 00 
35954 1df 00 00 00 00 
35958 1e0 00 00 3B 66 
3595c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35960 1e2 66 00 00 00 
35964 1e3 00 00 00 00 
35968 1e4 00 00 3E 63 
3596c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
35970 1e6 3E 00 00 00 
35974 1e7 00 00 00 00 
35978 1e8 00 00 3B 66 
3597c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35980 1ea 3E 06 06 0F 
35984 1eb 00 00 00 00 
35988 1ec 00 00 6E 33 
3598c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
35990 1ee 3E 30 30 78 
35994 1ef 00 00 00 00 
35998 1f0 00 00 3B 6E 
3599c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
359a0 1f2 0F 00 00 00 
359a4 1f3 00 00 00 00 
359a8 1f4 00 00 3E 63 
359ac 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
359b0 1f6 3E 00 00 00 
359b4 1f7 00 00 00 08 
359b8 1f8 0C 0C 3F 0C 
359bc 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
359c0 1fa 38 00 00 00 
359c4 1fb 00 00 00 00 
359c8 1fc 00 00 33 33 
359cc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
359d0 1fe 6E 00 00 00 
359d4 1ff 00 00 00 00 
359d8 200 00 00 63 63 
359dc 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
359e0 202 1C 00 00 00 
359e4 203 00 00 00 00 
359e8 204 00 00 63 63 
359ec 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
359f0 206 36 00 00 00 
359f4 207 00 00 00 00 
359f8 208 00 00 63 36 
359fc 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
35a00 20a 63 00 00 00 
35a04 20b 00 00 00 00 
35a08 20c 00 00 63 63 
35a0c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
35a10 20e 7E 60 30 1F 
35a14 20f 00 00 00 00 
35a18 210 00 00 7F 33 
35a1c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
35a20 212 7F 00 00 00 
35a24 213 00 00 00 70 
35a28 214 18 18 18 0E 
35a2c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
35a30 216 70 00 00 00 
35a34 217 00 00 00 18 
35a38 218 18 18 18 18 
35a3c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
35a40 21a 18 00 00 00 
35a44 21b 00 00 00 0E 
35a48 21c 18 18 18 70 
35a4c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
35a50 21e 0E 00 00 00 
35a54 21f 6E 3B 00 00 
35a58 220 00 00 00 00 
35a5c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35a60 222 00 00 00 00 
35a64 223 00 00 00 00 
35a68 224 00 00       | 	byte	$00[10]
35a6a 224 08 1C 36 63 
35a6e 225 63 63 7F 00 
35a72 226 00 00 00 00 
35a76 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
35a7a 228 03 03 03 03 
35a7e 229 43 66 3C 18 
35a82 22a 30 1E 00 00 
35a86 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
35a8a 22c 33 33 33 33 
35a8e 22d 33 33       | 	byte	$33[6]
35a90 22e 6E 00 00 00 
35a94 22f 00 00 60 30 
35a98 230 18 00 3E 63 
35a9c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
35aa0 232 3E 00 00 00 
35aa4 233 00 00 08 1C 
35aa8 234 36 00 1E 30 
35aac 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
35ab0 236 6E 00 00 00 
35ab4 237 00 00 00 00 
35ab8 238 33 00 1E 30 
35abc 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
35ac0 23a 6E 00 00 00 
35ac4 23b 00 00 1C 36 
35ac8 23c 1C 00 33 33 
35acc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
35ad0 23e 6E 00 00 00 
35ad4 23f 00 00 60 30 
35ad8 240 18 00 3E 63 
35adc 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
35ae0 242 3E 00 00 00 
35ae4 243 00 00 00 00 
35ae8 244 00 00 3E 63 
35aec 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
35af0 246 3E 18 30 1E 
35af4 247 00 00 00 1C 
35af8 248 58 78 38 18 
35afc 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
35b00 24a 3C 00 00 00 
35b04 24b 00 00 00 00 
35b08 24c 63 00 3E 63 
35b0c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
35b10 24e 3E 00 00 00 
35b14 24f 66 33 00 3E 
35b18 250 63 63 63 63 
35b1c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35b20 252 3E 00 00 00 
35b24 253 00 00 CC 66 
35b28 254 33 00 3E 63 
35b2c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
35b30 256 3E 00 00 00 
35b34 257 00 00 18 3C 
35b38 258 66 00 1C 18 
35b3c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
35b40 25a 3C 00 00 00 
35b44 25b 30 18 00 7F 
35b48 25c 63 61 30 18 
35b4c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
35b50 25e 7F 00 00 00 
35b54 25f 00 63 00 08 
35b58 260 1C 36 63 63 
35b5c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
35b60 262 63 00 00 00 
35b64 263 30 18 00 3C 
35b68 264 66 43 03 03 
35b6c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
35b70 266 3C 00 00 00 
35b74 267 30 18 00 7F 
35b78 268 66 46 16 1E 
35b7c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
35b80 26a 7F 00 00 00 
35b84 26b 0C 06 00 0F 
35b88 26c 06 06 06 06 
35b8c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
35b90 26e 7F 00 00 00 
35b94 26f 30 18 00 1C 
35b98 270 18 18 18 18 
35b9c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
35ba0 272 3C 00 00 00 
35ba4 273 00 00 08 1C 
35ba8 274 36 00 3E 63 
35bac 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
35bb0 276 3E 00 00 00 
35bb4 277 00 00 00 00 
35bb8 278 63 00 3E 63 
35bbc 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
35bc0 27a 3E 00 00 00 
35bc4 27b 00 00 00 6F 
35bc8 27c 46 26 06 06 
35bcc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
35bd0 27e 7F 00 00 00 
35bd4 27f 00 00 00 6E 
35bd8 280 4C 2C 0C 0C 
35bdc 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
35be0 282 1E 00 00 00 
35be4 283 30 18 00 3E 
35be8 284 63 63 06 1C 
35bec 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
35bf0 286 3E 00 00 00 
35bf4 287 00 00 60 30 
35bf8 288 18 00 3E 63 
35bfc 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
35c00 28a 3E 00 00 00 
35c04 28b 00 63 00 3E 
35c08 28c 63 63 63 63 
35c0c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35c10 28e 3E 00 00 00 
35c14 28f 00 63 00 63 
35c18 290 63 63 63 63 
35c1c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
35c20 292 3E 00 00 00 
35c24 293 6C 38 00 7E 
35c28 294 7E 5A 18 18 
35c2c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
35c30 296 3C 00 00 00 
35c34 297 00 00 60 48 
35c38 298 2C 0C 3F 0C 
35c3c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
35c40 29a 38 00 00 00 
35c44 29b 00 00 00 0F 
35c48 29c 26 36 1E 0E 
35c4c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
35c50 29e 7F 00 00 00 
35c54 29f 00 00 00 00 
35c58 2a0 00 63 36 1C 
35c5c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
35c60 2a2 00 00 00 00 
35c64 2a3 00 00       | 	byte	$00[6]
35c66 2a3 36 1C 08 00 
35c6a 2a4 3E 63 03 03 
35c6e 2a5 03 63 3E 00 
35c72 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
35c76 2a7 30 18 0C 00 
35c7a 2a8 1E 30 3E 33 
35c7e 2a9 33 33 6E 00 
35c82 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
35c86 2ab 60 30 18 00 
35c8a 2ac 1C 18 18 18 
35c8e 2ad 18 18 3C 00 
35c92 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
35c96 2af 60 30 18 00 
35c9a 2b0 3E 63 63 63 
35c9e 2b1 63 63 3E 00 
35ca2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
35ca6 2b3 30 18 0C 00 
35caa 2b4 33 33 33 33 
35cae 2b5 33 33 6E 00 
35cb2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
35cb6 2b7 00 08 1C 36 
35cba 2b8 63 63 7F 63 
35cbe 2b9 63 63 63 18 
35cc2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
35cc6 2bb 00 00 00 00 
35cca 2bc 1E 30 3E 33 
35cce 2bd 33 33 6E 18 
35cd2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
35cd6 2bf 00 7F 63 61 
35cda 2c0 30 18 0C 06 
35cde 2c1 43 63 7F 00 
35ce2 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
35ce6 2c3 36 1C 08 00 
35cea 2c4 7F 33 18 0C 
35cee 2c5 06 63 7F 00 
35cf2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
35cf6 2c7 00 7F 66 46 
35cfa 2c8 16 1E 16 06 
35cfe 2c9 46 66 7F 18 
35d02 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
35d06 2cb 00 00 00 00 
35d0a 2cc 3E 63 7F 03 
35d0e 2cd 03 63 3E 18 
35d12 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
35d16 2cf 00 3C 66 03 
35d1a 2d0 1F 03 0F 03 
35d1e 2d1 03 66 3C 00 
35d22 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
35d26 2d3 60 30 18 00 
35d2a 2d4 7F 33 18 0C 
35d2e 2d5 06 63 7F 00 
35d32 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
35d36 2d7 00 3C 66 43 
35d3a 2d8 03 03 03 03 
35d3e 2d9 43 66 3C 00 
35d42 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
35d46 2db 00 00 00 00 
35d4a 2dc 3E 63 06 1C 
35d4e 2dd 30 63 3E 18 
35d52 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
35d56 2df 00 00 00 00 
35d5a 2e0 00 00       | 	byte	$00[6]
35d5c 2e1 6C 36 1B 36 
35d60 2e2 6C 00 00 00 
35d64 2e3 00 00 00 00 
35d68 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d6c 2e5 1B 36 6C 36 
35d70 2e6 1B 00 00 00 
35d74 2e7 88 22 88 22 
35d78 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
35d7c 2e9 88 22 88 22 
35d80 2ea 88 22 88 22 
35d84 2eb AA 55 AA 55 
35d88 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
35d8c 2ed AA 55 AA 55 
35d90 2ee AA 55 AA 55 
35d94 2ef BB EE BB EE 
35d98 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
35d9c 2f1 BB EE BB EE 
35da0 2f2 BB EE BB EE 
35da4 2f3 18 18 18 18 
35da8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
35dac 2f5 18 18 18 18 
35db0 2f6 18 18 18 18 
35db4 2f7 18 18 18 18 
35db8 2f8 18 18 18    | 	byte	$18[15]
35dbb 2f8 1F 18 18 18 
35dbf 2f9 18 18 18 18 
35dc3 2fa 18 30 18 00 
35dc7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
35dcb 2fc 63 7F 63 63 
35dcf 2fd 63 63 00 00 
35dd3 2fe 00 1C 36 00 
35dd7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
35ddb 300 63 7F 63 63 
35ddf 301 63 63 00 00 
35de3 302 00 36 1C 00 
35de7 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
35deb 304 1E 16 06 46 
35def 305 66 7F 00 00 
35df3 306 00 00 00 00 
35df7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
35dfb 308 1C 30 60 63 
35dff 309 63 3E 18 30 
35e03 30a 1E 6C 6C 6C 
35e07 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
35e0b 30c 6F 6C 6C 6C 
35e0f 30d 6C 6C 6C 6C 
35e13 30e 6C 6C 6C 6C 
35e17 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35e1b 310 6C 6C 6C 6C 
35e1f 311 6C 6C 6C 6C 
35e23 312 6C          | 	byte	$6c[9]
35e24 313 00 00 00 00 
35e28 314 00          | 	byte	$00[5]
35e29 314 7F 60 6F 6C 
35e2d 315 6C 6C 6C 6C 
35e31 316 6C 6C 6C 6C 
35e35 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35e39 318 6F 60 7F 00 
35e3d 319 00 00 00 00 
35e41 31a 00 00 00 18 
35e45 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
35e49 31c 61 30 18 0C 
35e4d 31d 06 43 63 7F 
35e51 31e 00 00 00 00 
35e55 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
35e59 320 00 7F 33 18 
35e5d 321 0C 06 63 7F 
35e61 322 00 00 00 00 
35e65 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
35e69 324 00 00 1F 18 
35e6d 325 18 18 18 18 
35e71 326 18 18 18 18 
35e75 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35e79 328 18 18 F8 00 
35e7d 329 00 00 00 00 
35e81 32a 00 00 00 18 
35e85 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
35e89 32c 18 18 FF 00 
35e8d 32d 00 00 00 00 
35e91 32e 00 00 00 00 
35e95 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e99 330 00 00 FF 18 
35e9d 331 18 18 18 18 
35ea1 332 18 18 18 18 
35ea5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35ea9 334 18 18 F8 18 
35ead 335 18 18 18 18 
35eb1 336 18 18 18 00 
35eb5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35eb9 338 00 00 FF 00 
35ebd 339 00 00 00 00 
35ec1 33a 00 00 00 18 
35ec5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
35ec9 33c 18 18 FF 18 
35ecd 33d 18 18 18 18 
35ed1 33e 18 18 18 63 
35ed5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
35ed9 340 36 63 63 7F 
35edd 341 63 63 63 63 
35ee1 342 00 00 00 00 
35ee5 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
35ee9 344 00 1E 30 3E 
35eed 345 33 33 33 6E 
35ef1 346 00 00 00 6C 
35ef5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35ef9 348 EC 0C FC 00 
35efd 349 00 00 00 00 
35f01 34a 00 00 00 00 
35f05 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35f09 34c FC 0C EC 6C 
35f0d 34d 6C 6C 6C 6C 
35f11 34e 6C 6C 6C 6C 
35f15 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35f19 350 EF 00 FF 00 
35f1d 351 00 00 00 00 
35f21 352 00 00 00 00 
35f25 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35f29 354 FF 00 EF 6C 
35f2d 355 6C 6C 6C 6C 
35f31 356 6C 6C 6C 6C 
35f35 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35f39 358 EC 0C EC 6C 
35f3d 359 6C 6C 6C 6C 
35f41 35a 6C 6C 6C 00 
35f45 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35f49 35c FF 00 FF 00 
35f4d 35d 00 00 00 00 
35f51 35e 00 00 00 6C 
35f55 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35f59 360 EF 00 EF 6C 
35f5d 361 6C 6C 6C 6C 
35f61 362 6C 6C 6C 00 
35f65 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35f69 364 63 3E 63 63 
35f6d 365 63 63 3E 63 
35f71 366 00 00 00 00 
35f75 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
35f79 368 30 3C 36 33 
35f7d 369 33 33 33 6E 
35f81 36a 00 00 00 00 
35f85 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
35f89 36c 66 66 6F 66 
35f8d 36d 66 66 36 1F 
35f91 36e 00 00 00 36 
35f95 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
35f99 370 66 66 66 66 
35f9d 371 66 66       | 	byte	$66[6]
35f9f 371 36 1F 00 00 
35fa3 372 00 00 63 00 
35fa7 373 7F 66 46 16 
35fab 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
35faf 375 66 7F 00 00 
35fb3 376 00 6C 38 00 
35fb7 377 38 30 30 3C 
35fbb 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
35fbf 379 33 6E 00 00 
35fc3 37a 00 36 1C 00 
35fc7 37b 63 67 6F 7F 
35fcb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
35fcf 37d 63 63 00 00 
35fd3 37e 00 30 18 00 
35fd7 37f 3C 18 18 18 
35fdb 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35fdf 381 18 3C 00 00 
35fe3 382 00 3C 66 00 
35fe7 383 3C 18 18 18 
35feb 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35fef 385 18 3C 00 00 
35ff3 386 00 00 00 36 
35ff7 387 1C 08 00 3E 
35ffb 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
35fff 389 63 3E 00 00 
36003 38a 00 18 18 18 
36007 38b 18 18 18 18 
3600b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3600f 38d 00 00 00 00 
36013 38e 00 00 00 00 
36017 38f 00 00 00 00 | 	byte	$00[12]
3601b 390 F8 18 18 18 
3601f 391 18 18 18 18 
36023 392 18 FF FF FF 
36027 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3602b 394 FF FF FF FF 
3602f 395 FF FF FF FF 
36033 396 FF          | 	byte	$ff[9]
36034 397 00 00 00 00 
36038 398 00 00 00    | 	byte	$00[7]
3603b 398 FF FF FF FF 
3603f 399 FF FF FF FF 
36043 39a FF          | 	byte	$ff[9]
36044 39b 00 00 00 7E 
36048 39c 7E 5A 18 18 
3604c 39d 18 18 18 18 
36050 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
36054 39f 1C 36 1C 63 
36058 3a0 63 63 63 63 
3605c 3a1 63 63 63 63 
36060 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36064 3a3 FF FF FF FF 
36068 3a4 FF FF FF    | 	byte	$ff[7]
3606b 3a4 00 00 00 00 
3606f 3a5 00 00 00 00 
36073 3a6 00          | 	byte	$00[9]
36074 3a7 30 18 00 3E 
36078 3a8 63 63 63 63 
3607c 3a9 63 63 63 63 
36080 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36084 3ab 00 00 00 1E 
36088 3ac 33 33 33 1B 
3608c 3ad 33 63 63 63 
36090 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
36094 3af 1C 36 00 3E 
36098 3b0 63 63 63 63 
3609c 3b1 63 63 63 63 
360a0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
360a4 3b3 30 18 00 63 
360a8 3b4 67 6F 7F 7B 
360ac 3b5 73 63 63 63 
360b0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
360b4 3b7 00 00 60 30 
360b8 3b8 18 00 3B 66 
360bc 3b9 66 66 66 66 
360c0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
360c4 3bb 00 00 36 1C 
360c8 3bc 08 00 3B 66 
360cc 3bd 66 66 66 66 
360d0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
360d4 3bf 36 1C 00 3E 
360d8 3c0 63 63 06 1C 
360dc 3c1 30 60 63 63 
360e0 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
360e4 3c3 00 00 36 1C 
360e8 3c4 08 00 3E 63 
360ec 3c5 06 1C 30 63 
360f0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
360f4 3c7 30 18 00 3F 
360f8 3c8 66 66 66 3E 
360fc 3c9 36 66 66 66 
36100 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
36104 3cb 30 18 00 63 
36108 3cc 63 63 63 63 
3610c 3cd 63 63 63 63 
36110 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36114 3cf 00 00 60 30 
36118 3d0 18 00 3B 6E 
3611c 3d1 66 06 06 06 
36120 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
36124 3d3 66 33 00 63 
36128 3d4 63 63 63 63 
3612c 3d5 63 63 63 63 
36130 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36134 3d7 00 00 60 30 
36138 3d8 18 00 63 63 
3613c 3d9 63 63 63 63 
36140 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
36144 3db 30 18 00 66 
36148 3dc 66 66 66 3C 
3614c 3dd 18 18 18 18 
36150 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
36154 3df 00 00 00 08 
36158 3e0 0C 0C 3F 0C 
3615c 3e1 0C 0C 0C 6C 
36160 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
36164 3e3 30 18 00 00 
36168 3e4 00 00 00 00 
3616c 3e5 00 00 00 00 
36170 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36174 3e7 00 00 00 00 
36178 3e8 00 00 00 00 | 	byte	$00[8]
3617c 3e9 7F 00 00 00 
36180 3ea 00 00 00 00 
36184 3eb 66 33 00 00 
36188 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3618c 3ed 00 00 00 00 
36190 3ee 00 00 00 00 
36194 3ef 00 00 00 00 
36198 3f0 00 00 00 00 
3619c 3f1 00 00 00 00 
361a0 3f2 00          | 	byte	$00[21]
361a1 3f2 0C 06 3C 36 
361a5 3f3 1C 00 00 00 
361a9 3f4 00 00 00 00 
361ad 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361b1 3f6 00 00 00 63 
361b5 3f7 3E 00 00 00 
361b9 3f8 00 00 00 00 
361bd 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361c1 3fa 00 00 00 00 
361c5 3fb 3E 63 06 1C 
361c9 3fc 36 63 63 36 
361cd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
361d1 3fe 00 00 00 00 
361d5 3ff 00 00 00 00 | 	byte	$00[8]
361d9 400 18 00 7E 00 
361dd 401 18 00 00 00 
361e1 402 00 00 00 00 
361e5 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361e9 404 00 00 00 00 
361ed 405 00 00 00 00 | 	byte	$00[8]
361f1 406 18 30 1E 00 
361f5 407 00 00 1C 36 
361f9 408 36 1C 00 00 
361fd 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
36201 40a 00 00 00 00 
36205 40b 63 00 00 00 
36209 40c 00 00 00 00 
3620d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36211 40e 00 00 00 18 
36215 40f 18 00 00 00 
36219 410 00 00 00 00 
3621d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36221 412 00 00 00 00 
36225 413 00          | 	byte	$00[5]
36226 413 CC 66 33 00 
3622a 414 33 33 33 33 
3622e 415 33 33 6E 00 
36232 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
36236 417 00 3F 66 66 
3623a 418 66 3E 36 66 
3623e 419 66 66 6F 00 
36242 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
36246 41b 36 1C 08 00 
3624a 41c 3B 6E 66 06 
3624e 41d 06 06 0F 00 
36252 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
36256 41f 00 00 00 7E 
3625a 420 7E 7E 7E 7E 
3625e 421 7E 7E 00 00 
36262 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
36266 423 00 00 00 00 
3626a 424 00 00 00 00 
3626e 425 00 00 00 00 
36272 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36274 427             | 'vga_font       file "vgafont.def"
36274 427 00 00 00 00 
      ...             
362a4 433 00 00 00 00 
362a8 434 00 00 00    | st_font        file "st4font.def"
362ab 434 FF FF 00 00 
362af 435 00 00 00 00 
362b3 436 00 18 18 18 
362b7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
362bb 438 18 18 18 18 
362bf 439 18 18 18 18 
362c3 43a 18          | 	byte	$18[9]
362c4 43b 00 00 00 00 
362c8 43c 00 00 00    | 	byte	$00[7]
362cb 43c FF FF 18 18 
362cf 43d 18 18 18 18 
362d3 43e 18 18 18 18 
362d7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
362db 440 FF FF 00 00 
362df 441 00 00 00 00 
362e3 442 00 18 18 18 
362e7 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
362eb 444 1F 1F 18 18 
362ef 445 18 18 18 18 
362f3 446 18 18 18 18 
362f7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
362fb 448 F8 F8 18 18 
362ff 449 18 18 18 18 
36303 44a 18 00 00 00 
36307 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3630b 44c 1F 1F 18 18 
3630f 44d 18 18 18 18 
36313 44e 18 00 00 00 
36317 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3631b 450 F8 F8 18 18 
3631f 451 18 18 18 18 
36323 452 18 18 18 18 
36327 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3632b 454 1F 1F 00 00 
3632f 455 00 00 00 00 
36333 456 00 18 18 18 
36337 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3633b 458 F8 F8 00 00 
3633f 459 00 00 00 00 
36343 45a 00 18 18 18 
36347 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3634b 45c FF FF 18 18 
3634f 45d 18 18 18 18 
36353 45e 18 00 00 18 
36357 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3635b 460 66 7E 7E 66 
3635f 461 66 66 66 30 
36363 462 18 00 00 7E 
36367 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3636b 464 3E 06 06 06 
3636f 465 06 7E 7E 18 
36373 466 0C 30 18 3C 
36377 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3637b 468 06 06 06 66 
3637f 469 66 7E 3C 00 
36383 46a 00 30 18 66 
36387 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3638b 46c 7E 7E 76 76 
3638f 46d 66 66 66 00 
36393 46e 00 30 18 7C 
36397 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3639b 470 1C 38 70 60 
3639f 471 60 7E 3E 00 
363a3 472 00 30 18 7E 
363a7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
363ab 474 18 0C 0C 06 
363af 475 06 7E 7E 00 
363b3 476 00 18 18 00 
363b7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
363bb 478 18 18 0C 0C 
363bf 479 06 7E 7E 00 
363c3 47a 00 30 18 3C 
363c7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
363cb 47c 66 66 66 66 
363cf 47d 66          | 	byte	$66[5]
363d0 47e 7E 3C 00 00 
363d4 47f 00 00 06 06 
363d8 480 06 06 16 1E 
363dc 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
363e0 482 7E 7E 00 00 
363e4 483 00 00 00 00 
363e8 484 00 3C 7C 60 
363ec 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
363f0 486 7E 7C 30 18 
363f4 487 00 00 00 00 
363f8 488 00 3C 7E 66 
363fc 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
36400 48a 7E 7C 18 0C 
36404 48b 00 00 30 18 
36408 48c 00 3C 3E 06 
3640c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
36410 48e 7E 7C 00 00 
36414 48f 00 00 30 18 
36418 490 00 3E 7E 66 
3641c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
36420 492 66 66 00 00 
36424 493 00 00 30 18 
36428 494 00 7C 7E 06 
3642c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
36430 496 7E 3E 00 00 
36434 497 00 00 30 18 
36438 498 00 7E 7E 30 
3643c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36440 49a 7E 7E 00 00 
36444 49b 00 00 18 18 
36448 49c 00 7E 7E 30 
3644c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36450 49e 7E 7E 00 00 
36454 49f 00 00 30 18 
36458 4a0 00 3C 7E 66 
3645c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
36460 4a2 7E 3C 00 00 
36464 4a3 00 00 1C 1C 
36468 4a4 18 18 38 3C 
3646c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
36470 4a6 3C 3C 00 00 
36474 4a7 00 00 00 00 
36478 4a8 00 00 00 00 
3647c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36480 4aa 00 00 00 00 
36484 4ab 00 00       | 	byte	$00[6]
36486 4ab 18 18 18 18 
3648a 4ac 18 18 18 18 | 	byte	$18[8]
3648e 4ad 00 00 18 18 
36492 4ae 00 00 00 00 
36496 4af 66 66 66 66 
3649a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3649e 4b1 00 00 00 00 
364a2 4b2 00 00 00 00 
364a6 4b3 00          | 	byte	$00[9]
364a7 4b3 66 66 FF FF 
364ab 4b4 66 66 FF FF 
364af 4b5 66 66 00 00 
364b3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
364b7 4b7 7C 7E 06 06 
364bb 4b8 3E 7C 60 60 
364bf 4b9 7E 3E 18 18 
364c3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
364c7 4bb 66 30 30 18 
364cb 4bc 18 0C 0C 66 
364cf 4bd 66 00 00 00 
364d3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
364d7 4bf 66 66 3C 1C 
364db 4c0 1C FC FE 66 
364df 4c1 66 FE FC 00 
364e3 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
364e7 4c3 18 18 18 18 
364eb 4c4 00 00 00 00 
364ef 4c5 00 00 00 00 
364f3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
364f7 4c7 18 1C 0C 0C 
364fb 4c8 0C 0C 0C 0C 
364ff 4c9 1C 18 30 00 
36503 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
36507 4cb 18 38 30 30 
3650b 4cc 30 30 30 30 
3650f 4cd 38 18 0C 00 
36513 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
36517 4cf 66 66 3C 3C 
3651b 4d0 FF FF 3C 3C 
3651f 4d1 66 66 00 00 
36523 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
36527 4d3 00 18 18 18 
3652b 4d4 7E 7E 18 18 
3652f 4d5 18 00 00 00 
36533 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36537 4d7 00 00 00 00 
3653b 4d8 00 00       | 	byte	$00[6]
3653d 4d9 18 18 18 18 
36541 4da 18          | 	byte	$18[5]
36542 4da 0C 04 00 00 
36546 4db 00 00 00 00 
3654a 4dc 7E 7E 00 00 
3654e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
36552 4de 00 00 00 00 
36556 4df 00 00 00 00 
3655a 4e0 00 00 00 00 
3655e 4e1 00          | 	byte	$00[13]
3655f 4e1 18 18 18 00 
36563 4e2 00 00 00 60 
36567 4e3 60 60 30 30 
3656b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3656f 4e5 06 06 06 00 
36573 4e6 00 00 00 3C 
36577 4e7 7E 66 66 66 
3657b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3657f 4e9 66 7E 3C 00 
36583 4ea 00 00 00 18 
36587 4eb 18 1C 1C 18 
3658b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3658f 4ed 18 7E 7E 00 
36593 4ee 00 00 00 3C 
36597 4ef 7E 66 66 30 
3659b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3659f 4f1 0C 7E 7E 00 
365a3 4f2 00 00 00 7E 
365a7 4f3 7E 30 30 18 
365ab 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
365af 4f5 66 7E 3C 00 
365b3 4f6 00 00 00 30 
365b7 4f7 30 38 38 3C 
365bb 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
365bf 4f9 7E 30 30 00 
365c3 4fa 00 00 00 7E 
365c7 4fb 7E 06 06 3E 
365cb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
365cf 4fd 66 7E 3C 00 
365d3 4fe 00 00 00 38 
365d7 4ff 3C 0E 06 06 
365db 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
365df 501 66 7E 3C 00 
365e3 502 00 00 00 7E 
365e7 503 7E 60 60 30 
365eb 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
365ef 505 0C 0C 0C 00 
365f3 506 00 00 00 3C 
365f7 507 7E 66 66 3C 
365fb 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
365ff 509 66 7E 3C 00 
36603 50a 00 00 00 3C 
36607 50b 7E 66 66 7E 
3660b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3660f 50d 70 3C 1C 00 
36613 50e 00 00 00 00 
36617 50f 00 00 18 18 
3661b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3661f 511 18 18 18 00 
36623 512 00 00 00 00 
36627 513 00 00 18 18 
3662b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3662f 515 18 18 18 0C 
36633 516 04 00 00 00 
36637 517 70 38 1C 0E 
3663b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3663f 519 70 00 00 00 
36643 51a 00 00 00 00 
36647 51b 00 00 7E 7E 
3664b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3664f 51d 00 00 00 00 
36653 51e 00 00 00 00 | 	byte	$00[8]
36657 51f 0E 1C 38 70 
3665b 520 E0 70 38 1C 
3665f 521 0E 00 00 00 
36663 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
36667 523 7E 66 66 30 
3666b 524 30 18 18 18 
3666f 525 00 18 18 00 
36673 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
36677 527 7E 66 66 66 
3667b 528 66 36 06 66 
3667f 529 66 7E 3C 00 
36683 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
36687 52b 3C 7E 66 66 
3668b 52c 66 7E 7E 66 
3668f 52d 66 66 66 00 
36693 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
36697 52f 7E 66 66 7E 
3669b 530 3E 66 66 66 
3669f 531 66 7E 3E 00 
366a3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
366a7 533 7E 66 66 06 
366ab 534 06 06 06 66 
366af 535 66 7E 3C 00 
366b3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
366b7 537 7E 66 66 66 
366bb 538 66 66 66 66 
366bf 539 66 7E 3E 00 
366c3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
366c7 53b 7E 06 06 3E 
366cb 53c 3E 06 06 06 
366cf 53d 06 7E 7E 00 
366d3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
366d7 53f 7E 06 06 3E 
366db 540 3E 06 06 06 
366df 541 06 06 06 00 
366e3 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
366e7 543 7E 06 06 76 
366eb 544 76 66 66 66 
366ef 545 66 7E 3C 00 
366f3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
366f7 547 66 66 66 7E 
366fb 548 7E 66 66 66 
366ff 549 66 66 66 00 
36703 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
36707 54b 7E 18 18 18 
3670b 54c 18 18 18 18 
3670f 54d 18 7E 7E 00 
36713 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
36717 54f 60 60 60 60 
3671b 550 60 60 60    | 	byte	$60[7]
3671e 551 66 66 7E 3C 
36722 552 00 00 00 00 
36726 553 66 66 36 36 
3672a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3672e 555 66 66 C6 C6 
36732 556 00 00 00 00 
36736 557 06 06 06 06 
3673a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3673e 559 06 06 7E 7E 
36742 55a 00 00 00 00 
36746 55b C6 C6 EE EE 
3674a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3674e 55d C6 C6 C6 C6 
36752 55e 00 00 00 00 
36756 55f 66 66 66 6E 
3675a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3675e 561 76 66 66 66 
36762 562 00 00 00 00 
36766 563 3C 7E 66 66 
3676a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3676e 565 66 66 7E 3C 
36772 566 00 00 00 00 
36776 567 3E 7E 66 66 
3677a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3677e 569 06 06 06 06 
36782 56a 00 00 00 00 
36786 56b 3C 7E 66 66 
3678a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3678e 56d 66 56 3E 6C 
36792 56e 00 00 00 00 
36796 56f 3E 7E 66 66 
3679a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3679e 571 66 66 C6 C6 
367a2 572 00 00 00 00 
367a6 573 7C 7E 06 06 
367aa 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
367ae 575 60 60 7E 3E 
367b2 576 00 00 00 00 
367b6 577 7E 7E 18 18 
367ba 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
367be 579 18 18 18 18 
367c2 57a 00 00 00 00 
367c6 57b 66 66 66 66 
367ca 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
367ce 57d 66 66 7E 3C 
367d2 57e 00 00 00 00 
367d6 57f 66 66 66 66 
367da 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
367de 581 3C 3C 18 18 
367e2 582 00 00 00 00 
367e6 583 C6 C6 C6 C6 
367ea 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
367ee 585 FE EE C6 82 
367f2 586 00 00 00 00 
367f6 587 66 66 66 3C 
367fa 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
367fe 589 3C 66 66 66 
36802 58a 00 00 00 00 
36806 58b 66 66 66 66 
3680a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3680e 58d 18 18 18 18 
36812 58e 00 00 00 00 
36816 58f 7E 7E 30 30 
3681a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3681e 591 06 06 7E 7E 
36822 592 00 00 00 00 
36826 593 3C 3C 0C 0C 
3682a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3682e 595 0C 0C 3C 3C 
36832 596 00 00 00 00 
36836 597 06 06 0C 0C 
3683a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3683e 599 60 60 C0 C0 
36842 59a 00 00 00 00 
36846 59b 3C 3C 30 30 
3684a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3684e 59d 30 30 3C 3C 
36852 59e 00 00 00 00 
36856 59f 18 18 3C 3C 
3685a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3685e 5a1 00 00 00 00 
36862 5a2 00 00 00 00 
36866 5a3 00 00 00 00 
3686a 5a4 00 00 00 00 
3686e 5a5 00 00       | 	byte	$00[18]
36870 5a6 FE FE 00 00 
36874 5a7 00 00 0C 0C 
36878 5a8 18 18 00 00 
3687c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
36880 5aa 00 00 00 00 
36884 5ab 00 00 00 00 
36888 5ac 00          | 	byte	$00[9]
36889 5ac 3C 7C 60 7C 
3688d 5ad 7E 66 66 7E 
36891 5ae 7C 00 00 00 
36895 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
36899 5b0 3E 7E 66 66 
3689d 5b1 66 66 66 7E 
368a1 5b2 3E 00 00 00 
368a5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
368a9 5b4 3C 3E 06 06 
368ad 5b5 06 06 06 7E 
368b1 5b6 7C 00 00 00 
368b5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
368b9 5b8 7C 7E 66 66 
368bd 5b9 66 66 66 7E 
368c1 5ba 7C 00 00 00 
368c5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
368c9 5bc 3C 7E 66 66 
368cd 5bd 7E 06 06 7E 
368d1 5be 7C 00 00 00 
368d5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
368d9 5c0 18 7E 7E 18 
368dd 5c1 18 18 18 18 
368e1 5c2 18 00 00 00 
368e5 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
368e9 5c4 7C 7E 66 66 
368ed 5c5 66 66 7E 7C 
368f1 5c6 60 7E 3E 00 
368f5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
368f9 5c8 3E 7E 66 66 
368fd 5c9 66 66 66 66 
36901 5ca 66 00 00 00 
36905 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
36909 5cc 1C 1C 18 18 
3690d 5cd 18 18 18 3C 
36911 5ce 3C 00 00 00 
36915 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
36919 5d0 30 30 30 30 
3691d 5d1 30 30 30 30 
36921 5d2 30          | 	byte	$30[9]
36922 5d2 3E 1E 00 00 
36926 5d3 06 06 06 36 
3692a 5d4 36 1E 1E 1E 
3692e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
36932 5d6 00 00 00 00 
36936 5d7 1C 1C 18 18 
3693a 5d8 18 18 18 18 
3693e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
36942 5da 00 00 00 00 
36946 5db 00 00 00    | 	byte	$00[7]
36949 5dc 6C FE FE D6 
3694d 5dd D6 C6 C6 C6 
36951 5de C6 00 00 00 
36955 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
36959 5e0 3E 7E 66 66 
3695d 5e1 66 66 66 66 
36961 5e2 66 00 00 00 
36965 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
36969 5e4 3C 7E 66 66 
3696d 5e5 66 66 66 7E 
36971 5e6 3C 00 00 00 
36975 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
36979 5e8 3E 7E 66 66 
3697d 5e9 66 66 66 7E 
36981 5ea 3E 06 06 00 
36985 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
36989 5ec 7C 7E 66 66 
3698d 5ed 66 66 66 7E 
36991 5ee 7C 60 60 00 
36995 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
36999 5f0 3E 7E 66 06 
3699d 5f1 06 06 06 06 
369a1 5f2 06 00 00 00 
369a5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
369a9 5f4 7C 7E 06 0E 
369ad 5f5 3C 70 60 7E 
369b1 5f6 3E 00 00 00 
369b5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
369b9 5f8 7E 7E 18 18 
369bd 5f9 18 18 18 78 
369c1 5fa 70 00 00 00 
369c5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
369c9 5fc 66 66 66 66 
369cd 5fd 66 66 66    | 	byte	$66[7]
369d0 5fe 7E 7C 00 00 
369d4 5ff 00 00 00 00 
369d8 600 00 66 66 66 
369dc 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
369e0 602 18 18 00 00 
369e4 603 00 00 00 00 
369e8 604 00 C6 C6 D6 
369ec 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
369f0 606 C6 82 00 00 
369f4 607 00 00 00 00 
369f8 608 00 66 66 3C 
369fc 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
36a00 60a 66 66 00 00 
36a04 60b 00 00 00 00 
36a08 60c 00 66 66 66 
36a0c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
36a10 60e 7C 60 7E 3E 
36a14 60f 00 00 00 00 
36a18 610 00 7E 7E 30 
36a1c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36a20 612 7E 7E 00 00 
36a24 613 00 00 30 18 
36a28 614 18 18 18 0C 
36a2c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
36a30 616 18 30 00 00 
36a34 617 00 00 18 18 
36a38 618 18 18 18 18 
36a3c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36a40 61a 18 18 00 00 
36a44 61b 00 00 0C 18 
36a48 61c 18 18 18 30 
36a4c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
36a50 61e 18 0C 00 00 
36a54 61f 00 00 6C 7E 
36a58 620 36 00 00 00 
36a5c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
36a60 622 00 00 00 00 
36a64 623 00 00 00 00 
36a68 624 00          | 	byte	$00[9]
36a69 624 18 18 18 18 
36a6d 625 18 18 00 00 
36a71 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
36a74 627             | 'amiga_font     file "amigafont.def"
36a74 627 00 6C FE FE 
36a78 628 7C 38 10 00 
36a7c 629 18 18 18 F8 
36a80 62a F8 18 18 18 | a8_font        file "atari8.fnt"
36a84 62b C0 C0 C0 C0 
36a88 62c C0 C0 C0 C0 | 	byte	$c0[8]
36a8c 62d 18 18 18 1F 
36a90 62e 1F 00 00 00 
36a94 62f 18 18 18 1F 
36a98 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
36a9c 631 00 00 00 1F 
36aa0 632 1F 18 18 18 
36aa4 633 C0 E0 70 38 
36aa8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
36aac 635 03 07 0E 1C 
36ab0 636 38 70 E0 C0 
36ab4 637 80 C0 E0 F0 
36ab8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
36abc 639 00 00 00 00 
36ac0 63a F0 F0 F0 F0 
36ac4 63b 01 03 07 0F 
36ac8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
36acc 63d F0 F0 F0 F0 
36ad0 63e 00 00 00 00 
36ad4 63f 0F 0F 0F 0F 
36ad8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
36adc 641 FF FF 00 00 
36ae0 642 00 00 00 00 
36ae4 643 00 00 00 00 
36ae8 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
36aec 645 00 00 00 00 
36af0 646 0F 0F 0F 0F 
36af4 647 00 38 38 EE 
36af8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
36afc 649 00 00 00 F8 
36b00 64a F8 18 18 18 
36b04 64b 00 00 00 FF 
36b08 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
36b0c 64d 18 18 18 FF 
36b10 64e FF 18 18 18 
36b14 64f 00 00 3C 7E 
36b18 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
36b1c 651 00 00 00 00 
36b20 652 FF FF FF FF 
36b24 653 03 03 03 03 
36b28 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
36b2c 655 00 00 00 FF 
36b30 656 FF 18 18 18 
36b34 657 18 18 18 FF 
36b38 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
36b3c 659 0F 0F 0F 0F 
36b40 65a 0F 0F 0F 0F | 	byte	$0f[8]
36b44 65b 18 18 18 F8 
36b48 65c F8 00 00 00 
36b4c 65d 1E 06 1E 06 
36b50 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
36b54 65f 00 18 3C 7E 
36b58 660 18 18 18 00 
36b5c 661 00 18 18 18 
36b60 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
36b64 663 00 18 0C 7E 
36b68 664 0C 18 00 00 
36b6c 665 00 18 30 7E 
36b70 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
36b74 667 00 00 00 00 
36b78 668 00 00 00 00 
36b7c 669 00          | 	byte	$00[9]
36b7d 669 18 18 18 18 
36b81 66a 00 18 00 00 
36b85 66b 66 66 66 00 
36b89 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
36b8d 66d 66 FF 66 66 
36b91 66e FF 66 00 18 
36b95 66f 7C 06 3C 60 
36b99 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
36b9d 671 66 36 18 0C 
36ba1 672 66 62 00 38 
36ba5 673 6C 38 1C F6 
36ba9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
36bad 675 18 18 18 00 
36bb1 676 00 00 00 00 
36bb5 677 70 38 18 18 
36bb9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
36bbd 679 0E 1C 18 18 
36bc1 67a 1C 0E 00 00 
36bc5 67b 66 3C FF 3C 
36bc9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
36bcd 67d 18 18 7E 18 
36bd1 67e 18 00 00 00 
36bd5 67f 00 00 00 00 
36bd9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
36bdd 681 00 00 7E 00 
36be1 682 00 00 00 00 
36be5 683 00 00 00 00 
36be9 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
36bed 685 60 30 18 0C 
36bf1 686 06 02 00 00 
36bf5 687 3C 66 76 6E 
36bf9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
36bfd 689 18 1C 18 18 
36c01 68a 18 7E 00 00 
36c05 68b 3C 66 30 18 
36c09 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
36c0d 68d 7E 30 18 30 
36c11 68e 66 3C 00 00 
36c15 68f 30 38 3C 36 
36c19 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
36c1d 691 7E 06 3E 60 
36c21 692 66 3C 00 00 
36c25 693 3C 06 3E 66 
36c29 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
36c2d 695 7E 60 30 18 
36c31 696 0C 0C 00 00 
36c35 697 3C 66 3C 66 
36c39 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
36c3d 699 3C 66 7C 60 
36c41 69a 30 1C 00 00 
36c45 69b 00 18 18 00 
36c49 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
36c4d 69d 00 18 18 00 
36c51 69e 18 18 0C 60 
36c55 69f 30 18 0C 18 
36c59 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
36c5d 6a1 00 7E 00 00 
36c61 6a2 7E 00 00 06 
36c65 6a3 0C 18 30 18 
36c69 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
36c6d 6a5 3C 66 30 18 
36c71 6a6 00 18 00 00 
36c75 6a7 3C 66 76 76 
36c79 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
36c7d 6a9 18 3C 66 66 
36c81 6aa 7E 66 00 00 
36c85 6ab 3E 66 3E 66 
36c89 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
36c8d 6ad 3C 66 06 06 
36c91 6ae 66 3C 00 00 
36c95 6af 1E 36 66 66 
36c99 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
36c9d 6b1 7E 06 3E 06 
36ca1 6b2 06 7E 00 00 
36ca5 6b3 7E 06 3E 06 
36ca9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
36cad 6b5 7C 06 06 76 
36cb1 6b6 66 7C 00 00 
36cb5 6b7 66 66 7E 66 
36cb9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
36cbd 6b9 7E 18 18 18 
36cc1 6ba 18 7E 00 00 
36cc5 6bb 60 60 60 60 
36cc9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
36ccd 6bd 66 36 1E 1E 
36cd1 6be 36 66 00 00 
36cd5 6bf 06 06 06 06 
36cd9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
36cdd 6c1 C6 EE FE D6 
36ce1 6c2 C6 C6 00 00 
36ce5 6c3 66 6E 7E 7E 
36ce9 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
36ced 6c5 3C 66 66 66 
36cf1 6c6 66 3C 00 00 
36cf5 6c7 3E 66 66 3E 
36cf9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
36cfd 6c9 3C 66 66 66 
36d01 6ca 36 6C 00 00 
36d05 6cb 3E 66 66 3E 
36d09 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
36d0d 6cd 3C 06 3C 60 
36d11 6ce 60 3C 00 00 
36d15 6cf 7E 18 18 18 
36d19 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
36d1d 6d1 66 66 66 66 
36d21 6d2 66          | 	byte	$66[5]
36d22 6d2 7E 00 00 66 
36d26 6d3 66 66 66 3C 
36d2a 6d4 18 00 00 C6 
36d2e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
36d32 6d6 C6 00 00 66 
36d36 6d7 66 3C 3C 66 
36d3a 6d8 66 00 00 66 
36d3e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
36d42 6da 18 00 00 7E 
36d46 6db 30 18 0C 06 
36d4a 6dc 7E 00 00 78 
36d4e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
36d52 6de 78 00 00 02 
36d56 6df 06 0C 18 30 
36d5a 6e0 60 00 00 1E 
36d5e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
36d62 6e2 1E 00 00 10 
36d66 6e3 38 6C C6 00 
36d6a 6e4 00 00 00 00 
36d6e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
36d72 6e6 FF 00 00 18 
36d76 6e7 3C 7E 7E 3C 
36d7a 6e8 18 00 00 00 
36d7e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
36d82 6ea 7C 00 00 06 
36d86 6eb 06 3E 66 66 
36d8a 6ec 3E 00 00 00 
36d8e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
36d92 6ee 3C 00 00 60 
36d96 6ef 60 7C 66 66 
36d9a 6f0 7C 00 00 00 
36d9e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
36da2 6f2 3C 00 00 70 
36da6 6f3 18 7C 18 18 
36daa 6f4 18 00 00 00 
36dae 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
36db2 6f6 60 3E 00 06 
36db6 6f7 06 3E 66 66 
36dba 6f8 66 00 00 18 
36dbe 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
36dc2 6fa 3C 00 00 60 
36dc6 6fb 00 60 60 60 
36dca 6fc 60 3C 00 06 
36dce 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
36dd2 6fe 66 00 00 1C 
36dd6 6ff 18 18 18 18 
36dda 700 3C 00 00 00 
36dde 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
36de2 702 C6 00 00 00 
36de6 703 3E 66 66 66 
36dea 704 66 00 00 00 
36dee 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
36df2 706 3C 00 00 00 
36df6 707 3E 66 66 3E 
36dfa 708 06 06 00 00 
36dfe 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
36e02 70a 60 60 00 00 
36e06 70b 3E 66 06 06 
36e0a 70c 06 00 00 00 
36e0e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
36e12 70e 3E 00 00 18 
36e16 70f 7E 18 18 18 
36e1a 710 70 00 00 00 
36e1e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
36e22 712 7C 00 00 00 
36e26 713 66 66 66 3C 
36e2a 714 18 00 00 00 
36e2e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
36e32 716 6C 00 00 00 
36e36 717 66 3C 18 3C 
36e3a 718 66 00 00 00 
36e3e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
36e42 71a 30 1E 00 00 
36e46 71b 7E 30 18 0C 
36e4a 71c 7E 00 00 18 
36e4e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
36e52 71e 3C 00 18 18 
36e56 71f 18 18 18 18 
36e5a 720 18 18 00 7E 
36e5e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
36e62 722 60 00 10 18 
36e66 723 1C 1E 1C 18 
36e6a 724 10 00 08 18 
36e6e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
36e72 726 08 00       | 	byte	$08, $00
36e74 727 00 00 00 00 
36e78 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
36e79 728 80 00 00 00 
36e7d 729 00 80 00 00 
36e81 72a 80 80 00 00 
36e85 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
36e89 72c 80 00 80 00 
36e8d 72d 00 40 80 00 
36e91 72e AA AA AA 00 
36e95 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
36e99 730 FF 00 00 00 
36e9d 731 00 FF 00 00 
36ea1 732 FF FF 00 00 
36ea5 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
36ea9 734 FF 00 FF 00 
36ead 735 00 FF FF 00 
36eb1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
36eb4 737 00 00 00 00 
36eb8 738 00          | ataripalette   file "ataripalettep2.def"
36eb9 738 11 11 11 00 
36ebd 739 22 22 22 00 
36ec1 73a 33 33 33 00 
36ec5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
36ec9 73c 55 55 55 00 
36ecd 73d 66 66 66 00 
36ed1 73e 77 77 77 00 
36ed5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
36ed9 740 99 99 99 00 
36edd 741 AA AA AA 00 
36ee1 742 BB BB BB 00 
36ee5 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
36ee9 744 DD DD DD 00 
36eed 745 EE EE EE 00 
36ef1 746 FF FF FF 00 
36ef5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
36ef9 748 00 14 40 00 
36efd 749 00 1E 60 00 
36f01 74a 00 28 80 00 
36f05 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
36f09 74c 00 3C BF 00 
36f0d 74d 00 46 DF 00 
36f11 74e 00 50 FF 00 
36f15 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
36f19 750 39 77 FF 00 
36f1d 751 55 8A FF 00 
36f21 752 71 9E FF 00 
36f25 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
36f29 754 AA C5 FF 00 
36f2d 755 C6 D8 FF 00 
36f31 756 E3 EC FF 00 
36f35 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
36f39 758 00 00 40 00 
36f3d 759 00 00 60 00 
36f41 75a 00 00 80 00 
36f45 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
36f49 75c 00 00 BF 00 
36f4d 75d 00 00 DF 00 
36f51 75e 00 00 FF 00 
36f55 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
36f59 760 39 39 FF 00 
36f5d 761 55 55 FF 00 
36f61 762 71 71 FF 00 
36f65 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
36f69 764 AA AA FF 00 
36f6d 765 C6 C6 FF 00 
36f71 766 E3 E3 FF 00 
36f75 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
36f79 768 20 00 40 00 
36f7d 769 30 00 60 00 
36f81 76a 40 00 80 00 
36f85 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
36f89 76c 60 00 BF 00 
36f8d 76d 70 00 DF 00 
36f91 76e 80 00 FF 00 
36f95 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
36f99 770 9C 39 FF 00 
36f9d 771 AA 55 FF 00 
36fa1 772 B8 71 FF 00 
36fa5 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
36fa9 774 D5 AA FF 00 
36fad 775 E3 C6 FF 00 
36fb1 776 F1 E3 FF 00 
36fb5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
36fb9 778 40 00 40 00 
36fbd 779 60 00 60 00 
36fc1 77a 80 00 80 00 
36fc5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
36fc9 77c BF 00 BF 00 
36fcd 77d DF 00 DF 00 
36fd1 77e FF 00 FF 00 
36fd5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
36fd9 780 FF 39 FF 00 
36fdd 781 FF 55 FF 00 
36fe1 782 FF 71 FF 00 
36fe5 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
36fe9 784 FF AA FF 00 
36fed 785 FF C6 FF 00 
36ff1 786 FF E3 FF 00 
36ff5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
36ff9 788 40 00 20 00 
36ffd 789 60 00 30 00 
37001 78a 80 00 40 00 
37005 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
37009 78c BF 00 60 00 
3700d 78d DF 00 70 00 
37011 78e FF 00 80 00 
37015 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
37019 790 FF 39 9C 00 
3701d 791 FF 55 AA 00 
37021 792 FF 71 B8 00 
37025 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
37029 794 FF AA D5 00 
3702d 795 FF C6 E3 00 
37031 796 FF E3 F1 00 
37035 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
37039 798 40 00 00 00 
3703d 799 60 00 00 00 
37041 79a 80 00 00 00 
37045 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
37049 79c BF 00 00 00 
3704d 79d DF 00 00 00 
37051 79e FF 00 00 00 
37055 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
37059 7a0 FF 39 39 00 
3705d 7a1 FF 55 55 00 
37061 7a2 FF 71 71 00 
37065 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
37069 7a4 FF AA AA 00 
3706d 7a5 FF C6 C6 00 
37071 7a6 FF E3 E3 00 
37075 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
37079 7a8 40 10 00 00 
3707d 7a9 60 18 00 00 
37081 7aa 80 20 00 00 
37085 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
37089 7ac BF 30 00 00 
3708d 7ad DF 38 00 00 
37091 7ae FF 40 00 00 
37095 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
37099 7b0 FF 6A 39 00 
3709d 7b1 FF 80 55 00 
370a1 7b2 FF 95 71 00 
370a5 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
370a9 7b4 FF BF AA 00 
370ad 7b5 FF D5 C6 00 
370b1 7b6 FF EA E3 00 
370b5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
370b9 7b8 40 20 00 00 
370bd 7b9 60 30 00 00 
370c1 7ba 80 40 00 00 
370c5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
370c9 7bc BF 60 00 00 
370cd 7bd DF 70 00 00 
370d1 7be FF 80 00 00 
370d5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
370d9 7c0 FF 9C 39 00 
370dd 7c1 FF AA 55 00 
370e1 7c2 FF B8 71 00 
370e5 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
370e9 7c4 FF D5 AA 00 
370ed 7c5 FF E3 C6 00 
370f1 7c6 FF F1 E3 00 
370f5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
370f9 7c8 40 30 00 00 
370fd 7c9 60 48 00 00 
37101 7ca 80 60 00 00 
37105 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
37109 7cc BF 90 00 00 
3710d 7cd DF A8 00 00 
37111 7ce FF C0 00 00 
37115 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
37119 7d0 FF CE 39 00 
3711d 7d1 FF D5 55 00 
37121 7d2 FF DC 71 00 
37125 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
37129 7d4 FF EA AA 00 
3712d 7d5 FF F1 C6 00 
37131 7d6 FF F8 E3 00 
37135 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
37139 7d8 30 40 00 00 
3713d 7d9 48 60 00 00 
37141 7da 60 80 00 00 
37145 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
37149 7dc 90 BF 00 00 
3714d 7dd A8 DF 00 00 
37151 7de C0 FF 00 00 
37155 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
37159 7e0 CE FF 39 00 
3715d 7e1 D5 FF 55 00 
37161 7e2 DC FF 71 00 
37165 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
37169 7e4 EA FF AA 00 
3716d 7e5 F1 FF C6 00 
37171 7e6 F8 FF E3 00 
37175 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
37179 7e8 00 40 00 00 
3717d 7e9 00 60 00 00 
37181 7ea 00 80 00 00 
37185 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
37189 7ec 00 BF 00 00 
3718d 7ed 00 DF 00 00 
37191 7ee 00 FF 00 00 
37195 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
37199 7f0 39 FF 39 00 
3719d 7f1 55 FF 55 00 
371a1 7f2 71 FF 71 00 
371a5 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
371a9 7f4 AA FF AA 00 
371ad 7f5 C6 FF C6 00 
371b1 7f6 E3 FF E3 00 
371b5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
371b9 7f8 00 40 14 00 
371bd 7f9 00 60 1E 00 
371c1 7fa 00 80 28 00 
371c5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
371c9 7fc 00 BF 3C 00 
371cd 7fd 00 DF 46 00 
371d1 7fe 00 FF 50 00 
371d5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
371d9 800 39 FF 77 00 
371dd 801 55 FF 8A 00 
371e1 802 71 FF 9E 00 
371e5 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
371e9 804 AA FF C5 00 
371ed 805 C6 FF D8 00 
371f1 806 E3 FF EC 00 
371f5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
371f9 808 00 40 28 00 
371fd 809 00 60 3C 00 
37201 80a 00 80 50 00 
37205 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
37209 80c 00 BF 78 00 
3720d 80d 00 DF 8C 00 
37211 80e 00 FF A0 00 
37215 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
37219 810 39 FF B5 00 
3721d 811 55 FF C0 00 
37221 812 71 FF CA 00 
37225 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
37229 814 AA FF DF 00 
3722d 815 C6 FF EA 00 
37231 816 E3 FF F4 00 
37235 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
37239 818 00 40 40 00 
3723d 819 00 60 60 00 
37241 81a 00 80 80 00 
37245 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
37249 81c 00 BF BF 00 
3724d 81d 00 DF DF 00 
37251 81e 00 FF FF 00 
37255 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
37259 820 39 FF FF 00 
3725d 821 55 FF FF 00 
37261 822 71 FF FF 00 
37265 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
37269 824 AA FF FF 00 
3726d 825 C6 FF FF 00 
37271 826 E3 FF FF 00 
37275 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
37279 828 00 28 40 00 
3727d 829 00 3C 60 00 
37281 82a 00 50 80 00 
37285 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
37289 82c 00 78 BF 00 
3728d 82d 00 8C DF 00 
37291 82e 00 A0 FF 00 
37295 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
37299 830 39 B5 FF 00 
3729d 831 55 C0 FF 00 
372a1 832 71 CA FF 00 
372a5 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
372a9 834 AA DF FF 00 
372ad 835 C6 EA FF 00 
372b1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
372b4 837             | 
372b4 837             | '**********************************************************************************
372b4 837             | '
372b4 837             | '        Timings and colors definitions
372b4 837             | '
372b4 837             | '**********************************************************************************
372b4 837             | 
372b4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
372b4 837 08 00 00 00 
372b8 838 3C 00 00 00 
372bc 839 08 00 00 00 
372c0 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
372c4 83b 07 00 00 00 
372c8 83c 04 00 00 00 
372cc 83d 01 00 00 00 
372d0 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
372d4 83f 58 02 00 00 
372d8 840 20 9E 4B 14 
372dc 841 FB A8 9E 01 
372e0 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
372e4 843 00 00 00 00 
372e8 844 C0 00 00 00 
372ec 845 00 00 00 00 
372f0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
372f4 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
372f4 847 00 75 C7 97 
372f8 848 27 47 F6 0A 
372fc 849 05 79 CB 9B 
37300 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
37304 84b             | 
37304 84b             | ''--------  Initialization  ----------------------------------------------------------------
37304 84b             | 
37304 84b 28 0C 64 FD | hdmi            setq    #6
37308 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3730c 84d 28 10 64 FD |                 setq    #8
37310 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
37314 84f             | 
37314 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
37318 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3731c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
37320 852 D6 C6 01 F1 |                 add     t1,hbase
37324 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
37328 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3732c 855 7B 0B 80 5F 
37330 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
37334 857 66 66 86 FF 
37338 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3733c 859             | '
3733c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
37340 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
37344 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
37348 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3734c 85d             | 
3734c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
37350 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
37354 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
37358 860             | 
37358 860             | ''--------  frame rendering main loop  ---------------------------------------------------
37358 860             | 
37358 860 28 06 64 FD | p101            setq 	#3
3735c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
37360 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
37364 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
37368 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3736c 865 00 A0 05 F6 |                 mov     dlinum, #0
37370 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
37374 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
37378 868             | 
37378 868             | 
37378 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3737c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
37380 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
37384 86b             |                 
37384 86b             | 
37384 86b             | 
37384 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
37384 86b             |   
37384 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
37388 86c 29 FE 65 3D |          if_nc  setq2   #255
3738c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
37390 86e             | 
37390 86e             | '' -----   up porch (before the picture)
37390 86e             | 
37390 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
37394 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
37398 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3739c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
373a0 872             |  
373a0 872             |    
373a0 872             |  
373a0 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
373a4 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
373a8 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
373ac 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
373b0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
373b4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
373b8 878             | 
373b8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
373bc 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
373c0 87a 48 00 B0 FD | 		call    #dli
373c4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
373c8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
373cc 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
373d0 87e             |                 	
373d0 87e             |                 
373d0 87e             | 
373d0 87e             |  
373d0 87e             | '' ------- the main screen drawing starts here
373d0 87e             | 
373d0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
373d4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
373d8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
373dc 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
373e0 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
373e4 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
373e8 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
373ec 885             |               
373ec 885             | 
373ec 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
373f0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
373f4 887             | 
373f4 887             | ' ---------------- All visible lines displayed now, start vblank  
373f4 887             | 
373f4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
373f8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
373fc 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
37400 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
37404 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
37408 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3740c 88d             | 
3740c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3740c 88d             | 
3740c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3740c 88d             | 
3740c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
37410 88e             | 
37410 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
37414 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
37418 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3741c 891             | 
3741c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
37420 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
37424 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
37428 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3742c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
37430 896             | 
37430 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
37434 897 DD C6 41 F8 |                 getnib  t1,dl,#0
37438 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3743c 899 70 00 90 AD |     if_z        jmp     #preload
37440 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
37444 89b 94 00 90 AD |     if_z        jmp     #preload2
37448 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3744c 89d 0C 00 90 AD |     if_z        jmp     #p390
37450 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
37454 89f 28 00 90 AD |     if_z        jmp     #p391  
37458 8a0             | 
37458 8a0 2D 00 64 FD | p308            ret
3745c 8a1             |    
3745c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
37460 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
37464 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
37468 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3746c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
37470 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
37474 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
37478 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3747c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
37480 8aa             |  
37480 8aa             | '' --------  Reload palette. To do 
37480 8aa             | 
37480 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
37484 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
37488 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3748c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
37490 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
37494 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
37498 8b0 70 FF 9F FD |         	jmp     #dli                
3749c 8b1             |       
3749c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3749c 8b1             | 
3749c 8b1             | 
3749c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3749c 8b1             | 
3749c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
374a0 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
374a4 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
374a8 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
374ac 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
374b0 8b6             |         
374b0 8b6             | '' -------------- Preload a line from PSRAM        
374b0 8b6             |         
374b0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
374b4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
374b8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
374bc 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
374c0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
374c4 8bb             | 
374c4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
374c8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
374cc 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
374d0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
374d4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
374d8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
374dc 8c1             |  
374dc 8c1             |  
374dc 8c1             | preload2      '  incmod  dlinum,#3
374dc 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
374e0 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
374e4 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
374e8 8c4 28 02 64 FD |                 setq	#1
374ec 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
374f0 8c6             |                 
374f0 8c6             | 
374f0 8c6             | '' -------------- Draw sprites
374f0 8c6             | 
374f0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
374f4 8c7 10 5C 0E F5 | 		and t8,#16 wz
374f8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
374fc 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
37500 8ca             | 		
37500 8ca             | 
37500 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
37504 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
37508 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3750c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
37510 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
37514 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
37518 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3751c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
37520 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
37524 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
37528 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3752c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
37530 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
37534 8d7             | 
37534 8d7             | 
37534 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
37538 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3753c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
37540 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
37544 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
37548 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3754c 8dd 00 5E 06 F6 |                 mov 	t9,#0
37550 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
37554 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
37558 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3755c 8e1             |      
3755c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
37560 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
37564 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
37568 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3756c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
37570 8e6             |                 
37570 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
37574 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
37578 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3757c 8e9             |   		
3757c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
37580 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
37584 8eb             | 
37584 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
37588 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3758c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
37590 8ee             |  
37590 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
37594 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
37598 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3759c 8f1             | 	
3759c 8f1             | 	
3759c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
375a0 8f2 28 CD 01 F1 | 		add	t4,sprite_w
375a4 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
375a8 8f4             | 
375a8 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
375ac 8f5             | 
375ac 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
375b0 8f6 01 58 86 F1 | 	 	sub     t6,#1
375b4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
375b8 8f8             | 
375b8 8f8 28 58 62 FD |                 setq   	t6
375bc 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
375c0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
375c4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
375c8 8fc 24 00 90 AD |         if_z    jmp #p898
375cc 8fd             |          
375cc 8fd             |         
375cc 8fd 70 5F 06 F6 |                 mov  t9,#368
375d0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
375d4 8ff             | 
375d4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
375d8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
375dc 901 FF FF 7F FF 
375e0 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
375e4 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
375e8 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
375ec 905 2D 01 00 F5 |                 and 0-0, t7
375f0 906             |                
375f0 906             | 
375f0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
375f4 907 E5 E0 7A FA |                 wmlong 368,t3				
375f8 908             |                 
375f8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
375fc 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
37600 90a 2D 00 64 FD |                 ret
37604 90b             | 	
37604 90b             | 	
37604 90b             |                
37604 90b             |  
37604 90b             | '' -------------- Graphics line ------------------------------------------------------------
37604 90b             |  
37604 90b             | 
37604 90b             | '' consts and vars
37604 90b             | 
37604 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
37608 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3760c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
37610 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
37614 90f             | 
37614 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
37618 910             | 
37618 910             | '------ these longs will be set by setmode function
37618 910             | 
37618 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3761c 911 00 00 00 00 | m_sn            long    0        'sync
37620 912 00 00 00 00 | m_bv            long    0        'blanks before visible
37624 913 00 00 00 00 | m_vi            long    0        'visible pixels #
37628 914             | 'm_border        long    0        'left/right borders
37628 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3762c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
37630 916 00 00 00 00 | i_downporch     long    0        'down porch lines
37634 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
37638 918 00 00 00 00 | i_totalvis      long    0
3763c 919             | 
3763c 919             | '-------------------------------------
3763c 919             |  
3763c 919 00 00 00 00 | linenum         long    0
37640 91a 00 00 00 00 | frames          long    0
37644 91b 00 00 00 00 | dlinum long 0
37648 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3764c 91d             | 
3764c 91d 00 00 00 00 | vblankptr       long    0
37650 91e 00 00 00 00 | modeptr         long    0
37654 91f 00 00 00 00 | paletteptr      long    0
37658 920 00 00 00 00 | dlptr           long    0
3765c 921 01 00 00 00 | hbase           long    1
37660 922 00 00 00 00 | mailbox         long    0
37664 923 00 00 00 00 | spriteptr          long 0
37668 924             | 
37668 924 00 00 00 00 | cmd             long    0
3766c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
37670 926 00 04 00 00 | buf2            long    1024
37674 927 01 00 00 00 | dlptr2          long    1
37678 928 01 00 00 00 | dl              long    1
3767c 929             | 
3767c 929 00 00 00 00 | buf1c long 0
37680 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
37684 92b 01 00 00 00 | framebuf2       long    1
37688 92c 01 00 00 00 | hsync0          long    1
3768c 92d 01 00 00 00 | hsync1          long    1
37690 92e             | 
37690 92e 01 00 00 00 | t1              long    1
37694 92f 00 00 00 00 | t2 long 0
37698 930 00 00 00 00 | t3 long 0
3769c 931 00 00 00 00 | t4 long 0
376a0 932             | 
376a0 932 00 00 00 00 | rcnt            long    0  'dl repeat count
376a4 933 00 00 00 00 | rcnt2           long    0
376a8 934 00 00 00 00 | rcnt2a          long    0
376ac 935 00 00 00 00 | roffset         long    0
376b0 936 00 00 00 00 | rdl             long    0  'dl repeat line
376b4 937 00 00 00 00 | dlc             long    0  'dl command
376b8 938             | 
376b8 938 FF FF FF FF | affffffff       long    $ffffffff
376bc 939 00 00 00 00 | sprite1pointer long 0
376c0 93a 00 00 00 00 | sprite1xy      long 0
376c4 93b 00 00 00 00 | sprite1wh      long 0
376c8 93c 00 00 00 00 | sprite2pointer long 0
376cc 93d 00 00 00 00 | sprite2xy      long 0
376d0 93e 00 00 00 00 | sprite2wh      long 0
376d4 93f 00 00 00 00 | sprite3pointer long 0
376d8 940 00 00 00 00 | sprite3xy      long 0
376dc 941 00 00 00 00 | sprite3wh      long 0
376e0 942 00 00 00 00 | sprite4pointer long 0
376e4 943 00 00 00 00 | sprite4xy      long 0
376e8 944 00 00 00 00 | sprite4wh      long 0
376ec 945 00 00 00 00 | sprite5pointer long 0
376f0 946 00 00 00 00 | sprite5xy      long 0
376f4 947 00 00 00 00 | sprite5wh      long 0
376f8 948 00 00 00 00 | sprite6pointer long 0
376fc 949 00 00 00 00 | sprite6xy      long 0
37700 94a 00 00 00 00 | sprite6wh      long 0
37704 94b 00 00 00 00 | sprite7pointer long 0
37708 94c 00 00 00 00 | sprite7xy      long 0
3770c 94d 00 00 00 00 | sprite7wh      long 0
37710 94e 00 00 00 00 | sprite8pointer long 0
37714 94f 00 00 00 00 | sprite8xy      long 0
37718 950 00 00 00 00 | sprite8wh      long 0
3771c 951 00 00 00 00 | sprite9pointer long 0
37720 952 00 00 00 00 | sprite9xy      long 0
37724 953 00 00 00 00 | sprite9wh      long 0
37728 954 00 00 00 00 | sprite10pointer long 0
3772c 955 00 00 00 00 | sprite10xy      long 0
37730 956 00 00 00 00 | sprite10wh      long 0
37734 957 00 00 00 00 | sprite11pointer long 0
37738 958 00 00 00 00 | sprite11xy      long 0
3773c 959 00 00 00 00 | sprite11wh      long 0
37740 95a 00 00 00 00 | sprite12pointer long 0
37744 95b 00 00 00 00 | sprite12xy      long 0
37748 95c 00 00 00 00 | sprite12wh      long 0
3774c 95d 00 00 00 00 | sprite13pointer long 0
37750 95e 00 00 00 00 | sprite13xy      long 0
37754 95f 00 00 00 00 | sprite13wh      long 0
37758 960 00 00 00 00 | sprite14pointer long 0
3775c 961 00 00 00 00 | sprite14xy      long 0
37760 962 00 00 00 00 | sprite14wh      long 0
37764 963 00 00 00 00 | sprite15pointer long 0
37768 964 00 00 00 00 | sprite15xy      long 0
3776c 965 00 00 00 00 | sprite15wh      long 0
37770 966 00 00 00 00 | sprite16pointer long 0
37774 967 00 00 00 00 | sprite16xy      long 0
37778 968 00 00 00 00 | sprite16wh      long 0
3777c 969 00 00 00 00 | sprite17pointer long 0
37780 96a 00 00 00 00 | sprite17xy      long 0
37784 96b 00 00 00 00 | sprite17wh      long 0
37788 96c 00 00 00 00 | sprite18pointer long 0
3778c 96d 00 00 00 00 | sprite18xy      long 0
37790 96e 00 00 00 00 | sprite18wh      long 0
37794 96f 00 00 00 00 | spritenum long 0
37798 970             | 
37798 970 00 00 00 00 | spriteline long 0
3779c 971 84 03 00 00 | sprite_x long 900
377a0 972 00 00 00 00 | sprite_y long 0
377a4 973 10 00 00 00 | sprite_w long 16
377a8 974 40 00 00 00 | sprite_h long 64
377ac 975 00 00 00 00 | l2 long 0
377b0 976 00 00 00 00 | t5 long 0
377b4 977 00 00 00 00 | t6 long 0
377b8 978 00 00 00 00 | t7 long 0
377bc 979 00 00 00 00 | t8 long 0
377c0 97a 00 00 00 00 | t9 long 0
377c4 97b 00 00 00 00 | preloadaddr long 0
377c8 97c 00 00 00 00 | preloadlineaddr long 0
377cc 97d 00 04 00 00 | a1024 long 1024
377d0 97e             | 
377d0 97e E0 03 00 00 | aa long 992
377d4 97f FF 03 00 00 | a1023 long 1023
377d8 980 00 10 00 00 | a4096 long 4096
377dc 981             |  fit 368
377dc 981             | _psram_spin2_dat_
377dc 981 00 00 00 00 
      ...             
378d4 9bf 00 00 00 00 
378d8 9c0 00 00 00 00 |     listdata long 0[8*8]
378dc 9c1             |             orgh
378dc                 | 
378dc                 | ' driver state
378dc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
378e0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
378e4                 | 
378e4                 | ' delay profile
378e4     07 00 00 00 
378e8     00 CF 7B 05 
378ec     80 D1 F0 08 
378f0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
378f4     80 C4 60 0F 
378f8     80 39 7A 12 
378fc     40 2D D9 13 
37900     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
37904                 | 
37904                 | ' data to be passed to driver when starting it
37904                 | startupData
37904     00 00 00 00 |     long    0           ' current frequency
37908     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3790c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
37910     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
37914     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
37918     24 79 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3791c     A4 79 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
37920     C4 79 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
37924                 | 
37924                 | ' data for memory
37924                 | deviceData
37924                 |     ' 16 bank parameters follow (16MB per bank)
37924     00 00 00 00 
      ...             
3795c     00 00 00 00 
37960     00 00 00 00 |     long    0[16]                               ' banks 0-15
37964                 |     ' 16 banks of pin parameters follow
37964     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
37968     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3796c     FF FF FF FF 
      ...             
3799c     FF FF FF FF 
379a0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
379a4                 | 
379a4                 | ' data for COG polling
379a4                 | qosData 
379a4     00 00 FF FF 
379a8     00 00 FF FF 
379ac     00 00 FF FF 
379b0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
379b4     00 00 FF FF 
379b8     00 00 FF FF 
379bc     00 00 FF FF 
379c0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
379c4                 |     
379c4                 | ' mailbox storage
379c4                 | 
379c4                 | mailboxes
379c4     00 00 00 00 
      ...             
37a1c     00 00 00 00 
37a20     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
37a24                 | 	alignl
37a24                 | _psram16drv_spin2_dat_
37a24                 |                             orgh
37a24     00 00 00 00 
      ...             
37a3c     00 00 00 00 
37a40     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
37a44                 | 
37a44                 | driver_start
37a44                 |                             org
37a44 000             | '..................................................................................................
37a44 000             | ' Memory layout for COG RAM once operational:
37a44 000             | '
37a44 000             | '  COG RAM address      Usage
37a44 000             | '  ---------------      ----
37a44 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
37a44 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
37a44 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
37a44 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
37a44 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
37a44 000             | '  ~$198-$1F3           State and register variables
37a44 000             | '
37a44 000             | ' Also during driver COG startup:
37a44 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
37a44 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
37a44 000             | '..................................................................................................
37a44 000             |                             
37a44 000             | ' Mailbox storage after vector initialization
37a44 000             | 
37a44 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
37a48 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
37a4c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
37a50 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
37a54 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
37a58 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
37a5c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
37a60 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
37a64 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
37a68 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
37a6c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
37a70 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
37a74 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
37a78 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
37a7c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
37a80 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
37a84 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
37a88 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
37a8c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
37a90 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
37a94 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
37a98 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
37a9c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
37aa0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
37aa4 018             | 
37aa4 018             | ' Mailbox parameter addresses per COG once patched
37aa4 018             |                             
37aa4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
37aa8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
37aac 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
37ab0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
37ab4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
37ab8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
37abc 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
37ac0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
37ac4 020             | 
37ac4 020             | '..................................................................................................
37ac4 020             | ' Per COG request and state setup and service branching
37ac4 020             |         
37ac4 020             | cog0                 
37ac4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
37ac8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
37acc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
37ad0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
37ad4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37ad8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37adc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
37ae0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
37ae4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
37ae8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37aec 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37af0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
37af4 02c             | cog1                        
37af4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
37af8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
37afc 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
37b00 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
37b04 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37b08 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37b0c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
37b10 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
37b14 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
37b18 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37b1c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37b20 037 33 CA 63 FD |                             execf   request-0               'jump to service
37b24 038             | cog2                         
37b24 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
37b28 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
37b2c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
37b30 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
37b34 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37b38 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37b3c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
37b40 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
37b44 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
37b48 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37b4c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37b50 043 33 CA 63 FD |                             execf   request-0               'jump to service
37b54 044             | cog3                        
37b54 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
37b58 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
37b5c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
37b60 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
37b64 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37b68 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37b6c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
37b70 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
37b74 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
37b78 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37b7c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37b80 04f 33 CA 63 FD |                             execf   request-0               'jump to service
37b84 050             | cog4                        
37b84 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
37b88 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
37b8c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
37b90 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
37b94 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37b98 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37b9c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
37ba0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
37ba4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
37ba8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37bac 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37bb0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
37bb4 05c             | cog5                        
37bb4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
37bb8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
37bbc 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
37bc0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
37bc4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37bc8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37bcc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
37bd0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
37bd4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
37bd8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37bdc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37be0 067 33 CA 63 FD |                             execf   request-0               'jump to service
37be4 068             | cog6                        
37be4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
37be8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
37bec 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
37bf0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
37bf4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37bf8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37bfc 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
37c00 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
37c04 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
37c08 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37c0c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37c10 073 33 CA 63 FD |                             execf   request-0               'jump to service
37c14 074             | cog7                        
37c14 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
37c18 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
37c1c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
37c20 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
37c24 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37c28 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37c2c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
37c30 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
37c34 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
37c38 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37c3c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37c40 07f 33 CA 63 FD |                             execf   request-0               'jump to service
37c44 080             |                             fit     128
37c44 080             | 
37c44 080             |                             fit     128
37c44 080             | pad                         long    0[128-$]                'align init code to $80
37c44 080             | 
37c44 080             | '..................................................................................................
37c44 080             | 
37c44 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
37c44 080             | 
37c44 080             | init                        
37c44 080             |                             ' get driver scratch long address in hub
37c44 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
37c48 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
37c4c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
37c50 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
37c54 084             |                     
37c54 084             |                             ' read in the additional LUT RAM code
37c54 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
37c58 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
37c5c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
37c60 087             | 
37c60 087             |                             ' read the startup parameters
37c60 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
37c64 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
37c68 089             | 
37c68 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
37c68 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
37c6c 08a             | 
37c6c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
37c70 08b 01 00 00 5F 
37c74 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
37c78 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
37c7c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
37c80 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
37c84 090             | 
37c84 090             |                             ' setup data pin modes and data bus pin group in streamer commands
37c84 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
37c88 091 01 00 00 FF 
37c8c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
37c90 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
37c94 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
37c98 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
37c9c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
37ca0 097 08 DE 47 F5 |                             or      a, #8
37ca4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
37ca8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
37cac 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
37cb0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
37cb4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
37cb8 09d 01 DE 07 F1 |                             add     a, #1
37cbc 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
37cc0 09f             |  
37cc0 09f             |                             ' setup device control pin states
37cc0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
37cc4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
37cc8 0a1 01 00 00 FF 
37ccc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
37cd0 0a3             | 
37cd0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
37cd4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
37cd8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
37cdc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
37ce0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
37ce4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
37ce8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
37cec 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
37cf0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
37cf4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
37cf8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
37cfc 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
37d00 0af             | pinloop
37d00 0af             |                             ' generate minimum CE high time before access
37d00 0af A1 07 00 FF 
37d04 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
37d08 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
37d0c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
37d10 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
37d14 0b4 1F DE 63 FD |                             waitx   a                       'delay
37d18 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
37d1c 0b6             | 
37d1c 0b6             |                             ' setup the COG mailboxes and addresses 
37d1c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
37d20 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
37d24 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
37d28 0b9             | 
37d28 0b9 28 2E 64 FD |                             setq    #24-1
37d2c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
37d30 0bb             | 
37d30 0bb             |                             ' setup the polling loop for active COGs 
37d30 0bb 01 C2 63 FD |                             cogid   id
37d34 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
37d38 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
37d3c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
37d40 0bf 0A F0 07 F6 |                             mov     ptra, #10
37d44 0c0 E1 F1 03 FA |                             mul     ptra, id
37d48 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
37d4c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
37d50 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
37d54 0c4 03 C2 07 FA |                             mul     id, #3
37d58 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
37d5c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
37d60 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
37d64 0c8 D8 01 B0 FD |                             call    #reloadcogs
37d68 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
37d6c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
37d70 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
37d70 0cb D8 E5 B7 F9 |                             setd    d, #addr1
37d74 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
37d78 0cd 08 04 DC FC |                             rep     #2, #8
37d7c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
37d80 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
37d84 0d0             | 
37d84 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
37d84 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
37d84 0d0 01 C2 63 FD |                             cogid   id
37d88 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
37d8c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
37d90 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
37d94 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
37d98 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
37d9c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
37da0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
37da4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
37da8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
37dac 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
37db0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
37db4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
37db8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
37dbc 0de A5 E5 03 F1 |                             add     d, const512
37dc0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
37dc4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
37dc8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
37dcc 0e2             |                             
37dcc 0e2             |                             ' setup register values for control vector loop setup after we return
37dcc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
37dd0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
37dd4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
37dd8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
37ddc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
37de0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
37de4 0e8 D0 C3 8F F9 |                             altd    id, #id0
37de8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
37dec 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
37df0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
37df4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
37df8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
37dfc 0ee             |  
37dfc 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
37e00 0ef 07 CA 07 F5 |                             and     request, #7
37e04 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
37e08 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
37e0c 0f2             |                             fit     $100                    'ensure all init code fits this space
37e0c 0f2             | 
37e0c 0f2             |                             fit     $100                    'ensure all init code fits this space
37e0c 0f2             | 
37e0c 0f2 00 00 00 00 
      ...             
37e3c 0fe 00 00 00 00 
37e40 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
37e44 100             | 
37e44 100             | '..................................................................................................
37e44 100             | ' Error result handling and COG notification of request completion
37e44 100             | 
37e44 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
37e48 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
37e4c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
37e50 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
37e54 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
37e58 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
37e5c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
37e60 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
37e64 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
37e68 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
37e6c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
37e70 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
37e74 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
37e78 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
37e7c 10e             | ' Poller re-starts here after a COG is serviced
37e7c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
37e80 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
37e84 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
37e88 111             | ' Main dynamic polling loop repeats until a request arrives
37e88 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
37e8c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
37e90 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
37e94 114             | 
37e94 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
37e98 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
37e9c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
37ea0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
37ea4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
37ea8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
37eac 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
37eb0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
37eb4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
37eb8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
37ebc 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
37ec0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
37ec4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
37ec8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
37ecc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
37ed0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
37ed4 124             | 
37ed4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
37ed8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
37edc 126             |  
37edc 126             | '..................................................................................................
37edc 126             | ' List handler                               
37edc 126             | 
37edc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
37ee0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
37ee4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
37ee8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
37eec 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
37ef0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
37ef4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
37ef8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
37efc 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
37f00 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
37f04 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
37f08 131 33 00 60 FD |                             execf   0-0                     'process the request 
37f0c 132             | 
37f0c 132             | '..................................................................................................
37f0c 132             | ' Restoring per COG state and resuming where we left off
37f0c 132             | 
37f0c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
37f10 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
37f14 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
37f18 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
37f1c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
37f20 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
37f24 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
37f28 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
37f2c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
37f30 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
37f34 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
37f38 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
37f3c 13e             |                    
37f3c 13e             | '..................................................................................................
37f3c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
37f3c 13e             | 
37f3c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
37f40 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
37f44 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
37f48 141 D0 DF B7 F9 |                             setd    a, #id0
37f4c 142 D8 DF BF F9 |                             sets    a, #addr1
37f50 143 FE FF FF FF 
37f54 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
37f58 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
37f5c 146 3F DE A7 F9 |                             alti    a, #%111_111 
37f60 147 00 00 F0 F9 |                             muxq    0-0, 0-0
37f64 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
37f68 149 01 E2 63 FD |                             cogid   c
37f6c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
37f70 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
37f74 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
37f78 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
37f7c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
37f80 14f 00 E0 03 F6 |                             mov     b, 0-0
37f84 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
37f88 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
37f8c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
37f90 153 0C 00 90 AD |             if_z            jmp     #excluded               
37f94 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
37f98 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
37f9c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
37fa0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
37fa4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
37fa8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
37fac 15a             | 
37fac 15a             | 'determine priority cogs and build instructions for the polling sequence
37fac 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
37fb0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
37fb4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
37fb8 15d             | 
37fb8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
37fbc 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
37fc0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
37fc4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
37fc8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
37fcc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
37fd0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
37fd4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
37fd8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
37fdc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
37fe0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
37fe4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
37fe8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
37fec 16a             | endprioloop
37fec 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
37ff0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
37ff4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
37ff8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
37ffc 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
38000 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
38004 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
38008 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3800c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
38010 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
38014 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
38018 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3801c 176             | 
3801c 176             | ' populate the round robin COG polling instructions
3801c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
38020 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
38024 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
38028 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3802c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
38030 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
38034 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
38038 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3803c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
38040 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
38044 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
38048 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3804c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
38050 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
38054 184             | '..................................................................................................
38054 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
38054 184             | 
38054 184             | set_latency                                                 '            (a) set latency
38054 184             | get_latency                                                 '            (b) get latency
38054 184             | set_burst                                                   '            (c) set burst size of bank
38054 184             | get_burst                                                   '            (d) get burst size of bank
38054 184             |                                                             '            (e) dump state
38054 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
38058 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3805c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
38060 187             |                                                             ' | | | | e  account for following AUGS
38060 187 04 00 00 FF 
38064 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
38068 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3806c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
38070 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
38074 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
38078 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3807c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
38080 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
38084 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
38088 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3808c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
38090 193             | 
38090 193             | '..................................................................................................
38090 193             | ' Misc EXECF code
38090 193             | 
38090 193 33 72 63 FD | start_read_exec             execf   newburstr
38094 194 33 7C 63 FD | start_write_exec            execf   resumewrites
38098 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3809c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
380a0 197             | 
380a0 197             | '..................................................................................................
380a0 197             | ' Variables
380a0 197             | 
380a0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
380a4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
380a8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
380ac 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
380b0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
380b4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
380b8 19d             | 
380b8 19d 00 00 00 80 | xfreq1          long    $80000000
380bc 19e 00 00 00 40 | xfreq2          long    $40000000
380c0 19f 03 00 00 00 | delay           long    3
380c4 1a0             | 
380c4 1a0             | lutcodeaddr                 
380c4 1a0             | startupparams
380c4 1a0             | excludedcogs                                    'careful: shared register use!
380c4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
380c8 1a1 00 00 00 00 | flags           long    0
380cc 1a2             | mask                                            'careful: shared register use!
380cc 1a2 00 00 00 00 | resetmaskA      long    0
380d0 1a3             | limit                                           'careful: shared register use!
380d0 1a3 00 00 00 00 | resetmaskB      long    0
380d4 1a4 00 00 00 00 | datapins        long    0
380d8 1a5             | const512                                        'careful: shared register use!
380d8 1a5 00 00 00 00 | devicelist      long    0
380dc 1a6 00 00 00 00 | coglist         long    0
380e0 1a7 00 00 00 00 | mbox            long    0 
380e4 1a8             | 
380e4 1a8             | clkpin                                          'shared with code patched during init
380e4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
380e8 1a9             | cspin                                           'shared with code patched during init
380e8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
380ec 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
380f0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
380f4 1ac 01 00 00 00 | clkdelay        long    1
380f8 1ad 00 00 00 00 | regdatabus      long    0
380fc 1ae             | 
380fc 1ae 10 00 00 00 | deviceaddr      long    $10
38100 1af             | rrcounter
38100 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
38104 1b0             | 
38104 1b0             | ' jump addresses for the per COG handlers
38104 1b0 20 00 00 00 | cog0_handler    long    cog0
38108 1b1 2C 00 00 00 | cog1_handler    long    cog1
3810c 1b2 38 00 00 00 | cog2_handler    long    cog2
38110 1b3 44 00 00 00 | cog3_handler    long    cog3
38114 1b4 50 00 00 00 | cog4_handler    long    cog4
38118 1b5 5C 00 00 00 | cog5_handler    long    cog5
3811c 1b6 68 00 00 00 | cog6_handler    long    cog6
38120 1b7 74 00 00 00 | cog7_handler    long    cog7
38124 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
38128 1b9             | 
38128 1b9             | ' EXECF sequences
38128 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3812c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
38130 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
38134 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
38138 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3813c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
38140 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
38144 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
38144 1c0             | 
38144 1c0             | 
38144 1c0             | ' SKIPF sequences
38144 1c0             | skiptable
38144 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
38148 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3814c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
38150 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
38154 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
38158 1c5 00 00 00 00 | pattern2        long    0
3815c 1c6 00 00 00 00 | pattern3        long    0
38160 1c7 77 02 00 00 | singlelong      long    %1001110111  
38164 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
38168 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3816c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
38170 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
38174 1cc             | 
38174 1cc             | ' LUT RAM address values
38174 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
38178 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3817c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
38180 1cf F6 02 00 00 | noread          long    noread_lut
38184 1d0             | 
38184 1d0 00 00 00 00 | id0             long    0
38188 1d1 01 00 00 00 | id1             long    1
3818c 1d2 02 00 00 00 | id2             long    2
38190 1d3 03 00 00 00 | id3             long    3
38194 1d4 04 00 00 00 | id4             long    4
38198 1d5 05 00 00 00 | id5             long    5
3819c 1d6 06 00 00 00 | id6             long    6
381a0 1d7 07 00 00 00 | id7             long    7
381a4 1d8             | 
381a4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
381a4 1d8             | 'and COG updates and need to follow immediately after id0-id7
381a4 1d8 00 00 00 00 | addr1           long    0
381a8 1d9 00 00 00 00 | hubdata         long    0
381ac 1da 00 00 00 00 | count           long    0
381b0 1db 00 00 00 00 | addr2           long    0
381b4 1dc 00 00 00 00 | total           long    0
381b8 1dd 00 00 00 00 | offset1         long    0
381bc 1de 00 00 00 00 | offset2         long    0
381c0 1df 00 00 00 00 | link            long    0
381c4 1e0             | 
381c4 1e0             | burstwrite                                      'note shared register use during init
381c4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
381c8 1e1 00 00 00 00 | id              long    0
381cc 1e2             | 
381cc 1e2 00 00 00 00 | header          long    0
381d0 1e3 00 00 00 00 | trailer         long    0
381d4 1e4 00 00 00 00 | cmdaddr         long    0
381d8 1e5 00 00 00 00 | request         long    0
381dc 1e6 00 00 00 00 | rrlimit         long    0
381e0 1e7 00 00 00 00 | pinconfig       long    0
381e4 1e8 00 00 00 00 | clks            long    0
381e8 1e9 00 00 00 00 | resume          long    0
381ec 1ea 00 00 00 00 | orighubsize     long    0
381f0 1eb 00 00 00 00 | wrclks          long    0
381f4 1ec             | 
381f4 1ec 00 00 00 00 | pattern         long    0
381f8 1ed 00 00 00 00 | hubscratch      long    0
381fc 1ee 00 10 00 00 | val4k           long    4096
38200 1ef             | 
38200 1ef             | ' temporary general purpose regs
38200 1ef 00 00 00 00 | a               long    0
38204 1f0 00 00 00 00 | b               long    0
38208 1f1 00 00 00 00 | c               long    0
3820c 1f2 00 00 00 00 | d               long    0
38210 1f3             |                 fit     502
38210 1f3             | 
38210 1f3             |                 fit     502
38210 1f3             | 
38210 1f3             | '..................................................................................................
38210 1f3             | 
38210 1f3             |             orgh
38210                 | 
38210                 | lut_code
38210                 | 'HW init code up to 80 longs
38210                 | 
38210                 | '..................................................................................................
38210                 | ' Memory layout for LUT RAM once operational:
38210                 | '
38210                 | '  LUT RAM address      Usage
38210                 | '  ---------------      ----
38210                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
38210                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
38210                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
38210                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
38210                 | '
38210                 | ' Also during driver COG startup:
38210                 | ' $230-$24F is used for HW init setup
38210                 | ' $250-$26F is used as temporary vector storage 
38210                 | '..................................................................................................
38210                 | 
38210                 |                 org $230    
38210 230             | 
38210 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
38210 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
38214 231 24 16 60 FD |                             pollxfi
38218 232 FF AA 2A FF 
3821c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
38220 234 28 00 B0 FD |                             call    #sendqspi
38224 235 07 F8 07 FF 
38228 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3822c 237 28 00 B0 FD |                             call    #sendspi
38230 238 F8 07 78 FF 
38234 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
38238 23a 1C 00 B0 FD |                             call    #sendspi
3823c 23b 7F 78 78 FF 
38240 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
38244 23d 10 00 B0 FD |                             call    #sendspi 
38248 23e 2D 00 64 FD |                             ret
3824c 23f             | 
3824c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
38250 240 32 0C 64 FD |                             skipf   #%110
38254 241 9C EF 03 F6 |                             mov     pb, xsendimm
38258 242             | 
38258 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3825c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
38260 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
38264 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
38268 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3826c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
38270 248 24 36 60 FD |                             waitxfi                         'wait for the completion
38274 249 50 48 63 FD |                             fltl    datapins                'float data bus
38278 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3827c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
38280 24c             | 
38280 24c 00 00 00 00 
38284 24d 00 00 00 00 
38288 24e 00 00 00 00 
3828c 24f 00 00 00 00 |                 long    0[$270-32-$]
38290 250             |                 fit     $270-32  ' keep room for 32 vector longs
38290 250             |     
38290 250             |                 fit     $270-32  ' keep room for 32 vector longs
38290 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
38290 250             | rw_vect ' PSRAM jump vectors
38290 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38294 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38298 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3829c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
382a0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
382a4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
382a8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
382ac 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
382b0 258             | ro_vect ' R/O PSRAM jump vectors
382b0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
382b4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
382b8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
382bc 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
382c0 25c 00 01 00 00 |                 long    unsupported
382c4 25d 00 01 00 00 |                 long    unsupported
382c8 25e 00 01 00 00 |                 long    unsupported
382cc 25f 00 01 00 00 |                 long    unsupported
382d0 260             | ctrl_vect ' Control jump vectors
382d0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
382d4 261 00 01 00 00 |                 long    unsupported
382d8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
382dc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
382e0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
382e4 265 00 01 00 00 |                 long    unsupported
382e8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
382ec 267 3E 01 00 00 |                 long    reconfig 
382f0 268             | no_vect ' Invalid bank jump vectors
382f0 268 01 01 00 00 |                 long    invalidbank
382f4 269 01 01 00 00 |                 long    invalidbank
382f8 26a 01 01 00 00 |                 long    invalidbank
382fc 26b 01 01 00 00 |                 long    invalidbank
38300 26c 01 01 00 00 |                 long    invalidbank
38304 26d 01 01 00 00 |                 long    invalidbank
38308 26e 01 01 00 00 |                 long    invalidbank
3830c 26f 01 01 00 00 |                 long    invalidbank
38310 270             |                 fit     $270
38310 270             | 
38310 270             |                 fit     $270
38310 270             | '..................................................................................................
38310 270             | ' PSRAM READS
38310 270             |                                                             ' a b c d e f
38310 270             |                                                             ' B W L B R L  (a) byte read
38310 270             |                                                             ' Y O O U E O  (b) word read
38310 270             |                                                             ' T R N R S C  (c) long read
38310 270             |                                                             ' E D G S U K  (d) new burst read
38310 270             |                                                             '       T M E  (e) resumed sub-burst
38310 270             |                                                             '         E D  (f) locked sub-burst
38310 270             | 
38310 270             | 
38310 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
38314 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
38318 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3831c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
38320 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
38324 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
38328 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3832c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
38330 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
38334 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
38338 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3833c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
38340 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
38344 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
38348 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3834c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
38350 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
38354 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
38358 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3835c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
38360 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
38364 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
38368 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3836c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
38370 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
38374 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
38378 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3837c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
38380 28c             | 
38380 28c             |                             ' fall through to read bursts
38380 28c             |                         
38380 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
38380 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
38384 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
38388 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3838c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38390 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
38394 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
38398 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3839c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
383a0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
383a4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
383a8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
383ac 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
383b0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
383b4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
383b8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
383bc 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
383c0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
383c4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
383c8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
383cc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
383d0 2a0 E8 D1 03 F1 |                             add     clks, clks
383d4 2a1             | readcommon
383d4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
383d8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
383dc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
383e0 2a4             | 
383e0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
383e4 2a5 69 C8 63 FD |                             rev     cmdaddr
383e8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
383ec 2a7 61 C8 63 FD |                             mergeb  cmdaddr
383f0 2a8             | 
383f0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
383f4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
383f8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
383f8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
383fc 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
38400 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
38404 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
38408 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
38408 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3840c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
38410 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
38414 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
38418 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3841c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
38420 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
38420 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
38424 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
38428 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3842c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
38430 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
38434 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
38438 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3843c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
38440 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
38444 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
38448 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3844c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
38450 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
38454 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
38458 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
38458 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3845c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
38460 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
38464 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
38468 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3846c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
38470 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
38474 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
38478 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3847c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
38480 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
38484 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
38488 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3848c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
38490 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
38494 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
38498 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3849c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
384a0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
384a4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
384a8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
384ac 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
384b0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
384b4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
384b8 2da 10 03 90 FD |                             jmp     #writecommon
384bc 2db             | 
384bc 2db             | '..................................................................................................
384bc 2db             | ' Burst continuation testing
384bc 2db             | 
384bc 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
384c0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
384c4 2dd             | continue_read_lut          
384c4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
384c8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
384cc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
384d0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
384d4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
384d8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
384dc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
384e0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
384e4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
384e8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
384ec 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
384f0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
384f4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
384f8 2ea             | 
384f8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
384fc 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
38500 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
38504 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
38508 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3850c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
38510 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
38514 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
38518 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3851c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
38520 2f4 2A 1C 66 0D |             _ret_           push    #poller
38524 2f5             | 
38524 2f5             | 
38524 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
38528 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
38528 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3852c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
38530 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
38534 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
38538 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3853c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
38540 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
38544 2fd 2D 00 64 FD |                             ret                             ' | continue processing
38548 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3854c 2ff             | '..................................................................................................
3854c 2ff             | ' Completion of requests
3854c 2ff             | 
3854c 2ff             | complete_rw_lut             
3854c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
38550 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
38554 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
38558 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3855c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
38560 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
38564 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
38568 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3856c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
38570 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
38574 309 32 62 64 AD |             if_z            skipf   #%110001
38578 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3857c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
38580 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
38584 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
38588 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3858c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
38590 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
38594 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
38598 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3859c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
385a0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
385a4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
385a8 316             |                                                             ' skipcase (a) gfx copy to/from hub
385a8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
385a8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
385a8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
385ac 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
385b0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
385b4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
385b8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
385bc 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
385c0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
385c4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
385c8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
385cc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
385d0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
385d4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
385d8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
385dc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
385e0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
385e4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
385e8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
385ec 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
385f0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
385f4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
385f8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
385fc 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
38600 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
38604 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
38608 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3860c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
38610 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
38614 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
38618 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3861c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
38620 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
38624 335 DF B7 03 A6 |             if_z            mov     addr2, link
38628 336 34 FF 9F AD |             if_z            jmp     #checknext
3862c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
38630 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
38634 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
38638 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3863c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
38640 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
38644 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
38648 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3864c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
38650 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
38654 341             | 
38654 341             | '..................................................................................................
38654 341             | ' PSRAM WRITES
38654 341             |                                                             '  a b c d e f g h
38654 341             | 
38654 341             |                                                             '  B W L F B R L L (a) byte write(s)
38654 341             |                                                             '  Y O O I U E O O (b) word write(s)
38654 341             |                                                             '  T R N L R S C C (c) long write(s)
38654 341             |                                                             '  E D G L S U K K (d) resumed fill
38654 341             |                                                             '          T M E E (e) new burst write
38654 341             |                                                             '            E D D (f) resumed burst
38654 341             |                                                             '              F B (g) locked fill
38654 341             |                                                             '              I U (h) locked burst write
38654 341             |                                                             '              L R 
38654 341             |                                                             '              L S 
38654 341             |                                                             '                T 
38654 341             | 
38654 341             | w_single                   
38654 341             | w_fill_cont           
38654 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
38658 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3865c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
38660 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
38664 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
38668 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3866c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
38670 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
38674 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
38678 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3867c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
38680 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
38684 34d             |                ' disable call to r_resume_burst for single longs when z=0
38684 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
38688 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3868c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
38690 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
38694 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
38698 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3869c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
386a0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
386a4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
386a8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
386ac 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
386b0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
386b4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
386b8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
386bc 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
386c0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
386c4 35d             |         
386c4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
386c4 35d             |             '
386c4 35d             |             '  At least one of these 3 optional components will be sent
386c4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
386c4 35d             |             '     body - N x full longs of data
386c4 35d             |             '     trailer - last partial long of data
386c4 35d             |             '
386c4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
386c4 35d             |             '
386c4 35d             |             'Case    Type                           Sends
386c4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
386c4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
386c4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
386c4 35d             |             ' 4)     Multiple long fill             body only
386c4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
386c4 35d             | 
386c4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
386c4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
386c8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
386cc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
386d0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
386d4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
386d8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
386dc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
386e0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
386e4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
386e8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
386ec 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
386f0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
386f4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
386f8 36a             |                             
386f8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
386fc 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
38700 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
38704 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
38708 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3870c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
38710 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
38714 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
38718 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3871c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
38720 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
38724 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
38728 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3872c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
38730 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
38734 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
38738 37a             | 
38738 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3873c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
38740 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
38744 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
38748 37e             |                  
38748 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3874c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
38750 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
38754 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
38758 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3875c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
38760 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
38764 385             | 
38764 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
38768 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3876c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
38770 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
38774 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
38778 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3877c 38b             | 
3877c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3877c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
38780 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
38784 38d 2A B0 63 FD |                             push    addr1                   'save address
38788 38e             | 
38788 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
38788 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3878c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
38790 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
38794 391             |             
38794 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
38798 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3879c 393 2B B0 63 FD |                             pop     addr1                   'restore address
387a0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
387a4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
387a8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
387ac 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
387b0 398             | 
387b0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
387b4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
387b8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
387bc 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
387c0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
387c4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
387c8 39e             | 
387c8 39e             |                             'trailer is done
387c8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
387cc 39f             | 
387cc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
387d0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
387d4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
387d8 3a2             | 
387d8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
387dc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
387e0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
387e4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
387e8 3a6             |                             
387e8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
387ec 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
387f0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
387f4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
387f8 3aa             |                                                          
387f8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
387fc 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
38800 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
38804 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
38808 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3880c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
38810 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
38814 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
38818 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3881c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
38820 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
38824 3b5             |  
38824 3b5 59 52 63 FD |                             drvh    cspin
38828 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3882c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
38830 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
38834 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
38838 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3883c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
38840 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
38844 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
38848 3be EA E5 03 F6 |                             mov     d, orighubsize
3884c 3bf EF E5 63 F0 |                             shl     d, a
38850 3c0 F2 E3 83 F1 |                             sub     c, d
38854 3c1 DD E3 03 F1 |                             add     c, offset1
38858 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3885c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
38860 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
38864 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
38868 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3886c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
38870 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
38874 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
38878 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3887c 3cb BB D3 03 F6 |                             mov     resume, restorefill
38880 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
38884 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
38888 3ce 6C FC BF CD |             if_c            call    #yield
3888c 3cf 2D 00 64 FD |                             ret
38890 3d0             |                            
38890 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
38890 3d0             |                       '     rczl    pa                      'rotate left into address offset
38890 3d0             |                       '     rczl    c wcz                   'restore count and flags
38890 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
38894 3d1 02 EC 67 F0 |                             shl     pa, #2
38898 3d2 28 06 64 AD |             if_z            setq    #3
3889c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
388a0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
388a4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
388a8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
388ac 3d7             | 
388ac 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
388b0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
388b4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
388b8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
388bc 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
388c0 3dc             |                 fit 1024-32
388c0 3dc             |         
388c0 3dc             | 
388c0 3dc             | '..................................................................................................
388c0 3dc             | 
388c0 3dc             |                 fit 1024-32
388c0 3dc 00 00 00 00 
388c4 3dd 00 00 00 00 
388c8 3de 00 00 00 00 
388cc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
388d0 3e0             |                 org 1024-32
388d0 000             | 
388d0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
388d0 000 00 00 00 00 |                 long $0000
388d4 001 11 11 00 00 |                 long $1111
388d8 002 22 22 00 00 |                 long $2222
388dc 003 33 33 00 00 |                 long $3333
388e0 004 44 44 00 00 |                 long $4444
388e4 005 55 55 00 00 |                 long $5555
388e8 006 66 66 00 00 |                 long $6666
388ec 007 77 77 00 00 |                 long $7777
388f0 008 88 88 00 00 |                 long $8888
388f4 009 99 99 00 00 |                 long $9999
388f8 00a AA AA 00 00 |                 long $aaaa
388fc 00b BB BB 00 00 |                 long $bbbb
38900 00c CC CC 00 00 |                 long $cccc
38904 00d DD DD 00 00 |                 long $dddd
38908 00e EE EE 00 00 |                 long $eeee
3890c 00f FF FF 00 00 |                 long $ffff
38910 010             | 
38910 010             | 'masks
38910 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
38914 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
38918 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3891c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
38920 014             | 
38920 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
38924 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
38928 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3892c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
38930 018             | 
38930 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
38934 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
38938 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3893c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
38940 01c             | 
38940 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
38944 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
38948 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3894c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
38950 020             |         fit 1024
38950 020             | 
38950 020             |         fit 1024
38950 020             | 
38950 020             | '--------------------------------------------------------------------------------------------------
38950 020             |         orgh
38950                 | 
38950                 | gfxexpansion
38950                 |                             'simple line drawing graphics expansion of memory driver
38950                 |                             'jmp     #donerepeats                'just return for now
38950                 | 
38950     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
38954     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
38958     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3895c     DD E1 03 F6 |                             mov     b, offset1              'get error term
38960     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
38964     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
38968     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3896c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
38970     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
38974     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
38978     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3897c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
38980     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
38984     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
38988     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3898c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
38990     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
38994     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
38998     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3899c     DC E5 33 F9 |                             getword d, total, #0            'get line width
389a0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
389a4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
389a8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
389ac     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
389b0     C3 03 80 FD |                             jmp     #readmask               'continue filling
389b4                 | 	alignl
389b4                 | _usbnew_spin2_dat_
389b4                 |                 org     $000
389b4 000             | 
389b4 000             | usb_host_start
389b4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
389b8 001             | 
389b8 001 03 00 00 FF 
389bc 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
389c0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
389c4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
389c8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
389cc 006 29 70 63 FD |                 setq2   htmp
389d0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
389d4 008             | 
389d4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
389d8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
389dc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
389e0 00b             | 
389e0 00b             | '------------------------------------------------------------------------------
389e0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
389e0 00b             | ' special because the receiving function must not respond with either STALL or
389e0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
389e0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
389e0 00b             | ' corrupt packet, it must ignore the transaction
389e0 00b             | '------------------------------------------------------------------------------
389e0 00b             | ' On entry:
389e0 00b             | '   PTRA - start address of the SETUP data struct.
389e0 00b             | ' On exit:
389e0 00b             | '   retval - PID_ACK on success, otherwise error code.
389e0 00b             | '------------------------------------------------------------------------------
389e0 00b             | txn_setup
389e0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
389e4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
389e8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
389ec 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
389f0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
389f4 010             | .setup
389f4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
389f8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
389fc 012 2D 00 64 AD |         if_z    ret
38a00 013 7C 0B B0 FD |                 call    #retry_wait
38a04 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38a08 015 2D 00 64 AD |         if_z    ret
38a0c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
38a10 017 E0 FF 9F FD |                 jmp     #.setup
38a14 018             | 
38a14 018             | '------------------------------------------------------------------------------
38a14 018             | ' IN/INTERRUPT transaction.
38a14 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
38a14 018             | '------------------------------------------------------------------------------
38a14 018             | ' On entry:
38a14 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
38a14 018             | '     CRC(b19..23).
38a14 018             | ' On exit:
38a14 018             | '------------------------------------------------------------------------------
38a14 018             | txn_in
38a14 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
38a18 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
38a1c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
38a20 01b             | 
38a20 01b             |                 ' Fall through to urx_packet
38a20 01b             | 
38a20 01b             | '------------------------------------------------------------------------------
38a20 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
38a20 01b             | ' received are handshakes and IN DATAx.
38a20 01b             | '------------------------------------------------------------------------------
38a20 01b             | ' On entry:
38a20 01b             | ' On exit:
38a20 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
38a20 01b             | '     returned.
38a20 01b             | '------------------------------------------------------------------------------
38a20 01b             | urx_packet
38a20 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
38a24 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
38a28 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
38a2c 01e 1A 92 63 FD |                 getct   hct2
38a30 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
38a34 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
38a38 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
38a3c 022             | .wait_sop
38a3c 022 22 A7 8A FA |                 rdpin   urx, dm
38a40 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
38a44 024 08 00 90 CD |         if_c    jmp     #.get_pid
38a48 025 FC 25 CC FB |                 jnct2   #.wait_sop
38a4c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
38a50 027             | .get_pid
38a50 027 28 02 B0 FD |                 call    #urx_next
38a54 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
38a58 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
38a5c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
38a60 02b             | .chk_pid
38a60 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a64 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
38a68 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
38a6c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
38a70 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
38a74 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
38a78 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
38a7c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
38a80 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
38a84 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
38a88 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
38a8c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
38a90 037             | .ack_resend
38a90 037 22 A7 82 FA |                 rqpin   urx, dm
38a94 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
38a98 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
38a9c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
38aa0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
38aa4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
38aa8 03d             | .chk_eop
38aa8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38aac 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
38ab0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
38ab4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
38ab8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
38abc 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
38ac0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
38ac4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
38ac8 045 2D 00 64 FD |                 ret
38acc 046             | .idle
38acc 046 22 A7 82 FA |                 rqpin   urx, dm
38ad0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38ad4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
38ad8 049 2D 00 64 FD |                 ret
38adc 04a             | 
38adc 04a             | '------------------------------------------------------------------------------
38adc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
38adc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
38adc 04a             | ' if one is required.
38adc 04a             | '------------------------------------------------------------------------------
38adc 04a             | ' On entry:
38adc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
38adc 04a             | ' On exit:
38adc 04a             | '------------------------------------------------------------------------------
38adc 04a             | utx_token
38adc 04a 22 A7 82 FA |                 rqpin   urx, dm
38ae0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38ae4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
38ae8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
38aec 04e 34 0D B0 CD |         if_c    call    #utx_pre
38af0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
38af4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
38af8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
38afc 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
38b00 053             | .next_byte
38b00 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
38b04 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
38b08 055             | .wait
38b08 055 40 46 72 FD |                 testp   dp                      wc
38b0c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
38b10 057 23 03 08 FC |                 akpin   dp
38b14 058 22 A5 22 FC |                 wypin   utx, dm
38b18 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
38b1c 05a             | 
38b1c 05a             | '------------------------------------------------------------------------------
38b1c 05a             | ' SETUP/OUT/INTERRUPT transaction.
38b1c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
38b1c 05a             | '------------------------------------------------------------------------------
38b1c 05a             | ' On entry:
38b1c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
38b1c 05a             | '     CRC(b19..23).
38b1c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
38b1c 05a             | '   pkt_data - count of DATAx payload bytes to send.
38b1c 05a             | ' On exit:
38b1c 05a             | '------------------------------------------------------------------------------
38b1c 05a             | txn_out
38b1c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
38b20 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
38b24 05c 00 00 C0 FF 
38b28 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
38b2c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
38b30 05f             | 
38b30 05f             |                 ' Fall through to utx_data
38b30 05f             | 
38b30 05f             | '------------------------------------------------------------------------------
38b30 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
38b30 05f             | ' calculated while the data byte is being shifted out. Since data stage
38b30 05f             | ' success/fail is not determined until the status stage of the transaction,
38b30 05f             | ' this routine is only concerned about the current DATAx packet.
38b30 05f             | '------------------------------------------------------------------------------
38b30 05f             | ' On entry:
38b30 05f             | '   PTRA - hub start address of the data to read.
38b30 05f             | '   pkt_cnt - data payload size.
38b30 05f             | ' On exit:
38b30 05f             | '------------------------------------------------------------------------------
38b30 05f             | utx_data
38b30 05f 22 A7 82 FA |                 rqpin   urx, dm
38b34 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
38b38 061 F4 FF 9F CD |         if_c    jmp     #utx_data
38b3c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
38b40 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
38b44 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
38b48 065 D8 0C B0 CD |         if_c    call    #utx_pre
38b4c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
38b50 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
38b54 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
38b58 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
38b5c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
38b60 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
38b64 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
38b68 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
38b6c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
38b70 06f             | .read_byte
38b70 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
38b74 070 F0 00 B0 FD |                 call    #utx_byte
38b78 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
38b7c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
38b80 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
38b84 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
38b88 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
38b8c 076             | .send_crc
38b8c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
38b90 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
38b94 078 D0 00 B0 FD |                 call    #utx_byte
38b98 079 5D A5 EA F8 |                 getbyte utx, crc, #1
38b9c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
38ba0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
38ba4 07c             | 
38ba4 07c             | '------------------------------------------------------------------------------
38ba4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
38ba4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
38ba4 07c             | ' expects that the packet includes at least the CRC word.
38ba4 07c             | '
38ba4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
38ba4 07c             | ' was requested, which makes it difficult to determine where the data stops
38ba4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
38ba4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
38ba4 07c             | ' USB-16 expected residual value of 0xB001.
38ba4 07c             | '
38ba4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
38ba4 07c             | ' so the caller can verify IN success before writing the data to its final
38ba4 07c             | ' destination.
38ba4 07c             | '------------------------------------------------------------------------------
38ba4 07c             | ' On entry:
38ba4 07c             | '   pkt_data - max byte count expected to be in the packet.
38ba4 07c             | '   newb_flg - signals new byte ready when toggled.
38ba4 07c             | ' On exit:
38ba4 07c             | '   pkt_cnt - actual number of bytes read.
38ba4 07c             | '------------------------------------------------------------------------------
38ba4 07c             | urx_data
38ba4 07c F7 75 03 F6 |                 mov     htmp2, pb
38ba8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
38bac 07e 00 00 C0 FF 
38bb0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
38bb4 080 BA EF 03 F6 |                 mov     pb, htmp2
38bb8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
38bbc 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
38bc0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
38bc4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
38bc8 085             | .wait_byte
38bc8 085             | ' In-line rx for max speed
38bc8 085 22 A7 82 FA |                 rqpin   urx, dm
38bcc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
38bd0 087 53 A5 02 F5 |                 and     utx, urx
38bd4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
38bd8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
38bdc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
38be0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
38be4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
38be8 08d DC FF 9F FD |                 jmp     #.wait_byte
38bec 08e             | .get_byte
38bec 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
38bf0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
38bf4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
38bf8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
38bfc 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
38c00 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
38c04 094             | .end_crc
38c04 094 01 B8 06 F1 |                 add     pkt_cnt, #1
38c08 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
38c0c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
38c10 097 2D 00 64 1D |         if_a    ret
38c14 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
38c14 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
38c14 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
38c14 098             | ' to miss it, so cheat a bit and look for SOP clear here.
38c14 098 22 A7 82 FA |                 rqpin   urx, dm
38c18 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
38c1c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
38c20 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
38c20 09b             | .chk_crc
38c20 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
38c24 09c 58 00 00 FF 
38c28 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
38c2c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
38c30 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
38c34 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
38c38 0a1 34 09 B0 FD |                 call    #poll_waitx
38c3c 0a2             | 
38c3c 0a2             |                 ' Fall through to utx_handshake
38c3c 0a2             | 
38c3c 0a2             | '------------------------------------------------------------------------------
38c3c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
38c3c 0a2             | ' the appropriate IP delay has been inserted.
38c3c 0a2             | '------------------------------------------------------------------------------
38c3c 0a2             | ' On entry:
38c3c 0a2             | '   retval - handshake PID to send.
38c3c 0a2             | ' On exit:
38c3c 0a2             | '   retval unchanged.
38c3c 0a2             | '------------------------------------------------------------------------------
38c3c 0a2             | utx_handshake
38c3c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
38c40 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
38c44 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
38c48 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
38c4c 0a6 5F A5 02 F6 |                 mov     utx, retval
38c50 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
38c54 0a8             | .idle
38c54 0a8 22 A7 82 FA |                 rqpin   urx, dm
38c58 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38c5c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
38c60 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
38c64 0ac 08 09 90 FD |                 jmp     #poll_waitx
38c68 0ad             | 
38c68 0ad             | '------------------------------------------------------------------------------
38c68 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
38c68 0ad             | '------------------------------------------------------------------------------
38c68 0ad             | ' On entry:
38c68 0ad             | '   utx - byte to transmit.
38c68 0ad             | ' On exit:
38c68 0ad             | '------------------------------------------------------------------------------
38c68 0ad             | utx_byte
38c68 0ad 40 46 72 FD |                 testp   dp                      wc
38c6c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
38c70 0af 23 03 08 FC |                 akpin   dp
38c74 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
38c78 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
38c7c 0b2             | 
38c7c 0b2             | '------------------------------------------------------------------------------
38c7c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
38c7c 0b2             | '------------------------------------------------------------------------------
38c7c 0b2             | ' On entry:
38c7c 0b2             | ' On exit:
38c7c 0b2             | '   retval - the byte read.
38c7c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
38c7c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
38c7c 0b2             | '     received.
38c7c 0b2             | '------------------------------------------------------------------------------
38c7c 0b2             | urx_next
38c7c 0b2 22 A7 8A FA |                 rdpin   urx, dm
38c80 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
38c84 0b4 53 A5 02 F5 |                 and     utx, urx
38c88 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
38c8c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
38c90 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
38c94 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
38c98 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
38c9c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
38ca0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
38ca4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
38ca8 0bd 2D 00 64 FD |                 ret
38cac 0be             | 
38cac 0be             | '------------------------------------------------------------------------------
38cac 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
38cac 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
38cac 0be             | ' length, and the PID is not included in the CRC calculation:
38cac 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
38cac 0be             | '  CRC5  ENDP ADDRESS PID
38cac 0be             | ' %00000_1111_1111111_xxxxxxxx
38cac 0be             | '------------------------------------------------------------------------------
38cac 0be             | ' On entry:
38cac 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
38cac 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
38cac 0be             | ' On exit:
38cac 0be             | '   ep_addr_pid - CRC value appended to the packet.
38cac 0be             | '------------------------------------------------------------------------------
38cac 0be             | calc_crc5
38cac 0be FF 03 00 FF 
38cb0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
38cb4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
38cb8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
38cbc 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
38cc0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
38cc4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
38cc8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
38ccc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
38cd0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
38cd4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
38cd8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
38cdc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
38ce0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
38ce4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
38ce8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
38cec 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
38cf0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
38cf4 0d0             | 
38cf4 0d0             | '------------------------------------------------------------------------------
38cf4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
38cf4 0d0             | '------------------------------------------------------------------------------
38cf4 0d0             | isr1_fsframe
38cf4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
38cf8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38cfc 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38d00 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
38d04 0d4             | .wait
38d04 0d4 40 46 72 FD |                 testp   dp                      wc
38d08 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
38d0c 0d6 23 03 08 FC |                 akpin   dp
38d10 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
38d14 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
38d18 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
38d1c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
38d20 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
38d24 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
38d28 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
38d2c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
38d30 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
38d34 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
38d38 0e1 2C FF BF FD |                 call    #utx_byte
38d3c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
38d40 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
38d44 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
38d48 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
38d4c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
38d50 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
38d54 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
38d58 0e9 5B A5 42 F5 |                 or      utx, icrc
38d5c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
38d60 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
38d64 0ec 20 00 90 FD |                 jmp     #isr1_wait
38d68 0ed             | isr1_lsframe
38d68 0ed 1A 92 62 FD |                 getct   iframe_ct_base
38d6c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38d70 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38d74 0f0             | .wait
38d74 0f0 40 46 72 FD |                 testp   dp                      wc
38d78 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
38d7c 0f2 23 03 08 FC |                 akpin   dp
38d80 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
38d84 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
38d88 0f5             | isr1_wait
38d88 0f5 22 A5 82 FA |                 rqpin   utx, dm
38d8c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
38d90 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
38d94 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
38d98 0f9 03 00 00 FF 
38d9c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
38da0 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
38da4 0fc F5 FF 3B FB |                 reti1
38da8 0fd             | 
38da8 0fd             | '------------------------------------------------------------------------------
38da8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
38da8 0fd             | ' transaction will complete before the next frame is triggered.
38da8 0fd             | '------------------------------------------------------------------------------
38da8 0fd             | ' On entry:
38da8 0fd             | ' On exit:
38da8 0fd             | '------------------------------------------------------------------------------
38da8 0fd             | wait_txn_ok
38da8 0fd 1A 74 63 FD |                 getct   htmp2
38dac 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
38db0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38db4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
38db8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
38dbc 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
38dc0 103 2D 00 64 FD |                 ret
38dc4 104             | 
38dc4 104             | '------------------------------------------------------------------------------
38dc4 104             | ' A device connection was detected, or a bus reset was requested by the USB
38dc4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
38dc4 104             | ' and perform a reset sequence prior to device enumeration.
38dc4 104             | '------------------------------------------------------------------------------
38dc4 104             | dev_reset
38dc4 104 22 A7 82 FA |                 rqpin   urx, dm
38dc8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
38dcc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
38dd0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
38dd4 108             | reset
38dd4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
38dd8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
38ddc 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
38de0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38de4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
38de8 10d 1A 92 62 FD |                 getct   iframe_ct_base
38dec 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38df0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38df4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
38df8 111 24 70 07 F1 |                 add     htmp, #36
38dfc 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
38e00 113             | .framewait
38e00 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
38e04 114 F8 FF 9F CD |         if_b    jmp     #.framewait
38e08 115 2D 00 64 FD |                 ret
38e0c 116             | 
38e0c 116             | '------------------------------------------------------------------------------
38e0c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
38e0c 116             | '------------------------------------------------------------------------------
38e0c 116             | ' On entry:
38e0c 116             | '   PTRA - source address.
38e0c 116             | '   PB - destination address.
38e0c 116             | '   hr0 - length of copy, in bytes.
38e0c 116             | ' On exit:
38e0c 116             | '------------------------------------------------------------------------------
38e0c 116             | hmemcpy
38e0c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
38e10 117 F7 71 43 FC |                 wrbyte  htmp, pb
38e14 118 01 EE 07 F1 |                 add     pb, #1
38e18 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
38e1c 11a             | 
38e1c 11a             | '------------------------------------------------------------------------------
38e1c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
38e1c 11a             | ' loop until the errant device is disconnected.
38e1c 11a             | '------------------------------------------------------------------------------
38e1c 11a             | ' On entry:
38e1c 11a             | ' On exit:
38e1c 11a             | '------------------------------------------------------------------------------
38e1c 11a             | host_error
38e1c 11a             |           if ERROR_LED >= 0
38e1c 11a             |           end
38e1c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
38e20 11b             | 
38e20 11b             | '------------------------------------------------------------------------------
38e20 11b             | ' Get HID descriptor buffer for current port
38e20 11b             | '------------------------------------------------------------------------------
38e20 11b             | ' On entry:
38e20 11b             | ' On exit:
38e20 11b             | '   PB - HID descriptor buffer pointer
38e20 11b             | '------------------------------------------------------------------------------
38e20 11b             | get_hid_descr_buffer
38e20 11b 2D EF 03 F6 |                 mov     pb, hdev_port
38e24 11c 01 EE E7 F2 |                 cmpsub  pb, #1
38e28 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
38e2c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
38e30 11f             | 
38e30 11f             | 
38e30 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
38e34 120             | 
38e34 120             | ' USB commands and error codes
38e34 120 00 00 00 00 | cmd_data        long    0
38e38 121 00 00 00 00 | usb_err_code    long    ERR_NONE
38e3c 122             | 
38e3c 122             | ' Parameters block assigned at cog startup
38e3c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
38e40 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
38e44 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
38e48 125             | if ACTIVITY_LED >= 0
38e48 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
38e48 125             | end
38e48 125             | if ERROR_LED >= 0
38e48 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
38e48 125             | end
38e48 125 00 00 00 00 | hid_descr_p     long    0
38e4c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
38e4c 126             | 'hkbd_report_p   long    0
38e4c 126 00 00 00 00 | hub_descr_p     long    0
38e50 127 00 00 00 00 | urx_buff_p      long    0
38e54 128 00 00 00 00 | dev_desc_buff_p long    0
38e58 129 00 00 00 00 | con_desc_buff_p long    0
38e5c 12a 00 00 00 00 | cache_start_p   long    0
38e60 12b 00 00 00 00 | cache_end_p     long    0
38e64 12c             | if EMUPAD_MAX_PLAYER > 0
38e64 12c             | emupad_out_ptr  long    0
38e64 12c             | end
38e64 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
38e68 12d             | 
38e68 12d             | hdev_init_start
38e68 12d             | hdev_port       res     1
38e68 12d             | hdev_port       res     1
38e68 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
38e68 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
38e68 12d             | kbm_next_datax  res     1
38e68 12d             | kbm_next_datax  res     1
38e68 12d             | hub_intf_num    res     1
38e68 12d             | hub_intf_num    res     1
38e68 12d             | hub_next_datax  res     1
38e68 12d             | hub_next_datax  res     1
38e68 12d             | hub_status_chg  res     1
38e68 12d             | hub_status_chg  res     1
38e68 12d             | hub_port_status res     1
38e68 12d             | hub_port_status res     1
38e68 12d             | if HAVE_MOUSE
38e68 12d             | ms_intf_num     res     1
38e68 12d             | ms_intf_num     res     1
38e68 12d             | ms_in_max_pkt   res     1
38e68 12d             | ms_in_max_pkt   res     1
38e68 12d             | end
38e68 12d             | kb_intf_num     res     1
38e68 12d             | kb_intf_num     res     1
38e68 12d             | kb_interval     res     1
38e68 12d             | kb_interval     res     1
38e68 12d             | kb_in_max_pkt   res     1
38e68 12d             | kb_in_max_pkt   res     1
38e68 12d             | kb_max_index    res     1
38e68 12d             | kb_max_index    res     1
38e68 12d             | kb_led_states   res     1
38e68 12d             | kb_led_states   res     1
38e68 12d             | gp_intf_num     res     1
38e68 12d             | gp_intf_num     res     1
38e68 12d             | gp_interval     res     1
38e68 12d             | gp_interval     res     1
38e68 12d             | gp_max_index    res     1
38e68 12d             | gp_max_index    res     1
38e68 12d             | gp_descr_len    res     1+MAX_DEVICES
38e68 12d             | gp_descr_len    res     1+MAX_DEVICES
38e68 12d             | hdev_init_end
38e68 12d             | 
38e68 12d             | ' Initialized at cog startup:
38e68 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
38e68 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
38e68 12d             | iframe_ct_new   res     1
38e68 12d             | iframe_ct_new   res     1
38e68 12d             | iframe_ct_base  res     1
38e68 12d             | iframe_ct_base  res     1
38e68 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
38e68 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
38e68 12d             | 
38e68 12d             | ' This register block is reset to zero when a USB device connects
38e68 12d             | hreg_init_start
38e68 12d             | hstatus         res     1         ' Host status flags
38e68 12d             | hstatus         res     1         ' Host status flags
38e68 12d             | hctwait         res     1         ' Poll-based wait clocks
38e68 12d             | hctwait         res     1         ' Poll-based wait clocks
38e68 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
38e68 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
38e68 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
38e68 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
38e68 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
38e68 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
38e68 12d             | xfer_retry      res     1         ' Control transfer retry count
38e68 12d             | xfer_retry      res     1         ' Control transfer retry count
38e68 12d             | retry           res     1         ' Transaction retry count
38e68 12d             | retry           res     1         ' Transaction retry count
38e68 12d             | utx             res     1         ' Byte to transmit on USB
38e68 12d             | utx             res     1         ' Byte to transmit on USB
38e68 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
38e68 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
38e68 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
38e68 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
38e68 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
38e68 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
38e68 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
38e68 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
38e68 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
38e68 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
38e68 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
38e68 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
38e68 12d             | frame           res     1         ' USB 1ms frame counter value
38e68 12d             | frame           res     1         ' USB 1ms frame counter value
38e68 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
38e68 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
38e68 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
38e68 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
38e68 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
38e68 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
38e68 12d             | crc             res     1         ' Used for CRC16 calculation
38e68 12d             | crc             res     1         ' Used for CRC16 calculation
38e68 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
38e68 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
38e68 12d             | retval          res     1         ' Global success/fail return parameter
38e68 12d             | retval          res     1         ' Global success/fail return parameter
38e68 12d             | context_retval  res     1         ' Operation contextual return parameter
38e68 12d             | context_retval  res     1         ' Operation contextual return parameter
38e68 12d             | ' Device stuff
38e68 12d             | hdev_id         res     1+MAX_DEVICES
38e68 12d             | hdev_id         res     1+MAX_DEVICES
38e68 12d             | hdev_bcd        res     1
38e68 12d             | hdev_bcd        res     1
38e68 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
38e68 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
38e68 12d             | ' Keyboard/mouse stuff
38e68 12d             | hctrl_ep_addr   res     1
38e68 12d             | hctrl_ep_addr   res     1
38e68 12d             | hctrl_max_pkt   res     1
38e68 12d             | hctrl_max_pkt   res     1
38e68 12d             | hconfig_base    res     1
38e68 12d             | hconfig_base    res     1
38e68 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
38e68 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
38e68 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
38e68 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
38e68 12d             | hdev_class      res     1
38e68 12d             | hdev_class      res     1
38e68 12d             | hdev_subclass   res     1
38e68 12d             | hdev_subclass   res     1
38e68 12d             | hdev_protocol   res     1
38e68 12d             | hdev_protocol   res     1
38e68 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
38e68 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
38e68 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
38e68 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
38e68 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
38e68 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
38e68 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
38e68 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
38e68 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
38e68 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
38e68 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
38e68 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
38e68 12d             | if HAVE_MOUSE
38e68 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
38e68 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
38e68 12d             | end
38e68 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
38e68 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
38e68 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
38e68 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
38e68 12d             | hdev_ep_addr    res     1+MAX_DEVICES
38e68 12d             | hdev_ep_addr    res     1+MAX_DEVICES
38e68 12d             | hdev_out_addr   res     1
38e68 12d             | hdev_out_addr   res     1
38e68 12d             | 
38e68 12d             | if EMUPAD_MAX_PLAYER > 0
38e68 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
38e68 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
38e68 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
38e68 12d             | end
38e68 12d             | 
38e68 12d             | hreg_init_end
38e68 12d             | 
38e68 12d             | hidr_start
38e68 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
38e68 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
38e68 12d             | hidr_flags      res     1
38e68 12d             | hidr_flags      res     1
38e68 12d             | hidr_axis       res     3
38e68 12d             | hidr_axis       res     3
38e68 12d             | hidr_buttons    res     1
38e68 12d             | hidr_buttons    res     1
38e68 12d             | hidr_hats       res     1
38e68 12d             | hidr_hats       res     1
38e68 12d             | '' Above are actually useful values, 6 longs
38e68 12d             | hidr_id         res     1
38e68 12d             | hidr_id         res     1
38e68 12d             | hidr_state      res     1
38e68 12d             | hidr_state      res     1
38e68 12d             | hidr_size       res     1
38e68 12d             | hidr_size       res     1
38e68 12d             | hidr_count      res     1
38e68 12d             | hidr_count      res     1
38e68 12d             | hidr_offset     res     1
38e68 12d             | hidr_offset     res     1
38e68 12d             | hidr_usage_idx  res     1
38e68 12d             | hidr_usage_idx  res     1
38e68 12d             | hidr_lminmax    res     1
38e68 12d             | hidr_lminmax    res     1
38e68 12d             | hidr_pminmax    res     1
38e68 12d             | hidr_pminmax    res     1
38e68 12d             | hidr_type       res     1
38e68 12d             | hidr_type       res     1
38e68 12d             | hidr_end
38e68 12d             | 
38e68 12d             | ' Variables dependent on the system freqency
38e68 12d             | _var_64_lower_  res     1
38e68 12d             | _var_64_lower_  res     1
38e68 12d             | _var_64_upper_  res     1
38e68 12d             | _var_64_upper_  res     1
38e68 12d             | _12Mbps_        res     1
38e68 12d             | _12Mbps_        res     1
38e68 12d             | _1_5Mbps_       res     1
38e68 12d             | _1_5Mbps_       res     1
38e68 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
38e68 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
38e68 12d             | _1us_           res     1         ' 1us
38e68 12d             | _1us_           res     1         ' 1us
38e68 12d             | _10us_          res     1         ' 10us
38e68 12d             | _10us_          res     1         ' 10us
38e68 12d             | _33us_          res     1         ' 33us
38e68 12d             | _33us_          res     1         ' 33us
38e68 12d             | _txn_err_       res     1         ' 250us
38e68 12d             | _txn_err_       res     1         ' 250us
38e68 12d             | _500us_         res     1         ' 500us
38e68 12d             | _500us_         res     1         ' 500us
38e68 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
38e68 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
38e68 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
38e68 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
38e68 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
38e68 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
38e68 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
38e68 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
38e68 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
38e68 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
38e68 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
38e68 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
38e68 12d             | _preamble_wait_ res     1
38e68 12d             | _preamble_wait_ res     1
38e68 12d             | _1ms_           res     1         ' 1ms
38e68 12d             | _1ms_           res     1         ' 1ms
38e68 12d             | _2ms_           res     1         ' 2ms
38e68 12d             | _2ms_           res     1         ' 2ms
38e68 12d             | _suspend_wait_  res     1         ' 3ms
38e68 12d             | _suspend_wait_  res     1         ' 3ms
38e68 12d             | _4ms_           res     1         ' 4ms
38e68 12d             | _4ms_           res     1         ' 4ms
38e68 12d             | _xfer_wait_     res     1         ' 5ms
38e68 12d             | _xfer_wait_     res     1         ' 5ms
38e68 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
38e68 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
38e68 12d             | _reset_hold_    res     1         ' 15ms
38e68 12d             | _reset_hold_    res     1         ' 15ms
38e68 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
38e68 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
38e68 12d             | _21ms_          res     1         ' 21ms
38e68 12d             | _21ms_          res     1         ' 21ms
38e68 12d             | _100ms_         res     1         ' 100ms
38e68 12d             | _100ms_         res     1         ' 100ms
38e68 12d             | _500ms_         res     1         ' 500ms
38e68 12d             | _500ms_         res     1         ' 500ms
38e68 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
38e68 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
38e68 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
38e68 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
38e68 12d             | '------------------------------------------------------------------------------
38e68 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
38e68 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
38e68 12d             | _usb_d_ls_nco_  res     1
38e68 12d             | _usb_d_ls_nco_  res     1
38e68 12d             | _usb_h_fs_nco_  res     1
38e68 12d             | _usb_h_fs_nco_  res     1
38e68 12d             | _usb_d_fs_nco_  res     1
38e68 12d             | _usb_d_fs_nco_  res     1
38e68 12d             | '------------------------------------------------------------------------------
38e68 12d             | ' Scratch registers
38e68 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
38e68 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
38e68 12d             | htmp1           res     1
38e68 12d             | htmp1           res     1
38e68 12d             | htmp2           res     1
38e68 12d             | htmp2           res     1
38e68 12d             | htmp3           res     1
38e68 12d             | htmp3           res     1
38e68 12d             | hrep            res     1         ' Repeat count
38e68 12d             | hrep            res     1         ' Repeat count
38e68 12d             | hsave0          res     1         ' Subroutine parameter saves
38e68 12d             | hsave0          res     1         ' Subroutine parameter saves
38e68 12d             | hsave1          res     1
38e68 12d             | hsave1          res     1
38e68 12d             | hsave2          res     1
38e68 12d             | hsave2          res     1
38e68 12d             | isrtmp1         res     1
38e68 12d             | isrtmp1         res     1
38e68 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
38e68 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
38e68 12d             | hr0             res     1         ' Multi-purpose registers
38e68 12d             | hr0             res     1         ' Multi-purpose registers
38e68 12d             | hr1             res     1
38e68 12d             | hr1             res     1
38e68 12d             | hr2             res     1
38e68 12d             | hr2             res     1
38e68 12d             | hr3             res     1
38e68 12d             | hr3             res     1
38e68 12d             | hpar1           res     1         ' Routine entry/exit parameters
38e68 12d             | hpar1           res     1         ' Routine entry/exit parameters
38e68 12d             | hpar2           res     1
38e68 12d             | hpar2           res     1
38e68 12d             | hpar3           res     1
38e68 12d             | hpar3           res     1
38e68 12d             | hct2            res     1         ' Function response bus turn-around timer
38e68 12d             | hct2            res     1         ' Function response bus turn-around timer
38e68 12d             | hct3            res     1         ' Keyboard/mouse poll timer
38e68 12d             | hct3            res     1         ' Keyboard/mouse poll timer
38e68 12d             | mod_cnt         res     1         ' Used in idle loops
38e68 12d             | mod_cnt         res     1         ' Used in idle loops
38e68 12d             |                 fit     $1F0
38e68 12d             |                 org     $200
38e68 200             | hlut_start
38e68 200             | 
38e68 200             | '------------------------------------------------------------------------------
38e68 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
38e68 200             | ' settings to startup defaults.
38e68 200             | '------------------------------------------------------------------------------
38e68 200             | ' On entry:
38e68 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
38e68 200             | '------------------------------------------------------------------------------
38e68 200             | set_speed_full
38e68 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
38e6c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38e70 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
38e74 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
38e78 204             | '                ret                             wcz     ' Restore caller flags on exit
38e78 204             | 
38e78 204             | '------------------------------------------------------------------------------
38e78 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
38e78 204             | ' is a downstream hub connected (not yet implemented), the baud generator
38e78 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
38e78 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
38e78 204             | ' putting the smart pins into reset.
38e78 204             | '------------------------------------------------------------------------------
38e78 204             | ' On entry:
38e78 204             | ' On exit: CZ flags restored to caller states
38e78 204             | '------------------------------------------------------------------------------
38e78 204             | set_speed_low
38e78 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
38e7c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
38e80 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
38e84 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38e88 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38e8c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38e90 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
38e94 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
38e98 20c             | 
38e98 20c             | '------------------------------------------------------------------------------
38e98 20c             | ' Perform configuration stuff required when a device intitially connects.
38e98 20c             | '------------------------------------------------------------------------------
38e98 20c             | ' On entry:
38e98 20c             | ' On exit:
38e98 20c             | '------------------------------------------------------------------------------
38e98 20c             | on_connect
38e98 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
38e9c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
38ea0 20e             | .retry
38ea0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38ea4 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
38ea8 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
38eac 211 00 08 00 FF 
38eb0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
38eb4 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
38eb8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38ebc 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
38ec0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
38ec4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
38ec8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ecc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
38ed0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
38ed4 21b 4C 03 B0 FD |                 call    #poll_waitx
38ed8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
38edc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
38ee0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
38ee4 21f B8 FF 9F FD |                 jmp     #.retry
38ee8 220             | .get_dev_desc
38ee8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
38eec 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
38ef0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
38ef4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
38ef8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
38efc 225 88 FB BF FD |                 call    #reset
38f00 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
38f04 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38f08 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
38f0c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
38f10 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f14 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38f18 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
38f1c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
38f20 22e 04 00 00 FF 
38f24 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
38f28 230 34 FA BF FD |                 call    #calc_crc5
38f2c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
38f30 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38f34 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
38f38 234 F7 AD C2 FA |                 rdbyte  total_data, pb
38f3c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
38f40 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
38f44 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f48 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38f4c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
38f50 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
38f54 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
38f58 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
38f5c 23d C4 02 B0 FD |                 call    #poll_waitx
38f60 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
38f64 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38f68 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
38f6c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
38f70 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
38f74 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f78 244 2D 00 64 5D |         if_nz   ret
38f7c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
38f80 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
38f84 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
38f88 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
38f8c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
38f90 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
38f94 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
38f98 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
38f9c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
38fa0 24e 2C FB 9F CD |         if_b    jmp     #host_error
38fa4 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
38fa8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
38fac 251 2D EC 63 FD |                 call    pa
38fb0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
38fb4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
38fb8 254 2C EC 63 FD |                 jmp     pa
38fbc 255             | 
38fbc 255             | '------------------------------------------------------------------------------
38fbc 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
38fbc 255             | ' Status reporting is always in the function-to-host direction.
38fbc 255             | '------------------------------------------------------------------------------
38fbc 255             | ' On entry:
38fbc 255             | '   PTRA - start address of the SETUP data in hub.
38fbc 255             | '   PB - start address of the buffer/struct to be written to during the IN data
38fbc 255             | '     stage.
38fbc 255             | '   ep_addr_pid - device address, endpoint and CRC5.
38fbc 255             | ' On exit:
38fbc 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
38fbc 255             | '     contains the count of data stage bytes actually received, which must
38fbc 255             | '     always be <= the count requested.
38fbc 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38fbc 255             | '     more specific USB operation error code.
38fbc 255             | '------------------------------------------------------------------------------
38fbc 255             | control_read
38fbc 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38fc0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
38fc4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
38fc8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
38fcc 259             | .xfer_start
38fcc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38fd0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38fd4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38fd8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
38fdc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
38fe0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38fe4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38fe8 260 61 00 00 FF 
38fec 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
38ff0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38ff4 263             | .data
38ff4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
38ff8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
38ffc 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
39000 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
39004 267             | .nak_retry
39004 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
39008 268             | .in_retry
39008 268 BC F6 BF FD |                 call    #txn_in
3900c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
39010 26a 28 00 90 AD |         if_z    jmp     #.commit
39014 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39018 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3901c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39020 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39024 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
39028 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3902c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
39030 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39034 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
39038 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3903c 275             | .commit
3903c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
39040 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
39044 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
39048 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3904c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
39050 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
39054 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
39058 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3905c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
39060 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
39064 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
39068 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3906c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
39070 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
39074 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
39078 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3907c 285             | .pre_status
3907c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
39080 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
39084 287 00 B0 06 F6 |                 mov     pkt_data, #0
39088 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3908c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
39090 28a 61 00 00 FF 
39094 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
39098 28c             | .out_retry
39098 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3909c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
390a0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
390a4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
390a8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
390ac 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
390b0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
390b4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
390b8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
390bc 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
390c0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
390c4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
390c4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
390c4 297             | ' ControlRead() transfer gets things unstuck most of the time...
390c4 297             | .xfer_retry
390c4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
390c8 298 58 01 B0 FD |                 call    #poll_waitx
390cc 299 8C F9 BF FD |                 call    #wait_txn_ok
390d0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
390d4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
390d8 29c C8 EF 03 F6 |                 mov     pb, hpar3
390dc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
390e0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
390e4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
390e8 2a0             | 
390e8 2a0             | '------------------------------------------------------------------------------
390e8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
390e8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
390e8 2a0             | ' the SETUP data struct is filled with the required values.
390e8 2a0             | '------------------------------------------------------------------------------
390e8 2a0             | ' On entry:
390e8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
390e8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
390e8 2a0             | '     stage.
390e8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
390e8 2a0             | ' On exit:
390e8 2a0             | '   retval - used to convey the success/failure of each stage.
390e8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
390e8 2a0             | '     more specific USB operation error code.
390e8 2a0             | '------------------------------------------------------------------------------
390e8 2a0             | control_write
390e8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
390ec 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
390f0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
390f4 2a3             | 
390f4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
390f8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
390fc 2a5 F7 91 03 F6 |                 mov     hpar3, pb
39100 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
39104 2a7             | .xfer_start
39104 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
39108 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3910c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
39110 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39114 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
39118 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3911c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
39120 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
39124 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
39128 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3912c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
39130 2b2             | .data
39130 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
39134 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
39138 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3913c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
39140 2b6             | .out_retry
39140 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
39144 2b7 88 F6 BF FD |                 call    #txn_out
39148 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3914c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
39150 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39154 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
39158 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3915c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
39160 2be             | .commit
39160 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
39164 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
39168 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3916c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
39170 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
39174 2c3             | pre_status_in
39174 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
39178 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3917c 2c5             | .status_retry
3917c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
39180 2c6 44 F5 BF FD |                 call    #txn_in
39184 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
39188 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3918c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
39190 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
39194 2cb 2D 00 64 AD |         if_z    ret
39198 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3919c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
391a0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
391a4 2cf             | '               ret                                     ' Caller must handle transfer retirement
391a4 2cf             | 
391a4 2cf             | '------------------------------------------------------------------------------
391a4 2cf             | ' Execute an IN interrupt transaction.
391a4 2cf             | '------------------------------------------------------------------------------
391a4 2cf             | ' On entry:
391a4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
391a4 2cf             | '   hpar2 - Address of the IN data buffer
391a4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
391a4 2cf             | ' On exit:
391a4 2cf             | '   retval - the result of the operation.
391a4 2cf             | '   hpar3 - the count of IN data bytes actually received.
391a4 2cf             | '------------------------------------------------------------------------------
391a4 2cf             | do_int_in
391a4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
391a8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
391ac 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
391b0 2d2             | 
391b0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
391b4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
391b8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
391bc 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
391c0 2d6             | .retry
391c0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
391c4 2d7 00 F5 BF FD |                 call    #txn_in
391c8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
391cc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
391d0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
391d4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
391d8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
391dc 2dd 54 00 B0 FD |                 call    #retry_wait
391e0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
391e4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
391e8 2e0 D4 FF 9F FD |                 jmp     #.retry
391ec 2e1             | .commit
391ec 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
391f0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
391f4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
391f8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
391fc 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
39200 2e6             | .post_ret
39200 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
39204 2e7             | 
39204 2e7             | 
39204 2e7             | '------------------------------------------------------------------------------
39204 2e7             | ' Resets the downstream hub port to FS
39204 2e7             | '------------------------------------------------------------------------------
39204 2e7             | dwnstream_reset
39204 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
39208 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3920c 2e9             | 
3920c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
39210 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39214 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39218 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3921c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39220 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39224 2ef             | 
39224 2ef             | '------------------------------------------------------------------------------
39224 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
39224 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
39224 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
39224 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
39224 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
39224 2ef             | '------------------------------------------------------------------------------
39224 2ef             | ' On entry:
39224 2ef             | '   hctwait - wait interval in sysclocks.
39224 2ef             | ' On exit:
39224 2ef             | '------------------------------------------------------------------------------
39224 2ef             | poll_waitx
39224 2ef 1A 92 63 FD |                 getct   hct2
39228 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3922c 2f1             | .wait
3922c 2f1 FF 25 CC FB |                 jnct2   #.wait
39230 2f2 2D 00 64 FD |                 ret
39234 2f3             | 
39234 2f3             | '------------------------------------------------------------------------------
39234 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
39234 2f3             | '------------------------------------------------------------------------------
39234 2f3             | ' On entry:
39234 2f3             | '   retval - transaction response PID or error code.
39234 2f3             | ' On exit:
39234 2f3             | '------------------------------------------------------------------------------
39234 2f3             | retry_wait
39234 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39238 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3923c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39240 2f6 14 00 90 AD |         if_z    jmp     #.nak
39244 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
39248 2f8 D8 FF BF FD |                 call    #poll_waitx
3924c 2f9             | .dec
3924c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
39250 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
39254 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
39258 2fc             | .nak
39258 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3925c 2fd C4 FF BF FD |                 call    #poll_waitx
39260 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
39264 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
39268 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3926c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
39270 302 2D 00 64 FD |                 ret
39274 303             | 
39274 303             | host_reset
39274 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
39278 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3927c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3927c 305 BD 01 05 FF 
39280 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
39284 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
39288 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3928c 309             | ' Check to see if the system clock has been changed.
3928c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
39290 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
39294 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
39298 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3929c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
392a0 30e 40 46 62 FD |                 dirl    dp
392a4 30f             | 
392a4 30f 28 02 64 FD |                 setq    #1
392a8 310 80 00 80 FF 
392ac 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
392b0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
392b4 313             | .enable
392b4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
392b8 314 41 46 62 FD |                 dirh    dp
392bc 315 1F 36 63 FD |                 waitx   _1us_
392c0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
392c4 317             | 
392c4 317             |                 ' Handle Port protection enable and startup delay
392c4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
392c8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
392cc 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
392d0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
392d4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
392d8 31c             | 
392d8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
392dc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
392e0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
392e4 31f 00 00 04 F6 |                 mov     0-0, #0
392e8 320             | .regloop
392e8 320             | 
392e8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
392e8 320             | 
392e8 320             | discon_entry
392e8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
392ec 321             | 
392ec 321             |               
392ec 321             |         if HAVE_HIDPAD
392ec 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
392f0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
392f4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
392f8 324 F7 01 68 FC |                 wrlong  #0,pb
392fc 325             |         end
392fc 325             |         if EMUPAD_MAX_PLAYER > 0
392fc 325             |         end
392fc 325             | 
392fc 325             |                 ' Fall through to disconnected loop
392fc 325             | 
392fc 325             | '-----------------------------------------------------------------------------------------------------------------
392fc 325             | ' Device connect handling (Section 7.1.7.3).
392fc 325             | '-----------------------------------------------------------------------------------------------------------------
392fc 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
392fc 325             | ' device to connect (Section 7.1.7.3).
392fc 325             | '-----------------------------------------------------------------------------------------------------------------
392fc 325             | disconnected
392fc 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
39300 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
39304 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
39308 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3930c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
39310 32a             |         if ACTIVITY_LED >= 0
39310 32a             |         end
39310 32a 22 A7 82 FA |                 rqpin   urx, dm
39314 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
39318 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3931c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
39320 32e             | .se1_test
39320 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
39324 32f FC FE BF FD |                 call    #poll_waitx
39328 330 22 A7 82 FA |                 rqpin   urx, dm
3932c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
39330 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
39334 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
39338 334             | .se1            'SE1 is a fatal error condition
39338 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3933c 335 E4 FE BF FD |                 call    #poll_waitx
39340 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
39344 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
39348 338             | .connect_test                                           ' Test lines until stable J/K state seen
39348 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3934c 339 22 A7 82 FA |                 rqpin   urx, dm
39350 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
39354 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
39358 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3935c 33d             | connected
3935c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
39360 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
39364 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
39368 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3936c 341             | .set_pulse
3936c 341 1A 64 63 FD |                 getct   _pulse_time_
39370 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
39374 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
39374 343             | ' of 1ms and make a correction, if necessary.
39374 343             | '                mov     htmp, _1ms_
39374 343             | '                subs    htmp, iframe_delta
39374 343             | '                adds    _frame1ms_clks_, htmp
39374 343             | '                debug(udec(_frame1ms_clks_))
39374 343             | 
39374 343             |                 ' Fall through to idle/processing loop
39374 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
39378 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3937c 345             | 
3937c 345             | hidle
3937c 345 22 A7 82 FA |                 rqpin   urx, dm
39380 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
39384 347 98 00 90 CD |         if_c    jmp     #.se0_test
39388 348 24 06 70 FD |                 pollct3                         wc
3938c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
39390 34a 1A 94 63 FD |                 getct   hct3
39394 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
39398 34c             | 
39398 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3939c 34d 00 70 E3 F8 |                 getbyte htmp
393a0 34e             | 
393a0 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
393a4 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
393a8 350 40 00 90 AD |         if_z    jmp     #.poll
393ac 351             | 
393ac 351             |         if _HAVE_GAMEPAD
393ac 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
393b0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
393b4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
393b8 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
393bc 355 2C 00 90 AD |         if_z    jmp     #.poll
393c0 356             |         end
393c0 356             | 
393c0 356             |         if HAVE_MOUSE
393c0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
393c4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
393c8 358 20 00 90 AD |         if_z    jmp     #.poll
393cc 359             |         end
393cc 359             | 
393cc 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
393d0 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
393d4 35b 14 00 90 AD |         if_z    jmp     #.poll
393d8 35c             | 
393d8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
393dc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
393e0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
393e4 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
393e8 360             |         if HAVE_MOUSE
393e8 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
393ec 361             |         else
393ec 361             |         end
393ec 361             | 
393ec 361             | .poll
393ec 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
393f0 362 2D EC 63 FD |                 call    pa
393f4 363             | .skip_poll
393f4 363             | 
393f4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
393f8 364             | 
393f8 364             | .nopoll
393f8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
393fc 365 44 00 90 AD |         if_z    jmp     #hsuspend
39400 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
39404 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
39408 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3940c 369 1A 84 63 FD |                 getct   hr0
39410 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
39414 36b             |         if ACTIVITY_LED >= 0
39414 36b             |         end
39414 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
39418 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3941c 36d 5C FF 9F FD |                 jmp     #hidle
39420 36e             | ' Check for extended SE0 state on the bus
39420 36e             | .se0_test
39420 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
39424 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
39428 370 22 A7 82 FA |                 rqpin   urx, dm
3942c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
39430 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
39434 373 24 F6 BF FD |                 call    #wait_txn_ok
39438 374 00 00 80 FF 
3943c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
39440 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
39440 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
39444 377             | 
39444 377             | hsuspend
39444 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
39448 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3944c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
39450 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
39454 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
39458 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3945c 37d             | 
3945c 37d             |                 ' Fall through to resume wait loop
3945c 37d             | 
3945c 37d             | hwait_resume
3945c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
39460 37e 02 86 47 F0 |                 shr     hr1, #2
39464 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
39468 380             |         if ACTIVITY_LED >= 0
39468 380             |         end
39468 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3946c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
39470 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
39474 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
39478 384 18 00 90 AD |         if_z    jmp     #.resume
3947c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
39480 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
39484 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
39488 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3948c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
39490 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
39494 38b             | .resume
39494 38b 22 05 28 FC |                 wypin   #OUT_K, dm
39498 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3949c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
394a0 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
394a4 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
394a8 390 1F 70 63 FD |                 waitx   htmp
394ac 391 22 07 28 FC |                 wypin   #OUT_J, dm
394b0 392 01 70 47 F0 |                 shr     htmp, #1
394b4 393 1F 70 63 FD |                 waitx   htmp
394b8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
394bc 395 1A 92 62 FD |                 getct   iframe_ct_base
394c0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
394c4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
394c8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
394cc 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
394d0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
394d4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
394d8 39c             | 
394d8 39c             | '------------------------------------------------------------------------------
394d8 39c             | ' Send preamble to enable low-speed HUB ports
394d8 39c             | '------------------------------------------------------------------------------
394d8 39c             | ' On entry:
394d8 39c             | ' On exit:
394d8 39c             | '   USB baud rate set to low-speed
394d8 39c             | '------------------------------------------------------------------------------
394d8 39c             | utx_pre
394d8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
394dc 39d 40 46 62 FD |                 dirl    dp
394e0 39e 28 02 64 FD |                 setq    #1
394e4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
394e8 3a0 58 44 62 FD |                 drvl    dm
394ec 3a1 59 46 62 FD |                 drvh    dp
394f0 3a2             | 
394f0 3a2 1E 00 00 FF 
394f4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
394f8 3a4             | 
394f8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
394fc 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
39500 3a6 28 02 64 3D |         if_nc   setq    #1
39504 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
39508 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3950c 3a9             | .l1
3950c 3a9             | 
3950c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39510 3aa 40 46 62 FD |                 dirl    dp
39514 3ab 28 02 64 FD |                 setq    #1
39518 3ac 80 00 80 FF 
3951c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
39520 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
39524 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
39528 3b0 41 46 62 FD |                 dirh    dp
3952c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39530 3b2             | 
39530 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
39534 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
39538 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3953c 3b5             | 
3953c 3b5             | hlut_end
3953c 3b5             |                 fit     $400
3953c 3b5             |                 orgh
3953c                 | if OVERLAP_MEMORY
3953c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3953c                 | end
3953c                 | '------------------------------------------------------------------------------
3953c                 | ' Routines called from cog space.
3953c                 | '------------------------------------------------------------------------------
3953c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3953c                 | '------------------------------------------------------------------------------
3953c                 | 
3953c                 | '------------------------------------------------------------------------------
3953c                 | ' USB host cog initialization.
3953c                 | '------------------------------------------------------------------------------
3953c                 | usb_host_init
3953c                 |                 ' Initialize buffer pointers
3953c                 |         if OVERLAP_MEMORY
3953c                 |         else
3953c     40 15 B0 FE |                 loc     pb, #hid_descr
39540                 |         end
39540     F7 4B 02 F6 |                 mov     hid_descr_p, pb
39544                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
39544                 |                 {
39544                 |                 }
39544                 |         
39544                 |                 {
39544                 |                 }
39544                 |                 'loc     pb,#hkbd_report
39544                 |                 'mov     hkbd_report_p,pb
39544                 | 
39544     08 1D B0 FE |                 loc     pb, #hub_descr
39548     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3954c     1D 1D B0 FE |                 loc     pb, #urx_buff
39550     F7 4F 02 F6 |                 mov     urx_buff_p, pb
39554     95 1D B0 FE |                 loc     pb, #dev_desc_buff
39558     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3955c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
39560     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
39564     18 15 B0 FE |                 loc     pb, #usb_cache_start
39568     F7 55 02 F6 |                 mov     cache_start_p, pb
3956c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
39570     F7 57 02 F6 |                 mov     cache_end_p, pb
39574                 | 
39574                 |         if ERROR_LED >= 0
39574                 |         end
39574                 | 
39574                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
39574                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
39574                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
39574                 | ' Configure and enable the Serial Host USB port.
39574     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
39578                 | 
39578                 | '------------------------------------------------------------------------------
39578                 | ' Timing calculations happen before any interrupt(s) are enabled.
39578                 | '------------------------------------------------------------------------------
39578                 | ' On entry:
39578                 | '   htmp - current CLKFREQ value.
39578                 | '------------------------------------------------------------------------------
39578                 | hinit_usb_timings
39578                 | '                getct   htmp2
39578     B8 59 02 F6 |                 mov     save_sysclk, htmp
3957c     8D 5B 80 FF 
39580     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
39584     18 30 63 FD |                 getqx   _12Mbps_
39588     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3958c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
39590     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
39594     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
39598     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3959c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
395a0     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
395a4     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
395a8     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
395ac     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
395b0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
395b4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
395b8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
395bc     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
395c0     80 00 00 FF 
395c4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
395c8     18 2C 63 FD |                 getqx   _var_64_lower_
395cc     19 2E 63 FD |                 getqy   _var_64_upper_
395d0     28 2C 63 FD |                 setq    _var_64_lower_
395d4     65 CD 1D FF 
395d8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
395dc     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
395e0     01 00 00 FF 
395e4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
395e8     18 2C 63 FD |                 getqx   _var_64_lower_
395ec     19 2E 63 FD |                 getqy   _var_64_upper_
395f0     28 2C 63 FD |                 setq    _var_64_lower_
395f4     A1 07 00 FF 
395f8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
395fc     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
39600     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
39604     09 36 57 F0 |                 shr     _1us_, #9               wc
39608     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3960c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
39610     18 38 63 FD |                 getqx   _10us_
39614     09 38 57 F0 |                 shr     _10us_, #9              wc
39618     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3961c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
39620     18 3A 63 FD |                 getqx   _33us_
39624     09 3A 57 F0 |                 shr     _33us_, #9              wc
39628     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3962c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
39630     18 3C 63 FD |                 getqx   _txn_err_
39634     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
39638     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3963c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
39640     18 3E 63 FD |                 getqx   _500us_
39644     09 3E 57 F0 |                 shr     _500us_, #9             wc
39648     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3964c     01 00 00 FF 
39650     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
39654     18 40 63 FD |                 getqx   _txn_ok_ls_
39658     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3965c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
39660     01 00 00 FF 
39664     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
39668     18 42 63 FD |                 getqx   _txn_ok_fs_
3966c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
39670     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
39674     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
39678     05 00 00 FF 
3967c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
39680     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
39684     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
39688     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3968c     1C 00 00 FF 
39690     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
39694     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
39698     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3969c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
396a0     00 00 00 FF 
396a4     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
396a8     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
396ac     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
396b0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
396b4     04 00 00 FF 
396b8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
396bc     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
396c0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
396c4     8D 5B 00 FF 
396c8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
396cc     18 4C 63 FD |                 getqx   _preamble_wait_
396d0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
396d4     01 00 00 FF 
396d8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
396dc     18 2C 63 FD |                 getqx   _var_64_lower_
396e0     19 2E 63 FD |                 getqy   _var_64_upper_
396e4     28 2C 63 FD |                 setq    _var_64_lower_
396e8     01 00 00 FF 
396ec     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
396f0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
396f4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
396f8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
396fc     FF FF 7F FF 
39700     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
39704     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
39708     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3970c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
39710     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
39714     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
39718     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3971c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
39720     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
39724     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
39728     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3972c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
39730     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
39734     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
39738     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3973c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
39740     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
39744     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
39748     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3974c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
39750     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
39754     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
39758     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3975c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
39760     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
39764     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
39768     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3976c                 | '        _ret_   mov     _1sec_, save_sysclk
3976c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3976c                 | '                ret
3976c                 | {
3976c                 | }
3976c                 | 
3976c                 | '------------------------------------------------------------------------------
3976c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3976c                 | ' one. If it is, start the task progression that will configure the device for
3976c                 | ' use.
3976c                 | '------------------------------------------------------------------------------
3976c                 | ' On entry:
3976c                 | '   hconfig_base - start address of the cached config descriptor chain.
3976c                 | ' On exit:
3976c                 | '------------------------------------------------------------------------------
3976c                 | hparse_con_desc
3976c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
39770     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
39774     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
39778     4E 70 FF F9 |                 movbyts htmp,#%%1032
3977c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
39780                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
39780                 | 
39780     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
39784     6E ED 03 F1 |                 add     pa, hconfig_base
39788     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3978c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3978c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3978c                 | ' that defines a keyboard and/or mouse.
3978c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
39790                 | .next_intf
39790     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39794     BC 01 90 3D |         if_ae   jmp     #hset_config
39798     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3979c     75 F3 03 F1 |                 add     ptrb, hnext_desc
397a0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
397a4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
397a8     0C 00 90 AD |         if_z    jmp     #.intf
397ac     80 71 C7 FA |                 rdbyte  htmp, ptrb
397b0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
397b4     D8 FF 9F FD |                 jmp     #.next_intf
397b8                 | .intf
397b8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
397bc     00 90 07 F6 |                 mov     hpar3, #0
397c0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
397c4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
397c8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
397cc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
397d0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
397d0                 | 
397d0                 | .endp
397d0     80 71 C7 FA |                 rdbyte  htmp, ptrb
397d4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
397d8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
397dc     78 00 90 3D |         if_ae   jmp     #.get_device
397e0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
397e4     75 F3 03 F1 |                 add     ptrb, hnext_desc
397e8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
397ec     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
397f0     64 00 90 AD |         if_z    jmp     #.get_device
397f4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
397f8     04 00 90 AD |         if_z    jmp     #.get_ep
397fc     D0 FF 9F FD |                 jmp     #.endp
39800                 | .get_ep
39800     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
39804     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
39808     0F 86 67 F0 |                 shl     hr1, #8 + 7
3980c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
39810     3F 00 00 FF 
39814     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
39818     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3981c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
39820     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
39824     00 90 0F F2 |                 cmp     hpar3, #0               wz
39828     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3982c     A0 FF 9F FD |                 jmp     #.endp
39830                 | .in_ep
39830     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
39834     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
39838                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
39838     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3983c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
39840     8C FF 9F FD |                 jmp     #.endp
39844                 | .out_ep
39844     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
39848     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3984c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3984c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
39850     C2 8B DB F8 |                 setbyte hr3, hr0, #3
39854     78 FF 9F FD |                 jmp     #.endp
39858                 | 
39858                 | .get_device
39858     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3985c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
39860     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
39864     68 00 90 AD |         if_z    jmp     #.gamepad
39868     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3986c     AC 00 90 AD |         if_z    jmp     #.hub
39870     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
39874     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
39878     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3987c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
39880     4C 00 90 AD |         if_z    jmp     #.gamepad
39884     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
39888     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3988c                 | .keyboard
3988c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
39890                 |         if HAVE_MOUSE
39890     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
39894                 |         else
39894                 |         end
39894     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
39898     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3989c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
398a0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
398a4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
398a8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
398ac                 |                 'debug(udec(kb_intf_num))
398ac                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
398ac     E0 FE 9F FD |                 jmp     #.next_intf
398b0                 | if HAVE_MOUSE
398b0                 | .mouse
398b0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
398b4     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
398b8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
398bc     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
398c0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
398c4                 |                 'getbyte ms_interval, hr2, #3
398c4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
398c8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
398cc                 |                 'debug(udec(kb_intf_num))
398cc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
398cc     C0 FE 9F FD |                 jmp     #.next_intf
398d0                 | end
398d0                 | .gamepad
398d0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
398d4     C7 71 63 F5 |                 xor     htmp, hpar2
398d8     3F 00 00 FF 
398dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
398e0     AC FE 9F AD |         if_z    jmp     #.next_intf
398e4                 |         if HAVE_MOUSE
398e4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
398e8     C7 71 63 F5 |                 xor     htmp, hpar2
398ec     3F 00 00 FF 
398f0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
398f4     98 FE 9F AD |         if_z    jmp     #.next_intf
398f8                 |         end
398f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
398fc     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
39900     8C FE 9F 5D |         if_nz   jmp     #.next_intf
39904                 | 
39904     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39908     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3990c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39910     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
39914     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
39918                 |                 'debug(udec(gp_intf_num))
39918                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
39918     74 FE 9F FD |                 jmp     #.next_intf
3991c                 | .hub
3991c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
39920     6C FE 9F 5D |         if_nz   jmp     #.next_intf
39924     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
39928     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3992c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
39930     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
39934     58 FE 9F 5D |         if_nz   jmp     #.next_intf
39938     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3993c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
39940     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
39944     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39948     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3994c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
39950                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
39950     3C FE 9F FD |                 jmp     #.next_intf
39954                 | 
39954                 | '------------------------------------------------------------------------------
39954                 | ' If a newly-connected device is recognized, do whatever is needed to configure
39954                 | ' it according to its function, or functions. In the case of this boot protocol
39954                 | ' keyboard/mouse class driver:
39954                 | ' - SetConfiguration(config_num)
39954                 | ' - SetProtocol(boot)
39954                 | ' - SetIdle(indefinite)
39954                 | ' - Enter the device interrupt IN polling task stage.
39954                 | '------------------------------------------------------------------------------
39954                 | ' On entry:
39954                 | ' On exit:
39954                 | '------------------------------------------------------------------------------
39954                 | hset_config
39954                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
39954                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
39954     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
39958     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3995c     00 00 0C F2 |                 cmp     0-0, #0                 wz
39960     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
39964                 |         if HAVE_MOUSE
39964     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
39968                 |         end
39968     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3996c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
39970                 | .set_config
39970     6C 0E D0 FE |                 loc     ptra, #set_config
39974     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
39978     6E ED 03 F1 |                 add     pa, hconfig_base
3997c     F6 8D C3 FA |                 rdbyte  hpar1, pa
39980     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
39984     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
39988     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3998c     A0 02 A0 FD |                 call    #control_write
39990     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39994     2D 00 64 5D |         if_nz   ret
39998                 | .kbd_config
39998     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3999c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
399a0                 | 
399a0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
399a4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
399a8     3F 00 00 FF 
399ac     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
399b0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
399b4                 | 
399b4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
399b8     34 0E D0 FE |                 loc     ptra, #set_protocol
399bc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
399c0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
399c4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
399c8     A0 02 A0 FD |                 call    #control_write
399cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
399d0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
399d4     E4 02 90 5D |         if_nz   jmp     #.notify_client
399d8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
399dc     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
399e0     30 03 B0 FD |                 call    #hset_idle
399e4                 |                 'cmp     retval, #PID_ACK        wz
399e4                 |         'if_nz   mov     hkbd_ep_addr, #0
399e4                 |         'if_nz   jmp     #.notify_client
399e4     A8 99 02 F6 |                 mov     hctwait, _2ms_
399e8     EF 02 A0 FD |                 call    #poll_waitx
399ec     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
399f0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
399f4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
399f8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
399fc     2C 03 B0 FD |                 call    #hset_kbdled_report
39a00     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39a04     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
39a08     B0 02 90 5D |         if_nz   jmp     #.notify_client
39a0c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
39a10     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39a14     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39a18     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
39a1c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
39a20     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
39a24     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
39a28     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
39a2c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
39a30     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
39a34     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
39a38                 |         if !!HAVE_MOUSE
39a38                 |         end
39a38                 | 
39a38                 | .mouse_config
39a38                 | if HAVE_MOUSE
39a38     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
39a3c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
39a40     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
39a44     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
39a48     3F 00 00 FF 
39a4c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39a50     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
39a54                 | 
39a54                 |                 debug("mouse passed addr check")
39a54                 | 
39a54     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
39a58     00 00 80 FF 
39a5c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
39a60     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
39a64     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39a68     55 02 A0 FD |                 call    #control_read
39a6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39a70     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
39a74     44 02 90 5D |         if_nz   jmp     #.notify_client
39a78     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
39a7c     56 01 00 F6 |                 mov     0-0, total_data
39a80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39a84                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
39a84                 | 
39a84     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
39a88     64 0D D0 FE |                 loc     ptra, #set_protocol
39a8c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
39a90     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39a94     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
39a98     A0 02 A0 FD |                 call    #control_write
39a9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39aa0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
39aa4     14 02 90 5D |         if_nz   jmp     #.notify_client
39aa8                 |                 debug("mouse passed SetProtocol")
39aa8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
39aac     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
39ab0     60 02 B0 FD |                 call    #hset_idle
39ab4                 |                 'cmp     retval, #PID_ACK        wz
39ab4                 |         'if_nz   mov     hmouse_ep_addr, #0
39ab4                 |         'if_nz   jmp     #.notify_client
39ab4                 |                 debug("mouse passed SetIdle")
39ab4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
39ab8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39abc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39ac0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
39ac4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
39ac8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
39acc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
39ad0     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
39ad4     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
39ad8     3F 00 00 FF 
39adc     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
39ae0     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
39ae4     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
39ae8     D0 01 90 FD |                 jmp     #.notify_client
39aec                 | end
39aec                 | .gamepad_config
39aec                 | if _HAVE_GAMEPAD
39aec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39af0     00 00 0C F2 |                 cmp     0-0, #0                 wz
39af4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
39af8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39afc     00 70 03 F6 |                 mov     htmp, 0-0
39b00     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
39b04     3F 00 00 FF 
39b08     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39b0c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
39b10                 | 
39b10     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39b14     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
39b18     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39b1c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39b20     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
39b24     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39b28     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
39b2c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
39b30     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
39b34     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39b38     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39b3c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
39b40     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
39b44     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
39b48                 | 
39b48                 |                 if EMUPAD_MAX_PLAYER > 0
39b48                 |                 
39b48                 | .rule_loop           
39b48                 |                 end
39b48                 | 
39b48     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
39b4c     5C 00 90 AD |         if_e    jmp     #.xinput
39b50     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
39b54     00 70 03 F6 |                 mov     htmp,0-0
39b58     01 A6 02 FF 
39b5c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
39b60     7C 00 90 AD |         if_e    jmp     #.ps3
39b64                 | 
39b64     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
39b68     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
39b6c     00 00 80 5F 
39b70     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
39b74     03 00 80 AF 
39b78     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
39b7c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
39b80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39b84     55 02 A0 FD |                 call    #control_read
39b88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39b8c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
39b90     00 00 04 56 |         if_nz   mov     0-0, #0
39b94     24 01 90 5D |         if_nz   jmp     #.notify_client
39b98     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
39b9c     56 01 00 F6 |                 mov     0-0, total_data
39ba0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39ba4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
39ba4                 | 
39ba4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
39ba8     10 01 90 FD |                 jmp     #.notify_client
39bac                 | .xinput
39bac     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
39bb0     2D EF 03 F6 |                 mov     pb,hdev_port
39bb4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
39bb8     03 EE 27 F3 |                 fle     pb,#3
39bbc     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
39bc0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
39bc4                 | 
39bc4     03 B0 06 F6 |                 mov     pkt_data, #3
39bc8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
39bcc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
39bd0     5A 00 A0 FD |                 call    #txn_out
39bd4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
39bd8                 | 
39bd8     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
39bdc     DC 00 90 FD |                 jmp     #.notify_client
39be0                 | .ps3
39be0     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
39be4     2D EF 03 F6 |                 mov     pb,hdev_port
39be8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
39bec     04 EE 27 F3 |                 fle     pb,#4
39bf0     F7 EF C3 F9 |                 decod   pb
39bf4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
39bf8                 | 
39bf8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
39bfc     00 0C D0 FE |                 loc     ptra, #set_report
39c00     01 00 80 FF 
39c04     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
39c08     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39c0c     03 61 5C FC |                 wrword  #48, ptra[wLength]
39c10     20 0C B0 FE |                 loc     pb, #ps3_command_buff
39c14     A0 02 A0 FD |                 call    #control_write
39c18                 | 
39c18     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
39c1c     E0 0B D0 FE |                 loc     ptra, #set_report
39c20     01 00 80 FF 
39c24     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
39c28     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39c2c     03 09 5C FC |                 wrword  #4, ptra[wLength]
39c30     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
39c34     A0 02 A0 FD |                 call    #control_write
39c38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
39c3c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
39c40     00 00 04 56 |         if_nz   mov     0-0, #0
39c44     74 00 90 5D |         if_nz   jmp     #.notify_client
39c48                 | 
39c48     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
39c4c     6C 00 90 FD |                 jmp     #.notify_client
39c50                 | end
39c50                 | 
39c50                 | .hub_config
39c50     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
39c54     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
39c58     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
39c5c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
39c60     3F 00 00 FF 
39c64     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39c68     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
39c6c                 | 
39c6c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
39c70     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
39c74     26 EF 03 F6 |                 mov     pb, hub_descr_p
39c78     55 02 A0 FD |                 call    #control_read
39c7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39c80     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
39c84     34 00 90 5D |         if_nz   jmp     #.notify_client
39c88                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
39c88                 | 
39c88     26 F1 03 F6 |                 mov     ptra, hub_descr_p
39c8c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
39c90     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
39c94                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
39c94                 | .pwr_loop
39c94     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
39c98     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
39c9c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
39ca0     A0 02 A0 FD |                 call    #control_write
39ca4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
39ca8                 | 
39ca8     B1 99 02 F6 |                 mov     hctwait, _500ms_
39cac     B0 99 02 F1 |                 add     hctwait, _100ms_
39cb0     EF 02 A0 FD |                 call    #poll_waitx
39cb4                 | 
39cb4     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
39cb8     00 00 90 FD |                 jmp     #.notify_client
39cbc                 | 
39cbc                 | .notify_client
39cbc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39cc0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
39cc4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
39cc4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
39cc4     2D 00 64 FD |                 ret
39cc8                 | 
39cc8                 | '------------------------------------------------------------------------------
39cc8                 | ' Initialize the keyboard/mouse data area to start-up values.
39cc8                 | '------------------------------------------------------------------------------
39cc8                 | ' On entry:
39cc8                 | ' On exit:
39cc8                 | '------------------------------------------------------------------------------
39cc8                 | init_kbdm_data
39cc8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
39ccc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
39cd0                 | 
39cd0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
39cd4     2B ED 03 F6 |                 mov     pa, cache_end_p
39cd8                 | .loop
39cd8     61 01 4C FC |                 wrbyte  #0, ptra++
39cdc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
39ce0     F4 FF 9F CD |         if_b    jmp     #.loop
39ce4                 |         
39ce4                 |         if EMUPAD_MAX_PLAYER > 0
39ce4                 |         end
39ce4                 | 
39ce4                 | 
39ce4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
39ce8                 | .regloop
39ce8     00 EC 8F F9 |                 altd    pa
39cec     00 00 04 F6 |                 mov     0-0, #0
39cf0     01 EC 07 F1 |                 add     pa, #1
39cf4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
39cf8     EC FF 9F 5D |         if_nz   jmp     #.regloop
39cfc                 | 
39cfc     E1 E1 61 FF 
39d00     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
39d04     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
39d08     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
39d0c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
39d10                 | 
39d10     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
39d14                 | 
39d14                 | '------------------------------------------------------------------------------
39d14                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
39d14                 | ' function.
39d14                 | '------------------------------------------------------------------------------
39d14                 | ' On entry:
39d14                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
39d14                 | '   hpar2 - index number of the target interface.
39d14                 | ' On exit:
39d14                 | '------------------------------------------------------------------------------
39d14                 | hset_idle
39d14     A8 99 02 F6 |                 mov     hctwait, _2ms_
39d18     EF 02 A0 FD |                 call    #poll_waitx
39d1c     D8 0A D0 FE |                 loc     ptra, #set_idle
39d20     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
39d24     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
39d28     A0 02 80 FD |                 jmp     #control_write
39d2c                 | 
39d2c                 | '------------------------------------------------------------------------------
39d2c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
39d2c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
39d2c                 | '------------------------------------------------------------------------------
39d2c                 | ' On entry:
39d2c                 | '   ep_addr_pid - device address and enpoint for the request.
39d2c                 | ' On exit:
39d2c                 | '   retval - transaction result.
39d2c                 | '------------------------------------------------------------------------------
39d2c                 | hset_kbdled_report
39d2c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
39d30     CC 0A D0 FE |                 loc     ptra, #set_report
39d34     01 00 80 FF 
39d38     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
39d3c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39d40     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
39d44     27 EF 03 F6 |                 mov     pb, urx_buff_p
39d48     F7 77 42 FC |                 wrbyte  kb_led_states, pb
39d4c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
39d50                 | 
39d50                 | '------------------------------------------------------------------------------
39d50                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
39d50                 | '------------------------------------------------------------------------------
39d50                 | ' On entry:
39d50                 | ' On exit:
39d50                 | '------------------------------------------------------------------------------
39d50                 | hget_kbd_in_report
39d50     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
39d54     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39d58     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
39d5c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
39d60     CF 02 A0 FD |                 call    #do_int_in
39d64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39d68     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39d6c                 | 
39d6c     00 90 0F F2 |                 cmp     hpar3, #0               wz
39d70     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39d74                 | 
39d74     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
39d78     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39d7c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
39d80     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
39d84                 | 
39d84     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
39d88     18 00 B0 FD |                 call    #hkbd_compare
39d8c                 |         if EMUPAD_MAX_PLAYER > 0
39d8c                 |         end
39d8c                 | 
39d8c                 | .led_check
39d8c     3B 71 03 F6 |                 mov     htmp, kb_led_states
39d90     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
39d94     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
39d98     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
39d9c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
39da0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
39da4                 | 
39da4                 | '------------------------------------------------------------------------------
39da4                 | ' Compare current and previous keyboard data buffers for keypress changes.
39da4                 | '------------------------------------------------------------------------------
39da4                 | hkbd_compare
39da4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39da8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
39dac     61 73 07 FB |                 rdlong  htmp1, ptra++
39db0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
39db4     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
39db8     61 73 07 FB |                 rdlong  htmp1, ptra++
39dbc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
39dc0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
39dc4     2D 00 64 AD |         if_z    ret
39dc8                 | 
39dc8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
39dcc                 | 
39dcc                 |                 ' Handle modifiers
39dcc     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
39dd0     00 87 C7 FA |                 rdbyte  hr1, ptra
39dd4     C7 87 43 F9 |                 rolword hr1,hpar2,#0
39dd8     63 86 63 FD |                 mergew  hr1
39ddc     08 EC 07 F6 |                 mov     pa,#8
39de0                 | .modloop
39de0     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
39de4     E8 8C 07 F6 |                 mov     hpar1,#$E8
39de8     F6 8D 83 F1 |                 sub     hpar1,pa
39dec     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
39df0     FB ED 6F FB |                 djnz    pa,#.modloop
39df4                 | 
39df4     6F E0 75 FD | .release        modc    _set    wc
39df8                 |                 'alts    hdev_port, #hid_report_p
39df8                 |                 'mov     ptra, hid_report_p
39df8     02 F0 07 F1 |                 add     ptra, #2
39dfc     06 EC 07 F6 |                 mov     pa, #6
39e00     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
39e04     20 00 90 AD |         if_z    jmp     #.rl3
39e08     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39e0c     02 F2 07 F1 |                 add     ptrb, #2
39e10     06 EE 07 F6 |                 mov     pb, #6
39e14     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
39e18     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39e1c     08 00 90 AD |         if_z    jmp     #.rl3
39e20     FC EF 6F FB |                 djnz    pb, #.rl2
39e24     68 00 B0 FD |                 call    #hkbd_translate
39e28     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
39e2c                 | 
39e2c     00 90 07 F6 |                 mov     hpar3, #0
39e30     1F 90 27 F4 |                 bith    hpar3, #31
39e34                 | 
39e34     6F 00 74 FD | .press          modc    _clr    wc
39e38     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39e3c     02 F0 07 F1 |                 add     ptra, #2
39e40     06 EC 07 F6 |                 mov     pa, #6
39e44     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
39e48     20 00 90 AD |         if_z    jmp     #.pl3
39e4c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
39e50     02 F2 07 F1 |                 add     ptrb, #2
39e54     06 EE 07 F6 |                 mov     pb, #6
39e58     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
39e5c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39e60     08 00 90 AD |         if_z    jmp     #.pl3
39e64     FC EF 6F FB |                 djnz    pb, #.pl2
39e68     24 00 B0 FD |                 call    #hkbd_translate
39e6c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
39e70                 | 
39e70     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
39e74     08 13 F0 FE |                 loc     ptrb, #hkbd_report
39e78     28 02 64 FD |                 setq #1
39e7c     61 73 07 FB |                 rdlong  htmp1, ptra++
39e80     28 02 64 FD |                 setq #1
39e84     E1 73 67 FC |                 wrlong  htmp1, ptrb++
39e88     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
39e8c                 | 
39e8c     2D 00 64 FD |                 ret
39e90                 | 
39e90                 | '------------------------------------------------------------------------------
39e90                 | ' Translate keyboard scancode to ASCII
39e90                 | '------------------------------------------------------------------------------
39e90                 | ' On entry:
39e90                 | '   hpar1 - scancode
39e90                 | '   hpar2 - key modifiers state
39e90                 | '       c - pressed (0) or released (1) flag
39e90                 | ' On exit:
39e90                 | '   hpar1 - bit     31 = 0 pressed, 1 released
39e90                 | '               30..17 = unused
39e90                 | '                   18 = scroll-lock state 
39e90                 | '                   17 = caps-lock state
39e90                 | '                   16 = num-lock state 
39e90                 | '                15..8 = key modifiers state
39e90                 | '                 7..0 = scancode
39e90                 | '------------------------------------------------------------------------------
39e90                 | hkbd_translate
39e90     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
39e94     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
39e98     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
39e9c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
39ea0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
39ea4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
39ea8                 | 
39ea8                 |         if EMUPAD_MAX_PLAYER > 0
39ea8                 | 
39ea8                 |         if EMUPAD_BT0_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT1_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT2_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT3_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT4_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT5_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT6_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT7_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT8_BIT >= 0
39ea8                 |         end
39ea8                 |         if EMUPAD_BT9_BIT >= 0
39ea8                 |         end
39ea8                 | 
39ea8                 |         end
39ea8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
39eac     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
39eb0     1F 8C 47 F4 |                 bitc    hpar1, #31
39eb4                 |         if KEYQUEUE_SIZE > 0
39eb4     C4 09 B0 FE |                 loc pb,#keyq_head
39eb8     F7 71 E3 FA |                 rdword htmp,pb
39ebc     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
39ec0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
39ec4     B8 75 03 F6 |                 mov htmp2,htmp
39ec8     04 74 07 FA |                 mul htmp2,#4
39ecc     F7 75 03 F1 |                 add htmp2,pb
39ed0     02 74 07 F1 |                 add htmp2,#2
39ed4     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
39ed8     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
39edc     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
39ee0     F7 71 43 5C |         if_nz   wrbyte htmp,pb
39ee4                 |         end
39ee4     2D 00 7C FD |                 ret wcz
39ee8                 | 
39ee8                 | if HAVE_MOUSE
39ee8                 | '------------------------------------------------------------------------------
39ee8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
39ee8                 | '------------------------------------------------------------------------------
39ee8                 | ' On entry:
39ee8                 | ' On exit:
39ee8                 | '------------------------------------------------------------------------------
39ee8                 | hget_mouse_in_report
39ee8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
39eec     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39ef0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
39ef4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
39ef8     CF 02 A0 FD |                 call    #do_int_in
39efc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39f00     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39f04                 | 
39f04     00 90 0F F2 |                 cmp     hpar3, #0               wz
39f08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39f0c                 | 
39f0c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
39f10     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39f14     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
39f18     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
39f1c                 | 
39f1c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39f20     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
39f24     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
39f28     01 90 87 31 |         if_ae   sub     hpar3, #1
39f2c                 | 
39f2c     40 09 90 FE |                 loc     pa, #mouse_limits
39f30     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
39f34                 | 
39f34                 |                 ' load xacc,yacc,zacc
39f34     28 04 64 FD |                 setq    #3-1
39f38     80 87 07 FB |                 rdlong  hr1,ptrb
39f3c                 |                 ' load limits and outptr
39f3c     28 04 64 FD |                 setq    #3-1
39f40     F6 73 03 FB |                 rdlong  htmp1,pa
39f44                 | 
39f44     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
39f48     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
39f4c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
39f50     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
39f54     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
39f58     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
39f5c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
39f60     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
39f64                 |               
39f64                 | 
39f64     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
39f68     07 70 67 F7 |                 signx   htmp, #7
39f6c     B8 87 03 F1 |                 add     hr1,htmp
39f70     00 72 0F F2 |                 cmp     htmp1,#0 wz
39f74     B9 87 63 53 |         if_ne   fles    hr1,htmp1
39f78     00 86 47 53 |         if_ne   fges    hr1,#0
39f7c                 | 
39f7c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
39f80     07 70 67 F7 |                 signx   htmp, #7
39f84     B8 89 03 F1 |                 add     hr2,htmp
39f88     00 74 0F F2 |                 cmp     htmp2,#0 wz
39f8c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
39f90     00 88 47 53 |         if_ne   fges    hr2,#0
39f94                 |                 
39f94                 | 
39f94     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
39f98     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
39f9c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
39fa0     B8 8B 03 A1 |         if_z    add     hr3,htmp
39fa4                 | 
39fa4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
39fa8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
39fac                 | 
39fac                 |                 ' write back accumulators
39fac     28 04 64 FD |                 setq    #3-1
39fb0     80 87 67 FC |                 wrlong  hr1,ptrb
39fb4                 |                 ' if outptr set, write X/Y words
39fb4     00 76 0F F2 |                 cmp htmp3,#0                    wz
39fb8     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
39fbc     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
39fc0     2D 00 64 FD |                 ret
39fc4                 | end
39fc4                 | 
39fc4                 | '------------------------------------------------------------------------------
39fc4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39fc4                 | '------------------------------------------------------------------------------
39fc4                 | ' On entry:
39fc4                 | ' On exit:
39fc4                 | '------------------------------------------------------------------------------
39fc4                 | if _HAVE_GAMEPAD
39fc4                 | hget_gp_in_report
39fc4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39fc8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
39fcc                 | 
39fcc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39fd0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
39fd4     00 90 E3 F8 |                 getbyte hpar3
39fd8     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
39fdc     CF 02 A0 FD |                 call    #do_int_in
39fe0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39fe4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39fe8                 | 
39fe8     00 90 0F F2 |                 cmp     hpar3, #0               wz
39fec     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39ff0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
39ff0                 | 
39ff0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
39ff4     00 70 E3 F8 |                 getbyte htmp                            ' |
39ff8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39ffc     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3a000     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3a004     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3a008     B8 01 C0 F8 |                 setbyte htmp                            ' |
3a00c                 | 
3a00c                 | ' Note: the following code compares the current and previous reports
3a00c                 | ' and process the data if there are changes to ease the debug output.
3a00c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3a00c                 | ' gpPreReport buffer.
3a00c                 | 
3a00c                 |                 ' ----- start of block to remove
3a00c                 |                 {
3a00c                 |                 }
3a00c                 |                 ' ----- end of block to remove
3a00c     F4 04 90 FE |                 loc pa,#hpad_translate
3a010     2A EC 63 FD |                 push pa
3a014                 | 
3a014                 |                 ' FALL THROUGH !!!!
3a014                 | 
3a014                 | '------------------------------------------------------------------------------
3a014                 | ' Decode controller report
3a014                 | '------------------------------------------------------------------------------
3a014                 | hid_decode
3a014                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3a014     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3a018     00 04 00 FF 
3a01c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3a020                 | 
3a020     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3a024                 | 
3a024     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3a028     00 2A E3 F8 |                 getbyte hidr_type
3a02c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3a030     34 02 90 AD |         if_z    jmp     #hpad_xinput
3a034     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3a038     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3a03c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3a040     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3a044     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3a048                 |                 
3a048                 | 
3a048                 | '------------------------------------------------------------------------------
3a048                 | ' Handle HID controller (or mouse now
3a048                 | ' On entry:
3a048                 | '   ptrb - controller report
3a048                 | '------------------------------------------------------------------------------
3a048                 | hpad_hid
3a048     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a04c     F7 F1 03 F6 |                 mov     ptra, pb
3a050     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3a054     00 EC 03 F6 |                 mov     pa, 0-0
3a058                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3a058     19 2A 3B FF 
3a05c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3a060                 | 
3a060                 | .next
3a060     00 EC 5F F2 |                 cmps    pa, #0      wcz
3a064     2D 00 7C ED |         if_be   ret     wcz
3a068                 | 
3a068     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3a06c     01 EC 87 F1 |                 sub     pa, #1
3a070     00 8E 07 F6 |                 mov     hpar2, #0
3a074                 | 
3a074     C6 71 03 F6 |                 mov     htmp, hpar1
3a078     03 70 07 F5 |                 and     htmp, #$03
3a07c     01 70 0F F2 |                 cmp     htmp, #1    wz
3a080     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3a084     07 8E 67 A7 |         if_z    signx   hpar2,#7
3a088     01 EC 87 A1 |         if_z    sub     pa, #1
3a08c     02 70 0F F2 |                 cmp     htmp, #2    wz
3a090     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3a094     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3a098     02 EC 87 A1 |         if_z    sub     pa, #2
3a09c     03 70 0F F2 |                 cmp     htmp, #3    wz
3a0a0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3a0a4     04 EC 87 A1 |         if_z    sub     pa, #4
3a0a8                 | 
3a0a8     FC 8C 07 F5 |                 and     hpar1, #$FC
3a0ac                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3a0ac                 | 
3a0ac     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3a0b0     0C 01 90 AD |         if_z    jmp     #.report_id
3a0b4     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3a0b8     24 01 90 AD |         if_z    jmp     #.usage_page
3a0bc     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3a0c0     2C 01 90 AD |         if_z    jmp     #.usage
3a0c4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3a0c8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3a0cc     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3a0d0     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3a0d4     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3a0d8     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3a0dc     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3a0e0     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3a0e4     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3a0e8     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3a0ec     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3a0f0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3a0f4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3a0f8     64 FF 9F 5D |         if_nz   jmp     #.next
3a0fc                 | 
3a0fc     D8 1D A7 FB |                 tjf     hidr_state,#.next
3a100                 | 
3a100     03 8E 07 F5 |                 and     hpar2, #$03
3a104     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3a108     18 00 90 5D |         if_nz   jmp     #.skip
3a10c                 | 
3a10c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3a110     20 00 90 AD |         if_z    jmp     #.axes
3a114     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3a118     5C 00 90 AD |         if_z    jmp     #.hats
3a11c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3a120     70 00 90 AD |         if_z    jmp     #.buttons
3a124                 | .skip
3a124     8F 71 03 F6 |                 mov     htmp, hidr_size
3a128     90 71 03 FA |                 mul     htmp, hidr_count
3a12c     B8 23 03 F1 |                 add     hidr_offset, htmp
3a130     2C FF 9F FD |                 jmp     #.next
3a134                 | .axes
3a134                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3a134     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3a138     90 87 03 F6 |                 mov     hr1, hidr_count
3a13c                 | .l1
3a13c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a140     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a144     04 03 B0 FD |                 call    #hpad_getbits
3a148     64 03 B0 FD |                 call    #hpad_normalize
3a14c     06 84 1F F2 |                 cmp     hr0, #6         wcz
3a150     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3a154     00 88 43 C8 |         if_b    getnib  hr2
3a158     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3a15c     5F 01 20 C9 |         if_b    setword retval
3a160     01 84 07 C1 |         if_b    add     hr0, #1
3a164     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3a168     F4 87 6F FB |                 djnz    hr1, #.l1
3a16c                 | 
3a16c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3a170     01 1C 07 F6 |                 mov     hidr_state, #1
3a174     E8 FE 9F FD |                 jmp     #.next
3a178                 | .hats
3a178                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3a178     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a17c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a180     C8 02 B0 FD |                 call    #hpad_getbits
3a184     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3a188     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a18c     01 1C 07 F6 |                 mov     hidr_state, #1
3a190     90 FF 9F FD |                 jmp     #.skip
3a194                 | .buttons
3a194                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3a194     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a198     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a19c     90 8F 03 FA |                 mul     hpar2, hidr_count
3a1a0     A8 02 B0 FD |                 call    #hpad_getbits
3a1a4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3a1a8     B8 BF 62 F0 |                 shl     retval, htmp
3a1ac     5F 17 43 F5 |                 or      hidr_buttons, retval
3a1b0     90 71 03 F1 |                 add     htmp, hidr_count
3a1b4     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3a1b8     01 1C 07 F6 |                 mov     hidr_state, #1
3a1bc     64 FF 9F FD |                 jmp     #.skip
3a1c0                 | .report_id
3a1c0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3a1c4     2D 00 7C 5D |         if_nz   ret     wcz
3a1c8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a1cc     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3a1d0     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3a1d4     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3a1d8     01 F2 87 51 |         if_nz   sub     ptrb,#1
3a1dc     80 FE 9F FD |                 jmp     #.next
3a1e0                 | .usage_page
3a1e0     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3a1e4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3a1e8     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3a1ec     70 FE 9F FD |                 jmp     #.next
3a1f0                 | .usage
3a1f0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3a1f4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3a1f8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3a1fc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a200     5C FE 9F AD |         if_z    jmp     #.next
3a204     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3a208     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3a20c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a210     4C FE 9F AD |         if_z    jmp     #.next
3a214     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3a218     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3a21c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3a220     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3a224     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3a228     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3a22c     10 00 90 AD |         if_z    jmp     #.usage_axis
3a230     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3a234     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3a238     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3a23c     20 FE 9F FD |                 jmp     #.next
3a240                 | .usage_axis
3a240     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3a244     18 FE 9F CD |         if_b    jmp     #.next
3a248     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3a24c     C7 01 00 F8 |                 setnib  hpar2
3a250                 | 
3a250     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3a254     C7 8F C3 F9 |                 decod   hpar2
3a258     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3a25c                 | 
3a25c     01 24 07 F1 |                 add     hidr_usage_idx, #1
3a260     02 1C 07 F6 |                 mov     hidr_state, #2
3a264     F8 FD 9F FD |                 jmp     #.next
3a268                 | 
3a268                 | '------------------------------------------------------------------------------
3a268                 | ' Handle XInput controller
3a268                 | ' On entry:
3a268                 | '   ptrb - controller report
3a268                 | '------------------------------------------------------------------------------
3a268                 | '   Default implementation translates the report to a pseudo-defacto hid
3a268                 | '   standard and jumps to hpad_translate for actions.
3a268                 | '   Implementors may take specific actions for this kind of controller.
3a268                 | '------------------------------------------------------------------------------
3a268                 | hpad_xinput
3a268     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3a26c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3a270     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3a274     14 70 0F F2 |                 cmp     htmp, #$14      wz
3a278     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3a27c                 | 
3a27c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a27c                 | 
3a27c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3a280     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3a284                 | 
3a284     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3a288     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3a28c     5F BF 22 F6 |                 not     retval
3a290     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a294     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3a298     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3a29c     5F BF 22 F6 |                 not     retval
3a2a0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3a2a4                 | 
3a2a4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3a2a8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3a2ac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3a2b0     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3a2b4     F8 01 B0 FD |                 call    #hpad_normalize
3a2b8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3a2bc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3a2c0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3a2c4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3a2c8     E4 01 B0 FD |                 call    #hpad_normalize
3a2cc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3a2d0                 | 
3a2d0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3a2d4     81 BF E6 FA |                 rdword  retval, ptrb[1]
3a2d8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3a2dc     00 16 47 F4 |                 bitc    hidr_buttons, #0
3a2e0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3a2e4     01 16 47 F4 |                 bitc    hidr_buttons, #1
3a2e8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3a2ec     02 16 47 F4 |                 bitc    hidr_buttons, #2
3a2f0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3a2f4     03 16 47 F4 |                 bitc    hidr_buttons, #3
3a2f8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3a2fc     04 16 47 F4 |                 bitc    hidr_buttons, #4
3a300     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3a304     05 16 47 F4 |                 bitc    hidr_buttons, #5
3a308     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3a30c     08 16 47 F4 |                 bitc    hidr_buttons, #8
3a310     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3a314     09 16 47 F4 |                 bitc    hidr_buttons, #9
3a318     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3a31c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3a320     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3a324     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3a328     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3a32c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3a330                 | 
3a330     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a334     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3a338     7A BB 7A FF 
3a33c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3a340     F9 FF 7F FF 
3a344     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3a348     B9 71 5F F9 |                 altgn   htmp, #htmp1
3a34c     00 70 43 F8 |                 getnib  htmp
3a350     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3a354                 | 
3a354     AC 01 90 FD |                 jmp     #hpad_translate
3a358                 | 
3a358                 | '------------------------------------------------------------------------------
3a358                 | ' Handle PS3 controller
3a358                 | ' On entry:
3a358                 | '   ptrb - controller report
3a358                 | '------------------------------------------------------------------------------
3a358                 | '   Default implementation translates the report to a pseudo-defacto hid
3a358                 | '   standard and jumps to hpad_translate for actions.
3a358                 | '   Implementors may take specific actions for this kind of controller.
3a358                 | '------------------------------------------------------------------------------
3a358                 | hpad_ps3
3a358     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a35c     01 70 0F F2 |                 cmp     htmp, #$01      wz
3a360     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3a364                 | 
3a364                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a364                 | 
3a364     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3a368     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3a36c     40 01 B0 FD |                 call    #hpad_normalize
3a370     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3a374     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3a378     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3a37c     30 01 B0 FD |                 call    #hpad_normalize
3a380     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a384     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3a388     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3a38c     20 01 B0 FD |                 call    #hpad_normalize
3a390     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3a394     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3a398     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3a39c     10 01 B0 FD |                 call    #hpad_normalize
3a3a0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3a3a4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3a3a8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3a3ac                 | 
3a3ac     08 8C 07 F6 |                 mov     hpar1, #8
3a3b0     13 8E 07 F6 |                 mov     hpar2, #19
3a3b4     94 00 B0 FD |                 call    #hpad_getbits
3a3b8                 | 
3a3b8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3a3bc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3a3c0     00 16 47 F4 |                 bitc    hidr_buttons, #0
3a3c4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3a3c8     01 16 47 F4 |                 bitc    hidr_buttons, #1
3a3cc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3a3d0     02 16 47 F4 |                 bitc    hidr_buttons, #2
3a3d4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3a3d8     03 16 47 F4 |                 bitc    hidr_buttons, #3
3a3dc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3a3e0     04 16 47 F4 |                 bitc    hidr_buttons, #4
3a3e4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3a3e8     05 16 47 F4 |                 bitc    hidr_buttons, #5
3a3ec     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3a3f0     06 16 47 F4 |                 bitc    hidr_buttons, #6
3a3f4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3a3f8     07 16 47 F4 |                 bitc    hidr_buttons, #7
3a3fc     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3a400     08 16 47 F4 |                 bitc    hidr_buttons, #8
3a404     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3a408     09 16 47 F4 |                 bitc    hidr_buttons, #9
3a40c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3a410     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3a414     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3a418     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3a41c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3a420     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3a424                 | 
3a424     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a428     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3a42c     09 FA 79 FF 
3a430     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3a434     FF FA 7F FF 
3a438     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3a43c     B9 71 5F F9 |                 altgn   htmp, #htmp1
3a440     00 70 43 F8 |                 getnib  htmp
3a444     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3a448                 | 
3a448     B8 00 90 FD |                 jmp     #hpad_translate
3a44c                 | 
3a44c                 | '------------------------------------------------------------------------------
3a44c                 | ' Read bits from report data buffer
3a44c                 | '------------------------------------------------------------------------------
3a44c                 | ' On entry:
3a44c                 | '   PTRB - report buffer
3a44c                 | '   hpar1 - start bit
3a44c                 | '   hpar2 - number of bits
3a44c                 | ' On exit:
3a44c                 | '   retval - bits
3a44c                 | '------------------------------------------------------------------------------
3a44c                 | hpad_getbits
3a44c     C6 71 03 F6 |                 mov     htmp, hpar1
3a450     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3a454     F9 71 03 F1 |                 add     htmp, ptrb
3a458     B8 BF 02 FB |                 rdlong  retval, htmp
3a45c                 | 
3a45c     C6 73 03 F6 |                 mov     htmp1, hpar1
3a460     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3a464     B9 BF 42 F0 |                 shr     retval, htmp1
3a468                 | 
3a468     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3a46c     10 00 90 1D |         if_a    jmp     #.l1
3a470                 | 
3a470     C7 8F C3 F9 |                 decod   hpar2
3a474     01 8E 87 F1 |                 sub     hpar2, #1
3a478     C7 BF 02 F5 |                 and     retval, hpar2
3a47c     2D 00 64 FD |                 ret
3a480                 | .l1
3a480     FF 7F 00 FF 
3a484     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3a488     03 70 07 F1 |                 add     htmp, #3
3a48c     B8 75 03 FB |                 rdlong  htmp2, htmp
3a490     18 8E 87 F1 |                 sub     hpar2, #24
3a494     C7 8F C3 F9 |                 decod   hpar2
3a498     01 8E 87 F1 |                 sub     hpar2, #1
3a49c     B9 75 43 F0 |                 shr     htmp2, htmp1
3a4a0     C7 75 03 F5 |                 and     htmp2, hpar2
3a4a4     18 74 67 F0 |                 shl     htmp2, #24
3a4a8     BA BF 42 F5 |                 or      retval, htmp2
3a4ac     2D 00 64 FD |                 ret
3a4b0                 | 
3a4b0                 | '------------------------------------------------------------------------------
3a4b0                 | ' Normalize value to signed word (-32768 / 32767)
3a4b0                 | '------------------------------------------------------------------------------
3a4b0                 | ' On entry:
3a4b0                 | '   retval - value to normalize
3a4b0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3a4b0                 | '   - or -
3a4b0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3a4b0                 | '   hidr_size - value bits length
3a4b0                 | ' On exit:
3a4b0                 | '   retval - normalized value
3a4b0                 | '------------------------------------------------------------------------------
3a4b0                 | hpad_normalize
3a4b0     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3a4b4     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3a4b8     2D 00 64 AD |         if_z    ret
3a4bc     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3a4c0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3a4c4     0F 72 77 F7 |                 signx   htmp1, #15      wc
3a4c8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3a4cc     00 BE 66 C7 |         if_c    signx   retval, #0-0
3a4d0     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3a4d4     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3a4d8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3a4dc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3a4e0     B8 71 53 F6 |                 abs     htmp            wc
3a4e4     1F BE 0E F4 |                 testb   retval, #31     wz
3a4e8     5F BF 42 F6 |                 abs     retval
3a4ec     B8 BF 12 FD |                 qdiv    retval, htmp
3a4f0     18 BE 62 FD |                 getqx   retval
3a4f4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3a4f8     C0 FF 7F FF 
3a4fc     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3a500     2D 00 64 FD |                 ret
3a504                 | 
3a504                 | '------------------------------------------------------------------------------
3a504                 | ' Perform controller actions
3a504                 | ' On entry:
3a504                 | '    hidr_id        report id
3a504                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3a504                 | '                      X = hidr_axis+0, #0
3a504                 | '                      Y = hidr_axis+0, #1
3a504                 | '                      Z = hidr_axis+1, #0
3a504                 | '                     RX = hidr_axis+1, #1
3a504                 | '                     RY = hidr_axis+2, #0
3a504                 | '                     RZ = hidr_axis+2, #1
3a504                 | '    hidr_buttons   buttons state (bits 0 to 31)
3a504                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3a504                 | '
3a504                 | '                     -------3 -------2 -------1 -------0 byte
3a504                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3a504                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3a504                 | '                                zyx||| |||||||| ++++++++ n. buttons
3a504                 | '                                |||||| ||||++++--------- n. axes
3a504                 | '                                |||||| ++++------------- n. hats
3a504                 | '                                ++++++------------------ valid axes
3a504                 | '------------------------------------------------------------------------------
3a504                 | hpad_translate
3a504                 | 
3a504                 | 
3a504                 |         if HAVE_HIDPAD
3a504     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3a508     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3a50c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3a510     01 70 E7 F2 |                 cmpsub  htmp,#1
3a514     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3a518     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3a51c     2D 00 7C 3D |         if_ae   ret     wcz
3a520     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3a524     B8 F3 03 F1 |                 add     ptrb,htmp
3a528     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3a52c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3a530     28 0C 64 FD |                 setq    #7-1
3a534     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3a538                 |         end
3a538                 | 
3a538                 | 
3a538                 |         if EMUPAD_MAX_PLAYER > 0
3a538                 | .emupad_no_hat
3a538                 |         if EMUPAD_BT0_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT1_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT2_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT3_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT4_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT5_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT6_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT7_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT8_BIT >= 0
3a538                 |         end
3a538                 |         if EMUPAD_BT9_BIT >= 0
3a538                 |         end
3a538                 | .emupad_slot_over
3a538                 |         end
3a538                 | 
3a538                 |         if 0
3a538                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3a538                 | 
3a538                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3a538                 | 
3a538                 |         end
3a538     2D 00 64 FD |                 ret
3a53c                 | end
3a53c                 | 
3a53c                 | if EMUPAD_MAX_PLAYER > 0
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | ' Clear EmuPad state
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | emupad_reset
3a53c                 | 
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | ' Get EmuPad Player number for current device (into retval)
3a53c                 | ' Z flag is also set if current device is valid
3a53c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | emupad_getnum
3a53c                 | .loop
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | emupad_discon
3a53c                 | .loop         
3a53c                 |         
3a53c                 |         ' FALL THROUGH!!!
3a53c                 | 
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | ' Update EmuPad reports (all of them...)
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | emupad_write_reports
3a53c                 | .devloop
3a53c                 | 
3a53c                 | end
3a53c                 | 
3a53c                 | 
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | ' On entry:
3a53c                 | ' On exit:
3a53c                 | '------------------------------------------------------------------------------
3a53c                 | hget_hub_status
3a53c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3a540     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a544     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3a548     01 90 2F F9 |                 setword hpar3, #1, #1
3a54c     CF 02 A0 FD |                 call    #do_int_in
3a550     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a554     0C 00 90 AD |         if_z    jmp     #.data
3a558     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3a55c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3a560     2D 00 64 FD |                 ret
3a564                 | .data
3a564     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a568     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a56c                 | 
3a56c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3a570     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3a574     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3a578     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3a57c                 |                 debug(ubin_long(hub_status_chg))
3a57c                 | 
3a57c     01 5A 06 F6 |                 mov     hdev_port, #1
3a580                 | .loop
3a580     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3a584     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3a588     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3a58c     F0 FF 9F 3D |         if_nc   jmp     #.loop
3a590     2D 00 64 FD |                 ret
3a594                 | 
3a594                 | hub_port_handler
3a594     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3a598     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a59c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a5a0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a5a4     55 02 A0 FD |                 call    #control_read
3a5a8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3a5ac                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3a5ac                 | 
3a5ac     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3a5b0     50 01 90 5D |         if_x0   jmp     #.other
3a5b4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3a5b8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3a5bc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a5c0     A0 02 A0 FD |                 call    #control_write
3a5c4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3a5c8     7C 01 90 5D |         if_x0   jmp     #.disconnect
3a5cc     B0 99 02 F6 |                 mov     hctwait, _100ms_
3a5d0     EF 02 A0 FD |                 call    #poll_waitx
3a5d4                 | 
3a5d4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3a5d8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3a5dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a5e0     A0 02 A0 FD |                 call    #control_write
3a5e4                 | 
3a5e4     02 76 07 F6 |                 mov     htmp3, #2
3a5e8                 | .wait_reset
3a5e8     AC 99 02 F6 |                 mov     hctwait, _8ms_
3a5ec     EF 02 A0 FD |                 call    #poll_waitx
3a5f0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a5f4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a5f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a5fc     55 02 A0 FD |                 call    #control_read
3a600     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3a604     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3a608     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3a60c                 | 
3a60c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3a610     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3a614     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a618     A0 02 A0 FD |                 call    #control_write
3a61c                 | 
3a61c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3a620                 | .wait_recover
3a620     A7 99 02 F6 |                 mov     hctwait, _1ms_
3a624     EF 02 A0 FD |                 call    #poll_waitx
3a628     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3a62c                 | 
3a62c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a630     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3a634     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3a638                 | 
3a638     00 08 00 FF 
3a63c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3a640     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3a644     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3a648     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3a64c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3a650     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a654     48 01 90 5D |         if_nz   jmp     #.done
3a658                 | .get_dev_desc
3a658     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3a65c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3a660     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3a664     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3a668     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3a66c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3a670     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3a674     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a678     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3a67c     AC 99 02 F6 |                 mov     hctwait, _8ms_
3a680     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3a684     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3a688     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3a68c     BE 00 A0 FD |                 call    #calc_crc5
3a690     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3a694     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3a698     F7 AD C2 FA |                 rdbyte  total_data, pb
3a69c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3a6a0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3a6a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a6a8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3a6ac     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3a6b0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3a6b4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3a6b4     9F 99 02 F6 |                 mov     hctwait, _500us_
3a6b8     EF 02 A0 FD |                 call    #poll_waitx
3a6bc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3a6c0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3a6c4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3a6c8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3a6cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a6d0     CC 00 90 5D |         if_nz   jmp     #.done
3a6d4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3a6d8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3a6dc     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3a6e0     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3a6e4     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3a6e8     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3a6ec     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3a6f0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3a6f4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3a6f8     A4 00 90 CD |         if_b    jmp     #.done
3a6fc     6C F0 BF FD |                 call    #hparse_con_desc
3a700     9C 00 90 FD |                 jmp     #.done
3a704                 | 
3a704                 | .other
3a704     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3a708     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3a70c     28 00 90 AD |         if_x1   jmp     #.reset_feature
3a710     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3a714     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3a718     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3a71c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3a720     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3a724     10 00 90 AD |         if_x1   jmp     #.reset_feature
3a728     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3a72c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3a730     04 00 90 AD |         if_x1   jmp     #.reset_feature
3a734     68 00 90 FD |                 jmp     #.done
3a738                 | .reset_feature
3a738     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3a73c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a740     A0 02 A0 FD |                 call    #control_write
3a744     58 00 90 FD |                 jmp     #.done
3a748                 | .disconnect
3a748                 | 
3a748     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3a74c     00 70 E3 F8 |                 getbyte htmp
3a750     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3a754     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3a758     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3a75c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3a760     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3a764     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3a768                 |         if EMUPAD_MAX_PLAYER > 0
3a768                 |         end
3a768                 |         if HAVE_MOUSE
3a768     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3a76c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3a770     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3a774                 |         end
3a774                 |         if HAVE_HIDPAD
3a774     14 0A F0 FE |                 loc ptrb,#hidpad_report
3a778     2D 71 03 F6 |                 mov htmp,hdev_port
3a77c     01 70 E7 F2 |                 cmpsub htmp,#1
3a780     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3a784     B8 F3 03 F1 |                 add ptrb,htmp
3a788     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3a78c     80 01 6C FC |                 wrlong #0,ptrb
3a790                 |         end
3a790                 | 
3a790     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3a794     00 00 C4 F8 |                 setbyte #0
3a798     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a79c     00 00 04 F6 |                 mov     0-0, #0
3a7a0                 | 
3a7a0                 | .done
3a7a0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3a7a4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3a7a8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3a7ac     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3a7b0     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3a7b4     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3a7b8                 | 
3a7b8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a7bc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a7c0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a7c4     55 02 A0 FD |                 call    #control_read
3a7c8     00 69 06 FB |                 rdlong  hub_port_status, ptra
3a7cc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3a7cc     2D 00 64 FD |                 ret
3a7d0                 | 
3a7d0                 | '------------------------------------------------------------------------------
3a7d0                 | ' Partially populated SETUP packets
3a7d0                 | '------------------------------------------------------------------------------
3a7d0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3a7d1     06          |                 byte    REQ_GET_DESC
3a7d2     00 01       |                 word    TYPE_DEVICE << 8
3a7d4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a7d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a7d8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3a7d9     06          |                 byte    REQ_GET_DESC
3a7da     00 02       |                 word    TYPE_CONFIG << 8
3a7dc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a7de     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a7e0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3a7e1     09          |                 byte    REQ_SET_CONFIG
3a7e2     00 00       |                 word    0       ' Configuration value
3a7e4     00 00       |                 word    0       ' Zero
3a7e6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3a7e8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3a7e9     05          |                 byte    REQ_SET_ADDR
3a7ea     00 00       |                 word    0       ' Zero
3a7ec     00 00       |                 word    0       ' Zero
3a7ee     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3a7f0                 | '------------------------------------------------------------------------------
3a7f0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3a7f0                 | ' wValue field dictates which protocol should be used.
3a7f0                 | '
3a7f0                 | ' When initialized, all devices default to report protocol. However the host
3a7f0                 | ' should not make any assumptions about the device state and should set the
3a7f0                 | ' desired protocol whenever initializing a device.
3a7f0                 | '------------------------------------------------------------------------------
3a7f0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a7f1     0B          |                 byte    HID_SET_PROTO
3a7f2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3a7f4                 |                                                 ' (HID 1.11 Section 7.2.6).
3a7f4     00 00       |                 word    0               ' Interface index number.
3a7f6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3a7f8                 | '------------------------------------------------------------------------------
3a7f8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a7f9     0A          |                 byte    HID_SET_IDLE
3a7fa     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3a7fc                 |                                         ' reporting until a change is detected in the report data
3a7fc                 | 
3a7fc                 |                                         ' (HID 1.11 Section 7.2.4).
3a7fc     00 00       |                 word    0       ' Interface index number.
3a7fe     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3a800     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a801     09          |                 byte    HID_SET_REPORT
3a802     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3a804                 |                                         ' (HID 1.11 Section 7.2.2).
3a804     00 00       |                 word    0       ' Interface index number.
3a806     00 00       |                 word    0       ' Size of the report, in bytes.
3a808     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3a809     06          |                 byte    REQ_GET_DESC
3a80a     00 22       |                 word    TYPE_REPORT << 8
3a80c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a80e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a810                 | '------------------------------------------------------------------------------
3a810     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3a811     06          |                 byte    REQ_GET_DESC
3a812     00 29       |                 word    TYPE_HUB << 8
3a814     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a816     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a818     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3a819     03          |                 byte    REQ_SET_FEATURE
3a81a     00 00       |                 word    0       ' port power
3a81c     01 00       |                 word    1       ' Port index number (1+)
3a81e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a820     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3a821     01          |                 byte    REQ_CLEAR_FEATURE
3a822     00 00       |                 word    0       ' port power
3a824     01 00       |                 word    1       ' Port index number (1+)
3a826     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a828     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3a829     00          |                 byte    REQ_GET_STATUS
3a82a     00 00       |                 word    0
3a82c     01 00       |                 word    1       ' Port index number (1+)
3a82e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3a830                 | '------------------------------------------------------------------------------
3a830                 | if _HAVE_GAMEPAD
3a830     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3a834                 | ps3_command_buff
3a834     00 00 00 00 
3a838     00          |                 byte    $00, $00, $00, $00, $00
3a839     00 00 00 00 
3a83d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3a83e     FF 27 10 00 
3a842     32          |                 byte    $FF, $27, $10, $00, $32
3a843     FF 27 10 00 
3a847     32          |                 byte    $FF, $27, $10, $00, $32
3a848     FF 27 10 00 
3a84c     32          |                 byte    $FF, $27, $10, $00, $32
3a84d     FF 27 10 00 
3a851     32          |                 byte    $FF, $27, $10, $00, $32
3a852     00 00 00 00 
3a856     00          |                 byte    $00, $00, $00, $00, $00
3a857     00 00 00 00 
3a85b     00          |                 byte    $00, $00, $00, $00, $00
3a85c     00 00 00 00 
3a860     00          |                 byte    $00, $00, $00, $00, $00
3a861     00 00 00    |                 byte    $00, $00, $00
3a864                 | '------------------------------------------------------------------------------
3a864     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3a867                 |                                         ' 0x01 All blinking
3a867                 |                                         ' 0x02 1 flashes, then on
3a867                 |                                         ' 0x03 2 flashes, then on
3a867                 |                                         ' 0x04 3 flashes, then on
3a867                 |                                         ' 0x05 4 flashes, then on
3a867                 |                                         ' 0x06 1 on
3a867                 |                                         ' 0x07 2 on
3a867                 |                                         ' 0x08 3 on
3a867                 |                                         ' 0x09 4 on
3a867                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3a867                 |                                         ' 0x0B Blinking*
3a867                 |                                         ' 0x0C Slow blinking*
3a867                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3a867     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3a86a     00          |                 byte    $00             ' Left rumble
3a86b     00          |                 byte    $00             ' Right rumble
3a86c     00 00 00    |                 byte    $00, $00, $00
3a86f     00          | end
3a870                 | alignl
3a870                 | 
3a870                 | if HAVE_MOUSE
3a870     00 00 00 00 
3a874     00 00 00 00 | mouse_limits long 0[2]
3a878     00 00 00 00 | mouse_outptr long 0
3a87c                 | end
3a87c                 | 
3a87c                 | if KEYQUEUE_SIZE > 0
3a87c     00          | keyq_head byte 0
3a87d     00          | keyq_tail byte 0
3a87e     00 00 00 00 
      ...             
3aa7a     00 00 00 00 
3aa7e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3aa80                 | alignl
3aa80                 | end
3aa80                 | 
3aa80                 | if EMUPAD_MAX_PLAYER > 0
3aa80                 | emupad_rule_buffer
3aa80                 | if EMUPAD_BUILTIN_RULES
3aa80                 | file "padmap_builtin.dat"
3aa80                 | end
3aa80                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3aa80                 | '' Default rule directly follows!
3aa80                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3aa80                 | end
3aa80                 | 
3aa80                 | '------------------------------------------------------------------------------
3aa80                 | ' The USB data cache area gets zero-filled at every device disconnect
3aa80                 | '------------------------------------------------------------------------------
3aa80                 | usb_cache_start
3aa80                 | 
3aa80                 | ' HID descriptor and report buffers
3aa80                 | if !!OVERLAP_MEMORY
3aa80     00 00 00 00 
      ...             
3b178     00 00 00 00 
3b17c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3b180                 | end
3b180     00 00 00 00 
3b184     00 00 00 00 | hkbd_report     byte    0[8]
3b188     00 00 00 00 | hkbd_led_rep    byte    0
3b18c                 | alignl
3b18c                 | 
3b18c                 | if HAVE_HIDPAD
3b18c     00 00 00 00 
      ...             
3b248     00 00 00 00 
3b24c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3b250                 | end
3b250                 | 
3b250                 | ' HUB descriptor
3b250     00          | hub_descr       byte    0   ' bDescLength
3b251     00          |                 byte    0   ' bDescriptorType
3b252     00          |                 byte    0   ' bNbrPorts
3b253     00 00       |                 word    0   ' wHubCharacteristics
3b255     00          |                 byte    0   ' bPwrOn2PwrGood
3b256     00          |                 byte    0   ' bHubContrCurrent
3b257     00          |                 byte    0   ' DeviceRemoveable
3b258     00          |                 byte    0   ' PortPwrCtrlMask
3b259                 | 
3b259                 | usb_cache_end
3b259                 | 
3b259                 | if HAVE_MOUSE
3b259     00 00 00 00 | mouse_xacc      long 0
3b25d     00 00 00 00 | mouse_yacc      long 0
3b261     00 00 00 00 | mouse_zacc      long 0
3b265     00          | mouse_bstate    byte 0
3b266     00          | mouse_lpending  byte 0
3b267     00          | mouse_rpending  byte 0
3b268     00          | mouse_mpending  byte 0
3b269     00          | mouse_lock      byte 0
3b26a     00 00 00    |                 byte 0[3] ' padding
3b26d                 | end
3b26d                 | 
3b26d     00 00 00 00 
      ...             
3b2e5     00 00 00 00 
3b2e9     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3b2ed     00 00 00 00 
3b2f1     00 00 00 00 
3b2f5     00 00 00 00 
3b2f9     00 00 00 00 
3b2fd     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3b2ff     00 00 00 00 
      ...             
3b3f7     00 00 00 00 
3b3fb     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3b3ff                 | 
3b3ff     00          | driver_cog      byte    0                       ' Current driver cog + 1
3b400                 | 	alignl
3b400                 | _audio096_spin2_dat_
3b400                 | 
3b400                 | audio       org     0
3b400                 | 
3b400     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3b404     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3b408     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3b40c                 |  
3b40c     01 EC 63 FD |             cogid   pa                   ' compute cogid
3b410     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3b414     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3b418     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3b41c                 | 
3b41c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3b420     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3b424     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3b428     0F 24 06 FC |             wrpin   dac2,#right
3b42c     0F 00 1E FC |             wxpin   #256,#right    
3b430     41 9C 64 FD |             dirh    #left addpins 1
3b434     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3b438     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3b43c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3b440                 |             
3b440                 | '---------------------------------------------------------------------------------        
3b440                 | '----------------- The main loop -------------------------------------------------
3b440                 | '---------------------------------------------------------------------------------
3b440                 | 
3b440     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3b444     10 00 90 CD |       if_c  jmp     #loop1
3b448                 |   
3b448     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3b44c     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3b450     D5 00 80 F1 |             sub     0-0,a40000000
3b454     FD 01 6E FB |             djnz    cn,#p402
3b458                 |     
3b458     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3b45c     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3b460     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3b464     01 00 06 C6 |     if_c    mov     cn,#1
3b468     DA 02 3A F3 |             fle     ct,time3 wcz
3b46c     02 00 06 C6 |     if_c    mov     cn,#2     
3b470     DB 02 3A F3 |             fle     ct,time4 wcz
3b474     03 00 06 C6 |     if_c    mov     cn,#3
3b478     DC 02 3A F3 |             fle     ct,time5 wcz
3b47c     04 00 06 C6 |     if_c    mov     cn,#4
3b480     DD 02 3A F3 |             fle     ct,time6 wcz
3b484     05 00 06 C6 |     if_c    mov     cn,#5
3b488     DE 02 3A F3 |             fle     ct,time7 wcz
3b48c     06 00 06 C6 |     if_c    mov     cn,#6
3b490     DF 02 3A F3 |             fle     ct,time8 wcz
3b494     07 00 06 C6 |     if_c    mov     cn,#7
3b498                 | 
3b498                 | 
3b498                 | '----------------------------------------------------------------------------------
3b498                 | '------------- Compute channel samples --------------------------------------------
3b498                 | '----------------------------------------------------------------------------------
3b498                 | 
3b498                 | 
3b498     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3b49c     06 C0 65 F0 |             shl     channeladd,#6
3b4a0     E0 F0 03 F1 |             add     ptra,channeladd
3b4a4                 | 
3b4a4     28 16 64 FD |             setq    #11                        	' read parameters
3b4a8     00 D7 05 FB |             rdlong  pointer0,ptra
3b4ac                 |     	    
3b4ac     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3b4b0     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3b4b4     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3b4b8     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3b4bc     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3b4c0     00 C4 0D F2 |             cmp     qq,#0 wz                         
3b4c4     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3b4c8     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3b4cc                 |             
3b4cc     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3b4d0     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3b4d4     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3b4d8                 | 
3b4d8     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3b4dc     EC 08 3A F9 |             getword oldrs,sample0,#1
3b4e0     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3b4e4     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3b4e8     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3b4ec     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3b4f0                 | 
3b4f0     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3b4f4     00 04 02 F6 |             mov     dt0,0-0    
3b4f8     D7 04 82 F1 |             sub     dt0,time0
3b4fc                 |             
3b4fc     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3b500     FB 00 00 F1 |             add     0-0,afreq0  	
3b504                 |             
3b504                 | '---- envelopes
3b504                 |             
3b504     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3b508     20 00 00 AF 
3b50c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3b510     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3b514                 | 
3b514     FB 48 02 F6 |             mov     envs1,afreq0
3b518     F5 48 02 FA |             mul     envs1,envspd0
3b51c     24 E7 01 F1 |             add     envph0,envs1 
3b520                 | 
3b520     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3b524     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3b528     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3b52c     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3b530     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3b534     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3b538     00 46 06 36 |     if_ge   mov     envlo,#0
3b53c     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3b540     16 E6 65 30 |     if_ge   shl     envph0,#22
3b544                 | 
3b544     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3b548     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3b54c     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3b550     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3b554     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3b558     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3b55c     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3b560     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3b564     23 49 02 FA |             mul     envs1,envlo
3b568     25 49 02 F1 |             add     envs1,envs2
3b56c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3b570                 |             
3b570     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3b574     1B C6 61 AD |     if_z    getrnd  spl
3b578     58 00 90 AD |     if_z    jmp     #p406
3b57c                 |  
3b57c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3b580     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3b584     08 D6 45 F0 |             shr     pointer0,#8
3b588                 |          
3b588     1F DA 0D F4 |             testb   sstart0,#31 wz            
3b58c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3b590     1C DA 0D F4 |             testb   sstart0,#28 wz            
3b594     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3b598                 |         
3b598     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3b59c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3b5a0     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3b5a4                 |             
3b5a4     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3b5a8     ED C4 01 F1 |             add     qq,sstart0            
3b5ac                 | 
3b5ac     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3b5b0     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3b5b4     1C 01 B0 1D |     if_gt   call    #cache_read
3b5b8                 |          
3b5b8     1F DA 0D F4 |             testb   sstart0,#31 wz 
3b5bc     08 C6 65 50 |     if_nz   shl     spl,#8
3b5c0     08 D6 65 50 |     if_nz   shl     pointer0,#8
3b5c4     07 D6 65 A0 |     if_z    shl     pointer0,#7
3b5c8     1C DA 0D F4 |             testb   sstart0,#28 wz            
3b5cc     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3b5d0     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3b5d4                 | 
3b5d4                 | 
3b5d4     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3b5d8     00 C6 01 F6 |             mov     spl,0-0
3b5dc     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3b5e0     00 C6 01 F6 |             mov     spl,0-0
3b5e4                 | 
3b5e4     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3b5e8     00 0A 02 F6 |             mov     ls0,0-0
3b5ec     20 00 00 FF 
3b5f0     00 C4 05 F6 |             mov     qq,##16384
3b5f4     FE C4 81 F1 |             sub     qq,apan0
3b5f8     E2 C6 31 FA |             scas    spl,qq
3b5fc     00 0C 02 F6 |             mov     rs0, 0-0
3b600                 | 
3b600     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3b604     06 11 02 F1 |             add     rs,rs0
3b608     03 0F 82 F1 |             sub     ls,oldls
3b60c     05 0F 02 F1 |             add     ls,ls0
3b610                 |    
3b610     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3b614     05 D9 21 F9 |             setword sample0,ls0,#0
3b618                 |             
3b618     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3b61c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3b620     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3b624                 |   '  if_z    mov     sample0,#0
3b624     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3b628     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3b62c     04 00 00 AF 
3b630     00 B0 05 A1 |     if_z    add     time1,##2048
3b634     D8 B2 01 A6 |     if_z    mov     time2,time1
3b638     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3b63c                 | 
3b63c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3b640     00 D7 65 FC |             wrlong  pointer0,ptra
3b644     08 E7 65 FC |             wrlong  envph0,ptra[8]
3b648     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3b64c                 |                       
3b64c     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3b650     FF C3 25 A7 |     if_z    decmod  front, #511          
3b654                 |          
3b654     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3b658     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3b65c     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3b660     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3b664                 | 	    
3b664                 | 		    
3b664     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3b668     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3b66c     04 15 02 F6 |             mov     newsample, oldrs       
3b670                 | 
3b670     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3b674     02 AF 01 F1 |             add     time0,dt0    
3b678                 |                                      
3b678     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3b67c     D8 FD 9F AD |     if_z    jmp     #loop1
3b680     02 C5 01 F6 |             mov     qq,dt0
3b684                 | 
3b684                 |     
3b684                 |             
3b684     01 4E 36 F0 | p301        rol     dropper,#1 wc
3b688     40 00 90 3D |     if_nc   jmp     #p399
3b68c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3b690     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3b694     F4 FF 9F AD |     if_e    jmp     #p398   
3b698                 | 		
3b698     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3b69c     20 00 90 AD |     if_z    jmp     #p302	   
3b6a0                 |   
3b6a0     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3b6a4     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3b6a8     02 1E 66 C0 |     if_c    shl     scptr2,#2
3b6ac     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3b6b0     60 1E 66 FC |             wrlong  scptr2,#$60
3b6b4     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3b6b8     01 00 00 CF 
3b6bc     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3b6c0                 | 			    
3b6c0     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3b6c4     00 00 00 FF 
3b6c8     FF C3 05 F7 |             incmod  front, ##511
3b6cc     ED C5 6D FB | p399        djnz    qq,#p301
3b6d0                 |             
3b6d0     6C FD 9F FD |             jmp     #loop            'loop
3b6d4                 | 
3b6d4                 | '----------------------------------------------------------------------------------
3b6d4                 | '------------- This is the end of the main loop -----------------------------------
3b6d4                 | '----------------------------------------------------------------------------------
3b6d4                 | 
3b6d4                 | '----------------------------------------------------------------------------------
3b6d4                 | '------------- PSRAM cache ----------- --------------------------------------------
3b6d4                 | '----------------------------------------------------------------------------------
3b6d4                 | 
3b6d4                 | ' There are 8 cache pointers for 8 channels
3b6d4                 | ' if 24 higher bits of address=cache, then get a word from the cache
3b6d4                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3b6d4                 | 
3b6d4                 | 
3b6d4     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3b6d8                 |             
3b6d8     E2 40 02 F6 | 	    mov     addrhi,qq		
3b6dc     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3b6e0     14 01 96 F9 | 	    alts    cn,#cache1            
3b6e4     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3b6e8     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3b6ec                 | 	
3b6ec     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3b6f0     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3b6f4     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3b6f8     08 38 66 F0 | 	    shl     cmd,#8
3b6fc     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3b700     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3b704     08 3A 66 F0 |             shl     hubaddr,#8                  '
3b708     13 3B 02 F1 |             add     hubaddr,hubptr 
3b70c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3b710     28 04 64 FD |             setq    #2                          ' write 3 longs
3b714     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3b718     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3b71c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3b720                 |             
3b720                 | 	
3b720     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3b724     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3b728     13 C5 01 F1 | 	    add     qq,hubptr
3b72c     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3b730     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3b734                 |           
3b734                 | 
3b734                 | '--------------------------------------------------------------------------
3b734                 | '------ Interrupt service -------------------------------------------------
3b734                 | '------ Output the sample, get the next one if exists ---------------------
3b734                 | '--------------------------------------------------------------------------
3b734                 | 
3b734     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3b738     0F D0 25 FC |             wypin   rsample,#right       '4
3b73c     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3b740     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3b744     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3b748     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3b74c     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3b750                 |     
3b750     F5 FF 3B FB |             reti1                        '17/19 
3b754                 |           
3b754                 | '---------------------------------------------------------------------------
3b754                 | '-------- End of interrupt -------------------------------------------------
3b754                 | '---------------------------------------------------------------------------    
3b754                 | 
3b754                 | 
3b754                 | '---------------------------------------------------------------------------
3b754                 | '------- Variables ---------------------------------------------------------
3b754                 | '---------------------------------------------------------------------------
3b754                 | 
3b754                 | ' constants
3b754                 | 
3b754     00 00 00 40 | a40000000   long $40000000
3b758     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3b75c                 | 
3b75c                 | ' Time variables
3b75c                 | 
3b75c     00 00 00 00 | time0       long 0    ' Global sample computing time
3b760     01 00 00 00 | time1       long 1    ' Local channels time
3b764     02 00 00 00 | time2       long 2
3b768     03 00 00 00 | time3       long 3
3b76c     04 00 00 00 | time4       long 4
3b770     05 00 00 00 | time5       long 5
3b774     06 00 00 00 | time6       long 6
3b778     07 00 00 00 | time7       long 7
3b77c     08 00 00 00 | time8       long 8
3b780                 | 
3b780     00 00 00 00 | channeladd long 0
3b784                 | 
3b784     00 00 00 00 | front       long 0
3b788                 | 
3b788                 | ' temporary variables 
3b788     00 00 00 00 | qq          long 0
3b78c     00 00 00 00 | spl         long 0
3b790     00 00 00 00 | zero        long 0
3b794     00 00 00 00 | mailbox     long 0
3b798     00 00 00 00 | mailbox2 long 0
3b79c                 | 
3b79c                 | ' Interrupt ISR variables
3b79c                 | 
3b79c     00 00 00 00 | lsample     long 0
3b7a0     00 00 00 00 | rsample     long 0
3b7a4     00 00 00 00 | lsnext      long 0
3b7a8     00 00 00 00 | rsnext      long 0 
3b7ac                 | 
3b7ac                 | ' channel parameter block
3b7ac                 | 
3b7ac     00 00 00 00 | pointer0    long 0     
3b7b0     00 00 00 00 | sample0     long 0
3b7b4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3b7b8     00 00 00 00 | lstart0     long 0
3b7bc     00 00 00 00 | lend0       long 0
3b7c0     00 00 00 00 | volpan0     long 0
3b7c4     00 00 00 00 | freqskip0   long 0
3b7c8     00 00 00 00 | command0    long 0
3b7cc     00 00 00 00 | envph0	    long 0
3b7d0     00 00 00 00 | envptr0	    long 0
3b7d4     00 00 00 00 | envspd0	    long 0
3b7d8     00 00 00 00 | envlen0	    long 0
3b7dc     00 00 00 00 | res5	    long 0
3b7e0     00 00 00 00 | res6	    long 0
3b7e4     00 00 00 00 | res7	    long 0
3b7e8     00 00 00 00 | res8	    long 0
3b7ec                 | 
3b7ec     00 00 00 00 | afreq0      long 0
3b7f0     00 00 00 00 | askip0      long 0
3b7f4     00 00 00 00 | avol0       long 0
3b7f8     00 00 00 00 | apan0       long 0
3b7fc                 | 
3b7fc     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3b800     00 00 00 00 | cn          long 0
3b804     00 00 00 00 | ct          long 0
3b808     00 00 00 00 | dt0         long 0
3b80c                 | 
3b80c                 | ' Samples
3b80c     00 00 00 00 | oldls       long 0
3b810     00 00 00 00 | oldrs       long 0
3b814                 | 
3b814     00 00 00 00 | ls0         long 0
3b818     00 00 00 00 | rs0         long 0
3b81c                 | 
3b81c     00 00 00 00 | ls          long 0    
3b820     00 00 00 00 | rs          long 0
3b824                 | 
3b824     00 00 00 00 | oldsample   long 0
3b828     00 00 00 00 | newsample   long 0
3b82c                 | 
3b82c     00 00 00 00 | nrsample    long 0
3b830     00 00 00 00 | nlsample    long 0
3b834                 | 
3b834     00 00 00 00 | scbase long 0
3b838     00 00 00 00 | scptr long 0
3b83c     00 00 00 00 | scptr2 long 0
3b840     00 00 00 00 | scope long 0
3b844                 | 
3b844     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3b848     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3b84c                 | 
3b84c     00 18 07 00 | hubptr      long $71800
3b850     00 00 00 00 | cache1      long 0
3b854     00 00 00 00 | cache2      long 0
3b858     00 00 00 00 | cache3      long 0
3b85c     00 00 00 00 | cache4      long 0
3b860     00 00 00 00 | cache5      long 0
3b864     00 00 00 00 | cache6      long 0
3b868     00 00 00 00 | cache7      long 0
3b86c     00 00 00 00 | cache8      long 0
3b870                 | 
3b870                 | 
3b870     00 00 00 00 | cmd         long 0
3b874     00 00 00 00 | hubaddr     long 0
3b878     00 01 00 00 | count       long 256
3b87c     00 00 00 00 | addrlo long 0
3b880     00 00 00 00 | addrhi long 0
3b884     00 00 00 00 | pointer00 long 0
3b888     00 00 00 00 | envhi long 0
3b88c     00 00 00 00 | envlo long 0
3b890     00 00 00 00 | envs1 long 0
3b894     00 00 00 00 | envs2 long 0
3b898     00 00 00 00 | noise0 long 0
3b89c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3b8a0     00 00 00 00 
3b8a4     00 00 00 00 | null  			long 	0,0           ' for channel reset
3b8a8                 | 	alignl
3b8a8                 | __system__dat_
3b8a8     00 00 00 00 
3b8ac     00 00 00 00 | 	byte	$00[8]
3b8b0     03 00 00 00 
3b8b4     00 00 00 00 
3b8b8     00 00 00 00 
3b8bc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b8c0     00 00 00 00 
      ...             
3bb4c     00 00 00 00 
3bb50     00 00 00 00 | 	byte	$00[660]
3bb54     00 00 80 09 | 	long	(152 {__system____root_opendir})<<20
3bb58     00 00 90 09 | 	long	(153 {__system____root_closedir})<<20
3bb5c     00 00 A0 09 | 	long	(154 {__system____root_readdir})<<20
3bb60     00 00 B0 09 | 	long	(155 {__system____root_stat})<<20
3bb64     00 00 00 00 
3bb68     00 00 00 00 
3bb6c     00 00 00 00 
3bb70     00 00 00 00 
3bb74     00 00 00 00 
3bb78     00 00 00 00 
3bb7c     00 00 00 00 | 	byte	$00[28]
3bb80     E8 BB 03 00 | 	long	@@@__system__dat_ + 832
3bb84     EB BB 03 00 | 	long	@@@__system__dat_ + 835
3bb88     0C BC 03 00 | 	long	@@@__system__dat_ + 868
3bb8c     25 BC 03 00 | 	long	@@@__system__dat_ + 893
3bb90     40 BC 03 00 | 	long	@@@__system__dat_ + 920
3bb94     5A BC 03 00 | 	long	@@@__system__dat_ + 946
3bb98     6A BC 03 00 | 	long	@@@__system__dat_ + 962
3bb9c     7C BC 03 00 | 	long	@@@__system__dat_ + 980
3bba0     8E BC 03 00 | 	long	@@@__system__dat_ + 998
3bba4     A0 BC 03 00 | 	long	@@@__system__dat_ + 1016
3bba8     AC BC 03 00 | 	long	@@@__system__dat_ + 1028
3bbac     BD BC 03 00 | 	long	@@@__system__dat_ + 1045
3bbb0     D1 BC 03 00 | 	long	@@@__system__dat_ + 1065
3bbb4     DB BC 03 00 | 	long	@@@__system__dat_ + 1075
3bbb8     EB BC 03 00 | 	long	@@@__system__dat_ + 1091
3bbbc     FA BC 03 00 | 	long	@@@__system__dat_ + 1106
3bbc0     10 BD 03 00 | 	long	@@@__system__dat_ + 1128
3bbc4     29 BD 03 00 | 	long	@@@__system__dat_ + 1153
3bbc8     3D BD 03 00 | 	long	@@@__system__dat_ + 1173
3bbcc     4B BD 03 00 | 	long	@@@__system__dat_ + 1187
3bbd0     5F BD 03 00 | 	long	@@@__system__dat_ + 1207
3bbd4     6B BD 03 00 | 	long	@@@__system__dat_ + 1219
3bbd8     7D BD 03 00 | 	long	@@@__system__dat_ + 1237
3bbdc     95 BD 03 00 | 	long	@@@__system__dat_ + 1261
3bbe0     A7 BD 03 00 | 	long	@@@__system__dat_ + 1279
3bbe4     BA BD 03 00 | 	long	@@@__system__dat_ + 1298
3bbe8     4F 4B 00 4E 
3bbec     75 6D 65 72 
3bbf0     69 63 61 6C 
3bbf4     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3bbf8     75 6D 65 6E 
3bbfc     74 20 6F 75 
3bc00     74 20 6F 66 
3bc04     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3bc08     61 69 6E 00 
3bc0c     52 65 73 75 
3bc10     6C 74 20 6E 
3bc14     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3bc18     65 70 72 65 
3bc1c     73 65 6E 74 
3bc20     61 62 6C 65 
3bc24     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3bc28     65 67 61 6C 
3bc2c     20 6D 75 6C 
3bc30     74 69 62 79 
3bc34     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3bc38     65 71 75 65 
3bc3c     6E 63 65 00 
3bc40     4E 6F 20 73 
3bc44     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3bc48     66 69 6C 65 
3bc4c     20 6F 72 20 
3bc50     64 69 72 65 
3bc54     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3bc58     79 00 42 61 
3bc5c     64 20 66 69 
3bc60     6C 65 20 6E 
3bc64     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3bc68     72 00 50 65 
3bc6c     72 6D 69 73 
3bc70     73 69 6F 6E 
3bc74     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3bc78     69 65 64 00 
3bc7c     4E 6F 74 20 
3bc80     65 6E 6F 75 
3bc84     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3bc88     65 6D 6F 72 
3bc8c     79 00 54 65 
3bc90     6D 70 6F 72 
3bc94     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3bc98     66 61 69 6C 
3bc9c     75 72 65 00 
3bca0     46 69 6C 65 
3bca4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3bca8     73 74 73 00 
3bcac     49 6E 76 61 
3bcb0     6C 69 64 20 
3bcb4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3bcb8     6D 65 6E 74 
3bcbc     00 54 6F 6F 
3bcc0     20 6D 61 6E 
3bcc4     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3bcc8     65 6E 20 66 
3bccc     69 6C 65 73 
3bcd0     00 49 2F 4F 
3bcd4     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3bcd8     6F 72 00 4E 
3bcdc     6F 74 20 61 
3bce0     20 64 69 72 
3bce4     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3bce8     72 79 00 49 
3bcec     73 20 61 20 
3bcf0     64 69 72 65 
3bcf4     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3bcf8     79 00 52 65 
3bcfc     61 64 20 6F 
3bd00     6E 6C 79 20 
3bd04     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3bd08     20 73 79 73 
3bd0c     74 65 6D 00 
3bd10     46 75 6E 63 
3bd14     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3bd18     20 6E 6F 74 
3bd1c     20 69 6D 70 
3bd20     6C 65 6D 65 
3bd24     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3bd28     00 44 69 72 
3bd2c     65 63 74 6F 
3bd30     72 79 20 6E 
3bd34     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3bd38     6D 70 74 79 
3bd3c     00 4E 61 6D 
3bd40     65 20 74 6F 
3bd44     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3bd48     6E 67 00 44 
3bd4c     65 76 69 63 
3bd50     65 20 6E 6F 
3bd54     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3bd58     65 6B 61 62 
3bd5c     6C 65 00 42 
3bd60     61 64 20 61 
3bd64     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3bd68     73 73 00 42 
3bd6c     72 6F 6B 65 
3bd70     6E 20 63 6F 
3bd74     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3bd78     74 69 6F 6E 
3bd7c     00 44 65 76 
3bd80     69 63 65 20 
3bd84     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3bd88     65 73 6F 75 
3bd8c     72 63 65 20 
3bd90     62 75 73 79 
3bd94     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3bd98     73 73 20 64 
3bd9c     65 76 69 63 
3bda0     65 20 6C 69 
3bda4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3bda8     6F 20 73 70 
3bdac     61 63 65 20 
3bdb0     6F 6E 20 64 
3bdb4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3bdb8     65 00 55 6E 
3bdbc     6B 6E 6F 77 
3bdc0     6E 20 65 72 
3bdc4     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3bdc8     00 00 00 00 
3bdcc     00 00 00 00 
3bdd0     00 00 00 00 | 	byte	$00[12]
3bdd4     05 00 00 00 
3bdd8     00 00 00 00 
3bddc     00 00 00 00 
3bde0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bde4     00 00 00 00 | 	byte	$00, $00, $00, $00
3bde8     00 00 00 0B | 	long	(176 {__system___tx})<<20
3bdec     00 00 10 0B | 	long	(177 {__system___rx})<<20
3bdf0     00 00 00 00 | 	byte	$00, $00, $00, $00
3bdf4     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0729})<<20
3bdf8     00 00 30 0B | 	long	(179 {__system____dummy_flush_0730})<<20
3bdfc     00 00 00 00 
3be00     00 00 00 00 | 	byte	$00[8]
3be04     01 00 00 00 
3be08     06 00 00 00 
3be0c     00 00 00 00 
3be10     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be14     00 00 00 00 
3be18     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3be1c     00 00 00 0B | 	long	(176 {__system___tx})<<20
3be20     00 00 10 0B | 	long	(177 {__system___rx})<<20
3be24     00 00 00 00 | 	byte	$00, $00, $00, $00
3be28     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0729})<<20
3be2c     00 00 30 0B | 	long	(179 {__system____dummy_flush_0730})<<20
3be30     00 00 00 00 
3be34     00 00 00 00 | 	byte	$00[8]
3be38     01 00 00 00 
3be3c     06 00 00 00 
3be40     00 00 00 00 
3be44     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be48     00 00 00 00 
3be4c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3be50     00 00 00 0B | 	long	(176 {__system___tx})<<20
3be54     00 00 10 0B | 	long	(177 {__system___rx})<<20
3be58     00 00 00 00 | 	byte	$00, $00, $00, $00
3be5c     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0729})<<20
3be60     00 00 30 0B | 	long	(179 {__system____dummy_flush_0730})<<20
3be64     00 00 00 00 
      ...             
3bfd4     00 00 00 00 
3bfd8     00 00 00 00 | 	byte	$00[376]
3bfdc     E0 BF 03 00 | 	long	@@@__system__dat_ + 1848
3bfe0     00 00 00 00 
3bfe4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3bfe8                 | 	alignl
3bfe8                 | _fatfs_cc_dat_
3bfe8     C7 00 FC 00 
3bfec     E9 00 E2 00 
3bff0     E4 00 E0 00 
3bff4     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3bff8     EA 00 EB 00 
3bffc     E8 00 EF 00 
3c000     EE 00 EC 00 
3c004     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3c008     C9 00 E6 00 
3c00c     C6 00 F4 00 
3c010     F6 00 F2 00 
3c014     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3c018     FF 00 D6 00 
3c01c     DC 00 F8 00 
3c020     A3 00 D8 00 
3c024     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3c028     E1 00 ED 00 
3c02c     F3 00 FA 00 
3c030     F1 00 D1 00 
3c034     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3c038     BF 00 AE 00 
3c03c     AC 00 BD 00 
3c040     BC 00 A1 00 
3c044     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3c048     91 25 92 25 
3c04c     93 25 02 25 
3c050     24 25 C1 00 
3c054     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3c058     A9 00 63 25 
3c05c     51 25 57 25 
3c060     5D 25 A2 00 
3c064     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3c068     14 25 34 25 
3c06c     2C 25 1C 25 
3c070     00 25 3C 25 
3c074     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3c078     5A 25 54 25 
3c07c     69 25 66 25 
3c080     60 25 50 25 
3c084     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3c088     F0 00 D0 00 
3c08c     CA 00 CB 00 
3c090     C8 00 31 01 
3c094     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3c098     CF 00 18 25 
3c09c     0C 25 88 25 
3c0a0     84 25 A6 00 
3c0a4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3c0a8     D3 00 DF 00 
3c0ac     D4 00 D2 00 
3c0b0     F5 00 D5 00 
3c0b4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3c0b8     DE 00 DA 00 
3c0bc     DB 00 D9 00 
3c0c0     FD 00 DD 00 
3c0c4     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3c0c8     AD 00 B1 00 
3c0cc     17 20 BE 00 
3c0d0     B6 00 A7 00 
3c0d4     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3c0d8     B0 00 A8 00 
3c0dc     B7 00 B9 00 
3c0e0     B3 00 B2 00 
3c0e4     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3c0e8     61 00 1A 03 
3c0ec     E0 00 17 03 
3c0f0     F8 00 07 03 
3c0f4     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3c0f8     78 01 00 01 
3c0fc     30 01 32 01 
3c100     06 01 39 01 
3c104     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3c108     2E 01 79 01 
3c10c     06 01 80 01 
3c110     4D 00 43 02 
3c114     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3c118     82 01 84 01 
3c11c     84 01 86 01 
3c120     87 01 87 01 
3c124     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3c128     8B 01 8B 01 
3c12c     8D 01 8E 01 
3c130     8F 01 90 01 
3c134     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3c138     93 01 94 01 
3c13c     F6 01 96 01 
3c140     97 01 98 01 
3c144     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3c148     9B 01 9C 01 
3c14c     9D 01 20 02 
3c150     9F 01 A0 01 
3c154     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3c158     A2 01 A4 01 
3c15c     A4 01 A6 01 
3c160     A7 01 A7 01 
3c164     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3c168     AB 01 AC 01 
3c16c     AC 01 AE 01 
3c170     AF 01 AF 01 
3c174     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3c178     B3 01 B3 01 
3c17c     B5 01 B5 01 
3c180     B7 01 B8 01 
3c184     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3c188     BB 01 BC 01 
3c18c     BC 01 BE 01 
3c190     F7 01 C0 01 
3c194     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3c198     C3 01 C4 01 
3c19c     C5 01 C4 01 
3c1a0     C7 01 C8 01 
3c1a4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3c1a8     CB 01 CA 01 
3c1ac     CD 01 10 01 
3c1b0     DD 01 01 00 
3c1b4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3c1b8     12 01 F3 01 
3c1bc     03 00 F1 01 
3c1c0     F4 01 F4 01 
3c1c4     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3c1c8     22 02 12 01 
3c1cc     3A 02 09 00 
3c1d0     65 2C 3B 02 
3c1d4     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3c1d8     66 2C 3F 02 
3c1dc     40 02 41 02 
3c1e0     41 02 46 02 
3c1e4     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3c1e8     40 00 81 01 
3c1ec     86 01 55 02 
3c1f0     89 01 8A 01 
3c1f4     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3c1f8     5A 02 90 01 
3c1fc     5C 02 5D 02 
3c200     5E 02 5F 02 
3c204     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3c208     62 02 94 01 
3c20c     64 02 65 02 
3c210     66 02 67 02 
3c214     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3c218     6A 02 62 2C 
3c21c     6C 02 6D 02 
3c220     6E 02 9C 01 
3c224     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3c228     9D 01 73 02 
3c22c     74 02 9F 01 
3c230     76 02 77 02 
3c234     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3c238     7A 02 7B 02 
3c23c     7C 02 64 2C 
3c240     7E 02 7F 02 
3c244     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3c248     82 02 A9 01 
3c24c     84 02 85 02 
3c250     86 02 87 02 
3c254     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3c258     B1 01 B2 01 
3c25c     45 02 8D 02 
3c260     8E 02 8F 02 
3c264     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3c268     B7 01 7B 03 
3c26c     03 00 FD 03 
3c270     FE 03 FF 03 
3c274     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3c278     86 03 88 03 
3c27c     89 03 8A 03 
3c280     B1 03 11 03 
3c284     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3c288     A3 03 A3 03 
3c28c     C4 03 08 03 
3c290     CC 03 03 00 
3c294     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3c298     8F 03 D8 03 
3c29c     18 01 F2 03 
3c2a0     0A 00 F9 03 
3c2a4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3c2a8     F5 03 F6 03 
3c2ac     F7 03 F7 03 
3c2b0     F9 03 FA 03 
3c2b4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3c2b8     20 03 50 04 
3c2bc     10 07 60 04 
3c2c0     22 01 8A 04 
3c2c4     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3c2c8     0E 01 CF 04 
3c2cc     01 00 C0 04 
3c2d0     D0 04 44 01 
3c2d4     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3c2d8     00 00 7D 1D 
3c2dc     01 00 63 2C 
3c2e0     00 1E 96 01 
3c2e4     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3c2e8     00 1F 08 06 
3c2ec     10 1F 06 06 
3c2f0     20 1F 08 06 
3c2f4     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3c2f8     40 1F 06 06 
3c2fc     51 1F 07 00 
3c300     59 1F 52 1F 
3c304     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3c308     5D 1F 56 1F 
3c30c     5F 1F 60 1F 
3c310     08 06 70 1F 
3c314     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3c318     BB 1F C8 1F 
3c31c     C9 1F CA 1F 
3c320     CB 1F DA 1F 
3c324     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3c328     F9 1F EA 1F 
3c32c     EB 1F FA 1F 
3c330     FB 1F 80 1F 
3c334     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3c338     08 06 A0 1F 
3c33c     08 06 B0 1F 
3c340     04 00 B8 1F 
3c344     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3c348     BC 1F CC 1F 
3c34c     01 00 C3 1F 
3c350     D0 1F 02 06 
3c354     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3c358     E5 1F 01 00 
3c35c     EC 1F F3 1F 
3c360     01 00 FC 1F 
3c364     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3c368     32 21 70 21 
3c36c     10 02 84 21 
3c370     01 00 83 21 
3c374     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3c378     30 2C 2F 04 
3c37c     60 2C 02 01 
3c380     67 2C 06 01 
3c384     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3c388     80 2C 64 01 
3c38c     00 2D 26 08 
3c390     41 FF 1A 03 
3c394     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3c398     05 07 09 0E 
3c39c     10 12 14 16 
3c3a0     18 1C 1E 43 
3c3a4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3c3a8     41 41 43 45 
3c3ac     45 45 49 49 
3c3b0     49 41 41 45 
3c3b4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3c3b8     4F 55 55 59 
3c3bc     4F 55 4F 9C 
3c3c0     4F 9E 9F 41 
3c3c4     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3c3c8     A5 A6 A7 A8 
3c3cc     A9 AA AB AC 
3c3d0     AD AE AF B0 
3c3d4     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3c3d8     41 41 41 B8 
3c3dc     B9 BA BB BC 
3c3e0     BD BE BF C0 
3c3e4     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3c3e8     C5 41 41 C8 
3c3ec     C9 CA CB CC 
3c3f0     CD CE CF D1 
3c3f4     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3c3f8     49 49 49 49 
3c3fc     D9 DA DB DC 
3c400     DD 49 DF 4F 
3c404     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3c408     4F E6 E8 E8 
3c40c     55 55 55 59 
3c410     59 EE EF F0 
3c414     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3c418     F5 F6 F7 F8 
3c41c     F9 FA FB FC 
3c420     FD FE FF 00 
3c424     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3c428     00 00 00 00 | 	byte	$00, $00, $00, $00
3c42c     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_close})<<20
3c430     00 00 00 0A | 	long	(160 {_fatfs_cc_v_read})<<20
3c434     00 00 10 0A | 	long	(161 {_fatfs_cc_v_write})<<20
3c438     00 00 20 0A | 	long	(162 {_fatfs_cc_v_lseek})<<20
3c43c     00 00 30 0A | 	long	(163 {_fatfs_cc_v_ioctl})<<20
3c440     00 00 40 0B | 	long	(180 {_fatfs_cc_v_flush})<<20
3c444     00 00 00 00 
3c448     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c44c     00 00 40 0A | 	long	(164 {_fatfs_cc_v_open})<<20
3c450     00 00 50 0A | 	long	(165 {_fatfs_cc_v_creat})<<20
3c454     00 00 60 0A | 	long	(166 {_fatfs_cc_v_opendir})<<20
3c458     00 00 70 0A | 	long	(167 {_fatfs_cc_v_closedir})<<20
3c45c     00 00 80 0A | 	long	(168 {_fatfs_cc_v_readdir})<<20
3c460     00 00 90 0A | 	long	(169 {_fatfs_cc_v_stat})<<20
3c464     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_mkdir})<<20
3c468     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rmdir})<<20
3c46c     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_remove})<<20
3c470     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_rename})<<20
3c474     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_init})<<20
3c478     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_deinit})<<20
3c47c     FF FF FF FF 
3c480     1F 00 00 00 
3c484     1C 00 00 00 
3c488     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3c48c     1E 00 00 00 
3c490     1F 00 00 00 
3c494     1E 00 00 00 
3c498     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3c49c     1F 00 00 00 
3c4a0     1E 00 00 00 
3c4a4     1F 00 00 00 
3c4a8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3c4ac     1F 00 00 00 
3c4b0     00 00 00 00 
3c4b4     1F 00 00 00 
3c4b8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3c4bc     5A 00 00 00 
3c4c0     78 00 00 00 
3c4c4     97 00 00 00 
3c4c8     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3c4cc     D4 00 00 00 
3c4d0     F3 00 00 00 
3c4d4     11 01 00 00 
3c4d8     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3c4dc     4E 01 00 00 
3c4e0     6D 01 00 00 
3c4e4     FF FF FF FF 
3c4e8     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3c4ec     00 00 00 00 
      ...             
3c504     00 00 00 00 
3c508     00 00 00 00 | 	byte	$00[32]
3c50c     2A C5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3c510     2E C5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3c514     00 00 00 00 
3c518     00 00 00 00 
3c51c     00 00 00 00 
3c520     00 00 00 00 
3c524     00 00       | 	byte	$00[18]
3c526     3F 3F 3F 00 
3c52a     55 43 54 00 
3c52e     55 43 54 00 
3c532     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3c536     00 00 00 00 
3c53a     00 00 00    | 	byte	$00[7]
3c53d     CA 9A 3B 00 
3c541     00 00 00 01 
3c545     01 01 01 01 
3c549     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3c54d     91 11 11 11 
3c551     11 01 01 01 
3c555     01 01 01 01 
3c559     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3c55d     01 01 01 01 
3c561     01 01 01    | 	byte	$01[7]
3c564     90 20 20 20 
3c568     20 20 20 20 
3c56c     20 20 20 20 
3c570     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3c574     42 42 42 42 
3c578     42 42 42 42 
3c57c     42 42       | 	byte	$42[10]
3c57e     20 20 20 20 
3c582     20 20 20    | 	byte	$20[7]
3c585     44 44 44 44 
3c589     44 44       | 	byte	$44[6]
3c58b     04 04 04 04 
3c58f     04 04 04 04 
3c593     04 04 04 04 
3c597     04 04 04 04 
3c59b     04 04 04 04 | 	byte	$04[20]
3c59f     20 20 20 20 
3c5a3     20 20       | 	byte	$20[6]
3c5a5     48 48 48 48 
3c5a9     48 48       | 	byte	$48[6]
3c5ab     08 08 08 08 
3c5af     08 08 08 08 
3c5b3     08 08 08 08 
3c5b7     08 08 08 08 
3c5bb     08 08 08 08 | 	byte	$08[20]
3c5bf     20 20 20 20 
3c5c3     01 00 00 00 
3c5c7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3c5c8                 | __methodtable__
3c5c8     84 39 01 00 | 	long	@_do_no_command
3c5cc     18 B8 01 00 | 	long	@_do_plus
3c5d0     3C A8 01 00 | 	long	@_do_minus
3c5d4     00 B7 01 00 | 	long	@_do_or
3c5d8     BC AE 01 00 | 	long	@_do_mul
3c5dc     24 93 01 00 | 	long	@_do_fdiv
3c5e0     14 8B 01 00 | 	long	@_do_and
3c5e4     2C 8C 01 00 | 	long	@_do_div
3c5e8     9C AC 01 00 | 	long	@_do_mod
3c5ec     CC BE 01 00 | 	long	@_do_shl
3c5f0     E4 BF 01 00 | 	long	@_do_shr
3c5f4     04 BD 01 00 | 	long	@_do_power
3c5f8     6C 81 01 00 | 	long	@_do_getvar
3c5fc     FC 54 01 00 | 	long	@_do_push
3c600     64 7B 01 00 | 	long	@_do_assign
3c604     A8 DE 00 00 | 	long	@_do_cls
3c608     9C 33 01 00 | 	long	@_do_new
3c60c     40 4D 01 00 | 	long	@_do_plot
3c610     A8 00 01 00 | 	long	@_do_draw
3c614     A8 4F 01 00 | 	long	@_do_print
3c618     88 DC 00 00 | 	long	@_do_circle
3c61c     DC 02 01 00 | 	long	@_do_fcircle
3c620     7C CB 00 00 | 	long	@_do_box
3c624     C0 07 01 00 | 	long	@_do_frame
3c628     E8 DE 00 00 | 	long	@_do_color
3c62c     50 05 01 00 | 	long	@_do_for
3c630     BC 35 01 00 | 	long	@_do_next
3c634     C8 21 01 00 | 	long	@_do_list
3c638     54 61 01 00 | 	long	@_do_run
3c63c     04 02 01 00 | 	long	@_do_error
3c640     D8 13 01 00 | 	long	@_do_fast_goto
3c644     C8 14 01 00 | 	long	@_do_find_goto
3c648     DC 16 01 00 | 	long	@_do_slow_goto
3c64c     94 39 01 00 | 	long	@_do_nothing
3c650     84 C0 00 00 | 	long	@_test_csave
3c654     08 65 01 00 | 	long	@_do_save
3c658     64 24 01 00 | 	long	@_do_load
3c65c     7C 40 01 00 | 	long	@_do_pinwrite
3c660     A4 78 01 00 | 	long	@_do_waitms
3c664     D8 79 01 00 | 	long	@_do_waitvbl
3c668     D0 19 01 00 | 	long	@_do_if
3c66c     9C 01 01 00 | 	long	@_do_else
3c670     4C 8E 01 00 | 	long	@_do_eq
3c674     EC 94 01 00 | 	long	@_do_ge
3c678     9C 9E 01 00 | 	long	@_do_le
3c67c     C4 99 01 00 | 	long	@_do_gt
3c680     74 A3 01 00 | 	long	@_do_lt
3c684     28 B2 01 00 | 	long	@_do_ne
3c688     BC 5E 01 00 | 	long	@_do_rnd
3c68c     64 CD 00 00 | 	long	@_do_brun
3c690     04 C9 00 00 | 	long	@_do_beep
3c694     38 F9 00 00 | 	long	@_do_dir
3c698     B0 3C 01 00 | 	long	@_do_paper
3c69c     8C 1D 01 00 | 	long	@_do_ink
3c6a0     D4 04 01 00 | 	long	@_do_font
3c6a4     AC 2E 01 00 | 	long	@_do_mode
3c6a8     58 32 01 00 | 	long	@_do_mouse
3c6ac     58 12 01 00 | 	long	@_do_gettime
3c6b0     44 E0 00 00 | 	long	@_do_cursor
3c6b4     00 DE 00 00 | 	long	@_do_click
3c6b8     14 33 01 00 | 	long	@_do_mousex
3c6bc     58 33 01 00 | 	long	@_do_mousey
3c6c0     8C 32 01 00 | 	long	@_do_mousek
3c6c4     D0 32 01 00 | 	long	@_do_mousew
3c6c8     54 6E 01 00 | 	long	@_do_sin
3c6cc     44 71 01 00 | 	long	@_do_stick
3c6d0     D4 72 01 00 | 	long	@_do_strig
3c6d4     64 6F 01 00 | 	long	@_do_sprite
3c6d8     60 F4 00 00 | 	long	@_do_defsprite
3c6dc     04 11 01 00 | 	long	@_do_getpixel
3c6e0     80 78 01 00 | 	long	@_do_waitclock
3c6e4     EC AB 01 00 | 	long	@_do_negative
3c6e8     80 5B 01 00 | 	long	@_do_rdpin
3c6ec     E0 60 01 00 | 	long	@_do_rqpin
3c6f0     A8 3E 01 00 | 	long	@_do_pinread
3c6f4     E4 79 01 00 | 	long	@_do_wrpin
3c6f8     64 7A 01 00 | 	long	@_do_wxpin
3c6fc     E4 7A 01 00 | 	long	@_do_wypin
3c700     E8 3D 01 00 | 	long	@_do_pinfloat
3c704     68 3E 01 00 | 	long	@_do_pinlo
3c708     28 3E 01 00 | 	long	@_do_pinhi
3c70c     2C 3F 01 00 | 	long	@_do_pinstart
3c710     3C 40 01 00 | 	long	@_do_pintoggle
3c714     20 4F 01 00 | 	long	@_do_position
3c718     20 DF 00 00 | 	long	@_do_cos
3c71c     64 74 01 00 | 	long	@_do_tan
3c720     EC C7 00 00 | 	long	@_do_atn
3c724     DC C6 00 00 | 	long	@_do_asin
3c728     6C C4 00 00 | 	long	@_do_acos
3c72c     50 70 01 00 | 	long	@_do_sqr
3c730     C0 03 01 00 | 	long	@_do_fill
3c734     74 EB 00 00 | 	long	@_do_defsnd
3c738     78 E0 00 00 | 	long	@_do_defenv
3c73c     58 5B 01 00 | 	long	@_do_rad
3c740     D4 F7 00 00 | 	long	@_do_deg
3c744     0C 1E 01 00 | 	long	@_do_int
3c748     04 41 01 00 | 	long	@_do_play
3c74c     AC 68 01 00 | 	long	@_do_setdelay
3c750     54 69 01 00 | 	long	@_do_setenv
3c754     FC 69 01 00 | 	long	@_do_setlen
3c758     A4 6A 01 00 | 	long	@_do_setpan
3c75c     F4 6B 01 00 | 	long	@_do_setvol
3c760     9C 6C 01 00 | 	long	@_do_setwave
3c764     4C 6B 01 00 | 	long	@_do_setsustain
3c768     EC 5B 01 00 | 	long	@_do_release
3c76c     F0 0E 01 00 | 	long	@_do_getenvsustain
3c770     10 4E 01 00 | 	long	@_do_poke
3c774     D0 FF 00 00 | 	long	@_do_dpoke
3c778     3C 2B 01 00 | 	long	@_do_lpoke
3c77c     38 3D 01 00 | 	long	@_do_peek
3c780     24 FF 00 00 | 	long	@_do_dpeek
3c784     90 2A 01 00 | 	long	@_do_lpeek
3c788     E8 08 01 00 | 	long	@_do_fre
3c78c     00 10 01 00 | 	long	@_do_getnotevalue
3c790     24 87 01 00 | 	long	@_do_getaddr
3c794     B4 1A 01 00 | 	long	@_do_inkey
3c798     EC C3 00 00 | 	long	@_do_abs
3c79c     6C 18 01 00 | 	long	@_do_hex
3c7a0     18 CA 00 00 | 	long	@_do_bin
3c7a4     74 75 01 00 | 	long	@_do_val
3c7a8     88 DB 00 00 | 	long	@_do_chr
3c7ac     7C C5 00 00 | 	long	@_do_asc
3c7b0     C8 1E 01 00 | 	long	@_do_left
3c7b4     30 5D 01 00 | 	long	@_do_right
3c7b8     14 2C 01 00 | 	long	@_do_mid
3c7bc     54 20 01 00 | 	long	@_do_len
3c7c0     C0 12 01 00 | 	long	@_do_gosub
3c7c4     84 5C 01 00 | 	long	@_do_return
3c7c8     C0 01 01 00 | 	long	@_do_end
3c7cc     E8 4E 01 00 | 	long	@_do_pop
3c7d0     14 29 01 00 | 	long	@_do_log
3c7d4     7C D9 00 00 | 	long	@_do_changevol
3c7d8     5C DA 00 00 | 	long	@_do_changewav
3c7dc     6C D8 00 00 | 	long	@_do_changepan
3c7e0     50 D5 00 00 | 	long	@_do_changefreq
3c7e4     44 6D 01 00 | 	long	@_do_shutup
3c7e8     8C 60 01 00 | 	long	@_do_round
3c7ec     F4 01 01 00 | 	long	@_do_enter
3c7f0     98 39 01 00 | 	long	@_do_open
3c7f4     2C DE 00 00 | 	long	@_do_close
3c7f8     4C 09 01 00 | 	long	@_do_get
3c7fc     18 56 01 00 | 	long	@_do_put
3c800     9C CF 00 00 | 	long	@_do_cd
3c804     FC F7 00 00 | 	long	@_do_delete
3c808     E0 2D 01 00 | 	long	@_do_mkdir
3c80c     BC FD 01 00 | 	long	@_hg010b_spin2_putchar
3c810     00 10 03 00 | 	long	@__struct___bas_wrap_sender_tx
3c814     44 10 03 00 | 	long	@__struct___bas_wrap_sender_rx
3c818     8C 10 03 00 | 	long	@__struct___bas_wrap_sender_close
3c81c     30 0F 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3c820     A0 0F 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3c824     E8 0E 03 00 | 	long	@___strs_cl_pfunc
3c828     7C 6C 02 00 | 	long	@__system____root_opendir
3c82c     18 6D 02 00 | 	long	@__system____root_closedir
3c830     94 6C 02 00 | 	long	@__system____root_readdir
3c834     20 6D 02 00 | 	long	@__system____root_stat
3c838     AC 64 02 00 | 	long	@__system____default_putc
3c83c     30 64 02 00 | 	long	@__system____default_getc
3c840     54 65 02 00 | 	long	@__system____default_flush
3c844     EC F9 02 00 | 	long	@_fatfs_cc_v_close
3c848     08 FE 02 00 | 	long	@_fatfs_cc_v_read
3c84c     1C FF 02 00 | 	long	@_fatfs_cc_v_write
3c850     FC FF 02 00 | 	long	@_fatfs_cc_v_lseek
3c854     84 00 03 00 | 	long	@_fatfs_cc_v_ioctl
3c858     D8 00 03 00 | 	long	@_fatfs_cc_v_open
3c85c     50 F9 02 00 | 	long	@_fatfs_cc_v_creat
3c860     30 FA 02 00 | 	long	@_fatfs_cc_v_opendir
3c864     A4 FA 02 00 | 	long	@_fatfs_cc_v_closedir
3c868     E4 FA 02 00 | 	long	@_fatfs_cc_v_readdir
3c86c     18 FC 02 00 | 	long	@_fatfs_cc_v_stat
3c870     98 00 03 00 | 	long	@_fatfs_cc_v_mkdir
3c874     B8 00 03 00 | 	long	@_fatfs_cc_v_rmdir
3c878     A8 00 03 00 | 	long	@_fatfs_cc_v_remove
3c87c     C8 00 03 00 | 	long	@_fatfs_cc_v_rename
3c880     E8 01 03 00 | 	long	@_fatfs_cc_v_init
3c884     F0 01 03 00 | 	long	@_fatfs_cc_v_deinit
3c888     BC 16 02 00 | 	long	@__system___tx
3c88c     FC 16 02 00 | 	long	@__system___rx
3c890     8C 78 02 00 | 	long	@__system___rxtxioctl_0729
3c894     E4 78 02 00 | 	long	@__system____dummy_flush_0730
3c898     B8 01 03 00 | 	long	@_fatfs_cc_v_flush
3c89c                 | __heap_base
3c89c     00 00 00 00 
      ...             
6b69c     00 00 00 00 
6b6a0     00 00 00 00 | 	long	0[48002]
6b6a4                 | objmem
6b6a4     00 00 00 00 
      ...             
75ac8     00 00 00 00 
75acc     00 00 00 00 | 	long	0[10507]
75ad0                 | stackspace
75ad0     00 00 00 00 | 	long	0[1]
75ad4 100             | 	org	COG_BSS_START
75ad4 100             | _var01
75ad4 100             | 	res	1
75ad4 101             | _var02
75ad4 101             | 	res	1
75ad4 102             | _var03
75ad4 102             | 	res	1
75ad4 103             | _var04
75ad4 103             | 	res	1
75ad4 104             | _var05
75ad4 104             | 	res	1
75ad4 105             | _var06
75ad4 105             | 	res	1
75ad4 106             | _var07
75ad4 106             | 	res	1
75ad4 107             | _var08
75ad4 107             | 	res	1
75ad4 108             | _var09
75ad4 108             | 	res	1
75ad4 109             | arg01
75ad4 109             | 	res	1
75ad4 10a             | arg02
75ad4 10a             | 	res	1
75ad4 10b             | arg03
75ad4 10b             | 	res	1
75ad4 10c             | arg04
75ad4 10c             | 	res	1
75ad4 10d             | arg05
75ad4 10d             | 	res	1
75ad4 10e             | arg06
75ad4 10e             | 	res	1
75ad4 10f             | local01
75ad4 10f             | 	res	1
75ad4 110             | local02
75ad4 110             | 	res	1
75ad4 111             | local03
75ad4 111             | 	res	1
75ad4 112             | local04
75ad4 112             | 	res	1
75ad4 113             | local05
75ad4 113             | 	res	1
75ad4 114             | local06
75ad4 114             | 	res	1
75ad4 115             | local07
75ad4 115             | 	res	1
75ad4 116             | local08
75ad4 116             | 	res	1
75ad4 117             | local09
75ad4 117             | 	res	1
75ad4 118             | local10
75ad4 118             | 	res	1
75ad4 119             | local11
75ad4 119             | 	res	1
75ad4 11a             | local12
75ad4 11a             | 	res	1
75ad4 11b             | local13
75ad4 11b             | 	res	1
75ad4 11c             | local14
75ad4 11c             | 	res	1
75ad4 11d             | local15
75ad4 11d             | 	res	1
75ad4 11e             | local16
75ad4 11e             | 	res	1
75ad4 11f             | local17
75ad4 11f             | 	res	1
75ad4 120             | local18
75ad4 120             | 	res	1
75ad4 121             | local19
75ad4 121             | 	res	1
75ad4 122             | local20
75ad4 122             | 	res	1
75ad4 123             | local21
75ad4 123             | 	res	1
75ad4 124             | local22
75ad4 124             | 	res	1
75ad4 125             | local23
75ad4 125             | 	res	1
75ad4 126             | local24
75ad4 126             | 	res	1
75ad4 127             | local25
75ad4 127             | 	res	1
75ad4 128             | local26
75ad4 128             | 	res	1
75ad4 129             | local27
75ad4 129             | 	res	1
75ad4 12a             | local28
75ad4 12a             | 	res	1
75ad4 12b             | local29
75ad4 12b             | 	res	1
75ad4 12c             | local30
75ad4 12c             | 	res	1
75ad4 12d             | local31
75ad4 12d             | 	res	1
75ad4 12e             | local32
75ad4 12e             | 	res	1
75ad4 12f             | local33
75ad4 12f             | 	res	1
75ad4 130             | local34
75ad4 130             | 	res	1
75ad4 131             | local35
75ad4 131             | 	res	1
75ad4 132             | local36
75ad4 132             | 	res	1
75ad4 133             | local37
75ad4 133             | 	res	1
75ad4 134             | local38
75ad4 134             | 	res	1
75ad4 135             | local39
75ad4 135             | 	res	1
75ad4 136             | local40
75ad4 136             | 	res	1
75ad4 137             | local41
75ad4 137             | 	res	1
75ad4 138             | local42
75ad4 138             | 	res	1
75ad4 139             | local43
75ad4 139             | 	res	1
75ad4 13a             | local44
75ad4 13a             | 	res	1
75ad4 13b             | local45
75ad4 13b             | 	res	1
75ad4 13c             | local46
75ad4 13c             | 	res	1
75ad4 13d             | local47
75ad4 13d             | 	res	1
75ad4 13e             | local48
75ad4 13e             | 	res	1
75ad4 13f             | local49
75ad4 13f             | 	res	1
75ad4 140             | muldiva_
75ad4 140             | 	res	1
75ad4 141             | muldivb_
75ad4 141             | 	res	1
75ad4 142             | 	fit	480
75ad4 142             | 
